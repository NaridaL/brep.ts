segments, arcs etc have their own points
coincident constraint can have any number of points
parallel constraint too
right angle contraint obviously not

f = a + t d
g = b + s e
d1 e1 + d2 e2 = 0
e1 * e1 + e2 * e2 = 1
 
d1 - k e1 = 0
d2 - k e2 = 0


basic contraints:
	angled segments (parallel, right angle, any)
	point in middle of segment
	coincident point on line
	colinear segments
	tangential arc <-> segment
	
	distance points
	distance two point projected on separate line
	distance point <-> line (perpendicular)
	

2 options for data format:
1:
	lines, arcs, etc implicitly define points: endpoints, (center point)
	disadvantage: disjoint implicit and explicit points
	requires explicit "coincident point" constraint. this fits into the concept however
	
2:
	=> like in blender (?)
	segments are defined between two existing points
	=> coincident points are pointless / redundant
		=> end-to-end segments could have the same point or different points which are coincident
	multiple points can be merged
	spliting points?
		end-to-end segments need to be split...
			=> select both segments, select "disjoin"
		alternative: select point => split => every object dependant on this point gets its own version
			=> super messy, hard to differentiate between the new points which now all occuppy the same space
	