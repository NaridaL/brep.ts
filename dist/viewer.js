(function(l, i, v, e) { v = l.createElement(i); v.async = 1; v.src = '//' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; e = l.getElementsByTagName(i)[0]; e.parentNode.insertBefore(v, e)})(document, 'script');
var viewer = (function (exports,svgPathdata) {
'use strict';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var chroma = createCommonjsModule(function (module, exports) {
/**
 * @license
 *
 * chroma.js - JavaScript library for color conversions
 * 
 * Copyright (c) 2011-2017, Gregor Aisch
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * 3. The name Gregor Aisch may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

(function() {
  var Color, DEG2RAD, LAB_CONSTANTS, PI, PITHIRD, RAD2DEG, TWOPI, _average_lrgb, _guess_formats, _guess_formats_sorted, _input, _interpolators, abs, atan2, bezier, blend, blend_f, brewer, burn, chroma, clip_rgb, cmyk2rgb, colors, cos, css2rgb, darken, dodge, each, floor, hcg2rgb, hex2rgb, hsi2rgb, hsl2css, hsl2rgb, hsv2rgb, interpolate, interpolate_hsx, interpolate_lab, interpolate_lrgb, interpolate_num, interpolate_rgb, lab2lch, lab2rgb, lab_xyz, lch2lab, lch2rgb, lighten, limit, log, luminance_x, m, max, multiply, normal, num2rgb, overlay, pow, rgb2cmyk, rgb2css, rgb2hcg, rgb2hex, rgb2hsi, rgb2hsl, rgb2hsv, rgb2lab, rgb2lch, rgb2luminance, rgb2num, rgb2temperature, rgb2xyz, rgb_xyz, rnd, root, round, screen, sin, sqrt, temperature2rgb, type, unpack, w3cx11, xyz_lab, xyz_rgb,
    slice = [].slice;

  type = (function() {

    /*
    for browser-safe type checking+
    ported from jQuery's $.type
     */
    var classToType, len, name, o, ref;
    classToType = {};
    ref = "Boolean Number String Function Array Date RegExp Undefined Null".split(" ");
    for (o = 0, len = ref.length; o < len; o++) {
      name = ref[o];
      classToType["[object " + name + "]"] = name.toLowerCase();
    }
    return function(obj) {
      var strType;
      strType = Object.prototype.toString.call(obj);
      return classToType[strType] || "object";
    };
  })();

  limit = function(x, min, max) {
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = 1;
    }
    if (x < min) {
      x = min;
    }
    if (x > max) {
      x = max;
    }
    return x;
  };

  unpack = function(args) {
    if (args.length >= 3) {
      return [].slice.call(args);
    } else {
      return args[0];
    }
  };

  clip_rgb = function(rgb) {
    var i, o;
    rgb._clipped = false;
    rgb._unclipped = rgb.slice(0);
    for (i = o = 0; o < 3; i = ++o) {
      if (i < 3) {
        if (rgb[i] < 0 || rgb[i] > 255) {
          rgb._clipped = true;
        }
        if (rgb[i] < 0) {
          rgb[i] = 0;
        }
        if (rgb[i] > 255) {
          rgb[i] = 255;
        }
      } else if (i === 3) {
        if (rgb[i] < 0) {
          rgb[i] = 0;
        }
        if (rgb[i] > 1) {
          rgb[i] = 1;
        }
      }
    }
    if (!rgb._clipped) {
      delete rgb._unclipped;
    }
    return rgb;
  };

  PI = Math.PI, round = Math.round, cos = Math.cos, floor = Math.floor, pow = Math.pow, log = Math.log, sin = Math.sin, sqrt = Math.sqrt, atan2 = Math.atan2, max = Math.max, abs = Math.abs;

  TWOPI = PI * 2;

  PITHIRD = PI / 3;

  DEG2RAD = PI / 180;

  RAD2DEG = 180 / PI;

  chroma = function() {
    if (arguments[0] instanceof Color) {
      return arguments[0];
    }
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, arguments, function(){});
  };

  chroma["default"] = chroma;

  _interpolators = [];

  if (('object' !== "undefined" && module !== null) && (module.exports != null)) {
    module.exports = chroma;
  }

  if (typeof undefined === 'function' && undefined.amd) {
    undefined([], function() {
      return chroma;
    });
  } else {
    root = 'object' !== "undefined" && exports !== null ? exports : this;
    root.chroma = chroma;
  }

  chroma.version = '1.3.5';

  _input = {};

  _guess_formats = [];

  _guess_formats_sorted = false;

  Color = (function() {
    function Color() {
      var arg, args, chk, len, len1, me, mode, o, w;
      me = this;
      args = [];
      for (o = 0, len = arguments.length; o < len; o++) {
        arg = arguments[o];
        if (arg != null) {
          args.push(arg);
        }
      }
      if (args.length > 1) {
        mode = args[args.length - 1];
      }
      if (_input[mode] != null) {
        me._rgb = clip_rgb(_input[mode](unpack(args.slice(0, -1))));
      } else {
        if (!_guess_formats_sorted) {
          _guess_formats = _guess_formats.sort(function(a, b) {
            return b.p - a.p;
          });
          _guess_formats_sorted = true;
        }
        for (w = 0, len1 = _guess_formats.length; w < len1; w++) {
          chk = _guess_formats[w];
          mode = chk.test.apply(chk, args);
          if (mode) {
            break;
          }
        }
        if (mode) {
          me._rgb = clip_rgb(_input[mode].apply(_input, args));
        }
      }
      if (me._rgb == null) {
        console.warn('unknown format: ' + args);
      }
      if (me._rgb == null) {
        me._rgb = [0, 0, 0];
      }
      if (me._rgb.length === 3) {
        me._rgb.push(1);
      }
    }

    Color.prototype.toString = function() {
      return this.hex();
    };

    Color.prototype.clone = function() {
      return chroma(me._rgb);
    };

    return Color;

  })();

  chroma._input = _input;


  /**
  	ColorBrewer colors for chroma.js
  
  	Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The 
  	Pennsylvania State University.
  
  	Licensed under the Apache License, Version 2.0 (the "License"); 
  	you may not use this file except in compliance with the License.
  	You may obtain a copy of the License at	
  	http://www.apache.org/licenses/LICENSE-2.0
  
  	Unless required by applicable law or agreed to in writing, software distributed
  	under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
  	CONDITIONS OF ANY KIND, either express or implied. See the License for the
  	specific language governing permissions and limitations under the License.
  
      @preserve
   */

  chroma.brewer = brewer = {
    OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],
    PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],
    BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],
    Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],
    BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],
    YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],
    YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],
    Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],
    RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],
    Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],
    YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],
    Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],
    GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],
    Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],
    YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],
    PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],
    Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],
    PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],
    Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],
    Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],
    RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],
    RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],
    PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],
    PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],
    RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],
    BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],
    RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],
    PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],
    Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],
    Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],
    Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],
    Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],
    Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],
    Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],
    Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],
    Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2']
  };

  (function() {
    var key, results;
    results = [];
    for (key in brewer) {
      results.push(brewer[key.toLowerCase()] = brewer[key]);
    }
    return results;
  })();


  /**
  	X11 color names
  
  	http://www.w3.org/TR/css3-color/#svg-color
   */

  w3cx11 = {
    aliceblue: '#f0f8ff',
    antiquewhite: '#faebd7',
    aqua: '#00ffff',
    aquamarine: '#7fffd4',
    azure: '#f0ffff',
    beige: '#f5f5dc',
    bisque: '#ffe4c4',
    black: '#000000',
    blanchedalmond: '#ffebcd',
    blue: '#0000ff',
    blueviolet: '#8a2be2',
    brown: '#a52a2a',
    burlywood: '#deb887',
    cadetblue: '#5f9ea0',
    chartreuse: '#7fff00',
    chocolate: '#d2691e',
    coral: '#ff7f50',
    cornflower: '#6495ed',
    cornflowerblue: '#6495ed',
    cornsilk: '#fff8dc',
    crimson: '#dc143c',
    cyan: '#00ffff',
    darkblue: '#00008b',
    darkcyan: '#008b8b',
    darkgoldenrod: '#b8860b',
    darkgray: '#a9a9a9',
    darkgreen: '#006400',
    darkgrey: '#a9a9a9',
    darkkhaki: '#bdb76b',
    darkmagenta: '#8b008b',
    darkolivegreen: '#556b2f',
    darkorange: '#ff8c00',
    darkorchid: '#9932cc',
    darkred: '#8b0000',
    darksalmon: '#e9967a',
    darkseagreen: '#8fbc8f',
    darkslateblue: '#483d8b',
    darkslategray: '#2f4f4f',
    darkslategrey: '#2f4f4f',
    darkturquoise: '#00ced1',
    darkviolet: '#9400d3',
    deeppink: '#ff1493',
    deepskyblue: '#00bfff',
    dimgray: '#696969',
    dimgrey: '#696969',
    dodgerblue: '#1e90ff',
    firebrick: '#b22222',
    floralwhite: '#fffaf0',
    forestgreen: '#228b22',
    fuchsia: '#ff00ff',
    gainsboro: '#dcdcdc',
    ghostwhite: '#f8f8ff',
    gold: '#ffd700',
    goldenrod: '#daa520',
    gray: '#808080',
    green: '#008000',
    greenyellow: '#adff2f',
    grey: '#808080',
    honeydew: '#f0fff0',
    hotpink: '#ff69b4',
    indianred: '#cd5c5c',
    indigo: '#4b0082',
    ivory: '#fffff0',
    khaki: '#f0e68c',
    laserlemon: '#ffff54',
    lavender: '#e6e6fa',
    lavenderblush: '#fff0f5',
    lawngreen: '#7cfc00',
    lemonchiffon: '#fffacd',
    lightblue: '#add8e6',
    lightcoral: '#f08080',
    lightcyan: '#e0ffff',
    lightgoldenrod: '#fafad2',
    lightgoldenrodyellow: '#fafad2',
    lightgray: '#d3d3d3',
    lightgreen: '#90ee90',
    lightgrey: '#d3d3d3',
    lightpink: '#ffb6c1',
    lightsalmon: '#ffa07a',
    lightseagreen: '#20b2aa',
    lightskyblue: '#87cefa',
    lightslategray: '#778899',
    lightslategrey: '#778899',
    lightsteelblue: '#b0c4de',
    lightyellow: '#ffffe0',
    lime: '#00ff00',
    limegreen: '#32cd32',
    linen: '#faf0e6',
    magenta: '#ff00ff',
    maroon: '#800000',
    maroon2: '#7f0000',
    maroon3: '#b03060',
    mediumaquamarine: '#66cdaa',
    mediumblue: '#0000cd',
    mediumorchid: '#ba55d3',
    mediumpurple: '#9370db',
    mediumseagreen: '#3cb371',
    mediumslateblue: '#7b68ee',
    mediumspringgreen: '#00fa9a',
    mediumturquoise: '#48d1cc',
    mediumvioletred: '#c71585',
    midnightblue: '#191970',
    mintcream: '#f5fffa',
    mistyrose: '#ffe4e1',
    moccasin: '#ffe4b5',
    navajowhite: '#ffdead',
    navy: '#000080',
    oldlace: '#fdf5e6',
    olive: '#808000',
    olivedrab: '#6b8e23',
    orange: '#ffa500',
    orangered: '#ff4500',
    orchid: '#da70d6',
    palegoldenrod: '#eee8aa',
    palegreen: '#98fb98',
    paleturquoise: '#afeeee',
    palevioletred: '#db7093',
    papayawhip: '#ffefd5',
    peachpuff: '#ffdab9',
    peru: '#cd853f',
    pink: '#ffc0cb',
    plum: '#dda0dd',
    powderblue: '#b0e0e6',
    purple: '#800080',
    purple2: '#7f007f',
    purple3: '#a020f0',
    rebeccapurple: '#663399',
    red: '#ff0000',
    rosybrown: '#bc8f8f',
    royalblue: '#4169e1',
    saddlebrown: '#8b4513',
    salmon: '#fa8072',
    sandybrown: '#f4a460',
    seagreen: '#2e8b57',
    seashell: '#fff5ee',
    sienna: '#a0522d',
    silver: '#c0c0c0',
    skyblue: '#87ceeb',
    slateblue: '#6a5acd',
    slategray: '#708090',
    slategrey: '#708090',
    snow: '#fffafa',
    springgreen: '#00ff7f',
    steelblue: '#4682b4',
    tan: '#d2b48c',
    teal: '#008080',
    thistle: '#d8bfd8',
    tomato: '#ff6347',
    turquoise: '#40e0d0',
    violet: '#ee82ee',
    wheat: '#f5deb3',
    white: '#ffffff',
    whitesmoke: '#f5f5f5',
    yellow: '#ffff00',
    yellowgreen: '#9acd32'
  };

  chroma.colors = colors = w3cx11;

  lab2rgb = function() {
    var a, args, b, g, l, r, x, y, z;
    args = unpack(arguments);
    l = args[0], a = args[1], b = args[2];
    y = (l + 16) / 116;
    x = isNaN(a) ? y : y + a / 500;
    z = isNaN(b) ? y : y - b / 200;
    y = LAB_CONSTANTS.Yn * lab_xyz(y);
    x = LAB_CONSTANTS.Xn * lab_xyz(x);
    z = LAB_CONSTANTS.Zn * lab_xyz(z);
    r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);
    g = xyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z);
    b = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);
    return [r, g, b, args.length > 3 ? args[3] : 1];
  };

  xyz_rgb = function(r) {
    return 255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow(r, 1 / 2.4) - 0.055);
  };

  lab_xyz = function(t) {
    if (t > LAB_CONSTANTS.t1) {
      return t * t * t;
    } else {
      return LAB_CONSTANTS.t2 * (t - LAB_CONSTANTS.t0);
    }
  };

  LAB_CONSTANTS = {
    Kn: 18,
    Xn: 0.950470,
    Yn: 1,
    Zn: 1.088830,
    t0: 0.137931034,
    t1: 0.206896552,
    t2: 0.12841855,
    t3: 0.008856452
  };

  rgb2lab = function() {
    var b, g, r, ref, ref1, x, y, z;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    ref1 = rgb2xyz(r, g, b), x = ref1[0], y = ref1[1], z = ref1[2];
    return [116 * y - 16, 500 * (x - y), 200 * (y - z)];
  };

  rgb_xyz = function(r) {
    if ((r /= 255) <= 0.04045) {
      return r / 12.92;
    } else {
      return pow((r + 0.055) / 1.055, 2.4);
    }
  };

  xyz_lab = function(t) {
    if (t > LAB_CONSTANTS.t3) {
      return pow(t, 1 / 3);
    } else {
      return t / LAB_CONSTANTS.t2 + LAB_CONSTANTS.t0;
    }
  };

  rgb2xyz = function() {
    var b, g, r, ref, x, y, z;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    r = rgb_xyz(r);
    g = rgb_xyz(g);
    b = rgb_xyz(b);
    x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / LAB_CONSTANTS.Xn);
    y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / LAB_CONSTANTS.Yn);
    z = xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / LAB_CONSTANTS.Zn);
    return [x, y, z];
  };

  chroma.lab = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['lab']), function(){});
  };

  _input.lab = lab2rgb;

  Color.prototype.lab = function() {
    return rgb2lab(this._rgb);
  };

  bezier = function(colors) {
    var I, I0, I1, c, lab0, lab1, lab2, lab3, ref, ref1, ref2;
    colors = (function() {
      var len, o, results;
      results = [];
      for (o = 0, len = colors.length; o < len; o++) {
        c = colors[o];
        results.push(chroma(c));
      }
      return results;
    })();
    if (colors.length === 2) {
      ref = (function() {
        var len, o, results;
        results = [];
        for (o = 0, len = colors.length; o < len; o++) {
          c = colors[o];
          results.push(c.lab());
        }
        return results;
      })(), lab0 = ref[0], lab1 = ref[1];
      I = function(t) {
        var i, lab;
        lab = (function() {
          var o, results;
          results = [];
          for (i = o = 0; o <= 2; i = ++o) {
            results.push(lab0[i] + t * (lab1[i] - lab0[i]));
          }
          return results;
        })();
        return chroma.lab.apply(chroma, lab);
      };
    } else if (colors.length === 3) {
      ref1 = (function() {
        var len, o, results;
        results = [];
        for (o = 0, len = colors.length; o < len; o++) {
          c = colors[o];
          results.push(c.lab());
        }
        return results;
      })(), lab0 = ref1[0], lab1 = ref1[1], lab2 = ref1[2];
      I = function(t) {
        var i, lab;
        lab = (function() {
          var o, results;
          results = [];
          for (i = o = 0; o <= 2; i = ++o) {
            results.push((1 - t) * (1 - t) * lab0[i] + 2 * (1 - t) * t * lab1[i] + t * t * lab2[i]);
          }
          return results;
        })();
        return chroma.lab.apply(chroma, lab);
      };
    } else if (colors.length === 4) {
      ref2 = (function() {
        var len, o, results;
        results = [];
        for (o = 0, len = colors.length; o < len; o++) {
          c = colors[o];
          results.push(c.lab());
        }
        return results;
      })(), lab0 = ref2[0], lab1 = ref2[1], lab2 = ref2[2], lab3 = ref2[3];
      I = function(t) {
        var i, lab;
        lab = (function() {
          var o, results;
          results = [];
          for (i = o = 0; o <= 2; i = ++o) {
            results.push((1 - t) * (1 - t) * (1 - t) * lab0[i] + 3 * (1 - t) * (1 - t) * t * lab1[i] + 3 * (1 - t) * t * t * lab2[i] + t * t * t * lab3[i]);
          }
          return results;
        })();
        return chroma.lab.apply(chroma, lab);
      };
    } else if (colors.length === 5) {
      I0 = bezier(colors.slice(0, 3));
      I1 = bezier(colors.slice(2, 5));
      I = function(t) {
        if (t < 0.5) {
          return I0(t * 2);
        } else {
          return I1((t - 0.5) * 2);
        }
      };
    }
    return I;
  };

  chroma.bezier = function(colors) {
    var f;
    f = bezier(colors);
    f.scale = function() {
      return chroma.scale(f);
    };
    return f;
  };


  /*
      chroma.js
  
      Copyright (c) 2011-2013, Gregor Aisch
      All rights reserved.
  
      Redistribution and use in source and binary forms, with or without
      modification, are permitted provided that the following conditions are met:
  
      * Redistributions of source code must retain the above copyright notice, this
        list of conditions and the following disclaimer.
  
      * Redistributions in binary form must reproduce the above copyright notice,
        this list of conditions and the following disclaimer in the documentation
        and/or other materials provided with the distribution.
  
      * The name Gregor Aisch may not be used to endorse or promote products
        derived from this software without specific prior written permission.
  
      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
      DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
      INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
      BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
      OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
      NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
      EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  
      @source: https://github.com/gka/chroma.js
   */

  chroma.cubehelix = function(start, rotations, hue, gamma, lightness) {
    var dh, dl, f;
    if (start == null) {
      start = 300;
    }
    if (rotations == null) {
      rotations = -1.5;
    }
    if (hue == null) {
      hue = 1;
    }
    if (gamma == null) {
      gamma = 1;
    }
    if (lightness == null) {
      lightness = [0, 1];
    }
    dh = 0;
    if (type(lightness) === 'array') {
      dl = lightness[1] - lightness[0];
    } else {
      dl = 0;
      lightness = [lightness, lightness];
    }
    f = function(fract) {
      var a, amp, b, cos_a, g, h, l, r, sin_a;
      a = TWOPI * ((start + 120) / 360 + rotations * fract);
      l = pow(lightness[0] + dl * fract, gamma);
      h = dh !== 0 ? hue[0] + fract * dh : hue;
      amp = h * l * (1 - l) / 2;
      cos_a = cos(a);
      sin_a = sin(a);
      r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);
      g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);
      b = l + amp * (+1.97294 * cos_a);
      return chroma(clip_rgb([r * 255, g * 255, b * 255]));
    };
    f.start = function(s) {
      if (s == null) {
        return start;
      }
      start = s;
      return f;
    };
    f.rotations = function(r) {
      if (r == null) {
        return rotations;
      }
      rotations = r;
      return f;
    };
    f.gamma = function(g) {
      if (g == null) {
        return gamma;
      }
      gamma = g;
      return f;
    };
    f.hue = function(h) {
      if (h == null) {
        return hue;
      }
      hue = h;
      if (type(hue) === 'array') {
        dh = hue[1] - hue[0];
        if (dh === 0) {
          hue = hue[1];
        }
      } else {
        dh = 0;
      }
      return f;
    };
    f.lightness = function(h) {
      if (h == null) {
        return lightness;
      }
      if (type(h) === 'array') {
        lightness = h;
        dl = h[1] - h[0];
      } else {
        lightness = [h, h];
        dl = 0;
      }
      return f;
    };
    f.scale = function() {
      return chroma.scale(f);
    };
    f.hue(hue);
    return f;
  };

  chroma.random = function() {
    var code, digits, i, o;
    digits = '0123456789abcdef';
    code = '#';
    for (i = o = 0; o < 6; i = ++o) {
      code += digits.charAt(floor(Math.random() * 16));
    }
    return new Color(code);
  };

  _interpolators = [];

  interpolate = function(col1, col2, f, m) {
    var interpol, len, o, res;
    if (f == null) {
      f = 0.5;
    }
    if (m == null) {
      m = 'rgb';
    }

    /*
    interpolates between colors
    f = 0 --> me
    f = 1 --> col
     */
    if (type(col1) !== 'object') {
      col1 = chroma(col1);
    }
    if (type(col2) !== 'object') {
      col2 = chroma(col2);
    }
    for (o = 0, len = _interpolators.length; o < len; o++) {
      interpol = _interpolators[o];
      if (m === interpol[0]) {
        res = interpol[1](col1, col2, f, m);
        break;
      }
    }
    if (res == null) {
      throw "color mode " + m + " is not supported";
    }
    return res.alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));
  };

  chroma.interpolate = interpolate;

  Color.prototype.interpolate = function(col2, f, m) {
    return interpolate(this, col2, f, m);
  };

  chroma.mix = interpolate;

  Color.prototype.mix = Color.prototype.interpolate;

  _input.rgb = function() {
    var k, ref, results, v;
    ref = unpack(arguments);
    results = [];
    for (k in ref) {
      v = ref[k];
      results.push(v);
    }
    return results;
  };

  chroma.rgb = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['rgb']), function(){});
  };

  Color.prototype.rgb = function(round) {
    if (round == null) {
      round = true;
    }
    if (round) {
      return this._rgb.map(Math.round).slice(0, 3);
    } else {
      return this._rgb.slice(0, 3);
    }
  };

  Color.prototype.rgba = function(round) {
    if (round == null) {
      round = true;
    }
    if (!round) {
      return this._rgb.slice(0);
    }
    return [Math.round(this._rgb[0]), Math.round(this._rgb[1]), Math.round(this._rgb[2]), this._rgb[3]];
  };

  _guess_formats.push({
    p: 3,
    test: function(n) {
      var a;
      a = unpack(arguments);
      if (type(a) === 'array' && a.length === 3) {
        return 'rgb';
      }
      if (a.length === 4 && type(a[3]) === "number" && a[3] >= 0 && a[3] <= 1) {
        return 'rgb';
      }
    }
  });

  _input.lrgb = _input.rgb;

  interpolate_lrgb = function(col1, col2, f, m) {
    var xyz0, xyz1;
    xyz0 = col1._rgb;
    xyz1 = col2._rgb;
    return new Color(sqrt(pow(xyz0[0], 2) * (1 - f) + pow(xyz1[0], 2) * f), sqrt(pow(xyz0[1], 2) * (1 - f) + pow(xyz1[1], 2) * f), sqrt(pow(xyz0[2], 2) * (1 - f) + pow(xyz1[2], 2) * f), m);
  };

  _average_lrgb = function(colors) {
    var col, f, len, o, rgb, xyz;
    f = 1 / colors.length;
    xyz = [0, 0, 0, 0];
    for (o = 0, len = colors.length; o < len; o++) {
      col = colors[o];
      rgb = col._rgb;
      xyz[0] += pow(rgb[0], 2) * f;
      xyz[1] += pow(rgb[1], 2) * f;
      xyz[2] += pow(rgb[2], 2) * f;
      xyz[3] += rgb[3] * f;
    }
    xyz[0] = sqrt(xyz[0]);
    xyz[1] = sqrt(xyz[1]);
    xyz[2] = sqrt(xyz[2]);
    return new Color(xyz);
  };

  _interpolators.push(['lrgb', interpolate_lrgb]);

  chroma.average = function(colors, mode) {
    var A, alpha, c, cnt, dx, dy, first, i, l, len, o, xyz, xyz2;
    if (mode == null) {
      mode = 'rgb';
    }
    l = colors.length;
    colors = colors.map(function(c) {
      return chroma(c);
    });
    first = colors.splice(0, 1)[0];
    if (mode === 'lrgb') {
      return _average_lrgb(colors);
    }
    xyz = first.get(mode);
    cnt = [];
    dx = 0;
    dy = 0;
    for (i in xyz) {
      xyz[i] = xyz[i] || 0;
      cnt.push(!isNaN(xyz[i]) ? 1 : 0);
      if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {
        A = xyz[i] / 180 * PI;
        dx += cos(A);
        dy += sin(A);
      }
    }
    alpha = first.alpha();
    for (o = 0, len = colors.length; o < len; o++) {
      c = colors[o];
      xyz2 = c.get(mode);
      alpha += c.alpha();
      for (i in xyz) {
        if (!isNaN(xyz2[i])) {
          xyz[i] += xyz2[i];
          cnt[i] += 1;
          if (mode.charAt(i) === 'h') {
            A = xyz[i] / 180 * PI;
            dx += cos(A);
            dy += sin(A);
          }
        }
      }
    }
    for (i in xyz) {
      xyz[i] = xyz[i] / cnt[i];
      if (mode.charAt(i) === 'h') {
        A = atan2(dy / cnt[i], dx / cnt[i]) / PI * 180;
        while (A < 0) {
          A += 360;
        }
        while (A >= 360) {
          A -= 360;
        }
        xyz[i] = A;
      }
    }
    return chroma(xyz, mode).alpha(alpha / l);
  };

  hex2rgb = function(hex) {
    var a, b, g, r, rgb, u;
    if (hex.match(/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)) {
      if (hex.length === 4 || hex.length === 7) {
        hex = hex.substr(1);
      }
      if (hex.length === 3) {
        hex = hex.split("");
        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
      }
      u = parseInt(hex, 16);
      r = u >> 16;
      g = u >> 8 & 0xFF;
      b = u & 0xFF;
      return [r, g, b, 1];
    }
    if (hex.match(/^#?([A-Fa-f0-9]{8})$/)) {
      if (hex.length === 9) {
        hex = hex.substr(1);
      }
      u = parseInt(hex, 16);
      r = u >> 24 & 0xFF;
      g = u >> 16 & 0xFF;
      b = u >> 8 & 0xFF;
      a = round((u & 0xFF) / 0xFF * 100) / 100;
      return [r, g, b, a];
    }
    if ((_input.css != null) && (rgb = _input.css(hex))) {
      return rgb;
    }
    throw "unknown color: " + hex;
  };

  rgb2hex = function(channels, mode) {
    var a, b, g, hxa, r, str, u;
    if (mode == null) {
      mode = 'rgb';
    }
    r = channels[0], g = channels[1], b = channels[2], a = channels[3];
    r = Math.round(r);
    g = Math.round(g);
    b = Math.round(b);
    u = r << 16 | g << 8 | b;
    str = "000000" + u.toString(16);
    str = str.substr(str.length - 6);
    hxa = '0' + round(a * 255).toString(16);
    hxa = hxa.substr(hxa.length - 2);
    return "#" + (function() {
      switch (mode.toLowerCase()) {
        case 'rgba':
          return str + hxa;
        case 'argb':
          return hxa + str;
        default:
          return str;
      }
    })();
  };

  _input.hex = function(h) {
    return hex2rgb(h);
  };

  chroma.hex = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['hex']), function(){});
  };

  Color.prototype.hex = function(mode) {
    if (mode == null) {
      mode = 'rgb';
    }
    return rgb2hex(this._rgb, mode);
  };

  _guess_formats.push({
    p: 4,
    test: function(n) {
      if (arguments.length === 1 && type(n) === "string") {
        return 'hex';
      }
    }
  });

  hsl2rgb = function() {
    var args, b, c, g, h, i, l, o, r, ref, s, t1, t2, t3;
    args = unpack(arguments);
    h = args[0], s = args[1], l = args[2];
    if (s === 0) {
      r = g = b = l * 255;
    } else {
      t3 = [0, 0, 0];
      c = [0, 0, 0];
      t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;
      t1 = 2 * l - t2;
      h /= 360;
      t3[0] = h + 1 / 3;
      t3[1] = h;
      t3[2] = h - 1 / 3;
      for (i = o = 0; o <= 2; i = ++o) {
        if (t3[i] < 0) {
          t3[i] += 1;
        }
        if (t3[i] > 1) {
          t3[i] -= 1;
        }
        if (6 * t3[i] < 1) {
          c[i] = t1 + (t2 - t1) * 6 * t3[i];
        } else if (2 * t3[i] < 1) {
          c[i] = t2;
        } else if (3 * t3[i] < 2) {
          c[i] = t1 + (t2 - t1) * ((2 / 3) - t3[i]) * 6;
        } else {
          c[i] = t1;
        }
      }
      ref = [round(c[0] * 255), round(c[1] * 255), round(c[2] * 255)], r = ref[0], g = ref[1], b = ref[2];
    }
    if (args.length > 3) {
      return [r, g, b, args[3]];
    } else {
      return [r, g, b];
    }
  };

  rgb2hsl = function(r, g, b) {
    var h, l, min, ref, s;
    if (r !== void 0 && r.length >= 3) {
      ref = r, r = ref[0], g = ref[1], b = ref[2];
    }
    r /= 255;
    g /= 255;
    b /= 255;
    min = Math.min(r, g, b);
    max = Math.max(r, g, b);
    l = (max + min) / 2;
    if (max === min) {
      s = 0;
      h = Number.NaN;
    } else {
      s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);
    }
    if (r === max) {
      h = (g - b) / (max - min);
    } else if (g === max) {
      h = 2 + (b - r) / (max - min);
    } else if (b === max) {
      h = 4 + (r - g) / (max - min);
    }
    h *= 60;
    if (h < 0) {
      h += 360;
    }
    return [h, s, l];
  };

  chroma.hsl = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['hsl']), function(){});
  };

  _input.hsl = hsl2rgb;

  Color.prototype.hsl = function() {
    return rgb2hsl(this._rgb);
  };

  hsv2rgb = function() {
    var args, b, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, s, t, v;
    args = unpack(arguments);
    h = args[0], s = args[1], v = args[2];
    v *= 255;
    if (s === 0) {
      r = g = b = v;
    } else {
      if (h === 360) {
        h = 0;
      }
      if (h > 360) {
        h -= 360;
      }
      if (h < 0) {
        h += 360;
      }
      h /= 60;
      i = floor(h);
      f = h - i;
      p = v * (1 - s);
      q = v * (1 - s * f);
      t = v * (1 - s * (1 - f));
      switch (i) {
        case 0:
          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];
          break;
        case 1:
          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];
          break;
        case 2:
          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];
          break;
        case 3:
          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];
          break;
        case 4:
          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];
          break;
        case 5:
          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];
      }
    }
    return [r, g, b, args.length > 3 ? args[3] : 1];
  };

  rgb2hsv = function() {
    var b, delta, g, h, min, r, ref, s, v;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    min = Math.min(r, g, b);
    max = Math.max(r, g, b);
    delta = max - min;
    v = max / 255.0;
    if (max === 0) {
      h = Number.NaN;
      s = 0;
    } else {
      s = delta / max;
      if (r === max) {
        h = (g - b) / delta;
      }
      if (g === max) {
        h = 2 + (b - r) / delta;
      }
      if (b === max) {
        h = 4 + (r - g) / delta;
      }
      h *= 60;
      if (h < 0) {
        h += 360;
      }
    }
    return [h, s, v];
  };

  chroma.hsv = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['hsv']), function(){});
  };

  _input.hsv = hsv2rgb;

  Color.prototype.hsv = function() {
    return rgb2hsv(this._rgb);
  };

  num2rgb = function(num) {
    var b, g, r;
    if (type(num) === "number" && num >= 0 && num <= 0xFFFFFF) {
      r = num >> 16;
      g = (num >> 8) & 0xFF;
      b = num & 0xFF;
      return [r, g, b, 1];
    }
    console.warn("unknown num color: " + num);
    return [0, 0, 0, 1];
  };

  rgb2num = function() {
    var b, g, r, ref;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    return (r << 16) + (g << 8) + b;
  };

  chroma.num = function(num) {
    return new Color(num, 'num');
  };

  Color.prototype.num = function(mode) {
    if (mode == null) {
      mode = 'rgb';
    }
    return rgb2num(this._rgb, mode);
  };

  _input.num = num2rgb;

  _guess_formats.push({
    p: 1,
    test: function(n) {
      if (arguments.length === 1 && type(n) === "number" && n >= 0 && n <= 0xFFFFFF) {
        return 'num';
      }
    }
  });

  hcg2rgb = function() {
    var _c, _g, args, b, c, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, t, v;
    args = unpack(arguments);
    h = args[0], c = args[1], _g = args[2];
    c = c / 100;
    g = g / 100 * 255;
    _c = c * 255;
    if (c === 0) {
      r = g = b = _g;
    } else {
      if (h === 360) {
        h = 0;
      }
      if (h > 360) {
        h -= 360;
      }
      if (h < 0) {
        h += 360;
      }
      h /= 60;
      i = floor(h);
      f = h - i;
      p = _g * (1 - c);
      q = p + _c * (1 - f);
      t = p + _c * f;
      v = p + _c;
      switch (i) {
        case 0:
          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];
          break;
        case 1:
          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];
          break;
        case 2:
          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];
          break;
        case 3:
          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];
          break;
        case 4:
          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];
          break;
        case 5:
          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];
      }
    }
    return [r, g, b, args.length > 3 ? args[3] : 1];
  };

  rgb2hcg = function() {
    var _g, b, c, delta, g, h, min, r, ref;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    min = Math.min(r, g, b);
    max = Math.max(r, g, b);
    delta = max - min;
    c = delta * 100 / 255;
    _g = min / (255 - delta) * 100;
    if (delta === 0) {
      h = Number.NaN;
    } else {
      if (r === max) {
        h = (g - b) / delta;
      }
      if (g === max) {
        h = 2 + (b - r) / delta;
      }
      if (b === max) {
        h = 4 + (r - g) / delta;
      }
      h *= 60;
      if (h < 0) {
        h += 360;
      }
    }
    return [h, c, _g];
  };

  chroma.hcg = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['hcg']), function(){});
  };

  _input.hcg = hcg2rgb;

  Color.prototype.hcg = function() {
    return rgb2hcg(this._rgb);
  };

  css2rgb = function(css) {
    var aa, ab, hsl, i, m, o, rgb, w;
    css = css.toLowerCase();
    if ((chroma.colors != null) && chroma.colors[css]) {
      return hex2rgb(chroma.colors[css]);
    }
    if (m = css.match(/rgb\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*\)/)) {
      rgb = m.slice(1, 4);
      for (i = o = 0; o <= 2; i = ++o) {
        rgb[i] = +rgb[i];
      }
      rgb[3] = 1;
    } else if (m = css.match(/rgba\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*,\s*([01]|[01]?\.\d+)\)/)) {
      rgb = m.slice(1, 5);
      for (i = w = 0; w <= 3; i = ++w) {
        rgb[i] = +rgb[i];
      }
    } else if (m = css.match(/rgb\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
      rgb = m.slice(1, 4);
      for (i = aa = 0; aa <= 2; i = ++aa) {
        rgb[i] = round(rgb[i] * 2.55);
      }
      rgb[3] = 1;
    } else if (m = css.match(/rgba\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
      rgb = m.slice(1, 5);
      for (i = ab = 0; ab <= 2; i = ++ab) {
        rgb[i] = round(rgb[i] * 2.55);
      }
      rgb[3] = +rgb[3];
    } else if (m = css.match(/hsl\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
      hsl = m.slice(1, 4);
      hsl[1] *= 0.01;
      hsl[2] *= 0.01;
      rgb = hsl2rgb(hsl);
      rgb[3] = 1;
    } else if (m = css.match(/hsla\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
      hsl = m.slice(1, 4);
      hsl[1] *= 0.01;
      hsl[2] *= 0.01;
      rgb = hsl2rgb(hsl);
      rgb[3] = +m[4];
    }
    return rgb;
  };

  rgb2css = function(rgba) {
    var mode;
    mode = rgba[3] < 1 ? 'rgba' : 'rgb';
    if (mode === 'rgb') {
      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ')';
    } else if (mode === 'rgba') {
      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ',' + rgba[3] + ')';
    } else {

    }
  };

  rnd = function(a) {
    return round(a * 100) / 100;
  };

  hsl2css = function(hsl, alpha) {
    var mode;
    mode = alpha < 1 ? 'hsla' : 'hsl';
    hsl[0] = rnd(hsl[0] || 0);
    hsl[1] = rnd(hsl[1] * 100) + '%';
    hsl[2] = rnd(hsl[2] * 100) + '%';
    if (mode === 'hsla') {
      hsl[3] = alpha;
    }
    return mode + '(' + hsl.join(',') + ')';
  };

  _input.css = function(h) {
    return css2rgb(h);
  };

  chroma.css = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['css']), function(){});
  };

  Color.prototype.css = function(mode) {
    if (mode == null) {
      mode = 'rgb';
    }
    if (mode.slice(0, 3) === 'rgb') {
      return rgb2css(this._rgb);
    } else if (mode.slice(0, 3) === 'hsl') {
      return hsl2css(this.hsl(), this.alpha());
    }
  };

  _input.named = function(name) {
    return hex2rgb(w3cx11[name]);
  };

  _guess_formats.push({
    p: 5,
    test: function(n) {
      if (arguments.length === 1 && (w3cx11[n] != null)) {
        return 'named';
      }
    }
  });

  Color.prototype.name = function(n) {
    var h, k;
    if (arguments.length) {
      if (w3cx11[n]) {
        this._rgb = hex2rgb(w3cx11[n]);
      }
      this._rgb[3] = 1;
    }
    h = this.hex();
    for (k in w3cx11) {
      if (h === w3cx11[k]) {
        return k;
      }
    }
    return h;
  };

  lch2lab = function() {

    /*
    Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.
    These formulas were invented by David Dalrymple to obtain maximum contrast without going
    out of gamut if the parameters are in the range 0-1.
    
    A saturation multiplier was added by Gregor Aisch
     */
    var c, h, l, ref;
    ref = unpack(arguments), l = ref[0], c = ref[1], h = ref[2];
    h = h * DEG2RAD;
    return [l, cos(h) * c, sin(h) * c];
  };

  lch2rgb = function() {
    var L, a, args, b, c, g, h, l, r, ref, ref1;
    args = unpack(arguments);
    l = args[0], c = args[1], h = args[2];
    ref = lch2lab(l, c, h), L = ref[0], a = ref[1], b = ref[2];
    ref1 = lab2rgb(L, a, b), r = ref1[0], g = ref1[1], b = ref1[2];
    return [r, g, b, args.length > 3 ? args[3] : 1];
  };

  lab2lch = function() {
    var a, b, c, h, l, ref;
    ref = unpack(arguments), l = ref[0], a = ref[1], b = ref[2];
    c = sqrt(a * a + b * b);
    h = (atan2(b, a) * RAD2DEG + 360) % 360;
    if (round(c * 10000) === 0) {
      h = Number.NaN;
    }
    return [l, c, h];
  };

  rgb2lch = function() {
    var a, b, g, l, r, ref, ref1;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    ref1 = rgb2lab(r, g, b), l = ref1[0], a = ref1[1], b = ref1[2];
    return lab2lch(l, a, b);
  };

  chroma.lch = function() {
    var args;
    args = unpack(arguments);
    return new Color(args, 'lch');
  };

  chroma.hcl = function() {
    var args;
    args = unpack(arguments);
    return new Color(args, 'hcl');
  };

  _input.lch = lch2rgb;

  _input.hcl = function() {
    var c, h, l, ref;
    ref = unpack(arguments), h = ref[0], c = ref[1], l = ref[2];
    return lch2rgb([l, c, h]);
  };

  Color.prototype.lch = function() {
    return rgb2lch(this._rgb);
  };

  Color.prototype.hcl = function() {
    return rgb2lch(this._rgb).reverse();
  };

  rgb2cmyk = function(mode) {
    var b, c, f, g, k, m, r, ref, y;
    if (mode == null) {
      mode = 'rgb';
    }
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    r = r / 255;
    g = g / 255;
    b = b / 255;
    k = 1 - Math.max(r, Math.max(g, b));
    f = k < 1 ? 1 / (1 - k) : 0;
    c = (1 - r - k) * f;
    m = (1 - g - k) * f;
    y = (1 - b - k) * f;
    return [c, m, y, k];
  };

  cmyk2rgb = function() {
    var alpha, args, b, c, g, k, m, r, y;
    args = unpack(arguments);
    c = args[0], m = args[1], y = args[2], k = args[3];
    alpha = args.length > 4 ? args[4] : 1;
    if (k === 1) {
      return [0, 0, 0, alpha];
    }
    r = c >= 1 ? 0 : 255 * (1 - c) * (1 - k);
    g = m >= 1 ? 0 : 255 * (1 - m) * (1 - k);
    b = y >= 1 ? 0 : 255 * (1 - y) * (1 - k);
    return [r, g, b, alpha];
  };

  _input.cmyk = function() {
    return cmyk2rgb(unpack(arguments));
  };

  chroma.cmyk = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['cmyk']), function(){});
  };

  Color.prototype.cmyk = function() {
    return rgb2cmyk(this._rgb);
  };

  _input.gl = function() {
    var i, k, o, rgb, v;
    rgb = (function() {
      var ref, results;
      ref = unpack(arguments);
      results = [];
      for (k in ref) {
        v = ref[k];
        results.push(v);
      }
      return results;
    }).apply(this, arguments);
    for (i = o = 0; o <= 2; i = ++o) {
      rgb[i] *= 255;
    }
    return rgb;
  };

  chroma.gl = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['gl']), function(){});
  };

  Color.prototype.gl = function() {
    var rgb;
    rgb = this._rgb;
    return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, rgb[3]];
  };

  rgb2luminance = function(r, g, b) {
    var ref;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    r = luminance_x(r);
    g = luminance_x(g);
    b = luminance_x(b);
    return 0.2126 * r + 0.7152 * g + 0.0722 * b;
  };

  luminance_x = function(x) {
    x /= 255;
    if (x <= 0.03928) {
      return x / 12.92;
    } else {
      return pow((x + 0.055) / 1.055, 2.4);
    }
  };

  interpolate_rgb = function(col1, col2, f, m) {
    var xyz0, xyz1;
    xyz0 = col1._rgb;
    xyz1 = col2._rgb;
    return new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);
  };

  _interpolators.push(['rgb', interpolate_rgb]);

  Color.prototype.luminance = function(lum, mode) {
    var cur_lum, eps, max_iter, test;
    if (mode == null) {
      mode = 'rgb';
    }
    if (!arguments.length) {
      return rgb2luminance(this._rgb);
    }
    if (lum === 0) {
      this._rgb = [0, 0, 0, this._rgb[3]];
    } else if (lum === 1) {
      this._rgb = [255, 255, 255, this._rgb[3]];
    } else {
      eps = 1e-7;
      max_iter = 20;
      test = function(l, h) {
        var lm, m;
        m = l.interpolate(h, 0.5, mode);
        lm = m.luminance();
        if (Math.abs(lum - lm) < eps || !max_iter--) {
          return m;
        }
        if (lm > lum) {
          return test(l, m);
        }
        return test(m, h);
      };
      cur_lum = rgb2luminance(this._rgb);
      this._rgb = (cur_lum > lum ? test(chroma('black'), this) : test(this, chroma('white'))).rgba();
    }
    return this;
  };

  temperature2rgb = function(kelvin) {
    var b, g, r, temp;
    temp = kelvin / 100;
    if (temp < 66) {
      r = 255;
      g = -155.25485562709179 - 0.44596950469579133 * (g = temp - 2) + 104.49216199393888 * log(g);
      b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp - 10) + 115.67994401066147 * log(b);
    } else {
      r = 351.97690566805693 + 0.114206453784165 * (r = temp - 55) - 40.25366309332127 * log(r);
      g = 325.4494125711974 + 0.07943456536662342 * (g = temp - 50) - 28.0852963507957 * log(g);
      b = 255;
    }
    return [r, g, b];
  };

  rgb2temperature = function() {
    var b, eps, g, maxTemp, minTemp, r, ref, rgb, temp;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    minTemp = 1000;
    maxTemp = 40000;
    eps = 0.4;
    while (maxTemp - minTemp > eps) {
      temp = (maxTemp + minTemp) * 0.5;
      rgb = temperature2rgb(temp);
      if ((rgb[2] / rgb[0]) >= (b / r)) {
        maxTemp = temp;
      } else {
        minTemp = temp;
      }
    }
    return round(temp);
  };

  chroma.temperature = chroma.kelvin = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['temperature']), function(){});
  };

  _input.temperature = _input.kelvin = _input.K = temperature2rgb;

  Color.prototype.temperature = function() {
    return rgb2temperature(this._rgb);
  };

  Color.prototype.kelvin = Color.prototype.temperature;

  chroma.contrast = function(a, b) {
    var l1, l2, ref, ref1;
    if ((ref = type(a)) === 'string' || ref === 'number') {
      a = new Color(a);
    }
    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {
      b = new Color(b);
    }
    l1 = a.luminance();
    l2 = b.luminance();
    if (l1 > l2) {
      return (l1 + 0.05) / (l2 + 0.05);
    } else {
      return (l2 + 0.05) / (l1 + 0.05);
    }
  };

  chroma.distance = function(a, b, mode) {
    var d, i, l1, l2, ref, ref1, sum_sq;
    if (mode == null) {
      mode = 'lab';
    }
    if ((ref = type(a)) === 'string' || ref === 'number') {
      a = new Color(a);
    }
    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {
      b = new Color(b);
    }
    l1 = a.get(mode);
    l2 = b.get(mode);
    sum_sq = 0;
    for (i in l1) {
      d = (l1[i] || 0) - (l2[i] || 0);
      sum_sq += d * d;
    }
    return Math.sqrt(sum_sq);
  };

  chroma.deltaE = function(a, b, L, C) {
    var L1, L2, a1, a2, b1, b2, c1, c2, c4, dH2, delA, delB, delC, delL, f, h1, ref, ref1, ref2, ref3, sc, sh, sl, t, v1, v2, v3;
    if (L == null) {
      L = 1;
    }
    if (C == null) {
      C = 1;
    }
    if ((ref = type(a)) === 'string' || ref === 'number') {
      a = new Color(a);
    }
    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {
      b = new Color(b);
    }
    ref2 = a.lab(), L1 = ref2[0], a1 = ref2[1], b1 = ref2[2];
    ref3 = b.lab(), L2 = ref3[0], a2 = ref3[1], b2 = ref3[2];
    c1 = sqrt(a1 * a1 + b1 * b1);
    c2 = sqrt(a2 * a2 + b2 * b2);
    sl = L1 < 16.0 ? 0.511 : (0.040975 * L1) / (1.0 + 0.01765 * L1);
    sc = (0.0638 * c1) / (1.0 + 0.0131 * c1) + 0.638;
    h1 = c1 < 0.000001 ? 0.0 : (atan2(b1, a1) * 180.0) / PI;
    while (h1 < 0) {
      h1 += 360;
    }
    while (h1 >= 360) {
      h1 -= 360;
    }
    t = (h1 >= 164.0) && (h1 <= 345.0) ? 0.56 + abs(0.2 * cos((PI * (h1 + 168.0)) / 180.0)) : 0.36 + abs(0.4 * cos((PI * (h1 + 35.0)) / 180.0));
    c4 = c1 * c1 * c1 * c1;
    f = sqrt(c4 / (c4 + 1900.0));
    sh = sc * (f * t + 1.0 - f);
    delL = L1 - L2;
    delC = c1 - c2;
    delA = a1 - a2;
    delB = b1 - b2;
    dH2 = delA * delA + delB * delB - delC * delC;
    v1 = delL / (L * sl);
    v2 = delC / (C * sc);
    v3 = sh;
    return sqrt(v1 * v1 + v2 * v2 + (dH2 / (v3 * v3)));
  };

  Color.prototype.get = function(modechan) {
    var channel, i, me, mode, ref, src;
    me = this;
    ref = modechan.split('.'), mode = ref[0], channel = ref[1];
    src = me[mode]();
    if (channel) {
      i = mode.indexOf(channel);
      if (i > -1) {
        return src[i];
      } else {
        return console.warn('unknown channel ' + channel + ' in mode ' + mode);
      }
    } else {
      return src;
    }
  };

  Color.prototype.set = function(modechan, value) {
    var channel, i, me, mode, ref, src;
    me = this;
    ref = modechan.split('.'), mode = ref[0], channel = ref[1];
    if (channel) {
      src = me[mode]();
      i = mode.indexOf(channel);
      if (i > -1) {
        if (type(value) === 'string') {
          switch (value.charAt(0)) {
            case '+':
              src[i] += +value;
              break;
            case '-':
              src[i] += +value;
              break;
            case '*':
              src[i] *= +(value.substr(1));
              break;
            case '/':
              src[i] /= +(value.substr(1));
              break;
            default:
              src[i] = +value;
          }
        } else {
          src[i] = value;
        }
      } else {
        console.warn('unknown channel ' + channel + ' in mode ' + mode);
      }
    } else {
      src = value;
    }
    return chroma(src, mode).alpha(me.alpha());
  };

  Color.prototype.clipped = function() {
    return this._rgb._clipped || false;
  };

  Color.prototype.alpha = function(a) {
    if (arguments.length) {
      return chroma.rgb([this._rgb[0], this._rgb[1], this._rgb[2], a]);
    }
    return this._rgb[3];
  };

  Color.prototype.darken = function(amount) {
    var lab, me;
    if (amount == null) {
      amount = 1;
    }
    me = this;
    lab = me.lab();
    lab[0] -= LAB_CONSTANTS.Kn * amount;
    return chroma.lab(lab).alpha(me.alpha());
  };

  Color.prototype.brighten = function(amount) {
    if (amount == null) {
      amount = 1;
    }
    return this.darken(-amount);
  };

  Color.prototype.darker = Color.prototype.darken;

  Color.prototype.brighter = Color.prototype.brighten;

  Color.prototype.saturate = function(amount) {
    var lch, me;
    if (amount == null) {
      amount = 1;
    }
    me = this;
    lch = me.lch();
    lch[1] += amount * LAB_CONSTANTS.Kn;
    if (lch[1] < 0) {
      lch[1] = 0;
    }
    return chroma.lch(lch).alpha(me.alpha());
  };

  Color.prototype.desaturate = function(amount) {
    if (amount == null) {
      amount = 1;
    }
    return this.saturate(-amount);
  };

  Color.prototype.premultiply = function() {
    var a, rgb;
    rgb = this.rgb();
    a = this.alpha();
    return chroma(rgb[0] * a, rgb[1] * a, rgb[2] * a, a);
  };

  blend = function(bottom, top, mode) {
    if (!blend[mode]) {
      throw 'unknown blend mode ' + mode;
    }
    return blend[mode](bottom, top);
  };

  blend_f = function(f) {
    return function(bottom, top) {
      var c0, c1;
      c0 = chroma(top).rgb();
      c1 = chroma(bottom).rgb();
      return chroma(f(c0, c1), 'rgb');
    };
  };

  each = function(f) {
    return function(c0, c1) {
      var i, o, out;
      out = [];
      for (i = o = 0; o <= 3; i = ++o) {
        out[i] = f(c0[i], c1[i]);
      }
      return out;
    };
  };

  normal = function(a, b) {
    return a;
  };

  multiply = function(a, b) {
    return a * b / 255;
  };

  darken = function(a, b) {
    if (a > b) {
      return b;
    } else {
      return a;
    }
  };

  lighten = function(a, b) {
    if (a > b) {
      return a;
    } else {
      return b;
    }
  };

  screen = function(a, b) {
    return 255 * (1 - (1 - a / 255) * (1 - b / 255));
  };

  overlay = function(a, b) {
    if (b < 128) {
      return 2 * a * b / 255;
    } else {
      return 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));
    }
  };

  burn = function(a, b) {
    return 255 * (1 - (1 - b / 255) / (a / 255));
  };

  dodge = function(a, b) {
    if (a === 255) {
      return 255;
    }
    a = 255 * (b / 255) / (1 - a / 255);
    if (a > 255) {
      return 255;
    } else {
      return a;
    }
  };

  blend.normal = blend_f(each(normal));

  blend.multiply = blend_f(each(multiply));

  blend.screen = blend_f(each(screen));

  blend.overlay = blend_f(each(overlay));

  blend.darken = blend_f(each(darken));

  blend.lighten = blend_f(each(lighten));

  blend.dodge = blend_f(each(dodge));

  blend.burn = blend_f(each(burn));

  chroma.blend = blend;

  chroma.analyze = function(data) {
    var len, o, r, val;
    r = {
      min: Number.MAX_VALUE,
      max: Number.MAX_VALUE * -1,
      sum: 0,
      values: [],
      count: 0
    };
    for (o = 0, len = data.length; o < len; o++) {
      val = data[o];
      if ((val != null) && !isNaN(val)) {
        r.values.push(val);
        r.sum += val;
        if (val < r.min) {
          r.min = val;
        }
        if (val > r.max) {
          r.max = val;
        }
        r.count += 1;
      }
    }
    r.domain = [r.min, r.max];
    r.limits = function(mode, num) {
      return chroma.limits(r, mode, num);
    };
    return r;
  };

  chroma.scale = function(colors, positions) {
    var _classes, _colorCache, _colors, _correctLightness, _domain, _gamma, _max, _min, _mode, _nacol, _out, _padding, _pos, _spread, _useCache, f, getClass, getColor, resetCache, setColors, tmap;
    _mode = 'rgb';
    _nacol = chroma('#ccc');
    _spread = 0;
    _domain = [0, 1];
    _pos = [];
    _padding = [0, 0];
    _classes = false;
    _colors = [];
    _out = false;
    _min = 0;
    _max = 1;
    _correctLightness = false;
    _colorCache = {};
    _useCache = true;
    _gamma = 1;
    setColors = function(colors) {
      var c, col, o, ref, ref1, w;
      if (colors == null) {
        colors = ['#fff', '#000'];
      }
      if ((colors != null) && type(colors) === 'string' && (chroma.brewer != null)) {
        colors = chroma.brewer[colors] || chroma.brewer[colors.toLowerCase()] || colors;
      }
      if (type(colors) === 'array') {
        colors = colors.slice(0);
        for (c = o = 0, ref = colors.length - 1; 0 <= ref ? o <= ref : o >= ref; c = 0 <= ref ? ++o : --o) {
          col = colors[c];
          if (type(col) === "string") {
            colors[c] = chroma(col);
          }
        }
        _pos.length = 0;
        for (c = w = 0, ref1 = colors.length - 1; 0 <= ref1 ? w <= ref1 : w >= ref1; c = 0 <= ref1 ? ++w : --w) {
          _pos.push(c / (colors.length - 1));
        }
      }
      resetCache();
      return _colors = colors;
    };
    getClass = function(value) {
      var i, n;
      if (_classes != null) {
        n = _classes.length - 1;
        i = 0;
        while (i < n && value >= _classes[i]) {
          i++;
        }
        return i - 1;
      }
      return 0;
    };
    tmap = function(t) {
      return t;
    };
    getColor = function(val, bypassMap) {
      var c, col, i, k, o, p, ref, t;
      if (bypassMap == null) {
        bypassMap = false;
      }
      if (isNaN(val)) {
        return _nacol;
      }
      if (!bypassMap) {
        if (_classes && _classes.length > 2) {
          c = getClass(val);
          t = c / (_classes.length - 2);
        } else if (_max !== _min) {
          t = (val - _min) / (_max - _min);
        } else {
          t = 1;
        }
      } else {
        t = val;
      }
      if (!bypassMap) {
        t = tmap(t);
      }
      if (_gamma !== 1) {
        t = pow(t, _gamma);
      }
      t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));
      t = Math.min(1, Math.max(0, t));
      k = Math.floor(t * 10000);
      if (_useCache && _colorCache[k]) {
        col = _colorCache[k];
      } else {
        if (type(_colors) === 'array') {
          for (i = o = 0, ref = _pos.length - 1; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {
            p = _pos[i];
            if (t <= p) {
              col = _colors[i];
              break;
            }
            if (t >= p && i === _pos.length - 1) {
              col = _colors[i];
              break;
            }
            if (t > p && t < _pos[i + 1]) {
              t = (t - p) / (_pos[i + 1] - p);
              col = chroma.interpolate(_colors[i], _colors[i + 1], t, _mode);
              break;
            }
          }
        } else if (type(_colors) === 'function') {
          col = _colors(t);
        }
        if (_useCache) {
          _colorCache[k] = col;
        }
      }
      return col;
    };
    resetCache = function() {
      return _colorCache = {};
    };
    setColors(colors);
    f = function(v) {
      var c;
      c = chroma(getColor(v));
      if (_out && c[_out]) {
        return c[_out]();
      } else {
        return c;
      }
    };
    f.classes = function(classes) {
      var d;
      if (classes != null) {
        if (type(classes) === 'array') {
          _classes = classes;
          _domain = [classes[0], classes[classes.length - 1]];
        } else {
          d = chroma.analyze(_domain);
          if (classes === 0) {
            _classes = [d.min, d.max];
          } else {
            _classes = chroma.limits(d, 'e', classes);
          }
        }
        return f;
      }
      return _classes;
    };
    f.domain = function(domain) {
      var c, d, k, len, o, ref, w;
      if (!arguments.length) {
        return _domain;
      }
      _min = domain[0];
      _max = domain[domain.length - 1];
      _pos = [];
      k = _colors.length;
      if (domain.length === k && _min !== _max) {
        for (o = 0, len = domain.length; o < len; o++) {
          d = domain[o];
          _pos.push((d - _min) / (_max - _min));
        }
      } else {
        for (c = w = 0, ref = k - 1; 0 <= ref ? w <= ref : w >= ref; c = 0 <= ref ? ++w : --w) {
          _pos.push(c / (k - 1));
        }
      }
      _domain = [_min, _max];
      return f;
    };
    f.mode = function(_m) {
      if (!arguments.length) {
        return _mode;
      }
      _mode = _m;
      resetCache();
      return f;
    };
    f.range = function(colors, _pos) {
      setColors(colors, _pos);
      return f;
    };
    f.out = function(_o) {
      _out = _o;
      return f;
    };
    f.spread = function(val) {
      if (!arguments.length) {
        return _spread;
      }
      _spread = val;
      return f;
    };
    f.correctLightness = function(v) {
      if (v == null) {
        v = true;
      }
      _correctLightness = v;
      resetCache();
      if (_correctLightness) {
        tmap = function(t) {
          var L0, L1, L_actual, L_diff, L_ideal, max_iter, pol, t0, t1;
          L0 = getColor(0, true).lab()[0];
          L1 = getColor(1, true).lab()[0];
          pol = L0 > L1;
          L_actual = getColor(t, true).lab()[0];
          L_ideal = L0 + (L1 - L0) * t;
          L_diff = L_actual - L_ideal;
          t0 = 0;
          t1 = 1;
          max_iter = 20;
          while (Math.abs(L_diff) > 1e-2 && max_iter-- > 0) {
            (function() {
              if (pol) {
                L_diff *= -1;
              }
              if (L_diff < 0) {
                t0 = t;
                t += (t1 - t) * 0.5;
              } else {
                t1 = t;
                t += (t0 - t) * 0.5;
              }
              L_actual = getColor(t, true).lab()[0];
              return L_diff = L_actual - L_ideal;
            })();
          }
          return t;
        };
      } else {
        tmap = function(t) {
          return t;
        };
      }
      return f;
    };
    f.padding = function(p) {
      if (p != null) {
        if (type(p) === 'number') {
          p = [p, p];
        }
        _padding = p;
        return f;
      } else {
        return _padding;
      }
    };
    f.colors = function(numColors, out) {
      var dd, dm, i, ref, result, results, samples, w;
      if (arguments.length < 2) {
        out = 'hex';
      }
      result = [];
      if (arguments.length === 0) {
        result = _colors.slice(0);
      } else if (numColors === 1) {
        result = [f(0.5)];
      } else if (numColors > 1) {
        dm = _domain[0];
        dd = _domain[1] - dm;
        result = (function() {
          results = [];
          for (var o = 0; 0 <= numColors ? o < numColors : o > numColors; 0 <= numColors ? o++ : o--){ results.push(o); }
          return results;
        }).apply(this).map(function(i) {
          return f(dm + i / (numColors - 1) * dd);
        });
      } else {
        colors = [];
        samples = [];
        if (_classes && _classes.length > 2) {
          for (i = w = 1, ref = _classes.length; 1 <= ref ? w < ref : w > ref; i = 1 <= ref ? ++w : --w) {
            samples.push((_classes[i - 1] + _classes[i]) * 0.5);
          }
        } else {
          samples = _domain;
        }
        result = samples.map(function(v) {
          return f(v);
        });
      }
      if (chroma[out]) {
        result = result.map(function(c) {
          return c[out]();
        });
      }
      return result;
    };
    f.cache = function(c) {
      if (c != null) {
        _useCache = c;
        return f;
      } else {
        return _useCache;
      }
    };
    f.gamma = function(g) {
      if (g != null) {
        _gamma = g;
        return f;
      } else {
        return _gamma;
      }
    };
    return f;
  };

  if (chroma.scales == null) {
    chroma.scales = {};
  }

  chroma.scales.cool = function() {
    return chroma.scale([chroma.hsl(180, 1, .9), chroma.hsl(250, .7, .4)]);
  };

  chroma.scales.hot = function() {
    return chroma.scale(['#000', '#f00', '#ff0', '#fff'], [0, .25, .75, 1]).mode('rgb');
  };

  chroma.analyze = function(data, key, filter) {
    var add, k, len, o, r, val, visit;
    r = {
      min: Number.MAX_VALUE,
      max: Number.MAX_VALUE * -1,
      sum: 0,
      values: [],
      count: 0
    };
    if (filter == null) {
      filter = function() {
        return true;
      };
    }
    add = function(val) {
      if ((val != null) && !isNaN(val)) {
        r.values.push(val);
        r.sum += val;
        if (val < r.min) {
          r.min = val;
        }
        if (val > r.max) {
          r.max = val;
        }
        r.count += 1;
      }
    };
    visit = function(val, k) {
      if (filter(val, k)) {
        if ((key != null) && type(key) === 'function') {
          return add(key(val));
        } else if ((key != null) && type(key) === 'string' || type(key) === 'number') {
          return add(val[key]);
        } else {
          return add(val);
        }
      }
    };
    if (type(data) === 'array') {
      for (o = 0, len = data.length; o < len; o++) {
        val = data[o];
        visit(val);
      }
    } else {
      for (k in data) {
        val = data[k];
        visit(val, k);
      }
    }
    r.domain = [r.min, r.max];
    r.limits = function(mode, num) {
      return chroma.limits(r, mode, num);
    };
    return r;
  };

  chroma.limits = function(data, mode, num) {
    var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, assignments, best, centroids, cluster, clusterSizes, dist, i, j, kClusters, limits, max_log, min, min_log, mindist, n, nb_iters, newCentroids, o, p, pb, pr, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, repeat, sum, tmpKMeansBreaks, v, value, values, w;
    if (mode == null) {
      mode = 'equal';
    }
    if (num == null) {
      num = 7;
    }
    if (type(data) === 'array') {
      data = chroma.analyze(data);
    }
    min = data.min;
    max = data.max;
    sum = data.sum;
    values = data.values.sort(function(a, b) {
      return a - b;
    });
    if (num === 1) {
      return [min, max];
    }
    limits = [];
    if (mode.substr(0, 1) === 'c') {
      limits.push(min);
      limits.push(max);
    }
    if (mode.substr(0, 1) === 'e') {
      limits.push(min);
      for (i = o = 1, ref = num - 1; 1 <= ref ? o <= ref : o >= ref; i = 1 <= ref ? ++o : --o) {
        limits.push(min + (i / num) * (max - min));
      }
      limits.push(max);
    } else if (mode.substr(0, 1) === 'l') {
      if (min <= 0) {
        throw 'Logarithmic scales are only possible for values > 0';
      }
      min_log = Math.LOG10E * log(min);
      max_log = Math.LOG10E * log(max);
      limits.push(min);
      for (i = w = 1, ref1 = num - 1; 1 <= ref1 ? w <= ref1 : w >= ref1; i = 1 <= ref1 ? ++w : --w) {
        limits.push(pow(10, min_log + (i / num) * (max_log - min_log)));
      }
      limits.push(max);
    } else if (mode.substr(0, 1) === 'q') {
      limits.push(min);
      for (i = aa = 1, ref2 = num - 1; 1 <= ref2 ? aa <= ref2 : aa >= ref2; i = 1 <= ref2 ? ++aa : --aa) {
        p = (values.length - 1) * i / num;
        pb = floor(p);
        if (pb === p) {
          limits.push(values[pb]);
        } else {
          pr = p - pb;
          limits.push(values[pb] * (1 - pr) + values[pb + 1] * pr);
        }
      }
      limits.push(max);
    } else if (mode.substr(0, 1) === 'k') {

      /*
      implementation based on
      http://code.google.com/p/figue/source/browse/trunk/figue.js#336
      simplified for 1-d input values
       */
      n = values.length;
      assignments = new Array(n);
      clusterSizes = new Array(num);
      repeat = true;
      nb_iters = 0;
      centroids = null;
      centroids = [];
      centroids.push(min);
      for (i = ab = 1, ref3 = num - 1; 1 <= ref3 ? ab <= ref3 : ab >= ref3; i = 1 <= ref3 ? ++ab : --ab) {
        centroids.push(min + (i / num) * (max - min));
      }
      centroids.push(max);
      while (repeat) {
        for (j = ac = 0, ref4 = num - 1; 0 <= ref4 ? ac <= ref4 : ac >= ref4; j = 0 <= ref4 ? ++ac : --ac) {
          clusterSizes[j] = 0;
        }
        for (i = ad = 0, ref5 = n - 1; 0 <= ref5 ? ad <= ref5 : ad >= ref5; i = 0 <= ref5 ? ++ad : --ad) {
          value = values[i];
          mindist = Number.MAX_VALUE;
          for (j = ae = 0, ref6 = num - 1; 0 <= ref6 ? ae <= ref6 : ae >= ref6; j = 0 <= ref6 ? ++ae : --ae) {
            dist = abs(centroids[j] - value);
            if (dist < mindist) {
              mindist = dist;
              best = j;
            }
          }
          clusterSizes[best]++;
          assignments[i] = best;
        }
        newCentroids = new Array(num);
        for (j = af = 0, ref7 = num - 1; 0 <= ref7 ? af <= ref7 : af >= ref7; j = 0 <= ref7 ? ++af : --af) {
          newCentroids[j] = null;
        }
        for (i = ag = 0, ref8 = n - 1; 0 <= ref8 ? ag <= ref8 : ag >= ref8; i = 0 <= ref8 ? ++ag : --ag) {
          cluster = assignments[i];
          if (newCentroids[cluster] === null) {
            newCentroids[cluster] = values[i];
          } else {
            newCentroids[cluster] += values[i];
          }
        }
        for (j = ah = 0, ref9 = num - 1; 0 <= ref9 ? ah <= ref9 : ah >= ref9; j = 0 <= ref9 ? ++ah : --ah) {
          newCentroids[j] *= 1 / clusterSizes[j];
        }
        repeat = false;
        for (j = ai = 0, ref10 = num - 1; 0 <= ref10 ? ai <= ref10 : ai >= ref10; j = 0 <= ref10 ? ++ai : --ai) {
          if (newCentroids[j] !== centroids[i]) {
            repeat = true;
            break;
          }
        }
        centroids = newCentroids;
        nb_iters++;
        if (nb_iters > 200) {
          repeat = false;
        }
      }
      kClusters = {};
      for (j = aj = 0, ref11 = num - 1; 0 <= ref11 ? aj <= ref11 : aj >= ref11; j = 0 <= ref11 ? ++aj : --aj) {
        kClusters[j] = [];
      }
      for (i = ak = 0, ref12 = n - 1; 0 <= ref12 ? ak <= ref12 : ak >= ref12; i = 0 <= ref12 ? ++ak : --ak) {
        cluster = assignments[i];
        kClusters[cluster].push(values[i]);
      }
      tmpKMeansBreaks = [];
      for (j = al = 0, ref13 = num - 1; 0 <= ref13 ? al <= ref13 : al >= ref13; j = 0 <= ref13 ? ++al : --al) {
        tmpKMeansBreaks.push(kClusters[j][0]);
        tmpKMeansBreaks.push(kClusters[j][kClusters[j].length - 1]);
      }
      tmpKMeansBreaks = tmpKMeansBreaks.sort(function(a, b) {
        return a - b;
      });
      limits.push(tmpKMeansBreaks[0]);
      for (i = am = 1, ref14 = tmpKMeansBreaks.length - 1; am <= ref14; i = am += 2) {
        v = tmpKMeansBreaks[i];
        if (!isNaN(v) && limits.indexOf(v) === -1) {
          limits.push(v);
        }
      }
    }
    return limits;
  };

  hsi2rgb = function(h, s, i) {

    /*
    borrowed from here:
    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp
     */
    var args, b, g, r;
    args = unpack(arguments);
    h = args[0], s = args[1], i = args[2];
    if (isNaN(h)) {
      h = 0;
    }
    h /= 360;
    if (h < 1 / 3) {
      b = (1 - s) / 3;
      r = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
      g = 1 - (b + r);
    } else if (h < 2 / 3) {
      h -= 1 / 3;
      r = (1 - s) / 3;
      g = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
      b = 1 - (r + g);
    } else {
      h -= 2 / 3;
      g = (1 - s) / 3;
      b = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
      r = 1 - (g + b);
    }
    r = limit(i * r * 3);
    g = limit(i * g * 3);
    b = limit(i * b * 3);
    return [r * 255, g * 255, b * 255, args.length > 3 ? args[3] : 1];
  };

  rgb2hsi = function() {

    /*
    borrowed from here:
    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp
     */
    var b, g, h, i, min, r, ref, s;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    TWOPI = Math.PI * 2;
    r /= 255;
    g /= 255;
    b /= 255;
    min = Math.min(r, g, b);
    i = (r + g + b) / 3;
    s = 1 - min / i;
    if (s === 0) {
      h = 0;
    } else {
      h = ((r - g) + (r - b)) / 2;
      h /= Math.sqrt((r - g) * (r - g) + (r - b) * (g - b));
      h = Math.acos(h);
      if (b > g) {
        h = TWOPI - h;
      }
      h /= TWOPI;
    }
    return [h * 360, s, i];
  };

  chroma.hsi = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['hsi']), function(){});
  };

  _input.hsi = hsi2rgb;

  Color.prototype.hsi = function() {
    return rgb2hsi(this._rgb);
  };

  interpolate_hsx = function(col1, col2, f, m) {
    var dh, hue, hue0, hue1, lbv, lbv0, lbv1, res, sat, sat0, sat1, xyz0, xyz1;
    if (m === 'hsl') {
      xyz0 = col1.hsl();
      xyz1 = col2.hsl();
    } else if (m === 'hsv') {
      xyz0 = col1.hsv();
      xyz1 = col2.hsv();
    } else if (m === 'hcg') {
      xyz0 = col1.hcg();
      xyz1 = col2.hcg();
    } else if (m === 'hsi') {
      xyz0 = col1.hsi();
      xyz1 = col2.hsi();
    } else if (m === 'lch' || m === 'hcl') {
      m = 'hcl';
      xyz0 = col1.hcl();
      xyz1 = col2.hcl();
    }
    if (m.substr(0, 1) === 'h') {
      hue0 = xyz0[0], sat0 = xyz0[1], lbv0 = xyz0[2];
      hue1 = xyz1[0], sat1 = xyz1[1], lbv1 = xyz1[2];
    }
    if (!isNaN(hue0) && !isNaN(hue1)) {
      if (hue1 > hue0 && hue1 - hue0 > 180) {
        dh = hue1 - (hue0 + 360);
      } else if (hue1 < hue0 && hue0 - hue1 > 180) {
        dh = hue1 + 360 - hue0;
      } else {
        dh = hue1 - hue0;
      }
      hue = hue0 + f * dh;
    } else if (!isNaN(hue0)) {
      hue = hue0;
      if ((lbv1 === 1 || lbv1 === 0) && m !== 'hsv') {
        sat = sat0;
      }
    } else if (!isNaN(hue1)) {
      hue = hue1;
      if ((lbv0 === 1 || lbv0 === 0) && m !== 'hsv') {
        sat = sat1;
      }
    } else {
      hue = Number.NaN;
    }
    if (sat == null) {
      sat = sat0 + f * (sat1 - sat0);
    }
    lbv = lbv0 + f * (lbv1 - lbv0);
    return res = chroma[m](hue, sat, lbv);
  };

  _interpolators = _interpolators.concat((function() {
    var len, o, ref, results;
    ref = ['hsv', 'hsl', 'hsi', 'hcl', 'lch', 'hcg'];
    results = [];
    for (o = 0, len = ref.length; o < len; o++) {
      m = ref[o];
      results.push([m, interpolate_hsx]);
    }
    return results;
  })());

  interpolate_num = function(col1, col2, f, m) {
    var n1, n2;
    n1 = col1.num();
    n2 = col2.num();
    return chroma.num(n1 + (n2 - n1) * f, 'num');
  };

  _interpolators.push(['num', interpolate_num]);

  interpolate_lab = function(col1, col2, f, m) {
    var res, xyz0, xyz1;
    xyz0 = col1.lab();
    xyz1 = col2.lab();
    return res = new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);
  };

  _interpolators.push(['lab', interpolate_lab]);

}).call(commonjsGlobal);
});

/**
 * Java style map.
 */
class JavaMap {
    constructor() {
        this[Symbol.toStringTag] = 'Map';
        this._map = new Map();
        this._size = 0;
    }
    toString() {
        return '{' + Array.from(this.entries2()).map(({ key, value }) => key + ':' + value).join(', ') + '}';
    }
    forEach(callbackfn, thisArg) {
        for (const bucket of this._map.values()) {
            for (const { key, value } of bucket) {
                callbackfn.call(thisArg, value, key, this);
            }
        }
    }
    *keys() {
        for (const bucket of this._map.values()) {
            for (const { key } of bucket) {
                yield key;
            }
        }
    }
    *values() {
        for (const bucket of this._map.values()) {
            for (const { value } of bucket) {
                yield value;
            }
        }
    }
    [Symbol.iterator]() {
        return this.entries();
    }
    set(key, value) {
        this.set2(key, value);
        return this;
    }
    /**
     * Like {@link #set} except it returns true if key was new and false if the value was only updated.
     *
     */
    set2(key, val) {
        const hashCode = key.hashCode(), bucket = this._map.get(hashCode);
        //assert(hashCode === (hashCode | 0))
        if (bucket) {
            const pairIndex = bucket.findIndex(pair => pair.key.equals(key));
            if (-1 == pairIndex) {
                bucket.push({ key: key, value: val });
            }
            else {
                bucket[pairIndex].value = val;
                return false;
            }
        }
        else {
            this._map.set(hashCode, [{ key: key, value: val }]);
        }
        this._size++;
        return true;
    }
    has(key) {
        const hashCode = key.hashCode(), bucket = this._map.get(hashCode);
        //assert(hashCode === (hashCode | 0))
        return undefined !== bucket && bucket.some(pair => pair.key.equals(key));
    }
    get(key) {
        const hashCode = key.hashCode(), bucket = this._map.get(hashCode), pair = bucket && bucket.find(pair => pair.key.equals(key));
        return pair && pair.value;
    }
    getLike(key) {
        for (const hashCode of key.hashCodes()) {
            const bucket = this._map.get(hashCode);
            const canonVal = bucket && bucket.find(x => x.key.like(key));
            if (canonVal)
                return canonVal;
        }
    }
    setLike(key, val) {
        return !this.getLike(key) && this.set(key, val);
    }
    'delete'(key) {
        const hashCode = key.hashCode(), bucket = this._map.get(hashCode);
        if (bucket) {
            const index = bucket.findIndex(x => x.key.equals(key));
            if (-1 != index) {
                if (1 == bucket.length) {
                    this._map.delete(hashCode);
                }
                else {
                    bucket.splice(index, 1);
                }
                this._size--;
                return true;
            }
        }
        return false;
    }
    deleteLike(key) {
        for (const hashCode of key.hashCodes()) {
            const bucket = this._map.get(hashCode);
            if (bucket) {
                const index = bucket.findIndex(x => x.key.like(key));
                if (-1 != index) {
                    const deleted = bucket[index];
                    if (1 == bucket.length) {
                        this._map.delete(hashCode);
                    }
                    else {
                        bucket.splice(index, 1);
                    }
                    this._size--;
                    return deleted;
                }
            }
        }
    }
    *entries2() {
        for (const bucket of this._map.values()) {
            yield* bucket;
        }
    }
    *entries() {
        for (const bucket of this._map.values()) {
            for (const { key, value } of bucket) {
                yield [key, value];
            }
        }
    }
    clear() {
        this._map.clear();
        this._size = 0;
    }
    get size() {
        return this._size;
    }
}

class JavaSet {
    constructor(iterable) {
        this[Symbol.toStringTag] = 'Set';
        this[Symbol.iterator] = JavaSet.prototype.values;
        this.keys = JavaSet.prototype.values;
        this._map = new Map();
        this._size = 0;
        if (iterable) {
            this.addAll(iterable);
        }
    }
    forEach(callbackfn, thisArg) {
        for (const value of this.entries()) {
            callbackfn.call(thisArg, value, value, this);
        }
    }
    add(val) {
        this.add2(val);
        return this;
    }
    add2(val) {
        // you can't use this.canonicalize here, as there is no way to differentiate if val
        // is new or if val was === the exisitng value (not only .equals)
        const hashCode = val.hashCode(), bucket = this._map.get(hashCode);
        if (bucket) {
            if (bucket.some(x => x.equals(val))) {
                return false;
            }
            bucket.push(val);
        }
        else {
            this._map.set(hashCode, [val]);
        }
        this._size++;
        return true;
    }
    addAll(iterable) {
        for (const val of iterable) {
            this.add(val);
        }
        return this;
    }
    canonicalize(val) {
        const hashCode = val.hashCode(), bucket = this._map.get(hashCode);
        if (bucket) {
            const existing = bucket.find(x => x.equals(val));
            if (existing) {
                return existing;
            }
            bucket.push(val);
        }
        else {
            this._map.set(hashCode, [val]);
        }
        this._size++;
        return val;
    }
    has(val) {
        const hashCode = val.hashCode(), bucket = this._map.get(hashCode);
        return undefined !== bucket && bucket.some(x => x.equals(val));
    }
    getLike(val) {
        for (const hashCode of val.hashCodes()) {
            const bucket = this._map.get(hashCode);
            const canonVal = bucket && bucket.find(x => x.like(val));
            if (canonVal)
                return canonVal;
        }
    }
    canonicalizeLike(val) {
        // if this.getLike(val) is defined, return it, otherwise add val and return val
        return this.getLike(val) || this.canonicalize(val);
    }
    addLike(val) {
        return !this.getLike(val) && this.add(val);
    }
    'delete'(val) {
        const hashCode = val.hashCode(), bucket = this._map.get(hashCode);
        if (bucket) {
            const index = bucket.findIndex(x => x.equals(val));
            if (-1 != index) {
                if (1 == bucket.length) {
                    this._map.delete(hashCode);
                }
                else {
                    bucket.splice(index, 1);
                }
                this._size--;
                return true;
            }
        }
        return false;
    }
    deleteLike(val) {
        for (const hashCode of val.hashCodes()) {
            const bucket = this._map.get(hashCode);
            if (bucket) {
                const index = bucket.findIndex(x => x.like(val));
                if (-1 != index) {
                    const deleted = bucket[index];
                    if (1 == bucket.length) {
                        this._map.delete(hashCode);
                    }
                    else {
                        bucket.splice(index, 1);
                    }
                    this._size--;
                    return deleted;
                }
            }
        }
    }
    *values() {
        for (const bucket of this._map.values()) {
            yield* bucket;
        }
    }
    *entries() {
        for (const bucket of this._map.values()) {
            for (const value of bucket) {
                yield [value, value];
            }
        }
    }
    clear() {
        this._map.clear();
        this._size = 0;
    }
    get size() {
        return this._size;
    }
    toString() {
        return '{' + Array.from(this.values()).join(', ') + '}';
    }
}
class Pair {
    constructor(left, right) {
        this.left = left;
        this.right = right;
    }
    hashCode() {
        return this.left.hashCode() * 31 + this.right.hashCode();
    }
    equals(other) {
        return this == other || Object.getPrototypeOf(other) == Pair.prototype && this.left.equals(other.left) && this.right.equals(other.right);
    }
    toString() {
        return '(' + this.left.toString() + ', ' + this.right.toString() + ')';
    }
    toSource() {
        return 'new Pair(' + this.left.toSource() + ', ' + this.right.toSource() + ')';
    }
}
//# sourceMappingURL=bundle.module.js.map

class Vector {
    constructor(v) {
        this.v = v;
        assertInst(Float64Array, v);
    }
    static fromFunction(dims, f) {
        assertNumbers(dims);
        const e = new Float64Array(dims);
        let i = dims;
        while (i--) {
            e[i] = f(i);
        }
        return new Vector(e);
    }
    static random(dims) {
        return Vector.fromFunction(dims, (i) => Math.random());
    }
    static from(...args) {
        assert(args[0] instanceof Float64Array || args.every(a => 'number' == typeof a), 'args[0] instanceof Float64Array || args.every(a => "number" == typeof a)');
        return new Vector(args[0] instanceof Float64Array ? args[0] : Float64Array.from(args));
    }
    static Zero(dims) {
        assertNumbers(dims);
        let i = 0;
        const n = new Float64Array(dims);
        while (i--) {
            n[i] = 0;
        }
        return new Vector(n);
    }
    static Unit(dims, dir) {
        assertNumbers(dims, dir);
        let i = 0;
        const n = new Float64Array(dims);
        while (i--) {
            n[i] = +(i == dir); // +true === 1, +false === 0
        }
        return new Vector(n);
    }
    [Symbol.iterator]() {
        return this.v[Symbol.iterator]();
    }
    dim() {
        return this.v.length;
    }
    e(index) {
        if (0 > index || index >= this.v.length) {
            throw new Error('array index out of bounds');
        }
        return this.v[index];
    }
    plus(vector) {
        const u = this.v, v = vector.v;
        const n = new Float64Array(u.length);
        let i = u.length;
        while (i--) {
            n[i] = u[i] + v[i];
        }
        return new Vector(n);
    }
    minus(vector) {
        const u = this.v, v = vector.v;
        const n = new Float64Array(u.length);
        let i = u.length;
        while (i--) {
            n[i] = u[i] - v[i];
        }
        return new Vector(n);
    }
    times(factor) {
        const u = this.v;
        const n = new Float64Array(u.length);
        let i = u.length;
        while (i--) {
            n[i] = u[i] * factor;
        }
        return new Vector(n);
    }
    div(val) {
        const u = this.v;
        const n = new Float64Array(u.length);
        let i = u.length;
        while (i--) {
            n[i] = u[i] / val;
        }
        return new Vector(n);
    }
    dot(vector) {
        assert(this.dim == vector.dim, 'passed vector must have the same dim');
        let result = 0;
        const u = this.v, v = vector.v;
        let i = u.length;
        while (i--) {
            result += u[i] * v[i];
        }
        return result;
    }
    cross(vector) {
        assertInst(Vector, vector);
        const n = new Float64Array(3);
        n[0] = this.v[1] * vector.v[2] - this.v[2] * vector.v[1];
        n[1] = this.v[2] * vector.v[0] - this.v[0] * vector.v[2];
        n[2] = this.v[0] * vector.v[1] - this.v[1] * vector.v[0];
        return new Vector(n);
    }
    schur(vector) {
        assertInst(Vector, vector);
        const u = this.v, v = vector.v;
        const n = new Float64Array(u.length);
        let i = u.length;
        while (i--) {
            n[i] = u[i] * v[i];
        }
        return new Vector(n);
    }
    equals(obj) {
        if (obj === this)
            return true;
        if (obj.constructor !== Vector)
            return false;
        if (this.v.length != obj.v.length)
            return false;
        let i = this.v.length;
        while (i--) {
            if (!eq(this.v[i], obj.v[i]))
                return false;
        }
        return true;
    }
    map(f) {
        return new Vector(this.v.map(f));
    }
    toString(roundFunction) {
        roundFunction = roundFunction || ((v) => +v.toFixed(6));
        return 'Vector(' + this.v.map(roundFunction).join(', ') + ')';
    }
    /*
     get x() {
     return this.v[0]
     },
     get y() {
     return this.v[1]
     },
     get z() {
     return this.v[2]
     },
     get w() {
     return this.v[3]
     },
     */
    angleTo(vector) {
        assertInst(Vector, vector);
        assert(!this.isZero(), '!this.likeO()');
        assert(!vector.isZero(), '!vector.likeO()');
        return Math.acos(this.dot(vector) / this.length() / vector.length());
    }
    /**
     Returns true iff this is parallel to vector, using equals
     Throw a DebugError
     if vector is not a Vector or
     if this has a length of 0 or
     if vector has a length of 0
     */
    isParallelTo(vector) {
        assertInst(Vector, vector);
        assert(!this.isZero(), '!this.likeO()');
        assert(!vector.isZero(), '!vector.likeO()');
        // a . b takes on values of +|a|*|b| (vectors same direction) to -|a|*|b| (opposite direction)
        // in both cases the vectors are paralle, so check if abs(a . b) == |a|*|b|
        return eq(Math.sqrt(this.lengthSquared() * vector.lengthSquared()), Math.abs(this.dot(vector)));
    }
    isPerpendicularTo(vector) {
        assertInst(Vector, vector);
        assert(!this.isZero(), '!this.likeO()');
        assert(!vector.isZero(), '!vector.likeO()');
        return eq0(this.dot(vector));
    }
    /**
     Returns true iff the length of this vector is 0, as returned by NLA.isZero.
     Definition: Vector.prototype.isZero = () => NLA.isZero(this.length())
     */
    isZero() {
        return eq0(this.length());
    }
    // Returns a new unit Vector (.length() === 1) with the same direction as this vector. Throws a
    /*/ Returns the length of this Vector, i.e. the euclidian norm.*/
    length() {
        return Math.hypot.apply(undefined, this.v);
        //return Math.sqrt(this.lengthSquared())
    }
    lengthSquared() {
        let result = 0;
        const u = this.v;
        let i = u.length;
        while (i--) {
            result += u[i] * u[i];
        }
        return result;
    }
    // NLA_DEBUGError if this has a length of 0.
    normalized() {
        const length = this.length();
        if (eq0(length)) {
            throw new Error('cannot normalize zero vector');
        }
        return this.div(this.length());
    }
    asRowMatrix() {
        return new Matrix(this.v.length, 1, this.v);
    }
    asColMatrix() {
        return new Matrix(1, this.v.length, this.v);
    }
    /**
     Returns a new Vector which is the projection of this vector onto the passed vector.
     Examples
     NLA.V(3, 4).projectedOn(NLA.V(1, 0)) // returns NLA.V(3, 0)
     NLA.V(3, 4).projectedOn(NLA.V(2, 0)) // returns NLA.V(3, 0)
     NLA.V(3, 4).projectedOn(NLA.V(-1, 0)) // returns NLA.V(-3, 0)
     NLA.V(3, 4).projectedOn(NLA.V(0, 1)) // returns NLA.V(0, 4)
     NLA.V(3, 4).projectedOn(NLA.V(1, 1)) // returns
     */
    projectedOn(b) {
        assertInst(Vector, b);
        // https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2
        return b.times(this.dot(b) / b.dot(b));
    }
    rejectedOn(b) {
        assertInst(Vector, b);
        // https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2
        return this.minus(b.times(this.dot(b) / b.dot(b)));
    }
    /**
     Returns true iff the length() of this vector is equal to 'length', using equals
     E.g. NLA.V(3, 4).hasLength(5) === true
     NLA.V(1, 1).hasLength(1) === false
     */
    hasLength(length) {
        assertNumbers(length);
        return eq(length, this.length());
    }
    V3() {
        //assert(this.dim() == 3)
        return new V3(this.v[0], this.v[1], this.v[2]);
    }
}

class Matrix {
    constructor(width, height, m) {
        assert(width * height == m.length, 'width * height == m.length', width, height, m.length);
        this.m = m;
        this.width = width;
        this.height = height;
    }
    static random(width, height) {
        assertNumbers(width, height);
        return Matrix.fromFunction(width, height, (i, j) => Math.random());
    }
    static fromFunction(width, height, f) {
        assertNumbers(width, height);
        const m = new Float64Array(height * width);
        let elIndex = height * width;
        while (elIndex--) {
            m[elIndex] = f(Math.floor(elIndex / width), elIndex % width, elIndex);
        }
        return new Matrix(width, height, m);
    }
    static identityN(dim) {
        assertNumbers(dim);
        const m = new Float64Array(dim * dim);
        // Float64Arrays are init to 0
        let elIndex = dim * (dim + 1);
        while (elIndex) {
            elIndex -= (dim + 1);
            m[elIndex] = 1;
        }
        return new Matrix(dim, dim, m);
    }
    static permutation(dim, i, k) {
        assertNumbers(dim, i, k);
        const m = new Float64Array(dim * dim);
        // Float64Array are init to 0
        let elIndex = dim * (dim + 1);
        while (elIndex) {
            elIndex -= (dim + 1);
            m[elIndex] = 1;
        }
        m[i * dim + i] = 0;
        m[k * dim + k] = 0;
        m[i * dim + k] = 1;
        m[k * dim + i] = 1;
        return new Matrix(dim, dim, m);
    }
    static fromRowArrays(...args) {
        return Matrix.fromRowArrays2(args);
    }
    static fromRowArrays2(arrays) {
        if (0 == arrays.length) {
            throw new Error('cannot have 0 vector');
        }
        const height = arrays.length;
        const width = arrays[0].length;
        const m = new Float64Array(height * width);
        arrayCopy(arrays[0], 0, m, 0, width);
        for (let rowIndex = 1; rowIndex < height; rowIndex++) {
            if (arrays[rowIndex].length != width) {
                throw new Error('all row arrays must be the same length');
            }
            arrayCopy(arrays[rowIndex], 0, m, rowIndex * width, width);
        }
        return new Matrix(width, height, m);
    }
    static fromColVectors(colVectors) {
        return Matrix.fromColArrays(colVectors.map((v) => v.v));
    }
    static forWidthHeight(width, height) {
        return new Matrix(width, height, new Float64Array(width * height));
    }
    static fromColArrays(colArrays) {
        if (0 == colArrays.length) {
            throw new Error('cannot have 0 vector');
        }
        const width = colArrays.length;
        const height = colArrays[0].length;
        const m = new Float64Array(height * width);
        arrayCopyStep(colArrays[0], 0, 1, m, 0, width, height);
        for (let colIndex = 1; colIndex < width; colIndex++) {
            if (colArrays[colIndex].length != height) {
                throw new Error('all col arrays must be the same length');
            }
            arrayCopyStep(colArrays[colIndex], 0, 1, m, colIndex, width, height);
        }
        return new Matrix(width, height, m);
    }
    /**
     * Numerically calculate all the partial derivatives of f at x0.
     *
     *
     * @param f
     * @param x0
     * @param fx0 f(x0), pass it if you have it already
     * @param EPSILON
     */
    static jacobi(f, x0, fx0 = f(x0), EPSILON = 1e-6) {
        const jacobi = Matrix.forWidthHeight(x0.length, fx0.length);
        for (let colIndex = 0; colIndex < x0.length; colIndex++) {
            x0[colIndex] += EPSILON;
            const fx = f(x0);
            for (let rowIndex = 0; rowIndex < fx0.length; rowIndex++) {
                const value = (fx[rowIndex] - fx0[rowIndex]) / EPSILON;
                jacobi.setEl(rowIndex, colIndex, value);
            }
            x0[colIndex] -= EPSILON;
        }
        return jacobi;
    }
    e(rowIndex, colIndex) {
        assertNumbers(rowIndex, colIndex);
        if (NLA_DEBUG && (rowIndex >= this.height || colIndex >= this.width)) {
            throw new Error('index ' + rowIndex + ', ' + colIndex + ' is out of bounds (' + this.width + ' x ' + this.height + ')');
        }
        return this.m[rowIndex * this.width + colIndex];
    }
    setEl(rowIndex, colIndex, val) {
        assertNumbers(rowIndex, colIndex, val);
        assert(0 <= rowIndex && rowIndex < this.height, 'rowIndex out of bounds ' + rowIndex);
        assert(0 <= colIndex && colIndex < this.width, 'colIndex out of bounds ' + colIndex);
        this.m[rowIndex * this.width + colIndex] = val;
    }
    plus(m) {
        assert(this.width == m.width);
        assert(this.height == m.height);
        const r = this.new();
        let i = this.m.length;
        while (i--)
            r.m[i] = this.m[i] + m.m[i];
        return r;
    }
    minus(m) {
        assert(this.width == m.width);
        assert(this.height == m.height);
        const r = this.new();
        let i = this.m.length;
        while (i--)
            r.m[i] = this.m[i] - m.m[i];
        return r;
    }
    mulScalar(factor) {
        const r = this.new();
        let i = this.m.length;
        while (i--)
            r.m[i] = this.m[i] * factor;
        return r;
    }
    divScalar(scalar) {
        const r = this.new();
        let i = this.m.length;
        while (i--)
            r.m[i] = this.m[i] / scalar;
        return r;
    }
    new() {
        return new Matrix(this.width, this.height, new Float64Array(this.width * this.height));
    }
    toString(f, colNames, rowNames) {
        f = f || ((v) => v.toFixed(6));
        assert(typeof f(0) == 'string', '' + typeof f(0));
        assert(!colNames || colNames.length == this.width);
        assert(!rowNames || rowNames.length == this.height);
        const rounded = Array.from(this.m).map(f);
        const rows = arrayFromFunction(this.height, (rowIndex) => rounded.slice(rowIndex * this.width, (rowIndex + 1) * this.width)); // select matrix row
        if (colNames) {
            rows.unshift(Array.from(colNames));
        }
        if (rowNames) {
            rows.forEach((row, rowIndex) => row.unshift(rowNames[rowIndex - (colNames ? 1 : 0)] || ''));
        }
        const colWidths = arrayFromFunction(this.width, (colIndex) => rows.map(row => row[colIndex].length).max());
        return rows.map((row, rowIndex) => row.map((x, colIndex) => {
            // pad numbers with spaces to col width
            const padder = rowIndex == 0 && colNames || colIndex == 0 && rowNames
                ? String.prototype.padEnd
                : String.prototype.padStart;
            return padder.call(x, colWidths[colIndex]);
        }).join('  ')).map(x => x + '\n').join(''); // join rows
    }
    row(rowIndex) {
        const v = new Float64Array(this.width);
        arrayCopy(this.m, rowIndex * this.width, v, 0, this.width);
        return new Vector(v);
    }
    col(colIndex) {
        const v = new Float64Array(this.height);
        arrayCopyStep(this.m, colIndex, this.width, v, 0, 1, this.height);
        return new Vector(v);
    }
    dim() {
        return { width: this.width, height: this.height };
    }
    dimString() {
        return this.width + 'x' + this.height;
    }
    equals(obj) {
        if (obj.constructor != this.constructor)
            return false;
        if (this.width != obj.width || this.height != obj.height)
            return false;
        let elIndex = this.m.length;
        while (elIndex--) {
            if (this.m[elIndex] != obj.m[elIndex])
                return false;
        }
        return true;
    }
    equalsMatrix(matrix, precision) {
        precision = precision || NLA_PRECISION;
        if (!(matrix instanceof Matrix))
            throw new Error('not a matrix');
        if (this.width != matrix.width || this.height != matrix.height)
            return false;
        let elIndex = this.m.length;
        while (elIndex--) {
            if (Math.abs(this.m[elIndex] - matrix.m[elIndex]) >= precision)
                return false;
        }
        return true;
    }
    hashCode() {
        let result = 0;
        let elIndex = this.m.length;
        while (elIndex--) {
            result = result * 31 + floatHashCode(this.m[elIndex]);
        }
        return result;
    }
    // todo rename
    isZero() {
        let elIndex = this.m.length;
        while (elIndex--) {
            if (!eq0(this.m[elIndex])) {
                return false;
            }
        }
        return true;
    }
    isOrthogonal() {
        return this.isSquare() && this.transposed().times(this).equalsMatrix(Matrix.identityN(this.width));
    }
    /**
     * Returns L, U, P such that L * U == P * this
     */
    luDecomposition() {
        assertf(() => this.isSquare(), this.dim().toSource());
        const dim = this.width;
        const uRowArrays = this.asRowArrays(Float64Array);
        const lRowArrays = arrayFromFunction(dim, (row) => new Float64Array(dim));
        const pRowArrays = Matrix.identityN(dim).asRowArrays(Float64Array);
        let currentRowIndex = 0;
        for (let colIndex = 0; colIndex < dim; colIndex++) {
            // find largest value in colIndex
            let maxAbsValue = 0, pivotRowIndex = -1, numberOfNonZeroRows = 0;
            for (let rowIndex = currentRowIndex; rowIndex < dim; rowIndex++) {
                const el = uRowArrays[rowIndex][colIndex];
                numberOfNonZeroRows += +(0 != el);
                if (Math.abs(el) > maxAbsValue) {
                    maxAbsValue = Math.abs(el);
                    pivotRowIndex = rowIndex;
                }
            }
            // TODO: check with isZero
            if (0 == maxAbsValue) {
                // column contains only zeros
                continue;
            }
            assert(-1 !== pivotRowIndex);
            // swap rows
            arraySwap(uRowArrays, currentRowIndex, pivotRowIndex);
            arraySwap(lRowArrays, currentRowIndex, pivotRowIndex);
            arraySwap(pRowArrays, currentRowIndex, pivotRowIndex);
            lRowArrays[colIndex][colIndex] = 1;
            if (1 < numberOfNonZeroRows) {
                // subtract pivot (now current) row from all below it
                for (let rowIndex = currentRowIndex + 1; rowIndex < dim; rowIndex++) {
                    const l = uRowArrays[rowIndex][colIndex] / uRowArrays[currentRowIndex][colIndex];
                    lRowArrays[rowIndex][colIndex] = l;
                    // subtract pivot row * l from row 'rowIndex'
                    for (let colIndex2 = colIndex; colIndex2 < dim; colIndex2++) {
                        uRowArrays[rowIndex][colIndex2] -= l * uRowArrays[currentRowIndex][colIndex2];
                    }
                }
            }
            currentRowIndex++; // this doesn't increase if pivot was zero
        }
        return {
            L: Matrix.fromRowArrays2(lRowArrays),
            U: Matrix.fromRowArrays2(uRowArrays),
            P: Matrix.fromRowArrays2(pRowArrays),
        };
    }
    gauss() {
        const width = this.width, height = this.height;
        const uRowArrays = this.asRowArrays(Float64Array);
        const lRowArrays = arrayFromFunction(height, (row) => new Float64Array(width));
        const pRowArrays = Matrix.identityN(height).asRowArrays(Float64Array);
        let currentRowIndex = 0;
        for (let colIndex = 0; colIndex < width; colIndex++) {
            // console.log('currentRowIndex', currentRowIndex)	// find largest value in colIndex
            let maxAbsValue = 0, pivotRowIndex = -1, numberOfNonZeroRows = 0;
            for (let rowIndex = currentRowIndex; rowIndex < height; rowIndex++) {
                const el = uRowArrays[rowIndex][colIndex];
                numberOfNonZeroRows += +(0 != el);
                if (Math.abs(el) > maxAbsValue) {
                    maxAbsValue = Math.abs(el);
                    pivotRowIndex = rowIndex;
                }
            }
            // TODO: check with isZero
            if (0 == maxAbsValue) {
                // column contains only zeros
                continue;
            }
            assert(-1 !== pivotRowIndex);
            // swap rows
            arraySwap(uRowArrays, currentRowIndex, pivotRowIndex);
            arraySwap(lRowArrays, currentRowIndex, pivotRowIndex);
            arraySwap(pRowArrays, currentRowIndex, pivotRowIndex);
            lRowArrays[currentRowIndex][colIndex] = 1;
            if (1 < numberOfNonZeroRows) {
                // subtract pivot (now current) row from all below it
                for (let rowIndex = currentRowIndex + 1; rowIndex < height; rowIndex++) {
                    const l = uRowArrays[rowIndex][colIndex] / uRowArrays[currentRowIndex][colIndex];
                    lRowArrays[rowIndex][colIndex] = l;
                    // subtract pivot row * l from row 'rowIndex'
                    for (let colIndex2 = colIndex; colIndex2 < width; colIndex2++) {
                        uRowArrays[rowIndex][colIndex2] -= l * uRowArrays[currentRowIndex][colIndex2];
                    }
                }
            }
            currentRowIndex++; // this doesn't increase if pivot was zero
        }
        return {
            L: Matrix.fromRowArrays2(lRowArrays),
            U: Matrix.fromRowArrays2(uRowArrays),
            P: Matrix.fromRowArrays2(pRowArrays),
        };
    }
    qrDecompositionGivensRotation() {
        function matrixForCS(dim, i, k, c, s) {
            const m = Matrix.identityN(dim);
            m.setEl(i, i, c);
            m.setEl(k, k, c);
            m.setEl(i, k, s);
            m.setEl(k, i, -s);
            return m;
        }
        let qTransposed = Matrix.identityN(this.height);
        for (let colIndex = 0; colIndex < this.width; colIndex++) {
            // find largest value in colIndex
            for (let rowIndex = colIndex + 1; rowIndex < this.height; rowIndex++) {
                //console.log('row ', rowIndex, 'col ', colIndex)
                const xi = this.e(colIndex, colIndex);
                const xk = this.e(rowIndex, colIndex);
                if (xk == 0) {
                    continue;
                }
                const r = Math.sqrt(xi * xi + xk * xk);
                const c = xi / r;
                const s = xk / r;
                // apply transformation on every column:
                for (let col2 = colIndex; col2 < this.width; col2++) {
                    const x1 = this.e(colIndex, col2) * c + this.e(rowIndex, col2) * s;
                    const x2 = this.e(rowIndex, col2) * c - this.e(colIndex, col2) * s;
                    this.setEl(colIndex, col2, x1);
                    this.setEl(rowIndex, col2, x2);
                }
                //console.log('r ', r, 'c ', c, 's ', s, 'sigma', sigma(c, s))
                //console.log(this.toString(),'cs\n', matrixForCS(this.height, colIndex, rowIndex, c, s).toString())
                qTransposed = matrixForCS(this.height, colIndex, rowIndex, c, s).times(qTransposed);
            }
        }
        //console.log(qTransposed.transposed().toString(), this.toString(),
        // qTransposed.transposed().times(this).toString())
        return { Q: qTransposed.transposed(), R: this };
    }
    isPermutation() {
        if (!this.isSquare())
            return false;
        if (this.m.some((value) => !eq0(value) && !eq(1, value)))
            return false;
        const rows = this.asRowArrays(Array);
        if (rows.some((row) => row.filter((value) => eq(1, value)).length != 1))
            return false;
        const cols = this.asColArrays(Array);
        if (cols.some((col) => col.filter((value) => eq(1, value)).length != 1))
            return false;
        return true;
    }
    isDiagonal(precision) {
        let i = this.m.length;
        while (i--) {
            if (0 !== i % (this.width + 1) && !eq0(this.m[i]))
                return false;
        }
        return true;
    }
    isIdentity(precision) {
        return this.isLowerUnitriangular(precision) && this.isUpperTriangular(precision);
    }
    isUpperTriangular(precision) {
        precision = 'number' == typeof precision ? precision : NLA_PRECISION;
        if (!this.isSquare())
            return false;
        for (let rowIndex = 1; rowIndex < this.height; rowIndex++) {
            for (let colIndex = 0; colIndex < rowIndex; colIndex++) {
                if (!eq0(this.m[rowIndex * this.width + colIndex], precision)) {
                    return false;
                }
            }
        }
        return true;
    }
    /**
     * Returns x, so that this * x = b
     * More efficient than calculating the inverse for few (~ <= this.height) values
     */
    solveLinearSystem(b) {
        const lup = this.luDecomposition();
        // console.log(lup.L.toString())
        // console.log(lup.U.toString())
        // console.log(lup.P.toString())
        const y = lup.L.solveForwards(lup.P.timesVector(b));
        const x = lup.U.solveBackwards(y);
        return x;
    }
    isLowerUnitriangular(precision) {
        precision = 'number' == typeof precision ? precision : NLA_PRECISION;
        if (!this.isSquare())
            return false;
        for (let rowIndex = 0; rowIndex < this.height - 1; rowIndex++) {
            for (let colIndex = rowIndex; colIndex < this.width; colIndex++) {
                const el = this.m[rowIndex * this.width + colIndex];
                if (rowIndex == colIndex ? !eq(1, el, precision) : !eq0(el, precision)) {
                    return false;
                }
            }
        }
        return true;
    }
    isLowerTriangular() {
        if (!this.isSquare())
            return false;
        for (let rowIndex = 0; rowIndex < this.height - 1; rowIndex++) {
            for (let colIndex = rowIndex + 1; colIndex < this.width; colIndex++) {
                if (!eq0(this.m[rowIndex * this.width + colIndex])) {
                    return false;
                }
            }
        }
        return true;
    }
    solveBackwards(x) {
        assertVectors(x);
        assert(this.height == x.dim(), 'this.height == x.dim()');
        assert(this.isUpperTriangular(), 'this.isUpperTriangular()\n' + this.str);
        const v = new Float64Array(this.width);
        let rowIndex = this.height;
        while (rowIndex--) {
            let temp = x.v[rowIndex];
            for (let colIndex = rowIndex + 1; colIndex < this.width; colIndex++) {
                temp -= v[colIndex] * this.e(rowIndex, colIndex);
            }
            v[rowIndex] = temp / this.e(rowIndex, rowIndex);
        }
        return new Vector(v);
    }
    solveBackwardsMatrix(matrix) {
        const colVectors = new Array(matrix.width);
        let i = matrix.width;
        while (i--) {
            colVectors[i] = this.solveBackwards(matrix.col(i));
        }
        return Matrix.fromColVectors(colVectors);
    }
    solveForwardsMatrix(matrix) {
        const colVectors = new Array(matrix.width);
        let i = matrix.width;
        while (i--) {
            colVectors[i] = this.solveForwards(matrix.col(i));
        }
        return Matrix.fromColVectors(colVectors);
    }
    solveForwards(x) {
        assertVectors(x);
        assert(this.height == x.dim(), 'this.height == x.dim()');
        assertf(() => this.isLowerTriangular(), this.toString());
        const v = new Float64Array(this.width);
        for (let rowIndex = 0; rowIndex < this.height; rowIndex++) {
            let temp = x.v[rowIndex];
            for (let colIndex = 0; colIndex < rowIndex; colIndex++) {
                temp -= v[colIndex] * this.e(rowIndex, colIndex);
            }
            v[rowIndex] = temp / this.e(rowIndex, rowIndex);
        }
        return new Vector(v);
    }
    /**
     * Calculates rank of matrix.
     * Number of linearly independant row/column vectors.
     * Is equal to the unmber of dimensions the image of the affine transformation represented this matrix has.
     */
    rank() {
        const U = this.gauss().U;
        //console.log(R.toString())
        let rowIndex = this.height;
        while (rowIndex-- && U.row(rowIndex).isZero()) {
            console.log('RANK' + U.row(rowIndex).toString() + U.row(rowIndex).isZero());
        }
        return rowIndex + 1;
    }
    rowsIndependent() {
        return this.height == this.rank();
    }
    colsIndependent() {
        return this.width == this.rank();
    }
    asRowArrays(arrayConstructor) {
        arrayConstructor = arrayConstructor || Float64Array;
        let rowIndex = this.height;
        const result = new Array(this.height);
        while (rowIndex--) {
            result[rowIndex] = this.rowArray(rowIndex, arrayConstructor);
        }
        return result;
    }
    asColArrays(arrayConstructor) {
        arrayConstructor = arrayConstructor || Float64Array;
        let colIndex = this.width;
        const result = new Array(this.width);
        while (colIndex--) {
            result[colIndex] = this.colArray(colIndex, arrayConstructor);
        }
        return result;
    }
    rowArray(rowIndex, arrayConstructor) {
        arrayConstructor = arrayConstructor || Float64Array;
        const result = new arrayConstructor(this.width);
        arrayCopy(this.m, rowIndex * this.width, result, 0, this.width);
        return result;
    }
    colArray(colIndex, arrayConstructor) {
        arrayConstructor = arrayConstructor || Float64Array;
        const result = new arrayConstructor(this.width);
        arrayCopyStep(this.m, colIndex, this.height, result, 0, 1, this.height);
        return result;
    }
    subMatrix(firstColIndex, subWidth, firstRowIndex, subHeight) {
        assert(firstColIndex + subWidth > this.width || firstRowIndex + subHeight > this.height);
        const m = new Float64Array(this.height);
        arrayCopyBlocks(this.m, firstColIndex, this.width, m, 0, subWidth, subHeight, subWidth);
        return new Matrix(subWidth, subHeight, m);
    }
    map(fn) {
        return new Matrix(this.width, this.height, this.m.map(fn));
    }
    dimEquals(matrix) {
        assertInst(Matrix, matrix);
        return this.width == matrix.width && this.height == matrix.height;
    }
    inversed() {
        const lup = this.luDecomposition();
        const y = lup.L.solveForwardsMatrix(lup.P);
        console.log(y);
        const inverse = lup.U.solveBackwardsMatrix(y);
        return inverse;
    }
    inversed3() {
        assertf(() => 3 == this.width && 3 == this.height);
        const result = Matrix.forWidthHeight(3, 3), m = this.m, r = result.m;
        r[0] = m[4] * m[8] - m[5] * m[7];
        r[1] = -m[1] * m[8] + m[2] * m[7];
        r[2] = m[1] * m[5] - m[2] * m[4];
        r[3] = -m[3] * m[8] + m[5] * m[6];
        r[4] = m[0] * m[8] - m[2] * m[6];
        r[5] = -m[0] * m[5] + m[2] * m[3];
        r[6] = m[3] * m[7] - m[4] * m[6];
        r[7] = -m[0] * m[7] + m[1] * m[6];
        r[8] = m[0] * m[4] - m[1] * m[3];
        const det = m[0] * r[0] + m[1] * r[3] + m[2] * r[6];
        let i = 9;
        while (i--) {
            r[i] /= det;
        }
        return result;
    }
    inversed2() {
        assertf(() => 2 == this.width && 2 == this.height);
        const result = Matrix.forWidthHeight(2, 2), m = this.m, r = result.m;
        const det = m[0] * m[3] - m[1] * r[2];
        r[0] = m[3] / det;
        r[1] = -m[2] / det;
        r[2] = -m[1] / det;
        r[3] = m[0] / det;
        return result;
    }
    canMultiply(matrix) {
        assertInst(Matrix, matrix);
        return this.width == matrix.height;
    }
    times(matrix) {
        assertInst(Matrix, matrix);
        assert(this.canMultiply(matrix), `Cannot multiply this {this.dimString()} by matrix {matrix.dimString()}`);
        const nWidth = matrix.width, nHeight = this.height, n = this.width;
        const nM = new Float64Array(nWidth * nHeight);
        let nRowIndex = nHeight;
        while (nRowIndex--) {
            let nColIndex = nWidth;
            while (nColIndex--) {
                let result = 0;
                let i = n;
                while (i--) {
                    result += this.m[nRowIndex * n + i] * matrix.m[i * nWidth + nColIndex];
                }
                nM[nRowIndex * nWidth + nColIndex] = result;
            }
        }
        return new Matrix(nWidth, nHeight, nM);
    }
    timesVector(v) {
        assertVectors(v);
        assert(this.width == v.dim());
        const nHeight = this.height, n = this.width;
        const nM = new Float64Array(nHeight);
        let nRowIndex = nHeight;
        while (nRowIndex--) {
            let result = 0;
            let i = n;
            while (i--) {
                result += this.m[nRowIndex * n + i] * v.v[i];
            }
            nM[nRowIndex] = result;
        }
        return new Vector(nM);
    }
    transposed() {
        const tWidth = this.height, tHeight = this.width;
        const tM = new Float64Array(tWidth * tHeight);
        let tRowIndex = tHeight;
        while (tRowIndex--) {
            let tColIndex = tWidth;
            while (tColIndex--) {
                tM[tRowIndex * tWidth + tColIndex] = this.m[tColIndex * tHeight + tRowIndex];
            }
        }
        return new Matrix(tWidth, tHeight, tM);
    }
    /**
     * In-place transpose.
     */
    transpose() {
        const h = this.height, w = this.width, tM = this.m;
        let tRowIndex = h;
        while (tRowIndex--) {
            let tColIndex = Math.min(tRowIndex, w);
            while (tColIndex--) {
                console.log('col', tColIndex, 'row', tRowIndex);
                const temp = tM[tRowIndex * w + tColIndex];
                tM[tRowIndex * w + tColIndex] = tM[tColIndex * h + tRowIndex];
                tM[tColIndex * h + tRowIndex] = temp;
            }
        }
        this.width = h;
        this.height = w;
    }
    isSquare() {
        return this.height == this.width;
    }
    diagonal() {
        if (!this.isSquare()) {
            throw new Error('!!');
        }
        const v = new Float64Array(this.width);
        let elIndex = this.width * (this.width + 1);
        let vIndex = this.width;
        while (vIndex--) {
            elIndex -= this.width + 1;
            v[vIndex] = this.m[elIndex];
        }
        return new Vector(v);
    }
    maxEl() {
        return Math.max.apply(undefined, this.m);
    }
    minEl() {
        return Math.min.apply(undefined, this.m);
    }
    maxAbsColSum() {
        let result = 0;
        let colIndex = this.width;
        while (colIndex--) {
            let absSum = 0;
            let rowIndex = this.height;
            while (rowIndex--) {
                absSum += Math.abs(this.m[rowIndex * this.width + colIndex]);
            }
            result = Math.max(result, absSum);
        }
        return result;
    }
    maxAbsRowSum() {
        let result = 0;
        let rowIndex = this.height;
        while (rowIndex--) {
            let absSum = 0;
            let colIndex = this.width;
            while (colIndex--) {
                absSum += Math.abs(this.m[rowIndex * this.width + colIndex]);
            }
            result = Math.max(result, absSum);
        }
        return result;
    }
    getTriangularDeterminant() {
        assert(this.isUpperTriangular() || this.isLowerTriangular(), 'not a triangular matrix');
        let product = 1;
        let elIndex = this.width * (this.width + 1);
        while (elIndex) {
            elIndex -= this.width + 1;
            product *= this.m[elIndex];
        }
        return product;
    }
    /**
     * Calculates the determinant by first calculating the LU decomposition. If you already have that, use
     * U.getTriangularDeterminant()
     */
    getDeterminant() {
        // PA = LU
        // det(A) * det(B) = det(A * B)
        // det(P) == 1 (permutation matrix)
        // det(L) == 1 (main diagonal is 1s
        // =>  det(A) == det(U)
        return this.luDecomposition().U.getTriangularDeterminant();
    }
    hasFullRank() {
        return Math.min(this.width, this.height) == this.rank();
    }
    permutationAsIndexMap() {
        assertf(() => this.isPermutation());
        const result = new Array(this.height);
        let i = this.height;
        while (i--) {
            const searchIndexStart = i * this.width;
            let searchIndex = searchIndexStart;
            while (this.m[searchIndex] < 0.5)
                searchIndex++;
            result[i] = searchIndex - searchIndexStart;
        }
        return result;
    }
    getDependentRowIndexes(gauss = this.gauss()) {
        const { L, U, P } = gauss;
        // rows which end up as zero vectors in U are not linearly independent
        const dependents = new Array(this.height);
        let uRowIndex = this.height;
        while (uRowIndex--) {
            const uRow = U.row(uRowIndex);
            if (uRow.length() < NLA_PRECISION) {
                dependents[uRowIndex] = true;
            }
            else {
                break;
            }
        }
        // figure out from which other rows the rows which end up as zero vectors are created by
        let lRowIndex = this.height;
        while (lRowIndex--) {
            if (dependents[lRowIndex]) {
                let lColIndex = Math.min(lRowIndex, this.width);
                while (lColIndex--) {
                    if (0 !== L.e(lRowIndex, lColIndex)) {
                        dependents[lColIndex] = true;
                    }
                }
            }
        }
        console.log('m\n', this.toString(x => '' + x));
        console.log('L\n', L.toString(x => '' + x));
        console.log('U\n', U.toString(x => '' + x));
        console.log('P\n', P.toString(x => '' + x));
        // gauss algorithm permutes the order of the rows, so map our results back to the original indices
        const indexMap = P.permutationAsIndexMap();
        const dependentRowIndexes = dependents.map((b, index) => b && indexMap[index]).filter(x => x != undefined);
        return dependentRowIndexes;
    }
}

const { abs, PI, sign } = Math;
const TAU = 2 * PI;
/** @define {boolean} */
const NLA_DEBUG = true;
const NLA_PRECISION = 1 / (1 << 26);
console.log('NLA_PRECISION', NLA_PRECISION);
console.log('NLA_DEBUG', NLA_DEBUG);
let oldConsole = undefined;
function disableConsole() {
    oldConsole = console.log;
    console.log = function () { };
}
function enableConsole() {
    if (oldConsole) {
        console.log = oldConsole;
    }
}
function hasConstructor(instance, cons) {
    return instance.constructor == cons;
}
function getIntervals(ts, min, max) {
    ts.sort((a, b) => a - b);
    if (!eq(ts[0], min)) {
        ts.splice(0, 0, min);
    }
    if (!eq(ts.last, max)) {
        ts.push(max);
    }
    return arrayFromFunction(ts.length - 1, i => [ts[i], ts[i + 1]]);
}
function assertVectors(...vectors) {
    if (NLA_DEBUG) {
        for (let i = 0; i < arguments.length; i++) {
            if (!(arguments[i] instanceof V3 || arguments[i] instanceof Vector)) {
                throw new Error('assertVectors arguments[' + (i) + '] is not a vector. ' + typeof arguments[i] + ' == typeof ' + arguments[i]);
            }
        }
    }
    return true;
}
function assertInst(what, ...objs) {
    if (NLA_DEBUG) {
        for (let i = 0; i < objs.length; i++) {
            if (!(objs[i] instanceof what)) {
                throw new Error('assertInst objs[' + (i) + '] is not a ' + what.prototype.name + '. ' + objs[i].constructor.name + objs[i]);
            }
        }
    }
    return true;
}
function assertNumbers(...numbers) {
    if (NLA_DEBUG) {
        for (let i = 0; i < numbers.length; i++) {
            if ('number' !== typeof numbers[i]) {
                throw new Error('assertNumbers arguments[' + (i) + '] is not a number. ' + typeof numbers[i] + ' == typeof ' + numbers[i]);
            }
        }
    }
    return true;
}
function assert(value, ...messages) {
    if (NLA_DEBUG && !value) {
        throw new Error('assert failed: '
            + messages.map(message => ('function' === typeof message ? message() : message || '')).join('\n'));
    }
    return true;
}
function assertNever(value) {
    throw new Error();
}
function assertf(f, ...messages) {
    if (!f()) {
        throw new Error('assertf failed: ' + f.toString()
            + messages.map(message => ('function' === typeof message ? message() : message || '')).join('\n'));
    }
}
function lerp(a, b, t) {
    return a * (1 - t) + b * t;
}
const originalNumberToString = Number.prototype.toString;
Number.prototype.toString = function (radix) {
    if (PI == this) {
        return 'PI';
    }
    return originalNumberToString.call(this, radix);
};
const eq0 = (x, EPS = NLA_PRECISION) => Math.abs(x) <= EPS;
const eq = (x, y, EPS = NLA_PRECISION) => Math.abs(x - y) <= EPS;
const lt = (x, y, EPS = NLA_PRECISION) => x - y < -EPS;
const gt = (x, y, EPS = NLA_PRECISION) => y - x < -EPS;
const le = (x, y, EPS = NLA_PRECISION) => x - y <= EPS;
const ge = (x, y, EPS = NLA_PRECISION) => y - x <= EPS;
const eqAngle = (x, y) => zeroAngle(x - y);
const zeroAngle = (x) => ((x % (2 * Math.PI)) + 2 * Math.PI + NLA_PRECISION) % (2 * Math.PI) < 2 * NLA_PRECISION;
const snap = (x, to) => Math.abs(x - to) <= NLA_PRECISION ? to : x;
const snap2 = (x, ...to) => to.reduce((x, to) => Math.abs(x - to) <= NLA_PRECISION ? to : x, x);
const snapEPS = (x, EPS, ...to) => to.reduce((x, to) => Math.abs(x - to) <= EPS ? to : x, x);
const snap0 = (x, EPS = NLA_PRECISION) => Math.abs(x) <= EPS ? 0 : x;
const canonAngle = (x) => ((x % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);
/** @deprecated */ const eq02 = eq0;
/** @deprecated */ const eq2 = eq;
/**
 * Decimal adjustment of a number.
 *
 * @param f  The type of adjustment.
 * @param value The number.
 * @param exp The exponent (the 10 logarithm of the adjustment base).
 * @returns The adjusted value.
 */
function decimalAdjust(f, value, exp) {
    // If the exp is undefined or zero...
    if (typeof exp === 'undefined' || +exp === 0) {
        return f(value);
    }
    value = +value;
    exp = +exp;
    // If the value is not a number or the exp is not an integer...
    if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
        return NaN;
    }
    // Shift
    let vs = value.toString().split('e');
    value = f(+(vs[0] + 'e' + (vs[1] ? (+vs[1] - exp) : -exp)));
    // Shift back
    vs = value.toString().split('e');
    return +(vs[0] + 'e' + (vs[1] ? (+vs[1] + exp) : exp));
}
const round10 = decimalAdjust.bind(undefined, Math.round);
const floor10 = decimalAdjust.bind(undefined, Math.floor);
const ceil10 = decimalAdjust.bind(undefined, Math.ceil);
const GOLDEN_RATIO = (1 + Math.sqrt(5)) / 2;
function mod(a, b) {
    return ((a % b) + b) % b;
}
function arraySwap(arr, i, j) {
    const temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}
function arrayCopy(src, sstart, dst, dstart, length) {
    dstart += length;
    length += sstart;
    while (length-- > sstart) {
        dst[--dstart] = src[length];
    }
}
function clamp(val, min, max) {
    assertNumbers(val, min, max);
    return Math.max(min, Math.min(max, val));
}
function between(val, min, max) {
    return min <= val && val <= max;
}
function fuzzyBetween(val, min, max) {
    return le(min, val) && le(val, max);
}
function mapPush(map, key, val) {
    const array = map.get(key);
    if (array) {
        array.push(val);
    }
    else {
        map.set(key, [val]);
    }
}
function arrayCopyStep(src, sstart, sstep, dst, dstart, dstep, count) {
    let srcIndex = sstart + count * sstep;
    let dIndex = dstart + count * dstep;
    while (srcIndex > sstart) {
        dst[dIndex -= dstep] = src[srcIndex -= sstep];
    }
}
function arrayCopyBlocks(src, sstart, sstep, dst, dstart, dstep, blockSize, blockCount) {
    for (let i = 0; i < blockCount; i++) {
        arrayCopy(src, sstart + sstep * i, dst, dstart + dstep * i, blockSize);
    }
}
function arrayRange(startInclusive, endExclusive, step = 1) {
    assertNumbers(startInclusive, step);
    //console.log(Math.ceil((endExclusive - startInclusive) / step))
    const arrLength = Math.ceil((endExclusive - startInclusive) / step);
    const result = new Array(arrLength); // '- startInclusive' so that chunk in the last row will also be selected, even
    // if the row is not complete
    for (let i = startInclusive, index = 0; index < arrLength; i += step, index++) {
        result[index] = i;
    }
    return result;
}
function arrayFromFunction(length, f) {
    assertNumbers(length);
    assert('function' == typeof f);
    const a = new Array(length);
    let elIndex = length;
    while (elIndex--) {
        a[elIndex] = f(elIndex);
    }
    return a;
}
function fuzzyUniques(vals) {
    const round = (val) => Math.floor(val * (1 << 26)) / (1 << 26);
    const map = new Map();
    for (let i = 0; i < vals.length; i++) {
        const val = vals[i], roundVal = round(val);
        let key;
        if (!map.has(roundVal)
            && !((key = map.get(roundVal - 1 / (1 << 26))) && eq(key, val))
            && !((key = map.get(roundVal + 1 / (1 << 26))) && eq(key, val))) {
            map.set(roundVal, val);
        }
    }
    return Array.from(map.values());
}
function fuzzyUniquesF(vals, f) {
    const round = (val) => Math.floor(val * (1 << 26)) / (1 << 26);
    const map = new Map();
    for (let i = 0; i < vals.length; i++) {
        const val = vals[i], roundVal = round(f(val));
        let key;
        if (!map.has(roundVal)
            && !((key = map.get(roundVal - 1 / (1 << 26))) && eq(key, f(val)))
            && !((key = map.get(roundVal + 1 / (1 << 26))) && eq(key, f(val)))) {
            map.set(roundVal, val);
        }
    }
    return Array.from(map.values());
}
function addOwnProperties(target, props, ...exclude) {
    Object.getOwnPropertyNames(props).forEach(key => {
        //console.log(props, key)
        if (!exclude.includes(key)) {
            if (target.hasOwnProperty(key)) {
                console.warn('target ', target, ' already has property ', key, target[key]);
            }
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(props, key));
        }
    });
}
//function defineClass(name, parent, constructor, props, statics) {
//	assertf(() => 'function' == typeof constructor, 'function' == typeof constructor)
//	constructor.prototype = defineObject(parent && parent.prototype, props)
//	constructor.prototype.constructor = constructor
//	Object.defineProperty(constructor.prototype, 'name', {value: name})
//	statics && addOwnProperties(constructor, statics)
//	return constructor
//}
let defaultRoundFunction = (x) => x; // Math.round10(x, -4)
function forceFinite(val) {
    const valNum = parseFloat(val.replace(',', '.').replace(/^[^0-9,\.\-]/, ''));
    return Number.isFinite(valNum) ? valNum : 0;
}
const MINUS = (a, b) => a - b;
function floatHashCode(f) {
    return ~~(f * (1 << 28));
}
/**
 * combinations(2) will generate
 * [0,0] [0,1] [1,1] [0,2] [1,2] [2,2]
 */
function* combinations(n) {
    for (let i = 0; i < n; i++) {
        for (let j = i; j < n; j++) {
            yield { i: i, j: j };
        }
    }
}
/* The arithmetic-geometric mean of two non-negative numbers */
function arithmeticGeometricMean(x, y) {
    assertf(() => lt(0, x));
    assertf(() => lt(0, y));
    let a = x, g = y;
    let i = 30;
    while (i-- && a != g) {
        [a, g] = [(a + g) / 2, Math.sqrt(a * g)];
    }
    assert(i != -1);
    return a;
}
/**
 * incomplete elliptic integral of the first kind
 * EllipticF(phi, k2) = INT[0; phi] 1 / sqrt(1 - k2 * sin²(phi)) dphi
 */
function EllipticF(phi, k2) {
    return gaussLegendreQuadrature24(phi => Math.pow(1 - k2 * Math.pow(Math.sin(phi), 2), -0.5), 0, phi);
}
/**
 * incomplete elliptic integral of the second kind
 * EllipticE(phi, k2) = INT[0; phi] sqrt(1 - k2 * sin²(phi)) dphi
 */
function EllipticE(phi, k2) {
    return gaussLegendreQuadrature24(phi => Math.pow(1 - k2 * Math.pow(Math.sin(phi), 2), 0.5), 0, phi);
}
const DEG = .017453292519943295;
function rad2deg(rad) {
    //  discuss at: http://phpjs.org/functions/deg2rad/
    // original by: Enrique Gonzalez
    // improved by: Thomas Grainger (http://graingert.co.uk)
    //   example 1: deg2rad(45)
    //   returns 1: 0.7853981633974483
    return rad / DEG;
}
/**
 * numberToStr(2/3) == '0.6p'
 * numberToStr(7/12) == '0.583p'
 * numberToStr(2/7) == '0.285714pppppp'
 * numberToStr(NLA_PRECISION) == '0+'
 * numberToStr(-NLA_PRECISION) == '0-'
 * numberToStr(2-NLA_PRECISION) == '2-'
 * numberToStr(0) == '0='
 *
 */
function numberToStr(value, length) {
    let minAbsDiff = Infinity, closestValue = undefined, closestValueStr = undefined;
    function test(testValue, testValueStr) {
        const absDiff = Math.abs(testValue - value);
        console.log(testValue, testValueStr, absDiff);
        if (absDiff < minAbsDiff) {
            minAbsDiff = absDiff;
            closestValue = testValue;
            closestValueStr = testValueStr;
        }
        return 0 == absDiff;
    }
    function overline(str) {
        return str.split('').map(c => c + '\u0304').join('');
    }
    if (test(parseFloat(value.toFixed(length)), value.toFixed(length)))
        return closestValueStr + '=';
    const valueStr = '' + value;
    const toDecimal = valueStr.substr(0, valueStr.indexOf('.') + 1);
    const decimals = valueStr.substr(valueStr.indexOf('.') + 1);
    for (let startPos = 0; startPos < length; startPos++) {
        for (let endPos = startPos + 1; endPos <= length; endPos++) {
            const prefixDecimals = decimals.substr(0, startPos);
            const period = decimals.substr(startPos, endPos);
            const testValue = parseFloat(toDecimal + prefixDecimals + period.repeat(Math.ceil((17 - startPos) / period.length)));
            if (test(testValue, toDecimal + prefixDecimals + overline(period)))
                return closestValueStr + '=';
        }
    }
    return closestValueStr + (closestValue < value ? '-' : '+');
}
function time(f) {
    const start = performance.now();
    f();
    return performance.now() - start;
}
Object.map = function (o, f, context = undefined) {
    const result = {};
    for (const key in o) {
        result[key] = f.call(context, o[key], key, o);
    }
    return result;
};
Array.prototype.emod = function (i) {
    return this[i % this.length];
};
Array.prototype.sliceStep = function (start, end, step, chunkSize = 1) {
    assertNumbers(start, step);
    start < 0 && (start = this.length + start);
    end <= 0 && (end = this.length + end);
    const resultLength = Math.ceil((end - start) / step);
    const result = new Array(resultLength); // '- start' so that chunk in the last row
    // will also be selected, even if the row is
    // not complete
    let index = 0;
    for (let i = start; i < end; i += step) {
        for (let j = i; j < Math.min(i + chunkSize, end); j++) {
            result[index++] = this[j];
        }
    }
    assert(resultLength == index);
    return result;
};
Array.prototype.equals = function (obj) {
    if (this === obj)
        return true;
    if (Object.getPrototypeOf(obj) !== Array.prototype)
        return false;
    if (this.length !== obj.length)
        return false;
    for (let i = 0; i < this.length; i++) {
        if (!equals(this[i], obj[i]))
            return false;
    }
    return true;
};
function equals(a, b) {
    return 'object' === typeof a ? a.equals(b) : a === b;
}
Array.prototype.hashCode = function () {
    let result = 0;
    for (let i = 0; i < this.length; i++) {
        result = result * 31 + hashCode(this[i]) | 0;
    }
    return result | 0;
};
function hashCode(o) {
    if ('number' === typeof o || undefined === o) {
        return o | 0;
    }
    else {
        return null === o ? 0 : o.hashCode();
    }
}
Array.prototype.mapFilter = function (f) {
    const length = this.length, result = [];
    for (let i = 0; i < length; i++) {
        if (i in this) {
            const val = f(this[i], i, this);
            if (val) {
                result.push(val);
            }
        }
    }
    return result;
};
Array.prototype.flatMap = function (f) {
    return Array.prototype.concat.apply([], this.map(f));
};
Array.prototype.clear = function (...newItems) {
    return this.splice(0, this.length, ...newItems);
};
/**
 *
 * @returns Array.prototype.concat.apply([], this)
 */
Array.prototype.concatenated = function () {
    return Array.prototype.concat.apply([], this);
};
Array.prototype.min = function () {
    let i = this.length, max = Infinity;
    while (i--) {
        const val = this[i];
        if (max > val)
            max = val;
    }
    return max;
};
Array.prototype.max = function () {
    // faster and no limit on array size, see https://jsperf.com/math-max-apply-vs-loop/2
    let i = this.length, max = -Infinity;
    while (i--) {
        const val = this[i];
        if (max < val)
            max = val;
    }
    return max;
};
Array.prototype.indexWithMax = function (f) {
    if (this.length == 0) {
        return -1;
    }
    let i = this.length, result = -1, maxVal = -Infinity;
    while (i--) {
        const val = f(this[i], i, this);
        if (val > maxVal) {
            maxVal = val;
            result = i;
        }
    }
    return result;
};
Array.prototype.withMax = function (f) {
    let i = this.length, result = undefined, maxVal = -Infinity;
    while (i--) {
        const el = this[i], val = f(el, i, this);
        if (val > maxVal) {
            maxVal = val;
            result = el;
        }
    }
    return result;
};
/**
 Returns the sum of the absolute values of the components of this vector.
 E.g. V(1, -2, 3) === abs(1) + abs(-2) + abs(3) === 1 + 2 + 3 === 6
 */
Array.prototype.absSum = function () {
    let i = this.length;
    let result = 0;
    while (i--) {
        result += Math.abs(this[i]);
    }
    return result;
};
Array.prototype.sum = function () {
    let i = this.length;
    let result = 0;
    while (i--) {
        result += this[i];
    }
    return result;
};
Array.prototype.sumInPlaceTree = function () {
    if (0 == this.length)
        return 0;
    let l = this.length;
    while (l != 1) {
        const lHalfFloor = Math.floor(l / 2);
        const lHalfCeil = Math.ceil(l / 2);
        for (let i = 0; i < lHalfFloor; i++) {
            this[i] += this[i + lHalfCeil];
        }
        l = lHalfCeil;
    }
    return this[0];
};
Array.prototype.isEmpty = function () {
    return 0 == this.length;
};
Array.prototype.unique = function () {
    const uniqueSet = new Set(this);
    return Array.from(uniqueSet);
};
Array.prototype.remove = function (o) {
    const index = this.indexOf(o);
    if (index != -1) {
        this.splice(index, 1);
        return true;
    }
    return false;
};
Array.prototype.removeIndex = function (i) {
    const result = this[i];
    this.splice(i, 1);
    return result;
};
Array.prototype.bagRemoveIndex = function (i) {
    const result = this[i];
    if (i == this.length - 1) {
        this.pop();
    }
    else {
        this[i] = this.pop();
    }
    return result;
};
Array.prototype.removeMatch = function (matcher) {
    const index = this.findIndex(matcher);
    if (-1 != index) {
        return this.removeIndex(index);
    }
};
Array.prototype.removeAll = function (o) {
    let i = o.length;
    while (i--) {
        this.remove(o[i]);
    }
};
Array.prototype.toggle = function (o) {
    const index = this.indexOf(o);
    if (index != -1) {
        this.splice(index, 1);
        return false;
    }
    else {
        this.push(o);
        return true;
    }
};
Array.prototype.bagToggle = function (o) {
    const index = this.indexOf(o);
    if (index != -1) {
        this.bagRemoveIndex(index);
        return false;
    }
    else {
        this.push(o);
        return true;
    }
};
Array.prototype.binaryIndexOf = function (searchElement, cmp = (a, b) => a - b) {
    let minIndex = 0;
    let maxIndex = this.length - 1;
    let currentIndex;
    let currentElement;
    while (minIndex <= maxIndex) {
        currentIndex = (minIndex + maxIndex) / 2 | 0;
        currentElement = this[currentIndex];
        if (cmp(currentElement, searchElement) < 0) {
            minIndex = currentIndex + 1;
        }
        else if (cmp(currentElement, searchElement) > 0) {
            maxIndex = currentIndex - 1;
        }
        else {
            return currentIndex;
        }
    }
    return -minIndex - 1;
};
Array.prototype.binaryInsert = function (el, cmp = MINUS) {
    let minIndex = 0;
    let maxIndex = this.length;
    let currentIndex;
    let currentElement;
    while (minIndex < maxIndex) {
        currentIndex = ~~((minIndex + maxIndex) / 2);
        currentElement = this[currentIndex];
        if (cmp(currentElement, el) < 0) {
            minIndex = currentIndex + 1;
        }
        else {
            maxIndex = currentIndex;
        }
    }
    this.splice(minIndex, 0, el);
};
Object.defineProperty(Array.prototype, 'last', {
    get() {
        return this[this.length - 1];
    },
    set(val) {
        this[this.length - 1] = val;
    },
});
String.prototype.capitalizeFirstLetter = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
String.prototype.equals = function (x) {
    return this == x;
};
function SCE(o) {
    switch (typeof o) {
        case 'undefined':
            return 'undefined';
        case 'function':
            return o.toString();
        case 'number':
            return '' + o;
        case 'string':
            return JSON.stringify(o);
        case 'object':
            if (null == o) {
                return 'null';
            }
            else {
                return o.sce;
            }
        default:
            throw new Error();
    }
}
function STR(o) {
    return o.str;
}
Object.defineProperty(Object.prototype, 'sce', { get: function () { return this.toSource(); } });
Object.defineProperty(Object.prototype, 'str', { get: function () { return this.toString(); } });
//const NLA = {}
//for (let key in ARRAY_UTILITIES) {
//    const nlaName = 'array' + key.capitalizeFirstLetter()
//    assert(!NLA[nlaName])
//    NLA[nlaName] = (arr, ...rest) => ARRAY_UTILITIES[key].apply(arr, rest)
//}
function isCCW(vertices, normal) {
    const dsa = doubleSignedArea(vertices, normal);
    assert(0 != dsa);
    return dsa < 0;
}
function doubleSignedArea(vertices, normal) {
    assert(!normal.likeO(), '!normal.likeO()');
    const absMaxDim = normal.maxAbsDim();
    // order is important, coord0 and coord1 must be set so that coord0, coord1 and maxDim span a right-hand coordinate
    // system var [coord0, coord1] = [['y', 'z'], ['z', 'x'], ['x', 'y']][maxAbsDim]
    const doubleSignedArea = vertices.map((v0, i, vertices) => {
        const v1 = vertices[(i + 1) % vertices.length];
        //return (v1[coord0] - v0[coord0]) * (v1[coord1] + v0[coord1])
        switch (absMaxDim) {
            case 0:
                return (v1.y - v0.y) * (v1.z + v0.z);
            case 1:
                return (v1.z - v0.z) * (v1.x + v0.x);
            case 2:
                return (v1.x - v0.x) * (v1.y + v0.y);
        }
    }).reduce((a, b) => a + b);
    return snap(doubleSignedArea * Math.sign(normal.e(absMaxDim)), 0);
}
/**
 * solves x² + px + q = 0
 */
function pqFormula(p, q) {
    // 4 times the discriminant:in
    const discriminantX4 = p * p / 4 - q;
    if (discriminantX4 < -NLA_PRECISION) {
        return [];
    }
    else if (discriminantX4 <= NLA_PRECISION) {
        return [-p / 2];
    }
    else {
        const root = Math.sqrt(discriminantX4);
        return [-p / 2 - root, -p / 2 + root];
    }
}
/**
 * from pomax' library
 * solves ax³ + bx² + cx + d = 0
 * This function from pomax' utils
 * @returns 0-3 roots
 */
function solveCubicReal2(a, b, c, d) {
    if (eq0(a)) {
        if (eq0(b)) {
            return [-d / c];
        }
        else {
            return pqFormula(c / b, d / b);
        }
    }
    const divisor = a;
    a = b / divisor;
    b = c / divisor;
    c = d / divisor;
    const p = (3 * b - a * a) / 3, pDiv3 = p / 3, pDiv3Pow3 = pDiv3 * pDiv3 * pDiv3, q = (2 * a * a * a - 9 * a * b + 27 * c) / 27, qDiv2 = q / 2, discriminant = qDiv2 * qDiv2 + pDiv3Pow3;
    // 18abcd - 4b³d + b²c² - 4ac³ - 27a²d²
    if (discriminant < -NLA_PRECISION / 8) {
        const r = Math.sqrt(-pDiv3Pow3), t = -q / (2 * r), cosphi = t < -1 ? -1 : t > 1 ? 1 : t, // clamp t to [-1;1]
        phi = Math.acos(cosphi), t1 = 2 * Math.cbrt(r);
        const x1 = t1 * Math.cos(phi / 3) - a / 3;
        const x2 = t1 * Math.cos((phi + 2 * Math.PI) / 3) - a / 3;
        const x3 = t1 * Math.cos((phi + 4 * Math.PI) / 3) - a / 3;
        return [x1, x2, x3];
    }
    else if (discriminant <= NLA_PRECISION / 8) {
        if (0 == qDiv2) {
            // TODO: compare with likeO?
            return [-a / 3];
        }
        const u1 = qDiv2 < 0 ? Math.cbrt(-qDiv2) : -Math.cbrt(qDiv2);
        const x1 = 2 * u1 - a / 3;
        const x2 = -u1 - a / 3;
        return [x1, x2];
    }
    else {
        const sd = Math.sqrt(discriminant);
        const u1 = Math.cbrt(-qDiv2 + sd);
        const v1 = Math.cbrt(qDiv2 + sd);
        return [u1 - v1 - a / 3];
    }
}
function checkDerivate(f, df, a, b, maxFaults = 0) {
    const eps = 1e-4;
    let faults = 0;
    for (let t = a; t < b; t += (b - a) / 100) {
        const dfdt = df(t);
        const df2 = (f(t + eps) - f(t)) / eps;
        assert((faults += +!eq2(df2, dfdt, 0.1)) <= maxFaults, `df2 == ${df2} != ${df(t)} = df(t)`);
    }
}
function getRoots(f, a, b, stepSize, df) {
    const results = [];
    for (let startT = a; startT <= b; startT += stepSize) {
        const dt = stepSize * abs(df(startT));
        if (abs(f(startT)) <= dt) {
            //const t = newtonIterate1d(f, startT, 16)
            let t = newtonIterateWithDerivative(f, startT, 16, df);
            if (!eq0(f(t)) || eq0(df(t))) {
                t = newtonIterate1d(df, startT, 16);
                //if (f(a) * f(b) < 0) {
                //    t = bisect(f, a, b, 16)
                //} else if (df(a) * df(b) < 0) {
                //    t = bisect(df, a, b, 16)
                //}
            }
            if (eq0(f(t)) && !results.some(r => eq(r, t))) {
                results.push(t);
            }
        }
    }
    return results;
}
function bisect(f, a, b, steps) {
    assert(a < b);
    let fA = f(a), fB = f(b);
    while (steps--) {
        const c = (b + a) / 2;
        const fC = f(c);
        if (sign(fA) == sign(fC)) {
            a = c;
            fA = fC;
        }
        else {
            b = c;
            fB = fC;
        }
    }
    assert(a <= (b + a) / 2);
    assert(b >= (b + a) / 2);
    return lerp(a, b, 0.5);
}
function newtonIterate(f, x, steps = 4, EPSILON, stepize = 1) {
    EPSILON = EPSILON || 1e-8;
    for (let i = 0; i < steps; i++) {
        const fx = f(x);
        const dfdx = Matrix.jacobi(f, x, fx, EPSILON);
        assert(!dfdx.isZero());
        const dx = dfdx.solveLinearSystem(new Vector(new Float64Array(fx))).v;
        assert(!isNaN(dx[0]));
        //console.log('fx / dfdx', fx / dfdx)
        for (let j = 0; j < x.length; j++)
            x[j] -= dx[j] * stepize;
    }
    return x;
}
function newtonIterate1d(f, xStart, steps = 8, epsOrDf = 1e-8) {
    if ('number' === typeof epsOrDf) {
        let x = xStart;
        for (let i = 0; i < steps; i++) {
            const fx = f(x);
            const dfdx = (f(x + epsOrDf) - fx) / epsOrDf;
            //console.log('fx / dfdx', fx / dfdx)
            x = x - fx / dfdx;
        }
        return x;
    }
    else {
        return newtonIterateWithDerivative(f, xStart, steps, epsOrDf);
    }
}
function newtonIterateWithDerivative(f, xStart, steps = 4, df) {
    let x = xStart;
    for (let i = 0; i < steps; i++) {
        const fx = f(x);
        const dfdx = df(x);
        if (isNaN(fx) || isNaN(dfdx)) {
            console.log();
            //console.log('fx / dfdx', fx / dfdx)
        }
        x = x - fx / dfdx;
        if (isNaN(fx)) {
            console.log();
            //console.log('fx / dfdx', fx / dfdx)
        }
    }
    return x;
}
function newtonIterateSmart(f, xStart, steps = 4, df, mindf = 1e-6) {
    let x = xStart;
    for (let i = 0; i < steps; i++) {
        const fx = f(x);
        const dfdx = df(x);
        if (abs(dfdx) < mindf && abs(fx) < mindf) {
            return newtonIterate1d(df, x);
        }
        if (isNaN(fx) || isNaN(dfdx)) {
            console.log();
            //console.log('fx / dfdx', fx / dfdx)
        }
        x = x - fx / dfdx;
        if (isNaN(fx)) {
            console.log();
            //console.log('fx / dfdx', fx / dfdx)
        }
    }
    return x;
}
function newtonIterate2d(f1, f2, sStart, tStart, steps) {
    const EPSILON = 1e-6;
    steps = steps || 4;
    let s = sStart, t = tStart, f1ts, f2ts;
    do {
        /*
         | a b |-1                   |  d -b |
         | c d |   = 1 / (ad - bc) * | -c  a |
         */
        f1ts = f1(s, t);
        f2ts = f2(s, t);
        /*
         let df1s = (f1(s + EPSILON, t) - f1ts) / EPSILON, df1t = (f1(s, t + EPSILON) - f1ts) / EPSILON,
         df2s = (f2(s + EPSILON, t) - f2ts) / EPSILON, df2t = (f2(s, t + EPSILON) - f2ts) / EPSILON
         let det = df1s * df2t - df1t * df2s
         s = s - ( df2t * f1ts - df1t * f2ts) / det
         t = t - (-df2s * f1ts + df1s * f2ts) / det
         */
        // TODO: is this even more accurate?
        const df1s = (f1(s + EPSILON, t) - f1ts), df1t = (f1(s, t + EPSILON) - f1ts), df2s = (f2(s + EPSILON, t) - f2ts), df2t = (f2(s, t + EPSILON) - f2ts);
        const det = (df1s * df2t - df1t * df2s) / EPSILON;
        const ds = (df2t * f1ts - df1t * f2ts) / det;
        const dt = (-df2s * f1ts + df1s * f2ts) / det;
        s -= ds;
        t -= dt;
    } while (--steps && Math.pow(f1ts, 2) + Math.pow(f2ts, 2) > NLA_PRECISION);
    if (Math.pow(f1ts, 2) + Math.pow(f2ts, 2) > NLA_PRECISION) {
        console.log(Math.pow(f1ts, 2) + Math.pow(f2ts, 2));
        return undefined;
    }
    return new V3(s, t, 0);
}
function newtonIterate2dWithDerivatives(f, g, sStart, tStart, steps, dfds, dfdt, dgds, dgdt) {
    steps = steps || 4;
    let s = sStart, t = tStart;
    let f1ts, f2ts;
    do {
        /*
         | a b |-1                   |  d -b |
         | c d |   = 1 / (ad - bc) * | -c  a |
         */
        f1ts = f(s, t);
        f2ts = g(s, t);
        const df1s = dfds(s, t), df1t = dfdt(s, t), df2s = dgds(s, t), df2t = dgdt(s, t);
        // TODO: is this even more accurate?
        const det = df1s * df2t - df1t * df2s;
        const ds = (df2t * f1ts - df1t * f2ts) / det;
        const dt = (-df2s * f1ts + df1s * f2ts) / det;
        s -= ds;
        t -= dt;
    } while (--steps && f1ts * f1ts + f2ts * f2ts > NLA_PRECISION / 32);
    if (!steps) {
        //console.log(f1ts * f1ts + f2ts * f2ts)
        return undefined;
    }
    return V(s, t, 0);
}
const gaussLegendre24Xs = [
    -0.0640568928626056260850430826247450385909,
    0.0640568928626056260850430826247450385909,
    -0.1911188674736163091586398207570696318404,
    0.1911188674736163091586398207570696318404,
    -0.3150426796961633743867932913198102407864,
    0.3150426796961633743867932913198102407864,
    -0.4337935076260451384870842319133497124524,
    0.4337935076260451384870842319133497124524,
    -0.5454214713888395356583756172183723700107,
    0.5454214713888395356583756172183723700107,
    -0.6480936519369755692524957869107476266696,
    0.6480936519369755692524957869107476266696,
    -0.7401241915785543642438281030999784255232,
    0.7401241915785543642438281030999784255232,
    -0.8200019859739029219539498726697452080761,
    0.8200019859739029219539498726697452080761,
    -0.8864155270044010342131543419821967550873,
    0.8864155270044010342131543419821967550873,
    -0.9382745520027327585236490017087214496548,
    0.9382745520027327585236490017087214496548,
    -0.9747285559713094981983919930081690617411,
    0.9747285559713094981983919930081690617411,
    -0.9951872199970213601799974097007368118745,
    0.9951872199970213601799974097007368118745,
];
const gaussLegendre24Weights = [
    0.1279381953467521569740561652246953718517,
    0.1279381953467521569740561652246953718517,
    0.1258374563468282961213753825111836887264,
    0.1258374563468282961213753825111836887264,
    0.1216704729278033912044631534762624256070,
    0.1216704729278033912044631534762624256070,
    0.1155056680537256013533444839067835598622,
    0.1155056680537256013533444839067835598622,
    0.1074442701159656347825773424466062227946,
    0.1074442701159656347825773424466062227946,
    0.0976186521041138882698806644642471544279,
    0.0976186521041138882698806644642471544279,
    0.0861901615319532759171852029837426671850,
    0.0861901615319532759171852029837426671850,
    0.0733464814110803057340336152531165181193,
    0.0733464814110803057340336152531165181193,
    0.0592985849154367807463677585001085845412,
    0.0592985849154367807463677585001085845412,
    0.0442774388174198061686027482113382288593,
    0.0442774388174198061686027482113382288593,
    0.0285313886289336631813078159518782864491,
    0.0285313886289336631813078159518782864491,
    0.0123412297999871995468056670700372915759,
    0.0123412297999871995468056670700372915759,
];
function gaussLegendreQuadrature24(f, startT, endT) {
    //let result = 0
    //for (let i = 0; i < gaussLegendre24Xs.length; i++) {
    //	// gauss-legendre goes from -1 to 1, so we need to scale
    //	let t = startT + (gaussLegendre24Xs[i] + 1) / 2 * (endT - startT)
    //	result += gaussLegendre24Weights[i] * f(t)
    //}
    //const result = NLA
    //		.arrayFromFunction(24, i => startT + (gaussLegendre24Xs[i] + 1) / 2 * (endT - startT))
    //		.map((t, i) => gaussLegendre24Weights[i] * f(t))
    //		.sumInPlaceTree()
    //99.54182500782605
    //99.54182500782602
    // again, [-1,1], so div by 2
    //return result // 2 * (endT - startT)
    return glq24_11(t => f(startT + (t + 1) / 2 * (endT - startT))) / 2 * (endT - startT);
}
/**
 * Calculate the integral of f in the interval [-1;1].
 * @param f
 */
function glq24_11(f) {
    return arrayFromFunction(24, i => gaussLegendre24Weights[i] * f(gaussLegendre24Xs[i])).sumInPlaceTree();
}
function glqInSteps(f, startT, endT, steps) {
    const dt = (endT - startT) / steps;
    return arrayFromFunction(steps, i => glq24_11(t => f(startT + dt * i + (t + 1) / 2 * dt))).sumInPlaceTree() / 2 * dt;
}
function midpointRuleQuadrature(f, startT, endT, steps = 32) {
    const dt = (endT - startT) / steps;
    return arrayFromFunction(steps, i => startT + dt / 2 + dt * i).map(f).sumInPlaceTree() * dt;
}
function callsce(name, ...params) {
    return name + '(' + params.map(SCE).join(',') + ')';
}

/**
 * Immutable 3d-vector/point.
 */
class V3 {
    constructor(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
        assertNumbers(x, y, z);
    }
    get [0]() {
        return this.x;
    }
    get [1]() {
        return this.y;
    }
    get [2]() {
        return this.z;
    }
    static random() {
        return new V3(Math.random(), Math.random(), Math.random());
    }
    static parallel(a, b) {
        return a.dot(b) - a.length() * b.length();
    }
    /**
     * See http://math.stackexchange.com/questions/44689/how-to-find-a-random-axis-or-unit-vector-in-3d
     * @returns A random point on the unit sphere with uniform distribution across the surface.
     */
    static randomUnit() {
        const zRotation = Math.random() * 2 * Math.PI;
        const z = Math.random() * 2 - 1;
        const zRadius = Math.sqrt(1 - Math.pow(z, 2));
        return new V3(zRadius * Math.cos(zRotation), zRadius * Math.sin(zRotation), z);
    }
    //noinspection JSUnusedLocalSymbols
    /**
     * Documentation stub. You want {@see V3#sphere}
     */
    static fromAngles(theta, phi) {
        throw new Error();
    }
    static fromFunction(f) {
        return new V3(f(0), f(1), f(2));
    }
    static min(a, b) {
        return new V3(Math.min(a.x, b.x), Math.min(a.y, b.y), Math.min(a.z, b.z));
    }
    static max(a, b) {
        return new V3(Math.max(a.x, b.x), Math.max(a.y, b.y), Math.max(a.z, b.z));
    }
    static lerp(a, b, fraction) {
        return b.minus(a).times(fraction).plus(a);
    }
    static fromArray(a) {
        return new V3(a[0], a[1], a[2]);
    }
    static angleBetween(a, b) {
        return a.angleTo(b);
    }
    static zip(f, ...args) {
        assert(f instanceof Function);
        return new V3(f.apply(undefined, args.map(x => x.x)), f.apply(undefined, args.map(x => x.y)), f.apply(undefined, args.map(x => x.z)));
    }
    static normalOnPoints(a, b, c) {
        assertVectors(a, b, c);
        return a.to(b).cross(a.to(c));
    }
    static add(...vs) {
        assertVectors.apply(undefined, vs);
        let x = 0, y = 0, z = 0;
        let i = vs.length;
        while (i--) {
            x += vs[i].x;
            y += vs[i].y;
            z += vs[i].z;
        }
        return new V3(x, y, z);
    }
    static sub(...vs) {
        assertVectors.apply(undefined, vs);
        let x = vs[0].x, y = vs[0].y, z = vs[0].z;
        let i = vs.length;
        while (i--) {
            x -= vs[i].x;
            y -= vs[i].y;
            z -= vs[i].z;
        }
        return new V3(x, y, z);
    }
    /**
     * Pack an array of V3s into an array of numbers (Float32Array by default).
     *
     * @param v3arr source array
     * @param dest destination array. If provided, must be large enough to fit v3count items.
     * @param srcStart starting index in source array
     * @param destStart starting index in destination array
     * @param v3count Number of V3s to copy.
     * @returns Packed array.
     */
    static pack(v3arr, dest, srcStart = 0, destStart = 0, v3count = v3arr.length - srcStart) {
        //assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')
        const result = dest || new Float32Array(3 * v3count); // TODO
        assert(result.length - destStart >= v3count * 3, 'dest.length - destStart >= v3count * 3', result.length, destStart, v3count * 3);
        let i = v3count, srcIndex = srcStart, destIndex = destStart;
        while (i--) {
            const v = v3arr[srcIndex++];
            result[destIndex++] = v.x;
            result[destIndex++] = v.y;
            result[destIndex++] = v.z;
        }
        return result;
    }
    static unpack(packedArray, dest, srcStart = 0, destStart = 0, v3count = (packedArray.length - srcStart) / 3) {
        //assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')
        const result = dest || new Array(v3count);
        assert(result.length - destStart >= v3count, 'dest.length - destStart >= v3count');
        let i = v3count, srcIndex = srcStart, destIndex = destStart;
        while (i--) {
            result[destIndex++] = new V3(packedArray[srcIndex++], packedArray[srcIndex++], packedArray[srcIndex++]);
        }
        return result;
    }
    static packXY(v3arr, dest, srcStart = 0, destStart = 0, v3count = v3arr.length - srcStart) {
        //assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')
        const result = dest || new Float32Array(2 * v3count);
        assert(result.length - destStart >= v3count, 'dest.length - destStart >= v3count');
        let i = v3count, srcIndex = srcStart, destIndex = destStart;
        while (i--) {
            const v = v3arr[srcIndex++];
            result[destIndex++] = v.x;
            result[destIndex++] = v.y;
        }
        return result;
    }
    static unpackXY(src, dest, srcStart = 0, destStart = 0, v3count = Math.min(src.length / 2, dest && dest.length || Infinity) - destStart) {
        //assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')
        dest = dest || new Array(v3count);
        assert(dest.length - destStart >= v3count, 'dest.length - destStart >= v3count');
        assert(src.length - srcStart >= v3count * 2, 'dest.length - destStart >= v3count');
        let i = v3count, srcIndex = srcStart, destIndex = destStart;
        while (i--) {
            dest[destIndex++] = new V3(src[srcIndex++], src[srcIndex++], 0);
        }
        return dest;
    }
    static perturbed(v, delta) {
        return v.perturbed(delta);
    }
    static polar(radius, phi, z = 0) {
        return new V3(radius * Math.cos(phi), radius * Math.sin(phi), z);
    }
    /**
     *
     * @param longitude angle in XY plane
     * @param latitude "height"/z dir angle
     */
    static sphere(longitude, latitude, length = 1) {
        return new V3(length * Math.cos(latitude) * Math.cos(longitude), length * Math.cos(latitude) * Math.sin(longitude), length * Math.sin(latitude));
    }
    static inverseLerp(a, b, x) {
        const ab = a.to(b);
        return a.to(x).dot(ab) / ab.squared();
    }
    perturbed(delta = NLA_PRECISION * 0.8) {
        return this.map(x => x + (Math.random() - 0.5) * delta);
    }
    *[Symbol.iterator]() {
        yield this.x;
        yield this.y;
        yield this.z;
    }
    e(index) {
        assert(index >= 0 && index < 3);
        return 0 == index ? this.x : (1 == index ? this.y : this.z);
    }
    negated() {
        return new V3(-this.x, -this.y, -this.z);
    }
    abs() {
        return new V3(Math.abs(this.x), Math.abs(this.y), Math.abs(this.z));
    }
    plus(a) {
        assertVectors(a);
        return new V3(this.x + a.x, this.y + a.y, this.z + a.z);
    }
    /**
     * Hadarmard product (or Schur product)
     * Element-wise multiplication of two vectors.
     * @see https://en.wikipedia.org/wiki/Hadamard_product_(matrices)
     *
     */
    schur(a) {
        return new V3(this.x * a.x, this.y * a.y, this.z * a.z);
    }
    /**
     * Element-wise division.
     */
    divv(a) {
        return new V3(this.x / a.x, this.y / a.y, this.z / a.z);
    }
    /**
     * See also {@link to} which is a.minus(this)
     */
    minus(a) {
        assertVectors(a);
        return new V3(this.x - a.x, this.y - a.y, this.z - a.z);
    }
    to(a) {
        assertVectors(a);
        return a.minus(this);
    }
    times(factor) {
        assertNumbers(factor);
        return new V3(this.x * factor, this.y * factor, this.z * factor);
    }
    div(a) {
        assertNumbers(a);
        return new V3(this.x / a, this.y / a, this.z / a);
    }
    /**
     * Dot product.
     * @see https://en.wikipedia.org/wiki/Dot_product
     */
    dot(a) {
        assertInst(V3, a);
        return this.x * a.x + this.y * a.y + this.z * a.z;
    }
    /**
     * Linearly interpolate
     */
    lerp(b, t) {
        assertVectors(b);
        assertNumbers(t);
        return this.plus(b.minus(this).times(t));
    }
    squared() {
        return this.dot(this);
    }
    distanceTo(a) {
        assertVectors(a);
        //return this.minus(a).length()
        return Math.hypot(this.x - a.x, this.y - a.y, this.z - a.z);
    }
    distanceToSquared(a) {
        assertVectors(a);
        return this.minus(a).squared();
    }
    ///**
    // * See also {@see #setTo} for the individual
    // *
    // * @param v
    // */
    //assign(v) {
    //	assertVectors(v)
    //	this.x = v.x
    //	this.y = v.y
    //	this.z = v.z
    //}
    //
    ///**
    // * See also {@see #assign} for the V3 version
    // *
    // * @param x
    // * @param y
    // * @param z
    // */
    //setTo(x, y, z = 0) {
    //	this.x = x
    //	this.y = y
    //	this.z = z
    //}
    toSource() {
        return V3.NAMEMAP.get(this) || this.toString();
    }
    nonParallelVector() {
        const abs = this.abs();
        if ((abs.x <= abs.y) && (abs.x <= abs.z)) {
            return V3.X;
        }
        else if ((abs.y <= abs.x) && (abs.y <= abs.z)) {
            return V3.Y;
        }
        else {
            return V3.Z;
        }
    }
    slerp(b, t) {
        assertVectors(b);
        assertNumbers(t);
        const sin = Math.sin;
        const omega = this.angleTo(b);
        return this.times(sin((1 - t) * omega) / sin(omega)).plus(b.times(sin(t * omega) / sin(omega)));
    }
    min(b) {
        return new V3(Math.min(this.x, b.x), Math.min(this.y, b.y), Math.min(this.z, b.z));
    }
    max(b) {
        return new V3(Math.max(this.x, b.x), Math.max(this.y, b.y), Math.max(this.z, b.z));
    }
    equals(v) {
        return this == v || this.x == v.x && this.y == v.y && this.z == v.z;
    }
    /**
     *
     * The cross product is defined as:
     * a x b = |a| * |b| * sin(phi) * n
     * where |.| is the euclidean norm, phi is the angle between the vectors
     * and n is a unit vector perpendicular to both a and b.
     *
     * The cross product is zero for parallel vectors.
     * @see https://en.wikipedia.org/wiki/Cross_product
     */
    cross(v) {
        return new V3(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x);
    }
    //noinspection JSMethodCanBeStatic
    /**
     * Documentation stub. You want {@link unit}
     */
    normalized() { throw new Error('documentation stub. use .unit()'); }
    minElement() {
        return Math.min(this.x, this.y, this.z);
    }
    maxElement() {
        return Math.max(this.x, this.y, this.z);
    }
    toArray(n = 3) {
        return [this.x, this.y, this.z].slice(0, n);
    }
    /**
     * Get a perpendicular vector.
     * For vectors in the XY-Plane, returns vector rotated 90° CCW.
     */
    getPerpendicular() {
        if (eq0(this.x) && eq0(this.y)) {
            if (eq0(this.z)) {
                throw new Error('zero vector');
            }
            // v is Vector(0, 0, v.z)
            return V3.Y;
        }
        return new V3(-this.y, this.x, 0);
    }
    //noinspection JSMethodCanBeStatic
    dim() {
        return 3;
    }
    els() {
        return [this.x, this.y, this.z];
    }
    angleXY() {
        return Math.atan2(this.y, this.x);
    }
    lengthXY() {
        return Math.hypot(this.x, this.y);
        //return Math.sqrt(this.x * this.x + this.y * this.y)
    }
    squaredXY() {
        return this.x * this.x + this.y * this.y;
    }
    xy() {
        return new V3(this.x, this.y, 0);
    }
    /**
     * Transform this vector element-wise by way of function f. Returns V3(f(x), f(y), f(z))
     * @param f function to apply to elements (number -> number)
     */
    map(f) {
        return new V3(f(this.x, 'x'), f(this.y, 'y'), f(this.z, 'z'));
    }
    toString(roundFunction) {
        roundFunction = roundFunction || defaultRoundFunction;
        return V3.NAMEMAP.get(this) ||
            'V(' + [this.x, this.y, this.z].map(roundFunction).join(', ') + ')'; //+ this.id
    }
    angleTo(b) {
        assert(1 == arguments.length);
        assertVectors(b);
        assert(!this.likeO());
        assert(!b.likeO());
        return Math.acos(Math.min(1, this.dot(b) / this.length() / b.length()));
    }
    /**
     *
     * phi = angle between A and B
     * alpha = angle between n and normal1
     *
     * A . B = ||A|| * ||B|| * cos(phi)
     * A x B = ||A|| * ||B|| * sin(phi) * n (n = unit vector perpendicular)
     * (A x B) . normal1 = ||A|| * ||B|| * sin(phi) * cos(alpha)
     */
    angleRelativeNormal(vector, normal1) {
        assert(2 == arguments.length);
        assertVectors(vector, normal1);
        assertf(() => normal1.hasLength(1));
        //assert(vector.isPerpendicularTo(normal1), 'vector.isPerpendicularTo(normal1)' + vector.sce + normal1.sce)
        //assert(this.isPerpendicularTo(normal1), 'this.isPerpendicularTo(normal1)' + this.dot(vector)) //
        // -0.000053600770598683675
        return Math.atan2(this.cross(vector).dot(normal1), this.dot(vector));
    }
    /**
     Returns true iff this is parallel to vector, i.e. this * s == vector, where s is a pos or neg number, using equals
     Throw a DebugError
     if vector is not a Vector or
     if this has a length of 0 or
     if vector has a length of 0
     */
    isParallelTo(vector) {
        assertVectors(vector);
        assert(!this.likeO());
        assert(!vector.likeO());
        // a . b takes on values of +|a|*|b| (vectors same direction) to -|a|*|b| (opposite direction)
        // in both cases the vectors are parallel, so check if abs(a . b) == |a|*|b|
        const dot = this.dot(vector);
        return eq(this.squared() * vector.squared(), dot * dot);
    }
    isPerpendicularTo(vector) {
        assertVectors(vector);
        assert(!this.likeO(), '!this.likeO()');
        assert(!vector.likeO(), '!vector.likeO()');
        return eq0(this.dot(vector));
    }
    isReverseDirTo(other) {
        assertVectors(other);
        assert(!this.likeO());
        assert(!other.likeO());
        // a . b takes on values of +|a|*|b| (vectors same direction) to -|a|*|b| (opposite direction)
        // in both cases the vectors are parallel, so check if abs(a . b) == |a|*|b|
        const dot = this.dot(other);
        return eq(Math.sqrt(this.squared() * other.squared()), dot);
    }
    /**
     * Returns the length of this Vector, i.e. the euclidean norm.
     *
     * Note that the partial derivatives of the euclidean norm at point x are equal to the
     * components of the unit vector x.
     */
    length() {
        return Math.hypot(this.x, this.y, this.z);
        //return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
    }
    /**
     * Definition: V3.likeO == V3.like(V3.O)
     */
    likeO() {
        return this.like(V3.O);
    }
    /**
     * eq(this.x, obj.x) && eq(this.y, obj.y) && eq(this.z, obj.z)
     * @param obj
     */
    like(obj) {
        if (obj === this)
            return true;
        if (!(obj instanceof V3))
            return false;
        return eq(this.x, obj.x) && eq(this.y, obj.y) && eq(this.z, obj.z);
    }
    /**
     * equivalent to this.like(v) || this.negated().like(v)
     */
    likeOrReversed(v) {
        return eq(Math.abs(this.dot(v)), Math.sqrt(this.squared() * v.squared()));
    }
    /**
     * Returns a new unit Vector (.length() === 1) with the same direction as this vector. Throws a
     * DebugError if this has a length of 0.
     */
    unit() {
        assert(!this.likeO(), 'cannot normalize zero vector');
        return this.div(this.length());
    }
    /**
     * Returns a new V3 equal to this scaled so that its length is equal to newLength.
     *
     * Passing a negative newLength will flip the vector.
     */
    toLength(newLength) {
        assertNumbers(newLength);
        return this.times(newLength / this.length());
    }
    /**
     Returns a new Vector which is the projection of this vector onto the passed vector.
     Examples
     V(3, 4).projectedOn(V(1, 0)) // returns V(3, 0)
     V(3, 4).projectedOn(V(2, 0)) // returns V(3, 0)
     V(3, 4).projectedOn(V(-1, 0)) // returns V(-3, 0)
     V(3, 4).projectedOn(V(0, 1)) // returns V(0, 4)
     V(3, 4).projectedOn(V(1, 1)) // returns
     */
    projectedOn(b) {
        assertVectors(b);
        // https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2
        return b.times(this.dot(b) / b.dot(b));
    }
    rejectedFrom(b) {
        assertVectors(b);
        // https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2
        return this.minus(b.times(this.dot(b) / b.dot(b)));
    }
    rejectedFrom1(b1) {
        assertVectors(b1);
        assert(b1.hasLength(1));
        // https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2
        return this.minus(b1.times(this.dot(b1)));
    }
    /**
     * Returns the length of this vector rejected from the unit vector b.
     *
     *       /|
     * this / |    ^
     *     /__|    | b
     *      r
     *  Returns length of r (r === this.rejectedFrom(b))
     */
    rejectedLength(b) {
        assertVectors(b);
        return Math.sqrt(this.dot(this) - Math.pow(this.dot(b), 2) / b.dot(b));
    }
    /**
     * Returns the length of this vector rejected from the unit vector b1.
     *
     *       /|
     * this / |    ^
     *     /__|    | b1
     *      r
     *  Returns length of r (r === this.rejectedFrom(b1))
     */
    rejected1Length(b1) {
        assertVectors(b1);
        assert(b1.hasLength(1));
        return Math.sqrt(this.dot(this) - Math.pow(this.dot(b1), 2));
    }
    /**
     Returns true iff the length() of this vector is equal to 'length', using eq
     E.g. V(3, 4).hasLength(5) === true
     V(1, 1).hasLength(1) === false
     */
    hasLength(length) {
        assertNumbers(length);
        return eq(length, this.length());
    }
    /**
     Returns the sum of the absolute values of the components of this vector.
     E.g. V(1, -2, 3) === abs(1) + abs(-2) + abs(3) === 1 + 2 + 3 === 6
     */
    absSum() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    }
    /**
     * returns max(|x|, |y|, |z|)
     */
    maxAbsElement() {
        return Math.max(Math.abs(this.x), Math.abs(this.y), Math.abs(this.z));
    }
    /**
     * returns min(|x|, |y|, |z|)
     */
    minAbsElement() {
        return Math.min(Math.abs(this.x), Math.abs(this.y), Math.min(this.z));
    }
    maxAbsDim() {
        const xAbs = Math.abs(this.x), yAbs = Math.abs(this.y), zAbs = Math.abs(this.z);
        return xAbs >= yAbs ? (xAbs >= zAbs ? 0 : 2) : (yAbs >= zAbs ? 1 : 2);
    }
    minAbsDim() {
        const xAbs = Math.abs(this.x), yAbs = Math.abs(this.y), zAbs = Math.abs(this.z);
        return xAbs < yAbs ? (xAbs < zAbs ? 0 : 2) : (yAbs < zAbs ? 1 : 2);
    }
    withElement(dim, el) {
        assert(['x', 'y', 'z'].includes(dim), '' + dim);
        assertNumbers(el);
        if ('x' == dim) {
            return new V3(el, this.y, this.z);
        }
        if ('y' == dim) {
            return new V3(this.x, el, this.z);
        }
        return new V3(this.x, this.y, el);
    }
    hashCode() {
        function floatHashCode$$1(f) {
            return ~~(f * (1 << 28));
        }
        return ~~((floatHashCode$$1(this.x) * 31 + floatHashCode$$1(this.y)) * 31 + floatHashCode$$1(this.z));
    }
    hashCodes() {
        //function floatHashCode(f) {
        //	return ~~(f * (1 << 28))
        //}
        // compare hashCode.floatHashCode
        // the following ops are equivalent to
        // floatHashCode((el - NLA_PRECISION) % (2 * NLA_PRECISION))
        // this results in the hashCode for the (out of 8 possible) cube with the lowest hashCode
        // the other 7 can be calculated by adding constants
        const xHC = ~~(this.x * (1 << 28) - 0.5), yHC = ~~(this.y * (1 << 28) - 0.5), zHC = ~~(this.z * (1 << 28) - 0.5), hc = ~~((xHC * 31 + yHC) * 31 + zHC);
        return [
            ~~(hc),
            ~~(hc + 961),
            ~~(hc + 31),
            ~~(hc + 31 + 961),
            ~~(hc + 1),
            ~~(hc + 1 + 961),
            ~~(hc + 1 + 31),
            ~~(hc + 1 + 31 + 961),
        ];
    }
    //static areDisjoint(it: Iterable<V3>): boolean {
    //	const vSet = new CustomSet
    //	for (const v of it) {
    //		if (!v.equals(vSet.canonicalizeLike(v))) {
    //			// like value already in set
    //			return false
    //		}
    //	}
    //	return true
    //}
    compareTo(other) {
        if (this.x != other.x) {
            return this.x - other.x;
        }
        else if (this.y != other.y) {
            return this.y - other.y;
        }
        else {
            return this.z - other.z;
        }
    }
    compareTo2(other, eps = NLA_PRECISION) {
        if (!eq2(this.x, other.x, eps)) {
            return this.x - other.x;
        }
        else if (!eq2(this.y, other.y, eps)) {
            return this.y - other.y;
        }
        else if (!eq2(this.z, other.z, eps)) {
            return this.z - other.z;
        }
        else {
            return 0;
        }
    }
    toAngles() {
        return {
            theta: Math.atan2(this.y, this.x),
            phi: Math.asin(this.z / this.length()),
        };
    }
}
V3.O = new V3(0, 0, 0);
V3.X = new V3(1, 0, 0);
V3.Y = new V3(0, 1, 0);
V3.Z = new V3(0, 0, 1);
V3.XY = new V3(1, 1, 0);
V3.XYZ = new V3(1, 1, 1);
V3.INF = new V3(Infinity, Infinity, Infinity);
V3.UNITS = [V3.X, V3.Y, V3.Z];
V3.NAMEMAP = new JavaMap()
    .set(V3.O, 'V3.O')
    .set(V3.X, 'V3.X')
    .set(V3.Y, 'V3.Y')
    .set(V3.Z, 'V3.Z')
    .set(V3.XYZ, 'V3.XYZ')
    .set(V3.INF, 'V3.INF');
function V(a, b, c) {
    if (arguments.length == 3) {
        return new V3(parseFloat(a), parseFloat(b), parseFloat(c));
    }
    else if (arguments.length == 2) {
        return new V3(parseFloat(a), parseFloat(b), 0);
    }
    else if (arguments.length == 1) {
        if (typeof (a) == 'object') {
            if (a instanceof V3) {
                // immutable, so
                return a;
            }
            else if (a instanceof Array || a instanceof Float32Array || a instanceof Float64Array) {
                if (2 == a.length) {
                    return new V3(parseFloat(a[0]), parseFloat(a[1]), 0);
                }
                else if (3 == a.length) {
                    return new V3(parseFloat(a[0]), parseFloat(a[1]), parseFloat(a[2]));
                }
            }
            else if (('x' in a) && ('y' in a)) {
                return new V3(parseFloat(a.x), parseFloat(a.y), 'z' in a ? parseFloat(a.z) : 0);
            }
        }
    }
    throw new Error('invalid arguments' + arguments);
}

const P3YZ = { normal1: V3.X, w: 0 };
const P3ZX = { normal1: V3.Y, w: 0 };
const P3XY = { normal1: V3.Z, w: 0 };
class Transformable {
    mirror(plane) {
        return this.transform(M4.mirror(plane));
    }
    mirroredX() {
        return this.mirror(P3YZ);
    }
    mirrorY() {
        return this.mirror(P3ZX);
    }
    mirrorZ() {
        return this.mirror(P3XY);
    }
    project(plane) {
        return this.transform(M4.project(plane));
    }
    projectXY() {
        return this.transform(M4.project(P3XY));
    }
    projectYZ() {
        return this.transform(M4.project(P3YZ));
    }
    projectZX() {
        return this.transform(M4.project(P3ZX));
    }
    translate(...args) {
        return this.transform(M4.translate.apply(undefined, args), callsce.call(undefined, '.translate', ...args));
    }
    scale(...args) {
        return this.transform(M4.scale.apply(undefined, args), callsce.call(undefined, '.scale', ...args));
    }
    rotateX(radians) {
        return this.transform(M4.rotateX(radians), `.rotateX(${radians})`);
    }
    rotateY(radians) {
        return this.transform(M4.rotateY(radians), `.rotateY(${radians})`);
    }
    rotateZ(radians) {
        return this.transform(M4.rotateZ(radians), `.rotateZ(${radians})`);
    }
    rotate(rotationCenter, rotationAxis, radians) {
        return this.transform(M4.rotateLine(rotationCenter, rotationAxis, radians), callsce('.rotate', rotationCenter, rotationAxis, radians));
    }
    rotateAB(from, to) {
        return this.transform(M4.rotateAB(from, to), callsce('.rotateAB', from, to));
    }
    eulerZXZ(alpha, beta, gamma) {
        throw new Error();
        //return this.transform(M4.eulerZXZ(alpha, beta, gamma))
    }
    shearX(y, z) {
        return this.transform(new M4([
            1, y, z, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1
        ]));
    }
    foo() {
        return this.transform(M4.FOO);
    }
    bar() {
        return this.transform(M4.BAR);
    }
    visit(visitor, ...args) {
        let proto = Object.getPrototypeOf(this);
        // walk up the prototype chain until we find a defined function in o
        while (!visitor.hasOwnProperty(proto.constructor.name) && proto !== Transformable.prototype) {
            proto = Object.getPrototypeOf(proto);
        }
        if (visitor.hasOwnProperty(proto.constructor.name)) {
            return visitor[proto.constructor.name].apply(this, args);
        }
        else {
            throw new Error('No implementation for ' + this.constructor.name);
        }
    }
}

const { PI: PI$1, abs: abs$1 } = Math;
class M4 extends Matrix {
    /**
     * Takes 16 arguments in row-major order, which can be passed individually, as a list, or even as
     * four lists, one for each row. If the arguments are omitted then the identity matrix is constructed instead.
     */
    constructor(...var_args) {
        let m;
        if (0 == arguments.length) {
            m = new Float64Array(16);
        }
        else {
            const flattened = Array.prototype.concat.apply([], arguments);
            assert(flattened.length == 16, 'flattened.length == 16' + flattened.length);
            m = new Float64Array(flattened);
        }
        super(4, 4, m);
    }
    get X() {
        return this.transformVector(V3.X);
    }
    get Y() {
        return this.transformVector(V3.Y);
    }
    get Z() {
        return this.transformVector(V3.Z);
    }
    get O() {
        return this.getTranslation();
    }
    /**
     * Returns the matrix that when multiplied with `matrix` results in the
     * identity matrix. You can optionally pass an existing matrix in `result`
     * to avoid allocating a new matrix. This implementation is from the Mesa
     * OpenGL function `__gluInvertMatrixd()` found in `project.c`.
     */
    static inverse(matrix, result) {
        assertInst(M4, matrix);
        !result || assertInst(M4, result);
        assert(matrix != result, 'matrix != result');
        result = result || new M4();
        const m = matrix.m, r = result.m;
        // first compute transposed cofactor matrix:
        // cofactor of an element is the determinant of the 3x3 matrix gained by removing the column and row belonging
        // to the element
        r[0] = m[5] * m[10] * m[15] - m[5] * m[14] * m[11] - m[6] * m[9] * m[15] + m[6] * m[13] * m[11] + m[7] * m[9] * m[14] - m[7] * m[13] * m[10];
        r[1] = -m[1] * m[10] * m[15] + m[1] * m[14] * m[11] + m[2] * m[9] * m[15] - m[2] * m[13] * m[11] - m[3] * m[9] * m[14] + m[3] * m[13] * m[10];
        r[2] = m[1] * m[6] * m[15] - m[1] * m[14] * m[7] - m[2] * m[5] * m[15] + m[2] * m[13] * m[7] + m[3] * m[5] * m[14] - m[3] * m[13] * m[6];
        r[3] = -m[1] * m[6] * m[11] + m[1] * m[10] * m[7] + m[2] * m[5] * m[11] - m[2] * m[9] * m[7] - m[3] * m[5] * m[10] + m[3] * m[9] * m[6];
        r[4] = -m[4] * m[10] * m[15] + m[4] * m[14] * m[11] + m[6] * m[8] * m[15] - m[6] * m[12] * m[11] - m[7] * m[8] * m[14] + m[7] * m[12] * m[10];
        r[5] = m[0] * m[10] * m[15] - m[0] * m[14] * m[11] - m[2] * m[8] * m[15] + m[2] * m[12] * m[11] + m[3] * m[8] * m[14] - m[3] * m[12] * m[10];
        r[6] = -m[0] * m[6] * m[15] + m[0] * m[14] * m[7] + m[2] * m[4] * m[15] - m[2] * m[12] * m[7] - m[3] * m[4] * m[14] + m[3] * m[12] * m[6];
        r[7] = m[0] * m[6] * m[11] - m[0] * m[10] * m[7] - m[2] * m[4] * m[11] + m[2] * m[8] * m[7] + m[3] * m[4] * m[10] - m[3] * m[8] * m[6];
        r[8] = m[4] * m[9] * m[15] - m[4] * m[13] * m[11] - m[5] * m[8] * m[15] + m[5] * m[12] * m[11] + m[7] * m[8] * m[13] - m[7] * m[12] * m[9];
        r[9] = -m[0] * m[9] * m[15] + m[0] * m[13] * m[11] + m[1] * m[8] * m[15] - m[1] * m[12] * m[11] - m[3] * m[8] * m[13] + m[3] * m[12] * m[9];
        r[10] = m[0] * m[5] * m[15] - m[0] * m[13] * m[7] - m[1] * m[4] * m[15] + m[1] * m[12] * m[7] + m[3] * m[4] * m[13] - m[3] * m[12] * m[5];
        r[11] = -m[0] * m[5] * m[11] + m[0] * m[9] * m[7] + m[1] * m[4] * m[11] - m[1] * m[8] * m[7] - m[3] * m[4] * m[9] + m[3] * m[8] * m[5];
        r[12] = -m[4] * m[9] * m[14] + m[4] * m[13] * m[10] + m[5] * m[8] * m[14] - m[5] * m[12] * m[10] - m[6] * m[8] * m[13] + m[6] * m[12] * m[9];
        r[13] = m[0] * m[9] * m[14] - m[0] * m[13] * m[10] - m[1] * m[8] * m[14] + m[1] * m[12] * m[10] + m[2] * m[8] * m[13] - m[2] * m[12] * m[9];
        r[14] = -m[0] * m[5] * m[14] + m[0] * m[13] * m[6] + m[1] * m[4] * m[14] - m[1] * m[12] * m[6] - m[2] * m[4] * m[13] + m[2] * m[12] * m[5];
        r[15] = m[0] * m[5] * m[10] - m[0] * m[9] * m[6] - m[1] * m[4] * m[10] + m[1] * m[8] * m[6] + m[2] * m[4] * m[9] - m[2] * m[8] * m[5];
        // calculate determinant using laplace expansion (cf https://en.wikipedia.org/wiki/Laplace_expansion),
        // as we already have the cofactors. We multiply a column by a row as the cofactor matrix is transposed.
        const det = m[0] * r[0] + m[1] * r[4] + m[2] * r[8] + m[3] * r[12];
        // assert(!isZero(det), 'det may not be zero, i.e. the matrix is not invertible')
        let i = 16;
        while (i--) {
            r[i] /= det;
        }
        return result;
    }
    /**
     * Returns `matrix`, exchanging columns for rows. You can optionally pass an
     * existing matrix in `result` to avoid allocating a new matrix.
     */
    static transpose(matrix, result) {
        assertInst(M4, matrix);
        !result || assertInst(M4, result);
        assert(matrix != result, 'matrix != result');
        result = result || new M4();
        const m = matrix.m, r = result.m;
        r[0] = m[0];
        r[1] = m[4];
        r[2] = m[8];
        r[3] = m[12];
        r[4] = m[1];
        r[5] = m[5];
        r[6] = m[9];
        r[7] = m[13];
        r[8] = m[2];
        r[9] = m[6];
        r[10] = m[10];
        r[11] = m[14];
        r[12] = m[3];
        r[13] = m[7];
        r[14] = m[11];
        r[15] = m[15];
        return result;
    }
    /**
     * Returns the concatenation of the transforms for `left` and `right`.
     */
    static multiply(left, right, result) {
        assertInst(M4, left, right);
        !result || assertInst(M4, result);
        assert(left != result, 'left != result');
        assert(right != result, 'right != result');
        result = result || new M4();
        const a = left.m, b = right.m, r = result.m;
        r[0] = a[0] * b[0] + a[1] * b[4] + (a[2] * b[8] + a[3] * b[12]);
        r[1] = a[0] * b[1] + a[1] * b[5] + (a[2] * b[9] + a[3] * b[13]);
        r[2] = a[0] * b[2] + a[1] * b[6] + (a[2] * b[10] + a[3] * b[14]);
        r[3] = a[0] * b[3] + a[1] * b[7] + (a[2] * b[11] + a[3] * b[15]);
        r[4] = a[4] * b[0] + a[5] * b[4] + (a[6] * b[8] + a[7] * b[12]);
        r[5] = a[4] * b[1] + a[5] * b[5] + (a[6] * b[9] + a[7] * b[13]);
        r[6] = a[4] * b[2] + a[5] * b[6] + (a[6] * b[10] + a[7] * b[14]);
        r[7] = a[4] * b[3] + a[5] * b[7] + (a[6] * b[11] + a[7] * b[15]);
        r[8] = a[8] * b[0] + a[9] * b[4] + (a[10] * b[8] + a[11] * b[12]);
        r[9] = a[8] * b[1] + a[9] * b[5] + (a[10] * b[9] + a[11] * b[13]);
        r[10] = a[8] * b[2] + a[9] * b[6] + (a[10] * b[10] + a[11] * b[14]);
        r[11] = a[8] * b[3] + a[9] * b[7] + (a[10] * b[11] + a[11] * b[15]);
        r[12] = a[12] * b[0] + a[13] * b[4] + (a[14] * b[8] + a[15] * b[12]);
        r[13] = a[12] * b[1] + a[13] * b[5] + (a[14] * b[9] + a[15] * b[13]);
        r[14] = a[12] * b[2] + a[13] * b[6] + (a[14] * b[10] + a[15] * b[14]);
        r[15] = a[12] * b[3] + a[13] * b[7] + (a[14] * b[11] + a[15] * b[15]);
        return result;
    }
    static copy(src, result = new M4()) {
        assertInst(M4, src, result);
        assert(result != src, 'result != src');
        const s = src.m, d = result.m;
        let i = 16;
        while (i--) {
            d[i] = s[i];
        }
        return result;
    }
    static forSys(e0, e1, e2 = e0.cross(e1), origin = V3.O) {
        assertVectors(e0, e1, e2, origin);
        return new M4(e0.x, e1.x, e2.x, origin.x, e0.y, e1.y, e2.y, origin.y, e0.z, e1.z, e2.z, origin.z, 0, 0, 0, 1);
    }
    static forRows(n0, n1, n2, n3 = V3.O) {
        assertVectors(n0, n1, n2, n3);
        return new M4(n0.x, n0.y, n0.z, 0, n1.x, n1.y, n1.z, 0, n2.x, n2.y, n2.z, 0, n3.x, n3.y, n3.z, 1);
    }
    /**
     * Returns an identity matrix. You can optionally pass an existing matrix in `result` to avoid allocating a new
     * matrix. This emulates the OpenGL function `glLoadIdentity()`
     *
     * Unless initializing a matrix to be modified, use M4.IDENTITY
     */
    static identity(result = new M4()) {
        assertInst(M4, result);
        const m = result.m;
        m[0] = m[5] = m[10] = m[15] = 1;
        m[1] = m[2] = m[3] = m[4] = m[6] = m[7] = m[8] = m[9] = m[11] = m[12] = m[13] = m[14] = 0;
        return result;
    }
    /**
     * Creates a new M4 initialized by a user defined callback function
     *
     * @param f signature: (elRow, elCol, elIndex) =>
     *     el, where elIndex is the row-major index, i.e. eLindex == elRow * 4 + elCol
     * @param result
     */
    static fromFunction4(f, result = new M4()) {
        assert(typeof f == 'function');
        assertInst(M4, result);
        const m = result.m;
        let i = 16;
        while (i--) {
            m[i] = f(Math.floor(i / 4), i % 4, i);
        }
        return result;
    }
    /**
     ### GL.Matrix.perspective(fov, aspect, near, far[, result])

     */
    /**
     * ## hjghfhg jhg hjg jhkg jhg jkh jhg jh gjh {@see V3.O}
     * {@see perspectiveRad}
     * perspectiveRad
     * ```
     *  test ```
     * @param fovDegrees in degrees
     * @param aspect aspect ratio = width/height of viewport
     */
    static perspective(fovDegrees, aspect, near, far, result = new M4()) {
        return M4.perspectiveRad(fovDegrees * DEG, aspect, near, far, result);
    }
    static perspectiveRad(fov, aspect, near, far, result = new M4()) {
        assertInst(M4, result);
        assertNumbers(fov, aspect, near, far);
        const y = Math.tan(fov / 2) * near;
        const x = y * aspect;
        return M4.frustum(-x, x, -y, y, near, far, result);
    }
    // the OpenGL function `glFrustum()`.
    static frustum(left, right, bottom, top, near, far, result) {
        assertNumbers(left, right, bottom, top, near, far);
        assert(0 < near, '0 < near');
        assert(near < far, 'near < far');
        !result || assertInst(M4, result);
        result = result || new M4();
        const m = result.m;
        m[0] = 2 * near / (right - left);
        m[1] = 0;
        m[2] = (right + left) / (right - left);
        m[3] = 0;
        m[4] = 0;
        m[5] = 2 * near / (top - bottom);
        m[6] = (top + bottom) / (top - bottom);
        m[7] = 0;
        m[8] = 0;
        m[9] = 0;
        m[10] = -(far + near) / (far - near);
        m[11] = -2 * far * near / (far - near);
        m[12] = 0;
        m[13] = 0;
        m[14] = -1;
        m[15] = 0;
        return result;
    }
    /**
     * Returns a new M4 representing the a projection through/towards a point onto a plane.
     */
    static projectPlanePoint(p, plane, result = new M4()) {
        assertVectors(p, plane.normal1);
        assertInst(M4, result);
        const m = result.m;
        const n = plane.normal1, w = plane.w;
        const np = n.dot(p);
        m[0] = p.x * n.x + w - np;
        m[1] = p.x * n.y;
        m[2] = p.x * n.z;
        m[3] = -w * p.x;
        m[4] = p.y * n.x;
        m[5] = p.y * n.y + w - np;
        m[6] = p.y * n.z;
        m[7] = -w * p.y;
        m[8] = p.z * n.x;
        m[9] = p.z * n.y;
        m[10] = p.z * n.z + w - np;
        m[11] = -w * p.z;
        m[12] = n.x;
        m[13] = n.y;
        m[14] = n.z;
        m[15] = -np;
        return result;
    }
    /**
     * Orthographic/orthogonal projection. Transforms the cuboid with the dimensions X: [left right] Y: [bottom, top]
     * Z: [near far] to the cuboid X: [-1 1] Y [-1 1] Z [-1, 1]
     */
    static ortho(left, right, bottom, top, near, far, result = new M4()) {
        assertNumbers(left, right, bottom, top, near, far);
        assertInst(M4, result);
        const m = result.m;
        m[0] = 2 / (right - left);
        m[1] = 0;
        m[2] = 0;
        m[3] = -(right + left) / (right - left);
        m[4] = 0;
        m[5] = 2 / (top - bottom);
        m[6] = 0;
        m[7] = -(top + bottom) / (top - bottom);
        m[8] = 0;
        m[9] = 0;
        m[10] = -2 / (far - near);
        m[11] = -(far + near) / (far - near);
        m[12] = 0;
        m[13] = 0;
        m[14] = 0;
        m[15] = 1;
        return result;
    }
    static scale(...args) {
        let x, y, z, result;
        if (args[0] instanceof V3) {
            assert(args.length <= 2);
            ({ x, y, z } = args[0]);
            result = args[1];
        }
        else if ('number' != typeof args[1]) {
            x = y = z = args[0];
            result = args[1];
        }
        else {
            assert(args.length <= 4);
            x = args[0];
            y = args[1];
            z = undefined != args[2] ? args[2] : 1;
            result = args[3];
        }
        undefined == result && (result = new M4());
        assertInst(M4, result);
        assertNumbers(x, y, z);
        const m = result.m;
        m[0] = x;
        m[1] = 0;
        m[2] = 0;
        m[3] = 0;
        m[4] = 0;
        m[5] = y;
        m[6] = 0;
        m[7] = 0;
        m[8] = 0;
        m[9] = 0;
        m[10] = z;
        m[11] = 0;
        m[12] = 0;
        m[13] = 0;
        m[14] = 0;
        m[15] = 1;
        return result;
    }
    static translate(...args) {
        let x, y, z, result;
        if (args[0] instanceof V3) {
            assert(args.length <= 2);
            ({ x, y, z } = args[0]);
            result = args[1];
        }
        else {
            assert(args.length <= 4);
            x = args[0];
            y = undefined != args[1] ? args[1] : 0;
            z = undefined != args[2] ? args[2] : 0;
            result = args[3];
        }
        undefined == result && (result = new M4());
        assertInst(M4, result);
        assertNumbers(x, y, z);
        const m = result.m;
        m[0] = 1;
        m[1] = 0;
        m[2] = 0;
        m[3] = x;
        m[4] = 0;
        m[5] = 1;
        m[6] = 0;
        m[7] = y;
        m[8] = 0;
        m[9] = 0;
        m[10] = 1;
        m[11] = z;
        m[12] = 0;
        m[13] = 0;
        m[14] = 0;
        m[15] = 1;
        return result;
    }
    /**
     * Returns a matrix that rotates by `a` degrees around the vector (x, y, z). You can optionally pass an existing
     * matrix in `result` to avoid allocating a new matrix. This emulates the OpenGL function `glRotate()`.
     */
    //static rotation(radians: raddd, x: number, y: number, z: number, result?: M4): M4
    static rotate(radians, v, result) {
        undefined == result && (result = new M4());
        assertInst(M4, result);
        let { x, y, z } = v;
        assert(!new V3(x, y, z).likeO(), '!V(x, y, z).likeO()');
        const m = result.m;
        const d = Math.sqrt(x * x + y * y + z * z);
        x /= d;
        y /= d;
        z /= d;
        const cos = Math.cos(radians), sin = Math.sin(radians), t = 1 - cos;
        m[0] = x * x * t + cos;
        m[1] = x * y * t - z * sin;
        m[2] = x * z * t + y * sin;
        m[3] = 0;
        m[4] = y * x * t + z * sin;
        m[5] = y * y * t + cos;
        m[6] = y * z * t - x * sin;
        m[7] = 0;
        m[8] = z * x * t - y * sin;
        m[9] = z * y * t + x * sin;
        m[10] = z * z * t + cos;
        m[11] = 0;
        m[12] = 0;
        m[13] = 0;
        m[14] = 0;
        m[15] = 1;
        return result;
    }
    /**
     * Returns a matrix that puts the camera at the eye point `ex, ey, ez` looking
     * toward the center point `cx, cy, cz` with an up direction of `ux, uy, uz`.
     * You can optionally pass an existing matrix in `result` to avoid allocating
     * a new matrix. This emulates the OpenGL function `gluLookAt()`.
     */
    static lookAt(eye, focus, up, result) {
        assert(3 == arguments.length || 4 == arguments.length, '3 == arguments.length || 4 == arguments.length');
        assertVectors(eye, focus, up);
        !result || assertInst(M4, result);
        result = result || new M4();
        const m = result.m;
        const f = eye.minus(focus).unit();
        const s = up.cross(f).unit();
        const t = f.cross(s).unit();
        m[0] = s.x;
        m[1] = s.y;
        m[2] = s.z;
        m[3] = -s.dot(eye);
        m[4] = t.x;
        m[5] = t.y;
        m[6] = t.z;
        m[7] = -t.dot(eye);
        m[8] = f.x;
        m[9] = f.y;
        m[10] = f.z;
        m[11] = -f.dot(eye);
        m[12] = 0;
        m[13] = 0;
        m[14] = 0;
        m[15] = 1;
        return result;
    }
    /**
     * Create a rotation matrix for rotating around the X axis
     */
    static rotateX(radians) {
        assertNumbers(radians);
        const sin = Math.sin(radians), cos = Math.cos(radians);
        const els = [
            1, 0, 0, 0, 0, cos, -sin, 0, 0, sin, cos, 0, 0, 0, 0, 1,
        ];
        return new M4(els);
    }
    /**
     * Create a rotation matrix for rotating around the Y axis
     */
    static rotateY(radians) {
        const sin = Math.sin(radians), cos = Math.cos(radians);
        const els = [
            cos, 0, sin, 0, 0, 1, 0, 0, -sin, 0, cos, 0, 0, 0, 0, 1,
        ];
        return new M4(els);
    }
    /**
     * Create a rotation matrix for rotating around the Z axis
     */
    static rotateZ(radians) {
        const sin = Math.sin(radians), cos = Math.cos(radians);
        const els = [
            cos, -sin, 0, 0, sin, cos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,
        ];
        return new M4(els);
    }
    /**
     * New rotation matrix such that result.transformVector(a).isParallelTo(b) through smallest rotation.
     * Performs no scaling.
     */
    static rotateAB(a, b, result) {
        // see http://inside.mines.edu/fs_home/gmurray/ArbitraryAxisRotation/
        assertVectors(a, b);
        !result || assertInst(M4, result);
        const rotationAxis = a.cross(b), rotationAxisLength = rotationAxis.length();
        if (eq0(rotationAxisLength)) {
            return M4.identity(result);
        }
        const radians = Math.atan2(rotationAxisLength, a.dot(b));
        return M4.rotateLine(V3.O, rotationAxis, radians, result);
    }
    /**
     * Matrix for rotation about arbitrary line defined by an anchor point and direction.
     * rotationAxis does not need to be unit
     */
    static rotateLine(rotationAnchor, rotationAxis, radians, result) {
        // see http://inside.mines.edu/fs_home/gmurray/ArbitraryAxisRotation/
        assertVectors(rotationAnchor, rotationAxis);
        assertNumbers(radians);
        !result || assertInst(M4, result);
        result = result || new M4();
        rotationAxis = rotationAxis.unit();
        const ax = rotationAnchor.x, ay = rotationAnchor.y, az = rotationAnchor.z, dx = rotationAxis.x, dy = rotationAxis.y, dz = rotationAxis.z;
        const m = result.m, cos = Math.cos(radians), sin = Math.sin(radians);
        m[0] = dx * dx + (dy * dy + dz * dz) * cos;
        m[1] = dx * dy * (1 - cos) - dz * sin;
        m[2] = dx * dz * (1 - cos) + dy * sin;
        m[3] = (ax * (dy * dy + dz * dz) - dx * (ay * dy + az * dz)) * (1 - cos) + (ay * dz - az * dy) * sin;
        m[4] = dx * dy * (1 - cos) + dz * sin;
        m[5] = dy * dy + (dx * dx + dz * dz) * cos;
        m[6] = dy * dz * (1 - cos) - dx * sin;
        m[7] = (ay * (dx * dx + dz * dz) - dy * (ax * dx + az * dz)) * (1 - cos) + (az * dx - ax * dz) * sin;
        m[8] = dx * dz * (1 - cos) - dy * sin;
        m[9] = dy * dz * (1 - cos) + dx * sin;
        m[10] = dz * dz + (dx * dx + dy * dy) * cos;
        m[11] = (az * (dx * dx + dy * dy) - dz * (ax * dx + ay * dy)) * (1 - cos) + (ax * dy - ay * dx) * sin;
        m[12] = 0;
        m[13] = 0;
        m[14] = 0;
        m[15] = 1;
        return result;
    }
    /**
     * Create an affine matrix for mirroring into an arbitrary plane:
     */
    static mirror(plane, result = new M4()) {
        assertVectors(plane.normal1);
        assertInst(M4, result);
        const [nx, ny, nz] = plane.normal1;
        const w = plane.w;
        const m = result.m;
        m[0] = 1.0 - 2.0 * nx * nx;
        m[1] = -2.0 * ny * nx;
        m[2] = -2.0 * nz * nx;
        m[3] = 2.0 * nx * w;
        m[4] = -2.0 * nx * ny;
        m[5] = 1.0 - 2.0 * ny * ny;
        m[6] = -2.0 * nz * ny;
        m[7] = 2.0 * ny * w;
        m[8] = -2.0 * nx * nz;
        m[9] = -2.0 * ny * nz;
        m[10] = 1.0 - 2.0 * nz * nz;
        m[11] = 2.0 * nz * w;
        m[12] = 0;
        m[13] = 0;
        m[14] = 0;
        m[15] = 1;
        return result;
    }
    /**
     *
     * @param plane
     * @param dir Projection direction. Optional, if not specified plane normal1 will be used.
     * @param result {@see M4}
     */
    static project(plane, dir = plane.normal1, result = new M4()) {
        // TODO: doc
        /**
         * plane.normal1 DOT (p + lambda * dir) = w (1)
         * extract lambda:
         * plane.normal1 DOT p + lambda * plane.normal1 DOT dir = w
         * lambda = (w - plane.normal1 DOT p) / plane.normal1 DOT dir
         * result = p + lambda * dir
         * result = p + dir * (w - plane.normal1 DOT p) / plane.normal1 DOT dir
         * result =  w * dir / (plane.normal1 DOT dir) + p - plane.normal1 DOT p * dir / (plane.normal1 DOT dir) *
         *

         a + d * (w - n . a) / (nd)
         a + dw - d * na
         */
        assertVectors(dir, plane.normal1);
        assertInst(M4, result);
        const w = plane.w;
        const m = result.m;
        const nd = plane.normal1.dot(dir);
        const { x: nx, y: ny, z: nz } = plane.normal1;
        const { x: dx, y: dy, z: dz } = dir.div(nd);
        /*
         rejectedFrom: return this.minus(b.times(this.dot(b) / b.dot(b)))
         return M4.forSys(
         V3.X.rejectedFrom(plane.normal1),
         V3.Y.rejectedFrom(plane.normal1),
         V3.Z.rejectedFrom(plane.normal1),
         plane.anchor,
         result
         )
         */
        m[0] = 1.0 - nx * dx;
        m[1] = -ny * dx;
        m[2] = -nz * dx;
        m[3] = dx * w;
        m[4] = -nx * dy;
        m[5] = 1.0 - ny * dy;
        m[6] = -nz * dy;
        m[7] = dy * w;
        m[8] = -nx * dz;
        m[9] = -ny * dz;
        m[10] = 1.0 - nz * dz;
        m[11] = dz * w;
        m[12] = 0;
        m[13] = 0;
        m[14] = 0;
        m[15] = 1;
        return result;
    }
    static lineProjection(line, result = new M4()) {
        assertVectors(line.anchor, line.dir1);
        assertInst(M4, result);
        const ax = line.anchor.x, ay = line.anchor.y, az = line.anchor.z;
        const dx = line.dir1.x, dy = line.dir1.y, dz = line.dir1.z;
        const m = result.m;
        /*
         projectedOn: return b.times(this.dot(b) / b.dot(b))
         */
        m[0] = dx * dx;
        m[1] = dx * dy;
        m[2] = dx * dz;
        m[3] = ax;
        m[4] = dy * dx;
        m[5] = dy * dy;
        m[6] = dy * dz;
        m[7] = ay;
        m[8] = dz * dx;
        m[9] = dz * dy;
        m[10] = dz * dz;
        m[11] = az;
        m[12] = 0;
        m[13] = 0;
        m[14] = 0;
        m[15] = 1;
        return result;
    }
    /**
     Returns a perspective transform matrix, which makes far away objects appear smaller than nearby objects. The `aspect` argument should be the width divided by the height of your viewport and `fov` is the top-to-bottom angle of the field of view in degrees. You can optionally pass an existing matrix in `result` to avoid allocating a new matrix. This emulates the OpenGL function `gluPerspective()`.
     */
    static multiplyMultiple(...m4s) {
        if (0 == m4s.length)
            return M4.identity();
        let temp = M4.identity(), result = m4s[0].copy();
        for (let i = 1; i < m4s.length; i++) {
            M4.multiply(result, m4s[i], temp);
            {
                [temp, result] = [result, temp];
            }
        }
        return result;
    }
    static pointInversion(p, result = new M4()) {
        assertVectors(p);
        assertInst(M4, result);
        const m = result.m;
        m[0] = -1;
        m[1] = 0;
        m[2] = 0;
        m[3] = 2 * p.x;
        m[4] = 0;
        m[5] = -1;
        m[6] = 0;
        m[7] = 2 * p.y;
        m[8] = 0;
        m[9] = 0;
        m[10] = -1;
        m[11] = 2 * p.z;
        m[12] = 0;
        m[13] = 0;
        m[14] = 0;
        m[15] = 1;
        return result;
    }
    // ### GL.Matrix.frustum(left, right, bottom, top, near, far[, result])
    //
    // Sets up a viewing frustum, which is shaped like a truncated pyramid with the
    // camera where the point of the pyramid would be. You can optionally pass an
    // existing matrix in `result` to avoid allocating a new matrix. This emulates
    /**
     * Returns a new M4 which is equal to the inverse of this.
     */
    inversed() {
        return M4.inverse(this);
    }
    /**
     * Matrix trace is defined as the sum of the elements of the main diagonal.
     */
    trace() {
        return this.m[0] + this.m[5] + this.m[10] + this.m[15];
    }
    as3x3() {
        const result = M4.copy(this), m = result.m;
        m[3] = m[7] = m[11] = m[12] = m[13] = m[14] = 0;
        m[15] = 1;
        return result;
    }
    transform(m4) {
        return m4.times(this);
    }
    realEigenValues3() {
        const m = this.m;
        assert(0 == m[12] && 0 == m[13] && 0 == m[14]);
        // determinant of (this - λI):
        // | a-λ  b   c  |
        // |  d  e-λ  f  | = -λ^3 + λ^2 (a+e+i) + λ (-a e-a i+b d+c g-e i+f h) + a(ei - fh) - b(di - fg) + c(dh - eg)
        // |  g   h  i-λ |
        const [a, b, c, , d, e, f, , g, h, i] = m;
        // det(this - λI) = -λ^3 +λ^2 (a+e+i) + λ (-a e-a i-b d+c g-e i+f h)+ (a e i-a f h-b d i+b f g+c d h-c e g)
        const s = -1;
        const t = a + e + i; // equivalent to trace of matrix
        const u = -a * e - a * i + b * d + c * g - e * i + f * h; // equivalent to 1/2 (trace(this²) - trace²(A))
        const w = a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g); // equivalent to matrix determinant
        console.log(s, t, u, w);
        return solveCubicReal2(s, t, u, w);
    }
    realEigenVectors3() {
        const eigenValues = this.realEigenValues3();
        const this3x3 = this.times(M4.IDENTITY3);
        console.log(this.toString());
        console.log(this3x3.toString());
        let mats = eigenValues.map(ev => M4.IDENTITY3.scale(-ev).plus(this3x3));
        console.log(mats.map(m => m.determinant3()));
        console.log(mats.map(m => '' + m.toString(v => '' + v)).join('\n\n'));
        console.log(mats.map(m => '' + m.gauss().U.toString(v => '' + v)).join('\n\n'));
        console.log('mats.map(m=>m.rank())', mats.map(m => m.rank()));
        if (1 == eigenValues.length) {
            console.log(mats[0].toString());
            assertf(() => 0 == mats[0].rank());
            // col vectors
            return arrayFromFunction(3, col => new V3(this.m[col], this.m[4 + col], this.m[8 + col]));
        }
        if (2 == eigenValues.length) {
            // one matrix should have rank 1, the other rank 2
            if (1 == mats[0].rank()) {
                mats = [mats[1], mats[0]];
            }
            assertf(() => 2 == mats[0].rank());
            assertf(() => 1 == mats[1].rank());
            // mat[0] has rank 2, mat[1] has rank 1
            const gauss0 = mats[0].gauss().U;
            const eigenVector0 = gauss0.row(0).cross(gauss0.row(1)).V3().unit();
            const planeNormal = mats[1].gauss().U.row(0).V3();
            const eigenVector1 = planeNormal.getPerpendicular().unit();
            const eigenVector2 = eigenVector0.cross(eigenVector1).rejectedFrom(planeNormal);
            return [eigenVector0, eigenVector1, eigenVector2];
        }
        if (3 == eigenValues.length) {
            mats.forEach((mat, i) => assert(2 == mat.rank(), i + ': ' + mat.rank()));
            // the (A - lambda I) matrices map to a plane. This means, that there is an entire line in R³ which maps to
            // the point V3.O
            return mats.map(mat => {
                const gauss = mat.gauss().U;
                return gauss.row(0).cross(gauss.row(1)).V3().unit();
            });
        }
        throw new Error('there cannot be more than 3 eigen values');
    }
    /**
     * U * SIGMA * VSTAR = this
     * U and VSTAR are orthogonal matrices
     * SIGMA is a diagonal matrix
     */
    svd3() {
        function matrixForCS(i, k, c, s) {
            const m = M4.identity();
            m.setEl(i, i, c);
            m.setEl(k, k, c);
            m.setEl(i, k, s);
            m.setEl(k, i, -s);
            return m;
        }
        const A = this.as3x3();
        let S = A.transposed().times(A), V$$1 = M4.identity();
        console.log(S.str);
        for (let it = 0; it < 16; it++) {
            console.log('blahg\n', V$$1.times(S).times(V$$1.transposed()).str);
            assert(V$$1.times(S).times(V$$1.transposed()).likeM4(A.transposed().times(A)), V$$1.times(S).times(V$$1.transposed()).str, A.transposed().times(A).str);
            let maxOffDiagonal = 0, maxOffDiagonalIndex = 1, j = 10;
            while (j--) {
                const val = Math.abs(S.m[j]);
                if (j % 4 != Math.floor(j / 4) && val > maxOffDiagonal) {
                    maxOffDiagonal = val;
                    maxOffDiagonalIndex = j;
                }
            }
            const i = Math.floor(maxOffDiagonalIndex / 4), k = maxOffDiagonalIndex % 4;
            const a_ii = S.m[5 * i], a_kk = S.m[5 * k], a_ik = S.m[maxOffDiagonalIndex];
            const phi = a_ii === a_kk ? PI$1 / 4 : Math.atan(2 * a_ik / (a_ii - a_kk)) / 2;
            console.log(maxOffDiagonalIndex, i, k, 'phi', phi);
            const cos = Math.cos(phi), sin = Math.sin(phi);
            const givensRotation = matrixForCS(i, k, cos, -sin);
            assert(givensRotation.transposed().times(givensRotation).likeIdentity());
            console.log(givensRotation.str);
            V$$1 = V$$1.times(givensRotation);
            S = M4.multiplyMultiple(givensRotation.transposed(), S, givensRotation);
            console.log(S.str);
        }
        const sigma = S.map((el, elIndex) => elIndex % 5 == 0 ? Math.sqrt(el) : 0);
        return {
            U: M4.multiplyMultiple(A, V$$1, sigma.map((el, elIndex) => elIndex % 5 == 0 ? 1 / el : 0)),
            SIGMA: sigma,
            VSTAR: V$$1.transposed(),
        };
    }
    map(fn) {
        return M4.fromFunction4((x, y, i) => fn(this.m[i], i, this.m));
    }
    likeM4(m4) {
        assertInst(M4, m4);
        return this.m.every((el, index) => eq(el, m4.m[index]));
    }
    /**
     * Returns a new M4 equal to the transpose of this.
     */
    transposed() {
        return M4.transpose(this);
    }
    /**
     * Returns a new M4 which equal to (this * matrix) (in that order)
     */
    times(matrix) {
        return M4.multiply(this, matrix);
    }
    /**
     * Transforms the vector as a point with a w coordinate of 1. This means translations will have an effect, for
     * example.
     */
    transformPoint(v) {
        assertVectors(v);
        const m = this.m;
        const vx = v.x, vy = v.y, vz = v.z, vw = 1;
        const x = vx * m[0] + vy * m[1] + vz * m[2] + vw * m[3];
        const y = vx * m[4] + vy * m[5] + vz * m[6] + vw * m[7];
        const z = vx * m[8] + vy * m[9] + vz * m[10] + vw * m[11];
        const w = vx * m[12] + vy * m[13] + vz * m[14] + vw * m[15];
        // scale such that fourth element becomes 1:
        return new V3(x / w, y / w, z / w);
    }
    /**
     * Transforms the vector as a vector with a w coordinate of 0. This means translations will have no effect, for
     * example. Will throw an exception if the calculated w component != 0. This occurs for example when attempting
     * to transform a vector with a perspective matrix.
     */
    transformVector(v) {
        assertVectors(v);
        const m = this.m;
        const w = v.x * m[12] + v.y * m[13] + v.z * m[14];
        assert(w === 0, () => 'w === 0 needs to be true for this to make sense (w =' + w + this.str);
        return new V3(m[0] * v.x + m[1] * v.y + m[2] * v.z, m[4] * v.x + m[5] * v.y + m[6] * v.z, m[8] * v.x + m[9] * v.y + m[10] * v.z);
    }
    transformedPoints(vs) {
        return vs.map(v => this.transformPoint(v));
    }
    transformedVectors(vs) {
        return vs.map(v => this.transformVector(v));
    }
    new() {
        return new M4();
    }
    copy() {
        return M4.copy(this);
    }
    isRegular() {
        return !eq0(this.determinant());
    }
    isAxisAligned() {
        const m = this.m;
        return (1 >= +!eq0(m[0]) + +!eq0(m[1]) + +!eq0(m[2]))
            && (1 >= +!eq0(m[4]) + +!eq0(m[5]) + +!eq0(m[6]))
            && (1 >= +!eq0(m[8]) + +!eq0(m[9]) + +!eq0(m[10]));
    }
    /**
     * A matrix M is orthogonal iff M * M^T = I
     * I being the identity matrix.
     *
     * @returns If this matrix is orthogonal or very close to it. Comparison of the identity matrix and
     * this * this^T is done with {@link #likeM4}
     */
    isOrthogonal() {
        // return this.transposed().times(this).likeM4(M4.IDENTITY)
        M4.transpose(this, M4.temp0);
        M4.multiply(this, M4.temp0, M4.temp1);
        return M4.IDENTITY.likeM4(M4.temp1);
    }
    /**
     * A matrix M is symmetric iff M == M^T
     * I being the identity matrix.
     *
     * @returns If this matrix is symmetric or very close to it. Comparison of the identity matrix and
     * this * this^T is done with {@link #likeM4}
     */
    isSymmetric() {
        M4.transpose(this, M4.temp0);
        return this.likeM4(M4.temp0);
    }
    /**
     * A matrix M is normal1 iff M * M^-T == M^T * M TODO: ^-T?
     * I being the identity matrix.
     *
     * @returns If this matrix is symmetric or very close to it. Comparison of the identity matrix and
     * this * this^T is done with {@link #likeM4}
     */
    isNormal() {
        M4.transpose(this, M4.temp0); // temp0 = this^-T
        M4.multiply(this, M4.temp0, M4.temp1); // temp1 = this * this^-T
        M4.multiply(M4.temp0, this, M4.temp2); // temp2 = this^-T * this
        return M4.temp1.likeM4(M4.temp2);
    }
    /**
     * Determinant of matrix.
     *
     * Notes:
     *      For matrices A and B
     *      det(A * B) = det(A) * det(B)
     *      det(A^-1) = 1 / det(A)
     */
    determinant() {
        /*
         | a b c d |
         | e f g h |
         | i j k l |
         | m n o p |
         */
        const $ = this.m, a = $[0], b = $[1], c = $[2], d = $[3], e = $[4], f = $[5], g = $[6], h = $[7], i = $[8], j = $[9], k = $[10], l = $[11], m = $[12], n = $[13], o = $[14], p = $[15], klop = k * p - l * o, jlnp = j * p - l * n, jkno = j * o - k * n, ilmp = i * p - l * m, ikmo = i * o - k * m, ijmn = i * n - j * m;
        return (a * (f * klop - g * jlnp + h * jkno)
            - b * (e * klop - g * ilmp + h * ikmo)
            + c * (e * jlnp - f * ilmp + h * ijmn)
            - d * (e * jkno - f * ikmo + g * ijmn));
    }
    determinant3() {
        const [a, b, c, , d, e, f, , g, h, i] = this.m;
        const det = a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g);
        return det;
    }
    /**
     * determine whether this matrix is a mirroring transformation
     */
    isMirroring() {
        /*
         var u = V(this.m[0], this.m[4], this.m[8])
         var v = V(this.m[1], this.m[5], this.m[9])
         var w = V(this.m[2], this.m[6], this.m[10])

         // for a true orthogonal, non-mirrored base, u.cross(v) == w
         // If they have an opposite direction then we are mirroring
         var mirrorvalue = u.cross(v).dot(w)
         var ismirror = (mirrorvalue < 0)
         return ismirror
         */
        return this.determinant() < 0; // TODO: also valid for 4x4?
    }
    /**
     * Get the translation part of this matrix, i.e. the result of this.transformPoint(V3.O)
     */
    getTranslation() {
        const m = this.m, w = m[15];
        return new V3(m[3] / w, m[7] / w, m[11] / w);
    }
    /**
     * Returns this matrix scaled so that the determinant is 1.
     * det(c * A) = (c ** n) * det(A) for n x n matrices,
     * so we need to divide by the 4th root of the determinant
     */
    normalized() {
        const detAbs = abs$1(this.determinant());
        return 1 == detAbs ? this : this.divScalar(Math.pow(detAbs, 0.25));
    }
    /**
     * Returns this matrix scaled so that the determinant is 1.
     * det(c * A) = (c ** n) * det(A) for n x n matrices,
     * so we need to divide by the 4th root of the determinant
     */
    normalized2() {
        const div = this.m[15];
        return 1 == div ? this : this.divScalar(Math.pow(div, 0.25));
    }
    /**
     * Returns if the matrix has the following form (within NLA_PRECISION):
     * a b c 0
     * c d e 0
     * f g h 0
     * 0 0 0 1
     */
    like3x3() {
        const m = this.m;
        return eq(1, m[15])
            && eq0(m[12]) && eq0(m[13]) && eq0(m[14])
            && eq0(m[3]) && eq0(m[7]) && eq0(m[11]);
    }
    isNoProj() {
        const m = this.m;
        return 0 == m[12] && 0 == m[13] && 0 == m[14] && 1 == m[15];
    }
    likeIdentity() {
        return this.m.every((val, i) => (i / 4 | 0) == (i % 4) ? eq(1, val) : eq0(val));
    }
    isIdentity() {
        return this.m.every((val, i) => (i / 4 | 0) == (i % 4) ? 1 == val : 0 == val);
    }
    toString(f) {
        f = f || ((v) => v.toFixed(6).replace(/([0.])(?=0*$)/g, ' ').toString());
        assert(typeof f(0) == 'string', '' + typeof f(0));
        // slice this.m to convert it to an Array (from TypeArray)
        const rounded = Array.prototype.slice.call(this.m).map(f);
        const colWidths = [0, 1, 2, 3].map((colIndex) => rounded.sliceStep(colIndex, 0, 4).map((x) => x.length).max());
        return [0, 1, 2, 3].map((rowIndex) => rounded
            .slice(rowIndex * 4, rowIndex * 4 + 4) // select matrix row
            .map((x, colIndex) => ' '.repeat(colWidths[colIndex] - x.length) + x) // pad numbers with
            .join(' ')).join('\n'); // join rows
    }
    /**
     * Wether this matrix is a translation matrix, i.e. of the form
     * ```
     *	1, 0, 0, x,
     *	0, 1, 0, y,
     *	0, 0, 1, z,
     *	0, 0, 0, 1
     * ```
     */
    isTranslation() {
        // 2: any value, otherwise same value
        const mask = [
            1, 0, 0, 2,
            0, 1, 0, 2,
            0, 0, 1, 2,
            0, 0, 0, 1
        ];
        return mask.every((expected, index) => expected == 2 || expected == this.m[index]);
    }
    /**
     * Wether this matrix is a translation matrix, i.e. of the form
     * ```
     *	s, 0, 0, 0,
     *	0, t, 0, 0,
     *	0, 0, v, 0,
     *	0, 0, 0, 1
     * ```
     */
    isScaling() {
        const mask = [
            2, 0, 0, 0,
            0, 2, 0, 0,
            0, 0, 2, 0,
            0, 0, 0, 1
        ];
        return mask.every((expected, index) => expected == 2 || expected == this.m[index]);
    }
    isZRotation() {
        const mask = [
            2, 2, 0, 0,
            2, 2, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1
        ];
        return mask.every((expected, index) => expected == 2 || expected == this.m[index]) &&
            eq(1, Math.pow(this.m[0], 2) + Math.pow(this.m[1], 2)) &&
            this.m[0] == this.m[5] &&
            this.m[1] == -this.m[4];
    }
    toSource() {
        if (this.isIdentity()) {
            return 'M4.IDENTITY';
        }
        else if (this.isTranslation()) {
            return callsce('M4.translate', this.O);
        }
        else if (this.isScaling()) {
            return callsce('M4.scale', this.m[0], this.m[5], this.m[10]);
        }
        else if (this.isNoProj()) {
            return !this.O.equals(V3.O)
                ? callsce('M4.forSys', this.X, this.Y, this.Z, this.O)
                : callsce('M4.forSys', this.X, this.Y, this.Z);
        }
        throw new Error();
    }
    xyAreaFactor() {
        return this.transformVector(V3.X).cross(this.transformVector(V3.Y)).length();
    }
}
/**
 * A simple (consists of integers), regular, non-orthogonal matrix, useful mainly for testing.
 * M4.BAR = M4.FOO.inverse()
 */
M4.FOO = new M4(0, 1, 1, 2, 0.3, 0.4, 0.8, 13, 2.1, 3.4, 5.5, 8.9, 0, 0, 0, 1);
M4.BAR = M4.FOO.inversed();
M4.IDENTITY = M4.identity();
M4.YZX = M4.forSys(V3.Y, V3.Z, V3.X);
M4.ZXY = M4.forSys(V3.Z, V3.X, V3.Y);
M4.IDENTITY3 = new M4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0);
M4.temp0 = new M4();
M4.temp1 = new M4();
M4.temp2 = new M4();
M4.NAMEMAP = new JavaMap()
    .set(M4.IDENTITY3, 'M4.IDENTITY3')
    .set(M4.FOO, 'M4.FOO')
    .set(M4.BAR, 'M4.BAR')
    .set(M4.IDENTITY, 'M4.IDENTITY')
    .set(M4.ZXY, 'M4.ZXY')
    .set(M4.YZX, 'M4.YZX');
M4.prototype.height = 4;
M4.prototype.width = 4;
addOwnProperties(M4.prototype, Transformable.prototype, 'constructor');

const KEYWORD_REGEXP = new RegExp('^(' +
    'abstract|boolean|break|byte|case|catch|char|class|const|continue|debugger|' +
    'default|delete|do|double|else|enum|export|extends|false|final|finally|' +
    'float|for|function|goto|if|implements|import|in|instanceof|int|interface|' +
    'long|native|new|null|package|private|protected|public|return|short|static|' +
    'super|switch|synchronized|this|throw|throws|transient|true|try|typeof|' +
    'undefined|var|void|volatile|while|with' +
    ')$');
function stringIsLegalKey(key) {
    return /^[a-z_$][0-9a-z_$]*$/gi.test(key) && !KEYWORD_REGEXP.test(key);
}
const seen = [];
function toSource(o, indent = 0) {
    if (undefined === o)
        return 'undefined';
    if (null === o)
        return 'null';
    return o.toSource();
}
function addToSourceMethodToPrototype(clazz, method) {
    if (!clazz.prototype.toSource) {
        Object.defineProperty(clazz.prototype, 'toSource', { value: method, writable: true, configurable: true, enumerable: false });
    }
}
addToSourceMethodToPrototype(Boolean, Boolean.prototype.toString);
addToSourceMethodToPrototype(Function, Function.prototype.toString);
addToSourceMethodToPrototype(Number, Number.prototype.toString);
addToSourceMethodToPrototype(RegExp, RegExp.prototype.toString);
addToSourceMethodToPrototype(Date, function () {
    return 'new Date(' + this.getTime() + ')';
});
addToSourceMethodToPrototype(String, function () {
    return JSON.stringify(this);
});
addToSourceMethodToPrototype(Array, function () {
    if (seen.includes(this)) {
        return 'CIRCULAR_REFERENCE';
    }
    seen.push(this);
    let result = '[';
    for (let i = 0; i < this.length; i++) {
        result += '\n\t' + toSource(this[i]).replace(/\r\n|\n|\r/g, '$&\t');
        if (i !== this.length - 1) {
            result += ',';
        }
    }
    result += (0 === this.length) ? ']' : '\n]';
    seen.pop();
    return result;
});
addToSourceMethodToPrototype(Object, function () {
    if (seen.includes(this)) {
        return 'CIRCULAR_REFERENCE';
    }
    seen.push(this);
    let result = '{';
    const keys = Object.keys(this).sort();
    for (let i = 0; i < keys.length; i++) {
        const k = keys[i];
        result += '\n\t' + (stringIsLegalKey(k) ? k : JSON.stringify(k)) + ': ' + toSource(this[k]).replace(/\r\n|\n|\r/g, '$&\t');
        if (i !== keys.length - 1) {
            result += ',';
        }
    }
    result += (0 === keys.length) ? '}' : '\n}';
    seen.pop();
    return result;
});

class AABB extends Transformable {
    constructor(min = V3.INF, max = V3.INF.negated()) {
        super();
        this.min = min;
        this.max = max;
        assertVectors(min, max);
    }
    static forXYZ(x, y, z) {
        return new AABB(V3.O, new V3(x, y, z));
    }
    static forAABBs(aabbs) {
        const result = new AABB();
        for (const aabb of aabbs) {
            result.addAABB(aabb);
        }
        return result;
    }
    addPoint(p) {
        assertVectors(p);
        this.min = this.min.min(p);
        this.max = this.max.max(p);
        return this;
    }
    addPoints(ps) {
        ps.forEach(p => this.addPoint(p));
        return this;
    }
    addAABB(aabb) {
        assertInst(AABB, aabb);
        this.addPoint(aabb.min);
        this.addPoint(aabb.max);
        return this;
    }
    /**
     * Returns the largest AABB contained in this which doesn't overlap with aabb
     * @param aabb
     */
    withoutAABB(aabb) {
        assertInst(AABB, aabb);
        let min, max;
        const volume = this.volume(), size = this.size();
        let remainingVolume = -Infinity;
        for (let i = 0; i < 3; i++) {
            const dim = ['x', 'y', 'z'][i];
            const cond = aabb.min[dim] - this.min[dim] > this.max[dim] - aabb.max[dim];
            const dimMin = cond ? this.min[dim] : Math.max(this.min[dim], aabb.max[dim]);
            const dimMax = !cond ? this.max[dim] : Math.min(this.max[dim], aabb.min[dim]);
            const newRemainingVolume = (dimMax - dimMin) * volume / size[dim];
            if (newRemainingVolume > remainingVolume) {
                remainingVolume = newRemainingVolume;
                min = this.min.withElement(dim, dimMin);
                max = this.max.withElement(dim, dimMax);
            }
        }
        return new AABB(min, max);
    }
    getIntersectionAABB(aabb) {
        assertInst(AABB, aabb);
        return new AABB(this.min.max(aabb.min), this.max.min(aabb.max));
    }
    touchesAABB(aabb) {
        assertInst(AABB, aabb);
        return !(this.min.x > aabb.max.x || this.max.x < aabb.min.x
            || this.min.y > aabb.max.y || this.max.y < aabb.min.y
            || this.min.z > aabb.max.z || this.max.z < aabb.min.z);
    }
    fuzzyTouchesAABB(aabb) {
        assertInst(AABB, aabb);
        return !(lt(aabb.max.x, this.min.x) || lt(this.max.x, aabb.min.x)
            || lt(aabb.max.y, this.min.y) || lt(this.max.y, aabb.min.y)
            || lt(aabb.max.z, this.min.z) || lt(this.max.z, aabb.min.z));
    }
    intersectsAABB(aabb) {
        assertInst(AABB, aabb);
        return !(this.min.x >= aabb.max.x || this.max.x <= aabb.min.x
            || this.min.y >= aabb.max.y || this.max.y <= aabb.min.y
            || this.min.z >= aabb.max.z || this.max.z <= aabb.min.z);
    }
    intersectsAABB2d(aabb) {
        assertInst(AABB, aabb);
        return !(this.min.x >= aabb.max.x || this.max.x <= aabb.min.x
            || this.min.y >= aabb.max.y || this.max.y <= aabb.min.y);
    }
    containsPoint(p) {
        assertVectors(p);
        return this.min.x <= p.x && this.min.y <= p.y && this.min.z <= p.z
            && this.max.x >= p.x && this.max.y >= p.y && this.max.z >= p.z;
    }
    containsSphere(center, radius) {
        assertVectors(center);
        assertNumbers(radius);
        return this.distanceToPoint(center) > radius;
    }
    intersectsSphere(center, radius) {
        assertVectors(center);
        assertNumbers(radius);
        return this.distanceToPoint(center) <= radius;
    }
    distanceToPoint(p) {
        assertVectors(p);
        const x = p.x, y = p.y, z = p.z;
        const min = this.min, max = this.max;
        if (this.containsPoint(p)) {
            return Math.max(min.x - x, x - max.x, min.y - y, y - max.y, min.z - z, z - max.z);
        }
        return p.distanceTo(new V3(clamp(x, min.x, max.x), clamp(y, min.y, max.y), clamp(z, min.z, max.z)));
    }
    containsAABB(aabb) {
        assertInst(AABB, aabb);
        return this.containsPoint(aabb.min) && this.containsPoint(aabb.max);
    }
    likeAABB(aabb) {
        assertInst(AABB, aabb);
        return this.min.like(aabb.min) && this.max.like(aabb.max);
    }
    intersectsLine(line) {
        assertVectors(line.anchor, line.dir1);
        const dir = line.dir1.map(el => el || Number.MIN_VALUE);
        const minTs = (this.min.minus(line.anchor)).divv(dir);
        const maxTs = (this.max.minus(line.anchor)).divv(dir);
        const tMin = minTs.min(maxTs).maxElement(), tMax = minTs.max(maxTs).minElement();
        return tMin <= tMax && !(tMax < line.tMin || line.tMax < tMin);
    }
    hasVolume() {
        return this.min.x <= this.max.x && this.min.y <= this.max.y && this.min.z <= this.max.z;
    }
    volume() {
        if (!this.hasVolume()) {
            return -1;
        }
        const v = this.max.minus(this.min);
        return v.x * v.y * v.z;
    }
    size() {
        return this.max.minus(this.min);
    }
    getCenter() {
        return this.min.plus(this.max).div(2);
    }
    transform(m4) {
        assertInst(M4, m4);
        assert(m4.isAxisAligned());
        const aabb = new AABB();
        aabb.addPoint(m4.transformPoint(this.min));
        aabb.addPoint(m4.transformPoint(this.max));
        return aabb;
    }
    ofTransformed(m4) {
        assertInst(M4, m4);
        const aabb = new AABB();
        aabb.addPoints(m4.transformedPoints(this.corners()));
        return aabb;
    }
    corners() {
        const min = this.min, max = this.max;
        return [
            min,
            new V3(min.x, min.y, max.z),
            new V3(min.x, max.y, min.z),
            new V3(min.x, max.y, max.z),
            new V3(max.x, min.y, min.z),
            new V3(max.x, min.y, max.z),
            new V3(max.x, max.y, min.z),
            max,
        ];
    }
    toString() {
        return callsce('new AABB', this.min, this.max);
    }
    toSource() {
        return this.toString();
    }
}
//# sourceMappingURL=bundle.module.js.map


var ts3dutils = Object.freeze({
	V3: V3,
	V: V,
	M4: M4,
	Matrix: Matrix,
	Vector: Vector,
	P3YZ: P3YZ,
	P3ZX: P3ZX,
	P3XY: P3XY,
	Transformable: Transformable,
	toSource: toSource,
	TAU: TAU,
	NLA_DEBUG: NLA_DEBUG,
	NLA_PRECISION: NLA_PRECISION,
	disableConsole: disableConsole,
	enableConsole: enableConsole,
	hasConstructor: hasConstructor,
	getIntervals: getIntervals,
	assertVectors: assertVectors,
	assertInst: assertInst,
	assertNumbers: assertNumbers,
	assert: assert,
	assertNever: assertNever,
	assertf: assertf,
	lerp: lerp,
	eq0: eq0,
	eq: eq,
	lt: lt,
	gt: gt,
	le: le,
	ge: ge,
	eqAngle: eqAngle,
	zeroAngle: zeroAngle,
	snap: snap,
	snap2: snap2,
	snapEPS: snapEPS,
	snap0: snap0,
	canonAngle: canonAngle,
	eq02: eq02,
	eq2: eq2,
	round10: round10,
	floor10: floor10,
	ceil10: ceil10,
	GOLDEN_RATIO: GOLDEN_RATIO,
	mod: mod,
	arraySwap: arraySwap,
	arrayCopy: arrayCopy,
	clamp: clamp,
	between: between,
	fuzzyBetween: fuzzyBetween,
	mapPush: mapPush,
	arrayCopyStep: arrayCopyStep,
	arrayCopyBlocks: arrayCopyBlocks,
	arrayRange: arrayRange,
	arrayFromFunction: arrayFromFunction,
	fuzzyUniques: fuzzyUniques,
	fuzzyUniquesF: fuzzyUniquesF,
	addOwnProperties: addOwnProperties,
	defaultRoundFunction: defaultRoundFunction,
	forceFinite: forceFinite,
	MINUS: MINUS,
	floatHashCode: floatHashCode,
	combinations: combinations,
	arithmeticGeometricMean: arithmeticGeometricMean,
	EllipticF: EllipticF,
	EllipticE: EllipticE,
	DEG: DEG,
	rad2deg: rad2deg,
	numberToStr: numberToStr,
	time: time,
	equals: equals,
	hashCode: hashCode,
	SCE: SCE,
	STR: STR,
	isCCW: isCCW,
	doubleSignedArea: doubleSignedArea,
	pqFormula: pqFormula,
	solveCubicReal2: solveCubicReal2,
	checkDerivate: checkDerivate,
	getRoots: getRoots,
	bisect: bisect,
	newtonIterate: newtonIterate,
	newtonIterate1d: newtonIterate1d,
	newtonIterateWithDerivative: newtonIterateWithDerivative,
	newtonIterateSmart: newtonIterateSmart,
	newtonIterate2d: newtonIterate2d,
	newtonIterate2dWithDerivatives: newtonIterate2dWithDerivatives,
	gaussLegendre24Xs: gaussLegendre24Xs,
	gaussLegendre24Weights: gaussLegendre24Weights,
	gaussLegendreQuadrature24: gaussLegendreQuadrature24,
	glq24_11: glq24_11,
	glqInSteps: glqInSteps,
	midpointRuleQuadrature: midpointRuleQuadrature,
	callsce: callsce,
	AABB: AABB
});

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter$1(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

var chroma$1 = createCommonjsModule(function (module, exports) {
/**
 * @license
 *
 * chroma.js - JavaScript library for color conversions
 * 
 * Copyright (c) 2011-2017, Gregor Aisch
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * 3. The name Gregor Aisch may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

(function() {
  var Color, DEG2RAD, LAB_CONSTANTS, PI, PITHIRD, RAD2DEG, TWOPI, _average_lrgb, _guess_formats, _guess_formats_sorted, _input, _interpolators, abs, atan2, bezier, blend, blend_f, brewer, burn, chroma, clip_rgb, cmyk2rgb, colors, cos, css2rgb, darken, dodge, each, floor, hcg2rgb, hex2rgb, hsi2rgb, hsl2css, hsl2rgb, hsv2rgb, interpolate, interpolate_hsx, interpolate_lab, interpolate_lrgb, interpolate_num, interpolate_rgb, lab2lch, lab2rgb, lab_xyz, lch2lab, lch2rgb, lighten, limit, log, luminance_x, m, max, multiply, normal, num2rgb, overlay, pow, rgb2cmyk, rgb2css, rgb2hcg, rgb2hex, rgb2hsi, rgb2hsl, rgb2hsv, rgb2lab, rgb2lch, rgb2luminance, rgb2num, rgb2temperature, rgb2xyz, rgb_xyz, rnd, root, round, screen, sin, sqrt, temperature2rgb, type, unpack, w3cx11, xyz_lab, xyz_rgb,
    slice = [].slice;

  type = (function() {

    /*
    for browser-safe type checking+
    ported from jQuery's $.type
     */
    var classToType, len, name, o, ref;
    classToType = {};
    ref = "Boolean Number String Function Array Date RegExp Undefined Null".split(" ");
    for (o = 0, len = ref.length; o < len; o++) {
      name = ref[o];
      classToType["[object " + name + "]"] = name.toLowerCase();
    }
    return function(obj) {
      var strType;
      strType = Object.prototype.toString.call(obj);
      return classToType[strType] || "object";
    };
  })();

  limit = function(x, min, max) {
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = 1;
    }
    if (x < min) {
      x = min;
    }
    if (x > max) {
      x = max;
    }
    return x;
  };

  unpack = function(args) {
    if (args.length >= 3) {
      return [].slice.call(args);
    } else {
      return args[0];
    }
  };

  clip_rgb = function(rgb) {
    var i, o;
    rgb._clipped = false;
    rgb._unclipped = rgb.slice(0);
    for (i = o = 0; o < 3; i = ++o) {
      if (i < 3) {
        if (rgb[i] < 0 || rgb[i] > 255) {
          rgb._clipped = true;
        }
        if (rgb[i] < 0) {
          rgb[i] = 0;
        }
        if (rgb[i] > 255) {
          rgb[i] = 255;
        }
      } else if (i === 3) {
        if (rgb[i] < 0) {
          rgb[i] = 0;
        }
        if (rgb[i] > 1) {
          rgb[i] = 1;
        }
      }
    }
    if (!rgb._clipped) {
      delete rgb._unclipped;
    }
    return rgb;
  };

  PI = Math.PI, round = Math.round, cos = Math.cos, floor = Math.floor, pow = Math.pow, log = Math.log, sin = Math.sin, sqrt = Math.sqrt, atan2 = Math.atan2, max = Math.max, abs = Math.abs;

  TWOPI = PI * 2;

  PITHIRD = PI / 3;

  DEG2RAD = PI / 180;

  RAD2DEG = 180 / PI;

  chroma = function() {
    if (arguments[0] instanceof Color) {
      return arguments[0];
    }
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, arguments, function(){});
  };

  chroma["default"] = chroma;

  _interpolators = [];

  if (('object' !== "undefined" && module !== null) && (module.exports != null)) {
    module.exports = chroma;
  }

  if (typeof undefined === 'function' && undefined.amd) {
    undefined([], function() {
      return chroma;
    });
  } else {
    root = 'object' !== "undefined" && exports !== null ? exports : this;
    root.chroma = chroma;
  }

  chroma.version = '1.3.5';

  _input = {};

  _guess_formats = [];

  _guess_formats_sorted = false;

  Color = (function() {
    function Color() {
      var arg, args, chk, len, len1, me, mode, o, w;
      me = this;
      args = [];
      for (o = 0, len = arguments.length; o < len; o++) {
        arg = arguments[o];
        if (arg != null) {
          args.push(arg);
        }
      }
      if (args.length > 1) {
        mode = args[args.length - 1];
      }
      if (_input[mode] != null) {
        me._rgb = clip_rgb(_input[mode](unpack(args.slice(0, -1))));
      } else {
        if (!_guess_formats_sorted) {
          _guess_formats = _guess_formats.sort(function(a, b) {
            return b.p - a.p;
          });
          _guess_formats_sorted = true;
        }
        for (w = 0, len1 = _guess_formats.length; w < len1; w++) {
          chk = _guess_formats[w];
          mode = chk.test.apply(chk, args);
          if (mode) {
            break;
          }
        }
        if (mode) {
          me._rgb = clip_rgb(_input[mode].apply(_input, args));
        }
      }
      if (me._rgb == null) {
        console.warn('unknown format: ' + args);
      }
      if (me._rgb == null) {
        me._rgb = [0, 0, 0];
      }
      if (me._rgb.length === 3) {
        me._rgb.push(1);
      }
    }

    Color.prototype.toString = function() {
      return this.hex();
    };

    Color.prototype.clone = function() {
      return chroma(me._rgb);
    };

    return Color;

  })();

  chroma._input = _input;


  /**
  	ColorBrewer colors for chroma.js
  
  	Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The 
  	Pennsylvania State University.
  
  	Licensed under the Apache License, Version 2.0 (the "License"); 
  	you may not use this file except in compliance with the License.
  	You may obtain a copy of the License at	
  	http://www.apache.org/licenses/LICENSE-2.0
  
  	Unless required by applicable law or agreed to in writing, software distributed
  	under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
  	CONDITIONS OF ANY KIND, either express or implied. See the License for the
  	specific language governing permissions and limitations under the License.
  
      @preserve
   */

  chroma.brewer = brewer = {
    OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],
    PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],
    BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],
    Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],
    BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],
    YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],
    YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],
    Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],
    RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],
    Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],
    YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],
    Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],
    GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],
    Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],
    YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],
    PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],
    Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],
    PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],
    Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],
    Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],
    RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],
    RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],
    PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],
    PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],
    RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],
    BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],
    RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],
    PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],
    Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],
    Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],
    Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],
    Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],
    Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],
    Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],
    Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],
    Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2']
  };

  (function() {
    var key, results;
    results = [];
    for (key in brewer) {
      results.push(brewer[key.toLowerCase()] = brewer[key]);
    }
    return results;
  })();


  /**
  	X11 color names
  
  	http://www.w3.org/TR/css3-color/#svg-color
   */

  w3cx11 = {
    aliceblue: '#f0f8ff',
    antiquewhite: '#faebd7',
    aqua: '#00ffff',
    aquamarine: '#7fffd4',
    azure: '#f0ffff',
    beige: '#f5f5dc',
    bisque: '#ffe4c4',
    black: '#000000',
    blanchedalmond: '#ffebcd',
    blue: '#0000ff',
    blueviolet: '#8a2be2',
    brown: '#a52a2a',
    burlywood: '#deb887',
    cadetblue: '#5f9ea0',
    chartreuse: '#7fff00',
    chocolate: '#d2691e',
    coral: '#ff7f50',
    cornflower: '#6495ed',
    cornflowerblue: '#6495ed',
    cornsilk: '#fff8dc',
    crimson: '#dc143c',
    cyan: '#00ffff',
    darkblue: '#00008b',
    darkcyan: '#008b8b',
    darkgoldenrod: '#b8860b',
    darkgray: '#a9a9a9',
    darkgreen: '#006400',
    darkgrey: '#a9a9a9',
    darkkhaki: '#bdb76b',
    darkmagenta: '#8b008b',
    darkolivegreen: '#556b2f',
    darkorange: '#ff8c00',
    darkorchid: '#9932cc',
    darkred: '#8b0000',
    darksalmon: '#e9967a',
    darkseagreen: '#8fbc8f',
    darkslateblue: '#483d8b',
    darkslategray: '#2f4f4f',
    darkslategrey: '#2f4f4f',
    darkturquoise: '#00ced1',
    darkviolet: '#9400d3',
    deeppink: '#ff1493',
    deepskyblue: '#00bfff',
    dimgray: '#696969',
    dimgrey: '#696969',
    dodgerblue: '#1e90ff',
    firebrick: '#b22222',
    floralwhite: '#fffaf0',
    forestgreen: '#228b22',
    fuchsia: '#ff00ff',
    gainsboro: '#dcdcdc',
    ghostwhite: '#f8f8ff',
    gold: '#ffd700',
    goldenrod: '#daa520',
    gray: '#808080',
    green: '#008000',
    greenyellow: '#adff2f',
    grey: '#808080',
    honeydew: '#f0fff0',
    hotpink: '#ff69b4',
    indianred: '#cd5c5c',
    indigo: '#4b0082',
    ivory: '#fffff0',
    khaki: '#f0e68c',
    laserlemon: '#ffff54',
    lavender: '#e6e6fa',
    lavenderblush: '#fff0f5',
    lawngreen: '#7cfc00',
    lemonchiffon: '#fffacd',
    lightblue: '#add8e6',
    lightcoral: '#f08080',
    lightcyan: '#e0ffff',
    lightgoldenrod: '#fafad2',
    lightgoldenrodyellow: '#fafad2',
    lightgray: '#d3d3d3',
    lightgreen: '#90ee90',
    lightgrey: '#d3d3d3',
    lightpink: '#ffb6c1',
    lightsalmon: '#ffa07a',
    lightseagreen: '#20b2aa',
    lightskyblue: '#87cefa',
    lightslategray: '#778899',
    lightslategrey: '#778899',
    lightsteelblue: '#b0c4de',
    lightyellow: '#ffffe0',
    lime: '#00ff00',
    limegreen: '#32cd32',
    linen: '#faf0e6',
    magenta: '#ff00ff',
    maroon: '#800000',
    maroon2: '#7f0000',
    maroon3: '#b03060',
    mediumaquamarine: '#66cdaa',
    mediumblue: '#0000cd',
    mediumorchid: '#ba55d3',
    mediumpurple: '#9370db',
    mediumseagreen: '#3cb371',
    mediumslateblue: '#7b68ee',
    mediumspringgreen: '#00fa9a',
    mediumturquoise: '#48d1cc',
    mediumvioletred: '#c71585',
    midnightblue: '#191970',
    mintcream: '#f5fffa',
    mistyrose: '#ffe4e1',
    moccasin: '#ffe4b5',
    navajowhite: '#ffdead',
    navy: '#000080',
    oldlace: '#fdf5e6',
    olive: '#808000',
    olivedrab: '#6b8e23',
    orange: '#ffa500',
    orangered: '#ff4500',
    orchid: '#da70d6',
    palegoldenrod: '#eee8aa',
    palegreen: '#98fb98',
    paleturquoise: '#afeeee',
    palevioletred: '#db7093',
    papayawhip: '#ffefd5',
    peachpuff: '#ffdab9',
    peru: '#cd853f',
    pink: '#ffc0cb',
    plum: '#dda0dd',
    powderblue: '#b0e0e6',
    purple: '#800080',
    purple2: '#7f007f',
    purple3: '#a020f0',
    rebeccapurple: '#663399',
    red: '#ff0000',
    rosybrown: '#bc8f8f',
    royalblue: '#4169e1',
    saddlebrown: '#8b4513',
    salmon: '#fa8072',
    sandybrown: '#f4a460',
    seagreen: '#2e8b57',
    seashell: '#fff5ee',
    sienna: '#a0522d',
    silver: '#c0c0c0',
    skyblue: '#87ceeb',
    slateblue: '#6a5acd',
    slategray: '#708090',
    slategrey: '#708090',
    snow: '#fffafa',
    springgreen: '#00ff7f',
    steelblue: '#4682b4',
    tan: '#d2b48c',
    teal: '#008080',
    thistle: '#d8bfd8',
    tomato: '#ff6347',
    turquoise: '#40e0d0',
    violet: '#ee82ee',
    wheat: '#f5deb3',
    white: '#ffffff',
    whitesmoke: '#f5f5f5',
    yellow: '#ffff00',
    yellowgreen: '#9acd32'
  };

  chroma.colors = colors = w3cx11;

  lab2rgb = function() {
    var a, args, b, g, l, r, x, y, z;
    args = unpack(arguments);
    l = args[0], a = args[1], b = args[2];
    y = (l + 16) / 116;
    x = isNaN(a) ? y : y + a / 500;
    z = isNaN(b) ? y : y - b / 200;
    y = LAB_CONSTANTS.Yn * lab_xyz(y);
    x = LAB_CONSTANTS.Xn * lab_xyz(x);
    z = LAB_CONSTANTS.Zn * lab_xyz(z);
    r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);
    g = xyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z);
    b = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);
    return [r, g, b, args.length > 3 ? args[3] : 1];
  };

  xyz_rgb = function(r) {
    return 255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow(r, 1 / 2.4) - 0.055);
  };

  lab_xyz = function(t) {
    if (t > LAB_CONSTANTS.t1) {
      return t * t * t;
    } else {
      return LAB_CONSTANTS.t2 * (t - LAB_CONSTANTS.t0);
    }
  };

  LAB_CONSTANTS = {
    Kn: 18,
    Xn: 0.950470,
    Yn: 1,
    Zn: 1.088830,
    t0: 0.137931034,
    t1: 0.206896552,
    t2: 0.12841855,
    t3: 0.008856452
  };

  rgb2lab = function() {
    var b, g, r, ref, ref1, x, y, z;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    ref1 = rgb2xyz(r, g, b), x = ref1[0], y = ref1[1], z = ref1[2];
    return [116 * y - 16, 500 * (x - y), 200 * (y - z)];
  };

  rgb_xyz = function(r) {
    if ((r /= 255) <= 0.04045) {
      return r / 12.92;
    } else {
      return pow((r + 0.055) / 1.055, 2.4);
    }
  };

  xyz_lab = function(t) {
    if (t > LAB_CONSTANTS.t3) {
      return pow(t, 1 / 3);
    } else {
      return t / LAB_CONSTANTS.t2 + LAB_CONSTANTS.t0;
    }
  };

  rgb2xyz = function() {
    var b, g, r, ref, x, y, z;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    r = rgb_xyz(r);
    g = rgb_xyz(g);
    b = rgb_xyz(b);
    x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / LAB_CONSTANTS.Xn);
    y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / LAB_CONSTANTS.Yn);
    z = xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / LAB_CONSTANTS.Zn);
    return [x, y, z];
  };

  chroma.lab = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['lab']), function(){});
  };

  _input.lab = lab2rgb;

  Color.prototype.lab = function() {
    return rgb2lab(this._rgb);
  };

  bezier = function(colors) {
    var I, I0, I1, c, lab0, lab1, lab2, lab3, ref, ref1, ref2;
    colors = (function() {
      var len, o, results;
      results = [];
      for (o = 0, len = colors.length; o < len; o++) {
        c = colors[o];
        results.push(chroma(c));
      }
      return results;
    })();
    if (colors.length === 2) {
      ref = (function() {
        var len, o, results;
        results = [];
        for (o = 0, len = colors.length; o < len; o++) {
          c = colors[o];
          results.push(c.lab());
        }
        return results;
      })(), lab0 = ref[0], lab1 = ref[1];
      I = function(t) {
        var i, lab;
        lab = (function() {
          var o, results;
          results = [];
          for (i = o = 0; o <= 2; i = ++o) {
            results.push(lab0[i] + t * (lab1[i] - lab0[i]));
          }
          return results;
        })();
        return chroma.lab.apply(chroma, lab);
      };
    } else if (colors.length === 3) {
      ref1 = (function() {
        var len, o, results;
        results = [];
        for (o = 0, len = colors.length; o < len; o++) {
          c = colors[o];
          results.push(c.lab());
        }
        return results;
      })(), lab0 = ref1[0], lab1 = ref1[1], lab2 = ref1[2];
      I = function(t) {
        var i, lab;
        lab = (function() {
          var o, results;
          results = [];
          for (i = o = 0; o <= 2; i = ++o) {
            results.push((1 - t) * (1 - t) * lab0[i] + 2 * (1 - t) * t * lab1[i] + t * t * lab2[i]);
          }
          return results;
        })();
        return chroma.lab.apply(chroma, lab);
      };
    } else if (colors.length === 4) {
      ref2 = (function() {
        var len, o, results;
        results = [];
        for (o = 0, len = colors.length; o < len; o++) {
          c = colors[o];
          results.push(c.lab());
        }
        return results;
      })(), lab0 = ref2[0], lab1 = ref2[1], lab2 = ref2[2], lab3 = ref2[3];
      I = function(t) {
        var i, lab;
        lab = (function() {
          var o, results;
          results = [];
          for (i = o = 0; o <= 2; i = ++o) {
            results.push((1 - t) * (1 - t) * (1 - t) * lab0[i] + 3 * (1 - t) * (1 - t) * t * lab1[i] + 3 * (1 - t) * t * t * lab2[i] + t * t * t * lab3[i]);
          }
          return results;
        })();
        return chroma.lab.apply(chroma, lab);
      };
    } else if (colors.length === 5) {
      I0 = bezier(colors.slice(0, 3));
      I1 = bezier(colors.slice(2, 5));
      I = function(t) {
        if (t < 0.5) {
          return I0(t * 2);
        } else {
          return I1((t - 0.5) * 2);
        }
      };
    }
    return I;
  };

  chroma.bezier = function(colors) {
    var f;
    f = bezier(colors);
    f.scale = function() {
      return chroma.scale(f);
    };
    return f;
  };


  /*
      chroma.js
  
      Copyright (c) 2011-2013, Gregor Aisch
      All rights reserved.
  
      Redistribution and use in source and binary forms, with or without
      modification, are permitted provided that the following conditions are met:
  
      * Redistributions of source code must retain the above copyright notice, this
        list of conditions and the following disclaimer.
  
      * Redistributions in binary form must reproduce the above copyright notice,
        this list of conditions and the following disclaimer in the documentation
        and/or other materials provided with the distribution.
  
      * The name Gregor Aisch may not be used to endorse or promote products
        derived from this software without specific prior written permission.
  
      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
      DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
      INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
      BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
      OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
      NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
      EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  
      @source: https://github.com/gka/chroma.js
   */

  chroma.cubehelix = function(start, rotations, hue, gamma, lightness) {
    var dh, dl, f;
    if (start == null) {
      start = 300;
    }
    if (rotations == null) {
      rotations = -1.5;
    }
    if (hue == null) {
      hue = 1;
    }
    if (gamma == null) {
      gamma = 1;
    }
    if (lightness == null) {
      lightness = [0, 1];
    }
    dh = 0;
    if (type(lightness) === 'array') {
      dl = lightness[1] - lightness[0];
    } else {
      dl = 0;
      lightness = [lightness, lightness];
    }
    f = function(fract) {
      var a, amp, b, cos_a, g, h, l, r, sin_a;
      a = TWOPI * ((start + 120) / 360 + rotations * fract);
      l = pow(lightness[0] + dl * fract, gamma);
      h = dh !== 0 ? hue[0] + fract * dh : hue;
      amp = h * l * (1 - l) / 2;
      cos_a = cos(a);
      sin_a = sin(a);
      r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);
      g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);
      b = l + amp * (+1.97294 * cos_a);
      return chroma(clip_rgb([r * 255, g * 255, b * 255]));
    };
    f.start = function(s) {
      if (s == null) {
        return start;
      }
      start = s;
      return f;
    };
    f.rotations = function(r) {
      if (r == null) {
        return rotations;
      }
      rotations = r;
      return f;
    };
    f.gamma = function(g) {
      if (g == null) {
        return gamma;
      }
      gamma = g;
      return f;
    };
    f.hue = function(h) {
      if (h == null) {
        return hue;
      }
      hue = h;
      if (type(hue) === 'array') {
        dh = hue[1] - hue[0];
        if (dh === 0) {
          hue = hue[1];
        }
      } else {
        dh = 0;
      }
      return f;
    };
    f.lightness = function(h) {
      if (h == null) {
        return lightness;
      }
      if (type(h) === 'array') {
        lightness = h;
        dl = h[1] - h[0];
      } else {
        lightness = [h, h];
        dl = 0;
      }
      return f;
    };
    f.scale = function() {
      return chroma.scale(f);
    };
    f.hue(hue);
    return f;
  };

  chroma.random = function() {
    var code, digits, i, o;
    digits = '0123456789abcdef';
    code = '#';
    for (i = o = 0; o < 6; i = ++o) {
      code += digits.charAt(floor(Math.random() * 16));
    }
    return new Color(code);
  };

  _interpolators = [];

  interpolate = function(col1, col2, f, m) {
    var interpol, len, o, res;
    if (f == null) {
      f = 0.5;
    }
    if (m == null) {
      m = 'rgb';
    }

    /*
    interpolates between colors
    f = 0 --> me
    f = 1 --> col
     */
    if (type(col1) !== 'object') {
      col1 = chroma(col1);
    }
    if (type(col2) !== 'object') {
      col2 = chroma(col2);
    }
    for (o = 0, len = _interpolators.length; o < len; o++) {
      interpol = _interpolators[o];
      if (m === interpol[0]) {
        res = interpol[1](col1, col2, f, m);
        break;
      }
    }
    if (res == null) {
      throw "color mode " + m + " is not supported";
    }
    return res.alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));
  };

  chroma.interpolate = interpolate;

  Color.prototype.interpolate = function(col2, f, m) {
    return interpolate(this, col2, f, m);
  };

  chroma.mix = interpolate;

  Color.prototype.mix = Color.prototype.interpolate;

  _input.rgb = function() {
    var k, ref, results, v;
    ref = unpack(arguments);
    results = [];
    for (k in ref) {
      v = ref[k];
      results.push(v);
    }
    return results;
  };

  chroma.rgb = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['rgb']), function(){});
  };

  Color.prototype.rgb = function(round) {
    if (round == null) {
      round = true;
    }
    if (round) {
      return this._rgb.map(Math.round).slice(0, 3);
    } else {
      return this._rgb.slice(0, 3);
    }
  };

  Color.prototype.rgba = function(round) {
    if (round == null) {
      round = true;
    }
    if (!round) {
      return this._rgb.slice(0);
    }
    return [Math.round(this._rgb[0]), Math.round(this._rgb[1]), Math.round(this._rgb[2]), this._rgb[3]];
  };

  _guess_formats.push({
    p: 3,
    test: function(n) {
      var a;
      a = unpack(arguments);
      if (type(a) === 'array' && a.length === 3) {
        return 'rgb';
      }
      if (a.length === 4 && type(a[3]) === "number" && a[3] >= 0 && a[3] <= 1) {
        return 'rgb';
      }
    }
  });

  _input.lrgb = _input.rgb;

  interpolate_lrgb = function(col1, col2, f, m) {
    var xyz0, xyz1;
    xyz0 = col1._rgb;
    xyz1 = col2._rgb;
    return new Color(sqrt(pow(xyz0[0], 2) * (1 - f) + pow(xyz1[0], 2) * f), sqrt(pow(xyz0[1], 2) * (1 - f) + pow(xyz1[1], 2) * f), sqrt(pow(xyz0[2], 2) * (1 - f) + pow(xyz1[2], 2) * f), m);
  };

  _average_lrgb = function(colors) {
    var col, f, len, o, rgb, xyz;
    f = 1 / colors.length;
    xyz = [0, 0, 0, 0];
    for (o = 0, len = colors.length; o < len; o++) {
      col = colors[o];
      rgb = col._rgb;
      xyz[0] += pow(rgb[0], 2) * f;
      xyz[1] += pow(rgb[1], 2) * f;
      xyz[2] += pow(rgb[2], 2) * f;
      xyz[3] += rgb[3] * f;
    }
    xyz[0] = sqrt(xyz[0]);
    xyz[1] = sqrt(xyz[1]);
    xyz[2] = sqrt(xyz[2]);
    return new Color(xyz);
  };

  _interpolators.push(['lrgb', interpolate_lrgb]);

  chroma.average = function(colors, mode) {
    var A, alpha, c, cnt, dx, dy, first, i, l, len, o, xyz, xyz2;
    if (mode == null) {
      mode = 'rgb';
    }
    l = colors.length;
    colors = colors.map(function(c) {
      return chroma(c);
    });
    first = colors.splice(0, 1)[0];
    if (mode === 'lrgb') {
      return _average_lrgb(colors);
    }
    xyz = first.get(mode);
    cnt = [];
    dx = 0;
    dy = 0;
    for (i in xyz) {
      xyz[i] = xyz[i] || 0;
      cnt.push(!isNaN(xyz[i]) ? 1 : 0);
      if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {
        A = xyz[i] / 180 * PI;
        dx += cos(A);
        dy += sin(A);
      }
    }
    alpha = first.alpha();
    for (o = 0, len = colors.length; o < len; o++) {
      c = colors[o];
      xyz2 = c.get(mode);
      alpha += c.alpha();
      for (i in xyz) {
        if (!isNaN(xyz2[i])) {
          xyz[i] += xyz2[i];
          cnt[i] += 1;
          if (mode.charAt(i) === 'h') {
            A = xyz[i] / 180 * PI;
            dx += cos(A);
            dy += sin(A);
          }
        }
      }
    }
    for (i in xyz) {
      xyz[i] = xyz[i] / cnt[i];
      if (mode.charAt(i) === 'h') {
        A = atan2(dy / cnt[i], dx / cnt[i]) / PI * 180;
        while (A < 0) {
          A += 360;
        }
        while (A >= 360) {
          A -= 360;
        }
        xyz[i] = A;
      }
    }
    return chroma(xyz, mode).alpha(alpha / l);
  };

  hex2rgb = function(hex) {
    var a, b, g, r, rgb, u;
    if (hex.match(/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)) {
      if (hex.length === 4 || hex.length === 7) {
        hex = hex.substr(1);
      }
      if (hex.length === 3) {
        hex = hex.split("");
        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
      }
      u = parseInt(hex, 16);
      r = u >> 16;
      g = u >> 8 & 0xFF;
      b = u & 0xFF;
      return [r, g, b, 1];
    }
    if (hex.match(/^#?([A-Fa-f0-9]{8})$/)) {
      if (hex.length === 9) {
        hex = hex.substr(1);
      }
      u = parseInt(hex, 16);
      r = u >> 24 & 0xFF;
      g = u >> 16 & 0xFF;
      b = u >> 8 & 0xFF;
      a = round((u & 0xFF) / 0xFF * 100) / 100;
      return [r, g, b, a];
    }
    if ((_input.css != null) && (rgb = _input.css(hex))) {
      return rgb;
    }
    throw "unknown color: " + hex;
  };

  rgb2hex = function(channels, mode) {
    var a, b, g, hxa, r, str, u;
    if (mode == null) {
      mode = 'rgb';
    }
    r = channels[0], g = channels[1], b = channels[2], a = channels[3];
    r = Math.round(r);
    g = Math.round(g);
    b = Math.round(b);
    u = r << 16 | g << 8 | b;
    str = "000000" + u.toString(16);
    str = str.substr(str.length - 6);
    hxa = '0' + round(a * 255).toString(16);
    hxa = hxa.substr(hxa.length - 2);
    return "#" + (function() {
      switch (mode.toLowerCase()) {
        case 'rgba':
          return str + hxa;
        case 'argb':
          return hxa + str;
        default:
          return str;
      }
    })();
  };

  _input.hex = function(h) {
    return hex2rgb(h);
  };

  chroma.hex = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['hex']), function(){});
  };

  Color.prototype.hex = function(mode) {
    if (mode == null) {
      mode = 'rgb';
    }
    return rgb2hex(this._rgb, mode);
  };

  _guess_formats.push({
    p: 4,
    test: function(n) {
      if (arguments.length === 1 && type(n) === "string") {
        return 'hex';
      }
    }
  });

  hsl2rgb = function() {
    var args, b, c, g, h, i, l, o, r, ref, s, t1, t2, t3;
    args = unpack(arguments);
    h = args[0], s = args[1], l = args[2];
    if (s === 0) {
      r = g = b = l * 255;
    } else {
      t3 = [0, 0, 0];
      c = [0, 0, 0];
      t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;
      t1 = 2 * l - t2;
      h /= 360;
      t3[0] = h + 1 / 3;
      t3[1] = h;
      t3[2] = h - 1 / 3;
      for (i = o = 0; o <= 2; i = ++o) {
        if (t3[i] < 0) {
          t3[i] += 1;
        }
        if (t3[i] > 1) {
          t3[i] -= 1;
        }
        if (6 * t3[i] < 1) {
          c[i] = t1 + (t2 - t1) * 6 * t3[i];
        } else if (2 * t3[i] < 1) {
          c[i] = t2;
        } else if (3 * t3[i] < 2) {
          c[i] = t1 + (t2 - t1) * ((2 / 3) - t3[i]) * 6;
        } else {
          c[i] = t1;
        }
      }
      ref = [round(c[0] * 255), round(c[1] * 255), round(c[2] * 255)], r = ref[0], g = ref[1], b = ref[2];
    }
    if (args.length > 3) {
      return [r, g, b, args[3]];
    } else {
      return [r, g, b];
    }
  };

  rgb2hsl = function(r, g, b) {
    var h, l, min, ref, s;
    if (r !== void 0 && r.length >= 3) {
      ref = r, r = ref[0], g = ref[1], b = ref[2];
    }
    r /= 255;
    g /= 255;
    b /= 255;
    min = Math.min(r, g, b);
    max = Math.max(r, g, b);
    l = (max + min) / 2;
    if (max === min) {
      s = 0;
      h = Number.NaN;
    } else {
      s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);
    }
    if (r === max) {
      h = (g - b) / (max - min);
    } else if (g === max) {
      h = 2 + (b - r) / (max - min);
    } else if (b === max) {
      h = 4 + (r - g) / (max - min);
    }
    h *= 60;
    if (h < 0) {
      h += 360;
    }
    return [h, s, l];
  };

  chroma.hsl = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['hsl']), function(){});
  };

  _input.hsl = hsl2rgb;

  Color.prototype.hsl = function() {
    return rgb2hsl(this._rgb);
  };

  hsv2rgb = function() {
    var args, b, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, s, t, v;
    args = unpack(arguments);
    h = args[0], s = args[1], v = args[2];
    v *= 255;
    if (s === 0) {
      r = g = b = v;
    } else {
      if (h === 360) {
        h = 0;
      }
      if (h > 360) {
        h -= 360;
      }
      if (h < 0) {
        h += 360;
      }
      h /= 60;
      i = floor(h);
      f = h - i;
      p = v * (1 - s);
      q = v * (1 - s * f);
      t = v * (1 - s * (1 - f));
      switch (i) {
        case 0:
          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];
          break;
        case 1:
          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];
          break;
        case 2:
          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];
          break;
        case 3:
          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];
          break;
        case 4:
          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];
          break;
        case 5:
          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];
      }
    }
    return [r, g, b, args.length > 3 ? args[3] : 1];
  };

  rgb2hsv = function() {
    var b, delta, g, h, min, r, ref, s, v;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    min = Math.min(r, g, b);
    max = Math.max(r, g, b);
    delta = max - min;
    v = max / 255.0;
    if (max === 0) {
      h = Number.NaN;
      s = 0;
    } else {
      s = delta / max;
      if (r === max) {
        h = (g - b) / delta;
      }
      if (g === max) {
        h = 2 + (b - r) / delta;
      }
      if (b === max) {
        h = 4 + (r - g) / delta;
      }
      h *= 60;
      if (h < 0) {
        h += 360;
      }
    }
    return [h, s, v];
  };

  chroma.hsv = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['hsv']), function(){});
  };

  _input.hsv = hsv2rgb;

  Color.prototype.hsv = function() {
    return rgb2hsv(this._rgb);
  };

  num2rgb = function(num) {
    var b, g, r;
    if (type(num) === "number" && num >= 0 && num <= 0xFFFFFF) {
      r = num >> 16;
      g = (num >> 8) & 0xFF;
      b = num & 0xFF;
      return [r, g, b, 1];
    }
    console.warn("unknown num color: " + num);
    return [0, 0, 0, 1];
  };

  rgb2num = function() {
    var b, g, r, ref;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    return (r << 16) + (g << 8) + b;
  };

  chroma.num = function(num) {
    return new Color(num, 'num');
  };

  Color.prototype.num = function(mode) {
    if (mode == null) {
      mode = 'rgb';
    }
    return rgb2num(this._rgb, mode);
  };

  _input.num = num2rgb;

  _guess_formats.push({
    p: 1,
    test: function(n) {
      if (arguments.length === 1 && type(n) === "number" && n >= 0 && n <= 0xFFFFFF) {
        return 'num';
      }
    }
  });

  hcg2rgb = function() {
    var _c, _g, args, b, c, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, t, v;
    args = unpack(arguments);
    h = args[0], c = args[1], _g = args[2];
    c = c / 100;
    g = g / 100 * 255;
    _c = c * 255;
    if (c === 0) {
      r = g = b = _g;
    } else {
      if (h === 360) {
        h = 0;
      }
      if (h > 360) {
        h -= 360;
      }
      if (h < 0) {
        h += 360;
      }
      h /= 60;
      i = floor(h);
      f = h - i;
      p = _g * (1 - c);
      q = p + _c * (1 - f);
      t = p + _c * f;
      v = p + _c;
      switch (i) {
        case 0:
          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];
          break;
        case 1:
          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];
          break;
        case 2:
          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];
          break;
        case 3:
          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];
          break;
        case 4:
          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];
          break;
        case 5:
          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];
      }
    }
    return [r, g, b, args.length > 3 ? args[3] : 1];
  };

  rgb2hcg = function() {
    var _g, b, c, delta, g, h, min, r, ref;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    min = Math.min(r, g, b);
    max = Math.max(r, g, b);
    delta = max - min;
    c = delta * 100 / 255;
    _g = min / (255 - delta) * 100;
    if (delta === 0) {
      h = Number.NaN;
    } else {
      if (r === max) {
        h = (g - b) / delta;
      }
      if (g === max) {
        h = 2 + (b - r) / delta;
      }
      if (b === max) {
        h = 4 + (r - g) / delta;
      }
      h *= 60;
      if (h < 0) {
        h += 360;
      }
    }
    return [h, c, _g];
  };

  chroma.hcg = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['hcg']), function(){});
  };

  _input.hcg = hcg2rgb;

  Color.prototype.hcg = function() {
    return rgb2hcg(this._rgb);
  };

  css2rgb = function(css) {
    var aa, ab, hsl, i, m, o, rgb, w;
    css = css.toLowerCase();
    if ((chroma.colors != null) && chroma.colors[css]) {
      return hex2rgb(chroma.colors[css]);
    }
    if (m = css.match(/rgb\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*\)/)) {
      rgb = m.slice(1, 4);
      for (i = o = 0; o <= 2; i = ++o) {
        rgb[i] = +rgb[i];
      }
      rgb[3] = 1;
    } else if (m = css.match(/rgba\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*,\s*([01]|[01]?\.\d+)\)/)) {
      rgb = m.slice(1, 5);
      for (i = w = 0; w <= 3; i = ++w) {
        rgb[i] = +rgb[i];
      }
    } else if (m = css.match(/rgb\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
      rgb = m.slice(1, 4);
      for (i = aa = 0; aa <= 2; i = ++aa) {
        rgb[i] = round(rgb[i] * 2.55);
      }
      rgb[3] = 1;
    } else if (m = css.match(/rgba\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
      rgb = m.slice(1, 5);
      for (i = ab = 0; ab <= 2; i = ++ab) {
        rgb[i] = round(rgb[i] * 2.55);
      }
      rgb[3] = +rgb[3];
    } else if (m = css.match(/hsl\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
      hsl = m.slice(1, 4);
      hsl[1] *= 0.01;
      hsl[2] *= 0.01;
      rgb = hsl2rgb(hsl);
      rgb[3] = 1;
    } else if (m = css.match(/hsla\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
      hsl = m.slice(1, 4);
      hsl[1] *= 0.01;
      hsl[2] *= 0.01;
      rgb = hsl2rgb(hsl);
      rgb[3] = +m[4];
    }
    return rgb;
  };

  rgb2css = function(rgba) {
    var mode;
    mode = rgba[3] < 1 ? 'rgba' : 'rgb';
    if (mode === 'rgb') {
      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ')';
    } else if (mode === 'rgba') {
      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ',' + rgba[3] + ')';
    } else {

    }
  };

  rnd = function(a) {
    return round(a * 100) / 100;
  };

  hsl2css = function(hsl, alpha) {
    var mode;
    mode = alpha < 1 ? 'hsla' : 'hsl';
    hsl[0] = rnd(hsl[0] || 0);
    hsl[1] = rnd(hsl[1] * 100) + '%';
    hsl[2] = rnd(hsl[2] * 100) + '%';
    if (mode === 'hsla') {
      hsl[3] = alpha;
    }
    return mode + '(' + hsl.join(',') + ')';
  };

  _input.css = function(h) {
    return css2rgb(h);
  };

  chroma.css = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['css']), function(){});
  };

  Color.prototype.css = function(mode) {
    if (mode == null) {
      mode = 'rgb';
    }
    if (mode.slice(0, 3) === 'rgb') {
      return rgb2css(this._rgb);
    } else if (mode.slice(0, 3) === 'hsl') {
      return hsl2css(this.hsl(), this.alpha());
    }
  };

  _input.named = function(name) {
    return hex2rgb(w3cx11[name]);
  };

  _guess_formats.push({
    p: 5,
    test: function(n) {
      if (arguments.length === 1 && (w3cx11[n] != null)) {
        return 'named';
      }
    }
  });

  Color.prototype.name = function(n) {
    var h, k;
    if (arguments.length) {
      if (w3cx11[n]) {
        this._rgb = hex2rgb(w3cx11[n]);
      }
      this._rgb[3] = 1;
    }
    h = this.hex();
    for (k in w3cx11) {
      if (h === w3cx11[k]) {
        return k;
      }
    }
    return h;
  };

  lch2lab = function() {

    /*
    Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.
    These formulas were invented by David Dalrymple to obtain maximum contrast without going
    out of gamut if the parameters are in the range 0-1.
    
    A saturation multiplier was added by Gregor Aisch
     */
    var c, h, l, ref;
    ref = unpack(arguments), l = ref[0], c = ref[1], h = ref[2];
    h = h * DEG2RAD;
    return [l, cos(h) * c, sin(h) * c];
  };

  lch2rgb = function() {
    var L, a, args, b, c, g, h, l, r, ref, ref1;
    args = unpack(arguments);
    l = args[0], c = args[1], h = args[2];
    ref = lch2lab(l, c, h), L = ref[0], a = ref[1], b = ref[2];
    ref1 = lab2rgb(L, a, b), r = ref1[0], g = ref1[1], b = ref1[2];
    return [r, g, b, args.length > 3 ? args[3] : 1];
  };

  lab2lch = function() {
    var a, b, c, h, l, ref;
    ref = unpack(arguments), l = ref[0], a = ref[1], b = ref[2];
    c = sqrt(a * a + b * b);
    h = (atan2(b, a) * RAD2DEG + 360) % 360;
    if (round(c * 10000) === 0) {
      h = Number.NaN;
    }
    return [l, c, h];
  };

  rgb2lch = function() {
    var a, b, g, l, r, ref, ref1;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    ref1 = rgb2lab(r, g, b), l = ref1[0], a = ref1[1], b = ref1[2];
    return lab2lch(l, a, b);
  };

  chroma.lch = function() {
    var args;
    args = unpack(arguments);
    return new Color(args, 'lch');
  };

  chroma.hcl = function() {
    var args;
    args = unpack(arguments);
    return new Color(args, 'hcl');
  };

  _input.lch = lch2rgb;

  _input.hcl = function() {
    var c, h, l, ref;
    ref = unpack(arguments), h = ref[0], c = ref[1], l = ref[2];
    return lch2rgb([l, c, h]);
  };

  Color.prototype.lch = function() {
    return rgb2lch(this._rgb);
  };

  Color.prototype.hcl = function() {
    return rgb2lch(this._rgb).reverse();
  };

  rgb2cmyk = function(mode) {
    var b, c, f, g, k, m, r, ref, y;
    if (mode == null) {
      mode = 'rgb';
    }
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    r = r / 255;
    g = g / 255;
    b = b / 255;
    k = 1 - Math.max(r, Math.max(g, b));
    f = k < 1 ? 1 / (1 - k) : 0;
    c = (1 - r - k) * f;
    m = (1 - g - k) * f;
    y = (1 - b - k) * f;
    return [c, m, y, k];
  };

  cmyk2rgb = function() {
    var alpha, args, b, c, g, k, m, r, y;
    args = unpack(arguments);
    c = args[0], m = args[1], y = args[2], k = args[3];
    alpha = args.length > 4 ? args[4] : 1;
    if (k === 1) {
      return [0, 0, 0, alpha];
    }
    r = c >= 1 ? 0 : 255 * (1 - c) * (1 - k);
    g = m >= 1 ? 0 : 255 * (1 - m) * (1 - k);
    b = y >= 1 ? 0 : 255 * (1 - y) * (1 - k);
    return [r, g, b, alpha];
  };

  _input.cmyk = function() {
    return cmyk2rgb(unpack(arguments));
  };

  chroma.cmyk = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['cmyk']), function(){});
  };

  Color.prototype.cmyk = function() {
    return rgb2cmyk(this._rgb);
  };

  _input.gl = function() {
    var i, k, o, rgb, v;
    rgb = (function() {
      var ref, results;
      ref = unpack(arguments);
      results = [];
      for (k in ref) {
        v = ref[k];
        results.push(v);
      }
      return results;
    }).apply(this, arguments);
    for (i = o = 0; o <= 2; i = ++o) {
      rgb[i] *= 255;
    }
    return rgb;
  };

  chroma.gl = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['gl']), function(){});
  };

  Color.prototype.gl = function() {
    var rgb;
    rgb = this._rgb;
    return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, rgb[3]];
  };

  rgb2luminance = function(r, g, b) {
    var ref;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    r = luminance_x(r);
    g = luminance_x(g);
    b = luminance_x(b);
    return 0.2126 * r + 0.7152 * g + 0.0722 * b;
  };

  luminance_x = function(x) {
    x /= 255;
    if (x <= 0.03928) {
      return x / 12.92;
    } else {
      return pow((x + 0.055) / 1.055, 2.4);
    }
  };

  interpolate_rgb = function(col1, col2, f, m) {
    var xyz0, xyz1;
    xyz0 = col1._rgb;
    xyz1 = col2._rgb;
    return new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);
  };

  _interpolators.push(['rgb', interpolate_rgb]);

  Color.prototype.luminance = function(lum, mode) {
    var cur_lum, eps, max_iter, test;
    if (mode == null) {
      mode = 'rgb';
    }
    if (!arguments.length) {
      return rgb2luminance(this._rgb);
    }
    if (lum === 0) {
      this._rgb = [0, 0, 0, this._rgb[3]];
    } else if (lum === 1) {
      this._rgb = [255, 255, 255, this._rgb[3]];
    } else {
      eps = 1e-7;
      max_iter = 20;
      test = function(l, h) {
        var lm, m;
        m = l.interpolate(h, 0.5, mode);
        lm = m.luminance();
        if (Math.abs(lum - lm) < eps || !max_iter--) {
          return m;
        }
        if (lm > lum) {
          return test(l, m);
        }
        return test(m, h);
      };
      cur_lum = rgb2luminance(this._rgb);
      this._rgb = (cur_lum > lum ? test(chroma('black'), this) : test(this, chroma('white'))).rgba();
    }
    return this;
  };

  temperature2rgb = function(kelvin) {
    var b, g, r, temp;
    temp = kelvin / 100;
    if (temp < 66) {
      r = 255;
      g = -155.25485562709179 - 0.44596950469579133 * (g = temp - 2) + 104.49216199393888 * log(g);
      b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp - 10) + 115.67994401066147 * log(b);
    } else {
      r = 351.97690566805693 + 0.114206453784165 * (r = temp - 55) - 40.25366309332127 * log(r);
      g = 325.4494125711974 + 0.07943456536662342 * (g = temp - 50) - 28.0852963507957 * log(g);
      b = 255;
    }
    return [r, g, b];
  };

  rgb2temperature = function() {
    var b, eps, g, maxTemp, minTemp, r, ref, rgb, temp;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    minTemp = 1000;
    maxTemp = 40000;
    eps = 0.4;
    while (maxTemp - minTemp > eps) {
      temp = (maxTemp + minTemp) * 0.5;
      rgb = temperature2rgb(temp);
      if ((rgb[2] / rgb[0]) >= (b / r)) {
        maxTemp = temp;
      } else {
        minTemp = temp;
      }
    }
    return round(temp);
  };

  chroma.temperature = chroma.kelvin = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['temperature']), function(){});
  };

  _input.temperature = _input.kelvin = _input.K = temperature2rgb;

  Color.prototype.temperature = function() {
    return rgb2temperature(this._rgb);
  };

  Color.prototype.kelvin = Color.prototype.temperature;

  chroma.contrast = function(a, b) {
    var l1, l2, ref, ref1;
    if ((ref = type(a)) === 'string' || ref === 'number') {
      a = new Color(a);
    }
    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {
      b = new Color(b);
    }
    l1 = a.luminance();
    l2 = b.luminance();
    if (l1 > l2) {
      return (l1 + 0.05) / (l2 + 0.05);
    } else {
      return (l2 + 0.05) / (l1 + 0.05);
    }
  };

  chroma.distance = function(a, b, mode) {
    var d, i, l1, l2, ref, ref1, sum_sq;
    if (mode == null) {
      mode = 'lab';
    }
    if ((ref = type(a)) === 'string' || ref === 'number') {
      a = new Color(a);
    }
    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {
      b = new Color(b);
    }
    l1 = a.get(mode);
    l2 = b.get(mode);
    sum_sq = 0;
    for (i in l1) {
      d = (l1[i] || 0) - (l2[i] || 0);
      sum_sq += d * d;
    }
    return Math.sqrt(sum_sq);
  };

  chroma.deltaE = function(a, b, L, C) {
    var L1, L2, a1, a2, b1, b2, c1, c2, c4, dH2, delA, delB, delC, delL, f, h1, ref, ref1, ref2, ref3, sc, sh, sl, t, v1, v2, v3;
    if (L == null) {
      L = 1;
    }
    if (C == null) {
      C = 1;
    }
    if ((ref = type(a)) === 'string' || ref === 'number') {
      a = new Color(a);
    }
    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {
      b = new Color(b);
    }
    ref2 = a.lab(), L1 = ref2[0], a1 = ref2[1], b1 = ref2[2];
    ref3 = b.lab(), L2 = ref3[0], a2 = ref3[1], b2 = ref3[2];
    c1 = sqrt(a1 * a1 + b1 * b1);
    c2 = sqrt(a2 * a2 + b2 * b2);
    sl = L1 < 16.0 ? 0.511 : (0.040975 * L1) / (1.0 + 0.01765 * L1);
    sc = (0.0638 * c1) / (1.0 + 0.0131 * c1) + 0.638;
    h1 = c1 < 0.000001 ? 0.0 : (atan2(b1, a1) * 180.0) / PI;
    while (h1 < 0) {
      h1 += 360;
    }
    while (h1 >= 360) {
      h1 -= 360;
    }
    t = (h1 >= 164.0) && (h1 <= 345.0) ? 0.56 + abs(0.2 * cos((PI * (h1 + 168.0)) / 180.0)) : 0.36 + abs(0.4 * cos((PI * (h1 + 35.0)) / 180.0));
    c4 = c1 * c1 * c1 * c1;
    f = sqrt(c4 / (c4 + 1900.0));
    sh = sc * (f * t + 1.0 - f);
    delL = L1 - L2;
    delC = c1 - c2;
    delA = a1 - a2;
    delB = b1 - b2;
    dH2 = delA * delA + delB * delB - delC * delC;
    v1 = delL / (L * sl);
    v2 = delC / (C * sc);
    v3 = sh;
    return sqrt(v1 * v1 + v2 * v2 + (dH2 / (v3 * v3)));
  };

  Color.prototype.get = function(modechan) {
    var channel, i, me, mode, ref, src;
    me = this;
    ref = modechan.split('.'), mode = ref[0], channel = ref[1];
    src = me[mode]();
    if (channel) {
      i = mode.indexOf(channel);
      if (i > -1) {
        return src[i];
      } else {
        return console.warn('unknown channel ' + channel + ' in mode ' + mode);
      }
    } else {
      return src;
    }
  };

  Color.prototype.set = function(modechan, value) {
    var channel, i, me, mode, ref, src;
    me = this;
    ref = modechan.split('.'), mode = ref[0], channel = ref[1];
    if (channel) {
      src = me[mode]();
      i = mode.indexOf(channel);
      if (i > -1) {
        if (type(value) === 'string') {
          switch (value.charAt(0)) {
            case '+':
              src[i] += +value;
              break;
            case '-':
              src[i] += +value;
              break;
            case '*':
              src[i] *= +(value.substr(1));
              break;
            case '/':
              src[i] /= +(value.substr(1));
              break;
            default:
              src[i] = +value;
          }
        } else {
          src[i] = value;
        }
      } else {
        console.warn('unknown channel ' + channel + ' in mode ' + mode);
      }
    } else {
      src = value;
    }
    return chroma(src, mode).alpha(me.alpha());
  };

  Color.prototype.clipped = function() {
    return this._rgb._clipped || false;
  };

  Color.prototype.alpha = function(a) {
    if (arguments.length) {
      return chroma.rgb([this._rgb[0], this._rgb[1], this._rgb[2], a]);
    }
    return this._rgb[3];
  };

  Color.prototype.darken = function(amount) {
    var lab, me;
    if (amount == null) {
      amount = 1;
    }
    me = this;
    lab = me.lab();
    lab[0] -= LAB_CONSTANTS.Kn * amount;
    return chroma.lab(lab).alpha(me.alpha());
  };

  Color.prototype.brighten = function(amount) {
    if (amount == null) {
      amount = 1;
    }
    return this.darken(-amount);
  };

  Color.prototype.darker = Color.prototype.darken;

  Color.prototype.brighter = Color.prototype.brighten;

  Color.prototype.saturate = function(amount) {
    var lch, me;
    if (amount == null) {
      amount = 1;
    }
    me = this;
    lch = me.lch();
    lch[1] += amount * LAB_CONSTANTS.Kn;
    if (lch[1] < 0) {
      lch[1] = 0;
    }
    return chroma.lch(lch).alpha(me.alpha());
  };

  Color.prototype.desaturate = function(amount) {
    if (amount == null) {
      amount = 1;
    }
    return this.saturate(-amount);
  };

  Color.prototype.premultiply = function() {
    var a, rgb;
    rgb = this.rgb();
    a = this.alpha();
    return chroma(rgb[0] * a, rgb[1] * a, rgb[2] * a, a);
  };

  blend = function(bottom, top, mode) {
    if (!blend[mode]) {
      throw 'unknown blend mode ' + mode;
    }
    return blend[mode](bottom, top);
  };

  blend_f = function(f) {
    return function(bottom, top) {
      var c0, c1;
      c0 = chroma(top).rgb();
      c1 = chroma(bottom).rgb();
      return chroma(f(c0, c1), 'rgb');
    };
  };

  each = function(f) {
    return function(c0, c1) {
      var i, o, out;
      out = [];
      for (i = o = 0; o <= 3; i = ++o) {
        out[i] = f(c0[i], c1[i]);
      }
      return out;
    };
  };

  normal = function(a, b) {
    return a;
  };

  multiply = function(a, b) {
    return a * b / 255;
  };

  darken = function(a, b) {
    if (a > b) {
      return b;
    } else {
      return a;
    }
  };

  lighten = function(a, b) {
    if (a > b) {
      return a;
    } else {
      return b;
    }
  };

  screen = function(a, b) {
    return 255 * (1 - (1 - a / 255) * (1 - b / 255));
  };

  overlay = function(a, b) {
    if (b < 128) {
      return 2 * a * b / 255;
    } else {
      return 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));
    }
  };

  burn = function(a, b) {
    return 255 * (1 - (1 - b / 255) / (a / 255));
  };

  dodge = function(a, b) {
    if (a === 255) {
      return 255;
    }
    a = 255 * (b / 255) / (1 - a / 255);
    if (a > 255) {
      return 255;
    } else {
      return a;
    }
  };

  blend.normal = blend_f(each(normal));

  blend.multiply = blend_f(each(multiply));

  blend.screen = blend_f(each(screen));

  blend.overlay = blend_f(each(overlay));

  blend.darken = blend_f(each(darken));

  blend.lighten = blend_f(each(lighten));

  blend.dodge = blend_f(each(dodge));

  blend.burn = blend_f(each(burn));

  chroma.blend = blend;

  chroma.analyze = function(data) {
    var len, o, r, val;
    r = {
      min: Number.MAX_VALUE,
      max: Number.MAX_VALUE * -1,
      sum: 0,
      values: [],
      count: 0
    };
    for (o = 0, len = data.length; o < len; o++) {
      val = data[o];
      if ((val != null) && !isNaN(val)) {
        r.values.push(val);
        r.sum += val;
        if (val < r.min) {
          r.min = val;
        }
        if (val > r.max) {
          r.max = val;
        }
        r.count += 1;
      }
    }
    r.domain = [r.min, r.max];
    r.limits = function(mode, num) {
      return chroma.limits(r, mode, num);
    };
    return r;
  };

  chroma.scale = function(colors, positions) {
    var _classes, _colorCache, _colors, _correctLightness, _domain, _gamma, _max, _min, _mode, _nacol, _out, _padding, _pos, _spread, _useCache, f, getClass, getColor, resetCache, setColors, tmap;
    _mode = 'rgb';
    _nacol = chroma('#ccc');
    _spread = 0;
    _domain = [0, 1];
    _pos = [];
    _padding = [0, 0];
    _classes = false;
    _colors = [];
    _out = false;
    _min = 0;
    _max = 1;
    _correctLightness = false;
    _colorCache = {};
    _useCache = true;
    _gamma = 1;
    setColors = function(colors) {
      var c, col, o, ref, ref1, w;
      if (colors == null) {
        colors = ['#fff', '#000'];
      }
      if ((colors != null) && type(colors) === 'string' && (chroma.brewer != null)) {
        colors = chroma.brewer[colors] || chroma.brewer[colors.toLowerCase()] || colors;
      }
      if (type(colors) === 'array') {
        colors = colors.slice(0);
        for (c = o = 0, ref = colors.length - 1; 0 <= ref ? o <= ref : o >= ref; c = 0 <= ref ? ++o : --o) {
          col = colors[c];
          if (type(col) === "string") {
            colors[c] = chroma(col);
          }
        }
        _pos.length = 0;
        for (c = w = 0, ref1 = colors.length - 1; 0 <= ref1 ? w <= ref1 : w >= ref1; c = 0 <= ref1 ? ++w : --w) {
          _pos.push(c / (colors.length - 1));
        }
      }
      resetCache();
      return _colors = colors;
    };
    getClass = function(value) {
      var i, n;
      if (_classes != null) {
        n = _classes.length - 1;
        i = 0;
        while (i < n && value >= _classes[i]) {
          i++;
        }
        return i - 1;
      }
      return 0;
    };
    tmap = function(t) {
      return t;
    };
    getColor = function(val, bypassMap) {
      var c, col, i, k, o, p, ref, t;
      if (bypassMap == null) {
        bypassMap = false;
      }
      if (isNaN(val)) {
        return _nacol;
      }
      if (!bypassMap) {
        if (_classes && _classes.length > 2) {
          c = getClass(val);
          t = c / (_classes.length - 2);
        } else if (_max !== _min) {
          t = (val - _min) / (_max - _min);
        } else {
          t = 1;
        }
      } else {
        t = val;
      }
      if (!bypassMap) {
        t = tmap(t);
      }
      if (_gamma !== 1) {
        t = pow(t, _gamma);
      }
      t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));
      t = Math.min(1, Math.max(0, t));
      k = Math.floor(t * 10000);
      if (_useCache && _colorCache[k]) {
        col = _colorCache[k];
      } else {
        if (type(_colors) === 'array') {
          for (i = o = 0, ref = _pos.length - 1; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {
            p = _pos[i];
            if (t <= p) {
              col = _colors[i];
              break;
            }
            if (t >= p && i === _pos.length - 1) {
              col = _colors[i];
              break;
            }
            if (t > p && t < _pos[i + 1]) {
              t = (t - p) / (_pos[i + 1] - p);
              col = chroma.interpolate(_colors[i], _colors[i + 1], t, _mode);
              break;
            }
          }
        } else if (type(_colors) === 'function') {
          col = _colors(t);
        }
        if (_useCache) {
          _colorCache[k] = col;
        }
      }
      return col;
    };
    resetCache = function() {
      return _colorCache = {};
    };
    setColors(colors);
    f = function(v) {
      var c;
      c = chroma(getColor(v));
      if (_out && c[_out]) {
        return c[_out]();
      } else {
        return c;
      }
    };
    f.classes = function(classes) {
      var d;
      if (classes != null) {
        if (type(classes) === 'array') {
          _classes = classes;
          _domain = [classes[0], classes[classes.length - 1]];
        } else {
          d = chroma.analyze(_domain);
          if (classes === 0) {
            _classes = [d.min, d.max];
          } else {
            _classes = chroma.limits(d, 'e', classes);
          }
        }
        return f;
      }
      return _classes;
    };
    f.domain = function(domain) {
      var c, d, k, len, o, ref, w;
      if (!arguments.length) {
        return _domain;
      }
      _min = domain[0];
      _max = domain[domain.length - 1];
      _pos = [];
      k = _colors.length;
      if (domain.length === k && _min !== _max) {
        for (o = 0, len = domain.length; o < len; o++) {
          d = domain[o];
          _pos.push((d - _min) / (_max - _min));
        }
      } else {
        for (c = w = 0, ref = k - 1; 0 <= ref ? w <= ref : w >= ref; c = 0 <= ref ? ++w : --w) {
          _pos.push(c / (k - 1));
        }
      }
      _domain = [_min, _max];
      return f;
    };
    f.mode = function(_m) {
      if (!arguments.length) {
        return _mode;
      }
      _mode = _m;
      resetCache();
      return f;
    };
    f.range = function(colors, _pos) {
      setColors(colors, _pos);
      return f;
    };
    f.out = function(_o) {
      _out = _o;
      return f;
    };
    f.spread = function(val) {
      if (!arguments.length) {
        return _spread;
      }
      _spread = val;
      return f;
    };
    f.correctLightness = function(v) {
      if (v == null) {
        v = true;
      }
      _correctLightness = v;
      resetCache();
      if (_correctLightness) {
        tmap = function(t) {
          var L0, L1, L_actual, L_diff, L_ideal, max_iter, pol, t0, t1;
          L0 = getColor(0, true).lab()[0];
          L1 = getColor(1, true).lab()[0];
          pol = L0 > L1;
          L_actual = getColor(t, true).lab()[0];
          L_ideal = L0 + (L1 - L0) * t;
          L_diff = L_actual - L_ideal;
          t0 = 0;
          t1 = 1;
          max_iter = 20;
          while (Math.abs(L_diff) > 1e-2 && max_iter-- > 0) {
            (function() {
              if (pol) {
                L_diff *= -1;
              }
              if (L_diff < 0) {
                t0 = t;
                t += (t1 - t) * 0.5;
              } else {
                t1 = t;
                t += (t0 - t) * 0.5;
              }
              L_actual = getColor(t, true).lab()[0];
              return L_diff = L_actual - L_ideal;
            })();
          }
          return t;
        };
      } else {
        tmap = function(t) {
          return t;
        };
      }
      return f;
    };
    f.padding = function(p) {
      if (p != null) {
        if (type(p) === 'number') {
          p = [p, p];
        }
        _padding = p;
        return f;
      } else {
        return _padding;
      }
    };
    f.colors = function(numColors, out) {
      var dd, dm, i, ref, result, results, samples, w;
      if (arguments.length < 2) {
        out = 'hex';
      }
      result = [];
      if (arguments.length === 0) {
        result = _colors.slice(0);
      } else if (numColors === 1) {
        result = [f(0.5)];
      } else if (numColors > 1) {
        dm = _domain[0];
        dd = _domain[1] - dm;
        result = (function() {
          results = [];
          for (var o = 0; 0 <= numColors ? o < numColors : o > numColors; 0 <= numColors ? o++ : o--){ results.push(o); }
          return results;
        }).apply(this).map(function(i) {
          return f(dm + i / (numColors - 1) * dd);
        });
      } else {
        colors = [];
        samples = [];
        if (_classes && _classes.length > 2) {
          for (i = w = 1, ref = _classes.length; 1 <= ref ? w < ref : w > ref; i = 1 <= ref ? ++w : --w) {
            samples.push((_classes[i - 1] + _classes[i]) * 0.5);
          }
        } else {
          samples = _domain;
        }
        result = samples.map(function(v) {
          return f(v);
        });
      }
      if (chroma[out]) {
        result = result.map(function(c) {
          return c[out]();
        });
      }
      return result;
    };
    f.cache = function(c) {
      if (c != null) {
        _useCache = c;
        return f;
      } else {
        return _useCache;
      }
    };
    f.gamma = function(g) {
      if (g != null) {
        _gamma = g;
        return f;
      } else {
        return _gamma;
      }
    };
    return f;
  };

  if (chroma.scales == null) {
    chroma.scales = {};
  }

  chroma.scales.cool = function() {
    return chroma.scale([chroma.hsl(180, 1, .9), chroma.hsl(250, .7, .4)]);
  };

  chroma.scales.hot = function() {
    return chroma.scale(['#000', '#f00', '#ff0', '#fff'], [0, .25, .75, 1]).mode('rgb');
  };

  chroma.analyze = function(data, key, filter) {
    var add, k, len, o, r, val, visit;
    r = {
      min: Number.MAX_VALUE,
      max: Number.MAX_VALUE * -1,
      sum: 0,
      values: [],
      count: 0
    };
    if (filter == null) {
      filter = function() {
        return true;
      };
    }
    add = function(val) {
      if ((val != null) && !isNaN(val)) {
        r.values.push(val);
        r.sum += val;
        if (val < r.min) {
          r.min = val;
        }
        if (val > r.max) {
          r.max = val;
        }
        r.count += 1;
      }
    };
    visit = function(val, k) {
      if (filter(val, k)) {
        if ((key != null) && type(key) === 'function') {
          return add(key(val));
        } else if ((key != null) && type(key) === 'string' || type(key) === 'number') {
          return add(val[key]);
        } else {
          return add(val);
        }
      }
    };
    if (type(data) === 'array') {
      for (o = 0, len = data.length; o < len; o++) {
        val = data[o];
        visit(val);
      }
    } else {
      for (k in data) {
        val = data[k];
        visit(val, k);
      }
    }
    r.domain = [r.min, r.max];
    r.limits = function(mode, num) {
      return chroma.limits(r, mode, num);
    };
    return r;
  };

  chroma.limits = function(data, mode, num) {
    var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, assignments, best, centroids, cluster, clusterSizes, dist, i, j, kClusters, limits, max_log, min, min_log, mindist, n, nb_iters, newCentroids, o, p, pb, pr, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, repeat, sum, tmpKMeansBreaks, v, value, values, w;
    if (mode == null) {
      mode = 'equal';
    }
    if (num == null) {
      num = 7;
    }
    if (type(data) === 'array') {
      data = chroma.analyze(data);
    }
    min = data.min;
    max = data.max;
    sum = data.sum;
    values = data.values.sort(function(a, b) {
      return a - b;
    });
    if (num === 1) {
      return [min, max];
    }
    limits = [];
    if (mode.substr(0, 1) === 'c') {
      limits.push(min);
      limits.push(max);
    }
    if (mode.substr(0, 1) === 'e') {
      limits.push(min);
      for (i = o = 1, ref = num - 1; 1 <= ref ? o <= ref : o >= ref; i = 1 <= ref ? ++o : --o) {
        limits.push(min + (i / num) * (max - min));
      }
      limits.push(max);
    } else if (mode.substr(0, 1) === 'l') {
      if (min <= 0) {
        throw 'Logarithmic scales are only possible for values > 0';
      }
      min_log = Math.LOG10E * log(min);
      max_log = Math.LOG10E * log(max);
      limits.push(min);
      for (i = w = 1, ref1 = num - 1; 1 <= ref1 ? w <= ref1 : w >= ref1; i = 1 <= ref1 ? ++w : --w) {
        limits.push(pow(10, min_log + (i / num) * (max_log - min_log)));
      }
      limits.push(max);
    } else if (mode.substr(0, 1) === 'q') {
      limits.push(min);
      for (i = aa = 1, ref2 = num - 1; 1 <= ref2 ? aa <= ref2 : aa >= ref2; i = 1 <= ref2 ? ++aa : --aa) {
        p = (values.length - 1) * i / num;
        pb = floor(p);
        if (pb === p) {
          limits.push(values[pb]);
        } else {
          pr = p - pb;
          limits.push(values[pb] * (1 - pr) + values[pb + 1] * pr);
        }
      }
      limits.push(max);
    } else if (mode.substr(0, 1) === 'k') {

      /*
      implementation based on
      http://code.google.com/p/figue/source/browse/trunk/figue.js#336
      simplified for 1-d input values
       */
      n = values.length;
      assignments = new Array(n);
      clusterSizes = new Array(num);
      repeat = true;
      nb_iters = 0;
      centroids = null;
      centroids = [];
      centroids.push(min);
      for (i = ab = 1, ref3 = num - 1; 1 <= ref3 ? ab <= ref3 : ab >= ref3; i = 1 <= ref3 ? ++ab : --ab) {
        centroids.push(min + (i / num) * (max - min));
      }
      centroids.push(max);
      while (repeat) {
        for (j = ac = 0, ref4 = num - 1; 0 <= ref4 ? ac <= ref4 : ac >= ref4; j = 0 <= ref4 ? ++ac : --ac) {
          clusterSizes[j] = 0;
        }
        for (i = ad = 0, ref5 = n - 1; 0 <= ref5 ? ad <= ref5 : ad >= ref5; i = 0 <= ref5 ? ++ad : --ad) {
          value = values[i];
          mindist = Number.MAX_VALUE;
          for (j = ae = 0, ref6 = num - 1; 0 <= ref6 ? ae <= ref6 : ae >= ref6; j = 0 <= ref6 ? ++ae : --ae) {
            dist = abs(centroids[j] - value);
            if (dist < mindist) {
              mindist = dist;
              best = j;
            }
          }
          clusterSizes[best]++;
          assignments[i] = best;
        }
        newCentroids = new Array(num);
        for (j = af = 0, ref7 = num - 1; 0 <= ref7 ? af <= ref7 : af >= ref7; j = 0 <= ref7 ? ++af : --af) {
          newCentroids[j] = null;
        }
        for (i = ag = 0, ref8 = n - 1; 0 <= ref8 ? ag <= ref8 : ag >= ref8; i = 0 <= ref8 ? ++ag : --ag) {
          cluster = assignments[i];
          if (newCentroids[cluster] === null) {
            newCentroids[cluster] = values[i];
          } else {
            newCentroids[cluster] += values[i];
          }
        }
        for (j = ah = 0, ref9 = num - 1; 0 <= ref9 ? ah <= ref9 : ah >= ref9; j = 0 <= ref9 ? ++ah : --ah) {
          newCentroids[j] *= 1 / clusterSizes[j];
        }
        repeat = false;
        for (j = ai = 0, ref10 = num - 1; 0 <= ref10 ? ai <= ref10 : ai >= ref10; j = 0 <= ref10 ? ++ai : --ai) {
          if (newCentroids[j] !== centroids[i]) {
            repeat = true;
            break;
          }
        }
        centroids = newCentroids;
        nb_iters++;
        if (nb_iters > 200) {
          repeat = false;
        }
      }
      kClusters = {};
      for (j = aj = 0, ref11 = num - 1; 0 <= ref11 ? aj <= ref11 : aj >= ref11; j = 0 <= ref11 ? ++aj : --aj) {
        kClusters[j] = [];
      }
      for (i = ak = 0, ref12 = n - 1; 0 <= ref12 ? ak <= ref12 : ak >= ref12; i = 0 <= ref12 ? ++ak : --ak) {
        cluster = assignments[i];
        kClusters[cluster].push(values[i]);
      }
      tmpKMeansBreaks = [];
      for (j = al = 0, ref13 = num - 1; 0 <= ref13 ? al <= ref13 : al >= ref13; j = 0 <= ref13 ? ++al : --al) {
        tmpKMeansBreaks.push(kClusters[j][0]);
        tmpKMeansBreaks.push(kClusters[j][kClusters[j].length - 1]);
      }
      tmpKMeansBreaks = tmpKMeansBreaks.sort(function(a, b) {
        return a - b;
      });
      limits.push(tmpKMeansBreaks[0]);
      for (i = am = 1, ref14 = tmpKMeansBreaks.length - 1; am <= ref14; i = am += 2) {
        v = tmpKMeansBreaks[i];
        if (!isNaN(v) && limits.indexOf(v) === -1) {
          limits.push(v);
        }
      }
    }
    return limits;
  };

  hsi2rgb = function(h, s, i) {

    /*
    borrowed from here:
    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp
     */
    var args, b, g, r;
    args = unpack(arguments);
    h = args[0], s = args[1], i = args[2];
    if (isNaN(h)) {
      h = 0;
    }
    h /= 360;
    if (h < 1 / 3) {
      b = (1 - s) / 3;
      r = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
      g = 1 - (b + r);
    } else if (h < 2 / 3) {
      h -= 1 / 3;
      r = (1 - s) / 3;
      g = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
      b = 1 - (r + g);
    } else {
      h -= 2 / 3;
      g = (1 - s) / 3;
      b = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
      r = 1 - (g + b);
    }
    r = limit(i * r * 3);
    g = limit(i * g * 3);
    b = limit(i * b * 3);
    return [r * 255, g * 255, b * 255, args.length > 3 ? args[3] : 1];
  };

  rgb2hsi = function() {

    /*
    borrowed from here:
    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp
     */
    var b, g, h, i, min, r, ref, s;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    TWOPI = Math.PI * 2;
    r /= 255;
    g /= 255;
    b /= 255;
    min = Math.min(r, g, b);
    i = (r + g + b) / 3;
    s = 1 - min / i;
    if (s === 0) {
      h = 0;
    } else {
      h = ((r - g) + (r - b)) / 2;
      h /= Math.sqrt((r - g) * (r - g) + (r - b) * (g - b));
      h = Math.acos(h);
      if (b > g) {
        h = TWOPI - h;
      }
      h /= TWOPI;
    }
    return [h * 360, s, i];
  };

  chroma.hsi = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['hsi']), function(){});
  };

  _input.hsi = hsi2rgb;

  Color.prototype.hsi = function() {
    return rgb2hsi(this._rgb);
  };

  interpolate_hsx = function(col1, col2, f, m) {
    var dh, hue, hue0, hue1, lbv, lbv0, lbv1, res, sat, sat0, sat1, xyz0, xyz1;
    if (m === 'hsl') {
      xyz0 = col1.hsl();
      xyz1 = col2.hsl();
    } else if (m === 'hsv') {
      xyz0 = col1.hsv();
      xyz1 = col2.hsv();
    } else if (m === 'hcg') {
      xyz0 = col1.hcg();
      xyz1 = col2.hcg();
    } else if (m === 'hsi') {
      xyz0 = col1.hsi();
      xyz1 = col2.hsi();
    } else if (m === 'lch' || m === 'hcl') {
      m = 'hcl';
      xyz0 = col1.hcl();
      xyz1 = col2.hcl();
    }
    if (m.substr(0, 1) === 'h') {
      hue0 = xyz0[0], sat0 = xyz0[1], lbv0 = xyz0[2];
      hue1 = xyz1[0], sat1 = xyz1[1], lbv1 = xyz1[2];
    }
    if (!isNaN(hue0) && !isNaN(hue1)) {
      if (hue1 > hue0 && hue1 - hue0 > 180) {
        dh = hue1 - (hue0 + 360);
      } else if (hue1 < hue0 && hue0 - hue1 > 180) {
        dh = hue1 + 360 - hue0;
      } else {
        dh = hue1 - hue0;
      }
      hue = hue0 + f * dh;
    } else if (!isNaN(hue0)) {
      hue = hue0;
      if ((lbv1 === 1 || lbv1 === 0) && m !== 'hsv') {
        sat = sat0;
      }
    } else if (!isNaN(hue1)) {
      hue = hue1;
      if ((lbv0 === 1 || lbv0 === 0) && m !== 'hsv') {
        sat = sat1;
      }
    } else {
      hue = Number.NaN;
    }
    if (sat == null) {
      sat = sat0 + f * (sat1 - sat0);
    }
    lbv = lbv0 + f * (lbv1 - lbv0);
    return res = chroma[m](hue, sat, lbv);
  };

  _interpolators = _interpolators.concat((function() {
    var len, o, ref, results;
    ref = ['hsv', 'hsl', 'hsi', 'hcl', 'lch', 'hcg'];
    results = [];
    for (o = 0, len = ref.length; o < len; o++) {
      m = ref[o];
      results.push([m, interpolate_hsx]);
    }
    return results;
  })());

  interpolate_num = function(col1, col2, f, m) {
    var n1, n2;
    n1 = col1.num();
    n2 = col2.num();
    return chroma.num(n1 + (n2 - n1) * f, 'num');
  };

  _interpolators.push(['num', interpolate_num]);

  interpolate_lab = function(col1, col2, f, m) {
    var res, xyz0, xyz1;
    xyz0 = col1.lab();
    xyz1 = col2.lab();
    return res = new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);
  };

  _interpolators.push(['lab', interpolate_lab]);

}).call(commonjsGlobal);
});

const WGL = WebGLRenderingContext;
class Buffer$1 {
    /**
     * Provides a simple method of uploading data to a GPU buffer. Example usage:
     *
     *     const vertices = new Buffer(WGL.ARRAY_BUFFER, Float32Array)
     *     vertices.data = [[0, 0, 0], [1, 0, 0], [0, 1, 0], [1, 1, 0]]
     *     vertices.compile()
     *
     *     const indices = new Buffer(WGL.ELEMENT_ARRAY_BUFFER, Uint16Array)
     *     indices.data = [[0, 1, 2], [2, 1, 3]]
     *     indices.compile()
     *
     * Specifies the target to which the buffer object is bound.
     * The symbolic constant must be GL_ARRAY_BUFFER or GL_ELEMENT_ARRAY_BUFFER.
     */
    constructor(target, type) {
        this.target = target;
        this.type = type;
        assert(target == WGL.ARRAY_BUFFER || target == WGL.ELEMENT_ARRAY_BUFFER, 'target == WGL.ARRAY_BUFFER || target == WGL.ELEMENT_ARRAY_BUFFER');
        assert(type == Float32Array || type == Uint16Array, 'type == Float32Array || type == Uint16Array');
        this.buffer = undefined;
        this.type = type;
        this.data = [];
        this.count = 0;
        this.spacing = 1;
        this.hasBeenCompiled = false;
    }
    /**
     * Upload the contents of `data` to the GPU in preparation for rendering. The data must be a list of lists
     * where each inner list has the same length. For example, each element of data for vertex normals would be a
     * list of length three. This will remember the data length and element length for later use by shaders.
     *
     * This could have used `[].concat.apply([], this.data)` to flatten the array but Google
     * Chrome has a maximum number of arguments so the concatenations are chunked to avoid that limit.
     *
     * @param usage Either `WGL.STATIC_DRAW` or `WGL.DYNAMIC_DRAW`. Defaults to `WGL.STATIC_DRAW`
     */
    compile(usage = WGL.STATIC_DRAW, gl = currentGL()) {
        assert(WGL.STATIC_DRAW == usage || WGL.DYNAMIC_DRAW == usage, 'WGL.STATIC_DRAW == type || WGL.DYNAMIC_DRAW == type');
        this.buffer = this.buffer || gl.createBuffer();
        let buffer;
        if (this.data.length == 0) {
            console.warn('empty buffer ' + this.name);
            //console.trace()
        }
        if (this.data.length == 0 || this.data[0] instanceof V3) {
            assert(!(this.data[0] instanceof V3) || this.type == Float32Array);
            V3.pack(this.data, buffer = new this.type(this.data.length * 3)); // asserts that all
            // elements are V3s
            this.spacing = 3;
            this.count = this.data.length;
            this.maxValue = 0;
        }
        else {
            //assert(Array != this.data[0].constructor, this.name + this.data[0])
            if (Array.isArray(this.data[0])) {
                const bufferLength = this.data.length * this.data[0].length;
                buffer = new this.type(bufferLength);
                let i = this.data.length, destPtr = bufferLength;
                while (i--) {
                    const subArray = this.data[i];
                    let j = subArray.length;
                    while (j--) {
                        buffer[--destPtr] = subArray[j];
                    }
                }
                assert(0 == destPtr);
            }
            else {
                buffer = new this.type(this.data);
            }
            const spacing = this.data.length ? buffer.length / this.data.length : 0;
            assert(spacing % 1 == 0, `buffer ${this.name} elements not of consistent size, average size is ` + spacing);
            if (NLA_DEBUG) {
                if (10000 <= buffer.length) {
                    this.maxValue = 0;
                }
                else {
                    this.maxValue = Math.max.apply(undefined, buffer);
                }
            }
            assert([1, 2, 3, 4].includes(spacing));
            this.spacing = spacing;
            this.count = this.data.length;
        }
        gl.bindBuffer(this.target, this.buffer);
        gl.bufferData(this.target, buffer, usage);
        this.hasBeenCompiled = true;
    }
}

const { cos, sin, PI: PI$2, min, max } = Math;
const WGL$1 = WebGLRenderingContext;
/**
 * @example new Mesh()
 *        .addIndexBuffer('TRIANGLES')
 *        .addIndexBuffer('LINES')
 *        .addVertexBuffer('normals', 'ts_Normal')
 */
class Mesh extends Transformable {
    constructor() {
        super();
        this.hasBeenCompiled = false;
        this.vertexBuffers = {};
        this.indexBuffers = {};
        this.addVertexBuffer('vertices', 'ts_Vertex');
    }
    /**
     * Calculate area, volume and centroid of the mesh.
     *
     * The area is the sum of the areas of the triangles.
     *
     * For closed meshes, the volume is the contained volume. If the volume is inside-out, i.e. the face normals point
     * inwards, the returned value is negative. In general, this calculates the sum of the z-direction shadow volumes
     * of the triangles. The z-dir shadow volume is the cut-off prism with the triangle projected onto the XY plane as
     * the base face and the triangle itself as the top face.
     *
     * The centroid is the "mean point of all points inside the volume". If a uniform density is assumed, this is
     * equivalent to the center of gravity. In general, this calculates the weighted average of the centroids of all the
     * triangle shadow volumes.
     */
    calcVolume() {
        let totalVolumeX2 = 0, totalCentroidWithZX2 = V3.O, totalAreaX2 = 0;
        const triangles = this.TRIANGLES;
        const vertices = this.vertices;
        for (let i = 0; i < triangles.length; i += 3) {
            const ai = triangles[i + 0], bi = triangles[i + 1], ci = triangles[i + 2];
            const a = vertices[ai], b = vertices[bi], c = vertices[ci];
            const ab = b.minus(a), ac = c.minus(a);
            const normal = ab.cross(ac);
            //const centroidZ = (v0.z + v1.z + v2.z) / 3
            const faceCentroid = V3.add(a, b, c).div(3);
            //totalVolume += centroidZ * (area === v01.cross(v02).length() / 2) * v01.cross(v02).unit().z
            totalVolumeX2 += faceCentroid.z * normal.z;
            const faceAreaX2 = normal.length();
            totalAreaX2 += faceAreaX2;
            // NB: the shadow volume centroid does NOT have the same XY coordinates
            // as the face centroid.
            // calculate the weighted centroid of the shadow volume:
            // faceShadowCentroid = INTEGRATE [0; 1] (
            //   INTEGRATE [0; 1 - s] (
            //     normal.z *
            //     ((1 - s - t) a + s b + t c) *
            //     ((1 - s - t) a + s b + t c).z
            //   ) dt
            // ) ds
            // = (a (2 a.z + b.z + c.z) + b (a.z + 2 b.z + c.z) + c (a.z + b.z + 2 c.z)) / 24
            const faceShadowCentroid = V3.add(a.times(2 * a.z + b.z + c.z), b.times(a.z + 2 * b.z + c.z), c.times(a.z + b.z + 2 * c.z)).times(normal.z); // 1/24 factor is done at very end
            totalCentroidWithZX2 = totalCentroidWithZX2.plus(faceShadowCentroid);
        }
        // sumInPlaceTree adds negligible additional accuracy for XY sphere
        const volume = totalVolumeX2 / 2;
        return {
            volume,
            centroid: eq0(volume) ? V3.O : totalCentroidWithZX2.div(24 * volume).schur(new V3(1, 1, 0.5)),
            area: totalAreaX2 / 2
        };
    }
    /**
     * Add a new vertex buffer with a list as a property called `name` on this object and map it to
     * the attribute called `attribute` in all shaders that draw this mesh.
     * @example new Mesh().addVertexBuffer('coords', 'ts_TexCoord')
     */
    addVertexBuffer(name, attribute) {
        assert(!this.vertexBuffers[attribute], 'Buffer ' + attribute + ' already exists.');
        //assert(!this[name])
        this.hasBeenCompiled = false;
        assert('string' == typeof name);
        assert('string' == typeof attribute);
        const buffer = this.vertexBuffers[attribute] = new Buffer$1(WGL$1.ARRAY_BUFFER, Float32Array);
        buffer.name = name;
        this[name] = [];
        return this;
    }
    /**
     * Add a new index buffer.
     * @example new Mesh().addIndexBuffer('TRIANGLES')
     * @example new Mesh().addIndexBuffer('LINES')
     */
    addIndexBuffer(name) {
        this.hasBeenCompiled = false;
        const buffer = this.indexBuffers[name] = new Buffer$1(WGL$1.ELEMENT_ARRAY_BUFFER, Uint16Array);
        buffer.name = name;
        this[name] = [];
        return this;
    }
    concat(...others) {
        const mesh = new Mesh();
        [this].concat(others).forEach((oldMesh) => {
            const startIndex = mesh.vertices ? mesh.vertices.length : 0;
            Object.getOwnPropertyNames(oldMesh.vertexBuffers).forEach(attribute => {
                const bufferName = this.vertexBuffers[attribute].name;
                if (!mesh.vertexBuffers[attribute]) {
                    mesh.addVertexBuffer(bufferName, attribute);
                }
                mesh[bufferName].push(...oldMesh[bufferName]);
            });
            Object.getOwnPropertyNames(oldMesh.indexBuffers).forEach(name => {
                if (!mesh.indexBuffers[name]) {
                    mesh.addIndexBuffer(name);
                }
                mesh[name].push(...oldMesh[name].map(index => index + startIndex));
            });
        });
        return mesh;
    }
    /**
     * Upload all attached buffers to the GPU in preparation for rendering. This doesn't need to be called every
     * frame, only needs to be done when the data changes.
     *
     * Sets `this.hasBeenCompiled` to true.
     */
    compile(gl = currentGL()) {
        // figure out shortest vertex buffer to make sure indexBuffers are in bounds
        let minVertexBufferLength = Infinity; // TODO, _minBufferName
        Object.getOwnPropertyNames(this.vertexBuffers).forEach(attribute => {
            const buffer = this.vertexBuffers[attribute];
            buffer.data = this[buffer.name];
            buffer.compile(undefined, gl);
            if (this[buffer.name].length < minVertexBufferLength) {
                // _minBufferName = attribute
                minVertexBufferLength = this[buffer.name].length;
            }
        });
        for (const name in this.indexBuffers) {
            const buffer = this.indexBuffers[name];
            buffer.data = this[buffer.name];
            buffer.compile(undefined, gl);
            // if (NLA_DEBUG && buffer.maxValue >= minVertexBufferLength) {
            // 	throw new Error(`max index value for buffer ${name}
            // 	is too large ${buffer.maxValue} min Vbuffer size: ${minVertexBufferLength} ${minBufferName}`)
            // }
        }
        this.hasBeenCompiled = true;
        return this;
    }
    static fromBinarySTL(stl) {
        return __awaiter$1(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                const mesh = new Mesh()
                    .addVertexBuffer('normals', 'ts_Normal');
                const fileReader = new FileReader();
                fileReader.onerror = reject;
                fileReader.onload = function (_progressEvent) {
                    const dataView = new DataView(this.result);
                    const HEADER_BYTE_SIZE = 80;
                    const triangleCount = dataView.getUint32(HEADER_BYTE_SIZE, true);
                    mesh.normals.length = triangleCount * 3;
                    mesh.vertices.length = triangleCount * 3;
                    let i = triangleCount * 3, bufferPtr = HEADER_BYTE_SIZE + 4;
                    function readV3() {
                        const x = dataView.getFloat32(bufferPtr, true);
                        bufferPtr += 4;
                        const y = dataView.getFloat32(bufferPtr, true);
                        bufferPtr += 4;
                        const z = dataView.getFloat32(bufferPtr, true);
                        bufferPtr += 4;
                        return new V3(x, y, z);
                    }
                    while (i) {
                        i -= 3;
                        const normal = readV3();
                        mesh.normals[i + 0] = normal;
                        mesh.normals[i + 1] = normal;
                        mesh.normals[i + 2] = normal;
                        mesh.vertices[i + 0] = readV3();
                        mesh.vertices[i + 1] = readV3();
                        mesh.vertices[i + 2] = readV3();
                        bufferPtr += 2;
                    }
                    resolve(mesh);
                };
                fileReader.readAsArrayBuffer(stl);
            });
        });
    }
    toBinarySTL() {
        if (!this.TRIANGLES)
            throw new Error('TRIANGLES must be defined.');
        const HEADER_BYTE_SIZE = 80, FLOAT_BYTE_SIZE = 4;
        const triangles = this.TRIANGLES;
        const triangleCount = triangles.length / 3;
        const buffer = new ArrayBuffer(HEADER_BYTE_SIZE + 4 + triangleCount * (4 * 3 * FLOAT_BYTE_SIZE + 2));
        const dataView = new DataView(buffer);
        dataView.setUint32(HEADER_BYTE_SIZE, triangleCount, true);
        let bufferPtr = HEADER_BYTE_SIZE + 4;
        let i = triangles.length;
        while (i) {
            i -= 3;
            const a = this.vertices[triangles[i]], b = this.vertices[triangles[i + 1]], c = this.vertices[triangles[i + 2]];
            const normal = V3.normalOnPoints(a, b, c);
            [normal, a, b, c].forEach(v => {
                dataView.setFloat32(bufferPtr, v.x, true);
                bufferPtr += 4;
                dataView.setFloat32(bufferPtr, v.y, true);
                bufferPtr += 4;
                dataView.setFloat32(bufferPtr, v.z, true);
                bufferPtr += 4;
            });
            // skip 2 bytes, already initalized to zero
            bufferPtr += 2;
        }
        assert(bufferPtr == buffer.byteLength, bufferPtr + ' ' + buffer.byteLength);
        return new Blob([buffer], { type: 'application/octet-stream' });
    }
    /**
     * Transform all vertices by `matrix` and all normals by the inverse transpose of `matrix`.
     *
     * Index buffer data is referenced.
     */
    transform(m4) {
        const mesh = new Mesh();
        mesh.vertices = m4.transformedPoints(this.vertices);
        if (this.normals) {
            mesh.addVertexBuffer('normals', 'ts_Normal');
            const invTrans = m4.as3x3().inversed().transposed().normalized();
            mesh.normals = this.normals.map(n => invTrans.transformVector(n).unit());
            // mesh.normals.forEach(n => assert(n.hasLength(1)))
        }
        for (const name in this.indexBuffers) {
            mesh.addIndexBuffer(name);
            mesh[name] = this[name];
        }
        for (const attribute in this.vertexBuffers) {
            if ('ts_Vertex' !== attribute && 'ts_Normal' !== attribute) {
                const name = this.vertexBuffers[attribute].name;
                mesh.addVertexBuffer(name, attribute);
                mesh[name] = this[name];
            }
        }
        this.hasBeenCompiled && mesh.compile();
        return mesh;
    }
    /**
     * Computes a new normal for each vertex from the average normal of the neighboring triangles. This means
     * adjacent triangles must share vertices for the resulting normals to be smooth.
     */
    computeNormalsFromFlatTriangles() {
        if (!this.normals)
            this.addVertexBuffer('normals', 'ts_Normal');
        // tslint:disable:no-string-literal
        //this.vertexBuffers['ts_Normal'].data = arrayFromFunction(this.vertices.length, i => V3.O)
        const TRIANGLES = this.TRIANGLES, vertices = this.vertices, normals = this.normals;
        normals.length = vertices.length;
        for (let i = 0; i < TRIANGLES.length; i += 3) {
            const ai = TRIANGLES[i], bi = TRIANGLES[i + 1], ci = TRIANGLES[i + 2];
            const a = vertices[ai];
            const b = vertices[bi];
            const c = vertices[ci];
            const normal = b.minus(a).cross(c.minus(a)).unit();
            normals[ai] = normals[ai].plus(normal);
            normals[bi] = normals[bi].plus(normal);
            normals[ci] = normals[ci].plus(normal);
        }
        for (let i = 0; i < vertices.length; i++) {
            normals[i] = normals[i].unit();
        }
        this.hasBeenCompiled = false;
        return this;
    }
    computeWireframeFromFlatTriangles(indexBufferName = 'LINES') {
        if (!this.TRIANGLES)
            throw new Error('TRIANGLES must be defined.');
        const canonEdges = new Set();
        function canonEdge(i0, i1) {
            const iMin = min(i0, i1), iMax = max(i0, i1);
            return (iMin << 16) | iMax;
        }
        // function uncanonEdge(key) {
        // 	return [key >> 16, key & 0xffff]
        // }
        const t = this.TRIANGLES;
        for (let i = 0; i < t.length; i += 3) {
            canonEdges.add(canonEdge(t[i + 0], t[i + 1]));
            canonEdges.add(canonEdge(t[i + 1], t[i + 2]));
            canonEdges.add(canonEdge(t[i + 2], t[i + 0]));
        }
        const data = indexBufferName;
        if (!this[data])
            this.addIndexBuffer(indexBufferName);
        //this.LINES = new Array(canonEdges.size)
        canonEdges.forEach(val => this[data].push(val >> 16, val & 0xffff));
        this.hasBeenCompiled = false;
        return this;
    }
    computeWireframeFromFlatTrianglesClosedMesh(indexBufferName = 'LINES') {
        if (!this.TRIANGLES)
            throw new Error('TRIANGLES must be defined.');
        if (!this.LINES)
            this.addIndexBuffer('LINES');
        const tris = this.TRIANGLES;
        if (!this[indexBufferName])
            this.addIndexBuffer(indexBufferName);
        const lines = this[indexBufferName];
        for (let i = 0; i < tris.length; i += 3) {
            if (tris[i + 0] < tris[i + 1])
                lines.push(tris[i + 0], tris[i + 1]);
            if (tris[i + 1] < tris[i + 2])
                lines.push(tris[i + 1], tris[i + 2]);
            if (tris[i + 2] < tris[i + 0])
                lines.push(tris[i + 2], tris[i + 0]);
        }
        this.hasBeenCompiled = false;
        return this;
    }
    computeNormalLines(length = 1, indexBufferName = 'LINES') {
        if (!this.normals) {
            throw new Error('normals must be defined.');
        }
        const vs = this.vertices, si = this.vertices.length;
        if (!this[indexBufferName])
            this.addIndexBuffer(indexBufferName);
        for (let i = 0; i < this.normals.length; i++) {
            vs[si + i] = vs[i].plus(this.normals[i].toLength(length));
            this[indexBufferName].push(si + i, i);
        }
        this.hasBeenCompiled = false;
        return this;
    }
    getAABB() {
        return new AABB().addPoints(this.vertices);
    }
    getBoundingSphere() {
        const sphere = { center: this.getAABB().getCenter(), radius: 0 };
        for (let i = 0; i < this.vertices.length; i++) {
            sphere.radius = Math.max(sphere.radius, this.vertices[i].minus(sphere.center).length());
        }
        return sphere;
    }
    /**
     * Generates a square mesh in the XY plane.
     * Texture coordinates (buffer "coords") are set to go from 0 to 1 in either direction.
     *
     * @param {Object=} options
     * @param {number=} options.detail Defaults to 1
     * @param {number=} options.detailX Defaults to options.detail. Number of subdivisions in X direction.
     * @param {number=} options.detailY Defaults to options.detail. Number of subdivisions in Y direction.j
     * @param {number=} options.width defaults to 1
     * @param {number=} options.height defaults to 1
     * @param {number=} options.startX defaults to 0
     * @param {number=} options.startY defaults to 0
     */
    static plane(options = {}) {
        const detailX = options.detailX || options.detail || 1;
        const detailY = options.detailY || options.detail || 1;
        const startX = options.startX || 0;
        const startY = options.startY || 0;
        const width = options.width || 1;
        const height = options.height || 1;
        const mesh = new Mesh()
            .addIndexBuffer('LINES')
            .addIndexBuffer('TRIANGLES')
            .addVertexBuffer('normals', 'ts_Normal')
            .addVertexBuffer('coords', 'ts_TexCoord');
        for (let j = 0; j <= detailY; j++) {
            const t = j / detailY;
            for (let i = 0; i <= detailX; i++) {
                const s = i / detailX;
                mesh.vertices.push(new V3(startX + s * width, startY + t * height, 0));
                mesh.coords.push([s, t]);
                mesh.normals.push(V3.Z);
                if (i < detailX && j < detailY) {
                    const offset = i + j * (detailX + 1);
                    mesh.TRIANGLES.push(offset, offset + detailX + 1, offset + 1, offset + detailX + 1, offset + detailX + 2, offset + 1);
                }
            }
        }
        for (let i = 0; i < detailX; i++) {
            mesh.LINES.push(i, i + 1);
            mesh.LINES.push((detailX + 1) * detailY + i, (detailX + 1) * detailY + i + 1);
        }
        for (let j = 0; j < detailY; j++) {
            mesh.LINES.push(detailX * j, detailX * (j + 1) + 1);
            mesh.LINES.push(detailX * (j + 1), detailX * (j + 2) + 1);
        }
        mesh.compile();
        return mesh;
    }
    /**
     * Generates a unit cube (1x1x1) starting at the origin and extending into the (+ + +) octant.
     * I.e. box from V3.O to V3(1,1,1)
     * Creates line, triangle, vertex and normal1 buffers.
     */
    static cube() {
        const mesh = new Mesh()
            .addVertexBuffer('normals', 'ts_Normal')
            .addIndexBuffer('TRIANGLES')
            .addIndexBuffer('LINES');
        // basically indexes for faces of the cube. vertices each need to be added 3 times,
        // as they have different normals depending on the face being rendered
        const VERTEX_CORNERS = [
            0, 1, 2, 3,
            4, 5, 6, 7,
            0, 4, 1, 5,
            2, 6, 3, 7,
            2, 6, 0, 4,
            3, 7, 1, 5,
        ];
        mesh.vertices = VERTEX_CORNERS.map(i => Mesh.UNIT_CUBE_CORNERS[i]);
        mesh.normals = [V3.X.negated(), V3.X, V3.Y.negated(), V3.Y, V3.Z.negated(), V3.Z].flatMap(v => [v, v, v, v]);
        for (let i = 0; i < 6 * 4; i += 4) {
            pushQuad(mesh.TRIANGLES, 0 != i % 8, VERTEX_CORNERS[i], VERTEX_CORNERS[i + 1], VERTEX_CORNERS[i + 2], VERTEX_CORNERS[i + 3]);
        }
        // indexes of LINES relative to UNIT_CUBE_CORNERS. Mapped to VERTEX_CORNERS.indexOf
        // so they make sense in the context of the mesh
        mesh.LINES = [
            0, 1,
            0, 2,
            1, 3,
            2, 3,
            0, 4,
            1, 5,
            2, 6,
            3, 7,
            4, 5,
            4, 6,
            5, 7,
            6, 7,
        ].map(i => VERTEX_CORNERS.indexOf(i));
        mesh.compile();
        return mesh;
    }
    static isocahedron() {
        return Mesh.sphere(0);
    }
    static sphere2(las, longs) {
        const baseVertices = arrayFromFunction(las, i => {
            const angle = i / (las - 1) * PI$2 - PI$2 / 2;
            return new V3(0, cos(angle), sin(angle));
        });
        return Mesh.rotation(baseVertices, { anchor: V3.O, dir1: V3.Z }, 2 * PI$2, longs, true, baseVertices);
    }
    /**
     * Returns a sphere mesh with radius 1 created by subdividing the faces of a isocahedron (20-sided) recursively
     * The sphere is positioned at the origin
     * @param subdivisions
     *      How many recursive divisions to do. A subdivision divides a triangle into 4,
     *      so the total number of triangles is 20 * 4^subdivisions
     * @returns
     *      Contains vertex and normal1 buffers and index buffers for triangles and LINES
     */
    static sphere(subdivisions = 3) {
        const golden = (1 + Math.sqrt(5)) / 2, u = new V3(1, golden, 0).unit(), s = u.x, t = u.y;
        // base vertices of isocahedron
        const vertices = [
            new V3(-s, t, 0),
            new V3(s, t, 0),
            new V3(-s, -t, 0),
            new V3(s, -t, 0),
            new V3(0, -s, t),
            new V3(0, s, t),
            new V3(0, -s, -t),
            new V3(0, s, -t),
            new V3(t, 0, -s),
            new V3(t, 0, s),
            new V3(-t, 0, -s),
            new V3(-t, 0, s)
        ];
        // base triangles of isocahedron
        const triangles = [
            // 5 faces around point 0
            0, 11, 5,
            0, 5, 1,
            0, 1, 7,
            0, 7, 10,
            0, 10, 11,
            // 5 adjacent faces
            1, 5, 9,
            5, 11, 4,
            11, 10, 2,
            10, 7, 6,
            7, 1, 8,
            // 5 faces around point 3
            3, 9, 4,
            3, 4, 2,
            3, 2, 6,
            3, 6, 8,
            3, 8, 9,
            // 5 adjacent faces
            4, 9, 5,
            2, 4, 11,
            6, 2, 10,
            8, 6, 7,
            9, 8, 1,
        ];
        /**
         * Tesselates triangle a b c
         * a b c must already be in vertices with the indexes ia ib ic
         * res is the number of subdivisions to do. 0 just results in triangle and line indexes being added to the
         * respective buffers.
         */
        function tesselateRecursively(a, b, c, res, vertices, triangles, ia, ib, ic, lines) {
            if (0 == res) {
                triangles.push(ia, ib, ic);
                if (ia < ib)
                    lines.push(ia, ib);
                if (ib < ic)
                    lines.push(ib, ic);
                if (ic < ia)
                    lines.push(ic, ia);
            }
            else {
                // subdivide the triangle abc into 4 by adding a vertex (with the correct distance from the origin)
                // between each segment ab, bc and cd, then calling the function recursively
                const abMid1 = a.plus(b).toLength(1), bcMid1 = b.plus(c).toLength(1), caMid1 = c.plus(a).toLength(1);
                // indexes of new vertices:
                const iabm = vertices.length, ibcm = iabm + 1, icam = iabm + 2;
                vertices.push(abMid1, bcMid1, caMid1);
                tesselateRecursively(abMid1, bcMid1, caMid1, res - 1, vertices, triangles, iabm, ibcm, icam, lines);
                tesselateRecursively(a, abMid1, caMid1, res - 1, vertices, triangles, ia, iabm, icam, lines);
                tesselateRecursively(b, bcMid1, abMid1, res - 1, vertices, triangles, ib, ibcm, iabm, lines);
                tesselateRecursively(c, caMid1, bcMid1, res - 1, vertices, triangles, ic, icam, ibcm, lines);
            }
        }
        const mesh = new Mesh()
            .addVertexBuffer('normals', 'ts_Normal')
            .addIndexBuffer('TRIANGLES')
            .addIndexBuffer('LINES');
        mesh.vertices.push(...vertices);
        subdivisions = undefined == subdivisions ? 4 : subdivisions;
        for (let i = 0; i < 20; i++) {
            const [ia, ic, ib] = triangles.slice(i * 3, i * 3 + 3);
            tesselateRecursively(vertices[ia], vertices[ic], vertices[ib], subdivisions, mesh.vertices, mesh.TRIANGLES, ia, ic, ib, mesh.LINES);
        }
        mesh.normals = mesh.vertices;
        mesh.compile();
        return mesh;
    }
    static aabb(aabb) {
        const matrix = M4.multiplyMultiple(M4.translate(aabb.min), M4.scale(aabb.size().max(new V3(NLA_PRECISION, NLA_PRECISION, NLA_PRECISION))));
        const mesh = Mesh.cube().transform(matrix);
        // mesh.vertices = aabb.corners()
        mesh.computeNormalLines(20);
        mesh.compile();
        return mesh;
    }
    static offsetVertices(vertices, offset, close, normals) {
        assertVectors.apply(undefined, vertices);
        assertVectors(offset);
        const mesh = new Mesh()
            .addIndexBuffer('TRIANGLES')
            .addVertexBuffer('coords', 'ts_TexCoord');
        normals && mesh.addVertexBuffer('normals', 'ts_Normal');
        mesh.vertices = vertices.concat(vertices.map(v => v.plus(offset)));
        const vl = vertices.length;
        mesh.coords = arrayFromFunction(vl * 2, (i) => [(i % vl) / vl, (i / vl) | 0]);
        const triangles = mesh.TRIANGLES;
        for (let i = 0; i < vertices.length - 1; i++) {
            pushQuad(triangles, false, i, i + 1, vertices.length + i, vertices.length + i + 1);
        }
        if (close) {
            pushQuad(triangles, false, vertices.length - 1, 0, vertices.length * 2 - 1, vertices.length);
        }
        if (normals) {
            mesh.normals = normals.concat(normals);
        }
        mesh.compile();
        return mesh;
    }
    // Creates a new $Mesh by rotating $vertices by $totalRads around $lineAxis (according to the right-hand
    // rule). $steps is the number of steps to take. $close is whether the vertices of the first and last step
    // should be connected by triangles. If $normals is set (pass an array of V3s of the same length as $vertices),
    // these will also be rotated and correctly added to the mesh.
    // @example const precious = Mesh.rotation([V(10, 0, -2), V(10, 0, 2), V(11, 0, 2), V(11, 0, -2)], , L3.Z, 512)
    static rotation(vertices, lineAxis, totalRads, steps, close = true, normals) {
        const mesh = new Mesh().addIndexBuffer('TRIANGLES');
        normals && mesh.addVertexBuffer('normals', 'ts_Normal');
        const vc = vertices.length, vTotal = vc * steps;
        const rotMat = new M4();
        const triangles = mesh.TRIANGLES;
        for (let i = 0; i < steps; i++) {
            // add triangles
            const rads = totalRads / steps * i;
            M4.rotateLine(lineAxis.anchor, lineAxis.dir1, rads, rotMat);
            mesh.vertices.push(...rotMat.transformedPoints(vertices));
            normals && mesh.normals.push(...rotMat.transformedVectors(normals));
            if (close || i !== steps - 1) {
                for (let j = 0; j < vc - 1; j++) {
                    pushQuad(triangles, false, i * vc + j + 1, i * vc + j, ((i + 1) * vc + j + 1) % vTotal, ((i + 1) * vc + j) % vTotal);
                }
            }
        }
        mesh.compile();
        return mesh;
    }
    static parametric(pF, pN, sMin, sMax, tMin, tMax, sRes, tRes) {
        const mesh = new Mesh()
            .addIndexBuffer('TRIANGLES')
            .addVertexBuffer('normals', 'ts_Normal');
        for (let si = 0; si <= sRes; si++) {
            const s = lerp(sMin, sMax, si / sRes);
            for (let ti = 0; ti <= tRes; ti++) {
                const t = lerp(tMin, tMax, ti / tRes);
                mesh.vertices.push(pF(s, t));
                pN && mesh.normals.push(pN(s, t));
                if (ti < tRes && si < sRes) {
                    const offset = ti + si * (tRes + 1);
                    pushQuad(mesh.TRIANGLES, false, offset, offset + tRes + 1, offset + 1, offset + tRes + 2);
                }
            }
        }
        return mesh;
    }
    static load(json) {
        const mesh = new Mesh();
        if (Array.isArray(json.vertices[0])) {
            mesh.vertices = json.vertices.map(x => V(x));
        }
        else {
            throw new Error();
        }
        if (json.triangles) {
            mesh.addIndexBuffer('TRIANGLES');
            mesh.TRIANGLES = json.triangles;
        }
        if (json.normals) {
            mesh.addVertexBuffer('normals', 'ts_Normal');
            mesh.normals = json.normals;
        }
        mesh.compile();
        return mesh;
    }
}
// unique corners of a unit cube. Used by Mesh.cube to generate a cube mesh.
Mesh.UNIT_CUBE_CORNERS = [
    V3.O,
    new V3(0, 0, 1),
    new V3(0, 1, 0),
    new V3(0, 1, 1),
    new V3(1, 0, 0),
    new V3(1, 0, 1),
    new V3(1, 1, 0),
    V3.XYZ,
];

/* tslint:disable:no-string-literal */
const WGL$2 = WebGLRenderingContext;
/**
 * These are all the draw modes usable in OpenGL ES
 */
const DRAW_MODE_NAMES = {
    [WGL$2.POINTS]: 'POINTS',
    [WGL$2.LINES]: 'LINES',
    [WGL$2.LINE_STRIP]: 'LINE_STRIP',
    [WGL$2.LINE_LOOP]: 'LINE_LOOP',
    [WGL$2.TRIANGLES]: 'TRIANGLES',
    [WGL$2.TRIANGLE_STRIP]: 'TRIANGLE_STRIP',
    [WGL$2.TRIANGLE_FAN]: 'TRIANGLE_FAN',
};
const DRAW_MODE_CHECKS = {
    [WGL$2.POINTS]: _ => true,
    [WGL$2.LINES]: x => 0 == x % 2,
    [WGL$2.LINE_STRIP]: x => x > 2,
    [WGL$2.LINE_LOOP]: x => x > 2,
    [WGL$2.TRIANGLES]: x => 0 == x % 3,
    [WGL$2.TRIANGLE_STRIP]: x => x > 3,
    [WGL$2.TRIANGLE_FAN]: x => x > 3,
};
const SHADER_VAR_TYPES = ['FLOAT', 'FLOAT_MAT2', 'FLOAT_MAT3', 'FLOAT_MAT4', 'FLOAT_VEC2', 'FLOAT_VEC3', 'FLOAT_VEC4', 'INT', 'INT_VEC2', 'INT_VEC3', 'INT_VEC4', 'UNSIGNED_INT'];
function isArray(obj) {
    return Array == obj.constructor || Float32Array == obj.constructor || Float64Array == obj.constructor;
}
function isFloatArray(obj) {
    return Float32Array == obj.constructor || Float64Array == obj.constructor ||
        Array.isArray(obj) && obj.every(x => 'number' == typeof x);
}
function isIntArray(x) {
    if ([Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array]
        .some(y => x instanceof y)) {
        return true;
    }
    return (x instanceof Float32Array || x instanceof Float64Array || Array.isArray(x)) &&
        x.every(x => Number.isInteger(x));
}
//const x:UniformTypes = undefined as 'FLOAT_VEC4' | 'FLOAT_VEC3'
class Shader {
    /**
     * Provides a convenient wrapper for WebGL shaders. A few uniforms and attributes,
     * prefixed with `gl_`, are automatically added to all shader sources to make
     * simple shaders easier to write.
     * Headers for the following variables are automatically prepended to the passed source. The correct variables
     * are also automatically passed to the shader when drawing.
     *
     * For vertex and fragment shaders:
     uniform mat3 ts_NormalMatrix;
     uniform mat4 ts_ModelViewMatrix;
     uniform mat4 ts_ProjectionMatrix;
     uniform mat4 ts_ModelViewProjectionMatrix;
     uniform mat4 ts_ModelViewMatrixInverse;
     uniform mat4 ts_ProjectionMatrixInverse;
     uniform mat4 ts_ModelViewProjectionMatrixInverse;
     *
     *
     * Example usage:
     *
     *  const shader = new GL.Shader(
     *      `void main() { gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex; }`,
     *      `uniform vec4 color; void main() { gl_FragColor = color; }`)
     *
     *  shader.uniforms({ color: [1, 0, 0, 1] }).draw(mesh)
     *
     * Compiles a shader program using the provided vertex and fragment shaders.
     */
    constructor(vertexSource, fragmentSource, gl = currentGL()) {
        this.projectionMatrixVersion = -1;
        this.modelViewMatrixVersion = -1;
        // const versionRegex = /^(?:\s+|\/\/[\s\S]*?[\r\n]+|\/\*[\s\S]*?\*\/)+(#version\s+(\d+)\s+es)/
        // Headers are prepended to the sources to provide some automatic functionality.
        const header = `
		uniform mat3 ts_NormalMatrix;
		uniform mat4 ts_ModelViewMatrix;
		uniform mat4 ts_ProjectionMatrix;
		uniform mat4 ts_ModelViewProjectionMatrix;
		uniform mat4 ts_ModelViewMatrixInverse;
		uniform mat4 ts_ProjectionMatrixInverse;
		uniform mat4 ts_ModelViewProjectionMatrixInverse;
	`;
        const matrixNames = header.match(/\bts_\w+/g);
        // Compile and link errors are thrown as strings.
        function compileSource(type, source) {
            const shader = gl.createShader(type);
            gl.shaderSource(shader, source);
            gl.compileShader(shader);
            if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
                throw new Error('compile error: ' + gl.getShaderInfoLog(shader));
            }
            return shader;
        }
        this.gl = gl;
        this.program = gl.createProgram();
        gl.attachShader(this.program, compileSource(gl.VERTEX_SHADER, vertexSource));
        gl.attachShader(this.program, compileSource(gl.FRAGMENT_SHADER, fragmentSource));
        gl.linkProgram(this.program);
        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {
            throw new Error('link error: ' + gl.getProgramInfoLog(this.program));
        }
        this.attributeLocations = {};
        this.uniformLocations = {};
        this.constantAttributes = {};
        // Check for the use of built-in matrices that require expensive matrix
        // multiplications to compute, and record these in `activeMatrices`.
        this.activeMatrices = {};
        matrixNames && matrixNames.forEach(name => {
            if (gl.getUniformLocation(this.program, name)) {
                this.activeMatrices[name] = true;
            }
        });
        this.uniformInfos = {};
        for (let i = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS); i-- > 0;) {
            // see https://www.khronos.org/registry/OpenGL-Refpages/es2.0/xhtml/glGetActiveUniform.xml
            // this.program has already been checked
            // i is in bounds
            const info = gl.getActiveUniform(this.program, i);
            this.uniformInfos[info.name] = info;
        }
    }
    static create(vertexSource, fragmentSource, gl) {
        return new Shader(vertexSource, fragmentSource, gl);
    }
    /**
     * Set a uniform for each property of `uniforms`. The correct `viewerGL.uniform*()` method is inferred from the
     * value types and from the stored uniform sampler flags.
     */
    uniforms(uniforms) {
        const gl = this.gl;
        gl.useProgram(this.program);
        for (const name in uniforms) {
            const location = this.uniformLocations[name] || gl.getUniformLocation(this.program, name);
            // !location && console.warn(name + ' uniform is not used in shader')
            if (!location)
                continue;
            this.uniformLocations[name] = location;
            let value = uniforms[name];
            const info = this.uniformInfos[name];
            if (NLA_DEBUG) {
                // TODO: better errors
                if (gl.SAMPLER_2D == info.type || gl.SAMPLER_CUBE == info.type || gl.INT == info.type) {
                    if (1 == info.size) {
                        assert(Number.isInteger(value));
                    }
                    else {
                        assert(isIntArray(value) && value.length == info.size, 'value must be int array if info.size != 1');
                    }
                }
                assert(gl.FLOAT != info.type ||
                    (1 == info.size && 'number' === typeof value || isFloatArray(value) && info.size == value.length));
                assert(gl.FLOAT_VEC3 != info.type ||
                    (1 == info.size && value instanceof V3 ||
                        Array.isArray(value) && info.size == value.length && assertVectors(...value)));
                assert(gl.FLOAT_VEC4 != info.type || 1 != info.size || isFloatArray(value) && value.length == 4);
                assert(gl.FLOAT_MAT4 != info.type || value instanceof M4, () => value.toSource());
                assert(gl.FLOAT_MAT3 != info.type || value.length == 9 || value instanceof M4);
            }
            if (value instanceof V3) {
                value = value.toArray();
            }
            if (gl.FLOAT_VEC4 == info.type && info.size != 1) {
                gl.uniform4fv(location, value.concatenated());
            }
            else if (gl.FLOAT == info.type && info.size != 1) {
                gl.uniform1fv(location, value);
            }
            else if (gl.FLOAT_VEC3 == info.type && info.size != 1) {
                gl.uniform3fv(location, V3.pack(value));
            }
            else if (value.length) {
                switch (value.length) {
                    case 1:
                        gl.uniform1fv(location, value);
                        break;
                    case 2:
                        gl.uniform2fv(location, value);
                        break;
                    case 3:
                        gl.uniform3fv(location, value);
                        break;
                    case 4:
                        gl.uniform4fv(location, value);
                        break;
                    // Matrices are automatically transposed, since WebGL uses column-major
                    // indices instead of row-major indices.
                    case 9:
                        gl.uniformMatrix3fv(location, false, new Float32Array([
                            value[0], value[3], value[6],
                            value[1], value[4], value[7],
                            value[2], value[5], value[8],
                        ]));
                        break;
                    case 16:
                        gl.uniformMatrix4fv(location, false, new Float32Array([
                            value[0], value[4], value[8], value[12],
                            value[1], value[5], value[9], value[13],
                            value[2], value[6], value[10], value[14],
                            value[3], value[7], value[11], value[15],
                        ]));
                        break;
                    default:
                        throw new Error('don\'t know how to load uniform "' + name + '" of length ' + value.length);
                }
            }
            else if ('number' == typeof value) {
                if (gl.SAMPLER_2D == info.type || gl.SAMPLER_CUBE == info.type || gl.INT == info.type) {
                    gl.uniform1i(location, value);
                }
                else {
                    gl.uniform1f(location, value);
                }
            }
            else if ('boolean' == typeof value) {
                gl.uniform1i(location, +value);
            }
            else if (value instanceof M4) {
                const m = value.m;
                if (gl.FLOAT_MAT4 == info.type) {
                    gl.uniformMatrix4fv(location, false, [
                        m[0], m[4], m[8], m[12],
                        m[1], m[5], m[9], m[13],
                        m[2], m[6], m[10], m[14],
                        m[3], m[7], m[11], m[15]
                    ]);
                }
                else if (gl.FLOAT_MAT3 == info.type) {
                    gl.uniformMatrix3fv(location, false, [
                        m[0], m[4], m[8],
                        m[1], m[5], m[9],
                        m[2], m[6], m[10]
                    ]);
                }
                else if (gl.FLOAT_MAT2 == info.type) {
                    gl.uniformMatrix2fv(location, false, new Float32Array([
                        m[0], m[4],
                        m[1], m[5]
                    ]));
                }
                else {
                    throw new Error(`Can't assign M4 to ${info.type}`);
                }
            }
            else {
                throw new Error('attempted to set uniform "' + name + '" to invalid value ' + value);
            }
        }
        return this;
    }
    attributes(attributes) {
        const gl = this.gl;
        gl.useProgram(this.program);
        for (const name in attributes) {
            const location = this.attributeLocations[name] || gl.getAttribLocation(this.program, name);
            if (location == -1) {
                if (!name.startsWith('ts_')) {
                    console.warn(`Vertex buffer ${name} was not bound because the attribute is not active.`);
                }
                continue;
            }
            this.attributeLocations[name] = location;
            gl.disableVertexAttribArray(location);
            let value = attributes[name];
            if (value instanceof V3) {
                value = value.toArray();
            }
            if ('number' === typeof value) {
                gl.vertexAttrib1f(location, value);
            }
            else {
                gl.vertexAttrib4fv(location, value);
                // switch ((value as number[]).length) {
                // 	case 1:
                // 		gl.vertexAttrib1fv(location, value as number[])
                // 		break
                // 	case 2:
                // 		gl.vertexAttrib2fv(location, value as number[])
                // 		break
                // 	case 3:
                // 		gl.vertexAttrib3fv(location, value as number[])
                // 		break
                // 	case 4:
                // 		break
                // }
            }
            this.constantAttributes[name] = true;
        }
        return this;
    }
    /**
     * Sets all uniform matrix attributes, binds all relevant buffers, and draws the mesh geometry as indexed
     * triangles or indexed LINES. Set `mode` to `gl.LINES` (and either add indices to `LINES` or call
     * `computeWireframe()`) to draw the mesh in wireframe.
     *
     * @param mesh
     * @param mode Defaults to 'TRIANGLES'. Must be passed as string so the correct index buffer can be
     *     automatically drawn.
     * @param start int
     * @param count int
     */
    draw(mesh, mode = WGL$2.TRIANGLES, start, count) {
        assert(mesh.hasBeenCompiled, 'mesh.hasBeenCompiled');
        assert(undefined != DRAW_MODE_NAMES[mode]);
        const modeName = DRAW_MODE_NAMES[mode];
        // assert(mesh.indexBuffers[modeStr], `mesh.indexBuffers[${modeStr}] undefined`)
        return this.drawBuffers(mesh.vertexBuffers, mesh.indexBuffers[modeName], mode, start, count);
    }
    /**
     * Sets all uniform matrix attributes, binds all relevant buffers, and draws the
     * indexed mesh geometry. The `vertexBuffers` argument is a map from attribute
     * names to `Buffer` objects of type `WGL.ARRAY_BUFFER`, `indexBuffer` is a `Buffer`
     * object of type `WGL.ELEMENT_ARRAY_BUFFER`, and `mode` is a WebGL primitive mode
     * like `WGL.TRIANGLES` or `WGL.LINES`. This method automatically creates and caches
     * vertex attribute pointers for attributes as needed.
     */
    drawBuffers(vertexBuffers, indexBuffer, mode = WGL$2.TRIANGLES, start = 0, count) {
        const gl = this.gl;
        assert(undefined != DRAW_MODE_NAMES[mode]);
        assertf(() => 1 <= Object.keys(vertexBuffers).length);
        Object.keys(vertexBuffers).forEach(key => assertInst(Buffer$1, vertexBuffers[key]));
        // Only varruct up the built-in matrices that are active in the shader
        const on = this.activeMatrices;
        const modelViewMatrixInverse = (on['ts_ModelViewMatrixInverse'] || on['ts_NormalMatrix'])
            //&& this.modelViewMatrixVersion != gl.modelViewMatrixVersion
            && gl.modelViewMatrix.inversed();
        const projectionMatrixInverse = on['ts_ProjectionMatrixInverse']
            //&& this.projectionMatrixVersion != gl.projectionMatrixVersion
            && gl.projectionMatrix.inversed();
        const modelViewProjectionMatrix = (on['ts_ModelViewProjectionMatrix'] || on['ts_ModelViewProjectionMatrixInverse'])
            //&& (this.projectionMatrixVersion != gl.projectionMatrixVersion || this.modelViewMatrixVersion !=
            // gl.modelViewMatrixVersion)
            && gl.projectionMatrix.times(gl.modelViewMatrix);
        const uni = {}; // Uniform Matrices
        on['ts_ModelViewMatrix']
            && this.modelViewMatrixVersion != gl.modelViewMatrixVersion
            && (uni['ts_ModelViewMatrix'] = gl.modelViewMatrix);
        on['ts_ModelViewMatrixInverse'] && (uni['ts_ModelViewMatrixInverse'] = modelViewMatrixInverse);
        on['ts_ProjectionMatrix']
            && this.projectionMatrixVersion != gl.projectionMatrixVersion
            && (uni['ts_ProjectionMatrix'] = gl.projectionMatrix);
        projectionMatrixInverse && (uni['ts_ProjectionMatrixInverse'] = projectionMatrixInverse);
        modelViewProjectionMatrix && (uni['ts_ModelViewProjectionMatrix'] = modelViewProjectionMatrix);
        modelViewProjectionMatrix && on['ts_ModelViewProjectionMatrixInverse']
            && (uni['ts_ModelViewProjectionMatrixInverse'] = modelViewProjectionMatrix.inversed());
        on['ts_NormalMatrix']
            && this.modelViewMatrixVersion != gl.modelViewMatrixVersion
            && (uni['ts_NormalMatrix'] = modelViewMatrixInverse.transposed());
        this.uniforms(uni);
        this.projectionMatrixVersion = gl.projectionMatrixVersion;
        this.modelViewMatrixVersion = gl.modelViewMatrixVersion;
        // Create and enable attribute pointers as necessary.
        let minVertexBufferLength = Infinity;
        for (const attribute in vertexBuffers) {
            const buffer = vertexBuffers[attribute];
            assert(buffer.hasBeenCompiled);
            const location = this.attributeLocations[attribute] || gl.getAttribLocation(this.program, attribute);
            if (location == -1 || !buffer.buffer) {
                if (!attribute.startsWith('ts_')) {
                    console.warn(`Vertex buffer ${attribute} was not bound because the attribute is not active.`);
                }
                continue;
            }
            this.attributeLocations[attribute] = location;
            gl.bindBuffer(WGL$2.ARRAY_BUFFER, buffer.buffer);
            gl.enableVertexAttribArray(location);
            gl.vertexAttribPointer(location, buffer.spacing, WGL$2.FLOAT, false, 0, 0);
            minVertexBufferLength = Math.min(minVertexBufferLength, buffer.count);
        }
        // Disable unused attribute pointers.
        for (const attribute in this.attributeLocations) {
            if (!(attribute in vertexBuffers)) {
                gl.disableVertexAttribArray(this.attributeLocations[attribute]);
            }
        }
        if (NLA_DEBUG) {
            const numAttribs = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);
            for (let i = 0; i < numAttribs; ++i) {
                const buffer = gl.getVertexAttrib(i, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING);
                if (!buffer) {
                    const info = gl.getActiveAttrib(this.program, i);
                    if (!this.constantAttributes[info.name]) {
                        console.warn('No buffer is bound to attribute ' + info.name + ' and it was not set with .attributes()');
                    }
                }
                // console.log('name:', info.name, 'type:', info.type, 'size:', info.size)
            }
        }
        // Draw the geometry.
        if (minVertexBufferLength) {
            if (undefined === count) {
                count = (indexBuffer ? indexBuffer.count : minVertexBufferLength);
            }
            assert(DRAW_MODE_CHECKS[mode](count), 'count ' + count + ' doesn\'t fulfill requirement '
                + DRAW_MODE_CHECKS[mode].toString() + ' for mode ' + DRAW_MODE_NAMES[mode]);
            if (indexBuffer) {
                assert(indexBuffer.hasBeenCompiled);
                assert(minVertexBufferLength > indexBuffer.maxValue);
                assert(count % indexBuffer.spacing == 0);
                assert(start % indexBuffer.spacing == 0);
                if (start + count > indexBuffer.count) {
                    throw new Error('Buffer not long enough for passed parameters start/length/buffer length' + ' ' + start + ' ' + count + ' ' + indexBuffer.count);
                }
                gl.bindBuffer(WGL$2.ELEMENT_ARRAY_BUFFER, indexBuffer.buffer);
                // start parameter has to be multiple of sizeof(WGL.UNSIGNED_SHORT)
                gl.drawElements(mode, count, WGL$2.UNSIGNED_SHORT, 2 * start);
            }
            else {
                if (start + count > minVertexBufferLength) {
                    throw new Error('invalid');
                }
                gl.drawArrays(mode, start, count);
            }
            gl.drawCallCount++;
        }
        return this;
    }
}

class Texture {
    /**
     * Provides a simple wrapper around WebGL textures that supports render-to-texture.
     *
     * The arguments `width` and `height` give the size of the texture in texels.
     * WebGL texture dimensions must be powers of two unless `filter` is set to
     * either `WGL.NEAREST` or `WGL.LINEAR` and `wrap` is set to `WGL.CLAMP_TO_EDGE`
     * (which they are by default).
     *
     * Texture parameters can be passed in via the `options` argument.
     * Example usage:
     *
     *      let tex = new GL.Texture(256, 256, {
         *       magFilter: WGL.NEAREST,
         *       minFilter: WGL.LINEAR,
         *
         *       wrapS: WGL.REPEAT,
         *       wrapT: WGL.REPEAT,
         *
         *       format: WGL.RGB, // Defaults to WGL.RGBA
         *       type: WGL.FLOAT // Defaults to WGL.UNSIGNED_BYTE
         *     })
     *
     */
    constructor(width, height, options = {}, gl = currentGL()) {
        this.gl = gl;
        this.width = width;
        this.height = height;
        this.format = options.format || gl.RGBA;
        this.internalFormat = options.internalFormat || gl.RGBA;
        this.type = options.type || gl.UNSIGNED_BYTE;
        const magFilter = options.filter || options.magFilter || gl.LINEAR;
        const minFilter = options.filter || options.minFilter || gl.LINEAR;
        if (this.type === gl.FLOAT) {
            if (gl.version != 2 && !gl.getExtension('OES_texture_float')) {
                throw new Error('OES_texture_float is required but not supported');
            }
            if ((minFilter !== gl.NEAREST || magFilter !== gl.NEAREST) && !gl.getExtension('OES_texture_float_linear')) {
                throw new Error('OES_texture_float_linear is required but not supported');
            }
        }
        else if (this.type === gl.HALF_FLOAT_OES) {
            if (!gl.getExtension('OES_texture_half_float')) {
                throw new Error('OES_texture_half_float is required but not supported');
            }
            if ((minFilter !== gl.NEAREST || magFilter !== gl.NEAREST) && !gl.getExtension('OES_texture_half_float_linear')) {
                throw new Error('OES_texture_half_float_linear is required but not supported');
            }
        }
        this.texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, options.wrap || options.wrapS || gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, options.wrap || options.wrapT || gl.CLAMP_TO_EDGE);
        gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, width, height, 0, this.format, this.type, options.data);
    }
    setData(data) {
        this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);
        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.format, this.width, this.height, 0, this.format, this.type, data);
    }
    bind(unit) {
        this.gl.activeTexture((this.gl.TEXTURE0 + unit));
        this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);
    }
    unbind(unit) {
        this.gl.activeTexture((this.gl.TEXTURE0 + unit));
        this.gl.bindTexture(this.gl.TEXTURE_2D, null);
    }
    drawTo(render) {
        const gl = this.gl;
        const prevFramebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);
        if (!this.framebuffer) {
            // create a renderbuffer for the depth component
            const prevRenderbuffer = gl.getParameter(gl.RENDERBUFFER_BINDING);
            const depthRenderbuffer = gl.createRenderbuffer();
            gl.bindRenderbuffer(gl.RENDERBUFFER, depthRenderbuffer);
            // DEPTH_COMPONENT16 is the only depth format
            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.width, this.height);
            gl.bindRenderbuffer(gl.RENDERBUFFER, prevRenderbuffer);
            // create a framebuffer to render to
            this.framebuffer = gl.createFramebuffer();
            gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0);
            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthRenderbuffer);
            if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) !== gl.FRAMEBUFFER_COMPLETE) {
                throw new Error('Rendering to this texture is not supported (incomplete this.framebuffer)');
            }
        }
        else if (prevFramebuffer !== this.framebuffer) {
            gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
        }
        const prevViewport = gl.getParameter(gl.VIEWPORT);
        gl.viewport(0, 0, this.width, this.height);
        render(gl);
        // restore previous state
        prevFramebuffer !== this.framebuffer && gl.bindFramebuffer(gl.FRAMEBUFFER, prevFramebuffer);
        gl.viewport(prevViewport[0], prevViewport[1], prevViewport[2], prevViewport[3]);
    }
    swapWith(other) {
        assert(this.gl == other.gl);
        let temp;
        temp = other.texture;
        other.texture = this.texture;
        this.texture = temp;
        temp = other.width;
        other.width = this.width;
        this.width = temp;
        temp = other.height;
        other.height = this.height;
        this.height = temp;
    }
    /**
     * Return a new texture created from `imgElement`, an `<img>` tag.
     */
    static fromImage(imgElement, options = {}, gl = currentGL()) {
        const texture = new Texture(imgElement.width, imgElement.height, options, gl);
        try {
            gl.texImage2D(gl.TEXTURE_2D, 0, texture.format, texture.format, texture.type, imgElement);
        }
        catch (e) {
            if (location.protocol == 'file:') {
                throw new Error('imgElement not loaded for security reasons (serve this page over "http://" instead)');
            }
            else {
                throw new Error('imgElement not loaded for security reasons (imgElement must originate from the same ' +
                    'domain as this page or use Cross-Origin Resource Sharing)');
            }
        }
        if (options.minFilter && options.minFilter != gl.NEAREST && options.minFilter != gl.LINEAR) {
            gl.generateMipmap(gl.TEXTURE_2D);
        }
        return texture;
    }
    /**
     * Returns a checkerboard texture that will switch to the correct texture when it loads.
     */
    static fromURLSwitch(url, options, gl = currentGL()) {
        Texture.checkerBoardCanvas = Texture.checkerBoardCanvas || (function () {
            const c = document.createElement('canvas').getContext('2d');
            if (!c)
                throw new Error('Could not create 2d canvas.');
            c.canvas.width = c.canvas.height = 128;
            for (let y = 0; y < c.canvas.height; y += 16) {
                for (let x = 0; x < c.canvas.width; x += 16) {
                    //noinspection JSBitwiseOperatorUsage
                    c.fillStyle = (x ^ y) & 16 ? '#FFF' : '#DDD';
                    c.fillRect(x, y, 16, 16);
                }
            }
            return c.canvas;
        })();
        const texture = Texture.fromImage(Texture.checkerBoardCanvas, options);
        const image = new Image();
        image.onload = () => Texture.fromImage(image, options, gl).swapWith(texture);
        // error event doesn't return a reason. Most likely a 404.
        image.onerror = () => { throw new Error('Could not load image ' + image.src + '. 404?'); };
        image.src = url;
        return texture;
    }
    static fromURL(url, options, gl = currentGL()) {
        return new Promise((resolve, reject) => {
            const image = new Image();
            image.onload = () => resolve(Texture.fromImage(image, options, gl));
            image.onerror = () => reject('Could not load image ' + image.src + '. 404?');
            image.src = url;
        });
    }
}

/*
** Copyright (c) 2012 The Khronos Group Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and/or associated documentation files (the
** 'Materials'), to deal in the Materials without restriction, including
** without limitation the rights to use, copy, modify, merge, publish,
** distribute, sublicense, and/or sell copies of the Materials, and to
** permit persons to whom the Materials are furnished to do so, subject to
** the following conditions:
**
** The above copyright notice and this permission notice shall be included
** in all copies or substantial portions of the Materials.
**
** THE MATERIALS ARE PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*/
// Various functions for helping debug WebGL apps.
/**
 * Wrapped logging function.
 * @param msg Message to log.
 */
function log(msg) {
    if (window.console && window.console.log) {
        window.console.log(msg);
    }
}
/**
 * Wrapped error logging function.
 * @param msg Message to log.
 */
function error(msg) {
    if (window.console && window.console.error) {
        window.console.error(msg);
    }
    else {
        log(msg);
    }
}
/**
 * Which arguments are enums based on the number of arguments to the function.
 * So
 *    'texImage2D': {
 *       9: { 0:true, 2:true, 6:true, 7:true },
 *       6: { 0:true, 2:true, 3:true, 4:true },
 *    },
 *
 * means if there are 9 arguments then 6 and 7 are enums, if there are 6
 * arguments 3 and 4 are enums
 *
 * @type {!Object.<number, !Object.<number, string>}
 */
const glValidEnumContexts = {
    // Generic setters and getters
    'enable': { 1: { 0: true } },
    'disable': { 1: { 0: true } },
    'getParameter': { 1: { 0: true } },
    // Rendering
    'drawArrays': { 3: { 0: true } },
    'drawElements': { 4: { 0: true, 2: true } },
    // Shaders
    'createShader': { 1: { 0: true } },
    'getShaderParameter': { 2: { 1: true } },
    'getProgramParameter': { 2: { 1: true } },
    'getShaderPrecisionFormat': { 2: { 0: true, 1: true } },
    // Vertex attributes
    'getVertexAttrib': { 2: { 1: true } },
    'vertexAttribPointer': { 6: { 2: true } },
    // Textures
    'bindTexture': { 2: { 0: true } },
    'activeTexture': { 1: { 0: true } },
    'getTexParameter': { 2: { 0: true, 1: true } },
    'texParameterf': { 3: { 0: true, 1: true } },
    'texParameteri': { 3: { 0: true, 1: true, 2: true } },
    // texImage2D and texSubImage2D are defined below with WebGL 2 entrypoints
    'copyTexImage2D': { 8: { 0: true, 2: true } },
    'copyTexSubImage2D': { 8: { 0: true } },
    'generateMipmap': { 1: { 0: true } },
    // compressedTexImage2D and compressedTexSubImage2D are defined below with WebGL 2 entrypoints
    // Buffer objects
    'bindBuffer': { 2: { 0: true } },
    // bufferData and bufferSubData are defined below with WebGL 2 entrypoints
    'getBufferParameter': { 2: { 0: true, 1: true } },
    // Renderbuffers and framebuffers
    'pixelStorei': { 2: { 0: true, 1: true } },
    // readPixels is defined below with WebGL 2 entrypoints
    'bindRenderbuffer': { 2: { 0: true } },
    'bindFramebuffer': { 2: { 0: true } },
    'checkFramebufferStatus': { 1: { 0: true } },
    'framebufferRenderbuffer': { 4: { 0: true, 1: true, 2: true } },
    'framebufferTexture2D': { 5: { 0: true, 1: true, 2: true } },
    'getFramebufferAttachmentParameter': { 3: { 0: true, 1: true, 2: true } },
    'getRenderbufferParameter': { 2: { 0: true, 1: true } },
    'renderbufferStorage': { 4: { 0: true, 1: true } },
    // Frame buffer operations (clear, blend, depth test, stencil)
    'clear': { 1: { 0: { 'enumBitwiseOr': ['COLOR_BUFFER_BIT', 'DEPTH_BUFFER_BIT', 'STENCIL_BUFFER_BIT'] } } },
    'depthFunc': { 1: { 0: true } },
    'blendFunc': { 2: { 0: true, 1: true } },
    'blendFuncSeparate': { 4: { 0: true, 1: true, 2: true, 3: true } },
    'blendEquation': { 1: { 0: true } },
    'blendEquationSeparate': { 2: { 0: true, 1: true } },
    'stencilFunc': { 3: { 0: true } },
    'stencilFuncSeparate': { 4: { 0: true, 1: true } },
    'stencilMaskSeparate': { 2: { 0: true } },
    'stencilOp': { 3: { 0: true, 1: true, 2: true } },
    'stencilOpSeparate': { 4: { 0: true, 1: true, 2: true, 3: true } },
    // Culling
    'cullFace': { 1: { 0: true } },
    'frontFace': { 1: { 0: true } },
    // ANGLE_instanced_arrays extension
    'drawArraysInstancedANGLE': { 4: { 0: true } },
    'drawElementsInstancedANGLE': { 5: { 0: true, 2: true } },
    // EXT_blend_minmax extension
    'blendEquationEXT': { 1: { 0: true } },
    // WebGL 2 Buffer objects
    'bufferData': {
        3: { 0: true, 2: true },
        4: { 0: true, 2: true },
        5: { 0: true, 2: true } // WebGL 2
    },
    'bufferSubData': {
        3: { 0: true },
        4: { 0: true },
        5: { 0: true } // WebGL 2
    },
    'copyBufferSubData': { 5: { 0: true, 1: true } },
    'getBufferSubData': { 3: { 0: true }, 4: { 0: true }, 5: { 0: true } },
    // WebGL 2 Framebuffer objects
    'blitFramebuffer': { 10: { 8: { 'enumBitwiseOr': ['COLOR_BUFFER_BIT', 'DEPTH_BUFFER_BIT', 'STENCIL_BUFFER_BIT'] }, 9: true } },
    'framebufferTextureLayer': { 5: { 0: true, 1: true } },
    'invalidateFramebuffer': { 2: { 0: true } },
    'invalidateSubFramebuffer': { 6: { 0: true } },
    'readBuffer': { 1: { 0: true } },
    // WebGL 2 Renderbuffer objects
    'getInternalformatParameter': { 3: { 0: true, 1: true, 2: true } },
    'renderbufferStorageMultisample': { 5: { 0: true, 2: true } },
    // WebGL 2 Texture objects
    'texStorage2D': { 5: { 0: true, 2: true } },
    'texStorage3D': { 6: { 0: true, 2: true } },
    'texImage2D': {
        9: { 0: true, 2: true, 6: true, 7: true },
        6: { 0: true, 2: true, 3: true, 4: true },
        10: { 0: true, 2: true, 6: true, 7: true } // WebGL 2
    },
    'texImage3D': {
        10: { 0: true, 2: true, 7: true, 8: true },
        11: { 0: true, 2: true, 7: true, 8: true }
    },
    'texSubImage2D': {
        9: { 0: true, 6: true, 7: true },
        7: { 0: true, 4: true, 5: true },
        10: { 0: true, 6: true, 7: true } // WebGL 2
    },
    'texSubImage3D': {
        11: { 0: true, 8: true, 9: true },
        12: { 0: true, 8: true, 9: true }
    },
    'copyTexSubImage3D': { 9: { 0: true } },
    'compressedTexImage2D': {
        7: { 0: true, 2: true },
        8: { 0: true, 2: true },
        9: { 0: true, 2: true } // WebGL 2
    },
    'compressedTexImage3D': {
        8: { 0: true, 2: true },
        9: { 0: true, 2: true },
        10: { 0: true, 2: true }
    },
    'compressedTexSubImage2D': {
        8: { 0: true, 6: true },
        9: { 0: true, 6: true },
        10: { 0: true, 6: true } // WebGL 2
    },
    'compressedTexSubImage3D': {
        10: { 0: true, 8: true },
        11: { 0: true, 8: true },
        12: { 0: true, 8: true }
    },
    // WebGL 2 Vertex attribs
    'vertexAttribIPointer': { 5: { 2: true } },
    // WebGL 2 Writing to the drawing buffer
    'drawArraysInstanced': { 4: { 0: true } },
    'drawElementsInstanced': { 5: { 0: true, 2: true } },
    'drawRangeElements': { 6: { 0: true, 4: true } },
    // WebGL 2 Reading back pixels
    'readPixels': {
        7: { 4: true, 5: true },
        8: { 4: true, 5: true } // WebGL 2
    },
    // WebGL 2 Multiple Render Targets
    'clearBufferfv': { 3: { 0: true }, 4: { 0: true } },
    'clearBufferiv': { 3: { 0: true }, 4: { 0: true } },
    'clearBufferuiv': { 3: { 0: true }, 4: { 0: true } },
    'clearBufferfi': { 4: { 0: true } },
    // WebGL 2 Query objects
    'beginQuery': { 2: { 0: true } },
    'endQuery': { 1: { 0: true } },
    'getQuery': { 2: { 0: true, 1: true } },
    'getQueryParameter': { 2: { 1: true } },
    // WebGL 2 Sampler objects
    'samplerParameteri': { 3: { 1: true, 2: true } },
    'samplerParameterf': { 3: { 1: true } },
    'getSamplerParameter': { 2: { 1: true } },
    // WebGL 2 Sync objects
    'fenceSync': { 2: { 0: true, 1: { 'enumBitwiseOr': [] } } },
    'clientWaitSync': { 3: { 1: { 'enumBitwiseOr': ['SYNC_FLUSH_COMMANDS_BIT'] } } },
    'waitSync': { 3: { 1: { 'enumBitwiseOr': [] } } },
    'getSyncParameter': { 2: { 1: true } },
    // WebGL 2 Transform Feedback
    'bindTransformFeedback': { 2: { 0: true } },
    'beginTransformFeedback': { 1: { 0: true } },
    'transformFeedbackVaryings': { 3: { 2: true } },
    // WebGL2 Uniform Buffer Objects and Transform Feedback Buffers
    'bindBufferBase': { 3: { 0: true } },
    'bindBufferRange': { 5: { 0: true } },
    'getIndexedParameter': { 2: { 0: true } },
    'getActiveUniforms': { 3: { 2: true } },
    'getActiveUniformBlockParameter': { 3: { 2: true } }
};
/**
 * Map of numbers to names.
 * @type {Object}
 */
let glEnums = null;
/**
 * Map of names to numbers.
 * @type {Object}
 */
let enumStringToValue = null;
/**
 * Initializes this module. Safe to call more than once.
 * @param ctx A WebGL context. If
 *    you have more than one context it doesn't matter which one
 *    you pass in, it is only used to pull out constants.
 */
function init() {
    if (null === glEnums) {
        glEnums = {};
        enumStringToValue = {};
        const c = window.WebGL2RenderingContext || window.WebGLRenderingContext;
        if (!c)
            throw new Error('Neither WebGL2RenderingContext nor WebGLRenderingContext exists on window.');
        for (const propertyName in c) {
            const prop = c[propertyName];
            if ('number' === typeof prop) {
                glEnums[prop] = propertyName;
                enumStringToValue[propertyName] = prop;
            }
        }
    }
}
/**
 * Returns true or false if value matches any WebGL enum
 * @param value Value to check if it might be an enum.
 * @return True if value matches one of the WebGL defined enums
 */
function mightBeEnum(value) {
    init();
    return (glEnums[value] !== undefined);
}
/**
 * Gets an string version of an WebGL enum.
 *
 * Example:
 *   var str = WebGLDebugUtil.glEnumToString(ctx.getError())
 *
 * @param value Value to return an enum for
 * @return The string version of the enum.
 */
function glEnumToString(value) {
    init();
    var name = glEnums[value];
    return (name !== undefined) ? ('gl.' + name) :
        ('/*UNKNOWN WebGL ENUM*/ 0x' + value.toString(16) + '');
}
/**
 * Converts the argument of a WebGL function to a string.
 * Attempts to convert enum arguments to strings.
 *
 * Example:
 *   WebGLDebugUtil.init(ctx)
 *   var str = WebGLDebugUtil.glFunctionArgToString('bindTexture', 2, 0, gl.TEXTURE_2D)
 *
 * would return 'TEXTURE_2D'
 *
 * @param functionName the name of the WebGL function.
 * @param numArgs the number of arguments passed to the function.
 * @param argumentIndex the index of the argument.
 * @param value The value of the argument.
 * @return The value as a string.
 */
function glFunctionArgToString(functionName, numArgs, argumentIndex, value) {
    const funcInfo = glValidEnumContexts[functionName];
    if (funcInfo !== undefined) {
        const funcOverloadInfo = funcInfo[numArgs];
        if (funcOverloadInfo !== undefined) {
            const argInfo = funcOverloadInfo[argumentIndex];
            if (argInfo) {
                if (typeof argInfo === 'object') {
                    const enums = argInfo.enumBitwiseOr;
                    const orEnums = [];
                    let orResult = 0;
                    for (let i = 0; i < enums.length; ++i) {
                        const enumValue = enumStringToValue[enums[i]];
                        if ((value & enumValue) !== 0) {
                            orResult |= enumValue;
                            orEnums.push(glEnumToString(enumValue));
                        }
                    }
                    if (orResult === value) {
                        return orEnums.join(' | ');
                    }
                    else {
                        return glEnumToString(value);
                    }
                }
                else {
                    return glEnumToString(value);
                }
            }
        }
    }
    if (value === null) {
        return 'null';
    }
    else if (value === undefined) {
        return 'undefined';
    }
    else {
        return value.toString();
    }
}
/**
 * Converts the arguments of a WebGL function to a string.
 * Attempts to convert enum arguments to strings.
 *
 * @param functionName the name of the WebGL function.
 * @param args The arguments.
 * @return The arguments as a string.
 */
function glFunctionArgsToString(functionName, args) {
    // apparently we can't do args.join(',')
    var argStr = '';
    var numArgs = args.length;
    for (var ii = 0; ii < numArgs; ++ii) {
        argStr += ((ii == 0) ? '' : ', ') +
            glFunctionArgToString(functionName, numArgs, ii, args[ii]);
    }
    return argStr;
}
function makePropertyWrapper(wrapper, original, propertyName) {
    //log('wrap prop: ' + propertyName)
    wrapper.__defineGetter__(propertyName, function () {
        return original[propertyName];
    });
    // TODO(gmane): this needs to handle properties that take more than
    // one value?
    wrapper.__defineSetter__(propertyName, function (value) {
        //log('set: ' + propertyName)
        original[propertyName] = value;
    });
}
/**
 * Given a WebGL context returns a wrapped context that calls
 * gl.getError after every command and calls a function if the
 * result is not NO_ERROR.
 *
 * You can supply your own function if you want. For example, if you'd like
 * an exception thrown on any GL error you could do this
 *
 *    function throwOnGLError(err, funcName, args) {
 *      throw new Error(WebGLDebugUtils.glEnumToString(err) +
 *            ' was caused by call to ' + funcName)
 *    }
 *
 *    ctx = WebGLDebugUtils.makeDebugContext(
 *        canvas.getContext('webgl'), throwOnGLError)
 *
 * @param ctx The webgl context to wrap.
 * @param opt_onErrorFunc The function
 *     to call when gl.getError returns an error. If not specified the default
 *     function calls console.log with a message.
 * @param opt_onFunc The
 *     function to call when each webgl function is called. You
 *     can use this to log all calls for example.
 * @param opt_err_ctx The webgl context
 *        to call getError on if different than ctx.
 */
function makeDebugContext(ctx, opt_onErrorFunc, opt_onFunc, opt_err_ctx = ctx) {
    init();
    opt_onErrorFunc = opt_onErrorFunc || function (err, functionName, args) {
        // apparently we can't do args.join(',')
        var argStr = '';
        var numArgs = args.length;
        for (let i = 0; i < numArgs; ++i) {
            argStr += ((i == 0) ? '' : ', ') +
                glFunctionArgToString(functionName, numArgs, i, args[i]);
        }
        error('WebGL error ' + glEnumToString(err) + ' in ' + functionName +
            '(' + argStr + ')');
    };
    // Holds booleans for each GL error so after we get the error ourselves
    // we can still return it to the client app.
    const glErrorShadow = {};
    // Makes a function that calls a WebGL function and then calls getError.
    function makeErrorWrapper(ctx, functionName) {
        return function (...args) {
            if (opt_onFunc) {
                opt_onFunc(functionName, args);
            }
            const result = ctx[functionName].apply(ctx, args);
            const err = opt_err_ctx.getError();
            if (err != 0) {
                glErrorShadow[err] = true;
                opt_onErrorFunc(err, functionName, args);
            }
            return result;
        };
    }
    // Make a an object that has a copy of every property of the WebGL context
    // but wraps all functions.
    const wrapper = {};
    for (let propertyName in ctx) {
        const prop = ctx[propertyName];
        if ('function' === typeof prop) {
            if (propertyName != 'getExtension') {
                wrapper[propertyName] = makeErrorWrapper(ctx, propertyName);
            }
            else {
                let wrapped = makeErrorWrapper(ctx, propertyName);
                wrapper[propertyName] = function () {
                    const result = wrapped.apply(ctx, arguments);
                    if (!result) {
                        return null;
                    }
                    return makeDebugContext(result, opt_onErrorFunc, opt_onFunc, opt_err_ctx);
                };
            }
        }
        else {
            makePropertyWrapper(wrapper, ctx, propertyName);
        }
    }
    // Override the getError function with one that returns our saved results.
    wrapper.getError = function () {
        for (const err in glErrorShadow) {
            if (glErrorShadow.hasOwnProperty(err)) {
                if (glErrorShadow[err]) {
                    glErrorShadow[err] = false;
                    return parseInt(err);
                }
            }
        }
        return ctx.NO_ERROR;
    };
    return wrapper;
}
function isWebGL2RenderingContext(o) {
    return !!o.createTransformFeedback;
}
/**
 * Resets a context to the initial state.
 * @param ctx The webgl context to
 *     reset.
 */
function resetToInitialState(ctx2) {
    if (isWebGL2RenderingContext(ctx2)) {
        ctx2.bindVertexArray(null);
    }
    const numAttribs = ctx2.getParameter(ctx2.MAX_VERTEX_ATTRIBS);
    const tmp = ctx2.createBuffer();
    ctx2.bindBuffer(ctx2.ARRAY_BUFFER, tmp);
    for (let ii = 0; ii < numAttribs; ++ii) {
        ctx2.disableVertexAttribArray(ii);
        ctx2.vertexAttribPointer(ii, 4, ctx2.FLOAT, false, 0, 0);
        ctx2.vertexAttrib1f(ii, 0);
        if (isWebGL2RenderingContext(ctx2)) {
            ctx2.vertexAttribDivisor(ii, 0);
        }
    }
    ctx2.deleteBuffer(tmp);
    const numTextureUnits = ctx2.getParameter(ctx2.MAX_TEXTURE_IMAGE_UNITS);
    for (let ii = 0; ii < numTextureUnits; ++ii) {
        ctx2.activeTexture((ctx2.TEXTURE0 + ii));
        ctx2.bindTexture(ctx2.TEXTURE_CUBE_MAP, null);
        ctx2.bindTexture(ctx2.TEXTURE_2D, null);
        if (isWebGL2RenderingContext(ctx2)) {
            ctx2.bindTexture(ctx2.TEXTURE_2D_ARRAY, null);
            ctx2.bindTexture(ctx2.TEXTURE_3D, null);
            ctx2.bindSampler(ii, null);
        }
    }
    ctx2.activeTexture(ctx2.TEXTURE0);
    ctx2.useProgram(null);
    ctx2.bindBuffer(ctx2.ARRAY_BUFFER, null);
    ctx2.bindBuffer(ctx2.ELEMENT_ARRAY_BUFFER, null);
    ctx2.bindFramebuffer(ctx2.FRAMEBUFFER, null);
    ctx2.bindRenderbuffer(ctx2.RENDERBUFFER, null);
    ctx2.disable(ctx2.BLEND);
    ctx2.disable(ctx2.CULL_FACE);
    ctx2.disable(ctx2.DEPTH_TEST);
    ctx2.disable(ctx2.DITHER);
    ctx2.disable(ctx2.SCISSOR_TEST);
    ctx2.blendColor(0, 0, 0, 0);
    ctx2.blendEquation(ctx2.FUNC_ADD);
    ctx2.blendFunc(ctx2.ONE, ctx2.ZERO);
    ctx2.clearColor(0, 0, 0, 0);
    ctx2.clearDepth(1);
    ctx2.clearStencil(-1);
    ctx2.colorMask(true, true, true, true);
    ctx2.cullFace(ctx2.BACK);
    ctx2.depthFunc(ctx2.LESS);
    ctx2.depthMask(true);
    ctx2.depthRange(0, 1);
    ctx2.frontFace(ctx2.CCW);
    ctx2.hint(ctx2.GENERATE_MIPMAP_HINT, ctx2.DONT_CARE);
    ctx2.lineWidth(1);
    ctx2.pixelStorei(ctx2.PACK_ALIGNMENT, 4);
    ctx2.pixelStorei(ctx2.UNPACK_ALIGNMENT, 4);
    ctx2.pixelStorei(ctx2.UNPACK_FLIP_Y_WEBGL, false);
    ctx2.pixelStorei(ctx2.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
    ctx2.pixelStorei(ctx2.UNPACK_COLORSPACE_CONVERSION_WEBGL, ctx2.BROWSER_DEFAULT_WEBGL);
    ctx2.polygonOffset(0, 0);
    ctx2.sampleCoverage(1, false);
    ctx2.scissor(0, 0, ctx2.canvas.width, ctx2.canvas.height);
    ctx2.stencilFunc(ctx2.ALWAYS, 0, 0xFFFFFFFF);
    ctx2.stencilMask(0xFFFFFFFF);
    ctx2.stencilOp(ctx2.KEEP, ctx2.KEEP, ctx2.KEEP);
    ctx2.viewport(0, 0, ctx2.canvas.width, ctx2.canvas.height);
    ctx2.clear(ctx2.COLOR_BUFFER_BIT | ctx2.DEPTH_BUFFER_BIT | ctx2.STENCIL_BUFFER_BIT);
    if (isWebGL2RenderingContext(ctx2)) {
        ctx2.drawBuffers([ctx2.BACK]);
        ctx2.readBuffer(ctx2.BACK);
        ctx2.bindBuffer(ctx2.COPY_READ_BUFFER, null);
        ctx2.bindBuffer(ctx2.COPY_WRITE_BUFFER, null);
        ctx2.bindBuffer(ctx2.PIXEL_PACK_BUFFER, null);
        ctx2.bindBuffer(ctx2.PIXEL_UNPACK_BUFFER, null);
        const numTransformFeedbacks = ctx2.getParameter(ctx2.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS);
        for (let ii = 0; ii < numTransformFeedbacks; ++ii) {
            ctx2.bindBufferBase(ctx2.TRANSFORM_FEEDBACK_BUFFER, ii, null);
        }
        const numUBOs = ctx2.getParameter(ctx2.MAX_UNIFORM_BUFFER_BINDINGS);
        for (let ii = 0; ii < numUBOs; ++ii) {
            ctx2.bindBufferBase(ctx2.UNIFORM_BUFFER, ii, null);
        }
        ctx2.disable(ctx2.RASTERIZER_DISCARD);
        ctx2.pixelStorei(ctx2.UNPACK_IMAGE_HEIGHT, 0);
        ctx2.pixelStorei(ctx2.UNPACK_SKIP_IMAGES, 0);
        ctx2.pixelStorei(ctx2.UNPACK_ROW_LENGTH, 0);
        ctx2.pixelStorei(ctx2.UNPACK_SKIP_ROWS, 0);
        ctx2.pixelStorei(ctx2.UNPACK_SKIP_PIXELS, 0);
        ctx2.pixelStorei(ctx2.PACK_ROW_LENGTH, 0);
        ctx2.pixelStorei(ctx2.PACK_SKIP_ROWS, 0);
        ctx2.pixelStorei(ctx2.PACK_SKIP_PIXELS, 0);
        ctx2.hint(ctx2.FRAGMENT_SHADER_DERIVATIVE_HINT, ctx2.DONT_CARE);
    }
    // TODO: This should NOT be needed but Firefox fails with 'hint'
    while (ctx2.getError()) { }
}
/**
 * Given a canvas element returns a wrapped canvas element that will
 * simulate lost context. The canvas returned adds the following functions.
 *
 * loseContext:
 *   simulates a lost context event.
 *
 * restoreContext:
 *   simulates the context being restored.
 *
 * lostContextInNCalls:
 *   loses the context after N gl calls.
 *
 * getNumCalls:
 *   tells you how many gl calls there have been so far.
 *
 * setRestoreTimeout:
 *   sets the number of milliseconds until the context is restored
 *   after it has been lost. Defaults to 0. Pass -1 to prevent
 *   automatic restoring.
 *
 * @param canvas The canvas element to wrap.
 */
function makeLostContextSimulatingCanvas(canvas) {
    const canvas2 = canvas;
    let unwrappedContext_;
    const onLost_ = [];
    const onRestored_ = [];
    let wrappedContext_ = {};
    let contextId_ = 1;
    let contextLost_ = false;
    // const resourceId_ = 0
    const resourceDb_ = [];
    let numCallsToLoseContext_ = 0;
    let numCalls_ = 0;
    let canRestore_ = false;
    let restoreTimeout_ = 0;
    // Holds booleans for each GL error so can simulate errors.
    const glErrorShadow_ = {};
    canvas2.getContext = function (f) {
        return function () {
            const ctx = f.apply(canvas2, arguments);
            // Did we get a context and is it a WebGL context?
            // @ts-ignore
            if ((ctx instanceof WebGLRenderingContext) || (window.WebGL2RenderingContext && (ctx instanceof WebGL2RenderingContext))) {
                if (ctx != unwrappedContext_) {
                    if (unwrappedContext_) {
                        throw new Error('got different context');
                    }
                    unwrappedContext_ = ctx;
                    wrappedContext_ = makeLostContextSimulatingContext(unwrappedContext_);
                }
                return wrappedContext_;
            }
            return ctx;
        };
    }(canvas2.getContext);
    function wrapEvent(listener) {
        if (typeof (listener) == 'function') {
            return listener;
        }
        else {
            return function (e) {
                listener.handleEvent(e);
            };
        }
    }
    function addOnContextLostListener(listener) {
        onLost_.push(wrapEvent(listener));
    }
    function addOnContextRestoredListener(listener) {
        onRestored_.push(wrapEvent(listener));
    }
    function wrapAddEventListener(canvas) {
        const f = canvas.addEventListener;
        canvas.addEventListener = function (type, listener) {
            switch (type) {
                case 'webglcontextlost':
                    addOnContextLostListener(listener);
                    break;
                case 'webglcontextrestored':
                    addOnContextRestoredListener(listener);
                    break;
                default:
                    f.apply(canvas, arguments);
            }
        };
    }
    wrapAddEventListener(canvas2);
    canvas2.loseContext = function () {
        if (!contextLost_) {
            contextLost_ = true;
            numCallsToLoseContext_ = 0;
            ++contextId_;
            while (unwrappedContext_.getError())
                clearErrors();
            glErrorShadow_[unwrappedContext_.CONTEXT_LOST_WEBGL] = true;
            const event = makeWebGLContextEvent('context lost');
            const callbacks = onLost_.slice();
            setTimeout(function () {
                //log('numCallbacks:' + callbacks.length)
                for (let ii = 0; ii < callbacks.length; ++ii) {
                    //log('calling callback:' + ii)
                    callbacks[ii](event);
                }
                if (restoreTimeout_ >= 0) {
                    setTimeout(function () {
                        canvas2.restoreContext();
                    }, restoreTimeout_);
                }
            }, 0);
        }
    };
    canvas2.restoreContext = function () {
        if (contextLost_) {
            if (onRestored_.length) {
                setTimeout(function () {
                    if (!canRestore_) {
                        throw new Error('can not restore. webglcontestlost listener did not call event.preventDefault');
                    }
                    freeResources();
                    resetToInitialState(unwrappedContext_);
                    contextLost_ = false;
                    numCalls_ = 0;
                    canRestore_ = false;
                    const callbacks = onRestored_.slice();
                    const event = makeWebGLContextEvent('context restored');
                    for (let ii = 0; ii < callbacks.length; ++ii) {
                        callbacks[ii](event);
                    }
                }, 0);
            }
        }
    };
    canvas2.loseContextInNCalls = function (numCalls) {
        if (contextLost_) {
            throw new Error('You can not ask a lost context to be lost');
        }
        numCallsToLoseContext_ = numCalls_ + numCalls;
    };
    canvas2.getNumCalls = function () {
        return numCalls_;
    };
    canvas2.setRestoreTimeout = function (timeout) {
        restoreTimeout_ = timeout;
    };
    function clearErrors() {
        const k = Object.keys(glErrorShadow_);
        for (let i = 0; i < k.length; ++i) {
            delete glErrorShadow_[k[i]];
        }
    }
    function loseContextIfTime() {
        ++numCalls_;
        if (!contextLost_) {
            if (numCallsToLoseContext_ == numCalls_) {
                canvas2.loseContext();
            }
        }
    }
    // Makes a function that simulates WebGL when out of context.
    function makeLostContextFunctionWrapper(ctx, functionName) {
        const f = ctx[functionName];
        return function () {
            // log('calling:' + functionName)
            // Only call the functions if the context is not lost.
            loseContextIfTime();
            if (!contextLost_) {
                //if (!checkResources(arguments)) {
                //  glErrorShadow_[wrappedContext_.INVALID_OPERATION] = true
                //  return
                //}
                const result = f.apply(ctx, arguments);
                return result;
            }
        };
    }
    function freeResources() {
        for (let ii = 0; ii < resourceDb_.length; ++ii) {
            const resource = resourceDb_[ii];
            if (resource instanceof WebGLBuffer) {
                unwrappedContext_.deleteBuffer(resource);
            }
            else if (resource instanceof WebGLFramebuffer) {
                unwrappedContext_.deleteFramebuffer(resource);
            }
            else if (resource instanceof WebGLProgram) {
                unwrappedContext_.deleteProgram(resource);
            }
            else if (resource instanceof WebGLRenderbuffer) {
                unwrappedContext_.deleteRenderbuffer(resource);
            }
            else if (resource instanceof WebGLShader) {
                unwrappedContext_.deleteShader(resource);
            }
            else if (resource instanceof WebGLTexture) {
                unwrappedContext_.deleteTexture(resource);
            }
            else if (isWebGL2RenderingContext) {
                // @ts-ignore
                if (resource instanceof WebGLQuery) {
                    unwrappedContext_.deleteQuery(resource);
                    // @ts-ignore
                }
                else if (resource instanceof WebGLSampler) {
                    unwrappedContext_.deleteSampler(resource);
                    // @ts-ignore
                }
                else if (resource instanceof WebGLSync) {
                    unwrappedContext_.deleteSync(resource);
                    // @ts-ignore
                }
                else if (resource instanceof WebGLTransformFeedback) {
                    unwrappedContext_.deleteTransformFeedback(resource);
                    // @ts-ignore
                }
                else if (resource instanceof WebGLVertexArrayObject) {
                    unwrappedContext_.deleteVertexArray(resource);
                }
            }
        }
    }
    function makeWebGLContextEvent(statusMessage) {
        return {
            statusMessage: statusMessage,
            preventDefault: function () {
                canRestore_ = true;
            }
        };
    }
    return canvas2;
    function makeLostContextSimulatingContext(ctx) {
        // copy all functions and properties to wrapper
        for (const propertyName in ctx) {
            if (typeof ctx[propertyName] == 'function') {
                wrappedContext_[propertyName] = makeLostContextFunctionWrapper(ctx, propertyName);
            }
            else {
                makePropertyWrapper(wrappedContext_, ctx, propertyName);
            }
        }
        // Wrap a few functions specially.
        wrappedContext_.getError = function () {
            loseContextIfTime();
            if (!contextLost_) {
                let err;
                while (err = unwrappedContext_.getError()) {
                    glErrorShadow_[err] = true;
                }
            }
            for (const err in glErrorShadow_) {
                if (glErrorShadow_[err]) {
                    delete glErrorShadow_[err];
                    return err;
                }
            }
            return wrappedContext_.NO_ERROR;
        };
        const creationFunctions = [
            'createBuffer',
            'createFramebuffer',
            'createProgram',
            'createRenderbuffer',
            'createShader',
            'createTexture'
        ];
        if (isWebGL2RenderingContext) {
            creationFunctions.push('createQuery', 'createSampler', 'fenceSync', 'createTransformFeedback', 'createVertexArray');
        }
        for (let i = 0; i < creationFunctions.length; ++i) {
            const functionName = creationFunctions[i];
            wrappedContext_[functionName] = function (f) {
                return function () {
                    loseContextIfTime();
                    if (contextLost_) {
                        return null;
                    }
                    const obj = f.apply(ctx, arguments);
                    obj.__webglDebugContextLostId__ = contextId_;
                    resourceDb_.push(obj);
                    return obj;
                };
            }(ctx[functionName]);
        }
        const functionsThatShouldReturnNull = [
            'getActiveAttrib',
            'getActiveUniform',
            'getBufferParameter',
            'getContextAttributes',
            'getAttachedShaders',
            'getFramebufferAttachmentParameter',
            'getParameter',
            'getProgramParameter',
            'getProgramInfoLog',
            'getRenderbufferParameter',
            'getShaderParameter',
            'getShaderInfoLog',
            'getShaderSource',
            'getTexParameter',
            'getUniform',
            'getUniformLocation',
            'getVertexAttrib'
        ];
        if (isWebGL2RenderingContext) {
            functionsThatShouldReturnNull.push('getInternalformatParameter', 'getQuery', 'getQueryParameter', 'getSamplerParameter', 'getSyncParameter', 'getTransformFeedbackVarying', 'getIndexedParameter', 'getUniformIndices', 'getActiveUniforms', 'getActiveUniformBlockParameter', 'getActiveUniformBlockName');
        }
        for (let ii = 0; ii < functionsThatShouldReturnNull.length; ++ii) {
            const functionName = functionsThatShouldReturnNull[ii];
            wrappedContext_[functionName] = function (f) {
                return function () {
                    loseContextIfTime();
                    if (contextLost_) {
                        return null;
                    }
                    return f.apply(ctx, arguments);
                };
            }(wrappedContext_[functionName]);
        }
        const isFunctions = [
            'isBuffer',
            'isEnabled',
            'isFramebuffer',
            'isProgram',
            'isRenderbuffer',
            'isShader',
            'isTexture'
        ];
        if (isWebGL2RenderingContext) {
            isFunctions.push('isQuery', 'isSampler', 'isSync', 'isTransformFeedback', 'isVertexArray');
        }
        for (let ii = 0; ii < isFunctions.length; ++ii) {
            const functionName = isFunctions[ii];
            wrappedContext_[functionName] = function (f) {
                return function () {
                    loseContextIfTime();
                    if (contextLost_) {
                        return false;
                    }
                    return f.apply(ctx, arguments);
                };
            }(wrappedContext_[functionName]);
        }
        wrappedContext_.checkFramebufferStatus = function (f) {
            return function () {
                loseContextIfTime();
                if (contextLost_) {
                    return wrappedContext_.FRAMEBUFFER_UNSUPPORTED;
                }
                return f.apply(ctx, arguments);
            };
        }(wrappedContext_.checkFramebufferStatus);
        wrappedContext_.getAttribLocation = function (f) {
            return function () {
                loseContextIfTime();
                if (contextLost_) {
                    return -1;
                }
                return f.apply(ctx, arguments);
            };
        }(wrappedContext_.getAttribLocation);
        wrappedContext_.getVertexAttribOffset = function (f) {
            return function () {
                loseContextIfTime();
                if (contextLost_) {
                    return 0;
                }
                return f.apply(ctx, arguments);
            };
        }(wrappedContext_.getVertexAttribOffset);
        wrappedContext_.isContextLost = function () {
            return contextLost_;
        };
        if (isWebGL2RenderingContext) {
            wrappedContext_.getFragDataLocation = function (f) {
                return function () {
                    loseContextIfTime();
                    if (contextLost_) {
                        return -1;
                    }
                    return f.apply(ctx, arguments);
                };
            }(wrappedContext_.getFragDataLocation);
            wrappedContext_.clientWaitSync = function (f) {
                return function () {
                    loseContextIfTime();
                    if (contextLost_) {
                        return wrappedContext_.WAIT_FAILED;
                    }
                    return f.apply(ctx, arguments);
                };
            }(wrappedContext_.clientWaitSync);
            wrappedContext_.getUniformBlockIndex = function (f) {
                return function () {
                    loseContextIfTime();
                    if (contextLost_) {
                        return wrappedContext_.INVALID_INDEX;
                    }
                    return f.apply(ctx, arguments);
                };
            }(wrappedContext_.getUniformBlockIndex);
        }
        return wrappedContext_;
    }
}

/**
 * There's only one constant, use it for default values. Use chroma-js or similar for actual colors.
 */
const GL_COLOR_BLACK = [0, 0, 0, 1];
function currentGL() {
    return TSGLContextBase.gl;
}
function isNumber(obj) {
    const str = Object.prototype.toString.call(obj);
    return str == '[object Number]' || str == '[object Boolean]';
}
class TSGLContextBase {
    constructor(gl, immediate = {
        mesh: new Mesh()
            .addVertexBuffer('coords', 'ts_TexCoord')
            .addVertexBuffer('colors', 'ts_Color'),
        mode: -1,
        coord: [0, 0],
        color: [1, 1, 1, 1],
        pointSize: 1,
        shader: Shader.create(`
			attribute vec4 ts_Color;
			attribute vec4 ts_Vertex;
			uniform mat4 ts_ModelViewProjectionMatrix;
			attribute vec2 ts_TexCoord;
            uniform float pointSize;
            varying vec4 color;
            varying vec2 coord;
            void main() {
                color = ts_Color;
                coord = ts_TexCoord;
                gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;
                gl_PointSize = pointSize;
            }
		`, `
			precision highp float;
            uniform sampler2D texture;
            uniform float pointSize;
            // uniform bool useTexture;
            varying vec4 color;
            varying vec2 coord;
            void main() {
                gl_FragColor = color;
                // if (useTexture) gl_FragColor *= texture2D(texture, coord.xy);
            }
        `, gl),
    }) {
        this.immediate = immediate;
        this.modelViewMatrix = M4.identity();
        this.projectionMatrix = M4.identity();
        this.tempMatrix = new M4();
        this.resultMatrix = new M4();
        this.modelViewStack = [];
        this.projectionStack = [];
        this.drawCallCount = 0;
        this.projectionMatrixVersion = 0;
        this.modelViewMatrixVersion = 0;
        this.matrixMode(TSGLContextBase.MODELVIEW);
    }
    /// Implement the OpenGL modelview and projection matrix stacks, along with some other useful GLU matrix functions.
    matrixMode(mode) {
        switch (mode) {
            case this.MODELVIEW:
                this.currentMatrixName = 'modelViewMatrix';
                this.stack = this.modelViewStack;
                break;
            case this.PROJECTION:
                this.currentMatrixName = 'projectionMatrix';
                this.stack = this.projectionStack;
                break;
            default:
                throw new Error('invalid matrix mode ' + mode);
        }
    }
    loadIdentity() {
        M4.identity(this[this.currentMatrixName]);
        this.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++;
    }
    loadMatrix(m4) {
        M4.copy(m4, this[this.currentMatrixName]);
        this.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++;
    }
    multMatrix(m4) {
        M4.multiply(this[this.currentMatrixName], m4, this.resultMatrix);
        const temp = this.resultMatrix;
        this.resultMatrix = this[this.currentMatrixName];
        this[this.currentMatrixName] = temp;
        this.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++;
    }
    mirror(plane) {
        this.multMatrix(M4.mirror(plane));
    }
    perspective(fovDegrees, aspect, near, far) {
        this.multMatrix(M4.perspectiveRad(fovDegrees * DEG, aspect, near, far, this.tempMatrix));
    }
    frustum(left, right, bottom, top, near, far) {
        this.multMatrix(M4.frustum(left, right, bottom, top, near, far, this.tempMatrix));
    }
    ortho(left, right, bottom, top, near, far) {
        this.multMatrix(M4.ortho(left, right, bottom, top, near, far, this.tempMatrix));
    }
    scale(...args) {
        this.multMatrix(M4.scale(...args, this.tempMatrix));
    }
    mirroredX() {
        this.multMatrix(M4.mirror(P3ZX));
    }
    translate(x, y, z) {
        if (undefined !== y) {
            this.multMatrix(M4.translate(x, y, z, this.tempMatrix));
        }
        else {
            this.multMatrix(M4.translate(x, this.tempMatrix));
        }
    }
    rotate(angleDegrees, x, y, z) {
        this.multMatrix(M4.rotate(angleDegrees * DEG, { x, y, z }, this.tempMatrix));
    }
    lookAt(eye, center, up) {
        this.multMatrix(M4.lookAt(eye, center, up, this.tempMatrix));
    }
    pushMatrix() {
        this.stack.push(M4.copy(this[this.currentMatrixName]));
    }
    popMatrix() {
        const pop = this.stack.pop();
        assert(undefined !== pop);
        this[this.currentMatrixName] = pop;
        this.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++;
    }
    /**
     * World coordinates (WC) to screen/window coordinates matrix
     */
    wcToWindowMatrix() {
        const viewport = this.getParameter(this.VIEWPORT);
        const [x, y, w, h] = viewport;
        const viewportToScreenMatrix = new M4([
            w / 2, 0, 0, x + w / 2,
            h / 2, 0, 0, y + h / 2,
            0, 0, 1, 0,
            0, 0, 0, 1,
        ]);
        return M4.multiplyMultiple(viewportToScreenMatrix, this.projectionMatrix, this.modelViewMatrix);
    }
    /////////// IMMEDIATE MODE
    // ### Immediate mode
    //
    // Provide an implementation of OpenGL's deprecated immediate mode. This is
    // deprecated for a reason: constantly re-specifying the geometry is a bad
    // idea for performance. You should use a `GL.Mesh` instead, which specifies
    // the geometry once and caches it on the graphics card. Still, nothing
    // beats a quick `viewerGL.begin(WGL.POINTS); viewerGL.vertex(1, 2, 3); viewerGL.end();` for
    // debugging. This intentionally doesn't implement fixed-function lighting
    // because it's only meant for quick debugging tasks.
    pointSize(pointSize) {
        this.immediate.shader.uniforms({ pointSize: pointSize });
    }
    begin(mode) {
        if (this.immediate.mode != -1)
            throw new Error('mismatched viewerGL.begin() and viewerGL.end() calls');
        this.immediate.mode = mode;
        this.immediate.mesh.colors = [];
        this.immediate.mesh.coords = [];
        this.immediate.mesh.vertices = [];
    }
    color(...args) {
        this.immediate.color =
            (1 == args.length && Array.isArray(args[0]))
                ? args[0]
                : (1 == args.length && 'number' == typeof args[0])
                    ? hexIntToGLColor(args[0])
                    : (1 == args.length && 'string' == typeof args[0])
                        ? chroma$1(args[0]).gl()
                        : [args[0], args[1], args[2], args[3] || 1];
    }
    texCoord(...args) {
        this.immediate.coord = V.apply(undefined, args).toArray(2);
    }
    vertex(...args) {
        this.immediate.mesh.colors.push(this.immediate.color);
        this.immediate.mesh.coords.push(this.immediate.coord);
        this.immediate.mesh.vertices.push(V.apply(undefined, args));
    }
    end() {
        if (this.immediate.mode == -1)
            throw new Error('mismatched viewerGL.begin() and viewerGL.end() calls');
        this.immediate.mesh.compile();
        this.immediate.shader.uniforms({
            useTexture: !!TSGLContextBase.gl.getParameter(this.TEXTURE_BINDING_2D),
        }).drawBuffers(this.immediate.mesh.vertexBuffers, undefined, this.immediate.mode);
        this.immediate.mode = -1;
    }
    makeCurrent() {
        TSGLContextBase.gl = this;
    }
    /**
     * Starts an animation loop.
     */
    animate(callback) {
        const requestAnimationFrame = window.requestAnimationFrame ||
            window.mozRequestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            function (callback) {
                setTimeout(() => callback(performance.now()), 1000 / 60);
            };
        let time$$1 = performance.now(), keepUpdating = true;
        const update = (now) => {
            if (keepUpdating) {
                callback.call(this, now, now - time$$1);
                time$$1 = now;
                requestAnimationFrame(update);
            }
        };
        requestAnimationFrame(update);
        return () => { keepUpdating = false; };
    }
    /**
     * Provide an easy way to get a fullscreen app running, including an
     * automatic 3D perspective projection matrix by default. This should be
     * called once.
     *
     * Just fullscreen, no automatic camera:
     *
     *     viewerGL.fullscreen({ camera: false })
     *
     * Adjusting field of view, near plane distance, and far plane distance:
     *
     *     viewerGL.fullscreen({ fov: 45, near: 0.1, far: 1000 })
     *
     * Adding padding from the edge of the window:
     *
     *     viewerGL.fullscreen({ paddingLeft: 250, paddingBottom: 60 })
     */
    fullscreen(options = {}) {
        const top = options.paddingTop || 0;
        const left = options.paddingLeft || 0;
        const right = options.paddingRight || 0;
        const bottom = options.paddingBottom || 0;
        if (!document.body) {
            throw new Error('document.body doesn\'t exist yet (call viewerGL.fullscreen() from ' +
                'window.onload() or from inside the <body> tag)');
        }
        document.body.appendChild(this.canvas);
        document.body.style.overflow = 'hidden';
        this.canvas.style.position = 'absolute';
        this.canvas.style.left = left + 'px';
        this.canvas.style.top = top + 'px';
        this.canvas.style.width = window.innerWidth - left - right + 'px';
        this.canvas.style.bottom = window.innerHeight - top - bottom + 'px';
        const gl = this;
        function windowOnResize() {
            gl.canvas.width = (window.innerWidth - left - right) * window.devicePixelRatio;
            gl.canvas.height = (window.innerHeight - top - bottom) * window.devicePixelRatio;
            gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
            if (options.camera) {
                gl.matrixMode(TSGLContextBase.PROJECTION);
                gl.loadIdentity();
                gl.perspective(options.fov || 45, gl.canvas.width / gl.canvas.height, options.near || 0.1, options.far || 1000);
                gl.matrixMode(TSGLContextBase.MODELVIEW);
            }
        }
        window.addEventListener('resize', windowOnResize);
        windowOnResize();
        return this;
    }
    viewportFill() {
        this.viewport(0, 0, this.canvas.width, this.canvas.height);
    }
    static create(options = {}) {
        const canvas = options.canvas || document.createElement('canvas');
        if (!options.canvas) {
            canvas.width = 800;
            canvas.height = 600;
        }
        if (!('alpha' in options))
            options.alpha = false;
        let newGL = undefined;
        try {
            newGL = canvas.getContext('webgl2', options);
            newGL && (newGL.version = 2);
            if (!newGL) {
                newGL = (canvas.getContext('webgl', options) || canvas.getContext('experimental-webgl', options));
                newGL && (newGL.version = 1);
            }
            console.log('getting context');
        }
        catch (e) {
            console.log(e, 'Failed to get context');
        }
        if (!newGL)
            throw new Error('WebGL not supported');
        if (options.throwOnError) {
            newGL = makeDebugContext(newGL, (err, funcName) => {
                throw new Error(glEnumToString(err) + ' was caused by ' + funcName);
            });
        }
        TSGLContextBase.gl = newGL;
        addOwnProperties(newGL, TSGLContextBase.prototype);
        addOwnProperties(newGL, new TSGLContextBase(newGL));
        //addEventListeners(newGL)
        return newGL;
    }
}
TSGLContextBase.MODELVIEW = 0;
TSGLContextBase.PROJECTION = 1;
TSGLContextBase.HALF_FLOAT_OES = 0x8D61;
var TSGLContext;
(function (TSGLContext) {
    /**
     * `create()` creates a new WebGL context and augments it with more methods. The alpha channel is disabled
     * by default because it usually causes unintended transparencies in the canvas.
     */
    TSGLContext.create = TSGLContextBase.create;
})(TSGLContext || (TSGLContext = {}));
// enum WGL_ERROR {
// 	NO_ERROR = WGL.NO_ERROR,
// 	INVALID_ENUM = WGL.INVALID_ENUM,
// 	INVALID_VALUE = WGL.INVALID_VALUE,
// 	INVALID_OPERATION = WGL.INVALID_OPERATION,
// 	INVALID_FRAMEBUFFER_OPERATION = WGL.INVALID_FRAMEBUFFER_OPERATION,
// 	OUT_OF_MEMORY = WGL.OUT_OF_MEMORY,
// 	CONTEXT_LOST_WEBGL = WGL.CONTEXT_LOST_WEBGL,
// }
TSGLContextBase.prototype.MODELVIEW = TSGLContextBase.MODELVIEW;
TSGLContextBase.prototype.PROJECTION = TSGLContextBase.PROJECTION;
TSGLContextBase.prototype.HALF_FLOAT_OES = TSGLContextBase.HALF_FLOAT_OES;
/**
 *
 * Push two triangles:
 * c - d
 * | \ |
 * a - b
 */
function pushQuad(triangles, flipped, a, b, c, d) {
    if (flipped) {
        triangles.push(a, c, b, b, c, d);
    }
    else {
        triangles.push(a, b, c, b, d, c);
    }
}
function hexIntToGLColor(color) {
    return [(color >> 16) / 255.0, ((color >> 8) & 0xff) / 255.0, (color & 0xff) / 255.0, 1.0];
}
//# sourceMappingURL=bundle.module.js.map


var tsgl = Object.freeze({
	Buffer: Buffer$1,
	Mesh: Mesh,
	SHADER_VAR_TYPES: SHADER_VAR_TYPES,
	isArray: isArray,
	Shader: Shader,
	Texture: Texture,
	GL_COLOR_BLACK: GL_COLOR_BLACK,
	currentGL: currentGL,
	isNumber: isNumber,
	TSGLContextBase: TSGLContextBase,
	get TSGLContext () { return TSGLContext; },
	pushQuad: pushQuad,
	init: init,
	mightBeEnum: mightBeEnum,
	glEnumToString: glEnumToString,
	glFunctionArgToString: glFunctionArgToString,
	glFunctionArgsToString: glFunctionArgsToString,
	makeDebugContext: makeDebugContext,
	isWebGL2RenderingContext: isWebGL2RenderingContext,
	resetToInitialState: resetToInitialState,
	makeLostContextSimulatingCanvas: makeLostContextSimulatingCanvas
});

const { abs: abs$2, acos, acosh, asin, asinh, atan, atanh, atan2, ceil, cbrt, expm1, clz32, cos: cos$1, cosh, exp, floor, fround, hypot, imul, log: log$1, log1p, log2, log10, max: max$1, min: min$1, pow, random, round, sign: sign$1, sin: sin$1, sinh, sqrt, tan, tanh, trunc, E, LN10, LN2, LOG10E, LOG2E, PI: PI$3, SQRT1_2, SQRT2, } = Math;

let insideIsInfosWithCurve = false;
class Curve$$1 extends Transformable {
    constructor(tMin, tMax) {
        super();
        this.tMin = tMin;
        this.tMax = tMax;
        assertNumbers(tMin, tMax);
        assert('number' == typeof tMin && !isNaN(tMin));
        assert('number' == typeof tMax && !isNaN(tMax));
        assert(tMin < tMax);
    }
    static integrate(curve, startT, endT, steps) {
        const step = (endT - startT) / steps;
        let length = 0;
        let p = curve.at(startT);
        let i = 0, t = startT + step;
        for (; i < steps; i++, t += step) {
            const next = curve.at(t);
            length += p.distanceTo(next);
            p = next;
        }
        return length;
    }
    static ispsRecursive(curve1, tMin, tMax, curve2, sMin, sMax) {
        // the recursive function finds good approximates for the intersection points
        // curve1 function uses newton iteration to improve the result as much as possible
        function handleStartTS(startT, startS) {
            if (!result.some(info => eq(info.tThis, startT) && eq(info.tOther, startS))) {
                const f1 = (t, s) => curve1.tangentAt(t).dot(curve1.at(t).minus(curve2.at(s)));
                const f2 = (t, s) => curve2.tangentAt(s).dot(curve1.at(t).minus(curve2.at(s)));
                // f = (b1, b2, t1, t2) = b1.tangentAt(t1).dot(b1.at(t1).minus(b2.at(t2)))
                const dfdt1 = (b1, b2, t1, t2) => b1.ddt(t1).dot(b1.at(t1).minus(b2.at(t2))) + b1.tangentAt(t1).squared();
                const dfdt2 = (b1, b2, t1, t2) => -b1.tangentAt(t1).dot(b2.tangentAt(t2));
                const ni = newtonIterate2dWithDerivatives(f1, f2, startT, startS, 16, dfdt1.bind(undefined, curve1, curve2), dfdt2.bind(undefined, curve1, curve2), (t, s) => -dfdt2(curve2, curve1, s, t), (t, s) => -dfdt1(curve2, curve1, s, t));
                assert(isFinite(ni.x));
                assert(isFinite(ni.y));
                if (ni == undefined)
                    console.log(startT, startS, curve1.sce, curve2.sce);
                result.push({ tThis: ni.x, tOther: ni.y, p: curve1.at(ni.x) });
            }
        }
        // returns whether an intersection was immediately found (i.e. without further recursion)
        function findRecursive(tMin, tMax, sMin, sMax, curve1AABB, curve2AABB, depth = 0) {
            const EPS$$1 = NLA_PRECISION;
            if (curve1AABB.fuzzyTouchesAABB(curve2AABB)) {
                const tMid = (tMin + tMax) / 2;
                const sMid = (sMin + sMax) / 2;
                if (Math.abs(tMax - tMin) < EPS$$1 || Math.abs(sMax - sMin) < EPS$$1) {
                    handleStartTS(tMid, sMid);
                    return true;
                }
                else {
                    const curve1AABBleft = curve1.getAABB(tMin, tMid);
                    const curve2AABBleft = curve2.getAABB(sMin, sMid);
                    let curve1AABBright, curve2AABBright;
                    // if one of the following calls immediately finds an intersection, we don't want to call the others
                    // as that will lead to the same intersection being output multiple times
                    findRecursive(tMin, tMid, sMin, sMid, curve1AABBleft, curve2AABBleft, depth + 1) ||
                        findRecursive(tMin, tMid, sMid, sMax, curve1AABBleft, (curve2AABBright = curve2.getAABB(sMid, sMax)), depth + 1) ||
                        findRecursive(tMid, tMax, sMin, sMid, (curve1AABBright = curve1.getAABB(tMid, tMax)), curve2AABBleft, depth + 1) ||
                        findRecursive(tMid, tMax, sMid, sMax, curve1AABBright, curve2AABBright, depth + 1);
                }
            }
            return false;
        }
        const result = [];
        findRecursive(tMin, tMax, sMin, sMax, curve1.getAABB(tMin, tMax), curve2.getAABB(sMin, sMax));
        return fuzzyUniquesF(result, info => info.tThis);
    }
    /**
     * Searches a 2d area for (an) implicit curve(s).
     * @param implicitCurve
     * @param bounds Defines area to search.
     * @param sStep Granularity of search in s-direction.
     * @param tStep Granularity of search in t-direction.
     * @param stepSize step size to take along the curve
     * @return
     */
    static breakDownIC(implicitCurve, bounds, sStep, tStep, stepSize, validST) {
        //undefined == dids && (dids = (s, t) => (implicitCurve(s + EPS, t) - implicitCurve(s, t)) / EPS)
        //undefined == didt && (didt = (s, t) => (implicitCurve(s, t + EPS) - implicitCurve(s, t)) / EPS)
        const { sMin, sMax, tMin, tMax } = bounds;
        const deltaS = sMax - sMin, deltaT = tMax - tMin;
        const sRes = ceil(deltaS / sStep), tRes = ceil(deltaT / tStep);
        const grid = new Array(sRes * tRes).fill(0);
        // const printGrid = () =>
        // 	console.log(
        // 		arrayFromFunction(tRes, i =>
        // 			grid
        // 				.slice(sRes * i, sRes * (i + 1))
        // 				.map(v => (v ? 'X' : '_'))
        // 				.join(''),
        // 		).join('\n'),
        // 	)
        const get = (i, j) => grid[j * sRes + i];
        const set = (i, j) => 0 <= i && i < sRes && 0 <= j && j < tRes && (grid[j * sRes + i] = 1);
        const result = [];
        const logTable = [];
        for (let i = 0; i < sRes; i++) {
            search: for (let j = 0; j < tRes; j++) {
                if (get(i, j))
                    continue;
                set(i, j);
                let s = sMin + (i + 0.5) * sStep, t = tMin + (j + 0.5) * tStep;
                const startS = s, startT = t;
                // basically curvePoint
                for (let k = 0; k < 8; k++) {
                    const fp = implicitCurve(s, t);
                    const dfpdx = implicitCurve.x(s, t), dfpdy = implicitCurve.y(s, t);
                    if (0 === Math.pow(dfpdx, 2) + Math.pow(dfpdy, 2)) {
                        // top of a hill, keep looking
                        continue search;
                    }
                    const scale = fp / (Math.pow(dfpdx, 2) + Math.pow(dfpdy, 2));
                    s -= scale * dfpdx;
                    t -= scale * dfpdy;
                }
                const li = floor((s - sMin) / sStep), lj = floor((t - tMin) / tStep);
                logTable.push({
                    i,
                    j,
                    li,
                    lj,
                    startS,
                    startT,
                    s,
                    t,
                    'bounds(s, t)': stInAABB2$$1(bounds, s, t),
                    'ic(s,t)': implicitCurve(s, t),
                });
                if (!(i == li && j == lj) && get(li, lj)) {
                    continue search;
                }
                set(li, lj);
                // s, t are now good starting coordinates to use follow algorithm
                if (stInAABB2$$1(bounds, s, t) && validST(s, t) && eq0(implicitCurve(s, t))) {
                    const subResult = mkcurves(implicitCurve, s, t, stepSize, bounds, validST);
                    for (const curveData of subResult) {
                        assert(curveData.points.length > 2);
                        for (const { x, y } of curveData.points) {
                            const lif = (x - sMin) / sStep, ljf = (y - tMin) / tStep;
                            set((lif - 0.5) | 0, (ljf - 0.5) | 0);
                            set((lif - 0.5) | 0, (ljf + 0.5) | 0);
                            set((lif + 0.5) | 0, (ljf - 0.5) | 0);
                            set((lif + 0.5) | 0, (ljf + 0.5) | 0);
                        }
                    }
                    //printGrid()
                    result.push(...subResult);
                }
            }
        }
        // console.table(logTable)
        for (const { points } of result) {
            for (let i = 0; i < points.length - 1; i++) {
                assert(!points[i].equals(points[i + 1]));
            }
        }
        return result;
    }
    toString() {
        return this.toSource();
    }
    toSource(rounder = x => x) {
        return callsce.call(undefined, 'new ' + this.constructor.name, ...this.getConstructorParameters());
    }
    withBounds(tMin = this.tMin, tMax = this.tMax) {
        assert(this.tMin <= tMin && tMin <= this.tMax);
        assert(this.tMin <= tMax && tMax <= this.tMax);
        assert(this.tMin <= tMax && tMax <= this.tMax);
        return new this.constructor(...this.getConstructorParameters().slice(0, -2), tMin, tMax);
    }
    /**
     * The point on the line that is closest to the given point.
     */
    closestPointToPoint(p) {
        return this.at(this.closestTToPoint(p));
    }
    isValidT(t) {
        return le(this.tMin, t) && le(t, this.tMax);
    }
    diff(t, eps) {
        return this.at(t).to(this.at(t + eps));
    }
    // TODO: tmin/tmax first
    closestTToPoint(p, tStart, tMin = this.tMin, tMax = this.tMax) {
        // this.at(t) has minimal distance to p when this.tangentAt(t) is perpendicular to
        // the vector between this.at(t) and p. This is the case iff the dot product of the two is 0.
        // f = (this.at(t) - p) . (this.tangentAt(t)
        // df = this.tangentAt(t) . this.tangentAt(t) + (this.at(t) - p) . this.ddt(t)
        //    = this.tangentAt(t)² + (this.at(t) - p) . this.ddt(t)
        const f = (t) => this.at(t)
            .minus(p)
            .dot(this.tangentAt(t)); // 5th degree polynomial
        const df = (t) => this.tangentAt(t).squared() +
            this.at(t)
                .minus(p)
                .dot(this.ddt(t));
        //checkDerivate(f, df, tMin, tMax)
        const STEPS = 32;
        if (undefined === tStart) {
            tStart = arrayFromFunction(STEPS, i => tMin + (tMax - tMin) * i / (STEPS - 1)).withMax(t => -this.at(t).distanceTo(p));
        }
        return newtonIterateWithDerivative(f, tStart, 16, df);
    }
    /**
     * So different edges on the same curve do not have different vertices, they are always generated
     * on fixed points this.at(k * this.tIncrement), with k taking integer values
     *
     */
    calcSegmentPoints(aT, bT, a, b, reversed, includeFirst) {
        assert(this.tIncrement, 'tIncrement not defined on ' + this);
        const inc = this.tIncrement;
        const result = [];
        if (includeFirst)
            result.push(a);
        assert(reversed != aT < bT);
        if (aT < bT) {
            const start = Math.ceil((aT + NLA_PRECISION) / inc);
            const end = Math.floor((bT - NLA_PRECISION) / inc);
            for (let i = start; i <= end; i++) {
                result.push(this.at(i * inc));
            }
        }
        else {
            const start = Math.floor((aT - NLA_PRECISION) / inc);
            const end = Math.ceil((bT + NLA_PRECISION) / inc);
            for (let i = start; i >= end; i--) {
                result.push(this.at(i * inc));
            }
        }
        result.push(b);
        return result;
    }
    calcSegmentTs(aT, bT, reversed, includeFirst) {
        assert(this.tIncrement, 'tIncrement not defined on ' + this);
        const inc = this.tIncrement;
        const result = [];
        if (includeFirst)
            result.push(aT);
        assert(reversed != aT < bT);
        if (aT < bT) {
            const start = Math.ceil((aT + NLA_PRECISION) / inc);
            const end = Math.floor((bT - NLA_PRECISION) / inc);
            for (let i = start; i <= end; i++) {
                result.push(i * inc);
            }
        }
        else {
            const start = Math.floor((aT - NLA_PRECISION) / inc);
            const end = Math.ceil((bT + NLA_PRECISION) / inc);
            for (let i = start; i >= end; i--) {
                result.push(i * inc);
            }
        }
        result.push(bT);
        return result;
    }
    /**
     *
     * @param p
     * @param tStart Defines interval with tEnd in which a start value for t will be searched.
     * Result is not necessarily in this interval.
     * @param tEnd
     */
    distanceToPoint(p, tStart, tEnd) {
        const closestT = this.closestTToPoint(p, tStart, tEnd);
        return this.at(closestT).distanceTo(p);
    }
    asSegmentDistanceToPoint(p, tStart, tEnd) {
        let t = this.closestTToPoint(p, tStart, tEnd);
        t = clamp(t, tStart, tEnd);
        return this.at(t).distanceTo(p);
    }
    /**
     * Behavior when curves are colinear: self intersections
     */
    isInfosWithCurve(curve) {
        if (insideIsInfosWithCurve) {
            return Curve$$1.ispsRecursive(this, this.tMin, this.tMax, curve, curve.tMin, curve.tMax);
        }
        else {
            try {
                insideIsInfosWithCurve = true;
                const infos = curve.isInfosWithCurve(this);
                return infos.map(info => {
                    assert(info);
                    const { tThis, tOther, p } = info;
                    return { tOther: tThis, tThis: tOther, p };
                });
            }
            finally {
                insideIsInfosWithCurve = false;
            }
        }
    }
    arcLength(startT, endT, steps = 1) {
        assert(startT < endT, 'startT < endT');
        return glqInSteps(t => this.tangentAt(t).length(), startT, endT, steps);
    }
    getAABB(tMin = this.tMin, tMax = this.tMax) {
        tMin = isFinite(tMin) ? tMin : this.tMin;
        tMax = isFinite(tMax) ? tMax : this.tMax;
        const tMinAt = this.at(tMin), tMaxAt = this.at(tMax);
        const roots = this.roots();
        const mins = new Array(3), maxs = new Array(3);
        for (let dim = 0; dim < 3; dim++) {
            const tRoots = roots[dim];
            mins[dim] = Math.min(tMinAt.e(dim), tMaxAt.e(dim));
            maxs[dim] = Math.max(tMinAt.e(dim), tMaxAt.e(dim));
            for (const tRoot of tRoots) {
                if (tMin < tRoot && tRoot < tMax) {
                    mins[dim] = Math.min(mins[dim], this.at(tRoot).e(dim));
                    maxs[dim] = Math.max(maxs[dim], this.at(tRoot).e(dim));
                }
            }
        }
        return new AABB(V3.fromArray(mins), V3.fromArray(maxs));
    }
    reversed() {
        throw new Error();
    }
    clipPlane(plane) {
        const ists = this.isTsWithPlane(plane).filter(ist => this.tMin <= ist && ist <= this.tMax);
        return getIntervals(ists, this.tMin, this.tMax).mapFilter(([a, b]) => {
            const midT = (a + b) / 2;
            return !eq(a, b) && plane.distanceToPointSigned(this.at(midT)) < 0 && this.withBounds(a, b);
        });
    }
}
Curve$$1.hlol = 0;
function mkcurves(implicitCurve, sStart, tStart, stepSize, bounds, validST) {
    const start = V(sStart, tStart);
    assert(stepSize > 0);
    // checkDerivate(s => implicitCurve(s, 0), s => dids(s, 0), -1, 1, 0)
    // checkDerivate(t => implicitCurve(0, t), t => didt(0, t), -1, 1, 0)
    const { points, tangents } = followAlgorithm2d$$1(implicitCurve, start, stepSize, bounds, validST);
    if (points.length > 4 && points[0].distanceTo(points.last) <= abs$2(stepSize)) {
        // this is a loop: split it
        for (let i = 0; i < points.length - 1; i++) {
            assert(!points[i].equals(points[i + 1]));
        }
        const half = floor(points.length / 2);
        const points1 = points.slice(0, half), points2 = points.slice(half - 1, points.length);
        const tangents1 = tangents.slice(0, half), tangents2 = tangents.slice(half - 1, tangents.length);
        //tangents2[tangents2.length - 1] = tangents1[0]
        //points2[tangents2.length - 1] = points1[0]
        for (let i = 0; i < points1.length - 1; i++) {
            assert(!points1[i].equals(points1[i + 1]));
        }
        for (let i = 0; i < points2.length - 1; i++) {
            assert(!points2[i].equals(points2[i + 1]));
        }
        return [{ points: points1, tangents: tangents1 }, { points: points2, tangents: tangents2 }];
    }
    else {
        // not a loop: check in the other direction
        const { points: reversePoints, tangents: reverseTangents } = followAlgorithm2d$$1(implicitCurve, start, -stepSize, bounds, validST);
        const result = followAlgorithm2d$$1(implicitCurve, reversePoints.last, stepSize, bounds, validST, undefined, reverseTangents.last.negated());
        assert(result.points.length > 2);
        return [result];
    }
}
function breakDownPPCurves$$1(ps1, ps2, sStep, tStep, stepSize) {
    const { sMin, sMax, tMin, tMax } = ps1;
    const bounds = stInAABB2$$1.bind(undefined, ps1);
    const bounds2 = stInAABB2$$1.bind(undefined, ps2);
    const deltaS = sMax - sMin, deltaT = tMax - tMin;
    const sRes = ceil(deltaS / sStep), tRes = ceil(deltaT / tStep);
    const grid = new Array(sRes * tRes).fill(0);
    //const printGrid = () => console.log(arrayFromFunction(tRes, i => grid.slice(sRes * i, sRes * (i + 1)).map(v => v ? 'X' : '_').join('')).join('\n'))
    const at = (i, j) => grid[j * sRes + i];
    const set = (i, j) => 0 <= i && i < sRes && 0 <= j && j < tRes && (grid[j * sRes + i] = 1);
    const result = [];
    const logTable = [];
    for (let i = 0; i < sRes; i++) {
        search: for (let j = 0; j < tRes; j++) {
            if (at(i, j))
                continue;
            set(i, j);
            const startS = sMin + (i + 0.5) * sStep, startT = tMin + (j + 0.5) * tStep;
            // assume point is valid, currently (TODO)
            const curvePointPPResult = curvePointPP$$1(ps1, ps2, ps1.pST(startS, startT));
            if (undefined === curvePointPPResult) {
                continue search;
            }
            const { p: startP, st1: { x: s, y: t }, st2: { x: s2, y: t2 } } = curvePointPPResult;
            const li = floor((s - sMin) / sStep), lj = floor((t - tMin) / tStep);
            logTable.push({
                i,
                j,
                li,
                lj,
                startS,
                startT,
                s,
                t,
                'bounds(s, t)': bounds(s, t),
            });
            if (!(i == li && j == lj) && at(li, lj)) {
                continue search;
            }
            set(li, lj);
            // s, t are now good starting coordinates to use follow algorithm
            if (bounds(s, t) && bounds2(s2, t2)) {
                console.log(V(s, t).sce);
                const subResult = mkPPCurves(ps1, ps2, startP, stepSize, bounds, bounds2);
                for (const curveData of subResult) {
                    assert(curveData.st1s.length > 2);
                    for (const { x, y } of curveData.st1s) {
                        const lif = (x - sMin) / sStep, ljf = (y - tMin) / tStep;
                        set((lif - 0.5) | 0, (ljf - 0.5) | 0);
                        set((lif - 0.5) | 0, (ljf + 0.5) | 0);
                        set((lif + 0.5) | 0, (ljf - 0.5) | 0);
                        set((lif + 0.5) | 0, (ljf + 0.5) | 0);
                    }
                }
                //printGrid()
                result.push(...subResult);
            }
        }
    }
    console.table(logTable);
    for (const { points } of result) {
        for (let i = 0; i < points.length - 1; i++) {
            assert(!points[i].equals(points[i + 1]));
        }
    }
    return result.map(({ points, tangents, st1s }) => {
        return new PPCurve$$1(points, tangents, ps1, ps2, st1s, undefined, stepSize, 1);
    });
}
function mkPPCurves(ps1, ps2, startPoint, stepSize, bounds1, bounds2) {
    // checkDerivate(s => implicitCurve(s, 0), s => dids(s, 0), -1, 1, 0)
    // checkDerivate(t => implicitCurve(0, t), t => didt(0, t), -1, 1, 0)
    const { points, tangents, st1s } = followAlgorithmPP$$1(ps1, ps2, startPoint, stepSize, bounds1, bounds2);
    if (points[0].distanceTo(points.last) < stepSize && points.length > 2) {
        // this is a loop: split it
        for (let i = 0; i < points.length - 1; i++) {
            assert(!points[i].equals(points[i + 1]));
        }
        const half = floor(points.length / 2);
        const points1 = points.slice(0, half), points2 = points.slice(half - 1, points.length);
        const tangents1 = tangents.slice(0, half), tangents2 = tangents.slice(half - 1, tangents.length);
        const st1s1 = st1s.slice(0, half), st1s2 = st1s.slice(half - 1, tangents.length);
        tangents2[tangents2.length - 1] = tangents1[0];
        points2[tangents2.length - 1] = points1[0];
        st1s2[tangents2.length - 1] = st1s1[0];
        for (let i = 0; i < points1.length - 1; i++) {
            assert(!points1[i].equals(points1[i + 1]));
        }
        for (let i = 0; i < points2.length - 1; i++) {
            assert(!points2[i].equals(points2[i + 1]));
        }
        return [
            { points: points1, tangents: tangents1, st1s: st1s1 },
            { points: points2, tangents: tangents2, st1s: st1s2 },
        ];
    }
    else {
        // not a loop: check in the other direction
        const { points: reversePoints } = followAlgorithmPP$$1(ps1, ps2, startPoint, -stepSize, bounds1, bounds2);
        const result = followAlgorithmPP$$1(ps1, ps2, reversePoints.last, stepSize, bounds1, bounds2);
        assert(result.points.length > 2);
        return [result];
    }
}
function AABB2$$1(sMin, sMax, tMin, tMax) {
    return { sMin, sMax, tMin, tMax };
}
function stInAABB2$$1(aabb2, s, t) {
    return aabb2.sMin <= s && s <= aabb2.sMax && aabb2.tMin <= t && t <= aabb2.tMax;
}
function curvePoint$$1(implicitCurve, startPoint, dids, didt) {
    let p = startPoint;
    for (let i = 0; i < 8; i++) {
        const fp = implicitCurve(p.x, p.y);
        const dfpdx = dids(p.x, p.y), dfpdy = didt(p.x, p.y);
        const scale = fp / (dfpdx * dfpdx + dfpdy * dfpdy);
        p = p.minus(new V3(scale * dfpdx, scale * dfpdy, 0));
    }
    return p;
}
function curvePointMF$$1(mf, startPoint, steps = 8, eps = 1 / (1 << 30)) {
    let p = startPoint;
    for (let i = 0; i < steps; i++) {
        const fp = mf(p.x, p.y);
        const dfpdx = mf.x(p.x, p.y), dfpdy = mf.y(p.x, p.y);
        const scale = fp / (dfpdx * dfpdx + dfpdy * dfpdy);
        p = p.minus(new V3(scale * dfpdx, scale * dfpdy, 0));
        if (abs$2(fp) <= eps)
            break;
    }
    return p;
}

class XiEtaCurve$$1 extends Curve$$1 {
    constructor(center, f1, f2, tMin = -PI$3, tMax = PI$3) {
        super(tMin, tMax);
        this.center = center;
        this.f1 = f1;
        this.f2 = f2;
        this.tMin = tMin;
        this.tMax = tMax;
        assertVectors(center, f1, f2);
        this.normal = f1.cross(f2);
        if (!this.normal.likeO()) {
            this.normal = this.normal.unit();
            this.matrix = M4.forSys(f1, f2, this.normal, center);
            this.matrixInverse = this.matrix.inversed();
        }
        else {
            this.matrix = M4.forSys(f1, f2, f1.unit(), center);
            const f1p = f1.getPerpendicular();
            // prettier-ignore
            this.matrixInverse = new M4(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1).times(M4.forSys(f1, f1p, f1.cross(f1p), center).inversed());
        }
    }
    /**
     * Intersection of the unit curve with the line ax + by = c.
     */
    static intersectionUnitLine(a, b, c, tMin, tMax) {
        throw new Error('abstract');
    }
    /**
     * Returns a new EllipseCurve representing an ellipse parallel to the XY-plane
     * with semi-major/minor axes parallel t the X and Y axes.
     *
     * @param a length of the axis parallel to X axis.
     * @param b length of the axis parallel to Y axis.
     * @param center center of the ellipse.
     */
    static forAB(a, b, center = V3.O) {
        return new this(center, V(a, 0, 0), V(0, b, 0));
    }
    static XYLCValid(pLC) {
        throw new Error('abstract');
    }
    static XYLCPointT(pLC, tMin, tMax) {
        throw new Error('abstract');
    }
    static unitIsInfosWithLine(anchorLC, dirLC, anchorWC, dirWC, tMin, tMax) {
        throw new Error('abstract');
    }
    addToMesh(mesh, res = 4, radius = 0, pointStep = 1) {
        const baseNormals = arrayFromFunction(res, i => V3.polar(1, TAU * i / res));
        const baseVertices = arrayFromFunction(res, i => V3.polar(radius, TAU * i / res));
        const inc = this.tIncrement;
        const start = Math.ceil((this.tMin + NLA_PRECISION) / inc);
        const end = Math.floor((this.tMax - NLA_PRECISION) / inc);
        for (let i = start; i <= end; i += pointStep) {
            const t = i * inc;
            const start = mesh.vertices.length;
            if (0 !== i) {
                for (let j = 0; j < res; j++) {
                    pushQuad(mesh.TRIANGLES, true, start - res + j, start + j, start - res + (j + 1) % res, start + (j + 1) % res);
                }
            }
            const point = this.at(t), tangent = this.tangentAt(t);
            const matrix = M4.forSys(this.normal, tangent.cross(this.normal), tangent, point);
            mesh.normals.push(...matrix.transformedVectors(baseNormals));
            mesh.vertices.push(...matrix.transformedPoints(baseVertices));
        }
    }
    getConstructorParameters() {
        return [this.center, this.f1, this.f2, this.tMin, this.tMax];
    }
    isInfosWithCurve(curve) {
        if (curve instanceof L3$$1) {
            return this.isInfosWithLine(curve.anchor, curve.dir1, this.tMin, this.tMax, curve.tMin, curve.tMax);
        }
        if (curve instanceof BezierCurve$$1) {
            return this.isInfosWithBezier(curve);
        }
        if (curve instanceof XiEtaCurve$$1) {
            if (!this.normal.isParallelTo(curve.normal)) {
                return this.isTsWithPlane(curve.getPlane()).mapFilter(tThis => {
                    const p = this.at(tThis);
                    if (curve.containsPoint(p)) {
                        return { tThis, tOther: curve.pointT(p), p };
                    }
                    return undefined;
                });
            }
        }
        return super.isInfosWithCurve(curve);
    }
    transform(m4) {
        return new this.constructor(m4.transformPoint(this.center), m4.transformVector(this.f1), m4.transformVector(this.f2), this.tMin, this.tMax);
    }
    equals(obj) {
        return (this == obj ||
            (undefined != obj &&
                this.constructor == obj.constructor &&
                this.center.equals(obj.center) &&
                this.f1.equals(obj.f1) &&
                this.f2.equals(obj.f2)));
    }
    hashCode() {
        let hashCode$$1 = 0;
        hashCode$$1 = hashCode$$1 * 31 + this.center.hashCode();
        hashCode$$1 = hashCode$$1 * 31 + this.f1.hashCode();
        hashCode$$1 = hashCode$$1 * 31 + this.f2.hashCode();
        return hashCode$$1 | 0;
    }
    likeCurve(curve) {
        return (hasConstructor(curve, this.constructor) &&
            this.center.like(curve.center) &&
            this.f1.like(curve.f1) &&
            this.f2.like(curve.f2));
    }
    normalP(t) {
        return this.tangentAt(t).cross(this.normal);
    }
    getPlane() {
        return P3$$1.normalOnAnchor(this.normal, this.center);
    }
    isTsWithPlane(plane) {
        assertInst(P3$$1, plane);
        /*
         this: x = center + f1 * cos t + f2 * sin t  (1)
         plane:
         n := plane.normal1
         n DOT x == plane.w           (2)
         plane defined by f1/f2
         x = center + f1 * xi + f2 * eta         (3)
         intersection plane and planef1/f2:
         insert (3) into (2):
         n DOT center + n DOT f1 * xi + n DOT f2 * eta = plane.w | -n DOT center
         n DOT f1 * xi + n DOT f2 * eta = plane.w - n DOT center (4)
         points on ellipse have additional condition
         eta * eta + xi * xi = 1 (5)
         g1 := n DOT f1
         g2 := n DOT f2
         g3 := w - n DOT center
         solve system (5)/(6)
         g1 * xi + g2 * eta = g3 (6)
         */
        if (plane.normal1.isParallelTo(this.normal)) {
            return [];
        }
        const n = plane.normal1, w = plane.w, center = this.center, f1 = this.f1, f2 = this.f2, g1 = n.dot(f1), g2 = n.dot(f2), g3 = w - n.dot(center);
        return this.constructor.intersectionUnitLine(g1, g2, g3, this.tMin, this.tMax);
    }
    pointT(p) {
        assertVectors(p);
        const pLC = this.matrixInverse.transformPoint(p);
        return this.constructor.XYLCPointT(pLC);
    }
    containsPoint(p) {
        const pLC = this.matrixInverse.transformPoint(p);
        return eq0(pLC.z) && this.isValidT(this.constructor.XYLCPointT(pLC, this.tMin, this.tMax));
    }
    isInfosWithLine(anchorWC, dirWC, tMin = this.tMin, tMax = this.tMax, lineMin = -100000, lineMax = 100000) {
        const anchorLC = this.matrixInverse.transformPoint(anchorWC);
        const dirLC = this.matrixInverse.transformVector(dirWC);
        if (eq0(dirLC.z)) {
            // local line parallel to XY-plane
            if (eq0(anchorLC.z)) {
                // local line lies in XY-plane
                return this.constructor.unitIsInfosWithLine(anchorLC, dirLC, anchorWC, dirWC, tMin, tMax);
            }
        }
        else {
            // if the line intersects the XY-plane in a single point, there can be an intersection there
            // find point, then check if distance from circle = 1
            const otherTAtZ0 = anchorLC.z / dirLC.z;
            const isp = dirLC.times(otherTAtZ0).plus(anchorLC);
            if (this.constructor.XYLCValid(isp)) {
                // point lies on unit circle
                return [
                    {
                        tThis: this.constructor.XYLCPointT(isp),
                        tOther: otherTAtZ0,
                        p: anchorWC.plus(dirWC.times(otherTAtZ0)),
                    },
                ];
            }
        }
        return [];
    }
    isTsWithSurface(surface) {
        if (surface instanceof PlaneSurface$$1) {
            return this.isTsWithPlane(surface.plane);
        }
        else if (surface instanceof SemiEllipsoidSurface$$1) {
            const isEllipses = surface.isCurvesWithPlane(this.getPlane());
            return isEllipses
                .flatMap(isEllipse => this.isInfosWithCurve(isEllipse))
                .filter(info => surface.containsPoint(info.p))
                .map(info => info.tThis);
        }
        else if (surface instanceof ProjectedCurveSurface$$1 || surface instanceof ConicSurface$$1) {
            return surface
                .isCurvesWithPlane(this.getPlane())
                .flatMap(curve => this.isInfosWithCurve(curve))
                .map(info => info.tThis);
        }
        else {
            throw new Error();
        }
    }
    isInfosWithBezier(bezierWC) {
        const bezierLC = bezierWC.transform(this.matrixInverse);
        if (new PlaneSurface$$1(P3$$1.XY).containsCurve(bezierLC)) {
            return this.isInfosWithBezier2D(bezierWC);
        }
        else {
            const infos = bezierLC.isTsWithPlane(P3$$1.XY).mapFilter(tOther => {
                const pLC = bezierLC.at(tOther);
                if (this.constructor.XYLCValid(pLC)) {
                    return { tOther: tOther, p: bezierWC.at(tOther), tThis: this.constructor.XYLCPointT(pLC) };
                }
                return undefined;
            });
            return infos;
        }
    }
    isInfosWithBezier2D(bezierWC, sMin = bezierWC.tMin, sMax = bezierWC.tMax) {
        return Curve$$1.ispsRecursive(this, this.tMin, this.tMax, bezierWC, sMin, sMax);
    }
    isOrthogonal() {
        return this.f1.isPerpendicularTo(this.f2);
    }
    at2(xi, eta) {
        assertNumbers(xi, eta);
        // center + f1 xi + f2 eta
        return this.center.plus(this.f1.times(xi)).plus(this.f2.times(eta));
    }
    debugToMesh(mesh, bufferName) {
        mesh[bufferName] || mesh.addVertexBuffer(bufferName, bufferName);
        for (let t = 0; t < Math.PI; t += 0.1) {
            const p = this.at(t);
            mesh[bufferName].push(p, p.plus(this.tangentAt(t).toLength(1)));
            mesh[bufferName].push(p, p.plus(this.normalP(t).toLength(1)));
        }
        mesh[bufferName].push(this.center, this.center.plus(this.f1.times(1.2)));
        mesh[bufferName].push(this.center, this.center.plus(this.f2));
        mesh[bufferName].push(this.center, this.center.plus(this.normal));
    }
}

class ImplicitCurve$$1 extends Curve$$1 {
    constructor(points, tangents, dir = 1, generator, tMin = 1 == dir ? 0 : -(points.length - 1), tMax = 1 == dir ? points.length - 1 : 0) {
        super(tMin, tMax);
        this.points = points;
        this.tangents = tangents;
        this.dir = dir;
        this.generator = generator;
        assert(points.length > 2);
        assert(0 <= tMin && tMin <= points.length - 1, tMin, points.length);
        assert(0 <= tMax && tMax <= points.length - 1, tMax, points.length);
    }
    likeCurve(curve) {
        throw new Error('Method not implemented.');
    }
    toSource(rounder = x => x) {
        return this.generator || super.toSource(rounder);
    }
    containsPoint(p) {
        assertVectors(p);
        return !isNaN(this.pointT(p));
    }
    equals(obj) {
        return (this == obj ||
            (Object.getPrototypeOf(obj) == PICurve$$1.prototype &&
                this.points[0].equals(obj.points[0]) &&
                this.tangents[0].equals(obj.tangents[0])));
    }
    hashCode() {
        return [this.points[0], this.tangents[0]].hashCode();
    }
    tangentP(pWC) {
        assertVectors(pWC);
        assert(this.containsPoint(pWC), 'this.containsPoint(pWC)' + this.containsPoint(pWC));
        const t = this.pointT(pWC);
        return this.tangentAt(t);
    }
    tangentAt(t) {
        t = clamp(t, this.tMin, this.tMax);
        return V3.lerp(this.tangents[floor(t)], this.tangents[ceil(t)], t % 1);
    }
    at(t) {
        assert(isFinite(t));
        return V3.lerp(this.points[floor(t)], this.points[ceil(t)], t % 1);
    }
    getConstructorParameters() {
        throw new Error();
    }
    roots() {
        const allTs = arrayRange(0, this.points.length);
        return [allTs, allTs, allTs];
    }
    /**
     * @param mesh
     * @param res
     * @param radius default to 0. Use the shader to achieve dynamic scaling.
     * @param pointStep
     */
    addToMesh(mesh, res = 4, radius = 0, pointStep = 1) {
        const baseNormals = arrayFromFunction(res, i => V3.polar(1, TAU * i / res));
        const baseVertices = arrayFromFunction(res, i => V3.polar(radius, TAU * i / res));
        let prevTangent = V3.Z, prevMatrix = M4.IDENTITY;
        for (let i = 0; i < this.points.length; i += pointStep) {
            const start = mesh.vertices.length;
            if (0 !== i) {
                for (let j = 0; j < res; j++) {
                    pushQuad(mesh.TRIANGLES, true, start - res + j, start + j, start - res + (j + 1) % res, start + (j + 1) % res);
                }
            }
            const point = this.points[i], tangent = this.tangents[i];
            const tangentMatrix = M4.rotateAB(prevTangent, tangent).times(prevMatrix);
            mesh.normals.push(...tangentMatrix.transformedVectors(baseNormals));
            const baseMatrix = M4.translate(point).times(tangentMatrix);
            mesh.vertices.push(...baseMatrix.transformedPoints(baseVertices));
            prevTangent = tangent;
            prevMatrix = tangentMatrix;
        }
    }
    rootsApprox() {
        const roots = [[], [], []];
        const points = this.points;
        let lastDiff = points[1].minus(points[0]);
        for (let i = 2; i < points.length; i++) {
            const diff = points[i].minus(points[i - 1]);
            for (let dim = 0; dim < 3; dim++) {
                if (Math.sign(lastDiff.e(dim)) != Math.sign(diff.e(dim))) {
                    roots[dim].push(i);
                }
            }
            lastDiff = diff;
        }
        return roots;
    }
    pointT(pWC) {
        const startT = arrayRange(floor(this.tMin), ceil(this.tMax), 1).withMax(t => -pWC.distanceTo(this.points[t]));
        if (undefined === startT)
            throw new Error();
        if (this.points[startT].like(pWC))
            return startT;
        const a = max$1(0, startT - 1), b = min$1(this.points.length - 1, startT + 1);
        const tangent = this.tangentAt(startT);
        const f = (t) => this.at(t)
            .to(pWC)
            .dot(tangent);
        // const df = (t: number) => -this.tangentAt(clamp(t, 0, this.points.length - 1)).dot(tangent)
        //checkDerivate(f, df, 0, this.points.length - 2, 3)
        const t = bisect(f, a, b, 32);
        if (!isFinite(t) || !eq0(this.at(t).distanceTo(pWC))) {
            return NaN;
        }
        return t;
    }
}
ImplicitCurve$$1.prototype.tIncrement = 1;

class BezierCurve$$1 extends Curve$$1 {
    constructor(p0, p1, p2, p3, tMin = -0.1, tMax = 1.1) {
        super(tMin, tMax);
        assertVectors(p0, p1, p2, p3);
        assert(isFinite(tMin) && isFinite(tMax));
        //assert(!L3.throughPoints(p0, p3).containsPoint(p1) || !L3.throughPoints(p0, p3).containsPoint(p2))
        this.p0 = p0;
        this.p1 = p1;
        this.p2 = p2;
        this.p3 = p3;
    }
    get points() {
        return [this.p0, this.p1, this.p2, this.p3];
    }
    /**
     * Returns a curve with curve.at(x) == V(x, ax³ + bx² + cx + d, 0)
     */
    static graphXY(a, b, c, d, tMin, tMax) {
        // d = p0y
        // c = -3 p0y + 3 p1y => p1y = c/3 + p0y
        // b = 3 p0y - 6 p1y + 3 p2y => p2y = b/3 - p0y + 2 p1y
        // a = -p0y + 3 p1y -3 p2y + p3y => p3y = a + p0y - 3 p1y + 3 p2y
        const p0y = d;
        const p1y = c / 3 + p0y;
        const p2y = b / 3 - p0y + 2 * p1y;
        const p3y = a + p0y - 3 * p1y + 3 * p2y;
        return new BezierCurve$$1(V(0, p0y), V(1 / 3, p1y), V(2 / 3, p2y), V(1, p3y), tMin, tMax);
    }
    static quadratic(a, b, c, tMin = 0, tMax = 1) {
        const line = L3$$1.throughPoints(a, c);
        if (line.containsPoint(b)) {
            return line;
        }
        else {
            // p1 = 1/3 a + 2/3 b
            // p2 = 1/3 c + 2/3 b
            return new BezierCurve$$1(a, b
                .times(2)
                .plus(a)
                .div(3), b
                .times(2)
                .plus(c)
                .div(3), c, tMin, tMax);
        }
    }
    /**
     * Returns a bezier curve which approximates a CCW unit circle arc starting at V3.X of angle phi
     * phi <= PI / 2 is recommended
     *
     * Formula from here: https://pomax.github.io/bezierinfo/#circles_cubic
     */
    static approximateUnitArc(phi) {
        const f = 4 / 3 * Math.tan(phi / 4);
        return new BezierCurve$$1(V3.X, new V3(1, f, 0), new V3(cos$1(phi) + f * sin$1(phi), sin$1(phi) - f * cos$1(phi), 0), V3.sphere(phi, 0), 0, 1);
    }
    getConstructorParameters() {
        return [this.p0, this.p1, this.p2, this.p3, this.tMin, this.tMax];
    }
    at(t) {
        // = s^3 p0 + 3 s^2 t p1 + 3 s t^2 p2 + t^3 p3
        assertNumbers(t);
        const p0 = this.p0, p1 = this.p1, p2 = this.p2, p3 = this.p3;
        const s = 1 - t, c0 = s * s * s, c1 = 3 * s * s * t, c2 = 3 * s * t * t, c3 = t * t * t;
        return new V3(p0.x * c0 + p1.x * c1 + p2.x * c2 + p3.x * c3, p0.y * c0 + p1.y * c1 + p2.y * c2 + p3.y * c3, p0.z * c0 + p1.z * c1 + p2.z * c2 + p3.z * c3);
    }
    /**
     * s := (1 - t)
     * at(t) := s³ p0 + 3 s² t p1 + 3 s t² p2 + t³ p3
     * tangent(t) := 3 s² (p1 - p0) + 6 s t (p2 - p1) + 3 t² (p3 - p2)
     *            := 3 (1 - t)² (p1 - p0) + 6 (1 - t) t (p2 - p1) + 3 t² (p3 - p2)
     *            := 3 (1 - 2 t + t²) (p1 - p0) + 6 (t - t²) (p2 - p1) + 3 t² (p3 - p2)
     *            := (3 (p3 - p2) - 6 (p2 - p1) + 3 (p1 - p0)) t²*
     *                + (-6 (p1 - p0) + (p2 - p1)) t
     *                + 3 (p1 - p0)
     */
    tangentAt(t) {
        assertNumbers(t);
        const p0 = this.p0, p1 = this.p1, p2 = this.p2, p3 = this.p3;
        const s = 1 - t, c01 = 3 * s * s, c12 = 6 * s * t, c23 = 3 * t * t;
        return new V3((p1.x - p0.x) * c01 + (p2.x - p1.x) * c12 + (p3.x - p2.x) * c23, (p1.y - p0.y) * c01 + (p2.y - p1.y) * c12 + (p3.y - p2.y) * c23, (p1.z - p0.z) * c01 + (p2.z - p1.z) * c12 + (p3.z - p2.z) * c23);
    }
    ddt(t) {
        assertNumbers(t);
        const p0 = this.p0, p1 = this.p1, p2 = this.p2, p3 = this.p3;
        const c012 = 6 * (1 - t), c123 = 6 * t;
        return new V3((p2.x - 2 * p1.x + p0.x) * c012 + (p3.x - 2 * p2.x + p1.x) * c123, (p2.y - 2 * p1.y + p0.y) * c012 + (p3.y - 2 * p2.y + p1.y) * c123, (p2.z - 2 * p1.z + p0.z) * c012 + (p3.z - 2 * p2.z + p1.z) * c123);
    }
    normalP(t) {
        const tangent = this.tangentAt(t);
        const rot = tangent.cross(this.ddt(t));
        return rot.cross(tangent);
    }
    isTsWithPlane(plane) {
        assertInst(P3$$1, plane);
        /*
         We are solving for t:
         n := plane.normal1
         this.at(t) DOT n == plane.w // according to plane definition
         (a t³ + b t² + c t + d) DOT n == plane.w // bezier curve as cubic equation
         (a DOT n) t³ + (b DOT n) t³ + (c DOT n) t + d DOT n - plane.w == 0 // multiply out DOT n, minus plane.w
         */
        const { p0, p1, p2, p3 } = this;
        const n = plane.normal1;
        const a = p1
            .minus(p2)
            .times(3)
            .minus(p0)
            .plus(p3);
        const b = p0
            .plus(p2)
            .times(3)
            .minus(p1.times(6));
        const c = p1.minus(p0).times(3);
        const d = p0;
        return solveCubicReal2(a.dot(n), b.dot(n), c.dot(n), d.dot(n) - plane.w).filter(t => between(t, this.tMin, this.tMax));
    }
    isTsWithSurface(surface) {
        if (surface instanceof PlaneSurface$$1) {
            return this.isTsWithPlane(surface.plane);
        }
        if (surface instanceof SemiCylinderSurface$$1) {
            const projPlane = new P3$$1(surface.dir.unit(), 0);
            const projThis = this.project(projPlane);
            const projEllipse = surface.baseCurve.project(projPlane);
            return projEllipse.isInfosWithBezier2D(projThis).map(info => info.tOther);
        }
        if (surface instanceof ProjectedCurveSurface$$1) {
            const projPlane = new P3$$1(surface.dir.unit(), 0);
            const projThis = this.project(projPlane);
            const projEllipse = surface.baseCurve.project(projPlane);
            return projEllipse.isInfosWithCurve(projThis).map(info => info.tOther);
        }
        if (surface instanceof SemiEllipsoidSurface$$1) {
            const thisOC = this.transform(surface.matrixInverse);
            const f = (t) => thisOC.at(t).length() - 1;
            const df = (t) => thisOC
                .at(t)
                .unit()
                .dot(thisOC.tangentAt(t));
            const stepSize = 1 / (1 << 11);
            const STEPS = (this.tMax - this.tMin) / stepSize;
            const result = [];
            for (let startT = this.tMin; startT <= this.tMax; startT += stepSize) {
                const dt = stepSize * thisOC.tangentAt(startT).length();
                if (abs$2(f(startT)) <= dt) {
                    //const t = newtonIterate1d(f, startT, 16)
                    let t = newtonIterateWithDerivative(f, startT, 16, df);
                    if (!eq0(f(t)) || eq0(df(t))) {
                        t = newtonIterate1d(df, startT, 16);
                        //if (f(a) * f(b) < 0) {
                        //    t = bisect(f, a, b, 16)
                        //} else if (df(a) * df(b) < 0) {
                        //    t = bisect(df, a, b, 16)
                        //}
                    }
                    if (eq0(f(t)) && !result.some(r => eq(r, t))) {
                        result.push(t);
                    }
                }
            }
            return result.filter(t => surface.containsPoint(this.at(t)));
        }
        throw new Error();
    }
    likeCurve(curve) {
        return (this == curve ||
            (hasConstructor(curve, BezierCurve$$1) &&
                this.p0.like(curve.p0) &&
                this.p1.like(curve.p1) &&
                this.p2.like(curve.p2) &&
                this.p3.like(curve.p3)));
    }
    equals(obj) {
        return (this == obj ||
            (hasConstructor(obj, BezierCurve$$1) &&
                this.p0.equals(obj.p0) &&
                this.p1.equals(obj.p1) &&
                this.p2.equals(obj.p2) &&
                this.p3.equals(obj.p3)));
    }
    hashCode() {
        let hashCode$$1 = 0;
        hashCode$$1 = hashCode$$1 * 31 + this.p0.hashCode();
        hashCode$$1 = hashCode$$1 * 31 + this.p1.hashCode();
        hashCode$$1 = hashCode$$1 * 31 + this.p2.hashCode();
        hashCode$$1 = hashCode$$1 * 31 + this.p3.hashCode();
        return hashCode$$1 | 0;
    }
    /**
     * Checks if this curve is colinear to the passed curve, i.e.
     * for every t:number there exists a s:number with this.at(t) = curve.at(s)
     */
    isColinearTo(curve) {
        if (this === curve || this.likeCurve(curve))
            return true;
        if (!(curve instanceof BezierCurve$$1))
            return false;
        // first, find out where/if curve.p0 and curve.p3 are on this
        // then split this at curve.p0 --> curve.p3 to compare points p1 and p2
        let curveP0T, curveP3T;
        // assign in if condition to exploit short-circuit
        if (isNaN((curveP0T = this.pointT(curve.p0))) || isNaN((curveP3T = this.pointT(curve.p3)))) {
            return false;
        }
        let thisSplit;
        if (eq(1, curveP0T)) {
            // this.split(curveP0T).right is degenerate in this case, so we need to handle it separately
            // this.split(curveP3T): 0 --> curveP3T --> 1
            // .right: curveP3T --> 1
            // .reversed(): 1 --> curveP3T
            thisSplit = this.split(curveP3T)[1].reversed();
        }
        else {
            // curveP3T describes the point on this
            // adjust it so it describes the same point on this.split(curveP0T).right
            // this:                       0           p0t        p3t      1
            //                             |            |          |       |
            // this.split(curveP0T).right:              0        p3tad     1
            const curveP3Tadjusted = (curveP3T - curveP0T) / (1 - curveP0T);
            thisSplit = this.split(curveP0T)[1].split(curveP3Tadjusted)[0];
        }
        return curve.likeCurve(thisSplit);
    }
    reversed() {
        return new BezierCurve$$1(this.p3, this.p2, this.p1, this.p0, 1 - this.tMax, 1 - this.tMin);
    }
    getCoefficients() {
        const { p0, p1, p2, p3 } = this;
        // calculate cubic equation coefficients
        // a t³ + b t² + c t + d = 0
        // multiplying out the cubic Bézier curve equation gives:
        // a = -p0 + 3 p1 - 3 p2 + p3
        // b = 3 p0 - 6 p1 + 3 p2
        // c = -3 p0 + 3 p1
        // d = p0 - p
        const a = p1
            .minus(p2)
            .times(3)
            .minus(p0)
            .plus(p3);
        const b = p0
            .plus(p2)
            .times(3)
            .minus(p1.times(6));
        const c = p1.minus(p0).times(3);
        const d = p0;
        return [a, b, c, d];
    }
    tangentCoefficients() {
        const { p0, p1, p2, p3 } = this;
        const p01 = p1.minus(p0), p12 = p2.minus(p1), p23 = p3.minus(p2);
        const a = p01
            .plus(p23)
            .times(3)
            .minus(p12.times(6));
        const b = p12.minus(p01).times(6);
        const c = p01.times(3);
        return [V3.O, a, b, c];
    }
    pointT2(p, tMin = this.tMin, tMax = this.tMax) {
        const t = this.closestTToPoint(p, undefined, tMin, tMax);
        assert(this.at(t).like(p));
        return t;
    }
    pointT(p) {
        const { p0, p1, p2, p3 } = this;
        // calculate cubic equation coefficients
        // a t³ + b t² + c t + d = 0
        // multiplying out the cubic Bézier curve equation gives:
        // a = -p0 + 3 p1 - 3 p2 + p3
        // b = 3 p0 - 6 p1 + 3 p2
        // c = -3 p0 + 3 p1
        // d = p0 - p
        const a = p1
            .minus(p2)
            .times(3)
            .minus(p0)
            .plus(p3);
        const b = p0
            .plus(p2)
            .times(3)
            .minus(p1.times(6));
        const c = p1.minus(p0).times(3);
        const d = p0.minus(p);
        // a t³ + b t² + c t + d = 0 is 3 cubic equations, some of which can be degenerate
        const maxDim = NLA_PRECISION < a.maxAbsElement()
            ? a.maxAbsDim()
            : NLA_PRECISION < b.maxAbsElement()
                ? b.maxAbsDim()
                : NLA_PRECISION < c.maxAbsElement() ? c.maxAbsDim() : assertNever();
        const results = solveCubicReal2(a.e(maxDim), b.e(maxDim), c.e(maxDim), d.e(maxDim)).filter(t => this.at(t).like(p));
        if (0 == results.length)
            return NaN;
        if (1 == results.length)
            return results[0];
        throw new Error('multiple intersection ' + this.toString() + p.sce);
    }
    pointT3(p) {
        const { p0, p1, p2, p3 } = this;
        // calculate cubic equation coefficients
        // a t³ + b t² + c t + d = 0
        // multiplying out the cubic Bézier curve equation gives:
        // a = -p0 + 3 p1 - 3 p2 + p3
        // b = 3 p0 - 6 p1 + 3 p2
        // c = -3 p0 + 3 p1
        // d = p0 - p
        const a = p1
            .minus(p2)
            .times(3)
            .minus(p0)
            .plus(p3)
            .els();
        const b = p0
            .plus(p2)
            .times(3)
            .minus(p1.times(6))
            .els();
        const c = p1
            .minus(p0)
            .times(3)
            .els();
        const d = p0.minus(p).els();
        let results = undefined;
        // assume passed point is on curve and that curve does not self-intersect,
        // i.e. there is exactly one correct result for t
        // try to find a single result in the x-dimension, if multiple are found,
        // filter them by checking the other dimensions
        for (let dim = 0; dim < 3; dim++) {
            if (eq0(a[dim]) && eq0(b[dim]) && eq0(c[dim])) {
                // for case x:
                // ax == bx == cx == 0 => x(t) = dx
                // x value is constant
                // if x == 0 for all t, this does not limit the result, otherwise, there is no result, i.e
                // the passed point is not on the curve
                if (!eq0(d[dim]))
                    return NaN;
            }
            else {
                const newResults = solveCubicReal2(a[dim], b[dim], c[dim], d[dim]);
                if (0 == newResults.length)
                    return NaN;
                if (1 == newResults.length)
                    return newResults[0];
                if (results) {
                    results = results.filter(t => newResults.some(t2 => eq(t, t2)));
                    if (0 == results.length)
                        return NaN;
                    if (1 == results.length)
                        return results[0];
                }
                else {
                    results = newResults;
                }
            }
        }
        throw new Error('multiple intersection ' + results + this.toString() + p.sce);
    }
    transform(m4) {
        return new BezierCurve$$1(m4.transformPoint(this.p0), m4.transformPoint(this.p1), m4.transformPoint(this.p2), m4.transformPoint(this.p3), this.tMin, this.tMax);
    }
    isClosed() {
        return this.p0.like(this.p3);
    }
    isQuadratic() {
        return this.p1.like(this.p2);
    }
    debugToMesh(mesh, bufferName) {
        const result = mesh.addVertexBuffer(bufferName, bufferName);
        for (let t = -2; t <= 2; t += 0.01) {
            const p = this.at(t);
            result[bufferName].push(p, p.plus(this.tangentAt(t).toLength(1)));
            result[bufferName].push(p, p.plus(this.normalP(t).toLength(1)));
        }
        result[bufferName].push(this.p0, this.p1);
        result[bufferName].push(this.p1, this.p2);
        result[bufferName].push(this.p2, this.p3);
    }
    split(t) {
        // do de Casteljau's algorithm at t, the resulting points are the points needed to create 2 new curves
        const s = 1 - t;
        const { p0, p1, p2, p3 } = this;
        /*
        p3 // n3
        b01 = s p0 + t p1
        b11 = s p1 + t p2
        b21 = s p2 + t p3 // n2
        b02 = s b01 + t b11
        b12 = s b11 + t b21 // n1
        b03 = s b02 + t b12 // n0

        c01 =
        */
        const b01 = p0.times(s).plus(p1.times(t)), b11 = p1.times(s).plus(p2.times(t)), b21 = p2.times(s).plus(p3.times(t));
        const b02 = b01.times(s).plus(b11.times(t)), b12 = b11.times(s).plus(b21.times(t));
        const b03 = b02.times(s).plus(b12.times(t));
        return [new BezierCurve$$1(p0, b01, b02, b03), new BezierCurve$$1(b03, b12, b21, p3)];
    }
    containsPoint(p) {
        return isFinite(this.pointT(p));
    }
    roots() {
        /**
         *            := (3 (p3 - p2) - 6 (p2 - p1) + 3 (p1 - p0)) t²*
         *                + (-6 (p1 - p0) + 6 (p2 - p1)) t
         *                + 3 (p1 - p0)
         *                */
        const { p0, p1, p2, p3 } = this;
        const p01 = p1.minus(p0), p12 = p2.minus(p1), p23 = p3.minus(p2);
        const a = p01
            .plus(p23)
            .times(3)
            .minus(p12.times(6));
        const b = p12.minus(p01).times(6);
        const c = p01.times(3);
        return arrayFromFunction(3, dim => solveCubicReal2(0, a.e(dim), b.e(dim), c.e(dim)));
    }
    isInfosWithLine(anchorWC, dirWC, tMin, tMax, lineMin = -100000, lineMax = 100000) {
        const dirLength = dirWC.length();
        // TODO: no:
        let result = Curve$$1.ispsRecursive(this, this.tMin, this.tMax, new L3$$1(anchorWC, dirWC.unit()), lineMin, lineMax);
        result = fuzzyUniquesF(result, info => info.tOther);
        result.forEach(info => (info.tOther /= dirLength));
        return result;
        // looking for this.at(t) == line.at(s)
        // this.at(t).x == anchorWC.x + dirWC.x * s
        // (this.at(t).x - anchorWC.x) / dirWC.x == s (analogue for y and z) (1x, 1y, 1z)
        // (1x) - (1y):
        // (this.at(t).x - anchorWC.x) / dirWC.x - (this.at(t).y - anchorWC.y) / dirWC.y == 0
        // (this.at(t).x - anchorWC.x) * dirWC.y - (this.at(t).y - anchorWC.y) * dirWC.x == 0 (2)
        // cubic equation params (see #pointT):
        const { p0, p1, p2, p3 } = this;
        const a = p1
            .minus(p2)
            .times(3)
            .minus(p0)
            .plus(p3);
        const b = p0
            .plus(p2)
            .times(3)
            .minus(p1.times(6));
        const c = p1.minus(p0).times(3);
        const d = p0;
        // modifier cubic equation stP to get (1)
        // const w = a.x * dirWC.y - a.y * dirWC.x
        // const x = b.x * dirWC.y - b.y * dirWC.x
        // const y = c.x * dirWC.y - c.y * dirWC.x
        // const z = (d.x - anchorWC.x) * dirWC.y - (d.y - anchorWC.y) * dirWC.x
        // the above version doesn't work for dirWC.x == dirWC.y == 0, so:
        const absMinDim = dirWC.minAbsDim();
        const [coord0, coord1] = [[1, 2], [2, 0], [0, 1]][absMinDim];
        const w = a.e(coord0) * dirWC.e(coord1) - a.e(coord1) * dirWC.e(coord0);
        const x = b.e(coord0) * dirWC.e(coord1) - b.e(coord1) * dirWC.e(coord0);
        const y = c.e(coord0) * dirWC.e(coord1) - c.e(coord1) * dirWC.e(coord0);
        const z = (d.e(coord0) - anchorWC.e(coord0)) * dirWC.e(coord1) - (d.e(coord1) - anchorWC.e(coord1)) * dirWC.e(coord0);
        tMin = undefined !== tMin ? tMin : this.tMin;
        tMax = undefined !== tMax ? tMax : this.tMax;
        // we ignored a dimension in the previous step, so we need to check it too
        return solveCubicReal2(w, x, y, z).mapFilter(tThis => {
            if (tMin <= tThis && tThis <= tMax) {
                const p = this.at(tThis);
                // console.log(t*t*t*w+t*t*x+t*y+z, dirWC.length())
                const s = p.minus(anchorWC).dot(dirWC) / dirWC.dot(dirWC);
                const lineAtS = dirWC.times(s).plus(anchorWC);
                if (lineAtS.like(p))
                    return { tThis: tThis, tOther: s, p: p };
            }
            return undefined;
        });
    }
    closestPointToLine(line, tMin, tMax) {
        // (this(t)-line(s)) * line.dir == 0 (1)
        // (this(t)-line(s)) * this.tangentAt(t) == 0 (2)
        // this(t) * line.dir - line(s) * line.dir == 0
        // this(t) * line.dir - line.anchor * line.dir - s line.dir * line.dir == 0
        // this(t) * line.dir - line.anchor * line.dir == s (3)
        // insert (3) in (2)
        // (this(t)-line(this(t) * line.dir - line.anchor * line.dir)) * this.tangentAt(t) == 0 (4)
        // (4) is a 5th degree polynomial, solve numerically
        tMin = isFinite(tMin) ? tMin : this.tMin;
        tMax = isFinite(tMax) ? tMax : this.tMax;
        const anchorDotDir1 = line.anchor.dot(line.dir1);
        const f = (t) => {
            const atT = this.at(t);
            return atT.minus(line.at(atT.dot(line.dir1) - anchorDotDir1)).dot(this.tangentAt(t));
        };
        const STEPS = 32;
        const startT = arrayFromFunction(STEPS, i => tMin + (tMax - tMin) * i / STEPS).withMax(t => -f(t));
        return newtonIterate1d(f, startT, 8);
    }
    /**
     *
     * @param bezier
     * @param tMin
     * @param tMax
     * @param sMin
     * @param {number=} sMax
     * @returns
     */
    isInfosWithBezier3(bezier, tMin, tMax, sMin, sMax) {
        const handleStartTS = (startT, startS) => {
            if (!result.some(info => eq(info.tThis, startT) && eq(info.tOther, startS))) {
                const f1 = (t, s) => this.tangentAt(t).dot(this.at(t).minus(bezier.at(s)));
                const f2 = (t, s) => bezier.tangentAt(s).dot(this.at(t).minus(bezier.at(s)));
                // f = (b1, b2, t1, t2) = b1.tangentAt(t1).dot(b1.at(t1).minus(b2.at(t2)))
                const fdt1 = (b1, b2, t1, t2) => b1.ddt(t1).dot(b1.at(t1).minus(b2.at(t2))) + b1.tangentAt(t1).squared();
                const fdt2 = (b1, b2, t1, t2) => -b1.tangentAt(t1).dot(b2.tangentAt(t2));
                const ni = newtonIterate2dWithDerivatives(f1, f2, startT, startS, 16, fdt1.bind(undefined, this, bezier), fdt2.bind(undefined, this, bezier), (t, s) => -fdt2(bezier, this, s, t), (t, s) => -fdt1(bezier, this, s, t));
                result.push({ tThis: ni.x, tOther: ni.y, p: this.at(ni.x) });
            }
        };
        tMin = undefined !== tMin ? tMin : this.tMin;
        tMax = undefined !== tMax ? tMax : this.tMax;
        sMin = undefined !== sMin ? sMin : bezier.tMin;
        sMax = undefined !== sMax ? sMax : bezier.tMax;
        // stack of indices:
        const indices = [tMin, tMax, sMin, sMax];
        const tMid = (tMin + tMax) / 2;
        const sMid = (sMin + sMax) / 2;
        const aabbs = [
            this.getAABB(tMin, tMid),
            this.getAABB(tMid, tMax),
            bezier.getAABB(sMin, sMin),
            bezier.getAABB(sMid, sMax),
        ];
        const result = [];
        while (indices.length) {
            const i = indices.length - 4;
            const tMin = indices[i], tMax = indices[i + 1], sMin = indices[i + 2], sMax = indices[i + 3];
            indices.length -= 4;
            const thisAABB = this.getAABB(tMin, tMax);
            const otherAABB = bezier.getAABB(sMin, sMax);
            // console.log(tMin, tMax, sMin, sMax, thisAABB.sce, otherAABB.sce)
            if (thisAABB && otherAABB && thisAABB.intersectsAABB2d(otherAABB)) {
                const tMid = (tMin + tMax) / 2;
                const sMid = (sMin + sMax) / 2;
                const EPS$$1 = 0.00001;
                if (tMax - tMin < EPS$$1 || sMax - sMin < EPS$$1) {
                    console.log(tMin, tMax, sMin, sMax);
                    console.log(thisAABB.sce);
                    console.log(otherAABB.sce);
                    console.log(tMid, sMid);
                    handleStartTS(tMid, sMid);
                }
                else {
                    indices.push(tMin, tMid, sMin, sMid, tMin, tMid, sMid, sMax, tMid, tMax, sMin, sMid, tMid, tMax, sMid, sMax);
                }
            }
        }
        return result;
    }
    isInfosWithBezier(bezier, tMin, tMax, sMin, sMax) {
        tMin = undefined !== tMin ? tMin : this.tMin;
        tMax = undefined !== tMax ? tMax : this.tMax;
        sMin = undefined !== sMin ? sMin : bezier.tMin;
        sMax = undefined !== sMax ? sMax : bezier.tMax;
        assertf(() => tMin < tMax);
        assertf(() => sMin < sMax);
        const result = [];
        const likeCurves = this.likeCurve(bezier), colinearCurves = this.isColinearTo(bezier);
        if (likeCurves || colinearCurves) {
            if (!likeCurves) {
                // only colinear
                // recalculate sMin and sMax so they are valid on this, from then on we can ignore bezier
                sMin = this.pointT(bezier.at(sMin));
                sMax = this.pointT(bezier.at(sMax));
            }
            tMin = Math.min(tMin, sMin);
            tMax = Math.max(tMax, sMax);
            const splits = fuzzyUniques(this.roots()
                .concatenated()
                .filter(isFinite)
                .concat([tMin, tMax])).sort(MINUS);
            //const aabbs = arrayFromFunction(splits.length - 1, i => this.getAABB(splits[i], splits[i + 1]))
            Array.from(combinations(splits.length - 1)).forEach(({ i, j }) => {
                // adjacent curves can't intersect
                if (Math.abs(i - j) > 2) {
                    // console.log(splits[i], splits[i + 1], splits[j], splits[j + 1], aabbs[i], aabbs[j])
                    //findRecursive(splits[i], splits[i + 1], splits[j], splits[j + 1], aabbs[i], aabbs[j])
                    result.push(...Curve$$1.ispsRecursive(this, splits[i], splits[i + 1], bezier, splits[j], splits[j + 1]));
                }
            });
        }
        else {
            return Curve$$1.ispsRecursive(this, tMin, tMax, bezier, sMin, sMax);
        }
        return result;
    }
    selfIntersectionsInfo() {
        return this.isInfosWithBezier(this);
    }
    isInfosWithCurve(curve) {
        if (curve instanceof L3$$1) {
            return this.isInfosWithLine(curve.anchor, curve.dir1, curve.tMin, curve.tMax);
        }
        if (curve instanceof BezierCurve$$1) {
            return this.isInfosWithBezier(curve);
        }
        return curve.isInfosWithCurve(this).map(({ tThis, tOther, p }) => ({ tThis: tOther, tOther: tThis, p }));
    }
    /**
     * Approximate this bezier curve with a number of circular segments. This curve is recursively split in half until
     * segments are close enough (relative error < REL_ERR in two test points) to an arc which goes through the start,
     * end and mid points of the segment.
     * @returns each SemiEllipseCurve is circular and their tMin and tMax respectively define their start and end points.
     * @param t0 Start parameter of segment which should be approximated.
     * @param t1 End parameter of segment which should be approximated.
     * @param REL_ERROR max allowable relative error.
     * @param result Resulting circle arcs are stored in this array. Mainly used by the recursion.
     */
    circleApprox(t0 = this.tMin, t1 = this.tMax, REL_ERR = 1 / 1024, result = []) {
        const a = this.at(t0), b = this.at(t1), tMid = (t0 + t1) / 2, pMid = this.at(tMid), abLine = L3$$1.throughPoints(a, b);
        if (!abLine.containsPoint(pMid) && between(abLine.pointT(pMid), 0, abLine.pointT(b))) {
            const arc = SemiEllipseCurve$$1.circleThroughPoints(a, pMid, b), arcRadius = arc.f1.length(), pTest1 = this.at(lerp(t0, t1, 0.25)), pTest2 = this.at(lerp(t0, t1, 0.75));
            if (abs$2(arc.center.distanceTo(pTest1) / arcRadius - 1) <= REL_ERR &&
                abs$2(arc.center.distanceTo(pTest2) / arcRadius - 1) <= REL_ERR) {
                result.push(arc);
                return result;
            }
        }
        this.circleApprox(t0, tMid, REL_ERR, result);
        this.circleApprox(tMid, t1, REL_ERR, result);
        return result;
    }
}
/**
 * https://en.wikipedia.org/wiki/Cubic_function#/media/File:Graph_of_cubic_polynomial.svg
 */
BezierCurve$$1.EX2D = BezierCurve$$1.graphXY(2, -3, -3, 2);
BezierCurve$$1.EX3D = new BezierCurve$$1(V3.O, V(-0.1, -1, 1), V(1.1, 1, 1), V3.X);
BezierCurve$$1.QUARTER_CIRCLE = BezierCurve$$1.approximateUnitArc(PI$3 / 2);
BezierCurve$$1.prototype.hlol = Curve$$1.hlol++;
BezierCurve$$1.prototype.tIncrement = 1 / 80;

/**
 * x² - y² = 1
 *
 */
class HyperbolaCurve$$1 extends XiEtaCurve$$1 {
    constructor(center, f1, f2, tMin = -7, tMax = 7) {
        super(center, f1, f2, tMin, tMax);
    }
    static XYLCValid(pLC) {
        return pLC.x > 0 && eq(1, pLC.x * pLC.x - pLC.y * pLC.y);
    }
    static XYLCPointT(pLC) {
        return Math.asinh(pLC.y);
    }
    /**
     * http://www.wolframalpha.com/input/?i=x%C2%BRep-y%C2%BRep%3D1,ax%2Bby%3Dc
     * Minor empiric test shows asinh(eta) consistently gets more accurate results than atanh(eta/xi)
     */
    static intersectionUnitLine(a, b, c) {
        if (eq0(b)) {
            const sqrtVal = snap0(Math.pow(c, 2) / Math.pow(a, 2) - 1);
            if (sqrtVal < 0 || c * a < 0) {
                return [];
            }
            else if (sqrtVal == 0) {
                return [0];
            }
            const eta1 = Math.sqrt(sqrtVal);
            return [-Math.asinh(eta1), Math.asinh(eta1)];
        }
        else if (eq(abs$2(a), abs$2(b))) {
            if (le(c * a, 0)) {
                return [];
            }
            const eta = sign$1(a * b) * (Math.pow(c, 2) - Math.pow(a, 2)) / 2 / a / c;
            return [Math.asinh(eta)];
        }
        else {
            const sqrtVal = snap0(Math.pow(b, 2) * (-(Math.pow(a, 2)) + Math.pow(b, 2) + Math.pow(c, 2)));
            if (sqrtVal < 0) {
                return [];
            }
            const xi1 = (a * c - Math.sqrt(sqrtVal)) / (Math.pow(a, 2) - Math.pow(b, 2));
            const xi2 = (a * c + Math.sqrt(sqrtVal)) / (Math.pow(a, 2) - Math.pow(b, 2));
            const eta1 = (Math.pow(b, 2) * c - a * Math.sqrt(sqrtVal)) / (b * (Math.pow(b, 2) - Math.pow(a, 2)));
            const eta2 = (Math.pow(b, 2) * c + a * Math.sqrt(sqrtVal)) / (b * (Math.pow(b, 2) - Math.pow(a, 2)));
            return [xi1 > 0 && Math.asinh(eta1), xi2 > 0 && Math.asinh(eta2)].filter((x) => x !== false);
        }
    }
    at(t) {
        assertNumbers(t);
        // = center + f1 cosh t + f2 sinh t
        return this.center.plus(this.f1.times(Math.cosh(t))).plus(this.f2.times(Math.sinh(t)));
    }
    toString() {
        return `${this.center} + ${this.f1} * cosh(t) + ${this.f2} * sinh(t)`;
    }
    tangentAt(t) {
        assertNumbers(t);
        // = f1 sinh t + f2 cosh t
        return this.f1.times(Math.sinh(t)).plus(this.f2.times(Math.cosh(t)));
    }
    tangentAt2(xi, eta) {
        assertNumbers(xi, eta);
        // = f1 eta + f2 xi
        return this.f1.times(eta).plus(this.f2.times(xi));
    }
    ddt(t) {
        assertNumbers(t);
        return this.f1.times(Math.cosh(t)).plus(this.f2.times(Math.sinh(t)));
    }
    isColinearTo(curve) {
        if (!hasConstructor(curve, HyperbolaCurve$$1))
            return false;
        if (!curve.center || !this.center.like(curve.center)) {
            return false;
        }
        if (this === curve) {
            return true;
        }
        const { f1: f1, f2: f2 } = this.rightAngled(), { f1: c1, f2: c2 } = curve.rightAngled();
        return eq(f1.squared(), Math.abs(f1.dot(c1))) && eq(f2.squared(), Math.abs(f2.dot(c2)));
    }
    reversed() {
        return new HyperbolaCurve$$1(this.center, this.f1, this.f2.negated(), -this.tMax, -this.tMin);
    }
    rightAngled() {
        const f1 = this.f1, f2 = this.f2, a = f1.dot(f2), b = f2.squared() + f1.squared();
        if (eq0(a)) {
            return this;
        }
        const g1 = 2 * a, g2 = b + Math.sqrt(b * b - 4 * a * a);
        const { x1: xi, y1: eta } = intersectionUnitHyperbolaLine$$1(g1, g2, 0);
        return new HyperbolaCurve$$1(this.center, f1.times(xi).plus(f2.times(eta)), f1.times(eta).plus(f2.times(xi)));
    }
    eccentricity() {
        const mainAxes = this.rightAngled();
        const f1length = mainAxes.f1.length(), f2length = mainAxes.f1.length();
        const [a, b] = f1length > f2length ? [f1length, f2length] : [f2length, f1length];
        return Math.sqrt(1 + b * b / a / a);
    }
    roots() {
        // tangent(t) = f1 sinh t + f2 cosh t = 0
        // tangentAt2(xi, eta) = f1 eta + f2 xi = V3.O
        // xi² - eta² = 1 (by def for hyperbola)
        return arrayFromFunction(3, dim => {
            const a = this.f2.e(dim), b = this.f1.e(dim);
            return HyperbolaCurve$$1.intersectionUnitLine(a, b, 0);
        });
    }
}
HyperbolaCurve$$1.XY = new HyperbolaCurve$$1(V3.O, V3.X, V3.Y);
HyperbolaCurve$$1.prototype.tIncrement = PI$3 / 16;

/**
 * A 3-dimensional line. Defined by an anchor and a normalized direction vector.
 */
class L3$$1 extends Curve$$1 {
    constructor(anchor, // line anchor
    dir1, // normalized line dir
    tMin = -4096, tMax = 4096) {
        super(tMin, tMax);
        this.anchor = anchor;
        this.dir1 = dir1;
        assertVectors(anchor, dir1);
        assert(dir1.hasLength(1), 'dir must be unit' + dir1);
        assertf(() => !Number.isNaN(anchor.x));
    }
    isInfosWithLine(anchorWC, dirWC, tMin, tMax, lineMin, lineMax) {
        throw new Error('Method not implemented.');
    }
    isTsWithSurface(surface) {
        return surface.isTsForLine(this);
    }
    static throughPoints(anchor, b, tMin, tMax) {
        return new L3$$1(anchor, b.minus(anchor).unit(), tMin, tMax);
    }
    static pointT(anchor, dir, x) {
        assertVectors(anchor, dir, x);
        return x.minus(anchor).dot(dir) / dir.squared();
    }
    static at(anchor, dir, t) {
        return anchor.plus(dir.times(t));
    }
    /**
     * Create new line which is the intersection of two planes. Throws error if planes are parallel.
     * @param plane1
     * @param plane2
     */
    static fromPlanes(plane1, plane2) {
        assertInst(P3$$1, plane1, plane2);
        const dir = plane1.normal1.cross(plane2.normal1);
        const length = dir.length();
        if (length < 1e-10) {
            throw new Error('Parallel planes');
        }
        return plane1.intersectionWithPlane(plane2);
    }
    static containsPoint(anchor, dir, p) {
        const closestT = L3$$1.pointT(anchor, dir, p);
        const distance = L3$$1.at(anchor, dir, closestT).distanceTo(p);
        return eq0(distance);
    }
    addToMesh(mesh, res = 4, radius = 0, pointStep = 1, tMin = this.tMin, tMax = this.tMax) {
        const baseNormals = arrayFromFunction(res, i => V3.polar(1, TAU * i / res));
        const baseVertices = arrayFromFunction(res, i => V3.polar(radius, TAU * i / res));
        for (let i = 0; i <= 1; i += this.tIncrement) {
            const start = mesh.vertices.length;
            if (0 !== i) {
                for (let j = 0; j < res; j++) {
                    pushQuad(mesh.TRIANGLES, true, start - res + j, start + j, start - res + (j + 1) % res, start + (j + 1) % res);
                }
            }
            const t = 0 == i ? tMin : tMax;
            const point = this.at(t), x = this.dir1.getPerpendicular();
            const matrix = M4.forSys(x, this.dir1.cross(x), this.dir1, point);
            mesh.normals.push(...matrix.transformedVectors(baseNormals));
            mesh.vertices.push(...matrix.transformedPoints(baseVertices));
        }
    }
    roots() {
        return [[], [], []];
    }
    containsPoint(p) {
        assertVectors(p);
        const dist = this.distanceToPoint(p);
        assertNumbers(dist);
        return eq0(dist);
    }
    likeCurve(curve) {
        return (this == curve || (hasConstructor(curve, L3$$1) && this.anchor.like(curve.anchor) && this.dir1.like(curve.dir1)));
    }
    equals(obj) {
        return (this == obj ||
            (Object.getPrototypeOf(obj) == L3$$1.prototype && this.anchor.equals(obj.anchor) && this.dir1.equals(obj.dir1)));
    }
    isColinearTo(obj) {
        return obj instanceof L3$$1 && this.containsPoint(obj.anchor) && eq(1, Math.abs(this.dir1.dot(obj.dir1)));
    }
    distanceToLine(line) {
        assertInst(L3$$1, line);
        if (this.isParallelToLine(line)) {
            return this.distanceToPoint(line.anchor);
        }
        const dirCross1 = this.dir1.cross(line.dir1).unit();
        const anchorDiff = this.anchor.minus(line.anchor);
        return Math.abs(anchorDiff.dot(dirCross1));
    }
    distanceToPoint(x) {
        assertVectors(x);
        // See http://mathworld.wolfram.com/Point-LineDistance3-Dimensional.html
        const t = x.minus(this.anchor).dot(this.dir1);
        return this.at(t).distanceTo(x);
        //return x.minus(this.anchor).cross(x.minus(this.anchor.plus(this.dir1))).length()
    }
    asSegmentDistanceToPoint(x, sStart, sEnd) {
        let t = x.minus(this.anchor).dot(this.dir1);
        t = clamp(t, sStart, sEnd);
        return this.at(t)
            .minus(x)
            .length();
    }
    asSegmentDistanceToLine(line, sStart, sEnd) {
        assertInst(L3$$1, line);
        const dirCross = this.dir1.cross(line.dir1);
        const div = dirCross.squared();
        if (eq0(div)) {
            return undefined;
        } // lines parallel
        const anchorDiff = line.anchor.minus(this.anchor);
        // check if distance is zero (see also L3.distanceToLine)
        if (!eq0(anchorDiff.dot(dirCross.unit()))) {
            return undefined;
        }
        let t = this.infoClosestToLine(line).t;
        t = clamp(t, sStart, sEnd);
        return this.at(clamp(t, sStart, sEnd));
    }
    at(t) {
        assertNumbers(t);
        return this.anchor.plus(this.dir1.times(t));
    }
    /**
     * This function returns lambda for a given point x
     *
     * Every point x on this line is described by the equation
     *      x = this.anchor + lambda * this.dir1 | - this.anchor
     *      x - this.anchor = lambda * this.dir1 | DOT this.dir1
     *      (x - this.anchor) DOT this.dir1 = lambda (dir1² is 1 as |dir1| == 1)
     *
     *  @param x
     *  @returns
     */
    pointT(x) {
        assertVectors(x);
        const t = x.minus(this.anchor).dot(this.dir1);
        return t;
    }
    /**
     * Returns true if the line is parallel (this.dir = line.dir || this.dir = -line.dir) to the argument.
     */
    isParallelToLine(line) {
        assertInst(L3$$1, line);
        // we know that 1 == this.dir1.length() == line.dir1.length(), we can check for parallelity simpler than
        // isParallelTo()
        return eq(1, Math.abs(this.dir1.dot(line.dir1)));
    }
    angleToLine(line) {
        assertInst(L3$$1, line);
        return this.dir1.angleTo(line.dir1);
    }
    /**
     *
     * @param line
     * @returns {boolean} If the distance between the lines is zero
     */
    intersectsLine(line) {
        return eq0(this.distanceToLine(line));
    }
    isInfosWithCurve(curve) {
        if (curve instanceof L3$$1) {
            const dirCross = this.dir1.cross(curve.dir1);
            const div = dirCross.squared();
            if (eq0(div)) {
                // lines are parallel
                return [];
            }
            const anchorDiff = curve.anchor.minus(this.anchor);
            if (eq0(anchorDiff.dot(dirCross))) {
                const tThis = anchorDiff.cross(curve.dir1).dot(dirCross) / div;
                const tOther = anchorDiff.cross(this.dir1).dot(dirCross) / div;
                const p = this.at(tThis);
                return [{ tThis: tThis, tOther: tOther, p: p }];
            }
            return [];
        }
        return super.isInfosWithCurve(curve);
    }
    isInfoWithLine(line) {
        // todo infos?
        assertInst(L3$$1, line);
        const dirCross = this.dir1.cross(line.dir1);
        const div = dirCross.squared();
        if (eq0(div)) {
            return undefined;
        } // lines parallel
        const anchorDiff = line.anchor.minus(this.anchor);
        // check if distance is zero (see also L3.distanceToLine)
        if (!eq0(anchorDiff.dot(dirCross.unit()))) {
            return undefined;
        }
        const t = anchorDiff.cross(line.dir1).dot(dirCross) / div;
        return this.at(t);
    }
    /**
     * returns s and t with this.at(s) == line.at(t)
     */
    intersectionLineST(line) {
        // the two points on two lines the closest two each other are the ones whose
        // connecting
        // TODO Where does this come from?
        // TODO: return value when no IS?
        assertInst(L3$$1, line);
        const dirCross = this.dir1.cross(line.dir1);
        const div = dirCross.squared();
        const anchorDiff = line.anchor.minus(this.anchor);
        const s = anchorDiff.cross(this.dir1).dot(dirCross) / div;
        const t = anchorDiff.cross(line.dir1).dot(dirCross) / div;
        return { s: s, t: t };
        //console.log(segmentIntersectsRay, a, b, "ab", ab, "p", p, "dir", dir, s > 0 && t / div >= 0 && t / div <= 1,
        // "s", s, "t", t, "div", div)
    }
    ddt(t) {
        return V3.O;
    }
    getConstructorParameters() {
        return [this.anchor, this.dir1, this.tMin, this.tMax];
    }
    closestTToPoint(p) {
        // similar logic as pointT; we project the vector (anchor -> p) onto dir1, then add anchor back to it
        const nearestT = p.minus(this.anchor).dot(this.dir1);
        return nearestT;
    }
    infoClosestToLine(line) {
        /*
         line = a + s*b
         this = c + t*d

         (this - line) * b = 0
         (this - line) * d = 0

         (a + s*b - c - t*d) * b = 0
         (a + s*b - c - t*d) * d = 0

         (a - c + s*b - t*d) * b = 0
         (a - c + s*b - t*d) * d = 0

         (a - c)*b + (s*b - t*d)*b = 0
         (a - c)*d + (s*b - t*d)*d = 0

         (a - c)*b + s*(b*b) - t*(d*b) = 0
         (a - c)*d + s*(b*d) - t*(d*d) = 0

         s = (t*(d*b) - (a - c)*b) / (b*b)
         =>
         (a - c)*d + (t*(d*b) - (a - c)*b) / (b*b)*(b*d) - t*(d*d) = 0 | * (b*b)
         (a - c)*d * (b*b) + (t*(d*b) - (a - c)*b)*(b*d) - t*(d*d) * (b*b) = 0
         (a - c)*d * (b*b) + t*(d*b)*(b*d) - (a - c)*b*(b*d) - t*(d*d) * (b*b) = 0
         t = ((a - c)*b*(b*d) - (a - c)*d * (b*b)) / ((d*b)*(b*d) - (d*d) * (b*b))
         */
        if (this.isParallelToLine(line)) {
            return { t: NaN, s: NaN, distance: this.distanceToLine(line) };
        }
        const a = line.anchor, b = line.dir1, c = this.anchor, d = this.dir1;
        const bd = b.dot(d), bb = b.squared(), dd = d.squared(), ca = a.minus(c), divisor = bd * bd - dd * bb;
        const t = (ca.dot(b) * bd - ca.dot(d) * bb) / divisor;
        const s = (ca.dot(b) * dd - ca.dot(d) * bd) / divisor;
        return {
            t: t,
            s: s,
            closest: this.at(t),
            closest2: line.at(s),
            distance: this.at(t).distanceTo(line.at(s)),
        };
    }
    intersectionWithPlane(plane) {
        // plane: plane.normal1 * p = plane.w
        // line: p=line.point + lambda * line.dir1
        const lambda = (plane.w - plane.normal1.dot(this.anchor)) / plane.normal1.dot(this.dir1);
        const point = this.anchor.plus(this.dir1.times(lambda));
        return point;
    }
    tangentAt(t) {
        return this.dir1;
    }
    isTWithPlane(plane) {
        // plane: plane.normal1 * p = plane.w
        // line: p=line.point + lambda * line.dir1
        const div = plane.normal1.dot(this.dir1);
        if (eq0(div))
            return NaN;
        const lambda = (plane.w - plane.normal1.dot(this.anchor)) / div;
        return lambda;
    }
    reversed() {
        return new L3$$1(this.anchor, this.dir1.negated(), -this.tMax, -this.tMin);
    }
    isTsWithPlane(plane) {
        return [this.isTWithPlane(plane)];
    }
    flipped() {
        return new L3$$1(this.anchor, this.dir1.negated());
    }
    transform(m4) {
        const newAnchor = m4.transformPoint(this.anchor);
        const newDir = m4.transformVector(this.dir1);
        return new L3$$1(newAnchor, newDir.unit(), this.tMin * newDir.length(), this.tMax * newDir.length());
    }
    hashCode() {
        return this.anchor.hashCode() * 31 + this.dir1.hashCode();
    }
}
L3$$1.anchorDirection = (anchor, dir) => new L3$$1(anchor, dir.unit());
L3$$1.X = new L3$$1(V3.O, V3.X);
L3$$1.Y = new L3$$1(V3.O, V3.Y);
L3$$1.Z = new L3$$1(V3.O, V3.Z);
L3$$1.prototype.hlol = Curve$$1.hlol++;
L3$$1.prototype.tIncrement = 256;

class PICurve$$1 extends ImplicitCurve$$1 {
    constructor(points, tangents, parametricSurface, implicitSurface, pmPoints, pmTangents, stepSize, dir = 1, generator, tMin, tMax) {
        super(points, tangents, dir, generator, tMin, tMax);
        this.parametricSurface = parametricSurface;
        this.implicitSurface = implicitSurface;
        this.pmPoints = pmPoints;
        this.pmTangents = pmTangents;
        this.stepSize = stepSize;
        assert(Array.isArray(pmPoints));
        assert(dir == 1);
        assert(stepSize <= 1);
        const pf = parametricSurface.pSTFunc();
        const dpds = parametricSurface.dpds();
        const dpdt = parametricSurface.dpdt();
        const didp = implicitSurface.didp.bind(implicitSurface);
        this.dids = (s, t) => didp(pf(s, t)).dot(dpds(s, t));
        this.didt = (s, t) => didp(pf(s, t)).dot(dpdt(s, t));
        for (let i = 0; i < points.length - 1; i++) {
            assert(!points[i].equals(points[i + 1]));
            //assert(parametricSurface.pST(pmPoints[i].x, pmPoints[i].y).equals(points[i]))
        }
        {
            const ps = this.parametricSurface;
            const is = implicitSurface;
            const pFunc = ps.pSTFunc(), iFunc = is.implicitFunction();
            const dpds = ps.dpds();
            const dpdt = ps.dpdt();
            const didp = is.didp.bind(is);
            const mf = MathFunctionR2R$$1.forFFxFy((x, y) => iFunc(pFunc(x, y)), (s, t) => didp(pFunc(s, t)).dot(dpds(s, t)), (s, t) => didp(pFunc(s, t)).dot(dpdt(s, t)));
            const { points } = followAlgorithm2d$$1(mf, this.pmPoints[0], stepSize, ps, (s, t) => is.containsPoint(pFunc(s, t)), this.pmPoints.last, this.pmTangents[0]);
            if (points.length !== this.points.length) {
                followAlgorithm2d$$1(mf, this.pmPoints[0], stepSize, ps, (s, t) => is.containsPoint(pFunc(s, t)), this.pmPoints.last, this.pmTangents[0]);
            }
            assert(points.length == this.points.length, points.length, this.points.length);
        }
    }
    static forParametricStartEnd(ps, is, pmStart, pmEnd, stepSize = 0.02, startPMTangent, tMin, tMax) {
        const pFunc = ps.pSTFunc(), iFunc = is.implicitFunction();
        const dpds = ps.dpds();
        const dpdt = ps.dpdt();
        const didp = is.didp.bind(is);
        const mf = MathFunctionR2R$$1.forFFxFy((x, y) => iFunc(pFunc(x, y)), (s, t) => didp(pFunc(s, t)).dot(dpds(s, t)), (s, t) => didp(pFunc(s, t)).dot(dpdt(s, t)));
        const { points, tangents } = followAlgorithm2d$$1(mf, pmStart, stepSize, ps, (s, t) => is.containsPoint(pFunc(s, t)), pmEnd, startPMTangent);
        return PICurve$$1.forParametricPointsTangents(ps, is, points, tangents, stepSize, 1, tMin, tMax);
    }
    static forStartEnd(ps, is, start, end, stepSize = 0.02, startTangent, min, max) {
        const startPM = ps.stP(start);
        const dpds = ps.dpds()(startPM.x, startPM.y), dpdt = ps.dpdt()(startPM.x, startPM.y);
        const startPMTangent = startTangent &&
            M4.forSys(dpds, dpdt)
                .inversed()
                .transformVector(startTangent);
        // assert(dpds.times(startPMTangent.x).plus(dpdt.times(startPMTangent.y)).like(startTangent))
        const curve = PICurve$$1.forParametricStartEnd(ps, is, startPM, ps.stP(end), stepSize, startPMTangent);
        return curve.withBounds(min && curve.pointT(min), max && curve.pointT(max));
    }
    static forParametricPointsTangents(ps, is, pmPoints, pmTangents, stepSize, dir = 1, tMin, tMax) {
        const pFunc = ps.pSTFunc(), dpds = ps.dpds();
        const dpdt = ps.dpdt();
        const points = pmPoints.map(({ x, y }) => pFunc(x, y));
        const tangents = pmPoints.map(({ x: s, y: t }, i) => {
            const ds = dpds(s, t);
            const dt = dpdt(s, t);
            return ds.times(pmTangents[i].x).plus(dt.times(pmTangents[i].y));
            //const p = points[i]
            //return cs.normalP(p).cross(ses.normalP(p))
            //	.toLength(ds.times(pmTangents[i].x).plus(dt.times(pmTangents[i].y)).length())
        });
        return new PICurve$$1(points, tangents, ps, is, pmPoints, pmTangents, stepSize, dir, undefined, tMin, tMax);
    }
    getConstructorParameters() {
        return [
            this.points,
            this.tangents,
            this.parametricSurface,
            this.implicitSurface,
            this.pmPoints,
            this.pmTangents,
            this.stepSize,
            this.dir,
            this.generator,
            this.tMin,
            this.tMax,
        ];
    }
    implicitCurve() {
        const pF = this.parametricSurface.pSTFunc();
        const iF = this.implicitSurface.implicitFunction();
        return (s, t) => iF(pF(s, t));
    }
    isColinearTo(curve) {
        if (curve instanceof PICurve$$1) {
            if (this.equals(curve)) {
                return true;
            }
            if (this.parametricSurface.isCoplanarTo(curve.parametricSurface) &&
                this.implicitSurface.isCoplanarTo(curve.implicitSurface)) {
                // TODO
            }
            return false;
        }
        else {
            return false;
        }
    }
    containsPoint(p) {
        assertVectors(p);
        const t = this.pointT(p);
        return !isNaN(t) && this.isValidT(t);
    }
    equals(obj) {
        return (Object.getPrototypeOf(obj) == PICurve$$1.prototype &&
            this.parametricSurface.equals(obj.parametricSurface) &&
            this.implicitSurface.equals(obj.implicitSurface) &&
            this.points[0].equals(obj.points[0]) &&
            this.tangents[0].equals(obj.tangents[0]) &&
            this.dir === obj.dir);
    }
    hashCode() {
        let hashCode$$1 = 0;
        hashCode$$1 = hashCode$$1 * 31 + this.parametricSurface.hashCode();
        hashCode$$1 = hashCode$$1 * 31 + this.implicitSurface.hashCode();
        hashCode$$1 = hashCode$$1 * 31 + this.points[0].hashCode();
        hashCode$$1 = hashCode$$1 * 31 + this.tangents[0].hashCode();
        return hashCode$$1 | 0;
    }
    tangentP(point) {
        assertVectors(point);
        assert(this.containsPoint(point), 'this.containsPoint(point)');
        const t = this.pointT(point);
        return this.tangentAt(t);
    }
    tangentAt(t) {
        assert(!isNaN(t));
        if (0 === t % 1)
            return this.tangents[t];
        const st = this.stT(t);
        const stTangent = new V3(-this.didt(st.x, st.y), this.dids(st.x, st.y), 0).toLength(this.stepSize);
        const ds = this.parametricSurface.dpds()(st.x, st.y);
        const dt = this.parametricSurface.dpdt()(st.x, st.y);
        return ds.times(stTangent.x).plus(dt.times(stTangent.y));
    }
    at(t) {
        assert(!isNaN(t));
        if (0 === t % 1)
            return this.points[t];
        const startParams = V3.lerp(this.pmPoints[floor(t)], this.pmPoints[ceil(t)], t % 1);
        return this.closestPointToParams(startParams);
    }
    stT(t) {
        assert(!isNaN(t));
        if (0 === t % 1)
            return this.pmPoints[t];
        const startParams = V3.lerp(this.pmPoints[floor(t)], this.pmPoints[ceil(t)], t % 1);
        return curvePoint$$1(this.implicitCurve(), startParams, this.dids, this.didt);
    }
    closestTToPoint(p, tStart) {
        return 0;
    }
    closestPointToParams(startParams) {
        const pointParams = curvePoint$$1(this.implicitCurve(), startParams, this.dids, this.didt);
        return this.parametricSurface.pSTFunc()(pointParams.x, pointParams.y);
    }
    isTsWithSurface(surface) {
        if (surface instanceof PlaneSurface$$1) {
            return this.isTsWithPlane(surface.plane);
        }
        else if (surface instanceof SemiEllipsoidSurface$$1) {
            const ps = this.parametricSurface, is = this.implicitSurface;
            if (ps instanceof ProjectedCurveSurface$$1 && is instanceof SemiEllipsoidSurface$$1) {
                const iscs = is.isCurvesWithSurface(surface);
                const points = iscs.flatMap(isc => isc.isTsWithSurface(ps).map(t => isc.at(t)));
                const ts = fuzzyUniques(points.map(p => this.pointT(p)));
                return ts.filter(t => !isNaN(t) && this.isValidT(t));
            }
        }
        throw new Error();
    }
    isTsWithPlane(planeWC) {
        const result = [];
        let prevSignedDistance = planeWC.distanceToPointSigned(this.points[0]);
        for (let i = 1; i < this.points.length; i++) {
            const point = this.points[i];
            const signedDistance = planeWC.distanceToPointSigned(point);
            if (prevSignedDistance * signedDistance <= 0) {
                const pF = this.parametricSurface.pSTFunc();
                const dpds = this.parametricSurface.dpds();
                const dpdt = this.parametricSurface.dpdt();
                const startST = this.pmPoints[abs$2(prevSignedDistance) < abs$2(signedDistance) ? i - 1 : i];
                const isST = newtonIterate2dWithDerivatives(this.implicitCurve(), (s, t) => planeWC.distanceToPointSigned(pF(s, t)), startST.x, startST.y, 4, this.dids, this.didt, (s, t) => dpds(s, t).dot(planeWC.normal1), (s, t) => dpdt(s, t).dot(planeWC.normal1));
                result.push(this.pointT(this.parametricSurface.pST(isST.x, isST.y)));
            }
            prevSignedDistance = signedDistance;
        }
        return result;
        // version which intersects the plane with the defining surfaces of this PICurve, but this causes
        // issues when they are PICurves too:
        // assertInst(P3, planeWC)
        // const ps = this.parametricSurface,
        // 	is = this.implicitSurface
        // const pscs = ps.isCurvesWithPlane(planeWC)
        // const iscs = is.isCurvesWithPlane(planeWC)
        // const infos = iscs.flatMap(isc => pscs.flatMap(psc => isc.isInfosWithCurve(psc)))
        // const ts = fuzzyUniques(infos.map(info => this.pointT(info.p)))
        // return ts.filter(t => !isNaN(t) && this.isValidT(t))
    }
    pointT(p) {
        assertVectors(p);
        if (!this.parametricSurface.containsPoint(p) || !this.implicitSurface.containsPoint(p)) {
            return NaN;
        }
        const pmPoint = this.parametricSurface.stPFunc()(p);
        const ps = this.points, pmps = this.pmPoints;
        let t = 0, pmDistance = pmPoint.distanceTo(pmps[0]);
        while (pmDistance > abs$2(this.stepSize) && t < ps.length - 1) {
            // TODO -1?
            //console.log(t, pmps[t].$, pmDistance)
            t = min$1(pmps.length - 1, t + max$1(1, Math.round(pmDistance / abs$2(this.stepSize) / 2 / 2)));
            pmDistance = pmPoint.distanceTo(pmps[t]);
        }
        // if (t < this.pmPoints.length - 1 && pmDistance > pmPoint.distanceTo(pmps[t + 1])) {
        //     t++
        // }
        if (pmDistance > abs$2(this.stepSize) * 1.1) {
            // p is not on this curve
            return NaN;
        }
        if (t == ps.length - 1) {
            t--;
        }
        if (ps[t].like(p))
            return t;
        if (ps[t + 1].like(p))
            return t + 1;
        const startT = arrayRange(floor(this.tMin), ceil(this.tMax), 1).withMax(t => -pmPoint.distanceTo(pmps[t]));
        if (undefined === startT)
            throw new Error();
        if (ps[startT].like(p))
            return startT;
        //const [a, b] = 0 === startT
        //    ? [0, 1]
        //    : this.points.length - 1 === startT
        //        ? [startT - 1, startT]
        //        : pmPoint.distanceTo(pmps[startT - 1]) < pmPoint.distanceTo(pmps[startT + 1])
        //            ? [startT - 1, startT]
        //            : [startT, startT + 1]
        const a = max$1(0, startT - 1), b = min$1(this.points.length - 1, startT + 1);
        const tangent = this.tangentAt(startT);
        const f = (t) => this.at(clamp(t, 0, this.points.length - 1))
            .to(p)
            .dot(tangent);
        // const df = (t: number) => -this.tangentAt(clamp(t, 0, this.points.length - 1)).dot(tangent)
        //checkDerivate(f, df, 0, this.points.length - 2, 3)
        // 8 steps necessary because df can currently be way off
        t = bisect(f, a, b, 32);
        if (!isFinite(t) || this.at(t).distanceTo(p) > abs$2(this.stepSize)) {
            return NaN;
        }
        return t;
    }
    transform(m4) {
        const dirFactor = m4.isMirroring() ? -1 : 1;
        return PICurve$$1.forStartEnd(this.parametricSurface.transform(m4), this.implicitSurface.transform(m4), m4.transformPoint(this.points[0]), m4.transformPoint(this.points.last), this.stepSize * dirFactor, m4.transformVector(this.tangents[0]), m4.transformPoint(this.at(this.tMin)), m4.transformPoint(this.at(this.tMax)));
        //return PICurve.forParametricStartEnd(
        //	this.parametricSurface.transform(m4),
        //	this.implicitSurface.transform(m4),
        //	this.pmPoints[0],
        //	this.pmPoints.last,
        //	this.stepSize,
        //	this.dir,
        //	this.tMin,
        //	this.tMax)
        // TODO: pass transformed points?
        //return new PICurve(
        //	m4.transformedPoints(this.points),
        //	m4.transformedVectors(this.tangents),
        //    this.parametricSurface.transform(m4),
        //   this.implicitSurface.transform(m4),
        //   this.pmPoints,
        //   this.pmTangents,
        //this.stepSize,
        //   this.dir,
        //this.generator,
        //this.tMin, this.tMax)
    }
    roots() {
        const allTs = arrayRange(0, this.points.length);
        return [allTs, allTs, allTs];
    }
    isInfosWithLine(anchorWC, dirWC, tMin, tMax, lineMin, lineMax) {
        throw new Error('Method not implemented.');
    }
    toSource(rounder = x => x) {
        const result = callsce('PICurve.forParametricStartEnd', this.parametricSurface, this.implicitSurface, this.pmPoints[0], this.pmPoints.last, this.stepSize, this.pmTangents[0], this.tMin, this.tMax);
        return result;
    }
}
PICurve$$1.prototype.tIncrement = 1;

class PPCurve$$1 extends ImplicitCurve$$1 {
    constructor(points, tangents, parametricSurface1, parametricSurface2, st1s, pmTangents, stepSize, dir = 1, generator, tMin, tMax) {
        super(points, tangents, dir, generator, tMin, tMax);
        this.parametricSurface1 = parametricSurface1;
        this.parametricSurface2 = parametricSurface2;
        this.st1s = st1s;
        this.pmTangents = pmTangents;
        this.stepSize = stepSize;
        assert(ParametricSurface$$1.is(parametricSurface1));
        assert(ParametricSurface$$1.is(parametricSurface2));
        assert(Array.isArray(st1s));
        assert(dir == 1);
        assert(stepSize <= 1);
    }
    at(t) {
        assert(!isNaN(t));
        if (0 === t % 1)
            return this.points[t];
        const startPoint = V3.lerp(this.points[floor(t)], this.points[ceil(t)], t % 1);
        return curvePointPP$$1(this.parametricSurface1, this.parametricSurface2, startPoint).p;
    }
    isColinearTo(curve) {
        if (curve instanceof PPCurve$$1) {
            if (this.equals(curve)) {
                return true;
            }
            if (this.parametricSurface1.isCoplanarTo(curve.parametricSurface1) &&
                this.parametricSurface1.isCoplanarTo(curve.parametricSurface2)) {
                // TODO
            }
            return false;
        }
        else {
            return false;
        }
    }
    containsPoint(p) {
        assertVectors(p);
        // TODO: wrong, as there could be another curve
        return (this.parametricSurface1.containsPoint(p) &&
            this.parametricSurface2.containsPoint(p) &&
            !isNaN(this.pointT(p)));
    }
    rootPoints() {
        const pF1 = this.parametricSurface1.pSTFunc();
        const pF2 = this.parametricSurface2.pSTFunc();
        const pN1 = this.parametricSurface1.normalSTFunc();
        const pN2 = this.parametricSurface2.normalSTFunc();
        const rootsApprox = this.rootsApprox();
        const results = [[], [], []];
        for (let dim = 0; dim < 3; dim++) {
            for (let i = 0; i < rootsApprox[dim].length; i++) {
                const lambda = rootsApprox[dim][i];
                const p = this.at(lambda);
                assert(this.parametricSurface1.containsPoint(p));
                const pp1 = this.parametricSurface1.stP(p);
                const { x: u, y: v } = this.parametricSurface2.stP(p);
                const startValues = [pp1.x, pp1.y, u, v];
                function f(vals) {
                    const [s, t, u, v] = vals;
                    const diff = pF1(s, t).minus(pF2(u, v));
                    const n1 = pN1(s, t);
                    const n2 = pN2(u, v);
                    const tangent = n1.cross(n2);
                    return [diff.x, diff.y, diff.z, tangent.e(dim)];
                }
                const pps = newtonIterate(f, startValues, 8);
                // assert(pF1(pps[0], pps[1]).like(pF2(pps[2], pps[3])),
                // 	pF1(pps[0], pps[1]).sce + pF2(pps[2], pps[3]).sce)
                const result = pF1(pps[0], pps[1]);
                results[dim].push(result);
            }
        }
        return results;
    }
    roots() {
        return this.rootPoints().map(ps => ps.map(p => this.pointT(p)));
    }
    pointTangent(pWC) {
        assertVectors(pWC);
        assert(this.containsPoint(pWC), 'this.containsPoint(pWC)');
        const n1 = this.parametricSurface1.normalP(pWC);
        const n2 = this.parametricSurface2.normalP(pWC);
        return n1.cross(n2);
    }
    transform(m4, desc) {
        return new PPCurve$$1(m4.transformedPoints(this.points), m4.transformedVectors(this.tangents), this.parametricSurface1.transform(m4), this.parametricSurface2.transform(m4), this.st1s, undefined, this.stepSize, this.dir, undefined);
    }
    toSource(rounder = x => x) {
        const result = callsce('PPCurve.forStartEnd', this.parametricSurface1, this.parametricSurface2, this.points[0], this.points.last, this.stepSize);
        return result;
    }
    static forStartEnd(ps1, ps2, startPoint, end, stepSize = 0.02) {
        const { points, tangents, st1s } = followAlgorithmPP$$1(ps1, ps2, startPoint, stepSize);
        return new PPCurve$$1(points, tangents, ps1, ps2, st1s, undefined, stepSize, 1);
    }
}

/**
 * eta = xi²
 */
class ParabolaCurve$$1 extends XiEtaCurve$$1 {
    constructor(center, f1, f2, tMin = -10, tMax = 10) {
        super(center, f1, f2, tMin, tMax);
    }
    static eccentricity() {
        return 1;
    }
    static unitIsInfosWithLine(anchorLC, dirLC, anchorWC, dirWC) {
        // para: x² = y
        // line(t) = anchor + t dir
        // (ax + t dx)² = ay + t dy
        // ax² + t ax dx + t² dx² = ay + t dy
        // t² dx² + t (ax dx + dy) + ay² + ay = 0
        const pqDiv = Math.pow(dirLC.x, 2);
        const lineTs = pqFormula((anchorLC.x * dirLC.x + dirLC.y) / pqDiv, (Math.pow(anchorLC.x, 2) + anchorLC.y) / pqDiv);
        return lineTs.filter(tOther => le(0, anchorLC.y + tOther * dirLC.y)).map(tOther => ({
            tThis: dirLC.x * tOther + anchorLC.x,
            tOther: tOther,
            p: L3$$1.at(anchorWC, dirWC, tOther),
        }));
    }
    static intersectionUnitLine(a, b, c) {
        /*
         solve system (5)/(6)
         g1 * xi + g2 * eta = g3 (6)
         g1 * xi + g2 * xi * xi = g3
         xi² + xi * g1/g2 - g3/g2 = 0
         */
        return pqFormula(a / b, -c / b);
    }
    static XYLCValid(pLC) {
        return eq(Math.pow(pLC.x, 2), pLC.y);
    }
    static XYLCPointT(pLC) {
        return pLC.x;
    }
    static quadratic(a, b, c) {
        // (1 - t)² a + 2 * t * (1 - t) b + t² c
        // (1 -2t +t²)a + (2t -2t²) b + t² c
        // = t²(a - 2b + c) + t (-2a + 2b) + a
        // (2t - 2) a + (1 - 2t) b + 2t c = t(2a + 2b - 2c) - 2a + b
        // 2 a + -2 b + 2 c
        const f2 = a.plus(c).minus(b.times(2));
        const f1 = b.minus(a).times(2);
        const center = a;
        return new ParabolaCurve$$1(center, f1, f2, 0, 1);
    }
    at(t) {
        // center + f1 t + f2 t²
        return this.center.plus(this.f1.times(t)).plus(this.f2.times(t * t));
    }
    tangentAt(t) {
        assertNumbers(t);
        // f1 + f2 2 t
        return this.f1.plus(this.f2.times(2 * t));
    }
    ddt(t) {
        assertNumbers(t);
        return this.f2.times(2);
    }
    tangentAt2(xi, eta) {
        assertNumbers(xi, eta);
        return this.f1.plus(this.f2.times(2 * eta));
    }
    reversed() {
        return new this.constructor(this.center, this.f1.negated(), this.f2, -this.tMax, -this.tMin);
    }
    /**
     * tangent: f1 + 2 * t * f2 = 0
     * t = -f1 / 2 / f2 (for individual dimensions)
     */
    roots() {
        const dimRoots = (dim) => (eq0(this.f2.e(dim)) ? [] : [-this.f1.e(dim) / 2 / this.f2.e(dim)]);
        return arrayFromFunction(3, dimRoots);
    }
    isColinearTo(curve) {
        if (!hasConstructor(curve, ParabolaCurve$$1))
            return false;
        const thisRA = this.rightAngled(), curveRA = curve.rightAngled();
        return thisRA.center.like(curveRA.center) && thisRA.f2.like(curveRA.f2) && thisRA.f1.likeOrReversed(curveRA.f1);
    }
    rightAngled() {
        // looking for vertex of parabola
        // this is the point where the tangent is perpendicular to the main axis (f2)
        // tangent = f1 + f2 * 2 * t0
        // f2 DOT (f1 + f2 * 2 * t0) == 0
        // f1 DOT f2 + f2 DOT f2 * 2 * t0 == 0
        // t0 == -(f1 DOT f2) / (f2 DOT f2 * 2)
        const f1 = this.f1, f2 = this.f2;
        const f1DOTf2 = f1.dot(f2);
        if (eq0(f1DOTf2) && f1.hasLength(1)) {
            return this;
        }
        const t0 = -f1DOTf2 / f2.squared() / 2;
        // we need to rearange tMin/tMax
        // tMin' = pointT(at(tMin)) =
        const raCenter = this.at(t0);
        const raF1 = this.tangentAt(t0), raF1Length = raF1.length(), raF11 = raF1.unit();
        const repos = (t) => this.at(t)
            .minus(raCenter)
            .dot(raF11);
        return new ParabolaCurve$$1(raCenter, raF11, f2.div(Math.pow(raF1Length, 2)), repos(this.tMin), repos(this.tMax));
    }
    arcLength(startT, endT) {
        let f1 = this.f1;
        const f2 = this.f2;
        const f1DOTf2 = f1.dot(f2);
        let t0 = 0;
        if (!eq0(f1DOTf2)) {
            t0 = -f1DOTf2 / f2.squared() / 2;
            f1 = f1.plus(f2.times(2 * t0));
        }
        const f1Length = f1.length();
        const a = f2.length() / f1Length;
        function F(x) {
            return Math.asinh(a * 2 * x) / 4 / a + x * Math.sqrt(1 + a * a * 4 * x * x) / 2;
        }
        return f1Length * (F(endT - t0) - F(startT - t0));
    }
    asBezier() {
        return BezierCurve$$1.quadratic(this.at(-1), new L3$$1(this.at(-1), this.tangentAt(-1).unit()).isInfoWithLine(new L3$$1(this.at(1), this.tangentAt(1).unit())), this.at(1));
    }
}
ParabolaCurve$$1.XY = new ParabolaCurve$$1(V3.O, V3.X, V3.Y);
ParabolaCurve$$1.YZ = new ParabolaCurve$$1(V3.O, V3.Y, V3.Z);
ParabolaCurve$$1.ZX = new ParabolaCurve$$1(V3.O, V3.Z, V3.X);
ParabolaCurve$$1.prototype.tIncrement = 1 / 32;

class SemiEllipseCurve$$1 extends XiEtaCurve$$1 {
    constructor(center, f1, f2, tMin = 0, tMax = PI$3) {
        super(center, f1, f2, tMin, tMax);
        assert(-PI$3 <= this.tMin && this.tMin < PI$3);
        assert(-PI$3 < this.tMax && this.tMax <= PI$3);
    }
    static XYLCValid(pLC) {
        const { x, y } = pLC;
        return eq0(Math.pow(x, 2) + Math.pow(y, 2) - 1);
    }
    static XYLCPointT(pLC, tMin, tMax) {
        assertNumbers(tMin, tMax);
        const t = atan2(pLC.y, pLC.x);
        const lowSplitter = lerp(tMin, tMax - TAU, 0.5);
        if (t < lowSplitter) {
            return t + TAU;
        }
        const highSplitter = lerp(tMax, tMin + TAU, 0.5);
        if (t > highSplitter) {
            return t - TAU;
        }
        return t;
    }
    static intersectionUnitLine(a, b, c, tMin, tMax) {
        const isLC = intersectionUnitCircleLine2$$1(a, b, c);
        const result = [];
        for (const [xi, eta] of isLC) {
            const t = SemiEllipseCurve$$1.XYLCPointT(new V3(xi, eta, 0), tMin, tMax);
            fuzzyBetween(t, tMin, tMax) && result.push(t);
        }
        return result;
    }
    static unitIsInfosWithLine(anchorLC, dirLC, anchorWC, dirWC, tMin, tMax) {
        // ell: x² + y² = 1 = p²
        // line(t) = anchor + t dir
        // anchor² - 1 + 2 t dir anchor + t² dir² = 0
        const pqDiv = dirLC.squared();
        const lineTs = pqFormula(2 * dirLC.dot(anchorLC) / pqDiv, (anchorLC.squared() - 1) / pqDiv);
        return lineTs.filter(tOther => le(0, anchorLC.y + tOther * dirLC.y)).map(tOther => ({
            tThis: SemiEllipseCurve$$1.XYLCPointT(dirLC.times(tOther).plus(anchorLC), tMin, tMax),
            tOther: tOther,
            p: L3$$1.at(anchorWC, dirWC, tOther),
        }));
    }
    /**
     * Returns a new SemiEllipseCurve representing a circle parallel to the XY-plane.`
     */
    static semicircle(radius, center = V3.O, tMin, tMax) {
        return new SemiEllipseCurve$$1(center, new V3(radius, 0, 0), new V3(0, radius, 0), tMin, tMax);
    }
    static circleForCenter2P(center, a, b, radius, tMin, tMax) {
        const f1 = center.to(a);
        const normal = f1.cross(center.to(b));
        const f2 = normal.cross(f1).toLength(f1.length());
        return new SemiEllipseCurve$$1(center, f1, f2, undefined !== tMin ? tMin : 0, undefined !== tMax ? tMax : f1.angleTo(center.to(b)));
    }
    split(tMin = this.tMin, tMax = this.tMax) {
        const result = [];
        tMin < 0 &&
            result.push(new SemiEllipseCurve$$1(this.center, this.f1.negated(), this.f2.negated(), tMin + PI$3, min$1(0, tMax) + PI$3));
        tMax > 0 && result.push(new SemiEllipseCurve$$1(this.center, this.f1, this.f2, max$1(0, tMin), tMax));
        return result;
    }
    static forAB(a, b, center = V3.O) {
        return super.forAB(a, b, center);
    }
    /**
     * Create a circle curve which has a, b and c on it. a, b, c can't be on a straight line.
     * tMin defaults to 0, tMax defaults to the value for c
     */
    static circleThroughPoints(a, b, c, tMin = 0, tMax) {
        assertf(() => !L3$$1.throughPoints(a, c).containsPoint(b));
        const normal = a.to(b).cross(b.to(c));
        const center = new L3$$1(a.lerp(b, 0.5), normal.cross(a.to(b)).unit()).isInfoWithLine(new L3$$1(b.lerp(c, 0.5), normal.cross(b.to(c)).unit()));
        const f1 = center.to(a).negated();
        return new SemiEllipseCurve$$1(center, f1, normal.unit().cross(f1), -PI$3, undefined === tMax ? f1.angleRelativeNormal(center.to(c), normal.unit()) : tMax);
    }
    getAreaInDir(right, up, tStart, tEnd) {
        //assertf(() => tStart < tEnd)
        assertf(() => right.isPerpendicularTo(this.normal));
        assertf(() => up.isPerpendicularTo(this.normal));
        //assertf(() => EllipseCurve.isValidT(tStart), tStart)
        //assertf(() => EllipseCurve.isValidT(tEnd), tEnd)
        const upLC = this.matrixInverse.transformVector(up);
        const rightLC = upLC.cross(V3.Z);
        const normTStart = tStart - rightLC.angleXY();
        const normTEnd = tEnd - rightLC.angleXY();
        const transformedOriginY = this.matrixInverse.getTranslation().dot(upLC.unit());
        // integral of sqrt(1 - x²) from 0 to cos(t)
        // Basically, we want
        // INTEGRAL[cos(t); PI/2] sqrt(1 - x²) dx
        // INTEGRAL[PI/2: cos(t)] -sqrt(1 - x²) dx
        // = INTEGRAL[cos(0); cos(t)] -sqrt(1 - x²) dx
        // = INTEGRAL[0; t] -sqrt(1 - cos²(t)) * -sin(t) dt
        // = INTEGRAL[0; t] -sin(t) * -sin(t) dt
        // = INTEGRAL[0; t] sin²(t) dt (partial integration / wolfram alpha)
        // = (1/2 * (t - sin(t) * cos(t)))[0; t] (this form has the distinct advantage of being defined everywhere)
        function fArea(t) {
            return (t - Math.sin(t) * Math.cos(t)) / 2;
        }
        // for the centroid, we want
        // cx = 1 / area * INTEGRAL[cos(t); PI/2] x * f(x) dx
        // cx = 1 / area * INTEGRAL[cos(t); PI/2] x * sqrt(1 - x²) dx
        // cx = 1 / area * INTEGRAL[cos(0); cos(t)] x * -sqrt(1 - x²) dx
        // ...
        // cx = 1 / area * INTEGRAL[0; t] cos(t) * sin²(t) dt // WA
        // cx = 1 / area * (sin^3(t) / 3)[0; t]
        function cxTimesArea(t) {
            return Math.pow(Math.sin(t), 3) / 3;
        }
        // cy = 1 / area * INTEGRAL[cos(t); PI/2] f²(x) / 2 dx
        // cy = 1 / area * INTEGRAL[cos(0); cos(t)] -(1 - x²) / 2 dx
        // cy = 1 / area * INTEGRAL[0; t] (cos²(t) - 1) * -sin(t) / 2 dt
        // cy = 1 / area * (cos (3 * t) - 9 * cos(t)) / 24 )[0; t]
        function cyTimesArea(t) {
            return (Math.cos(3 * t) - 9 * Math.cos(t)) / 24;
        }
        const restArea = -transformedOriginY * (-Math.cos(normTEnd) + Math.cos(normTStart));
        const area = fArea(normTEnd) - fArea(normTStart) + restArea;
        const cxt = (cxTimesArea(normTEnd) -
            cxTimesArea(normTStart) +
            -transformedOriginY * (-Math.cos(normTEnd) - Math.cos(normTStart)) / 2 * restArea) /
            area;
        const cyt = (cyTimesArea(normTEnd) - cyTimesArea(normTStart) - -transformedOriginY / 2 * restArea) / area;
        const factor = this.matrix.xyAreaFactor(); // * upLC.length()
        //console.log('fctor', factor, 'area', area, 'resultarea', area* factor)
        assert(!eq0(factor));
        return {
            area: area * factor,
            centroid: this.matrix.transformPoint(M4.rotateZ(rightLC.angleXY()).transformPoint(new V3(cxt, cyt, 0))),
        };
    }
    at(t) {
        assertNumbers(t);
        //assert(this.isValidT(t))
        // = center + f1 cos t + f2 sin t
        return this.center.plus(this.f1.times(Math.cos(t))).plus(this.f2.times(Math.sin(t)));
    }
    tangentAt(t) {
        assertNumbers(t);
        //assert(this.isValidT(t))
        // ) f2 cos(t) - f1 sin(t)
        return this.f2.times(Math.cos(t)).minus(this.f1.times(Math.sin(t)));
    }
    ddt(t) {
        assertNumbers(t);
        assert(this.isValidT(t));
        return this.f2.times(-Math.sin(t)).minus(this.f1.times(Math.cos(t)));
    }
    tangentAt2(xi, eta) {
        return this.f2.times(xi).minus(this.f1.times(eta));
    }
    isCircular() {
        return eq(this.f1.length(), this.f2.length()) && this.f1.isPerpendicularTo(this.f2);
    }
    isColinearTo(curve) {
        if (!hasConstructor(curve, SemiEllipseCurve$$1))
            return false;
        if (!this.center.like(curve.center)) {
            return false;
        }
        if (this == curve) {
            return true;
        }
        if (this.isCircular()) {
            return (curve.isCircular() && eq(this.f1.length(), curve.f1.length()) && this.normal.isParallelTo(curve.normal));
        }
        else {
            let { f1: f1, f2: f2 } = this.rightAngled(), { f1: c1, f2: c2 } = curve.rightAngled();
            if (f1.length() > f2.length()) {
                [f1, f2] = [f2, f1];
            }
            if (c1.length() > c2.length()) {
                [c1, c2] = [c2, c1];
            }
            return eq(f1.squared(), Math.abs(f1.dot(c1))) && eq(f2.squared(), Math.abs(f2.dot(c2)));
        }
    }
    pointT(pWC) {
        assertVectors(pWC);
        assert(this.containsPoint(pWC));
        const pLC = this.matrixInverse.transformPoint(pWC);
        const t = SemiEllipseCurve$$1.XYLCPointT(pLC, this.tMin, this.tMax);
        assert(this.isValidT(t));
        return t;
    }
    reversed() {
        return new SemiEllipseCurve$$1(this.center, this.f1.negated(), this.f2, PI$3 - this.tMax, PI$3 - this.tMin);
    }
    eccentricity() {
        const mainAxes = this.rightAngled();
        const f1length = mainAxes.f1.length(), f2length = mainAxes.f1.length();
        const [a, b] = f1length > f2length ? [f1length, f2length] : [f2length, f1length];
        return Math.sqrt(1 - b * b / a / a);
    }
    circumference() {
        return this.arcLength(-Math.PI, Math.PI);
    }
    arcLength(tStart = this.tMin, tEnd = this.tMax, steps = 2) {
        assert(tStart < tEnd, 'startT < endT');
        const f1Length = this.f1.length();
        if (eq(f1Length, this.f2.length())) {
            return f1Length * (tEnd - tStart);
        }
        return super.arcLength(tStart, tEnd, steps);
    }
    circumferenceApproximate() {
        // approximate circumference by Ramanujan
        // https://en.wikipedia.org/wiki/Ellipse#Circumference
        const { f1, f2 } = this.rightAngled(), a = f1.length(), b = f2.length();
        const h = Math.pow((a - b), 2) / Math.pow((a + b), 2);
        return Math.PI * (a + b) * (1 + 3 * h / (10 + Math.sqrt(4 - 3 * h)));
    }
    /**
     * Radii of the ellipse are described by
     * q(phi) = f1 * cos(phi) + f2 * sin(phi)
     * or q(xi, eta) = f1 * xi + f2 * eta (1) with the added condition
     * xi² + eta² = 1 (2)
     * we want to find the radius where the corresponding tangent is perpendicular
     * tangent: q'(phi) = f1 * -sin(phi) + f2 * cos(phi)
     * tangent: q'(xi, eta) = f1 * -eta + f2 * xi
     * perpendicular when: q'(xi, eta) DOT q(xi, eta) = 0
     * (f1 * -eta + f2 * xi) DOT (f1 * xi + f2 * eta) = 0
     * DOT is distributive:
     * f1² * (-eta * xi) + f1 * f2 * (-eta² + xi²) + f2² * (xi * eta) = 0
     * (f2² - f1²) * (eta * xi) + f1 * f2 * (-eta² + xi²) = 0
     * a * (xi² - eta²) + b * xi * eta = 0 (2)
     * with a = f1 * f2, b = f2² - f1²
     * => (xi/eta)² + xi/eta * b/a + 1 = 0 (divide by a * eta²)
     * xi/eta = b/a/2 +- sqrt(b²/a²/4 - 1) | * 2*a*eta
     * 2 * a * xi = eta * (b +- sqrt(b² - 4 * a²))
     * g1 * xi - g2 * eta = 0 (3)
     * with g1 = 2 * a, g2 = b +- sqrt(b² - 4 * a²)
     * Solve (3), (2) with intersectionUnitCircleLine
     */
    rightAngled() {
        const f1 = this.f1, f2 = this.f2, a = f1.dot(f2), b = f2.squared() - f1.squared();
        if (eq0(a)) {
            return this;
        }
        const g1 = 2 * a, g2 = b + Math.sqrt(b * b + 4 * a * a);
        const { x1: xi, y1: eta } = intersectionUnitCircleLine$$1(g1, g2, 0);
        const f1RA = f1.times(xi).plus(f2.times(eta));
        const f2RA = f1.times(-eta).plus(f2.times(xi));
        return new SemiEllipseCurve$$1(this.center, f1RA, f2RA, -PI$3, PI$3);
    }
    isInfosWithEllipse(ellipse) {
        if (this.normal.isParallelTo(ellipse.normal) && eq0(this.center.minus(ellipse.center).dot(ellipse.normal))) {
            // ellipses are coplanar
            const ellipseLCRA = ellipse.transform(this.matrixInverse).rightAngled();
            const r1 = ellipseLCRA.f1.lengthXY(), r2 = ellipseLCRA.f2.lengthXY(), centerDist = ellipseLCRA.center.lengthXY();
            const rMin = min$1(r1, r2), rMax = max$1(r1, r2);
            if (lt(centerDist + rMax, 1) || // entirely inside unit circle
                lt(1, centerDist - rMax) || // entirely outside unit circle
                lt(1, rMin - centerDist) || // contains unit circle
                (eq(1, r1) && eq(1, r2) && eq0(centerDist)) // also unit circle, return no IS
            ) {
                return [];
            }
            const f = (t) => ellipseLCRA.at(t).lengthXY() - 1;
            const df = (t) => ellipseLCRA
                .at(t)
                .xy()
                .dot(ellipseLCRA.tangentAt(t)) / ellipseLCRA.at(t).lengthXY();
            checkDerivate(f, df, -PI$3, PI$3, 1);
            const ellipseLCRATs = [];
            for (let startT = -4 / 5 * PI$3; startT < PI$3; startT += PI$3 / 4) {
                let t = newtonIterateSmart(f, startT, 16, df, 1e-4);
                le(t, -PI$3) && (t += TAU);
                assert(!isNaN(t));
                if (between(t, -PI$3, PI$3) && eq0(f(t)) && !ellipseLCRATs.some(r => eq(t, r))) {
                    ellipseLCRATs.push(t);
                }
            }
            const result = [];
            for (const ellipseLCRAT of ellipseLCRATs) {
                const p = this.matrix.transformPoint(ellipseLCRA.at(ellipseLCRAT));
                if (this.containsPoint(p) && ellipse.containsPoint(p)) {
                    result.push({ tThis: this.pointT(p), tOther: ellipse.pointT(p), p });
                }
            }
            return result;
            //const angle = ellipseLCRA.f1.angleXY()
            //const aSqr = ellipseLCRA.f1.squared(), bSqr = ellipseLCRA.f2.squared()
            //const a = Math.sqrt(aSqr), b = Math.sqrt(bSqr)
            //const {x: centerX, y: centerY} = ellipseLCRA.center
            //const rotCenterX = centerX * Math.cos(-angle) + centerY * -Math.sin(-angle)
            //const rotCenterY = centerX * Math.sin(-angle) + centerY * Math.cos(-angle)
            //const rotCenter = V(rotCenterX, rotCenterY)
            //const f = t => {
            //	const lex = Math.cos(t) - rotCenterX, ley = Math.sin(t) - rotCenterY
            //	return lex * lex / aSqr + ley * ley / bSqr - 1
            //}
            //const f2 = (x, y) => (x * x + y * y - 1)
            //const f3 = (x, y) => ((x - rotCenterX) * (x - rotCenterX) / aSqr + (y - rotCenterY) * (y - rotCenterY) /
            // bSqr - 1) const results = [] const resetMatrix = this.matrix.times(M4.rotateZ(angle)) for (let startT =
            // Math.PI / 4; startT < 2 * Math.PI; startT += Math.PI / 2) { const startP = EllipseCurve.XY.at(startT)
            // const p = newtonIterate2d(f3, f2, startP.x, startP.y, 10) if (p && !results.some(r => r.like(p))) {
            // results.push(p) } } const rotEl = new EllipseCurve(rotCenter, V(a, 0, 0), V(0, b, 0)) return
            // results.map(pLC => { const p = resetMatrix.transformPoint(pLC) return {tThis: this.pointT(p, PI),
            // tOther: ellipse.pointT(p, PI), p} })
        }
        else {
            return this.isTsWithPlane(P3$$1.normalOnAnchor(ellipse.normal.unit(), ellipse.center)).mapFilter(t => {
                const p = this.at(t);
                if (ellipse.containsPoint(p)) {
                    return { tThis: t, tOther: ellipse.pointT(p), p };
                }
                return undefined;
            });
        }
    }
    isInfosWithCurve(curve) {
        if (curve instanceof SemiEllipseCurve$$1) {
            return this.isInfosWithEllipse(curve);
        }
        return super.isInfosWithCurve(curve);
    }
    roots() {
        // tangent(t) = f2 cos t - f1 sin t
        // solve for each dimension separately
        // tangent(eta, xi) = f2 eta - f1 xi
        return arrayFromFunction(3, dim => {
            const a = this.f2.e(dim), b = -this.f1.e(dim);
            return intersectionUnitCircleLine2$$1(a, b, 0)
                .map(([xi, eta]) => Math.atan2(eta, xi))
                .filter(t => this.isValidT(t));
        });
    }
    closestTToPoint(p, tStart) {
        // (at(t) - p) * tangentAt(t) = 0
        // (xi f1 + eta f2 + q) * (xi f2 - eta f1) = 0
        // xi eta (f2^2-f1^2) + xi f2 q - eta² f1 f2 + xi² f1 f2 - eta f1 q = 0
        //  (xi² - eta²) f1 f2 + xi eta (f2^2-f1^2) + xi f2 q - eta f1 q = 0
        // atan2 of p is a good first approximation for the searched t
        tStart = tStart || this.matrixInverse.transformPoint(p).angleXY();
        const pRelCenter = p.minus(this.center);
        const f = (t) => this.tangentAt(t).dot(this.f1
            .times(Math.cos(t))
            .plus(this.f2.times(Math.sin(t)))
            .minus(pRelCenter));
        return newtonIterate1d(f, tStart, 8);
    }
    area() {
        // see
        // https://upload.wikimedia.org/wikipedia/commons/thumb/4/4e/Cross_product_parallelogram.svg/220px-Cross_product_parallelogram.svg.png
        return Math.PI * this.f1.cross(this.f2).length();
    }
    angleToT(phi) {
        // atan2(y, x) = phi
        const phiDir = this.f1
            .unit()
            .times(Math.cos(phi))
            .plus(this.f2
            .rejectedFrom(this.f1)
            .unit()
            .times(Math.sin(phi)));
        const dirLC = this.matrixInverse.transformVector(phiDir);
        return dirLC.angleXY();
    }
}
SemiEllipseCurve$$1.UNIT = new SemiEllipseCurve$$1(V3.O, V3.X, V3.Y);
SemiEllipseCurve$$1.prototype.hlol = Curve$$1.hlol++;
SemiEllipseCurve$$1.prototype.tIncrement = 2 * Math.PI / (4 * 32);

class P3$$1 extends Transformable {
    /**
     * Oriented plane, i.e. splits R^3 in half, with one half being "in front" of the plane.
     * Leads to multiple comparisons: isCoplanarToPlane returns if the plane occupies the same space,
     * like returns if the plane occupies the same space and has the same orientation
     *
     * Points x on the plane fulfill the equation: normal1 DOT x = w
     *
     * @param normal1 unit plane normal1
     * @param w signed (rel to normal1) distance from the origin
     */
    constructor(normal1, w = 0) {
        super();
        this.normal1 = normal1;
        this.w = w;
        assertVectors(normal1);
        assertNumbers(w);
        assert(normal1.hasLength(1), 'normal1.hasLength(1)' + normal1);
    }
    get anchor() {
        return this.normal1.times(this.w);
    }
    static throughPoints(a, b, c) {
        assertVectors(a, b, c);
        const n1 = b
            .minus(a)
            .cross(c.minus(a))
            .unit();
        return new P3$$1(n1, n1.dot(a));
    }
    static normalOnAnchor(normal, anchor) {
        assertVectors(normal, anchor);
        const n1 = normal.unit();
        return new this(n1, n1.dot(anchor));
    }
    /**
     * Create a plane which intersects the X, Y and Z axes at the specified offsets.
     * x/x0 + y/y0 + y/y0 = 1
     */
    static forAxisIntercepts(x0, y0, z0) {
        assertNumbers(x0, y0, z0);
        const normal = new V3(1 / x0, 1 / y0, 1 / z0);
        return new P3$$1(normal.unit(), normal.length());
    }
    /**
     * Create a plane containing `anchor` and extending in directions `v0` and `v1`.
     * `v0` and `v1` may not be parallel.
     * @param anchor
     * @param v0
     * @param v1
     */
    static forAnchorAndPlaneVectors(anchor, v0, v1) {
        assertVectors(anchor, v0, v1);
        assert(!v0.isParallelTo(v1));
        return this.normalOnAnchor(v0.cross(v1), anchor);
    }
    /**
     * Create a plane which contains botha point and a line. The point may not lie on the line.
     * @param p
     * @param line
     */
    static forPointAndLine(p, line) {
        return this.forAnchorAndPlaneVectors(line.anchor, line.dir1, line.anchor.to(p));
    }
    axisIntercepts() {
        const w = this.w, n = this.normal1;
        return new V3(w / n.x, w / n.y, w / n.z);
    }
    isCoplanarToPlane(plane) {
        assertInst(P3$$1, plane);
        return this.like(plane) || this.likeFlipped(plane);
    }
    like(plane) {
        assertInst(P3$$1, plane);
        return eq(this.w, plane.w) && this.normal1.like(plane.normal1);
    }
    likeFlipped(plane) {
        assertInst(P3$$1, plane);
        return eq(this.w, -plane.w) && this.normal1.like(plane.normal1.negated());
    }
    /**
     * True iff plane.normal1 is equal to this.normal1 or it's negation.
     *
     */
    isParallelToPlane(plane) {
        assertInst(P3$$1, plane);
        return eq(1, Math.abs(this.normal1.dot(plane.normal1)));
    }
    isParallelToLine(line) {
        assertInst(L3$$1, line);
        return eq0(this.normal1.dot(line.dir1));
    }
    isPerpendicularToLine(line) {
        assertInst(L3$$1, line);
        // this.normal1 || line.dir1
        return eq(1, Math.abs(this.normal1.dot(line.dir1)));
    }
    isPerpendicularToPlane(plane) {
        assertInst(P3$$1, plane);
        return eq0(this.normal1.dot(plane.normal1));
    }
    toSource() {
        return callsce('new P3', this.normal1, this.w);
    }
    translated(offset) {
        return new P3$$1(this.normal1, this.w + offset.dot(this.normal1));
    }
    transform(m4) {
        const mirror = m4.isMirroring();
        // get two vectors in the plane:
        const u = this.normal1.getPerpendicular();
        const v = u.cross(this.normal1);
        // get 3 points in the plane:
        const p1 = m4.transformPoint(this.anchor), p2 = m4.transformPoint(this.anchor.plus(v)), p3 = m4.transformPoint(this.anchor.plus(u));
        // and create a new plane from the transformed points:
        return P3$$1.throughPoints(p1, !mirror ? p2 : p3, !mirror ? p3 : p2);
    }
    distanceToLine(line) {
        assertInst(L3$$1, line);
        if (!this.isParallelToLine(line)) {
            return this.distanceToPoint(line.anchor);
        }
        else {
            return 0;
        }
    }
    containsPoint(x) {
        assertVectors(x);
        return eq(this.w, this.normal1.dot(x));
    }
    containsLine(line) {
        assertInst(L3$$1, line);
        return this.containsPoint(line.anchor) && this.isParallelToLine(line);
    }
    distanceToPointSigned(point) {
        assertInst(V3, point);
        return this.normal1.dot(point) - this.w;
    }
    distanceToPoint(point) {
        assertInst(V3, point);
        return Math.abs(this.normal1.dot(point) - this.w);
    }
    intersectionWithLine(line) {
        return line.intersectionWithPlane(this);
    }
    intersectionWithPlane(plane) {
        /*

         this: n0 * x = w0
         plane: n1 * x = w1
         plane perpendicular to both which goes through origin:
         n2 := n0 X x1
         n2 * x = 0
         */
        assertInst(P3$$1, plane);
        assert(!this.isParallelToPlane(plane), '!this.isParallelToPlane(plane)');
        /*
         var n0 = this.normal1, n1 = plane.normal1, n2 = n0.cross(n1).unit(), m = M4.forSys(n0, n1, n2)
         var x0 = this.anchor, x1 = plane.anchor, x2 = V3.O
         var p = n2.times(x2.dot(n2))
         .plus(n1.cross(n2).times(x0.dot(n0)))
         .plus(n2.cross(n0).times(x1.dot(n1)))
         .div(m.determinant())
         */
        const n0 = this.normal1, n1 = plane.normal1, n2 = n0.cross(n1).unit();
        const p = M4.forRows(n0, n1, n2)
            .inversed()
            .transformVector(new V3(this.w, plane.w, 0));
        return new L3$$1(p, n2);
    }
    /**
     * Returns the point in the plane closest to the given point
     *
     */
    projectedPoint(x) {
        // See http://math.stackexchange.com/questions/444968/project-a-point-in-3d-on-a-given-plane
        // p = x - ((x - planeAnchor) * normal1) * normal1
        return x.minus(this.normal1.times(x.minus(this.anchor).dot(this.normal1)));
    }
    projectedVector(x) {
        // See V3.rejectedFrom. Simplified, as this.normal1.length() == 1
        return x.minus(this.normal1.times(x.dot(this.normal1)));
    }
    flipped() {
        return new P3$$1(this.normal1.negated(), -this.w);
    }
    containsCurve(curve) {
        if (curve instanceof L3$$1) {
            return this.containsLine(curve);
        }
        else if (curve instanceof SemiEllipseCurve$$1 ||
            curve instanceof HyperbolaCurve$$1 ||
            curve instanceof ParabolaCurve$$1) {
            return this.containsPoint(curve.center) && this.normal1.isParallelTo(curve.normal);
        }
        else if (curve instanceof BezierCurve$$1) {
            return curve.points.every(p => this.containsPoint(p));
        }
        else {
            throw new Error('' + curve);
        }
    }
    equals(obj) {
        return hasConstructor(obj, P3$$1) && this.normal1.equals(obj.normal1) && this.w == obj.w;
    }
    hashCode() {
        return (this.normal1.hashCode() * 31) | (0 + floatHashCode(this.w));
    }
}
P3$$1.YZ = new P3$$1(V3.X, 0);
P3$$1.ZX = new P3$$1(V3.Y, 0);
P3$$1.XY = new P3$$1(V3.Z, 0);

class Surface$$1 extends Transformable {
    static loopContainsPointGeneral(loop, pWC, testLine, lineOut) {
        const testPlane = P3$$1.normalOnAnchor(lineOut, pWC);
        // edges colinear to the testing line; these will always be counted as "inside" relative to the testing line
        const colinearEdges = loop.map(edge => edge.colinearToLine(testLine));
        let inside = false;
        function logIS(isP) {
            const isT = testLine.pointT(isP);
            if (eq0(isT)) {
                return true;
            }
            else if (isT > 0) {
                inside = !inside;
            }
            return false;
        }
        for (let edgeIndex = 0; edgeIndex < loop.length; edgeIndex++) {
            const edge = loop[edgeIndex];
            const nextEdgeIndex = (edgeIndex + 1) % loop.length, nextEdge = loop[nextEdgeIndex];
            //console.log(edge.toSource()) {p:V(2, -2.102, 0),
            if (colinearEdges[edgeIndex]) {
                const lineAT = testLine.pointT(edge.a), lineBT = testLine.pointT(edge.b);
                if (Math.min(lineAT, lineBT) <= NLA_PRECISION && -NLA_PRECISION <= Math.max(lineAT, lineBT)) {
                    return PointVsFace$$1.ON_EDGE;
                }
                // edge colinear to intersection
                const nextInside = colinearEdges[nextEdgeIndex] ||
                    dotCurve2$$1(nextEdge.curve, nextEdge.aT, lineOut, sign$1(nextEdge.deltaT())) < 0;
                if (!nextInside) {
                    if (logIS(edge.b))
                        return PointVsFace$$1.ON_EDGE;
                }
            }
            else {
                for (const edgeT of edge.edgeISTsWithPlane(testPlane)) {
                    if (edgeT == edge.bT) {
                        if (!testLine.containsPoint(edge.b))
                            continue;
                        // endpoint lies on intersection line
                        if (edge.b.like(pWC)) {
                            // TODO: refactor, dont check for different sides, just logIs everything
                            return PointVsFace$$1.ON_EDGE;
                        }
                        const edgeInside = dotCurve2$$1(edge.curve, edge.bT, lineOut, -sign$1(edge.deltaT())) < 0;
                        const nextInside = colinearEdges[nextEdgeIndex] ||
                            dotCurve2$$1(nextEdge.curve, nextEdge.aT, lineOut, sign$1(nextEdge.deltaT())) < 0;
                        if (edgeInside != nextInside) {
                            if (logIS(edge.b))
                                return PointVsFace$$1.ON_EDGE;
                        }
                    }
                    else if (edgeT != edge.aT) {
                        const p = edge.curve.at(edgeT);
                        if (!testLine.containsPoint(p))
                            continue;
                        // edge crosses line, neither starts nor ends on it
                        if (logIS(p))
                            return PointVsFace$$1.ON_EDGE;
                        // TODO: tangents?
                    }
                }
            }
        }
        return inside ? PointVsFace$$1.INSIDE : PointVsFace$$1.OUTSIDE;
    }
    static loopContainsPointEllipse(loop, pWC, testLine, pWCT) {
        const lineOut = testLine.normal;
        const testPlane = P3$$1.normalOnAnchor(testLine.normal, pWC);
        const colinearEdges = loop.map(edge => testLine.isColinearTo(edge.curve));
        let inside = false;
        if (undefined === pWCT) {
            pWCT = testLine.pointT(pWC);
        }
        const pT = pWCT;
        function logIS(isP) {
            const isT = testLine.pointT(isP);
            if (eq(pT, isT)) {
                return true;
            }
            else if (pT < isT && le(isT, PI$3)) {
                inside = !inside;
            }
            return false;
        }
        for (let edgeIndex = 0; edgeIndex < loop.length; edgeIndex++) {
            const edge = loop[edgeIndex];
            const nextEdgeIndex = (edgeIndex + 1) % loop.length, nextEdge = loop[nextEdgeIndex];
            //console.log(edge.toSource()) {p:V(2, -2.102, 0),
            if (colinearEdges[edgeIndex]) {
                let edgeT;
                if (edge.curve.containsPoint(pWC) &&
                    le(edge.minT, (edgeT = edge.curve.pointT(pWC))) &&
                    le(edgeT, edge.maxT)) {
                    return PointVsFace$$1.ON_EDGE;
                }
                // edge colinear to intersection
                const nextInside = colinearEdges[nextEdgeIndex] ||
                    dotCurve2$$1(nextEdge.curve, nextEdge.aT, lineOut, sign$1(nextEdge.deltaT())) < 0;
                if (!nextInside && testLine.containsPoint(edge.b)) {
                    if (logIS(edge.b))
                        return PointVsFace$$1.ON_EDGE;
                }
            }
            else {
                for (const edgeT of edge.edgeISTsWithPlane(testPlane)) {
                    if (edgeT == edge.bT) {
                        if (!testLine.containsPoint(edge.b))
                            continue;
                        // endpoint lies on intersection testLine
                        const edgeInside = dotCurve2$$1(edge.curve, edge.bT, lineOut, -sign$1(edge.deltaT())) < 0;
                        const nextInside = colinearEdges[nextEdgeIndex] ||
                            dotCurve2$$1(nextEdge.curve, nextEdge.aT, lineOut, sign$1(nextEdge.deltaT())) < 0;
                        if (edgeInside != nextInside) {
                            if (logIS(edge.b))
                                return PointVsFace$$1.ON_EDGE;
                        }
                    }
                    else if (edgeT != edge.aT) {
                        const p = edge.curve.at(edgeT);
                        if (!testLine.containsPoint(p))
                            continue;
                        // edge crosses testLine, neither starts nor ends on it
                        if (logIS(p))
                            return PointVsFace$$1.ON_EDGE;
                        // TODO: tangents?
                    }
                }
            }
        }
        return inside ? PointVsFace$$1.INSIDE : PointVsFace$$1.OUTSIDE;
    }
    toString() {
        return this.toSource();
    }
    toSource(rounder = x => x) {
        return callsce.call(undefined, 'new ' + this.constructor.name, ...this.getConstructorParameters());
    }
    /**
     * Return points which would touch AABB. Doesnt include borders due to paramtetric bounds, for example.
     */
    getExtremePoints() {
        return [];
    }
    isCurvesWithSurface(surface) {
        return surface.isCurvesWithSurface(this); //.map(curve => curve.reversed())
    }
    containsCurve(curve) {
        if (curve instanceof PPCurve$$1) {
            if (this.equals(curve.parametricSurface1) || this.equals(curve.parametricSurface2)) {
                return true;
            }
        }
        if (curve instanceof ImplicitCurve$$1) {
            for (let i = ceil(curve.tMin) + 1; i <= floor(curve.tMax) - 1; i++) {
                if (!this.containsPoint(curve.points[i])) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }
    flipped2(doFlip) {
        return doFlip ? this.flipped() : this;
    }
    clipCurves(curves) {
        return curves;
    }
    equals(obj) {
        return (this === obj ||
            (this.constructor === obj.constructor &&
                this.getConstructorParameters().equals(obj.getConstructorParameters())));
    }
    hashCode() {
        return this.getConstructorParameters().hashCode();
    }
    zDirVolume(allEdges) {
        return this.visit(ZDirVolumeVisitor$$1, allEdges);
    }
    calculateArea(allEdges) {
        return this.visit(CalculateAreaVisitor$$1, allEdges);
    }
}
var PointVsFace$$1;
(function (PointVsFace$$1) {
    PointVsFace$$1[PointVsFace$$1["INSIDE"] = 0] = "INSIDE";
    PointVsFace$$1[PointVsFace$$1["OUTSIDE"] = 1] = "OUTSIDE";
    PointVsFace$$1[PointVsFace$$1["ON_EDGE"] = 2] = "ON_EDGE";
})(PointVsFace$$1 || (PointVsFace$$1 = {}));
class ImplicitSurface$$1 extends Surface$$1 {
    static is(obj) {
        return obj.implicitFunction && obj.didp;
    }
}

class ParametricSurface$$1 extends Surface$$1 {
    constructor(sMin, sMax, tMin, tMax) {
        super();
        this.sMin = sMin;
        this.sMax = sMax;
        this.tMin = tMin;
        this.tMax = tMax;
        assertNumbers(sMin, sMax, tMin, tMax);
        assert(sMin < sMax);
        assert(tMin < tMax);
        assert((x => x[x.length - 4])(this.getConstructorParameters()) == this.sMin, this.getConstructorParameters(), this.sMin);
    }
    static isCurvesParametricImplicitSurface(ps, is, sStep, tStep = sStep, curveStepSize) {
        const pf = ps.pSTFunc(), icc = is.implicitFunction();
        const dpds = ps.dpds();
        const dpdt = ps.dpdt();
        const didp = is.didp.bind(is);
        const ist = (x, y) => icc(pf(x, y));
        const dids = (s, t) => didp(pf(s, t)).dot(dpds(s, t));
        const didt = (s, t) => didp(pf(s, t)).dot(dpdt(s, t));
        const mf = MathFunctionR2R$$1.forFFxFy(ist, dids, didt);
        const curves = Curve$$1.breakDownIC(mf, ps, sStep, tStep, curveStepSize, (s, t) => is.containsPoint(pf(s, t))).map(({ points, tangents }, i) => PICurve$$1.forParametricPointsTangents(ps, is, points, tangents, curveStepSize));
        return curves;
    }
    static isCurvesParametricParametricSurface(ps1, ps2, s1Step, t1Step = s1Step, curveStepSize) {
        return breakDownPPCurves$$1(ps1, ps2, s1Step, t1Step, curveStepSize);
    }
    static is(obj) {
        return obj.pSTFunc;
    }
    pST(s, t) {
        return this.pSTFunc()(s, t);
    }
    pSTFunc() {
        return this.pST.bind(this);
    }
    stP(pWC) {
        return this.stPFunc()(pWC);
    }
    stPFunc() {
        return this.stP.bind(this);
    }
    bounds(s, t) {
        return this.sMin <= s && s <= this.sMax && this.tMin <= t && t <= this.tMax;
    }
    /**
     * Positive values are inside bounds.
     */
    boundsSigned(s, t) {
        return min$1(s - this.sMin, this.sMax - s, t - this.tMin, this.tMax - t);
    }
    normalP(p) {
        const pmPoint = this.stPFunc()(p);
        return this.normalST(pmPoint.x, pmPoint.y);
    }
    normalSTFunc() {
        return this.normalST.bind(this);
    }
    normalST(s, t) {
        return this.normalSTFunc()(s, t);
    }
    parametersValid(s, t) {
        return between(s, this.sMin, this.sMax) && between(t, this.tMin, this.tMax);
    }
    toMesh() {
        assert(isFinite(this.tMin) && isFinite(this.tMax) && isFinite(this.sMin) && isFinite(this.sMax));
        assert(isFinite(this.uStep) && isFinite(this.vStep));
        return Mesh.parametric(this.pSTFunc(), this.normalSTFunc(), this.sMin, this.sMax, this.tMin, this.tMax, ceil((this.sMax - this.sMin) / this.uStep), ceil((this.tMax - this.tMin) / this.vStep));
    }
    isCurvesWithImplicitSurface(is, sStep, tStep, stepSize) {
        return ParametricSurface$$1.isCurvesParametricImplicitSurface(this, is, sStep, tStep, stepSize);
    }
    edgeLoopCCW(contour) {
        const ptpF = this.stPFunc();
        return isCCW(contour.flatMap(e => e.getVerticesNo0()).map(v => ptpF(v)), V3.Z);
    }
    like(object) {
        if (!this.isCoplanarTo(object))
            return false;
        // normals need to point in the same direction (outwards or inwards) for both
        const pSMinTMin = this.pSTFunc()(this.sMin, this.tMin);
        const thisNormal = this.normalSTFunc()(this.sMin, this.tMin);
        const otherNormal = object.normalP(pSMinTMin);
        return 0 < thisNormal.dot(otherNormal);
    }
}

class ConicSurface$$1 extends ParametricSurface$$1 {
    /**
     * returns new cone C = {apex + f1 * z * cos(d) + f2 * z * sin(d) + f3 * z | -PI <= d <= PI, 0 <= z}
     * @param f1
     * @param f2
     * @param dir Direction in which the cone opens. The ellipse spanned by f1, f2 is contained at (apex + f1).
     */
    constructor(center, f1, f2, dir, sMin = 0, sMax = PI$3, tMin = 0, tMax = 16) {
        super(sMin, sMax, tMin, tMax);
        this.center = center;
        this.f1 = f1;
        this.f2 = f2;
        this.dir = dir;
        assertVectors(center, f1, f2, dir);
        assert(0 <= tMin);
        this.matrix = M4.forSys(f1, f2, dir, center);
        this.matrixInverse = this.matrix.inversed();
        this.normalDir = sign$1(this.f1.cross(this.f2).dot(this.dir));
        this.pLCNormalWCMatrix = this.matrix
            .as3x3()
            .inversed()
            .transposed()
            .scale(this.normalDir);
    }
    pointFoot(pWC, ss, st) {
        if (undefined === ss || undefined === st) {
            // similar to stP
            const pLC = this.matrixInverse.transformPoint(pWC);
            const angle = pLC.angleXY();
            if (undefined === ss) {
                ss = angle < -PI$3 / 2 ? angle + TAU : angle;
            }
            if (undefined === st) {
                st = pLC.z + (pLC.lengthXY() - pLC.z) * sqrt(2) / 2;
            }
        }
        const f = ([s, t]) => {
            const pSTToPWC = this.pST(s, t).to(pWC);
            return [this.dpds()(s, t).dot(pSTToPWC), this.dpdt()(s).dot(pSTToPWC)];
        };
        const { 0: x, 1: y } = newtonIterate(f, [ss, st]);
        return new V3(x, y, 0);
    }
    get apex() {
        return this.center;
    }
    static atApexThroughEllipse(apex, ellipse, sMin, sMax, tMin, tMax) {
        assertVectors(apex);
        assertInst(SemiEllipseCurve$$1, ellipse);
        return new ConicSurface$$1(apex, ellipse.f1, ellipse.f2, apex.to(ellipse.center), sMin, sMax, tMin, tMax);
    }
    static unitISLineTs(anchor, dir) {
        const { x: ax, y: ay, z: az } = anchor;
        const { x: dx, y: dy, z: dz } = dir;
        // this cone: x² + y² = z²
        // line: p = anchor + t * dir1
        // split line equation into 3 component equations, insert into cone equation
        // transform to form (a t² + b t + c = 0) and solve with pqFormula
        const a = dx * dx + dy * dy - dz * dz;
        const b = 2 * (ax * dx + ay * dy - az * dz);
        const c = ax * ax + ay * ay - az * az;
        // cone only defined for 0 <= z, so filter invalid values
        return pqFormula(b / a, c / a).filter(t => 0 < az + t * dz);
    }
    // calculate intersection of plane ax + cz = d and cone x² + y² = z²
    static unitISPlane(a, c, d) {
        if (eq0(c)) {
            // plane is "vertical", i.e. parallel to Y and Z axes
            assert(!eq0(a)); // normal would be zero, which is invalid
            // z² - y² = d²/a²
            if (eq0(d)) {
                // d = 0 => z² - y² = 0 => z² = y² => z = y
                // plane goes through origin/V3.O
                return [
                    new L3$$1(V3.O, new V3(0, -sqrt(2) / 2, -sqrt(2) / 2), undefined, 0),
                    new L3$$1(V3.O, new V3(0, -sqrt(2) / 2, sqrt(2) / 2), 0),
                ];
            }
            else {
                // hyperbola
                const center = new V3(d / a, 0, 0);
                const f1 = new V3(0, 0, abs$2(d / a)); // abs, because we always want the hyperbola to be pointing up
                const f2 = new V3(0, d / a, 0);
                return [new HyperbolaCurve$$1(center, f1, f2)];
            }
        }
        else {
            // c != 0
            const aa = a * a, cc = c * c;
            if (eq0(d)) {
                // ax + cz = d => x = d - cz / a => x² = d² - 2cdz/a + c²z²/a²
                // x² + y² = z²
                // => d² - 2cdz/a + c²z²/a² + y² = z²
                if (eq(aa, cc)) {
                    return [new L3$$1(V3.O, new V3(c, 0, -a).unit())];
                }
                else if (aa < cc) {
                    throw new Error('intersection is single point V3.O');
                }
                else if (aa > cc) {
                    return [
                        new L3$$1(V3.O, new V3(c, sqrt(aa - cc), -a).unit()),
                        new L3$$1(V3.O, new V3(c, -sqrt(aa - cc), -a).unit()),
                    ];
                }
            }
            else {
                if (eq(aa, cc)) {
                    // parabola
                    const parabolaVertex = new V3(d / 2 / a, 0, d / 2 / c);
                    const parabolaVertexTangentPoint = new V3(d / 2 / a, d / c, d / 2 / c);
                    const p2 = new V3(0, 0, d / c);
                    const f2 = p2.minus(parabolaVertex);
                    return [
                        new ParabolaCurve$$1(parabolaVertex, parabolaVertexTangentPoint.minus(parabolaVertex), f2.z < 0 ? f2.negated() : f2),
                    ];
                }
                else if (aa < cc) {
                    // ellipse
                    const center = new V3(-a * d / (cc - aa), 0, d * c / (cc - aa));
                    if (center.z < 0) {
                        return [];
                    }
                    const p1 = new V3(d / (a - c), 0, -d / (a - c));
                    const p2 = new V3(-a * d / (cc - aa), d / sqrt(cc - aa), d * c / (cc - aa));
                    return [new SemiEllipseCurve$$1(center, center.to(p1), center.to(p2), -PI$3, PI$3)];
                }
                else if (aa > cc) {
                    // hyperbola
                    const center = new V3(-a * d / (cc - aa), 0, d * c / (cc - aa));
                    const p1 = new V3(d / (a - c), 0, -d / (a - c));
                    const p2 = new V3(-a * d / (cc - aa), d / sqrt(aa - cc), d * c / (cc - aa));
                    // const f1 = center.to(p1)
                    const f1 = new V3(d * c / (aa - cc), 0, -d * a / (aa - cc));
                    const f2 = new V3(0, d / sqrt(aa - cc), 0);
                    return [new HyperbolaCurve$$1(center, f1.z > 0 ? f1 : f1.negated(), f2)];
                }
            }
        }
        throw new Error('???');
    }
    equals(obj) {
        return (this == obj ||
            (Object.getPrototypeOf(this) == Object.getPrototypeOf(obj) &&
                this.center.equals(obj.center) &&
                this.f1.equals(obj.f1) &&
                this.f2.equals(obj.f2) &&
                this.dir.equals(obj.dir)));
    }
    like(object) {
        if (!this.isCoplanarTo(object))
            return false;
        // normals need to point in the same direction (outwards or inwards) for both
        return this.normalDir == object.normalDir;
    }
    getVectors() {
        return [
            { anchor: this.center, dir1: this.dir },
            { anchor: this.center.plus(this.dir), dir1: this.f1 },
            { anchor: this.center.plus(this.dir), dir1: this.f2 },
        ];
    }
    getSeamPlane() {
        return P3$$1.forAnchorAndPlaneVectors(this.center, this.f1, this.dir);
    }
    loopContainsPoint(contour, p) {
        assertVectors(p);
        const line = this.center.like(p)
            ? new L3$$1(p, this.matrix.transformVector(new V3(0, 1, 1)).unit())
            : L3$$1.throughPoints(p, this.apex);
        const lineOut = line.dir1.cross(this.dir);
        return Surface$$1.loopContainsPointGeneral(contour, p, line, lineOut);
    }
    getConstructorParameters() {
        return [this.center, this.f1, this.f2, this.dir, this.sMin, this.sMax, this.tMin, this.tMax];
    }
    isTsForLine(line) {
        // transforming line manually has advantage that dir1 will not be renormalized,
        // meaning that calculated values t for lineLC are directly transferable to line
        const anchorLC = this.matrixInverse.transformPoint(line.anchor);
        const dirLC = this.matrixInverse.transformVector(line.dir1);
        return ConicSurface$$1.unitISLineTs(anchorLC, dirLC);
    }
    /**
     * Interestingly, two cones don't need to have parallel dirs to be coplanar.
     */
    isCoplanarTo(surface) {
        if (this === surface)
            return true;
        if (!(surface instanceof ConicSurface$$1) || !this.apex.like(surface.apex))
            return false;
        // at this point apexes are equal
        return this.containsEllipse(new SemiEllipseCurve$$1(surface.center.plus(surface.dir), surface.f1, surface.f2));
    }
    containsEllipse(ellipse) {
        const ellipseLC = ellipse.transform(this.matrixInverse);
        if (ellipseLC.center.z < 0) {
            return false;
        }
        const { f1, f2 } = ellipseLC.rightAngled();
        const p1 = ellipseLC.center.plus(f1), p2 = ellipseLC.center.plus(f2);
        // check if both endpoints are on the cone's surface
        // and that one main axis is perpendicular to the Z-axis
        return eq(Math.pow(p1.x, 2) + Math.pow(p1.y, 2), Math.pow(p1.z, 2)) && eq(Math.pow(p2.x, 2) + Math.pow(p2.y, 2), Math.pow(p2.z, 2)) && (eq0(f1.z) || eq0(f2.z));
    }
    containsLine(line) {
        const lineLC = line.transform(this.matrixInverse);
        const d = lineLC.dir1;
        return lineLC.containsPoint(V3.O) && eq(d.x * d.x + d.y * d.y, d.z * d.z);
    }
    containsParabola(curve) {
        assertInst(ParabolaCurve$$1, curve);
        const curveLC = curve.transform(this.matrixInverse);
        if (curveLC.center.z < 0 || curveLC.f2.z < 0) {
            return false;
        }
        const { center, f1, f2 } = curveLC.rightAngled();
        // check if center is on the surface,
        // that tangent is perpendicular to the Z-axis
        // and that "y" axis is parallel to surface
        return (eq(center.x * center.x + center.y * center.y, center.z * center.z) &&
            eq0(f1.z) &&
            eq(f2.x * f2.x + f2.y * f2.y, f2.z * f2.z));
    }
    containsHyperbola(curve) {
        // calculate intersection of plane ax + cz = 1 and cone x² + y² = z²
        // const center = new V3(-a / (cc - aa), 0, 1 / (cc - aa))
        // const p1 = new V3(1 / (a - c), 0, -1 / (a - c))
        // const p2 = new V3(-a / (cc - aa), 1 / sqrt(aa - cc), 1 / (cc - aa))
        // const f1 = new V3(1 * c / (aa - cc), 0, -a / (aa - cc) )
        // const f2 = new V3(0, 1 / sqrt(aa - cc), 0)
        assertInst(HyperbolaCurve$$1, curve);
        const curveLC = curve.transform(this.matrixInverse).rightAngled();
        const centerXY = curveLC.center.xy();
        if (centerXY.likeO()) {
            return false;
        }
        const rot = centerXY.angleXY();
        const { center, f1, f2 } = curveLC.rotateZ(-rot);
        // s = a / (aa - cc)
        // t = -c / (aa - cc)
        // s + t = 1 / (a + c)
        // s - t = 1 / (a - c)
        // (s + t)(s - t) = (ss - tt) = 1 / (aa - cc)
        // u = 1 / sqrt(aa - cc) = sqrt(ss - tt)
        // check if center is on the surface,
        // that tangent is perpendicular to the Z-axis
        return (f1.z > 0 &&
            eq(center.x, f1.z) &&
            eq(center.z, f1.x) &&
            eq0(center.y) &&
            eq0(f1.y) &&
            eq(sqrt(abs$2(Math.pow(center.x, 2) - Math.pow(center.z, 2))), abs$2(f2.y)) &&
            eq0(f2.x) &&
            eq0(f2.z));
    }
    containsCurve(curve) {
        if (curve instanceof SemiEllipseCurve$$1) {
            return this.containsEllipse(curve);
        }
        else if (curve instanceof L3$$1) {
            return this.containsLine(curve);
        }
        else if (curve instanceof HyperbolaCurve$$1) {
            return this.containsHyperbola(curve);
        }
        else if (curve instanceof ParabolaCurve$$1) {
            return this.containsParabola(curve);
        }
        else {
            return super.containsCurve(curve);
        }
    }
    transform(m4) {
        return new ConicSurface$$1(m4.transformPoint(this.center), m4.transformVector(this.f1).times(m4.isMirroring() ? -1 : 1), m4.transformVector(this.f2), m4.transformVector(this.dir));
    }
    flipped() {
        return new ConicSurface$$1(this.center, this.f1.negated(), this.f2, this.dir);
    }
    normalSTFunc() {
        const { f1, f2 } = this, f3 = this.dir;
        return (d, z) => {
            return f2
                .cross(f1)
                .plus(f2.cross(f3.times(Math.cos(d))))
                .plus(f3.cross(f1.times(Math.sin(d))))
                .unit();
        };
    }
    normalP(p) {
        //TODO assert(!p.like(this.center))
        const pLC = this.matrixInverse.transformPoint(p);
        return this.normalSTFunc()(pLC.angleXY(), pLC.z);
    }
    pSTFunc() {
        return (s, t) => {
            // center + f1 t cos s + f2 t sin s + t dir
            const resultLC = new V3(t * cos$1(s), t * sin$1(s), t);
            return this.matrix.transformPoint(resultLC);
        };
    }
    dpds() {
        return (s, t) => {
            const resultLC = new V3(t * -sin$1(s), t * cos$1(s), 0);
            return this.matrix.transformVector(resultLC);
        };
    }
    dpdt() {
        return s => {
            const resultLC = new V3(cos$1(s), sin$1(s), 1);
            return this.matrix.transformVector(resultLC);
        };
    }
    implicitFunction() {
        return pWC => {
            const pLC = this.matrixInverse.transformPoint(pWC);
            const radiusLC = pLC.lengthXY();
            return this.normalDir * (radiusLC - pLC.z);
        };
    }
    didp(pWC) {
        const pLC = this.matrixInverse.transformPoint(pWC);
        return this.pLCNormalWCMatrix.transformVector(pLC
            .xy()
            .unit()
            .withElement('z', -1)
            .times(this.normalDir));
    }
    containsPoint(p) {
        return eq0(this.implicitFunction()(p));
    }
    stP(pWC) {
        const pLC = this.matrixInverse.transformPoint(pWC);
        const angle = pLC.angleXY();
        return new V3(angle < -PI$3 / 2 ? angle + TAU : angle, pLC.z, 0);
    }
    isCurvesWithSurface(surface) {
        if (surface instanceof PlaneSurface$$1) {
            return this.isCurvesWithPlane(surface.plane);
        }
        else if (ImplicitSurface$$1.is(surface)) {
            return ParametricSurface$$1.isCurvesParametricImplicitSurface(this, surface, 0.1, 0.1 / this.dir.length(), 0.02);
        }
        return super.isCurvesWithSurface(surface);
    }
    getCenterLine() {
        return new L3$$1(this.center, this.dir);
    }
    isCurvesWithPlane(plane) {
        assertInst(P3$$1, plane);
        const planeLC = plane.transform(this.matrixInverse);
        const planeNormal = planeLC.normal1;
        const c = planeNormal.z;
        /** "rotate" plane normal1 when passing to {@link ConicSurface.unitISPlane} so that
         *  y-component of normal1 is 0 */
        const a = planeNormal.lengthXY();
        const d = planeLC.w;
        // generated curves need to be rotated back before transforming to world coordinates
        const rotationMatrix = M4.rotateZ(planeNormal.angleXY());
        const wcMatrix = eq0(planeNormal.lengthXY()) ? this.matrix : this.matrix.times(rotationMatrix);
        return ConicSurface$$1.unitISPlane(a, c, d).flatMap(curve => {
            const curveWC = curve.transform(wcMatrix);
            if (curve instanceof SemiEllipseCurve$$1) {
                const curveLC = curve.transform(rotationMatrix);
                const ts = curveLC.isTsWithPlane(P3$$1.ZX);
                const intervals = getIntervals(ts, -PI$3, PI$3).filter(([a, b]) => curveLC.at((a + b) / 2).y > 0);
                return intervals.flatMap(([a, b]) => curveWC.split(a, b));
            }
            const p = curveWC.at(0.2);
            return this.normalP(p)
                .cross(plane.normal1)
                .dot(curveWC.tangentAt(0.2)) > 0
                ? curveWC
                : curveWC.reversed();
        });
    }
}
/**
 * Unit cone. x² + y² = z², 0 <= z
 */
ConicSurface$$1.UNIT = new ConicSurface$$1(V3.O, V3.X, V3.Y, V3.Z);
ConicSurface$$1.prototype.uStep = PI$3 / 16;
ConicSurface$$1.prototype.vStep = 256;

/**
 * Surface normal1 is (t, z) => this.baseCurve.tangentAt(t) X this.dir
 * Choose dir appropriately to select surface orientation.
 */
class ProjectedCurveSurface$$1 extends ParametricSurface$$1 {
    constructor(baseCurve, dir, sMin = baseCurve.tMin, sMax = baseCurve.tMax, tMin = -100, tMax = 100) {
        super(sMin, sMax, tMin, tMax);
        this.baseCurve = baseCurve;
        this.dir = dir;
        assertInst(Curve$$1, baseCurve);
        assertInst(V3, dir);
        assert(sMin < sMax);
        assert(tMin < tMax);
    }
    getConstructorParameters() {
        return [this.baseCurve, this.dir, this.sMin, this.sMax, this.tMin, this.tMax];
    }
    equals(obj) {
        return (this == obj ||
            (Object.getPrototypeOf(this) == Object.getPrototypeOf(obj) &&
                this.dir.equals(obj.dir) &&
                this.baseCurve.equals(obj.baseCurve)));
    }
    hashCode() {
        return [this.dir, this.baseCurve].hashCode();
    }
    containsLine(line) {
        return this.dir.isParallelTo(line.dir1) && this.containsPoint(line.anchor);
    }
    dpds() {
        return (s, t) => this.baseCurve.tangentAt(s);
    }
    dpdt() {
        return (s, t) => this.dir;
    }
    normalST(s, t) {
        return this.baseCurve
            .tangentAt(s)
            .cross(this.dir)
            .unit();
    }
    pST(s, t) {
        return this.baseCurve.at(s).plus(this.dir.times(t));
    }
    pointFoot(pWC, ss) {
        const basePlane = new P3$$1(this.dir.unit(), 0);
        const projCurve = this.baseCurve.project(basePlane);
        const projPoint = basePlane.projectedPoint(pWC);
        const t = projCurve.closestTToPoint(projPoint, ss, this.sMin, this.sMax);
        const z = L3$$1.pointT(this.baseCurve.at(t), this.dir, pWC);
        return new V3(t, z, 0);
    }
    stPFunc() {
        const projPlane = new P3$$1(this.dir.unit(), 0);
        const projBaseCurve = this.baseCurve.project(projPlane);
        return pWC => {
            const projPoint = projPlane.projectedPoint(pWC);
            assertNumbers(this.sMin);
            const t = projBaseCurve.pointT(projPoint, this.sMin, this.sMax);
            const z = L3$$1.pointT(this.baseCurve.at(t), this.dir, pWC);
            return new V3(t, z, 0);
        };
    }
    isCurvesWithPlane(plane) {
        assertInst(P3$$1, plane);
        if (this.dir.isPerpendicularTo(plane.normal1)) {
            const ts = this.baseCurve.isTsWithPlane(plane);
            return ts.map(t => {
                const l3dir = 0 < this.baseCurve.tangentAt(t).dot(plane.normal1) ? this.dir : this.dir.negated();
                return new L3$$1(this.baseCurve.at(t), l3dir.unit());
            });
        }
        else {
            let projCurve = this.baseCurve.transform(M4.project(plane, this.dir));
            if (this.dir.dot(plane.normal1) > 0) {
                // we need to flip the ellipse so the tangent is correct
                projCurve = projCurve.reversed();
            }
            return [projCurve];
        }
    }
    isCurvesWithSurface(surface) {
        if (surface instanceof PlaneSurface$$1) {
            return this.isCurvesWithPlane(surface.plane);
        }
        if (surface instanceof ProjectedCurveSurface$$1) {
            const dir1 = surface.dir;
            if (this.dir.isParallelTo(dir1)) {
                const ts = surface.baseCurve.isTsWithSurface(this);
                return ts.map(t => {
                    const p = surface.baseCurve.at(t);
                    const correctDir = this.normalP(p).cross(surface.normalP(p));
                    return new L3$$1(p, dir1.times(sign$1(correctDir.dot(dir1))));
                });
            }
            else if (ImplicitSurface$$1.is(surface)) {
                let curves2 = ParametricSurface$$1.isCurvesParametricImplicitSurface(this, surface, 0.1, 0.1 / surface.dir.length(), 0.05);
                curves2 = surface.clipCurves(curves2);
                return curves2;
            }
            else {
                let curves2 = ParametricSurface$$1.isCurvesParametricParametricSurface(this, surface, 0.05, 0.1 / surface.dir.length(), 0.05);
                curves2 = this.clipCurves(curves2);
                curves2 = surface.clipCurves(curves2);
                return curves2;
            }
        }
        if (surface instanceof SemiEllipsoidSurface$$1) {
            return surface.isCurvesWithSurface(this);
        }
        return super.isCurvesWithSurface(surface);
    }
    containsPoint(pWC) {
        const uv = this.stPFunc()(pWC);
        return this.pSTFunc()(uv.x, uv.y).like(pWC);
    }
    containsCurve(curve) {
        if (curve instanceof L3$$1) {
            return this.dir.isParallelTo(curve.dir1) && this.containsPoint(curve.anchor);
        }
        if (curve instanceof ImplicitCurve$$1) {
            return super.containsCurve(curve);
        }
        // project baseCurve and test curve onto a common plane and check if the curves are alike
        const projPlane = new P3$$1(this.dir.unit(), 0);
        const projBaseCurve = this.baseCurve.project(projPlane);
        const projCurve = curve.project(projPlane);
        return projBaseCurve.isColinearTo(projCurve);
    }
    isCoplanarTo(surface) {
        return (this == surface ||
            (hasConstructor(surface, ProjectedCurveSurface$$1) &&
                this.dir.isParallelTo(surface.dir) &&
                this.containsCurve(surface.baseCurve)));
    }
    like(object) {
        if (!this.isCoplanarTo(object))
            return false;
        // normals need to point in the same direction (outwards or inwards) for both
        const p00 = this.pSTFunc()(0, 0);
        const thisNormal = this.normalSTFunc()(0, 0);
        const otherNormal = object.normalP(p00);
        return 0 < thisNormal.dot(otherNormal);
    }
    loopContainsPoint(loop, p) {
        assertVectors(p);
        assert(isFinite(p.x), p.y, p.z);
        const line = new L3$$1(p, this.dir.unit());
        const ptpf = this.stPFunc();
        const pp = ptpf(p);
        if (isNaN(pp.x)) {
            console.log(this.sce, p.sce);
            assert(false);
        }
        const lineOut = this.baseCurve.tangentAt(pp.x).rejectedFrom(this.dir);
        return Surface$$1.loopContainsPointGeneral(loop, p, line, lineOut);
    }
    transform(m4) {
        const f = m4.isMirroring() ? -1 : 1;
        return new this.constructor(this.baseCurve.transform(m4), m4.transformVector(this.dir).times(f), this.sMin, this.sMax, 1 == f ? this.tMin : -this.tMax, 1 == f ? this.tMax : -this.tMin);
    }
    isTsForLine(line) {
        assertInst(L3$$1, line);
        const projPlane = new P3$$1(this.dir.unit(), 0);
        const projDir = projPlane.projectedVector(line.dir1);
        if (projDir.likeO()) {
            // line is parallel to this.dir
            return [];
        }
        const projAnchor = projPlane.projectedPoint(line.anchor);
        const projBaseCurve = this.baseCurve.project(projPlane);
        return projBaseCurve
            .isInfosWithLine(projAnchor, projDir, this.sMin, this.sMax, line.tMin, line.tMax)
            .map(info => info.tOther);
    }
    flipped() {
        return new this.constructor(this.baseCurve, this.dir.negated(), this.sMin, this.sMax, -this.tMax, -this.tMin);
    }
}
ProjectedCurveSurface$$1.prototype.uStep = 1 / 128;
ProjectedCurveSurface$$1.prototype.vStep = 256;

/**
 * Rotation surface with r = f(z)
 */
class RotatedCurveSurface$$1 extends ParametricSurface$$1 {
    constructor(curve, matrix = M4.IDENTITY, sMin = 0, sMax = PI$3, tMin = curve.tMin, tMax = curve.tMax) {
        // d/dz (r(z))
        super(sMin, sMax, tMin, tMax);
        this.curve = curve;
        this.matrix = matrix;
        assertInst(M4, matrix);
        assert(matrix.isNoProj());
        assert(eq0(curve.at(tMin).y));
        this.matrixInverse = matrix.inversed();
        this.vStep = this.curve.tIncrement;
    }
    getConstructorParameters() {
        return [this.curve, this.matrix, this.sMin, this.sMax, this.tMin, this.tMax];
    }
    flipped() {
        return new RotatedCurveSurface$$1(this.curve, this.matrix.times(M4.mirror(P3$$1.YZ)), this.sMin, this.sMax, this.tMin, this.tMax);
    }
    transform(m4) {
        return new RotatedCurveSurface$$1(this.curve, m4.isMirroring() ? m4.times(this.matrix).times(M4.mirror(P3$$1.YZ)) : m4.times(this.matrix), this.sMin, this.sMax, this.tMin, this.tMax);
    }
    containsPoint(pWC) {
        const pLC = this.matrixInverse.transformPoint(pWC);
        const radius = pLC.lengthXY();
        return this.curve.containsPoint(new V3(radius, 0, pLC.z));
    }
    pSTFunc() {
        return (s, t) => {
            const { x: radius, z: z } = this.curve.at(t);
            return this.matrix.transformPoint(V3.polar(radius, s, z));
        };
    }
    dpds() {
        return (s, t) => {
            const radius = this.curve.at(t).x;
            const resultLC = new V3(radius * -sin$1(s), radius * cos$1(s), 0);
            return this.matrix.transformVector(resultLC);
        };
    }
    dpdt() {
        return (s, t) => {
            const { x: drdt, z: dzdt } = this.curve.tangentAt(t);
            return this.matrix.transformVector(V3.polar(drdt, s, dzdt));
        };
    }
    normalSTFunc() {
        const matrix = this.matrix
            .inversed()
            .transposed()
            .as3x3();
        const normalLength = this.matrix.isMirroring() ? -1 : 1;
        return (s, t) => {
            const { x: drdt, z: dzdt } = this.curve.tangentAt(t);
            return matrix.transformVector(V3.polar(dzdt, s, -drdt)).toLength(normalLength);
        };
    }
    stPFunc() {
        return pWC => {
            const pLC = this.matrixInverse.transformPoint(pWC);
            const angle = SemiEllipseCurve$$1.XYLCPointT(pLC, this.sMin, this.sMax);
            const radius = pLC.lengthXY();
            return new V3(angle, this.curve.pointT(new V3(radius, 0, pLC.z)), 0);
        };
    }
    pointFoot(pWC, startS, startT) {
        const pLC = this.matrixInverse.transformPoint(pWC);
        const angle = abs$2(pLC.angleXY());
        const radius = pLC.lengthXY();
        return new V3(angle, this.curve.closestTToPoint(new V3(radius, 0, pLC.z)), 0);
    }
    isTsForLine(line) {
        const anchorLC = this.matrixInverse.transformPoint(line.anchor);
        const dirLC = this.matrixInverse.transformVector(line.dir1);
        if (dirLC.isParallelTo(V3.Z)) {
            if (!fuzzyBetween(anchorLC.angleXY(), this.sMin, this.sMax))
                return [];
            return this.curve
                .isInfosWithLine(new V3(anchorLC.lengthXY(), 0, anchorLC.z), dirLC)
                .map(info => info.tOther);
        }
        else if (L3$$1.containsPoint(anchorLC.xy(), dirLC.xy(), V3.O)) {
            // line goes through Z axis
            const dotter = dirLC.xy().unit();
            return [
                ...this.curve.isInfosWithLine(new V3(dotter.dot(anchorLC), 0, anchorLC.z), new V3(dotter.dot(dirLC), 0, dirLC.z)),
                ...this.curve.isInfosWithLine(new V3(-dotter.dot(anchorLC), 0, anchorLC.z), new V3(-dotter.dot(dirLC), 0, dirLC.z)),
            ]
                .map(info => info.tOther)
                .filter(t => fuzzyBetween(L3$$1.at(anchorLC, dirLC, t).angleXY(), this.sMin, this.sMax));
        }
        else if (dirLC.isPerpendicularTo(V3.Z)) {
            const secs = this.isCurvesWithPlaneLC(new P3$$1(V3.Z, anchorLC.z));
            if (!secs)
                return [];
            return secs.flatMap(sec => sec.isInfosWithLine(anchorLC, dirLC).map(info => info.tOther));
        }
        else {
            // transform into hyperbola
            // f(t) = V(((ax + t dx)² + (ay + t dy)²) ** 1/2, 0, az + t dz)
            // f(t) = V((ax² + 2 ax t dx + t² dx² + ay² + 2 ay t dy + t² dy²) ** 1/2, 0, az + t dz)
            // f(t) = V((t² (dx² + dy²) + 2 t (ax dx + ay dy) + ax² + ay²) ** 1/2, 0, az + t * dz)
            // (anchorLC.xy + t * dirLC.xy) * dir.xy = 0
            // t * dirLC.xy² = -anchorLC.xy * dirLC.xy
            const closestTToZ = -anchorLC.xy().dot(dirLC.xy()) / dirLC.xy().squared();
            const closestPointToZ = L3$$1.at(anchorLC, dirLC, closestTToZ);
            const scaleX = closestPointToZ.lengthXY();
            const lineGradientWC = dirLC.z / dirLC.lengthXY();
            const scaleZ = scaleX * lineGradientWC;
            const hc = HyperbolaCurve$$1.XY.transform(M4.rotateX(90 * DEG)
                .scale(scaleX, 0, scaleZ)
                .translate(0, 0, closestPointToZ.z));
            const infos = hc.isInfosWithCurve(this.curve);
            return infos
                .map(info => (info.p.z - anchorLC.z) / dirLC.z)
                .filter(t => fuzzyBetween(L3$$1.at(anchorLC, dirLC, t).angleXY(), this.sMin, this.sMax));
        }
    }
    isCurvesWithPlaneLC(planeLC) {
        if (planeLC.normal1.isParallelTo(V3.Z)) {
            return this.curve.isTsWithPlane(planeLC).map(t => {
                const { x: radius } = this.curve.at(t);
                return new SemiEllipseCurve$$1(new V3(0, 0, planeLC.w), new V3(radius, 0, 0), new V3(0, radius, 0), this.sMin, this.sMax).transform(this.matrix);
            });
        }
        else if (planeLC.normal1.isPerpendicularTo(V3.Z) && planeLC.containsPoint(V3.O)) {
            return [this.curve.rotateZ(V3.Y.angleRelativeNormal(planeLC.normal1, V3.Z)).transform(this.matrix)];
        }
        return undefined;
    }
    isCurvesWithPlane(plane) {
        const planeLC = plane.transform(this.matrixInverse);
        const planeLCCurves = this.isCurvesWithPlaneLC(planeLC);
        if (planeLCCurves) {
            return planeLCCurves.map(curve => curve.transform(this.matrix));
        }
        else {
            return ParametricSurface$$1.isCurvesParametricImplicitSurface(this, new PlaneSurface$$1(plane), 0.05, 0.05, 0.02);
        }
    }
    loopContainsPoint(loop, pWC) {
        const pLC = this.matrixInverse.transformPoint(pWC);
        const angle = SemiEllipseCurve$$1.XYLCPointT(pLC, this.sMin, this.sMax);
        const testCurveLC = SemiEllipseCurve$$1.semicircle(pLC.lengthXY(), new V3(0, 0, pLC.z));
        const testCurveWC = testCurveLC.transform(this.matrix);
        return Surface$$1.loopContainsPointEllipse(loop, pWC, testCurveWC, angle);
    }
    isCoplanarTo(surface) {
        if (this === surface)
            return true;
        if (!hasConstructor(surface, RotatedCurveSurface$$1))
            return false;
        const surfaceLCToThisLC = this.matrixInverse.times(surface.matrix);
        assert(!surfaceLCToThisLC.X.xy().likeO());
        const zRotation = surfaceLCToThisLC.X.angleXY();
        return surface.curve.transform(M4.rotateZ(-zRotation).times(surfaceLCToThisLC)).isColinearTo(this.curve);
    }
    isCurvesWithSurface(surface) {
        if (surface instanceof PlaneSurface$$1) {
            return this.isCurvesWithPlane(surface.plane);
        }
        return super.isCurvesWithSurface(surface);
    }
    containsCurve(curve) {
        if (curve.constructor == this.curve.constructor) {
            const curveLC = curve.transform(this.matrixInverse);
            // find a point on curveLC which isn't on the Z-axis
            const t = [0, 0.5, 1].map(x => lerp(curveLC.tMin, curveLC.tMax, x)).withMax(t => curveLC.at(t).lengthXY());
            const angle = curveLC.at(t).angleXY();
            const curveLCRotated = curveLC.rotateZ(-angle);
            if (this.curve.isColinearTo(curveLCRotated)) {
                return true;
            }
        }
        if (curve instanceof SemiEllipseCurve$$1) {
            const curveLC = curve.transform(this.matrixInverse);
            if (curveLC.normal.isParallelTo(V3.Z)) {
                return (curveLC.isCircular() && this.curve.containsPoint(new V3(curveLC.f1.length(), 0, curveLC.center.z)));
            }
            return false;
        }
        return super.containsCurve(curve);
    }
    getExtremePoints() {
        return getExtremePointsHelper$$1.call(this, this.curve);
    }
}
RotatedCurveSurface$$1.prototype.uStep = SemiEllipseCurve$$1.prototype.tIncrement;
function getExtremePointsHelper$$1(curve) {
    // this logic comes from EllipseCurve.roots
    const f1 = this.matrix.X;
    const f2 = this.matrix.Y;
    return [0, 1, 2].flatMap(dim => {
        const a = f2.e(dim), b = -f1.e(dim);
        const xiEtas = eq0(a) && eq0(b) ? [[1, 0]] : intersectionUnitCircleLine2$$1(a, b, 0);
        return xiEtas.flatMap(([xi, eta]) => {
            const s = Math.atan2(eta, xi);
            if (!(lt(this.sMin, s) && lt(s, this.sMax)))
                return [];
            const testCurve = curve.transform(this.matrix.times(M4.rotateZ(s)));
            return testCurve.roots()[dim].map(t => this.pST(s, t));
        });
    });
}

class SemiCylinderSurface$$1 extends ProjectedCurveSurface$$1 {
    // @ts-ignore
    // readonly baseCurve: SemiEllipseCurve
    constructor(baseCurve, dir1, sMin = baseCurve.tMin, sMax = baseCurve.tMax, zMin = -Infinity, zMax = Infinity) {
        super(baseCurve, dir1, sMin, sMax, zMin, zMax);
        this.baseCurve = baseCurve;
        assertInst(SemiEllipseCurve$$1, baseCurve);
        //assert(!baseCurve.normal1.isPerpendicularTo(dir1), !baseCurve.normal1.isPerpendicularTo(dir1))
        this.matrix = M4.forSys(baseCurve.f1, baseCurve.f2, dir1, baseCurve.center);
        this.matrixInverse = this.matrix.inversed();
        this.normalDir = sign$1(this.baseCurve.normal.dot(this.dir));
        this.pLCNormalWCMatrix = this.matrix
            .as3x3()
            .inversed()
            .transposed()
            .scale(this.normalDir);
        this.pWCNormalWCMatrix = this.pLCNormalWCMatrix.times(this.matrixInverse);
    }
    static semicylinder(radius) {
        return new SemiCylinderSurface$$1(new SemiEllipseCurve$$1(V3.O, new V3(radius, 0, 0), new V3(0, radius, 0)), V3.Z, undefined, undefined);
    }
    /**
     *
     * @param anchorLC
     * @param dirLC not necessarily unit
     */
    static unitISLineTs(anchorLC, dirLC) {
        const { x: ax, y: ay } = anchorLC;
        const { x: dx, y: dy } = dirLC;
        // this cylinder: x² + y² = 1
        // line: p = anchorLC + t * dirLC
        // split line equation into 3 component equations, insert into cylinder equation
        // x = ax + t * dx
        // y = ay + t * dy
        // (ax² + 2 ax t dx + t²dx²) + (ay² + 2 ay t dy + t²dy²) = 1
        // transform to form (a t² + b t + c = 0) and solve with pqFormula
        const a = Math.pow(dx, 2) + Math.pow(dy, 2);
        const b = 2 * (ax * dx + ay * dy);
        const c = Math.pow(ax, 2) + Math.pow(ay, 2) - 1;
        return pqFormula(b / a, c / a).filter(t => SemiEllipseCurve$$1.XYLCValid(new V3(ax + dx * t, ay + dy * t, 0)));
    }
    normalP(p) {
        return this.pLCNormalWCMatrix.transformVector(this.matrixInverse.transformPoint(p).xy()).unit();
    }
    loopContainsPoint(loop, p) {
        assertVectors(p);
        if (!this.containsPoint(p))
            return OUTSIDE$$1;
        const line = new L3$$1(p, this.dir.unit());
        const lineOut = this.dir.cross(this.normalP(p));
        return Surface$$1.loopContainsPointGeneral(loop, p, line, lineOut);
    }
    isTsForLine(line) {
        assertInst(L3$$1, line);
        // transforming line manually has advantage that dir1 will not be renormalized,
        // meaning that calculated values t for localLine are directly transferable to line
        const dirLC = this.matrixInverse.transformVector(line.dir1);
        if (dirLC.isParallelTo(V3.Z)) {
            // line is parallel to this.dir
            return [];
        }
        const anchorLC = this.matrixInverse.transformPoint(line.anchor);
        assert(!SemiCylinderSurface$$1.unitISLineTs(anchorLC, dirLC).length ||
            !isNaN(SemiCylinderSurface$$1.unitISLineTs(anchorLC, dirLC)[0]), 'sad ' + dirLC);
        return SemiCylinderSurface$$1.unitISLineTs(anchorLC, dirLC);
    }
    isCoplanarTo(surface) {
        return (this == surface ||
            (hasConstructor(surface, SemiCylinderSurface$$1) &&
                this.dir.isParallelTo(surface.dir) &&
                this.containsSemiEllipse(surface.baseCurve, false)));
    }
    like(surface) {
        if (!this.isCoplanarTo(surface))
            return false;
        // normals need to point in the same direction (outwards or inwards) for both
        const thisFacesOut = 0 < this.baseCurve.normal.dot(this.dir);
        const objectFacesOut = 0 < surface.baseCurve.normal.dot(surface.dir);
        return thisFacesOut == objectFacesOut;
    }
    containsSemiEllipse(ellipse, checkAABB = true) {
        const projEllipse = ellipse.transform(M4.project(this.baseCurve.getPlane(), this.dir));
        return this.baseCurve == ellipse || this.baseCurve.isColinearTo(projEllipse);
    }
    containsCurve(curve) {
        if (curve instanceof L3$$1) {
            return this.containsLine(curve);
        }
        else if (curve instanceof SemiEllipseCurve$$1) {
            return this.containsSemiEllipse(curve);
        }
        else if (curve instanceof BezierCurve$$1) {
            return false;
        }
        else {
            return super.containsCurve(curve);
        }
    }
    implicitFunction() {
        return (pWC) => {
            const pLC = this.matrixInverse.transformPoint(pWC);
            return (pLC.lengthXY() - 1) * this.normalDir;
        };
    }
    didp(pWC) {
        const pLC = this.matrixInverse.transformPoint(pWC);
        const pLCLengthXY = pLC.lengthXY();
        const didpLC = new V3(pLC.x / pLCLengthXY, pLC.y / pLCLengthXY, 0);
        return this.pLCNormalWCMatrix.transformVector(didpLC);
    }
    containsPoint(pWC) {
        const pLC = this.matrixInverse.transformPoint(pWC);
        return this.baseCurve.isValidT(SemiEllipseCurve$$1.XYLCPointT(pLC, this.sMin, this.sMax));
    }
    stP(pWC) {
        assert(arguments.length == 1);
        const pLC = this.matrixInverse.transformPoint(pWC);
        const u = SemiEllipseCurve$$1.XYLCPointT(pLC, this.tMin, this.tMax);
        return new V3(u, pLC.z, 0);
    }
    isCurvesWithSurface(surface2) {
        if (surface2 instanceof ProjectedCurveSurface$$1) {
            if (surface2.dir.isParallelTo(this.dir)) {
                const projectedCurve = surface2.baseCurve.transform(M4.project(this.baseCurve.getPlane(), this.dir));
                return this.baseCurve.isInfosWithCurve(projectedCurve).map(info => {
                    const lineDir = sign$1(this.normalP(info.p)
                        .cross(surface2.normalP(info.p))
                        .dot(this.dir)) || 1;
                    return new L3$$1(info.p, this.dir.times(lineDir));
                });
            }
        }
        if (surface2 instanceof SemiCylinderSurface$$1) {
            if (eq0(this.getCenterLine().distanceToLine(surface2.getCenterLine()))) {
                throw new Error();
            }
        }
        return super.isCurvesWithSurface(surface2);
    }
    getCenterLine() {
        return new L3$$1(this.baseCurve.center, this.dir);
    }
    facesOutwards() {
        return this.baseCurve.normal.dot(this.dir) > 0;
    }
    getSeamPlane() {
        let normal = this.baseCurve.f1.cross(this.dir);
        normal = normal.times(-sign$1(normal.dot(this.baseCurve.f2)));
        return P3$$1.normalOnAnchor(normal, this.baseCurve.center);
    }
    clipCurves(curves) {
        return curves.flatMap(curve => curve.clipPlane(this.getSeamPlane()));
    }
}
SemiCylinderSurface$$1.UNIT = new SemiCylinderSurface$$1(SemiEllipseCurve$$1.UNIT, V3.Z, undefined, undefined, 0, 1);
SemiCylinderSurface$$1.prototype.uStep = TAU / 32;
SemiCylinderSurface$$1.prototype.vStep = 256;

class SemiEllipsoidSurface$$1 extends ParametricSurface$$1 {
    constructor(center, f1, f2, f3, sMin = 0, sMax = PI$3, tMin = -PI$3 / 2, tMax = PI$3 / 2) {
        super(sMin, sMax, tMin, tMax);
        this.center = center;
        this.f1 = f1;
        this.f2 = f2;
        this.f3 = f3;
        assert(0 <= sMin && sMin <= PI$3);
        assert(0 <= sMax && sMax <= PI$3);
        assert(-PI$3 / 2 <= tMin && tMin <= PI$3 / 2);
        assert(-PI$3 / 2 <= tMax && tMax <= PI$3 / 2);
        assertVectors(center, f1, f2, f3);
        this.matrix = M4.forSys(f1, f2, f3, center);
        this.matrixInverse = this.matrix.inversed();
        this.normalDir = sign$1(this.f1.cross(this.f2).dot(this.f3));
        this.pLCNormalWCMatrix = this.matrix
            .as3x3()
            .inversed()
            .transposed()
            .scale(this.normalDir);
        this.pWCNormalWCMatrix = this.pLCNormalWCMatrix.times(this.matrixInverse);
    }
    static unitArea(contour) {
        const totalArea = contour
            .map(edge => {
            if (edge.curve instanceof PICurve$$1) {
                const points = edge.curve.calcSegmentPoints(edge.aT, edge.bT, edge.a, edge.b, edge.aT > edge.bT, true);
                let sum = 0;
                for (let i = 0; i < points.length - 1; i++) {
                    const p = points[i], ppp = points[i + 1];
                    sum += (abs$2(p.angleXY()) + abs$2(ppp.angleXY())) / 2 * (ppp.z - p.z);
                }
                return sum;
            }
            else if (edge.curve instanceof SemiEllipseCurve$$1) {
                const f = (t) => {
                    const at = edge.curve.at(t), tangent = edge.curve.tangentAt(t);
                    const angleXY = abs$2(at.angleXY());
                    //const arcLength = angleXY * Math.sqrt(1 - at.z ** 2) ( == at.lengthXY())
                    //const scaling = tangent.z / at.lengthXY()
                    return angleXY * tangent.z;
                };
                const val = glqInSteps(f, edge.aT, edge.bT, 1);
                return val;
            }
            else {
                throw new Error();
            }
        })
            .sum();
        return totalArea;
    }
    /**
     * unit sphere: x² + y² + z² = 1
     * line: p = anchor + t * dir |^2
     * p² = (anchor + t * dir)^2
     * 1 == (anchor + t * dir)^2
     * 1 == anchor DOT anchor + 2 * anchor * t * dir + t² * dir DOT dir
     */
    static unitISTsWithLine(anchor, dir) {
        // for 0 = a t² + b t + c
        const a = dir.dot(dir);
        const b = 2 * anchor.dot(dir);
        const c = anchor.dot(anchor) - 1;
        return pqFormula(b / a, c / a).filter(t => le(0, anchor.y + t * dir.y));
    }
    /**
     * unit sphere: x² + y² + z² = 1
     * plane: normal1 DOT p = w
     */
    static unitISCurvesWithPlane(plane) {
        const distPlaneCenter = Math.abs(plane.w);
        if (lt(distPlaneCenter, 1)) {
            // result is a circle
            // radius of circle: imagine right angled triangle (origin -> center of intersection circle -> point on
            // intersection circle) pythagoras: 1² == distPlaneCenter² + isCircleRadius² => isCircleRadius == sqrt(1 -
            // distPlaneCenter²)
            const isCircleRadius = Math.sqrt(1 - Math.pow(distPlaneCenter, 2));
            const anchorY = plane.normal1.y * plane.w;
            const d = abs$2(distPlaneCenter * isCircleRadius);
            if (le(anchorY, -d) && !eq0(distPlaneCenter)) {
                return [];
            }
            else if (le(anchorY, 0) && !plane.normal1.isParallelTo(V3.Y)) {
                const f1 = plane.normal1.isParallelTo(V3.Y) ? V3.Z : plane.normal1.cross(V3.Y).toLength(isCircleRadius);
                const f2 = f1.cross(plane.normal1);
                const minEta = -anchorY / f2.y, minT = max$1(0, Math.asin(minEta));
                return [new SemiEllipseCurve$$1(plane.anchor, f1, f2, minT, PI$3 - minT)];
            }
            else {
                const f2 = (plane.normal1.isParallelTo(V3.Y) ? V3.X : plane.normal1.cross(V3.Y)).toLength(isCircleRadius);
                const f1 = f2.cross(plane.normal1);
                const minXi = eq0(f1.y) ? -1 : -anchorY / f1.y, maxT = Math.acos(max$1(-1, minXi - NLA_PRECISION));
                return [
                    new SemiEllipseCurve$$1(plane.anchor, f1.negated(), f2, PI$3 - maxT, PI$3),
                    new SemiEllipseCurve$$1(plane.anchor, f1, f2.negated(), 0, maxT),
                ];
            }
        }
        else {
            return [];
        }
    }
    static unitISCurvesWithEllipsoidSurface(surface) {
        if (surface.isSphere()) {
            const surfaceRadius = surface.f1.length();
            const surfaceCenterDist = surface.center.length();
            if (le(1, surfaceCenterDist - surfaceRadius) ||
                le(surfaceCenterDist + surfaceRadius, 1) ||
                le(surfaceCenterDist - surfaceRadius, -1)) {
                return [];
            }
            else {
                // origin, surface.center and points on the intersection curves form a triangle.
                // the height on the segment origin - surface.center is the radius of the is curves
                // the distance from the origin to the lot point is the distance to the intersection plane
                function heron(a, b, c) {
                    const p = (a + b + c) / 2;
                    return sqrt(p * (p - a) * (p - b) * (p - c));
                }
                const triangleArea = heron(1, surfaceRadius, surfaceCenterDist);
                const radius = triangleArea * 2 / surfaceCenterDist;
                const isCurvesCenterDist = sign$1(1 + Math.pow(surfaceCenterDist, 2) - Math.pow(surfaceRadius, 2)) * sqrt(1 - Math.pow(radius, 2));
                const plane = new P3$$1(surface.center.unit(), isCurvesCenterDist);
                return SemiEllipsoidSurface$$1.unitISCurvesWithPlane(plane.flipped());
            }
        }
        throw new Error();
    }
    static unitISCurvesWithSemiCylinderSurface(surface) {
        if (new L3$$1(surface.baseCurve.center, surface.dir).containsPoint(V3.O)) {
            const projEllipse = surface.baseCurve.transform(M4.project(new P3$$1(surface.dir, 0)));
            const f1Length = projEllipse.f1.length(), f2Length = projEllipse.f2.length();
            if (lt(1, min$1(f1Length, f2Length)))
                return [];
            if (projEllipse.isCircular()) {
                const distISCurveCenter = Math.sqrt(1 - Math.pow(min$1(1, f1Length), 2));
                const isCurveCenter = (surface.dir.y < 0 ? surface.dir.negated() : surface.dir).times(distISCurveCenter);
                // isCurve.at(t).y = isCurveCenter.y + projEllipse.f1.y * cos(t) + projEllipse.f2.y * sin(t) = 0
                return [new SemiEllipseCurve$$1(isCurveCenter, projEllipse.f1, projEllipse.f2)];
            }
        }
        throw new Error();
    }
    static sphere(radius, center = V3.O) {
        assertNumbers(radius);
        return new SemiEllipsoidSurface$$1(center, new V3(radius, 0, 0), new V3(0, radius, 0), new V3(0, 0, radius));
    }
    /**
     * x²/a² + y²/b² + z²/c² = 1
     */
    static forABC(a, b, c, center = V3.O) {
        return new SemiEllipsoidSurface$$1(center, new V3(a, 0, 0), new V3(0, b, 0), new V3(0, 0, c));
    }
    static calculateAreaSpheroid(a, b, c, edges) {
        assertf(() => a.isPerpendicularTo(b));
        assertf(() => b.isPerpendicularTo(c));
        assertf(() => c.isPerpendicularTo(a));
        // handling discontinuities:
        // option 1: check for intersections with baseline, if there are any integrate parts separetely
        // "rotate" the edge so that there are no overlaps
        const matrix = M4.forSys(a, b, c), matrixInverse = matrix.inversed();
        const circleRadius = a.length();
        const c1 = c.unit();
        const totalArea = edges
            .map(edge => {
            if (edge.curve instanceof SemiEllipseCurve$$1) {
                const f = (t) => {
                    const at = edge.curve.at(t), tangent = edge.tangentAt(t);
                    const localAt = matrixInverse.transformPoint(at);
                    const angleXY = localAt.angleXY();
                    const arcLength = angleXY * circleRadius * Math.sqrt(1 + Math.pow(localAt.z, 2));
                    const scaling = Math.sqrt(1 + Math.pow(c1.dot(tangent), 2));
                    return arcLength * scaling;
                };
                const val = glqInSteps(f, edge.aT, edge.bT, 1);
                return val;
            }
            else {
                throw new Error();
            }
        })
            .sum();
        return totalArea;
    }
    getConstructorParameters() {
        return [this.center, this.f1, this.f2, this.f3, this.sMin, this.sMax, this.tMin, this.tMax];
    }
    equals(obj) {
        return (this == obj || (Object.getPrototypeOf(obj) == this.constructor.prototype && this.matrix.equals(obj.matrix)));
    }
    edgeLoopCCW(loop) {
        return SemiEllipsoidSurface$$1.unitArea(loop.map(edge => edge.transform(this.matrixInverse))) > 0;
        //let totalAngle = 0
        //for (let i = 0; i < contour.length; i++) {
        //    const ipp = (i + 1) % contour.length
        //    const edge = contour[i], nextEdge = contour[ipp]
        //    totalAngle += edge.bDir.angleRelativeNormal(nextEdge.aDir, this.normalP(edge.b))
        //}
        //return le(0, totalAngle)
    }
    like(object) {
        if (!this.isCoplanarTo(object))
            return false;
        // normals need to point in the same direction (outwards or inwards) for both
        return this.matrix.determinant3() * object.matrix.determinant3() > 0;
    }
    rootPoints() { }
    toMesh() {
        return ParametricSurface$$1.prototype.toMesh.call(this);
    }
    clipCurves(curves) {
        return curves.flatMap(curve => curve.clipPlane(this.getSeamPlane()));
    }
    dpds() {
        // dp(s, t) = new V3(cos(t) * cos(s), cos(t) * sin(s), sin(t)
        return (s, t) => this.matrix.transformVector(new V3(cos$1(t) * -sin$1(s), cos$1(t) * cos$1(s), 0));
    }
    dpdt() {
        return (s, t) => this.matrix.transformVector(new V3(-sin$1(t) * cos$1(s), -sin$1(t) * sin$1(s), cos$1(t)));
    }
    isCurvesWithPCS(surface) {
        let curves2 = ParametricSurface$$1.isCurvesParametricImplicitSurface(surface, this, 0.1, 0.1 / surface.dir.length(), 0.05);
        curves2 = this.clipCurves(curves2);
        return curves2;
    }
    isCurvesWithPCSSmart(surface) {
        //return []
        const surfaceLC = surface.transform(this.matrixInverse);
        //const lcMinZ0RelO =
        const baseCurveLC = surfaceLC.baseCurve.project(new P3$$1(surfaceLC.dir, 0));
        const ists = baseCurveLC.isTsWithSurface(SemiEllipsoidSurface$$1.UNIT);
        const insideIntervals = getIntervals(ists, baseCurveLC.tMin, baseCurveLC.tMax).filter(([a, b]) => baseCurveLC.at((a + b) / 2).length() < 1);
        const projectedCurves = [0, 1].map(id => {
            return (t) => {
                const atSqr = snap(baseCurveLC.at(t).squared(), 1);
                const lineISTs = /* +- */ sqrt(1 - atSqr);
                //assert(!isNaN(lineISTs))
                return eq0(lineISTs)
                    ? baseCurveLC.at(t)
                    : baseCurveLC.at(t).plus(surfaceLC.dir.times(sign$1(id - 0.5) * lineISTs));
            };
        });
        const dProjectedCurves = [0, 1].map(id => {
            return (t) => {
                // d/dt sqrt(1 - baseCurveLC.at(t).squared())
                // = -1/2 * 1/sqrt(1 - baseCurveLC.at(t).squared()) * -2*baseCurveLC.at(t) * baseCurveLC.tangentAt(t)
                const atSqr = snap(baseCurveLC.at(t).squared(), 1);
                const lineISTs = /* +- */ baseCurveLC
                    .at(t)
                    .times(-1 / sqrt(1 - atSqr))
                    .dot(baseCurveLC.tangentAt(t));
                //assert(!isNaN(lineISTs))
                return baseCurveLC.tangentAt(t).plus(surfaceLC.dir.times(sign$1(id - 0.5) * lineISTs));
            };
        });
        //const f2 = t => sqrt(1 - baseCurveLC.at(t).squared())
        //const df2 = t => baseCurveLC.at(t).times(-1 / sqrt(1 -
        // baseCurveLC.at(t).squared())).dot(baseCurveLC.tangentAt(t)) checkDerivate(f2, df2, 0.31, 0.60)
        const curves = [];
        for (const [aT, bT] of insideIntervals) {
            //const aLine = new L3(baseCurveLC.at(aT), surfaceLC.dir1)
            //const a = EllipsoidSurface.UNIT.isTsForLine(aLine).map(t => aLine.at(t))
            //const bLine = new L3(baseCurveLC.at(bT), surfaceLC.dir1)
            //const b = EllipsoidSurface.UNIT.isTsForLine(bLine).map(t => bLine.at(t))
            for (const i of [0, 1]) {
                const f = (t) => projectedCurves[i](t).y;
                const df = (t) => dProjectedCurves[i](t).y;
                checkDerivate(f, df, aT + 0.1, bT - 0.1);
                const tsAtY0 = getRoots(f, aT + NLA_PRECISION, bT - NLA_PRECISION, 1 / (1 << 11), df);
                const ii2 = getIntervals(tsAtY0, aT, bT).filter(([a, b]) => f((a + b) / 2) > 0);
                for (const [aT2, bT2] of ii2) {
                    let aP = projectedCurves[i](aT2), bP = projectedCurves[i](bT2);
                    0 === i && ([aP, bP] = [bP, aP]);
                    assert(SemiEllipsoidSurface$$1.UNIT.containsPoint(aP));
                    assert(SemiEllipsoidSurface$$1.UNIT.containsPoint(bP));
                    curves.push(PICurve$$1.forStartEnd(surface, this, this.matrix.transformPoint(bP), this.matrix.transformPoint(aP), undefined));
                }
            }
        }
        return surface.clipCurves(curves);
    }
    isCurvesWithSurface(surface) {
        if (surface instanceof PlaneSurface$$1) {
            return this.isCurvesWithPlane(surface.plane);
        }
        else if (surface instanceof SemiCylinderSurface$$1) {
            return this.isCurvesWithSemiCylinderSurface(surface);
        }
        else if (surface instanceof SemiEllipsoidSurface$$1) {
            const surfaceLC = surface.transform(this.matrixInverse);
            const curves = SemiEllipsoidSurface$$1.unitISCurvesWithEllipsoidSurface(surfaceLC).map(c => c.transform(this.matrix));
            return surface.clipCurves(curves);
        }
        else if (surface instanceof ProjectedCurveSurface$$1) {
            return this.isCurvesWithPCS(surface);
        }
        else if (surface instanceof ParametricSurface$$1) {
            let curves2 = ParametricSurface$$1.isCurvesParametricImplicitSurface(surface, this, 0.1, 0.1, 0.05);
            curves2 = this.clipCurves(curves2);
            curves2 = surface.clipCurves(curves2);
            return curves2;
        }
        else {
            throw new Error();
        }
    }
    isCurvesWithPlane(plane) {
        const planeLC = plane.transform(this.matrixInverse);
        return SemiEllipsoidSurface$$1.unitISCurvesWithPlane(planeLC).map(c => c.transform(this.matrix));
    }
    isCurvesWithSemiCylinderSurface(surface) {
        if (L3$$1.containsPoint(surface.baseCurve.center, surface.dir, this.center)) {
            assert(this.isSphere());
            const ellipseProjected = surface.baseCurve.transform(M4.project(surface.baseCurve.getPlane(), surface.dir));
            if (ellipseProjected.isCircular()) {
                const thisRadius = this.f1.length();
                const surfaceRadius = ellipseProjected.f1.length();
                assert(false);
            }
        }
        return this.isCurvesWithPCS(surface);
    }
    isTsForLine(line) {
        assertInst(L3$$1, line);
        // transforming line manually has advantage that dir1 will not be renormalized,
        // meaning that calculated values t for localLine are directly transferable to line
        const anchorLC = this.matrixInverse.transformPoint(line.anchor);
        const dirLC = this.matrixInverse.transformVector(line.dir1);
        return SemiEllipsoidSurface$$1.unitISTsWithLine(anchorLC, dirLC);
    }
    isCoplanarTo(surface) {
        if (this === surface)
            return true;
        if (!hasConstructor(surface, SemiEllipsoidSurface$$1))
            return false;
        if (!this.center.like(surface.center))
            return false;
        if (this.isSphere())
            return surface.isSphere() && eq(this.f1.length(), this.f2.length());
        const otherMatrixLC = this.matrixInverse.times(surface.matrix);
        // Ellipsoid with matrix otherMatrixLC is unit sphere iff otherMatrixLC is orthogonal
        return otherMatrixLC.like3x3() && otherMatrixLC.isOrthogonal();
    }
    containsEllipse(ellipse) {
        const ellipseLC = ellipse.transform(this.matrixInverse);
        const distEllipseLCCenter = ellipseLC.center.length();
        const correctRadius = Math.sqrt(1 - Math.pow(distEllipseLCCenter, 2));
        return lt(distEllipseLCCenter, 1) && ellipseLC.isCircular() && ellipseLC.f1.hasLength(correctRadius);
        //&& le(0, ellipseLC.getAABB().min.y)
    }
    containsCurve(curve) {
        if (curve instanceof SemiEllipseCurve$$1) {
            return this.containsEllipse(curve);
        }
        else {
            return super.containsCurve(curve);
        }
    }
    transform(m4) {
        return new SemiEllipsoidSurface$$1(m4.transformPoint(this.center), m4.transformVector(this.f1), m4.transformVector(this.f2), m4.transformVector(this.f3).times(m4.isMirroring() ? -1 : 1));
    }
    isInsideOut() {
        return this.f1.cross(this.f2).dot(this.f3) < 0;
    }
    //implicitFunction() {
    //    return (pWC) => {
    //        const pLC = this.inverseMatrix.transformPoint(pWC)
    //        return (pLC.y > 0
    //            ? pLC.length() - 1
    //            : (-pLC.y + Math.hypot(pLC.x, pLC.z) - 1)) * this.normalDir
    //    }
    //}
    //didp(pWC) {
    //    const pLC = this.inverseMatrix.transformPoint(pWC)
    //    const didpLC = (pLC.y > 0
    //                ? pLC.unit()
    //                : V(pLC.x / Math.hypot(pLC.x, pLC.z), -1, pLC.z / Math.hypot(pLC.x, pLC.z))).times(this.normalDir)
    //    return this.inverseMatrix.transformVector(didpLC)
    //}
    flipped() {
        return new SemiEllipsoidSurface$$1(this.center, this.f1, this.f2, this.f3.negated());
    }
    normalSTFunc() {
        // ugh
        // paramtric ellipsoid point q(a, b)
        // normal1 == (dq(a, b) / da) X (dq(a, b) / db) (cross product of partial derivatives)
        // normal1 == cos b * (f2 X f3 * cos b * cos a + f3 X f1 * cos b * sin a + f1 X f2 * sin b)
        return (a, b) => {
            const { f1, f2, f3 } = this;
            const normal = f2
                .cross(f3)
                .times(Math.cos(b) * Math.cos(a))
                .plus(f3.cross(f1).times(Math.cos(b) * Math.sin(a)))
                .plus(f1.cross(f2).times(Math.sin(b)))
                //.times(Math.cos(b))
                .unit();
            return normal;
        };
    }
    normalP(p) {
        return this.pLCNormalWCMatrix.transformVector(this.matrixInverse.transformPoint(p)).unit();
    }
    normalST(s, t) {
        return this.pLCNormalWCMatrix.transformVector(V3.sphere(s, t)).unit();
    }
    stPFunc() {
        return (pWC) => {
            const pLC = this.matrixInverse.transformPoint(pWC);
            const alpha = abs$2(pLC.angleXY());
            const beta = Math.asin(clamp(pLC.z, -1, 1));
            assert(isFinite(alpha));
            assert(isFinite(beta));
            return new V3(alpha, beta, 0);
        };
    }
    pSTFunc() {
        // this(a, b) = f1 cos a cos b + f2 sin a cos b + f2 sin b
        return (alpha, beta) => {
            return this.matrix.transformPoint(V3.sphere(alpha, beta));
        };
    }
    isSphere() {
        return (eq(this.f1.length(), this.f2.length()) &&
            eq(this.f2.length(), this.f3.length()) &&
            eq(this.f3.length(), this.f1.length()) &&
            this.f1.isPerpendicularTo(this.f2) &&
            this.f2.isPerpendicularTo(this.f3) &&
            this.f3.isPerpendicularTo(this.f1));
    }
    isVerticalSpheroid() {
        return (eq(this.f1.length(), this.f2.length()) &&
            this.f1.isPerpendicularTo(this.f2) &&
            this.f2.isPerpendicularTo(this.f3) &&
            this.f3.isPerpendicularTo(this.f1));
    }
    mainAxes() {
        // q(a, b) = f1 cos a cos b + f2 sin a cos b + f3 sin b
        // q(s, t, u) = s * f1 + t * f2 + u * f3 with s² + t² + u² = 1
        // (del q(a, b) / del a) = f1 (-sin a) cos b  + f2 cos a cos b
        // (del q(a, b) / del b) = f1 cos a (-sin b) + f2 sin a (-sin b) + f2 cos b
        // del q(s, t, u) / del a = -t f1 + s f2
        // (del q(a, b) / del a) DOT q(a, b) == 0
        // (f1 (-sin a) cos b  + f2 cos a cos b) DOT (f1 cos a cos b + f2 sin a cos b + f2 sin b) == 0
        // (del q(a, b) / del b) DOT q(a, b) == 0
        // (f1 cos a (-sin b) + f2 sin a (-sin b) + f2 cos b) DOT (f1 cos a cos b + f2 sin a cos b + f2 sin b) == 0
        // Solve[
        // (f1 (-sin a) cos b  + f2 cos a cos b) * (f1 cos a cos b + f2 sin a cos b + f2 sin b) = 0,
        // (f1 cos a (-sin b) + f2 sin a (-sin b) + f2 cos b) * (f1 cos a cos b + f2 sin a cos b + f2 sin b) = 0}, a, b]
        const { f1, f2, f3 } = this;
        if (eq0(f1.dot(f2)) && eq0(f2.dot(f3)) && eq0(f3.dot(f1))) {
            return this;
        }
        //const f = ([a, b], x?) => {
        //    const sinA = Math.sin(a), cosA = Math.cos(a), sinB = Math.sin(b), cosB = Math.cos(b)
        //    const centerToP = V3.add(f1.times(cosA * cosB), f2.times(sinA * cosB), f3.times(sinB))
        //    const centerToPdelA = f1.times(-sinA * cosB).plus(f2.times(cosA * cosB))
        //    const centerToPdelB = V3.add(f1.times(cosA * -sinB), f2.times(sinA * -sinB), f3.times(cosB))
        //    x && console.log(centerToP.sce, centerToPdelA.sce, centerToPdelB.sce)
        //    return [centerToP.dot(centerToPdelA), centerToP.dot(centerToPdelB)]
        //}
        //const mainF1Params = newtonIterate(f, [0, 0], 8), mainF1 = this.pSTFunc()(mainF1Params[0], mainF1Params[1])
        //console.log(f(mainF1Params, 1).sce)
        //const mainF2Params = newtonIterate(f, this.stPFunc()(f2.rejectedFrom(mainF1)).toArray(2), 8),
        //   mainF2 = this.pSTFunc()(mainF2Params[0], mainF2Params[1])
        //console.log(this.normalSTFunc()(mainF2Params[0], mainF2Params[1]).sce)
        //assert(mainF1.isPerpendicularTo(mainF2), mainF1, mainF2, mainF1.dot(mainF2), mainF1Params)
        //const mainF3Params = this.stPFunc()(mainF1.cross(mainF2)), mainF3 = this.pSTFunc()(mainF3Params[0],
        // mainF3Params[1]) return new EllipsoidSurface(this.center, mainF1, mainF2, mainF3)
        const { U, SIGMA } = this.matrix.svd3();
        assert(SIGMA.isDiagonal());
        assert(U.isOrthogonal());
        const U_SIGMA = U.times(SIGMA);
        // column vectors of U_SIGMA
        const [mainF1, mainF2, mainF3] = arrayFromFunction(3, i => new V3(U_SIGMA.m[i], U_SIGMA.m[i + 4], U_SIGMA.m[i + 8]));
        return new SemiEllipsoidSurface$$1(this.center, mainF1, mainF2, mainF3);
    }
    containsPoint(p) {
        return eq0(this.implicitFunction()(p));
    }
    boundsFunction() {
        return (a, b) => between(a, 0, PI$3) && between(b, -PI$3, PI$3);
    }
    volume() {
        return 4 / 3 * Math.PI * this.f1.dot(this.f2.cross(this.f3));
    }
    loopContainsPoint(loop, pWC) {
        if (!this.containsPoint(pWC))
            return PointVsFace$$1.OUTSIDE;
        assertVectors(pWC);
        assert(Edge$$1.isLoop(loop));
        const pLCXY = this.matrixInverse.transformPoint(pWC).xy();
        const testLine = new SemiEllipseCurve$$1(this.center, this.f3, pLCXY.likeO() ? this.f2 : this.matrix.transformVector(pLCXY.unit()));
        if (P3$$1.normalOnAnchor(this.f2.unit(), this.center).containsPoint(pWC)) {
            return loop.some(edge => edge.curve.containsPoint(pWC) && fuzzyBetween(edge.curve.pointT(pWC), edge.minT, edge.maxT))
                ? PointVsFace$$1.ON_EDGE
                : PointVsFace$$1.OUTSIDE;
        }
        return Surface$$1.loopContainsPointEllipse(loop, pWC, testLine);
    }
    surfaceAreaApprox() {
        // See https://en.wikipedia.org/wiki/Ellipsoid#Surface_area
        const mainAxes = this.mainAxes(), a = mainAxes.f1.length(), b = mainAxes.f2.length(), c = mainAxes.f3.length();
        const p = 1.6075;
        return 4 * PI$3 * Math.pow((Math.pow(a * b, p) + Math.pow(b * c, p) + Math.pow(c * a, p)) / 3, 1 / p);
    }
    surfaceArea() {
        // See https://en.wikipedia.org/wiki/Ellipsoid#Surface_area
        const mainAxes = this.mainAxes(), f1l = mainAxes.f1.length(), f2l = mainAxes.f2.length(), f3l = mainAxes.f3.length(), [c, b, a] = [f1l, f2l, f3l].sort(MINUS);
        // https://en.wikipedia.org/w/index.php?title=Spheroid&oldid=761246800#Area
        function spheroidArea(a, c) {
            if (c < a) {
                const eccentricity2 = 1 - Math.pow(c, 2) / Math.pow(a, 2);
                const eccentricity = Math.sqrt(eccentricity2);
                return 2 * PI$3 * Math.pow(a, 2) * (1 + (1 - eccentricity2) / Math.sqrt(eccentricity) * Math.atanh(eccentricity));
            }
            else {
                const eccentricity = Math.sqrt(1 - Math.pow(a, 2) / Math.pow(c, 2));
                return 2 * PI$3 * Math.pow(a, 2) * (1 + c / a / eccentricity * Math.asin(eccentricity));
            }
        }
        if (eq(a, b)) {
            return spheroidArea(a, c);
        }
        else if (eq(b, c)) {
            return spheroidArea(b, a);
        }
        else if (eq(c, a)) {
            return spheroidArea(c, b);
        }
        const phi = Math.acos(c / a);
        const kk = Math.pow(a, 2) * (Math.pow(b, 2) - Math.pow(c, 2)) / (Math.pow(b, 2) * (Math.pow(a, 2) - Math.pow(c, 2)));
        const incompleteEllipticInt1 = gaussLegendreQuadrature24(phi => Math.pow(1 - kk * Math.pow(Math.sin(phi), 2), -0.5), 0, phi);
        const incompleteEllipticInt2 = gaussLegendreQuadrature24(phi => Math.pow(1 - kk * Math.pow(Math.sin(phi), 2), 0.5), 0, phi);
        return ((2 * PI$3 * Math.pow(c, 2) + 2 * PI$3 * a * b / Math.sin(phi)) *
            (incompleteEllipticInt2 * Math.pow(Math.sin(phi), 2) + incompleteEllipticInt1 * Math.pow(Math.cos(phi), 2)));
    }
    getSeamPlane() {
        const plane = P3$$1.forAnchorAndPlaneVectors(this.center, this.f1, this.f3);
        return plane.normal1.dot(this.f2) < 0 ? plane : plane.flipped();
    }
    getExtremePoints() {
        return getExtremePointsHelper$$1.call(this, new SemiEllipseCurve$$1(V3.O, V3.X, V3.Z, -PI$3 / 2, PI$3 / 2));
    }
    pointFoot(pWC, startS, startT) {
        console.log(pWC.sce);
        if (undefined === startS || undefined === startT) {
            let pLC1 = this.matrixInverse.transformPoint(pWC).unit();
            if (pLC1.y < 0)
                pLC1 = pLC1.negated();
            ({ x: startS, y: startT } = SemiEllipsoidSurface$$1.UNIT.stP(pLC1));
        }
        const dpds = this.dpds();
        const dpdt = this.dpdt();
        const [s, t] = newtonIterate(([s, t]) => {
            const p = this.pST(s, t);
            console.log([p, p.plus(dpds(s, t)), p, p.plus(dpdt(s, t))].map(toSource).join() + ',');
            const pSTToPWC = this.pST(s, t).to(pWC);
            return [pSTToPWC.dot(dpds(s, t)), pSTToPWC.dot(dpdt(s, t))];
        }, [startS, startT], 8, undefined, 0.1);
        return new V3(s, t, 0);
    }
    implicitFunction() {
        return (pWC) => {
            const pLC = this.matrixInverse.transformPoint(pWC);
            return (pLC.length() - 1) * this.normalDir;
        };
    }
    // = this.inverseMatrix.transformPoint(this.inverseMatrix.transformPoint(pWC).unit())
    didp(pWC) {
        // i(pWC) = this.inverseMatrix.transformPoint(pWC).length() - 1
        // chain diff rule
        const pLC = this.matrixInverse.transformPoint(pWC);
        return this.pLCNormalWCMatrix.transformVector(pLC.unit()); //.times(this.normalDir)
    }
}
SemiEllipsoidSurface$$1.UNIT = new SemiEllipsoidSurface$$1(V3.O, V3.X, V3.Y, V3.Z);
SemiEllipsoidSurface$$1.prototype.uStep = PI$3 / 32;
SemiEllipsoidSurface$$1.prototype.vStep = PI$3 / 32;

class PlaneSurface$$1 extends ParametricSurface$$1 {
    constructor(plane, right = plane.normal1.getPerpendicular().unit(), up = plane.normal1.cross(right).unit(), sMin = -100, sMax = 100, tMin = -100, tMax = 100) {
        super(sMin, sMax, tMin, tMax);
        this.plane = plane;
        this.right = right;
        this.up = up;
        assertInst(P3$$1, plane);
        assert(this.right.cross(this.up).like(this.plane.normal1));
        this.matrix = M4.forSys(right, up, plane.normal1, plane.anchor);
    }
    toSource(rounder = x => x) {
        return callsce.call(undefined, 'new PlaneSurface', ...this.getConstructorParameters());
    }
    static throughPoints(a, b, c) {
        return new PlaneSurface$$1(P3$$1.throughPoints(a, b, c));
    }
    static forAnchorAndPlaneVectors(anchor, v0, v1, sMin, sMax, tMin, tMax) {
        return new PlaneSurface$$1(P3$$1.forAnchorAndPlaneVectors(anchor, v0, v1), v0, v1, sMin, sMax, tMin, tMax);
    }
    isCoplanarTo(surface) {
        return hasConstructor(surface, PlaneSurface$$1) && this.plane.isCoplanarToPlane(surface.plane);
    }
    isTsForLine(line) {
        return line.isTsWithPlane(this.plane);
    }
    like(surface) {
        return hasConstructor(surface, PlaneSurface$$1) && this.plane.like(surface.plane);
    }
    pST(s, t) {
        return this.matrix.transformPoint(new V3(s, t, 0));
    }
    implicitFunction() {
        return p => this.plane.distanceToPointSigned(p);
    }
    isCurvesWithSurface(surface2) {
        if (surface2 instanceof PlaneSurface$$1) {
            return this.isCurvesWithPlane(surface2.plane);
        }
        return super.isCurvesWithSurface(surface2);
    }
    isCurvesWithPlane(plane) {
        if (this.plane.isParallelToPlane(plane)) {
            return [];
        }
        return [this.plane.intersectionWithPlane(plane)];
    }
    edgeLoopCCW(contour) {
        assert(Edge$$1.isLoop(contour), 'isLoop');
        return isCCW(contour.flatMap(edge => edge.points()), this.plane.normal1);
    }
    loopContainsPoint(loop, p) {
        const dir = this.right.plus(this.up.times(0.123)).unit();
        const line = new L3$$1(p, dir);
        const lineOut = dir.cross(this.plane.normal1);
        return Surface$$1.loopContainsPointGeneral(loop, p, line, lineOut);
    }
    stPFunc() {
        const matrixInverse = this.matrix.inversed();
        return function (pWC) {
            return matrixInverse.transformPoint(pWC);
        };
    }
    pointFoot(pWC) {
        return this.stP(pWC);
    }
    normalP(pWC) {
        return this.plane.normal1;
    }
    containsPoint(p) {
        return this.plane.containsPoint(p);
    }
    containsCurve(curve) {
        return curve instanceof ImplicitCurve$$1 ? super.containsCurve(curve) : this.plane.containsCurve(curve);
    }
    transform(m4) {
        return new PlaneSurface$$1(this.plane.transform(m4));
    }
    flipped() {
        return new PlaneSurface$$1(this.plane.flipped(), this.right, this.up.negated());
    }
    getConstructorParameters() {
        return [this.plane, this.right, this.up, this.sMin, this.sMax, this.tMin, this.tMax];
    }
    dpds() {
        return () => this.right;
    }
    dpdt() {
        return () => this.up;
    }
    didp(pWC) {
        return this.plane.normal1;
    }
    normalST() {
        return this.plane.normal1;
    }
}
PlaneSurface$$1.prototype.uStep = 1e6;
PlaneSurface$$1.prototype.vStep = 1e6;

/**
 * In general: the z-dir shadow volume of a face is the integral: SURFACE_INTEGRAL[p in face] (normal(p).z * p.z) dp
 * In general: the centroid of the z-dir shadow volume of a face is the integral:
 *     SURFACE_INTEGRAL[p in face] ((p schur (1, 1, 0.5)) * normal(p).z * p.z) dp
 *     dividing the z component by 2 is usually done at the very end
 */
const ZDirVolumeVisitor$$1 = {
    [ConicSurface$$1.name](edges) {
        console.log(this);
        const dpds = this.dpds();
        const dpdt = this.dpdt();
        // INT[edge.at; edge.bT] (at(t) DOT dir) * (at(t) - at(t).projectedOn(dir) / 2).z dt
        const totalVolume = edges
            .map(edgeWC => {
            const curveWC = edgeWC.curve;
            if (curveWC instanceof SemiEllipseCurve$$1 ||
                curveWC instanceof HyperbolaCurve$$1 ||
                curveWC instanceof ParabolaCurve$$1) {
                const f = (curveT) => {
                    const at = curveWC.at(curveT), tangentWC = curveWC.tangentAt(curveT);
                    const stOfPWC = this.stP(at);
                    // INTEGRATE [0; atST.y] (dpds(atST.x, t) X dpdt(atST.x)).z * pST(atST.x, t).z dt
                    // dpds(s, t) === t * dpds(s, 1)
                    // => INTEGRATE [0; atST.y] (t * dpds(atST.x, 1) X dpdt(atST.x)).z * pST(atST.x, t).z dt
                    // => (dpds(atST.x, 1) X dpdt(atST.x)).z * INTEGRATE [0; atST.y] t * pST(atST.x, t).z dt
                    // pST(s, t) === t * (pST(s, 1) - center) + center
                    // => (dpds(atST.x, 1) X dpdt(atST.x)).z
                    //      * INTEGRATE [0; atST.y] t² * (pST(atST.x, t) - center).z + t * center.z dt
                    // => (dpds(atST.x, 1) X dpdt(atST.x)).z
                    //      * INTEGRATE [0; atST.y] t² * (pST(atST.x, t) - center).z + t * center.z dt
                    // => (dpds(atST.x, 1) X dpdt(atST.x)).z
                    //      * (1/3 t³ pST(atST.x, 1).z + 1/2 t² center.z)[0; atST.y]
                    const ds = -M4.forSys(dpds(stOfPWC.x, stOfPWC.y), dpdt(stOfPWC.x))
                        .inversed()
                        .transformVector(tangentWC).x;
                    const factor = Math.pow(stOfPWC.y, 3) / 3 * (this.pST(stOfPWC.x, 1).z - this.center.z) +
                        Math.pow(stOfPWC.y, 2) / 2 * this.center.z;
                    const actual = dpds(stOfPWC.x, factor).cross(dpdt(stOfPWC.x)).z;
                    return actual * ds;
                };
                const val = glqInSteps(f, edgeWC.aT, edgeWC.bT, 1);
                return val;
            }
            else if (curveWC instanceof L3$$1) {
                return 0;
            }
            else {
                throw new Error();
            }
        })
            .sum();
        const centroidZX2Parts = edges.map(edgeWC => {
            const curveWC = edgeWC.curve;
            if (curveWC instanceof SemiEllipseCurve$$1 ||
                curveWC instanceof HyperbolaCurve$$1 ||
                curveWC instanceof ParabolaCurve$$1) {
                const f = (curveT) => {
                    const at = curveWC.at(curveT), tangentWC = curveWC.tangentAt(curveT);
                    const stOfPWC = this.stP(at);
                    // INTEGRATE [0; atST.y] dpds(atST.x, t) X dpdt(atST.x, t) * pST(atST.x, t).z dt
                    // dpdt is constant with respect to t
                    // => (dpds(atST.x, t) X dpdt(atST.x, t)).z
                    //      * (INTEGRATE [0; atST.y] t * pST(atST.x, t) * pST(atST.x, t).z dt)
                    // dpds(s, t) === t * dpds(s, 1)
                    // pST(s, t) === t * (pST(s, 1) - center) + center
                    // INTEGRATE [0; atST.y] t * pST(atST.x, t) * pST(atST.x, t).z dt
                    // = INTEGRATE [0; atST.y] t *
                    //                         (t * (pST(s, 1) - center) + center) *
                    //                         (t (pST(s, 1) - center).z + center.z) dt
                    // = INTEGRATE [0; atST.y] t³ (pST(s, 1) - center) * (pST(s, 1) - center).z
                    //                       + t² ((pST(s, 1) - center) * center.z + (pST(s, 1) - center).z * center)
                    //                       + t center center.z dt
                    // = (1/4 t^4 (pST(s, 1) - center) * (pST(s, 1) - center).z
                    //   (1/3 t³ ((pST(s, 1) - center) * center.z + (pST(s, 1) - center).z * center)
                    //   (1/2 t² center center.z dt)[0; atST.y]
                    const pSTS1V = this.pST(stOfPWC.x, 1).minus(this.center);
                    const factor = V3.add(pSTS1V.times(1 / 4 * Math.pow(stOfPWC.y, 4) * pSTS1V.z + 1 / 3 * Math.pow(stOfPWC.y, 3) * this.center.z), this.center.times(1 / 3 * Math.pow(stOfPWC.y, 3) * pSTS1V.z + 1 / 2 * Math.pow(stOfPWC.y, 2) * this.center.z));
                    const partialCentroid = factor.times(dpds(stOfPWC.x, 1).cross(dpdt(stOfPWC.x)).z);
                    const ds = -M4.forSys(dpds(stOfPWC.x, stOfPWC.y), dpdt(stOfPWC.x))
                        .inversed()
                        .transformVector(tangentWC).x;
                    return partialCentroid.times(ds);
                };
                return glqV3$$1(f, edgeWC.aT, edgeWC.bT);
            }
            else if (curveWC instanceof L3$$1) {
                return V3.O;
            }
            else {
                throw new Error();
            }
        });
        const centroid = V3.add(...centroidZX2Parts)
            .schur(new V3(1, 1, 0.5))
            .div(totalVolume);
        return { volume: totalVolume, centroid: centroid };
    },
    [PlaneSurface$$1.name](edges) {
        const r1 = this.right;
        const u1 = this.up;
        const c = this.plane.anchor;
        assert(r1.hasLength(1));
        assert(u1.hasLength(1));
        assert(r1.isPerpendicularTo(u1));
        const volumeAndCentroidZX2Parts = edges.map((edgeWC) => {
            const curveWC = edgeWC.curve;
            if (curveWC instanceof L3$$1) {
                // split shadow volume into two triangle shadow volumes and use the same logic as for mesh triangles:
                function triangleShadowVolumeAndCentroid(a, b, c) {
                    const ab = b.minus(a), ac = c.minus(a);
                    const normal = ab.cross(ac);
                    const faceCentroid = V3.add(a, b, c).div(3);
                    return [
                        faceCentroid.z * normal.z / 2,
                        V3.add(a.times(2 * a.z + b.z + c.z), b.times(a.z + 2 * b.z + c.z), c.times(a.z + b.z + 2 * c.z)).times(normal.z),
                    ];
                }
                const a = edgeWC.a, b = edgeWC.b;
                const as = a.dot(r1);
                const bs = b.dot(r1);
                const aBase = this.pST(as, 0);
                const bBase = this.pST(bs, 0);
                const [v1, c1] = triangleShadowVolumeAndCentroid(a, b, aBase);
                const [v2, c2] = triangleShadowVolumeAndCentroid(bBase, aBase, b);
                return [v1 + v2, c1.plus(c2).div(24)];
            }
            else if (curveWC instanceof ImplicitCurve$$1) {
                throw new Error();
            }
            else {
                const sliceAreaAndCentroidZX2TimesDs = (curveT) => {
                    const p = curveWC.at(curveT);
                    const s = p.dot(r1);
                    const t = p.dot(u1);
                    const area = t * c.z + s * t * r1.z + 1 / 2 * Math.pow(t, 2) * u1.z;
                    const ds = -curveWC.tangentAt(curveT).dot(r1);
                    return [
                        area * ds,
                        ...V3.add(c.times(area), r1.times(c.z * s * t + r1.z * Math.pow(s, 2) * t + 1 / 2 * s * Math.pow(t, 2) * u1.z), u1.times(1 / 2 * c.z * Math.pow(t, 2) + 1 / 2 * r1.z * s * Math.pow(t, 2) + 1 / 3 * Math.pow(t, 3) * u1.z)).times(ds),
                    ];
                };
                const [vol, cx, cy, cz] = glqArray$$1(sliceAreaAndCentroidZX2TimesDs, edgeWC.aT, edgeWC.bT, 4);
                return [vol * this.plane.normal1.z, new V3(cx, cy, cz).times(this.plane.normal1.z)];
            }
        });
        return mergeVolumeAndCentroidZX2Parts(volumeAndCentroidZX2Parts);
    },
    /**
     * Generic implementation.
     */
    [ParametricSurface$$1.name](edges) {
        const dpds = this.dpds();
        const dpdt = this.dpdt();
        const volume = edges.map((edgeWC) => {
            const curveWC = edgeWC.curve;
            if (curveWC instanceof ImplicitCurve$$1) {
                throw new Error();
            }
            else {
                const sliceAreaAndCentroidZX2TimesDs = (curveT) => {
                    // use curve.tangent not edge.tangent, reverse edges are handled by the integration boundaries
                    const pWC = curveWC.at(curveT), tangentWC = curveWC.tangentAt(curveT);
                    const stOfPWC = this.stP(pWC);
                    const slice = (t) => {
                        const p = this.pST(stOfPWC.x, t);
                        const normal = dpds(stOfPWC.x, t).cross(dpdt(stOfPWC.x, t));
                        return p.z * normal.z;
                    };
                    const sliceIntegral0ToPWCT = glqInSteps(slice, 0, stOfPWC.y, 1);
                    // const dt = tangentWC.dot(scalingVector)
                    const dt = -M4.forSys(dpds(stOfPWC.x, stOfPWC.y), dpdt(stOfPWC.x, stOfPWC.y))
                        .inversed()
                        .transformVector(tangentWC).x;
                    const sliceAreaTimesDs = sliceIntegral0ToPWCT * dt;
                    const slice2 = (t) => {
                        const p = this.pST(stOfPWC.x, t);
                        const normal = dpds(stOfPWC.x, t).cross(dpdt(stOfPWC.x, t));
                        return p.times(p.z * normal.z);
                    };
                    const sliceIntegral0ToPWCT2 = glqV3$$1(slice2, 0, stOfPWC.y);
                    // const dt = tangentWC.dot(scalingVector)
                    const sliceCentroidZX2TimesDs = sliceIntegral0ToPWCT2.times(dt);
                    return [sliceAreaTimesDs, ...sliceCentroidZX2TimesDs.toArray()];
                };
                const [vol, cx, cy, cz] = glqArray$$1(sliceAreaAndCentroidZX2TimesDs, edgeWC.aT, edgeWC.bT, 4);
                return [vol, new V3(cx, cy, cz)];
            }
        });
        return mergeVolumeAndCentroidZX2Parts(volume);
    },
    /**
     * at(t)
     * |\                                    ^
     * | \ at(t).projectedOn(dir1)            \  dir1
     * |  \                                    \
     * |   \ at(t).rejectedFrom(dir1) = b
     * |   |
     * |___|
     *        z = 0
     *
     *
     * A = ((at(t) + at(t).rejectedFrom(dir1)) / 2).z * at(t).projectedOn(dir1).lengthXY()
     * scaling = tangentAt(t) DOT dir1.cross(V3.Z).unit()
     */
    [ProjectedCurveSurface$$1.name](edges) {
        if (V3.Z.cross(this.dir).likeO())
            return { volume: 0, centroid: V3.O };
        // normalize this.dir so it always points up
        const upDir1 = this.dir.toLength(Math.sign(this.dir.z) || 1);
        const scalingVector = V3.Z.cross(upDir1).unit();
        // the length of the base of the trapezoid is calculated by dotting with the baseVector
        const baseVector = upDir1.rejectedFrom(V3.Z).unit();
        // INT[edge.at; edge.bT] (at(t) DOT dir1) * (at(t) - at(t).projectedOn(dir) / 2).z
        const volume = edges.map((edgeWC) => {
            if (edgeWC.curve instanceof L3$$1) {
                return [0, V3.O];
            }
            else if (edgeWC.curve instanceof ImplicitCurve$$1) {
                return [0, V3.O];
                // 	const { points, tangents } = edgeWC.curve
                // 	const minT = edgeWC.minT,
                // 		maxT = edgeWC.maxT
                // 	let sum = 0
                // 	const start = Math.ceil(minT + NLA_PRECISION)
                // 	const end = Math.floor(maxT - NLA_PRECISION)
                // 	for (let i = start; i <= end; i++) {
                // 		const at = points[i],
                // 			tangent = tangents[i]
                // 		const area = (at.z + at.rejectedFrom1(upDir1).z) / 2 * at.projectedOn(upDir1).dot(baseVector)
                // 		const scale = tangent.dot(scalingVector)
                // 		sum += area * scale
                // 	}
                // 	const f = (t: number) => {
                // 		const at = edgeWC.curve.at(t),
                // 			tangent = edgeWC.curve.tangentAt(t)
                // 		const area = (at.z + at.rejectedFrom1(upDir1).z) / 2 * at.projectedOn(upDir1).dot(baseVector)
                // 		const scale = tangent.dot(scalingVector)
                // 		return area * scale
                // 	}
                // 	sum += f(minT) * (start - minT - 0.5)
                // 	sum += f(maxT) * (maxT - end - 0.5)
                // 	return sum * Math.sign(edgeWC.deltaT())
            }
            else {
                const f = (curveT) => {
                    // use curve.tangent not edge.tangent, reverse edges are handled by the integration boundaries
                    const at = edgeWC.curve.at(curveT), tangent = edgeWC.curve.tangentAt(curveT);
                    const b = at.rejectedFrom1(upDir1);
                    const area = at.z * b.to(at).dot(baseVector) / 2 + b.z * b.to(at).dot(baseVector) / 2;
                    const areaCentroidA = V3.add(at.xy(), b, at).times(at.z * b.to(at).dot(baseVector) / 2 / 3);
                    const areaCentroidB = V3.add(at.xy(), b, b.xy()).times(b.z * b.to(at).dot(baseVector) / 2 / 3);
                    const scale = tangent.dot(scalingVector);
                    return [
                        area * scale,
                        ...areaCentroidA
                            .plus(areaCentroidB)
                            .times(scale)
                            .schur(V(1, 1, 2)),
                    ];
                };
                const [vol, cx, cy, cz] = glqArray$$1(f, edgeWC.aT, edgeWC.bT, 4);
                return [vol, new V3(cx, cy, cz)];
            }
        });
        return mergeVolumeAndCentroidZX2Parts(volume);
    },
    // volume does scale linearly, so this could be done in the local coordinate system
    // however, shear matrices lead to point-to-plane distances having to be calculated along a vector other than
    // the plane normal
    [RotatedCurveSurface$$1.name](edges) {
        const dpds = this.dpds();
        const dpdt = this.dpdt();
        const totalVolume = edges
            .map(edgeWC => {
            const curveWC = edgeWC.curve;
            const f = (curveT) => {
                const pWC = curveWC.at(curveT), tangentWC = curveWC.tangentAt(curveT);
                const stOfPWC = this.stP(pWC);
                const pLC = this.matrixInverse.transformPoint(pWC);
                const dpdtAtS0 = this instanceof RotatedCurveSurface$$1
                    ? this.curve.tangentAt(stOfPWC.y)
                    : V(-pLC.z, 0, pLC.lengthXY());
                // const slice = (phi: number) => {
                // 	const p = this.pST(phi, stOfPWC.y)
                // 	const normal = dpds(phi, stOfPWC.y).cross(dpdt(phi, stOfPWC.y))
                // 	return p.z * normal.z
                // }
                // const z = this.curve.at(stOfPWC.y).z
                // const r = this.curve.at(stOfPWC.y).lengthXY()
                // const pz =
                // 	this.f1.z * r * cos(s) +
                // 	this.f2.z * r * sin(s) +
                // 	this.f3.z * z +
                // 	this.center.z
                // const dpdsx = this.f1.x * r * -sin(s) + this.f2.x * r * cos(s)
                // const dpdsy = this.f1.y * r * -sin(s) + this.f2.y * r * cos(s)
                // const dpdtx = this.f1.x * dr * cos(s) + this.f2.x * dr * sin(s) + this.f3.x * dz
                // const dpdty = this.f1.y * dr * cos(s) + this.f2.y * dr * sin(s) + this.f3.y * dz
                // const normalz = dpdsx * dpdty - dpdsy * dpdtx
                // result = pz * normalz
                const r = pLC.lengthXY(), z = pLC.z;
                const dr = dpdtAtS0.x;
                const dz = dpdtAtS0.z;
                const a = this.matrix.X.z * r, b = this.matrix.Y.z * r, c = this.matrix.Z.z * z + this.matrix.O.z;
                const t0 = (this.matrix.X.x * this.matrix.Y.y - this.matrix.X.y * this.matrix.Y.x) * r * dr;
                const t1 = (this.matrix.Y.x * this.matrix.X.y - this.matrix.Y.y * this.matrix.X.x) * r * dr;
                const t2 = (this.matrix.X.x * this.matrix.X.y - this.matrix.X.y * this.matrix.X.x) * r * dr;
                const t3 = (this.matrix.Y.x * this.matrix.Y.y - this.matrix.Y.y * this.matrix.Y.x) * r * dr;
                const t4 = (this.matrix.Y.x * this.matrix.Z.y - this.matrix.Y.y * this.matrix.Z.x) * r * dz;
                const t5 = (this.matrix.X.x * this.matrix.Z.y - this.matrix.X.y * this.matrix.Z.x) * r * dz;
                const sliceIntegral = (p) => {
                    return ((6 * (c * (-t0 + t1) + a * t4 - b * t5) * p +
                        3 * (3 * b * t0 - b * t1 + a * (t2 - t3) + 4 * c * t5) * cos$1(p) +
                        3 * (3 * a * t1 - a * t0 - b * (t2 - t3) + 4 * c * t4) * sin$1(p) +
                        3 * (a * t5 - b * t4 + c * (t2 - t3)) * cos$1(2 * p) +
                        3 * (a * t4 + b * t5 + c * (t0 + t1)) * sin$1(2 * p) +
                        (a * (t2 - t3) - b * (t0 + t1)) * cos$1(3 * p) +
                        (a * (t0 + t1) + b * (t2 - t3)) * sin$1(3 * p)) /
                        12);
                };
                const dt = M4.forSys(dpds(stOfPWC.x, stOfPWC.y), dpdt(stOfPWC.x, stOfPWC.y))
                    .inversed()
                    .transformVector(tangentWC).y;
                const sliceIntegral0ToPWCS = sliceIntegral(stOfPWC.x); //- sliceIntegral(0) //(always 0)
                const result = sliceIntegral0ToPWCS * dt;
                return result;
            };
            return gaussLegendreQuadrature24(f, edgeWC.aT, edgeWC.bT);
        })
            .sum();
        // calc centroid:
        const centroidZX2Parts = edges.map(edgeWC => {
            const f = (curveT) => {
                const curveWC = edgeWC.curve;
                const pWC = curveWC.at(curveT), tangentWC = curveWC.tangentAt(curveT);
                const stOfPWC = this.stP(pWC);
                const slice = (phi) => {
                    const p = this.pST(phi, stOfPWC.y);
                    const normal = dpds(phi, stOfPWC.y).cross(dpdt(phi, stOfPWC.y));
                    return p.times(p.z * normal.z);
                };
                const sliceIntegral0ToPWCS = glqV3$$1(slice, 0, stOfPWC.x);
                const dt = M4.forSys(dpds(stOfPWC.x, stOfPWC.y), dpdt(stOfPWC.x, stOfPWC.y))
                    .inversed()
                    .transformVector(tangentWC).y;
                const result = sliceIntegral0ToPWCS.times(dt);
                return result;
            };
            return glqV3$$1(f, edgeWC.aT, edgeWC.bT);
        });
        const centroid = V3.add(...centroidZX2Parts)
            .schur(new V3(1, 1, 0.5))
            .div(totalVolume);
        return { volume: totalVolume, centroid: centroid };
    },
};
ZDirVolumeVisitor$$1[SemiEllipsoidSurface$$1.name] = ZDirVolumeVisitor$$1[RotatedCurveSurface$$1.name];
function glqV3$$1(f, startT, endT) {
    return gaussLegendre24Xs
        .reduce((val, currVal, index) => {
        const x = startT + (currVal + 1) / 2 * (endT - startT);
        return val.plus(f(x).times(gaussLegendre24Weights[index]));
    }, V3.O)
        .times((endT - startT) / 2);
}
function glqArray$$1(f, startT, endT, numEls = 3) {
    const result = new Array(numEls).fill(0);
    for (let i = 0; i < 24; i++) {
        const x = startT + (gaussLegendre24Xs[i] + 1) / 2 * (endT - startT);
        const fx = f(x);
        for (let j = 0; j < numEls; j++) {
            result[j] += fx[j] * gaussLegendre24Weights[i];
        }
    }
    for (let j = 0; j < numEls; j++) {
        result[j] *= (endT - startT) / 2;
    }
    return result;
}
function mergeVolumeAndCentroidZX2Parts(volumeAndCentroidZX2Parts) {
    const volume = volumeAndCentroidZX2Parts.reduce((result, [volume]) => result + volume, 0);
    const weightedCentroid = V3.add(...volumeAndCentroidZX2Parts.map(([, centroidZX2]) => centroidZX2)).schur(new V3(1, 1, 0.5));
    return { volume, centroid: weightedCentroid.div(volume) };
}

const CalculateAreaVisitor$$1 = {
    [ConicSurface$$1.name](edges) {
        const dpds = this.dpds();
        const dpdt = this.dpdt();
        // calculation cannot be done in local coordinate system, as the area doesnt scale proportionally
        const totalArea = edges
            .map(edge => {
            if (edge.curve instanceof SemiEllipseCurve$$1 ||
                edge.curve instanceof HyperbolaCurve$$1 ||
                edge.curve instanceof ParabolaCurve$$1) {
                const f = (t) => {
                    const at = edge.curve.at(t), tangentWC = edge.tangentAt(t);
                    const stOfPWC = this.stP(at);
                    // INTEGRATE [0; atST.y]
                    //   dpds(atST.x, t) X dpdt(atST.x, t)
                    // dt
                    // dpdt is constant with respect to t
                    // => dpdt(atST.x, 0) X (INTEGRATE [0; atST.y] dpds(atST.x, t) dt)
                    // dpds(s, t) === t * dpds(s, 1)
                    // => dpdt(atST.x, 0) X (1/2 t² dpds(atST.x, 1))[0; atST.y]
                    // => dpdt(atST.x, 0) X dpds(atST.x, atST.y² / 2)
                    const ds = -M4.forSys(dpds(stOfPWC.x, stOfPWC.y), dpdt(stOfPWC.x))
                        .inversed()
                        .transformVector(tangentWC).x;
                    return (dpds(stOfPWC.x, Math.pow(stOfPWC.y, 2) / 2)
                        .cross(dpdt(stOfPWC.x))
                        .length() * ds);
                };
                return glqInSteps(f, edge.aT, edge.bT, 1);
            }
            else if (edge.curve instanceof L3$$1) {
                return 0;
            }
            else {
                throw new Error();
            }
        })
            .sum();
        return totalArea * this.normalDir;
    },
    [PlaneSurface$$1.name](edges) {
        let totalArea = 0;
        const r1 = this.right, u1 = this.up;
        for (const edge of edges) {
            let edgeArea;
            const curve = edge.curve;
            if (curve instanceof L3$$1) {
                edgeArea = (edge.a.dot(u1) + edge.b.dot(u1)) / 2 * edge.b.to(edge.a).dot(r1);
            }
            else if (curve instanceof SemiEllipseCurve$$1) {
                // INTEGRATE[aT; bT] (curve.at(t) * u1) * (tangent(t) * r1) dt
                // INTEGRATE[aT; bT] (u1 f1 cos t + u1 f2 sin t + u1 c) * (r1 f1 (-sin t) + r1 f2 cos t) dt
                const { f1, f2, center } = curve;
                const a = u1.dot(f1), b = u1.dot(f2), c = u1.dot(center), d = r1.dot(f1), e = r1.dot(f2);
                function fArea(t) {
                    return (0.25 *
                        (2 * (-b * d + a * e) * t +
                            4 * c * d * cos$1(t) +
                            4 * c * e * sin$1(t) +
                            (a * d - b * e) * cos$1(2 * t) +
                            (b * d + a * e) * sin$1(2 * t)));
                }
                edgeArea = -(fArea(edge.bT) - fArea(edge.aT));
            }
            else if (curve instanceof ImplicitCurve$$1) {
                throw new Error('implement for implicitCurve');
            }
            else {
                const dir1 = u1;
                assertf(() => dir1.hasLength(1));
                // INT[aT; bT] at(t) * dir1 * tangentAt(t).rejectedFrom(dir1) dt
                const f = (curveT) => {
                    const at = curve.at(curveT);
                    const tangent = curve.tangentAt(curveT);
                    const ds = r1.dot(tangent);
                    const t = u1.dot(at);
                    return ds * t;
                };
                edgeArea = glqInSteps(f, edge.aT, edge.bT, 3);
            }
            totalArea += edgeArea;
        }
        assert(isFinite(totalArea));
        return totalArea;
    },
    [RotatedCurveSurface$$1.name](edges, canApproximate = true) {
        const f1 = this.matrix.X, f2 = this.matrix.Y, f3 = this.matrix.Z;
        const likeVerticalSpheroid = eq(f1.length(), f2.length()) &&
            f1.isPerpendicularTo(f2) &&
            f2.isPerpendicularTo(f3) &&
            f3.isPerpendicularTo(f1);
        const areaParts = edges.map((edgeWC, ei) => {
            console.log('edge', ei, edgeWC.sce);
            const curveWC = edgeWC.curve;
            if (edgeWC.curve instanceof ImplicitCurve$$1) {
                throw new Error();
            }
            else {
                if (likeVerticalSpheroid) {
                    const f = (curveT) => {
                        const pWC = curveWC.at(curveT), tangent = curveWC.tangentAt(curveT);
                        const pLC = this.matrixInverse.transformPoint(pWC);
                        const { x: angleXY, y: t } = this.stP(pWC);
                        const arcRadius = this.matrix.transformVector(pLC.xy()).length();
                        const arcLength = angleXY * arcRadius;
                        const dpdt = this.dpdt()(angleXY, t).unit();
                        const scaling = dpdt.dot(tangent);
                        return arcLength * scaling;
                    };
                    return glqInSteps(f, edgeWC.aT, edgeWC.bT, 1);
                }
                else {
                    const dpds = this.dpds(), dpdt = this.dpdt();
                    const f2 = (curveT) => {
                        const pWC = curveWC.at(curveT), tangentWC = curveWC.tangentAt(curveT);
                        const stPWC = this.stP(pWC);
                        const slice = (phi) => {
                            //return this.dpds()(phi, st.y).length() * this.dpdt()(phi, st.y).length()
                            return dpds(phi, stPWC.y)
                                .cross(dpdt(phi, stPWC.y))
                                .length();
                        };
                        // we need to do a coordinate transform from curveT to dt, as that is what we are integrating
                        const dt = M4.forSys(dpds(stPWC.x, stPWC.y), dpdt(stPWC.x, stPWC.y))
                            .inversed()
                            .transformVector(tangentWC).y;
                        return glqInSteps(slice, 0, stPWC.x, 1) * dt;
                    };
                    return glqInSteps(f2, edgeWC.aT, edgeWC.bT, 1);
                }
            }
        });
        return areaParts.sum();
    },
    [ProjectedCurveSurface$$1.name](edges) {
        // calculation cannot be done in local coordinate system, as the area doesn't scale proportionally
        const thisDir1 = this.dir.unit();
        const totalArea = edges
            .map(edge => {
            if (edge.curve instanceof L3$$1) {
                return 0;
            }
            else if (edge.curve instanceof ImplicitCurve$$1) {
                const { points, tangents } = edge.curve;
                const minT = edge.minT, maxT = edge.maxT;
                let sum = 0;
                const start = ceil(minT + NLA_PRECISION);
                const end = floor(maxT - NLA_PRECISION);
                for (let i = start; i <= end; i++) {
                    const at = points[i], tangent = tangents[i].toLength(edge.curve.stepSize);
                    const scaling = this.normalP(at)
                        .cross(thisDir1)
                        .unit()
                        .dot(tangent);
                    sum += at.dot(thisDir1) * scaling;
                }
                const f = (t) => {
                    const at = edge.curve.at(t), tangent = edge.curve.tangentAt(t);
                    const scaling = this.normalP(at)
                        .cross(thisDir1)
                        .unit()
                        .dot(tangent);
                    return at.dot(thisDir1) * scaling;
                };
                sum += f(minT) * (start - minT - 0.5);
                sum += f(maxT) * (maxT - end - 0.5);
                return sum * sign$1(edge.deltaT());
            }
            else {
                const f = (t) => {
                    const at = edge.curve.at(t);
                    const tangent = edge.tangentAt(t);
                    const scaling = tangent.rejected1Length(thisDir1);
                    return at.dot(thisDir1) * scaling;
                };
                const val = glqInSteps(f, edge.aT, edge.bT, 1);
                const sign = Math.sign(this.normalP(edge.a)
                    .cross(this.dir)
                    .dot(edge.curve.tangentAt(edge.aT)));
                assert(0 !== sign);
                return val * sign;
            }
        })
            .sum();
        console.log('totalArea', totalArea);
        return totalArea;
    },
};
CalculateAreaVisitor$$1[SemiEllipsoidSurface$$1.name] = CalculateAreaVisitor$$1[RotatedCurveSurface$$1.name];

var TINF_OK = 0;
var TINF_DATA_ERROR = -3;

function Tree() {
  this.table = new Uint16Array(16);   /* table of code length counts */
  this.trans = new Uint16Array(288);  /* code -> symbol translation table */
}

function Data(source, dest) {
  this.source = source;
  this.sourceIndex = 0;
  this.tag = 0;
  this.bitcount = 0;
  
  this.dest = dest;
  this.destLen = 0;
  
  this.ltree = new Tree();  /* dynamic length/symbol tree */
  this.dtree = new Tree();  /* dynamic distance tree */
}

/* --------------------------------------------------- *
 * -- uninitialized global data (static structures) -- *
 * --------------------------------------------------- */

var sltree = new Tree();
var sdtree = new Tree();

/* extra bits and base tables for length codes */
var length_bits = new Uint8Array(30);
var length_base = new Uint16Array(30);

/* extra bits and base tables for distance codes */
var dist_bits = new Uint8Array(30);
var dist_base = new Uint16Array(30);

/* special ordering of code length codes */
var clcidx = new Uint8Array([
  16, 17, 18, 0, 8, 7, 9, 6,
  10, 5, 11, 4, 12, 3, 13, 2,
  14, 1, 15
]);

/* used by tinf_decode_trees, avoids allocations every call */
var code_tree = new Tree();
var lengths = new Uint8Array(288 + 32);

/* ----------------------- *
 * -- utility functions -- *
 * ----------------------- */

/* build extra bits and base tables */
function tinf_build_bits_base(bits, base, delta, first) {
  var i, sum;

  /* build bits table */
  for (i = 0; i < delta; ++i) bits[i] = 0;
  for (i = 0; i < 30 - delta; ++i) bits[i + delta] = i / delta | 0;

  /* build base table */
  for (sum = first, i = 0; i < 30; ++i) {
    base[i] = sum;
    sum += 1 << bits[i];
  }
}

/* build the fixed huffman trees */
function tinf_build_fixed_trees(lt, dt) {
  var i;

  /* build fixed length tree */
  for (i = 0; i < 7; ++i) lt.table[i] = 0;

  lt.table[7] = 24;
  lt.table[8] = 152;
  lt.table[9] = 112;

  for (i = 0; i < 24; ++i) lt.trans[i] = 256 + i;
  for (i = 0; i < 144; ++i) lt.trans[24 + i] = i;
  for (i = 0; i < 8; ++i) lt.trans[24 + 144 + i] = 280 + i;
  for (i = 0; i < 112; ++i) lt.trans[24 + 144 + 8 + i] = 144 + i;

  /* build fixed distance tree */
  for (i = 0; i < 5; ++i) dt.table[i] = 0;

  dt.table[5] = 32;

  for (i = 0; i < 32; ++i) dt.trans[i] = i;
}

/* given an array of code lengths, build a tree */
var offs = new Uint16Array(16);

function tinf_build_tree(t, lengths, off, num) {
  var i, sum;

  /* clear code length count table */
  for (i = 0; i < 16; ++i) t.table[i] = 0;

  /* scan symbol lengths, and sum code length counts */
  for (i = 0; i < num; ++i) t.table[lengths[off + i]]++;

  t.table[0] = 0;

  /* compute offset table for distribution sort */
  for (sum = 0, i = 0; i < 16; ++i) {
    offs[i] = sum;
    sum += t.table[i];
  }

  /* create code->symbol translation table (symbols sorted by code) */
  for (i = 0; i < num; ++i) {
    if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;
  }
}

/* ---------------------- *
 * -- decode functions -- *
 * ---------------------- */

/* get one bit from source stream */
function tinf_getbit(d) {
  /* check if tag is empty */
  if (!d.bitcount--) {
    /* load next tag */
    d.tag = d.source[d.sourceIndex++];
    d.bitcount = 7;
  }

  /* shift bit out of tag */
  var bit = d.tag & 1;
  d.tag >>>= 1;

  return bit;
}

/* read a num bit value from a stream and add base */
function tinf_read_bits(d, num, base) {
  if (!num)
    return base;

  while (d.bitcount < 24) {
    d.tag |= d.source[d.sourceIndex++] << d.bitcount;
    d.bitcount += 8;
  }

  var val = d.tag & (0xffff >>> (16 - num));
  d.tag >>>= num;
  d.bitcount -= num;
  return val + base;
}

/* given a data stream and a tree, decode a symbol */
function tinf_decode_symbol(d, t) {
  while (d.bitcount < 24) {
    d.tag |= d.source[d.sourceIndex++] << d.bitcount;
    d.bitcount += 8;
  }
  
  var sum = 0, cur = 0, len = 0;
  var tag = d.tag;

  /* get more bits while code value is above sum */
  do {
    cur = 2 * cur + (tag & 1);
    tag >>>= 1;
    ++len;

    sum += t.table[len];
    cur -= t.table[len];
  } while (cur >= 0);
  
  d.tag = tag;
  d.bitcount -= len;

  return t.trans[sum + cur];
}

/* given a data stream, decode dynamic trees from it */
function tinf_decode_trees(d, lt, dt) {
  var hlit, hdist, hclen;
  var i, num, length;

  /* get 5 bits HLIT (257-286) */
  hlit = tinf_read_bits(d, 5, 257);

  /* get 5 bits HDIST (1-32) */
  hdist = tinf_read_bits(d, 5, 1);

  /* get 4 bits HCLEN (4-19) */
  hclen = tinf_read_bits(d, 4, 4);

  for (i = 0; i < 19; ++i) lengths[i] = 0;

  /* read code lengths for code length alphabet */
  for (i = 0; i < hclen; ++i) {
    /* get 3 bits code length (0-7) */
    var clen = tinf_read_bits(d, 3, 0);
    lengths[clcidx[i]] = clen;
  }

  /* build code length tree */
  tinf_build_tree(code_tree, lengths, 0, 19);

  /* decode code lengths for the dynamic trees */
  for (num = 0; num < hlit + hdist;) {
    var sym = tinf_decode_symbol(d, code_tree);

    switch (sym) {
      case 16:
        /* copy previous code length 3-6 times (read 2 bits) */
        var prev = lengths[num - 1];
        for (length = tinf_read_bits(d, 2, 3); length; --length) {
          lengths[num++] = prev;
        }
        break;
      case 17:
        /* repeat code length 0 for 3-10 times (read 3 bits) */
        for (length = tinf_read_bits(d, 3, 3); length; --length) {
          lengths[num++] = 0;
        }
        break;
      case 18:
        /* repeat code length 0 for 11-138 times (read 7 bits) */
        for (length = tinf_read_bits(d, 7, 11); length; --length) {
          lengths[num++] = 0;
        }
        break;
      default:
        /* values 0-15 represent the actual code lengths */
        lengths[num++] = sym;
        break;
    }
  }

  /* build dynamic trees */
  tinf_build_tree(lt, lengths, 0, hlit);
  tinf_build_tree(dt, lengths, hlit, hdist);
}

/* ----------------------------- *
 * -- block inflate functions -- *
 * ----------------------------- */

/* given a stream and two trees, inflate a block of data */
function tinf_inflate_block_data(d, lt, dt) {
  while (1) {
    var sym = tinf_decode_symbol(d, lt);

    /* check for end of block */
    if (sym === 256) {
      return TINF_OK;
    }

    if (sym < 256) {
      d.dest[d.destLen++] = sym;
    } else {
      var length, dist, offs;
      var i;

      sym -= 257;

      /* possibly get more bits from length code */
      length = tinf_read_bits(d, length_bits[sym], length_base[sym]);

      dist = tinf_decode_symbol(d, dt);

      /* possibly get more bits from distance code */
      offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);

      /* copy match */
      for (i = offs; i < offs + length; ++i) {
        d.dest[d.destLen++] = d.dest[i];
      }
    }
  }
}

/* inflate an uncompressed block of data */
function tinf_inflate_uncompressed_block(d) {
  var length, invlength;
  var i;
  
  /* unread from bitbuffer */
  while (d.bitcount > 8) {
    d.sourceIndex--;
    d.bitcount -= 8;
  }

  /* get length */
  length = d.source[d.sourceIndex + 1];
  length = 256 * length + d.source[d.sourceIndex];

  /* get one's complement of length */
  invlength = d.source[d.sourceIndex + 3];
  invlength = 256 * invlength + d.source[d.sourceIndex + 2];

  /* check length */
  if (length !== (~invlength & 0x0000ffff))
    return TINF_DATA_ERROR;

  d.sourceIndex += 4;

  /* copy block */
  for (i = length; i; --i)
    d.dest[d.destLen++] = d.source[d.sourceIndex++];

  /* make sure we start next block on a byte boundary */
  d.bitcount = 0;

  return TINF_OK;
}

/* inflate stream from source to dest */
function tinf_uncompress(source, dest) {
  var d = new Data(source, dest);
  var bfinal, btype, res;

  do {
    /* read final block flag */
    bfinal = tinf_getbit(d);

    /* read block type (2 bits) */
    btype = tinf_read_bits(d, 2, 0);

    /* decompress block */
    switch (btype) {
      case 0:
        /* decompress uncompressed block */
        res = tinf_inflate_uncompressed_block(d);
        break;
      case 1:
        /* decompress block with fixed huffman trees */
        res = tinf_inflate_block_data(d, sltree, sdtree);
        break;
      case 2:
        /* decompress block with dynamic huffman trees */
        tinf_decode_trees(d, d.ltree, d.dtree);
        res = tinf_inflate_block_data(d, d.ltree, d.dtree);
        break;
      default:
        res = TINF_DATA_ERROR;
    }

    if (res !== TINF_OK)
      throw new Error('Data error');

  } while (!bfinal);

  if (d.destLen < d.dest.length) {
    if (typeof d.dest.slice === 'function')
      return d.dest.slice(0, d.destLen);
    else
      return d.dest.subarray(0, d.destLen);
  }
  
  return d.dest;
}

/* -------------------- *
 * -- initialization -- *
 * -------------------- */

/* build fixed huffman trees */
tinf_build_fixed_trees(sltree, sdtree);

/* build extra bits and base tables */
tinf_build_bits_base(length_bits, length_base, 4, 3);
tinf_build_bits_base(dist_bits, dist_base, 2, 1);

/* fix a special case */
length_bits[28] = 0;
length_base[28] = 258;

var tinyInflate = tinf_uncompress;

// The Bounding Box object

function derive(v0, v1, v2, v3, t) {
    return Math.pow(1 - t, 3) * v0 +
        3 * Math.pow(1 - t, 2) * t * v1 +
        3 * (1 - t) * Math.pow(t, 2) * v2 +
        Math.pow(t, 3) * v3;
}
/**
 * A bounding box is an enclosing box that describes the smallest measure within which all the points lie.
 * It is used to calculate the bounding box of a glyph or text path.
 *
 * On initialization, x1/y1/x2/y2 will be NaN. Check if the bounding box is empty using `isEmpty()`.
 *
 * @exports opentype.BoundingBox
 * @class
 * @constructor
 */
function BoundingBox() {
    this.x1 = Number.NaN;
    this.y1 = Number.NaN;
    this.x2 = Number.NaN;
    this.y2 = Number.NaN;
}

/**
 * Returns true if the bounding box is empty, that is, no points have been added to the box yet.
 */
BoundingBox.prototype.isEmpty = function() {
    return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);
};

/**
 * Add the point to the bounding box.
 * The x1/y1/x2/y2 coordinates of the bounding box will now encompass the given point.
 * @param {number} x - The X coordinate of the point.
 * @param {number} y - The Y coordinate of the point.
 */
BoundingBox.prototype.addPoint = function(x, y) {
    if (typeof x === 'number') {
        if (isNaN(this.x1) || isNaN(this.x2)) {
            this.x1 = x;
            this.x2 = x;
        }
        if (x < this.x1) {
            this.x1 = x;
        }
        if (x > this.x2) {
            this.x2 = x;
        }
    }
    if (typeof y === 'number') {
        if (isNaN(this.y1) || isNaN(this.y2)) {
            this.y1 = y;
            this.y2 = y;
        }
        if (y < this.y1) {
            this.y1 = y;
        }
        if (y > this.y2) {
            this.y2 = y;
        }
    }
};

/**
 * Add a X coordinate to the bounding box.
 * This extends the bounding box to include the X coordinate.
 * This function is used internally inside of addBezier.
 * @param {number} x - The X coordinate of the point.
 */
BoundingBox.prototype.addX = function(x) {
    this.addPoint(x, null);
};

/**
 * Add a Y coordinate to the bounding box.
 * This extends the bounding box to include the Y coordinate.
 * This function is used internally inside of addBezier.
 * @param {number} y - The Y coordinate of the point.
 */
BoundingBox.prototype.addY = function(y) {
    this.addPoint(null, y);
};

/**
 * Add a Bézier curve to the bounding box.
 * This extends the bounding box to include the entire Bézier.
 * @param {number} x0 - The starting X coordinate.
 * @param {number} y0 - The starting Y coordinate.
 * @param {number} x1 - The X coordinate of the first control point.
 * @param {number} y1 - The Y coordinate of the first control point.
 * @param {number} x2 - The X coordinate of the second control point.
 * @param {number} y2 - The Y coordinate of the second control point.
 * @param {number} x - The ending X coordinate.
 * @param {number} y - The ending Y coordinate.
 */
BoundingBox.prototype.addBezier = function(x0, y0, x1, y1, x2, y2, x, y) {
    // This code is based on http://nishiohirokazu.blogspot.com/2009/06/how-to-calculate-bezier-curves-bounding.html
    // and https://github.com/icons8/svg-path-bounding-box

    const p0 = [x0, y0];
    const p1 = [x1, y1];
    const p2 = [x2, y2];
    const p3 = [x, y];

    this.addPoint(x0, y0);
    this.addPoint(x, y);

    for (let i = 0; i <= 1; i++) {
        const b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
        const a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
        const c = 3 * p1[i] - 3 * p0[i];

        if (a === 0) {
            if (b === 0) continue;
            const t = -c / b;
            if (0 < t && t < 1) {
                if (i === 0) this.addX(derive(p0[i], p1[i], p2[i], p3[i], t));
                if (i === 1) this.addY(derive(p0[i], p1[i], p2[i], p3[i], t));
            }
            continue;
        }

        const b2ac = Math.pow(b, 2) - 4 * c * a;
        if (b2ac < 0) continue;
        const t1 = (-b + Math.sqrt(b2ac)) / (2 * a);
        if (0 < t1 && t1 < 1) {
            if (i === 0) this.addX(derive(p0[i], p1[i], p2[i], p3[i], t1));
            if (i === 1) this.addY(derive(p0[i], p1[i], p2[i], p3[i], t1));
        }
        const t2 = (-b - Math.sqrt(b2ac)) / (2 * a);
        if (0 < t2 && t2 < 1) {
            if (i === 0) this.addX(derive(p0[i], p1[i], p2[i], p3[i], t2));
            if (i === 1) this.addY(derive(p0[i], p1[i], p2[i], p3[i], t2));
        }
    }
};

/**
 * Add a quadratic curve to the bounding box.
 * This extends the bounding box to include the entire quadratic curve.
 * @param {number} x0 - The starting X coordinate.
 * @param {number} y0 - The starting Y coordinate.
 * @param {number} x1 - The X coordinate of the control point.
 * @param {number} y1 - The Y coordinate of the control point.
 * @param {number} x - The ending X coordinate.
 * @param {number} y - The ending Y coordinate.
 */
BoundingBox.prototype.addQuad = function(x0, y0, x1, y1, x, y) {
    const cp1x = x0 + 2 / 3 * (x1 - x0);
    const cp1y = y0 + 2 / 3 * (y1 - y0);
    const cp2x = cp1x + 1 / 3 * (x - x0);
    const cp2y = cp1y + 1 / 3 * (y - y0);
    this.addBezier(x0, y0, cp1x, cp1y, cp2x, cp2y, x, y);
};

// Geometric objects

/**
 * A bézier path containing a set of path commands similar to a SVG path.
 * Paths can be drawn on a context using `draw`.
 * @exports opentype.Path
 * @class
 * @constructor
 */
function Path() {
    this.commands = [];
    this.fill = 'black';
    this.stroke = null;
    this.strokeWidth = 1;
}

/**
 * @param  {number} x
 * @param  {number} y
 */
Path.prototype.moveTo = function(x, y) {
    this.commands.push({
        type: 'M',
        x: x,
        y: y
    });
};

/**
 * @param  {number} x
 * @param  {number} y
 */
Path.prototype.lineTo = function(x, y) {
    this.commands.push({
        type: 'L',
        x: x,
        y: y
    });
};

/**
 * Draws cubic curve
 * @function
 * curveTo
 * @memberof opentype.Path.prototype
 * @param  {number} x1 - x of control 1
 * @param  {number} y1 - y of control 1
 * @param  {number} x2 - x of control 2
 * @param  {number} y2 - y of control 2
 * @param  {number} x - x of path point
 * @param  {number} y - y of path point
 */

/**
 * Draws cubic curve
 * @function
 * bezierCurveTo
 * @memberof opentype.Path.prototype
 * @param  {number} x1 - x of control 1
 * @param  {number} y1 - y of control 1
 * @param  {number} x2 - x of control 2
 * @param  {number} y2 - y of control 2
 * @param  {number} x - x of path point
 * @param  {number} y - y of path point
 * @see curveTo
 */
Path.prototype.curveTo = Path.prototype.bezierCurveTo = function(x1, y1, x2, y2, x, y) {
    this.commands.push({
        type: 'C',
        x1: x1,
        y1: y1,
        x2: x2,
        y2: y2,
        x: x,
        y: y
    });
};

/**
 * Draws quadratic curve
 * @function
 * quadraticCurveTo
 * @memberof opentype.Path.prototype
 * @param  {number} x1 - x of control
 * @param  {number} y1 - y of control
 * @param  {number} x - x of path point
 * @param  {number} y - y of path point
 */

/**
 * Draws quadratic curve
 * @function
 * quadTo
 * @memberof opentype.Path.prototype
 * @param  {number} x1 - x of control
 * @param  {number} y1 - y of control
 * @param  {number} x - x of path point
 * @param  {number} y - y of path point
 */
Path.prototype.quadTo = Path.prototype.quadraticCurveTo = function(x1, y1, x, y) {
    this.commands.push({
        type: 'Q',
        x1: x1,
        y1: y1,
        x: x,
        y: y
    });
};

/**
 * Closes the path
 * @function closePath
 * @memberof opentype.Path.prototype
 */

/**
 * Close the path
 * @function close
 * @memberof opentype.Path.prototype
 */
Path.prototype.close = Path.prototype.closePath = function() {
    this.commands.push({
        type: 'Z'
    });
};

/**
 * Add the given path or list of commands to the commands of this path.
 * @param  {Array} pathOrCommands - another opentype.Path, an opentype.BoundingBox, or an array of commands.
 */
Path.prototype.extend = function(pathOrCommands) {
    if (pathOrCommands.commands) {
        pathOrCommands = pathOrCommands.commands;
    } else if (pathOrCommands instanceof BoundingBox) {
        const box = pathOrCommands;
        this.moveTo(box.x1, box.y1);
        this.lineTo(box.x2, box.y1);
        this.lineTo(box.x2, box.y2);
        this.lineTo(box.x1, box.y2);
        this.close();
        return;
    }

    Array.prototype.push.apply(this.commands, pathOrCommands);
};

/**
 * Calculate the bounding box of the path.
 * @returns {opentype.BoundingBox}
 */
Path.prototype.getBoundingBox = function() {
    const box = new BoundingBox();

    let startX = 0;
    let startY = 0;
    let prevX = 0;
    let prevY = 0;
    for (let i = 0; i < this.commands.length; i++) {
        const cmd = this.commands[i];
        switch (cmd.type) {
            case 'M':
                box.addPoint(cmd.x, cmd.y);
                startX = prevX = cmd.x;
                startY = prevY = cmd.y;
                break;
            case 'L':
                box.addPoint(cmd.x, cmd.y);
                prevX = cmd.x;
                prevY = cmd.y;
                break;
            case 'Q':
                box.addQuad(prevX, prevY, cmd.x1, cmd.y1, cmd.x, cmd.y);
                prevX = cmd.x;
                prevY = cmd.y;
                break;
            case 'C':
                box.addBezier(prevX, prevY, cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
                prevX = cmd.x;
                prevY = cmd.y;
                break;
            case 'Z':
                prevX = startX;
                prevY = startY;
                break;
            default:
                throw new Error('Unexpected path command ' + cmd.type);
        }
    }
    if (box.isEmpty()) {
        box.addPoint(0, 0);
    }
    return box;
};

/**
 * Draw the path to a 2D context.
 * @param {CanvasRenderingContext2D} ctx - A 2D drawing context.
 */
Path.prototype.draw = function(ctx) {
    ctx.beginPath();
    for (let i = 0; i < this.commands.length; i += 1) {
        const cmd = this.commands[i];
        if (cmd.type === 'M') {
            ctx.moveTo(cmd.x, cmd.y);
        } else if (cmd.type === 'L') {
            ctx.lineTo(cmd.x, cmd.y);
        } else if (cmd.type === 'C') {
            ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
        } else if (cmd.type === 'Q') {
            ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);
        } else if (cmd.type === 'Z') {
            ctx.closePath();
        }
    }

    if (this.fill) {
        ctx.fillStyle = this.fill;
        ctx.fill();
    }

    if (this.stroke) {
        ctx.strokeStyle = this.stroke;
        ctx.lineWidth = this.strokeWidth;
        ctx.stroke();
    }
};

/**
 * Convert the Path to a string of path data instructions
 * See http://www.w3.org/TR/SVG/paths.html#PathData
 * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values
 * @return {string}
 */
Path.prototype.toPathData = function(decimalPlaces) {
    decimalPlaces = decimalPlaces !== undefined ? decimalPlaces : 2;

    function floatToString(v) {
        if (Math.round(v) === v) {
            return '' + Math.round(v);
        } else {
            return v.toFixed(decimalPlaces);
        }
    }

    function packValues() {
        let s = '';
        for (let i = 0; i < arguments.length; i += 1) {
            const v = arguments[i];
            if (v >= 0 && i > 0) {
                s += ' ';
            }

            s += floatToString(v);
        }

        return s;
    }

    let d = '';
    for (let i = 0; i < this.commands.length; i += 1) {
        const cmd = this.commands[i];
        if (cmd.type === 'M') {
            d += 'M' + packValues(cmd.x, cmd.y);
        } else if (cmd.type === 'L') {
            d += 'L' + packValues(cmd.x, cmd.y);
        } else if (cmd.type === 'C') {
            d += 'C' + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
        } else if (cmd.type === 'Q') {
            d += 'Q' + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);
        } else if (cmd.type === 'Z') {
            d += 'Z';
        }
    }

    return d;
};

/**
 * Convert the path to an SVG <path> element, as a string.
 * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values
 * @return {string}
 */
Path.prototype.toSVG = function(decimalPlaces) {
    let svg = '<path d="';
    svg += this.toPathData(decimalPlaces);
    svg += '"';
    if (this.fill && this.fill !== 'black') {
        if (this.fill === null) {
            svg += ' fill="none"';
        } else {
            svg += ' fill="' + this.fill + '"';
        }
    }

    if (this.stroke) {
        svg += ' stroke="' + this.stroke + '" stroke-width="' + this.strokeWidth + '"';
    }

    svg += '/>';
    return svg;
};

/**
 * Convert the path to a DOM element.
 * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values
 * @return {SVGPathElement}
 */
Path.prototype.toDOMElement = function(decimalPlaces) {
    const temporaryPath = this.toPathData(decimalPlaces);
    const newPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');

    newPath.setAttribute('d', temporaryPath);

    return newPath;
};

// Run-time checking of preconditions.

function fail(message) {
    throw new Error(message);
}

// Precondition function that checks if the given predicate is true.
// If not, it will throw an error.
function argument(predicate, message) {
    if (!predicate) {
        fail(message);
    }
}
var check = { fail, argument, assert: argument };

// Data types used in the OpenType font file.

const LIMIT16 = 32768; // The limit at which a 16-bit number switches signs == 2^15
const LIMIT32 = 2147483648; // The limit at which a 32-bit number switches signs == 2 ^ 31

/**
 * @exports opentype.decode
 * @class
 */
const decode = {};
/**
 * @exports opentype.encode
 * @class
 */
const encode = {};
/**
 * @exports opentype.sizeOf
 * @class
 */
const sizeOf = {};

// Return a function that always returns the same value.
function constant(v) {
    return function() {
        return v;
    };
}

// OpenType data types //////////////////////////////////////////////////////

/**
 * Convert an 8-bit unsigned integer to a list of 1 byte.
 * @param {number}
 * @returns {Array}
 */
encode.BYTE = function(v) {
    check.argument(v >= 0 && v <= 255, 'Byte value should be between 0 and 255.');
    return [v];
};
/**
 * @constant
 * @type {number}
 */
sizeOf.BYTE = constant(1);

/**
 * Convert a 8-bit signed integer to a list of 1 byte.
 * @param {string}
 * @returns {Array}
 */
encode.CHAR = function(v) {
    return [v.charCodeAt(0)];
};

/**
 * @constant
 * @type {number}
 */
sizeOf.CHAR = constant(1);

/**
 * Convert an ASCII string to a list of bytes.
 * @param {string}
 * @returns {Array}
 */
encode.CHARARRAY = function(v) {
    const b = [];
    for (let i = 0; i < v.length; i += 1) {
        b[i] = v.charCodeAt(i);
    }

    return b;
};

/**
 * @param {Array}
 * @returns {number}
 */
sizeOf.CHARARRAY = function(v) {
    return v.length;
};

/**
 * Convert a 16-bit unsigned integer to a list of 2 bytes.
 * @param {number}
 * @returns {Array}
 */
encode.USHORT = function(v) {
    return [(v >> 8) & 0xFF, v & 0xFF];
};

/**
 * @constant
 * @type {number}
 */
sizeOf.USHORT = constant(2);

/**
 * Convert a 16-bit signed integer to a list of 2 bytes.
 * @param {number}
 * @returns {Array}
 */
encode.SHORT = function(v) {
    // Two's complement
    if (v >= LIMIT16) {
        v = -(2 * LIMIT16 - v);
    }

    return [(v >> 8) & 0xFF, v & 0xFF];
};

/**
 * @constant
 * @type {number}
 */
sizeOf.SHORT = constant(2);

/**
 * Convert a 24-bit unsigned integer to a list of 3 bytes.
 * @param {number}
 * @returns {Array}
 */
encode.UINT24 = function(v) {
    return [(v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
};

/**
 * @constant
 * @type {number}
 */
sizeOf.UINT24 = constant(3);

/**
 * Convert a 32-bit unsigned integer to a list of 4 bytes.
 * @param {number}
 * @returns {Array}
 */
encode.ULONG = function(v) {
    return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
};

/**
 * @constant
 * @type {number}
 */
sizeOf.ULONG = constant(4);

/**
 * Convert a 32-bit unsigned integer to a list of 4 bytes.
 * @param {number}
 * @returns {Array}
 */
encode.LONG = function(v) {
    // Two's complement
    if (v >= LIMIT32) {
        v = -(2 * LIMIT32 - v);
    }

    return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
};

/**
 * @constant
 * @type {number}
 */
sizeOf.LONG = constant(4);

encode.FIXED = encode.ULONG;
sizeOf.FIXED = sizeOf.ULONG;

encode.FWORD = encode.SHORT;
sizeOf.FWORD = sizeOf.SHORT;

encode.UFWORD = encode.USHORT;
sizeOf.UFWORD = sizeOf.USHORT;

/**
 * Convert a 32-bit Apple Mac timestamp integer to a list of 8 bytes, 64-bit timestamp.
 * @param {number}
 * @returns {Array}
 */
encode.LONGDATETIME = function(v) {
    return [0, 0, 0, 0, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
};

/**
 * @constant
 * @type {number}
 */
sizeOf.LONGDATETIME = constant(8);

/**
 * Convert a 4-char tag to a list of 4 bytes.
 * @param {string}
 * @returns {Array}
 */
encode.TAG = function(v) {
    check.argument(v.length === 4, 'Tag should be exactly 4 ASCII characters.');
    return [v.charCodeAt(0),
            v.charCodeAt(1),
            v.charCodeAt(2),
            v.charCodeAt(3)];
};

/**
 * @constant
 * @type {number}
 */
sizeOf.TAG = constant(4);

// CFF data types ///////////////////////////////////////////////////////////

encode.Card8 = encode.BYTE;
sizeOf.Card8 = sizeOf.BYTE;

encode.Card16 = encode.USHORT;
sizeOf.Card16 = sizeOf.USHORT;

encode.OffSize = encode.BYTE;
sizeOf.OffSize = sizeOf.BYTE;

encode.SID = encode.USHORT;
sizeOf.SID = sizeOf.USHORT;

// Convert a numeric operand or charstring number to a variable-size list of bytes.
/**
 * Convert a numeric operand or charstring number to a variable-size list of bytes.
 * @param {number}
 * @returns {Array}
 */
encode.NUMBER = function(v) {
    if (v >= -107 && v <= 107) {
        return [v + 139];
    } else if (v >= 108 && v <= 1131) {
        v = v - 108;
        return [(v >> 8) + 247, v & 0xFF];
    } else if (v >= -1131 && v <= -108) {
        v = -v - 108;
        return [(v >> 8) + 251, v & 0xFF];
    } else if (v >= -32768 && v <= 32767) {
        return encode.NUMBER16(v);
    } else {
        return encode.NUMBER32(v);
    }
};

/**
 * @param {number}
 * @returns {number}
 */
sizeOf.NUMBER = function(v) {
    return encode.NUMBER(v).length;
};

/**
 * Convert a signed number between -32768 and +32767 to a three-byte value.
 * This ensures we always use three bytes, but is not the most compact format.
 * @param {number}
 * @returns {Array}
 */
encode.NUMBER16 = function(v) {
    return [28, (v >> 8) & 0xFF, v & 0xFF];
};

/**
 * @constant
 * @type {number}
 */
sizeOf.NUMBER16 = constant(3);

/**
 * Convert a signed number between -(2^31) and +(2^31-1) to a five-byte value.
 * This is useful if you want to be sure you always use four bytes,
 * at the expense of wasting a few bytes for smaller numbers.
 * @param {number}
 * @returns {Array}
 */
encode.NUMBER32 = function(v) {
    return [29, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
};

/**
 * @constant
 * @type {number}
 */
sizeOf.NUMBER32 = constant(5);

/**
 * @param {number}
 * @returns {Array}
 */
encode.REAL = function(v) {
    let value = v.toString();

    // Some numbers use an epsilon to encode the value. (e.g. JavaScript will store 0.0000001 as 1e-7)
    // This code converts it back to a number without the epsilon.
    const m = /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(value);
    if (m) {
        const epsilon = parseFloat('1e' + ((m[2] ? +m[2] : 0) + m[1].length));
        value = (Math.round(v * epsilon) / epsilon).toString();
    }

    let nibbles = '';
    for (let i = 0, ii = value.length; i < ii; i += 1) {
        const c = value[i];
        if (c === 'e') {
            nibbles += value[++i] === '-' ? 'c' : 'b';
        } else if (c === '.') {
            nibbles += 'a';
        } else if (c === '-') {
            nibbles += 'e';
        } else {
            nibbles += c;
        }
    }

    nibbles += (nibbles.length & 1) ? 'f' : 'ff';
    const out = [30];
    for (let i = 0, ii = nibbles.length; i < ii; i += 2) {
        out.push(parseInt(nibbles.substr(i, 2), 16));
    }

    return out;
};

/**
 * @param {number}
 * @returns {number}
 */
sizeOf.REAL = function(v) {
    return encode.REAL(v).length;
};

encode.NAME = encode.CHARARRAY;
sizeOf.NAME = sizeOf.CHARARRAY;

encode.STRING = encode.CHARARRAY;
sizeOf.STRING = sizeOf.CHARARRAY;

/**
 * @param {DataView} data
 * @param {number} offset
 * @param {number} numBytes
 * @returns {string}
 */
decode.UTF8 = function(data, offset, numBytes) {
    const codePoints = [];
    const numChars = numBytes;
    for (let j = 0; j < numChars; j++, offset += 1) {
        codePoints[j] = data.getUint8(offset);
    }

    return String.fromCharCode.apply(null, codePoints);
};

/**
 * @param {DataView} data
 * @param {number} offset
 * @param {number} numBytes
 * @returns {string}
 */
decode.UTF16 = function(data, offset, numBytes) {
    const codePoints = [];
    const numChars = numBytes / 2;
    for (let j = 0; j < numChars; j++, offset += 2) {
        codePoints[j] = data.getUint16(offset);
    }

    return String.fromCharCode.apply(null, codePoints);
};

/**
 * Convert a JavaScript string to UTF16-BE.
 * @param {string}
 * @returns {Array}
 */
encode.UTF16 = function(v) {
    const b = [];
    for (let i = 0; i < v.length; i += 1) {
        const codepoint = v.charCodeAt(i);
        b[b.length] = (codepoint >> 8) & 0xFF;
        b[b.length] = codepoint & 0xFF;
    }

    return b;
};

/**
 * @param {string}
 * @returns {number}
 */
sizeOf.UTF16 = function(v) {
    return v.length * 2;
};

// Data for converting old eight-bit Macintosh encodings to Unicode.
// This representation is optimized for decoding; encoding is slower
// and needs more memory. The assumption is that all opentype.js users
// want to open fonts, but saving a font will be comparatively rare
// so it can be more expensive. Keyed by IANA character set name.
//
// Python script for generating these strings:
//
//     s = u''.join([chr(c).decode('mac_greek') for c in range(128, 256)])
//     print(s.encode('utf-8'))
/**
 * @private
 */
const eightBitMacEncodings = {
    'x-mac-croatian':  // Python: 'mac_croatian'
    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø' +
    '¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ',
    'x-mac-cyrillic':  // Python: 'mac_cyrillic'
    'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњ' +
    'јЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю',
    'x-mac-gaelic': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/GAELIC.TXT
    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæø' +
    'ṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ',
    'x-mac-greek':  // Python: 'mac_greek'
    'Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩ' +
    'άΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\u00AD',
    'x-mac-icelandic':  // Python: 'mac_iceland'
    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +
    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
    'x-mac-inuit': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/INUIT.TXT
    'ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗ' +
    'ᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł',
    'x-mac-ce':  // Python: 'mac_latin2'
    'ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅ' +
    'ņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ',
    macintosh:  // Python: 'mac_roman'
    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +
    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
    'x-mac-romanian':  // Python: 'mac_romanian'
    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș' +
    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
    'x-mac-turkish':  // Python: 'mac_turkish'
    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +
    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ'
};

/**
 * Decodes an old-style Macintosh string. Returns either a Unicode JavaScript
 * string, or 'undefined' if the encoding is unsupported. For example, we do
 * not support Chinese, Japanese or Korean because these would need large
 * mapping tables.
 * @param {DataView} dataView
 * @param {number} offset
 * @param {number} dataLength
 * @param {string} encoding
 * @returns {string}
 */
decode.MACSTRING = function(dataView, offset, dataLength, encoding) {
    const table = eightBitMacEncodings[encoding];
    if (table === undefined) {
        return undefined;
    }

    let result = '';
    for (let i = 0; i < dataLength; i++) {
        const c = dataView.getUint8(offset + i);
        // In all eight-bit Mac encodings, the characters 0x00..0x7F are
        // mapped to U+0000..U+007F; we only need to look up the others.
        if (c <= 0x7F) {
            result += String.fromCharCode(c);
        } else {
            result += table[c & 0x7F];
        }
    }

    return result;
};

// Helper function for encode.MACSTRING. Returns a dictionary for mapping
// Unicode character codes to their 8-bit MacOS equivalent. This table
// is not exactly a super cheap data structure, but we do not care because
// encoding Macintosh strings is only rarely needed in typical applications.
const macEncodingTableCache = typeof WeakMap === 'function' && new WeakMap();
let macEncodingCacheKeys;
const getMacEncodingTable = function (encoding) {
    // Since we use encoding as a cache key for WeakMap, it has to be
    // a String object and not a literal. And at least on NodeJS 2.10.1,
    // WeakMap requires that the same String instance is passed for cache hits.
    if (!macEncodingCacheKeys) {
        macEncodingCacheKeys = {};
        for (let e in eightBitMacEncodings) {
            /*jshint -W053 */  // Suppress "Do not use String as a constructor."
            macEncodingCacheKeys[e] = new String(e);
        }
    }

    const cacheKey = macEncodingCacheKeys[encoding];
    if (cacheKey === undefined) {
        return undefined;
    }

    // We can't do "if (cache.has(key)) {return cache.get(key)}" here:
    // since garbage collection may run at any time, it could also kick in
    // between the calls to cache.has() and cache.get(). In that case,
    // we would return 'undefined' even though we do support the encoding.
    if (macEncodingTableCache) {
        const cachedTable = macEncodingTableCache.get(cacheKey);
        if (cachedTable !== undefined) {
            return cachedTable;
        }
    }

    const decodingTable = eightBitMacEncodings[encoding];
    if (decodingTable === undefined) {
        return undefined;
    }

    const encodingTable = {};
    for (let i = 0; i < decodingTable.length; i++) {
        encodingTable[decodingTable.charCodeAt(i)] = i + 0x80;
    }

    if (macEncodingTableCache) {
        macEncodingTableCache.set(cacheKey, encodingTable);
    }

    return encodingTable;
};

/**
 * Encodes an old-style Macintosh string. Returns a byte array upon success.
 * If the requested encoding is unsupported, or if the input string contains
 * a character that cannot be expressed in the encoding, the function returns
 * 'undefined'.
 * @param {string} str
 * @param {string} encoding
 * @returns {Array}
 */
encode.MACSTRING = function(str, encoding) {
    const table = getMacEncodingTable(encoding);
    if (table === undefined) {
        return undefined;
    }

    const result = [];
    for (let i = 0; i < str.length; i++) {
        let c = str.charCodeAt(i);

        // In all eight-bit Mac encodings, the characters 0x00..0x7F are
        // mapped to U+0000..U+007F; we only need to look up the others.
        if (c >= 0x80) {
            c = table[c];
            if (c === undefined) {
                // str contains a Unicode character that cannot be encoded
                // in the requested encoding.
                return undefined;
            }
        }
        result[i] = c;
        // result.push(c);
    }

    return result;
};

/**
 * @param {string} str
 * @param {string} encoding
 * @returns {number}
 */
sizeOf.MACSTRING = function(str, encoding) {
    const b = encode.MACSTRING(str, encoding);
    if (b !== undefined) {
        return b.length;
    } else {
        return 0;
    }
};

// Helper for encode.VARDELTAS
function isByteEncodable(value) {
    return value >= -128 && value <= 127;
}

// Helper for encode.VARDELTAS
function encodeVarDeltaRunAsZeroes(deltas, pos, result) {
    let runLength = 0;
    const numDeltas = deltas.length;
    while (pos < numDeltas && runLength < 64 && deltas[pos] === 0) {
        ++pos;
        ++runLength;
    }
    result.push(0x80 | (runLength - 1));
    return pos;
}

// Helper for encode.VARDELTAS
function encodeVarDeltaRunAsBytes(deltas, offset, result) {
    let runLength = 0;
    const numDeltas = deltas.length;
    let pos = offset;
    while (pos < numDeltas && runLength < 64) {
        const value = deltas[pos];
        if (!isByteEncodable(value)) {
            break;
        }

        // Within a byte-encoded run of deltas, a single zero is best
        // stored literally as 0x00 value. However, if we have two or
        // more zeroes in a sequence, it is better to start a new run.
        // Fore example, the sequence of deltas [15, 15, 0, 15, 15]
        // becomes 6 bytes (04 0F 0F 00 0F 0F) when storing the zero
        // within the current run, but 7 bytes (01 0F 0F 80 01 0F 0F)
        // when starting a new run.
        if (value === 0 && pos + 1 < numDeltas && deltas[pos + 1] === 0) {
            break;
        }

        ++pos;
        ++runLength;
    }
    result.push(runLength - 1);
    for (let i = offset; i < pos; ++i) {
        result.push((deltas[i] + 256) & 0xff);
    }
    return pos;
}

// Helper for encode.VARDELTAS
function encodeVarDeltaRunAsWords(deltas, offset, result) {
    let runLength = 0;
    const numDeltas = deltas.length;
    let pos = offset;
    while (pos < numDeltas && runLength < 64) {
        const value = deltas[pos];

        // Within a word-encoded run of deltas, it is easiest to start
        // a new run (with a different encoding) whenever we encounter
        // a zero value. For example, the sequence [0x6666, 0, 0x7777]
        // needs 7 bytes when storing the zero inside the current run
        // (42 66 66 00 00 77 77), and equally 7 bytes when starting a
        // new run (40 66 66 80 40 77 77).
        if (value === 0) {
            break;
        }

        // Within a word-encoded run of deltas, a single value in the
        // range (-128..127) should be encoded within the current run
        // because it is more compact. For example, the sequence
        // [0x6666, 2, 0x7777] becomes 7 bytes when storing the value
        // literally (42 66 66 00 02 77 77), but 8 bytes when starting
        // a new run (40 66 66 00 02 40 77 77).
        if (isByteEncodable(value) && pos + 1 < numDeltas && isByteEncodable(deltas[pos + 1])) {
            break;
        }

        ++pos;
        ++runLength;
    }
    result.push(0x40 | (runLength - 1));
    for (let i = offset; i < pos; ++i) {
        const val = deltas[i];
        result.push(((val + 0x10000) >> 8) & 0xff, (val + 0x100) & 0xff);
    }
    return pos;
}

/**
 * Encode a list of variation adjustment deltas.
 *
 * Variation adjustment deltas are used in ‘gvar’ and ‘cvar’ tables.
 * They indicate how points (in ‘gvar’) or values (in ‘cvar’) get adjusted
 * when generating instances of variation fonts.
 *
 * @see https://www.microsoft.com/typography/otspec/gvar.htm
 * @see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6gvar.html
 * @param {Array}
 * @return {Array}
 */
encode.VARDELTAS = function(deltas) {
    let pos = 0;
    const result = [];
    while (pos < deltas.length) {
        const value = deltas[pos];
        if (value === 0) {
            pos = encodeVarDeltaRunAsZeroes(deltas, pos, result);
        } else if (value >= -128 && value <= 127) {
            pos = encodeVarDeltaRunAsBytes(deltas, pos, result);
        } else {
            pos = encodeVarDeltaRunAsWords(deltas, pos, result);
        }
    }
    return result;
};

// Convert a list of values to a CFF INDEX structure.
// The values should be objects containing name / type / value.
/**
 * @param {Array} l
 * @returns {Array}
 */
encode.INDEX = function(l) {
    //var offset, offsets, offsetEncoder, encodedOffsets, encodedOffset, data,
    //    i, v;
    // Because we have to know which data type to use to encode the offsets,
    // we have to go through the values twice: once to encode the data and
    // calculate the offsets, then again to encode the offsets using the fitting data type.
    let offset = 1; // First offset is always 1.
    const offsets = [offset];
    const data = [];
    for (let i = 0; i < l.length; i += 1) {
        const v = encode.OBJECT(l[i]);
        Array.prototype.push.apply(data, v);
        offset += v.length;
        offsets.push(offset);
    }

    if (data.length === 0) {
        return [0, 0];
    }

    const encodedOffsets = [];
    const offSize = (1 + Math.floor(Math.log(offset) / Math.log(2)) / 8) | 0;
    const offsetEncoder = [undefined, encode.BYTE, encode.USHORT, encode.UINT24, encode.ULONG][offSize];
    for (let i = 0; i < offsets.length; i += 1) {
        const encodedOffset = offsetEncoder(offsets[i]);
        Array.prototype.push.apply(encodedOffsets, encodedOffset);
    }

    return Array.prototype.concat(encode.Card16(l.length),
                           encode.OffSize(offSize),
                           encodedOffsets,
                           data);
};

/**
 * @param {Array}
 * @returns {number}
 */
sizeOf.INDEX = function(v) {
    return encode.INDEX(v).length;
};

/**
 * Convert an object to a CFF DICT structure.
 * The keys should be numeric.
 * The values should be objects containing name / type / value.
 * @param {Object} m
 * @returns {Array}
 */
encode.DICT = function(m) {
    let d = [];
    const keys = Object.keys(m);
    const length = keys.length;

    for (let i = 0; i < length; i += 1) {
        // Object.keys() return string keys, but our keys are always numeric.
        const k = parseInt(keys[i], 0);
        const v = m[k];
        // Value comes before the key.
        d = d.concat(encode.OPERAND(v.value, v.type));
        d = d.concat(encode.OPERATOR(k));
    }

    return d;
};

/**
 * @param {Object}
 * @returns {number}
 */
sizeOf.DICT = function(m) {
    return encode.DICT(m).length;
};

/**
 * @param {number}
 * @returns {Array}
 */
encode.OPERATOR = function(v) {
    if (v < 1200) {
        return [v];
    } else {
        return [12, v - 1200];
    }
};

/**
 * @param {Array} v
 * @param {string}
 * @returns {Array}
 */
encode.OPERAND = function(v, type) {
    let d = [];
    if (Array.isArray(type)) {
        for (let i = 0; i < type.length; i += 1) {
            check.argument(v.length === type.length, 'Not enough arguments given for type' + type);
            d = d.concat(encode.OPERAND(v[i], type[i]));
        }
    } else {
        if (type === 'SID') {
            d = d.concat(encode.NUMBER(v));
        } else if (type === 'offset') {
            // We make it easy for ourselves and always encode offsets as
            // 4 bytes. This makes offset calculation for the top dict easier.
            d = d.concat(encode.NUMBER32(v));
        } else if (type === 'number') {
            d = d.concat(encode.NUMBER(v));
        } else if (type === 'real') {
            d = d.concat(encode.REAL(v));
        } else {
            throw new Error('Unknown operand type ' + type);
            // FIXME Add support for booleans
        }
    }

    return d;
};

encode.OP = encode.BYTE;
sizeOf.OP = sizeOf.BYTE;

// memoize charstring encoding using WeakMap if available
const wmm = typeof WeakMap === 'function' && new WeakMap();

/**
 * Convert a list of CharString operations to bytes.
 * @param {Array}
 * @returns {Array}
 */
encode.CHARSTRING = function(ops) {
    // See encode.MACSTRING for why we don't do "if (wmm && wmm.has(ops))".
    if (wmm) {
        const cachedValue = wmm.get(ops);
        if (cachedValue !== undefined) {
            return cachedValue;
        }
    }

    let d = [];
    const length = ops.length;

    for (let i = 0; i < length; i += 1) {
        const op = ops[i];
        d = d.concat(encode[op.type](op.value));
    }

    if (wmm) {
        wmm.set(ops, d);
    }

    return d;
};

/**
 * @param {Array}
 * @returns {number}
 */
sizeOf.CHARSTRING = function(ops) {
    return encode.CHARSTRING(ops).length;
};

// Utility functions ////////////////////////////////////////////////////////

/**
 * Convert an object containing name / type / value to bytes.
 * @param {Object}
 * @returns {Array}
 */
encode.OBJECT = function(v) {
    const encodingFunction = encode[v.type];
    check.argument(encodingFunction !== undefined, 'No encoding function for type ' + v.type);
    return encodingFunction(v.value);
};

/**
 * @param {Object}
 * @returns {number}
 */
sizeOf.OBJECT = function(v) {
    const sizeOfFunction = sizeOf[v.type];
    check.argument(sizeOfFunction !== undefined, 'No sizeOf function for type ' + v.type);
    return sizeOfFunction(v.value);
};

/**
 * Convert a table object to bytes.
 * A table contains a list of fields containing the metadata (name, type and default value).
 * The table itself has the field values set as attributes.
 * @param {opentype.Table}
 * @returns {Array}
 */
encode.TABLE = function(table) {
    let d = [];
    const length = table.fields.length;
    const subtables = [];
    const subtableOffsets = [];

    for (let i = 0; i < length; i += 1) {
        const field = table.fields[i];
        const encodingFunction = encode[field.type];
        check.argument(encodingFunction !== undefined, 'No encoding function for field type ' + field.type + ' (' + field.name + ')');
        let value = table[field.name];
        if (value === undefined) {
            value = field.value;
        }

        const bytes = encodingFunction(value);

        if (field.type === 'TABLE') {
            subtableOffsets.push(d.length);
            d = d.concat([0, 0]);
            subtables.push(bytes);
        } else {
            d = d.concat(bytes);
        }
    }

    for (let i = 0; i < subtables.length; i += 1) {
        const o = subtableOffsets[i];
        const offset = d.length;
        check.argument(offset < 65536, 'Table ' + table.tableName + ' too big.');
        d[o] = offset >> 8;
        d[o + 1] = offset & 0xff;
        d = d.concat(subtables[i]);
    }

    return d;
};

/**
 * @param {opentype.Table}
 * @returns {number}
 */
sizeOf.TABLE = function(table) {
    let numBytes = 0;
    const length = table.fields.length;

    for (let i = 0; i < length; i += 1) {
        const field = table.fields[i];
        const sizeOfFunction = sizeOf[field.type];
        check.argument(sizeOfFunction !== undefined, 'No sizeOf function for field type ' + field.type + ' (' + field.name + ')');
        let value = table[field.name];
        if (value === undefined) {
            value = field.value;
        }

        numBytes += sizeOfFunction(value);

        // Subtables take 2 more bytes for offsets.
        if (field.type === 'TABLE') {
            numBytes += 2;
        }
    }

    return numBytes;
};

encode.RECORD = encode.TABLE;
sizeOf.RECORD = sizeOf.TABLE;

// Merge in a list of bytes.
encode.LITERAL = function(v) {
    return v;
};

sizeOf.LITERAL = function(v) {
    return v.length;
};

// Table metadata

/**
 * @exports opentype.Table
 * @class
 * @param {string} tableName
 * @param {Array} fields
 * @param {Object} options
 * @constructor
 */
function Table(tableName, fields, options) {
    for (let i = 0; i < fields.length; i += 1) {
        const field = fields[i];
        this[field.name] = field.value;
    }

    this.tableName = tableName;
    this.fields = fields;
    if (options) {
        const optionKeys = Object.keys(options);
        for (let i = 0; i < optionKeys.length; i += 1) {
            const k = optionKeys[i];
            const v = options[k];
            if (this[k] !== undefined) {
                this[k] = v;
            }
        }
    }
}

/**
 * Encodes the table and returns an array of bytes
 * @return {Array}
 */
Table.prototype.encode = function() {
    return encode.TABLE(this);
};

/**
 * Get the size of the table.
 * @return {number}
 */
Table.prototype.sizeOf = function() {
    return sizeOf.TABLE(this);
};

/**
 * @private
 */
function ushortList(itemName, list, count) {
    if (count === undefined) {
        count = list.length;
    }
    const fields = new Array(list.length + 1);
    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};
    for (let i = 0; i < list.length; i++) {
        fields[i + 1] = {name: itemName + i, type: 'USHORT', value: list[i]};
    }
    return fields;
}

/**
 * @private
 */
function tableList(itemName, records, itemCallback) {
    const count = records.length;
    const fields = new Array(count + 1);
    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};
    for (let i = 0; i < count; i++) {
        fields[i + 1] = {name: itemName + i, type: 'TABLE', value: itemCallback(records[i], i)};
    }
    return fields;
}

/**
 * @private
 */
function recordList(itemName, records, itemCallback) {
    const count = records.length;
    let fields = [];
    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};
    for (let i = 0; i < count; i++) {
        fields = fields.concat(itemCallback(records[i], i));
    }
    return fields;
}

// Common Layout Tables

/**
 * @exports opentype.Coverage
 * @class
 * @param {opentype.Table}
 * @constructor
 * @extends opentype.Table
 */
function Coverage(coverageTable) {
    if (coverageTable.format === 1) {
        Table.call(this, 'coverageTable',
            [{name: 'coverageFormat', type: 'USHORT', value: 1}]
            .concat(ushortList('glyph', coverageTable.glyphs))
        );
    } else {
        check.assert(false, 'Can\'t create coverage table format 2 yet.');
    }
}
Coverage.prototype = Object.create(Table.prototype);
Coverage.prototype.constructor = Coverage;

function ScriptList(scriptListTable) {
    Table.call(this, 'scriptListTable',
        recordList('scriptRecord', scriptListTable, function(scriptRecord, i) {
            const script = scriptRecord.script;
            let defaultLangSys = script.defaultLangSys;
            check.assert(!!defaultLangSys, 'Unable to write GSUB: script ' + scriptRecord.tag + ' has no default language system.');
            return [
                {name: 'scriptTag' + i, type: 'TAG', value: scriptRecord.tag},
                {name: 'script' + i, type: 'TABLE', value: new Table('scriptTable', [
                    {name: 'defaultLangSys', type: 'TABLE', value: new Table('defaultLangSys', [
                        {name: 'lookupOrder', type: 'USHORT', value: 0},
                        {name: 'reqFeatureIndex', type: 'USHORT', value: defaultLangSys.reqFeatureIndex}]
                        .concat(ushortList('featureIndex', defaultLangSys.featureIndexes)))}
                    ].concat(recordList('langSys', script.langSysRecords, function(langSysRecord, i) {
                        const langSys = langSysRecord.langSys;
                        return [
                            {name: 'langSysTag' + i, type: 'TAG', value: langSysRecord.tag},
                            {name: 'langSys' + i, type: 'TABLE', value: new Table('langSys', [
                                {name: 'lookupOrder', type: 'USHORT', value: 0},
                                {name: 'reqFeatureIndex', type: 'USHORT', value: langSys.reqFeatureIndex}
                                ].concat(ushortList('featureIndex', langSys.featureIndexes)))}
                        ];
                    })))}
            ];
        })
    );
}
ScriptList.prototype = Object.create(Table.prototype);
ScriptList.prototype.constructor = ScriptList;

/**
 * @exports opentype.FeatureList
 * @class
 * @param {opentype.Table}
 * @constructor
 * @extends opentype.Table
 */
function FeatureList(featureListTable) {
    Table.call(this, 'featureListTable',
        recordList('featureRecord', featureListTable, function(featureRecord, i) {
            const feature = featureRecord.feature;
            return [
                {name: 'featureTag' + i, type: 'TAG', value: featureRecord.tag},
                {name: 'feature' + i, type: 'TABLE', value: new Table('featureTable', [
                    {name: 'featureParams', type: 'USHORT', value: feature.featureParams},
                    ].concat(ushortList('lookupListIndex', feature.lookupListIndexes)))}
            ];
        })
    );
}
FeatureList.prototype = Object.create(Table.prototype);
FeatureList.prototype.constructor = FeatureList;

/**
 * @exports opentype.LookupList
 * @class
 * @param {opentype.Table}
 * @param {Object}
 * @constructor
 * @extends opentype.Table
 */
function LookupList(lookupListTable, subtableMakers) {
    Table.call(this, 'lookupListTable', tableList('lookup', lookupListTable, function(lookupTable) {
        let subtableCallback = subtableMakers[lookupTable.lookupType];
        check.assert(!!subtableCallback, 'Unable to write GSUB lookup type ' + lookupTable.lookupType + ' tables.');
        return new Table('lookupTable', [
            {name: 'lookupType', type: 'USHORT', value: lookupTable.lookupType},
            {name: 'lookupFlag', type: 'USHORT', value: lookupTable.lookupFlag}
        ].concat(tableList('subtable', lookupTable.subtables, subtableCallback)));
    }));
}
LookupList.prototype = Object.create(Table.prototype);
LookupList.prototype.constructor = LookupList;

// Record = same as Table, but inlined (a Table has an offset and its data is further in the stream)
// Don't use offsets inside Records (probable bug), only in Tables.
var table = {
    Table,
    Record: Table,
    Coverage,
    ScriptList,
    FeatureList,
    LookupList,
    ushortList,
    tableList,
    recordList,
};

// Parsing utility functions

// Retrieve an unsigned byte from the DataView.
function getByte(dataView, offset) {
    return dataView.getUint8(offset);
}

// Retrieve an unsigned 16-bit short from the DataView.
// The value is stored in big endian.
function getUShort(dataView, offset) {
    return dataView.getUint16(offset, false);
}

// Retrieve a signed 16-bit short from the DataView.
// The value is stored in big endian.
function getShort(dataView, offset) {
    return dataView.getInt16(offset, false);
}

// Retrieve an unsigned 32-bit long from the DataView.
// The value is stored in big endian.
function getULong(dataView, offset) {
    return dataView.getUint32(offset, false);
}

// Retrieve a 32-bit signed fixed-point number (16.16) from the DataView.
// The value is stored in big endian.
function getFixed(dataView, offset) {
    const decimal = dataView.getInt16(offset, false);
    const fraction = dataView.getUint16(offset + 2, false);
    return decimal + fraction / 65535;
}

// Retrieve a 4-character tag from the DataView.
// Tags are used to identify tables.
function getTag(dataView, offset) {
    let tag = '';
    for (let i = offset; i < offset + 4; i += 1) {
        tag += String.fromCharCode(dataView.getInt8(i));
    }

    return tag;
}

// Retrieve an offset from the DataView.
// Offsets are 1 to 4 bytes in length, depending on the offSize argument.
function getOffset(dataView, offset, offSize) {
    let v = 0;
    for (let i = 0; i < offSize; i += 1) {
        v <<= 8;
        v += dataView.getUint8(offset + i);
    }

    return v;
}

// Retrieve a number of bytes from start offset to the end offset from the DataView.
function getBytes(dataView, startOffset, endOffset) {
    const bytes = [];
    for (let i = startOffset; i < endOffset; i += 1) {
        bytes.push(dataView.getUint8(i));
    }

    return bytes;
}

// Convert the list of bytes to a string.
function bytesToString(bytes) {
    let s = '';
    for (let i = 0; i < bytes.length; i += 1) {
        s += String.fromCharCode(bytes[i]);
    }

    return s;
}

const typeOffsets = {
    byte: 1,
    uShort: 2,
    short: 2,
    uLong: 4,
    fixed: 4,
    longDateTime: 8,
    tag: 4
};

// A stateful parser that changes the offset whenever a value is retrieved.
// The data is a DataView.
function Parser(data, offset) {
    this.data = data;
    this.offset = offset;
    this.relativeOffset = 0;
}

Parser.prototype.parseByte = function() {
    const v = this.data.getUint8(this.offset + this.relativeOffset);
    this.relativeOffset += 1;
    return v;
};

Parser.prototype.parseChar = function() {
    const v = this.data.getInt8(this.offset + this.relativeOffset);
    this.relativeOffset += 1;
    return v;
};

Parser.prototype.parseCard8 = Parser.prototype.parseByte;

Parser.prototype.parseUShort = function() {
    const v = this.data.getUint16(this.offset + this.relativeOffset);
    this.relativeOffset += 2;
    return v;
};

Parser.prototype.parseCard16 = Parser.prototype.parseUShort;
Parser.prototype.parseSID = Parser.prototype.parseUShort;
Parser.prototype.parseOffset16 = Parser.prototype.parseUShort;

Parser.prototype.parseShort = function() {
    const v = this.data.getInt16(this.offset + this.relativeOffset);
    this.relativeOffset += 2;
    return v;
};

Parser.prototype.parseF2Dot14 = function() {
    const v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;
    this.relativeOffset += 2;
    return v;
};

Parser.prototype.parseULong = function() {
    const v = getULong(this.data, this.offset + this.relativeOffset);
    this.relativeOffset += 4;
    return v;
};

Parser.prototype.parseFixed = function() {
    const v = getFixed(this.data, this.offset + this.relativeOffset);
    this.relativeOffset += 4;
    return v;
};

Parser.prototype.parseString = function(length) {
    const dataView = this.data;
    const offset = this.offset + this.relativeOffset;
    let string = '';
    this.relativeOffset += length;
    for (let i = 0; i < length; i++) {
        string += String.fromCharCode(dataView.getUint8(offset + i));
    }

    return string;
};

Parser.prototype.parseTag = function() {
    return this.parseString(4);
};

// LONGDATETIME is a 64-bit integer.
// JavaScript and unix timestamps traditionally use 32 bits, so we
// only take the last 32 bits.
// + Since until 2038 those bits will be filled by zeros we can ignore them.
Parser.prototype.parseLongDateTime = function() {
    let v = getULong(this.data, this.offset + this.relativeOffset + 4);
    // Subtract seconds between 01/01/1904 and 01/01/1970
    // to convert Apple Mac timestamp to Standard Unix timestamp
    v -= 2082844800;
    this.relativeOffset += 8;
    return v;
};

Parser.prototype.parseVersion = function() {
    const major = getUShort(this.data, this.offset + this.relativeOffset);

    // How to interpret the minor version is very vague in the spec. 0x5000 is 5, 0x1000 is 1
    // This returns the correct number if minor = 0xN000 where N is 0-9
    const minor = getUShort(this.data, this.offset + this.relativeOffset + 2);
    this.relativeOffset += 4;
    return major + minor / 0x1000 / 10;
};

Parser.prototype.skip = function(type, amount) {
    if (amount === undefined) {
        amount = 1;
    }

    this.relativeOffset += typeOffsets[type] * amount;
};

///// Parsing lists and records ///////////////////////////////

// Parse a list of 16 bit unsigned integers. The length of the list can be read on the stream
// or provided as an argument.
Parser.prototype.parseOffset16List =
Parser.prototype.parseUShortList = function(count) {
    if (count === undefined) { count = this.parseUShort(); }
    const offsets = new Array(count);
    const dataView = this.data;
    let offset = this.offset + this.relativeOffset;
    for (let i = 0; i < count; i++) {
        offsets[i] = dataView.getUint16(offset);
        offset += 2;
    }

    this.relativeOffset += count * 2;
    return offsets;
};

// Parses a list of 16 bit signed integers.
Parser.prototype.parseShortList = function(count) {
    const list = new Array(count);
    const dataView = this.data;
    let offset = this.offset + this.relativeOffset;
    for (let i = 0; i < count; i++) {
        list[i] = dataView.getInt16(offset);
        offset += 2;
    }

    this.relativeOffset += count * 2;
    return list;
};

// Parses a list of bytes.
Parser.prototype.parseByteList = function(count) {
    const list = new Array(count);
    const dataView = this.data;
    let offset = this.offset + this.relativeOffset;
    for (let i = 0; i < count; i++) {
        list[i] = dataView.getUint8(offset++);
    }

    this.relativeOffset += count;
    return list;
};

/**
 * Parse a list of items.
 * Record count is optional, if omitted it is read from the stream.
 * itemCallback is one of the Parser methods.
 */
Parser.prototype.parseList = function(count, itemCallback) {
    if (!itemCallback) {
        itemCallback = count;
        count = this.parseUShort();
    }
    const list = new Array(count);
    for (let i = 0; i < count; i++) {
        list[i] = itemCallback.call(this);
    }
    return list;
};

/**
 * Parse a list of records.
 * Record count is optional, if omitted it is read from the stream.
 * Example of recordDescription: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }
 */
Parser.prototype.parseRecordList = function(count, recordDescription) {
    // If the count argument is absent, read it in the stream.
    if (!recordDescription) {
        recordDescription = count;
        count = this.parseUShort();
    }
    const records = new Array(count);
    const fields = Object.keys(recordDescription);
    for (let i = 0; i < count; i++) {
        const rec = {};
        for (let j = 0; j < fields.length; j++) {
            const fieldName = fields[j];
            const fieldType = recordDescription[fieldName];
            rec[fieldName] = fieldType.call(this);
        }
        records[i] = rec;
    }
    return records;
};

// Parse a data structure into an object
// Example of description: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }
Parser.prototype.parseStruct = function(description) {
    if (typeof description === 'function') {
        return description.call(this);
    } else {
        const fields = Object.keys(description);
        const struct = {};
        for (let j = 0; j < fields.length; j++) {
            const fieldName = fields[j];
            const fieldType = description[fieldName];
            struct[fieldName] = fieldType.call(this);
        }
        return struct;
    }
};

Parser.prototype.parsePointer = function(description) {
    const structOffset = this.parseOffset16();
    if (structOffset > 0) {                         // NULL offset => return undefined
        return new Parser(this.data, this.offset + structOffset).parseStruct(description);
    }
    return undefined;
};

/**
 * Parse a list of offsets to lists of 16-bit integers,
 * or a list of offsets to lists of offsets to any kind of items.
 * If itemCallback is not provided, a list of list of UShort is assumed.
 * If provided, itemCallback is called on each item and must parse the item.
 * See examples in tables/gsub.js
 */
Parser.prototype.parseListOfLists = function(itemCallback) {
    const offsets = this.parseOffset16List();
    const count = offsets.length;
    const relativeOffset = this.relativeOffset;
    const list = new Array(count);
    for (let i = 0; i < count; i++) {
        const start = offsets[i];
        if (start === 0) {                  // NULL offset
            list[i] = undefined;            // Add i as owned property to list. Convenient with assert.
            continue;
        }
        this.relativeOffset = start;
        if (itemCallback) {
            const subOffsets = this.parseOffset16List();
            const subList = new Array(subOffsets.length);
            for (let j = 0; j < subOffsets.length; j++) {
                this.relativeOffset = start + subOffsets[j];
                subList[j] = itemCallback.call(this);
            }
            list[i] = subList;
        } else {
            list[i] = this.parseUShortList();
        }
    }
    this.relativeOffset = relativeOffset;
    return list;
};

///// Complex tables parsing //////////////////////////////////

// Parse a coverage table in a GSUB, GPOS or GDEF table.
// https://www.microsoft.com/typography/OTSPEC/chapter2.htm
// parser.offset must point to the start of the table containing the coverage.
Parser.prototype.parseCoverage = function() {
    const startOffset = this.offset + this.relativeOffset;
    const format = this.parseUShort();
    const count = this.parseUShort();
    if (format === 1) {
        return {
            format: 1,
            glyphs: this.parseUShortList(count)
        };
    } else if (format === 2) {
        const ranges = new Array(count);
        for (let i = 0; i < count; i++) {
            ranges[i] = {
                start: this.parseUShort(),
                end: this.parseUShort(),
                index: this.parseUShort()
            };
        }
        return {
            format: 2,
            ranges: ranges
        };
    }
    throw new Error('0x' + startOffset.toString(16) + ': Coverage format must be 1 or 2.');
};

// Parse a Class Definition Table in a GSUB, GPOS or GDEF table.
// https://www.microsoft.com/typography/OTSPEC/chapter2.htm
Parser.prototype.parseClassDef = function() {
    const startOffset = this.offset + this.relativeOffset;
    const format = this.parseUShort();
    if (format === 1) {
        return {
            format: 1,
            startGlyph: this.parseUShort(),
            classes: this.parseUShortList()
        };
    } else if (format === 2) {
        return {
            format: 2,
            ranges: this.parseRecordList({
                start: Parser.uShort,
                end: Parser.uShort,
                classId: Parser.uShort
            })
        };
    }
    throw new Error('0x' + startOffset.toString(16) + ': ClassDef format must be 1 or 2.');
};

///// Static methods ///////////////////////////////////
// These convenience methods can be used as callbacks and should be called with "this" context set to a Parser instance.

Parser.list = function(count, itemCallback) {
    return function() {
        return this.parseList(count, itemCallback);
    };
};

Parser.recordList = function(count, recordDescription) {
    return function() {
        return this.parseRecordList(count, recordDescription);
    };
};

Parser.pointer = function(description) {
    return function() {
        return this.parsePointer(description);
    };
};

Parser.tag = Parser.prototype.parseTag;
Parser.byte = Parser.prototype.parseByte;
Parser.uShort = Parser.offset16 = Parser.prototype.parseUShort;
Parser.uShortList = Parser.prototype.parseUShortList;
Parser.struct = Parser.prototype.parseStruct;
Parser.coverage = Parser.prototype.parseCoverage;
Parser.classDef = Parser.prototype.parseClassDef;

///// Script, Feature, Lookup lists ///////////////////////////////////////////////
// https://www.microsoft.com/typography/OTSPEC/chapter2.htm

const langSysTable = {
    reserved: Parser.uShort,
    reqFeatureIndex: Parser.uShort,
    featureIndexes: Parser.uShortList
};

Parser.prototype.parseScriptList = function() {
    return this.parsePointer(Parser.recordList({
        tag: Parser.tag,
        script: Parser.pointer({
            defaultLangSys: Parser.pointer(langSysTable),
            langSysRecords: Parser.recordList({
                tag: Parser.tag,
                langSys: Parser.pointer(langSysTable)
            })
        })
    }));
};

Parser.prototype.parseFeatureList = function() {
    return this.parsePointer(Parser.recordList({
        tag: Parser.tag,
        feature: Parser.pointer({
            featureParams: Parser.offset16,
            lookupListIndexes: Parser.uShortList
        })
    }));
};

Parser.prototype.parseLookupList = function(lookupTableParsers) {
    return this.parsePointer(Parser.list(Parser.pointer(function() {
        const lookupType = this.parseUShort();
        check.argument(1 <= lookupType && lookupType <= 8, 'GSUB lookup type ' + lookupType + ' unknown.');
        const lookupFlag = this.parseUShort();
        const useMarkFilteringSet = lookupFlag & 0x10;
        return {
            lookupType: lookupType,
            lookupFlag: lookupFlag,
            subtables: this.parseList(Parser.pointer(lookupTableParsers[lookupType])),
            markFilteringSet: useMarkFilteringSet ? this.parseUShort() : undefined
        };
    })));
};

var parse = {
    getByte,
    getCard8: getByte,
    getUShort,
    getCard16: getUShort,
    getShort,
    getULong,
    getFixed,
    getTag,
    getOffset,
    getBytes,
    bytesToString,
    Parser,
};

// The `cmap` table stores the mappings from characters to glyphs.

function parseCmapTableFormat12(cmap, p) {
    //Skip reserved.
    p.parseUShort();

    // Length in bytes of the sub-tables.
    cmap.length = p.parseULong();
    cmap.language = p.parseULong();

    let groupCount;
    cmap.groupCount = groupCount = p.parseULong();
    cmap.glyphIndexMap = {};

    for (let i = 0; i < groupCount; i += 1) {
        const startCharCode = p.parseULong();
        const endCharCode = p.parseULong();
        let startGlyphId = p.parseULong();

        for (let c = startCharCode; c <= endCharCode; c += 1) {
            cmap.glyphIndexMap[c] = startGlyphId;
            startGlyphId++;
        }
    }
}

function parseCmapTableFormat4(cmap, p, data, start, offset) {
    // Length in bytes of the sub-tables.
    cmap.length = p.parseUShort();
    cmap.language = p.parseUShort();

    // segCount is stored x 2.
    let segCount;
    cmap.segCount = segCount = p.parseUShort() >> 1;

    // Skip searchRange, entrySelector, rangeShift.
    p.skip('uShort', 3);

    // The "unrolled" mapping from character codes to glyph indices.
    cmap.glyphIndexMap = {};
    const endCountParser = new parse.Parser(data, start + offset + 14);
    const startCountParser = new parse.Parser(data, start + offset + 16 + segCount * 2);
    const idDeltaParser = new parse.Parser(data, start + offset + 16 + segCount * 4);
    const idRangeOffsetParser = new parse.Parser(data, start + offset + 16 + segCount * 6);
    let glyphIndexOffset = start + offset + 16 + segCount * 8;
    for (let i = 0; i < segCount - 1; i += 1) {
        let glyphIndex;
        const endCount = endCountParser.parseUShort();
        const startCount = startCountParser.parseUShort();
        const idDelta = idDeltaParser.parseShort();
        const idRangeOffset = idRangeOffsetParser.parseUShort();
        for (let c = startCount; c <= endCount; c += 1) {
            if (idRangeOffset !== 0) {
                // The idRangeOffset is relative to the current position in the idRangeOffset array.
                // Take the current offset in the idRangeOffset array.
                glyphIndexOffset = (idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2);

                // Add the value of the idRangeOffset, which will move us into the glyphIndex array.
                glyphIndexOffset += idRangeOffset;

                // Then add the character index of the current segment, multiplied by 2 for USHORTs.
                glyphIndexOffset += (c - startCount) * 2;
                glyphIndex = parse.getUShort(data, glyphIndexOffset);
                if (glyphIndex !== 0) {
                    glyphIndex = (glyphIndex + idDelta) & 0xFFFF;
                }
            } else {
                glyphIndex = (c + idDelta) & 0xFFFF;
            }

            cmap.glyphIndexMap[c] = glyphIndex;
        }
    }
}

// Parse the `cmap` table. This table stores the mappings from characters to glyphs.
// There are many available formats, but we only support the Windows format 4 and 12.
// This function returns a `CmapEncoding` object or null if no supported format could be found.
function parseCmapTable(data, start) {
    const cmap = {};
    cmap.version = parse.getUShort(data, start);
    check.argument(cmap.version === 0, 'cmap table version should be 0.');

    // The cmap table can contain many sub-tables, each with their own format.
    // We're only interested in a "platform 3" table. This is a Windows format.
    cmap.numTables = parse.getUShort(data, start + 2);
    let offset = -1;
    for (let i = cmap.numTables - 1; i >= 0; i -= 1) {
        const platformId = parse.getUShort(data, start + 4 + (i * 8));
        const encodingId = parse.getUShort(data, start + 4 + (i * 8) + 2);
        if (platformId === 3 && (encodingId === 0 || encodingId === 1 || encodingId === 10)) {
            offset = parse.getULong(data, start + 4 + (i * 8) + 4);
            break;
        }
    }

    if (offset === -1) {
        // There is no cmap table in the font that we support.
        throw new Error('No valid cmap sub-tables found.');
    }

    const p = new parse.Parser(data, start + offset);
    cmap.format = p.parseUShort();

    if (cmap.format === 12) {
        parseCmapTableFormat12(cmap, p);
    } else if (cmap.format === 4) {
        parseCmapTableFormat4(cmap, p, data, start, offset);
    } else {
        throw new Error('Only format 4 and 12 cmap tables are supported (found format ' + cmap.format + ').');
    }

    return cmap;
}

function addSegment(t, code, glyphIndex) {
    t.segments.push({
        end: code,
        start: code,
        delta: -(code - glyphIndex),
        offset: 0
    });
}

function addTerminatorSegment(t) {
    t.segments.push({
        end: 0xFFFF,
        start: 0xFFFF,
        delta: 1,
        offset: 0
    });
}

function makeCmapTable(glyphs) {
    const t = new table.Table('cmap', [
        {name: 'version', type: 'USHORT', value: 0},
        {name: 'numTables', type: 'USHORT', value: 1},
        {name: 'platformID', type: 'USHORT', value: 3},
        {name: 'encodingID', type: 'USHORT', value: 1},
        {name: 'offset', type: 'ULONG', value: 12},
        {name: 'format', type: 'USHORT', value: 4},
        {name: 'length', type: 'USHORT', value: 0},
        {name: 'language', type: 'USHORT', value: 0},
        {name: 'segCountX2', type: 'USHORT', value: 0},
        {name: 'searchRange', type: 'USHORT', value: 0},
        {name: 'entrySelector', type: 'USHORT', value: 0},
        {name: 'rangeShift', type: 'USHORT', value: 0}
    ]);

    t.segments = [];
    for (let i = 0; i < glyphs.length; i += 1) {
        const glyph = glyphs.get(i);
        for (let j = 0; j < glyph.unicodes.length; j += 1) {
            addSegment(t, glyph.unicodes[j], i);
        }

        t.segments = t.segments.sort(function(a, b) {
            return a.start - b.start;
        });
    }

    addTerminatorSegment(t);

    let segCount;
    segCount = t.segments.length;
    t.segCountX2 = segCount * 2;
    t.searchRange = Math.pow(2, Math.floor(Math.log(segCount) / Math.log(2))) * 2;
    t.entrySelector = Math.log(t.searchRange / 2) / Math.log(2);
    t.rangeShift = t.segCountX2 - t.searchRange;

    // Set up parallel segment arrays.
    let endCounts = [];
    let startCounts = [];
    let idDeltas = [];
    let idRangeOffsets = [];
    let glyphIds = [];

    for (let i = 0; i < segCount; i += 1) {
        const segment = t.segments[i];
        endCounts = endCounts.concat({name: 'end_' + i, type: 'USHORT', value: segment.end});
        startCounts = startCounts.concat({name: 'start_' + i, type: 'USHORT', value: segment.start});
        idDeltas = idDeltas.concat({name: 'idDelta_' + i, type: 'SHORT', value: segment.delta});
        idRangeOffsets = idRangeOffsets.concat({name: 'idRangeOffset_' + i, type: 'USHORT', value: segment.offset});
        if (segment.glyphId !== undefined) {
            glyphIds = glyphIds.concat({name: 'glyph_' + i, type: 'USHORT', value: segment.glyphId});
        }
    }

    t.fields = t.fields.concat(endCounts);
    t.fields.push({name: 'reservedPad', type: 'USHORT', value: 0});
    t.fields = t.fields.concat(startCounts);
    t.fields = t.fields.concat(idDeltas);
    t.fields = t.fields.concat(idRangeOffsets);
    t.fields = t.fields.concat(glyphIds);

    t.length = 14 + // Subtable header
        endCounts.length * 2 +
        2 + // reservedPad
        startCounts.length * 2 +
        idDeltas.length * 2 +
        idRangeOffsets.length * 2 +
        glyphIds.length * 2;

    return t;
}

var cmap = { parse: parseCmapTable, make: makeCmapTable };

// Glyph encoding

const cffStandardStrings = [
    '.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',
    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',
    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',
    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',
    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling',
    'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft',
    'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph',
    'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand',
    'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring',
    'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE',
    'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu',
    'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn',
    'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright',
    'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex',
    'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex',
    'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute',
    'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute',
    'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute',
    'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave',
    'yacute', 'ydieresis', 'zcaron', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior',
    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', '266 ff', 'onedotenleader',
    'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle',
    'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'commasuperior', 'threequartersemdash', 'periodsuperior',
    'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior',
    'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'ffi', 'ffl',
    'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',
    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',
    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',
    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall',
    'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall',
    'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall',
    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds',
    'zerosuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior',
    'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior',
    'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior',
    'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall',
    'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall',
    'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall',
    'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall',
    'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall', '001.000',
    '001.001', '001.002', '001.003', 'Black', 'Bold', 'Book', 'Light', 'Medium', 'Regular', 'Roman', 'Semibold'];

const cffStandardEncoding = [
    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
    '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',
    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',
    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',
    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',
    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '',
    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
    'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle',
    'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger',
    'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright',
    'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde',
    'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron',
    'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '',
    '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '',
    'lslash', 'oslash', 'oe', 'germandbls'];

const cffExpertEncoding = [
    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
    '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior',
    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader',
    'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle',
    'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon',
    'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior',
    'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior',
    'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl',
    'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',
    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',
    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',
    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '',
    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
    'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall',
    'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior',
    '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters',
    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '',
    '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',
    'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior',
    'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior',
    'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall',
    'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall',
    'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall',
    'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall',
    'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall',
    'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];

const standardNames = [
    '.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent',
    'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash',
    'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less',
    'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
    'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright',
    'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
    'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde',
    'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave',
    'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis',
    'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis',
    'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section',
    'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal',
    'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation',
    'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown',
    'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright',
    'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft',
    'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction',
    'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase',
    'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute',
    'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex',
    'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut',
    'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth',
    'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior',
    'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla',
    'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];

/**
 * This is the encoding used for fonts created from scratch.
 * It loops through all glyphs and finds the appropriate unicode value.
 * Since it's linear time, other encodings will be faster.
 * @exports opentype.DefaultEncoding
 * @class
 * @constructor
 * @param {opentype.Font}
 */
function DefaultEncoding(font) {
    this.font = font;
}

DefaultEncoding.prototype.charToGlyphIndex = function(c) {
    const code = c.charCodeAt(0);
    const glyphs = this.font.glyphs;
    if (glyphs) {
        for (let i = 0; i < glyphs.length; i += 1) {
            const glyph = glyphs.get(i);
            for (let j = 0; j < glyph.unicodes.length; j += 1) {
                if (glyph.unicodes[j] === code) {
                    return i;
                }
            }
        }
    }
    return null;
};

/**
 * @exports opentype.CmapEncoding
 * @class
 * @constructor
 * @param {Object} cmap - a object with the cmap encoded data
 */
function CmapEncoding(cmap) {
    this.cmap = cmap;
}

/**
 * @param  {string} c - the character
 * @return {number} The glyph index.
 */
CmapEncoding.prototype.charToGlyphIndex = function(c) {
    return this.cmap.glyphIndexMap[c.charCodeAt(0)] || 0;
};

/**
 * @exports opentype.CffEncoding
 * @class
 * @constructor
 * @param {string} encoding - The encoding
 * @param {Array} charset - The character set.
 */
function CffEncoding(encoding, charset) {
    this.encoding = encoding;
    this.charset = charset;
}

/**
 * @param  {string} s - The character
 * @return {number} The index.
 */
CffEncoding.prototype.charToGlyphIndex = function(s) {
    const code = s.charCodeAt(0);
    const charName = this.encoding[code];
    return this.charset.indexOf(charName);
};

/**
 * @exports opentype.GlyphNames
 * @class
 * @constructor
 * @param {Object} post
 */
function GlyphNames(post) {
    switch (post.version) {
        case 1:
            this.names = standardNames.slice();
            break;
        case 2:
            this.names = new Array(post.numberOfGlyphs);
            for (let i = 0; i < post.numberOfGlyphs; i++) {
                if (post.glyphNameIndex[i] < standardNames.length) {
                    this.names[i] = standardNames[post.glyphNameIndex[i]];
                } else {
                    this.names[i] = post.names[post.glyphNameIndex[i] - standardNames.length];
                }
            }

            break;
        case 2.5:
            this.names = new Array(post.numberOfGlyphs);
            for (let i = 0; i < post.numberOfGlyphs; i++) {
                this.names[i] = standardNames[i + post.glyphNameIndex[i]];
            }

            break;
        case 3:
            this.names = [];
            break;
        default:
            this.names = [];
            break;
    }
}

/**
 * Gets the index of a glyph by name.
 * @param  {string} name - The glyph name
 * @return {number} The index
 */
GlyphNames.prototype.nameToGlyphIndex = function(name) {
    return this.names.indexOf(name);
};

/**
 * @param  {number} gid
 * @return {string}
 */
GlyphNames.prototype.glyphIndexToName = function(gid) {
    return this.names[gid];
};

/**
 * @alias opentype.addGlyphNames
 * @param {opentype.Font}
 */
function addGlyphNames(font) {
    let glyph;
    const glyphIndexMap = font.tables.cmap.glyphIndexMap;
    const charCodes = Object.keys(glyphIndexMap);

    for (let i = 0; i < charCodes.length; i += 1) {
        const c = charCodes[i];
        const glyphIndex = glyphIndexMap[c];
        glyph = font.glyphs.get(glyphIndex);
        glyph.addUnicode(parseInt(c));
    }

    for (let i = 0; i < font.glyphs.length; i += 1) {
        glyph = font.glyphs.get(i);
        if (font.cffEncoding) {
            if (font.isCIDFont) {
                glyph.name = 'gid' + i;
            } else {
                glyph.name = font.cffEncoding.charset[i];
            }
        } else if (font.glyphNames.names) {
            glyph.name = font.glyphNames.glyphIndexToName(i);
        }
    }
}

// Drawing utility functions.

// Draw a line on the given context from point `x1,y1` to point `x2,y2`.
function line(ctx, x1, y1, x2, y2) {
    ctx.beginPath();
    ctx.moveTo(x1, y1);
    ctx.lineTo(x2, y2);
    ctx.stroke();
}

var draw = { line };

// The `glyf` table describes the glyphs in TrueType outline format.

// Parse the coordinate data for a glyph.
function parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {
    let v;
    if ((flag & shortVectorBitMask) > 0) {
        // The coordinate is 1 byte long.
        v = p.parseByte();
        // The `same` bit is re-used for short values to signify the sign of the value.
        if ((flag & sameBitMask) === 0) {
            v = -v;
        }

        v = previousValue + v;
    } else {
        //  The coordinate is 2 bytes long.
        // If the `same` bit is set, the coordinate is the same as the previous coordinate.
        if ((flag & sameBitMask) > 0) {
            v = previousValue;
        } else {
            // Parse the coordinate as a signed 16-bit delta value.
            v = previousValue + p.parseShort();
        }
    }

    return v;
}

// Parse a TrueType glyph.
function parseGlyph(glyph, data, start) {
    const p = new parse.Parser(data, start);
    glyph.numberOfContours = p.parseShort();
    glyph._xMin = p.parseShort();
    glyph._yMin = p.parseShort();
    glyph._xMax = p.parseShort();
    glyph._yMax = p.parseShort();
    let flags;
    let flag;

    if (glyph.numberOfContours > 0) {
        // This glyph is not a composite.
        const endPointIndices = glyph.endPointIndices = [];
        for (let i = 0; i < glyph.numberOfContours; i += 1) {
            endPointIndices.push(p.parseUShort());
        }

        glyph.instructionLength = p.parseUShort();
        glyph.instructions = [];
        for (let i = 0; i < glyph.instructionLength; i += 1) {
            glyph.instructions.push(p.parseByte());
        }

        const numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;
        flags = [];
        for (let i = 0; i < numberOfCoordinates; i += 1) {
            flag = p.parseByte();
            flags.push(flag);
            // If bit 3 is set, we repeat this flag n times, where n is the next byte.
            if ((flag & 8) > 0) {
                const repeatCount = p.parseByte();
                for (let j = 0; j < repeatCount; j += 1) {
                    flags.push(flag);
                    i += 1;
                }
            }
        }

        check.argument(flags.length === numberOfCoordinates, 'Bad flags.');

        if (endPointIndices.length > 0) {
            const points = [];
            let point;
            // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.
            if (numberOfCoordinates > 0) {
                for (let i = 0; i < numberOfCoordinates; i += 1) {
                    flag = flags[i];
                    point = {};
                    point.onCurve = !!(flag & 1);
                    point.lastPointOfContour = endPointIndices.indexOf(i) >= 0;
                    points.push(point);
                }

                let px = 0;
                for (let i = 0; i < numberOfCoordinates; i += 1) {
                    flag = flags[i];
                    point = points[i];
                    point.x = parseGlyphCoordinate(p, flag, px, 2, 16);
                    px = point.x;
                }

                let py = 0;
                for (let i = 0; i < numberOfCoordinates; i += 1) {
                    flag = flags[i];
                    point = points[i];
                    point.y = parseGlyphCoordinate(p, flag, py, 4, 32);
                    py = point.y;
                }
            }

            glyph.points = points;
        } else {
            glyph.points = [];
        }
    } else if (glyph.numberOfContours === 0) {
        glyph.points = [];
    } else {
        glyph.isComposite = true;
        glyph.points = [];
        glyph.components = [];
        let moreComponents = true;
        while (moreComponents) {
            flags = p.parseUShort();
            const component = {
                glyphIndex: p.parseUShort(),
                xScale: 1,
                scale01: 0,
                scale10: 0,
                yScale: 1,
                dx: 0,
                dy: 0
            };
            if ((flags & 1) > 0) {
                // The arguments are words
                if ((flags & 2) > 0) {
                    // values are offset
                    component.dx = p.parseShort();
                    component.dy = p.parseShort();
                } else {
                    // values are matched points
                    component.matchedPoints = [p.parseUShort(), p.parseUShort()];
                }

            } else {
                // The arguments are bytes
                if ((flags & 2) > 0) {
                    // values are offset
                    component.dx = p.parseChar();
                    component.dy = p.parseChar();
                } else {
                    // values are matched points
                    component.matchedPoints = [p.parseByte(), p.parseByte()];
                }
            }

            if ((flags & 8) > 0) {
                // We have a scale
                component.xScale = component.yScale = p.parseF2Dot14();
            } else if ((flags & 64) > 0) {
                // We have an X / Y scale
                component.xScale = p.parseF2Dot14();
                component.yScale = p.parseF2Dot14();
            } else if ((flags & 128) > 0) {
                // We have a 2x2 transformation
                component.xScale = p.parseF2Dot14();
                component.scale01 = p.parseF2Dot14();
                component.scale10 = p.parseF2Dot14();
                component.yScale = p.parseF2Dot14();
            }

            glyph.components.push(component);
            moreComponents = !!(flags & 32);
        }
        if (flags & 0x100) {
            // We have instructions
            glyph.instructionLength = p.parseUShort();
            glyph.instructions = [];
            for (let i = 0; i < glyph.instructionLength; i += 1) {
                glyph.instructions.push(p.parseByte());
            }
        }
    }
}

// Transform an array of points and return a new array.
function transformPoints(points, transform) {
    const newPoints = [];
    for (let i = 0; i < points.length; i += 1) {
        const pt = points[i];
        const newPt = {
            x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,
            y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,
            onCurve: pt.onCurve,
            lastPointOfContour: pt.lastPointOfContour
        };
        newPoints.push(newPt);
    }

    return newPoints;
}

function getContours(points) {
    const contours = [];
    let currentContour = [];
    for (let i = 0; i < points.length; i += 1) {
        const pt = points[i];
        currentContour.push(pt);
        if (pt.lastPointOfContour) {
            contours.push(currentContour);
            currentContour = [];
        }
    }

    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');
    return contours;
}

// Convert the TrueType glyph outline to a Path.
function getPath(points) {
    const p = new Path();
    if (!points) {
        return p;
    }

    const contours = getContours(points);

    for (let contourIndex = 0; contourIndex < contours.length; ++contourIndex) {
        const contour = contours[contourIndex];

        let prev = null;
        let curr = contour[contour.length - 1];
        let next = contour[0];

        if (curr.onCurve) {
            p.moveTo(curr.x, curr.y);
        } else {
            if (next.onCurve) {
                p.moveTo(next.x, next.y);
            } else {
                // If both first and last points are off-curve, start at their middle.
                const start = {x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5};
                p.moveTo(start.x, start.y);
            }
        }

        for (let i = 0; i < contour.length; ++i) {
            prev = curr;
            curr = next;
            next = contour[(i + 1) % contour.length];

            if (curr.onCurve) {
                // This is a straight line.
                p.lineTo(curr.x, curr.y);
            } else {
                let prev2 = prev;
                let next2 = next;

                if (!prev.onCurve) {
                    prev2 = { x: (curr.x + prev.x) * 0.5, y: (curr.y + prev.y) * 0.5 };
                    p.lineTo(prev2.x, prev2.y);
                }

                if (!next.onCurve) {
                    next2 = { x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5 };
                }

                p.lineTo(prev2.x, prev2.y);
                p.quadraticCurveTo(curr.x, curr.y, next2.x, next2.y);
            }
        }

        p.closePath();
    }
    return p;
}

function buildPath(glyphs, glyph) {
    if (glyph.isComposite) {
        for (let j = 0; j < glyph.components.length; j += 1) {
            const component = glyph.components[j];
            const componentGlyph = glyphs.get(component.glyphIndex);
            // Force the ttfGlyphLoader to parse the glyph.
            componentGlyph.getPath();
            if (componentGlyph.points) {
                let transformedPoints;
                if (component.matchedPoints === undefined) {
                    // component positioned by offset
                    transformedPoints = transformPoints(componentGlyph.points, component);
                } else {
                    // component positioned by matched points
                    if ((component.matchedPoints[0] > glyph.points.length - 1) ||
                        (component.matchedPoints[1] > componentGlyph.points.length - 1)) {
                        throw Error('Matched points out of range in ' + glyph.name);
                    }
                    const firstPt = glyph.points[component.matchedPoints[0]];
                    let secondPt = componentGlyph.points[component.matchedPoints[1]];
                    const transform = {
                        xScale: component.xScale, scale01: component.scale01,
                        scale10: component.scale10, yScale: component.yScale,
                        dx: 0, dy: 0
                    };
                    secondPt = transformPoints([secondPt], transform)[0];
                    transform.dx = firstPt.x - secondPt.x;
                    transform.dy = firstPt.y - secondPt.y;
                    transformedPoints = transformPoints(componentGlyph.points, transform);
                }
                glyph.points = glyph.points.concat(transformedPoints);
            }
        }
    }

    return getPath(glyph.points);
}

// Parse all the glyphs according to the offsets from the `loca` table.
function parseGlyfTable(data, start, loca, font) {
    const glyphs = new glyphset.GlyphSet(font);

    // The last element of the loca table is invalid.
    for (let i = 0; i < loca.length - 1; i += 1) {
        const offset = loca[i];
        const nextOffset = loca[i + 1];
        if (offset !== nextOffset) {
            glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));
        } else {
            glyphs.push(i, glyphset.glyphLoader(font, i));
        }
    }

    return glyphs;
}

var glyf = { getPath, parse: parseGlyfTable };

// The Glyph object

function getPathDefinition(glyph, path) {
    let _path = path || {commands: []};
    return {
        configurable: true,

        get: function() {
            if (typeof _path === 'function') {
                _path = _path();
            }

            return _path;
        },

        set: function(p) {
            _path = p;
        }
    };
}
/**
 * @typedef GlyphOptions
 * @type Object
 * @property {string} [name] - The glyph name
 * @property {number} [unicode]
 * @property {Array} [unicodes]
 * @property {number} [xMin]
 * @property {number} [yMin]
 * @property {number} [xMax]
 * @property {number} [yMax]
 * @property {number} [advanceWidth]
 */

// A Glyph is an individual mark that often corresponds to a character.
// Some glyphs, such as ligatures, are a combination of many characters.
// Glyphs are the basic building blocks of a font.
//
// The `Glyph` class contains utility methods for drawing the path and its points.
/**
 * @exports opentype.Glyph
 * @class
 * @param {GlyphOptions}
 * @constructor
 */
function Glyph(options) {
    // By putting all the code on a prototype function (which is only declared once)
    // we reduce the memory requirements for larger fonts by some 2%
    this.bindConstructorValues(options);
}

/**
 * @param  {GlyphOptions}
 */
Glyph.prototype.bindConstructorValues = function(options) {
    this.index = options.index || 0;

    // These three values cannot be deferred for memory optimization:
    this.name = options.name || null;
    this.unicode = options.unicode || undefined;
    this.unicodes = options.unicodes || options.unicode !== undefined ? [options.unicode] : [];

    // But by binding these values only when necessary, we reduce can
    // the memory requirements by almost 3% for larger fonts.
    if (options.xMin) {
        this.xMin = options.xMin;
    }

    if (options.yMin) {
        this.yMin = options.yMin;
    }

    if (options.xMax) {
        this.xMax = options.xMax;
    }

    if (options.yMax) {
        this.yMax = options.yMax;
    }

    if (options.advanceWidth) {
        this.advanceWidth = options.advanceWidth;
    }

    // The path for a glyph is the most memory intensive, and is bound as a value
    // with a getter/setter to ensure we actually do path parsing only once the
    // path is actually needed by anything.
    Object.defineProperty(this, 'path', getPathDefinition(this, options.path));
};

/**
 * @param {number}
 */
Glyph.prototype.addUnicode = function(unicode) {
    if (this.unicodes.length === 0) {
        this.unicode = unicode;
    }

    this.unicodes.push(unicode);
};

/**
 * Calculate the minimum bounding box for this glyph.
 * @return {opentype.BoundingBox}
 */
Glyph.prototype.getBoundingBox = function() {
    return this.path.getBoundingBox();
};

/**
 * Convert the glyph to a Path we can draw on a drawing context.
 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param  {Object=} options - xScale, yScale to stretch the glyph.
 * @param  {opentype.Font} if hinting is to be used, the font
 * @return {opentype.Path}
 */
Glyph.prototype.getPath = function(x, y, fontSize, options, font) {
    x = x !== undefined ? x : 0;
    y = y !== undefined ? y : 0;
    fontSize = fontSize !== undefined ? fontSize : 72;
    let commands;
    let hPoints;
    if (!options) options = { };
    let xScale = options.xScale;
    let yScale = options.yScale;

    if (options.hinting && font && font.hinting) {
        // in case of hinting, the hinting engine takes care
        // of scaling the points (not the path) before hinting.
        hPoints = this.path && font.hinting.exec(this, fontSize);
        // in case the hinting engine failed hPoints is undefined
        // and thus reverts to plain rending
    }

    if (hPoints) {
        commands = glyf.getPath(hPoints).commands;
        x = Math.round(x);
        y = Math.round(y);
        // TODO in case of hinting xyScaling is not yet supported
        xScale = yScale = 1;
    } else {
        commands = this.path.commands;
        const scale = 1 / this.path.unitsPerEm * fontSize;
        if (xScale === undefined) xScale = scale;
        if (yScale === undefined) yScale = scale;
    }

    const p = new Path();
    for (let i = 0; i < commands.length; i += 1) {
        const cmd = commands[i];
        if (cmd.type === 'M') {
            p.moveTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));
        } else if (cmd.type === 'L') {
            p.lineTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));
        } else if (cmd.type === 'Q') {
            p.quadraticCurveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),
                               x + (cmd.x * xScale), y + (-cmd.y * yScale));
        } else if (cmd.type === 'C') {
            p.curveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),
                      x + (cmd.x2 * xScale), y + (-cmd.y2 * yScale),
                      x + (cmd.x * xScale), y + (-cmd.y * yScale));
        } else if (cmd.type === 'Z') {
            p.closePath();
        }
    }

    return p;
};

/**
 * Split the glyph into contours.
 * This function is here for backwards compatibility, and to
 * provide raw access to the TrueType glyph outlines.
 * @return {Array}
 */
Glyph.prototype.getContours = function() {
    if (this.points === undefined) {
        return [];
    }

    const contours = [];
    let currentContour = [];
    for (let i = 0; i < this.points.length; i += 1) {
        const pt = this.points[i];
        currentContour.push(pt);
        if (pt.lastPointOfContour) {
            contours.push(currentContour);
            currentContour = [];
        }
    }

    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');
    return contours;
};

/**
 * Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.
 * @return {Object}
 */
Glyph.prototype.getMetrics = function() {
    const commands = this.path.commands;
    const xCoords = [];
    const yCoords = [];
    for (let i = 0; i < commands.length; i += 1) {
        const cmd = commands[i];
        if (cmd.type !== 'Z') {
            xCoords.push(cmd.x);
            yCoords.push(cmd.y);
        }

        if (cmd.type === 'Q' || cmd.type === 'C') {
            xCoords.push(cmd.x1);
            yCoords.push(cmd.y1);
        }

        if (cmd.type === 'C') {
            xCoords.push(cmd.x2);
            yCoords.push(cmd.y2);
        }
    }

    const metrics = {
        xMin: Math.min.apply(null, xCoords),
        yMin: Math.min.apply(null, yCoords),
        xMax: Math.max.apply(null, xCoords),
        yMax: Math.max.apply(null, yCoords),
        leftSideBearing: this.leftSideBearing
    };

    if (!isFinite(metrics.xMin)) {
        metrics.xMin = 0;
    }

    if (!isFinite(metrics.xMax)) {
        metrics.xMax = this.advanceWidth;
    }

    if (!isFinite(metrics.yMin)) {
        metrics.yMin = 0;
    }

    if (!isFinite(metrics.yMax)) {
        metrics.yMax = 0;
    }

    metrics.rightSideBearing = this.advanceWidth - metrics.leftSideBearing - (metrics.xMax - metrics.xMin);
    return metrics;
};

/**
 * Draw the glyph on the given context.
 * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param  {Object=} options - xScale, yScale to stretch the glyph.
 */
Glyph.prototype.draw = function(ctx, x, y, fontSize, options) {
    this.getPath(x, y, fontSize, options).draw(ctx);
};

/**
 * Draw the points of the glyph.
 * On-curve points will be drawn in blue, off-curve points will be drawn in red.
 * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 */
Glyph.prototype.drawPoints = function(ctx, x, y, fontSize) {
    function drawCircles(l, x, y, scale) {
        const PI_SQ = Math.PI * 2;
        ctx.beginPath();
        for (let j = 0; j < l.length; j += 1) {
            ctx.moveTo(x + (l[j].x * scale), y + (l[j].y * scale));
            ctx.arc(x + (l[j].x * scale), y + (l[j].y * scale), 2, 0, PI_SQ, false);
        }

        ctx.closePath();
        ctx.fill();
    }

    x = x !== undefined ? x : 0;
    y = y !== undefined ? y : 0;
    fontSize = fontSize !== undefined ? fontSize : 24;
    const scale = 1 / this.path.unitsPerEm * fontSize;

    const blueCircles = [];
    const redCircles = [];
    const path = this.path;
    for (let i = 0; i < path.commands.length; i += 1) {
        const cmd = path.commands[i];
        if (cmd.x !== undefined) {
            blueCircles.push({x: cmd.x, y: -cmd.y});
        }

        if (cmd.x1 !== undefined) {
            redCircles.push({x: cmd.x1, y: -cmd.y1});
        }

        if (cmd.x2 !== undefined) {
            redCircles.push({x: cmd.x2, y: -cmd.y2});
        }
    }

    ctx.fillStyle = 'blue';
    drawCircles(blueCircles, x, y, scale);
    ctx.fillStyle = 'red';
    drawCircles(redCircles, x, y, scale);
};

/**
 * Draw lines indicating important font measurements.
 * Black lines indicate the origin of the coordinate system (point 0,0).
 * Blue lines indicate the glyph bounding box.
 * Green line indicates the advance width of the glyph.
 * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 */
Glyph.prototype.drawMetrics = function(ctx, x, y, fontSize) {
    let scale;
    x = x !== undefined ? x : 0;
    y = y !== undefined ? y : 0;
    fontSize = fontSize !== undefined ? fontSize : 24;
    scale = 1 / this.path.unitsPerEm * fontSize;
    ctx.lineWidth = 1;

    // Draw the origin
    ctx.strokeStyle = 'black';
    draw.line(ctx, x, -10000, x, 10000);
    draw.line(ctx, -10000, y, 10000, y);

    // This code is here due to memory optimization: by not using
    // defaults in the constructor, we save a notable amount of memory.
    const xMin = this.xMin || 0;
    let yMin = this.yMin || 0;
    const xMax = this.xMax || 0;
    let yMax = this.yMax || 0;
    const advanceWidth = this.advanceWidth || 0;

    // Draw the glyph box
    ctx.strokeStyle = 'blue';
    draw.line(ctx, x + (xMin * scale), -10000, x + (xMin * scale), 10000);
    draw.line(ctx, x + (xMax * scale), -10000, x + (xMax * scale), 10000);
    draw.line(ctx, -10000, y + (-yMin * scale), 10000, y + (-yMin * scale));
    draw.line(ctx, -10000, y + (-yMax * scale), 10000, y + (-yMax * scale));

    // Draw the advance width
    ctx.strokeStyle = 'green';
    draw.line(ctx, x + (advanceWidth * scale), -10000, x + (advanceWidth * scale), 10000);
};

// The GlyphSet object

// Define a property on the glyph that depends on the path being loaded.
function defineDependentProperty(glyph, externalName, internalName) {
    Object.defineProperty(glyph, externalName, {
        get: function() {
            // Request the path property to make sure the path is loaded.
            glyph.path; // jshint ignore:line
            return glyph[internalName];
        },
        set: function(newValue) {
            glyph[internalName] = newValue;
        },
        enumerable: true,
        configurable: true
    });
}

/**
 * A GlyphSet represents all glyphs available in the font, but modelled using
 * a deferred glyph loader, for retrieving glyphs only once they are absolutely
 * necessary, to keep the memory footprint down.
 * @exports opentype.GlyphSet
 * @class
 * @param {opentype.Font}
 * @param {Array}
 */
function GlyphSet(font, glyphs) {
    this.font = font;
    this.glyphs = {};
    if (Array.isArray(glyphs)) {
        for (let i = 0; i < glyphs.length; i++) {
            this.glyphs[i] = glyphs[i];
        }
    }

    this.length = (glyphs && glyphs.length) || 0;
}

/**
 * @param  {number} index
 * @return {opentype.Glyph}
 */
GlyphSet.prototype.get = function(index) {
    if (typeof this.glyphs[index] === 'function') {
        this.glyphs[index] = this.glyphs[index]();
    }

    return this.glyphs[index];
};

/**
 * @param  {number} index
 * @param  {Object}
 */
GlyphSet.prototype.push = function(index, loader) {
    this.glyphs[index] = loader;
    this.length++;
};

/**
 * @alias opentype.glyphLoader
 * @param  {opentype.Font} font
 * @param  {number} index
 * @return {opentype.Glyph}
 */
function glyphLoader(font, index) {
    return new Glyph({index: index, font: font});
}

/**
 * Generate a stub glyph that can be filled with all metadata *except*
 * the "points" and "path" properties, which must be loaded only once
 * the glyph's path is actually requested for text shaping.
 * @alias opentype.ttfGlyphLoader
 * @param  {opentype.Font} font
 * @param  {number} index
 * @param  {Function} parseGlyph
 * @param  {Object} data
 * @param  {number} position
 * @param  {Function} buildPath
 * @return {opentype.Glyph}
 */
function ttfGlyphLoader(font, index, parseGlyph, data, position, buildPath) {
    return function() {
        const glyph = new Glyph({index: index, font: font});

        glyph.path = function() {
            parseGlyph(glyph, data, position);
            const path = buildPath(font.glyphs, glyph);
            path.unitsPerEm = font.unitsPerEm;
            return path;
        };

        defineDependentProperty(glyph, 'xMin', '_xMin');
        defineDependentProperty(glyph, 'xMax', '_xMax');
        defineDependentProperty(glyph, 'yMin', '_yMin');
        defineDependentProperty(glyph, 'yMax', '_yMax');

        return glyph;
    };
}
/**
 * @alias opentype.cffGlyphLoader
 * @param  {opentype.Font} font
 * @param  {number} index
 * @param  {Function} parseCFFCharstring
 * @param  {string} charstring
 * @return {opentype.Glyph}
 */
function cffGlyphLoader(font, index, parseCFFCharstring, charstring) {
    return function() {
        const glyph = new Glyph({index: index, font: font});

        glyph.path = function() {
            const path = parseCFFCharstring(font, glyph, charstring);
            path.unitsPerEm = font.unitsPerEm;
            return path;
        };

        return glyph;
    };
}

var glyphset = { GlyphSet, glyphLoader, ttfGlyphLoader, cffGlyphLoader };

// The `CFF` table contains the glyph outlines in PostScript format.

// Custom equals function that can also check lists.
function equals$1(a, b) {
    if (a === b) {
        return true;
    } else if (Array.isArray(a) && Array.isArray(b)) {
        if (a.length !== b.length) {
            return false;
        }

        for (let i = 0; i < a.length; i += 1) {
            if (!equals$1(a[i], b[i])) {
                return false;
            }
        }

        return true;
    } else {
        return false;
    }
}

// Subroutines are encoded using the negative half of the number space.
// See type 2 chapter 4.7 "Subroutine operators".
function calcCFFSubroutineBias(subrs) {
    let bias;
    if (subrs.length < 1240) {
        bias = 107;
    } else if (subrs.length < 33900) {
        bias = 1131;
    } else {
        bias = 32768;
    }

    return bias;
}

// Parse a `CFF` INDEX array.
// An index array consists of a list of offsets, then a list of objects at those offsets.
function parseCFFIndex(data, start, conversionFn) {
    const offsets = [];
    const objects = [];
    const count = parse.getCard16(data, start);
    let objectOffset;
    let endOffset;
    if (count !== 0) {
        const offsetSize = parse.getByte(data, start + 2);
        objectOffset = start + ((count + 1) * offsetSize) + 2;
        let pos = start + 3;
        for (let i = 0; i < count + 1; i += 1) {
            offsets.push(parse.getOffset(data, pos, offsetSize));
            pos += offsetSize;
        }

        // The total size of the index array is 4 header bytes + the value of the last offset.
        endOffset = objectOffset + offsets[count];
    } else {
        endOffset = start + 2;
    }

    for (let i = 0; i < offsets.length - 1; i += 1) {
        let value = parse.getBytes(data, objectOffset + offsets[i], objectOffset + offsets[i + 1]);
        if (conversionFn) {
            value = conversionFn(value);
        }

        objects.push(value);
    }

    return {objects: objects, startOffset: start, endOffset: endOffset};
}

// Parse a `CFF` DICT real value.
function parseFloatOperand(parser) {
    let s = '';
    const eof = 15;
    const lookup = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];
    while (true) {
        const b = parser.parseByte();
        const n1 = b >> 4;
        const n2 = b & 15;

        if (n1 === eof) {
            break;
        }

        s += lookup[n1];

        if (n2 === eof) {
            break;
        }

        s += lookup[n2];
    }

    return parseFloat(s);
}

// Parse a `CFF` DICT operand.
function parseOperand(parser, b0) {
    let b1;
    let b2;
    let b3;
    let b4;
    if (b0 === 28) {
        b1 = parser.parseByte();
        b2 = parser.parseByte();
        return b1 << 8 | b2;
    }

    if (b0 === 29) {
        b1 = parser.parseByte();
        b2 = parser.parseByte();
        b3 = parser.parseByte();
        b4 = parser.parseByte();
        return b1 << 24 | b2 << 16 | b3 << 8 | b4;
    }

    if (b0 === 30) {
        return parseFloatOperand(parser);
    }

    if (b0 >= 32 && b0 <= 246) {
        return b0 - 139;
    }

    if (b0 >= 247 && b0 <= 250) {
        b1 = parser.parseByte();
        return (b0 - 247) * 256 + b1 + 108;
    }

    if (b0 >= 251 && b0 <= 254) {
        b1 = parser.parseByte();
        return -(b0 - 251) * 256 - b1 - 108;
    }

    throw new Error('Invalid b0 ' + b0);
}

// Convert the entries returned by `parseDict` to a proper dictionary.
// If a value is a list of one, it is unpacked.
function entriesToObject(entries) {
    const o = {};
    for (let i = 0; i < entries.length; i += 1) {
        const key = entries[i][0];
        const values = entries[i][1];
        let value;
        if (values.length === 1) {
            value = values[0];
        } else {
            value = values;
        }

        if (o.hasOwnProperty(key) && !isNaN(o[key])) {
            throw new Error('Object ' + o + ' already has key ' + key);
        }

        o[key] = value;
    }

    return o;
}

// Parse a `CFF` DICT object.
// A dictionary contains key-value pairs in a compact tokenized format.
function parseCFFDict(data, start, size) {
    start = start !== undefined ? start : 0;
    const parser = new parse.Parser(data, start);
    const entries = [];
    let operands = [];
    size = size !== undefined ? size : data.length;

    while (parser.relativeOffset < size) {
        let op = parser.parseByte();

        // The first byte for each dict item distinguishes between operator (key) and operand (value).
        // Values <= 21 are operators.
        if (op <= 21) {
            // Two-byte operators have an initial escape byte of 12.
            if (op === 12) {
                op = 1200 + parser.parseByte();
            }

            entries.push([op, operands]);
            operands = [];
        } else {
            // Since the operands (values) come before the operators (keys), we store all operands in a list
            // until we encounter an operator.
            operands.push(parseOperand(parser, op));
        }
    }

    return entriesToObject(entries);
}

// Given a String Index (SID), return the value of the string.
// Strings below index 392 are standard CFF strings and are not encoded in the font.
function getCFFString(strings, index) {
    if (index <= 390) {
        index = cffStandardStrings[index];
    } else {
        index = strings[index - 391];
    }

    return index;
}

// Interpret a dictionary and return a new dictionary with readable keys and values for missing entries.
// This function takes `meta` which is a list of objects containing `operand`, `name` and `default`.
function interpretDict(dict, meta, strings) {
    const newDict = {};
    let value;

    // Because we also want to include missing values, we start out from the meta list
    // and lookup values in the dict.
    for (let i = 0; i < meta.length; i += 1) {
        const m = meta[i];

        if (Array.isArray(m.type)) {
            const values = [];
            values.length = m.type.length;
            for (let j = 0; j < m.type.length; j++) {
                value = dict[m.op] !== undefined ? dict[m.op][j] : undefined;
                if (value === undefined) {
                    value = m.value !== undefined && m.value[j] !== undefined ? m.value[j] : null;
                }
                if (m.type[j] === 'SID') {
                    value = getCFFString(strings, value);
                }
                values[j] = value;
            }
            newDict[m.name] = values;
        } else {
            value = dict[m.op];
            if (value === undefined) {
                value = m.value !== undefined ? m.value : null;
            }

            if (m.type === 'SID') {
                value = getCFFString(strings, value);
            }
            newDict[m.name] = value;
        }
    }

    return newDict;
}

// Parse the CFF header.
function parseCFFHeader(data, start) {
    const header = {};
    header.formatMajor = parse.getCard8(data, start);
    header.formatMinor = parse.getCard8(data, start + 1);
    header.size = parse.getCard8(data, start + 2);
    header.offsetSize = parse.getCard8(data, start + 3);
    header.startOffset = start;
    header.endOffset = start + 4;
    return header;
}

const TOP_DICT_META = [
    {name: 'version', op: 0, type: 'SID'},
    {name: 'notice', op: 1, type: 'SID'},
    {name: 'copyright', op: 1200, type: 'SID'},
    {name: 'fullName', op: 2, type: 'SID'},
    {name: 'familyName', op: 3, type: 'SID'},
    {name: 'weight', op: 4, type: 'SID'},
    {name: 'isFixedPitch', op: 1201, type: 'number', value: 0},
    {name: 'italicAngle', op: 1202, type: 'number', value: 0},
    {name: 'underlinePosition', op: 1203, type: 'number', value: -100},
    {name: 'underlineThickness', op: 1204, type: 'number', value: 50},
    {name: 'paintType', op: 1205, type: 'number', value: 0},
    {name: 'charstringType', op: 1206, type: 'number', value: 2},
    {
        name: 'fontMatrix',
        op: 1207,
        type: ['real', 'real', 'real', 'real', 'real', 'real'],
        value: [0.001, 0, 0, 0.001, 0, 0]
    },
    {name: 'uniqueId', op: 13, type: 'number'},
    {name: 'fontBBox', op: 5, type: ['number', 'number', 'number', 'number'], value: [0, 0, 0, 0]},
    {name: 'strokeWidth', op: 1208, type: 'number', value: 0},
    {name: 'xuid', op: 14, type: [], value: null},
    {name: 'charset', op: 15, type: 'offset', value: 0},
    {name: 'encoding', op: 16, type: 'offset', value: 0},
    {name: 'charStrings', op: 17, type: 'offset', value: 0},
    {name: 'private', op: 18, type: ['number', 'offset'], value: [0, 0]},
    {name: 'ros', op: 1230, type: ['SID', 'SID', 'number']},
    {name: 'cidFontVersion', op: 1231, type: 'number', value: 0},
    {name: 'cidFontRevision', op: 1232, type: 'number', value: 0},
    {name: 'cidFontType', op: 1233, type: 'number', value: 0},
    {name: 'cidCount', op: 1234, type: 'number', value: 8720},
    {name: 'uidBase', op: 1235, type: 'number'},
    {name: 'fdArray', op: 1236, type: 'offset'},
    {name: 'fdSelect', op: 1237, type: 'offset'},
    {name: 'fontName', op: 1238, type: 'SID'}
];

const PRIVATE_DICT_META = [
    {name: 'subrs', op: 19, type: 'offset', value: 0},
    {name: 'defaultWidthX', op: 20, type: 'number', value: 0},
    {name: 'nominalWidthX', op: 21, type: 'number', value: 0}
];

// Parse the CFF top dictionary. A CFF table can contain multiple fonts, each with their own top dictionary.
// The top dictionary contains the essential metadata for the font, together with the private dictionary.
function parseCFFTopDict(data, strings) {
    const dict = parseCFFDict(data, 0, data.byteLength);
    return interpretDict(dict, TOP_DICT_META, strings);
}

// Parse the CFF private dictionary. We don't fully parse out all the values, only the ones we need.
function parseCFFPrivateDict(data, start, size, strings) {
    const dict = parseCFFDict(data, start, size);
    return interpretDict(dict, PRIVATE_DICT_META, strings);
}

// Returns a list of "Top DICT"s found using an INDEX list.
// Used to read both the usual high-level Top DICTs and also the FDArray
// discovered inside CID-keyed fonts.  When a Top DICT has a reference to
// a Private DICT that is read and saved into the Top DICT.
//
// In addition to the expected/optional values as outlined in TOP_DICT_META
// the following values might be saved into the Top DICT.
//
//    _subrs []        array of local CFF subroutines from Private DICT
//    _subrsBias       bias value computed from number of subroutines
//                      (see calcCFFSubroutineBias() and parseCFFCharstring())
//    _defaultWidthX   default widths for CFF characters
//    _nominalWidthX   bias added to width embedded within glyph description
//
//    _privateDict     saved copy of parsed Private DICT from Top DICT
function gatherCFFTopDicts(data, start, cffIndex, strings) {
    const topDictArray = [];
    for (let iTopDict = 0; iTopDict < cffIndex.length; iTopDict += 1) {
        const topDictData = new DataView(new Uint8Array(cffIndex[iTopDict]).buffer);
        const topDict = parseCFFTopDict(topDictData, strings);
        topDict._subrs = [];
        topDict._subrsBias = 0;
        const privateSize = topDict.private[0];
        const privateOffset = topDict.private[1];
        if (privateSize !== 0 && privateOffset !== 0) {
            const privateDict = parseCFFPrivateDict(data, privateOffset + start, privateSize, strings);
            topDict._defaultWidthX = privateDict.defaultWidthX;
            topDict._nominalWidthX = privateDict.nominalWidthX;
            if (privateDict.subrs !== 0) {
                const subrOffset = privateOffset + privateDict.subrs;
                const subrIndex = parseCFFIndex(data, subrOffset + start);
                topDict._subrs = subrIndex.objects;
                topDict._subrsBias = calcCFFSubroutineBias(topDict._subrs);
            }
            topDict._privateDict = privateDict;
        }
        topDictArray.push(topDict);
    }
    return topDictArray;
}

// Parse the CFF charset table, which contains internal names for all the glyphs.
// This function will return a list of glyph names.
// See Adobe TN #5176 chapter 13, "Charsets".
function parseCFFCharset(data, start, nGlyphs, strings) {
    let sid;
    let count;
    const parser = new parse.Parser(data, start);

    // The .notdef glyph is not included, so subtract 1.
    nGlyphs -= 1;
    const charset = ['.notdef'];

    const format = parser.parseCard8();
    if (format === 0) {
        for (let i = 0; i < nGlyphs; i += 1) {
            sid = parser.parseSID();
            charset.push(getCFFString(strings, sid));
        }
    } else if (format === 1) {
        while (charset.length <= nGlyphs) {
            sid = parser.parseSID();
            count = parser.parseCard8();
            for (let i = 0; i <= count; i += 1) {
                charset.push(getCFFString(strings, sid));
                sid += 1;
            }
        }
    } else if (format === 2) {
        while (charset.length <= nGlyphs) {
            sid = parser.parseSID();
            count = parser.parseCard16();
            for (let i = 0; i <= count; i += 1) {
                charset.push(getCFFString(strings, sid));
                sid += 1;
            }
        }
    } else {
        throw new Error('Unknown charset format ' + format);
    }

    return charset;
}

// Parse the CFF encoding data. Only one encoding can be specified per font.
// See Adobe TN #5176 chapter 12, "Encodings".
function parseCFFEncoding(data, start, charset) {
    let code;
    const enc = {};
    const parser = new parse.Parser(data, start);
    const format = parser.parseCard8();
    if (format === 0) {
        const nCodes = parser.parseCard8();
        for (let i = 0; i < nCodes; i += 1) {
            code = parser.parseCard8();
            enc[code] = i;
        }
    } else if (format === 1) {
        const nRanges = parser.parseCard8();
        code = 1;
        for (let i = 0; i < nRanges; i += 1) {
            const first = parser.parseCard8();
            const nLeft = parser.parseCard8();
            for (let j = first; j <= first + nLeft; j += 1) {
                enc[j] = code;
                code += 1;
            }
        }
    } else {
        throw new Error('Unknown encoding format ' + format);
    }

    return new CffEncoding(enc, charset);
}

// Take in charstring code and return a Glyph object.
// The encoding is described in the Type 2 Charstring Format
// https://www.microsoft.com/typography/OTSPEC/charstr2.htm
function parseCFFCharstring(font, glyph, code) {
    let c1x;
    let c1y;
    let c2x;
    let c2y;
    const p = new Path();
    const stack = [];
    let nStems = 0;
    let haveWidth = false;
    let open = false;
    let x = 0;
    let y = 0;
    let subrs;
    let subrsBias;
    let defaultWidthX;
    let nominalWidthX;
    if (font.isCIDFont) {
        const fdIndex = font.tables.cff.topDict._fdSelect[glyph.index];
        const fdDict = font.tables.cff.topDict._fdArray[fdIndex];
        subrs = fdDict._subrs;
        subrsBias = fdDict._subrsBias;
        defaultWidthX = fdDict._defaultWidthX;
        nominalWidthX = fdDict._nominalWidthX;
    } else {
        subrs = font.tables.cff.topDict._subrs;
        subrsBias = font.tables.cff.topDict._subrsBias;
        defaultWidthX = font.tables.cff.topDict._defaultWidthX;
        nominalWidthX = font.tables.cff.topDict._nominalWidthX;
    }
    let width = defaultWidthX;

    function newContour(x, y) {
        if (open) {
            p.closePath();
        }

        p.moveTo(x, y);
        open = true;
    }

    function parseStems() {
        let hasWidthArg;

        // The number of stem operators on the stack is always even.
        // If the value is uneven, that means a width is specified.
        hasWidthArg = stack.length % 2 !== 0;
        if (hasWidthArg && !haveWidth) {
            width = stack.shift() + nominalWidthX;
        }

        nStems += stack.length >> 1;
        stack.length = 0;
        haveWidth = true;
    }

    function parse$$1(code) {
        let b1;
        let b2;
        let b3;
        let b4;
        let codeIndex;
        let subrCode;
        let jpx;
        let jpy;
        let c3x;
        let c3y;
        let c4x;
        let c4y;

        let i = 0;
        while (i < code.length) {
            let v = code[i];
            i += 1;
            switch (v) {
                case 1: // hstem
                    parseStems();
                    break;
                case 3: // vstem
                    parseStems();
                    break;
                case 4: // vmoveto
                    if (stack.length > 1 && !haveWidth) {
                        width = stack.shift() + nominalWidthX;
                        haveWidth = true;
                    }

                    y += stack.pop();
                    newContour(x, y);
                    break;
                case 5: // rlineto
                    while (stack.length > 0) {
                        x += stack.shift();
                        y += stack.shift();
                        p.lineTo(x, y);
                    }

                    break;
                case 6: // hlineto
                    while (stack.length > 0) {
                        x += stack.shift();
                        p.lineTo(x, y);
                        if (stack.length === 0) {
                            break;
                        }

                        y += stack.shift();
                        p.lineTo(x, y);
                    }

                    break;
                case 7: // vlineto
                    while (stack.length > 0) {
                        y += stack.shift();
                        p.lineTo(x, y);
                        if (stack.length === 0) {
                            break;
                        }

                        x += stack.shift();
                        p.lineTo(x, y);
                    }

                    break;
                case 8: // rrcurveto
                    while (stack.length > 0) {
                        c1x = x + stack.shift();
                        c1y = y + stack.shift();
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        x = c2x + stack.shift();
                        y = c2y + stack.shift();
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    }

                    break;
                case 10: // callsubr
                    codeIndex = stack.pop() + subrsBias;
                    subrCode = subrs[codeIndex];
                    if (subrCode) {
                        parse$$1(subrCode);
                    }

                    break;
                case 11: // return
                    return;
                case 12: // flex operators
                    v = code[i];
                    i += 1;
                    switch (v) {
                        case 35: // flex
                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 dx6 dy6 fd flex (12 35) |-
                            c1x = x   + stack.shift();    // dx1
                            c1y = y   + stack.shift();    // dy1
                            c2x = c1x + stack.shift();    // dx2
                            c2y = c1y + stack.shift();    // dy2
                            jpx = c2x + stack.shift();    // dx3
                            jpy = c2y + stack.shift();    // dy3
                            c3x = jpx + stack.shift();    // dx4
                            c3y = jpy + stack.shift();    // dy4
                            c4x = c3x + stack.shift();    // dx5
                            c4y = c3y + stack.shift();    // dy5
                            x = c4x   + stack.shift();    // dx6
                            y = c4y   + stack.shift();    // dy6
                            stack.shift();                // flex depth
                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                            p.curveTo(c3x, c3y, c4x, c4y, x, y);
                            break;
                        case 34: // hflex
                            // |- dx1 dx2 dy2 dx3 dx4 dx5 dx6 hflex (12 34) |-
                            c1x = x   + stack.shift();    // dx1
                            c1y = y;                      // dy1
                            c2x = c1x + stack.shift();    // dx2
                            c2y = c1y + stack.shift();    // dy2
                            jpx = c2x + stack.shift();    // dx3
                            jpy = c2y;                    // dy3
                            c3x = jpx + stack.shift();    // dx4
                            c3y = c2y;                    // dy4
                            c4x = c3x + stack.shift();    // dx5
                            c4y = y;                      // dy5
                            x = c4x + stack.shift();      // dx6
                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                            p.curveTo(c3x, c3y, c4x, c4y, x, y);
                            break;
                        case 36: // hflex1
                            // |- dx1 dy1 dx2 dy2 dx3 dx4 dx5 dy5 dx6 hflex1 (12 36) |-
                            c1x = x   + stack.shift();    // dx1
                            c1y = y   + stack.shift();    // dy1
                            c2x = c1x + stack.shift();    // dx2
                            c2y = c1y + stack.shift();    // dy2
                            jpx = c2x + stack.shift();    // dx3
                            jpy = c2y;                    // dy3
                            c3x = jpx + stack.shift();    // dx4
                            c3y = c2y;                    // dy4
                            c4x = c3x + stack.shift();    // dx5
                            c4y = c3y + stack.shift();    // dy5
                            x = c4x + stack.shift();      // dx6
                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                            p.curveTo(c3x, c3y, c4x, c4y, x, y);
                            break;
                        case 37: // flex1
                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 d6 flex1 (12 37) |-
                            c1x = x   + stack.shift();    // dx1
                            c1y = y   + stack.shift();    // dy1
                            c2x = c1x + stack.shift();    // dx2
                            c2y = c1y + stack.shift();    // dy2
                            jpx = c2x + stack.shift();    // dx3
                            jpy = c2y + stack.shift();    // dy3
                            c3x = jpx + stack.shift();    // dx4
                            c3y = jpy + stack.shift();    // dy4
                            c4x = c3x + stack.shift();    // dx5
                            c4y = c3y + stack.shift();    // dy5
                            if (Math.abs(c4x - x) > Math.abs(c4y - y)) {
                                x = c4x + stack.shift();
                            } else {
                                y = c4y + stack.shift();
                            }

                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                            p.curveTo(c3x, c3y, c4x, c4y, x, y);
                            break;
                        default:
                            console.log('Glyph ' + glyph.index + ': unknown operator ' + 1200 + v);
                            stack.length = 0;
                    }
                    break;
                case 14: // endchar
                    if (stack.length > 0 && !haveWidth) {
                        width = stack.shift() + nominalWidthX;
                        haveWidth = true;
                    }

                    if (open) {
                        p.closePath();
                        open = false;
                    }

                    break;
                case 18: // hstemhm
                    parseStems();
                    break;
                case 19: // hintmask
                case 20: // cntrmask
                    parseStems();
                    i += (nStems + 7) >> 3;
                    break;
                case 21: // rmoveto
                    if (stack.length > 2 && !haveWidth) {
                        width = stack.shift() + nominalWidthX;
                        haveWidth = true;
                    }

                    y += stack.pop();
                    x += stack.pop();
                    newContour(x, y);
                    break;
                case 22: // hmoveto
                    if (stack.length > 1 && !haveWidth) {
                        width = stack.shift() + nominalWidthX;
                        haveWidth = true;
                    }

                    x += stack.pop();
                    newContour(x, y);
                    break;
                case 23: // vstemhm
                    parseStems();
                    break;
                case 24: // rcurveline
                    while (stack.length > 2) {
                        c1x = x + stack.shift();
                        c1y = y + stack.shift();
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        x = c2x + stack.shift();
                        y = c2y + stack.shift();
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    }

                    x += stack.shift();
                    y += stack.shift();
                    p.lineTo(x, y);
                    break;
                case 25: // rlinecurve
                    while (stack.length > 6) {
                        x += stack.shift();
                        y += stack.shift();
                        p.lineTo(x, y);
                    }

                    c1x = x + stack.shift();
                    c1y = y + stack.shift();
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    x = c2x + stack.shift();
                    y = c2y + stack.shift();
                    p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    break;
                case 26: // vvcurveto
                    if (stack.length % 2) {
                        x += stack.shift();
                    }

                    while (stack.length > 0) {
                        c1x = x;
                        c1y = y + stack.shift();
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        x = c2x;
                        y = c2y + stack.shift();
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    }

                    break;
                case 27: // hhcurveto
                    if (stack.length % 2) {
                        y += stack.shift();
                    }

                    while (stack.length > 0) {
                        c1x = x + stack.shift();
                        c1y = y;
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        x = c2x + stack.shift();
                        y = c2y;
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    }

                    break;
                case 28: // shortint
                    b1 = code[i];
                    b2 = code[i + 1];
                    stack.push(((b1 << 24) | (b2 << 16)) >> 16);
                    i += 2;
                    break;
                case 29: // callgsubr
                    codeIndex = stack.pop() + font.gsubrsBias;
                    subrCode = font.gsubrs[codeIndex];
                    if (subrCode) {
                        parse$$1(subrCode);
                    }

                    break;
                case 30: // vhcurveto
                    while (stack.length > 0) {
                        c1x = x;
                        c1y = y + stack.shift();
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        x = c2x + stack.shift();
                        y = c2y + (stack.length === 1 ? stack.shift() : 0);
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        if (stack.length === 0) {
                            break;
                        }

                        c1x = x + stack.shift();
                        c1y = y;
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        y = c2y + stack.shift();
                        x = c2x + (stack.length === 1 ? stack.shift() : 0);
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    }

                    break;
                case 31: // hvcurveto
                    while (stack.length > 0) {
                        c1x = x + stack.shift();
                        c1y = y;
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        y = c2y + stack.shift();
                        x = c2x + (stack.length === 1 ? stack.shift() : 0);
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        if (stack.length === 0) {
                            break;
                        }

                        c1x = x;
                        c1y = y + stack.shift();
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        x = c2x + stack.shift();
                        y = c2y + (stack.length === 1 ? stack.shift() : 0);
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    }

                    break;
                default:
                    if (v < 32) {
                        console.log('Glyph ' + glyph.index + ': unknown operator ' + v);
                    } else if (v < 247) {
                        stack.push(v - 139);
                    } else if (v < 251) {
                        b1 = code[i];
                        i += 1;
                        stack.push((v - 247) * 256 + b1 + 108);
                    } else if (v < 255) {
                        b1 = code[i];
                        i += 1;
                        stack.push(-(v - 251) * 256 - b1 - 108);
                    } else {
                        b1 = code[i];
                        b2 = code[i + 1];
                        b3 = code[i + 2];
                        b4 = code[i + 3];
                        i += 4;
                        stack.push(((b1 << 24) | (b2 << 16) | (b3 << 8) | b4) / 65536);
                    }
            }
        }
    }

    parse$$1(code);

    glyph.advanceWidth = width;
    return p;
}

function parseCFFFDSelect(data, start, nGlyphs, fdArrayCount) {
    const fdSelect = [];
    let fdIndex;
    const parser = new parse.Parser(data, start);
    const format = parser.parseCard8();
    if (format === 0) {
        // Simple list of nGlyphs elements
        for (let iGid = 0; iGid < nGlyphs; iGid++) {
            fdIndex = parser.parseCard8();
            if (fdIndex >= fdArrayCount) {
                throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');
            }
            fdSelect.push(fdIndex);
        }
    } else if (format === 3) {
        // Ranges
        const nRanges = parser.parseCard16();
        let first = parser.parseCard16();
        if (first !== 0) {
            throw new Error('CFF Table CID Font FDSelect format 3 range has bad initial GID ' + first);
        }
        let next;
        for (let iRange = 0; iRange < nRanges; iRange++) {
            fdIndex = parser.parseCard8();
            next = parser.parseCard16();
            if (fdIndex >= fdArrayCount) {
                throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');
            }
            if (next > nGlyphs) {
                throw new Error('CFF Table CID Font FDSelect format 3 range has bad GID ' + next);
            }
            for (; first < next; first++) {
                fdSelect.push(fdIndex);
            }
            first = next;
        }
        if (next !== nGlyphs) {
            throw new Error('CFF Table CID Font FDSelect format 3 range has bad final GID ' + next);
        }
    } else {
        throw new Error('CFF Table CID Font FDSelect table has unsupported format ' + format);
    }
    return fdSelect;
}

// Parse the `CFF` table, which contains the glyph outlines in PostScript format.
function parseCFFTable(data, start, font) {
    font.tables.cff = {};
    const header = parseCFFHeader(data, start);
    const nameIndex = parseCFFIndex(data, header.endOffset, parse.bytesToString);
    const topDictIndex = parseCFFIndex(data, nameIndex.endOffset);
    const stringIndex = parseCFFIndex(data, topDictIndex.endOffset, parse.bytesToString);
    const globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);
    font.gsubrs = globalSubrIndex.objects;
    font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);

    const topDictArray = gatherCFFTopDicts(data, start, topDictIndex.objects, stringIndex.objects);
    if (topDictArray.length !== 1) {
        throw new Error('CFF table has too many fonts in \'FontSet\' - count of fonts NameIndex.length = ' + topDictArray.length);
    }

    const topDict = topDictArray[0];
    font.tables.cff.topDict = topDict;

    if (topDict._privateDict) {
        font.defaultWidthX = topDict._privateDict.defaultWidthX;
        font.nominalWidthX = topDict._privateDict.nominalWidthX;
    }

    if (topDict.ros[0] !== undefined && topDict.ros[1] !== undefined) {
        font.isCIDFont = true;
    }

    if (font.isCIDFont) {
        let fdArrayOffset = topDict.fdArray;
        let fdSelectOffset = topDict.fdSelect;
        if (fdArrayOffset === 0 || fdSelectOffset === 0) {
            throw new Error('Font is marked as a CID font, but FDArray and/or FDSelect information is missing');
        }
        fdArrayOffset += start;
        const fdArrayIndex = parseCFFIndex(data, fdArrayOffset);
        const fdArray = gatherCFFTopDicts(data, start, fdArrayIndex.objects, stringIndex.objects);
        topDict._fdArray = fdArray;
        fdSelectOffset += start;
        topDict._fdSelect = parseCFFFDSelect(data, fdSelectOffset, font.numGlyphs, fdArray.length);
    }

    const privateDictOffset = start + topDict.private[1];
    const privateDict = parseCFFPrivateDict(data, privateDictOffset, topDict.private[0], stringIndex.objects);
    font.defaultWidthX = privateDict.defaultWidthX;
    font.nominalWidthX = privateDict.nominalWidthX;

    if (privateDict.subrs !== 0) {
        const subrOffset = privateDictOffset + privateDict.subrs;
        const subrIndex = parseCFFIndex(data, subrOffset);
        font.subrs = subrIndex.objects;
        font.subrsBias = calcCFFSubroutineBias(font.subrs);
    } else {
        font.subrs = [];
        font.subrsBias = 0;
    }

    // Offsets in the top dict are relative to the beginning of the CFF data, so add the CFF start offset.
    const charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);
    font.nGlyphs = charStringsIndex.objects.length;

    const charset = parseCFFCharset(data, start + topDict.charset, font.nGlyphs, stringIndex.objects);
    if (topDict.encoding === 0) { // Standard encoding
        font.cffEncoding = new CffEncoding(cffStandardEncoding, charset);
    } else if (topDict.encoding === 1) { // Expert encoding
        font.cffEncoding = new CffEncoding(cffExpertEncoding, charset);
    } else {
        font.cffEncoding = parseCFFEncoding(data, start + topDict.encoding, charset);
    }

    // Prefer the CMAP encoding to the CFF encoding.
    font.encoding = font.encoding || font.cffEncoding;

    font.glyphs = new glyphset.GlyphSet(font);
    for (let i = 0; i < font.nGlyphs; i += 1) {
        const charString = charStringsIndex.objects[i];
        font.glyphs.push(i, glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString));
    }
}

// Convert a string to a String ID (SID).
// The list of strings is modified in place.
function encodeString(s, strings) {
    let sid;

    // Is the string in the CFF standard strings?
    let i = cffStandardStrings.indexOf(s);
    if (i >= 0) {
        sid = i;
    }

    // Is the string already in the string index?
    i = strings.indexOf(s);
    if (i >= 0) {
        sid = i + cffStandardStrings.length;
    } else {
        sid = cffStandardStrings.length + strings.length;
        strings.push(s);
    }

    return sid;
}

function makeHeader() {
    return new table.Record('Header', [
        {name: 'major', type: 'Card8', value: 1},
        {name: 'minor', type: 'Card8', value: 0},
        {name: 'hdrSize', type: 'Card8', value: 4},
        {name: 'major', type: 'Card8', value: 1}
    ]);
}

function makeNameIndex(fontNames) {
    const t = new table.Record('Name INDEX', [
        {name: 'names', type: 'INDEX', value: []}
    ]);
    t.names = [];
    for (let i = 0; i < fontNames.length; i += 1) {
        t.names.push({name: 'name_' + i, type: 'NAME', value: fontNames[i]});
    }

    return t;
}

// Given a dictionary's metadata, create a DICT structure.
function makeDict(meta, attrs, strings) {
    const m = {};
    for (let i = 0; i < meta.length; i += 1) {
        const entry = meta[i];
        let value = attrs[entry.name];
        if (value !== undefined && !equals$1(value, entry.value)) {
            if (entry.type === 'SID') {
                value = encodeString(value, strings);
            }

            m[entry.op] = {name: entry.name, type: entry.type, value: value};
        }
    }

    return m;
}

// The Top DICT houses the global font attributes.
function makeTopDict(attrs, strings) {
    const t = new table.Record('Top DICT', [
        {name: 'dict', type: 'DICT', value: {}}
    ]);
    t.dict = makeDict(TOP_DICT_META, attrs, strings);
    return t;
}

function makeTopDictIndex(topDict) {
    const t = new table.Record('Top DICT INDEX', [
        {name: 'topDicts', type: 'INDEX', value: []}
    ]);
    t.topDicts = [{name: 'topDict_0', type: 'TABLE', value: topDict}];
    return t;
}

function makeStringIndex(strings) {
    const t = new table.Record('String INDEX', [
        {name: 'strings', type: 'INDEX', value: []}
    ]);
    t.strings = [];
    for (let i = 0; i < strings.length; i += 1) {
        t.strings.push({name: 'string_' + i, type: 'STRING', value: strings[i]});
    }

    return t;
}

function makeGlobalSubrIndex() {
    // Currently we don't use subroutines.
    return new table.Record('Global Subr INDEX', [
        {name: 'subrs', type: 'INDEX', value: []}
    ]);
}

function makeCharsets(glyphNames, strings) {
    const t = new table.Record('Charsets', [
        {name: 'format', type: 'Card8', value: 0}
    ]);
    for (let i = 0; i < glyphNames.length; i += 1) {
        const glyphName = glyphNames[i];
        const glyphSID = encodeString(glyphName, strings);
        t.fields.push({name: 'glyph_' + i, type: 'SID', value: glyphSID});
    }

    return t;
}

function glyphToOps(glyph) {
    const ops = [];
    const path = glyph.path;
    ops.push({name: 'width', type: 'NUMBER', value: glyph.advanceWidth});
    let x = 0;
    let y = 0;
    for (let i = 0; i < path.commands.length; i += 1) {
        let dx;
        let dy;
        let cmd = path.commands[i];
        if (cmd.type === 'Q') {
            // CFF only supports bézier curves, so convert the quad to a bézier.
            const _13 = 1 / 3;
            const _23 = 2 / 3;

            // We're going to create a new command so we don't change the original path.
            cmd = {
                type: 'C',
                x: cmd.x,
                y: cmd.y,
                x1: _13 * x + _23 * cmd.x1,
                y1: _13 * y + _23 * cmd.y1,
                x2: _13 * cmd.x + _23 * cmd.x1,
                y2: _13 * cmd.y + _23 * cmd.y1
            };
        }

        if (cmd.type === 'M') {
            dx = Math.round(cmd.x - x);
            dy = Math.round(cmd.y - y);
            ops.push({name: 'dx', type: 'NUMBER', value: dx});
            ops.push({name: 'dy', type: 'NUMBER', value: dy});
            ops.push({name: 'rmoveto', type: 'OP', value: 21});
            x = Math.round(cmd.x);
            y = Math.round(cmd.y);
        } else if (cmd.type === 'L') {
            dx = Math.round(cmd.x - x);
            dy = Math.round(cmd.y - y);
            ops.push({name: 'dx', type: 'NUMBER', value: dx});
            ops.push({name: 'dy', type: 'NUMBER', value: dy});
            ops.push({name: 'rlineto', type: 'OP', value: 5});
            x = Math.round(cmd.x);
            y = Math.round(cmd.y);
        } else if (cmd.type === 'C') {
            const dx1 = Math.round(cmd.x1 - x);
            const dy1 = Math.round(cmd.y1 - y);
            const dx2 = Math.round(cmd.x2 - cmd.x1);
            const dy2 = Math.round(cmd.y2 - cmd.y1);
            dx = Math.round(cmd.x - cmd.x2);
            dy = Math.round(cmd.y - cmd.y2);
            ops.push({name: 'dx1', type: 'NUMBER', value: dx1});
            ops.push({name: 'dy1', type: 'NUMBER', value: dy1});
            ops.push({name: 'dx2', type: 'NUMBER', value: dx2});
            ops.push({name: 'dy2', type: 'NUMBER', value: dy2});
            ops.push({name: 'dx', type: 'NUMBER', value: dx});
            ops.push({name: 'dy', type: 'NUMBER', value: dy});
            ops.push({name: 'rrcurveto', type: 'OP', value: 8});
            x = Math.round(cmd.x);
            y = Math.round(cmd.y);
        }

        // Contours are closed automatically.
    }

    ops.push({name: 'endchar', type: 'OP', value: 14});
    return ops;
}

function makeCharStringsIndex(glyphs) {
    const t = new table.Record('CharStrings INDEX', [
        {name: 'charStrings', type: 'INDEX', value: []}
    ]);

    for (let i = 0; i < glyphs.length; i += 1) {
        const glyph = glyphs.get(i);
        const ops = glyphToOps(glyph);
        t.charStrings.push({name: glyph.name, type: 'CHARSTRING', value: ops});
    }

    return t;
}

function makePrivateDict(attrs, strings) {
    const t = new table.Record('Private DICT', [
        {name: 'dict', type: 'DICT', value: {}}
    ]);
    t.dict = makeDict(PRIVATE_DICT_META, attrs, strings);
    return t;
}

function makeCFFTable(glyphs, options) {
    const t = new table.Table('CFF ', [
        {name: 'header', type: 'RECORD'},
        {name: 'nameIndex', type: 'RECORD'},
        {name: 'topDictIndex', type: 'RECORD'},
        {name: 'stringIndex', type: 'RECORD'},
        {name: 'globalSubrIndex', type: 'RECORD'},
        {name: 'charsets', type: 'RECORD'},
        {name: 'charStringsIndex', type: 'RECORD'},
        {name: 'privateDict', type: 'RECORD'}
    ]);

    const fontScale = 1 / options.unitsPerEm;
    // We use non-zero values for the offsets so that the DICT encodes them.
    // This is important because the size of the Top DICT plays a role in offset calculation,
    // and the size shouldn't change after we've written correct offsets.
    const attrs = {
        version: options.version,
        fullName: options.fullName,
        familyName: options.familyName,
        weight: options.weightName,
        fontBBox: options.fontBBox || [0, 0, 0, 0],
        fontMatrix: [fontScale, 0, 0, fontScale, 0, 0],
        charset: 999,
        encoding: 0,
        charStrings: 999,
        private: [0, 999]
    };

    const privateAttrs = {};

    const glyphNames = [];
    let glyph;

    // Skip first glyph (.notdef)
    for (let i = 1; i < glyphs.length; i += 1) {
        glyph = glyphs.get(i);
        glyphNames.push(glyph.name);
    }

    const strings = [];

    t.header = makeHeader();
    t.nameIndex = makeNameIndex([options.postScriptName]);
    let topDict = makeTopDict(attrs, strings);
    t.topDictIndex = makeTopDictIndex(topDict);
    t.globalSubrIndex = makeGlobalSubrIndex();
    t.charsets = makeCharsets(glyphNames, strings);
    t.charStringsIndex = makeCharStringsIndex(glyphs);
    t.privateDict = makePrivateDict(privateAttrs, strings);

    // Needs to come at the end, to encode all custom strings used in the font.
    t.stringIndex = makeStringIndex(strings);

    const startOffset = t.header.sizeOf() +
        t.nameIndex.sizeOf() +
        t.topDictIndex.sizeOf() +
        t.stringIndex.sizeOf() +
        t.globalSubrIndex.sizeOf();
    attrs.charset = startOffset;

    // We use the CFF standard encoding; proper encoding will be handled in cmap.
    attrs.encoding = 0;
    attrs.charStrings = attrs.charset + t.charsets.sizeOf();
    attrs.private[1] = attrs.charStrings + t.charStringsIndex.sizeOf();

    // Recreate the Top DICT INDEX with the correct offsets.
    topDict = makeTopDict(attrs, strings);
    t.topDictIndex = makeTopDictIndex(topDict);

    return t;
}

var cff = { parse: parseCFFTable, make: makeCFFTable };

// The `head` table contains global information about the font.

// Parse the header `head` table
function parseHeadTable(data, start) {
    const head = {};
    const p = new parse.Parser(data, start);
    head.version = p.parseVersion();
    head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;
    head.checkSumAdjustment = p.parseULong();
    head.magicNumber = p.parseULong();
    check.argument(head.magicNumber === 0x5F0F3CF5, 'Font header has wrong magic number.');
    head.flags = p.parseUShort();
    head.unitsPerEm = p.parseUShort();
    head.created = p.parseLongDateTime();
    head.modified = p.parseLongDateTime();
    head.xMin = p.parseShort();
    head.yMin = p.parseShort();
    head.xMax = p.parseShort();
    head.yMax = p.parseShort();
    head.macStyle = p.parseUShort();
    head.lowestRecPPEM = p.parseUShort();
    head.fontDirectionHint = p.parseShort();
    head.indexToLocFormat = p.parseShort();
    head.glyphDataFormat = p.parseShort();
    return head;
}

function makeHeadTable(options) {
    // Apple Mac timestamp epoch is 01/01/1904 not 01/01/1970
    const timestamp = Math.round(new Date().getTime() / 1000) + 2082844800;
    let createdTimestamp = timestamp;

    if (options.createdTimestamp) {
        createdTimestamp = options.createdTimestamp + 2082844800;
    }

    return new table.Table('head', [
        {name: 'version', type: 'FIXED', value: 0x00010000},
        {name: 'fontRevision', type: 'FIXED', value: 0x00010000},
        {name: 'checkSumAdjustment', type: 'ULONG', value: 0},
        {name: 'magicNumber', type: 'ULONG', value: 0x5F0F3CF5},
        {name: 'flags', type: 'USHORT', value: 0},
        {name: 'unitsPerEm', type: 'USHORT', value: 1000},
        {name: 'created', type: 'LONGDATETIME', value: createdTimestamp},
        {name: 'modified', type: 'LONGDATETIME', value: timestamp},
        {name: 'xMin', type: 'SHORT', value: 0},
        {name: 'yMin', type: 'SHORT', value: 0},
        {name: 'xMax', type: 'SHORT', value: 0},
        {name: 'yMax', type: 'SHORT', value: 0},
        {name: 'macStyle', type: 'USHORT', value: 0},
        {name: 'lowestRecPPEM', type: 'USHORT', value: 0},
        {name: 'fontDirectionHint', type: 'SHORT', value: 2},
        {name: 'indexToLocFormat', type: 'SHORT', value: 0},
        {name: 'glyphDataFormat', type: 'SHORT', value: 0}
    ], options);
}

var head = { parse: parseHeadTable, make: makeHeadTable };

// The `hhea` table contains information for horizontal layout.

// Parse the horizontal header `hhea` table
function parseHheaTable(data, start) {
    const hhea = {};
    const p = new parse.Parser(data, start);
    hhea.version = p.parseVersion();
    hhea.ascender = p.parseShort();
    hhea.descender = p.parseShort();
    hhea.lineGap = p.parseShort();
    hhea.advanceWidthMax = p.parseUShort();
    hhea.minLeftSideBearing = p.parseShort();
    hhea.minRightSideBearing = p.parseShort();
    hhea.xMaxExtent = p.parseShort();
    hhea.caretSlopeRise = p.parseShort();
    hhea.caretSlopeRun = p.parseShort();
    hhea.caretOffset = p.parseShort();
    p.relativeOffset += 8;
    hhea.metricDataFormat = p.parseShort();
    hhea.numberOfHMetrics = p.parseUShort();
    return hhea;
}

function makeHheaTable(options) {
    return new table.Table('hhea', [
        {name: 'version', type: 'FIXED', value: 0x00010000},
        {name: 'ascender', type: 'FWORD', value: 0},
        {name: 'descender', type: 'FWORD', value: 0},
        {name: 'lineGap', type: 'FWORD', value: 0},
        {name: 'advanceWidthMax', type: 'UFWORD', value: 0},
        {name: 'minLeftSideBearing', type: 'FWORD', value: 0},
        {name: 'minRightSideBearing', type: 'FWORD', value: 0},
        {name: 'xMaxExtent', type: 'FWORD', value: 0},
        {name: 'caretSlopeRise', type: 'SHORT', value: 1},
        {name: 'caretSlopeRun', type: 'SHORT', value: 0},
        {name: 'caretOffset', type: 'SHORT', value: 0},
        {name: 'reserved1', type: 'SHORT', value: 0},
        {name: 'reserved2', type: 'SHORT', value: 0},
        {name: 'reserved3', type: 'SHORT', value: 0},
        {name: 'reserved4', type: 'SHORT', value: 0},
        {name: 'metricDataFormat', type: 'SHORT', value: 0},
        {name: 'numberOfHMetrics', type: 'USHORT', value: 0}
    ], options);
}

var hhea = { parse: parseHheaTable, make: makeHheaTable };

// The `hmtx` table contains the horizontal metrics for all glyphs.

// Parse the `hmtx` table, which contains the horizontal metrics for all glyphs.
// This function augments the glyph array, adding the advanceWidth and leftSideBearing to each glyph.
function parseHmtxTable(data, start, numMetrics, numGlyphs, glyphs) {
    let advanceWidth;
    let leftSideBearing;
    const p = new parse.Parser(data, start);
    for (let i = 0; i < numGlyphs; i += 1) {
        // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.
        if (i < numMetrics) {
            advanceWidth = p.parseUShort();
            leftSideBearing = p.parseShort();
        }

        const glyph = glyphs.get(i);
        glyph.advanceWidth = advanceWidth;
        glyph.leftSideBearing = leftSideBearing;
    }
}

function makeHmtxTable(glyphs) {
    const t = new table.Table('hmtx', []);
    for (let i = 0; i < glyphs.length; i += 1) {
        const glyph = glyphs.get(i);
        const advanceWidth = glyph.advanceWidth || 0;
        const leftSideBearing = glyph.leftSideBearing || 0;
        t.fields.push({name: 'advanceWidth_' + i, type: 'USHORT', value: advanceWidth});
        t.fields.push({name: 'leftSideBearing_' + i, type: 'SHORT', value: leftSideBearing});
    }

    return t;
}

var hmtx = { parse: parseHmtxTable, make: makeHmtxTable };

// The `ltag` table stores IETF BCP-47 language tags. It allows supporting

function makeLtagTable(tags) {
    const result = new table.Table('ltag', [
        {name: 'version', type: 'ULONG', value: 1},
        {name: 'flags', type: 'ULONG', value: 0},
        {name: 'numTags', type: 'ULONG', value: tags.length}
    ]);

    let stringPool = '';
    const stringPoolOffset = 12 + tags.length * 4;
    for (let i = 0; i < tags.length; ++i) {
        let pos = stringPool.indexOf(tags[i]);
        if (pos < 0) {
            pos = stringPool.length;
            stringPool += tags[i];
        }

        result.fields.push({name: 'offset ' + i, type: 'USHORT', value: stringPoolOffset + pos});
        result.fields.push({name: 'length ' + i, type: 'USHORT', value: tags[i].length});
    }

    result.fields.push({name: 'stringPool', type: 'CHARARRAY', value: stringPool});
    return result;
}

function parseLtagTable(data, start) {
    const p = new parse.Parser(data, start);
    const tableVersion = p.parseULong();
    check.argument(tableVersion === 1, 'Unsupported ltag table version.');
    // The 'ltag' specification does not define any flags; skip the field.
    p.skip('uLong', 1);
    const numTags = p.parseULong();

    const tags = [];
    for (let i = 0; i < numTags; i++) {
        let tag = '';
        const offset = start + p.parseUShort();
        const length = p.parseUShort();
        for (let j = offset; j < offset + length; ++j) {
            tag += String.fromCharCode(data.getInt8(j));
        }

        tags.push(tag);
    }

    return tags;
}

var ltag = { make: makeLtagTable, parse: parseLtagTable };

// The `maxp` table establishes the memory requirements for the font.

// Parse the maximum profile `maxp` table.
function parseMaxpTable(data, start) {
    const maxp = {};
    const p = new parse.Parser(data, start);
    maxp.version = p.parseVersion();
    maxp.numGlyphs = p.parseUShort();
    if (maxp.version === 1.0) {
        maxp.maxPoints = p.parseUShort();
        maxp.maxContours = p.parseUShort();
        maxp.maxCompositePoints = p.parseUShort();
        maxp.maxCompositeContours = p.parseUShort();
        maxp.maxZones = p.parseUShort();
        maxp.maxTwilightPoints = p.parseUShort();
        maxp.maxStorage = p.parseUShort();
        maxp.maxFunctionDefs = p.parseUShort();
        maxp.maxInstructionDefs = p.parseUShort();
        maxp.maxStackElements = p.parseUShort();
        maxp.maxSizeOfInstructions = p.parseUShort();
        maxp.maxComponentElements = p.parseUShort();
        maxp.maxComponentDepth = p.parseUShort();
    }

    return maxp;
}

function makeMaxpTable(numGlyphs) {
    return new table.Table('maxp', [
        {name: 'version', type: 'FIXED', value: 0x00005000},
        {name: 'numGlyphs', type: 'USHORT', value: numGlyphs}
    ]);
}

var maxp = { parse: parseMaxpTable, make: makeMaxpTable };

// The `name` naming table.

// NameIDs for the name table.
const nameTableNames = [
    'copyright',              // 0
    'fontFamily',             // 1
    'fontSubfamily',          // 2
    'uniqueID',               // 3
    'fullName',               // 4
    'version',                // 5
    'postScriptName',         // 6
    'trademark',              // 7
    'manufacturer',           // 8
    'designer',               // 9
    'description',            // 10
    'manufacturerURL',        // 11
    'designerURL',            // 12
    'license',                // 13
    'licenseURL',             // 14
    'reserved',               // 15
    'preferredFamily',        // 16
    'preferredSubfamily',     // 17
    'compatibleFullName',     // 18
    'sampleText',             // 19
    'postScriptFindFontName', // 20
    'wwsFamily',              // 21
    'wwsSubfamily'            // 22
];

const macLanguages = {
    0: 'en',
    1: 'fr',
    2: 'de',
    3: 'it',
    4: 'nl',
    5: 'sv',
    6: 'es',
    7: 'da',
    8: 'pt',
    9: 'no',
    10: 'he',
    11: 'ja',
    12: 'ar',
    13: 'fi',
    14: 'el',
    15: 'is',
    16: 'mt',
    17: 'tr',
    18: 'hr',
    19: 'zh-Hant',
    20: 'ur',
    21: 'hi',
    22: 'th',
    23: 'ko',
    24: 'lt',
    25: 'pl',
    26: 'hu',
    27: 'es',
    28: 'lv',
    29: 'se',
    30: 'fo',
    31: 'fa',
    32: 'ru',
    33: 'zh',
    34: 'nl-BE',
    35: 'ga',
    36: 'sq',
    37: 'ro',
    38: 'cz',
    39: 'sk',
    40: 'si',
    41: 'yi',
    42: 'sr',
    43: 'mk',
    44: 'bg',
    45: 'uk',
    46: 'be',
    47: 'uz',
    48: 'kk',
    49: 'az-Cyrl',
    50: 'az-Arab',
    51: 'hy',
    52: 'ka',
    53: 'mo',
    54: 'ky',
    55: 'tg',
    56: 'tk',
    57: 'mn-CN',
    58: 'mn',
    59: 'ps',
    60: 'ks',
    61: 'ku',
    62: 'sd',
    63: 'bo',
    64: 'ne',
    65: 'sa',
    66: 'mr',
    67: 'bn',
    68: 'as',
    69: 'gu',
    70: 'pa',
    71: 'or',
    72: 'ml',
    73: 'kn',
    74: 'ta',
    75: 'te',
    76: 'si',
    77: 'my',
    78: 'km',
    79: 'lo',
    80: 'vi',
    81: 'id',
    82: 'tl',
    83: 'ms',
    84: 'ms-Arab',
    85: 'am',
    86: 'ti',
    87: 'om',
    88: 'so',
    89: 'sw',
    90: 'rw',
    91: 'rn',
    92: 'ny',
    93: 'mg',
    94: 'eo',
    128: 'cy',
    129: 'eu',
    130: 'ca',
    131: 'la',
    132: 'qu',
    133: 'gn',
    134: 'ay',
    135: 'tt',
    136: 'ug',
    137: 'dz',
    138: 'jv',
    139: 'su',
    140: 'gl',
    141: 'af',
    142: 'br',
    143: 'iu',
    144: 'gd',
    145: 'gv',
    146: 'ga',
    147: 'to',
    148: 'el-polyton',
    149: 'kl',
    150: 'az',
    151: 'nn'
};

// MacOS language ID → MacOS script ID
//
// Note that the script ID is not sufficient to determine what encoding
// to use in TrueType files. For some languages, MacOS used a modification
// of a mainstream script. For example, an Icelandic name would be stored
// with smRoman in the TrueType naming table, but the actual encoding
// is a special Icelandic version of the normal Macintosh Roman encoding.
// As another example, Inuktitut uses an 8-bit encoding for Canadian Aboriginal
// Syllables but MacOS had run out of available script codes, so this was
// done as a (pretty radical) "modification" of Ethiopic.
//
// http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt
const macLanguageToScript = {
    0: 0,  // langEnglish → smRoman
    1: 0,  // langFrench → smRoman
    2: 0,  // langGerman → smRoman
    3: 0,  // langItalian → smRoman
    4: 0,  // langDutch → smRoman
    5: 0,  // langSwedish → smRoman
    6: 0,  // langSpanish → smRoman
    7: 0,  // langDanish → smRoman
    8: 0,  // langPortuguese → smRoman
    9: 0,  // langNorwegian → smRoman
    10: 5,  // langHebrew → smHebrew
    11: 1,  // langJapanese → smJapanese
    12: 4,  // langArabic → smArabic
    13: 0,  // langFinnish → smRoman
    14: 6,  // langGreek → smGreek
    15: 0,  // langIcelandic → smRoman (modified)
    16: 0,  // langMaltese → smRoman
    17: 0,  // langTurkish → smRoman (modified)
    18: 0,  // langCroatian → smRoman (modified)
    19: 2,  // langTradChinese → smTradChinese
    20: 4,  // langUrdu → smArabic
    21: 9,  // langHindi → smDevanagari
    22: 21,  // langThai → smThai
    23: 3,  // langKorean → smKorean
    24: 29,  // langLithuanian → smCentralEuroRoman
    25: 29,  // langPolish → smCentralEuroRoman
    26: 29,  // langHungarian → smCentralEuroRoman
    27: 29,  // langEstonian → smCentralEuroRoman
    28: 29,  // langLatvian → smCentralEuroRoman
    29: 0,  // langSami → smRoman
    30: 0,  // langFaroese → smRoman (modified)
    31: 4,  // langFarsi → smArabic (modified)
    32: 7,  // langRussian → smCyrillic
    33: 25,  // langSimpChinese → smSimpChinese
    34: 0,  // langFlemish → smRoman
    35: 0,  // langIrishGaelic → smRoman (modified)
    36: 0,  // langAlbanian → smRoman
    37: 0,  // langRomanian → smRoman (modified)
    38: 29,  // langCzech → smCentralEuroRoman
    39: 29,  // langSlovak → smCentralEuroRoman
    40: 0,  // langSlovenian → smRoman (modified)
    41: 5,  // langYiddish → smHebrew
    42: 7,  // langSerbian → smCyrillic
    43: 7,  // langMacedonian → smCyrillic
    44: 7,  // langBulgarian → smCyrillic
    45: 7,  // langUkrainian → smCyrillic (modified)
    46: 7,  // langByelorussian → smCyrillic
    47: 7,  // langUzbek → smCyrillic
    48: 7,  // langKazakh → smCyrillic
    49: 7,  // langAzerbaijani → smCyrillic
    50: 4,  // langAzerbaijanAr → smArabic
    51: 24,  // langArmenian → smArmenian
    52: 23,  // langGeorgian → smGeorgian
    53: 7,  // langMoldavian → smCyrillic
    54: 7,  // langKirghiz → smCyrillic
    55: 7,  // langTajiki → smCyrillic
    56: 7,  // langTurkmen → smCyrillic
    57: 27,  // langMongolian → smMongolian
    58: 7,  // langMongolianCyr → smCyrillic
    59: 4,  // langPashto → smArabic
    60: 4,  // langKurdish → smArabic
    61: 4,  // langKashmiri → smArabic
    62: 4,  // langSindhi → smArabic
    63: 26,  // langTibetan → smTibetan
    64: 9,  // langNepali → smDevanagari
    65: 9,  // langSanskrit → smDevanagari
    66: 9,  // langMarathi → smDevanagari
    67: 13,  // langBengali → smBengali
    68: 13,  // langAssamese → smBengali
    69: 11,  // langGujarati → smGujarati
    70: 10,  // langPunjabi → smGurmukhi
    71: 12,  // langOriya → smOriya
    72: 17,  // langMalayalam → smMalayalam
    73: 16,  // langKannada → smKannada
    74: 14,  // langTamil → smTamil
    75: 15,  // langTelugu → smTelugu
    76: 18,  // langSinhalese → smSinhalese
    77: 19,  // langBurmese → smBurmese
    78: 20,  // langKhmer → smKhmer
    79: 22,  // langLao → smLao
    80: 30,  // langVietnamese → smVietnamese
    81: 0,  // langIndonesian → smRoman
    82: 0,  // langTagalog → smRoman
    83: 0,  // langMalayRoman → smRoman
    84: 4,  // langMalayArabic → smArabic
    85: 28,  // langAmharic → smEthiopic
    86: 28,  // langTigrinya → smEthiopic
    87: 28,  // langOromo → smEthiopic
    88: 0,  // langSomali → smRoman
    89: 0,  // langSwahili → smRoman
    90: 0,  // langKinyarwanda → smRoman
    91: 0,  // langRundi → smRoman
    92: 0,  // langNyanja → smRoman
    93: 0,  // langMalagasy → smRoman
    94: 0,  // langEsperanto → smRoman
    128: 0,  // langWelsh → smRoman (modified)
    129: 0,  // langBasque → smRoman
    130: 0,  // langCatalan → smRoman
    131: 0,  // langLatin → smRoman
    132: 0,  // langQuechua → smRoman
    133: 0,  // langGuarani → smRoman
    134: 0,  // langAymara → smRoman
    135: 7,  // langTatar → smCyrillic
    136: 4,  // langUighur → smArabic
    137: 26,  // langDzongkha → smTibetan
    138: 0,  // langJavaneseRom → smRoman
    139: 0,  // langSundaneseRom → smRoman
    140: 0,  // langGalician → smRoman
    141: 0,  // langAfrikaans → smRoman
    142: 0,  // langBreton → smRoman (modified)
    143: 28,  // langInuktitut → smEthiopic (modified)
    144: 0,  // langScottishGaelic → smRoman (modified)
    145: 0,  // langManxGaelic → smRoman (modified)
    146: 0,  // langIrishGaelicScript → smRoman (modified)
    147: 0,  // langTongan → smRoman
    148: 6,  // langGreekAncient → smRoman
    149: 0,  // langGreenlandic → smRoman
    150: 0,  // langAzerbaijanRoman → smRoman
    151: 0   // langNynorsk → smRoman
};

// While Microsoft indicates a region/country for all its language
// IDs, we omit the region code if it's equal to the "most likely
// region subtag" according to Unicode CLDR. For scripts, we omit
// the subtag if it is equal to the Suppress-Script entry in the
// IANA language subtag registry for IETF BCP 47.
//
// For example, Microsoft states that its language code 0x041A is
// Croatian in Croatia. We transform this to the BCP 47 language code 'hr'
// and not 'hr-HR' because Croatia is the default country for Croatian,
// according to Unicode CLDR. As another example, Microsoft states
// that 0x101A is Croatian (Latin) in Bosnia-Herzegovina. We transform
// this to 'hr-BA' and not 'hr-Latn-BA' because Latin is the default script
// for the Croatian language, according to IANA.
//
// http://www.unicode.org/cldr/charts/latest/supplemental/likely_subtags.html
// http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry
const windowsLanguages = {
    0x0436: 'af',
    0x041C: 'sq',
    0x0484: 'gsw',
    0x045E: 'am',
    0x1401: 'ar-DZ',
    0x3C01: 'ar-BH',
    0x0C01: 'ar',
    0x0801: 'ar-IQ',
    0x2C01: 'ar-JO',
    0x3401: 'ar-KW',
    0x3001: 'ar-LB',
    0x1001: 'ar-LY',
    0x1801: 'ary',
    0x2001: 'ar-OM',
    0x4001: 'ar-QA',
    0x0401: 'ar-SA',
    0x2801: 'ar-SY',
    0x1C01: 'aeb',
    0x3801: 'ar-AE',
    0x2401: 'ar-YE',
    0x042B: 'hy',
    0x044D: 'as',
    0x082C: 'az-Cyrl',
    0x042C: 'az',
    0x046D: 'ba',
    0x042D: 'eu',
    0x0423: 'be',
    0x0845: 'bn',
    0x0445: 'bn-IN',
    0x201A: 'bs-Cyrl',
    0x141A: 'bs',
    0x047E: 'br',
    0x0402: 'bg',
    0x0403: 'ca',
    0x0C04: 'zh-HK',
    0x1404: 'zh-MO',
    0x0804: 'zh',
    0x1004: 'zh-SG',
    0x0404: 'zh-TW',
    0x0483: 'co',
    0x041A: 'hr',
    0x101A: 'hr-BA',
    0x0405: 'cs',
    0x0406: 'da',
    0x048C: 'prs',
    0x0465: 'dv',
    0x0813: 'nl-BE',
    0x0413: 'nl',
    0x0C09: 'en-AU',
    0x2809: 'en-BZ',
    0x1009: 'en-CA',
    0x2409: 'en-029',
    0x4009: 'en-IN',
    0x1809: 'en-IE',
    0x2009: 'en-JM',
    0x4409: 'en-MY',
    0x1409: 'en-NZ',
    0x3409: 'en-PH',
    0x4809: 'en-SG',
    0x1C09: 'en-ZA',
    0x2C09: 'en-TT',
    0x0809: 'en-GB',
    0x0409: 'en',
    0x3009: 'en-ZW',
    0x0425: 'et',
    0x0438: 'fo',
    0x0464: 'fil',
    0x040B: 'fi',
    0x080C: 'fr-BE',
    0x0C0C: 'fr-CA',
    0x040C: 'fr',
    0x140C: 'fr-LU',
    0x180C: 'fr-MC',
    0x100C: 'fr-CH',
    0x0462: 'fy',
    0x0456: 'gl',
    0x0437: 'ka',
    0x0C07: 'de-AT',
    0x0407: 'de',
    0x1407: 'de-LI',
    0x1007: 'de-LU',
    0x0807: 'de-CH',
    0x0408: 'el',
    0x046F: 'kl',
    0x0447: 'gu',
    0x0468: 'ha',
    0x040D: 'he',
    0x0439: 'hi',
    0x040E: 'hu',
    0x040F: 'is',
    0x0470: 'ig',
    0x0421: 'id',
    0x045D: 'iu',
    0x085D: 'iu-Latn',
    0x083C: 'ga',
    0x0434: 'xh',
    0x0435: 'zu',
    0x0410: 'it',
    0x0810: 'it-CH',
    0x0411: 'ja',
    0x044B: 'kn',
    0x043F: 'kk',
    0x0453: 'km',
    0x0486: 'quc',
    0x0487: 'rw',
    0x0441: 'sw',
    0x0457: 'kok',
    0x0412: 'ko',
    0x0440: 'ky',
    0x0454: 'lo',
    0x0426: 'lv',
    0x0427: 'lt',
    0x082E: 'dsb',
    0x046E: 'lb',
    0x042F: 'mk',
    0x083E: 'ms-BN',
    0x043E: 'ms',
    0x044C: 'ml',
    0x043A: 'mt',
    0x0481: 'mi',
    0x047A: 'arn',
    0x044E: 'mr',
    0x047C: 'moh',
    0x0450: 'mn',
    0x0850: 'mn-CN',
    0x0461: 'ne',
    0x0414: 'nb',
    0x0814: 'nn',
    0x0482: 'oc',
    0x0448: 'or',
    0x0463: 'ps',
    0x0415: 'pl',
    0x0416: 'pt',
    0x0816: 'pt-PT',
    0x0446: 'pa',
    0x046B: 'qu-BO',
    0x086B: 'qu-EC',
    0x0C6B: 'qu',
    0x0418: 'ro',
    0x0417: 'rm',
    0x0419: 'ru',
    0x243B: 'smn',
    0x103B: 'smj-NO',
    0x143B: 'smj',
    0x0C3B: 'se-FI',
    0x043B: 'se',
    0x083B: 'se-SE',
    0x203B: 'sms',
    0x183B: 'sma-NO',
    0x1C3B: 'sms',
    0x044F: 'sa',
    0x1C1A: 'sr-Cyrl-BA',
    0x0C1A: 'sr',
    0x181A: 'sr-Latn-BA',
    0x081A: 'sr-Latn',
    0x046C: 'nso',
    0x0432: 'tn',
    0x045B: 'si',
    0x041B: 'sk',
    0x0424: 'sl',
    0x2C0A: 'es-AR',
    0x400A: 'es-BO',
    0x340A: 'es-CL',
    0x240A: 'es-CO',
    0x140A: 'es-CR',
    0x1C0A: 'es-DO',
    0x300A: 'es-EC',
    0x440A: 'es-SV',
    0x100A: 'es-GT',
    0x480A: 'es-HN',
    0x080A: 'es-MX',
    0x4C0A: 'es-NI',
    0x180A: 'es-PA',
    0x3C0A: 'es-PY',
    0x280A: 'es-PE',
    0x500A: 'es-PR',

    // Microsoft has defined two different language codes for
    // “Spanish with modern sorting” and “Spanish with traditional
    // sorting”. This makes sense for collation APIs, and it would be
    // possible to express this in BCP 47 language tags via Unicode
    // extensions (eg., es-u-co-trad is Spanish with traditional
    // sorting). However, for storing names in fonts, the distinction
    // does not make sense, so we give “es” in both cases.
    0x0C0A: 'es',
    0x040A: 'es',

    0x540A: 'es-US',
    0x380A: 'es-UY',
    0x200A: 'es-VE',
    0x081D: 'sv-FI',
    0x041D: 'sv',
    0x045A: 'syr',
    0x0428: 'tg',
    0x085F: 'tzm',
    0x0449: 'ta',
    0x0444: 'tt',
    0x044A: 'te',
    0x041E: 'th',
    0x0451: 'bo',
    0x041F: 'tr',
    0x0442: 'tk',
    0x0480: 'ug',
    0x0422: 'uk',
    0x042E: 'hsb',
    0x0420: 'ur',
    0x0843: 'uz-Cyrl',
    0x0443: 'uz',
    0x042A: 'vi',
    0x0452: 'cy',
    0x0488: 'wo',
    0x0485: 'sah',
    0x0478: 'ii',
    0x046A: 'yo'
};

// Returns a IETF BCP 47 language code, for example 'zh-Hant'
// for 'Chinese in the traditional script'.
function getLanguageCode(platformID, languageID, ltag) {
    switch (platformID) {
        case 0:  // Unicode
            if (languageID === 0xFFFF) {
                return 'und';
            } else if (ltag) {
                return ltag[languageID];
            }

            break;

        case 1:  // Macintosh
            return macLanguages[languageID];

        case 3:  // Windows
            return windowsLanguages[languageID];
    }

    return undefined;
}

const utf16 = 'utf-16';

// MacOS script ID → encoding. This table stores the default case,
// which can be overridden by macLanguageEncodings.
const macScriptEncodings = {
    0: 'macintosh',           // smRoman
    1: 'x-mac-japanese',      // smJapanese
    2: 'x-mac-chinesetrad',   // smTradChinese
    3: 'x-mac-korean',        // smKorean
    6: 'x-mac-greek',         // smGreek
    7: 'x-mac-cyrillic',      // smCyrillic
    9: 'x-mac-devanagai',     // smDevanagari
    10: 'x-mac-gurmukhi',     // smGurmukhi
    11: 'x-mac-gujarati',     // smGujarati
    12: 'x-mac-oriya',        // smOriya
    13: 'x-mac-bengali',      // smBengali
    14: 'x-mac-tamil',        // smTamil
    15: 'x-mac-telugu',       // smTelugu
    16: 'x-mac-kannada',      // smKannada
    17: 'x-mac-malayalam',    // smMalayalam
    18: 'x-mac-sinhalese',    // smSinhalese
    19: 'x-mac-burmese',      // smBurmese
    20: 'x-mac-khmer',        // smKhmer
    21: 'x-mac-thai',         // smThai
    22: 'x-mac-lao',          // smLao
    23: 'x-mac-georgian',     // smGeorgian
    24: 'x-mac-armenian',     // smArmenian
    25: 'x-mac-chinesesimp',  // smSimpChinese
    26: 'x-mac-tibetan',      // smTibetan
    27: 'x-mac-mongolian',    // smMongolian
    28: 'x-mac-ethiopic',     // smEthiopic
    29: 'x-mac-ce',           // smCentralEuroRoman
    30: 'x-mac-vietnamese',   // smVietnamese
    31: 'x-mac-extarabic'     // smExtArabic
};

// MacOS language ID → encoding. This table stores the exceptional
// cases, which override macScriptEncodings. For writing MacOS naming
// tables, we need to emit a MacOS script ID. Therefore, we cannot
// merge macScriptEncodings into macLanguageEncodings.
//
// http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt
const macLanguageEncodings = {
    15: 'x-mac-icelandic',    // langIcelandic
    17: 'x-mac-turkish',      // langTurkish
    18: 'x-mac-croatian',     // langCroatian
    24: 'x-mac-ce',           // langLithuanian
    25: 'x-mac-ce',           // langPolish
    26: 'x-mac-ce',           // langHungarian
    27: 'x-mac-ce',           // langEstonian
    28: 'x-mac-ce',           // langLatvian
    30: 'x-mac-icelandic',    // langFaroese
    37: 'x-mac-romanian',     // langRomanian
    38: 'x-mac-ce',           // langCzech
    39: 'x-mac-ce',           // langSlovak
    40: 'x-mac-ce',           // langSlovenian
    143: 'x-mac-inuit',       // langInuktitut
    146: 'x-mac-gaelic'       // langIrishGaelicScript
};

function getEncoding(platformID, encodingID, languageID) {
    switch (platformID) {
        case 0:  // Unicode
            return utf16;

        case 1:  // Apple Macintosh
            return macLanguageEncodings[languageID] || macScriptEncodings[encodingID];

        case 3:  // Microsoft Windows
            if (encodingID === 1 || encodingID === 10) {
                return utf16;
            }

            break;
    }

    return undefined;
}

// Parse the naming `name` table.
// FIXME: Format 1 additional fields are not supported yet.
// ltag is the content of the `ltag' table, such as ['en', 'zh-Hans', 'de-CH-1904'].
function parseNameTable(data, start, ltag) {
    const name = {};
    const p = new parse.Parser(data, start);
    const format = p.parseUShort();
    const count = p.parseUShort();
    const stringOffset = p.offset + p.parseUShort();
    for (let i = 0; i < count; i++) {
        const platformID = p.parseUShort();
        const encodingID = p.parseUShort();
        const languageID = p.parseUShort();
        const nameID = p.parseUShort();
        const property = nameTableNames[nameID] || nameID;
        const byteLength = p.parseUShort();
        const offset = p.parseUShort();
        const language = getLanguageCode(platformID, languageID, ltag);
        const encoding = getEncoding(platformID, encodingID, languageID);
        if (encoding !== undefined && language !== undefined) {
            let text;
            if (encoding === utf16) {
                text = decode.UTF16(data, stringOffset + offset, byteLength);
            } else {
                text = decode.MACSTRING(data, stringOffset + offset, byteLength, encoding);
            }

            if (text) {
                let translations = name[property];
                if (translations === undefined) {
                    translations = name[property] = {};
                }

                translations[language] = text;
            }
        }
    }

    let langTagCount = 0;
    if (format === 1) {
        // FIXME: Also handle Microsoft's 'name' table 1.
        langTagCount = p.parseUShort();
    }

    return name;
}

// {23: 'foo'} → {'foo': 23}
// ['bar', 'baz'] → {'bar': 0, 'baz': 1}
function reverseDict(dict) {
    const result = {};
    for (let key in dict) {
        result[dict[key]] = parseInt(key);
    }

    return result;
}

function makeNameRecord(platformID, encodingID, languageID, nameID, length, offset) {
    return new table.Record('NameRecord', [
        {name: 'platformID', type: 'USHORT', value: platformID},
        {name: 'encodingID', type: 'USHORT', value: encodingID},
        {name: 'languageID', type: 'USHORT', value: languageID},
        {name: 'nameID', type: 'USHORT', value: nameID},
        {name: 'length', type: 'USHORT', value: length},
        {name: 'offset', type: 'USHORT', value: offset}
    ]);
}

// Finds the position of needle in haystack, or -1 if not there.
// Like String.indexOf(), but for arrays.
function findSubArray(needle, haystack) {
    const needleLength = needle.length;
    const limit = haystack.length - needleLength + 1;

    loop:
    for (let pos = 0; pos < limit; pos++) {
        for (; pos < limit; pos++) {
            for (let k = 0; k < needleLength; k++) {
                if (haystack[pos + k] !== needle[k]) {
                    continue loop;
                }
            }

            return pos;
        }
    }

    return -1;
}

function addStringToPool(s, pool) {
    let offset = findSubArray(s, pool);
    if (offset < 0) {
        offset = pool.length;
        let i = 0;
        const len = s.length;
        for (; i < len; ++i) {
            pool.push(s[i]);
        }

    }

    return offset;
}

function makeNameTable(names, ltag) {
    let nameID;
    const nameIDs = [];

    const namesWithNumericKeys = {};
    const nameTableIds = reverseDict(nameTableNames);
    for (let key in names) {
        let id = nameTableIds[key];
        if (id === undefined) {
            id = key;
        }

        nameID = parseInt(id);

        if (isNaN(nameID)) {
            throw new Error('Name table entry "' + key + '" does not exist, see nameTableNames for complete list.');
        }

        namesWithNumericKeys[nameID] = names[key];
        nameIDs.push(nameID);
    }

    const macLanguageIds = reverseDict(macLanguages);
    const windowsLanguageIds = reverseDict(windowsLanguages);

    const nameRecords = [];
    const stringPool = [];

    for (let i = 0; i < nameIDs.length; i++) {
        nameID = nameIDs[i];
        const translations = namesWithNumericKeys[nameID];
        for (let lang in translations) {
            const text = translations[lang];

            // For MacOS, we try to emit the name in the form that was introduced
            // in the initial version of the TrueType spec (in the late 1980s).
            // However, this can fail for various reasons: the requested BCP 47
            // language code might not have an old-style Mac equivalent;
            // we might not have a codec for the needed character encoding;
            // or the name might contain characters that cannot be expressed
            // in the old-style Macintosh encoding. In case of failure, we emit
            // the name in a more modern fashion (Unicode encoding with BCP 47
            // language tags) that is recognized by MacOS 10.5, released in 2009.
            // If fonts were only read by operating systems, we could simply
            // emit all names in the modern form; this would be much easier.
            // However, there are many applications and libraries that read
            // 'name' tables directly, and these will usually only recognize
            // the ancient form (silently skipping the unrecognized names).
            let macPlatform = 1;  // Macintosh
            let macLanguage = macLanguageIds[lang];
            let macScript = macLanguageToScript[macLanguage];
            const macEncoding = getEncoding(macPlatform, macScript, macLanguage);
            let macName = encode.MACSTRING(text, macEncoding);
            if (macName === undefined) {
                macPlatform = 0;  // Unicode
                macLanguage = ltag.indexOf(lang);
                if (macLanguage < 0) {
                    macLanguage = ltag.length;
                    ltag.push(lang);
                }

                macScript = 4;  // Unicode 2.0 and later
                macName = encode.UTF16(text);
            }

            const macNameOffset = addStringToPool(macName, stringPool);
            nameRecords.push(makeNameRecord(macPlatform, macScript, macLanguage,
                                            nameID, macName.length, macNameOffset));

            const winLanguage = windowsLanguageIds[lang];
            if (winLanguage !== undefined) {
                const winName = encode.UTF16(text);
                const winNameOffset = addStringToPool(winName, stringPool);
                nameRecords.push(makeNameRecord(3, 1, winLanguage,
                                                nameID, winName.length, winNameOffset));
            }
        }
    }

    nameRecords.sort(function(a, b) {
        return ((a.platformID - b.platformID) ||
                (a.encodingID - b.encodingID) ||
                (a.languageID - b.languageID) ||
                (a.nameID - b.nameID));
    });

    const t = new table.Table('name', [
        {name: 'format', type: 'USHORT', value: 0},
        {name: 'count', type: 'USHORT', value: nameRecords.length},
        {name: 'stringOffset', type: 'USHORT', value: 6 + nameRecords.length * 12}
    ]);

    for (let r = 0; r < nameRecords.length; r++) {
        t.fields.push({name: 'record_' + r, type: 'RECORD', value: nameRecords[r]});
    }

    t.fields.push({name: 'strings', type: 'LITERAL', value: stringPool});
    return t;
}

var _name = { parse: parseNameTable, make: makeNameTable };

// The `OS/2` table contains metrics required in OpenType fonts.

const unicodeRanges = [
    {begin: 0x0000, end: 0x007F}, // Basic Latin
    {begin: 0x0080, end: 0x00FF}, // Latin-1 Supplement
    {begin: 0x0100, end: 0x017F}, // Latin Extended-A
    {begin: 0x0180, end: 0x024F}, // Latin Extended-B
    {begin: 0x0250, end: 0x02AF}, // IPA Extensions
    {begin: 0x02B0, end: 0x02FF}, // Spacing Modifier Letters
    {begin: 0x0300, end: 0x036F}, // Combining Diacritical Marks
    {begin: 0x0370, end: 0x03FF}, // Greek and Coptic
    {begin: 0x2C80, end: 0x2CFF}, // Coptic
    {begin: 0x0400, end: 0x04FF}, // Cyrillic
    {begin: 0x0530, end: 0x058F}, // Armenian
    {begin: 0x0590, end: 0x05FF}, // Hebrew
    {begin: 0xA500, end: 0xA63F}, // Vai
    {begin: 0x0600, end: 0x06FF}, // Arabic
    {begin: 0x07C0, end: 0x07FF}, // NKo
    {begin: 0x0900, end: 0x097F}, // Devanagari
    {begin: 0x0980, end: 0x09FF}, // Bengali
    {begin: 0x0A00, end: 0x0A7F}, // Gurmukhi
    {begin: 0x0A80, end: 0x0AFF}, // Gujarati
    {begin: 0x0B00, end: 0x0B7F}, // Oriya
    {begin: 0x0B80, end: 0x0BFF}, // Tamil
    {begin: 0x0C00, end: 0x0C7F}, // Telugu
    {begin: 0x0C80, end: 0x0CFF}, // Kannada
    {begin: 0x0D00, end: 0x0D7F}, // Malayalam
    {begin: 0x0E00, end: 0x0E7F}, // Thai
    {begin: 0x0E80, end: 0x0EFF}, // Lao
    {begin: 0x10A0, end: 0x10FF}, // Georgian
    {begin: 0x1B00, end: 0x1B7F}, // Balinese
    {begin: 0x1100, end: 0x11FF}, // Hangul Jamo
    {begin: 0x1E00, end: 0x1EFF}, // Latin Extended Additional
    {begin: 0x1F00, end: 0x1FFF}, // Greek Extended
    {begin: 0x2000, end: 0x206F}, // General Punctuation
    {begin: 0x2070, end: 0x209F}, // Superscripts And Subscripts
    {begin: 0x20A0, end: 0x20CF}, // Currency Symbol
    {begin: 0x20D0, end: 0x20FF}, // Combining Diacritical Marks For Symbols
    {begin: 0x2100, end: 0x214F}, // Letterlike Symbols
    {begin: 0x2150, end: 0x218F}, // Number Forms
    {begin: 0x2190, end: 0x21FF}, // Arrows
    {begin: 0x2200, end: 0x22FF}, // Mathematical Operators
    {begin: 0x2300, end: 0x23FF}, // Miscellaneous Technical
    {begin: 0x2400, end: 0x243F}, // Control Pictures
    {begin: 0x2440, end: 0x245F}, // Optical Character Recognition
    {begin: 0x2460, end: 0x24FF}, // Enclosed Alphanumerics
    {begin: 0x2500, end: 0x257F}, // Box Drawing
    {begin: 0x2580, end: 0x259F}, // Block Elements
    {begin: 0x25A0, end: 0x25FF}, // Geometric Shapes
    {begin: 0x2600, end: 0x26FF}, // Miscellaneous Symbols
    {begin: 0x2700, end: 0x27BF}, // Dingbats
    {begin: 0x3000, end: 0x303F}, // CJK Symbols And Punctuation
    {begin: 0x3040, end: 0x309F}, // Hiragana
    {begin: 0x30A0, end: 0x30FF}, // Katakana
    {begin: 0x3100, end: 0x312F}, // Bopomofo
    {begin: 0x3130, end: 0x318F}, // Hangul Compatibility Jamo
    {begin: 0xA840, end: 0xA87F}, // Phags-pa
    {begin: 0x3200, end: 0x32FF}, // Enclosed CJK Letters And Months
    {begin: 0x3300, end: 0x33FF}, // CJK Compatibility
    {begin: 0xAC00, end: 0xD7AF}, // Hangul Syllables
    {begin: 0xD800, end: 0xDFFF}, // Non-Plane 0 *
    {begin: 0x10900, end: 0x1091F}, // Phoenicia
    {begin: 0x4E00, end: 0x9FFF}, // CJK Unified Ideographs
    {begin: 0xE000, end: 0xF8FF}, // Private Use Area (plane 0)
    {begin: 0x31C0, end: 0x31EF}, // CJK Strokes
    {begin: 0xFB00, end: 0xFB4F}, // Alphabetic Presentation Forms
    {begin: 0xFB50, end: 0xFDFF}, // Arabic Presentation Forms-A
    {begin: 0xFE20, end: 0xFE2F}, // Combining Half Marks
    {begin: 0xFE10, end: 0xFE1F}, // Vertical Forms
    {begin: 0xFE50, end: 0xFE6F}, // Small Form Variants
    {begin: 0xFE70, end: 0xFEFF}, // Arabic Presentation Forms-B
    {begin: 0xFF00, end: 0xFFEF}, // Halfwidth And Fullwidth Forms
    {begin: 0xFFF0, end: 0xFFFF}, // Specials
    {begin: 0x0F00, end: 0x0FFF}, // Tibetan
    {begin: 0x0700, end: 0x074F}, // Syriac
    {begin: 0x0780, end: 0x07BF}, // Thaana
    {begin: 0x0D80, end: 0x0DFF}, // Sinhala
    {begin: 0x1000, end: 0x109F}, // Myanmar
    {begin: 0x1200, end: 0x137F}, // Ethiopic
    {begin: 0x13A0, end: 0x13FF}, // Cherokee
    {begin: 0x1400, end: 0x167F}, // Unified Canadian Aboriginal Syllabics
    {begin: 0x1680, end: 0x169F}, // Ogham
    {begin: 0x16A0, end: 0x16FF}, // Runic
    {begin: 0x1780, end: 0x17FF}, // Khmer
    {begin: 0x1800, end: 0x18AF}, // Mongolian
    {begin: 0x2800, end: 0x28FF}, // Braille Patterns
    {begin: 0xA000, end: 0xA48F}, // Yi Syllables
    {begin: 0x1700, end: 0x171F}, // Tagalog
    {begin: 0x10300, end: 0x1032F}, // Old Italic
    {begin: 0x10330, end: 0x1034F}, // Gothic
    {begin: 0x10400, end: 0x1044F}, // Deseret
    {begin: 0x1D000, end: 0x1D0FF}, // Byzantine Musical Symbols
    {begin: 0x1D400, end: 0x1D7FF}, // Mathematical Alphanumeric Symbols
    {begin: 0xFF000, end: 0xFFFFD}, // Private Use (plane 15)
    {begin: 0xFE00, end: 0xFE0F}, // Variation Selectors
    {begin: 0xE0000, end: 0xE007F}, // Tags
    {begin: 0x1900, end: 0x194F}, // Limbu
    {begin: 0x1950, end: 0x197F}, // Tai Le
    {begin: 0x1980, end: 0x19DF}, // New Tai Lue
    {begin: 0x1A00, end: 0x1A1F}, // Buginese
    {begin: 0x2C00, end: 0x2C5F}, // Glagolitic
    {begin: 0x2D30, end: 0x2D7F}, // Tifinagh
    {begin: 0x4DC0, end: 0x4DFF}, // Yijing Hexagram Symbols
    {begin: 0xA800, end: 0xA82F}, // Syloti Nagri
    {begin: 0x10000, end: 0x1007F}, // Linear B Syllabary
    {begin: 0x10140, end: 0x1018F}, // Ancient Greek Numbers
    {begin: 0x10380, end: 0x1039F}, // Ugaritic
    {begin: 0x103A0, end: 0x103DF}, // Old Persian
    {begin: 0x10450, end: 0x1047F}, // Shavian
    {begin: 0x10480, end: 0x104AF}, // Osmanya
    {begin: 0x10800, end: 0x1083F}, // Cypriot Syllabary
    {begin: 0x10A00, end: 0x10A5F}, // Kharoshthi
    {begin: 0x1D300, end: 0x1D35F}, // Tai Xuan Jing Symbols
    {begin: 0x12000, end: 0x123FF}, // Cuneiform
    {begin: 0x1D360, end: 0x1D37F}, // Counting Rod Numerals
    {begin: 0x1B80, end: 0x1BBF}, // Sundanese
    {begin: 0x1C00, end: 0x1C4F}, // Lepcha
    {begin: 0x1C50, end: 0x1C7F}, // Ol Chiki
    {begin: 0xA880, end: 0xA8DF}, // Saurashtra
    {begin: 0xA900, end: 0xA92F}, // Kayah Li
    {begin: 0xA930, end: 0xA95F}, // Rejang
    {begin: 0xAA00, end: 0xAA5F}, // Cham
    {begin: 0x10190, end: 0x101CF}, // Ancient Symbols
    {begin: 0x101D0, end: 0x101FF}, // Phaistos Disc
    {begin: 0x102A0, end: 0x102DF}, // Carian
    {begin: 0x1F030, end: 0x1F09F}  // Domino Tiles
];

function getUnicodeRange(unicode) {
    for (let i = 0; i < unicodeRanges.length; i += 1) {
        const range = unicodeRanges[i];
        if (unicode >= range.begin && unicode < range.end) {
            return i;
        }
    }

    return -1;
}

// Parse the OS/2 and Windows metrics `OS/2` table
function parseOS2Table(data, start) {
    const os2 = {};
    const p = new parse.Parser(data, start);
    os2.version = p.parseUShort();
    os2.xAvgCharWidth = p.parseShort();
    os2.usWeightClass = p.parseUShort();
    os2.usWidthClass = p.parseUShort();
    os2.fsType = p.parseUShort();
    os2.ySubscriptXSize = p.parseShort();
    os2.ySubscriptYSize = p.parseShort();
    os2.ySubscriptXOffset = p.parseShort();
    os2.ySubscriptYOffset = p.parseShort();
    os2.ySuperscriptXSize = p.parseShort();
    os2.ySuperscriptYSize = p.parseShort();
    os2.ySuperscriptXOffset = p.parseShort();
    os2.ySuperscriptYOffset = p.parseShort();
    os2.yStrikeoutSize = p.parseShort();
    os2.yStrikeoutPosition = p.parseShort();
    os2.sFamilyClass = p.parseShort();
    os2.panose = [];
    for (let i = 0; i < 10; i++) {
        os2.panose[i] = p.parseByte();
    }

    os2.ulUnicodeRange1 = p.parseULong();
    os2.ulUnicodeRange2 = p.parseULong();
    os2.ulUnicodeRange3 = p.parseULong();
    os2.ulUnicodeRange4 = p.parseULong();
    os2.achVendID = String.fromCharCode(p.parseByte(), p.parseByte(), p.parseByte(), p.parseByte());
    os2.fsSelection = p.parseUShort();
    os2.usFirstCharIndex = p.parseUShort();
    os2.usLastCharIndex = p.parseUShort();
    os2.sTypoAscender = p.parseShort();
    os2.sTypoDescender = p.parseShort();
    os2.sTypoLineGap = p.parseShort();
    os2.usWinAscent = p.parseUShort();
    os2.usWinDescent = p.parseUShort();
    if (os2.version >= 1) {
        os2.ulCodePageRange1 = p.parseULong();
        os2.ulCodePageRange2 = p.parseULong();
    }

    if (os2.version >= 2) {
        os2.sxHeight = p.parseShort();
        os2.sCapHeight = p.parseShort();
        os2.usDefaultChar = p.parseUShort();
        os2.usBreakChar = p.parseUShort();
        os2.usMaxContent = p.parseUShort();
    }

    return os2;
}

function makeOS2Table(options) {
    return new table.Table('OS/2', [
        {name: 'version', type: 'USHORT', value: 0x0003},
        {name: 'xAvgCharWidth', type: 'SHORT', value: 0},
        {name: 'usWeightClass', type: 'USHORT', value: 0},
        {name: 'usWidthClass', type: 'USHORT', value: 0},
        {name: 'fsType', type: 'USHORT', value: 0},
        {name: 'ySubscriptXSize', type: 'SHORT', value: 650},
        {name: 'ySubscriptYSize', type: 'SHORT', value: 699},
        {name: 'ySubscriptXOffset', type: 'SHORT', value: 0},
        {name: 'ySubscriptYOffset', type: 'SHORT', value: 140},
        {name: 'ySuperscriptXSize', type: 'SHORT', value: 650},
        {name: 'ySuperscriptYSize', type: 'SHORT', value: 699},
        {name: 'ySuperscriptXOffset', type: 'SHORT', value: 0},
        {name: 'ySuperscriptYOffset', type: 'SHORT', value: 479},
        {name: 'yStrikeoutSize', type: 'SHORT', value: 49},
        {name: 'yStrikeoutPosition', type: 'SHORT', value: 258},
        {name: 'sFamilyClass', type: 'SHORT', value: 0},
        {name: 'bFamilyType', type: 'BYTE', value: 0},
        {name: 'bSerifStyle', type: 'BYTE', value: 0},
        {name: 'bWeight', type: 'BYTE', value: 0},
        {name: 'bProportion', type: 'BYTE', value: 0},
        {name: 'bContrast', type: 'BYTE', value: 0},
        {name: 'bStrokeVariation', type: 'BYTE', value: 0},
        {name: 'bArmStyle', type: 'BYTE', value: 0},
        {name: 'bLetterform', type: 'BYTE', value: 0},
        {name: 'bMidline', type: 'BYTE', value: 0},
        {name: 'bXHeight', type: 'BYTE', value: 0},
        {name: 'ulUnicodeRange1', type: 'ULONG', value: 0},
        {name: 'ulUnicodeRange2', type: 'ULONG', value: 0},
        {name: 'ulUnicodeRange3', type: 'ULONG', value: 0},
        {name: 'ulUnicodeRange4', type: 'ULONG', value: 0},
        {name: 'achVendID', type: 'CHARARRAY', value: 'XXXX'},
        {name: 'fsSelection', type: 'USHORT', value: 0},
        {name: 'usFirstCharIndex', type: 'USHORT', value: 0},
        {name: 'usLastCharIndex', type: 'USHORT', value: 0},
        {name: 'sTypoAscender', type: 'SHORT', value: 0},
        {name: 'sTypoDescender', type: 'SHORT', value: 0},
        {name: 'sTypoLineGap', type: 'SHORT', value: 0},
        {name: 'usWinAscent', type: 'USHORT', value: 0},
        {name: 'usWinDescent', type: 'USHORT', value: 0},
        {name: 'ulCodePageRange1', type: 'ULONG', value: 0},
        {name: 'ulCodePageRange2', type: 'ULONG', value: 0},
        {name: 'sxHeight', type: 'SHORT', value: 0},
        {name: 'sCapHeight', type: 'SHORT', value: 0},
        {name: 'usDefaultChar', type: 'USHORT', value: 0},
        {name: 'usBreakChar', type: 'USHORT', value: 0},
        {name: 'usMaxContext', type: 'USHORT', value: 0}
    ], options);
}

var os2 = { parse: parseOS2Table, make: makeOS2Table, unicodeRanges, getUnicodeRange };

// The `post` table stores additional PostScript information, such as glyph names.

// Parse the PostScript `post` table
function parsePostTable(data, start) {
    const post = {};
    const p = new parse.Parser(data, start);
    post.version = p.parseVersion();
    post.italicAngle = p.parseFixed();
    post.underlinePosition = p.parseShort();
    post.underlineThickness = p.parseShort();
    post.isFixedPitch = p.parseULong();
    post.minMemType42 = p.parseULong();
    post.maxMemType42 = p.parseULong();
    post.minMemType1 = p.parseULong();
    post.maxMemType1 = p.parseULong();
    switch (post.version) {
        case 1:
            post.names = standardNames.slice();
            break;
        case 2:
            post.numberOfGlyphs = p.parseUShort();
            post.glyphNameIndex = new Array(post.numberOfGlyphs);
            for (let i = 0; i < post.numberOfGlyphs; i++) {
                post.glyphNameIndex[i] = p.parseUShort();
            }

            post.names = [];
            for (let i = 0; i < post.numberOfGlyphs; i++) {
                if (post.glyphNameIndex[i] >= standardNames.length) {
                    const nameLength = p.parseChar();
                    post.names.push(p.parseString(nameLength));
                }
            }

            break;
        case 2.5:
            post.numberOfGlyphs = p.parseUShort();
            post.offset = new Array(post.numberOfGlyphs);
            for (let i = 0; i < post.numberOfGlyphs; i++) {
                post.offset[i] = p.parseChar();
            }

            break;
    }
    return post;
}

function makePostTable() {
    return new table.Table('post', [
        {name: 'version', type: 'FIXED', value: 0x00030000},
        {name: 'italicAngle', type: 'FIXED', value: 0},
        {name: 'underlinePosition', type: 'FWORD', value: 0},
        {name: 'underlineThickness', type: 'FWORD', value: 0},
        {name: 'isFixedPitch', type: 'ULONG', value: 0},
        {name: 'minMemType42', type: 'ULONG', value: 0},
        {name: 'maxMemType42', type: 'ULONG', value: 0},
        {name: 'minMemType1', type: 'ULONG', value: 0},
        {name: 'maxMemType1', type: 'ULONG', value: 0}
    ]);
}

var post = { parse: parsePostTable, make: makePostTable };

// The `GSUB` table contains ligatures, among other things.

const subtableParsers = new Array(9);         // subtableParsers[0] is unused

// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#SS
subtableParsers[1] = function parseLookup1() {
    const start = this.offset + this.relativeOffset;
    const substFormat = this.parseUShort();
    if (substFormat === 1) {
        return {
            substFormat: 1,
            coverage: this.parsePointer(Parser.coverage),
            deltaGlyphId: this.parseUShort()
        };
    } else if (substFormat === 2) {
        return {
            substFormat: 2,
            coverage: this.parsePointer(Parser.coverage),
            substitute: this.parseOffset16List()
        };
    }
    check.assert(false, '0x' + start.toString(16) + ': lookup type 1 format must be 1 or 2.');
};

// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#MS
subtableParsers[2] = function parseLookup2() {
    const substFormat = this.parseUShort();
    check.argument(substFormat === 1, 'GSUB Multiple Substitution Subtable identifier-format must be 1');
    return {
        substFormat: substFormat,
        coverage: this.parsePointer(Parser.coverage),
        sequences: this.parseListOfLists()
    };
};

// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#AS
subtableParsers[3] = function parseLookup3() {
    const substFormat = this.parseUShort();
    check.argument(substFormat === 1, 'GSUB Alternate Substitution Subtable identifier-format must be 1');
    return {
        substFormat: substFormat,
        coverage: this.parsePointer(Parser.coverage),
        alternateSets: this.parseListOfLists()
    };
};

// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#LS
subtableParsers[4] = function parseLookup4() {
    const substFormat = this.parseUShort();
    check.argument(substFormat === 1, 'GSUB ligature table identifier-format must be 1');
    return {
        substFormat: substFormat,
        coverage: this.parsePointer(Parser.coverage),
        ligatureSets: this.parseListOfLists(function() {
            return {
                ligGlyph: this.parseUShort(),
                components: this.parseUShortList(this.parseUShort() - 1)
            };
        })
    };
};

const lookupRecordDesc = {
    sequenceIndex: Parser.uShort,
    lookupListIndex: Parser.uShort
};

// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CSF
subtableParsers[5] = function parseLookup5() {
    const start = this.offset + this.relativeOffset;
    const substFormat = this.parseUShort();

    if (substFormat === 1) {
        return {
            substFormat: substFormat,
            coverage: this.parsePointer(Parser.coverage),
            ruleSets: this.parseListOfLists(function() {
                const glyphCount = this.parseUShort();
                const substCount = this.parseUShort();
                return {
                    input: this.parseUShortList(glyphCount - 1),
                    lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
                };
            })
        };
    } else if (substFormat === 2) {
        return {
            substFormat: substFormat,
            coverage: this.parsePointer(Parser.coverage),
            classDef: this.parsePointer(Parser.classDef),
            classSets: this.parseListOfLists(function() {
                const glyphCount = this.parseUShort();
                const substCount = this.parseUShort();
                return {
                    classes: this.parseUShortList(glyphCount - 1),
                    lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
                };
            })
        };
    } else if (substFormat === 3) {
        const glyphCount = this.parseUShort();
        const substCount = this.parseUShort();
        return {
            substFormat: substFormat,
            coverages: this.parseList(glyphCount, Parser.pointer(Parser.coverage)),
            lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
        };
    }
    check.assert(false, '0x' + start.toString(16) + ': lookup type 5 format must be 1, 2 or 3.');
};

// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CC
subtableParsers[6] = function parseLookup6() {
    const start = this.offset + this.relativeOffset;
    const substFormat = this.parseUShort();
    if (substFormat === 1) {
        return {
            substFormat: 1,
            coverage: this.parsePointer(Parser.coverage),
            chainRuleSets: this.parseListOfLists(function() {
                return {
                    backtrack: this.parseUShortList(),
                    input: this.parseUShortList(this.parseShort() - 1),
                    lookahead: this.parseUShortList(),
                    lookupRecords: this.parseRecordList(lookupRecordDesc)
                };
            })
        };
    } else if (substFormat === 2) {
        return {
            substFormat: 2,
            coverage: this.parsePointer(Parser.coverage),
            backtrackClassDef: this.parsePointer(Parser.classDef),
            inputClassDef: this.parsePointer(Parser.classDef),
            lookaheadClassDef: this.parsePointer(Parser.classDef),
            chainClassSet: this.parseListOfLists(function() {
                return {
                    backtrack: this.parseUShortList(),
                    input: this.parseUShortList(this.parseShort() - 1),
                    lookahead: this.parseUShortList(),
                    lookupRecords: this.parseRecordList(lookupRecordDesc)
                };
            })
        };
    } else if (substFormat === 3) {
        return {
            substFormat: 3,
            backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),
            inputCoverage: this.parseList(Parser.pointer(Parser.coverage)),
            lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),
            lookupRecords: this.parseRecordList(lookupRecordDesc)
        };
    }
    check.assert(false, '0x' + start.toString(16) + ': lookup type 6 format must be 1, 2 or 3.');
};

// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#ES
subtableParsers[7] = function parseLookup7() {
    // Extension Substitution subtable
    const substFormat = this.parseUShort();
    check.argument(substFormat === 1, 'GSUB Extension Substitution subtable identifier-format must be 1');
    const extensionLookupType = this.parseUShort();
    const extensionParser = new Parser(this.data, this.offset + this.parseULong());
    return {
        substFormat: 1,
        lookupType: extensionLookupType,
        extension: subtableParsers[extensionLookupType].call(extensionParser)
    };
};

// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#RCCS
subtableParsers[8] = function parseLookup8() {
    const substFormat = this.parseUShort();
    check.argument(substFormat === 1, 'GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1');
    return {
        substFormat: substFormat,
        coverage: this.parsePointer(Parser.coverage),
        backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),
        lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),
        substitutes: this.parseUShortList()
    };
};

// https://www.microsoft.com/typography/OTSPEC/gsub.htm
function parseGsubTable(data, start) {
    start = start || 0;
    const p = new Parser(data, start);
    const tableVersion = p.parseVersion();
    check.argument(tableVersion === 1, 'Unsupported GSUB table version.');
    return {
        version: tableVersion,
        scripts: p.parseScriptList(),
        features: p.parseFeatureList(),
        lookups: p.parseLookupList(subtableParsers)
    };
}

// GSUB Writing //////////////////////////////////////////////
const subtableMakers = new Array(9);

subtableMakers[1] = function makeLookup1(subtable) {
    if (subtable.substFormat === 1) {
        return new table.Table('substitutionTable', [
            {name: 'substFormat', type: 'USHORT', value: 1},
            {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)},
            {name: 'deltaGlyphID', type: 'USHORT', value: subtable.deltaGlyphId}
        ]);
    } else {
        return new table.Table('substitutionTable', [
            {name: 'substFormat', type: 'USHORT', value: 2},
            {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}
        ].concat(table.ushortList('substitute', subtable.substitute)));
    }
    check.fail('Lookup type 1 substFormat must be 1 or 2.');
};

subtableMakers[3] = function makeLookup3(subtable) {
    check.assert(subtable.substFormat === 1, 'Lookup type 3 substFormat must be 1.');
    return new table.Table('substitutionTable', [
        {name: 'substFormat', type: 'USHORT', value: 1},
        {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}
    ].concat(table.tableList('altSet', subtable.alternateSets, function(alternateSet) {
        return new table.Table('alternateSetTable', table.ushortList('alternate', alternateSet));
    })));
};

subtableMakers[4] = function makeLookup4(subtable) {
    check.assert(subtable.substFormat === 1, 'Lookup type 4 substFormat must be 1.');
    return new table.Table('substitutionTable', [
        {name: 'substFormat', type: 'USHORT', value: 1},
        {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}
    ].concat(table.tableList('ligSet', subtable.ligatureSets, function(ligatureSet) {
        return new table.Table('ligatureSetTable', table.tableList('ligature', ligatureSet, function(ligature) {
            return new table.Table('ligatureTable',
                [{name: 'ligGlyph', type: 'USHORT', value: ligature.ligGlyph}]
                .concat(table.ushortList('component', ligature.components, ligature.components.length + 1))
            );
        }));
    })));
};

function makeGsubTable(gsub) {
    return new table.Table('GSUB', [
        {name: 'version', type: 'ULONG', value: 0x10000},
        {name: 'scripts', type: 'TABLE', value: new table.ScriptList(gsub.scripts)},
        {name: 'features', type: 'TABLE', value: new table.FeatureList(gsub.features)},
        {name: 'lookups', type: 'TABLE', value: new table.LookupList(gsub.lookups, subtableMakers)}
    ]);
}

var gsub = { parse: parseGsubTable, make: makeGsubTable };

// The `GPOS` table contains kerning pairs, among other things.

// Parse the metadata `meta` table.
// https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6meta.html
function parseMetaTable(data, start) {
    const p = new parse.Parser(data, start);
    const tableVersion = p.parseULong();
    check.argument(tableVersion === 1, 'Unsupported META table version.');
    p.parseULong(); // flags - currently unused and set to 0
    p.parseULong(); // tableOffset
    const numDataMaps = p.parseULong();

    const tags = {};
    for (let i = 0; i < numDataMaps; i++) {
        const tag = p.parseTag();
        const dataOffset = p.parseULong();
        const dataLength = p.parseULong();
        const text = decode.UTF8(data, start + dataOffset, dataLength);

        tags[tag] = text;
    }
    return tags;
}

function makeMetaTable(tags) {
    const numTags = Object.keys(tags).length;
    let stringPool = '';
    const stringPoolOffset = 16 + numTags * 12;

    const result = new table.Table('meta', [
        {name: 'version', type: 'ULONG', value: 1},
        {name: 'flags', type: 'ULONG', value: 0},
        {name: 'offset', type: 'ULONG', value: stringPoolOffset},
        {name: 'numTags', type: 'ULONG', value: numTags}
    ]);

    for (let tag in tags) {
        const pos = stringPool.length;
        stringPool += tags[tag];

        result.fields.push({name: 'tag ' + tag, type: 'TAG', value: tag});
        result.fields.push({name: 'offset ' + tag, type: 'ULONG', value: stringPoolOffset + pos});
        result.fields.push({name: 'length ' + tag, type: 'ULONG', value: tags[tag].length});
    }

    result.fields.push({name: 'stringPool', type: 'CHARARRAY', value: stringPool});

    return result;
}

var meta = { parse: parseMetaTable, make: makeMetaTable };

// The `sfnt` wrapper provides organization for the tables in the font.

function log2$1(v) {
    return Math.log(v) / Math.log(2) | 0;
}

function computeCheckSum(bytes) {
    while (bytes.length % 4 !== 0) {
        bytes.push(0);
    }

    let sum = 0;
    for (let i = 0; i < bytes.length; i += 4) {
        sum += (bytes[i] << 24) +
            (bytes[i + 1] << 16) +
            (bytes[i + 2] << 8) +
            (bytes[i + 3]);
    }

    sum %= Math.pow(2, 32);
    return sum;
}

function makeTableRecord(tag, checkSum, offset, length) {
    return new table.Record('Table Record', [
        {name: 'tag', type: 'TAG', value: tag !== undefined ? tag : ''},
        {name: 'checkSum', type: 'ULONG', value: checkSum !== undefined ? checkSum : 0},
        {name: 'offset', type: 'ULONG', value: offset !== undefined ? offset : 0},
        {name: 'length', type: 'ULONG', value: length !== undefined ? length : 0}
    ]);
}

function makeSfntTable(tables) {
    const sfnt = new table.Table('sfnt', [
        {name: 'version', type: 'TAG', value: 'OTTO'},
        {name: 'numTables', type: 'USHORT', value: 0},
        {name: 'searchRange', type: 'USHORT', value: 0},
        {name: 'entrySelector', type: 'USHORT', value: 0},
        {name: 'rangeShift', type: 'USHORT', value: 0}
    ]);
    sfnt.tables = tables;
    sfnt.numTables = tables.length;
    const highestPowerOf2 = Math.pow(2, log2$1(sfnt.numTables));
    sfnt.searchRange = 16 * highestPowerOf2;
    sfnt.entrySelector = log2$1(highestPowerOf2);
    sfnt.rangeShift = sfnt.numTables * 16 - sfnt.searchRange;

    const recordFields = [];
    const tableFields = [];

    let offset = sfnt.sizeOf() + (makeTableRecord().sizeOf() * sfnt.numTables);
    while (offset % 4 !== 0) {
        offset += 1;
        tableFields.push({name: 'padding', type: 'BYTE', value: 0});
    }

    for (let i = 0; i < tables.length; i += 1) {
        const t = tables[i];
        check.argument(t.tableName.length === 4, 'Table name' + t.tableName + ' is invalid.');
        const tableLength = t.sizeOf();
        const tableRecord = makeTableRecord(t.tableName, computeCheckSum(t.encode()), offset, tableLength);
        recordFields.push({name: tableRecord.tag + ' Table Record', type: 'RECORD', value: tableRecord});
        tableFields.push({name: t.tableName + ' table', type: 'RECORD', value: t});
        offset += tableLength;
        check.argument(!isNaN(offset), 'Something went wrong calculating the offset.');
        while (offset % 4 !== 0) {
            offset += 1;
            tableFields.push({name: 'padding', type: 'BYTE', value: 0});
        }
    }

    // Table records need to be sorted alphabetically.
    recordFields.sort(function(r1, r2) {
        if (r1.value.tag > r2.value.tag) {
            return 1;
        } else {
            return -1;
        }
    });

    sfnt.fields = sfnt.fields.concat(recordFields);
    sfnt.fields = sfnt.fields.concat(tableFields);
    return sfnt;
}

// Get the metrics for a character. If the string has more than one character
// this function returns metrics for the first available character.
// You can provide optional fallback metrics if no characters are available.
function metricsForChar(font, chars, notFoundMetrics) {
    for (let i = 0; i < chars.length; i += 1) {
        const glyphIndex = font.charToGlyphIndex(chars[i]);
        if (glyphIndex > 0) {
            const glyph = font.glyphs.get(glyphIndex);
            return glyph.getMetrics();
        }
    }

    return notFoundMetrics;
}

function average(vs) {
    let sum = 0;
    for (let i = 0; i < vs.length; i += 1) {
        sum += vs[i];
    }

    return sum / vs.length;
}

// Convert the font object to a SFNT data structure.
// This structure contains all the necessary tables and metadata to create a binary OTF file.
function fontToSfntTable(font) {
    const xMins = [];
    const yMins = [];
    const xMaxs = [];
    const yMaxs = [];
    const advanceWidths = [];
    const leftSideBearings = [];
    const rightSideBearings = [];
    let firstCharIndex;
    let lastCharIndex = 0;
    let ulUnicodeRange1 = 0;
    let ulUnicodeRange2 = 0;
    let ulUnicodeRange3 = 0;
    let ulUnicodeRange4 = 0;

    for (let i = 0; i < font.glyphs.length; i += 1) {
        const glyph = font.glyphs.get(i);
        const unicode = glyph.unicode | 0;

        if (isNaN(glyph.advanceWidth)) {
            throw new Error('Glyph ' + glyph.name + ' (' + i + '): advanceWidth is not a number.');
        }

        if (firstCharIndex > unicode || firstCharIndex === undefined) {
            // ignore .notdef char
            if (unicode > 0) {
                firstCharIndex = unicode;
            }
        }

        if (lastCharIndex < unicode) {
            lastCharIndex = unicode;
        }

        const position = os2.getUnicodeRange(unicode);
        if (position < 32) {
            ulUnicodeRange1 |= 1 << position;
        } else if (position < 64) {
            ulUnicodeRange2 |= 1 << position - 32;
        } else if (position < 96) {
            ulUnicodeRange3 |= 1 << position - 64;
        } else if (position < 123) {
            ulUnicodeRange4 |= 1 << position - 96;
        } else {
            throw new Error('Unicode ranges bits > 123 are reserved for internal usage');
        }
        // Skip non-important characters.
        if (glyph.name === '.notdef') continue;
        const metrics = glyph.getMetrics();
        xMins.push(metrics.xMin);
        yMins.push(metrics.yMin);
        xMaxs.push(metrics.xMax);
        yMaxs.push(metrics.yMax);
        leftSideBearings.push(metrics.leftSideBearing);
        rightSideBearings.push(metrics.rightSideBearing);
        advanceWidths.push(glyph.advanceWidth);
    }

    const globals = {
        xMin: Math.min.apply(null, xMins),
        yMin: Math.min.apply(null, yMins),
        xMax: Math.max.apply(null, xMaxs),
        yMax: Math.max.apply(null, yMaxs),
        advanceWidthMax: Math.max.apply(null, advanceWidths),
        advanceWidthAvg: average(advanceWidths),
        minLeftSideBearing: Math.min.apply(null, leftSideBearings),
        maxLeftSideBearing: Math.max.apply(null, leftSideBearings),
        minRightSideBearing: Math.min.apply(null, rightSideBearings)
    };
    globals.ascender = font.ascender;
    globals.descender = font.descender;

    const headTable = head.make({
        flags: 3, // 00000011 (baseline for font at y=0; left sidebearing point at x=0)
        unitsPerEm: font.unitsPerEm,
        xMin: globals.xMin,
        yMin: globals.yMin,
        xMax: globals.xMax,
        yMax: globals.yMax,
        lowestRecPPEM: 3,
        createdTimestamp: font.createdTimestamp
    });

    const hheaTable = hhea.make({
        ascender: globals.ascender,
        descender: globals.descender,
        advanceWidthMax: globals.advanceWidthMax,
        minLeftSideBearing: globals.minLeftSideBearing,
        minRightSideBearing: globals.minRightSideBearing,
        xMaxExtent: globals.maxLeftSideBearing + (globals.xMax - globals.xMin),
        numberOfHMetrics: font.glyphs.length
    });

    const maxpTable = maxp.make(font.glyphs.length);

    const os2Table = os2.make({
        xAvgCharWidth: Math.round(globals.advanceWidthAvg),
        usWeightClass: font.tables.os2.usWeightClass,
        usWidthClass: font.tables.os2.usWidthClass,
        usFirstCharIndex: firstCharIndex,
        usLastCharIndex: lastCharIndex,
        ulUnicodeRange1: ulUnicodeRange1,
        ulUnicodeRange2: ulUnicodeRange2,
        ulUnicodeRange3: ulUnicodeRange3,
        ulUnicodeRange4: ulUnicodeRange4,
        fsSelection: font.tables.os2.fsSelection, // REGULAR
        // See http://typophile.com/node/13081 for more info on vertical metrics.
        // We get metrics for typical characters (such as "x" for xHeight).
        // We provide some fallback characters if characters are unavailable: their
        // ordering was chosen experimentally.
        sTypoAscender: globals.ascender,
        sTypoDescender: globals.descender,
        sTypoLineGap: 0,
        usWinAscent: globals.yMax,
        usWinDescent: Math.abs(globals.yMin),
        ulCodePageRange1: 1, // FIXME: hard-code Latin 1 support for now
        sxHeight: metricsForChar(font, 'xyvw', {yMax: Math.round(globals.ascender / 2)}).yMax,
        sCapHeight: metricsForChar(font, 'HIKLEFJMNTZBDPRAGOQSUVWXY', globals).yMax,
        usDefaultChar: font.hasChar(' ') ? 32 : 0, // Use space as the default character, if available.
        usBreakChar: font.hasChar(' ') ? 32 : 0 // Use space as the break character, if available.
    });

    const hmtxTable = hmtx.make(font.glyphs);
    const cmapTable = cmap.make(font.glyphs);

    const englishFamilyName = font.getEnglishName('fontFamily');
    const englishStyleName = font.getEnglishName('fontSubfamily');
    const englishFullName = englishFamilyName + ' ' + englishStyleName;
    let postScriptName = font.getEnglishName('postScriptName');
    if (!postScriptName) {
        postScriptName = englishFamilyName.replace(/\s/g, '') + '-' + englishStyleName;
    }

    const names = {};
    for (let n in font.names) {
        names[n] = font.names[n];
    }

    if (!names.uniqueID) {
        names.uniqueID = {en: font.getEnglishName('manufacturer') + ':' + englishFullName};
    }

    if (!names.postScriptName) {
        names.postScriptName = {en: postScriptName};
    }

    if (!names.preferredFamily) {
        names.preferredFamily = font.names.fontFamily;
    }

    if (!names.preferredSubfamily) {
        names.preferredSubfamily = font.names.fontSubfamily;
    }

    const languageTags = [];
    const nameTable = _name.make(names, languageTags);
    const ltagTable = (languageTags.length > 0 ? ltag.make(languageTags) : undefined);

    const postTable = post.make();
    const cffTable = cff.make(font.glyphs, {
        version: font.getEnglishName('version'),
        fullName: englishFullName,
        familyName: englishFamilyName,
        weightName: englishStyleName,
        postScriptName: postScriptName,
        unitsPerEm: font.unitsPerEm,
        fontBBox: [0, globals.yMin, globals.ascender, globals.advanceWidthMax]
    });

    const metaTable = (font.metas && Object.keys(font.metas).length > 0) ? meta.make(font.metas) : undefined;

    // The order does not matter because makeSfntTable() will sort them.
    const tables = [headTable, hheaTable, maxpTable, os2Table, nameTable, cmapTable, postTable, cffTable, hmtxTable];
    if (ltagTable) {
        tables.push(ltagTable);
    }
    // Optional tables
    if (font.tables.gsub) {
        tables.push(gsub.make(font.tables.gsub));
    }
    if (metaTable) {
        tables.push(metaTable);
    }

    const sfntTable = makeSfntTable(tables);

    // Compute the font's checkSum and store it in head.checkSumAdjustment.
    const bytes = sfntTable.encode();
    const checkSum = computeCheckSum(bytes);
    const tableFields = sfntTable.fields;
    let checkSumAdjusted = false;
    for (let i = 0; i < tableFields.length; i += 1) {
        if (tableFields[i].name === 'head table') {
            tableFields[i].value.checkSumAdjustment = 0xB1B0AFBA - checkSum;
            checkSumAdjusted = true;
            break;
        }
    }

    if (!checkSumAdjusted) {
        throw new Error('Could not find head table with checkSum to adjust.');
    }

    return sfntTable;
}

var sfnt = { make: makeSfntTable, fontToTable: fontToSfntTable, computeCheckSum };

// The Layout object is the prototype of Substitution objects, and provides

function searchTag(arr, tag) {
    /* jshint bitwise: false */
    let imin = 0;
    let imax = arr.length - 1;
    while (imin <= imax) {
        const imid = (imin + imax) >>> 1;
        const val = arr[imid].tag;
        if (val === tag) {
            return imid;
        } else if (val < tag) {
            imin = imid + 1;
        } else { imax = imid - 1; }
    }
    // Not found: return -1-insertion point
    return -imin - 1;
}

function binSearch(arr, value) {
    /* jshint bitwise: false */
    let imin = 0;
    let imax = arr.length - 1;
    while (imin <= imax) {
        const imid = (imin + imax) >>> 1;
        const val = arr[imid];
        if (val === value) {
            return imid;
        } else if (val < value) {
            imin = imid + 1;
        } else { imax = imid - 1; }
    }
    // Not found: return -1-insertion point
    return -imin - 1;
}

/**
 * @exports opentype.Layout
 * @class
 */
function Layout(font, tableName) {
    this.font = font;
    this.tableName = tableName;
}

Layout.prototype = {

    /**
     * Binary search an object by "tag" property
     * @instance
     * @function searchTag
     * @memberof opentype.Layout
     * @param  {Array} arr
     * @param  {string} tag
     * @return {number}
     */
    searchTag: searchTag,

    /**
     * Binary search in a list of numbers
     * @instance
     * @function binSearch
     * @memberof opentype.Layout
     * @param  {Array} arr
     * @param  {number} value
     * @return {number}
     */
    binSearch: binSearch,

    /**
     * Get or create the Layout table (GSUB, GPOS etc).
     * @param  {boolean} create - Whether to create a new one.
     * @return {Object} The GSUB or GPOS table.
     */
    getTable: function(create) {
        let layout = this.font.tables[this.tableName];
        if (!layout && create) {
            layout = this.font.tables[this.tableName] = this.createDefaultTable();
        }
        return layout;
    },

    /**
     * Returns all scripts in the substitution table.
     * @instance
     * @return {Array}
     */
    getScriptNames: function() {
        let layout = this.getTable();
        if (!layout) { return []; }
        return layout.scripts.map(function(script) {
            return script.tag;
        });
    },

    /**
     * Returns the best bet for a script name.
     * Returns 'DFLT' if it exists.
     * If not, returns 'latn' if it exists.
     * If neither exist, returns undefined.
     */
    getDefaultScriptName: function() {
        let layout = this.getTable();
        if (!layout) { return; }
        let hasLatn = false;
        for (let i = 0; i < layout.scripts.length; i++) {
            const name = layout.scripts[i].tag;
            if (name === 'DFLT') return name;
            if (name === 'latn') hasLatn = true;
        }
        if (hasLatn) return 'latn';
    },

    /**
     * Returns all LangSysRecords in the given script.
     * @instance
     * @param {string} [script='DFLT']
     * @param {boolean} create - forces the creation of this script table if it doesn't exist.
     * @return {Object} An object with tag and script properties.
     */
    getScriptTable: function(script, create) {
        const layout = this.getTable(create);
        if (layout) {
            script = script || 'DFLT';
            const scripts = layout.scripts;
            const pos = searchTag(layout.scripts, script);
            if (pos >= 0) {
                return scripts[pos].script;
            } else if (create) {
                const scr = {
                    tag: script,
                    script: {
                        defaultLangSys: {reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: []},
                        langSysRecords: []
                    }
                };
                scripts.splice(-1 - pos, 0, scr);
                return scr.script;
            }
        }
    },

    /**
     * Returns a language system table
     * @instance
     * @param {string} [script='DFLT']
     * @param {string} [language='dlft']
     * @param {boolean} create - forces the creation of this langSysTable if it doesn't exist.
     * @return {Object}
     */
    getLangSysTable: function(script, language, create) {
        const scriptTable = this.getScriptTable(script, create);
        if (scriptTable) {
            if (!language || language === 'dflt' || language === 'DFLT') {
                return scriptTable.defaultLangSys;
            }
            const pos = searchTag(scriptTable.langSysRecords, language);
            if (pos >= 0) {
                return scriptTable.langSysRecords[pos].langSys;
            } else if (create) {
                const langSysRecord = {
                    tag: language,
                    langSys: {reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: []}
                };
                scriptTable.langSysRecords.splice(-1 - pos, 0, langSysRecord);
                return langSysRecord.langSys;
            }
        }
    },

    /**
     * Get a specific feature table.
     * @instance
     * @param {string} [script='DFLT']
     * @param {string} [language='dlft']
     * @param {string} feature - One of the codes listed at https://www.microsoft.com/typography/OTSPEC/featurelist.htm
     * @param {boolean} create - forces the creation of the feature table if it doesn't exist.
     * @return {Object}
     */
    getFeatureTable: function(script, language, feature, create) {
        const langSysTable = this.getLangSysTable(script, language, create);
        if (langSysTable) {
            let featureRecord;
            const featIndexes = langSysTable.featureIndexes;
            const allFeatures = this.font.tables[this.tableName].features;
            // The FeatureIndex array of indices is in arbitrary order,
            // even if allFeatures is sorted alphabetically by feature tag.
            for (let i = 0; i < featIndexes.length; i++) {
                featureRecord = allFeatures[featIndexes[i]];
                if (featureRecord.tag === feature) {
                    return featureRecord.feature;
                }
            }
            if (create) {
                const index = allFeatures.length;
                // Automatic ordering of features would require to shift feature indexes in the script list.
                check.assert(index === 0 || feature >= allFeatures[index - 1].tag, 'Features must be added in alphabetical order.');
                featureRecord = {
                    tag: feature,
                    feature: { params: 0, lookupListIndexes: [] }
                };
                allFeatures.push(featureRecord);
                featIndexes.push(index);
                return featureRecord.feature;
            }
        }
    },

    /**
     * Get the lookup tables of a given type for a script/language/feature.
     * @instance
     * @param {string} [script='DFLT']
     * @param {string} [language='dlft']
     * @param {string} feature - 4-letter feature code
     * @param {number} lookupType - 1 to 8
     * @param {boolean} create - forces the creation of the lookup table if it doesn't exist, with no subtables.
     * @return {Object[]}
     */
    getLookupTables: function(script, language, feature, lookupType, create) {
        const featureTable = this.getFeatureTable(script, language, feature, create);
        const tables = [];
        if (featureTable) {
            let lookupTable;
            const lookupListIndexes = featureTable.lookupListIndexes;
            const allLookups = this.font.tables[this.tableName].lookups;
            // lookupListIndexes are in no particular order, so use naive search.
            for (let i = 0; i < lookupListIndexes.length; i++) {
                lookupTable = allLookups[lookupListIndexes[i]];
                if (lookupTable.lookupType === lookupType) {
                    tables.push(lookupTable);
                }
            }
            if (tables.length === 0 && create) {
                lookupTable = {
                    lookupType: lookupType,
                    lookupFlag: 0,
                    subtables: [],
                    markFilteringSet: undefined
                };
                const index = allLookups.length;
                allLookups.push(lookupTable);
                lookupListIndexes.push(index);
                return [lookupTable];
            }
        }
        return tables;
    },

    /**
     * Returns the list of glyph indexes of a coverage table.
     * Format 1: the list is stored raw
     * Format 2: compact list as range records.
     * @instance
     * @param  {Object} coverageTable
     * @return {Array}
     */
    expandCoverage: function(coverageTable) {
        if (coverageTable.format === 1) {
            return coverageTable.glyphs;
        } else {
            const glyphs = [];
            const ranges = coverageTable.ranges;
            for (let i = 0; i < ranges.length; i++) {
                const range = ranges[i];
                const start = range.start;
                const end = range.end;
                for (let j = start; j <= end; j++) {
                    glyphs.push(j);
                }
            }
            return glyphs;
        }
    }

};

// The Substitution object provides utility methods to manipulate

/**
 * @exports opentype.Substitution
 * @class
 * @extends opentype.Layout
 * @param {opentype.Font}
 * @constructor
 */
function Substitution(font) {
    Layout.call(this, font, 'gsub');
}

// Check if 2 arrays of primitives are equal.
function arraysEqual(ar1, ar2) {
    const n = ar1.length;
    if (n !== ar2.length) { return false; }
    for (let i = 0; i < n; i++) {
        if (ar1[i] !== ar2[i]) { return false; }
    }
    return true;
}

// Find the first subtable of a lookup table in a particular format.
function getSubstFormat(lookupTable, format, defaultSubtable) {
    const subtables = lookupTable.subtables;
    for (let i = 0; i < subtables.length; i++) {
        const subtable = subtables[i];
        if (subtable.substFormat === format) {
            return subtable;
        }
    }
    if (defaultSubtable) {
        subtables.push(defaultSubtable);
        return defaultSubtable;
    }
    return undefined;
}

Substitution.prototype = Layout.prototype;

/**
 * Create a default GSUB table.
 * @return {Object} gsub - The GSUB table.
 */
Substitution.prototype.createDefaultTable = function() {
    // Generate a default empty GSUB table with just a DFLT script and dflt lang sys.
    return {
        version: 1,
        scripts: [{
            tag: 'DFLT',
            script: {
                defaultLangSys: { reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: [] },
                langSysRecords: []
            }
        }],
        features: [],
        lookups: []
    };
};

/**
 * List all single substitutions (lookup type 1) for a given script, language, and feature.
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 * @param {string} feature - 4-character feature name ('aalt', 'salt', 'ss01'...)
 * @return {Array} substitutions - The list of substitutions.
 */
Substitution.prototype.getSingle = function(feature, script, language) {
    const substitutions = [];
    const lookupTables = this.getLookupTables(script, language, feature, 1);
    for (let idx = 0; idx < lookupTables.length; idx++) {
        const subtables = lookupTables[idx].subtables;
        for (let i = 0; i < subtables.length; i++) {
            const subtable = subtables[i];
            const glyphs = this.expandCoverage(subtable.coverage);
            let j;
            if (subtable.substFormat === 1) {
                const delta = subtable.deltaGlyphId;
                for (j = 0; j < glyphs.length; j++) {
                    const glyph = glyphs[j];
                    substitutions.push({ sub: glyph, by: glyph + delta });
                }
            } else {
                const substitute = subtable.substitute;
                for (j = 0; j < glyphs.length; j++) {
                    substitutions.push({ sub: glyphs[j], by: substitute[j] });
                }
            }
        }
    }
    return substitutions;
};

/**
 * List all alternates (lookup type 3) for a given script, language, and feature.
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 * @param {string} feature - 4-character feature name ('aalt', 'salt'...)
 * @return {Array} alternates - The list of alternates
 */
Substitution.prototype.getAlternates = function(feature, script, language) {
    const alternates = [];
    const lookupTables = this.getLookupTables(script, language, feature, 3);
    for (let idx = 0; idx < lookupTables.length; idx++) {
        const subtables = lookupTables[idx].subtables;
        for (let i = 0; i < subtables.length; i++) {
            const subtable = subtables[i];
            const glyphs = this.expandCoverage(subtable.coverage);
            const alternateSets = subtable.alternateSets;
            for (let j = 0; j < glyphs.length; j++) {
                alternates.push({ sub: glyphs[j], by: alternateSets[j] });
            }
        }
    }
    return alternates;
};

/**
 * List all ligatures (lookup type 4) for a given script, language, and feature.
 * The result is an array of ligature objects like { sub: [ids], by: id }
 * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 * @return {Array} ligatures - The list of ligatures.
 */
Substitution.prototype.getLigatures = function(feature, script, language) {
    const ligatures = [];
    const lookupTables = this.getLookupTables(script, language, feature, 4);
    for (let idx = 0; idx < lookupTables.length; idx++) {
        const subtables = lookupTables[idx].subtables;
        for (let i = 0; i < subtables.length; i++) {
            const subtable = subtables[i];
            const glyphs = this.expandCoverage(subtable.coverage);
            const ligatureSets = subtable.ligatureSets;
            for (let j = 0; j < glyphs.length; j++) {
                const startGlyph = glyphs[j];
                const ligSet = ligatureSets[j];
                for (let k = 0; k < ligSet.length; k++) {
                    const lig = ligSet[k];
                    ligatures.push({
                        sub: [startGlyph].concat(lig.components),
                        by: lig.ligGlyph
                    });
                }
            }
        }
    }
    return ligatures;
};

/**
 * Add or modify a single substitution (lookup type 1)
 * Format 2, more flexible, is always used.
 * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
 * @param {Object} substitution - { sub: id, delta: number } for format 1 or { sub: id, by: id } for format 2.
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 */
Substitution.prototype.addSingle = function(feature, substitution, script, language) {
    const lookupTable = this.getLookupTables(script, language, feature, 1, true)[0];
    const subtable = getSubstFormat(lookupTable, 2, {                // lookup type 1 subtable, format 2, coverage format 1
        substFormat: 2,
        coverage: {format: 1, glyphs: []},
        substitute: []
    });
    check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);
    const coverageGlyph = substitution.sub;
    let pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
    if (pos < 0) {
        pos = -1 - pos;
        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
        subtable.substitute.splice(pos, 0, 0);
    }
    subtable.substitute[pos] = substitution.by;
};

/**
 * Add or modify an alternate substitution (lookup type 1)
 * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
 * @param {Object} substitution - { sub: id, by: [ids] }
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 */
Substitution.prototype.addAlternate = function(feature, substitution, script, language) {
    const lookupTable = this.getLookupTables(script, language, feature, 3, true)[0];
    const subtable = getSubstFormat(lookupTable, 1, {                // lookup type 3 subtable, format 1, coverage format 1
        substFormat: 1,
        coverage: {format: 1, glyphs: []},
        alternateSets: []
    });
    check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);
    const coverageGlyph = substitution.sub;
    let pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
    if (pos < 0) {
        pos = -1 - pos;
        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
        subtable.alternateSets.splice(pos, 0, 0);
    }
    subtable.alternateSets[pos] = substitution.by;
};

/**
 * Add a ligature (lookup type 4)
 * Ligatures with more components must be stored ahead of those with fewer components in order to be found
 * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
 * @param {Object} ligature - { sub: [ids], by: id }
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 */
Substitution.prototype.addLigature = function(feature, ligature, script, language) {
    const lookupTable = this.getLookupTables(script, language, feature, 4, true)[0];
    let subtable = lookupTable.subtables[0];
    if (!subtable) {
        subtable = {                // lookup type 4 subtable, format 1, coverage format 1
            substFormat: 1,
            coverage: { format: 1, glyphs: [] },
            ligatureSets: []
        };
        lookupTable.subtables[0] = subtable;
    }
    check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);
    const coverageGlyph = ligature.sub[0];
    const ligComponents = ligature.sub.slice(1);
    const ligatureTable = {
        ligGlyph: ligature.by,
        components: ligComponents
    };
    let pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
    if (pos >= 0) {
        // ligatureSet already exists
        const ligatureSet = subtable.ligatureSets[pos];
        for (let i = 0; i < ligatureSet.length; i++) {
            // If ligature already exists, return.
            if (arraysEqual(ligatureSet[i].components, ligComponents)) {
                return;
            }
        }
        // ligature does not exist: add it.
        ligatureSet.push(ligatureTable);
    } else {
        // Create a new ligatureSet and add coverage for the first glyph.
        pos = -1 - pos;
        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
        subtable.ligatureSets.splice(pos, 0, [ligatureTable]);
    }
};

/**
 * List all feature data for a given script and language.
 * @param {string} feature - 4-letter feature name
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 * @return {Array} substitutions - The list of substitutions.
 */
Substitution.prototype.getFeature = function(feature, script, language) {
    if (/ss\d\d/.test(feature)) {               // ss01 - ss20
        return this.getSingle(feature, script, language);
    }
    switch (feature) {
        case 'aalt':
        case 'salt':
            return this.getSingle(feature, script, language)
                    .concat(this.getAlternates(feature, script, language));
        case 'dlig':
        case 'liga':
        case 'rlig': return this.getLigatures(feature, script, language);
    }
    return undefined;
};

/**
 * Add a substitution to a feature for a given script and language.
 * @param {string} feature - 4-letter feature name
 * @param {Object} sub - the substitution to add (an object like { sub: id or [ids], by: id or [ids] })
 * @param {string} [script='DFLT']
 * @param {string} [language='dflt']
 */
Substitution.prototype.add = function(feature, sub, script, language) {
    if (/ss\d\d/.test(feature)) {               // ss01 - ss20
        return this.addSingle(feature, sub, script, language);
    }
    switch (feature) {
        case 'aalt':
        case 'salt':
            if (typeof sub.by === 'number') {
                return this.addSingle(feature, sub, script, language);
            }
            return this.addAlternate(feature, sub, script, language);
        case 'dlig':
        case 'liga':
        case 'rlig':
            return this.addLigature(feature, sub, script, language);
    }
    return undefined;
};

function isBrowser() {
    return typeof window !== 'undefined';
}

function nodeBufferToArrayBuffer(buffer) {
    const ab = new ArrayBuffer(buffer.length);
    const view = new Uint8Array(ab);
    for (let i = 0; i < buffer.length; ++i) {
        view[i] = buffer[i];
    }

    return ab;
}

function arrayBufferToNodeBuffer(ab) {
    const buffer = new Buffer(ab.byteLength);
    const view = new Uint8Array(ab);
    for (let i = 0; i < buffer.length; ++i) {
        buffer[i] = view[i];
    }

    return buffer;
}

function checkArgument(expression, message) {
    if (!expression) {
        throw message;
    }
}

/* A TrueType font hinting interpreter.
*
* (c) 2017 Axel Kittenberger
*
* This interpreter has been implemented according to this documentation:
* https://developer.apple.com/fonts/TrueType-Reference-Manual/RM05/Chap5.html
*
* According to the documentation F24DOT6 values are used for pixels.
* That means calculation is 1/64 pixel accurate and uses integer operations.
* However, Javascript has floating point operations by default and only
* those are available. One could make a case to simulate the 1/64 accuracy
* exactly by truncating after every division operation
* (for example with << 0) to get pixel exactly results as other TrueType
* implementations. It may make sense since some fonts are pixel optimized
* by hand using DELTAP instructions. The current implementation doesn't
* and rather uses full floating point precision.
*
* xScale, yScale and rotation is currently ignored.
*
* A few non-trivial instructions are missing as I didn't encounter yet
* a font that used them to test a possible implementation.
*
* Some fonts seem to use undocumented features regarding the twilight zone.
* Only some of them are implemented as they were encountered.
*
* The exports.DEBUG statements are removed on the minified distribution file.
*/

let instructionTable;
let exec;
let execGlyph;
let execComponent;

/*
* Creates a hinting object.
*
* There ought to be exactly one
* for each truetype font that is used for hinting.
*/
function Hinting(font) {
    // the font this hinting object is for
    this.font = font;

    // cached states
    this._fpgmState  =
    this._prepState  =
        undefined;

    // errorState
    // 0 ... all okay
    // 1 ... had an error in a glyf,
    //       continue working but stop spamming
    //       the console
    // 2 ... error at prep, stop hinting at this ppem
    // 3 ... error at fpeg, stop hinting for this font at all
    this._errorState = 0;
}

/*
* Not rounding.
*/
function roundOff(v) {
    return v;
}

/*
* Rounding to grid.
*/
function roundToGrid(v) {
    //Rounding in TT is supposed to "symmetrical around zero"
    return Math.sign(v) * Math.round(Math.abs(v));
}

/*
* Rounding to double grid.
*/
function roundToDoubleGrid(v) {
    return Math.sign(v) * Math.round(Math.abs(v * 2)) / 2;
}

/*
* Rounding to half grid.
*/
function roundToHalfGrid(v) {
    return Math.sign(v) * (Math.round(Math.abs(v) + 0.5) - 0.5);
}

/*
* Rounding to up to grid.
*/
function roundUpToGrid(v) {
    return Math.sign(v) * Math.ceil(Math.abs(v));
}

/*
* Rounding to down to grid.
*/
function roundDownToGrid(v) {
    return Math.sign(v) * Math.floor(Math.abs(v));
}

/*
* Super rounding.
*/
const roundSuper = function (v) {
    const period = this.srPeriod;
    let phase = this.srPhase;
    const threshold = this.srThreshold;
    let sign = 1;

    if (v < 0) {
        v = -v;
        sign = -1;
    }

    v += threshold - phase;

    v = Math.trunc(v / period) * period;

    v += phase;

    // according to http://xgridfit.sourceforge.net/round.html
    if (sign > 0 && v < 0) return phase;
    if (sign < 0 && v > 0) return -phase;

    return v * sign;
};

/*
* Unit vector of x-axis.
*/
const xUnitVector = {
    x: 1,

    y: 0,

    axis: 'x',

    // Gets the projected distance between two points.
    // o1/o2 ... if true, respective original position is used.
    distance: function (p1, p2, o1, o2) {
        return (o1 ? p1.xo : p1.x) - (o2 ? p2.xo : p2.x);
    },

    // Moves point p so the moved position has the same relative
    // position to the moved positions of rp1 and rp2 than the
    // original positions had.
    //
    // See APPENDIX on INTERPOLATE at the bottom of this file.
    interpolate: function (p, rp1, rp2, pv) {
        let do1;
        let do2;
        let doa1;
        let doa2;
        let dm1;
        let dm2;
        let dt;

        if (!pv || pv === this) {
            do1 = p.xo - rp1.xo;
            do2 = p.xo - rp2.xo;
            dm1 = rp1.x - rp1.xo;
            dm2 = rp2.x - rp2.xo;
            doa1 = Math.abs(do1);
            doa2 = Math.abs(do2);
            dt = doa1 + doa2;

            if (dt === 0) {
                p.x = p.xo + (dm1 + dm2) / 2;
                return;
            }

            p.x = p.xo + (dm1 * doa2 + dm2 * doa1) / dt;
            return;
        }

        do1 = pv.distance(p, rp1, true, true);
        do2 = pv.distance(p, rp2, true, true);
        dm1 = pv.distance(rp1, rp1, false, true);
        dm2 = pv.distance(rp2, rp2, false, true);
        doa1 = Math.abs(do1);
        doa2 = Math.abs(do2);
        dt = doa1 + doa2;

        if (dt === 0) {
            xUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
            return;
        }

        xUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
    },

    // Slope of line normal to this
    normalSlope: Number.NEGATIVE_INFINITY,

    // Sets the point 'p' relative to point 'rp'
    // by the distance 'd'.
    //
    // See APPENDIX on SETRELATIVE at the bottom of this file.
    //
    // p   ... point to set
    // rp  ... reference point
    // d   ... distance on projection vector
    // pv  ... projection vector (undefined = this)
    // org ... if true, uses the original position of rp as reference.
    setRelative: function (p, rp, d, pv, org) {
        if (!pv || pv === this) {
            p.x = (org ? rp.xo : rp.x) + d;
            return;
        }

        const rpx = org ? rp.xo : rp.x;
        const rpy = org ? rp.yo : rp.y;
        const rpdx = rpx + d * pv.x;
        const rpdy = rpy + d * pv.y;

        p.x = rpdx + (p.y - rpdy) / pv.normalSlope;
    },

    // Slope of vector line.
    slope: 0,

    // Touches the point p.
    touch: function (p) {
        p.xTouched = true;
    },

    // Tests if a point p is touched.
    touched: function (p) {
        return p.xTouched;
    },

    // Untouches the point p.
    untouch: function (p) {
        p.xTouched = false;
    }
};

/*
* Unit vector of y-axis.
*/
const yUnitVector = {
    x: 0,

    y: 1,

    axis: 'y',

    // Gets the projected distance between two points.
    // o1/o2 ... if true, respective original position is used.
    distance: function (p1, p2, o1, o2) {
        return (o1 ? p1.yo : p1.y) - (o2 ? p2.yo : p2.y);
    },

    // Moves point p so the moved position has the same relative
    // position to the moved positions of rp1 and rp2 than the
    // original positions had.
    //
    // See APPENDIX on INTERPOLATE at the bottom of this file.
    interpolate: function (p, rp1, rp2, pv) {
        let do1;
        let do2;
        let doa1;
        let doa2;
        let dm1;
        let dm2;
        let dt;

        if (!pv || pv === this) {
            do1 = p.yo - rp1.yo;
            do2 = p.yo - rp2.yo;
            dm1 = rp1.y - rp1.yo;
            dm2 = rp2.y - rp2.yo;
            doa1 = Math.abs(do1);
            doa2 = Math.abs(do2);
            dt = doa1 + doa2;

            if (dt === 0) {
                p.y = p.yo + (dm1 + dm2) / 2;
                return;
            }

            p.y = p.yo + (dm1 * doa2 + dm2 * doa1) / dt;
            return;
        }

        do1 = pv.distance(p, rp1, true, true);
        do2 = pv.distance(p, rp2, true, true);
        dm1 = pv.distance(rp1, rp1, false, true);
        dm2 = pv.distance(rp2, rp2, false, true);
        doa1 = Math.abs(do1);
        doa2 = Math.abs(do2);
        dt = doa1 + doa2;

        if (dt === 0) {
            yUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
            return;
        }

        yUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
    },

    // Slope of line normal to this.
    normalSlope: 0,

    // Sets the point 'p' relative to point 'rp'
    // by the distance 'd'
    //
    // See APPENDIX on SETRELATIVE at the bottom of this file.
    //
    // p   ... point to set
    // rp  ... reference point
    // d   ... distance on projection vector
    // pv  ... projection vector (undefined = this)
    // org ... if true, uses the original position of rp as reference.
    setRelative: function (p, rp, d, pv, org) {
        if (!pv || pv === this) {
            p.y = (org ? rp.yo : rp.y) + d;
            return;
        }

        const rpx = org ? rp.xo : rp.x;
        const rpy = org ? rp.yo : rp.y;
        const rpdx = rpx + d * pv.x;
        const rpdy = rpy + d * pv.y;

        p.y = rpdy + pv.normalSlope * (p.x - rpdx);
    },

    // Slope of vector line.
    slope: Number.POSITIVE_INFINITY,

    // Touches the point p.
    touch: function (p) {
        p.yTouched = true;
    },

    // Tests if a point p is touched.
    touched: function (p) {
        return p.yTouched;
    },

    // Untouches the point p.
    untouch: function (p) {
        p.yTouched = false;
    }
};

Object.freeze(xUnitVector);
Object.freeze(yUnitVector);

/*
* Creates a unit vector that is not x- or y-axis.
*/
function UnitVector(x, y) {
    this.x = x;
    this.y = y;
    this.axis = undefined;
    this.slope = y / x;
    this.normalSlope = -x / y;
    Object.freeze(this);
}

/*
* Gets the projected distance between two points.
* o1/o2 ... if true, respective original position is used.
*/
UnitVector.prototype.distance = function(p1, p2, o1, o2) {
    return (
        this.x * xUnitVector.distance(p1, p2, o1, o2) +
        this.y * yUnitVector.distance(p1, p2, o1, o2)
    );
};

/*
* Moves point p so the moved position has the same relative
* position to the moved positions of rp1 and rp2 than the
* original positions had.
*
* See APPENDIX on INTERPOLATE at the bottom of this file.
*/
UnitVector.prototype.interpolate = function(p, rp1, rp2, pv) {
    let dm1;
    let dm2;
    let do1;
    let do2;
    let doa1;
    let doa2;
    let dt;

    do1 = pv.distance(p, rp1, true, true);
    do2 = pv.distance(p, rp2, true, true);
    dm1 = pv.distance(rp1, rp1, false, true);
    dm2 = pv.distance(rp2, rp2, false, true);
    doa1 = Math.abs(do1);
    doa2 = Math.abs(do2);
    dt = doa1 + doa2;

    if (dt === 0) {
        this.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
        return;
    }

    this.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
};

/*
* Sets the point 'p' relative to point 'rp'
* by the distance 'd'
*
* See APPENDIX on SETRELATIVE at the bottom of this file.
*
* p   ...  point to set
* rp  ... reference point
* d   ... distance on projection vector
* pv  ... projection vector (undefined = this)
* org ... if true, uses the original position of rp as reference.
*/
UnitVector.prototype.setRelative = function(p, rp, d, pv, org) {
    pv = pv || this;

    const rpx = org ? rp.xo : rp.x;
    const rpy = org ? rp.yo : rp.y;
    const rpdx = rpx + d * pv.x;
    const rpdy = rpy + d * pv.y;

    const pvns = pv.normalSlope;
    const fvs = this.slope;

    const px = p.x;
    const py = p.y;

    p.x = (fvs * px - pvns * rpdx + rpdy - py) / (fvs - pvns);
    p.y = fvs * (p.x - px) + py;
};

/*
* Touches the point p.
*/
UnitVector.prototype.touch = function(p) {
    p.xTouched = true;
    p.yTouched = true;
};

/*
* Returns a unit vector with x/y coordinates.
*/
function getUnitVector(x, y) {
    const d = Math.sqrt(x * x + y * y);

    x /= d;
    y /= d;

    if (x === 1 && y === 0) return xUnitVector;
    else if (x === 0 && y === 1) return yUnitVector;
    else return new UnitVector(x, y);
}

/*
* Creates a point in the hinting engine.
*/
function HPoint(
    x,
    y,
    lastPointOfContour,
    onCurve
) {
    this.x = this.xo = Math.round(x * 64) / 64; // hinted x value and original x-value
    this.y = this.yo = Math.round(y * 64) / 64; // hinted y value and original y-value

    this.lastPointOfContour = lastPointOfContour;
    this.onCurve = onCurve;
    this.prevPointOnContour = undefined;
    this.nextPointOnContour = undefined;
    this.xTouched = false;
    this.yTouched = false;

    Object.preventExtensions(this);
}

/*
* Returns the next touched point on the contour.
*
* v  ... unit vector to test touch axis.
*/
HPoint.prototype.nextTouched = function(v) {
    let p = this.nextPointOnContour;

    while (!v.touched(p) && p !== this) p = p.nextPointOnContour;

    return p;
};

/*
* Returns the previous touched point on the contour
*
* v  ... unit vector to test touch axis.
*/
HPoint.prototype.prevTouched = function(v) {
    let p = this.prevPointOnContour;

    while (!v.touched(p) && p !== this) p = p.prevPointOnContour;

    return p;
};

/*
* The zero point.
*/
const HPZero = Object.freeze(new HPoint(0, 0));

/*
* The default state of the interpreter.
*
* Note: Freezing the defaultState and then deriving from it
* makes the V8 Javascript engine going awkward,
* so this is avoided, albeit the defaultState shouldn't
* ever change.
*/
const defaultState = {
    cvCutIn: 17 / 16,    // control value cut in
    deltaBase: 9,
    deltaShift: 0.125,
    loop: 1,             // loops some instructions
    minDis: 1,           // minimum distance
    autoFlip: true
};

/*
* The current state of the interpreter.
*
* env  ... 'fpgm' or 'prep' or 'glyf'
* prog ... the program
*/
function State(env, prog) {
    this.env = env;
    this.stack = [];
    this.prog = prog;

    switch (env) {
        case 'glyf' :
            this.zp0 = this.zp1 = this.zp2 = 1;
            this.rp0 = this.rp1 = this.rp2 = 0;
            /* fall through */
        case 'prep' :
            this.fv = this.pv = this.dpv = xUnitVector;
            this.round = roundToGrid;
    }
}

/*
* Executes a glyph program.
*
* This does the hinting for each glyph.
*
* Returns an array of moved points.
*
* glyph: the glyph to hint
* ppem: the size the glyph is rendered for
*/
Hinting.prototype.exec = function(glyph, ppem) {
    if (typeof ppem !== 'number') {
        throw new Error('Point size is not a number!');
    }

    // Received a fatal error, don't do any hinting anymore.
    if (this._errorState > 2) return;

    const font = this.font;
    let prepState = this._prepState;

    if (!prepState || prepState.ppem !== ppem) {
        let fpgmState = this._fpgmState;

        if (!fpgmState) {
            // Executes the fpgm state.
            // This is used by fonts to define functions.
            State.prototype = defaultState;

            fpgmState =
            this._fpgmState =
                new State('fpgm', font.tables.fpgm);

            fpgmState.funcs = [ ];
            fpgmState.font = font;

            if (exports.DEBUG) {
                console.log('---EXEC FPGM---');
                fpgmState.step = -1;
            }

            try {
                exec(fpgmState);
            } catch (e) {
                console.log('Hinting error in FPGM:' + e);
                this._errorState = 3;
                return;
            }
        }

        // Executes the prep program for this ppem setting.
        // This is used by fonts to set cvt values
        // depending on to be rendered font size.

        State.prototype = fpgmState;
        prepState =
        this._prepState =
            new State('prep', font.tables.prep);

        prepState.ppem = ppem;

        // Creates a copy of the cvt table
        // and scales it to the current ppem setting.
        const oCvt = font.tables.cvt;
        if (oCvt) {
            const cvt = prepState.cvt = new Array(oCvt.length);
            const scale = ppem / font.unitsPerEm;
            for (let c = 0; c < oCvt.length; c++) {
                cvt[c] = oCvt[c] * scale;
            }
        } else {
            prepState.cvt = [];
        }

        if (exports.DEBUG) {
            console.log('---EXEC PREP---');
            prepState.step = -1;
        }

        try {
            exec(prepState);
        } catch (e) {
            if (this._errorState < 2) {
                console.log('Hinting error in PREP:' + e);
            }
            this._errorState = 2;
        }
    }

    if (this._errorState > 1) return;

    try {
        return execGlyph(glyph, prepState);
    } catch (e) {
        if (this._errorState < 1) {
            console.log('Hinting error:' + e);
            console.log('Note: further hinting errors are silenced');
        }
        this._errorState = 1;
        return undefined;
    }
};

/*
* Executes the hinting program for a glyph.
*/
execGlyph = function(glyph, prepState) {
    // original point positions
    const xScale = prepState.ppem / prepState.font.unitsPerEm;
    const yScale = xScale;
    let components = glyph.components;
    let contours;
    let gZone;
    let state;

    State.prototype = prepState;
    if (!components) {
        state = new State('glyf', glyph.instructions);
        if (exports.DEBUG) {
            console.log('---EXEC GLYPH---');
            state.step = -1;
        }
        execComponent(glyph, state, xScale, yScale);
        gZone = state.gZone;
    } else {
        const font = prepState.font;
        gZone = [];
        contours = [];
        for (let i = 0; i < components.length; i++) {
            const c = components[i];
            const cg = font.glyphs.get(c.glyphIndex);

            state = new State('glyf', cg.instructions);

            if (exports.DEBUG) {
                console.log('---EXEC COMP ' + i + '---');
                state.step = -1;
            }

            execComponent(cg, state, xScale, yScale);
            // appends the computed points to the result array
            // post processes the component points
            const dx = Math.round(c.dx * xScale);
            const dy = Math.round(c.dy * yScale);
            const gz = state.gZone;
            const cc = state.contours;
            for (let pi = 0; pi < gz.length; pi++) {
                const p = gz[pi];
                p.xTouched = p.yTouched = false;
                p.xo = p.x = p.x + dx;
                p.yo = p.y = p.y + dy;
            }

            const gLen = gZone.length;
            gZone.push.apply(gZone, gz);
            for (let j = 0; j < cc.length; j++) {
                contours.push(cc[j] + gLen);
            }
        }

        if (glyph.instructions && !state.inhibitGridFit) {
            // the composite has instructions on its own
            state = new State('glyf', glyph.instructions);

            state.gZone = state.z0 = state.z1 = state.z2 = gZone;

            state.contours = contours;

            // note: HPZero cannot be used here, since
            //       the point might be modified
            gZone.push(
                new HPoint(0, 0),
                new HPoint(Math.round(glyph.advanceWidth * xScale), 0)
            );

            if (exports.DEBUG) {
                console.log('---EXEC COMPOSITE---');
                state.step = -1;
            }

            exec(state);

            gZone.length -= 2;
        }
    }

    return gZone;
};

/*
* Executes the hinting program for a component of a multi-component glyph
* or of the glyph itself by a non-component glyph.
*/
execComponent = function(glyph, state, xScale, yScale)
{
    const points = glyph.points || [];
    const pLen = points.length;
    const gZone = state.gZone = state.z0 = state.z1 = state.z2 = [];
    const contours = state.contours = [];

    // Scales the original points and
    // makes copies for the hinted points.
    let cp; // current point
    for (let i = 0; i < pLen; i++) {
        cp = points[i];

        gZone[i] = new HPoint(
            cp.x * xScale,
            cp.y * yScale,
            cp.lastPointOfContour,
            cp.onCurve
        );
    }

    // Chain links the contours.
    let sp; // start point
    let np; // next point

    for (let i = 0; i < pLen; i++) {
        cp = gZone[i];

        if (!sp) {
            sp = cp;
            contours.push(i);
        }

        if (cp.lastPointOfContour) {
            cp.nextPointOnContour = sp;
            sp.prevPointOnContour = cp;
            sp = undefined;
        } else {
            np = gZone[i + 1];
            cp.nextPointOnContour = np;
            np.prevPointOnContour = cp;
        }
    }

    if (state.inhibitGridFit) return;

    gZone.push(
        new HPoint(0, 0),
        new HPoint(Math.round(glyph.advanceWidth * xScale), 0)
    );

    exec(state);

    // Removes the extra points.
    gZone.length -= 2;

    if (exports.DEBUG) {
        console.log('FINISHED GLYPH', state.stack);
        for (let i = 0; i < pLen; i++) {
            console.log(i, gZone[i].x, gZone[i].y);
        }
    }
};

/*
* Executes the program loaded in state.
*/
exec = function(state) {
    let prog = state.prog;

    if (!prog) return;

    const pLen = prog.length;
    let ins;

    for (state.ip = 0; state.ip < pLen; state.ip++) {
        if (exports.DEBUG) state.step++;
        ins = instructionTable[prog[state.ip]];

        if (!ins) {
            throw new Error(
                'unknown instruction: 0x' +
                Number(prog[state.ip]).toString(16)
            );
        }

        ins(state);

        // very extensive debugging for each step
        /*
        if (exports.DEBUG) {
            var da;
            if (state.gZone) {
                da = [];
                for (let i = 0; i < state.gZone.length; i++)
                {
                    da.push(i + ' ' +
                        state.gZone[i].x * 64 + ' ' +
                        state.gZone[i].y * 64 + ' ' +
                        (state.gZone[i].xTouched ? 'x' : '') +
                        (state.gZone[i].yTouched ? 'y' : '')
                    );
                }
                console.log('GZ', da);
            }

            if (state.tZone) {
                da = [];
                for (let i = 0; i < state.tZone.length; i++) {
                    da.push(i + ' ' +
                        state.tZone[i].x * 64 + ' ' +
                        state.tZone[i].y * 64 + ' ' +
                        (state.tZone[i].xTouched ? 'x' : '') +
                        (state.tZone[i].yTouched ? 'y' : '')
                    );
                }
                console.log('TZ', da);
            }

            if (state.stack.length > 10) {
                console.log(
                    state.stack.length,
                    '...', state.stack.slice(state.stack.length - 10)
                );
            } else {
                console.log(state.stack.length, state.stack);
            }
        }
        */
    }
};

/*
* Initializes the twilight zone.
*
* This is only done if a SZPx instruction
* refers to the twilight zone.
*/
function initTZone(state)
{
    const tZone = state.tZone = new Array(state.gZone.length);

    // no idea if this is actually correct...
    for (let i = 0; i < tZone.length; i++)
    {
        tZone[i] = new HPoint(0, 0);
    }
}

/*
* Skips the instruction pointer ahead over an IF/ELSE block.
* handleElse .. if true breaks on matching ELSE
*/
function skip(state, handleElse)
{
    const prog = state.prog;
    let ip = state.ip;
    let nesting = 1;
    let ins;

    do {
        ins = prog[++ip];
        if (ins === 0x58) // IF
            nesting++;
        else if (ins === 0x59) // EIF
            nesting--;
        else if (ins === 0x40) // NPUSHB
            ip += prog[ip + 1] + 1;
        else if (ins === 0x41) // NPUSHW
            ip += 2 * prog[ip + 1] + 1;
        else if (ins >= 0xB0 && ins <= 0xB7) // PUSHB
            ip += ins - 0xB0 + 1;
        else if (ins >= 0xB8 && ins <= 0xBF) // PUSHW
            ip += (ins - 0xB8 + 1) * 2;
        else if (handleElse && nesting === 1 && ins === 0x1B) // ELSE
            break;
    } while (nesting > 0);

    state.ip = ip;
}

/*----------------------------------------------------------*
*          And then a lot of instructions...                *
*----------------------------------------------------------*/

// SVTCA[a] Set freedom and projection Vectors To Coordinate Axis
// 0x00-0x01
function SVTCA(v, state) {
    if (exports.DEBUG) console.log(state.step, 'SVTCA[' + v.axis + ']');

    state.fv = state.pv = state.dpv = v;
}

// SPVTCA[a] Set Projection Vector to Coordinate Axis
// 0x02-0x03
function SPVTCA(v, state) {
    if (exports.DEBUG) console.log(state.step, 'SPVTCA[' + v.axis + ']');

    state.pv = state.dpv = v;
}

// SFVTCA[a] Set Freedom Vector to Coordinate Axis
// 0x04-0x05
function SFVTCA(v, state) {
    if (exports.DEBUG) console.log(state.step, 'SFVTCA[' + v.axis + ']');

    state.fv = v;
}

// SPVTL[a] Set Projection Vector To Line
// 0x06-0x07
function SPVTL(a, state) {
    const stack = state.stack;
    const p2i = stack.pop();
    const p1i = stack.pop();
    const p2 = state.z2[p2i];
    const p1 = state.z1[p1i];

    if (exports.DEBUG) console.log('SPVTL[' + a + ']', p2i, p1i);

    let dx;
    let dy;

    if (!a) {
        dx = p1.x - p2.x;
        dy = p1.y - p2.y;
    } else {
        dx = p2.y - p1.y;
        dy = p1.x - p2.x;
    }

    state.pv = state.dpv = getUnitVector(dx, dy);
}

// SFVTL[a] Set Freedom Vector To Line
// 0x08-0x09
function SFVTL(a, state) {
    const stack = state.stack;
    const p2i = stack.pop();
    const p1i = stack.pop();
    const p2 = state.z2[p2i];
    const p1 = state.z1[p1i];

    if (exports.DEBUG) console.log('SFVTL[' + a + ']', p2i, p1i);

    let dx;
    let dy;

    if (!a) {
        dx = p1.x - p2.x;
        dy = p1.y - p2.y;
    } else {
        dx = p2.y - p1.y;
        dy = p1.x - p2.x;
    }

    state.fv = getUnitVector(dx, dy);
}

// SPVFS[] Set Projection Vector From Stack
// 0x0A
function SPVFS(state) {
    const stack = state.stack;
    const y = stack.pop();
    const x = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'SPVFS[]', y, x);

    state.pv = state.dpv = getUnitVector(x, y);
}

// SFVFS[] Set Freedom Vector From Stack
// 0x0B
function SFVFS(state) {
    const stack = state.stack;
    const y = stack.pop();
    const x = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'SPVFS[]', y, x);

    state.fv = getUnitVector(x, y);
}

// GPV[] Get Projection Vector
// 0x0C
function GPV(state) {
    const stack = state.stack;
    const pv = state.pv;

    if (exports.DEBUG) console.log(state.step, 'GPV[]');

    stack.push(pv.x * 0x4000);
    stack.push(pv.y * 0x4000);
}

// GFV[] Get Freedom Vector
// 0x0C
function GFV(state) {
    const stack = state.stack;
    const fv = state.fv;

    if (exports.DEBUG) console.log(state.step, 'GFV[]');

    stack.push(fv.x * 0x4000);
    stack.push(fv.y * 0x4000);
}

// SFVTPV[] Set Freedom Vector To Projection Vector
// 0x0E
function SFVTPV(state) {
    state.fv = state.pv;

    if (exports.DEBUG) console.log(state.step, 'SFVTPV[]');
}

// ISECT[] moves point p to the InterSECTion of two lines
// 0x0F
function ISECT(state)
{
    const stack = state.stack;
    const pa0i = stack.pop();
    const pa1i = stack.pop();
    const pb0i = stack.pop();
    const pb1i = stack.pop();
    const pi = stack.pop();
    const z0 = state.z0;
    const z1 = state.z1;
    const pa0 = z0[pa0i];
    const pa1 = z0[pa1i];
    const pb0 = z1[pb0i];
    const pb1 = z1[pb1i];
    const p = state.z2[pi];

    if (exports.DEBUG) console.log('ISECT[], ', pa0i, pa1i, pb0i, pb1i, pi);

    // math from
    // en.wikipedia.org/wiki/Line%E2%80%93line_intersection#Given_two_points_on_each_line

    const x1 = pa0.x;
    const y1 = pa0.y;
    const x2 = pa1.x;
    const y2 = pa1.y;
    const x3 = pb0.x;
    const y3 = pb0.y;
    const x4 = pb1.x;
    const y4 = pb1.y;

    const div = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
    const f1 = x1 * y2 - y1 * x2;
    const f2 = x3 * y4 - y3 * x4;

    p.x = (f1 * (x3 - x4) - f2 * (x1 - x2)) / div;
    p.y = (f1 * (y3 - y4) - f2 * (y1 - y2)) / div;
}

// SRP0[] Set Reference Point 0
// 0x10
function SRP0(state) {
    state.rp0 = state.stack.pop();

    if (exports.DEBUG) console.log(state.step, 'SRP0[]', state.rp0);
}

// SRP1[] Set Reference Point 1
// 0x11
function SRP1(state) {
    state.rp1 = state.stack.pop();

    if (exports.DEBUG) console.log(state.step, 'SRP1[]', state.rp1);
}

// SRP1[] Set Reference Point 2
// 0x12
function SRP2(state) {
    state.rp2 = state.stack.pop();

    if (exports.DEBUG) console.log(state.step, 'SRP2[]', state.rp2);
}

// SZP0[] Set Zone Pointer 0
// 0x13
function SZP0(state) {
    const n = state.stack.pop();

    if (exports.DEBUG) console.log(state.step, 'SZP0[]', n);

    state.zp0 = n;

    switch (n) {
        case 0:
            if (!state.tZone) initTZone(state);
            state.z0 = state.tZone;
            break;
        case 1 :
            state.z0 = state.gZone;
            break;
        default :
            throw new Error('Invalid zone pointer');
    }
}

// SZP1[] Set Zone Pointer 1
// 0x14
function SZP1(state) {
    const n = state.stack.pop();

    if (exports.DEBUG) console.log(state.step, 'SZP1[]', n);

    state.zp1 = n;

    switch (n) {
        case 0:
            if (!state.tZone) initTZone(state);
            state.z1 = state.tZone;
            break;
        case 1 :
            state.z1 = state.gZone;
            break;
        default :
            throw new Error('Invalid zone pointer');
    }
}

// SZP2[] Set Zone Pointer 2
// 0x15
function SZP2(state) {
    const n = state.stack.pop();

    if (exports.DEBUG) console.log(state.step, 'SZP2[]', n);

    state.zp2 = n;

    switch (n) {
        case 0:
            if (!state.tZone) initTZone(state);
            state.z2 = state.tZone;
            break;
        case 1 :
            state.z2 = state.gZone;
            break;
        default :
            throw new Error('Invalid zone pointer');
    }
}

// SZPS[] Set Zone PointerS
// 0x16
function SZPS(state) {
    const n = state.stack.pop();

    if (exports.DEBUG) console.log(state.step, 'SZPS[]', n);

    state.zp0 = state.zp1 = state.zp2 = n;

    switch (n) {
        case 0:
            if (!state.tZone) initTZone(state);
            state.z0 = state.z1 = state.z2 = state.tZone;
            break;
        case 1 :
            state.z0 = state.z1 = state.z2 = state.gZone;
            break;
        default :
            throw new Error('Invalid zone pointer');
    }
}

// SLOOP[] Set LOOP variable
// 0x17
function SLOOP(state) {
    state.loop = state.stack.pop();

    if (exports.DEBUG) console.log(state.step, 'SLOOP[]', state.loop);
}

// RTG[] Round To Grid
// 0x18
function RTG(state) {
    if (exports.DEBUG) console.log(state.step, 'RTG[]');

    state.round = roundToGrid;
}

// RTHG[] Round To Half Grid
// 0x19
function RTHG(state) {
    if (exports.DEBUG) console.log(state.step, 'RTHG[]');

    state.round = roundToHalfGrid;
}

// SMD[] Set Minimum Distance
// 0x1A
function SMD(state) {
    const d = state.stack.pop();

    if (exports.DEBUG) console.log(state.step, 'SMD[]', d);

    state.minDis = d / 0x40;
}

// ELSE[] ELSE clause
// 0x1B
function ELSE(state) {
    // This instruction has been reached by executing a then branch
    // so it just skips ahead until matching EIF.
    //
    // In case the IF was negative the IF[] instruction already
    // skipped forward over the ELSE[]

    if (exports.DEBUG) console.log(state.step, 'ELSE[]');

    skip(state, false);
}

// JMPR[] JuMP Relative
// 0x1C
function JMPR(state) {
    const o = state.stack.pop();

    if (exports.DEBUG) console.log(state.step, 'JMPR[]', o);

    // A jump by 1 would do nothing.
    state.ip += o - 1;
}

// SCVTCI[] Set Control Value Table Cut-In
// 0x1D
function SCVTCI(state) {
    const n = state.stack.pop();

    if (exports.DEBUG) console.log(state.step, 'SCVTCI[]', n);

    state.cvCutIn = n / 0x40;
}

// DUP[] DUPlicate top stack element
// 0x20
function DUP(state) {
    const stack = state.stack;

    if (exports.DEBUG) console.log(state.step, 'DUP[]');

    stack.push(stack[stack.length - 1]);
}

// POP[] POP top stack element
// 0x21
function POP(state) {
    if (exports.DEBUG) console.log(state.step, 'POP[]');

    state.stack.pop();
}

// CLEAR[] CLEAR the stack
// 0x22
function CLEAR(state) {
    if (exports.DEBUG) console.log(state.step, 'CLEAR[]');

    state.stack.length = 0;
}

// SWAP[] SWAP the top two elements on the stack
// 0x23
function SWAP(state) {
    const stack = state.stack;

    const a = stack.pop();
    const b = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'SWAP[]');

    stack.push(a);
    stack.push(b);
}

// DEPTH[] DEPTH of the stack
// 0x24
function DEPTH(state) {
    const stack = state.stack;

    if (exports.DEBUG) console.log(state.step, 'DEPTH[]');

    stack.push(stack.length);
}

// LOOPCALL[] LOOPCALL function
// 0x2A
function LOOPCALL(state) {
    const stack = state.stack;
    const fn = stack.pop();
    const c = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'LOOPCALL[]', fn, c);

    // saves callers program
    const cip = state.ip;
    const cprog = state.prog;

    state.prog = state.funcs[fn];

    // executes the function
    for (let i = 0; i < c; i++) {
        exec(state);

        if (exports.DEBUG) console.log(
            ++state.step,
            i + 1 < c ? 'next loopcall' : 'done loopcall',
            i
        );
    }

    // restores the callers program
    state.ip = cip;
    state.prog = cprog;
}

// CALL[] CALL function
// 0x2B
function CALL(state) {
    const fn = state.stack.pop();

    if (exports.DEBUG) console.log(state.step, 'CALL[]', fn);

    // saves callers program
    const cip = state.ip;
    const cprog = state.prog;

    state.prog = state.funcs[fn];

    // executes the function
    exec(state);

    // restores the callers program
    state.ip = cip;
    state.prog = cprog;

    if (exports.DEBUG) console.log(++state.step, 'returning from', fn);
}

// CINDEX[] Copy the INDEXed element to the top of the stack
// 0x25
function CINDEX(state) {
    const stack = state.stack;
    const k = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'CINDEX[]', k);

    // In case of k == 1, it copies the last element after popping
    // thus stack.length - k.
    stack.push(stack[stack.length - k]);
}

// MINDEX[] Move the INDEXed element to the top of the stack
// 0x26
function MINDEX(state) {
    const stack = state.stack;
    const k = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'MINDEX[]', k);

    stack.push(stack.splice(stack.length - k, 1)[0]);
}

// FDEF[] Function DEFinition
// 0x2C
function FDEF(state) {
    if (state.env !== 'fpgm') throw new Error('FDEF not allowed here');
    const stack = state.stack;
    const prog = state.prog;
    let ip = state.ip;

    const fn = stack.pop();
    const ipBegin = ip;

    if (exports.DEBUG) console.log(state.step, 'FDEF[]', fn);

    while (prog[++ip] !== 0x2D);

    state.ip = ip;
    state.funcs[fn] = prog.slice(ipBegin + 1, ip);
}

// MDAP[a] Move Direct Absolute Point
// 0x2E-0x2F
function MDAP(round, state) {
    const pi = state.stack.pop();
    const p = state.z0[pi];
    const fv = state.fv;
    const pv = state.pv;

    if (exports.DEBUG) console.log(state.step, 'MDAP[' + round + ']', pi);

    let d = pv.distance(p, HPZero);

    if (round) d = state.round(d);

    fv.setRelative(p, HPZero, d, pv);
    fv.touch(p);

    state.rp0 = state.rp1 = pi;
}

// IUP[a] Interpolate Untouched Points through the outline
// 0x30
function IUP(v, state) {
    const z2 = state.z2;
    const pLen = z2.length - 2;
    let cp;
    let pp;
    let np;

    if (exports.DEBUG) console.log(state.step, 'IUP[' + v.axis + ']');

    for (let i = 0; i < pLen; i++) {
        cp = z2[i]; // current point

        // if this point has been touched go on
        if (v.touched(cp)) continue;

        pp = cp.prevTouched(v);

        // no point on the contour has been touched?
        if (pp === cp) continue;

        np = cp.nextTouched(v);

        if (pp === np) {
            // only one point on the contour has been touched
            // so simply moves the point like that

            v.setRelative(cp, cp, v.distance(pp, pp, false, true), v, true);
        }

        v.interpolate(cp, pp, np, v);
    }
}

// SHP[] SHift Point using reference point
// 0x32-0x33
function SHP(a, state) {
    const stack = state.stack;
    const rpi = a ? state.rp1 : state.rp2;
    const rp = (a ? state.z0 : state.z1)[rpi];
    const fv = state.fv;
    const pv = state.pv;
    let loop = state.loop;
    const z2 = state.z2;

    while (loop--)
    {
        const pi = stack.pop();
        const p = z2[pi];

        const d = pv.distance(rp, rp, false, true);
        fv.setRelative(p, p, d, pv);
        fv.touch(p);

        if (exports.DEBUG) {
            console.log(
                state.step,
                (state.loop > 1 ?
                   'loop ' + (state.loop - loop) + ': ' :
                   ''
                ) +
                'SHP[' + (a ? 'rp1' : 'rp2') + ']', pi
            );
        }
    }

    state.loop = 1;
}

// SHC[] SHift Contour using reference point
// 0x36-0x37
function SHC(a, state) {
    const stack = state.stack;
    const rpi = a ? state.rp1 : state.rp2;
    const rp = (a ? state.z0 : state.z1)[rpi];
    const fv = state.fv;
    const pv = state.pv;
    const ci = stack.pop();
    const sp = state.z2[state.contours[ci]];
    let p = sp;

    if (exports.DEBUG) console.log(state.step, 'SHC[' + a + ']', ci);

    const d = pv.distance(rp, rp, false, true);

    do {
        if (p !== rp) fv.setRelative(p, p, d, pv);
        p = p.nextPointOnContour;
    } while (p !== sp);
}

// SHZ[] SHift Zone using reference point
// 0x36-0x37
function SHZ(a, state) {
    const stack = state.stack;
    const rpi = a ? state.rp1 : state.rp2;
    const rp = (a ? state.z0 : state.z1)[rpi];
    const fv = state.fv;
    const pv = state.pv;

    const e = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'SHZ[' + a + ']', e);

    let z;
    switch (e) {
        case 0 : z = state.tZone; break;
        case 1 : z = state.gZone; break;
        default : throw new Error('Invalid zone');
    }

    let p;
    const d = pv.distance(rp, rp, false, true);
    const pLen = z.length - 2;
    for (let i = 0; i < pLen; i++)
    {
        p = z[i];
        if (p !== rp) fv.setRelative(p, p, d, pv);
    }
}

// SHPIX[] SHift point by a PIXel amount
// 0x38
function SHPIX(state) {
    const stack = state.stack;
    let loop = state.loop;
    const fv = state.fv;
    const d = stack.pop() / 0x40;
    const z2 = state.z2;

    while (loop--) {
        const pi = stack.pop();
        const p = z2[pi];

        if (exports.DEBUG) {
            console.log(
                state.step,
                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +
                'SHPIX[]', pi, d
            );
        }

        fv.setRelative(p, p, d);
        fv.touch(p);
    }

    state.loop = 1;
}

// IP[] Interpolate Point
// 0x39
function IP(state) {
    const stack = state.stack;
    const rp1i = state.rp1;
    const rp2i = state.rp2;
    let loop = state.loop;
    const rp1 = state.z0[rp1i];
    const rp2 = state.z1[rp2i];
    const fv = state.fv;
    const pv = state.dpv;
    const z2 = state.z2;

    while (loop--) {
        const pi = stack.pop();
        const p = z2[pi];

        if (exports.DEBUG) {
            console.log(
                state.step,
                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +
                'IP[]', pi, rp1i, '<->', rp2i
            );
        }

        fv.interpolate(p, rp1, rp2, pv);

        fv.touch(p);
    }

    state.loop = 1;
}

// MSIRP[a] Move Stack Indirect Relative Point
// 0x3A-0x3B
function MSIRP(a, state) {
    const stack = state.stack;
    const d = stack.pop() / 64;
    const pi = stack.pop();
    const p = state.z1[pi];
    const rp0 = state.z0[state.rp0];
    const fv = state.fv;
    const pv = state.pv;

    fv.setRelative(p, rp0, d, pv);
    fv.touch(p);

    if (exports.DEBUG) console.log(state.step, 'MSIRP[' + a + ']', d, pi);

    state.rp1 = state.rp0;
    state.rp2 = pi;
    if (a) state.rp0 = pi;
}

// ALIGNRP[] Align to reference point.
// 0x3C
function ALIGNRP(state) {
    const stack = state.stack;
    const rp0i = state.rp0;
    const rp0 = state.z0[rp0i];
    let loop = state.loop;
    const fv = state.fv;
    const pv = state.pv;
    const z1 = state.z1;

    while (loop--) {
        const pi = stack.pop();
        const p = z1[pi];

        if (exports.DEBUG) {
            console.log(
                state.step,
                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +
                'ALIGNRP[]', pi
            );
        }

        fv.setRelative(p, rp0, 0, pv);
        fv.touch(p);
    }

    state.loop = 1;
}

// RTG[] Round To Double Grid
// 0x3D
function RTDG(state) {
    if (exports.DEBUG) console.log(state.step, 'RTDG[]');

    state.round = roundToDoubleGrid;
}

// MIAP[a] Move Indirect Absolute Point
// 0x3E-0x3F
function MIAP(round, state) {
    const stack = state.stack;
    const n = stack.pop();
    const pi = stack.pop();
    const p = state.z0[pi];
    const fv = state.fv;
    const pv = state.pv;
    let cv = state.cvt[n];

    // TODO cvtcutin should be considered here
    if (round) cv = state.round(cv);

    if (exports.DEBUG) {
        console.log(
            state.step,
            'MIAP[' + round + ']',
            n, '(', cv, ')', pi
        );
    }

    fv.setRelative(p, HPZero, cv, pv);

    if (state.zp0 === 0) {
        p.xo = p.x;
        p.yo = p.y;
    }

    fv.touch(p);

    state.rp0 = state.rp1 = pi;
}

// NPUSB[] PUSH N Bytes
// 0x40
function NPUSHB(state) {
    const prog = state.prog;
    let ip = state.ip;
    const stack = state.stack;

    const n = prog[++ip];

    if (exports.DEBUG) console.log(state.step, 'NPUSHB[]', n);

    for (let i = 0; i < n; i++) stack.push(prog[++ip]);

    state.ip = ip;
}

// NPUSHW[] PUSH N Words
// 0x41
function NPUSHW(state) {
    let ip = state.ip;
    const prog = state.prog;
    const stack = state.stack;
    const n = prog[++ip];

    if (exports.DEBUG) console.log(state.step, 'NPUSHW[]', n);

    for (let i = 0; i < n; i++) {
        let w = (prog[++ip] << 8) | prog[++ip];
        if (w & 0x8000) w = -((w ^ 0xffff) + 1);
        stack.push(w);
    }

    state.ip = ip;
}

// WS[] Write Store
// 0x42
function WS(state) {
    const stack = state.stack;
    let store = state.store;

    if (!store) store = state.store = [];

    const v = stack.pop();
    const l = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'WS', v, l);

    store[l] = v;
}

// RS[] Read Store
// 0x43
function RS(state) {
    const stack = state.stack;
    const store = state.store;

    const l = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'RS', l);

    const v = (store && store[l]) || 0;

    stack.push(v);
}

// WCVTP[] Write Control Value Table in Pixel units
// 0x44
function WCVTP(state) {
    const stack = state.stack;

    const v = stack.pop();
    const l = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'WCVTP', v, l);

    state.cvt[l] = v / 0x40;
}

// RCVT[] Read Control Value Table entry
// 0x45
function RCVT(state) {
    const stack = state.stack;
    const cvte = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'RCVT', cvte);

    stack.push(state.cvt[cvte] * 0x40);
}

// GC[] Get Coordinate projected onto the projection vector
// 0x46-0x47
function GC(a, state) {
    const stack = state.stack;
    const pi = stack.pop();
    const p = state.z2[pi];

    if (exports.DEBUG) console.log(state.step, 'GC[' + a + ']', pi);

    stack.push(state.dpv.distance(p, HPZero, a, false) * 0x40);
}

// MD[a] Measure Distance
// 0x49-0x4A
function MD(a, state) {
    const stack = state.stack;
    const pi2 = stack.pop();
    const pi1 = stack.pop();
    const p2 = state.z1[pi2];
    const p1 = state.z0[pi1];
    const d = state.dpv.distance(p1, p2, a, a);

    if (exports.DEBUG) console.log(state.step, 'MD[' + a + ']', pi2, pi1, '->', d);

    state.stack.push(Math.round(d * 64));
}

// MPPEM[] Measure Pixels Per EM
// 0x4B
function MPPEM(state) {
    if (exports.DEBUG) console.log(state.step, 'MPPEM[]');
    state.stack.push(state.ppem);
}

// FLIPON[] set the auto FLIP Boolean to ON
// 0x4D
function FLIPON(state) {
    if (exports.DEBUG) console.log(state.step, 'FLIPON[]');
    state.autoFlip = true;
}

// LT[] Less Than
// 0x50
function LT(state) {
    const stack = state.stack;
    const e2 = stack.pop();
    const e1 = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'LT[]', e2, e1);

    stack.push(e1 < e2 ? 1 : 0);
}

// LTEQ[] Less Than or EQual
// 0x53
function LTEQ(state) {
    const stack = state.stack;
    const e2 = stack.pop();
    const e1 = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'LTEQ[]', e2, e1);

    stack.push(e1 <= e2 ? 1 : 0);
}

// GTEQ[] Greater Than
// 0x52
function GT(state) {
    const stack = state.stack;
    const e2 = stack.pop();
    const e1 = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'GT[]', e2, e1);

    stack.push(e1 > e2 ? 1 : 0);
}

// GTEQ[] Greater Than or EQual
// 0x53
function GTEQ(state) {
    const stack = state.stack;
    const e2 = stack.pop();
    const e1 = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'GTEQ[]', e2, e1);

    stack.push(e1 >= e2 ? 1 : 0);
}

// EQ[] EQual
// 0x54
function EQ(state) {
    const stack = state.stack;
    const e2 = stack.pop();
    const e1 = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'EQ[]', e2, e1);

    stack.push(e2 === e1 ? 1 : 0);
}

// NEQ[] Not EQual
// 0x55
function NEQ(state) {
    const stack = state.stack;
    const e2 = stack.pop();
    const e1 = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'NEQ[]', e2, e1);

    stack.push(e2 !== e1 ? 1 : 0);
}

// ODD[] ODD
// 0x56
function ODD(state) {
    const stack = state.stack;
    const n = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'ODD[]', n);

    stack.push(Math.trunc(n) % 2 ? 1 : 0);
}

// EVEN[] EVEN
// 0x57
function EVEN(state) {
    const stack = state.stack;
    const n = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'EVEN[]', n);

    stack.push(Math.trunc(n) % 2 ? 0 : 1);
}

// IF[] IF test
// 0x58
function IF(state) {
    let test = state.stack.pop();
    let ins;

    if (exports.DEBUG) console.log(state.step, 'IF[]', test);

    // if test is true it just continues
    // if not the ip is skipped until matching ELSE or EIF
    if (!test) {
        skip(state, true);

        if (exports.DEBUG) console.log(state.step, ins === 0x1B ? 'ELSE[]' : 'EIF[]');
    }
}

// EIF[] End IF
// 0x59
function EIF(state) {
    // this can be reached normally when
    // executing an else branch.
    // -> just ignore it

    if (exports.DEBUG) console.log(state.step, 'EIF[]');
}

// AND[] logical AND
// 0x5A
function AND(state) {
    const stack = state.stack;
    const e2 = stack.pop();
    const e1 = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'AND[]', e2, e1);

    stack.push(e2 && e1 ? 1 : 0);
}

// OR[] logical OR
// 0x5B
function OR(state) {
    const stack = state.stack;
    const e2 = stack.pop();
    const e1 = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'OR[]', e2, e1);

    stack.push(e2 || e1 ? 1 : 0);
}

// NOT[] logical NOT
// 0x5C
function NOT(state) {
    const stack = state.stack;
    const e = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'NOT[]', e);

    stack.push(e ? 0 : 1);
}

// DELTAP1[] DELTA exception P1
// DELTAP2[] DELTA exception P2
// DELTAP3[] DELTA exception P3
// 0x5D, 0x71, 0x72
function DELTAP123(b, state) {
    const stack = state.stack;
    const n = stack.pop();
    const fv = state.fv;
    const pv = state.pv;
    const ppem = state.ppem;
    const base = state.deltaBase + (b - 1) * 16;
    const ds = state.deltaShift;
    const z0 = state.z0;

    if (exports.DEBUG) console.log(state.step, 'DELTAP[' + b + ']', n, stack);

    for (let i = 0; i < n; i++)
    {
        const pi = stack.pop();
        const arg = stack.pop();
        const appem = base + ((arg & 0xF0) >> 4);
        if (appem !== ppem) continue;

        let mag = (arg & 0x0F) - 8;
        if (mag >= 0) mag++;
        if (exports.DEBUG) console.log(state.step, 'DELTAPFIX', pi, 'by', mag * ds);

        const p = z0[pi];
        fv.setRelative(p, p, mag * ds, pv);
    }
}

// SDB[] Set Delta Base in the graphics state
// 0x5E
function SDB(state) {
    const stack = state.stack;
    const n = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'SDB[]', n);

    state.deltaBase = n;
}

// SDS[] Set Delta Shift in the graphics state
// 0x5F
function SDS(state) {
    const stack = state.stack;
    const n = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'SDS[]', n);

    state.deltaShift = Math.pow(0.5, n);
}

// ADD[] ADD
// 0x60
function ADD(state) {
    const stack = state.stack;
    const n2 = stack.pop();
    const n1 = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'ADD[]', n2, n1);

    stack.push(n1 + n2);
}

// SUB[] SUB
// 0x61
function SUB(state) {
    const stack = state.stack;
    const n2 = stack.pop();
    const n1 = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'SUB[]', n2, n1);

    stack.push(n1 - n2);
}

// DIV[] DIV
// 0x62
function DIV(state) {
    const stack = state.stack;
    const n2 = stack.pop();
    const n1 = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'DIV[]', n2, n1);

    stack.push(n1 * 64 / n2);
}

// MUL[] MUL
// 0x63
function MUL(state) {
    const stack = state.stack;
    const n2 = stack.pop();
    const n1 = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'MUL[]', n2, n1);

    stack.push(n1 * n2 / 64);
}

// ABS[] ABSolute value
// 0x64
function ABS(state) {
    const stack = state.stack;
    const n = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'ABS[]', n);

    stack.push(Math.abs(n));
}

// NEG[] NEGate
// 0x65
function NEG(state) {
    const stack = state.stack;
    let n = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'NEG[]', n);

    stack.push(-n);
}

// FLOOR[] FLOOR
// 0x66
function FLOOR(state) {
    const stack = state.stack;
    const n = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'FLOOR[]', n);

    stack.push(Math.floor(n / 0x40) * 0x40);
}

// CEILING[] CEILING
// 0x67
function CEILING(state) {
    const stack = state.stack;
    const n = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'CEILING[]', n);

    stack.push(Math.ceil(n / 0x40) * 0x40);
}

// ROUND[ab] ROUND value
// 0x68-0x6B
function ROUND(dt, state) {
    const stack = state.stack;
    const n = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'ROUND[]');

    stack.push(state.round(n / 0x40) * 0x40);
}

// WCVTF[] Write Control Value Table in Funits
// 0x70
function WCVTF(state) {
    const stack = state.stack;
    const v = stack.pop();
    const l = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'WCVTF[]', v, l);

    state.cvt[l] = v * state.ppem / state.font.unitsPerEm;
}

// DELTAC1[] DELTA exception C1
// DELTAC2[] DELTA exception C2
// DELTAC3[] DELTA exception C3
// 0x73, 0x74, 0x75
function DELTAC123(b, state) {
    const stack = state.stack;
    const n = stack.pop();
    const ppem = state.ppem;
    const base = state.deltaBase + (b - 1) * 16;
    const ds = state.deltaShift;

    if (exports.DEBUG) console.log(state.step, 'DELTAC[' + b + ']', n, stack);

    for (let i = 0; i < n; i++) {
        const c = stack.pop();
        const arg = stack.pop();
        const appem = base + ((arg & 0xF0) >> 4);
        if (appem !== ppem) continue;

        let mag = (arg & 0x0F) - 8;
        if (mag >= 0) mag++;

        const delta = mag * ds;

        if (exports.DEBUG) console.log(state.step, 'DELTACFIX', c, 'by', delta);

        state.cvt[c] += delta;
    }
}

// SROUND[] Super ROUND
// 0x76
function SROUND(state) {
    let n = state.stack.pop();

    if (exports.DEBUG) console.log(state.step, 'SROUND[]', n);

    state.round = roundSuper;

    let period;

    switch (n & 0xC0) {
        case 0x00:
            period = 0.5;
            break;
        case 0x40:
            period = 1;
            break;
        case 0x80:
            period = 2;
            break;
        default:
            throw new Error('invalid SROUND value');
    }

    state.srPeriod = period;

    switch (n & 0x30) {
        case 0x00:
            state.srPhase = 0;
            break;
        case 0x10:
            state.srPhase = 0.25 * period;
            break;
        case 0x20:
            state.srPhase = 0.5  * period;
            break;
        case 0x30:
            state.srPhase = 0.75 * period;
            break;
        default: throw new Error('invalid SROUND value');
    }

    n &= 0x0F;

    if (n === 0) state.srThreshold = 0;
    else state.srThreshold = (n / 8 - 0.5) * period;
}

// S45ROUND[] Super ROUND 45 degrees
// 0x77
function S45ROUND(state) {
    let n = state.stack.pop();

    if (exports.DEBUG) console.log(state.step, 'S45ROUND[]', n);

    state.round = roundSuper;

    let period;

    switch (n & 0xC0) {
        case 0x00:
            period = Math.sqrt(2) / 2;
            break;
        case 0x40:
            period = Math.sqrt(2);
            break;
        case 0x80:
            period = 2 * Math.sqrt(2);
            break;
        default:
            throw new Error('invalid S45ROUND value');
    }

    state.srPeriod = period;

    switch (n & 0x30) {
        case 0x00:
            state.srPhase = 0;
            break;
        case 0x10:
            state.srPhase = 0.25 * period;
            break;
        case 0x20:
            state.srPhase = 0.5  * period;
            break;
        case 0x30:
            state.srPhase = 0.75 * period;
            break;
        default:
            throw new Error('invalid S45ROUND value');
    }

    n &= 0x0F;

    if (n === 0) state.srThreshold = 0;
    else state.srThreshold = (n / 8 - 0.5) * period;
}

// ROFF[] Round Off
// 0x7A
function ROFF(state) {
    if (exports.DEBUG) console.log(state.step, 'ROFF[]');

    state.round = roundOff;
}

// RUTG[] Round Up To Grid
// 0x7C
function RUTG(state) {
    if (exports.DEBUG) console.log(state.step, 'RUTG[]');

    state.round = roundUpToGrid;
}

// RDTG[] Round Down To Grid
// 0x7D
function RDTG(state) {
    if (exports.DEBUG) console.log(state.step, 'RDTG[]');

    state.round = roundDownToGrid;
}

// SCANCTRL[] SCAN conversion ConTRoL
// 0x85
function SCANCTRL(state) {
    const n = state.stack.pop();

    // ignored by opentype.js

    if (exports.DEBUG) console.log(state.step, 'SCANCTRL[]', n);
}

// SDPVTL[a] Set Dual Projection Vector To Line
// 0x86-0x87
function SDPVTL(a, state) {
    const stack = state.stack;
    const p2i = stack.pop();
    const p1i = stack.pop();
    const p2 = state.z2[p2i];
    const p1 = state.z1[p1i];

    if (exports.DEBUG) console.log('SDPVTL[' + a + ']', p2i, p1i);

    let dx;
    let dy;

    if (!a) {
        dx = p1.x - p2.x;
        dy = p1.y - p2.y;
    } else {
        dx = p2.y - p1.y;
        dy = p1.x - p2.x;
    }

    state.dpv = getUnitVector(dx, dy);
}

// GETINFO[] GET INFOrmation
// 0x88
function GETINFO(state) {
    const stack = state.stack;
    const sel = stack.pop();
    let r = 0;

    if (exports.DEBUG) console.log(state.step, 'GETINFO[]', sel);

    // v35 as in no subpixel hinting
    if (sel & 0x01) r = 35;

    // TODO rotation and stretch currently not supported
    // and thus those GETINFO are always 0.

    // opentype.js is always gray scaling
    if (sel & 0x20) r |= 0x1000;

    stack.push(r);
}

// ROLL[] ROLL the top three stack elements
// 0x8A
function ROLL(state) {
    const stack = state.stack;
    const a = stack.pop();
    const b = stack.pop();
    const c = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'ROLL[]');

    stack.push(b);
    stack.push(a);
    stack.push(c);
}

// MAX[] MAXimum of top two stack elements
// 0x8B
function MAX(state) {
    const stack = state.stack;
    const e2 = stack.pop();
    const e1 = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'MAX[]', e2, e1);

    stack.push(Math.max(e1, e2));
}

// MIN[] MINimum of top two stack elements
// 0x8C
function MIN(state) {
    const stack = state.stack;
    const e2 = stack.pop();
    const e1 = stack.pop();

    if (exports.DEBUG) console.log(state.step, 'MIN[]', e2, e1);

    stack.push(Math.min(e1, e2));
}

// SCANTYPE[] SCANTYPE
// 0x8D
function SCANTYPE(state) {
    const n = state.stack.pop();
    // ignored by opentype.js
    if (exports.DEBUG) console.log(state.step, 'SCANTYPE[]', n);
}

// INSTCTRL[] INSTCTRL
// 0x8D
function INSTCTRL(state) {
    const s = state.stack.pop();
    let v = state.stack.pop();

    if (exports.DEBUG) console.log(state.step, 'INSTCTRL[]', s, v);

    switch (s) {
        case 1 : state.inhibitGridFit = !!v; return;
        case 2 : state.ignoreCvt = !!v; return;
        default: throw new Error('invalid INSTCTRL[] selector');
    }
}

// PUSHB[abc] PUSH Bytes
// 0xB0-0xB7
function PUSHB(n, state) {
    const stack = state.stack;
    const prog = state.prog;
    let ip = state.ip;

    if (exports.DEBUG) console.log(state.step, 'PUSHB[' + n + ']');

    for (let i = 0; i < n; i++) stack.push(prog[++ip]);

    state.ip = ip;
}

// PUSHW[abc] PUSH Words
// 0xB8-0xBF
function PUSHW(n, state) {
    let ip = state.ip;
    const prog = state.prog;
    const stack = state.stack;

    if (exports.DEBUG) console.log(state.ip, 'PUSHW[' + n + ']');

    for (let i = 0; i < n; i++) {
        let w = (prog[++ip] << 8) | prog[++ip];
        if (w & 0x8000) w = -((w ^ 0xffff) + 1);
        stack.push(w);
    }

    state.ip = ip;
}

// MDRP[abcde] Move Direct Relative Point
// 0xD0-0xEF
// (if indirect is 0)
//
// and
//
// MIRP[abcde] Move Indirect Relative Point
// 0xE0-0xFF
// (if indirect is 1)

function MDRP_MIRP(indirect, setRp0, keepD, ro, dt, state) {
    const stack = state.stack;
    const cvte = indirect && stack.pop();
    const pi = stack.pop();
    const rp0i = state.rp0;
    const rp = state.z0[rp0i];
    const p = state.z1[pi];

    const md = state.minDis;
    const fv = state.fv;
    const pv = state.dpv;
    let od; // original distance
    let d; // moving distance
    let sign; // sign of distance
    let cv;

    d = od = pv.distance(p, rp, true, true);
    sign = d >= 0 ? 1 : -1; // Math.sign would be 0 in case of 0

    // TODO consider autoFlip
    d = Math.abs(d);

    if (indirect) {
        cv = state.cvt[cvte];

        if (ro && Math.abs(d - cv) < state.cvCutIn) d = cv;
    }

    if (keepD && d < md) d = md;

    if (ro) d = state.round(d);

    fv.setRelative(p, rp, sign * d, pv);
    fv.touch(p);

    if (exports.DEBUG) {
        console.log(
            state.step,
            (indirect ? 'MIRP[' : 'MDRP[') +
            (setRp0 ? 'M' : 'm') +
            (keepD ? '>' : '_') +
            (ro ? 'R' : '_') +
            (dt === 0 ? 'Gr' : (dt === 1 ? 'Bl' : (dt === 2 ? 'Wh' : ''))) +
            ']',
            indirect ?
                cvte + '(' + state.cvt[cvte] + ',' +  cv + ')' :
                '',
            pi,
            '(d =', od, '->', sign * d, ')'
        );
    }

    state.rp1 = state.rp0;
    state.rp2 = pi;
    if (setRp0) state.rp0 = pi;
}

/*
* The instruction table.
*/
instructionTable = [
    /* 0x00 */ SVTCA.bind(undefined, yUnitVector),
    /* 0x01 */ SVTCA.bind(undefined, xUnitVector),
    /* 0x02 */ SPVTCA.bind(undefined, yUnitVector),
    /* 0x03 */ SPVTCA.bind(undefined, xUnitVector),
    /* 0x04 */ SFVTCA.bind(undefined, yUnitVector),
    /* 0x05 */ SFVTCA.bind(undefined, xUnitVector),
    /* 0x06 */ SPVTL.bind(undefined, 0),
    /* 0x07 */ SPVTL.bind(undefined, 1),
    /* 0x08 */ SFVTL.bind(undefined, 0),
    /* 0x09 */ SFVTL.bind(undefined, 1),
    /* 0x0A */ SPVFS,
    /* 0x0B */ SFVFS,
    /* 0x0C */ GPV,
    /* 0x0D */ GFV,
    /* 0x0E */ SFVTPV,
    /* 0x0F */ ISECT,
    /* 0x10 */ SRP0,
    /* 0x11 */ SRP1,
    /* 0x12 */ SRP2,
    /* 0x13 */ SZP0,
    /* 0x14 */ SZP1,
    /* 0x15 */ SZP2,
    /* 0x16 */ SZPS,
    /* 0x17 */ SLOOP,
    /* 0x18 */ RTG,
    /* 0x19 */ RTHG,
    /* 0x1A */ SMD,
    /* 0x1B */ ELSE,
    /* 0x1C */ JMPR,
    /* 0x1D */ SCVTCI,
    /* 0x1E */ undefined,   // TODO SSWCI
    /* 0x1F */ undefined,   // TODO SSW
    /* 0x20 */ DUP,
    /* 0x21 */ POP,
    /* 0x22 */ CLEAR,
    /* 0x23 */ SWAP,
    /* 0x24 */ DEPTH,
    /* 0x25 */ CINDEX,
    /* 0x26 */ MINDEX,
    /* 0x27 */ undefined,   // TODO ALIGNPTS
    /* 0x28 */ undefined,
    /* 0x29 */ undefined,   // TODO UTP
    /* 0x2A */ LOOPCALL,
    /* 0x2B */ CALL,
    /* 0x2C */ FDEF,
    /* 0x2D */ undefined,   // ENDF (eaten by FDEF)
    /* 0x2E */ MDAP.bind(undefined, 0),
    /* 0x2F */ MDAP.bind(undefined, 1),
    /* 0x30 */ IUP.bind(undefined, yUnitVector),
    /* 0x31 */ IUP.bind(undefined, xUnitVector),
    /* 0x32 */ SHP.bind(undefined, 0),
    /* 0x33 */ SHP.bind(undefined, 1),
    /* 0x34 */ SHC.bind(undefined, 0),
    /* 0x35 */ SHC.bind(undefined, 1),
    /* 0x36 */ SHZ.bind(undefined, 0),
    /* 0x37 */ SHZ.bind(undefined, 1),
    /* 0x38 */ SHPIX,
    /* 0x39 */ IP,
    /* 0x3A */ MSIRP.bind(undefined, 0),
    /* 0x3B */ MSIRP.bind(undefined, 1),
    /* 0x3C */ ALIGNRP,
    /* 0x3D */ RTDG,
    /* 0x3E */ MIAP.bind(undefined, 0),
    /* 0x3F */ MIAP.bind(undefined, 1),
    /* 0x40 */ NPUSHB,
    /* 0x41 */ NPUSHW,
    /* 0x42 */ WS,
    /* 0x43 */ RS,
    /* 0x44 */ WCVTP,
    /* 0x45 */ RCVT,
    /* 0x46 */ GC.bind(undefined, 0),
    /* 0x47 */ GC.bind(undefined, 1),
    /* 0x48 */ undefined,   // TODO SCFS
    /* 0x49 */ MD.bind(undefined, 0),
    /* 0x4A */ MD.bind(undefined, 1),
    /* 0x4B */ MPPEM,
    /* 0x4C */ undefined,   // TODO MPS
    /* 0x4D */ FLIPON,
    /* 0x4E */ undefined,   // TODO FLIPOFF
    /* 0x4F */ undefined,   // TODO DEBUG
    /* 0x50 */ LT,
    /* 0x51 */ LTEQ,
    /* 0x52 */ GT,
    /* 0x53 */ GTEQ,
    /* 0x54 */ EQ,
    /* 0x55 */ NEQ,
    /* 0x56 */ ODD,
    /* 0x57 */ EVEN,
    /* 0x58 */ IF,
    /* 0x59 */ EIF,
    /* 0x5A */ AND,
    /* 0x5B */ OR,
    /* 0x5C */ NOT,
    /* 0x5D */ DELTAP123.bind(undefined, 1),
    /* 0x5E */ SDB,
    /* 0x5F */ SDS,
    /* 0x60 */ ADD,
    /* 0x61 */ SUB,
    /* 0x62 */ DIV,
    /* 0x63 */ MUL,
    /* 0x64 */ ABS,
    /* 0x65 */ NEG,
    /* 0x66 */ FLOOR,
    /* 0x67 */ CEILING,
    /* 0x68 */ ROUND.bind(undefined, 0),
    /* 0x69 */ ROUND.bind(undefined, 1),
    /* 0x6A */ ROUND.bind(undefined, 2),
    /* 0x6B */ ROUND.bind(undefined, 3),
    /* 0x6C */ undefined,   // TODO NROUND[ab]
    /* 0x6D */ undefined,   // TODO NROUND[ab]
    /* 0x6E */ undefined,   // TODO NROUND[ab]
    /* 0x6F */ undefined,   // TODO NROUND[ab]
    /* 0x70 */ WCVTF,
    /* 0x71 */ DELTAP123.bind(undefined, 2),
    /* 0x72 */ DELTAP123.bind(undefined, 3),
    /* 0x73 */ DELTAC123.bind(undefined, 1),
    /* 0x74 */ DELTAC123.bind(undefined, 2),
    /* 0x75 */ DELTAC123.bind(undefined, 3),
    /* 0x76 */ SROUND,
    /* 0x77 */ S45ROUND,
    /* 0x78 */ undefined,   // TODO JROT[]
    /* 0x79 */ undefined,   // TODO JROF[]
    /* 0x7A */ ROFF,
    /* 0x7B */ undefined,
    /* 0x7C */ RUTG,
    /* 0x7D */ RDTG,
    /* 0x7E */ POP, // actually SANGW, supposed to do only a pop though
    /* 0x7F */ POP, // actually AA, supposed to do only a pop though
    /* 0x80 */ undefined,   // TODO FLIPPT
    /* 0x81 */ undefined,   // TODO FLIPRGON
    /* 0x82 */ undefined,   // TODO FLIPRGOFF
    /* 0x83 */ undefined,
    /* 0x84 */ undefined,
    /* 0x85 */ SCANCTRL,
    /* 0x86 */ SDPVTL.bind(undefined, 0),
    /* 0x87 */ SDPVTL.bind(undefined, 1),
    /* 0x88 */ GETINFO,
    /* 0x89 */ undefined,   // TODO IDEF
    /* 0x8A */ ROLL,
    /* 0x8B */ MAX,
    /* 0x8C */ MIN,
    /* 0x8D */ SCANTYPE,
    /* 0x8E */ INSTCTRL,
    /* 0x8F */ undefined,
    /* 0x90 */ undefined,
    /* 0x91 */ undefined,
    /* 0x92 */ undefined,
    /* 0x93 */ undefined,
    /* 0x94 */ undefined,
    /* 0x95 */ undefined,
    /* 0x96 */ undefined,
    /* 0x97 */ undefined,
    /* 0x98 */ undefined,
    /* 0x99 */ undefined,
    /* 0x9A */ undefined,
    /* 0x9B */ undefined,
    /* 0x9C */ undefined,
    /* 0x9D */ undefined,
    /* 0x9E */ undefined,
    /* 0x9F */ undefined,
    /* 0xA0 */ undefined,
    /* 0xA1 */ undefined,
    /* 0xA2 */ undefined,
    /* 0xA3 */ undefined,
    /* 0xA4 */ undefined,
    /* 0xA5 */ undefined,
    /* 0xA6 */ undefined,
    /* 0xA7 */ undefined,
    /* 0xA8 */ undefined,
    /* 0xA9 */ undefined,
    /* 0xAA */ undefined,
    /* 0xAB */ undefined,
    /* 0xAC */ undefined,
    /* 0xAD */ undefined,
    /* 0xAE */ undefined,
    /* 0xAF */ undefined,
    /* 0xB0 */ PUSHB.bind(undefined, 1),
    /* 0xB1 */ PUSHB.bind(undefined, 2),
    /* 0xB2 */ PUSHB.bind(undefined, 3),
    /* 0xB3 */ PUSHB.bind(undefined, 4),
    /* 0xB4 */ PUSHB.bind(undefined, 5),
    /* 0xB5 */ PUSHB.bind(undefined, 6),
    /* 0xB6 */ PUSHB.bind(undefined, 7),
    /* 0xB7 */ PUSHB.bind(undefined, 8),
    /* 0xB8 */ PUSHW.bind(undefined, 1),
    /* 0xB9 */ PUSHW.bind(undefined, 2),
    /* 0xBA */ PUSHW.bind(undefined, 3),
    /* 0xBB */ PUSHW.bind(undefined, 4),
    /* 0xBC */ PUSHW.bind(undefined, 5),
    /* 0xBD */ PUSHW.bind(undefined, 6),
    /* 0xBE */ PUSHW.bind(undefined, 7),
    /* 0xBF */ PUSHW.bind(undefined, 8),
    /* 0xC0 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 0),
    /* 0xC1 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 1),
    /* 0xC2 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 2),
    /* 0xC3 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 3),
    /* 0xC4 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 0),
    /* 0xC5 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 1),
    /* 0xC6 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 2),
    /* 0xC7 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 3),
    /* 0xC8 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 0),
    /* 0xC9 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 1),
    /* 0xCA */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 2),
    /* 0xCB */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 3),
    /* 0xCC */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 0),
    /* 0xCD */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 1),
    /* 0xCE */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 2),
    /* 0xCF */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 3),
    /* 0xD0 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 0),
    /* 0xD1 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 1),
    /* 0xD2 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 2),
    /* 0xD3 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 3),
    /* 0xD4 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 0),
    /* 0xD5 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 1),
    /* 0xD6 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 2),
    /* 0xD7 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 3),
    /* 0xD8 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 0),
    /* 0xD9 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 1),
    /* 0xDA */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 2),
    /* 0xDB */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 3),
    /* 0xDC */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 0),
    /* 0xDD */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 1),
    /* 0xDE */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 2),
    /* 0xDF */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 3),
    /* 0xE0 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 0),
    /* 0xE1 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 1),
    /* 0xE2 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 2),
    /* 0xE3 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 3),
    /* 0xE4 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 0),
    /* 0xE5 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 1),
    /* 0xE6 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 2),
    /* 0xE7 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 3),
    /* 0xE8 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 0),
    /* 0xE9 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 1),
    /* 0xEA */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 2),
    /* 0xEB */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 3),
    /* 0xEC */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 0),
    /* 0xED */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 1),
    /* 0xEE */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 2),
    /* 0xEF */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 3),
    /* 0xF0 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 0),
    /* 0xF1 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 1),
    /* 0xF2 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 2),
    /* 0xF3 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 3),
    /* 0xF4 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 0),
    /* 0xF5 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 1),
    /* 0xF6 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 2),
    /* 0xF7 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 3),
    /* 0xF8 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 0),
    /* 0xF9 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 1),
    /* 0xFA */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 2),
    /* 0xFB */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 3),
    /* 0xFC */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 0),
    /* 0xFD */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 1),
    /* 0xFE */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 2),
    /* 0xFF */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 3)
];

/*****************************
  Mathematical Considerations
******************************

fv ... refers to freedom vector
pv ... refers to projection vector
rp ... refers to reference point
p  ... refers to to point being operated on
d  ... refers to distance

SETRELATIVE:
============

case freedom vector == x-axis:
------------------------------

                        (pv)
                     .-'
              rpd .-'
               .-*
          d .-'90°'
         .-'       '
      .-'           '
   *-'               ' b
  rp                  '
                       '
                        '
            p *----------*-------------- (fv)
                          pm

  rpdx = rpx + d * pv.x
  rpdy = rpy + d * pv.y

  equation of line b

   y - rpdy = pvns * (x- rpdx)

   y = p.y

   x = rpdx + ( p.y - rpdy ) / pvns


case freedom vector == y-axis:
------------------------------

    * pm
    |\
    | \
    |  \
    |   \
    |    \
    |     \
    |      \
    |       \
    |        \
    |         \ b
    |          \
    |           \
    |            \    .-' (pv)
    |         90° \.-'
    |           .-'* rpd
    |        .-'
    *     *-'  d
    p     rp

  rpdx = rpx + d * pv.x
  rpdy = rpy + d * pv.y

  equation of line b:
           pvns ... normal slope to pv

   y - rpdy = pvns * (x - rpdx)

   x = p.x

   y = rpdy +  pvns * (p.x - rpdx)



generic case:
-------------


                              .'(fv)
                            .'
                          .* pm
                        .' !
                      .'    .
                    .'      !
                  .'         . b
                .'           !
               *              .
              p               !
                         90°   .    ... (pv)
                           ...-*-'''
                  ...---'''    rpd
         ...---'''   d
   *--'''
  rp

    rpdx = rpx + d * pv.x
    rpdy = rpy + d * pv.y

 equation of line b:
    pvns... normal slope to pv

    y - rpdy = pvns * (x - rpdx)

 equation of freedom vector line:
    fvs ... slope of freedom vector (=fy/fx)

    y - py = fvs * (x - px)


  on pm both equations are true for same x/y

    y - rpdy = pvns * (x - rpdx)

    y - py = fvs * (x - px)

  form to y and set equal:

    pvns * (x - rpdx) + rpdy = fvs * (x - px) + py

  expand:

    pvns * x - pvns * rpdx + rpdy = fvs * x - fvs * px + py

  switch:

    fvs * x - fvs * px + py = pvns * x - pvns * rpdx + rpdy

  solve for x:

    fvs * x - pvns * x = fvs * px - pvns * rpdx - py + rpdy



          fvs * px - pvns * rpdx + rpdy - py
    x =  -----------------------------------
                 fvs - pvns

  and:

    y = fvs * (x - px) + py



INTERPOLATE:
============

Examples of point interpolation.

The weight of the movement of the reference point gets bigger
the further the other reference point is away, thus the safest
option (that is avoiding 0/0 divisions) is to weight the
original distance of the other point by the sum of both distances.

If the sum of both distances is 0, then move the point by the
arithmetic average of the movement of both reference points.




           (+6)
    rp1o *---->*rp1
         .     .                          (+12)
         .     .                  rp2o *---------->* rp2
         .     .                       .           .
         .     .                       .           .
         .    10          20           .           .
         |.........|...................|           .
               .   .                               .
               .   . (+8)                          .
                po *------>*p                      .
               .           .                       .
               .    12     .          24           .
               |...........|.......................|
                                  36


-------



           (+10)
    rp1o *-------->*rp1
         .         .                      (-10)
         .         .              rp2 *<---------* rpo2
         .         .                   .         .
         .         .                   .         .
         .    10   .          30       .         .
         |.........|.............................|
                   .                   .
                   . (+5)              .
                po *--->* p            .
                   .    .              .
                   .    .   20         .
                   |....|..............|
                     5        15


-------


           (+10)
    rp1o *-------->*rp1
         .         .
         .         .
    rp2o *-------->*rp2


                               (+10)
                          po *-------->* p

-------


           (+10)
    rp1o *-------->*rp1
         .         .
         .         .(+30)
    rp2o *---------------------------->*rp2


                                        (+25)
                          po *----------------------->* p



vim: set ts=4 sw=4 expandtab:
*****/

// The Font object

/**
 * @typedef FontOptions
 * @type Object
 * @property {Boolean} empty - whether to create a new empty font
 * @property {string} familyName
 * @property {string} styleName
 * @property {string=} fullName
 * @property {string=} postScriptName
 * @property {string=} designer
 * @property {string=} designerURL
 * @property {string=} manufacturer
 * @property {string=} manufacturerURL
 * @property {string=} license
 * @property {string=} licenseURL
 * @property {string=} version
 * @property {string=} description
 * @property {string=} copyright
 * @property {string=} trademark
 * @property {Number} unitsPerEm
 * @property {Number} ascender
 * @property {Number} descender
 * @property {Number} createdTimestamp
 * @property {string=} weightClass
 * @property {string=} widthClass
 * @property {string=} fsSelection
 */

/**
 * A Font represents a loaded OpenType font file.
 * It contains a set of glyphs and methods to draw text on a drawing context,
 * or to get a path representing the text.
 * @exports opentype.Font
 * @class
 * @param {FontOptions}
 * @constructor
 */
function Font(options) {
    options = options || {};

    if (!options.empty) {
        // Check that we've provided the minimum set of names.
        checkArgument(options.familyName, 'When creating a new Font object, familyName is required.');
        checkArgument(options.styleName, 'When creating a new Font object, styleName is required.');
        checkArgument(options.unitsPerEm, 'When creating a new Font object, unitsPerEm is required.');
        checkArgument(options.ascender, 'When creating a new Font object, ascender is required.');
        checkArgument(options.descender, 'When creating a new Font object, descender is required.');
        checkArgument(options.descender < 0, 'Descender should be negative (e.g. -512).');

        // OS X will complain if the names are empty, so we put a single space everywhere by default.
        this.names = {
            fontFamily: {en: options.familyName || ' '},
            fontSubfamily: {en: options.styleName || ' '},
            fullName: {en: options.fullName || options.familyName + ' ' + options.styleName},
            postScriptName: {en: options.postScriptName || options.familyName + options.styleName},
            designer: {en: options.designer || ' '},
            designerURL: {en: options.designerURL || ' '},
            manufacturer: {en: options.manufacturer || ' '},
            manufacturerURL: {en: options.manufacturerURL || ' '},
            license: {en: options.license || ' '},
            licenseURL: {en: options.licenseURL || ' '},
            version: {en: options.version || 'Version 0.1'},
            description: {en: options.description || ' '},
            copyright: {en: options.copyright || ' '},
            trademark: {en: options.trademark || ' '}
        };
        this.unitsPerEm = options.unitsPerEm || 1000;
        this.ascender = options.ascender;
        this.descender = options.descender;
        this.createdTimestamp = options.createdTimestamp;
        this.tables = { os2: {
            usWeightClass: options.weightClass || this.usWeightClasses.MEDIUM,
            usWidthClass: options.widthClass || this.usWidthClasses.MEDIUM,
            fsSelection: options.fsSelection || this.fsSelectionValues.REGULAR
        } };
    }

    this.supported = true; // Deprecated: parseBuffer will throw an error if font is not supported.
    this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);
    this.encoding = new DefaultEncoding(this);
    this.substitution = new Substitution(this);
    this.tables = this.tables || {};

    Object.defineProperty(this, 'hinting', {
        get: function() {
            if (this._hinting) return this._hinting;
            if (this.outlinesFormat === 'truetype') {
                return (this._hinting = new Hinting(this));
            }
        }
    });
}

/**
 * Check if the font has a glyph for the given character.
 * @param  {string}
 * @return {Boolean}
 */
Font.prototype.hasChar = function(c) {
    return this.encoding.charToGlyphIndex(c) !== null;
};

/**
 * Convert the given character to a single glyph index.
 * Note that this function assumes that there is a one-to-one mapping between
 * the given character and a glyph; for complex scripts this might not be the case.
 * @param  {string}
 * @return {Number}
 */
Font.prototype.charToGlyphIndex = function(s) {
    return this.encoding.charToGlyphIndex(s);
};

/**
 * Convert the given character to a single Glyph object.
 * Note that this function assumes that there is a one-to-one mapping between
 * the given character and a glyph; for complex scripts this might not be the case.
 * @param  {string}
 * @return {opentype.Glyph}
 */
Font.prototype.charToGlyph = function(c) {
    const glyphIndex = this.charToGlyphIndex(c);
    let glyph = this.glyphs.get(glyphIndex);
    if (!glyph) {
        // .notdef
        glyph = this.glyphs.get(0);
    }

    return glyph;
};

/**
 * Convert the given text to a list of Glyph objects.
 * Note that there is no strict one-to-one mapping between characters and
 * glyphs, so the list of returned glyphs can be larger or smaller than the
 * length of the given string.
 * @param  {string}
 * @param  {GlyphRenderOptions} [options]
 * @return {opentype.Glyph[]}
 */
Font.prototype.stringToGlyphs = function(s, options) {
    options = options || this.defaultRenderOptions;
    // Get glyph indexes
    const indexes = [];
    for (let i = 0; i < s.length; i += 1) {
        const c = s[i];
        indexes.push(this.charToGlyphIndex(c));
    }
    let length = indexes.length;

    // Apply substitutions on glyph indexes
    if (options.features) {
        const script = options.script || this.substitution.getDefaultScriptName();
        let manyToOne = [];
        if (options.features.liga) manyToOne = manyToOne.concat(this.substitution.getFeature('liga', script, options.language));
        if (options.features.rlig) manyToOne = manyToOne.concat(this.substitution.getFeature('rlig', script, options.language));
        for (let i = 0; i < length; i += 1) {
            for (let j = 0; j < manyToOne.length; j++) {
                const ligature = manyToOne[j];
                const components = ligature.sub;
                const compCount = components.length;
                let k = 0;
                while (k < compCount && components[k] === indexes[i + k]) k++;
                if (k === compCount) {
                    indexes.splice(i, compCount, ligature.by);
                    length = length - compCount + 1;
                }
            }
        }
    }

    // convert glyph indexes to glyph objects
    const glyphs = new Array(length);
    const notdef = this.glyphs.get(0);
    for (let i = 0; i < length; i += 1) {
        glyphs[i] = this.glyphs.get(indexes[i]) || notdef;
    }
    return glyphs;
};

/**
 * @param  {string}
 * @return {Number}
 */
Font.prototype.nameToGlyphIndex = function(name) {
    return this.glyphNames.nameToGlyphIndex(name);
};

/**
 * @param  {string}
 * @return {opentype.Glyph}
 */
Font.prototype.nameToGlyph = function(name) {
    const glyphIndex = this.nameToGlyphIndex(name);
    let glyph = this.glyphs.get(glyphIndex);
    if (!glyph) {
        // .notdef
        glyph = this.glyphs.get(0);
    }

    return glyph;
};

/**
 * @param  {Number}
 * @return {String}
 */
Font.prototype.glyphIndexToName = function(gid) {
    if (!this.glyphNames.glyphIndexToName) {
        return '';
    }

    return this.glyphNames.glyphIndexToName(gid);
};

/**
 * Retrieve the value of the kerning pair between the left glyph (or its index)
 * and the right glyph (or its index). If no kerning pair is found, return 0.
 * The kerning value gets added to the advance width when calculating the spacing
 * between glyphs.
 * @param  {opentype.Glyph} leftGlyph
 * @param  {opentype.Glyph} rightGlyph
 * @return {Number}
 */
Font.prototype.getKerningValue = function(leftGlyph, rightGlyph) {
    leftGlyph = leftGlyph.index || leftGlyph;
    rightGlyph = rightGlyph.index || rightGlyph;
    const gposKerning = this.getGposKerningValue;
    return gposKerning ? gposKerning(leftGlyph, rightGlyph) :
        (this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0);
};

/**
 * @typedef GlyphRenderOptions
 * @type Object
 * @property {string} [script] - script used to determine which features to apply. By default, 'DFLT' or 'latn' is used.
 *                               See https://www.microsoft.com/typography/otspec/scripttags.htm
 * @property {string} [language='dflt'] - language system used to determine which features to apply.
 *                                        See https://www.microsoft.com/typography/developers/opentype/languagetags.aspx
 * @property {boolean} [kerning=true] - whether to include kerning values
 * @property {object} [features] - OpenType Layout feature tags. Used to enable or disable the features of the given script/language system.
 *                                 See https://www.microsoft.com/typography/otspec/featuretags.htm
 */
Font.prototype.defaultRenderOptions = {
    kerning: true,
    features: {
        liga: true,
        rlig: true
    }
};

/**
 * Helper function that invokes the given callback for each glyph in the given text.
 * The callback gets `(glyph, x, y, fontSize, options)`.* @param  {string} text
 * @param {string} text - The text to apply.
 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param  {GlyphRenderOptions=} options
 * @param  {Function} callback
 */
Font.prototype.forEachGlyph = function(text, x, y, fontSize, options, callback) {
    x = x !== undefined ? x : 0;
    y = y !== undefined ? y : 0;
    fontSize = fontSize !== undefined ? fontSize : 72;
    options = options || this.defaultRenderOptions;
    const fontScale = 1 / this.unitsPerEm * fontSize;
    const glyphs = this.stringToGlyphs(text, options);
    for (let i = 0; i < glyphs.length; i += 1) {
        const glyph = glyphs[i];
        callback.call(this, glyph, x, y, fontSize, options);
        if (glyph.advanceWidth) {
            x += glyph.advanceWidth * fontScale;
        }

        if (options.kerning && i < glyphs.length - 1) {
            const kerningValue = this.getKerningValue(glyph, glyphs[i + 1]);
            x += kerningValue * fontScale;
        }

        if (options.letterSpacing) {
            x += options.letterSpacing * fontSize;
        } else if (options.tracking) {
            x += (options.tracking / 1000) * fontSize;
        }
    }
    return x;
};

/**
 * Create a Path object that represents the given text.
 * @param  {string} text - The text to create.
 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param  {GlyphRenderOptions=} options
 * @return {opentype.Path}
 */
Font.prototype.getPath = function(text, x, y, fontSize, options) {
    const fullPath = new Path();
    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
        const glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);
        fullPath.extend(glyphPath);
    });
    return fullPath;
};

/**
 * Create an array of Path objects that represent the glyphs of a given text.
 * @param  {string} text - The text to create.
 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param  {GlyphRenderOptions=} options
 * @return {opentype.Path[]}
 */
Font.prototype.getPaths = function(text, x, y, fontSize, options) {
    const glyphPaths = [];
    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
        const glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);
        glyphPaths.push(glyphPath);
    });

    return glyphPaths;
};

/**
 * Returns the advance width of a text.
 *
 * This is something different than Path.getBoundingBox() as for example a
 * suffixed whitespace increases the advanceWidth but not the bounding box
 * or an overhanging letter like a calligraphic 'f' might have a quite larger
 * bounding box than its advance width.
 *
 * This corresponds to canvas2dContext.measureText(text).width
 *
 * @param  {string} text - The text to create.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param  {GlyphRenderOptions=} options
 * @return advance width
 */
Font.prototype.getAdvanceWidth = function(text, fontSize, options) {
    return this.forEachGlyph(text, 0, 0, fontSize, options, function() {});
};

/**
 * Draw the text on the given drawing context.
 * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
 * @param  {string} text - The text to create.
 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param  {GlyphRenderOptions=} options
 */
Font.prototype.draw = function(ctx, text, x, y, fontSize, options) {
    this.getPath(text, x, y, fontSize, options).draw(ctx);
};

/**
 * Draw the points of all glyphs in the text.
 * On-curve points will be drawn in blue, off-curve points will be drawn in red.
 * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
 * @param {string} text - The text to create.
 * @param {number} [x=0] - Horizontal position of the beginning of the text.
 * @param {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param {GlyphRenderOptions=} options
 */
Font.prototype.drawPoints = function(ctx, text, x, y, fontSize, options) {
    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
        glyph.drawPoints(ctx, gX, gY, gFontSize);
    });
};

/**
 * Draw lines indicating important font measurements for all glyphs in the text.
 * Black lines indicate the origin of the coordinate system (point 0,0).
 * Blue lines indicate the glyph bounding box.
 * Green line indicates the advance width of the glyph.
 * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
 * @param {string} text - The text to create.
 * @param {number} [x=0] - Horizontal position of the beginning of the text.
 * @param {number} [y=0] - Vertical position of the *baseline* of the text.
 * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
 * @param {GlyphRenderOptions=} options
 */
Font.prototype.drawMetrics = function(ctx, text, x, y, fontSize, options) {
    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
        glyph.drawMetrics(ctx, gX, gY, gFontSize);
    });
};

/**
 * @param  {string}
 * @return {string}
 */
Font.prototype.getEnglishName = function(name) {
    const translations = this.names[name];
    if (translations) {
        return translations.en;
    }
};

/**
 * Validate
 */
Font.prototype.validate = function() {
    const _this = this;

    function assert(predicate, message) {
    }

    function assertNamePresent(name) {
        const englishName = _this.getEnglishName(name);
        assert(englishName && englishName.trim().length > 0,
               'No English ' + name + ' specified.');
    }

    // Identification information
    assertNamePresent('fontFamily');
    assertNamePresent('weightName');
    assertNamePresent('manufacturer');
    assertNamePresent('copyright');
    assertNamePresent('version');

    // Dimension information
    assert(this.unitsPerEm > 0, 'No unitsPerEm specified.');
};

/**
 * Convert the font object to a SFNT data structure.
 * This structure contains all the necessary tables and metadata to create a binary OTF file.
 * @return {opentype.Table}
 */
Font.prototype.toTables = function() {
    return sfnt.fontToTable(this);
};
/**
 * @deprecated Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.
 */
Font.prototype.toBuffer = function() {
    console.warn('Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.');
    return this.toArrayBuffer();
};
/**
 * Converts a `opentype.Font` into an `ArrayBuffer`
 * @return {ArrayBuffer}
 */
Font.prototype.toArrayBuffer = function() {
    const sfntTable = this.toTables();
    const bytes = sfntTable.encode();
    const buffer = new ArrayBuffer(bytes.length);
    const intArray = new Uint8Array(buffer);
    for (let i = 0; i < bytes.length; i++) {
        intArray[i] = bytes[i];
    }

    return buffer;
};

/**
 * Initiate a download of the OpenType font.
 */
Font.prototype.download = function(fileName) {
    const familyName = this.getEnglishName('fontFamily');
    const styleName = this.getEnglishName('fontSubfamily');
    fileName = fileName || familyName.replace(/\s/g, '') + '-' + styleName + '.otf';
    const arrayBuffer = this.toArrayBuffer();

    if (isBrowser()) {
        window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
        window.requestFileSystem(window.TEMPORARY, arrayBuffer.byteLength, function(fs) {
            fs.root.getFile(fileName, {create: true}, function(fileEntry) {
                fileEntry.createWriter(function(writer) {
                    const dataView = new DataView(arrayBuffer);
                    const blob = new Blob([dataView], {type: 'font/opentype'});
                    writer.write(blob);

                    writer.addEventListener('writeend', function() {
                        // Navigating to the file will download it.
                        location.href = fileEntry.toURL();
                    }, false);
                });
            });
        },
        function(err) {
            throw new Error(err.name + ': ' + err.message);
        });
    } else {
        const fs = require('fs');
        const buffer = arrayBufferToNodeBuffer(arrayBuffer);
        fs.writeFileSync(fileName, buffer);
    }
};
/**
 * @private
 */
Font.prototype.fsSelectionValues = {
    ITALIC:              0x001, //1
    UNDERSCORE:          0x002, //2
    NEGATIVE:            0x004, //4
    OUTLINED:            0x008, //8
    STRIKEOUT:           0x010, //16
    BOLD:                0x020, //32
    REGULAR:             0x040, //64
    USER_TYPO_METRICS:   0x080, //128
    WWS:                 0x100, //256
    OBLIQUE:             0x200  //512
};

/**
 * @private
 */
Font.prototype.usWidthClasses = {
    ULTRA_CONDENSED: 1,
    EXTRA_CONDENSED: 2,
    CONDENSED: 3,
    SEMI_CONDENSED: 4,
    MEDIUM: 5,
    SEMI_EXPANDED: 6,
    EXPANDED: 7,
    EXTRA_EXPANDED: 8,
    ULTRA_EXPANDED: 9
};

/**
 * @private
 */
Font.prototype.usWeightClasses = {
    THIN: 100,
    EXTRA_LIGHT: 200,
    LIGHT: 300,
    NORMAL: 400,
    MEDIUM: 500,
    SEMI_BOLD: 600,
    BOLD: 700,
    EXTRA_BOLD: 800,
    BLACK:    900
};

// The `fvar` table stores font variation axes and instances.

function addName(name, names) {
    const nameString = JSON.stringify(name);
    let nameID = 256;
    for (let nameKey in names) {
        let n = parseInt(nameKey);
        if (!n || n < 256) {
            continue;
        }

        if (JSON.stringify(names[nameKey]) === nameString) {
            return n;
        }

        if (nameID <= n) {
            nameID = n + 1;
        }
    }

    names[nameID] = name;
    return nameID;
}

function makeFvarAxis(n, axis, names) {
    const nameID = addName(axis.name, names);
    return [
        {name: 'tag_' + n, type: 'TAG', value: axis.tag},
        {name: 'minValue_' + n, type: 'FIXED', value: axis.minValue << 16},
        {name: 'defaultValue_' + n, type: 'FIXED', value: axis.defaultValue << 16},
        {name: 'maxValue_' + n, type: 'FIXED', value: axis.maxValue << 16},
        {name: 'flags_' + n, type: 'USHORT', value: 0},
        {name: 'nameID_' + n, type: 'USHORT', value: nameID}
    ];
}

function parseFvarAxis(data, start, names) {
    const axis = {};
    const p = new parse.Parser(data, start);
    axis.tag = p.parseTag();
    axis.minValue = p.parseFixed();
    axis.defaultValue = p.parseFixed();
    axis.maxValue = p.parseFixed();
    p.skip('uShort', 1);  // reserved for flags; no values defined
    axis.name = names[p.parseUShort()] || {};
    return axis;
}

function makeFvarInstance(n, inst, axes, names) {
    const nameID = addName(inst.name, names);
    const fields = [
        {name: 'nameID_' + n, type: 'USHORT', value: nameID},
        {name: 'flags_' + n, type: 'USHORT', value: 0}
    ];

    for (let i = 0; i < axes.length; ++i) {
        const axisTag = axes[i].tag;
        fields.push({
            name: 'axis_' + n + ' ' + axisTag,
            type: 'FIXED',
            value: inst.coordinates[axisTag] << 16
        });
    }

    return fields;
}

function parseFvarInstance(data, start, axes, names) {
    const inst = {};
    const p = new parse.Parser(data, start);
    inst.name = names[p.parseUShort()] || {};
    p.skip('uShort', 1);  // reserved for flags; no values defined

    inst.coordinates = {};
    for (let i = 0; i < axes.length; ++i) {
        inst.coordinates[axes[i].tag] = p.parseFixed();
    }

    return inst;
}

function makeFvarTable(fvar, names) {
    const result = new table.Table('fvar', [
        {name: 'version', type: 'ULONG', value: 0x10000},
        {name: 'offsetToData', type: 'USHORT', value: 0},
        {name: 'countSizePairs', type: 'USHORT', value: 2},
        {name: 'axisCount', type: 'USHORT', value: fvar.axes.length},
        {name: 'axisSize', type: 'USHORT', value: 20},
        {name: 'instanceCount', type: 'USHORT', value: fvar.instances.length},
        {name: 'instanceSize', type: 'USHORT', value: 4 + fvar.axes.length * 4}
    ]);
    result.offsetToData = result.sizeOf();

    for (let i = 0; i < fvar.axes.length; i++) {
        result.fields = result.fields.concat(makeFvarAxis(i, fvar.axes[i], names));
    }

    for (let j = 0; j < fvar.instances.length; j++) {
        result.fields = result.fields.concat(makeFvarInstance(j, fvar.instances[j], fvar.axes, names));
    }

    return result;
}

function parseFvarTable(data, start, names) {
    const p = new parse.Parser(data, start);
    const tableVersion = p.parseULong();
    check.argument(tableVersion === 0x00010000, 'Unsupported fvar table version.');
    const offsetToData = p.parseOffset16();
    // Skip countSizePairs.
    p.skip('uShort', 1);
    const axisCount = p.parseUShort();
    const axisSize = p.parseUShort();
    const instanceCount = p.parseUShort();
    const instanceSize = p.parseUShort();

    const axes = [];
    for (let i = 0; i < axisCount; i++) {
        axes.push(parseFvarAxis(data, start + offsetToData + i * axisSize, names));
    }

    const instances = [];
    const instanceStart = start + offsetToData + axisCount * axisSize;
    for (let j = 0; j < instanceCount; j++) {
        instances.push(parseFvarInstance(data, instanceStart + j * instanceSize, axes, names));
    }

    return {axes: axes, instances: instances};
}

var fvar = { make: makeFvarTable, parse: parseFvarTable };

// The `GPOS` table contains kerning pairs, among other things.

// Parse ScriptList and FeatureList tables of GPOS, GSUB, GDEF, BASE, JSTF tables.
// These lists are unused by now, this function is just the basis for a real parsing.
function parseTaggedListTable(data, start) {
    const p = new parse.Parser(data, start);
    const n = p.parseUShort();
    const list = [];
    for (let i = 0; i < n; i++) {
        list[p.parseTag()] = { offset: p.parseUShort() };
    }

    return list;
}

// Parse a coverage table in a GSUB, GPOS or GDEF table.
// Format 1 is a simple list of glyph ids,
// Format 2 is a list of ranges. It is expanded in a list of glyphs, maybe not the best idea.
function parseCoverageTable(data, start) {
    const p = new parse.Parser(data, start);
    const format = p.parseUShort();
    let count = p.parseUShort();
    if (format === 1) {
        return p.parseUShortList(count);
    } else if (format === 2) {
        const coverage = [];
        for (; count--;) {
            const begin = p.parseUShort();
            const end = p.parseUShort();
            let index = p.parseUShort();
            for (let i = begin; i <= end; i++) {
                coverage[index++] = i;
            }
        }

        return coverage;
    }
}

// Parse a Class Definition Table in a GSUB, GPOS or GDEF table.
// Returns a function that gets a class value from a glyph ID.
function parseClassDefTable(data, start) {
    const p = new parse.Parser(data, start);
    const format = p.parseUShort();
    if (format === 1) {
        // Format 1 specifies a range of consecutive glyph indices, one class per glyph ID.
        const startGlyph = p.parseUShort();
        const glyphCount = p.parseUShort();
        const classes = p.parseUShortList(glyphCount);
        return function(glyphID) {
            return classes[glyphID - startGlyph] || 0;
        };
    } else if (format === 2) {
        // Format 2 defines multiple groups of glyph indices that belong to the same class.
        const rangeCount = p.parseUShort();
        const startGlyphs = [];
        const endGlyphs = [];
        const classValues = [];
        for (let i = 0; i < rangeCount; i++) {
            startGlyphs[i] = p.parseUShort();
            endGlyphs[i] = p.parseUShort();
            classValues[i] = p.parseUShort();
        }

        return function(glyphID) {
            let l = 0;
            let r = startGlyphs.length - 1;
            while (l < r) {
                const c = (l + r + 1) >> 1;
                if (glyphID < startGlyphs[c]) {
                    r = c - 1;
                } else {
                    l = c;
                }
            }

            if (startGlyphs[l] <= glyphID && glyphID <= endGlyphs[l]) {
                return classValues[l] || 0;
            }

            return 0;
        };
    }
}

// Parse a pair adjustment positioning subtable, format 1 or format 2
// The subtable is returned in the form of a lookup function.
function parsePairPosSubTable(data, start) {
    const p = new parse.Parser(data, start);
    // This part is common to format 1 and format 2 subtables
    const format = p.parseUShort();
    const coverageOffset = p.parseUShort();
    const coverage = parseCoverageTable(data, start + coverageOffset);
    // valueFormat 4: XAdvance only, 1: XPlacement only, 0: no ValueRecord for second glyph
    // Only valueFormat1=4 and valueFormat2=0 is supported.
    const valueFormat1 = p.parseUShort();
    const valueFormat2 = p.parseUShort();
    let value1;
    let value2;
    if (valueFormat1 !== 4 || valueFormat2 !== 0) return;
    const sharedPairSets = {};
    if (format === 1) {
        // Pair Positioning Adjustment: Format 1
        const pairSetCount = p.parseUShort();
        const pairSet = [];
        // Array of offsets to PairSet tables-from beginning of PairPos subtable-ordered by Coverage Index
        const pairSetOffsets = p.parseOffset16List(pairSetCount);
        for (let firstGlyph = 0; firstGlyph < pairSetCount; firstGlyph++) {
            const pairSetOffset = pairSetOffsets[firstGlyph];
            let sharedPairSet = sharedPairSets[pairSetOffset];
            if (!sharedPairSet) {
                // Parse a pairset table in a pair adjustment subtable format 1
                sharedPairSet = {};
                p.relativeOffset = pairSetOffset;
                let pairValueCount = p.parseUShort();
                for (; pairValueCount--;) {
                    const secondGlyph = p.parseUShort();
                    if (valueFormat1) value1 = p.parseShort();
                    if (valueFormat2) value2 = p.parseShort();
                    // We only support valueFormat1 = 4 and valueFormat2 = 0,
                    // so value1 is the XAdvance and value2 is empty.
                    sharedPairSet[secondGlyph] = value1;
                }
            }

            pairSet[coverage[firstGlyph]] = sharedPairSet;
        }

        return function(leftGlyph, rightGlyph) {
            const pairs = pairSet[leftGlyph];
            if (pairs) return pairs[rightGlyph];
        };
    } else if (format === 2) {
        // Pair Positioning Adjustment: Format 2
        const classDef1Offset = p.parseUShort();
        const classDef2Offset = p.parseUShort();
        const class1Count = p.parseUShort();
        const class2Count = p.parseUShort();
        const getClass1 = parseClassDefTable(data, start + classDef1Offset);
        const getClass2 = parseClassDefTable(data, start + classDef2Offset);

        // Parse kerning values by class pair.
        const kerningMatrix = [];
        for (let i = 0; i < class1Count; i++) {
            const kerningRow = kerningMatrix[i] = [];
            for (let j = 0; j < class2Count; j++) {
                if (valueFormat1) value1 = p.parseShort();
                if (valueFormat2) value2 = p.parseShort();
                // We only support valueFormat1 = 4 and valueFormat2 = 0,
                // so value1 is the XAdvance and value2 is empty.
                kerningRow[j] = value1;
            }
        }

        // Convert coverage list to a hash
        const covered = {};
        for (let i = 0; i < coverage.length; i++) {
            covered[coverage[i]] = 1;
        }

        // Get the kerning value for a specific glyph pair.
        return function(leftGlyph, rightGlyph) {
            if (!covered[leftGlyph]) return;
            const class1 = getClass1(leftGlyph);
            const class2 = getClass2(rightGlyph);
            const kerningRow = kerningMatrix[class1];

            if (kerningRow) {
                return kerningRow[class2];
            }
        };
    }
}

// Parse a LookupTable (present in of GPOS, GSUB, GDEF, BASE, JSTF tables).
function parseLookupTable(data, start) {
    const p = new parse.Parser(data, start);
    const lookupType = p.parseUShort();
    const lookupFlag = p.parseUShort();
    const useMarkFilteringSet = lookupFlag & 0x10;
    const subTableCount = p.parseUShort();
    const subTableOffsets = p.parseOffset16List(subTableCount);
    const table = {
        lookupType: lookupType,
        lookupFlag: lookupFlag,
        markFilteringSet: useMarkFilteringSet ? p.parseUShort() : -1
    };
    // LookupType 2, Pair adjustment
    if (lookupType === 2) {
        const subtables = [];
        for (let i = 0; i < subTableCount; i++) {
            const pairPosSubTable = parsePairPosSubTable(data, start + subTableOffsets[i]);
            if (pairPosSubTable) subtables.push(pairPosSubTable);
        }
        // Return a function which finds the kerning values in the subtables.
        table.getKerningValue = function(leftGlyph, rightGlyph) {
            for (let i = subtables.length; i--;) {
                const value = subtables[i](leftGlyph, rightGlyph);
                if (value !== undefined) return value;
            }

            return 0;
        };
    }

    return table;
}

// Parse the `GPOS` table which contains, among other things, kerning pairs.
// https://www.microsoft.com/typography/OTSPEC/gpos.htm
function parseGposTable(data, start, font) {
    const p = new parse.Parser(data, start);
    const tableVersion = p.parseFixed();
    check.argument(tableVersion === 1, 'Unsupported GPOS table version.');

    // ScriptList and FeatureList - ignored for now
    parseTaggedListTable(data, start + p.parseUShort());
    // 'kern' is the feature we are looking for.
    parseTaggedListTable(data, start + p.parseUShort());

    // LookupList
    const lookupListOffset = p.parseUShort();
    p.relativeOffset = lookupListOffset;
    const lookupCount = p.parseUShort();
    const lookupTableOffsets = p.parseOffset16List(lookupCount);
    const lookupListAbsoluteOffset = start + lookupListOffset;
    for (let i = 0; i < lookupCount; i++) {
        const table = parseLookupTable(data, lookupListAbsoluteOffset + lookupTableOffsets[i]);
        if (table.lookupType === 2 && !font.getGposKerningValue) font.getGposKerningValue = table.getKerningValue;
    }
}

var gpos = { parse: parseGposTable };

// The `kern` table contains kerning pairs.

function parseWindowsKernTable(p) {
    const pairs = {};
    // Skip nTables.
    p.skip('uShort');
    const subtableVersion = p.parseUShort();
    check.argument(subtableVersion === 0, 'Unsupported kern sub-table version.');
    // Skip subtableLength, subtableCoverage
    p.skip('uShort', 2);
    const nPairs = p.parseUShort();
    // Skip searchRange, entrySelector, rangeShift.
    p.skip('uShort', 3);
    for (let i = 0; i < nPairs; i += 1) {
        const leftIndex = p.parseUShort();
        const rightIndex = p.parseUShort();
        const value = p.parseShort();
        pairs[leftIndex + ',' + rightIndex] = value;
    }
    return pairs;
}

function parseMacKernTable(p) {
    const pairs = {};
    // The Mac kern table stores the version as a fixed (32 bits) but we only loaded the first 16 bits.
    // Skip the rest.
    p.skip('uShort');
    const nTables = p.parseULong();
    //check.argument(nTables === 1, 'Only 1 subtable is supported (got ' + nTables + ').');
    if (nTables > 1) {
        console.warn('Only the first kern subtable is supported.');
    }
    p.skip('uLong');
    const coverage = p.parseUShort();
    const subtableVersion = coverage & 0xFF;
    p.skip('uShort');
    if (subtableVersion === 0) {
        const nPairs = p.parseUShort();
        // Skip searchRange, entrySelector, rangeShift.
        p.skip('uShort', 3);
        for (let i = 0; i < nPairs; i += 1) {
            const leftIndex = p.parseUShort();
            const rightIndex = p.parseUShort();
            const value = p.parseShort();
            pairs[leftIndex + ',' + rightIndex] = value;
        }
    }
    return pairs;
}

// Parse the `kern` table which contains kerning pairs.
function parseKernTable(data, start) {
    const p = new parse.Parser(data, start);
    const tableVersion = p.parseUShort();
    if (tableVersion === 0) {
        return parseWindowsKernTable(p);
    } else if (tableVersion === 1) {
        return parseMacKernTable(p);
    } else {
        throw new Error('Unsupported kern table version (' + tableVersion + ').');
    }
}

var kern = { parse: parseKernTable };

// The `loca` table stores the offsets to the locations of the glyphs in the font.

// Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,
// relative to the beginning of the glyphData table.
// The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)
// The loca table has two versions: a short version where offsets are stored as uShorts, and a long
// version where offsets are stored as uLongs. The `head` table specifies which version to use
// (under indexToLocFormat).
function parseLocaTable(data, start, numGlyphs, shortVersion) {
    const p = new parse.Parser(data, start);
    const parseFn = shortVersion ? p.parseUShort : p.parseULong;
    // There is an extra entry after the last index element to compute the length of the last glyph.
    // That's why we use numGlyphs + 1.
    const glyphOffsets = [];
    for (let i = 0; i < numGlyphs + 1; i += 1) {
        let glyphOffset = parseFn.call(p);
        if (shortVersion) {
            // The short table version stores the actual offset divided by 2.
            glyphOffset *= 2;
        }

        glyphOffsets.push(glyphOffset);
    }

    return glyphOffsets;
}

var loca = { parse: parseLocaTable };

// opentype.js

/**
 * The opentype library.
 * @namespace opentype
 */

// File loaders /////////////////////////////////////////////////////////
/**
 * Loads a font from a file. The callback throws an error message as the first parameter if it fails
 * and the font as an ArrayBuffer in the second parameter if it succeeds.
 * @param  {string} path - The path of the file
 * @param  {Function} callback - The function to call when the font load completes
 */
function loadFromFile(path, callback) {
    const fs = require('fs');
    fs.readFile(path, function(err, buffer) {
        if (err) {
            return callback(err.message);
        }

        callback(null, nodeBufferToArrayBuffer(buffer));
    });
}
/**
 * Loads a font from a URL. The callback throws an error message as the first parameter if it fails
 * and the font as an ArrayBuffer in the second parameter if it succeeds.
 * @param  {string} url - The URL of the font file.
 * @param  {Function} callback - The function to call when the font load completes
 */
function loadFromUrl(url, callback) {
    const request = new XMLHttpRequest();
    request.open('get', url, true);
    request.responseType = 'arraybuffer';
    request.onload = function() {
        if (request.status !== 200) {
            return callback('Font could not be loaded: ' + request.statusText);
        }

        return callback(null, request.response);
    };

    request.onerror = function () {
        callback('Font could not be loaded');
    };

    request.send();
}

// Table Directory Entries //////////////////////////////////////////////
/**
 * Parses OpenType table entries.
 * @param  {DataView}
 * @param  {Number}
 * @return {Object[]}
 */
function parseOpenTypeTableEntries(data, numTables) {
    const tableEntries = [];
    let p = 12;
    for (let i = 0; i < numTables; i += 1) {
        const tag = parse.getTag(data, p);
        const checksum = parse.getULong(data, p + 4);
        const offset = parse.getULong(data, p + 8);
        const length = parse.getULong(data, p + 12);
        tableEntries.push({tag: tag, checksum: checksum, offset: offset, length: length, compression: false});
        p += 16;
    }

    return tableEntries;
}

/**
 * Parses WOFF table entries.
 * @param  {DataView}
 * @param  {Number}
 * @return {Object[]}
 */
function parseWOFFTableEntries(data, numTables) {
    const tableEntries = [];
    let p = 44; // offset to the first table directory entry.
    for (let i = 0; i < numTables; i += 1) {
        const tag = parse.getTag(data, p);
        const offset = parse.getULong(data, p + 4);
        const compLength = parse.getULong(data, p + 8);
        const origLength = parse.getULong(data, p + 12);
        let compression;
        if (compLength < origLength) {
            compression = 'WOFF';
        } else {
            compression = false;
        }

        tableEntries.push({tag: tag, offset: offset, compression: compression,
            compressedLength: compLength, length: origLength});
        p += 20;
    }

    return tableEntries;
}

/**
 * @typedef TableData
 * @type Object
 * @property {DataView} data - The DataView
 * @property {number} offset - The data offset.
 */

/**
 * @param  {DataView}
 * @param  {Object}
 * @return {TableData}
 */
function uncompressTable(data, tableEntry) {
    if (tableEntry.compression === 'WOFF') {
        const inBuffer = new Uint8Array(data.buffer, tableEntry.offset + 2, tableEntry.compressedLength - 2);
        const outBuffer = new Uint8Array(tableEntry.length);
        tinyInflate(inBuffer, outBuffer);
        if (outBuffer.byteLength !== tableEntry.length) {
            throw new Error('Decompression error: ' + tableEntry.tag + ' decompressed length doesn\'t match recorded length');
        }

        const view = new DataView(outBuffer.buffer, 0);
        return {data: view, offset: 0};
    } else {
        return {data: data, offset: tableEntry.offset};
    }
}

// Public API ///////////////////////////////////////////////////////////

/**
 * Parse the OpenType file data (as an ArrayBuffer) and return a Font object.
 * Throws an error if the font could not be parsed.
 * @param  {ArrayBuffer}
 * @return {opentype.Font}
 */
function parseBuffer(buffer) {
    let indexToLocFormat;
    let ltagTable;

    // Since the constructor can also be called to create new fonts from scratch, we indicate this
    // should be an empty font that we'll fill with our own data.
    const font = new Font({empty: true});

    // OpenType fonts use big endian byte ordering.
    // We can't rely on typed array view types, because they operate with the endianness of the host computer.
    // Instead we use DataViews where we can specify endianness.
    const data = new DataView(buffer, 0);
    let numTables;
    let tableEntries = [];
    const signature = parse.getTag(data, 0);
    if (signature === String.fromCharCode(0, 1, 0, 0) || signature === 'true' || signature === 'typ1') {
        font.outlinesFormat = 'truetype';
        numTables = parse.getUShort(data, 4);
        tableEntries = parseOpenTypeTableEntries(data, numTables);
    } else if (signature === 'OTTO') {
        font.outlinesFormat = 'cff';
        numTables = parse.getUShort(data, 4);
        tableEntries = parseOpenTypeTableEntries(data, numTables);
    } else if (signature === 'wOFF') {
        const flavor = parse.getTag(data, 4);
        if (flavor === String.fromCharCode(0, 1, 0, 0)) {
            font.outlinesFormat = 'truetype';
        } else if (flavor === 'OTTO') {
            font.outlinesFormat = 'cff';
        } else {
            throw new Error('Unsupported OpenType flavor ' + signature);
        }

        numTables = parse.getUShort(data, 12);
        tableEntries = parseWOFFTableEntries(data, numTables);
    } else {
        throw new Error('Unsupported OpenType signature ' + signature);
    }

    let cffTableEntry;
    let fvarTableEntry;
    let glyfTableEntry;
    let gposTableEntry;
    let gsubTableEntry;
    let hmtxTableEntry;
    let kernTableEntry;
    let locaTableEntry;
    let nameTableEntry;
    let metaTableEntry;
    let p;

    for (let i = 0; i < numTables; i += 1) {
        const tableEntry = tableEntries[i];
        let table;
        switch (tableEntry.tag) {
            case 'cmap':
                table = uncompressTable(data, tableEntry);
                font.tables.cmap = cmap.parse(table.data, table.offset);
                font.encoding = new CmapEncoding(font.tables.cmap);
                break;
            case 'cvt ' :
                table = uncompressTable(data, tableEntry);
                p = new parse.Parser(table.data, table.offset);
                font.tables.cvt = p.parseShortList(tableEntry.length / 2);
                break;
            case 'fvar':
                fvarTableEntry = tableEntry;
                break;
            case 'fpgm' :
                table = uncompressTable(data, tableEntry);
                p = new parse.Parser(table.data, table.offset);
                font.tables.fpgm = p.parseByteList(tableEntry.length);
                break;
            case 'head':
                table = uncompressTable(data, tableEntry);
                font.tables.head = head.parse(table.data, table.offset);
                font.unitsPerEm = font.tables.head.unitsPerEm;
                indexToLocFormat = font.tables.head.indexToLocFormat;
                break;
            case 'hhea':
                table = uncompressTable(data, tableEntry);
                font.tables.hhea = hhea.parse(table.data, table.offset);
                font.ascender = font.tables.hhea.ascender;
                font.descender = font.tables.hhea.descender;
                font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;
                break;
            case 'hmtx':
                hmtxTableEntry = tableEntry;
                break;
            case 'ltag':
                table = uncompressTable(data, tableEntry);
                ltagTable = ltag.parse(table.data, table.offset);
                break;
            case 'maxp':
                table = uncompressTable(data, tableEntry);
                font.tables.maxp = maxp.parse(table.data, table.offset);
                font.numGlyphs = font.tables.maxp.numGlyphs;
                break;
            case 'name':
                nameTableEntry = tableEntry;
                break;
            case 'OS/2':
                table = uncompressTable(data, tableEntry);
                font.tables.os2 = os2.parse(table.data, table.offset);
                break;
            case 'post':
                table = uncompressTable(data, tableEntry);
                font.tables.post = post.parse(table.data, table.offset);
                font.glyphNames = new GlyphNames(font.tables.post);
                break;
            case 'prep' :
                table = uncompressTable(data, tableEntry);
                p = new parse.Parser(table.data, table.offset);
                font.tables.prep = p.parseByteList(tableEntry.length);
                break;
            case 'glyf':
                glyfTableEntry = tableEntry;
                break;
            case 'loca':
                locaTableEntry = tableEntry;
                break;
            case 'CFF ':
                cffTableEntry = tableEntry;
                break;
            case 'kern':
                kernTableEntry = tableEntry;
                break;
            case 'GPOS':
                gposTableEntry = tableEntry;
                break;
            case 'GSUB':
                gsubTableEntry = tableEntry;
                break;
            case 'meta':
                metaTableEntry = tableEntry;
                break;
        }
    }

    const nameTable = uncompressTable(data, nameTableEntry);
    font.tables.name = _name.parse(nameTable.data, nameTable.offset, ltagTable);
    font.names = font.tables.name;

    if (glyfTableEntry && locaTableEntry) {
        const shortVersion = indexToLocFormat === 0;
        const locaTable = uncompressTable(data, locaTableEntry);
        const locaOffsets = loca.parse(locaTable.data, locaTable.offset, font.numGlyphs, shortVersion);
        const glyfTable = uncompressTable(data, glyfTableEntry);
        font.glyphs = glyf.parse(glyfTable.data, glyfTable.offset, locaOffsets, font);
    } else if (cffTableEntry) {
        const cffTable = uncompressTable(data, cffTableEntry);
        cff.parse(cffTable.data, cffTable.offset, font);
    } else {
        throw new Error('Font doesn\'t contain TrueType or CFF outlines.');
    }

    const hmtxTable = uncompressTable(data, hmtxTableEntry);
    hmtx.parse(hmtxTable.data, hmtxTable.offset, font.numberOfHMetrics, font.numGlyphs, font.glyphs);
    addGlyphNames(font);

    if (kernTableEntry) {
        const kernTable = uncompressTable(data, kernTableEntry);
        font.kerningPairs = kern.parse(kernTable.data, kernTable.offset);
    } else {
        font.kerningPairs = {};
    }

    if (gposTableEntry) {
        const gposTable = uncompressTable(data, gposTableEntry);
        gpos.parse(gposTable.data, gposTable.offset, font);
    }

    if (gsubTableEntry) {
        const gsubTable = uncompressTable(data, gsubTableEntry);
        font.tables.gsub = gsub.parse(gsubTable.data, gsubTable.offset);
    }

    if (fvarTableEntry) {
        const fvarTable = uncompressTable(data, fvarTableEntry);
        font.tables.fvar = fvar.parse(fvarTable.data, fvarTable.offset, font.names);
    }

    if (metaTableEntry) {
        const metaTable = uncompressTable(data, metaTableEntry);
        font.tables.meta = meta.parse(metaTable.data, metaTable.offset);
        font.metas = font.tables.meta;
    }

    return font;
}

/**
 * Asynchronously load the font from a URL or a filesystem. When done, call the callback
 * with two arguments `(err, font)`. The `err` will be null on success,
 * the `font` is a Font object.
 * We use the node.js callback convention so that
 * opentype.js can integrate with frameworks like async.js.
 * @alias opentype.load
 * @param  {string} url - The URL of the font to load.
 * @param  {Function} callback - The callback.
 */
function load(url, callback) {
    const isNode$$1 = typeof window === 'undefined';
    const loadFn = isNode$$1 ? loadFromFile : loadFromUrl;
    loadFn(url, function(err, arrayBuffer) {
        if (err) {
            return callback(err);
        }
        let font;
        try {
            font = parseBuffer(arrayBuffer);
        } catch (e) {
            return callback(e, null);
        }
        return callback(null, font);
    });
}

/**
 * Create a surface by projecting a curve in a direction.
 *
 * @param curve The curve to project.
 * @param offset The direction and distance to project curve.
 * @param flipped Whether the surface's default orientation (normal = curve tangent cross offset) should be flipped.
 */
function projectCurve$$1(curve, offset, flipped) {
    if (curve instanceof L3$$1) {
        const surfaceNormal = offset.cross(curve.dir1).toLength(flipped ? -1 : 1);
        return new PlaneSurface$$1(P3$$1.normalOnAnchor(surfaceNormal, curve.anchor));
    }
    if (curve instanceof SemiEllipseCurve$$1) {
        const curveDir = flipped ? offset : offset.negated();
        return new SemiCylinderSurface$$1(curve, curveDir.unit(), undefined, undefined);
    }
    if (curve instanceof BezierCurve$$1 || curve instanceof XiEtaCurve$$1) {
        const curveDir = offset.times(flipped ? 1 : -1);
        return new ProjectedCurveSurface$$1(curve, curveDir, undefined, undefined, flipped ? 0 : -1, flipped ? 1 : 0);
    }
    throw new Error();
}
/**
 * Create a surface by projecting a curve onto a point.
 */
function projectPointCurve$$1(curve, tMin = curve.tMin, tMax = curve.tMax, p, flipped) {
    if (curve instanceof L3$$1) {
        const up = curve.anchor.to(p).rejectedFrom(curve.dir1);
        return PlaneSurface$$1.forAnchorAndPlaneVectors(curve.anchor, curve.dir1, up.unit(), tMin, tMax, 0, up.length());
    }
    else if (curve instanceof SemiEllipseCurve$$1) {
        // flip f2 by default
        const factor = -1 * (flipped ? -1 : 1);
        return new ConicSurface$$1(p, curve.f1.times(factor), curve.f2, p.to(curve.center), tMin, tMax, 0, 1);
    }
    else {
        throw new Error('projectPointCurve not implemented for ' + curve.constructor.name);
    }
}
/**
 * Create a surface by rotating a curve in the XZ-plane, with X > 0, around the Z-axis according to the right-hand rule.
 * @param curve The curve to rotate.
 * @param rotationAxis The line around which to rotate the curve.
 * @param flipped Whether the surface's default orientation (normal = curve tangent cross rotation tangent) should be
 * flipped.
 */
function rotateCurve$$1(curve, tMin = curve.tMin, tMax = curve.tMax, degrees, flipped) {
    assertf(() => new PlaneSurface$$1(P3$$1.ZX).containsCurve(curve));
    if (curve instanceof L3$$1) {
        if (curve.dir1.isParallelTo(V3.Z)) {
            if (eq0(curve.anchor.x)) {
                return undefined;
            }
            const baseEllipse = new SemiEllipseCurve$$1(V3.O, curve.anchor.xy(), curve.anchor.xy().getPerpendicular(), 0, degrees);
            // if curve.dir1 is going up (+Z), it the cylinder surface should face inwards
            const factor = (curve.dir1.z > 0 ? -1 : 1) * (flipped ? -1 : 1);
            const [zMin, zMax] = [curve.at(tMin).z * factor, curve.at(tMax).z * factor].sort(MINUS);
            return new SemiCylinderSurface$$1(baseEllipse, V3.Z.times(factor), 0, degrees, zMin, zMax);
        }
        if (curve
            .at(tMin)
            .xy()
            .dot(curve.dir1) *
            curve
                .at(tMax)
                .xy()
                .dot(curve.dir1) <
            0) {
            throw new Error('line cannot cross the Z axis in the [tMin, tMax] interval, as conic surfaces cannot have an hourglass shape.');
        }
        if (curve.dir1.isPerpendicularTo(V3.Z)) {
            // if line.dir1 is pointing aways from V3.Z, then the surface should face up
            const factor = (curve.at(lerp(tMin, tMax, 0.5)).dot(curve.dir1) > 0 ? 1 : -1) * (flipped ? -1 : 1);
            return new PlaneSurface$$1(new P3$$1(V3.Z.times(factor), curve.anchor.z * factor));
        }
        else {
            // apex is intersection of segment with Z-axis
            const a = curve.at(tMin), b = curve.at(tMax);
            const apexZ = a.z - a.x * (b.z - a.z) / (b.x - a.x);
            const apex = new V3(0, 0, apexZ);
            const factor = -(a.x > b.x ? -1 : 1) * (flipped ? -1 : 1);
            const s = new ConicSurface$$1(apex, new V3(curve.dir1.lengthXY(), 0, 0), new V3(0, curve.dir1.lengthXY(), 0), new V3(0, 0, (a.x > b.x ? -1 : 1) * curve.dir1.z), 0, degrees, 0, 1);
            return factor > 0 ? s : s.flipped();
        }
    }
    if (curve instanceof SemiEllipseCurve$$1) {
        const a = curve.at(tMin), b = curve.at(tMax);
        const ell = curve.rightAngled();
        const f1Perp = ell.f1.isPerpendicularTo(V3.Z), f2Perp = ell.f2.isPerpendicularTo(V3.Z);
        if (L3$$1.Z.containsPoint(ell.center) && (f1Perp || f2Perp)) {
            flipped = flipped == a.z > b.z;
            let width = ell.f1.length(), height = ell.f2.length();
            if (ell.f1.isParallelTo(V3.Z)) {
                [width, height] = [height, width];
            }
            return SemiEllipsoidSurface$$1.forABC(width, (!flipped ? 1 : -1) * width, height, ell.center);
        }
        else {
            const s = new RotatedCurveSurface$$1(curve, M4.IDENTITY, tMin, tMax);
            return s;
        }
    }
    throw new Error();
}
var B2T$$1;
(function (B2T$$1) {
    /**
     * Create a [BRep] of an axis-aligned box width starting at the origin and extending into +XYZ space.
     * @param width x-direction size.
     * @param height y-direction size.
     * @param depth z-direction size.
     * @param name
     */
    function box(width = 1, height = 1, depth = 1, name = 'box' + getGlobalId$$1()) {
        assertNumbers(width, height, depth);
        assert('string' === typeof name);
        const baseVertices = [new V3(0, 0, 0), new V3(0, height, 0), new V3(width, height, 0), new V3(width, 0, 0)];
        const generator = callsce('B2T.box', width, height, depth, name);
        return B2T$$1.extrudeVertices(baseVertices, P3$$1.XY.flipped(), new V3(0, 0, depth), name, generator);
    }
    B2T$$1.box = box;
    function puckman(radius, rads, height, name = 'puckman' + getGlobalId$$1()) {
        assertf(() => lt(0, radius));
        assertf(() => lt(0, rads) && le(rads, TAU));
        assertf(() => lt(0, height));
        const edges = StraightEdge$$1.chain([V3.O, new V3(radius, 0, 0), new V3(radius, 0, height), new V3(0, 0, height)], true);
        return B2T$$1.rotateEdges(edges, rads, name);
    }
    B2T$$1.puckman = puckman;
    function registerVertexName(map, name, p) {
        // TODO
        if (!Array.from(map.keys()).some(p2 => p2.like(p))) {
            map.set(p, name);
        }
    }
    B2T$$1.registerVertexName = registerVertexName;
    /**
     * Create a [BRep] by projecting a number of edges in a direction.
     * @param baseFaceEdges
     * @param baseFacePlane
     * @param offset
     * @param name
     * @param gen
     * @param infoFactory
     */
    function extrudeEdges(baseFaceEdges, baseFacePlane = P3$$1.XY, offset = V3.Z, name = 'extrude' + getGlobalId$$1(), gen, infoFactory) {
        baseFaceEdges = fixEdges(baseFaceEdges);
        //Array.from(combinations(baseFaceEdges.length)).forEach(({i, j}) => {
        //	assertf(() => !Edge.edgesIntersect(baseFaceEdges[i], baseFaceEdges[j]), baseFaceEdges[i].sce +
        // baseFaceEdges[j].sce) })
        assertf(() => Edge$$1.isLoop(baseFaceEdges));
        // TODO checks..
        //if (offset.dot(baseFacePlane.normal1) > 0) {
        //	baseFacePlane = baseFacePlane.flipped()
        //}
        const vertexNames = new Map();
        const basePlaneSurface = new PlaneSurface$$1(baseFacePlane);
        //assert(basePlaneSurface.edgeLoopCCW(baseFaceEdges), 'edges not CCW on baseFacePlane')
        const translationMatrix = M4.translate(offset);
        const topEdges = baseFaceEdges.map(edge => edge.transform(translationMatrix, 'top'));
        const edgeCount = baseFaceEdges.length;
        const bottomInfo = infoFactory && infoFactory.extrudeBottom(basePlaneSurface, baseFaceEdges);
        const bottomFace = new PlaneFace$$1(basePlaneSurface, baseFaceEdges, [], name + 'Bottom', bottomInfo);
        const topFaceEdges = topEdges.map(edge => edge.flipped()).reverse();
        const topSurface = new PlaneSurface$$1(baseFacePlane.flipped().translated(offset));
        const topInfo = infoFactory && infoFactory.extrudeBottom(topSurface, topFaceEdges);
        const topFace = new PlaneFace$$1(topSurface, topFaceEdges, [], name + 'Top', topInfo);
        baseFaceEdges.forEach(edge => B2T$$1.registerVertexName(vertexNames, edge.name + 'A', edge.a));
        topFaceEdges.forEach(edge => B2T$$1.registerVertexName(vertexNames, edge.name + 'A', edge.a));
        const ribs = arrayFromFunction(edgeCount, i => StraightEdge$$1.throughPoints(baseFaceEdges[i].a, topEdges[i].a, name + 'Rib' + i));
        const faces = baseFaceEdges.map((edge, i) => {
            const faceName = name + 'Wall' + i;
            const j = (i + 1) % edgeCount;
            const faceEdges = [baseFaceEdges[i].flipped(), ribs[i], topEdges[i], ribs[j].flipped()];
            const surface = projectCurve$$1(edge.curve, offset, edge.reversed);
            const info = infoFactory && infoFactory.extrudeWall(i, surface, faceEdges);
            return Face$$1.create(surface, faceEdges, undefined, faceName, info);
        });
        faces.push(bottomFace, topFace);
        gen = gen || callsce('B2T.extrudeEdges', baseFaceEdges, baseFacePlane, offset, name);
        return new BRep$$1(faces, baseFacePlane.normal1.dot(offset) > 0, gen, vertexNames);
    }
    B2T$$1.extrudeEdges = extrudeEdges;
    function cylinder(radius = 1, height = 1, rads = TAU, name = 'cylinder' + getGlobalId$$1()) {
        const vertices = [new V3(0, 0, 0), new V3(radius, 0, 0), new V3(radius, 0, height), new V3(0, 0, height)];
        return rotateEdges(StraightEdge$$1.chain(vertices, true), rads, name);
    }
    B2T$$1.cylinder = cylinder;
    function cone(radius = 1, height = 1, rads = TAU, name = 'cone' + getGlobalId$$1()) {
        const vertices = [new V3(0, 0, 0), new V3(radius, 0, height), new V3(0, 0, height)];
        return rotateEdges(StraightEdge$$1.chain(vertices, true), rads, name);
    }
    B2T$$1.cone = cone;
    function sphere(radius = 1, name = 'sphere' + getGlobalId$$1(), rot = TAU) {
        const ee = PCurveEdge$$1.create(new SemiEllipseCurve$$1(V3.O, new V3(0, 0, -radius), new V3(radius, 0, 0)), new V3(0, 0, -radius), new V3(0, 0, radius), 0, PI$3, undefined, new V3(radius, 0, 0), new V3(-radius, 0, 0));
        const generator = callsce('B2T.sphere', radius, name, rot);
        return rotateEdges([StraightEdge$$1.throughPoints(ee.b, ee.a), ee], rot, name, generator);
    }
    B2T$$1.sphere = sphere;
    /**
     * Create a [[BRep]] of a menger sponge.
     * @param res 0: just a cube, 1: every cube face has one hole, 2: 9 holes, etc
     * @param name
     */
    function menger(res = 2, name = 'menger' + getGlobalId$$1()) {
        let result = B2T$$1.box(1, 1, 1);
        if (0 == res)
            return result;
        const punch = B2T$$1.box(1 / 3, 1 / 3, 2)
            .translate(1 / 3, 1 / 3, -1 / 2)
            .flipped();
        function recurse(steps, m4) {
            result = result.and(punch.transform(m4));
            if (steps > 1) {
                const scaled = m4.times(M4.scale(1 / 3, 1 / 3, 1));
                for (let i = 0; i < 9; i++) {
                    if (4 == i)
                        continue;
                    recurse(steps - 1, scaled.times(M4.translate(i % 3, (i / 3) | 0, 0)));
                }
            }
        }
        recurse(res, M4.IDENTITY);
        recurse(res, M4.YZX);
        recurse(res, M4.ZXY);
        return result;
    }
    B2T$$1.menger = menger;
    function menger2(res = 2, name = 'menger' + getGlobalId$$1()) {
        if (0 == res)
            return B2T$$1.box(1, 1, 1);
        const punch = B2T$$1.box(1 / 3, 1 / 3, 2)
            .translate(1 / 3, 1 / 3, -1 / 2)
            .flipped();
        const stencilFaces = [];
        function recurse(steps, m4) {
            stencilFaces.push(...punch.transform(m4).faces);
            if (steps > 1) {
                const scaled = m4.times(M4.scale(1 / 3, 1 / 3, 1));
                for (let i = 0; i < 9; i++) {
                    if (4 == i)
                        continue;
                    recurse(steps - 1, scaled.times(M4.translate(i % 3, (i / 3) | 0, 0)));
                }
            }
        }
        recurse(res, M4.IDENTITY);
        const stencil = new BRep$$1(stencilFaces, true);
        return B2T$$1.box()
            .and(stencil)
            .and(stencil.transform(M4.YZX))
            .and(stencil.transform(M4.ZXY));
    }
    B2T$$1.menger2 = menger2;
    /**
     * Create a [BRep] of a torus.
     * @param rSmall The radius to the surface of the torus.
     * @param rLarge The radius from the origin to the inside of the torus.
     * @param rads
     * @param name
     */
    function torus(rSmall, rLarge, rads = TAU, name = 'torus' + getGlobalId$$1()) {
        assertNumbers(rSmall, rLarge, rads);
        assertf(() => rLarge > rSmall);
        const curves = [
            SemiEllipseCurve$$1.semicircle(rSmall, new V3(rLarge, 0, 0)),
            SemiEllipseCurve$$1.semicircle(-rSmall, new V3(rLarge, 0, 0)),
        ];
        const baseEdges = curves.map(c => PCurveEdge$$1.forCurveAndTs(c, 0, Math.PI).rotateX(PI$3 / 2));
        return B2T$$1.rotateEdges(baseEdges, rads, name);
    }
    B2T$$1.torus = torus;
    /**
     * Create a [BRep] by smoothly rotating edges around Z.
     * baseLoop should be CCW on XZ plane for a bounded BRep
     */
    function rotateEdges(baseLoop, totalRads, name = 'rotateEdges' + getGlobalId$$1(), generator, infoFactory) {
        assert(baseLoop.every(e => new PlaneSurface$$1(P3$$1.ZX).containsCurve(e.curve)));
        assert(!eq(PI$3, totalRads) || PI$3 == totalRads); // URHGJ
        assertf(() => lt(0, totalRads) && le(totalRads, TAU));
        totalRads = snap(totalRads, TAU);
        assertf(() => Edge$$1.isLoop(baseLoop));
        const basePlane = new PlaneSurface$$1(P3$$1.ZX.flipped()).edgeLoopCCW(baseLoop)
            ? new PlaneSurface$$1(P3$$1.ZX.flipped())
            : new PlaneSurface$$1(P3$$1.ZX);
        // const rotationSteps = ceil((totalRads - NLA_PRECISION) / PI)
        // const angles = rotationSteps == 1 ? [-PI, -PI + totalRads] : [-PI, 0, totalRads - PI]
        const open = !eq(totalRads, 2 * PI$3);
        const baseRibCurves = baseLoop.map(edge => {
            const a = edge.a, radius = a.lengthXY();
            if (!eq0(radius)) {
                return new SemiEllipseCurve$$1(V(0, 0, a.z), V(radius, 0, 0), V(0, radius, 0));
            }
            return undefined;
        });
        const baseSurfaces = baseLoop.map((edge, i) => {
            const s = rotateCurve$$1(edge.curve, edge.minT, edge.maxT, PI$3, edge.deltaT() > 0);
            const t = lerp(edge.aT, edge.bT, 0.5);
            s &&
                assert(edge
                    .tangentAt(t)
                    .cross(V3.Y)
                    .dot(s.normalP(edge.curve.at(t))) < 0);
            return s;
        });
        let stepStartEdges = baseLoop, stepEndEdges;
        const faces = [];
        for (let rot = 0; rot < totalRads; rot += PI$3) {
            const aT = 0, bT = min$1(totalRads - rot, PI$3);
            const rotation = M4.rotateZ(rot + bT);
            stepEndEdges = rot + bT == TAU ? baseLoop : baseLoop.map(edge => edge.transform(rotation));
            const ribs = arrayFromFunction(baseLoop.length, i => {
                const a = stepStartEdges[i].a, radius = a.lengthXY();
                const b = stepEndEdges[i].a;
                if (!eq0(radius)) {
                    const curve = 0 === rot ? baseRibCurves[i] : baseRibCurves[i].rotateZ(rot);
                    return new PCurveEdge$$1(curve, a, b, aT, bT, undefined, curve.tangentAt(aT), curve.tangentAt(bT), name + 'rib' + i);
                }
                return undefined;
            });
            for (let edgeIndex = 0; edgeIndex < baseLoop.length; edgeIndex++) {
                if (baseSurfaces[edgeIndex]) {
                    const edge = stepStartEdges[edgeIndex];
                    const ipp = (edgeIndex + 1) % baseLoop.length;
                    const faceEdges = [
                        stepStartEdges[edgeIndex].flipped(),
                        !eq0(edge.a.x) && ribs[edgeIndex],
                        stepEndEdges[edgeIndex],
                        !eq0(edge.b.x) && ribs[ipp].flipped(),
                    ].filter((x) => x);
                    const surface = 0 === rot ? baseSurfaces[edgeIndex] : baseSurfaces[edgeIndex].rotateZ(rot);
                    const info = infoFactory && infoFactory.extrudeWall(edgeIndex, surface, faceEdges, undefined);
                    faces.push(Face$$1.create(surface, faceEdges, undefined, name + 'Wall' + edgeIndex, info));
                }
            }
            stepStartEdges = stepEndEdges;
        }
        if (open) {
            const endFaceEdges = Edge$$1.reversePath(stepEndEdges);
            const infoStart = infoFactory && infoFactory.rotationStart(basePlane, baseLoop, undefined);
            const infoEnd = infoFactory && infoFactory.rotationEnd(basePlane.flipped().rotateZ(totalRads), endFaceEdges, undefined);
            faces.push(new PlaneFace$$1(basePlane, baseLoop, undefined, name + 'start', infoStart), new PlaneFace$$1(basePlane.flipped().rotateZ(totalRads), endFaceEdges, undefined, name + 'end', infoEnd));
        }
        const infiniteVolume = new PlaneSurface$$1(P3$$1.ZX).edgeLoopCCW(baseLoop);
        return new BRep$$1(faces, infiniteVolume, generator);
    }
    B2T$$1.rotateEdges = rotateEdges;
    /**
     * loop should be CCW on XZ plane for a bounded BRep
     */
    //export function rotateEdgesUnsplit(loop: Edge[], rads: raddd, name: string): BRep {
    //	assert(Edge.isLoop(loop))
    //	const rotationMatrix = M4.rotateZ(rads)
    //	const open = !eq(rads, 2 * PI)
    //	const endEdges = open ? loop.map(edge => edge.transform(rotationMatrix)) : loop
    //	const edgeCount = loop.length
    //	const ribs = arrayFromFunction(edgeCount, i => {
    //		const a = loop[i].a, radius = a.lengthXY()
    //		const b = endEdges[i].a
    //		if (!eq0(radius)) {
    //			const curve = new SemiEllipseCurve(V(0, 0, a.z), V(-radius, 0, 0), V(0, -radius, 0))
    //			const aT = -PI, bT = -PI + rads
    //			return new PCurveEdge(curve, a, b, aT, bT, undefined, curve.tangentAt(aT), curve.tangentAt(bT), name
    // + 'rib' + i) } }) const faces = loop.map((edge, i) => { const ipp = (i + 1) % edgeCount console.log('ljl', i,
    // ipp, ribs) const faceEdges = [ edge.flipped(), !eq0(edge.a.x) && ribs[i], endEdges[i], !eq0(edge.b.x) &&
    // ribs[ipp].flipped()].filter(x => x) if (edge instanceof StraightEdge) { const line = edge.curve let surface if
    // (line.dir1.isParallelTo(V3.Z)) { if (eq0(edge.a.x)) { return } let flipped = edge.a.z > edge.b.z surface = new
    // SemiCylinderSurface(ribs[i].curve, !flipped ? V3.Z : V3.Z.negated()) } else if
    // (line.dir1.isPerpendicularTo(V3.Z)) { let flipped = edge.a.x > edge.b.x let surface = new PlaneSurface(new
    // P3(V3.Z, edge.a.z)) if (!flipped) surface = surface.flipped() if (!open) { const hole = flipped ? !eq0(edge.b.x)
    // && ribs[ipp].flipped() : !eq0(edge.a.x) && ribs[i] return new PlaneFace(surface, [flipped ? ribs[i] :
    // ribs[ipp].flipped()], hole && [[hole]]) } return new PlaneFace(surface, faceEdges) } else { // apex is
    // intersection of segment with Z-axis let a = edge.a, b = edge.b let apexZ = a.z - a.x * (b.z - a.z) / (b.x - a.x)
    // let apex = new V3(0, 0, apexZ) let flipped = edge.a.z > edge.b.z surface =
    // ConicSurface.atApexThroughEllipse(apex, ribs[a.x > b.x ? i : ipp].curve as SemiEllipseCurve, !flipped ? 1 : -1)
    // } return Face.create(surface, faceEdges) } if (edge.curve instanceof SemiEllipseCurve) { let flipped = undefined
    // let ell = edge.curve.rightAngled() let f1Perp = ell.f1.isPerpendicularTo(V3.Z), f2Perp =
    // ell.f2.isPerpendicularTo(V3.Z) if (L3.Z.containsPoint(ell.center) && (f1Perp || f2Perp)) { let f3length = f1Perp
    // ? ell.f1.length() : ell.f2.length() if (flipped) { f3length *= -1 } let surface = new
    // SemiEllipsoidSurface(ell.center, ell.f1, ell.f2, ell.f1.cross(ell.f2).toLength(f3length)) return new
    // RotationFace(surface, faceEdges) } } else { assert(false, edge) } }).filter(x => x) if (open) { const
    // endFaceEdges = endEdges.map(edge => edge.flipped()).reverse() faces.push( new PlaneFace(new
    // PlaneSurface(P3.ZX.flipped()), loop), new PlaneFace(new PlaneSurface(P3.ZX.rotateZ(rads)), endFaceEdges)) }
    // return new BRep(faces, undefined) }
    function quaffle() {
        const baseK = B2T$$1.sphere(1)
            .translate(0, 1.7)
            .flipped();
        //const baseK = B2T.box().scale(0.2).translate(0, 0.95).flipped()
        // const vs = B2T.DODECAHEDRON_VERTICES.concat(
        // B2T.DODECAHEDRON_FACE_VERTICES.map(fis => fis
        // .map(vi => B2T.DODECAHEDRON_VERTICES[vi])
        // .reduce((a,b) => a.plus(b), V3.O)
        // .unit()))
        const ss = new BRep$$1(B2T$$1.TETRAHEDRON_VERTICES.flatMap(v => baseK.rotateAB(V3.Y, v).faces), false);
        //return ss
        return B2T$$1.sphere().and(ss);
    }
    B2T$$1.quaffle = quaffle;
    function extrudeFace(face, dir) {
        return new BRep$$1(extrudeEdges(face.contour, face.surface.plane, dir)
            .faces.slice(0, -2)
            .concat(face, face.translate(dir.x, dir.y, dir.z).flipped(), face.holes.flatMap(hole => extrudeEdges(hole, face.surface.plane.flipped(), dir).faces.slice(0, -2))), false);
    }
    B2T$$1.extrudeFace = extrudeFace;
    function loadFonts() {
        return loadFont('fonts/FiraSansMedium.woff').then(font => (B2T$$1.defaultFont = font));
    }
    B2T$$1.loadFonts = loadFonts;
    const loadedFonts = new Map();
    function loadFont(fontPath) {
        return new Promise(function (resolve, reject) {
            const font = loadedFonts.get(fontPath);
            if (font) {
                resolve(font);
            }
            else {
                load(fontPath, function (err, f) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        loadedFonts.set(fontPath, f);
                        resolve(f);
                    }
                });
            }
        });
    }
    B2T$$1.loadFont = loadFont;
    function loadFontsAsync(callback) {
        if (B2T$$1.defaultFont) {
            callback();
        }
        else {
            load('fonts/FiraSansMedium.woff', function (err, font) {
                if (err) {
                    throw new Error('Could not load font: ' + err);
                }
                else {
                    B2T$$1.defaultFont = font;
                    callback();
                }
            });
        }
    }
    B2T$$1.loadFontsAsync = loadFontsAsync;
    /**
     * Create the [BRep] of a string rendered in a font.
     * @param text
     * @param size
     * @param depth
     * @param font An opentype.js font.
     */
    function text(text, size, depth = 1, font = B2T$$1.defaultFont) {
        const path = font.getPath(text, 0, 0, size);
        const subpaths = [];
        path.commands.forEach(c => {
            if (c.type == 'M') {
                subpaths.push([]);
            }
            subpaths.last.push(c);
        });
        const loops = subpaths.map(sp => {
            const path = new Path();
            path.commands = sp;
            const loop = Edge$$1.reversePath(Edge$$1.pathFromSVG(path.toPathData(13))).map(e => e.mirrorY());
            assert(Edge$$1.isLoop(loop));
            return loop;
        });
        const faces = Face$$1.assembleFacesFromLoops(loops, new PlaneSurface$$1(P3$$1.XY), PlaneFace$$1);
        const generator = callsce('B2T.text', text, size, depth);
        return BRep$$1.join(faces.map(face => B2T$$1.extrudeFace(face, V(0, 0, -depth))), generator);
    }
    B2T$$1.text = text;
    function minorityReport() {
        const a = B2T$$1.sphere();
        const b = B2T$$1.text('LEO CROW', 64, 128)
            .scale(0.1 / 32)
            .translate(-0.5, -0.05, 1.2)
            .flipped();
        const c = B2T$$1.sphere(0.98);
        return a.and(b).plus(c);
    }
    B2T$$1.minorityReport = minorityReport;
    function whatever() {
        const iso = isocahedron();
        const numbersBRep = BRep$$1.join(iso.faces.map((face, i) => {
            const numberBRep = text('' + (i + 1), 0.4, -2);
            const centroid = face.contour
                .map(edge => edge.a)
                .reduce((a, b) => a.plus(b), V3.O)
                .div(3);
            const sys = M4.forSys(face.contour[0].aDir, centroid.cross(face.contour[0].aDir), centroid.unit(), centroid);
            return numberBRep.transform(sys.times(M4.translate(-numberBRep.getAABB().size().x / 2, -0.1, -0.04)));
        }));
        const s = sphere(0.9);
        //return iso.and(numbersBRep)
        return iso.and(s).and(numbersBRep);
        //return numbersBRep
    }
    B2T$$1.whatever = whatever;
    function whatever3() {
        const t = B2T$$1.torus(1, 2);
        return B2T$$1.box(5, 5, 2)
            .translate(-2.5, -2.5)
            .minus(t);
    }
    B2T$$1.whatever3 = whatever3;
    function d20() {
        const iso = isocahedron();
        const numbersBRep = BRep$$1.join(iso.faces.map((face, i) => {
            const numberBRep = text('' + (i + 1), 0.4, -2);
            const centroid = face.contour
                .map(edge => edge.a)
                .reduce((a, b) => a.plus(b), V3.O)
                .div(3);
            const sys = M4.forSys(face.contour[0].aDir, centroid.cross(face.contour[0].aDir), centroid.unit(), centroid);
            return numberBRep.transform(sys.times(M4.translate(-numberBRep.getAABB().size().x / 2, -0.1, -0.04)));
        }));
        const s = sphere(0.9);
        //return iso.and(numbersBRep)
        return iso.and(s).and(numbersBRep);
        //return numbersBRep
    }
    B2T$$1.d20 = d20;
    function rotStep(edges, totalRadsOrAngles, countO) {
        const angles = 'number' === typeof totalRadsOrAngles
            ? arrayFromFunction(countO, i => (i + 1) / countO * totalRadsOrAngles)
            : totalRadsOrAngles;
        const count = angles.length;
        const open = !eq(TAU, angles.last);
        const ribs = [
            edges,
            ...angles.map(phi => {
                if (eq(TAU, phi)) {
                    return edges;
                }
                const matrix = M4.rotateZ(phi);
                return edges.map(edge => edge.transform(matrix));
            }),
        ];
        const horizontalEdges = arrayFromFunction(count, i => {
            const ipp = (i + 1) % (count + 1);
            return arrayFromFunction(edges.length, j => {
                if (!eq0(edges[j].a.lengthXY())) {
                    return StraightEdge$$1.throughPoints(ribs[i][j].a, ribs[ipp][j].a);
                }
                return undefined;
            });
        });
        const faces = [];
        let face;
        edges.forEach((edge, i) => {
            const ipp = (i + 1) % edges.length;
            // for straight edges perpendicular to the Z-axis, we only create one face.
            if (edge instanceof StraightEdge$$1 && edge.curve.dir1.isPerpendicularTo(V3.Z)) {
                const flipped = edge.a.x > edge.b.x;
                const surface = new PlaneSurface$$1(flipped ? new P3$$1(V3.Z, edge.a.z) : new P3$$1(V3.Z.negated(), -edge.a.z));
                if (open) {
                    const faceEdges = [];
                    if (!eq0(edge.a.x)) {
                        faceEdges.push(...arrayFromFunction(count, j => horizontalEdges[j][i]));
                    }
                    faceEdges.push(ribs[count][i]);
                    if (!eq0(edge.b.x)) {
                        faceEdges.push(...arrayFromFunction(count, j => horizontalEdges[count - j - 1][ipp].flipped()));
                    }
                    faceEdges.push(edge.flipped());
                    face = new PlaneFace$$1(surface, faceEdges);
                }
                else {
                    const contour = flipped
                        ? arrayFromFunction(count, j => horizontalEdges[j][i])
                        : arrayFromFunction(count, j => horizontalEdges[count - j - 1][ipp].flipped());
                    let hole;
                    if (flipped && !eq0(edge.b.x)) {
                        hole = arrayFromFunction(count, j => horizontalEdges[count - j - 1][ipp].flipped());
                    }
                    else if (!flipped && !eq0(edge.a.x)) {
                        hole = arrayFromFunction(count, j => horizontalEdges[j][i]);
                    }
                    face = new PlaneFace$$1(surface, contour, hole ? [hole] : []);
                }
                faces.push(face);
                return;
            }
            else if (edge instanceof StraightEdge$$1) {
                if (eq0(edge.a.lengthXY()) && eq0(edge.b.lengthXY())) {
                    return;
                }
            }
            for (let r = 0; r < count; r++) {
                const rpp = (r + 1) % (count + 1);
                const faceEdges = [
                    ribs[r][i].flipped(),
                    horizontalEdges[r][i],
                    ribs[rpp][i],
                    horizontalEdges[r][ipp] && horizontalEdges[r][ipp].flipped(),
                ].filter(x => x);
                let surface;
                if (edge instanceof StraightEdge$$1) {
                    surface = new PlaneSurface$$1(P3$$1.throughPoints(faceEdges[0].a, faceEdges[1].a, faceEdges[2].a));
                }
                else {
                    const maxX = edges[i].getAABB().max.x;
                    const phi = angles[r], prevPhi = 0 == r ? 0 : angles[r - 1];
                    const offset = V3.polar(maxX, prevPhi).to(V3.polar(maxX, phi));
                    surface = projectCurve$$1(ribs[r][i].curve, offset, false);
                }
                faces.push(Face$$1.create(surface, faceEdges));
            }
        });
        if (open) {
            const endFaceEdges = ribs[count].map(edge => edge.flipped()).reverse();
            const endFace = new PlaneFace$$1(new PlaneSurface$$1(P3$$1.ZX.rotateZ(angles.last)), endFaceEdges);
            faces.push(new PlaneFace$$1(new PlaneSurface$$1(P3$$1.ZX.flipped()), edges), endFace);
        }
        return new BRep$$1(faces, new PlaneSurface$$1(P3$$1.ZX).edgeLoopCCW(edges));
    }
    B2T$$1.rotStep = rotStep;
    function fixEdges(edges) {
        return edges.flatMap(edge => {
            const c = edge.curve;
            if (c instanceof SemiEllipseCurve$$1 && c.tMin === -PI$3 && c.tMax === PI$3) {
                const splitEdges = edge.minT < 0 && edge.maxT > 0 ? edge.split(0) : [edge];
                return splitEdges.map(edge => {
                    if (edge.minT >= 0) {
                        return Edge$$1.create(new SemiEllipseCurve$$1(c.center, c.f1, c.f2, max$1(0, c.tMin), c.tMax), edge.a, edge.b, edge.aT, edge.bT, undefined, edge.aDir, edge.bDir, edge.name);
                    }
                    else {
                        // "rotate" the curve
                        return Edge$$1.create(new SemiEllipseCurve$$1(c.center, c.f1.negated(), c.f2.negated(), c.tMin + PI$3, min$1(PI$3, c.tMax + PI$3)), edge.a, edge.b, edge.aT + PI$3, edge.bT + PI$3, undefined, edge.aDir, edge.bDir, edge.name);
                    }
                });
            }
            if (c instanceof BezierCurve$$1) {
                if (edge.a.like(edge.b)) {
                    return edge.split(lerp(edge.aT, edge.bT, 0.5));
                }
            }
            return edge;
        });
    }
    B2T$$1.fixEdges = fixEdges;
    /**
     * Create a [BRep] by projecting edges created by joining vertices with straight edges.
     * @param baseVertices
     * @param baseFacePlane
     * @param offset
     * @param name
     * @param generator
     */
    function extrudeVertices(baseVertices, baseFacePlane, offset, name, generator) {
        assert(baseVertices.every(v => v instanceof V3), 'baseVertices.every(v => v instanceof V3)');
        assertInst(P3$$1, baseFacePlane);
        assertVectors(offset);
        if (baseFacePlane.normal1.dot(offset) > 0)
            baseFacePlane = baseFacePlane.flipped();
        const edges = StraightEdge$$1.chain(baseVertices, true);
        generator = generator || callsce('B2T.extrudeVertices', baseVertices, baseFacePlane, offset, name);
        return B2T$$1.extrudeEdges(edges, baseFacePlane, offset, name, generator);
    }
    B2T$$1.extrudeVertices = extrudeVertices;
    /**
     * Create a tetrahedron (3 sided pyramid) [BRep].
     * `a`, `b`, `c` and `d` can be in any order. The only constraint is that they cannot be on a common plane.
     * The resulting tetrahedron will always have outwards facing faces.
     * @param a
     * @param b
     * @param c
     * @param d
     * @param name
     */
    function tetrahedron(a, b, c, d, name = 'tetra' + getGlobalId$$1()) {
        assertVectors(a, b, c, d);
        const dDistance = P3$$1.throughPoints(a, b, c).distanceToPointSigned(d);
        if (eq0(dDistance)) {
            throw new Error('four points are coplanar');
        }
        if (dDistance > 0) {
            [c, d] = [d, c];
        }
        const ab = StraightEdge$$1.throughPoints(a, b);
        const ac = StraightEdge$$1.throughPoints(a, c);
        const ad = StraightEdge$$1.throughPoints(a, d);
        const bc = StraightEdge$$1.throughPoints(b, c);
        const bd = StraightEdge$$1.throughPoints(b, d);
        const cd = StraightEdge$$1.throughPoints(c, d);
        const faces = [
            new PlaneFace$$1(PlaneSurface$$1.throughPoints(a, b, c), [ab, bc, ac.flipped()], [], name + 'abc'),
            new PlaneFace$$1(PlaneSurface$$1.throughPoints(a, d, b), [ad, bd.flipped(), ab.flipped()], [], name + 'adb'),
            new PlaneFace$$1(PlaneSurface$$1.throughPoints(b, d, c), [bd, cd.flipped(), bc.flipped()], [], name + 'bdc'),
            new PlaneFace$$1(PlaneSurface$$1.throughPoints(c, d, a), [cd, ad.flipped(), ac], [], name + 'cda'),
        ];
        const gen = callsce('B2T.tetrahedron', a, b, c, d);
        return new BRep$$1(faces, false, gen);
    }
    B2T$$1.tetrahedron = tetrahedron;
    const b = 1 / GOLDEN_RATIO, c = 2 - GOLDEN_RATIO;
    B2T$$1.TETRAHEDRON_VERTICES = [
        new V3(1, 0, -1 / Math.sqrt(2)),
        new V3(-1, 0, -1 / Math.sqrt(2)),
        new V3(0, -1, 1 / Math.sqrt(2)),
        new V3(0, 1, 1 / Math.sqrt(2)),
    ].map(v => v.unit());
    B2T$$1.DODECAHEDRON_VERTICES = [
        new V3(c, 0, 1),
        new V3(-c, 0, 1),
        new V3(-b, b, b),
        new V3(0, 1, c),
        new V3(b, b, b),
        new V3(b, -b, b),
        new V3(0, -1, c),
        new V3(-b, -b, b),
        new V3(c, 0, -1),
        new V3(-c, 0, -1),
        new V3(-b, -b, -b),
        new V3(0, -1, -c),
        new V3(b, -b, -b),
        new V3(b, b, -b),
        new V3(0, 1, -c),
        new V3(-b, b, -b),
        new V3(1, c, 0),
        new V3(-1, c, 0),
        new V3(-1, -c, 0),
        new V3(1, -c, 0),
    ].map(v => v.unit());
    B2T$$1.DODECAHEDRON_FACE_VERTICES = [
        [4, 3, 2, 1, 0],
        [7, 6, 5, 0, 1],
        [12, 11, 10, 9, 8],
        [15, 14, 13, 8, 9],
        [14, 3, 4, 16, 13],
        [3, 14, 15, 17, 2],
        [11, 6, 7, 18, 10],
        [6, 11, 12, 19, 5],
        [4, 0, 5, 19, 16],
        [12, 8, 13, 16, 19],
        [15, 9, 10, 18, 17],
        [7, 1, 2, 17, 18],
    ];
    B2T$$1.OCTAHEDRON_VERTICES = [
        new V3(1, 0, 0),
        new V3(-1, 0, 0),
        new V3(0, 1, 0),
        new V3(0, -1, 0),
        new V3(0, 0, 1),
        new V3(0, 0, -1),
    ];
    B2T$$1.OCTAHEDRON_FACE_VERTICES = [
        [0, 2, 4],
        [2, 1, 4],
        [1, 3, 4],
        [3, 0, 4],
        [2, 0, 5],
        [1, 2, 5],
        [3, 1, 5],
        [0, 3, 5],
    ];
    const { x: s, y: t } = new V3(1, GOLDEN_RATIO, 0).unit();
    B2T$$1.ISOCAHEDRON_VERTICES = [
        new V3(-s, t, 0),
        new V3(s, t, 0),
        new V3(-s, -t, 0),
        new V3(s, -t, 0),
        new V3(0, -s, t),
        new V3(0, s, t),
        new V3(0, -s, -t),
        new V3(0, s, -t),
        new V3(t, 0, -s),
        new V3(t, 0, s),
        new V3(-t, 0, -s),
        new V3(-t, 0, s),
    ];
    B2T$$1.ISOCAHEDRON_FACE_VERTICES = [
        // 5 faces around point 0
        [0, 11, 5],
        [0, 5, 1],
        [0, 1, 7],
        [0, 7, 10],
        [0, 10, 11],
        // 5 adjacent faces
        [1, 5, 9],
        [5, 11, 4],
        [11, 10, 2],
        [10, 7, 6],
        [7, 1, 8],
        // 5 faces around point 3
        [3, 9, 4],
        [3, 4, 2],
        [3, 2, 6],
        [3, 6, 8],
        [3, 8, 9],
        // 5 adjacent faces
        [4, 9, 5],
        [2, 4, 11],
        [6, 2, 10],
        [8, 6, 7],
        [9, 8, 1],
    ];
    /**
     * Create a dodecahedron [BRep]. The vertices are on the unit sphere.
     */
    function dodecahedron() {
        return makePlatonic(B2T$$1.DODECAHEDRON_VERTICES, B2T$$1.DODECAHEDRON_FACE_VERTICES, 'B2T.dodecahedron()');
    }
    B2T$$1.dodecahedron = dodecahedron;
    /**
     * Create an octahedron [BRep]. The vertices are on the unit sphere.
     */
    function octahedron() {
        return makePlatonic(B2T$$1.OCTAHEDRON_VERTICES, B2T$$1.OCTAHEDRON_FACE_VERTICES, 'B2T.octahedron()');
    }
    B2T$$1.octahedron = octahedron;
    /**
     * Create an isocahedron [BRep]. The vertices are on the unit sphere.
     */
    function isocahedron() {
        return makePlatonic(B2T$$1.ISOCAHEDRON_VERTICES, B2T$$1.ISOCAHEDRON_FACE_VERTICES, 'B2T.octahedron()');
    }
    B2T$$1.isocahedron = isocahedron;
    function makePlatonic(VS, FVIS, generator) {
        const edgeMap = new Map();
        const faces = FVIS.map(faceIndexes => {
            const surface = PlaneSurface$$1.throughPoints(VS[faceIndexes[0]], VS[faceIndexes[1]], VS[faceIndexes[2]]);
            const contour = arrayFromFunction(faceIndexes.length, i => {
                const ipp = (i + 1) % faceIndexes.length;
                const iA = faceIndexes[i], iB = faceIndexes[ipp];
                const iMin = min$1(iA, iB), iMax = max$1(iA, iB), edgeID = iMin * VS.length + iMax;
                let edge = edgeMap.get(edgeID);
                !edge && edgeMap.set(edgeID, (edge = StraightEdge$$1.throughPoints(VS[iMin], VS[iMax])));
                return iA < iB ? edge : edge.flipped();
            });
            return new PlaneFace$$1(surface, contour);
        });
        return new BRep$$1(faces, false, generator);
    }
    /**
     * Create a [BRep] by projecting a number of edges onto a point.
     * @param baseEdges The edges forming the base of the pyramid.
     * @param apex The tip of the pyramid.
     * @param name
     */
    function pyramidEdges(baseEdges, apex, name = 'pyramid' + getGlobalId$$1()) {
        assertInst(Edge$$1, ...baseEdges);
        assertVectors(apex);
        const ribs = baseEdges.map(baseEdge => StraightEdge$$1.throughPoints(apex, baseEdge.a));
        const faces = baseEdges.map((baseEdge, i) => {
            const faceName = name + 'Wall' + i;
            const ipp = (i + 1) % baseEdges.length;
            const faceEdges = [ribs[i], baseEdge, ribs[ipp].flipped()];
            const surface = projectPointCurve$$1(baseEdge.curve, baseEdge.minT, baseEdge.maxT, apex, baseEdge.deltaT() < 0);
            return Face$$1.create(surface, faceEdges, undefined, faceName);
        });
        const baseSurface = new PlaneSurface$$1(P3$$1.XY).flipped();
        const bottomFace = Face$$1.create(baseSurface, Edge$$1.reversePath(baseEdges));
        faces.push(bottomFace);
        const generator = callsce('B2T.pyramidEdges', baseEdges, apex, name);
        return new BRep$$1(faces, false, generator);
    }
    B2T$$1.pyramidEdges = pyramidEdges;
})(B2T$$1 || (B2T$$1 = {}));

class CustomPlane$$1 extends P3$$1 {
    constructor(anchor, right, up, name = 'CustomPlane' + getGlobalId$$1(), color = chroma.random().gl(), rightStart = -500, rightEnd = 500, upStart = -500, upEnd = 500) {
        const { normal1, w } = P3$$1.forAnchorAndPlaneVectors(anchor, right, up);
        super(normal1, w);
        this.up = up;
        this.right = right;
        this.sMin = rightStart;
        this.sMax = rightEnd;
        this.tMin = upStart;
        this.tMax = upEnd;
        this.name = name;
        this.color = color;
    }
    get plane() {
        return this;
    }
    toPlaneSurface() {
        return new PlaneSurface$$1(this, this.right, this.up);
    }
    static forPlane(plane, color, name) {
        //assert(!name)
        const up = plane.normal1.getPerpendicular().unit(), right = up.cross(plane.normal1);
        return new CustomPlane$$1(plane.anchor, right, up, name, color);
    }
    static fromPlaneSurface(surface) {
        return new CustomPlane$$1(surface.plane.anchor, surface.right, surface.up, 'genCustomPlane' + getGlobalId$$1());
    }
    distanceTo(line, mindist) {
        return [
            new L3$$1(this.anchor.plus(this.right.times(this.sMin)), this.up),
            new L3$$1(this.anchor.plus(this.right.times(this.sMax)), this.up),
            new L3$$1(this.anchor.plus(this.up.times(this.tMin)), this.right),
            new L3$$1(this.anchor.plus(this.up.times(this.tMax)), this.right),
        ]
            .map((line2, line2Index) => {
            const info = line2.infoClosestToLine(line);
            if ((isNaN(info.t) || // parallel LINES
                (line2Index < 2 && this.tMin <= info.t && info.t <= this.tMax) ||
                (line2Index >= 2 && this.sMin <= info.t && info.t <= this.sMax)) &&
                info.distance <= mindist) {
                return info.s;
            }
            else {
                return Infinity;
            }
        })
            .min();
    }
    distanceTo2(line, mindist) {
        return [
            new L3$$1(this.anchor.plus(this.right.times(this.sMin)), this.up),
            new L3$$1(this.anchor.plus(this.right.times(this.sMax)), this.up),
            new L3$$1(this.anchor.plus(this.up.times(this.tMin)), this.right),
            new L3$$1(this.anchor.plus(this.up.times(this.tMax)), this.right),
        ]
            .map((line2, line2Index) => {
            const info = line2.infoClosestToLine(line);
            if ((isNaN(info.t) || // parallel LINES
                (line2Index < 2 && this.tMin <= info.t && info.t <= this.tMax) ||
                (line2Index >= 2 && this.sMin <= info.t && info.t <= this.sMax)) &&
                info.distance <= mindist) {
                return info.distance;
            }
            else {
                return Infinity;
            }
        })
            .min();
    }
}

class Edge$$1 extends Transformable {
    constructor(curve, a, b, aT, bT, flippedOf, name) {
        super();
        this.curve = curve;
        this.a = a;
        this.b = b;
        this.aT = aT;
        this.bT = bT;
        this.flippedOf = flippedOf;
        this.name = name;
        assertNumbers(aT, bT);
        assert(!eq(aT, bT));
        assertVectors(a, b);
        assertf(() => curve instanceof Curve$$1, curve);
        assertf(() => !curve.isValidT || (curve.isValidT(aT) && curve.isValidT(bT)), aT, bT, curve);
        //if (curve instanceof PICurve) {
        //    assertf(() => curve.at(aT).to(a).length() < 0.1, ''+curve.at(aT)+a)
        //    assertf(() => curve.at(bT).to(b).length() < 0.1, '' + curve.at(bT) + b)
        //} else {
        assertf(() => curve.at(aT).like(a), () => '' + curve.at(aT) + a + ' aT should have been ' + curve.pointT(a));
        assertf(() => curve.at(bT).like(b), () => '' + curve.at(bT) + b + ' bT should have been ' + curve.pointT(b));
        //}
        assertf(() => fuzzyBetween(aT, curve.tMin, curve.tMax), aT, curve.tMin, curve.tMax);
        assertf(() => fuzzyBetween(bT, curve.tMin, curve.tMax), bT, curve.tMin, curve.tMax);
        this.aT = clamp(aT, curve.tMin, curve.tMax);
        this.bT = clamp(bT, curve.tMin, curve.tMax);
        this.reversed = this.aT > this.bT;
    }
    get minT() {
        return Math.min(this.aT, this.bT);
    }
    get maxT() {
        return Math.max(this.aT, this.bT);
    }
    static forCurveAndTs(curve, aT = curve.tMin, bT = curve.tMax) {
        return Edge$$1.create(curve, curve.at(aT), curve.at(bT), aT, bT, undefined, aT < bT ? curve.tangentAt(aT) : curve.tangentAt(aT).negated(), aT < bT ? curve.tangentAt(bT) : curve.tangentAt(bT).negated());
    }
    static create(curve, a, b, aT, bT, flippedOf, aDir, bDir, name) {
        if (curve instanceof L3$$1) {
            return new StraightEdge$$1(curve, a, b, aT, bT, flippedOf, name);
        }
        else {
            return new PCurveEdge$$1(curve, a, b, aT, bT, flippedOf, aDir, bDir, name);
        }
    }
    static isLoop(loop) {
        return loop.every((edge, i) => edge.b.like(loop[(i + 1) % loop.length].a));
    }
    static edgesIntersect(e1, e2) {
        // TODO: still getting some NaNs here..
        assertNumbers(e1.curve.hlol, e2.curve.hlol);
        assertInst(Edge$$1, e1, e2);
        if (e1.curve.hlol < e2.curve.hlol) {
            [e2, e1] = [e1, e2];
        }
        const sts = e1.curve.isInfosWithCurve(e2.curve);
        if (sts.some(info => isNaN(info.tThis) || isNaN(info.tOther))) {
            console.log(e1.sce);
            console.log(e2.sce);
            assert(false);
        }
        return sts.some(
        /// (  e1.aT < tThis < e1.bT  )  &&  (  e2.aT < tOther < e2.bT  )
        ({ tThis, tOther }) => {
            return e1.tValueInside(tThis) && e2.tValueInside(tOther);
        });
    }
    static assertLoop(edges) {
        edges.forEach((edge, i) => {
            const j = (i + 1) % edges.length;
            assert(edge.b.like(edges[j].a), `edges[${i}].b != edges[${j}].a (${edges[i].b.sce} != ${edges[j].a.sce})`);
        });
    }
    static ngon(n = 3, radius = 1) {
        return StraightEdge$$1.chain(arrayFromFunction(n, i => V3.polar(radius, TAU * i / n)));
    }
    static star(pointCount = 5, r0 = 1, r1 = 0.5) {
        const vertices = arrayFromFunction(pointCount * 2, i => V3.polar(0 == i % 2 ? r0 : r1, TAU * i / pointCount / 2));
        return StraightEdge$$1.chain(vertices);
    }
    static reversePath(path, doReverse = true) {
        return doReverse ? arrayFromFunction(path.length, i => path[path.length - 1 - i].flipped()) : path;
    }
    /**
     * Create an axis-aligned rectangle of edges on the XY-plane with the bottom-left corner on the origin.
     * @param width
     * @param height
     */
    static rect(width = 1, height = width) {
        const vertices = [new V3(0, 0, 0), new V3(width, 0, 0), new V3(width, height, 0), new V3(0, height, 0)];
        return StraightEdge$$1.chain(vertices);
    }
    static reuleaux(n = 3, radius = 1) {
        assert(3 <= n);
        assert(1 == n % 2);
        const corners = arrayFromFunction(n, i => V3.polar(radius, TAU * i / n));
        return arrayFromFunction(n, i => {
            const aI = (i + floor(n / 2)) % n, bI = (i + ceil(n / 2)) % n;
            const a = corners[aI], b = corners[bI];
            const center = corners[i];
            const f1 = center.to(a), curve = new SemiEllipseCurve$$1(center, f1, V3.Z.cross(f1));
            return Edge$$1.create(curve, a, b, 0, curve.pointT(b), undefined, V3.Z.cross(f1), V3.Z.cross(center.to(b)));
        });
    }
    static round(edges, radius) {
        if (eq0(radius)) {
            return edges;
        }
        const corners = edges.map((edge, i) => {
            const j = (i + 1) % edges.length, nextEdge = edges[j];
            if (!edge.b.like(nextEdge.a))
                return undefined;
            const angleToNext = edge.bDir.angleTo(nextEdge.aDir);
            const c1 = edge.curve, c2 = nextEdge.curve;
            if (c1 instanceof L3$$1 && c2 instanceof L3$$1) {
                const normal = c1.dir1.cross(c2.dir1);
                if (eq0(angleToNext))
                    return undefined;
                const l1inside = normal.cross(c1.dir1), l2inside = normal.cross(c2.dir1);
                const l1offset = c1.transform(M4.translate(l1inside.toLength(radius)));
                const l2offset = c2.transform(M4.translate(l2inside.toLength(radius)));
                const center = l1offset.isInfoWithLine(l2offset);
                if (!center)
                    throw new Error('tangential curves');
                const cornerA = center.plus(l1inside.toLength(-radius));
                const cornerB = center.plus(l2inside.toLength(-radius));
                const f1 = l1inside.toLength(-radius);
                const curve = new SemiEllipseCurve$$1(center, f1, normal.cross(f1).toLength(radius));
                const cornerEdge = Edge$$1.create(curve, cornerA, cornerB, 0, curve.pointT(cornerB), undefined, c1.dir1, c2.dir1);
                return cornerEdge;
            }
            else {
                return Edge$$1.arbitraryCorner(edge, nextEdge, radius);
            }
        });
        const result = edges.flatMap((edge, i) => {
            const h = (i + edges.length - 1) % edges.length;
            const prevCorner = corners[h], nextCorner = corners[i];
            if (!prevCorner && !nextCorner) {
                return edge;
            }
            const [aT, a, aDir] = !prevCorner
                ? [edge.aT, edge.a, edge.aDir]
                : [edge.curve.pointT(prevCorner.b), prevCorner.b, prevCorner.bDir];
            const [bT, b, bDir] = !nextCorner
                ? [edge.bT, edge.b, edge.bDir]
                : [edge.curve.pointT(nextCorner.a), nextCorner.a, nextCorner.aDir];
            const newEdge = Edge$$1.create(edge.curve, a, b, aT, bT, undefined, aDir, bDir);
            return !nextCorner ? newEdge : [newEdge, nextCorner];
        });
        return result;
    }
    static arbitraryCorner(e1, e2, radius) {
        const c1 = e1.curve, c2 = e2.curve;
        function f([t1, t2]) {
            const p1 = c1.at(t1), p2 = c2.at(t2);
            const dp1 = c1.tangentAt(t1), dp2 = c2.tangentAt(t2);
            const virtualPlaneNormal = dp1.cross(dp2);
            const normal1 = virtualPlaneNormal.cross(dp1).unit(), normal2 = virtualPlaneNormal.cross(dp2).unit();
            const dirCross = normal1.cross(normal2);
            if (virtualPlaneNormal.likeO()) {
                assert(false);
            } // lines parallel
            const p1p2 = p1.to(p2);
            // check if distance is zero (see also L3.distanceToLine)
            if (!eq0(p1p2.dot(virtualPlaneNormal))) {
                assert(false);
            }
            const dist1 = p1p2.cross(normal2).dot(dirCross) / dirCross.squared();
            const dist2 = p1p2.cross(normal1).dot(dirCross) / dirCross.squared();
            const g1 = p1.plus(normal1.times(dist1));
            const g2 = p2.plus(normal2.times(dist2));
            assert(g1.like(g2));
            return [abs$2(dist1) - radius, abs$2(dist2) - radius];
        }
        const startT1 = e1.bT - radius * sign$1(e1.deltaT()) / e1.bDir.length();
        const startT2 = e2.aT + radius * sign$1(e2.deltaT()) / e2.aDir.length();
        const [t1, t2] = newtonIterate(f, [startT1, startT2]);
        const cornerA = e1.curve.at(t1);
        const cornerB = e2.curve.at(t2);
        const dp1 = c1.tangentAt(t1), dp2 = c2.tangentAt(t2);
        const virtualPlaneNormal = dp1.cross(dp2);
        const normal1 = virtualPlaneNormal.cross(dp1).unit();
        const f1 = normal1.toLength(-radius);
        const center = cornerA.minus(f1);
        const curve = new SemiEllipseCurve$$1(center, f1, virtualPlaneNormal.cross(f1).toLength(radius));
        const cornerEdge = Edge$$1.create(curve, cornerA, cornerB, 0, curve.pointT(cornerB), undefined, c1.tangentAt(t1), c2.tangentAt(t2));
        return cornerEdge;
    }
    static pathFromSVG(pathString) {
        let currentPos = undefined;
        const parsed = new svgPathdata.SVGPathData(pathString)
            .toAbs()
            .normalizeHVZ()
            .sanitize(NLA_PRECISION)
            .annotateArcs().commands;
        const path = [];
        for (const c of parsed) {
            assert('x' in c && 'y' in c);
            const endPos = new V3(c.x, c.y, 0);
            switch (c.type) {
                case svgPathdata.SVGPathData.LINE_TO:
                    path.push(StraightEdge$$1.throughPoints(currentPos, endPos));
                    break;
                case svgPathdata.SVGPathData.CURVE_TO: {
                    const c1 = new V3(c.x1, c.y1, 0);
                    const c2 = new V3(c.x2, c.y2, 0);
                    const curve = new BezierCurve$$1(currentPos, c1, c2, endPos, 0, 1);
                    const edge = new PCurveEdge$$1(curve, currentPos, endPos, 0, 1, undefined, curve.tangentAt(0), curve.tangentAt(1));
                    path.push(edge);
                    break;
                }
                case svgPathdata.SVGPathData.QUAD_TO: {
                    const c1 = new V3(c.x1, c.y1, 0);
                    const curve = ParabolaCurve$$1.quadratic(currentPos, c1, endPos).rightAngled();
                    const edge = new PCurveEdge$$1(curve, currentPos, endPos, curve.tMin, curve.tMax, undefined, curve.tangentAt(curve.tMin), curve.tangentAt(curve.tMax));
                    path.push(edge);
                    break;
                }
                case svgPathdata.SVGPathData.ARC: {
                    const phi1 = c.phi1 * DEG, phi2 = c.phi2 * DEG, [phiMin, phiMax] = [phi1, phi2].sort(MINUS);
                    const stops = arrayRange(-3, 4, 1)
                        .map(n => n * PI$3)
                        .filter(stop => phiMin <= stop && stop <= phiMax);
                    const center = V(c.cX, c.cY);
                    const f1 = V3.polar(c.rX, c.xRot * DEG);
                    const f2 = V3.polar(c.rY, c.xRot * DEG + Math.PI / 2);
                    const edges = getIntervals(stops, phiMin, phiMax).map(([t1, t2]) => {
                        const deltaT = t2 - t1;
                        const t1_ = mod(t1, TAU);
                        const t2_ = t1_ + deltaT;
                        assert(t1_ >= 0 == t2_ >= 0);
                        const gtPI = t1_ > PI$3 || t2_ > PI$3;
                        const aT = gtPI ? t1_ - PI$3 : t1_;
                        const bT = gtPI ? t2_ - PI$3 : t2_;
                        const curve = new SemiEllipseCurve$$1(center, gtPI ? f1.negated() : f1, gtPI ? f2.negated() : f2);
                        const a = phi1 == t1 ? currentPos : phi2 == t1 ? endPos : curve.at(aT);
                        const b = phi1 == t2 ? currentPos : phi2 == t2 ? endPos : curve.at(bT);
                        return new PCurveEdge$$1(curve, a, b, aT, bT, undefined, curve.tangentAt(aT), curve.tangentAt(bT));
                    });
                    path.push(...(c.phiDelta > 0 ? edges : Edge$$1.reversePath(edges)));
                    break;
                }
            }
            currentPos = endPos;
        }
        return path;
    }
    toString() {
        return callsce('new ' + this.constructor.name, this.curve, this.a, this.b, this.aT, this.bT, undefined, this.aDir, this.bDir);
    }
    split(t) {
        const p = this.curve.at(t);
        const pDir = this.tangentAt(t);
        return [
            Edge$$1.create(this.curve, this.a, p, this.aT, t, undefined, this.aDir, pDir, this.name + 'left'),
            Edge$$1.create(this.curve, p, this.b, t, this.bT, undefined, pDir, this.bDir, this.name + 'left'),
        ];
    }
    colinearToLine(line) {
        return this.curve instanceof L3$$1 && this.curve.isColinearTo(line);
    }
    tValueInside(t) {
        return this.aT < this.bT ? lt(this.aT, t) && lt(t, this.bT) : lt(this.bT, t) && lt(t, this.aT);
    }
    isValidT(t) {
        return this.aT < this.bT ? le(this.aT, t) && le(t, this.bT) : le(this.bT, t) && le(t, this.aT);
    }
    clampedT(t) {
        return this.aT < this.bT ? clamp(t, this.aT, this.bT) : clamp(t, this.bT, this.aT);
    }
    /**
     * this is equals-equals. "isColinearTo" might make more sense but can't be used, because you can't get a
     * consistent hashCode for colinear curves
     * @param obj
     * @returns
     */
    equals(obj) {
        return (this === obj ||
            (this.constructor == obj.constructor &&
                this.a.equals(obj.a) &&
                this.b.equals(obj.b) &&
                this.curve.equals(obj.curve)));
    }
    hashCode() {
        let hashCode$$1 = 0;
        hashCode$$1 = hashCode$$1 * 31 + this.a.hashCode();
        hashCode$$1 = hashCode$$1 * 31 + this.b.hashCode();
        hashCode$$1 = hashCode$$1 * 31 + this.curve.hashCode();
        return hashCode$$1 | 0;
    }
    like(edge) {
        // TODO this breaks on colinear edges,
        // TODO: what, where?
        return (this === edge ||
            (edge instanceof Edge$$1 && this.curve.isColinearTo(edge.curve) && this.a.like(edge.a) && this.b.like(edge.b)));
    }
    isCanon() {
        return !this.reversed;
    }
    getCanon() {
        return this.reversed ? this.flipped() : this;
    }
    overlaps(edge, noback) {
        assert(this.curve.isColinearTo(edge.curve));
        const edgeAT = this.curve.containsPoint(edge.a) && this.curve.pointT(edge.a);
        const edgeBT = this.curve.containsPoint(edge.b) && this.curve.pointT(edge.b);
        if (false === edgeAT && false === edgeBT) {
            return noback ? false : edge.overlaps(this, true);
        }
        const flipped = false !== edgeAT ? this.tangentAt(edgeAT).dot(edge.aDir) : this.tangentAt(edge.bT).dot(edge.bDir);
        return !(le(edge.maxT, this.minT) || le(this.maxT, edge.minT));
    }
    getAABB() {
        const min = [Infinity, Infinity, Infinity], max = [-Infinity, -Infinity, -Infinity];
        this.curve.roots().forEach((ts, dim) => {
            ts.forEach(t => {
                if (lt(this.minT, t) && lt(t, this.maxT)) {
                    min[dim] = Math.min(min[dim], this.curve.at(t).e(dim));
                    max[dim] = Math.max(max[dim], this.curve.at(t).e(dim));
                }
            });
        });
        const aabb = new AABB(V(min), V(max));
        aabb.addPoint(this.a);
        aabb.addPoint(this.b);
        return aabb;
    }
    length(steps = 1) {
        return this.curve.arcLength(this.minT, this.maxT, steps);
    }
    deltaT() {
        return this.bT - this.aT;
    }
    deltaTSign() {
        return sign$1(this.bT - this.aT);
    }
    atAvgT() {
        return this.curve.at((this.minT + this.maxT) / 2);
    }
    /**
     * Whether two edge loops are equal. Takes into account that two loops need not start with the same edge.
     * @param loop1
     * @param loop2
     */
    static loopsEqual(loop1, loop2) {
        return (loop1.length == loop2.length &&
            arrayRange(0, loop1.length, 1).some(offset => loop1.every((edge, i) => edge.equals(loop2[(offset + i) % loop1.length]))));
    }
}
class PCurveEdge$$1 extends Edge$$1 {
    constructor(curve, a, b, aT, bT, flippedOf, aDir, bDir, name) {
        super(curve, a, b, aT, bT, flippedOf, name);
        this.flippedOf = flippedOf;
        this.aDir = aDir;
        this.bDir = bDir;
        assertVectors(aDir, bDir);
        assertf(() => !aDir.likeO(), curve);
        assertf(() => !bDir.likeO(), curve);
        if (!(curve instanceof PICurve$$1)) {
            // TODO
            assertf(() => curve.tangentAt(aT).likeOrReversed(aDir), '' + aT + curve.tangentAt(aT).sce + ' ' + aDir.sce);
            assertf(() => curve.tangentAt(bT).likeOrReversed(bDir));
        }
        assert(this.reversed === this.aDir.dot(curve.tangentAt(aT)) < 0, aT +
            ' ' +
            bT +
            ' ' +
            curve.constructor.name +
            ' ' +
            this.aDir.sce +
            ' ' +
            this.bDir.sce +
            ' ' +
            curve.tangentAt(aT));
        assert(this.reversed === this.bDir.dot(curve.tangentAt(bT)) < 0, aT +
            ' ' +
            bT +
            ' ' +
            curve.constructor.name +
            ' ' +
            this.aDir.sce +
            ' ' +
            this.bDir.sce +
            ' ' +
            curve.tangentAt(aT));
    }
    static forCurveAndTs(curve, aT, bT, name) {
        return new PCurveEdge$$1(curve, curve.at(aT), curve.at(bT), aT, bT, undefined, aT < bT ? curve.tangentAt(aT) : curve.tangentAt(aT).negated(), aT < bT ? curve.tangentAt(bT) : curve.tangentAt(bT).negated(), name);
    }
    toSource() {
        return callsce('new PCurveEdge', this.curve, this.a, this.b, this.aT, this.bT, undefined, this.aDir, this.bDir, this.name);
    }
    getVerticesNo0() {
        return this.curve.calcSegmentPoints(this.aT, this.bT, this.a, this.b, this.reversed, false);
    }
    pointsCount() {
        return this.points().length;
    }
    points() {
        return this.curve.calcSegmentPoints(this.aT, this.bT, this.a, this.b, this.reversed, true);
    }
    edgeISTsWithSurface(surface) {
        return this.curve
            .isTsWithSurface(surface)
            .map(edgeT => snap2(edgeT, this.aT, this.bT))
            .filter(edgeT => this.minT <= edgeT && edgeT <= this.maxT);
    }
    edgeISTsWithPlane(surface) {
        return this.curve
            .isTsWithPlane(surface)
            .map(edgeT => snap2(edgeT, this.aT, this.bT))
            .filter(edgeT => this.minT <= edgeT && edgeT <= this.maxT);
    }
    tangentAt(t) {
        return !this.reversed ? this.curve.tangentAt(t) : this.curve.tangentAt(t).negated();
    }
    flipped() {
        return (this.flippedOf ||
            (this.flippedOf = new PCurveEdge$$1(this.curve, this.b, this.a, this.bT, this.aT, this, this.bDir.negated(), this.aDir.negated(), this.name)));
    }
    transform(m4, desc) {
        return new PCurveEdge$$1(this.curve.transform(m4), m4.transformPoint(this.a), m4.transformPoint(this.b), this.aT, this.bT, undefined, m4.transformVector(this.aDir), m4.transformVector(this.bDir), '' + this.name + desc);
    }
    isCoEdge(edge) {
        return (this === edge ||
            this === edge.flippedOf ||
            (this.curve.isColinearTo(edge.curve) &&
                ((this.a.like(edge.a) && this.b.like(edge.b)) || (this.a.like(edge.b) && this.b.like(edge.a)))));
    }
}
class StraightEdge$$1 extends Edge$$1 {
    constructor(line, a, b, aT, bT, flippedOf, name) {
        super(line, a, b, aT, bT, flippedOf, name);
        this.flippedOf = flippedOf;
        assertInst(L3$$1, line);
        !flippedOf || assertInst(StraightEdge$$1, flippedOf);
        !name || assertf(() => 'string' === typeof name, name);
        assert(!a.like(b), '!a.like(b)' + a + b); // don't put in super as it will break full ellipse
        this.tangent = this.aT < this.bT ? this.curve.dir1 : this.curve.dir1.negated();
    }
    get aDir() {
        return this.tangent;
    }
    get bDir() {
        return this.tangent;
    }
    static throughPoints(a, b, name) {
        return new StraightEdge$$1(L3$$1.throughPoints(a, b, 0, a.to(b).length()), a, b, 0, a.to(b).length(), undefined, name);
    }
    /**
     * Create a list of StraightEdges from a list of vertices.
     * @param vertices
     * @param closed Whether to connect the first and last vertices. Defaults to true.
     * @returns
     */
    static chain(vertices, closed = true) {
        const vc = vertices.length;
        return arrayFromFunction(closed ? vc : vc - 1, i => StraightEdge$$1.throughPoints(vertices[i], vertices[(i + 1) % vc]));
    }
    toSource() {
        return callsce('new StraightEdge', this.curve, this.a, this.b, this.aT, this.bT);
    }
    getVerticesNo0() {
        return [this.b];
    }
    pointsCount() {
        return 2;
    }
    points() {
        return [this.a, this.b];
    }
    edgeISTsWithPlane(plane) {
        const edgeT = snap2(this.curve.isTWithPlane(plane), this.aT, this.bT);
        return this.minT <= edgeT && edgeT <= this.maxT ? [edgeT] : [];
    }
    edgeISTsWithSurface(surface) {
        if (surface instanceof PlaneSurface$$1) {
            return this.edgeISTsWithPlane(surface.plane);
        }
        else {
            return surface
                .isTsForLine(this.curve)
                .map(edgeT => snap2(edgeT, this.aT, this.bT))
                .filter(edgeT => this.minT <= edgeT && edgeT <= this.maxT);
        }
    }
    tangentAt() {
        return this.tangent;
    }
    flipped() {
        return (this.flippedOf ||
            (this.flippedOf = new StraightEdge$$1(this.curve, this.b, this.a, this.bT, this.aT, this, this.name)));
    }
    transform(m4, desc) {
        const lineDir1TransLength = m4.transformVector(this.curve.dir1).length();
        return new StraightEdge$$1(this.curve.transform(m4), m4.transformPoint(this.a), m4.transformPoint(this.b), this.aT * lineDir1TransLength, this.bT * lineDir1TransLength, undefined, '' + this.name + desc);
    }
    isCoEdge(edge) {
        return (this === edge ||
            this === edge.flippedOf ||
            (edge.constructor === StraightEdge$$1 &&
                ((this.a.like(edge.a) && this.b.like(edge.b)) || (this.a.like(edge.b) && this.b.like(edge.a)))));
    }
    getEdgeT(p) {
        assertVectors(p);
        let edgeT = p.minus(this.curve.anchor).dot(this.curve.dir1);
        if (!eq0(this.curve.at(edgeT).distanceTo(p))) {
            return;
        }
        edgeT = snap2(edgeT, this.aT, this.bT);
        return this.minT <= edgeT && edgeT <= this.maxT ? edgeT : undefined;
    }
}

/**
 * Created by aval on 19.04.2017.
 */
class FaceInfoFactory {
    static makeStatic(staticInfo) {
        return new class extends FaceInfoFactory {
            constructor() {
                super();
            }
            info(surface, contour, holes) {
                return staticInfo;
            }
        }();
    }
    info(surface, contour, holes) {
        throw new Error('no default implementation');
    }
    extrudeBottom(surface, contour, holes = []) {
        return this.info(surface, contour, holes);
    }
    extrudeTop(surface, contour, holes = []) {
        return this.info(surface, contour, holes);
    }
    extrudeWall(index, surface, contour, holes = []) {
        return this.info(surface, contour, holes);
    }
    rotationWall(index, surface, contour, holes = []) {
        return this.info(surface, contour, holes);
    }
    rotationStart(surface, contour, holes = []) {
        return this.info(surface, contour, holes);
    }
    rotationEnd(surface, contour, holes = []) {
        return this.info(surface, contour, holes);
    }
    newSubFace(original, surface, contour, holes = []) {
        return original.info;
    }
    transform(original, m4, desc, surface, contour, holes = []) {
        return original.info;
    }
}

class Face$$1 extends Transformable {
    constructor(surface, contour, holes = [], name, info) {
        super();
        this.surface = surface;
        this.contour = contour;
        this.holes = holes;
        this.name = name;
        this.info = info;
        this.aabb = undefined;
        //assert(name)
        Edge$$1.assertLoop(contour);
        assert(contour.every(f => f instanceof Edge$$1), () => 'contour.every(f => f instanceof Edge)' + contour);
        // contour.forEach(e => !surface.containsCurve(e.curve) &&
        // console.log('FAIL:'+surface.distanceToPoint(e.curve.anchor)))
        //contour.forEach(e => {
        //	assert(surface.containsCurve(e.curve), 'edge not in surface ' + e + surface)
        //})
        assert(surface.edgeLoopCCW(contour), surface.toString() + contour.join('\n'));
        holes && holes.forEach(hole => Edge$$1.assertLoop(hole));
        holes && holes.forEach(hole => assert(!surface.edgeLoopCCW(hole)));
        assert(!holes || holes.constructor == Array, holes && holes.toString());
        this.allEdges = Array.prototype.concat.apply(this.contour, this.holes);
    }
    static assembleFacesFromLoops(loops, surface, faceConstructor) {
        function placeRecursively(newLoopInfo, loopInfos) {
            if (loopInfos.length == 0) {
                loopInfos.push(newLoopInfo);
            }
            else {
                const subLoopInfo = loopInfos.find(loopInfo => BRep$$1.loop1ContainsLoop2(loopInfo.loop, loopInfo.ccw, newLoopInfo.loop, newLoopInfo.ccw, surface));
                if (subLoopInfo) {
                    placeRecursively(newLoopInfo, subLoopInfo.subloops);
                }
                else {
                    // newLoopInfo isnt contained by any other subLoopInfo
                    for (let i = loopInfos.length; --i >= 0;) {
                        const subLoopInfo = loopInfos[i];
                        //console.log('cheving subLoopInfo', surface.loopContainsPoint(newLoopInfo.edges,
                        // subLoopInfo.edges[0].a))
                        if (BRep$$1.loop1ContainsLoop2(newLoopInfo.loop, newLoopInfo.ccw, subLoopInfo.loop, subLoopInfo.ccw, surface)) {
                            newLoopInfo.subloops.push(subLoopInfo);
                            loopInfos.splice(i, 1); // remove it
                        }
                    }
                    loopInfos.push(newLoopInfo);
                }
            }
        }
        function newFacesRecursive(loopInfo) {
            newFaces.push(new faceConstructor(surface, loopInfo.ccw ? loopInfo.loop : Edge$$1.reversePath(loopInfo.loop), loopInfo.subloops.map(sl => (sl.ccw ? Edge$$1.reversePath(sl.loop) : sl.loop))));
            loopInfo.subloops.forEach(sl => sl.subloops.forEach(sl2 => newFacesRecursive(sl2)));
        }
        const newFaces = [];
        const topLevelLoops = [];
        loops.forEach(loop => placeRecursively({
            loop: loop,
            ccw: surface.edgeLoopCCW(loop),
            subloops: [],
        }, topLevelLoops));
        topLevelLoops.forEach(tll => newFacesRecursive(tll));
        return newFaces;
    }
    //fromLoops(loops: Edge[][], surface: Surface) {
    //	type LoopInfo = {loop: Edge[], ccw: boolean, subloops: LoopInfo[]}
    //	function placeRecursively(newLoopInfo: LoopInfo, loopInfos: LoopInfo[]) {
    //		if (loopInfos.length == 0) {
    //			loopInfos.push(newLoopInfo)
    //		} else {
    //			const subLoopInfo = loopInfos.find(loopInfo => BRep.loop1ContainsLoop2(loopInfo.loop, loopInfo.ccw,
    // newLoopInfo.loop, newLoopInfo.ccw, surface)) if (subLoopInfo) { placeRecursively(newLoopInfo,
    // subLoopInfo.subloops) } else { // newLoopInfo isnt contained by any other subLoopInfo for (let i =
    // loopInfos.length; --i >= 0;) { const subLoopInfo = loopInfos[i] //console.log('cheving subLoopInfo',
    // surface.loopContainsPoint(newLoopInfo.edges, subLoopInfo.edges[0].a)) if
    // (BRep.loop1ContainsLoop2(newLoopInfo.loop, subLoopInfo.loop, surface)) { newLoopInfo.subloops.push(subLoopInfo)
    // loopInfos.splice(i, 1) // remove it } } loopInfos.push(newLoopInfo) } } }  function newFacesRecursive(loopInfo:
    // LoopInfo): void { // CW loops can be top level, if they are holes in the original face not contained in the new
    // face if (loopInfo.ccw) { if (loopInfo.subloops.every(sl => !sl.ccw)) { const newFace = new
    // faceConstructor(surface, loopInfo.loop, loopInfo.subloops.map(sl => sl.loop)) newFaces.push(newFace)
    // loopInfo.subloops.forEach(sl => sl.subloops.forEach(slsl => slsl.ccw && newFacesRecursive(slsl))) } else {
    // loopInfo.subloops.forEach(sl => sl.ccw && newFacesRecursive(sl)) } } }  const newFaces: Face[] = [] const
    // topLevelLoops:LoopInfo[] = [] loops.forEach(loop => placeRecursively({loop: loop, ccw:
    // surface.edgeLoopCCW(loop), subloops: []}, topLevelLoops)) topLevelLoops.forEach(tll => newFacesRecursive(tll))
    // return newFaces }
    static create(surface, faceEdges, holes, faceName, info) {
        return surface instanceof PlaneSurface$$1
            ? new PlaneFace$$1(surface, faceEdges, holes, faceName, info)
            : new RotationFace$$1(surface, faceEdges, holes, faceName, info);
    }
    intersectFace(face2, thisBrep, face2Brep, faceMap, thisEdgePoints, otherEdgePoints, checkedPairs) {
        //thisEdgePoints = {
        //   get(key) {
        //       return _thisEdgePoints.get(key)
        //    },
        //    set(key, value) {
        //       assert(thisBrep.edgeFaces.get(key))
        //        _thisEdgePoints.set(key, value)
        //    }
        //}
        function hasPair(a, b) {
            return checkedPairs.has(new Pair(a, b));
        }
        function addPair(a, b) {
            return checkedPairs.add(new Pair(a, b));
        }
        /**
         * @param newEdge generated segment
         * @param col1 if newEdge is colinear to an edge of this, the edge in question
         * @param col2 same for face2
         * @return whether new edge was added.
         */
        function handleNewEdge(newEdge, col1, col2) {
            if (!col1 && !col2) {
                let correctDir = face.surface.normalP(newEdge.a).cross(face2.surface.normalP(newEdge.a));
                if (correctDir.likeO()) {
                    const t = lerp(newEdge.aT, newEdge.bT, 1 / GOLDEN_RATIO), p = newEdge.curve.at(t);
                    correctDir = face.surface.normalP(p).cross(face2.surface.normalP(p));
                }
                if (!correctDir.likeO()) {
                    if (correctDir.dot(newEdge.aDir) < 0) {
                        newEdge = newEdge.flipped();
                    }
                    mapPush(faceMap, face, newEdge);
                    mapPush(faceMap, face2, newEdge.flipped());
                }
                else {
                    const p = newEdge.a;
                    const plane = P3$$1.normalOnAnchor(newEdge.aDir, p);
                    const up = face.surface.normalP(p);
                    const sameDir = up.dot(face2.surface.normalP(p)) > 0;
                    const canonDir = plane.normal1.cross(up);
                    const curve = face.surface.isCurvesWithPlane(plane)[0], curveT = curve.pointT(p), curveDir = sign$1(canonDir.dot(curve.tangentAt(curveT)));
                    const curve2 = face2.surface.isCurvesWithPlane(plane)[0], curve2T = curve2.pointT(p), curve2Dir = sign$1(canonDir.dot(curve.tangentAt(curve2T)));
                    const foo = curve.diff(curveT, EPS$$1 * curveDir).dot(up);
                    const foo2 = curve2.diff(curve2T, EPS$$1 * curve2Dir).dot(up);
                    if (foo2 < foo) {
                        mapPush(faceMap, face2, sameDir ? newEdge.flipped() : newEdge);
                    }
                    if (up.dot(face2.surface.normalP(p)) < 0 == foo2 < foo) {
                        mapPush(faceMap, face, newEdge.flipped());
                    }
                    const bar = curve.diff(curveT, EPS$$1 * curveDir).dot(up);
                    const bar2 = curve2.diff(curve2T, EPS$$1 * curve2Dir).dot(up);
                    if (bar2 < bar) {
                        mapPush(faceMap, face2, sameDir ? newEdge : newEdge.flipped());
                    }
                    if (sameDir != bar2 < bar) {
                        mapPush(faceMap, face, newEdge);
                    }
                }
                return true;
            }
            function handleEdgeInFace(col1, col2, face, face2, thisBrep, face2Brep, coplanarSameIsInside, has, add) {
                if (col1 && !col2) {
                    if (hasPair(col1.getCanon(), face2))
                        return false;
                    //add(col1.getCanon(), face2)
                    const surface2 = face2.surface;
                    // NB: a new edge is inserted even though it may be the same as an old one
                    // however it indicates that it intersects the other volume here, i.e. the old edge cannot
                    // be counted as 'inside' for purposes of reconstitution
                    thisBrep.edgeFaces.get(col1.getCanon()).forEach(faceInfo => {
                        //const dot = snap0(surface2.normal1.dot(faceInfo.inside))
                        //if (dot == 0 ? !coplanarSameIsInside : dot < 0) {
                        const pointsInsideFace = fff$$1(faceInfo, face2.surface);
                        const edgeInside = pointsInsideFace == INSIDE$$1 || (!coplanarSameIsInside && pointsInsideFace == COPLANAR_SAME$$1);
                        const pushEdge = faceInfo.edge
                            .tangentAt(faceInfo.edge.curve.pointT(newEdge.a))
                            .like(newEdge.aDir)
                            ? newEdge
                            : newEdge.flipped();
                        console.log(newEdge.sce);
                        assert(faceInfo.edge.tangentAt(faceInfo.edge.curve.pointT(pushEdge.a)).like(pushEdge.aDir));
                        edgeInside && mapPush(faceMap, faceInfo.face, pushEdge);
                    });
                    const surface2NormalAtNewEdgeA = surface2.normalP(newEdge.a);
                    const newEdgeInside = surface2NormalAtNewEdgeA.cross(newEdge.aDir);
                    const sVEF1 = splitsVolumeEnclosingFacesP$$1(thisBrep, col1.getCanon(), newEdge.a, newEdgeInside, surface2NormalAtNewEdgeA);
                    let addNewEdge, addNewEdgeFlipped;
                    if ((addNewEdge = sVEF1 == INSIDE$$1 || (coplanarSameIsInside && sVEF1 == COPLANAR_SAME$$1))) {
                        mapPush(faceMap, face2, newEdge);
                    }
                    const sVEF2 = splitsVolumeEnclosingFacesP$$1(thisBrep, col1.getCanon(), newEdge.a, newEdgeInside.negated(), surface2NormalAtNewEdgeA);
                    if ((addNewEdgeFlipped = sVEF2 == INSIDE$$1 || (coplanarSameIsInside && sVEF2 == COPLANAR_SAME$$1))) {
                        mapPush(faceMap, face2, newEdge.flipped());
                    }
                    if (addNewEdge ||
                        addNewEdgeFlipped ||
                        (sVEF1 == COPLANAR_SAME$$1 && sVEF2 == INSIDE$$1) ||
                        (sVEF2 == COPLANAR_SAME$$1 && sVEF1 == INSIDE$$1)) {
                        return true;
                    }
                }
                return false;
            }
            const c1 = handleEdgeInFace(col1, col2, face, face2, thisBrep, face2Brep, false, hasPair, addPair);
            const c2 = handleEdgeInFace(col2, col1, face2, face, face2Brep, thisBrep, true, (a, b) => hasPair(b, a), (a, b) => addPair(b, a));
            if (c1 || c2)
                return true;
            if (col1 && col2) {
                if (hasPair(col1.getCanon(), col2.getCanon()))
                    return false;
                addPair(col1.getCanon(), col2.getCanon());
                function handleColinearEdgeFaces(col1, col2, thisBrep, face2Brep, coplanarSameIsInside, thisEdgePoints, has, add) {
                    // not entirely sure for what i had the dirInsides in?
                    //const aDirNegatedInside = (newEdge.a.like(col2.a) || newEdge.a.like(col2.b)) &&
                    // splitsVolumeEnclosingCone(face2Brep, newEdge.a, newEdge.aDir.negated()) == INSIDE const
                    // bDirInside = (newEdge.b.like(col2.a) || newEdge.b.like(col2.b)) &&
                    // splitsVolumeEnclosingCone(face2Brep, newEdge.b, newEdge.bDir) == INSIDE
                    for (const faceInfo of thisBrep.edgeFaces.get(col1.getCanon())) {
                        const sVEF = splitsVolumeEnclosingFaces$$1(face2Brep, col2.getCanon(), faceInfo.inside, faceInfo.normalAtCanonA);
                        const edgeInside = sVEF == INSIDE$$1 || (coplanarSameIsInside && sVEF == COPLANAR_SAME$$1);
                        const pushEdge = faceInfo.edge.aDir.like(newEdge.aDir) ? newEdge : newEdge.flipped();
                        if (edgeInside) {
                            mapPush(faceMap, faceInfo.face, pushEdge);
                            const aT = col1.getCanon().curve.pointT(newEdge.a);
                            if (!eq(aT, col1.aT) && !eq(aT, col1.bT)) {
                                // newEdge.a is in center of col1
                                if (splitsVolumeEnclosingCone2$$1(face2Brep, newEdge.a, newEdge.curve, newEdge.aT, -Math.sign(newEdge.deltaT())) == INSIDE$$1) {
                                    mapPush(thisEdgePoints, col1.getCanon(), {
                                        p: newEdge.a,
                                        edgeT: aT,
                                    });
                                }
                            }
                            const bT = col1.getCanon().curve.pointT(newEdge.b);
                            if (!eq(bT, col1.aT) && !eq(bT, col1.bT)) {
                                if (splitsVolumeEnclosingCone2$$1(face2Brep, newEdge.b, newEdge.curve, newEdge.bT, Math.sign(newEdge.deltaT())) == INSIDE$$1) {
                                    mapPush(thisEdgePoints, col1.getCanon(), {
                                        p: newEdge.b,
                                        edgeT: bT,
                                    });
                                }
                            }
                        }
                    }
                }
                handleColinearEdgeFaces(col1, col2, thisBrep, face2Brep, true, thisEdgePoints, hasPair, addPair);
                handleColinearEdgeFaces(col2, col1, face2Brep, thisBrep, false, otherEdgePoints, (a, b) => hasPair(b, a), (a, b) => addPair(b, a));
                return false;
            }
            return false;
        }
        // what needs to be generated: new edges on face
        // points on edges where they are cut by faces so that sub edges will be generated for loops
        // points on ends of edges where the edge will be an edge in the new volume where it goes from A to B
        //         you don't want those to be marked as 'inside', otherwise invalid faces will be added
        // if a face cuts a corner, nothing needs to be done, as that alone does not limit what adjacent faces will be
        function handleEndPoint(a, b, newEdge) {
            // ends in the middle of b's face
            if (a && !b) {
                if (!a.colinear && a.edgeT != a.edge.aT && a.edgeT != a.edge.bT) {
                    mapPush(thisEdgePoints, a.edge.getCanon(), a);
                    assert(a.edge.isValidT(a.edgeT));
                }
                // else colinear segment ends in middle of other face, do nothing
            }
            // ends in the middle of a's face
            if (b && !a) {
                if (!b.colinear && b.edgeT != b.edge.aT && b.edgeT != b.edge.bT) {
                    mapPush(otherEdgePoints, b.edge.getCanon(), b);
                    assert(b.edge.isValidT(b.edgeT));
                }
                // else colinear segment ends in middle of other face, do nothing
            }
            if (a && b) {
                assert(a.colinear || b.colinear || eq(a.t, b.t));
                // if a or b is colinear the correct points will already have been added to the edge by handleNewEdge
                // segment starts/ends on edge/edge intersection
                function handleAB(a, b, face, face2, thisPlane, face2Plane, thisBrep, face2Brep, first, thisEdgePoints) {
                    if (!a.colinear && a.edgeT != a.edge.aT && a.edgeT != a.edge.bT) {
                        //if (!hasPair(a.edge.getCanon(), b.edge.getCanon())) {
                        addPair(a.edge.getCanon(), b.edge.getCanon());
                        // ends on a, on colinear segment b bT != a.edge.bT &&
                        // b can be colinear, so edgeT == aT is possible
                        if (a.p.like(b.edge.a) || a.p.like(b.edge.b)) {
                            const corner = a.p.like(b.edge.a) ? b.edge.a : b.edge.b;
                            // face2brep corner on edge
                            const sVEC1 = splitsVolumeEnclosingCone2$$1(face2Brep, corner, a.edge.curve, a.edgeT, 1);
                            const sVEC2 = splitsVolumeEnclosingCone2$$1(face2Brep, corner, a.edge.curve, a.edgeT, -1);
                            // if either of these return ALONG_EDGE_OR_PLANE, then the breps share a colinear edge
                            if (INSIDE$$1 == sVEC1 || INSIDE$$1 == sVEC2) {
                                mapPush(thisEdgePoints, a.edge.getCanon(), a);
                                assert(a.edge.isValidT(a.edgeT));
                            }
                        }
                        else {
                            // edge / edge center intersection
                            // todo: is this even necessary considering we add edges anyway? i think so...
                            // const testVector =
                            // a.edge.tangentAt(a.edgeT).rejectedFrom(b.edge.tangentAt(b.edge.curve.pointT(a.p)))
                            // assert(!testVector.likeO())
                            const sVEF1 = splitsVolumeEnclosingFacesP2$$1(face2Brep, b.edge.getCanon(), a.p, a.edge.curve, a.edgeT, 1, thisPlane.normalP(a.p));
                            const sVEF2 = splitsVolumeEnclosingFacesP2$$1(face2Brep, b.edge.getCanon(), a.p, a.edge.curve, a.edgeT, -1, thisPlane.normalP(a.p));
                            if (INSIDE$$1 == sVEF1 ||
                                (first && COPLANAR_SAME$$1 == sVEF1) ||
                                INSIDE$$1 == sVEF2 ||
                                (first && COPLANAR_SAME$$1 == sVEF2)) {
                                mapPush(thisEdgePoints, a.edge.getCanon(), a);
                                assert(a.edge.isValidT(a.edgeT));
                            }
                        }
                        //}
                    }
                }
                handleAB(a, b, face, face2, surface, surface2, thisBrep, face2Brep, true, thisEdgePoints);
                handleAB(b, a, face2, face, surface2, surface, face2Brep, thisBrep, false, otherEdgePoints);
            }
        }
        assertInst(Face$$1, face2);
        const face = this;
        const surface = face.surface, surface2 = face2.surface;
        if (!this.getAABB().fuzzyTouchesAABB(face2.getAABB())) {
            return;
        }
        if (surface.isCoplanarTo(surface2)) {
            return;
        }
        const isCurves = surface.isCurvesWithSurface(surface2);
        if (0 == isCurves.length) {
            return;
        }
        for (const isCurve of isCurves) {
            assert(surface.containsCurve(isCurve));
            assert(surface2.containsCurve(isCurve));
        }
        for (let isCurveIndex = 0; isCurveIndex < isCurves.length; isCurveIndex++) {
            // get intersections of newCurve with other edges of face and face2
            const isCurve = isCurves[isCurveIndex];
            const ps1 = face.edgeISPsWithSurface(isCurve, face2.surface);
            const ps2 = face2.edgeISPsWithSurface(isCurve, face.surface);
            // for non-endless curves, e.g. ellipses, the intersections of the faces can be non-zero, even if one of
            // the faces doesn't register any points on the curve. For example, if a cylinder is cut entirely by a
            // plane face (all its edges around the cylinder), then the face will contain the entire curve and
            // 'ps' for the plane face will be empty
            // TODO: behavior when curves touch face?
            // !! start in does depend on insideDir... TODO
            assertf(() => 0 == ps1.length || !eq0(ps1[0].insideDir.dot(isCurve.tangentAt(ps1[0].t))), () => ps1[0].insideDir.dot(isCurve.tangentAt(ps1[0].t)));
            assertf(() => 0 == ps2.length || !eq0(ps2[0].insideDir.dot(isCurve.tangentAt(ps2[0].t))), () => ps2[0].insideDir.dot(isCurve.tangentAt(ps2[0].t)));
            function startsInside(ps, face) {
                if (0 == ps.length) {
                    return isFinite(isCurve.tMin) && face.containsPoint2(isCurve.at(isCurve.tMin)) == PointVsFace$$1.INSIDE;
                }
                else {
                    return ps[0].insideDir.dot(isCurve.tangentAt(ps[0].t)) < 0;
                }
            }
            // they can't both be empty currently
            // they can't both start 'inside'
            let in1 = startsInside(ps1, face);
            let in2 = startsInside(ps2, face2);
            if ((0 == ps1.length && !in1) || (0 == ps2.length && !in2)) {
                continue;
            }
            //assert(!in1 || !in2)
            let col1, col2;
            let i = 0, j = 0, last;
            let startP = in1 && in2 ? isCurve.at(isCurve.tMin) : undefined, startDir, startT = isCurve.tMin, startA, startB;
            while (i < ps1.length || j < ps2.length) {
                assert(i <= ps1.length);
                assert(j <= ps2.length);
                const a = ps1[i], b = ps2[j];
                assert(a || b);
                if (j == ps2.length || (i < ps1.length && lt(a.t, b.t))) {
                    last = a;
                    in1 = !in1;
                    a.used = true;
                    col1 = a.colinear ? a : undefined;
                    i++;
                }
                else if (i == ps1.length || gt(a.t, b.t)) {
                    last = b;
                    b.used = true;
                    in2 = !in2;
                    col2 = b.colinear ? b : undefined;
                    j++;
                }
                else {
                    last = a;
                    a.used = true;
                    b.used = true;
                    in1 = !in1;
                    in2 = !in2;
                    //if (in1 == in2) {
                    col1 = a.colinear ? a : undefined;
                    col2 = b.colinear ? b : undefined;
                    //}
                    i++;
                    j++;
                }
                if (startP && !(in1 && in2)) {
                    // segment end
                    startDir = isCurve.tangentAt(startT);
                    if (eq(startT, last.t)) {
                        startP = undefined;
                        continue;
                    }
                    assert(lt(startT, last.t));
                    startT > last.t && (startDir = startDir.negated());
                    let endDir = isCurve.tangentAt(last.t);
                    startT > last.t && (endDir = endDir.negated());
                    const newEdge = Edge$$1.create(isCurve, startP, last.p, startT, last.t, undefined, startDir, endDir, 'genseg' + getGlobalId$$1());
                    startP = undefined;
                    if (handleNewEdge(newEdge, col1 && col1.edge, col2 && col2.edge)) {
                        handleEndPoint(startA || col1, startB || col2, newEdge);
                        handleEndPoint((a && a.used && a) || col1, (b && b.used && b) || col2, newEdge);
                    }
                }
                else if (in1 && in2) {
                    // new segment just started
                    startP = last.p;
                    startDir = last.insideDir;
                    startT = last.t;
                    startA = a && a.used ? a : undefined;
                    startB = b && b.used ? b : undefined;
                }
            }
            if (in1 && in2 && startT !== isCurve.tMax) {
                const endT = isCurve.tMax;
                startDir = isCurve.tangentAt(startT);
                startT > endT && (startDir = startDir.negated());
                let endDir = isCurve.tangentAt(endT);
                startT > endT && (endDir = endDir.negated());
                const newEdge = Edge$$1.create(isCurve, startP, isCurve.at(endT), startT, endT, undefined, startDir, endDir, 'genseg' + getGlobalId$$1());
                if (handleNewEdge(newEdge, col1 && col1.edge, col2 && col2.edge)) {
                    handleEndPoint(startA || col1, startB || col2, newEdge);
                }
            }
        }
        face.getAllEdges().forEach(edge => {
            checkedPairs.add(new Pair(edge.getCanon(), face2));
        });
        face2.getAllEdges().forEach(edge => {
            checkedPairs.add(new Pair(edge.getCanon(), face));
        });
    }
    edgeISPsWithSurface(isCurve, surface2) {
        const face = this;
        const surface = face.surface;
        const loops = face.holes.concat([face.contour]);
        const ps = [];
        for (const loop of loops) {
            const colinearEdges = loop.map(edge => edge.curve.isColinearTo(isCurve));
            //const colinearSides = loop.map((edge, edgeIndex) => -1 != colinearEdges[edgeIndex]
            //            && -sign(isCurves[colinearEdges[edgeIndex]].tangentAt(edge.aT).dot(edge.aDir)))
            for (let edgeIndex = 0; edgeIndex < loop.length; edgeIndex++) {
                const edge = loop[edgeIndex];
                const nextEdgeIndex = (edgeIndex + 1) % loop.length, nextEdge = loop[nextEdgeIndex];
                //console.log(edge.toSource()) {p:V3(2, -2.102, 0),
                if (colinearEdges[edgeIndex]) {
                    if (isCurve.containsPoint(edge.a)) {
                        const prevEdgeIndex = (edgeIndex - 1 + loop.length) % loop.length, prevEdge = loop[prevEdgeIndex];
                        const curveAT = isCurve.pointT(edge.a);
                        const colinearOutA = edge.aDir.cross(surface.normalP(edge.a));
                        if (!colinearEdges[prevEdgeIndex] &&
                            dotCurve2$$1(prevEdge.curve, prevEdge.bT, colinearOutA, -sign$1(prevEdge.deltaT())) > 0) {
                            ps.push({
                                p: prevEdge.b,
                                insideDir: edge.aDir.negated(),
                                t: curveAT,
                                edge: prevEdge,
                                edgeT: prevEdge.bT,
                                colinear: false,
                            });
                        }
                        ps.push({
                            p: edge.a,
                            insideDir: edge.aDir,
                            t: curveAT,
                            edge: edge,
                            edgeT: edge.aT,
                            colinear: true,
                        });
                    }
                    if (isCurve.containsPoint(edge.b)) {
                        const curveBT = isCurve.pointT(edge.b);
                        const colinearOutB = edge.bDir.cross(surface.normalP(edge.b));
                        if (!colinearEdges[nextEdgeIndex] &&
                            dotCurve2$$1(nextEdge.curve, nextEdge.aT, colinearOutB, sign$1(nextEdge.deltaT())) > 0) {
                            ps.push({
                                p: edge.b,
                                insideDir: edge.bDir,
                                t: curveBT,
                                edge: nextEdge,
                                edgeT: nextEdge.aT,
                                colinear: false,
                            });
                        }
                        ps.push({
                            p: edge.b,
                            insideDir: edge.bDir.negated(),
                            t: curveBT,
                            edge: edge,
                            edgeT: edge.bT,
                            colinear: true,
                        });
                    }
                }
                else {
                    const edgeTs = edge.edgeISTsWithSurface(surface2);
                    for (const edgeT of edgeTs) {
                        const p = edge.curve.at(edgeT);
                        if (!isCurve.containsPoint(p))
                            continue;
                        const curveT = isCurve.pointT(p);
                        assert(!isNaN(curveT));
                        const insideDir = edge
                            .tangentAt(edgeT)
                            .cross(surface.normalP(p))
                            .negated();
                        const isTangent = isCurve.tangentAt(curveT);
                        //if(!eq0(insideDir.dot(isTangent))) {
                        // Edge.edgeISTsWithSurface returns snapped values, so comparison with == is ok:
                        if (edgeT == edge.bT) {
                            // endpoint lies on intersection line
                            if (!colinearEdges[nextEdgeIndex]) {
                                if (!eq(curveT, isCurve.tMax)) {
                                    const pointsToInside = this.pointsToInside3(edge.b, isCurve, curveT, 1);
                                    assert(pointsToInside != PointVsFace$$1.ON_EDGE);
                                    if (PointVsFace$$1.INSIDE == pointsToInside) {
                                        ps.push({
                                            p: edge.b,
                                            insideDir: isTangent,
                                            t: curveT,
                                            edge: edge,
                                            edgeT: edge.bT,
                                            colinear: false,
                                        });
                                    }
                                }
                                if (!eq(curveT, isCurve.tMin)) {
                                    const pointsToInside = this.pointsToInside3(edge.b, isCurve, curveT, -1);
                                    assert(pointsToInside != PointVsFace$$1.ON_EDGE);
                                    if (PointVsFace$$1.INSIDE == pointsToInside) {
                                        ps.push({
                                            p: edge.b,
                                            insideDir: isTangent.negated(),
                                            t: curveT,
                                            edge: edge,
                                            edgeT: edge.bT,
                                            colinear: false,
                                        });
                                    }
                                }
                                //let thisSide = -normVector.dot(edge.bDir)
                                //if (eq0(thisSide)) {
                                //    // advanced test
                                //    const dir = -sign(edge.deltaT())
                                //    const iscd = isCurve.at(curveT).to(isCurve.at(curveT + dir * dirFactor *
                                // eps)).dot(normVector) const ecd = edge.curve.at(edgeT).to(edge.curve.at(edgeT + dir
                                // * eps)).dot(normVector) thisSide = sign(ecd - iscd) } let nextSide =
                                // normVector.dot(nextEdge.aDir) if (eq0(nextSide)) { // advanced test const dirFactor
                                // = sign(snap0(isTangent.dot(nextEdge.curve.tangentAt(nextEdge.aT)))) assert(dirFactor
                                // !== 0) const dir = sign(nextEdge.deltaT()) const iscd =
                                // isCurve.at(curveT).to(isCurve.at(curveT + dir * dirFactor * eps)).dot(normVector)
                                // const ecd = nextEdge.curve.at(nextEdge.aT).to(nextEdge.curve.at(nextEdge.aT + dir *
                                // eps)).dot(normVector) nextSide = sign(ecd - iscd) } if (nextSide < 0 || thisSide <
                                // 0) { assert(!eq0(insideDir.dot(isTangent))) // next segment is not colinear and ends
                                // on different side ps.push({ p: edge.b, insideDir: insideDir, t: curveT, edge: edge,
                                // edgeT: edge.bT, colinear: false}) }
                            }
                        }
                        else if (edgeT != edge.aT) {
                            // edge crosses/touches an intersection curve, neither starts nor ends on it
                            if (eq0(insideDir.dot(isTangent))) {
                                const dirFactor = sign$1(isTangent.dot(edge.curve.tangentAt(edgeT)));
                                const eps = 1e-4;
                                for (const dir of [-1, 1]) {
                                    if ((-1 == dir * dirFactor && edgeT == edge.minT) ||
                                        (1 == dir * dirFactor && edgeT == edge.maxT) ||
                                        (-1 == dir && curveT == isCurve.tMin) ||
                                        (1 == dir && curveT == isCurve.tMax))
                                        continue;
                                    const iscd = isCurve
                                        .at(curveT)
                                        .to(isCurve.at(curveT + dir * eps))
                                        .dot(insideDir);
                                    const ecd = edge.curve
                                        .at(edgeT)
                                        .to(edge.curve.at(edgeT + dir * dirFactor * eps))
                                        .dot(insideDir);
                                    if (iscd - ecd > 0) {
                                        ps.push({
                                            p,
                                            insideDir: isTangent.times(dir),
                                            t: curveT,
                                            edge: edge,
                                            edgeT: edgeT,
                                            colinear: false,
                                        });
                                    }
                                }
                            }
                            else {
                                ps.push({
                                    p: p,
                                    insideDir: insideDir,
                                    t: curveT,
                                    edge: edge,
                                    edgeT: edgeT,
                                    colinear: false,
                                });
                            }
                        }
                        //} else {
                        //
                        //	const dirFactor = sign(isTangent.dot(edge.curve.tangentAt(edgeT)))
                        //	const eps = 1e-4
                        //	const normVector = surface2.normalP(p)
                        //	for (const dir of [-1, 1]) {
                        //		if (-1 == dir * dirFactor && edgeT == edge.minT ||
                        //			1 == dir * dirFactor && edgeT == edge.maxT ||
                        //			-1 == dir && curveT == isCurve.tMin ||
                        //			1 == dir && curveT == isCurve.tMax) continue
                        //		const iscd = isCurve.at(curveT).to(isCurve.at(curveT + dir * eps)).dot(normVector)
                        //		const ecd = edge.curve.at(edgeT).to(edge.curve.at(edgeT + dir * dirFactor *
                        // eps)).dot(normVector) if (iscd > ecd) { ps.push({p, insideDir: isTangent.times(dir *
                        // dirFactor), t: curveT, edge: edge, edgeT: edgeT, colinear: false}) } }
                        // curveVsSurface(isCurve, curveT, p, surface2) }
                    }
                }
            }
        }
        // duplicate 't's are ok, as sometimes a segment needs to stop and start again
        // should be sorted so that back facing ones are first
        ps.sort((a, b) => a.t - b.t || a.insideDir.dot(isCurve.tangentAt(a.t)));
        return ps;
    }
    transform(m4) {
        const mirroring = m4.isMirroring();
        const newEdges = Edge$$1.reversePath(this.contour.map(e => e.transform(m4)), mirroring);
        const newHoles = this.holes.map(hole => Edge$$1.reversePath(hole.map(e => e.transform(m4)), mirroring));
        return new this.constructor(this.surface.transform(m4), newEdges, newHoles, this.name, this.info);
    }
    flipped() {
        const newEdges = this.contour.map(e => e.flipped()).reverse();
        const newHoles = this.holes.map(hole => hole.map(e => e.flipped()).reverse());
        return new this.constructor(this.surface.flipped(), newEdges, newHoles, this.name, this.info);
    }
    toString() {
        return ('new ' +
            this.constructor.name +
            '(' +
            this.surface +
            ', [' +
            this.contour.map(e => '\n\t' + e).join() +
            ']' +
            this.holes.map(hole => '\n\t\thole: ' + hole.join()) +
            ')');
    }
    toSource() {
        return ('new ' +
            this.constructor.name +
            '(' +
            this.surface.toSource() +
            ', [' +
            this.contour.map(e => '\n\t' + e.toSource() + ',').join('') +
            '], [' +
            this.holes.map(hole => '[' + hole.map(e => '\n\t' + e.toSource() + ',').join('') + ']').join(',') +
            '])');
    }
    equals(obj) {
        return (this == obj ||
            (Object.getPrototypeOf(this) == Object.getPrototypeOf(obj) &&
                this.holes.length == obj.holes.length &&
                Edge$$1.loopsEqual(this.contour, obj.contour) &&
                this.holes.every(hole => obj.holes.some(hole2 => Edge$$1.loopsEqual(hole, hole2)))));
    }
    hashCode() {
        function arrayHashCode(array) {
            let hashCode$$1 = 0;
            for (const val of array) {
                hashCode$$1 = (hashCode$$1 * 31 + val) | 0;
            }
            return hashCode$$1;
        }
        function loopHashCode(loop) {
            return arrayHashCode(loop.map(edge => edge.hashCode()).sort(MINUS));
        }
        let hashCode$$1 = 0;
        hashCode$$1 = (hashCode$$1 * 31 + arrayHashCode(this.holes.map(loop => loopHashCode(loop)).sort(MINUS))) | 0;
        hashCode$$1 = (hashCode$$1 * 31 + loopHashCode(this.contour)) | 0;
        hashCode$$1 = (hashCode$$1 * 31 + this.surface.hashCode()) | 0;
        return hashCode$$1;
    }
    likeFace(face2) {
        function loopsLike(a, b) {
            return (a.length == b.length &&
                arrayRange(0, a.length, 1).some(offset => a.every((edge, i) => edge.like(b[(offset + i) % a.length]))));
        }
        assertInst(Face$$1, face2);
        return (this.surface.like(face2.surface) &&
            this.holes.length == face2.holes.length &&
            loopsLike(this.contour, face2.contour) &&
            this.holes.every(hole => face2.holes.some(hole2 => loopsLike(hole, hole2))));
    }
    getAllEdges() {
        return this.allEdges;
    }
    addEdgeLines(mesh) {
        assert(false, 'buggy, fix');
        const vertices = this.contour.flatMap(edge => edge.getVerticesNo0()), mvl = mesh.vertices.length;
        for (let i = 0; i < vertices.length; i++) {
            mesh.vertices.push(vertices[i]);
            mesh.LINES.push(mvl + i, mvl + (i + 1) % vertices.length);
        }
    }
    containsPoint(p) {
        assertVectors(p);
        return (this.surface.loopContainsPoint(this.contour, p) != PointVsFace$$1.OUTSIDE &&
            !this.holes.some(hole => this.surface.loopContainsPoint(hole, p) != PointVsFace$$1.OUTSIDE));
    }
    containsPoint2(p) {
        assertVectors(p);
        const contourContainsPoint = this.surface.loopContainsPoint(this.contour, p);
        if (contourContainsPoint != PointVsFace$$1.INSIDE)
            return contourContainsPoint;
        for (const hole of this.holes) {
            const loopContainsPoint = this.surface.loopContainsPoint(hole, p);
            if (loopContainsPoint != PointVsFace$$1.OUTSIDE) {
                return loopContainsPoint == PointVsFace$$1.ON_EDGE ? PointVsFace$$1.ON_EDGE : PointVsFace$$1.OUTSIDE;
            }
        }
        return PointVsFace$$1.INSIDE;
    }
    /**
     *
     * @param line
     * @returns t param of the line if there is an intersection, NaN otherwise
     */
    intersectsLine(line) {
        assertInst(L3$$1, line);
        if (!this.getAABB().intersectsLine(line))
            return NaN;
        const containedIntersectionsTs = this.surface.isTsForLine(line).filter(t => this.containsPoint(line.at(t)));
        const nearestPointT = containedIntersectionsTs.withMax(t => -t);
        return undefined != nearestPointT ? nearestPointT : NaN;
    }
    toMesh() {
        const mesh = new Mesh()
            .addIndexBuffer('TRIANGLES')
            .addIndexBuffer('LINES')
            .addVertexBuffer('normals', 'ts_Normal');
        this.addToMesh(mesh);
        //mesh.compile()
        return mesh;
    }
    zDirVolume() {
        return this.surface.zDirVolume(this.getAllEdges());
    }
    calcArea() {
        return this.surface.calculateArea(this.getAllEdges());
    }
    getLoops() {
        return this.holes.concat(this.contour);
    }
    getAABB() {
        return this.aabb || (this.aabb = AABB.forAABBs(this.contour.map(e => e.getAABB())));
    }
    pointsToInside3(p, curve, curveT, dir) {
        const eps = 1e-6;
        const normal = this.surface.normalP(p);
        const curveTangent = curve.tangentAt(curveT).times(dir);
        const up = normal.cross(curveTangent);
        const ecd = curve
            .at(curveT)
            .to(curve.at(curveT + dir * eps))
            .dot(up);
        let minValue = Infinity, result, advanced = false;
        for (const edge of this.getAllEdges()) {
            const aEqP = edge.a.like(p), bEqP = edge.b.like(p);
            assert(aEqP == edge.a.like(p));
            assert(bEqP == edge.b.like(p));
            if (!aEqP && !bEqP)
                continue;
            const edgeTangent = aEqP ? edge.aDir : edge.bDir.negated();
            const angle = curveTangent.angleRelativeNormal(edgeTangent, normal);
            if (eq0(angle)) {
                if (curve.isColinearTo(edge.curve)) {
                    return PointVsFace$$1.ON_EDGE;
                }
                const edgeT = aEqP ? edge.aT : edge.bT;
                const edgeDir = (aEqP ? 1 : -1) * sign$1(edge.deltaT());
                const iscd = edge.curve.diff(edgeT, edgeDir * eps).dot(up);
                //const iscd = edge.curve.at(edgeT).to(curve.at(edgeT + edgeDir * eps)).dot(up)
                const diff = iscd - ecd;
                if (diff > 0 && (!advanced || diff < minValue)) {
                    advanced = true;
                    minValue = diff;
                    result = aEqP ? PointVsFace$$1.OUTSIDE : PointVsFace$$1.INSIDE;
                }
            }
            else if (!advanced) {
                const angle2 = (angle + TAU) % TAU;
                if (angle2 < minValue) {
                    minValue = angle2;
                    result = aEqP ? PointVsFace$$1.OUTSIDE : PointVsFace$$1.INSIDE;
                }
            }
        }
        if (result == undefined)
            throw new Error();
        return result;
    }
    pointsToInside2(p, dir) {
        return this.pointsToInside3(p, L3$$1.anchorDirection(p, dir), 0, 1);
        //const normal = this.surface.normalP(p)
        //let minAngle = Infinity, inOut = false
        //function test(v, b) {
        //	const angle = (dir.angleRelativeNormal(v, normal) + TAU + NLA_PRECISION / 2) % TAU
        //	if (angle <= 2 * NLA_PRECISION) {
        //		return true
        //	}
        //	if (angle < minAngle) {
        //		minAngle = angle
        //		inOut = b
        //	}
        //}
        //for (const edge of this.getAllEdges()) {
        //	assert(edge.a.equals(p) || !edge.a.like(p))
        //	assert(edge.b.equals(p) || !edge.b.like(p))
        //	if (edge.a.equals(p) && test(edge.aDir, false)) return PointVsFace.ON_EDGE
        //	if (edge.b.equals(p) && test(edge.bDir.negated(), true)) return PointVsFace.ON_EDGE
        //}
        //return inOut ? PointVsFace.INSIDE : PointVsFace.OUTSIDE
    }
}
class PlaneFace$$1 extends Face$$1 {
    constructor(p, contour, holes, name, info) {
        assert(p instanceof P3$$1 || p instanceof PlaneSurface$$1);
        super(p instanceof P3$$1 ? new PlaneSurface$$1(p) : p, contour, holes, name, info);
    }
    static forVertices(planeSurface, vs, ...holeVss) {
        const _planeSurface = planeSurface instanceof P3$$1 ? new PlaneSurface$$1(planeSurface) : planeSurface;
        assert(isCCW(vs, _planeSurface.plane.normal1), 'isCCW(vs, planeSurface.plane.normal1)');
        const edges = StraightEdge$$1.chain(vs);
        holeVss.forEach(vs => assert(doubleSignedArea(vs, _planeSurface.plane.normal1) >= 0, 'doubleSignedArea(vs, planeSurface.plane.normal1) >= 0'));
        const holes = holeVss.map(hvs => StraightEdge$$1.chain(hvs));
        return new PlaneFace$$1(planeSurface, edges, holes);
    }
    addToMesh(mesh) {
        const mvl = mesh.vertices.length;
        const normal = this.surface.plane.normal1;
        const vertices = this.contour.flatMap(edge => edge.getVerticesNo0());
        for (let i = 0; i < vertices.length; i++) {
            mesh.LINES.push(mvl + i, mvl + (i + 1) % vertices.length);
        }
        const holeStarts = [];
        this.holes.forEach(hole => {
            holeStarts.push(vertices.length);
            vertices.push(...hole.flatMap(edge => edge.getVerticesNo0()));
        });
        const triangles = triangulateVertices$$1(normal, vertices, holeStarts).map(index => index + mvl);
        Array.prototype.push.apply(mesh.vertices, vertices);
        Array.prototype.push.apply(mesh.TRIANGLES, triangles);
        Array.prototype.push.apply(mesh.normals, arrayFromFunction(vertices.length, () => normal));
    }
    intersectsLine(line) {
        assertInst(L3$$1, line);
        const lambda = line.isTWithPlane(this.surface.plane);
        if (!Number.isFinite(lambda)) {
            return NaN;
        }
        const inside = this.containsPoint(line.at(lambda));
        return inside ? lambda : NaN;
    }
    //intersectPlaneFace(face2: PlaneFace,
    //                   thisBrep: BRep,
    //                   face2Brep: BRep,
    //                   faceMap: Map<Face, Edge[]>,
    //                   thisEdgePoints: CustomMap<Edge, { edge: Edge, edgeT: number, p: V3, passEdge?: Edge }[]>,
    //                   otherEdgePoints: CustomMap<Edge, { edge: Edge, edgeT: number, p: V3, passEdge?: Edge }[]>,
    //                   checkedPairs: CustomSet<Pair<Equalable, Equalable>>) {
    //	assertInst(CustomMap, thisEdgePoints, otherEdgePoints)
    //
    //	function hasPair(a: Equalable, b: Equalable) {
    //		return checkedPairs.has(new Pair(a, b))
    //	}
    //	function addPair(a: Equalable, b: Equalable) {
    //		return checkedPairs.add(new Pair(a, b))
    //	}
    //
    //	/**
    //	 * @param newEdge generated segment
    //	 * @param col1 if newEdge is colinear to an edge of this, the edge in question
    //	 * @param col2 same for face2
    //	 */
    //	function handleNewEdge(newEdge: StraightEdge, col1: Edge, col2: Edge) {
    //		if (!col1 && !col2) {
    //			mapPush(faceMap, face, newEdge)
    //			mapPush(faceMap, face2, newEdge.flipped())
    //			return true
    //		}
    //		function handleEdgeInFace(col1, col2, face, face2, thisBrep, face2Brep, coplanarSameIsInside: boolean,
    // has, add) { if (col1 && !col2) { if (hasPair(col1.getCanon(), face2)) return  //add(col1.getCanon(), face2)
    // const face2Plane = face2.surface.plane  // NB: a new edge is inserted even though it may be the same as an old
    // one // however it indicates that it intersects the other volume here, i.e. the old edge cannot // be counted as
    // 'inside' for purposes of reconstitution thisBrep.edgeFaces.get(col1.getCanon()).forEach(faceInfo => { //const
    // dot = snap0(face2Plane.normal1.dot(faceInfo.inside)) //if (dot == 0 ? !coplanarSameIsInside : dot < 0) { const
    // pointsInsideFace = fff(faceInfo, face2.surface) const edgeInside = pointsInsideFace == INSIDE ||
    // !coplanarSameIsInside && pointsInsideFace == COPLANAR_SAME const pushEdge =
    // (faceInfo.edge.aDir.like(newEdge.aDir)) ? newEdge : newEdge.flipped()
    // assert(faceInfo.edge.aDir.like(pushEdge.aDir)) edgeInside && mapPush(faceMap, faceInfo.face, pushEdge) })  const
    // newEdgeInside = face2Plane.normal1.cross(newEdge.aDir) const sVEF1 = splitsVolumeEnclosingFaces(thisBrep,
    // col1.getCanon(), newEdgeInside, face2Plane.normal1) let addNewEdge, addNewEdgeFlipped if (addNewEdge = sVEF1 ==
    // INSIDE || coplanarSameIsInside && sVEF1 == COPLANAR_SAME) { mapPush(faceMap, face2, newEdge) } const sVEF2 =
    // splitsVolumeEnclosingFaces(thisBrep, col1.getCanon(), newEdgeInside.negated(), face2Plane.normal1) if
    // (addNewEdgeFlipped = sVEF2 == INSIDE || coplanarSameIsInside && sVEF2 == COPLANAR_SAME) { mapPush(faceMap,
    // face2, newEdge.flipped()) } if (addNewEdge || addNewEdgeFlipped || sVEF1 == COPLANAR_SAME && sVEF2 == INSIDE ||
    // sVEF2 == COPLANAR_SAME && sVEF1 == INSIDE) { return true } } } const c1 = handleEdgeInFace(col1, col2, face,
    // face2, thisBrep, face2Brep, false, hasPair, addPair) const c2 = handleEdgeInFace(col2, col1, face2, face,
    // face2Brep, thisBrep, true, (a, b) => hasPair(b, a), (a, b) => addPair(b, a)) if (c1 || c2) return true  if (col1
    // && col2) { if (hasPair(col1.getCanon(), col2.getCanon())) return  addPair(col1.getCanon(), col2.getCanon())
    // function handleColinearEdgeFaces(col1, col2, thisBrep, face2Brep, coplanarSameIsInside: boolean, thisEdgePoints,
    // has, add) { // not entirely sure for what i had the dirInsides in? //const aDirNegatedInside =
    // (newEdge.a.like(col2.a) || newEdge.a.like(col2.b)) && splitsVolumeEnclosingCone(face2Brep, newEdge.a,
    // newEdge.aDir.negated()) == INSIDE //const bDirInside = (newEdge.b.like(col2.a) || newEdge.b.like(col2.b)) &&
    // splitsVolumeEnclosingCone(face2Brep, newEdge.b, newEdge.bDir) == INSIDE
    // thisBrep.edgeFaces.get(col1.getCanon()).forEach(faceInfo => { const sVEF = splitsVolumeEnclosingFaces(face2Brep,
    // col2.getCanon(), faceInfo.inside, faceInfo.normalAtCanonA) const edgeInside = sVEF == INSIDE ||
    // coplanarSameIsInside && sVEF == COPLANAR_SAME const pushEdge = (faceInfo.edge.aDir.like(newEdge.aDir)) ? newEdge
    // : newEdge.flipped() edgeInside && mapPush(faceMap, faceInfo.face, pushEdge) }) } handleColinearEdgeFaces(col1,
    // col2, thisBrep, face2Brep, true, thisEdgePoints, hasPair, addPair) handleColinearEdgeFaces(col2, col1,
    // face2Brep, thisBrep, false, otherEdgePoints, (a, b) => hasPair(b, a), (a, b) => addPair(b, a)) } }   // what
    // needs to be generated: new edges on face // points on edges where they are cut by faces so that sub edges will
    // be generated for loops // points on ends of edges where the edge will be an edge in the new volume where it goes
    // from A to B //         you don't want thos to be marked as 'inside', otherwise invalid faces will be added // if
    // a face cuts a corner, nothings needs to be done, as that alone does not limit what adjacent faces will be
    // function handleEndPoint(a: IntersectionPointInfo, b: IntersectionPointInfo, newEdge: Edge) { // ends in the
    // middle of b's face if (a && !b) { if (!a.colinear && a.edgeT != a.edge.aT && a.edgeT != a.edge.bT) {
    // mapPush(thisEdgePoints, a.edge.getCanon(), a) assert(a.edge.isValidT(a.edgeT)) } // else colinear segment ends
    // in middle of other face, do nothing } // ends in the middle of a's face if (b && !a) { if (!b.colinear &&
    // b.edgeT != b.edge.aT && b.edgeT != b.edge.bT) { mapPush(otherEdgePoints, b.edge.getCanon(), b)
    // assert(b.edge.isValidT(b.edgeT)) } // else colinear segment ends in middle of other face, do nothing } if (a &&
    // b) { // if a or b is colinear the correct points will already have been added to the edge by handleNewEdge //
    // segment starts/ends on edge/edge intersection function foo(a, b, face, face2, thisPlane, face2Plane, thisBrep,
    // face2Brep, first, thisEdgePoints) { if (!a.colinear && a.edgeT != a.edge.aT && a.edgeT != a.edge.bT) { if
    // (!hasPair(a.edge.getCanon(), b.edge.getCanon())) { addPair(a.edge.getCanon(), b.edge.getCanon()) // ends on a,
    // on colinear segment b bT != a.edge.bT && // b can be colinear, so edgeT == aT is possible if (a.p.like(b.edge.a)
    // || a.p.like(b.edge.b)) { const corner = a.p.like(b.edge.a) ? b.edge.a : b.edge.b // face2brep corner on edge
    // const sVEC1 = splitsVolumeEnclosingCone(face2Brep, corner, a.edge.aDir) const sVEC2 =
    // splitsVolumeEnclosingCone(face2Brep, corner, a.edge.aDir.negated()) // if either of these return
    // ALONG_EDGE_OR_PLANE, then the breps share a colinear edge  if (INSIDE == sVEC1 || INSIDE == sVEC2) {
    // mapPush(thisEdgePoints, a.edge.getCanon(), a) assert(a.edge.isValidT(a.edgeT)) } } else { // edge / edge center
    // intersection const aEdgeDir = a.edge.tangentAt(a.edgeT) const bEdgeDir = b.edge.tangentAt(b.edgeT) const
    // testVector = aEdgeDir.rejectedFrom(bEdgeDir) assert(!testVector.likeO()) const sVEF1 =
    // splitsVolumeEnclosingFaces(face2Brep, b.edge.getCanon(), testVector, thisPlane.normal1) const sVEF2 =
    // splitsVolumeEnclosingFaces(face2Brep, b.edge.getCanon(), testVector.negated(), thisPlane.normal1) if (INSIDE ==
    // sVEF1 || INSIDE == sVEF2) { mapPush(thisEdgePoints, a.edge.getCanon(), a) assert(a.edge.isValidT(a.edgeT)) } } }
    // } }  foo(a, b, face, face2, thisPlane, face2Plane, thisBrep, face2Brep, true, thisEdgePoints) foo(b, a, face2,
    // face, face2Plane, thisPlane, face2Brep, thisBrep, false, otherEdgePoints)  } }   assertInst(PlaneFace, face2)
    // const face: PlaneFace = this // get intersection const thisPlane = this.surface.plane, face2Plane =
    // face2.surface.plane if (thisPlane.isParallelToPlane(face2Plane)) { if (thisPlane.like(face2Plane)) { // normal1
    // same and same location in space // addLikeSurfaceFaces(likeSurfaceFaces, this, face2) } return } const isLine =
    // L3.fromPlanes(thisPlane, face2Plane) // get intersections of newCurve with other edges of face and face2 const
    // ps1 = planeFaceEdgeISPsWithPlane(face, isLine, face2Plane) const ps2 = planeFaceEdgeISPsWithPlane(face2, isLine,
    // thisPlane) if (ps1.length == 0 || ps2.length == 0) { // faces to not intersect return }  let col1:
    // IntersectionPointInfo, col2: IntersectionPointInfo let in1 = false, in2 = false let i = 0, j = 0, last let
    // startP, startDir, startT, startA, startB while (i < ps1.length || j < ps2.length) { assert(i <= ps1.length)
    // assert(j <= ps2.length) const a = ps1[i], b = ps2[j] assert(a || b) if (j == ps2.length || i < ps1.length &&
    // lt(a.t, b.t)) { last = a in1 = !in1 a.used = true in1 && (col1 = a.colinear && a) i++ } else if (i == ps1.length
    // || gt(a.t, b.t)) { last = b in2 = !in2 b.used = true in2 && (col2 = b.colinear && b) j++ } else { // TODO: this
    // will break if 3 points on the same t last = a in1 = !in1 in2 = !in2 //if (in1 == in2) { a.used = true b.used =
    // true in1 && (col1 = a.colinear && a) in2 && (col2 = b.colinear && b) //} i++ j++ } if (startP && !(in1 && in2))
    // { // segment end const newEdge = new StraightEdge(isLine, startP, last.p, startT, last.t, undefined, 'genseg' +
    // getGlobalId()) startP = undefined last.used = true if (handleNewEdge(newEdge, col1 && col1.edge, col2 &&
    // col2.edge)) { handleEndPoint(startA || col1, startB || col2, newEdge) handleEndPoint(a && a.used && a || col1, b
    // && b.used && b || col2, newEdge) } } else if (in1 && in2) { // new segment just started startP = last.p startDir
    // = last.insideDir startT = last.t startA = a && a.used && a startB = b && b.used && b } if (!in1 && a && last ==
    // a && a.colinear) { checkedPairs.add(new Pair(a.edge.getCanon(), face2)) } if (!in2 && b && (last == b || b.used)
    // && b.colinear) { checkedPairs.add(new Pair(b.edge.getCanon(), face)) } } }
    withHole(holeEdges) {
        return new PlaneFace$$1(this.surface, this.contour, [holeEdges]);
    }
    pointsToInside(p, dir) {
        return this.containsPoint2(p.plus(dir.times(NLA_PRECISION * 8)));
    }
    edgeISPsWithPlane(isLine, plane2) {
        const face = this;
        assert(face.surface.plane.containsLine(isLine));
        assert(plane2.containsLine(isLine));
        const plane = face.surface.plane;
        const ps = [];
        const loops = [face.contour].concat(face.holes);
        loops.forEach(loop => {
            const colinearEdges = loop.map(edge => edge.colinearToLine(isLine) && -sign$1(edge.aDir.dot(isLine.dir1)));
            const isLineOut = isLine.dir1.cross(plane.normal1);
            loop.forEach((edge, edgeIndex, edges) => {
                const nextEdgeIndex = (edgeIndex + 1) % edges.length, nextEdge = edges[nextEdgeIndex], colinearEdge = colinearEdges[edgeIndex];
                //console.log(edge.toSource()) {p:V3(2, -2.102, 0),
                if (colinearEdge) {
                    // edge colinear to intersection line
                    const curveAT = isLine.pointT(edge.a), curveBT = isLine.pointT(edge.b);
                    // add interval for colinear segment
                    ps.push({ p: edge.a, insideDir: edge.aDir, t: curveAT, edge: edge, edgeT: edge.aT, colinear: true }, {
                        p: edge.b,
                        insideDir: edge.bDir.negated(),
                        t: curveBT,
                        edge: edge,
                        edgeT: edge.bT,
                        colinear: true,
                    });
                    // open next interval if necessary
                    const nextSide = colinearEdges[nextEdgeIndex] ||
                        dotCurve2$$1(nextEdge.curve, nextEdge.aT, isLineOut, nextEdge.deltaTSign());
                    if (colinearEdge * nextSide < 0) {
                        // side changes
                        ps.push({
                            p: nextEdge.a,
                            insideDir: edge.bDir,
                            t: curveBT,
                            edge: nextEdge,
                            edgeT: nextEdge.aT,
                            colinear: false,
                        });
                    }
                }
                else {
                    // not necessarily a straight edge, so multiple intersections are possible
                    const edgeTs = edge.edgeISTsWithPlane(plane2);
                    assert(edgeTs.every(t => plane2.containsPoint(edge.curve.at(t))), edgeTs);
                    for (const edgeT of edgeTs) {
                        if (edgeT == edge.bT) {
                            // endpoint lies on intersection line
                            const side = dotCurve2$$1(edge.curve, edge.bT, isLineOut, -edge.deltaTSign());
                            const nextSide = colinearEdges[nextEdgeIndex] ||
                                dotCurve2$$1(nextEdge.curve, nextEdge.aT, isLineOut, nextEdge.deltaTSign());
                            if (side * nextSide < 0) {
                                // next segment is not colinear and ends on different side
                                ps.push({
                                    p: edge.b,
                                    insideDir: plane2.normal1.negated(),
                                    t: isLine.pointT(edge.b),
                                    edge: edge,
                                    edgeT: edge.bT,
                                    colinear: false,
                                });
                            }
                        }
                        else if (edgeT != edge.aT) {
                            // edge crosses intersection line, neither starts nor ends on it
                            const p = edge.curve.at(edgeT);
                            assert(plane2.containsPoint(p), edge.toString(), p, edgeT, plane2.distanceToPoint(p));
                            assert(isLine.containsPoint(p), edge.toString(), p, edgeT, isLine.distanceToPoint(p));
                            const insideDir = plane2.normal1.negated();
                            ps.push({
                                p: p,
                                insideDir: insideDir,
                                t: isLine.pointT(p),
                                edge: edge,
                                edgeT: edgeT,
                                colinear: false,
                            });
                        }
                    }
                }
            });
        });
        // duplicate 't's are ok, as sometimes a segment needs to stop and start again
        // should be sorted so that back facing ones are first
        ps.sort((a, b) => a.t - b.t || a.insideDir.dot(isLine.dir1));
        return ps;
    }
}
class RotationFace$$1 extends Face$$1 {
    constructor(rot, contour, holes, name, info) {
        super(rot, contour, holes, name, info);
    }
    static loopDoesNotCrossPlane(loop, seamPlane) {
        let side = 0;
        // returns true if d is on the other side as previous calls
        function checkSide(d) {
            if (side == 0) {
                side = d;
            }
            else {
                return !side || side * d < 0;
            }
            return false;
        }
        for (const edge of loop) {
            const ts = edge.edgeISTsWithPlane(seamPlane);
            if (ts.length == 0) {
                if (!(edge.curve instanceof L3$$1) && checkSide(seamPlane.distanceToPointSigned(edge.a)))
                    return false;
            }
            else {
                for (const t of ts) {
                    // TODO: this part probably should be in a separate function
                    // check 'backwards' only if if aT != t
                    if (edge.aT != t) {
                        if (checkSide(dotCurve2$$1(edge.curve, t, seamPlane.normal1, -edge.deltaTSign())))
                            return false;
                    }
                    if (edge.bT != t) {
                        if (checkSide(dotCurve2$$1(edge.curve, t, seamPlane.normal1, edge.deltaTSign())))
                            return false;
                    }
                }
            }
        }
        return true;
    }
    getAABB() {
        if (this.aabb)
            return this.aabb;
        this.aabb = AABB.forAABBs(this.contour.map(e => e.getAABB()));
        this.aabb.addPoints(this.surface.getExtremePoints().filter(p => this.containsPoint(p)));
        return this.aabb;
    }
    unrollLoop(edgeLoop) {
        const vs = [];
        const stP = this.surface.stPFunc();
        const verticesNo0s = edgeLoop.map(edge => edge.getVerticesNo0());
        const startEdgeIndex = verticesNo0s.findIndex(edgeVertices => !eq(stP(edgeVertices[0]).x, Math.PI));
        assert(-1 != startEdgeIndex);
        // console.log(startEdgeIndex)
        for (let i = 0; i < edgeLoop.length; i++) {
            const edgeIndex = (i + startEdgeIndex) % edgeLoop.length;
            for (let j = 0; j < verticesNo0s[edgeIndex].length; j++) {
                const p = verticesNo0s[edgeIndex][j];
                const localP = stP(p);
                // console.log(hint, p.sce, localP.sce)
                vs.push(localP);
            }
        }
        edgeLoop.forEach(edge => {
            edge.getVerticesNo0().forEach(p => {
                vs.push(stP(p));
            });
        });
        console.log('vs\n', vs.join('\n'), vs.length);
        return vs;
    }
    /**
     * f1 cos t + f2 sin t
     * tan(phi) = sin / cos
     *          = (f1x cos t + f2x sin t) / (f1y cos t + f2y sin t)
     *
     *          = (-f1x sin t + f2x cos t) / (-f1y sin t + f2y cos t)
     */
    unrollEllipsoidLoops(edgeLoops, uStep, vStep) {
        const verticesST = [], vertices = [], loopStarts = [];
        const ellipsoid = this.surface;
        const ptpf = ellipsoid.stPFunc();
        const testDegeneratePoint = ellipsoid instanceof SemiEllipsoidSurface$$1
            ? (nextStart) => nextStart.like(ellipsoid.center.plus(ellipsoid.f3)) ||
                nextStart.like(ellipsoid.center.minus(ellipsoid.f3))
            : (nextStart) => nextStart.like(this.surface.center);
        for (const edgeLoop of edgeLoops) {
            loopStarts.push(verticesST.length);
            // console.log(startEdgeIndex)
            for (let i = 0; i < edgeLoop.length; i++) {
                const ipp = (i + 1) % edgeLoop.length;
                const verticesNo0 = edgeLoop[i].getVerticesNo0();
                vertices.push(...verticesNo0);
                verticesST.push(...verticesNo0.map(v => ptpf(v)));
                const nextStart = edgeLoop[ipp].a;
                //console.log('BLAH', nextStart.str, ellipsoid.center.plus(ellipsoid.f3).str)
                if (testDegeneratePoint(nextStart)) {
                    const bDirLC = ellipsoid.matrixInverse.transformVector(edgeLoop[i].bDir), aDirLC = ellipsoid.matrixInverse.transformVector(edgeLoop[ipp].aDir);
                    const inAngle = Math.atan2(-bDirLC.y, -bDirLC.x);
                    const outAngle = Math.atan2(aDirLC.y, aDirLC.x);
                    const stLast = verticesST.pop();
                    verticesST.push(new V3(inAngle, stLast.y, 0), new V3(outAngle, stLast.y, 0));
                    vertices.push(vertices.last);
                }
                verticesST.forEach(({ x: u, y: v }) => {
                    assert(isFinite(u));
                    assert(isFinite(v));
                });
            }
        }
        let normals;
        if (this.surface instanceof SemiEllipsoidSurface$$1) {
            normals = vertices.map(v => ellipsoid.normalP(v));
        }
        else {
            const pN = ellipsoid.normalSTFunc();
            normals = verticesST.map(({ x, y }) => pN(x, y));
        }
        assert(vertices.length == vertices.length);
        //console.log(verticesST.map(v => v.str).join('\n'))
        return {
            verticesUV: verticesST.map(vST => new V3(vST.x / uStep, vST.y / vStep, 0)),
            vertices: vertices,
            normals: normals,
            loopStarts: loopStarts,
        };
    }
    unrollCylinderLoops(loops, uStep, vStep) {
        const vertexLoops = loops.map(loop => loop.flatMap(edge => edge.getVerticesNo0()));
        const surface = this.surface;
        const vertices = vertexLoops.concatenated();
        // this.unrollLoop(loop).map(v => new V3(v.x / uStep, v.y / vStep, 0)))
        const loopStarts = vertexLoops.reduce((arr, loop) => (arr.push(arr.last + loop.length), arr), [0]);
        const stPFunc = surface.stPFunc();
        const verticesST = vertices.map(v => stPFunc(v));
        const verticesUV = verticesST.map(st => new V3(st.x / uStep, st.y / vStep, 0));
        const normalST = surface.normalSTFunc();
        const normals = verticesST.map(({ x, y }) => normalST(x, y));
        return { verticesUV: verticesUV, vertices: vertices, normals: normals, loopStarts: loopStarts };
    }
    /**
     * at(s, t) = new V3(s cos t, s sin t, t + )
     *
     * x = 0
     *
     * s cos t = 0
     * ==> s = 0 || cos t = 0
     * ==> L3.Z || V3(0, +-s, k * 2 pi)
     *
     * x = c
     * s cos t = c
     * ==> V3(c, c sin t / cos t = c tan t, t)
     * ==> V3(c, c t, arctan t)
     *
     *
     * x . n = w
     *      s cos t nx + s sin t ny + t nz = w
     *      s = (w - t nz) / (cos t nx + sub t ny)
     * ==> V3(
     *          cos t (w - t nz) / (cos t nx + sin t ny)
     *          sin t (w - t nz) / (cos t nx + sin t ny)
     *          t)
     *
     *  ==> V3(
     *          (w - z arctan t) / (x + t y)
     *          (w - z arctan t) / (y + x / t)
     *          arctan t)
     *
     *
     *
     */
    addToMesh(mesh, uStep = this.surface.uStep, vStep = this.surface.vStep) {
        assertf(() => uStep > 0 && vStep > 0, uStep, vStep, 'Surface: ' + this.surface);
        const triangles = [];
        const pIJFunc = (i, j) => this.surface.pSTFunc()(i * uStep, j * vStep);
        const normalIJFunc = (i, j) => this.surface.normalSTFunc()(i * uStep, j * vStep);
        const loops = [this.contour].concat(this.holes);
        const { vertices, verticesUV, normals, loopStarts } = this.surface instanceof SemiEllipsoidSurface$$1 || this.surface instanceof ConicSurface$$1
            ? this.unrollEllipsoidLoops(loops, uStep, vStep)
            : this.unrollCylinderLoops(loops, uStep, vStep);
        loopStarts.push(vertices.length);
        for (let vertexLoopIndex = 0; vertexLoopIndex < loops.length; vertexLoopIndex++) {
            const vertexLoopStart = loopStarts[vertexLoopIndex];
            const vertexLoopLength = loopStarts[vertexLoopIndex + 1] - vertexLoopStart;
            const base = mesh.vertices.length + loopStarts[vertexLoopIndex];
            for (let i = 0; i < vertexLoopLength; i++) {
                mesh.LINES.push(base + i, base + (i + 1) % vertexLoopLength);
            }
        }
        disableConsole();
        let minU = Infinity, maxU = -Infinity, minV = Infinity, maxV = -Infinity;
        //console.log('surface', this.surface.str)
        //console.log(verticesUV)
        //drPs.push(...verticesUV.map((v, i) => ({p: vertices[i], text: `${i} uv: ${v.toString(x => round10(x,
        // -4))}`})))
        verticesUV.forEach(({ x: u, y: v }) => {
            assert(isFinite(u));
            assert(isFinite(v));
            minU = min$1(minU, u);
            maxU = max$1(maxU, u);
            minV = min$1(minV, v);
            maxV = max$1(maxV, v);
        });
        if (ParametricSurface$$1.is(this.surface)) {
            //assert(this.surface.boundsSigned(minU * uStep, minV * vStep) > -NLA_PRECISION)
            //assert(this.surface.boundsSigned(maxU * uStep, maxV * vStep) > -NLA_PRECISION)
        }
        const uOffset = floor(minU + NLA_PRECISION), vOffset = floor(minV + NLA_PRECISION);
        const uRes = ceil(maxU - NLA_PRECISION) - uOffset, vRes = ceil(maxV - NLA_PRECISION) - vOffset;
        console.log(uStep, vStep, uRes, vRes);
        if (uRes == 1 && vRes == 1) {
            // triangulate this face as if it were a plane
            const polyTriangles = triangulateVertices$$1(V3.Z, verticesUV, loopStarts.slice(1, 1 + this.holes.length));
            triangles.push(...polyTriangles);
        }
        else {
            const partss = new Array(uRes * vRes);
            function fixUpPart(part, baseU, baseV) {
                assert(baseU < uRes && baseV < vRes, `${baseU}, ${baseV}, ${uRes}, ${vRes}`);
                console.log('complete part', part, baseU, baseV);
                //console.trace()
                assert(part.length);
                const cellU = baseU + uOffset, cellV = baseV + vOffset;
                for (const index of part) {
                    assert(le(cellU, verticesUV[index].x) && le(verticesUV[index].x, cellU + 1), `${index} ${verticesUV[index].str} ${cellU} ${cellU}`);
                    assert(le(cellV, verticesUV[index].y) && le(verticesUV[index].y, cellV + 1));
                }
                const pos = baseV * uRes + baseU;
                (partss[pos] || (partss[pos] = [])).push(part);
                //const outline = partss[pos] || (partss[pos] = [minU + baseU * uStep, minV + baseV * vStep, minU +
                // (baseU + 1) * uStep, minV + (baseV + 1) * vStep])
            }
            // 'some' instead of forEach so we can return out of the entire function if this.edges crosses no borders
            // and
            for (let vertexLoopIndex = 0; vertexLoopIndex < loops.length; vertexLoopIndex++) {
                let part = undefined, firstPart, firstPartBaseU = -1, firstPartBaseV = -1;
                let lastBaseV = -1, lastBaseU = -1;
                let partCount = 0;
                const vertexLoopStart = loopStarts[vertexLoopIndex];
                const vertexLoopLength = loopStarts[vertexLoopIndex + 1] - vertexLoopStart;
                for (let vlvi = 0; vlvi < vertexLoopLength; vlvi++) {
                    const vx0index = vertexLoopStart + vlvi, vx0 = verticesUV[vx0index];
                    const vx1index = vertexLoopStart + (vlvi + 1) % vertexLoopLength, vx1 = verticesUV[vx1index];
                    //console.log('dask', vx0index, vx1index)
                    const vx01 = vx0.to(vx1);
                    assert(vx0);
                    const di = vx01.x, dj = vx01.y;
                    let vxIndex = vx0index, vx = vx0, currentT = 0;
                    let whileLimit = 400;
                    while (--whileLimit) {
                        const vxu = vx.x, vxv = vx.y;
                        // points which are on a grid line are assigned to the cell into which they are going (+
                        // NLA_PRECISION * sign(di)) if they are parallel to the gridline (eq0(di)), they belong the
                        // the cell for which they are a CCW boundary
                        const baseU = floor(vxu + (!eq0(di) ? sign$1(di) : -sign$1(dj)) * NLA_PRECISION) - uOffset;
                        const baseV = floor(vxv + (!eq0(dj) ? sign$1(dj) : sign$1(di)) * NLA_PRECISION) - vOffset;
                        assert(baseU < uRes && baseV < vRes, `${baseU}, ${baseV}, ${uRes}, ${vRes}`);
                        // figure out the next intersection with a gridline:
                        // iNext is the positive horizontal distance to the next vertical gridline
                        const iNext = ceil(sign$1(di) * vxu + NLA_PRECISION) - sign$1(di) * vxu;
                        const jNext = ceil(sign$1(dj) * vxv + NLA_PRECISION) - sign$1(dj) * vxv;
                        const iNextT = currentT + iNext / abs$2(di);
                        const jNextT = currentT + jNext / abs$2(dj);
                        //console.log(vxIndex, vx.str, 'vij', vxu, vxv, 'd', di, dj, 'ijNext', iNext, jNext, 'nextT',
                        // iNextT, jNextT)
                        if (lastBaseU != baseU || lastBaseV != baseV) {
                            if (part) {
                                if (!firstPart) {
                                    firstPart = part;
                                    firstPartBaseU = lastBaseU;
                                    firstPartBaseV = lastBaseV;
                                }
                                else {
                                    partCount++;
                                    fixUpPart(part, lastBaseU, lastBaseV);
                                }
                            }
                            part = [vxIndex];
                        }
                        lastBaseU = baseU;
                        lastBaseV = baseV;
                        currentT = min$1(iNextT, jNextT);
                        if (ge(currentT, 1)) {
                            //console.log('breaking ', vx1index)
                            part.push(vx1index);
                            break;
                        }
                        else {
                            const nextPoint = vx0.lerp(vx1, currentT);
                            const nextPointIndex = addVertex(nextPoint.x, nextPoint.y);
                            //console.log('pushing ', nextPointIndex)
                            part.push(nextPointIndex);
                            vx = nextPoint;
                            vxIndex = nextPointIndex;
                        }
                    }
                    assert(whileLimit, 'whileLimit');
                }
                if (0 == partCount) {
                    // complete loop
                    assert(false, 'found a hole, try increasing resolution');
                }
                // at this point, the firstPart hasn't been added, and the last part also hasn't been added
                // either they belong to the same cell, or not
                if (firstPartBaseU == lastBaseU && firstPartBaseV == lastBaseV) {
                    part.pop();
                    fixUpPart(part.concat(firstPart), lastBaseU, lastBaseV);
                }
                else {
                    fixUpPart(firstPart, firstPartBaseU, firstPartBaseV);
                    fixUpPart(part, lastBaseU, lastBaseV);
                }
                console.log('firstPart', firstPart);
            }
            console.log('calculated parts', partss);
            const fieldVertexIndices = new Array((uRes + 1) * (vRes + 1));
            function addVertex(u, v) {
                verticesUV.push(new V3(u, v, 0));
                normals.push(normalIJFunc(u, v));
                return vertices.push(pIJFunc(u, v)) - 1;
            }
            function getGridVertexIndex(i, j) {
                const index = j * (uRes + 1) + i;
                return fieldVertexIndices[index] || (fieldVertexIndices[index] = addVertex(i + uOffset, j + vOffset));
            }
            for (let col = 0; col < uRes; col++) {
                let inside = false;
                for (let row = 0; row < vRes; row++) {
                    const pos = row * uRes + col;
                    const fieldU = uOffset + col, fieldV = vOffset + row;
                    const parts = partss[pos];
                    if (!parts) {
                        if (inside) {
                            pushQuad(triangles, false, getGridVertexIndex(col, row), getGridVertexIndex(col + 1, row), getGridVertexIndex(col, row + 1), getGridVertexIndex(col + 1, row + 1));
                        }
                    }
                    else {
                        // assemble the field with segments in in
                        function opos(index) {
                            const p = verticesUV[index], u1 = p.x - fieldU, v1 = p.y - fieldV;
                            assert(-NLA_PRECISION < u1 &&
                                u1 < 1 + NLA_PRECISION &&
                                -NLA_PRECISION < v1 &&
                                v1 < 1 + NLA_PRECISION, 'oob u1 v1 ' +
                                u1 +
                                ' ' +
                                v1 +
                                ' ' +
                                index +
                                ' ' +
                                p.str +
                                'IF THIS FAILS check canonSeamU is correct');
                            return v1 < u1 ? u1 + v1 : 4 - u1 - v1;
                        }
                        while (parts.length) {
                            const outline = [];
                            const startPart = parts[0];
                            assert(startPart.length > 0);
                            let currentPart = startPart;
                            do {
                                outline.push(...currentPart);
                                const currentPartEndOpos = opos(currentPart.last);
                                const nextPartIndex = parts.indexWithMax(part => -mod(opos(part[0]) - currentPartEndOpos, 4));
                                const nextPart = parts.removeIndex(nextPartIndex);
                                let currentOpos = currentPartEndOpos;
                                const nextPartStartOpos = opos(nextPart[0]) > currentOpos ? opos(nextPart[0]) : opos(nextPart[0]) + 4;
                                let nextOpos = ceil(currentOpos + NLA_PRECISION);
                                let flipping = eq0((currentOpos + NLA_PRECISION) % 1 - NLA_PRECISION);
                                //inside = inside != (!eq0(currentOpos % 1) && currentOpos % 2 < 1)
                                while (lt(nextOpos, nextPartStartOpos)) {
                                    switch (nextOpos % 4) {
                                        case 0:
                                            outline.push(getGridVertexIndex(col, row));
                                            break;
                                        case 1:
                                            inside = inside != flipping;
                                            outline.push(getGridVertexIndex(col + 1, row));
                                            break;
                                        case 2:
                                            outline.push(getGridVertexIndex(col + 1, row + 1));
                                            break;
                                        case 3:
                                            inside = inside != flipping;
                                            outline.push(getGridVertexIndex(col, row + 1));
                                            break;
                                    }
                                    flipping = true;
                                    nextOpos++;
                                }
                                // if the next loop would have completed a top or bottom segment
                                inside = inside != (flipping && nextOpos % 2 == 1 && eq(nextOpos, nextPartStartOpos));
                                currentOpos = nextOpos;
                                currentPart = nextPart;
                            } while (currentPart != startPart);
                            // triangulate outline
                            if (outline.length == 3) {
                                // its just a triangle
                                triangles.push(...outline);
                            }
                            else {
                                const polyTriangles = triangulateVertices$$1(V3.Z, outline.map(i => verticesUV[i]), []).map(i => outline[i]);
                                triangles.push(...polyTriangles);
                            }
                            //console.log('outline', col, row, outline)
                        }
                    }
                }
            }
        }
        //console.log('trinagle', triangles.max(), vertices.length, triangles.length, triangles.toSource(),
        // triangles.map(col => vertices[col].$).toSource() ) assert(normals.every(n => n.hasLength(1)), normals.find(n
        // => !n.hasLength(1)).length() +' '+normals.findIndex(n => !n.hasLength(1)))
        Array.prototype.push.apply(mesh.TRIANGLES, triangles.map(index => index + mesh.vertices.length));
        Array.prototype.push.apply(mesh.vertices, vertices);
        Array.prototype.push.apply(mesh.normals, normals);
        //this.addEdgeLines(mesh)
        enableConsole();
    }
    addToMesh2(mesh) {
        const closed = false;
        const zSplit = 8;
        const ribs = [];
        let minZ = Infinity, maxZ = -Infinity;
        //let cmp = (a, b) => a.value - b.value
        const f = this.surface.pSTFunc();
        const normalF = this.surface.normalSTFunc();
        const vertexLoops = this.holes.concat([this.contour]).map(loop => this.unrollLoop(loop));
        vertexLoops.forEach(vertexLoop => {
            vertexLoop.forEach(({ x: d, y: z }) => {
                const index0 = ribs.binaryIndexOf(d, (a, b) => snap(a.value - b, 0));
                if (index0 < 0) {
                    ribs.splice(-index0 - 1, 0, { value: d, left: [], right: [] });
                }
                minZ = min$1(minZ, z);
                maxZ = max$1(maxZ, z);
            });
        });
        console.log('zzzs', minZ, maxZ, vertexLoops[0].toSource().replace(/\), /g, ',\n'));
        const correction = 1;
        vertexLoops.forEach(vertexLoop => {
            vertexLoop.forEach((v0, i, vs) => {
                let v1 = vs[(i + 1) % vs.length], dDiff = v1.x - v0.x;
                //console.log(v0.sce, v1.sce)
                if (eq0(dDiff)) {
                    return;
                }
                if (dDiff < 0) {
                    [v0, v1] = [v1, v0];
                    dDiff = -dDiff;
                }
                const index0 = ribs.binaryIndexOf(v0.x, (a, b) => snap(a.value - b, 0));
                const index1 = ribs.binaryIndexOf(v1.x, (a, b) => snap(a.value - b, 0));
                ribs[index0].right.binaryInsert(v0.y);
                for (let j = (index0 + correction) % ribs.length; j != index1; j = (j + correction) % ribs.length) {
                    const x = ribs[j].value;
                    const part = (x - v0.x) / dDiff;
                    const interpolated = v1.y * part + v0.y * (1 - part);
                    ribs[j].left.binaryInsert(interpolated);
                    ribs[j].right.binaryInsert(interpolated);
                }
                ribs[index1].left.binaryInsert(v1.y);
                // console.log(ribs.map(r=>r.toSource()).join('\n'))
            });
        });
        const vertices = [], triangles0 = [], normals = [];
        for (let i = 0; i < ribs.length; i++) {
            const ribLeft = ribs[i], ribRight = ribs[(i + 1) % ribs.length];
            assert(ribLeft.right.length == ribRight.left.length);
            for (let j = 0; j < ribLeft.right.length; j++) {
                vertices.push(f(ribLeft.value, ribLeft.right[j]), f(ribRight.value, ribRight.left[j]));
                normals.push(normalF(ribLeft.value, ribLeft.right[j]), normalF(ribRight.value, ribRight.left[j]));
            }
        }
        //console.log(ribs.map(r=>r.toSource()).join('\n'))
        const vss = vertices.length, detailVerticesStart = vss;
        const zInterval = maxZ - minZ, zStep = zInterval / zSplit;
        const detailZs = arrayFromFunction(zSplit - 1, i => minZ + (1 + i) * zStep);
        console.log('detailsZs', detailZs);
        for (let i = 0; i < ribs.length; i++) {
            const d = ribs[i].value;
            for (let j = 0; j < detailZs.length; j++) {
                vertices.push(f(d, detailZs[j]));
                normals.push(normalF(d, detailZs[j]));
            }
        }
        // console.log('detailVerticesStart', detailVerticesStart, 'vl', vertices.length, vertices.length -
        // detailVerticesStart, ribs.length) finally, fill in the ribs
        let vsStart = 0;
        const flipped2 = true;
        //for (var i = 0; i < 1; i++) {
        const end = closed ? ribs.length : ribs.length - 1;
        for (let i = 0; i < end; i++) {
            const ipp = (i + 1) % ribs.length;
            let inside = false, colPos = 0;
            const ribLeft = ribs[i], ribRight = ribs[(i + 1) % ribs.length];
            for (let j = 0; j < detailZs.length + 1; j++) {
                const detailZ = detailZs[j] || 100000;
                if (!inside) {
                    if (ribLeft.right[colPos] < detailZ && ribRight.left[colPos] < detailZ) {
                        if (ribLeft.right[colPos + 1] < detailZ || ribRight.left[colPos + 1] < detailZ) {
                            pushQuad(triangles0, flipped2, vsStart + colPos * 2, vsStart + (colPos + 1) * 2, vsStart + colPos * 2 + 1, vsStart + (colPos + 1) * 2 + 1);
                            colPos += 2;
                            if (ribLeft.right[colPos] < detailZ || ribRight.left[colPos] < detailZ) {
                                j--;
                            }
                        }
                        else {
                            pushQuad(triangles0, flipped2, vsStart + colPos * 2, vsStart + colPos * 2 + 1, detailVerticesStart + i * detailZs.length + j, detailVerticesStart + ipp * detailZs.length + j);
                            inside = true;
                            colPos++;
                        }
                    }
                }
                else {
                    if (ribLeft.right[colPos] < detailZ || ribRight.left[colPos] < detailZ) {
                        pushQuad(triangles0, flipped2, detailVerticesStart + i * detailZs.length + j - 1, detailVerticesStart + ipp * detailZs.length + j - 1, vsStart + colPos * 2, vsStart + colPos * 2 + 1);
                        inside = false;
                        colPos++;
                        if (ribLeft.right[colPos] < detailZ || ribRight.left[colPos] < detailZ) {
                            j--;
                        }
                    }
                    else {
                        pushQuad(triangles0, flipped2, detailVerticesStart + i * detailZs.length + j, detailVerticesStart + i * detailZs.length + j - 1, detailVerticesStart + ipp * detailZs.length + j, detailVerticesStart + ipp * detailZs.length + j - 1);
                    }
                }
            }
            vsStart += ribLeft.right.length * 2;
        }
        //console.log('trinagle', triangles0.max(), vertices.length, triangles0.length, triangles0.toSource(),
        // triangles0.map(i => vertices[i].$).toSource() )
        const triangles = triangles0.map(index => index + mesh.vertices.length);
        //assert(normals.every(n => n.hasLength(1)), normals.find(n => !n.hasLength(1)).length() +'
        // '+normals.findIndex(n => !n.hasLength(1)))
        Array.prototype.push.apply(mesh.vertices, vertices);
        Array.prototype.push.apply(mesh.TRIANGLES, triangles);
        Array.prototype.push.apply(mesh.normals, normals);
        //this.addEdgeLines(mesh)
    }
}

var earcut_1 = earcut;
var default_1 = earcut;

function earcut(data, holeIndices, dim) {

    dim = dim || 2;

    var hasHoles = holeIndices && holeIndices.length,
        outerLen = hasHoles ? holeIndices[0] * dim : data.length,
        outerNode = linkedList(data, 0, outerLen, dim, true),
        triangles = [];

    if (!outerNode) return triangles;

    var minX, minY, maxX, maxY, x, y, invSize;

    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);

    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
    if (data.length > 80 * dim) {
        minX = maxX = data[0];
        minY = maxY = data[1];

        for (var i = dim; i < outerLen; i += dim) {
            x = data[i];
            y = data[i + 1];
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
        }

        // minX, minY and invSize are later used to transform coords into integers for z-order calculation
        invSize = Math.max(maxX - minX, maxY - minY);
        invSize = invSize !== 0 ? 1 / invSize : 0;
    }

    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);

    return triangles;
}

// create a circular doubly linked list from polygon points in the specified winding order
function linkedList(data, start, end, dim, clockwise) {
    var i, last;

    if (clockwise === (signedArea(data, start, end, dim) > 0)) {
        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
    } else {
        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
    }

    if (last && equals$2(last, last.next)) {
        removeNode(last);
        last = last.next;
    }

    return last;
}

// eliminate colinear or duplicate points
function filterPoints(start, end) {
    if (!start) return start;
    if (!end) end = start;

    var p = start,
        again;
    do {
        again = false;

        if (!p.steiner && (equals$2(p, p.next) || area(p.prev, p, p.next) === 0)) {
            removeNode(p);
            p = end = p.prev;
            if (p === p.next) break;
            again = true;

        } else {
            p = p.next;
        }
    } while (again || p !== end);

    return end;
}

// main ear slicing loop which triangulates a polygon (given as a linked list)
function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
    if (!ear) return;

    // interlink polygon nodes in z-order
    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);

    var stop = ear,
        prev, next;

    // iterate through ears, slicing them one by one
    while (ear.prev !== ear.next) {
        prev = ear.prev;
        next = ear.next;

        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
            // cut off the triangle
            triangles.push(prev.i / dim);
            triangles.push(ear.i / dim);
            triangles.push(next.i / dim);

            removeNode(ear);

            // skipping the next vertice leads to less sliver triangles
            ear = next.next;
            stop = next.next;

            continue;
        }

        ear = next;

        // if we looped through the whole remaining polygon and can't find any more ears
        if (ear === stop) {
            // try filtering points and slicing again
            if (!pass) {
                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);

            // if this didn't work, try curing all small self-intersections locally
            } else if (pass === 1) {
                ear = cureLocalIntersections(ear, triangles, dim);
                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);

            // as a last resort, try splitting the remaining polygon into two
            } else if (pass === 2) {
                splitEarcut(ear, triangles, dim, minX, minY, invSize);
            }

            break;
        }
    }
}

// check whether a polygon node forms a valid ear with adjacent nodes
function isEar(ear) {
    var a = ear.prev,
        b = ear,
        c = ear.next;

    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

    // now make sure we don't have other points inside the potential ear
    var p = ear.next.next;

    while (p !== ear.prev) {
        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0) return false;
        p = p.next;
    }

    return true;
}

function isEarHashed(ear, minX, minY, invSize) {
    var a = ear.prev,
        b = ear,
        c = ear.next;

    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

    // triangle bbox; min & max are calculated like this for speed
    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),
        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),
        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),
        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);

    // z-order range for the current triangle bbox;
    var minZ = zOrder(minTX, minTY, minX, minY, invSize),
        maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);

    var p = ear.prevZ,
        n = ear.nextZ;

    // look for points inside the triangle in both directions
    while (p && p.z >= minZ && n && n.z <= maxZ) {
        if (p !== ear.prev && p !== ear.next &&
            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;

        if (n !== ear.prev && n !== ear.next &&
            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&
            area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }

    // look for remaining points in decreasing z-order
    while (p && p.z >= minZ) {
        if (p !== ear.prev && p !== ear.next &&
            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
    }

    // look for remaining points in increasing z-order
    while (n && n.z <= maxZ) {
        if (n !== ear.prev && n !== ear.next &&
            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&
            area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }

    return true;
}

// go through all polygon nodes and cure small local self-intersections
function cureLocalIntersections(start, triangles, dim) {
    var p = start;
    do {
        var a = p.prev,
            b = p.next.next;

        if (!equals$2(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {

            triangles.push(a.i / dim);
            triangles.push(p.i / dim);
            triangles.push(b.i / dim);

            // remove two nodes involved
            removeNode(p);
            removeNode(p.next);

            p = start = b;
        }
        p = p.next;
    } while (p !== start);

    return p;
}

// try splitting polygon into two and triangulate them independently
function splitEarcut(start, triangles, dim, minX, minY, invSize) {
    // look for a valid diagonal that divides the polygon into two
    var a = start;
    do {
        var b = a.next.next;
        while (b !== a.prev) {
            if (a.i !== b.i && isValidDiagonal(a, b)) {
                // split the polygon in two by the diagonal
                var c = splitPolygon(a, b);

                // filter colinear points around the cuts
                a = filterPoints(a, a.next);
                c = filterPoints(c, c.next);

                // run earcut on each half
                earcutLinked(a, triangles, dim, minX, minY, invSize);
                earcutLinked(c, triangles, dim, minX, minY, invSize);
                return;
            }
            b = b.next;
        }
        a = a.next;
    } while (a !== start);
}

// link every hole into the outer loop, producing a single-ring polygon without holes
function eliminateHoles(data, holeIndices, outerNode, dim) {
    var queue = [],
        i, len, start, end, list;

    for (i = 0, len = holeIndices.length; i < len; i++) {
        start = holeIndices[i] * dim;
        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        list = linkedList(data, start, end, dim, false);
        if (list === list.next) list.steiner = true;
        queue.push(getLeftmost(list));
    }

    queue.sort(compareX);

    // process holes from left to right
    for (i = 0; i < queue.length; i++) {
        eliminateHole(queue[i], outerNode);
        outerNode = filterPoints(outerNode, outerNode.next);
    }

    return outerNode;
}

function compareX(a, b) {
    return a.x - b.x;
}

// find a bridge between vertices that connects hole with an outer ring and and link it
function eliminateHole(hole, outerNode) {
    outerNode = findHoleBridge(hole, outerNode);
    if (outerNode) {
        var b = splitPolygon(outerNode, hole);
        filterPoints(b, b.next);
    }
}

// David Eberly's algorithm for finding a bridge between hole and outer polygon
function findHoleBridge(hole, outerNode) {
    var p = outerNode,
        hx = hole.x,
        hy = hole.y,
        qx = -Infinity,
        m;

    // find a segment intersected by a ray from the hole's leftmost point to the left;
    // segment's endpoint with lesser x will be potential connection point
    do {
        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
            if (x <= hx && x > qx) {
                qx = x;
                if (x === hx) {
                    if (hy === p.y) return p;
                    if (hy === p.next.y) return p.next;
                }
                m = p.x < p.next.x ? p : p.next;
            }
        }
        p = p.next;
    } while (p !== outerNode);

    if (!m) return null;

    if (hx === qx) return m.prev; // hole touches outer segment; pick lower endpoint

    // look for points inside the triangle of hole point, segment intersection and endpoint;
    // if there are no points found, we have a valid connection;
    // otherwise choose the point of the minimum angle with the ray as connection point

    var stop = m,
        mx = m.x,
        my = m.y,
        tanMin = Infinity,
        tan;

    p = m.next;

    while (p !== stop) {
        if (hx >= p.x && p.x >= mx && hx !== p.x &&
                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {

            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential

            if ((tan < tanMin || (tan === tanMin && p.x > m.x)) && locallyInside(p, hole)) {
                m = p;
                tanMin = tan;
            }
        }

        p = p.next;
    }

    return m;
}

// interlink polygon nodes in z-order
function indexCurve(start, minX, minY, invSize) {
    var p = start;
    do {
        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);
        p.prevZ = p.prev;
        p.nextZ = p.next;
        p = p.next;
    } while (p !== start);

    p.prevZ.nextZ = null;
    p.prevZ = null;

    sortLinked(p);
}

// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function sortLinked(list) {
    var i, p, q, e, tail, numMerges, pSize, qSize,
        inSize = 1;

    do {
        p = list;
        list = null;
        tail = null;
        numMerges = 0;

        while (p) {
            numMerges++;
            q = p;
            pSize = 0;
            for (i = 0; i < inSize; i++) {
                pSize++;
                q = q.nextZ;
                if (!q) break;
            }
            qSize = inSize;

            while (pSize > 0 || (qSize > 0 && q)) {

                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                    e = p;
                    p = p.nextZ;
                    pSize--;
                } else {
                    e = q;
                    q = q.nextZ;
                    qSize--;
                }

                if (tail) tail.nextZ = e;
                else list = e;

                e.prevZ = tail;
                tail = e;
            }

            p = q;
        }

        tail.nextZ = null;
        inSize *= 2;

    } while (numMerges > 1);

    return list;
}

// z-order of a point given coords and inverse of the longer side of data bbox
function zOrder(x, y, minX, minY, invSize) {
    // coords are transformed into non-negative 15-bit integer range
    x = 32767 * (x - minX) * invSize;
    y = 32767 * (y - minY) * invSize;

    x = (x | (x << 8)) & 0x00FF00FF;
    x = (x | (x << 4)) & 0x0F0F0F0F;
    x = (x | (x << 2)) & 0x33333333;
    x = (x | (x << 1)) & 0x55555555;

    y = (y | (y << 8)) & 0x00FF00FF;
    y = (y | (y << 4)) & 0x0F0F0F0F;
    y = (y | (y << 2)) & 0x33333333;
    y = (y | (y << 1)) & 0x55555555;

    return x | (y << 1);
}

// find the leftmost node of a polygon ring
function getLeftmost(start) {
    var p = start,
        leftmost = start;
    do {
        if (p.x < leftmost.x) leftmost = p;
        p = p.next;
    } while (p !== start);

    return leftmost;
}

// check if a point lies within a convex triangle
function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&
           (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&
           (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
}

// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
function isValidDiagonal(a, b) {
    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) &&
           locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);
}

// signed area of a triangle
function area(p, q, r) {
    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
}

// check if two points are equal
function equals$2(p1, p2) {
    return p1.x === p2.x && p1.y === p2.y;
}

// check if two segments intersect
function intersects(p1, q1, p2, q2) {
    if ((equals$2(p1, q1) && equals$2(p2, q2)) ||
        (equals$2(p1, q2) && equals$2(p2, q1))) return true;
    return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 &&
           area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;
}

// check if a polygon diagonal intersects any polygon segments
function intersectsPolygon(a, b) {
    var p = a;
    do {
        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
                intersects(p, p.next, a, b)) return true;
        p = p.next;
    } while (p !== a);

    return false;
}

// check if a polygon diagonal is locally inside the polygon
function locallyInside(a, b) {
    return area(a.prev, a, a.next) < 0 ?
        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :
        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
}

// check if the middle point of a polygon diagonal is inside the polygon
function middleInside(a, b) {
    var p = a,
        inside = false,
        px = (a.x + b.x) / 2,
        py = (a.y + b.y) / 2;
    do {
        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&
                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))
            inside = !inside;
        p = p.next;
    } while (p !== a);

    return inside;
}

// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function splitPolygon(a, b) {
    var a2 = new Node(a.i, a.x, a.y),
        b2 = new Node(b.i, b.x, b.y),
        an = a.next,
        bp = b.prev;

    a.next = b;
    b.prev = a;

    a2.next = an;
    an.prev = a2;

    b2.next = a2;
    a2.prev = b2;

    bp.next = b2;
    b2.prev = bp;

    return b2;
}

// create a node and optionally link it with previous one (in a circular doubly linked list)
function insertNode(i, x, y, last) {
    var p = new Node(i, x, y);

    if (!last) {
        p.prev = p;
        p.next = p;

    } else {
        p.next = last.next;
        p.prev = last;
        last.next.prev = p;
        last.next = p;
    }
    return p;
}

function removeNode(p) {
    p.next.prev = p.prev;
    p.prev.next = p.next;

    if (p.prevZ) p.prevZ.nextZ = p.nextZ;
    if (p.nextZ) p.nextZ.prevZ = p.prevZ;
}

function Node(i, x, y) {
    // vertice index in coordinates array
    this.i = i;

    // vertex coordinates
    this.x = x;
    this.y = y;

    // previous and next vertice nodes in a polygon ring
    this.prev = null;
    this.next = null;

    // z-order curve value
    this.z = null;

    // previous and next nodes in z-order
    this.prevZ = null;
    this.nextZ = null;

    // indicates whether this is a steiner point
    this.steiner = false;
}

// return a percentage difference between the polygon area and its triangulation area;
// used to verify correctness of triangulation
earcut.deviation = function (data, holeIndices, dim, triangles) {
    var hasHoles = holeIndices && holeIndices.length;
    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;

    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
    if (hasHoles) {
        for (var i = 0, len = holeIndices.length; i < len; i++) {
            var start = holeIndices[i] * dim;
            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
            polygonArea -= Math.abs(signedArea(data, start, end, dim));
        }
    }

    var trianglesArea = 0;
    for (i = 0; i < triangles.length; i += 3) {
        var a = triangles[i] * dim;
        var b = triangles[i + 1] * dim;
        var c = triangles[i + 2] * dim;
        trianglesArea += Math.abs(
            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -
            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
    }

    return polygonArea === 0 && trianglesArea === 0 ? 0 :
        Math.abs((trianglesArea - polygonArea) / polygonArea);
};

function signedArea(data, start, end, dim) {
    var sum = 0;
    for (var i = start, j = end - dim; i < end; i += dim) {
        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
        j = i;
    }
    return sum;
}

// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts
earcut.flatten = function (data) {
    var dim = data[0][0].length,
        result = {vertices: [], holes: [], dimensions: dim},
        holeIndex = 0;

    for (var i = 0; i < data.length; i++) {
        for (var j = 0; j < data[i].length; j++) {
            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);
        }
        if (i > 0) {
            holeIndex += data[i - 1].length;
            result.holes.push(holeIndex);
        }
    }
    return result;
};
earcut_1.default = default_1;

var nerdamer_core = createCommonjsModule(function (module) {
/*
 * Author : Martin Donk
 * Website : http://www.nerdamer.com
 * Email : martin.r.donk@gmail.com
 * Source : https://github.com/jiggzson/nerdamer
 */

/* global trig, trigh */

var nerdamer = (function(imports) { 

    var version = '0.7.16',

        _ = new Parser(), //nerdamer's parser
        //import bigInt
        bigInt = imports.bigInt,
        
        Groups = {},
        
        //container of pregenerated primes
        PRIMES = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113
            ,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,
            257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,
            401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,
            563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,
            709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,
            877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,
            1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,
            1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,
            1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,
            1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,
            1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,
            1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,
            1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083],
        //this is the class which holds the utilities which are exported to the core
        //All utility functions which are to be made available to the core should be added to this object
        Utils = {},
        
        //Settings
        Settings = {
            //the max number up to which to cache primes. Making this too high causes performance issues
            init_primes: 1000,
            
            exclude: [],
            //If you don't care about division by zero for example then this can be set to true. 
            //Has some nasty side effects so choose carefully.
            suppress_errors: false,
            //the global used to invoke the libary to parse to a number. Normally cos(9) for example returns
            //cos(9) for convenience but parse to number will always try to return a number if set to true. 
            PARSE2NUMBER: false,
            //this flag forces the a clone to be returned when add, subtract, etc... is called
            SAFE: false,
            //the symbol to use for imaginary symbols
            IMAGINARY: 'i',
            //the modules used to link numeric function holders
            FUNCTION_MODULES: [Math],
            //Allow certain characters
            ALLOW_CHARS: ['π'],
            //Allow nerdamer to convert multi-character variables
            USE_MULTICHARACTER_VARS: true,
            //Allow changing of power operator
            POWER_OPERATOR: '^',
            //The variable validation regex
            //VALIDATION_REGEX: /^[a-z_][a-z\d\_]*$/i
            VALIDATION_REGEX: /^[a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ][a-z\d\_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]*$/i,
            //Aliases
            ALIASES: {
                'π': 'pi'
            },
            POSITIVE_MULTIPLIERS: false,
            //Cached items
            CACHE: {},
            //Print out warnings or not
            SILENCE_WARNINGS: false,
            //Precision
            PRECISION: 40
        },
        
        //Container for custom operators
        CUSTOM_OPERATORS = {

        },
        
        //Add the groups. These have been reorganized as of v0.5.1 to make CP the highest group
        //The groups that help with organizing during parsing. Note that for FN is still a function even 
        //when it's raised to a symbol, which typically results in an EX
        N   = Groups.N  = 1, // A number
        P   = Groups.P  = 2, // A number with a rational power e.g. 2^(3/5). 
        S   = Groups.S  = 3, // A single variable e.g. x. 
        EX  = Groups.EX = 4, // An exponential
        FN  = Groups.FN = 5, // A function
        PL  = Groups.PL = 6, // A symbol/expression having same name with different powers e.g. 1/x + x^2
        CB  = Groups.CB = 7, // A symbol/expression composed of one or more variables through multiplication e.g. x*y
        CP  = Groups.CP = 8, // A symbol/expression composed of one variable and any other symbol or number x+1 or x+y
        
        CONST_HASH = Settings.CONST_HASH = '#',
        
        //GLOBALS
        
        PARENTHESIS = Settings.PARENTHESIS = 'parens',

        //the function which represent vector
        VECTOR = Settings.VECTOR = 'vector',

        SQRT = Settings.SQRT = 'sqrt',
        
        ABS = Settings.ABS = 'abs',
        
        FACTORIAL = Settings.FACTORIAL = 'factorial',
        
        DOUBLEFACTORIAL = Settings.DOUBLEFACTORIAL = 'dfactorial',

        //the storage container "memory" for parsed expressions
        EXPRESSIONS = [],
        
        //variables
        VARS = {},
        
        //the container used to store all the reserved functions
        RESERVED = [],

        WARNINGS = [],
        
        /**
         * Checks to see if value is one of nerdamer's reserved names
         * @param {String} value
         * @return boolean
         */
        isReserved = Utils.isReserved = function(value) { 
            return RESERVED.indexOf(value) !== -1;
        },
        
        /**
         * Checks to see that all symbols in array are the same
         * @param {Symbol[]} arr
         * @returns {bool}
         */
        allSame = Utils.allSame = function(arr) {
            var last = arr[0];
            for(var i=1, l=arr.length; i<l; i++) 
                if(!arr[i].equals(last))
                    return false;
            return true;
        },

        /**
         * Use this when errors are suppressible
         * @param {String} msg
         */
        err = function(msg, ErrorObj) {
            if(!Settings.suppress_errors) {
                if(ErrorObj)
                    throw new ErrorObj(msg);
                else
                    throw new Error(msg);
            }
        },
        
        /**
         * Used to pass warnings or low severity errors about the library
         * @param msg
         */
        warn = Utils.warn = function(msg) {
            WARNINGS.push(msg);
            if(!Settings.SILENCE_WARNINGS && console && console.warn) {
                console.warn(msg);
            }
        },
        
        /**
         * Enforces rule: "must start with a letter or underscore and 
         * can have any number of underscores, letters, and numbers thereafter."
         * @param name The name of the symbol being checked
         * @param {String} typ - The type of symbols that's being validated
         * @throws {Exception} - Throws an exception on fail
         */
        validateName = Utils.validateName = function(name, typ) { 
            typ = typ || 'variable';
            if(Settings.ALLOW_CHARS.indexOf(name) !== -1)
                return;
            var regex = Settings.VALIDATION_REGEX;
            if(!(regex.test(name)) ) {
                throw new Error(name+' is not a valid '+typ+' name');
            }
        },
        /**
         * Finds intersection of two arrays
         * @param {array} a
         * @param {Array} b
         * @param {Array} compare_fn
         * @returns {Array}
         */
        intersection = Utils.intersection = function(a, b, compare_fn) {
            var c = [];
            if(a.length > b.length) {
                var t = a; a = b; b = t;
            }
            b = b.slice();
            var l = a.length, l2 = b.length;
            for(var i=0; i<l; i++) {
                var item = a[i];
                for(var j=0; j<l2; j++) {
                    var item2 = b[j];
                    if(item2 === undefined) continue;
                    var equals = compare_fn ? compare_fn(item, item2) : item === item2;
                    if(equals) {
                        b[j] = undefined;
                        c.push(item);
                        continue;
                    }
                }
            }
            return c;
        },
        //convert number from scientific format to decimal format
        scientificToDecimal = Utils.scientificToDecimal = function(num) {
            //if the number is in scientific notation remove it
            if(/\d+\.?\d*e[\+\-]*\d+/i.test(num)) {
                var zero = '0',
                    parts = String(num).toLowerCase().split('e'), //split into coeff and exponent
                    e = parts.pop(),//store the exponential part
                    l = Math.abs(e), //get the number of zeros
                    sign = e/l,
                    coeff_array = parts[0].split('.');
                if(sign === -1) {
                    num = zero + '.' + new Array(l).join(zero) + coeff_array.join('');
                }
                else {
                    var dec = coeff_array[1];
                    if(dec) l = l - dec.length;
                    num = coeff_array.join('') + new Array(l+1).join(zero);
                }
            }

            return num;
        },
        /**
         * Checks if number is a prime number
         * @param {Number} n - the number to be checked
         */
        isPrime  = Utils.isPrime = function(n) {
            var q = Math.floor(Math.sqrt(n));
            for (var i = 2; i <= q; i++) {
                if (n % i === 0) return false;
            }
            return true;
        },
        
        /**
         * Checks to see if a number or Symbol is a fraction
         * @param {Number|Symbol} num
         * @returns {boolean}
         */
        isFraction = Utils.isFraction = function(num) {
            if(isSymbol(num)) return isFraction(num.multiplier.toDecimal());
            return (num % 1 !== 0);
        },
        
        /**
         * Checks to see if the object provided is a Symbol
         * @param {Object} obj
         */
        isSymbol = Utils.isSymbol = function(obj) {
            return (obj instanceof Symbol);
        },
        
        /**
         * Checks to see if the object provided is an Expression
         * @param {Object} obj
         */
        isExpression = Utils.isExpression = function(obj) {
            return (obj instanceof Expression);
        },
        
        /**
         * Separates out the variables into terms of variabls. 
         * e.g. x+y+x*y+sqrt(2)+pi returns 
         * {x: x, y: y, x y: x*y, constants: sqrt(2)+pi
         * @param {type} symbol
         * @param {type} o
         * @returns {undefined}
         * @throws {Error} for expontentials
         */
        separate = Utils.separate = function(symbol, o) {
            symbol = _.expand(symbol);
            o = o || {};
            var insert = function(key, sym) {
                if(!o[key])
                    o[key] = new Symbol(0);
                o[key] = _.add(o[key], sym.clone());
            };
            symbol.each(function(x) {
                if(x.isConstant('all')) 
                    insert('constants', x);
                else if(x.group === S) {
                    insert(x.value, x);
                }
                else if(x.group === FN && (x.fname === ABS || x.fname === '')) {
                    separate(x.args[0]);
                }
                else if(x.group === EX || x.group === FN) {
                    throw new Error('Unable to separate. Term cannot be a function!');
                }
                else {
                    insert(variables(x).join(' '), x);
                }
            });
            
            return o;
        },
        
        //fills holes in an array with zero symbol
        fillHoles = Utils.fillHoles = function(arr, n) {
            n = n || arr.length;
            for(var i=0; i<n; i++) {
                var sym = arr[i];
                if(!sym)
                    arr[i] = new Symbol(0);
            }
            return arr;
        },
        
        /**
         * 
         * Checks to see if the object provided is a Vector
         * @param {Object} obj
         */
        isVector = Utils.isVector = function(obj) {
            return (obj instanceof Vector);
        },
        
        /**
         * Checks to see if the object provided is a Matrix
         * @param {Object} obj
         */
        isMatrix = Utils.isMatrix = function(obj) {
            return (obj instanceof Matrix);
        },
        
        /**
         * Checks to see if a symbol is in group N
         * @param {Symbol} symbol
         */
        isNumericSymbol = Utils.isNumericSymbol = function(symbol) {
            return symbol.group === N;
        },

        /**
         * Checks to see if a symbol is a variable with no multiplier nor power
         * @param {Symbol} symbol
         */
        isVariableSymbol = Utils.isVariableSymbol = function(symbol) {
            return symbol.group === S && symbol.multiplier.equals(1) && symbol.power.equals(1);
        },
        
        /**
         * Checks to see if the object provided is an Array
         * @param {Object} arr
         */
        isArray = Utils.isArray = function(arr) {
            return arr instanceof Array;
        },

        /**
         * Checks to see if a number is an integer
         * @param {Number} num
         */
        isInt = Utils.isInt = function(num) {
            return num % 1 === 0;
        },

        /**
         * @param {Number|Symbol} obj
         * @returns {boolean}
         */
        isNegative = Utils.isNegative = function(obj) {
            if( isSymbol(obj) ) {
                obj = obj.multiplier;
            }
            return obj.lessThan(0);
        },
        
        /**
         * @param {String} str
         * @returns {String} - returns a formatted string surrounded by brackets
         */
        inBrackets = Utils.inBrackets = function(str) {
            return '('+str+')';
        },
        
        /**
         * A helper function to replace parts of string
         * @param {String} str - The original string
         * @param {Integer} from - The starting index
         * @param {Integer} to - The ending index
         * @param {String} with_str - The replacement string
         * @returns {String} - A formatted string
         */
        stringReplace = Utils.stringReplace = function(str, from, to, with_str) {
            return str.substr(0, from)+with_str+str.substr(to, str.length);
        },
        
        /**
         * the Parser uses this to check if it's allowed to convert the obj to type Symbol
         * @param {Object} obj
         * @returns {boolean}
         */
        customType = Utils.customType = function(obj) {
            return obj !== undefined && obj.custom;
        },
        
        /**
         * Checks to see if numbers are both negative or are both positive
         * @param {Number} a
         * @param {Number} b
         * @returns {boolean}
         */
        sameSign = Utils.sameSign = function(a, b) {
            return (a < 0) === (b < 0);
        },
        
        /**
         * A helper function to replace multiple occurences in a string. Takes multiple arguments
         * @example format('{0} nice, {0} sweet')
         * //returns 'something nice, something sweet'
         */
        format = Utils.format = function() {
            var args = [].slice.call(arguments),
                str = args.shift();
                var new_str = str.replace(/{(\d+)}/g, function(match, index) {
                    var arg = args[index];
                    return typeof arg === 'function' ? arg() : arg;
                });

                return new_str;
        },
        
        /**
         * Returns an array of all the keys in an array
         * @param {Object} obj
         * @returns {Array}
         */
        keys = Utils.keys = Object.keys,

        /**
         * Returns the first encountered item in an object. Items do not have a fixed order in objects 
         * so only use if you need any first random or if there's only one item in the object
         * @param {Object} obj
         * @returns {*}
         */
        firstObject = Utils.firstObject = function(obj, key) {
            for( var x in obj ) 
                break;
            if(key)
                return x;
            return obj[x];
        },
        
        /**
         * Substitutes out variables for two symbols, parses them to a number and them compares them numerically
         * @param {Symbol} sym1
         * @param {Symbol} sym2
         * @param {String[]} vars - an optional array of variables to use
         * @returns {bool}
         */
        compare = Utils.compare = function(sym1, sym2, vars) {
            var n = 5; //a random number between 1 and 5 is good enough
            var scope = {}; // scope object with random numbers generated using vars
            var comparison;
            for(var i=0; i<vars.length; i++) 
                scope[vars[i]] = new Symbol(Math.floor(Math.random()*n)+1);
            block('PARSE2NUMBER', function() {
                comparison = _.parse(sym1, scope).equals(_.parse(sym2, scope));
            });
            return comparison;
        },
        
        /**
         * Returns the minimum number in an array
         * @param {Array} arr
         * @returns {Number} 
         */
        arrayMax = Utils.arrayMax = function(arr) {
            return Math.max.apply(undefined, arr);
        },

        /**
         * Returns the maximum number in an array
         * @param {Array} arr
         * @returns {Number} 
         */
        arrayMin = Utils.arrayMin = function(arr) {
            return Math.min.apply(undefined, arr);
        },
        
        /**
         * Clones array with clonable items
         * @param {Array} arr
         * @returns {Array}
         */
        arrayClone = Utils.arrayClone = function(arr) {
            var new_array = [], l = arr.length;
            for(var i=0; i<l; i++) new_array[i] = arr[i].clone();
            return new_array;
        },
        
        comboSort = Utils.comboSort = function(a, b) {
            var l = a.length,
                combined = []; //the linker
            for(var i=0; i<a.length; i++) {
                combined.push([a[i], b[i]]); //create the map
            }

            combined.sort(function(x, y) {
                return x[0] - y[0];
            });

            var na = [], nb = [];

            for(i=0; i<l; i++) {
                na.push(combined[i][0]);
                nb.push(combined[i][1]);
            }

            return [na, nb];
        },
        
        decompose_fn = Utils.decompose_fn = function(fn, wrt, as_obj) { 
            var ax, a, x, b;
            if(fn.group === CP) {
                var t = _.expand(fn.clone()).stripVar(wrt); 
                ax = _.subtract(fn.clone(), t.clone());
                b = t;
            }
            else
                ax = fn.clone(); 
            a = ax.stripVar(wrt);
            x = _.divide(ax.clone(), a.clone());
            b = b || new Symbol(0);
            if(as_obj) 
                return {
                    a: a,
                    x: x,
                    ax: ax,
                    b: b
                };
            return [a, x, ax, b];
        },
         /**
         * Rounds a number up to x decimal places
         * @param {Number} x
         * @param {Number} s
         */
        _round = Utils.round = function(x, s) { 
            s = typeof s === 'undefined' ? 14 : s;
            return Math.round( x*Math.pow( 10,s ) )/Math.pow( 10,s );
        },
        
        /**
         * This method traverses the symbol structure and grabs all the variables in a symbol. The variable
         * names are then returned in alphabetical order.
         * @param {Symbol} obj
         * @param {Boolean} poly 
         * @param {Object} vars - An object containing the variables. Do not pass this in as it generated 
         * automatically. In the future this will be a Collector object.
         * @returns {String[]} - An array containing variable names
         */
        variables = Utils.variables = function(obj, poly, vars) { 
            vars = vars || {
                c: [],
                add: function(value) {
                    if(this.c.indexOf(value) === -1 && isNaN(value)) this.c.push(value);
                }
            };

            if(isSymbol(obj)) { 
                var group = obj.group,
                    prevgroup = obj.previousGroup;
                if(group === EX) variables(obj.power, poly, vars);
                
                if(group === CP || group === CB || prevgroup === CP || prevgroup === CB) {
                    for(var x in obj.symbols) variables(obj.symbols[x], poly, vars);
                }
                else if(group === S || prevgroup === S) { 
                    //very crude needs fixing. TODO
                    if(!(obj.value === 'e' || obj.value === 'pi'))
                        vars.add(obj.value);
                }
                else if(group === PL || prevgroup === PL) {
                    variables(firstObject(obj.symbols), poly, vars);
                }
                else if(group === EX) { 
                    if(!isNaN(obj.value)) vars.add(obj.value);
                    variables(obj.power, poly, vars);
                }
                else if(group === FN && !poly) { 
                    for(var i=0; i<obj.args.length; i++) {
                        variables(obj.args[i], poly, vars);
                    }
                }
            }
            return vars.c.sort();
        },
        
        getU = Utils.getU = function(symbol) {
            //start with u
            var u = 'u', //start with u
                v = u, //init with u
                c = 0, //postfix number
                vars = variables(symbol);
            //make sure this variable isn't reserved and isn't in the variable list
            while(!(RESERVED.indexOf(v) === -1 && vars.indexOf(v) === -1))  
                v = u + c++;
            //get an empty slot. It seems easier to just push but the
            //problem is that we may have some which are created by clearU
            for(var i=0, l=RESERVED.length; i<=l; i++)
                //reserved cannot equals false or 0 so we can safely check for a falsy type
                if(!RESERVED[i]) {
                    RESERVED[i] = v; //reserve the variable
                    break;
                }
            return v;
        },
        
        clearU = Utils.clearU = function(u) {
            var indx = RESERVED.indexOf(u);
            if(indx !== -1)
                RESERVED[indx] = undefined;
        },
        
        /**
         * Loops through each item in object and calls function with item as param
         * @param {Object|Array} obj
         * @param {Function} fn 
         */
        each = Utils.each = function(obj, fn) {
            if(isArray(obj)) {
                var l = obj.length;
                for(var i=0; i<l; i++) fn.call(obj, i);
            }
            else {
                for(var x in obj) if(obj.hasOwnProperty(x)) fn.call(obj, x);
            }
        },
        
        /**
         * Checks to see if a number is an even number
         * @param {Number} num
         * @returns {boolean}
         */
        even = Utils.even = function(num) {
            return num % 2 === 0;
        },
        
        /**
         * Checks to see if a fraction is divisible by 2
         * @param {Number} num
         * @returns {boolean}
         */
        evenFraction = Utils.evenFraction = function(num) {
            return 1/( num % 1) % 2 === 0;
        },
        
        /**
         * Strips duplicates out of an array
         * @param {Array} arr
         */
        arrayUnique = Utils.arrayUnique = function(arr) {
            var l = arr.length, a = [];
            for(var i=0; i<l; i++) {
                var item = arr[i];
                if(a.indexOf(item) === -1) a.push(item);
            }
            return a;
        },
        
        /**
         * Reserves the names in an object so they cannot be used as function names
         * @param {Object} obj
         */
        reserveNames = Utils.reserveNames = function(obj) {
            var add = function(item) {
                if(RESERVED.indexOf(item) === -1) RESERVED.push(item);
            };
            
            if(typeof obj === 'string') add(obj);
            else {
                each(obj, function(x) {
                    add(x);
                });
            }  
        },

        /**
         * Removes an item from either an array or an object. If the object is an array, the index must be 
         * specified after the array. If it's an object then the key must be specified
         * @param {Object|Array} obj
         * @param {Integer} indexOrKey
         */
        remove = Utils.remove = function( obj, indexOrKey ) {
            var result;
            if( isArray(obj) ) {
                result =  obj.splice(indexOrKey, 1)[0];
            }
            else {
                result = obj[indexOrKey];
                delete obj[indexOrKey];
            }
            return result;
        },
        
        /**
         * Creates a temporary block in which one of the global settings is temporarily modified while
         * the function is called. For instance if you want to parse directly to a number rather than have a symbolic
         * answer for a period you would set PARSE2NUMBER to true in the block.
         * @example block('PARSE2NUMBER', function(){//symbol being parsed to number}, true);
         * @param {String} setting - The setting being accessed
         * @param {Function} f 
         * @param {boolean} opt - The value of the setting in the block
         * @param {String} obj - The obj of interest. Usually a Symbol but could be any object
         */
        block = Utils.block = function(setting, f, opt, obj) {
            var current_setting = Settings[setting];
            Settings[setting] = opt === undefined ? true : !! opt;
            var retval = f.call(obj);
            Settings[setting] = current_setting;
            return retval;
        },

        /**
         * Converts function arguments to an array. Now used by gcd and lcm in Algebra.js :)
         * @param {Object} obj - arguments obj
         */
        arguments2Array = Utils.arguments2Array = function(obj) {
            return [].slice.call(obj);
        },
        
        getCoeffs = Utils.getCoeffs = function(symbol, wrt) {
            var coeffs = [];
            //we loop through the symbols and stick them in their respective 
            //containers e.g. y*x^2 goes to index 2
            symbol.each(function(term) {
                if(term.contains(wrt)) {
                    //we want only the coefficient which in this case will be everything but the variable
                    //e.g. a*b*x -> a*b if the variable to solve for is x
                    var coeff = term.stripVar(wrt),
                        x = _.divide(term.clone(), coeff.clone()),
                        p = x.power.toDecimal();
                }
                else {
                    coeff = term;
                    p = 0;
                }
                var e = coeffs[p];
                //if it exists just add it to it
                coeffs[p] = e ? _.add(e, coeff) : coeff;
                
            }, true);
            
            for(var i=0; i<coeffs.length; i++)
                if(!coeffs[i])
                    coeffs[i] = new Symbol(0);
            //fill the holes
            return coeffs;
        },
        
        generatePrimes = Utils.generatePrimes = function(upto) {
            //get the last prime in the array
            var last_prime = PRIMES[PRIMES.length-1] || 2; 
            //no need to check if we've already encountered the number. Just check the cache.
            for(var i=last_prime; i<upto; i++) {
                if(isPrime(i)) PRIMES.push(i);
            }
        },
        evaluate = Utils.evaluate = function (symbol) {
            return block('PARSE2NUMBER', function() {
                return _.parse(symbol);
            }, true);
        },
        convertToVector = Utils.convertToVector = function(x) {
            if(isArray(x)) {
                var vector = new Vector([]);
                for(var i=0; i<x.length; i++) 
                    vector.elements.push(convertToVector(x[i]));
                return vector;
            }
            //Ensure that a nerdamer ready object is returned
            if(!isSymbol(x))
                return _.parse(x);
            return x;
        },
        //This object holds additional functions for nerdamer. Think of it as an extension of the Math object.
        //I really don't like touching objects which aren't mine hence the reason for Math2. The names of the 
        //functions within are pretty self-explanatory.
        Math2 = {
            csc: function(x) { return 1/Math.sin(x); },
            sec: function(x) { return 1/Math.cos(x); },
            cot: function(x) { return 1/Math.tan(x); },
            // https://gist.github.com/jiggzson/df0e9ae8b3b06ff3d8dc2aa062853bd8
            erf: function(x) {
                var t = 1/(1+0.5*Math.abs(x));
                var result = 1-t*Math.exp( -x*x -  1.26551223 +
                        t * ( 1.00002368 +
                        t * ( 0.37409196 +
                        t * ( 0.09678418 +
                        t * (-0.18628806 +
                        t * ( 0.27886807 +
                        t * (-1.13520398 +
                        t * ( 1.48851587 +
                        t * (-0.82215223 +
                        t * ( 0.17087277)))))))))
                    );
                return x >= 0 ? result : -result;
            },
            bigpow: function(n, p) { 
                if(!(n instanceof Frac))
                    n = Frac.create(n);
                if(!(p instanceof Frac))
                    p = Frac.create(p);
                var retval = new Frac(0);
                if(p.isInteger()) {
                    retval.num = n.num.pow(p.toString());
                    retval.den = n.den.pow(p.toString());
                }
                else {
                    var num = Frac.create(Math.pow(n.num, p.num));
                    var den = Frac.create(Math.pow(n.den, p.num));

                    retval.num = Math2.nthroot(num, p.den.toString());
                    retval.den = Math2.nthroot(den, p.den);
                }  
                return retval;
            },
            //http://stackoverflow.com/questions/15454183/how-to-make-a-function-that-computes-the-factorial-for-numbers-with-decimals
            gamma: function(z) {
                var g = 7;
                var C = [
                    0.99999999999980993, 
                    676.5203681218851, 
                    -1259.1392167224028,
                    771.32342877765313, 
                    -176.61502916214059, 
                    12.507343278686905, 
                    -0.13857109526572012, 
                    9.9843695780195716e-6, 
                    1.5056327351493116e-7]
                ;

                if (z < 0.5) 
                    return Math.PI / (Math.sin(Math.PI * z) * Math2.gamma(1 - z));
                else {
                    z -= 1;

                    var x = C[0];
                    for (var i = 1; i < g + 2; i++)
                    x += C[i] / (z + i);

                    var t = z + g + 0.5;
                    return Math.sqrt(2 * Math.PI) * Math.pow(t, (z + 0.5)) * Math.exp(-t) * x;
                }
            },
            //factorial
            bigfactorial: function(x) {
                var retval = new Frac(1);
                for (var i = 2; i <= x; i++) 
                    retval = retval.multiply(new Frac(i));
                return retval;
            },
            //https://en.wikipedia.org/wiki/Logarithm#Calculation
            bigLog: function(x) {
                var
                if(CACHE[x]) {
                    return Frac.quick.apply(null, CACHE[x].split('/'));
                }
                x = new Frac(x);
                var n = 80;
                var retval = new Frac(0); 
                var a = x.subtract(new Frac(1));
                var b = x.add(new Frac(1));
                for(var i=0; i<n; i++) {
                    var t = new Frac(2*i+1);
                    var k = Math2.bigpow(a.divide(b), t);
                    var r = t.clone().invert().multiply(k);
                    retval = retval.add(r);
                    
                }
                return retval.multiply(new Frac(2));
            },
            //the factorial function but using the big library instead
            factorial: function(x) {
                if(x < 0)
                    throw new Error('factorial not defined for negative numbers');
                var retval=1;
                for (var i = 2; i <= x; i++) retval = retval * i;
                return retval;
            },
            //double factorial
            dfactorial: function(x) {
                var even = x % 2 === 0;
                // If x = even then n = x/2 else n = (x-1)/2
                var n = even ? x/2 : (x+1)/2; 
                //the return value
                var r = new Frac(1);
                //start the loop
                if(even)
                    for(var i=1; i<=n; i++)
                        r = r.multiply(new Frac(2).multiply(new Frac(i)));
                else
                    for(var i=1; i<=n; i++)
                        r = r.multiply(new Frac(2).multiply(new Frac(i)).subtract(new Frac(1)));
                //done
                return r;
            },
            GCD: function() {
                var args = arrayUnique([].slice.call(arguments)
                        .map(function(x){ return Math.abs(x); })).sort(),
                    a = Math.abs(args.shift()),
                    n = args.length;

                while(n-- > 0) { 
                    var b = Math.abs(args.shift());
                    while(true) {
                        a %= b;
                        if (a === 0) {
                            a = b;
                            break;
                        }
                        b %= a;
                        if (b === 0) break;                    }
                }
                return a;
            },
            QGCD: function() {
                var args = [].slice.call(arguments);
                var a = args[0];
                for(var i=1; i<args.length; i++) {
                    var b = args[i];
                    var sign = a.isNegative() && b.isNegative() ? -1 : 1;
                    a = b.gcd(a);
                    if(sign < 0) a.negate();
                }
                return a;
            },
            LCM: function(a, b) {
                return (a * b) / Math2.GCD(a, b); 
            },
            //pow but with the handling of negative numbers
            //http://stackoverflow.com/questions/12810765/calculating-cubic-root-for-negative-number
            pow: function(b, e) { 
                if (b < 0) {
                    if (Math.abs(e) < 1) {
                        //nth root of a negative number is imaginary when n is even
                        if (1 / e % 2 === 0) return NaN;
                        return -Math.pow(Math.abs(b), e);
                    }
                }
                return Math.pow(b, e);
            },
            factor: function(n) {
                var ifactors = Math2.ifactor(n);
                var factors = new Symbol();
                factors.symbols = {};
                factors.group = CB;
                for(var x in ifactors) {
                    var factor = new Symbol(1);
                    factor.group = P; //cheat a little
                    factor.value = x;
                    factor.power = new Symbol(ifactors[x]);
                    factors.symbols[x] = factor;
                }
                factors.updateHash();
                return factors;
            },
            /**
             * Uses trial division
             * @param {Integer} n - the number being factored
             * @param {object} factors -  the factors object
             * @returns {object}
             */
            sfactor: function(n, factors) { 
                factors = factors || {};
                var r = Math.floor(Math.sqrt(n));
                var lcprime = PRIMES[PRIMES.length-1];
                //a one-time cost... Hopefully ... And don't bother for more than a million
                //takes too long
                if(r > lcprime && n < 1e6) generatePrimes(r);
                var l = PRIMES.length;
                for(var i=0; i<l; i++) {
                    var prime = PRIMES[i];
                    //trial division
                    while(n%prime === 0) {
                        n = n/prime;
                        factors[prime] = (factors[prime] || 0)+1;
                    }
                }
                if(n > 1) factors[n] = 1;
                return factors;
            },
            /**
             * Pollard's rho
             * @param {Integer} n
             * @returns {object}
             */
            ifactor: function(n) {  
                n = String(n);
                
                if(n === '0')
                    return {'0': 1};
                n = new bigInt(n); //convert to bigInt for safety
                var sign = n.sign ? -1 : 1;
                n = n.abs();
                var factors = {}; //factor object being returned.
                if(n.lt('65536')) { //less than 2^16 just use trial division
                    factors = Math2.sfactor(n, factors);
                }
                else { 
                    var add = function(e) {
                        if(!e.isPrime()) { 
                            factors = Math2.sfactor(e, factors);
                        }
                        else
                            factors[e] = (factors[e] || 0)+1;
                    };

                    while(!n.abs().equals(1)) {
                        if(n.isPrime()) {
                            add(n);
                            break;
                        }
                        else {
                            var xf = new bigInt(2),
                                cz = new bigInt(2),
                                x = new bigInt(2),
                                factor = new bigInt(1);

                            while(factor.abs().equals(1)) { 
                                for(var i=0; i<=cz && factor <=1; i++) {
                                    x = x.pow(2).add(1).mod(n);
                                    factor = bigInt.gcd(x.minus(xf), n);
                                }

                                cz = cz.times(2);
                                xf = x;
                            }
                            add(factor);
                            //divide out the factor
                            n = n.divide(factor);
                        }
                    }
                }
                
                //put the sign back
                if(sign === -1) {
                    var sm = arrayMin(keys(factors)); ///get the smallest number
                    factors['-'+sm] = factors[sm];
                    delete factors[sm];
                }
                
                return factors;
            },
            //factors a number into rectangular box. If sides are primes that this will be
            //their prime factors. e.g. 21 -> (7)(3), 133 -> (7)(19)
            boxfactor: function(n, max) {
                max = max || 200; //stop after this number of iterations
                var c, r,
                    d = Math.floor((5/12)*n), //the divisor
                    i = 0, //number of iterations
                    safety = false;
                while(true)  {
                    c = Math.floor(n/d);
                    r = n % d;
                    if(r === 0) break; //we're done
                    if(safety) return [n, 1];
                    d = Math.max(r, d-r);
                    i++;
                    safety = i > max;
                }
                return [c, d, i];
            },
            fib: function(n) {
                var sign = Math.sign(n);
                n = Math.abs(n);
                sign = even(n) ? sign : Math.abs(sign);
                var a = 0, b = 1, f = 1;
                for(var i = 2; i <= n; i++) {
                    f = a + b;
                    a = b;
                    b = f;
                }
                return f*sign;
            },
            mod: function(x, y) {
                return x % y;
            },
            /**
             * https://github.com/scijs/integrate-adaptive-simpson
             * @param {Function} f - the function being integrated
             * @param {Number} l - lower bound
             * @param {Number} u - upper bound
             * @param {Number} dx - step width
             * @returns {Number}
             */
            num_integrate: function(f, a, b, tol, maxdepth) {
                // This algorithm adapted from pseudocode in:
                // http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf
                function adsimp (f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {
                    if (state.nanEncountered) {
                        return NaN;
                    }
                    var h, f1, f2, sl, sr, s2, m, V1, V2, err;
                    h = b - a;
                    f1 = f(a + h * 0.25);
                    f2 = f(b - h * 0.25);
                    // Simple check for NaN:
                    if (isNaN(f1)) {
                        state.nanEncountered = true;
                        return;
                    }
                    // Simple check for NaN:
                    if (isNaN(f2)) {
                        state.nanEncountered = true;
                        return;
                    }

                    sl = h * (fa + 4 * f1 + fm) / 12;
                    sr = h * (fm + 4 * f2 + fb) / 12;
                    s2 = sl + sr;
                    err = (s2 - V0) / 15;

                    if (depth > maxdepth) {
                        state.maxDepthCount++;
                        return s2 + err;
                    } 
                    else if (Math.abs(err) < tol) {
                        return s2 + err;
                    } 
                    else {
                        m = a + h * 0.5;
                        V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);
                        if (isNaN(V1)) {
                            state.nanEncountered = true;
                            return NaN;
                        }
                        V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);

                        if (isNaN(V2)) {
                            state.nanEncountered = true;
                            return NaN;
                        }
                        
                        return V1 + V2;
                    }
                }

                function integrate (f, a, b, tol, maxdepth) {
                    var state = {
                        maxDepthCount: 0,
                        nanEncountered: false
                    };

                    if (tol === undefined) {
                        tol = 1e-9;
                    }
                    if (maxdepth === undefined) {
                        maxdepth = 45;
                    }

                    var fa = f(a);
                    var fm = f(0.5 * (a + b));
                    var fb = f(b);

                    var V0 = (fa + 4 * fm + fb) * (b - a) / 6;

                    var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);

                    if (state.maxDepthCount > 0) {
                        warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');
                    }

                    if (state.nanEncountered) {
                        throw new UndefinedError('Function does not converge over interval!');
                    }

                    return result;
                }
                
                return Utils.round(integrate(f, a, b, tol, maxdepth), 12);
            },
            //https://en.wikipedia.org/wiki/Trigonometric_integral
            //CosineIntegral
            Ci: function(x) {
                var n =20,
                    g = 0.5772156649015329, //roughly Euler–Mascheroni
                    sum = 0;
                for(var i=1; i<n; i++) {
                    var n2 = 2*i; //cache 2n
                    sum += (Math.pow(-1, i)*Math.pow(x, n2))/(n2*Math2.factorial(n2));
                }
                return Math.log(x) + g + sum;
            },
            //SineIntegral
            Si: function(x) {
                var n = 20,
                    sum = 0;
                for(var i=0; i<n; i++) {
                    var n2 = 2*i;
                    sum += (Math.pow(-1, i)*Math.pow(x, n2+1))/((n2+1)*Math2.factorial(n2+1));
                }
                return sum;
            },
            //ExponentialIntegral
            Ei: function(x) { 
                if(x.equals(0))
                    return -Infinity;
                var n =30,
                    g = 0.5772156649015328606, //roughly Euler–Mascheroni
                    sum = 0;
                for(var i=1; i<n; i++) {
                    sum += Math.pow(x, i)/(i*Math2.factorial(i));
                }
                return g+Math.abs(Math.log(x))+sum;
            },
            //Hyperbolic Sine Integral
            //http://mathworld.wolfram.com/Shi.html
            Shi: function(x) {
                var n = 30,
                    sum = 0,
                    k, t;
                for(var i=0; i<n; i++) {
                    k = 2*i; 
                    t = k+1;
                    sum += Math.pow(x, t)/(t*t*Math2.factorial(k));
                }
                return sum;
            },
            //the cosine integral function
            Chi: function(x) {
                var dx, g, f;
                dx = 0.001;
                g = 0.5772156649015328606;
                f = function(t) {
                    return (Math.cosh(t)-1)/t;
                };
                return Math.log(x)+g+Math2.num_integrate(f, 0.002, x, dx);
            },
            //the gamma incomplete function
            gamma_incomplete: function(n, x) {
                var t = n-1,
                    sum = 0,
                    x = x || 0;
                for(var i=0; i<t; i++) {
                    sum += Math.pow(x, i)/Math2.factorial(i);
                }
                return Math2.factorial(t)*Math.exp(-x)*sum;
            },
            /*
            * Heaviside step function - Moved from Special.js (originally contributed by Brosnan Yuen)
            * Specification : http://mathworld.wolfram.com/HeavisideStepFunction.html
            * if x > 0 then 1
            * if x == 0 then 1/2
            * if x < 0 then 0
            */
            step: function(x) {
                if(x > 0)
                    return 1;
                if(x < 0)
                    return 0;
                return 0.5;
            },
            /*
            * Rectangle function - Moved from Special.js (originally contributed by Brosnan Yuen)
            * Specification : http://mathworld.wolfram.com/RectangleFunction.html
            * if |x| > 1/2 then 0
            * if |x| == 1/2 then 1/2
            * if |x| < 1/2 then 1
            */
            rect: function(x) {
                var x = Math.abs(x);
                if(x === 0.5)
                    return x;
                if(x > 0.5)
                    return 0;
                return 1;
            },
            /*
            * Sinc function - Moved from Special.js (originally contributed by Brosnan Yuen)
            * Specification : http://mathworld.wolfram.com/SincFunction.html
            * if x == 0 then 1
            * otherwise sin(x)/x
            */
            sinc: function(x) {
                if(x.equals(0))
                    return 1;
                return Math.sin(x)/x;
            },
            /*
            * Triangle function - Moved from Special.js (originally contributed by Brosnan Yuen)
            * Specification : http://mathworld.wolfram.com/TriangleFunction.html
            * if |x| >= 1 then 0
            * if |x| < then 1-|x|
            */
            tri: function(x) {
                x = Math.abs(x);
                if(x >= 1)
                    return 0;
                return 1-x;
            },
            //https://en.wikipedia.org/wiki/Nth_root_algorithm
            nthroot: function(A, n) { 
                //make sure the input is of type Frac
                if(!(A instanceof Frac))
                    A = new Frac(A.toString());
                if(!(n instanceof Frac))
                    n = new Frac(n.toString());
                if(n.equals(1))
                    return A;
                //begin algorithm
                var xk = A.divide(new Frac(2)); //x0
                var e = new Frac(1e-15);
                var dk, dk0, d0;
                var a = n.clone().invert(),
                    b = n.subtract(new Frac(1));
                do {
                    var powb = Math2.bigpow(xk, b);
                    var dk_dec = a.multiply(A.divide(powb).subtract(xk)).toDecimal(25);
                    dk = Frac.create(dk_dec);
                    if(d0)
                        break;
                    
                    xk = xk.add(dk);
                    //check to see if there's no change from the last xk
                    var dk_dec = dk.toDecimal();
                    d0 = dk0 ? dk0 === dk_dec : false;
                    dk0 = dk_dec;
                }
                while(dk.abs().gte(e))

                return xk;
            }
        };
        //link the Math2 object to Settings.FUNCTION_MODULES
        Settings.FUNCTION_MODULES.push(Math2);

        var cacheRoots = function() {
            Settings.CACHE.roots = {};
            var x = 40, 
                y = 40;
            for(var i=2; i<=x; i++) {
                for(var j=2; j<=y; j++) {
                    var nthpow = bigInt(i).pow(j);
                    Settings.CACHE.roots[nthpow+'-'+j] = i;
                }
            }
        };
        cacheRoots();
        //polyfills
        //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/
        Math.sign = Math.sign || function(x) { 
            x = +x; // convert to a number
            if (x === 0 || isNaN(x)) {
                return x;
            }
            return x > 0 ? 1 : -1;
        };
        
        Math.cosh = Math.cosh || function(x) {
            var y = Math.exp(x);
            return (y + 1 / y) / 2;
        };
        
        Math.sech = Math.sech || function(x) {
            return 1/Math.cosh(x);
        };
        
        Math.csch = Math.csch || function(x) {
            return 1/Math.sinh(x);
        };
        
        Math.coth = Math.coth || function(x) {
            return 1/Math.tanh(x);
        };
        
        Math.sinh = Math.sinh || function(x) {
            var y = Math.exp(x);
            return (y - 1 / y) / 2;
        };
        
        Math.tanh = Math.tanh || function(x) {
            if (x === Infinity) {
                return 1;
            } else if (x === -Infinity) {
                return -1;    
            } else {
                var y = Math.exp(2 * x);
                return (y - 1) / (y + 1);
            }
        };
        
        Math.asinh = Math.asinh || function(x) {
            if (x === -Infinity) {
              return x;
            } else {
              return Math.log(x + Math.sqrt(x * x + 1));
            }
        };
        
        Math.acosh = Math.acosh || function(x) {
            return Math.log(x + Math.sqrt(x * x - 1));
        };
        
        Math.atanh = Math.atanh || function(x) {
            return Math.log((1+x)/(1-x)) / 2;
        };
        
        Math.log10 = Math.log10 || function(x) {
            return Math.log(x) * Math.LOG10E;
        };
        
        Math.trunc = Math.trunc || function(x) {
        if (isNaN(x)) {
            return NaN;
        }
        if (x > 0) {
            return Math.floor(x);
        }
        return Math.ceil(x);
      };

        reserveNames(Math2); //reserve the names in Math2
        
    /* GLOBAL FUNCTIONS */
    /**
     * This method will return a hash or a text representation of a Symbol, Matrix, or Vector. 
     * If all else fails it *assumes* the object has a toString method and will call that.
     * 
     * @param {Object} obj
     * @param {String} option get is as a hash 
     * @returns {String}
     */
    function text(obj, option, useGroup) { 
        var asHash = option === 'hash',
            asDecimal = option === 'decimals' || option === 'decimal',
            opt = asHash ? undefined : option;
        //if the object is a symbol
        if(isSymbol(obj)) { 
            var multiplier = '', 
            power = '',
            sign = '',
            group = obj.group || useGroup,
            value = obj.value;
            //if the value is to be used as a hash then the power and multiplier need to be suppressed
            if(!asHash) { 
                //use asDecimal to get the object back as a decimal
                var om = asDecimal ? obj.multiplier.valueOf() : obj.multiplier.toString();
                if(om == '-1') {
                    sign = '-';
                    om = '1';
                }
                //only add the multiplier if it's not 1
                if(om != '1') multiplier = om;
                //use asDecimal to get the object back as a decimal
                var p = obj.power ? (asDecimal ? obj.power.valueOf() : obj.power.toString()) : '';
                //only add the multiplier 
                if(p != '1') {
                    //is it a symbol
                    if(isSymbol(p)) {
                        power = text(p, opt);
                    }
                    else {
                        power = p;
                    }
                }
            }

            switch(group) {
                case N:
                    multiplier = '';
                    //if it's numerical then all we need is the multiplier
                    value = obj.multiplier == '-1' ? '1' : asDecimal ? obj.valueOf() : obj.multiplier.toString();
                    power = '';
                    break;
                case PL:
                    value = obj.collectSymbols(text, opt).join('+').replace(/\+\-/g, '-');
                    break;
                case CP:
                    value = obj.collectSymbols(text, opt).join('+').replace(/\+\-/g, '-');
                    break;
                case CB: 
                    value = obj.collectSymbols(function(symbol){
                        var g = symbol.group;
                        //both groups will already be in brackets if their power is greater than 1
                        //so skip it.
                        if((g === PL || g === CP) && (symbol.power.equals(1) && symbol.multiplier.equals(1))) {
                            return inBrackets(text(symbol, opt));
                        }
                        return text(symbol, opt);
                    }).join('*');
                    break;
                case EX:
                    var pg = obj.previousGroup,
                        pwg = obj.power.group;
                
                    //PL are the exception. It's simpler to just collect and set the value
                    if(pg === PL) value = obj.collectSymbols(text, opt).join('+').replace('+-', '-');
                    if(!(pg === N || pg === S || pg === FN) && !asHash) { value = inBrackets(value); }
 
                    if((pwg === CP || pwg === CB || pwg === PL || obj.power.multiplier.toString() != '1') && power) {
                        power = inBrackets(power);
                    }
                    break;
            }
            
            if(group === FN && asDecimal) { 
                value = obj.fname+inBrackets(obj.args.map(function(symbol) {
                    return text(symbol, opt);
                }).join(','));
            }
            //TODO: Needs to be more efficient. Maybe. 
            if(group === FN && obj.fname in CUSTOM_OPERATORS) {
                var a = text(obj.args[0]);
                var b = text(obj.args[1]);
                if(obj.args[0].isComposite()) //preserve the brackets
                    a = inBrackets(a);
                if(obj.args[1].isComposite()) //preserve the brackets
                    b = inBrackets(b);
                value = a+CUSTOM_OPERATORS[obj.fname]+b;
            }
            //wrap the power since / is less than ^
            //TODO: introduce method call isSimple
            if(power && !isInt(power) && group !== EX && !asDecimal) { power = inBrackets(power); }

            //the following groups are held together by plus or minus. They can be raised to a power or multiplied
            //by a multiplier and have to be in brackets to preserve the order of precedence
            if(((group === CP || group === PL) && (multiplier && multiplier != '1' || sign === '-')) 
                    || ((group === CB || group === CP || group === PL) && (power && power != '1'))
                    || !asHash && group === P && value == -1
                    || obj.fname === PARENTHESIS) { 
                
                value = inBrackets(value);
            }
            
            var c = sign+multiplier;
            if(multiplier && !isInt(multiplier) && !asDecimal) c = inBrackets(c);
            
            if(power < 0) power = inBrackets(power);
            if(multiplier) c = c + '*';
            if(power) power = Settings.POWER_OPERATOR + power;

            //this needs serious rethinking. Must fix
            if(group === EX && value.charAt(0) === '-') value = inBrackets(value);
            
            var cv = c+value;
            
            if(obj.parens) cv = inBrackets(cv);

            return cv+power;
        }
        else if(isVector(obj)) { 
            var l = obj.elements.length,
                c = [];
            for(var i=0; i<l; i++) c.push(obj.elements[i].text(option));
            return '['+c.join(',')+']';
        }
        else {
            try {
                return obj.toString();
            }
            catch(e) { return ''; }
        }
    }
    
    Utils.text = text;
    
    /** 
     * This is what nerdamer returns. It's sort of a wrapper around the symbol class and 
     * provides the user with some useful functions. If you want to provide the user with extra
     * library functions then add them to this class's prototype.
     * @param {Symbol} symbol
     * @returns {Expression} wraps around the Symbol class
     */
    function Expression(symbol) {
        //we don't want arrays wrapped
        this.symbol = symbol;
    }
    
    /**
     * Returns stored expression at index. For first index use 1 not 0.
     * @param {bool} asType  
     * @param {Integer} expression_number 
     */
    Expression.getExpression = function(expression_number, asType) {
        if(expression_number === 'last' || !expression_number) expression_number = EXPRESSIONS.length;
        if(expression_number === 'first') expression_number = 1;
        var index = expression_number -1,
            expression = EXPRESSIONS[index],
            retval = expression ? new Expression(expression) : expression;
        return retval;
    };
    
    Expression.prototype = {
        /**
         * Returns the text representation of the expression
         * @param {String} opt - option of formatting numbers
         * @returns {String}
         */
        text: function(opt) { 
            opt = opt || 'decimals';
            if(this.symbol.text_)
                return this.symbol.text_(opt);
            return text(this.symbol, opt);
        },
        /**
         * Returns the latex representation of the expression
         * @param {String} option - option for formatting numbers
         * @returns {String}
         */
        latex: function(option) {
            if(this.symbol.latex)
                return this.symbol.latex(option);
            return LaTeX.latex(this.symbol, option);
        },
        valueOf: function() { 
            return this.symbol.valueOf();
        },
        
        /**
         * Evaluates the expression and tries to reduce it to a number if possible.
         * If an argument is given in the form of %{integer} it will evaluate that expression.
         * Other than that it will just use it's own text and reparse
         * @returns {Expression}
         */
        evaluate: function() {
            var first_arg = arguments[0], expression, idx = 1;
            if(typeof first_arg === 'string') {
                expression = (first_arg.charAt(0) === '%') ? Expression.getExpression(first_arg.substr(1)).text() : first_arg;
            }
            else if(first_arg instanceof Expression || isSymbol(first_arg)) {
                expression = first_arg.text();
            }
            else {
                expression = this.symbol.text(); idx--;
            }
            
            var subs = arguments[idx] || {};
            
            return new Expression(block('PARSE2NUMBER', function() {
                return _.parse(expression, subs);
            }, true));
        },
        /**
         * Converts a symbol to a JS function. Pass in an array of variables to use that order instead of 
         * the default alphabetical order
         * @param vars {Array}
         */
        buildFunction: function(vars) {
            return build(this.symbol, vars);
        },
        /**
         * Checks to see if the expression is just a plain old number
         * @returns {boolean}
         */
        isNumber: function() {
            return isNumericSymbol(this.symbol);
        },
        /**
         * Checks to see if the expression is infinity
         * @returns {boolean}
         */
        isInfinity: function() {
            return Math.abs(this.symbol.multiplier) === Infinity;
        },
        /**
         * Returns all the variables in the expression
         * @returns {Array}
         */
        variables: function() {
            return variables(this.symbol);
        },
        
        toString: function() {
            try {
                if(isArray(this.symbol)) return '['+this.symbol.toString()+']';
                return this.symbol.toString();
            }
            catch(e) { return ''; }
        },
        //forces the symbol to be returned as a decimal
        toDecimal: function(prec) {
            Settings.precision = prec;
            var dec = text(this.symbol, 'decimals');
            Settings.precision = undefined;
            return dec;
        },
        //checks to see if the expression is a fraction
        isFraction: function() {
            return isFraction(this.symbol);
        },
        //checks to see if the symbol is a multivariate polynomial
        isPolynomial: function() {
            return this.symbol.isPoly();
        }, 
        //performs a substitution
        sub: function(symbol, for_symbol) {
            return new Expression(this.symbol.sub(_.parse(symbol), _.parse(for_symbol)));
        },
        operation: function(otype, symbol) {
            if(isExpression(symbol))
                symbol = symbol.symbol;
            else if(!isSymbol(symbol))
                symbol = _.parse(symbol);
            return new Expression(_[otype](this.symbol.clone(), symbol.clone()));
        },
        add: function(symbol) {
            return this.operation('add', symbol);
        },
        subtract: function(symbol) {
            return this.operation('subtract', symbol);
        },
        multiply: function(symbol) {
            return this.operation('multiply', symbol);
        },
        divide: function(symbol) {
            return this.operation('divide', symbol);
        },
        pow: function(symbol) {
            return this.operation('pow', symbol);
        },
        expand: function() {
            return new Expression(_.expand(this.symbol));
        },
        each: function(callback, i) {
            if(this.symbol.each)
                this.symbol.each(callback, i);
            else if(isArray(this.symbol)) { 
                for(var i=0; i<this.symbol.length; i++)
                    callback.call(this.symbol, this.symbol[i], i);
            }
            else
                callback.call(this.symbol);
        },
        eq: function(value) {
            if(!isSymbol(value))
                value = _.parse(value);
            try {
                var d = _.subtract(this.symbol.clone(), value);
                return d.equals(0);
            }
            catch(e){
                return false;
            }        },
        lt: function(value) {
            if(!isSymbol(value))
                value = _.parse(value);
            try {
                var d = evaluate(_.subtract(this.symbol.clone(), value));
                return d.lessThan(0);
            }
            catch(e){
                return false;
            }        },
        gt: function(value) {
            if(!isSymbol(value))
                value = _.parse(value);
            try {
                var d = evaluate(_.subtract(this.symbol.clone(), value));
                return d.greaterThan(0);
            }
            catch(e){
                return false;
            }        },
        gte: function(value) {
            return this.gt(value) || this.eq(value);
        },
        lte: function(value) {
            return this.lt(value) || this.eq(value);
        },
        
        numerator: function() {
            return new Expression(this.symbol.getNum());
        },
        denominator: function() {
            return new Expression(this.symbol.getDenom());
        }
    };
    //Aliases
    Expression.prototype.toTeX = Expression.prototype.latex;
    
    function Frac(n) { 
        if(n instanceof Frac) return n;
        if(n === undefined) return this;
        try {
            if(isInt(n)) { 
                try {
                    this.num = bigInt(n);
                    this.den = bigInt(1);
                }
                catch(e) {
                    return Frac.simple(n);
                }
            }
            else {
                var frac = Fraction.convert(n);
                this.num = new bigInt(frac[0]);
                this.den = new bigInt(frac[1]);
            }
        }
        catch(e) {
            return Frac.simple(n);
        }
            
    }
    //safe to use with negative numbers or other types
    Frac.create = function(n) {
        if(n instanceof Frac)
            return n;
        n = n.toString();
        var is_neg = n.charAt(0) === '-'; //check if it's negative
        if(is_neg)
            n = n.substr(1, n.length-1); //remove the sign
        var frac = new Frac(n);
        //put the sign back
        if(is_neg)
            frac.negate();
        return frac;
    };
    
    Frac.isFrac = function(o) {
        return (o instanceof Frac);
    };
    
    Frac.quick = function(n, d) { 
        var frac = new Frac();
        frac.num = new bigInt(n);
        frac.den = new bigInt(d);
        return frac;
    };
    
    Frac.simple =  function(n) {
        var nstr = String(scientificToDecimal(n)),
            m_dc = nstr.split('.'),
            num = m_dc.join(''),
            den = 1,
            l = (m_dc[1] || '').length;
        for(var i=0; i<l; i++)
            den += '0';
        var frac = Frac.quick(num, den);
        return frac.simplify();
    };
    
    Frac.prototype = {
        multiply: function(m) { 
            if(this.isOne()) {
                return m.clone();
            }
            if(m.isOne()) {
                return this.clone();
            }
            
            var c = this.clone();
            c.num = c.num.multiply(m.num);
            c.den = c.den.multiply(m.den); 

            return c.simplify();
        },
        divide: function(m) {
            if(m.equals(0)) throw new DivisionByZero('Division by zero not allowed!');
            return this.clone().multiply(m.clone().invert()).simplify();
        },
        subtract: function(m) { 
            return this.clone().add(m.clone().neg());
        },
        neg: function() {
            this.num = this.num.multiply(-1);
            return this;
        },
        add: function(m) { 
            var n1 = this.den, n2 = m.den, c = this.clone();
            var a = c.num, b = m.num;
            if(n1.equals(n2)) {
                c.num = a.add(b);
            }
            else {
                c.num = a.multiply(n2).add(b.multiply(n1));
                c.den = n1.multiply(n2);
            }

            return c.simplify();
        },
        mod: function(m) {
            var a = this.clone(),
                b = m.clone();
            //make their denominators even and return the mod of their numerators
            a.num = a.num.multiply(b.den);
            a.den = a.den.multiply(b.den);
            b.num = b.num.multiply(this.den);
            b.den = b.den.multiply(this.den);
            a.num = a.num.mod(b.num);
            return a.simplify();
        },
        simplify: function() { 
            var gcd = bigInt.gcd(this.num, this.den);
            
            this.num = this.num.divide(gcd);
            this.den = this.den.divide(gcd);
            return this;
        },
        clone: function() {
            var m = new Frac();
            m.num = new bigInt(this.num);
            m.den = new bigInt(this.den);
            return m;
        },
        toDecimal: function(prec) { 
            if(prec || Settings.PRECISION) { 
                var sign = this.num.isNegative() ? '-' : '';
                if(this.num.equals(this.den)) {
                    return '1';
                }
                //go plus one for rounding
                prec = prec || Settings.PRECISION;
                prec++;
                var narr = [], 
                    n = this.num.abs(),
                    d = this.den;
                for(var i=0; i<prec; i++) {
                    var w = n.divide(d), //divide out whole
                        r = n.subtract(w.multiply(d)); //get remainder

                    narr.push(w);    
                    if(r.equals(0))
                            break;
                    n = r.times(10); //shift one dec place
                }
                var whole = narr.shift();
                if(narr.length === 0) { 
                    return sign+whole.toString();
                }

                if(i === prec) {
                    var lt = [];
                    //get the last two so we can round it
                    for(var i=0; i<2; i++)
                        lt.unshift(narr.pop());
                    //put the last digit back by rounding the last two
                    narr.push(Math.round(lt.join('.')));
                }

                var dec = whole.toString()+'.'+narr.join('');
                return sign+dec;
            }
            else
                return this.num/this.den;
        },
        qcompare: function(n) { 
            return [this.num.multiply(n.den), n.num.multiply(this.den)];
        },
        equals: function(n) {
            if(!isNaN(n)) n = new Frac(n);
            var q = this.qcompare(n);
            
            return q[0].equals(q[1]);
        },
        absEquals: function(n) { 
            if(!isNaN(n)) n = new Frac(n);
            var q = this.qcompare(n);
            
            return q[0].abs().equals(q[1]);
        },
        //lazy check to be fixed. Sufficient for now but will cause future problems
        greaterThan: function(n) {
            if(!isNaN(n)) n = new Frac(n);
            var q = this.qcompare(n);
            
            return q[0].gt(q[1]);
        },
        gte: function(n) {
            return this.greaterThan(n) || this.equals(n);
        },
        lte: function(n) {
            return this.lessThan(n) || this.equals(n);
        },
        lessThan: function(n) { 
            if(!isNaN(n)) n = new Frac(n);
            var q = this.qcompare(n);
            
            return q[0].lt(q[1]);
        },
        isInteger: function() {
            return this.den.equals(1);
        },
        negate: function() {
            this.num = this.num.multiply(-1);
            return this;
        },
        invert: function() { 
            var t = this.den;
            var isnegative = this.num.isNegative();
            this.den = this.num.abs();
            this.num = t;
            if(isnegative) this.num = this.num.multiply(-1);
            return this;
        },
        isOne: function() {
            return this.num.equals(1) && this.den.equals(1);
        },
        sign: function() { 
            return this.num.isNegative() ? -1 : 1;
        },
        abs: function() { 
            this.num = this.num.abs();
            return this;
        },
        gcd: function(f) {
            return Frac.quick(bigInt.gcd(f.num, this.num), bigInt.lcm(f.den, this.den));
        },
        toString: function() {
            return !this.den.equals(1) ? this.num.toString()+'/'+this.den.toString() : this.num.toString();
        },
        valueOf: function() {
            return this.num/this.den;
        },
        isNegative: function() {
            return this.toDecimal() < 0;
        }
    };
    
    /**
     * All symbols e.g. x, y, z, etc or functions are wrapped in this class. All symbols have a multiplier and a group. 
     * All symbols except for "numbers (group N)" have a power. 
     * @class Primary data type for the Parser. 
     * @param {String} obj 
     * @returns {Symbol}
     */
    function Symbol(obj) { 
        var isInfinity = obj === 'Infinity';
        //this enables the class to be instantiated without the new operator
        if(!(this instanceof Symbol)) { 
            return new Symbol(obj); 
        }        //define numeric symbols
        if(!isNaN(obj) && !isInfinity && isFinite(obj)) { 
            
            this.group = N;
            this.value = CONST_HASH; 
            this.multiplier = new Frac(obj);
        }
        //define symbolic symbols
        else {
            this.group = S; 
            validateName(obj); 
            this.value = obj;
            this.multiplier = new Frac(1);
            this.imaginary = obj === Settings.IMAGINARY;
            this.isInfinity = isInfinity;
        }
        
        //As of 6.0.0 we switched to infinite precision so all objects have a power
        //Although this is still redundant in constants, it simplifies the logic in
        //other parts so we'll keep it
        this.power = new Frac(1);

        // Added to silence the strict warning.
        return this; 
    }
    
    /**
     * Returns vanilla imaginary symbol
     * @returns {Symbol}
     */
    Symbol.imaginary = function() {
        var s = new Symbol(Settings.IMAGINARY);
        s.imaginary = true;
        return s;
    };
    
    /**
     * Return nerdamer's representation of Infinity
     * @returns {Symbol} 
     */
    Symbol.infinity = function() {
        return new Symbol('Infinity');
    };
    
    Symbol.shell = function(group, value) { 
        var symbol = new Symbol(value);
        symbol.group = group;
        symbol.symbols = {};
        symbol.length = 0;
        return symbol;
    };
    //sqrt(x) -> x^(1/2)
    Symbol.unwrapSQRT = function(symbol, all) {
        var p = symbol.power;
        if(symbol.fname === SQRT && (symbol.isLinear() || all )) {
            var t = symbol.args[0].clone(); 
            t.power = t.power.multiply(new Frac(1/2));
            t.multiplier = t.multiplier.multiply(symbol.multiplier);
            symbol = t;
            if(all) 
                symbol.power = p.multiply(new Frac(1/2));
        }
            
        return symbol;
    };
    
    Symbol.hyp = function(a, b) {
        if(a.equals(0))
            return b.clone();
        if(b.equals(0))
            return a.clone();
        return _.sqrt(_.add(_.pow(a.clone(), new Symbol(2)), _.pow(b.clone(), new Symbol(2))));
    };
    
    //converts to polar form array
    Symbol.toPolarFormArray = function(symbol) {
        var re, im, r, theta;
        re = symbol.realpart(); 
        im = symbol.imagpart(); 
        r = Symbol.hyp(re, im);
        theta = re.equals(0) ? _.parse('pi/2') : _.trig.atan(_.divide(im, re));
        return [r, theta];
    };
    
    //removes parentheses
    Symbol.unwrapPARENS = function(symbol) {
        if(symbol.fname === '') {
            var r = symbol.args[0];
            r.power = r.power.multiply(symbol.power);
            r.multiplier = r.multiplier.multiply(symbol.multiplier);
            if(symbol.fname === '')
                return Symbol.unwrapPARENS(r);
            return r;
        }
        return symbol;
    };
    //quickly creates a Symbol
    Symbol.create = function(value, power) {
        power = power === undefined ? 1 : power;
        return _.parse('('+value+')^('+power+')');
    };
    
    Symbol.prototype = {
        //returns a clone.
        powSimp: function() {
            if(this.group === CB) {
                var powers = [],
                    sign = this.multiplier.sign();
                this.each(function(x) {
                    var p = x.power;
                    //why waste time if I can't do anything anyway
                    if(isSymbol(p) || p.equals(1))
                        return this.clone();
                    powers.push(p);
                });
                var min = new Frac(arrayMin(powers));
                
                //handle the coefficient
                //handle the multiplier
                var sign = this.multiplier.sign(),
                    m = this.multiplier.clone().abs(),
                    mfactors = Math2.ifactor(m);
                //if we have a multiplier of 6750 and a min of 2 then the factors are 5^3*5^3*2
                //we can then reduce it to 2*3*5*(15)^2 
                var out_ = new Frac(1);
                var in_ = new Frac(1);
                
                for(var x in mfactors) {
                    var n = new Frac(mfactors[x]);
                    if(!n.lessThan(min)) {
                        n = n.divide(min).subtract(new Frac(1));
                        in_ = in_.multiply(new Frac(x)); //move the factor inside the bracket
                    }
                    
                    out_ = out_.multiply(_.parse(inBrackets(x)+'^'+inBrackets(n)).multiplier);
                }
                var t = new Symbol(in_);
                this.each(function(x) { 
                    x = x.clone();
                    x.power = x.power.divide(min);
                    t = _.multiply(t, x);
                });
                
                var xt = _.symfunction(PARENTHESIS, [t]);
                xt.power = min;
                xt.multiplier = sign < 0 ? out_.negate() : out_;

                return xt;
            }
            return this.clone();
        },
        /**
         * Checks to see if two functions are of equal value
         */
        equals: function(symbol) { 
            if(!isSymbol(symbol)) 
                symbol = new Symbol(symbol);
            return this.value === symbol.value && this.power.equals(symbol.power) && this.multiplier.equals(symbol.multiplier);
        },
        // Greater than
        gt: function(symbol) { 
            if(!isSymbol(symbol)) 
                symbol = new Symbol(symbol);
            return this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);
        },
        // Greater than
        gte: function(symbol) { 
            if(!isSymbol(symbol)) 
                symbol = new Symbol(symbol);
            return this.equals(symbol) ||
                    this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);
        },
        // Less than
        lt: function(symbol) { 
            if(!isSymbol(symbol)) 
                symbol = new Symbol(symbol);
            return this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);
        },
        // Less than
        lte: function(symbol) { 
            if(!isSymbol(symbol)) 
                symbol = new Symbol(symbol);
            return this.equals(symbol) ||
                    this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);
        },
        /**
         * Because nerdamer doesn't group symbols by polynomials but 
         * rather a custom grouping method, this has to be
         * reinserted in order to make use of most algorithms. This function
         * checks if the symbol meets the criteria of a polynomial.
         * @returns {boolean}
         */
        isPoly: function(multivariate) { 
            var g = this.group, 
                p = this.power; 
            //the power must be a integer so fail if it's not
            if(!isInt(p) || p < 0) 
                return false;
            //constants and first orders
            if(g === N  || g === S || this.isConstant(true)) 
                return true;
            var vars = variables(this);
            if(g === CB && vars.length === 1) { 
                //the variable is assumed the only one that was found
                var v = vars[0];
                //if no variable then guess what!?!? We're done!!! We have a polynomial.
                if(!v)
                    return true;
                for(var x in this.symbols) {
                    var sym = this.symbols[x];
                    //sqrt(x)
                    if(sym.group === FN && sym.fname === SQRT && !sym.args[0].isConstant())
                        return false;
                    if(!sym.contains(v) && !sym.isConstant(true))
                        return false;
                }
                return true;
            }
            //PL groups. These only fail if a power is not an int
            //this should handle cases such as x^2*t
            if(this.isComposite() || g === CB && multivariate) { 
                //fail if we're not checking for multivariate polynomials
                if(!multivariate && vars.length > 1) 
                    return false;
                //loop though the symbols and check if they qualify
                for(var x in this.symbols) {
                    //we've already the symbols if we're not checking for multivariates at this point
                    //so we check the sub-symbols
                    if(!this.symbols[x].isPoly(multivariate)) 
                        return false;
                }
                return true;
            }
            else 
                return false;
            
            //all tests must have passed so we must be dealing with a polynomial
            return true;
        },
        //removes the requested variable from the symbol and returns the remainder
        stripVar: function(x) {
            var retval;
            if((this.group === PL || this.group === S) && this.value === x) 
                retval = new Symbol(this.multiplier);
            else if(this.group === CB && this.isLinear()) { 
                retval = new Symbol(1);
                this.each(function(s) { 
                    if(!s.contains(x, true)) 
                        retval = _.multiply(retval, s.clone());
                });
                retval.multiplier = retval.multiplier.multiply(this.multiplier);
            }
            else if(this.group === CP && !this.isLinear()) {
                retval = new Symbol(this.multiplier);
            }
            else if(this.group === CP && this.isLinear()) {
                retval = new Symbol(0);
                this.each(function(s) {
                    if(!s.contains(x)) {
                        var t = s.clone();
                        t.multiplier = t.multiplier.multiply(this.multiplier);
                        retval = _.add(retval, t);
                    } 
                });
                //BIG TODO!!! It doesn't make much sense
                if(retval.equals(0))
                    retval = new Symbol(this.multiplier);
            }
            else if(this.group === EX && this.power.contains(x, true)) {
                retval = new Symbol(this.multiplier);
            }
            else if(this.group === FN && this.contains(x)) {
                retval = new Symbol(this.multiplier);
            }
            else retval = this.clone();
            
            return retval;
        },
        //returns symbol in array form with x as base e.g. a*x^2+b*x+c = [c, b, a]. 
        toArray: function(v, arr) {
            arr = arr || {
                arr: [],
                add: function(x, idx) {
                    var e = this.arr[idx];
                    this.arr[idx] = e ? _.add(e, x) : x;
                }
            };
            var g = this.group;
            
            if(g === S && this.contains(v)) { 
                arr.add(new Symbol(this.multiplier), this.power);
            }
            else if(g === CB){
                var a = this.stripVar(v),
                    x = _.divide(this.clone(), a.clone());
                var p = x.isConstant() ? 0 : x.power;
                arr.add(a, p);
            }
            else if(g === PL && this.value === v) {
                this.each(function(x, p) {
                    arr.add(x.stripVar(v), p);
                });
            }
            else if(g === CP) {
                //the logic: they'll be broken into symbols so e.g. (x^2+x)+1 or (a*x^2+b*x+c)
                //each case is handled above
                this.each(function(x) {
                    x.toArray(v, arr);
                });
            }
            else if(this.contains(v)){
                throw new Error('Cannot convert to array! Exiting');
            }
            else {
                arr.add(this.clone(), 0); //it's just a constant wrt to v
            }
            //fill the holes
            arr = arr.arr; //keep only the array since we don't need the object anymore
            for(var i=0; i<arr.length; i++) 
                if(!arr[i])
                    arr[i] = new Symbol(0);
            return arr;
        },
        //checks to see if a symbol contans a function
        hasFunc: function(v) {
            var fn_group = this.group === FN || this.group === EX;
            if( fn_group && !v || fn_group && this.contains(v) )
                return true;
            if(this.symbols) {
                for(var x in this.symbols) {
                    if(this.symbols[x].hasFunc(v)) return true;
                }
            }
            return false;
        },
        sub: function(a, b) { 
            a = !isSymbol(a) ? _.parse(a) : a.clone();
            b = !isSymbol(b) ? _.parse(b) : b.clone();
            if(a.group === N || a.group === P)
                err('Cannot substitute a number. Must be a variable');
            var same_pow = false,
                a_is_unit_multiplier = a.multiplier.equals(1),
                m = this.multiplier.clone(),
                retval;
            /* 
             * In order to make the substitution the bases have to first match take
             * (x+1)^x -> (x+1)=y || x^2 -> x=y^6
             * In both cases the first condition is that the bases match so we begin there
             * Either both are PL or both are not PL but we cannot have PL and a non-PL group match
             */
            if(this.value === a.value && (this.group !== PL && a.group !== PL || this.group === PL && a.group === PL)) { 
                //we cleared the first hurdle but a subsitution may not be possible just yet
                if(a_is_unit_multiplier || a.multiplier.equals(this.multiplier)) {
                    if(a.isLinear()) { 
                        retval = b; 
                    }
                    else if(a.power.equals(this.power)) {
                        retval = b;
                        same_pow = true;
                    }
                    if(a.multiplier.equals(this.multiplier))
                        m = new Frac(1);
                }
            }
            //the next thing is to handle CB
            else if(this.group === CB || this.previousGroup === CB) {
                retval = new Symbol(1);
                this.each(function(x) { 
                    retval = _.multiply(retval, x.sub(a, b));
                });
            }
            else if(this.isComposite()) {
                retval = new Symbol(0);
                this.each(function(x) { 
                    retval = _.add(retval, x.sub(a, b));
                });
            }
            else if(this.group === EX) {
                // the parsed value could be a function so parse and sub
                retval = _.parse(this.value).sub(a, b);
            }
            else if(this.group === FN) { 
                var nargs = [];
                for(var i=0; i<this.args.length; i++) {
                    var arg = this.args[i];
                    if(!isSymbol(arg))
                        arg = _.parse(arg);
                    nargs.push(arg.sub(a, b));
                }
                retval = _.symfunction(this.fname, nargs);
            }
            //if we did manage a substitution
            if(retval) {
                if(!same_pow) {
                    //substitute the power
                    var p = this.group === EX ? this.power.sub(a, b) : _.parse(this.power);
                    //now raise the symbol to that power
                    retval = _.pow(retval, p); 
                }

                //transfer the multiplier
                retval.multiplier = retval.multiplier.multiply(m);
                //done
                return retval;
            }
            //if all else fails
            return this.clone();
        },
        isMonomial: function() {
            if(this.group === S) return true;
            if(this.group === CB) {
                for(var x in this.symbols) 
                    if(this.symbols[x].group !== S)
                        return false;
            }
            else return false;
            return true;
        },
        isPi: function() {
            return this.group === S && this.value === 'pi';
        },
        sign: function() {
            return this.multiplier.sign();
        },
        isE: function() {
            return this.value === 'e';
        },
        isSQRT: function() {
            return this.fname === SQRT;
        },
        isConstant: function(check_all) {
            if(check_all === 'all' && (this.isPi() || this.isE()))
                return true;
            if(check_all && this.group === FN) {
                for(var i=0; i<this.args.length; i++) {
                    if(!this.args[i].isConstant())
                        return false;
                }
                return true;
            }
            return this.value === CONST_HASH;
        },
        //the symbols is imaginary if 
        //1. n*i
        //2. a+b*i
        //3. a*i
        isImaginary: function() { 
            if(this.imaginary)
                return true;
            else if(this.symbols) {
                for(var x in this.symbols)
                    if(this.symbols[x].imaginary)
                        return true;
            }
            return false;
        },
        /**
         * Returns the real part of a symbol
         * @returns {Symbol}
         */
        realpart: function() { 
            if(this.isConstant()) { 
                return this.clone();
            }
            else if(this.imaginary)
                return new Symbol(0);
            else if(this.isComposite()) { 
                var retval = new Symbol(0);
                this.each(function(x) {
                    retval = _.add(retval, x.realpart());
                });
                return retval;
            }
            else if(this.isImaginary())
                return new Symbol(0);
            return this.clone();
        },
        /*
         * Return imaginary part of a symbol
         * @returns {Symbol}
         */
        imagpart: function() {
            if(this.group === S && this.isImaginary())
                return new Symbol(this.multiplier);
            if(this.isComposite()) {
                var retval = new Symbol(0);
                this.each(function(x) {
                    retval = _.add(retval, x.imagpart());
                });
                return retval;
            }
            if(this.group === CB)
                return this.stripVar(Settings.IMAGINARY);
            return new Symbol(0);
        },
        isInteger: function() {
            return this.isConstant() && this.multiplier.isInteger();
        },
        isLinear: function(wrt) {
            if(wrt) {
                if(this.isConstant())
                    return true;
                if(this.group === S) {
                    if(this.value === wrt)return this.power.equals(1);
                    else return true;
                }
                
                if(this.isComposite() && this.power.equals(1)) {
                    for(var x in this.symbols) {
                        if(!this.symbols[x].isLinear(wrt))
                            return false;
                    }
                    return true;
                }
                
                if(this.group === CB && this.symbols[wrt])
                    return this.symbols[wrt].isLinear(wrt);
                return false;  
            }
            else return this.power.equals(1);
        },
        containsFunction: function(names) {
            if(typeof names === 'string')
                names = [names];
            if(this.group === FN && names.indexOf(this.fname) !== -1) 
                return true;
            if(this.symbols) {
                for(var x in this.symbols) {
                    if(this.symbols[x].containsFunction(names))
                        return true;
                }
            }
            return false;
        },
        multiplyPower: function(p2) {
            //leave out 1
            if(this.group === N && this.multiplier.equals(1)) return this;
            
            var p1 = this.power;
            
            if(this.group !== EX && p2.group === N) {
                var p = p2.multiplier;
                if(this.group === N && !p.isInteger()) {
                    this.convert(P);
                }

                this.power = p1.equals(1) ? p.clone() : p1.multiply(p);

                if(this.group === P && isInt(this.power)) {
                    //bring it back to an N
                    this.value = Math.pow(this.value, this.power);
                    this.toLinear(); 
                    this.convert(N);
                }
            }
            else {
                if(this.group !== EX) {
                    p1 = new Symbol(p1);
                    this.convert(EX);
                }
                this.power = _.multiply(p1, p2);
            }

            return this;
        },
        setPower: function(p, retainSign) { 
            //leave out 1
            if(this.group === N && this.multiplier.equals(1)) return this;
            if(this.group === EX && !isSymbol(p)) {
                this.group = this.previousGroup; 
                delete this.previousGroup; 
                if(this.group === N) {
                    this.multiplier = new Frac(this.value);
                    this.value = CONST_HASH;
                }
                else
                    this.power = p;
            }
            else {
                var isIntP = false,
                    isSymbolic = false;
                if(isSymbol(p)) {
                    if(p.group === N) {
                        //p should be the multiplier instead
                        p = p.multiplier;

                    }
                    else {
                        isSymbolic = true;
                    }
                }
                var group = isSymbolic ? EX : !isIntP ? P : null;
                this.power = p; 
                if(this.group === N && group) this.convert(group, retainSign);
            }

            return this;
        },
        /**
         * Checks to see if symbol is located in the denominator
         * @returns {boolean}
         */
        isInverse: function() {
            if(this.group === EX) return (this.power.multiplier.lessThan(0));
            return this.power < 0;
        },
        /**
         * Make a duplicate of a symbol by copying a predefined list of items
         * to a new symbol
         * @param {Symbol} c 
         * @returns {Symbol}
         */
        clone: function(c) { 
            var clone = c || new Symbol(0),
                //list of properties excluding power as this may be a symbol and would also need to be a clone.
                properties = [
                    'value', 'group', 'length', 'previousGroup', 'imaginary', 'fname', 'args', 'isInfinity'],
                l = properties.length, i;
            if(this.symbols) {
                clone.symbols = {};
                for(var x in this.symbols) {
                    clone.symbols[x] = this.symbols[x].clone();
                }
            }

            for(i=0; i<l; i++) {
                if(this[properties[i]] !== undefined) {
                    clone[properties[i]] = this[properties[i]];
                }
            }

            clone.power = this.power.clone();
            clone.multiplier = this.multiplier.clone();

            return clone;
        },
        toUnitMultiplier: function(keepSign) {
            this.multiplier.num = new bigInt(this.multiplier.num.isNegative() && keepSign ? -1 : 1);
            this.multiplier.den = new bigInt(1);
            return this;
        },
        toLinear: function() {
            this.setPower(new Frac(1));
            return this;
        },
        each: function(fn, deep) {
            if(!this.symbols) {
                fn.call(this, this, this.value);
            }
            else {
                for(var x in this.symbols) {
                    var sym = this.symbols[x];
                    if(sym.group === PL && deep) {
                        for(var y in sym.symbols) {
                            fn.call(x, sym.symbols[y], y);
                        }
                    }
                    else
                        fn.call(this, sym, x);
                }
            }
        },
        /**
         * A numeric value to be returned for Javascript. It will try to 
         * return a number as far a possible but in case of a pure symbolic
         * symbol it will just return its text representation
         * @returns {String|Number}
         */
        valueOf: function() {
            if(this.group === N) 
                return this.multiplier.valueOf(); 
            else if(this.power === 0){ return 1; }
            else if(this.multiplier === 0) { return 0; }
            else { return text(this, 'decimals'); }
        },
        /**
         * Checks to see if a symbols has a particular variable within it.
         * Pass in true as second argument to include the power of exponentials
         * which aren't check by default.
         * @example var s = _.parse('x+y+z'); s.contains('y');
         * //returns true
         * @returns {boolean}
         */
        contains: function(variable, all) { 
            var g = this.group; 
            if(this.value === variable)
                return true;
            if(this.symbols) {
                for(var x in this.symbols) { 
                    if(this.symbols[x].contains(variable, all)) return true; 
                }
            }
            if(g === FN || this.previousGroup === FN) {
                for(var i=0; i<this.args.length; i++) { 
                    if(this.args[i].contains(variable, all)) return true; 
                }
            }
            
            if(g === EX) { 
                //exit only if it does
                if(all && this.power.contains(variable, all)) { return true; }
                if(this.value === variable)
                    return true;
                
            }
            
            return this.value === variable;
        },
        /**
         * Negates a symbols
         * @returns {boolean}
         */
        negate: function() { 
            this.multiplier.negate();
            if(this.group === CP || this.group === PL) 
                this.distributeMultiplier();
            return this;
        },
        /**
         * Inverts a symbol
         * @returns {boolean}
         */
        invert: function(power_only, all) { 
            //invert the multiplier
            if(!power_only) this.multiplier = this.multiplier.invert();
            //invert the rest
            if(isSymbol(this.power)) {
                this.power.negate();
            }
            else if(this.group === CB && all) {
                this.each(function(x) {
                    return x.invert();
                });
            }
            else {
                if(this.power && this.group !== N) this.power.negate();
            }
            return this;
        },
        /**
         * Symbols of group CP or PL may have the multiplier being carried by 
         * the top level symbol at any given time e.g. 2*(x+y+z). This is 
         * convenient in many cases, however in some cases the multiplier needs
         * to be carried individually e.g. 2*x+2*y+2*z.
         * This method distributes the multiplier over the entire symbol
         * @returns {Symbol}
         */
        distributeMultiplier: function(all) { 
            var is_one = all ? this.power.absEquals(1) : this.power.equals(1);
            if(this.symbols && is_one && this.group !== CB && !this.multiplier.equals(1)) {
                for(var x in this.symbols) {
                    var s = this.symbols[x];
                    s.multiplier = s.multiplier.multiply(this.multiplier);
                    s.distributeMultiplier();
                }
                this.toUnitMultiplier();
            }

            return this;
        },
        /**
         * This method expands the exponent over the entire symbol just like
         * distributeMultiplier
         * @returns {Symbol}
         */
        distributeExponent: function() { 
            if(!this.power.equals(1)) {
                var p = this.power;
                for(var x in this.symbols) {
                    var s = this.symbols[x];
                    if(s.group === EX) {
                        s.power = _.multiply(s.power, new Symbol(p));
                    }
                    else {
                        this.symbols[x].power  = this.symbols[x].power.multiply(p);
                    }
                }
                this.toLinear();
            }
            return this;
        },
        /**
         * This method will attempt to up-convert or down-convert one symbol
         * from one group to another. Not all symbols are convertible from one 
         * group to another however. In that case the symbol will remain 
         * unchanged.
         */
        convert: function(group, imaginary) { 
            if(group > FN) { 
                //make a clone of this symbol;
                var cp = this.clone();

                //attach a symbols object and upgrade the group
                this.symbols = {};

                if(group === CB) { 
                    //symbol of group CB hold symbols bound together through multiplication
                    //because of commutativity this multiplier can technically be anywhere within the group
                    //to keep track of it however it's easier to always have the top level carry it
                    cp.toUnitMultiplier();
                }
                else {
                    //reset the symbol
                    this.toUnitMultiplier();
                }

                if(this.group === FN) {
                    cp.args = this.args; 
                    delete this.args;
                    delete this.fname;
                }

                //the symbol may originate from the symbol i but this property no longer holds true
                //after copying
                if(this.isImgSymbol) delete this.isImgSymbol;

                this.toLinear();
                //attach a clone of this symbol to the symbols object using its proper key
                this.symbols[cp.keyForGroup(group)] = cp; 
                this.group = group;
                //objects by default don't have a length property. However, in order to keep track of the number
                //of sub-symbols we have to impliment our own.
                this.length = 1;    
            }
            else if(group === EX) { 
                //1^x is just one so check and make sure
                if(!(this.group === N && this.multiplier.equals(1))) {
                    if(this.group !== EX) this.previousGroup = this.group;
                    if(this.group === N) { 
                        this.value = this.multiplier.num.toString();
                        this.toUnitMultiplier();
                    }
                    //update the hash to reflect the accurate hash
                    else this.value = text(this, 'hash');
                    
                    this.group = EX;
                }
            }
            else if(group === N) { 
                var m = this.multiplier.toDecimal(); 
                if(this.symbols) this.symbols = undefined;
                new Symbol(this.group === P ? m*Math.pow(this.value, this.power) : m).clone(this);
            }
            else if(group === P && this.group === N) { 
                this.value = imaginary ? this.multiplier.num.toString() : Math.abs(this.multiplier.num.toString());
                this.toUnitMultiplier(!imaginary);
                this.group = P;
            }
            return this;
        },
        /**
         * This method is one of the principal methods to make it all possible.
         * It performs cleanup and prep operations whenever a symbols is 
         * inserted. If the symbols results in a 1 in a CB (multiplication) 
         * group for instance it will remove the redundant symbol. Similarly
         * in a symbol of group PL or CP (symbols glued by multiplication) it
         * will remove any dangling zeroes from the symbol. It will also 
         * up-convert or down-convert a symbol if it detects that it's 
         * incorrectly grouped. It should be noted that this method is not
         * called directly but rather by the 'attach' method for addition groups
         * and the 'combine' method for multipiclation groups.
         */
        insert: function(symbol, action) { 
            //this check can be removed but saves a lot of aggravation when trying to hunt down
            //a bug. If left, you will instantly know that the error can only be between 2 symbols.
            if(!isSymbol(symbol)) err('Object '+symbol+' is not of type Symbol!');
            if(this.symbols) { 
                var group = this.group;
                if(group > FN) { 
                    var key = symbol.keyForGroup(group); 
                    var existing = key in this.symbols ? this.symbols[key] : false; //check if there's already a symbol there
                    if(action === 'add') {
                        var hash = key;
                        if(existing) { 
                            //add them together using the parser
                            this.symbols[hash] = _.add(existing, symbol); 
                            //if the addition resulted in a zero multiplier remove it
                            if(this.symbols[hash].multiplier.equals(0)) {
                                delete this.symbols[hash];
                                this.length--;
                                
                                if(this.length === 0) {
                                    this.convert(N);
                                    this.multiplier = new Frac(0);
                                }
                            }
                        }
                        else { 
                            this.symbols[key] = symbol;
                            this.length++;
                        }  
                    }
                    else { 
                        //check if this is of group P and unwrap before inserting
                        if(symbol.group === P && isInt(symbol.power)) {
                            symbol.convert(N);
                        }
                        
                        //transfer the multiplier to the upper symbol but only if the symbol numeric
                        if(symbol.group !== EX) {
                            this.multiplier = this.multiplier.multiply(symbol.multiplier);
                            symbol.toUnitMultiplier();
                        }
                        else {
                            symbol.parens = symbol.multiplier.lessThan(0);
                            this.multiplier = this.multiplier.multiply(symbol.multiplier.clone().abs());
                            symbol.toUnitMultiplier(true);
                        }
                            
                        if(existing) {  
                            //remove because the symbol may have changed
                            symbol = _.multiply(remove(this.symbols, key), symbol);
                            if(symbol.isConstant()) {
                                 this.multiplier = this.multiplier.multiply(symbol.multiplier);
                                 symbol = new Symbol(1); //the dirty work gets done down the line when it detects 1
                            }

                            this.length--;
                            //clean up
                        }
                        
                        //don't insert the symbol if it's 1
                        if(!symbol.isOne(true)) {
                            this.symbols[key] = symbol;
                            this.length++;
                        }
                        else if(symbol.multiplier.lessThan(0)) {
                             this.negate(); //put back the sign
                        }
                    }
                    
                    //clean up
                    if(this.length === 0) this.convert(N);
                    //update the hash
                    if(this.group === CP || this.group === CB) {
                        this.updateHash();
                    }
                }
            }

            return this;
        },  
        //the insert method for addition
        attach: function(symbol) {
            if(isArray(symbol)) {
                for(var i=0; i<symbol.length; i++) this.insert(symbol[i], 'add');
                return this;
            }
            return this.insert(symbol, 'add');
        },
        //the insert method for multiplication
        combine: function(symbol) {
            if(isArray(symbol)) {
                for(var i=0; i<symbol.length; i++) this.insert(symbol[i], 'multiply');
                return this;
            }
            return this.insert(symbol, 'multiply');
        },
        /**
         * This method should be called after any major "surgery" on a symbol.
         * It updates the hash of the symbol for example if the fname of a 
         * function has changed it will update the hash of the symbol.
         */
        updateHash: function() {
            if(this.group === N) return;
            
            if(this.group === FN) {
                var contents = '',
                    args = this.args,
                    is_parens = this.fname === PARENTHESIS;
                for(var i=0; i<args.length; i++) contents += (i===0 ? '' : ',')+text(args[i]);
                var fn_name = is_parens ? '' : this.fname;
                this.value = fn_name+(is_parens ? contents : inBrackets(contents));
            }
            else if(!(this.group === S || this.group === PL)) {
                this.value = text(this, 'hash');
            }
        },
        /**
         * this function defines how every group in stored within a group of 
         * higher order think of it as the switchboard for the library. It 
         * defines the hashes for symbols. 
         */
        keyForGroup: function(group) {
            var g = this.group;
            var key; 
            
            if(g === N) {
                key = this.value;
            }
            else if(g === S || g === P) {
                if(group === PL) key = this.power.toDecimal();
                else key = this.value;
            }
            else if(g === FN) { 
                if(group === PL) key = this.power.toDecimal();
                else key = text(this, 'hash');
            }
            else if(g === PL) { 
                //if the order is reversed then we'll assume multiplication
                //TODO: possible future dilemma
                if(group === CB) key = text(this, 'hash');
                else if(group === CP) { 
                    if(this.power.equals(1)) key = this.value;
                    else key = inBrackets(text(this, 'hash'))+Settings.POWER_OPERATOR+this.power.toDecimal();
                }
                else if(group === PL) key = this.power.toString();
                else key = this.value;
                return key;
            }
            else if(g === CP) {
                if(group === CP) key = text(this, 'hash');
                if(group === PL) key = this.power.toDecimal();
                else key = this.value;
            }
            else if(g === CB) {
                if(group === PL) key = this.power.toDecimal();
                else key = text(this, 'hash');
            }
            else if(g === EX) { 
                if(group === PL) key = text(this.power);
                else key = text(this, 'hash');
            }
            
            return key;
        },
        /** 
         * Symbols are typically stored in an object which works fine for most
         * cases but presents a problem when the order of the symbols makes
         * a difference. This function simply collects all the symbols and 
         * returns them as an array. If a function is supplied then that 
         * function is called on every symbol contained within the object.
         * @returns {Array}
         */
        collectSymbols: function(fn, opt, sort_fn, expand_symbol) { 
            var collected = [];
            if(!this.symbols) collected.push(this);
            else {
                for(var x in this.symbols) {
                    var symbol = this.symbols[x];
                    if(expand_symbol && (symbol.group === PL || symbol.group === CP)) {
                        collected = collected.concat(symbol.collectSymbols());
                    }
                    else collected.push( fn ? fn(symbol, opt) : symbol );
                }
            }
            if(sort_fn === null) sort_fn = undefined; //WTF Firefox? Seriously?
            
            return collected.sort(sort_fn);//sort hopefully gives us some sort of consistency
        },
        /**
         * Returns the latex representation of the symbol
         * @returns {String}
         */
        latex: function(option) {
            return LaTeX.latex(this, option);
        },
        /**
         * Returns the text representation of a symbol
         * @returns {String}
         */
        text: function(option) {
            return text(this, option);
        },
        /**
         * Checks if the function evaluates to 1. e.g. x^0 or 1 :)
         */
        isOne: function(abs) {
            var f = abs ? 'absEquals' : 'equals';
            if(this.group === N) return this.multiplier[f](1);
            else return this.power.equals(0);
        },
        isComposite: function() {
            var g = this.group,
                pg = this.previousGroup;
            return g === CP || g === PL || pg === PL || pg === CP;
        },
        isCombination: function() {
            var g = this.group,
                pg = this.previousGroup;
            return g === CB || pg === CB;
        },
        lessThan: function(n) {
            return this.multiplier.lessThan(n);
        },
        greaterThan: function(n) {
            return this.multiplier.greaterThan(n);
        },
        /**
         * Get's the denominator of the symbol if the symbol is of class CB (multiplication)
         * with other classes the symbol is either the denominator or not. 
         * Take x^-1+x^-2. If the symbol was to be mixed such as x+x^-2 then the symbol doesn't have have an exclusive
         * denominator and has to be found by looking at the actual symbols themselves.
         */
        getDenom: function() { 
            var retval, symbol;
            symbol = this.clone();
            //e.g. 1/(x*(x+1))
            if(this.group === CB && this.power.lessThan(0))
                symbol = _.expand(symbol);

            //if the symbol already is the denominator... DONE!!!
            if(symbol.power.lessThan(0)) {
                var d = _.parse(symbol.multiplier.den);
                retval = symbol.toUnitMultiplier();
                retval.power.negate();
                retval = _.multiply(d, retval); //put back the coeff
            }
            else if(symbol.group === CB) {
                retval = _.parse(symbol.multiplier.den);
                for(var x in symbol.symbols) 
                    if(symbol.symbols[x].power < 0) 
                        retval = _.multiply(retval, symbol.symbols[x].clone().invert());
            }
            else
                retval = _.parse(symbol.multiplier.den);
            return retval;
        },
        getNum: function() {
            var retval, symbol;
            symbol = this.clone();
            //e.g. 1/(x*(x+1))
            if(symbol.group === CB && symbol.power.lessThan(0))
                symbol = _.expand(symbol);
            //if the symbol already is the denominator... DONE!!!
            if(symbol.power.greaterThan(0) && symbol.group !== CB) {
                retval = _.parse(symbol.multiplier.num);
                retval = _.multiply(retval, symbol.toUnitMultiplier()); 
            }
            else if(symbol.group === CB) {
                retval = _.parse(symbol.multiplier.num);
                for(var x in symbol.symbols) 
                    if(symbol.symbols[x].power > 0) 
                        retval = _.multiply(retval, symbol.symbols[x].clone());
            }
            else
                retval = _.parse(symbol.multiplier.num);
            return retval;
        },
        toString: function() {
            return this.text();
        }
    };
    
    function primeFactors(num) {
        if(isPrime(num)) return [num];
        var l = num, i=1, factors = [], 
            epsilon = 2.2204460492503130808472633361816E-16;
        while(i<l) {
            var quotient = num/i; 
            var whole = Math.floor(quotient);
            var remainder = quotient-whole;
            if(remainder <= epsilon && i>1) {
                if(PRIMES.indexOf(i) !== -1) factors.push(i);
                l = whole;
            }
            i++;
        }
        return factors.sort(function(a, b){return a-b;});
    } 
    
    /**
     * This class defines the operators in nerdamer. The thinking is that with using these parameters
     * we should be able to define more operators such as the modulus operator or a boolean operator.
     * Although this initially works at the moment, it fails in some instances due to minor flaws in design which
     * will be addressed in future releases.
     * @param {char} val - The symbol of the operator
     * @param {String} fn - The function it maps to
     * @param {Integer} precedence - The precedence of the operator
     * @param {boolean} left_assoc - Is the operator left or right associative
     * @param {boolean} is_prefix - Is the operator a prefix operator
     * @param {boolean} is_postfix - Is the operator a postfix operator
     * @param {boolean} operation - The prefix or postfix operation the operator preforms if its either
     * @returns {Operator}
     */
    function Operator(val, fn, precedence, left_assoc, is_prefix, is_postfix, operation) {
        this.val = val;
        this.fn = fn;
        this.precedence = precedence;
        this.left_assoc = left_assoc;
        this.is_prefix = is_prefix;
        this.is_postfix = is_postfix || false;
        this.operation = operation;
        this.is_operator = true;
    }
    
    Operator.prototype.toString = function() {
        return this.val;
    };
    
    function Bracket(val, bracket_id, is_open, fn, typ) {
        this.val = val;
        this.bracket_id = bracket_id;
        this.open = !!is_open;
        this.fn = fn;
        this.type = typ;
    }
    
    Bracket.prototype.toString = function() {
        return this.val;
    };
    
    function Prefix(operator) {
        this.operation = operator.operation;
        this.val = operator.val;
        this.is_prefix_operator = true;
    }
    
    Prefix.prototype.toString = function() {
        return '`'+this.val;
    };
    
    //custom errors
    //thrown if trying to divide by zero
    function DivisionByZero(msg){
        this.message = msg || "";
    }
    DivisionByZero.prototype = Object.create(Error.prototype);
    //thrown in parser 
    function ParseError(msg){
        this.message = msg || "";
    }
    ParseError.prototype = Object.create(Error.prototype);
    //thrown for undefined errors
    function UndefinedError(msg){
        this.message = msg || "";
    }
    UndefinedError.prototype = Object.create(Error.prototype);
    //thrown for maximum iteration error
    function MaximumIterationsReached(msg){
        this.message = msg || "";
    }
    MaximumIterationsReached.prototype = Object.create(Error.prototype);
    
    //Uses modified Shunting-yard algorithm. http://en.wikipedia.org/wiki/Shunting-yard_algorithm
    function Parser(){
        //we want the underscore to point to this parser not the global nerdamer parser.
        var _ = this, 
            bin = {},
            constants = this.constants = {
                PI: Math.PI,
                E:  Math.E
            },
            subs = {
                e:  Math.E,
                pi: Math.PI
            };
            
        var complex = {
            prec: undefined,
            cos: function(r, i) {
                var re, im;
                re = _.parse(Math.cos(r)*Math.cosh(i));
                im = _.parse(Math.sin(r)*Math.sinh(i));
                return _.subtract(re, _.multiply(im, Symbol.imaginary()));
            },
            sin: function(r, i) {
                var re, im;
                re = _.parse(Math.sin(r)*Math.cosh(i));
                im = _.parse(Math.cos(r)*Math.sinh(i));
                return _.subtract(re, _.multiply(im, Symbol.imaginary()));
            },
            tan: function(r, i) {
                var re, im;
                re = _.parse(Math.sin(2*r)/(Math.cos(2*r)+Math.cosh(2*i)));
                im = _.parse(Math.sinh(2*i)/(Math.cos(2*r)+Math.cosh(2*i)));
                return _.add(re, _.multiply(im, Symbol.imaginary()));
            },
            sec: function(r, i) {
                var t = this.removeDen(this.cos(r, i));
                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));
            },
            csc: function(r, i) { 
                var t = this.removeDen(this.sin(r, i));
                return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));
            },
            cot: function(r, i) {
                var t = this.removeDen(this.tan(r, i));
                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));
            },
            acos: function(r, i) { 
                var symbol, sq, a, b, c;
                symbol = this.fromArray([r, i]);
                sq = _.expand(_.pow(symbol.clone(), new Symbol(2))); //z*z
                a = _.multiply(sqrt(_.subtract(new Symbol(1), sq)), Symbol.imaginary());
                b = _.expand(_.add(symbol.clone(), a));
                c = log(b);
                return _.expand(_.multiply(Symbol.imaginary().negate(), c));
            },
            asin: function(r, i) {
                return _.subtract(_.parse('pi/2'), this.acos(r, i));
            },
            atan: function(r, i) {
                var a, b, c, symbol;
                symbol = complex.fromArray([r, i]);
                a = _.expand(_.multiply(Symbol.imaginary(), symbol.clone()));
                b = log(_.expand(_.subtract(new Symbol(1), a.clone())));
                c = log(_.expand(_.add(new Symbol(1), a.clone())));
                return _.expand(_.multiply(_.divide(Symbol.imaginary(), new Symbol(2)), _.subtract(b, c)));
            },
            asec: function(r, i) {
                var d = this.removeDen([r, i]);
                d[1].negate();
                return this.acos.apply(this, d);
            },
            acsc: function(r, i) {
                var d = this.removeDen([r, i]);
                d[1].negate();
                return this.asin.apply(this, d);
            },
            acot: function(r, i) {
                var d = this.removeDen([r, i]);
                d[1].negate();
                return this.atan.apply(this, d);
            },
            //Hyperbolic trig
            cosh: function(r, i) {
                var re, im;
                re = _.parse(Math.cosh(r)*Math.cos(i));
                im = _.parse(Math.sinh(r)*Math.sin(i));
                return _.add(re, _.multiply(im, Symbol.imaginary()));
            },
            sinh: function(r, i) {
                var re, im;
                re = _.parse(Math.sinh(r)*Math.cos(i));
                im = _.parse(Math.cosh(r)*Math.sin(i));
                return _.add(re, _.multiply(im, Symbol.imaginary()));
            },
            tanh: function(r, i) {
                var re, im;
                re = _.parse(Math.sinh(2*r)/(Math.cos(2*i)+Math.cosh(2*r)));
                im = _.parse(Math.sin(2*i)/(Math.cos(2*i)+Math.cosh(2*r)));
                return _.subtract(re, _.multiply(im, Symbol.imaginary()));
            },
            sech: function(r, i) {
                var t = this.removeDen(this.cosh(r, i));
                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));
            },
            csch: function(r, i) {
                var t = this.removeDen(this.sinh(r, i));
                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));
            },
            coth: function(r, i) {
                var t = this.removeDen(this.tanh(r, i));
                return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));
            },
            acosh: function(r, i) {
                var a, b, z;
                z = this.fromArray([r, i]);
                a = sqrt(_.add(z.clone(), new Symbol(1)));
                b = sqrt(_.subtract(z.clone(), new Symbol(1)));
                return _.expand(log(_.add(z, _.expand(_.multiply(a, b)))));
            },
            asinh: function(r, i) {
                var a, z;
                z = this.fromArray([r, i]);
                a = sqrt(_.add(new Symbol(1), _.expand(_.pow(z.clone(), new Symbol(2)))));
                return _.expand(log(_.add(z, a)));
            },
            atanh: function(r, i) {
                var a, b, z;
                z = this.fromArray([r, i]);
                a = log(_.add(z.clone(), new Symbol(1)));
                b = log(_.subtract(new Symbol(1), z));
                return _.expand(_.divide(_.subtract(a, b), new Symbol(2)));
            },
            asech: function(r, i) {
                var t = this.removeDen([r, i]);
                t[1].negate();
                return this.acosh.apply(this, t);
            },
            acsch: function(r, i) {
                var t = this.removeDen([r, i]);
                t[1].negate();
                return this.asinh.apply(this, t);
            },
            acoth: function(r, i) {
                var t = this.removeDen([r, i]);
                t[1].negate();
                return this.atanh.apply(this, t);
            },
            sqrt: function(symbol) {
                var re, im, h, a, d;
                re = symbol.realpart();
                im = symbol.imagpart();
                h = Symbol.hyp(re, im);
                a = _.add(re.clone(), h);
                d = sqrt(_.multiply(new Symbol(2), a.clone()));
                return _.add(_.divide(a.clone(), d.clone()), _.multiply(_.divide(im, d), Symbol.imaginary()));
            },
            log: function(r, i) {
                var re, im;
                re = log(Symbol.hyp(r, i));
                im = _.parse(Math.atan2(i, r));
                return _.add(re, _.multiply(Symbol.imaginary(), im));
            },
            removeDen: function(symbol) {
                var den, r, i, re, im;
                if(isArray(symbol)) {
                    r = symbol[0];
                    i = symbol[1];
                }
                else {
                    r = symbol.realpart();
                    i = symbol.imagpart();
                }
                    
                den = Math.pow(r, 2)+Math.pow(i, 2);
                re = _.parse(r/den);
                im = _.parse(i/den);
                return [re, im];
            },
            fromArray: function(arr) {
                return _.add(arr[0], _.multiply(Symbol.imaginary(), arr[1]));
            },
            evaluate: function(symbol, f) {
                var re, im, sign;
                    
                sign = symbol.power.sign();
                //remove it from under the denominator
                symbol.power = symbol.power.abs();
                //expand
                if(symbol.power.greaterThan(1))
                    symbol = _.expand(symbol);
                //remove the denominator
                if(sign < 0) {
                    var d = this.removeDen(symbol);
                    re = d[0];
                    im = d[1];
                }
                else {
                    re = symbol.realpart();
                    im = symbol.imagpart();
                }

                if(re.isConstant('all') && im.isConstant('all'))
                    return this[f].call(this, re, im);
                return _.symfunction(f, [symbol]);
            }
        };
            
        var trig = this.Trig = {
            //container for trigonometric function
            cos: function(symbol) {
                if(symbol.equals('pi') && symbol.multiplier.den.equals(2))
                    return new Symbol(0);
                
                if(Settings.PARSE2NUMBER) { 
                    if(symbol.equals(new Symbol(Math.PI/2)))
                        return new Symbol(0);
                    if(symbol.isConstant()) 
                        return new Symbol(Math.cos(symbol.valueOf()));
                    if(symbol.isImaginary()) {
                        return complex.evaluate(symbol, 'cos');
                    }
                }
                if(symbol.equals(0))
                    return new Symbol(1);
                
                var retval, 
                    c = false,
                    q = getQuadrant(symbol.multiplier.toDecimal()),
                    m = symbol.multiplier.abs();
                symbol.multiplier = m;

                if(symbol.isPi() && symbol.isLinear()) { 
                    //return for 1 or -1 for multiples of pi
                    if(isInt(m)) {
                        retval  = new Symbol(even(m) ? 1 : -1);
                    } 
                    else {
                        var n = Number(m.num), d = Number(m.den);
                        if(d === 2) retval = new Symbol(0);
                        else if(d === 3) {
                            retval = _.parse('1/2'); c = true;
                        }
                        else if(d === 4) {
                            retval = _.parse('1/sqrt(2)'); c = true;
                        }
                        else if(d === 6) {
                            retval = _.parse('sqrt(3)/2'); c = true;
                        }
                        else retval = _.symfunction('cos', [symbol]);
                    }
                }

                if(c && (q === 2 || q === 3)) retval.negate();

                if(!retval) retval = _.symfunction('cos', [symbol]);

                return retval;
            },
            sin: function(symbol) { 
                if(Settings.PARSE2NUMBER) {
                    if(symbol.isConstant()) 
                        return new Symbol(Math.sin(symbol.valueOf()));
                    if(symbol.isImaginary()) 
                        return complex.evaluate(symbol, 'sin');
                }
                
                if(symbol.equals(0))
                    return new Symbol(0);
                
                var retval, 
                    c = false,
                    q = getQuadrant(symbol.multiplier.toDecimal()),
                    sign = symbol.multiplier.sign(),
                    m = symbol.multiplier.abs();
                symbol.multiplier = m;
                if(symbol.equals('pi'))
                    retval = new Symbol(0);
                else if(symbol.isPi() && symbol.isLinear()) { 
                    //return for 0 for multiples of pi
                    if(isInt(m)) {
                        retval  = new Symbol(0);
                    } 
                    else {
                        var n = m.num, d = m.den;
                        if(d == 2) {
                            retval = new Symbol(1); c = true;
                        }
                        else if(d == 3) {
                            retval = _.parse('sqrt(3)/2'); c = true;
                        }
                        else if(d == 4) {
                            retval = _.parse('1/sqrt(2)'); c = true;
                        }
                        else if(d == 6) {
                            retval = _.parse('1/2'); c = true;
                        }
                        else retval = _.symfunction('sin', [symbol]);
                    }
                }

                if(!retval) retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));

                if(c && (q === 3 || q === 4)) retval.negate();

                return retval;
            },
            tan: function(symbol) {
                if(Settings.PARSE2NUMBER) {
                    if(symbol.isConstant())
                        return new Symbol(Math.tan(symbol.valueOf()));
                    if(symbol.isImaginary()) 
                        return complex.evaluate(symbol, 'tan');
                }
                var retval, 
                    c = false,
                    q = getQuadrant(symbol.multiplier.toDecimal()),
                    m = symbol.multiplier;

                symbol.multiplier = m;

                if(symbol.isPi() && symbol.isLinear()) { 
                    //return 0 for all multiples of pi
                    if(isInt(m)) {
                        retval  = new Symbol(0);
                    } 
                    else {
                        var n = m.num, d = m.den;
                        if(d == 2) 
                            throw new UndefinedError('tan is undefined for '+symbol.toString());
                        else if(d == 3) {
                            retval = _.parse('sqrt(3)'); c = true;
                        }
                        else if(d == 4) {
                            retval = new Symbol(1); c = true;
                        }
                        else if(d == 6) {
                            retval = _.parse('1/sqrt(3)'); c = true;
                        }
                        else retval = _.symfunction('tan', [symbol]);
                    }
                }

                if(!retval) retval = _.symfunction('tan', [symbol]);

                if(c && (q === 2 || q === 4)) retval.negate();

                return retval;
            },
            sec: function(symbol) {
                if(Settings.PARSE2NUMBER) {
                    if(symbol.isConstant())
                        return new Symbol(Math2.sec(symbol.valueOf()));
                    if(symbol.isImaginary()) 
                        return complex.evaluate(symbol, 'sec');
                }

                var retval, 
                    c = false,
                    q = getQuadrant(symbol.multiplier.toDecimal()),
                    m = symbol.multiplier.abs();
                symbol.multiplier = m;

                if(symbol.isPi() && symbol.isLinear()) { 
                    //return for 1 or -1 for multiples of pi
                    if(isInt(m)) {
                        retval  = new Symbol(even(m) ? 1 : -1);
                    } 
                    else {
                        var n = m.num, d = m.den;
                        if(d == 2) 
                            throw new UndefinedError('sec is undefined for '+symbol.toString());
                        else if(d == 3) {
                            retval = new Symbol(2); c = true;
                        }
                        else if(d == 4) {
                            retval = _.parse('sqrt(2)'); c = true;
                        }
                        else if(d == 6) {
                            retval = _.parse('2/sqrt(3)'); c = true;
                        }
                        else retval = _.symfunction('sec', [symbol]);
                    }
                }

                if(c && (q === 2 || q === 3)) retval.negate();

                if(!retval) retval = _.symfunction('sec', [symbol]);

                return retval;
            },
            csc: function(symbol) {
                if(Settings.PARSE2NUMBER) {
                    if(symbol.isConstant())
                        return new Symbol(Math2.csc(symbol.valueOf()));
                    if(symbol.isImaginary()) 
                        return complex.evaluate(symbol, 'csc');
                }
                
                var retval, 
                    c = false,
                    q = getQuadrant(symbol.multiplier.toDecimal()),
                    m = symbol.multiplier.abs();

                symbol.multiplier = m;

                if(symbol.isPi() && symbol.isLinear()) { 
                    //return for 0 for multiples of pi
                    if(isInt(m)) {
                        throw new UndefinedError('csc is undefined for '+symbol.toString());
                    } 
                    else {
                        var n = m.num, d = m.den;
                        if(d == 2) {
                            retval = new Symbol(1); c = true;
                        }
                        else if(d == 3) {
                            retval = _.parse('2/sqrt(3)'); c = true;
                        }
                        else if(d == 4) {
                            retval = _.parse('sqrt(2)'); c = true;
                        }
                        else if(d == 6) {
                            retval = new Symbol(2); c = true;
                        }
                        else retval = _.symfunction('csc', [symbol]);
                    }
                }

                if(!retval) retval = _.symfunction('csc', [symbol]);

                if(c && (q === 3 || q === 4)) retval.negate();

                return retval;
            },
            cot: function(symbol) {
                if(Settings.PARSE2NUMBER) {
                    if(symbol.isConstant())
                        return new Symbol(Math2.cot(symbol.valueOf()));
                    if(symbol.isImaginary()) 
                        return complex.evaluate(symbol, 'cot');
                }
                var retval, 
                    c = false,
                    q = getQuadrant(symbol.multiplier.toDecimal()),
                    m = symbol.multiplier;

                symbol.multiplier = m;

                if(symbol.isPi() && symbol.isLinear()) { 
                    //return 0 for all multiples of pi
                    if(isInt(m)) {
                        throw new UndefinedError('cot is undefined for '+symbol.toString());
                    } 
                    else {
                        var n = m.num, d = m.den;
                        if(d == 2) retval = new Symbol(0);
                        else if(d == 3) {
                            retval = _.parse('1/sqrt(3)'); c = true;
                        }
                        else if(d == 4) {
                            retval = new Symbol(1); c = true;
                        }
                        else if(d == 6) {
                            retval = _.parse('sqrt(3)'); c = true;
                        }
                        else retval = _.symfunction('cot', [symbol]);
                    }
                }

                if(!retval) retval = _.symfunction('cot', [symbol]);

                if(c && (q === 2 || q === 4)) retval.negate();

                return retval;
            },
            acos: function(symbol) {
                if(Settings.PARSE2NUMBER) {
                    if(symbol.isConstant())
                        return new Symbol(Math.acos(symbol.valueOf()));
                    if(symbol.isImaginary()) 
                        return complex.evaluate(symbol, 'acos');
                }
                return _.symfunction('acos', arguments);
            },
            asin: function(symbol) {
                if(Settings.PARSE2NUMBER) {
                    if(symbol.isConstant())
                        return new Symbol(Math.asin(symbol.valueOf()));
                    if(symbol.isImaginary()) 
                        return complex.evaluate(symbol, 'asin');
                }
                return _.symfunction('asin', arguments);
            },
            atan: function(symbol) {
                var retval;
                if(symbol.equals(0))
                    retval = new Symbol(0);
                else if(Settings.PARSE2NUMBER) {
                    if(symbol.isConstant())
                        return new Symbol(Math.atan(symbol.valueOf()));
                    if(symbol.isImaginary()) 
                        return complex.evaluate(symbol, 'atan');
                }
                else if(symbol.equals(-1))
                    retval = _.parse('-pi/4');
                else 
                    retval = _.symfunction('atan', arguments);
                return retval;
            },
            asec: function(symbol) {
                if(Settings.PARSE2NUMBER) {
                    if(symbol.isConstant())
                        return new Symbol(Math.acos(symbol.invert().valueOf()));
                    if(symbol.isImaginary()) 
                        return complex.evaluate(symbol, 'asec');
                }
                return _.symfunction('asec', arguments);
            },
            acsc: function(symbol) {
                if(Settings.PARSE2NUMBER) {
                    if(symbol.isConstant())
                        return new Symbol(Math.acos(symbol.invert().valueOf()));
                    if(symbol.isImaginary()) 
                        return complex.evaluate(symbol, 'acsc');
                }
                return _.symfunction('acsc', arguments);
            },
            acot: function(symbol) {
                var retval;
                if(Settings.PARSE2NUMBER) {
                    if(symbol.isImaginary()) {
                        retval = complex.evaluate(symbol, 'acot');
                    }
                    else {
                        var k = _.parse('pi/2');
                        if(symbol.equals(0))
                            retval = k;
                        else {
                            if(symbol.lessThan(0))
                                k.negate();
                            retval = _.subtract(k, trig.atan(symbol));
                        }
                    }
                }
                else 
                    retval = _.symfunction('acot', arguments);
                return retval;    
            },
            atan2: function(a, b) {
                if(a.equals(0) && b.equals(0))
                    throw new UndefinedError('atan2 is undefined for 0, 0');
                
                if(Settings.PARSE2NUMBER && a.isConstant() && b.isConstant()) {
                    return new Symbol(Math.atan2(a, b));
                }
                return _.symfunction('atan2', arguments);
            }
        };
        this.trig = trig;
        
        var trigh = this.Trigh = {
            //container for hyperbolic trig function
            cosh: function(symbol) {
                var retval;
                if(Settings.PARSE2NUMBER) { 
                    if(symbol.isConstant()) 
                        return new Symbol(Math.cosh(symbol.valueOf()));
                    if(symbol.isImaginary()) {
                        return complex.evaluate(symbol, 'cosh');
                    }
                }
                
                return retval = _.symfunction('cosh', arguments);
            },
            sinh: function(symbol) {
                var retval;
                if(Settings.PARSE2NUMBER) { 
                    if(symbol.isConstant()) 
                        return new Symbol(Math.sinh(symbol.valueOf()));
                    if(symbol.isImaginary()) {
                        return complex.evaluate(symbol, 'sinh');
                    }
                }
                
                return retval = _.symfunction('sinh', arguments);
            },
            tanh: function(symbol) {
                var retval;
                if(Settings.PARSE2NUMBER) { 
                    if(symbol.isConstant()) 
                        return new Symbol(Math.tanh(symbol.valueOf()));
                    if(symbol.isImaginary()) {
                        return complex.evaluate(symbol, 'tanh');
                    }
                }
                
                return retval = _.symfunction('tanh', arguments);
            },
            sech: function(symbol) {
                var retval;
                if(Settings.PARSE2NUMBER) { 
                    if(symbol.isConstant()) 
                        return new Symbol(Math.sech(symbol.valueOf()));
                    if(symbol.isImaginary()) {
                        return complex.evaluate(symbol, 'sech');
                    }
                }
                
                return retval = _.symfunction('sech', arguments);
            },
            csch: function(symbol) {
                var retval;
                if(Settings.PARSE2NUMBER) { 
                    if(symbol.isConstant()) 
                        return new Symbol(Math.csch(symbol.valueOf()));
                    if(symbol.isImaginary()) {
                        return complex.evaluate(symbol, 'csch');
                    }
                }
                
                return retval = _.symfunction('csch', arguments);
            },
            coth: function(symbol) {
                var retval;
                if(Settings.PARSE2NUMBER) { 
                    if(symbol.isConstant()) 
                        return new Symbol(Math.coth(symbol.valueOf()));
                    if(symbol.isImaginary()) {
                        return complex.evaluate(symbol, 'coth');
                    }
                }
                
                return retval = _.symfunction('coth', arguments);
            },
            acosh: function(symbol) {
                var retval;
                if(Settings.PARSE2NUMBER && symbol.isImaginary())
                    retval = complex.evaluate(symbol, 'acosh');
                else if(Settings.PARSE2NUMBER) 
                    retval = evaluate(_.parse(format('log(({0})+sqrt(({0})^2-1))', symbol.toString())));
                else 
                    retval = _.symfunction('acosh', arguments);
                return retval;
            },
            asinh: function(symbol) {
                var retval;
                if(Settings.PARSE2NUMBER && symbol.isImaginary())
                    retval = complex.evaluate(symbol, 'asinh');
                else if(Settings.PARSE2NUMBER)
                    retval = evaluate(_.parse(format('log(({0})+sqrt(({0})^2+1))', symbol.toString())));
                else 
                    retval = _.symfunction('asinh', arguments);
                return retval;
            },
            atanh: function(symbol) {
                var retval;
                if(Settings.PARSE2NUMBER && symbol.isImaginary())
                    retval = complex.evaluate(symbol, 'atanh');
                else if(Settings.PARSE2NUMBER) { 
                    retval = evaluate(_.parse(format('(1/2)*log((1+({0}))/(1-({0})))', symbol.toString())));
                }
                else 
                    retval = _.symfunction('atanh', arguments);
                return retval;
            },
            asech: function(symbol) {
                var retval;
                if(Settings.PARSE2NUMBER && symbol.isImaginary())
                    retval = complex.evaluate(symbol, 'asech');
                else if(Settings.PARSE2NUMBER)
                    retval = evaluate(log(_.add(symbol.clone().invert(), sqrt(_.subtract(_.pow(symbol, new Symbol(-2)), new Symbol(1))))));
                else 
                    retval = _.symfunction('asech', arguments);
                return retval;
            },
            acsch: function(symbol) {
                var retval;
                if(Settings.PARSE2NUMBER && symbol.isImaginary())
                    retval = complex.evaluate(symbol, 'acsch');
                else if(Settings.PARSE2NUMBER)
                    retval = evaluate(_.parse(format('log((1+sqrt(1+({0})^2))/({0}))', symbol.toString())));
                else 
                    retval = _.symfunction('acsch', arguments);
                return retval;
            },
            acoth: function(symbol) {
                var retval;
                if(Settings.PARSE2NUMBER && symbol.isImaginary())
                    retval = complex.evaluate(symbol, 'acoth');
                else if(Settings.PARSE2NUMBER) {
                    if(symbol.equals(1))
                        retval = Symbol.infinity();
                    else
                        retval = evaluate(
                                _.divide(
                                    log(_.divide(_.add(symbol.clone(), new Symbol(1)), _.subtract(symbol.clone(), new Symbol(1)))), 
                            new Symbol(2)));
                }
                else 
                    retval = _.symfunction('acoth', arguments);
                return retval;
            }
        };
        this.trigh = trigh;
        
        //list all the supported operators
        var operators = this.operators = {
                '^' : new Operator('^', 'pow', 6, false, false),
                '**' : new Operator('**', 'pow', 6, false, false),
                '!!' : new Operator('!!', 'dfactorial',5, false, false, true, function(e) {
                    return _.symfunction(DOUBLEFACTORIAL, [e]); //wrap it in a factorial function
                }),
                '!' : new Operator('!', 'factorial', 5, false, false, true, function(e) {
                    return factorial(e); //wrap it in a factorial function
                }),  
                //done with crazy fix
                '*' : new Operator('*', 'multiply', 4, true, false),
                '/' : new Operator('/', 'divide', 4, true, false),
                '%' : new Operator('%', 'percent', 4, true, false, true, function(e) {
                    return _.percent(e);
                }),
                '%+' : new Operator('%+', 'percent_add', 2, true, false),
                '%-' : new Operator('%-', 'percent_subtract', 3, true, false),
                '+' : new Operator('+', 'add', 3, true, true, false, function(e) {
                    return e;
                }),
                '-' : new Operator('-', 'subtract', 3, true, true, false, function(e) {
                    return e.negate();
                }),
                //begin crazy fix ... :( TODO!!! revisit
                '!+' : new Operator('!+', 'factadd', 3, true, true, false),
                '!!+' : new Operator('!!+', 'dfactadd', 3, true, true, false),
                '!-' : new Operator('!-', 'factsub', 3, true, true, false),
                '!!-' : new Operator('!!-', 'dfactsub', 3, true, true, false),
                '=' : new Operator('=', 'equals', 2, false, false),
                '==' : new Operator('==', 'eq', 1, false, false),
                '<' : new Operator('<', 'lt', 1, false, false),
                '<=' : new Operator('<=', 'lte', 1, false, false),
                '>' : new Operator('>', 'gt', 1, false, false),
                '>=' : new Operator('>=', 'gte', 1, false, false),
                ',' : new Operator(',', 'comma', 0, true, false)
            },
            //list of supported brackets
            brackets = {
                '(': new Bracket('(', 0, true, null, 'round'),
                ')': new Bracket(')', 0, false, null, 'round'),
                '[': new Bracket('[', 1, true, function() {
                    var f = new Symbol('vector');
                    f.is_function = true;
                    return f;
                }, 'square'),
                ']': new Bracket(']', 1, false, null, 'square')
            },
            // Supported functions.
            // Format: function_name: [mapped_function, number_of_parameters]
            functions = this.functions = {
                'cos'               : [ trig.cos, 1],
                'sin'               : [ trig.sin, 1],
                'tan'               : [ trig.tan, 1],
                'sec'               : [ trig.sec, 1],
                'csc'               : [ trig.csc, 1],
                'cot'               : [ trig.cot, 1],
                'acos'              : [ trig.acos, 1],
                'asin'              : [ trig.asin, 1],
                'atan'              : [ trig.atan, 1],
                'asec'              : [ trig.asec, 1],
                'acsc'              : [ trig.acsc, 1],
                'acot'              : [ trig.acot, 1],
                'atan2'             : [ trig.atan2, 2],
                'acoth'             : [ trigh.acoth, 1],
                'asech'             : [ trigh.asech, 1],
                'acsch'             : [ trigh.acsch, 1],
                'sinh'              : [ trigh.sinh, 1],
                'cosh'              : [ trigh.cosh, 1],
                'tanh'              : [ trigh.tanh, 1],
                'asinh'             : [ trigh.asinh, 1],
                'sech'              : [ trigh.sech, 1],
                'csch'              : [ trigh.csch, 1],
                'coth'              : [ trigh.coth, 1],
                'acosh'             : [ trigh.acosh, 1],
                'atanh'             : [ trigh.atanh, 1],
                'log10'             : [ , 1],
                'exp'               : [ , 1],
                'min'               : [ min ,-1],
                'max'               : [ max,-1],
                'erf'               : [ , 1],
                'floor'             : [ , 1],
                'ceil'              : [ , 1],
                'trunc'             : [ , 1],
                'Si'                : [ , 1],
                'step'              : [ , 1],
                'rect'              : [ , 1],
                'sinc'              : [ , 1],
                'tri'               : [ , 1],
                'sign'              : [ sign, 1],
                'Ci'                : [ , 1],
                'Ei'                : [ , 1],
                'Shi'               : [ , 1],
                'Chi'               : [ , 1],
                'fib'               : [ , 1],
                'fact'              : [factorial, 1],
                'factorial'         : [factorial, 1],
                'dfactorial'        : [ , 1],
                'gamma_incomplete'  : [ , [1, 2]],
                'round'             : [ round, [1, 2]],
                'mod'               : [ mod, 2],
                'pfactor'           : [ pfactor , 1],
                'vector'            : [ vector, -1],
                'matrix'            : [ matrix, -1],
                'imatrix'           : [ imatrix, -1],
                'parens'            : [ parens, -1],
                'sqrt'              : [ sqrt, 1],
                'nthroot'           : [ nthroot, 2],
                'log'               : [ log , [1, 2]],
                'expand'            : [ expand , 1],
                'abs'               : [ abs , 1],
                'invert'            : [ invert, 1],
                'determinant'       : [ determinant, 1],
                'size'              : [ size, 1],
                'transpose'         : [ transpose, 1],
                'dot'               : [ dot, 2],
                'cross'             : [ cross, 2],
                'vecget'            : [ vecget, 2],
                'vecset'            : [ vecset, 3],
                'matget'            : [ matget, 3],
                'matset'            : [ matset, 4],
                'matgetrow'         : [ matgetrow, 2],
                'matsetrow'         : [ matsetrow, 3],
                'matgetcol'         : [ matgetcol, 2],
                'matsetcol'         : [ matsetcol, 3],
                'IF'                : [ IF, 3],
                //imaginary support
                'realpart'          : [ realpart, 1],
                'imagpart'          : [ imagpart, 1],
                'conjugate'         : [ conjugate, 1],
                'arg'               : [ arg, 1],
                'polarform'         : [ polarform, 1],
                'rectform'          : [ rectform, 1],
                'sort'              : [ sort, [1, 2]],
            };

        this.error = err;
        
        //this function is used to comb through the function modules and find a function given its name
        var findFunction = function(fname) {
            var fmodules = Settings.FUNCTION_MODULES,
                l = fmodules.length;
            for(var i=0; i<l; i++) {
                var fmodule = fmodules[i];
                if(fname in fmodule)
                    return fmodule[fname];
            }
            err('The function '+fname+' is undefined!');
        };

        var allNumbers = function(args) {
            for(var i=0; i<args.length; i++)
                if(args[i].group !== N)
                    return false;
            return true;
        };
        
        var allConstants = function(args) {
            for(var i=0; i<args.length; i++) {
                if(args[i].isPi() || args[i].isE())
                    continue;
                if(!args[i].isConstant(true))
                    return false;
            }
                    
            return true;
        };
        
        /**
         * This method gives the ability to override operators with new methods.
         * @param {String} which
         * @param {Function} with_what
         */
        this.override = function(which, with_what) {
            if(!bin[which]) bin[which] = [];
            bin[which].push(this[which]);
            this[which] = with_what;
        };
        
        /**
         * Restores a previously overridden operator
         * @param {String} what
         */
        this.restore = function(what) {
            if(this[what]) this[what] = bin[what].pop();
        };
        
        /**
         * This method is supposed to behave similarly to the override method but it does not override
         * the existing function rather it only extends it
         * @param {String} what
         * @param {Function} with_what
         * @param {boolean} force_call
         */
        this.extend = function(what, with_what, force_call) {
            var _ = this,
                extended = this[what];
            if(typeof extended === 'function' && typeof with_what === 'function') {
                var f = this[what];
                this[what] = function(a, b) {
                    if(isSymbol(a) && isSymbol(b) && !force_call) return f.call(_, a, b);
                    else return with_what.call(_, a, b, f);
                };
            }
        };
        
        /**
         * Generates library's representation of a function. It's a fancy way of saying a symbol with 
         * a few extras. The most important thing is that that it gives a fname and 
         * an args property to the symbols in addition to changing its group to FN
         * @param {String} fn_name
         * @param {Array} params
         * @returns {Symbol}
         */
        this.symfunction = function(fn_name, params) { 
            //call the proper function and return the result;
            var f = new Symbol(fn_name);
            f.group = FN;
            if(typeof params === 'object')
                params = [].slice.call(params);//ensure an array
            f.args = params;
            f.fname = fn_name === PARENTHESIS ? '' : fn_name;
            f.updateHash();
            return f;
        };
        
        /**
         * An internal function call for the Parser. This will either trigger a real 
         * function call if it can do so or just return a symbolic representation of the 
         * function using symfunction.
         * @param {String} fn_name
         * @param {Array} args
         * @returns {Symbol}
         */
        this.callfunction = function(fn_name, args, allowed_args) { 
            var fn_settings = functions[fn_name];
            
            if(!fn_settings) 
                err('Nerdamer currently does not support the function '+fn_name);
            
            var num_allowed_args = fn_settings[1] || allowed_args, //get the number of allowed arguments
                fn = fn_settings[0], //get the mapped function
                retval;
            //We want to be able to call apply on the arguments or create a symfunction. Both require
            //an array so make sure to wrap the argument in an array.
            if(!(args instanceof Array)) 
                args = args !== undefined ?  [args] : [];

            if(num_allowed_args !== -1) {
                var is_array = isArray(num_allowed_args),
                    min_args = is_array ? num_allowed_args[0] : num_allowed_args,
                    max_args = is_array ? num_allowed_args[1] : num_allowed_args,
                    num_args = args.length;
            
                var error_msg = fn_name+' requires a {0} of {1} arguments. {2} provided!';
                
                if(num_args < min_args) err(format(error_msg, 'minimum', min_args, num_args));
                if(num_args > max_args) err(format(error_msg, 'maximum', max_args, num_args));
            }

            /*
             * The following are very important to the how nerdamer constructs functions!
             * Assumption 1 - if fn is undefined then handling of the function is purely numeric. This
             *     enables us to reuse Math, Math2, ..., any function from Settings.FUNCTIONS_MODULES entry
             * Assumption 2 - if fn is defined then that function takes care of EVERYTHING including symbolics
             * Assumption 3 - if the user calls symbolics on a function that returns a numeric value then
             *     they are expecting a symbolic output.
             */
            if(!fn) { 
                //Remember assumption 1. No function defined so it MUST be numeric in nature
                fn = findFunction(fn_name); 
                if(Settings.PARSE2NUMBER && allNumbers(args)) 
                    retval = bigConvert(fn.apply(fn, args));
                else
                    retval = _.symfunction(fn_name, args);
            }
            else { 
                //Remember assumption 2. The function is defined so it MUST handle all aspects including numeric values
                retval = fn.apply(fn_settings[2], args);
            }

            return retval;
        };
        /**
         * Build a regex based on the operators currently loaded. These operators are to be ignored when 
         * substituting spaces for multiplication
         */
        this.operator_filter_regex = (function() {
            //we only want the operators which are singular since those are the ones
            //that nerdamer uses anyway
            var ostr = '^\\'+Object.keys(operators).filter(function(x) {
                if(x.length === 1)
                    return x;
            }).join('\\');
            //create a regex which captures all spaces between characters except those
            //have an operator on one end
            return new RegExp('(['+ostr+'])\\s+(['+ostr+'])');
        })();
        
        /*
         * This method parses the tree
         * @param {String[]} rpn
         * @returns {Symbol}
         */
        this.parseTree = function(rpn, subs) { 
            var q = []; // The container for parsed values
            var l = rpn.length;
            // begin parsing
            for(var i=0; i<l; i++) {
                var e = rpn[i];
                if(e.is_prefix_operator || e.is_postfix) { 
                    q.push(e.operation(q.pop()));
                    continue;
                }
                if(e.is_operator) {
                    var b = q.pop(),
                        a = q.pop();
                    if(isArray(b)) //misread function
                        _.error('Unrecognized function "'+a.value+'"');
                    if(typeof a === 'undefined' && !e.is_postfix)
                        _.error(e+' is not a valid postfix opertor');
                    q.push(this[e.fn](a, b));
                }
                else if(e.value in functions) { 
                    q.push(_.callfunction(e.value, q.pop()));
                }
                else { 
                    // Blank denotes a beginning of a scope with a prefix operator so all we have to do is 
                    // convert it to a zero
                    if(e === '') {
                        q.push(new Symbol(0));
                    }
                    else {
                        var unsubbed = e;
                        // make substitutions
                        //first sub in aliases
                        if(e in Settings.ALIASES)
                            e = _.parse(Settings.ALIASES[e]);
                        //constants take higher priority
                        if(e in constants)
                            e = new Symbol(constants[e]);
                        //next subs
                        else if(e in subs) {
                            e = subs[e].clone();
                        }
                        else if(e in VARS) {
                            e = VARS[e].clone();
                        }
                        e.unsubbed = unsubbed;
                        q.push(e);
                    }
                }
            }
            
            return q[0] || new Symbol(0);
        };
        
        /**
         * This is the method that triggers the parsing of the string. It generates a parse tree but processes 
         * it right away. The operator functions are called when their respective operators are reached. For instance
         * + with cause this.add to be called with the left and right hand values. It works by walking along each 
         * character of the string and placing the operators on the stack and values on the output. When an operator
         * having a lower order than the last is reached then the stack is processed from the last operator on the 
         * stack.
         * @param {String} expression_string
         * @param {Object} substitutions
         * @returns {Symbol}
         */
        this.parse = function(expression_string, substitutions, tree) { 
            //prepare the substitutions
            if(substitutions) {
                for(var x in substitutions)
                    substitutions[x] = _.parse(substitutions[x]);
                subs = substitutions;
            }
            else
                subs = {};

            //link e and pi
            if(Settings.PARSE2NUMBER) {
                subs.e = new Symbol(Math.E);
                subs.pi = new Symbol(Math.PI);
            }

            /*
             * Since variables cannot start with a number, the assumption is made that when this occurs the
             * user intents for this to be a coefficient. The multiplication symbol in then added. The same goes for 
             * a side-by-side close and open parenthesis
             */
            var e = String(expression_string), match;
            
            //add support for spaces between variables
            while(true) { 
                match = this.operator_filter_regex.exec(e);
                if(!match)
                    break;
                try {
                    var a = match[1],
                        b = match[2];
                    validateName(a);
                    validateName(b);
                    e = e.replace(match[0], a+'*'+b);
                }
                catch(e) {
                    break;
                }
            }

            e = e.split(' ').join('')//strip empty spaces
            //replace scientific numbers
            .replace(/\d+\.*\d*e\+?\-?\d+/gi, function(x) {
                return scientificToDecimal(x);
            })
            //allow omission of multiplication after coefficients
            .replace(/([\+\-\/\*]*[0-9]+)([a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]+[\+\-\/\*]*)/gi, function() {
                var str = arguments[4],
                    group1 = arguments[1],
                    group2 = arguments[2],
                    start = arguments[3],
                    first = str.charAt(start),
                    before = '',
                    d = '*';
                if(!first.match(/[\+\-\/\*]/)) before = str.charAt(start-1);
                if(before.match(/[a-z]/i)) d = '';
                return group1+d+group2;
            })
            .replace(/([a-z0-9_]+)/gi, function(match, a) {
                if(Settings.USE_MULTICHARACTER_VARS === false && !(a in functions)) {
                    if(!isNaN(a))
                        return a;
                    return a.split('').join('*');
                }
                return a;
            })
            //allow omission of multiplication sign between brackets
            .replace( /\)\(/g, ')*(' ) || '0';
            //replace x(x+a) with x*(x+a)
            while(true) {
                var e_org = e; //store the original
                e = e.replace(/([a-z0-9_]+)(\()|(\))([a-z0-9]+)/gi, function(match, a, b, c, d) {
                    var g1 = a || c,
                        g2 = b || d;
                    if(g1 in functions) //create a passthrough for functions
                        return g1+g2;
                    return g1+'*'+g2;
                });
                //if the original equals the replace we're done
                if(e_org === e) 
                    break;
            }
            var l = e.length, //the length of the string
                output = [], //the output array. This is what's returned
                stack = [], //the operator stack
                last_pos = 0, //the location of last operator encountered
                open_brackets = [0, 0], //a counter for the open brackets
                prefix_cache = [],
                new_scope = true; //signal if we're in a new scope or not
            // This method gets and inserts the token on output as the name implies
            var get_and_insert_token = function(to_pos) {
                if(to_pos !== last_pos) { 
                    token = new Symbol(e.substring(last_pos, to_pos)); 
                    output.push(token);
                    //once we find out first token we are no longer in a new scope so flip
                    //the flag
                    new_scope = false; 
                }
            };  
            
            var verify_prefix_operator = function(operator) {
                if(!operator.is_prefix)
                    err(operator+' is not a valid prefix operator');
            };
            
            var resolve_prefix = function(prefix1, prefix2) {
                if(!prefix2)
                    return prefix1;
                if(prefix1.val === prefix2.val)
                    return new Prefix(operators['+']);
                return new Prefix(operators['-']);
            };
            
            var insert_prefix = function(prefix) {
                var sl = stack.length;
                if(sl && stack[sl-1].is_prefix_operator) 
                    stack.push(resolve_prefix(prefix, stack.pop()));
                stack.push(prefix);   
            };
            
            var collapse_prefix_cache = function(to_output) {
                if(prefix_cache.length) {
                    var prefix = prefix_cache.pop();
                    while(prefix_cache.length)
                        prefix = resolve_prefix(prefix, prefix_cache.pop());
                    if(to_output)
                        output.push(prefix);
                    else
                        stack.push(prefix);
                }
            };
            
            /*
             * We define the operator as anything that performs any form of operation. A bracket as any object that defines
             * a scope and a token as anything in between two operators. This enables us to have variables of more than one letter.
             * This function is a modified version of the Shunting-Yard algorithm to enable variable names, and compound operators.
             * operators are defined in the operator object. We walk the string and check every character. If an operator is encountered
             * then we mark it's location. We find the next operator and get the token between. 
             */
            var token, operator, start = 0, i=0;
            // start the generation of the tree
            for(var i=start; i<l; i++) {
                //the character
                var ch = e.charAt(i); 
                if(ch in operators) { 
                    // We previously defined the token to be the anything between two operators and since we an operator
                    //we can grab the token
                    get_and_insert_token(i); 
                    //mark the current position
                    var c = i; 
                    /*
                     * In order to support compound operators we assume that the following might be operator as well. We keep walking the string
                     * until we encounter a character which is no longer an operator. We define that entire sub-string an operator
                     */
                    while(e.charAt(i+1) in operators)
                        i++;

                    var end_operator = i+1;
                    //the probable operator will be the difference between c and i;
                    var pr_operator = e.substring(c, end_operator); 
                    /* 
                     * We now have to see if this operator is actually an operator or a combination of an operator and prefix operators 
                     * e.g. 3*-+-8 or x^-3. To determine this we knock off an operator one at a time until we find the matching operator.
                     * For instance if we have an operator -= and we get -=-- we knock of a minus from the back until we reach -= which will 
                     * register as a defined operator since we defined it as such
                     */
                    while(!(pr_operator in operators)) { 
                        var l2 = pr_operator.length,
                            end = l2-1,
                            prefix = operators[pr_operator.charAt(end)];
                        pr_operator = pr_operator.substring(0, end);
                        //make sure it's not a postfix operator that we're dealing with
                        try {
                            //verify that it's not a prefix operator
                            verify_prefix_operator(prefix);
                            //add the prefix to the stack
                            prefix_cache.push(new Prefix(prefix)); 
                        }
                        catch(e) {
                            //check if we're dealing with postfix operators. 
                            //Rule: compound postfix operators must be a composition of postfix operators
                            var prl = pr_operator.length, o;
                            for(var j=0; j<prl; j++) {
                                o = operators[pr_operator.charAt(j)];
                                if(!o|| o && !o.is_postfix)
                                    err(e.message);
                            }

                            //at this point we know that we have only postfix operators but they are parsed left to right
                            var rem = '';
                            do {
                                if(pr_operator === '')
                                    break; //we're done since the entire operator has been consumed
                                if(pr_operator in operators) {
                                    output.push(operators[pr_operator]);
                                    pr_operator = rem;
                                    rem = '';
                                }
                                else {
                                    var end = pr_operator.length-1;
                                    rem += pr_operator.charAt(end);
                                    pr_operator = pr_operator.substring(0, end);
                                } 
                            }
                            while(true)
                            //the actual operator is now the one we assumed to be a prefix earlier. I need to really
                            //pick better variable names :-/
                            pr_operator = prefix.val;
                            break;
                        }
                    }
                    // we now have the operator
                    operator = operators[pr_operator];
                    
                    // we mark where we find the last operator so we know where the next token begins
                    last_pos = end_operator; 
                    while(true) { 
                        var sl = stack.length,
                            los = stack[sl-1];
                        //skip prefix 
                        while(los !== undefined && los.is_prefix_operator)  {
                            los = stack[--sl-1];
                        }
                            
                        if(sl === 0 || !(operator.left_assoc && operator.precedence <= los.precedence 
                            || !operator.left_assoc && operator.precedence < los.precedence))
                            break; //nothing to do
                        output.push(stack.pop());
                    }

                    // If we're in a new scope then we're dealing with a prefix operator
                    if(new_scope) { 
                        /*
                         * There is literally no way to differentiate between a malformed expression and a properly formed one if there is no gap left 
                         * at the beginning of the scope. This is best illustrated. Take the expression 3+7- in RPN it becomes 3,7,+,-
                         * Take the expression -3+7 in RPN this become 3,7,+,- as well. The difference is that we tag the minus as
                         * a prefix in the properly formed expression. Problem solved! But wait. Imagine we have no gaps at the beginning
                         * of the scope let's say -(3+7). With no gaps this again becomes 3,7,+,- with no way to differentiate
                         * between -3+7 and -(3+7) unless the second one is written as 3,7,+, ,- where the gap denotes the end of the scope
                         */ 
                        verify_prefix_operator(operator);
                        var prefix = new Prefix(operator); 
                        //collapse the prefix cache
                        while(prefix_cache.length)
                            prefix = resolve_prefix(prefix, prefix_cache.pop());
                        insert_prefix(prefix);
                    }
                    else { 
                        //if there's already a prefix on the stack then bring it down
                        var sl = stack.length;
                        if(sl && stack[sl-1].is_prefix_operator && operator.left_assoc) 
                            //it's safe to move the prefix to output since it's at the beginning of a scope
                            output.push(stack.pop());

                        stack.push(operator);
                        //resolve the prefixes
                        collapse_prefix_cache();
                    }
                        
                }
                else if(ch in brackets) {
                    var bracket = brackets[ch]; 
                    if(bracket.open) { 
                        //mark a bracket as being opened
                        open_brackets[bracket.bracket_id]++;
                        //check if we're dealing with a function
                        if(last_pos !== i) {
                            var f = new Symbol(e.substring(last_pos, i));
                            // assume it's a function. Since a string is just an object, why not use it
                            f.is_function = true;
                            stack.push(f);
                        }   
                        if(bracket.fn)
                            stack.push(bracket.fn());
                        // We're in a new scope so signal so
                        new_scope = true;
                        stack.push(bracket);
                        //get all the prefixes at the beginning of the scope
                        last_pos = i+1; //move past the bracket
                    }
                    else {
                        //close the open bracket
                        open_brackets[bracket.bracket_id]--;
                        // We proceed to pop the entire stack to output this this signals the end of a scope. The first thing is to get the 
                        // the prefixes and then the token at the end of this scope.
                        // get the token
                        get_and_insert_token(i);
                        // And then keep popping the stack until we reach a bracket
                        while(true) {
                            var entry = stack.pop();
                            if(entry === undefined)
                                err("Missing open bracket for bracket '"+bracket+"'!");
                            //we found the matching bracket so our search is over
                            if(entry.bracket_id === bracket.bracket_id)
                                break; // We discard the closing bracket
                            else 
                                output.push(entry);
                        }
                        
                        var sl = stack.length;
                        //move the function to output
                        if(sl && stack[sl-1].is_function)
                            output.push(stack.pop());
                        
                        last_pos = i+1; //move past the bracket
                    }
                }
            }
            
            //get the last token at the end of the string
            get_and_insert_token(l);
            //collapse the stack to output
            while(stack.length)
                output.push(stack.pop());

            //check parity
            for(var i=0; i<open_brackets.length; i++) 
                if(open_brackets[i] > 0) {
                    var brkt;
                    for(bracket in brackets)
                        if(brackets[bracket].bracket_id === i && !brackets[bracket].open)
                            brkt = brackets[bracket];
                    err('Missing close bracket. Expected "'+brkt+'"!');
                }
                   
            if(tree)
                return output;
            
            return this.parseTree(output, subs);

        };
        
        /**
         * Reads a string into an array of Symbols and operators
         * @param {Symbol} symbol
         * @returns {Array}
         */
        this.toObject = function(expression_string) {
            var output = [[]], //the first one is the parent
                e = expression_string.split(' ').join(''), //remove spaces
                func_stack = [],
                lp = 0,
                target = output[0],
                token;
            var push = function(token) {
                if(token !== '')
                    target.push(new Symbol(token));
            };
            //start the conversion
            for(var i=0, l=e.length; i<l; i++) {
                var ch = e.charAt(i);
                if(ch in operators) {
                    token = e.substring(lp, i);
                    push(token);
                    target.push(ch);
                    lp = i+1;
                }
                else if(ch in brackets) { 
                    var bracket = brackets[ch];
                    if(bracket.open) {
                        //we may be dealing with a function so make 
                        func_stack.push(e.substring(lp, i));
                        target = []; //start a new scope
                        output.push(target); //add it to the chain
                        lp = i+1;    
                    }
                    else {
                        //we have a close bracket
                        token = e.substring(lp, i); //grab the token
                        push(token);
                        var o = output.pop(), //close the scope
                            f = func_stack.pop(), //grab the matching function
                            r;
                        //is it a function?
                        if(f in functions) 
                            r = _.symfunction(f, o); 
                        else if(f === '') {
                            r = o;
                            r.type = bracket.type;
                        }
                        else 
                            r = f;
                        //point to the correct target
                        target = output[output.length-1];
                        target.push(r);
                        lp = i+1; 
                    }
                }
            }
            
            push(e.substring(lp, i)); //insert the last token

            return output[0];
        };

        var chunkAtCommas = function(arr){
            var j, k = 0, chunks = [[]];
            for (var j = 0, l=arr.length; j<l; j++){
                if (arr[j] === ',') {
                    k++;
                    chunks[k] = [];
                } else {
                    chunks[k].push(arr[j]);
                }
            }
            return chunks;
        };
        
        var rem_brackets = function(str) {
            return str.replace(/^\\left\((.+)\\right\)$/g, function(str, a) {
                if(a) return a;
                return str;
            });
        };
        
        this.toTeX = function(expression_or_obj) { 
            var obj = typeof expression_or_obj === 'string' ? this.toObject(expression_or_obj) : expression_or_obj,
                TeX = [];
            
            if(isArray(obj)) { 
                var nobj = [], a, b;
                //first handle ^
                for(var i=0; i<obj.length; i++) {
                    a = obj[i];
                    
                    if(obj[i+1] === '^') {
                        b = obj[i+2];
                        nobj.push(LaTeX.braces(this.toTeX([a]))+'^'+LaTeX.braces(this.toTeX([b])));
                        i+=2;
                    }
                    else
                        nobj.push(a);
                }
                obj = nobj;
            }

            
            for(var i=0, l=obj.length; i<l; i++) {
                var e = obj[i];
                //convert * to cdot
                if(e === '*')
                    e = '\\cdot';
                
                if(isSymbol(e)) {
                    if(e.group === FN) {
                        var fname = e.fname, f;

                        if(fname === SQRT) 
                            f = '\\sqrt'+LaTeX.braces(this.toTeX(e.args));
                        else if(fname === ABS) 
                            f = LaTeX.brackets(this.toTeX(e.args), 'abs');
                        else if(fname === PARENTHESIS) 
                            f = LaTeX.brackets(this.toTeX(e.args), 'parens');
                        else if (fname === 'log10')
                            f = '\\log_{10}\\left( ' + this.toTeX(e.args) + '\\right)';
                        else if(fname === 'integrate') {
                            /* Retrive [Expression, x] */
                            var chunks = chunkAtCommas(e.args);
                            /* Build TeX */
                            var expr = LaTeX.braces(this.toTeX(chunks[0])),
                                dx = this.toTeX(chunks[1]);
                            f = '\\int ' + expr + '\\, d' + dx;
                        }
                        else if (fname === 'defint') {
                            var chunks = chunkAtCommas(e.args),
                                expr = LaTeX.braces(this.toTeX(chunks[0])),
                                dx = this.toTeX(chunks[1]),
                                lb = this.toTeX(chunks[2]),
                                ub = this.toTeX(chunks[3]);
                            f = '\\int\\limits_{'+lb+'}^{'+ub+'} '+expr+'\\, d'+dx;

                        }
                        else if(fname === 'diff') {
                            var chunks = chunkAtCommas(e.args);
                            var dx = '', expr = LaTeX.braces(this.toTeX(chunks[0]));
                            /* Handle cases: one argument provided, we need to guess the variable, and assume n = 1 */
                            if (chunks.length == 1){
                                var vars = [];
                                for (j = 0; j < chunks[0].length; j++){
                                    if (chunks[0][j].group === 3) {
                                        vars.push(chunks[0][j].value);
                                    }
                                }
                                vars = vars.sort();
                                dx = vars.length > 0 ? ('\\frac{d}{d ' + vars[0] + '}') : '\\frac{d}{d x}';
                            }
                            /* If two arguments, we have expression and variable, we assume n = 1 */ 
                            else if (chunks.length == 2){
                                dx = '\\frac{d}{d ' + chunks[1] + '}';
                            }
                            /* If we have more than 2 arguments, we assume we've got everything */
                            else {
                                dx = '\\frac{d^{' + chunks[2] + '}}{d ' + this.toTeX(chunks[1]) + '^{' + chunks[2] + '}}';
                            }

                            f = dx + '\\left(' + expr + '\\right)';

                        }
                        else if (fname === 'sum' || fname === 'product') {
                            // Split e.args into 4 parts based on locations of , symbols.
                            var argSplit = [[], [], [], []], j = 0, i;
                            for (i = 0; i < e.args.length; i++){
                                if (e.args[i] === ','){
                                    j++;
                                    continue;
                                } 
                                argSplit[j].push(e.args[i]);
                            }
                            // Then build TeX string.
                            f = (fname==='sum'?'\\sum_':'\\prod_')+LaTeX.braces(this.toTeX(argSplit[1])+' = '+this.toTeX(argSplit[2]));
                            f += '^'+LaTeX.braces(this.toTeX(argSplit[3])) + LaTeX.braces(this.toTeX(argSplit[0]));
                        }
                        else if(fname === FACTORIAL || fname === DOUBLEFACTORIAL) 
                            f = this.toTeX(e.args) + (fname === FACTORIAL ? '!' : '!!');
                        else  {
                            f = LaTeX.latex(e);
                            //f = '\\mathrm'+LaTeX.braces(fname.replace(/_/g, '\\_')) + LaTeX.brackets(this.toTeX(e.args), 'parens');
                        }
                            
                        TeX.push(f);
                    } 
                    else
                        TeX.push(LaTeX.latex(e));
                }
                else if(isArray(e)) { 
                    TeX.push(LaTeX.brackets(this.toTeX(e)));
                }
                else {
                    if(e === '/') 
                        TeX.push(LaTeX.frac(rem_brackets(TeX.pop()), rem_brackets(this.toTeX([obj[++i]]))));
                    else
                        TeX.push(e);
                }
            }
            return TeX.join(' ');
        };

        /////////// ********** FUNCTIONS ********** ///////////
        /* Although parens is not a "real" function it is important in some cases when the 
         * symbol must carry parenthesis. Once set you don't have to worry about it anymore
         * as the parser will get rid of it at the first opportunity
         */
        function parens(symbol) {
            if(Settings.PARSE2NUMBER) {
                return symbol;
            }
            return _.symfunction('parens', [symbol]);
        }
        
        function abs(symbol) { 
            if(symbol.multiplier.lessThan(0)) symbol.multiplier.negate();
            if(symbol.isImaginary()) {
                var re = symbol.realpart();
                var im = symbol.imagpart();
                if(re.isConstant() && im.isConstant())
                    return sqrt(_.add(_.pow(re, new Symbol(2)), _.pow(im, new Symbol(2))));
            }
            else if(isNumericSymbol(symbol) || even(symbol.power)) {
                return symbol;
            }
            if(symbol.isComposite()) {
                var ms = [];
                symbol.each(function(x) {
                    ms.push(x.multiplier);
                });
                var gcd = Math2.QGCD.apply(null, ms);
                if(gcd.lessThan(0)) {
                    symbol.multiplier = symbol.multiplier.multiply(new Frac(-1));
                    symbol.distributeMultiplier();
                }
            }
            return _.symfunction(ABS, [symbol]);
        }
        /**
         * The factorial functions
         * @param {Symbol} symbol
         * @return {Symbol}
         */
        function factorial(symbol) { 
            var retval;
            if(Settings.PARSE2NUMBER && symbol.isConstant()) {
                if(isInt(symbol)) {
                    retval = Math2.bigfactorial(symbol);
                }
                else {
                    retval = Math2.gamma(symbol.multiplier.add(new Frac(1)).toDecimal());
                }
                
                retval = bigConvert(retval);
                return retval;
            }
            else if(symbol.equals(1/2))
                return _.parse('sqrt(pi)/2');
            return _.symfunction(FACTORIAL, [symbol]);
        }        /**
         * The mod function
         * @param {Symbol} symbol1
         * @param {Symbol} symbol2
         * @returns {Symbol}
         */
        function mod(symbol1, symbol2) {
            if(symbol1.isConstant() && symbol2.isConstant()) {
                var retval = new Symbol(1);
                retval.multiplier = retval.multiplier.multiply(symbol1.multiplier.mod(symbol2.multiplier));
                return retval;
            }
            //try to see if division has remainder of zero
            var r = _.divide(symbol1.clone(), symbol2.clone());
            if(isInt(r))
                return new Symbol(0);
            return _.symfunction('mod', [symbol1, symbol2]);
        }
        /**
         * A branghing function
         * @param {Boolean} condition
         * @param {Symbol} a
         * @param {Symbol} b
         * @returns {Symbol}
         */
        function IF(condition, a, b) { 
            if(typeof condition !== 'boolean')
                if(isNumericSymbol(condition))
                    condition = !!Number(condition);
            if(condition) 
                return a;
            return b;
        }

        /**
         * The square root function
         * @param {Symbol} symbol
         * @returns {Symbol}
         */
        function sqrt(symbol) { 
            if(symbol.fname === '' && symbol.power.equals(1))
                symbol = symbol.args[0];
            
            if(Settings.PARSE2NUMBER) {
                if(symbol.isConstant() && !symbol.multiplier.lessThan(0)) {
                    return new Symbol(Math.sqrt(symbol.multiplier.toDecimal()));
                }
                else if(symbol.isImaginary()) {
                    return complex.sqrt(symbol);
                }
            } 

            var img, retval, 
                isConstant = symbol.isConstant();
        
            if(symbol.group === CB && symbol.isLinear()) {
                var m = sqrt(Symbol(symbol.multiplier));
                for(var s in symbol.symbols) {
                    var x = symbol.symbols[s];
                    m = _.multiply(m, sqrt(x));
                }

                retval = m;
            }
            //if the symbol is already sqrt then it's that symbol^(1/4) and we can unwrap it
            else if(symbol.fname === SQRT) { 
                var s = symbol.args[0];
                var ms = symbol.multiplier;
                s.setPower(symbol.power.multiply(new Frac(0.25)));
                retval = s;
                //grab the multiplier
                if(!ms.equals(1))
                    retval = _.multiply(sqrt(_.parse(ms)), retval);
            }
            //if the symbol is a fraction then we don't keep can unwrap it. For instance
            //no need to keep sqrt(x^(1/3))
            else if(!symbol.power.isInteger()) { 
                symbol.setPower(symbol.power.multiply(new Frac(0.5)));
                retval = symbol;
            }
            else { 
                //if the symbols is imagary then we place in the imaginary part. We'll return it 
                //as a product
                if(isConstant && symbol.multiplier.lessThan(0)) {
                    img = Symbol.imaginary();
                    symbol.multiplier = symbol.multiplier.abs();
                }

                var q = symbol.multiplier.toDecimal(),
                    qa = Math.abs(q),
                    t = Math.sqrt(qa);

                var m;
                //it's a perfect square so take the square
                if(isInt(t)) { 
                    m = new Symbol(t);
                }
                else if(isInt(q)) { 
                    var factors = Math2.ifactor(q);
                    var tw = 1;
                    for(var x in factors) {
                        var n = factors[x],
                            nn = (n - (n%2)); //get out the whole numbers
                        if(nn) { //if there is a whole number ...
                            var w = Math.pow(x, nn);
                            tw *= Math.pow(x, nn/2); //add to total wholes
                            q /= w; //reduce the number by the wholes
                        }
                    }
                    m = _.multiply(_.symfunction(SQRT, [new Symbol(q)]), new Symbol(tw));
                }
                else {
                    var n = symbol.multiplier.num.toString(),
                        d = symbol.multiplier.den.toString(),
                        sqrtN = Math.sqrt(n),
                        sqrtD = Math.sqrt(d);
                
                    m = _.multiply(
                            n === '1' ? new Symbol(1) : isInt(sqrtN) ? new Symbol(sqrtN) : _.symfunction(SQRT, [new Symbol(n)]), 
                            d === '1' ? new Symbol(1) : isInt(sqrtD) ? new Symbol(sqrtD).invert() : _.symfunction(SQRT, [new Symbol(d)]).invert()
                    );
                }

                
                //strip the multiplier since we already took the sqrt
                symbol = symbol.toUnitMultiplier(true);
                //if the symbol is one just return one and not the sqrt function
                if(symbol.isOne()) {
                    retval = symbol;
                }
                else if(even(symbol.power.toString())) { 
                    //just raise it to the 1/2
                    retval = _.pow(symbol.clone(), new Symbol(0.5));
                }
                else { 
                    retval = _.symfunction(SQRT, [symbol]);
                }

                if(m) retval = _.multiply(m, retval);

                if(img) retval = _.multiply(img, retval);
            }

            return retval;
        }
        this.sqrt = sqrt;
        /**
         * 
         * @param {Symbol} num - the number being raised
         * @param {Symbol} p - the exponent
         * @param {type} prec - the precision wanted
         * @param {bool} asbig - true if a bigDecimal is wanted
         * @returns {Symbol}
         */
        //TODO: this method needs serious optimization
        function nthroot(num, p, prec, asbig) { 
            if(typeof asbig === 'undefined') 
                asbig = true;
            prec = prec || 25;
            if(!isSymbol(p))
                p = _.parse(p);
            if(isInt(num) && p.isConstant()) { 
                var sign = num.sign(),
                    x;
                num = abs(num); //remove the sign
                var idx = num+'-'+p;
                if(idx in Settings.CACHE.roots) {
                    x = new bigInt(Settings.CACHE.roots[idx]);
                    if(!even(p))
                        x = x.multiply(sign);
                }
                else {
                    if(num < 18446744073709551616) //2^64
                        x = Frac.create(Math.pow(num, 1/p));
                    else
                        x = Math2.nthroot(num, p);
                }
                if(isInt(x) || Settings.PARSE2NUMBER) {
                    if(asbig)
                        return new Symbol(x);
                    return new Symbol(x.toDecimal(prec));
                }
            }
            
            if(Number(p) === 2)
                return _.sqrt(num);
            
            return _.symfunction('nthroot', arguments);
        }
          
        this.nthroot = nthroot;
        
        function pfactor(symbol) { 
            //Fix issue #298
            if(symbol.equals(Math.PI))
                return new Symbol(Math.PI);
            //evaluate the symbol to merge constants
            symbol = evaluate(symbol.clone());
            
            
            if(symbol.isConstant()) {
                var retval = new Symbol(1);
                var m = symbol.toString();
                if(isInt(m)) { 
                    var factors = Math2.ifactor(m);
                    for(var factor in factors) {
                        var p = factors[factor];
                        retval = _.multiply(retval, _.symfunction('parens', [new Symbol(factor).setPower(new Frac(p))]));
                    }
                }
                else {
                    var n = pfactor(new Symbol(symbol.multiplier.num));
                    var d = pfactor(new Symbol(symbol.multiplier.den));
                    retval = _.multiply(_.symfunction('parens', [n]), _.symfunction('parens', [d]).invert());
                }
            }
            else 
                retval = _.symfunction('pfactor', arguments);
            return retval;
        }
        
        /**
         * Get's the real part of a complex number. Return number if real
         * @param {Symbol} symbol
         * @returns {Symbol}
         */
        function realpart(symbol) {
            return symbol.realpart();
        }
        
        /**
         * Get's the imaginary part of a complex number
         * @param {Symbol} symbol
         * @returns {Symbol}
         */
        function imagpart(symbol) {
            return symbol.imagpart();
        }
        
        /**
         * Computes the conjugate of a complex number
         * @param {Symbol} symbol
         * @returns {Symbol}
         */
        function conjugate(symbol) {
            var re = symbol.realpart();
            var im = symbol.imagpart();
            return _.add(re, _.multiply(im.negate(), Symbol.imaginary()));
        }
        
        /**
         * Returns the arugment of a complex number
         * @param {Symbol} symbol
         * @returns {Symbol}
         */
        function arg(symbol) {
            var re = symbol.realpart(); 
            var im = symbol.imagpart(); 
            if(re.isConstant() && im.isConstant())
                return new Symbol(Math.atan2(im, re));
            return _.symfunction('atan2', [im, re]);
        }
        
        /**
         * Returns the polarform of a complex number
         * @param {Symbol} symbol
         * @returns {Symbol}
         */
        function polarform(symbol) {
            var p, r, e, theta;
            p = Symbol.toPolarFormArray(symbol);
            theta = p[1];
            r = p[0];
            e = _.parse(format('e^({0}*({1}))', Settings.IMAGINARY, theta));
            return _.multiply(r, e);
        }
        
        /**
         * Returns the rectangular form of a complex number. Does not work for symbolic coefficients
         * @param {Symbol} symbol
         * @returns {Symbol}
         */
        function rectform(symbol) {
            //TODO: e^((i*pi)/4)
            var original = symbol.clone();
            try {
                var f, p, q, s, h, d, n;
                f = decompose_fn(symbol, 'e', true);
                p = _.divide(f.x.power, Symbol.imaginary());
                q = evaluate(trig.tan(p));
                s = _.pow(f.a, new Symbol(2));
                d = q.getDenom(true);
                n = q.getNum();
                h = Symbol.hyp(n, d);
                //check 
                if(h.equals(f.a)) {
                    return _.add(d, _.multiply(Symbol.imaginary(), n));
                }
                else {
                    return original;
                }
            }
            catch(e){
                return original;
            }    
        }

        function symMinMax(f, args) {
            args.map(function(x) {
                x.numVal = evaluate(x).multiplier;
            });
            var l, a, b;
            while(true) {
                l = args.length;
                if(l < 2) return args[0];
                a = args.pop();
                b = args[l-2];
                if(f === 'min' ? a.numVal < b.numVal : a.numVal > b.numVal) {
                    args.pop();
                    args.push(a);
                }
            } 
        }
        
        /**
         * Returns maximum of a set of numbers
         * @returns {Symbol}
         */
        function max() {
            var args = [].slice.call(arguments);
            if(allSame(args))
                return args[0];
            if(allNumbers(args))
                return new Symbol(Math.max.apply(null, args));
            if(Settings.SYMBOLIC_MIN_MAX && allConstants(args)) 
                return symMinMax('max', args);
            return _.symfunction('max', args);
        }
        
        /**
         * Returns minimum of a set of numbers
         * @returns {Symbol}
         */
        function min() {
            var args = [].slice.call(arguments);
            if(allSame(args))
                return args[0];
            if(allNumbers(args))
                return new Symbol(Math.min.apply(null, args));
            if(Settings.SYMBOLIC_MIN_MAX && allConstants(args)) 
                return symMinMax('min', args);
            return _.symfunction('min', args);
        }
        
        /**
         * Returns the sign of a number
         * @param {Symbol} x
         * @returns {Symbol}
         */
        function sign(x) {
            if(x.isConstant(true))
                return new Symbol(Math.sign(evaluate(x)));
            return _.symfunction('sign', arguments);
        }
        
        function sort(symbol, opt) {
            opt = opt ? opt.toString() : 'asc'; 
            var getval = function(e) {
                if(e.group === N)
                    return e.multiplier;
                if(e.group === FN) {
                    if(e.fname === '')
                        return getval(e.args[0]);
                    return e.fname;
                }
                if(e.group === S)
                    return e.power;
                
                return e.value;
            };
            var symbols = isVector(symbol) ? symbol.elements : symbol.collectSymbols();
            return new Vector(symbols.sort(function(a, b) {
                var aval = getval(a),
                    bval = getval(b);
                if(opt === 'desc')
                    return bval - aval;
                return aval - bval;
            }));
        }
        
        /**
         * The log function
         * @param {Symbol} symbol
         * @param {Symbol} base
         * @returns {Symbol}
         */
        function log(symbol, base) { 
            var retval;
            if(symbol.fname === SQRT && symbol.multiplier.equals(1)) {
                return _.divide(log(symbol.args[0]), new Symbol(2));
            }
            
            //log(0) is undefined so complain
            if(symbol.equals(0)) {
                throw new UndefinedError('log(0) is undefined!');
            }
            
            //deal with imaginary values
            if(symbol.isImaginary()) {
                return complex.evaluate(symbol, 'log');
                /*
                var a = format('log(sqrt(({0})^2+({1})^2))-({2})*atan2(({1}),({0}))', symbol.imagpart(), symbol.realpart(), Settings.IMAGINARY),
                    b = format('({0})*PI/2', Settings.IMAGINARY);

                return _.add(_.parse(a), _.parse(b));
                */
            }
            
            if(symbol.isConstant() && typeof base !== 'undefined' && base.isConstant()) {
                /*
                var log_sym = Math2.bigLog(symbol.multiplier);
                var log_base = Math2.bigLog(base.multiplier);
                retval = new Symbol(log_sym.divide());
                */
                var log_sym = Math.log(symbol);
                var log_base = Math.log(base);
                retval = new Symbol(log_sym/log_base);
            }
                
            else if(symbol.group === EX && symbol.power.multiplier.lessThan(0) || symbol.power.toString() === '-1') {
                symbol.power.negate(); 
                //move the negative outside but keep the positive inside :)
                retval = log(symbol).negate();
            } 
            else if(symbol.value === 'e' && symbol.multiplier.equals(1)) {
                var p = symbol.power;
                retval = isSymbol(p) ? p : new Symbol(p); 
            }
            else if(symbol.group === FN && symbol.fname === 'exp') {
                var s = symbol.args[0];
                if(symbol.multiplier.equals(1)) retval = _.multiply(s, new Symbol(symbol.power));
                else retval = _.symfunction('log',[symbol]);
            }
            else if(Settings.PARSE2NUMBER && isNumericSymbol(symbol)) {
                var img_part;
                if(symbol.multiplier.lessThan(0)) {
                    symbol.negate();
                    img_part = _.multiply(new Symbol(Math.PI), new Symbol('i'));
                }
                retval = new Symbol(Math.log(symbol.multiplier.toDecimal()));
                if(img_part) retval = _.add(retval, img_part);
            }
            else { 
                var s;
                if(!symbol.power.equals(1)) {
                    s = symbol.group === EX ? symbol.power : new Symbol(symbol.power);
                    symbol.toLinear(); 
                }
                //log(a,a) = 1 since the base is allowed to be changed. 
                //This was pointed out by Happypig375 in issue #280
                if(arguments.length > 1 && allSame(arguments))
                    retval = new Symbol(1);
                else
                    retval = _.symfunction('log', arguments); 
                
                if(s) retval = _.multiply(s, retval);
            }
            return retval;
        }

        /**
         * Round a number up to s decimal places
         * @param {Number} x
         * @param {int} s - the number of decimal places
         * @returns {undefined}
         */
        function round(x, s) {
            var sIsConstant = s && s.isConstant() || typeof s === 'undefined';
            if(x.isConstant() && sIsConstant) {
                var v, e, exp, retval;
                v = x;
                //round the coefficient of then number but not the actual decimal value
                //we know this because a negative number was passed
                if(s && s.lessThan(0)) {
                    s = abs(s);
                    //convert the number to exponential form
                    e = Number(x).toExponential().toString().split('e');
                    //point v to the coefficient of then number
                    v = e[0];
                    //set the expontent
                    exp = e[1];
                }
                //round the number to the requested precision
                retval = new Symbol(Utils.round(v, Number(s||0)));
                //if there's a exponent then put it back
                return _.multiply(retval, _.pow(new Symbol(10), new Symbol(exp || 0)))
            }
                
            
            return _.symfunction('round', arguments); 
        }
        
        /**
         * Gets the quadrant of the trig function
         * @param {Frac} m
         * @returns {Int}
         */
        function getQuadrant(m) {
            var v = m % 2, quadrant;
            
            if(v < 0) v = 2+v; //put it in terms of pi
            
            if(v >= 0 && v <= 0.5) quadrant = 1;
            else if(v > 0.5 && v <= 1) quadrant = 2;
            else if(v > 1 && v <= 1.5) quadrant = 3;
            else quadrant = 4;
            return quadrant;
        }

        /*
         * Serves as a bridge between numbers and bigNumbers
         * @param {Frac|Number} n
         * @returns {Symbol} 
         */
        function bigConvert(n) { 
            if(!isFinite(n)){
                var sign = Math.sign(n);
                var r = new Symbol(String(Math.abs(n)));
                r.multiplier = r.multiplier.multiply(new Frac(sign));
                return r;
            }
            if(isSymbol(n))
                return n;
            if(typeof n === 'number') {
                try {
                    n = Frac.simple(n);
                }
                catch(e) {
                    n = new Frac(n);
                }
            }
                
            var symbol = new Symbol(0);
            symbol.multiplier = n;
            return symbol;
        }        
        function clean(symbol) {
            // handle functions with numeric values
            // handle denominator within denominator
            // handle trig simplifications
            var g = symbol.group, retval;
            //Now let's get to work
            if(g === CP) {
                var num = symbol.getNum(),
                    den = symbol.getDenom() || new Symbol(1),
                    p = Number(symbol.power),
                    factor = new Symbol(1);
                if(Math.abs(p) === 1) {
                    den.each(function(x) {
                        if(x.group === CB) {
                            factor = _.multiply(factor, clean(x.getDenom()));
                        }
                        else if(x.power.lessThan(0)) {
                            factor = _.multiply(factor, clean(x.clone().toUnitMultiplier()));
                        }
                    });

                    var new_den = new Symbol(0);
                    //now divide out the factor and add to new den
                    den.each(function(x) {
                        new_den = _.add(_.divide(x, factor.clone()), new_den);
                    });
                    
                    factor.invert(); //invert so it can be added to the top
                    var new_num;
                    if(num.isComposite()) { 
                        new_num = new Symbol(0);
                        num.each(function(x){
                            new_num = _.add(_.multiply(clean(x), factor.clone()), new_num);
                        });
                    }
                    else
                        new_num = _.multiply(factor, num);
                    
                    retval = _.divide(new_num, new_den);
                }
            }
            else if(g === CB) { 
                retval = new Symbol(1);
                symbol.each(function(x) { 
                    retval = _.multiply(retval, _.clean(x));
                });
            }
            else if(g === FN) {
                if(symbol.args.length === 1 && symbol.args[0].isConstant())
                    retval = block('PARSE2NUMBER', function() {
                        return _.parse(symbol);
                    }, true);
            }
            
            if(!retval)
                retval = symbol;
            
            return retval;
        }
        
        /**
         * Expands a symbol
         * @param symbol
         */
        function expand(symbol) { 
            //deal with parenthesis
            if(symbol.group === FN && symbol.fname === '')
                return _.expand(symbol.args[0]);
            
            //TODO - some test need to be verified in order to implement this
            /*
            if(symbol.group === FN) {
                symbol.args[0] = _.expand(symbol.args[0]);
                symbol.updateHash();
                return symbol;
            }
            */
            
            if(!symbol.symbols) return symbol; //nothing to do
            
            var original = symbol.clone(); 
            try {
                var p = symbol.power,
                    m = symbol.multiplier,
                    pn = Number(p);
                
                if(!symbol.symbols) 
                    return symbol;

                //expand all the symbols
                for(var s in symbol.symbols) {
                    var x = symbol.symbols[s];
                    symbol.symbols[s] = expand(x);
                }
                symbol = _.parse(symbol);

                if(isInt(pn) && pn > 0 && symbol.isComposite()) { 
                    var f = new Symbol(0);
                    //we loop through the f and make sure that it's fully expanded
                    for(var x in symbol.symbols) {
                        var sym = symbol.symbols[x];
                        if(sym.power.greaterThan(1)) 
                            sym = _.expand(sym);
                        f = _.add(f, sym);
                    }

                    //assume (a+b)^3 = (a+b)(a+b)(a+b) = (b^2+2*a*b+a^2)(a+b)
                    //we have n=p-1=2 iterations where p=3 in this case
                    var n = pn-1;
                    //Initiate with the first term. Remember that we have p-1 iterations because
                    //the first iteration is equal to P where p is the polynomial
                    var result = f.clone(); //initiate this as the first term
                    //the first loop is the top iterator and remains untouched. No sub-symbols
                    //from this symbol are allowed to be touched
                    for(var i=0; i<n; i++) {
                        var t = new Symbol(0);
                        for(var x in f.symbols) {
                            var a = f.symbols[x];
                            //we now loop through the 
                            for(var y in result.symbols) {
                                var b = _.multiply(a.clone(), result.symbols[y]);
                                //the result must always be a composite. If not expand
                                if(b.group === CB)
                                    b = _.expand(b);
                                t = _.add(t, b);
                            }
                        }                        result = t;
                    }
                        
                    //put back the multiplier
                    if(!m.equals(1)) {
                        for(var s in result.symbols) {
                            var x = result.symbols[s];
                            x.multiplier = x.multiplier.multiply(m);
                            if(x.isComposite())
                                x.distributeMultiplier();
                            symbol.symbols[s] = x;
                        }
                    }

                    return result;
                }
                else if(symbol.group === CB) { 
                    //check if the symbol has composites
                    var hascomposites = false, 
                        sp = symbol.power.clone(),
                        sign = symbol.power.sign();
                
                    for(var x in symbol.symbols) {
                        var sub = symbol.symbols[x];
                        if(sub.isComposite()) {
                            hascomposites = true;
                            break;
                        }

                        if(isSymbol(sub.power) || isSymbol(sp)) {
                            sub.power = _.multiply(sub.power, Symbol(sp));
                            sub.group = EX;
                        }
                        else sub.power = sub.power.multiply(sp);
                    }
                    
                    symbol.toLinear();

                    //I'm going to be super lazy here and take the easy way out. TODO: do this without re-parsing
                    symbol = _.parse(symbol.text());

                    if(!hascomposites) 
                        return symbol; //nothing to do here

                    var result = new Symbol(0);
                    var composites = [],
                        non_composites = new Symbol(symbol.multiplier);

                    //sort them out
                    for(var s in symbol.symbols) {
                        var x = symbol.symbols[s];
                        if(x.group === EX)
                            continue;
                        if(x.isComposite()) {
                            var p = x.power, isDenom = false;                            if(isInt(p)) {
                                if(p < 0) {
                                    x.power.negate();
                                    isDenom = true;
                                }
                            }

                            if(isDenom) {
                                x.power.negate();
                                non_composites = _.multiply(non_composites, x);
                            }
                            else composites.push(x);
                        }
                        else non_composites = _.multiply(non_composites, x);
                    }
                    //multiply out the remainder
                    var l = composites.length;
                        //grab the first symbol since we'll loop over that one to begin
                    result = composites[0];
                    for(var i=1; i<l; i++) {
                        var t = new Symbol(0);
                        var s = composites[i];
                        for(var s1 in result.symbols) {
                            var x = result.symbols[s1];
                            for(var s2 in s.symbols) {
                                var y = s.symbols[s2];
                                var temp = _.multiply(x.clone(),y.clone());
                                t = _.add(t, temp);
                            }
                        }
                        result = t;
                    }

                    var finalResult = new Symbol(0);
                    //put back the multiplier
                    for(var s in result.symbols) {
                        var x = result.symbols[s];
                        finalResult = _.add(finalResult, expand(_.multiply(non_composites, x)));
                    }
                    
                    //expand the power
                    finalResult.power = finalResult.power.multiply(sp.abs());
                    
                    symbol = _.expand(finalResult);
                    
                    if(sign < 0)
                        symbol.invert();
                }
            }
            catch(e){ return original; }
            
            return symbol;
        }
        
        function imatrix(n) {
            return Matrix.identity(n);
        }
        
        function vecget(vector, index) {
            return vector.elements[index];
        }
        
        function vecset(vector, index, value) {
            vector.elements[index] = value;
            return vector;
        }
        
        function matget(matrix, i, j) {
            return matrix.elements[i][j];
        }
        
        function matgetrow(matrix, i) {
            return new Matrix(matrix.elements[i]);
        }
        
        function matsetrow(matrix, i, x) {
            if(matrix.elements[i].length !== x.elements.length)
                throw new Error('Matrix row must match row dimensions!');
            var M = matrix.clone();
            M.elements[i] = x.clone().elements;
            return M;
        }
        
        function matgetcol(matrix, col_index) {
            col_index = Number(col_index);
            var M = Matrix.fromArray([]);
            matrix.each(function(x, i, j) {
                if(j === col_index) {
                    M.elements.push([x.clone()]);
                }
            });
            return M;
        }
        
        function matsetcol(matrix, j, col) {
            j = Number(j);
            if(matrix.rows() !== col.elements.length)
                throw new Error('Matrix columns must match number of columns!');
            col.each(function(x, i) {
               matrix.set(i-1, j, x.elements[0].clone());
            });
            return matrix;
        }
        
        
        function matset(matrix, i, j, value) {
            matrix.elements[i][j] = value;
            return matrix;
        }
        
        //link this back to the parser
        this.expand = expand;
        this.clean = clean;
        
        //the constructor for vectors
        function vector() {
            return new Vector([].slice.call(arguments));
        }
        
        //the constructor for matrices
        function matrix() {
            return Matrix.fromArray(arguments);
        }
        
        function determinant(symbol) {
            if(isMatrix(symbol)) {
                return symbol.determinant();
            }
            return symbol;
        }
        
        function size(symbol) {
            if(isMatrix(symbol))
                return [new Symbol(symbol.cols()), new Symbol(symbol.rows())];
            err('size expects a matrix or a vector');
        }
        
        function dot(vec1, vec2) {
            if(isVector(vec1) && isVector(vec2)) return vec1.dot(vec2);
            err('function dot expects 2 vectors');
        }
        
        function cross(vec1, vec2) {
            if(isVector(vec1) && isVector(vec2)) return vec1.cross(vec2);
            err('function cross expects 2 vectors');
        }
        
        function transpose(mat) {
            if(isMatrix(mat)) return mat.transpose();
            err('function transpose expects a matrix');
        }
        
        function invert(mat) {
            if(isMatrix(mat)) return mat.invert();
            err('invert expects a matrix');
        }
        
        function testSQRT(symbol) { 
            //wrap the symbol in sqrt. This eliminates one more check down the line.
            if(!isSymbol(symbol.power) && symbol.power.absEquals(0.5)) { 
                var sign = symbol.power.sign();
                //don't devide the power directly. Notice the use of toString. This makes it possible
                //to use a bigNumber library in the future
                return sqrt(symbol.group === P ? new Symbol(symbol.value) : symbol.toLinear()).setPower(new Frac(sign));
            }
            return symbol;
        }
        
        //try to reduce a symbol by pulling its power
        function testPow(symbol) { 
            if(symbol.group === P) {
                var v = symbol.group === N ? symbol.multiplier.toDecimal() : symbol.value,
                    fct = primeFactors(v)[0],
                    n = new Frac(Math.log(v)/Math.log(fct)),
                    p = n.multiply(symbol.power); 
                //we don't want a more complex number than before 
                if(p.den > symbol.power.den) return symbol;

                if(isInt(p)) symbol = Symbol(Math.pow(fct, p));
                else symbol = new Symbol(fct).setPower(p);
            }

            return symbol;
        }

        //extended functions. Because functions like log aren't directly 
        //stored in an object, it's difficult to find out about them unless you know of them 
        //outside of the library. This serves as registry. That's all.
        this.ext = {
            log: log,
            sqrt: sqrt,
            abs: abs,
            vector: vector,
            matrix: matrix,
            parens: parens,
            determinant: determinant,
            dot: dot,
            invert: invert,
            transpose: transpose
        };
        
        //The loader for functions which are not part of Math2
        this.mapped_function = function() { 
            var subs = {},
                params = this.params;
            for(var i=0; i<params.length; i++) 
                subs[params[i]] = arguments[i];
            
            return _.parse(this.body, subs);
        };
        
        /**
         * Adds two symbols
         * @param {Symbol} a
         * @param {Symbol} b
         * @returns {Symbol}
         */
        this.add = function(a, b) {  
            var aIsSymbol = isSymbol(a),
                bIsSymbol = isSymbol(b);
            //we're dealing with two symbols
            if(aIsSymbol && bIsSymbol) { 
                //handle Infinity
                //https://www.encyclopediaofmath.org/index.php/Infinity
                if(a.isInfinity || b.isInfinity) {
                    var aneg = a.multiplier.lessThan(0),
                        bneg = b.multiplier.lessThan(0);
                
                    if(a.isInfinity && b.isInfinity && aneg !== bneg) {
                        throw new UndefinedError('('+a+')+('+b+') is not defined!');
                    }
                    
                    var inf = Symbol.infinity();
                    if(bneg)
                        inf.negate();
                    return inf;
                }
                
                if(a.isComposite() && a.isLinear() && b.isComposite() && b.isLinear()) { 
                    a.distributeMultiplier();
                    b.distributeMultiplier();
                }
                //no need to waste time on zeroes
                if(a.multiplier.equals(0)) return b;
                if(b.multiplier.equals(0)) return a;

                if(a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {
                    var result =  new Symbol(a.multiplier.add(b.multiplier).toDecimal(Settings.PRECISION));
                    return result;
                }

                var g1 = a.group,
                    g2 = b.group,
                    ap = a.power.toString(),
                    bp = b.power.toString();
                
                //always keep the greater group on the left. 
                if(g1 < g2 || (g1 === g2 && ap > bp && bp > 0)) return this.add(b, a);
                
                /*note to self: Please don't forget about this dilemma ever again. In this model PL and CB goes crazy
                 * because it doesn't know which one to prioritize. */
                //correction to PL dilemma
                if(g1 === CB && g2 === PL && a.value === b.value) { 
                    //swap
                    var t = a; a = b; b = t;
                    g1 = a.group; g2 = b.group; ap = a.power.toString(); bp = b.power.toString();
                }

                var powEQ = ap === bp,
                    v1 = a.value,
                    v2 = b.value,
                    aIsComposite = a.isComposite(),
                    bIsComposite = b.isComposite(),
                    h1, h2, result;

                if(aIsComposite) h1 = text(a, 'hash');
                if(bIsComposite) h2 = text(b, 'hash');
                
                if(g1 === CP && g2 === CP && b.isLinear() && !a.isLinear() && h1 !== h2) {
                    return this.add(a, b);
                }   

                //PL & PL should compare hashes and not values e.g. compare x+x^2 with x+x^3 and not x with x
                if(g1 === PL && g2 === PL) { 
                    v1 = h1; v2 = h2;
                }

                var PN = g1 === P && g2 === N,
                    PNEQ = a.value === b.multiplier.toString(),
                    valEQ = (v1 === v2 || h1 === h2 && !h1 === undefined || (PN && PNEQ));

                //equal values, equal powers
                if(valEQ && powEQ && g1 ===  g2) { 
                    //make sure to convert N to something P can work with
                    if(PN) b = b.convert(P);//CL

                    //handle PL
                    if(g1 === PL && (g2 === S || g2 === P)) { 
                        a.distributeMultiplier();
                        result = a.attach(b);
                    }
                    else {
                        result = a;//CL
                        if(a.multiplier.isOne() && b.multiplier.isOne() && g1 === CP && a.isLinear() && b.isLinear()) {
                            for(var s in b.symbols) {
                                var x = b.symbols[s];
                                result.attach(x);
                            }
                        }
                        else result.multiplier = result.multiplier.add(b.multiplier);
                    }
                }
                //equal values uneven powers
                else if(valEQ && g1 !== PL) { 
                    result = Symbol.shell(PL).attach([a, b]);
                    //update the hash
                    result.value = g1 === PL ? h1 : v1;
                }
                else if(aIsComposite && a.isLinear()) { 
                    var canIterate = g1 === g2,
                        bothPL = g1 === PL && g2 === PL; 

                    //we can only iterate group PL if they values match
                    if(bothPL) canIterate = a.value === b.value;
                    //distribute the multiplier over the entire symbol
                    a.distributeMultiplier();

                    if(b.isComposite() && b.isLinear() && canIterate) {
                        b.distributeMultiplier();
                        //CL
                        for(var s in b.symbols) {
                            var x = b.symbols[s];
                            a.attach(x);
                        }
                        result = a; 
                    }
                    //handle cases like 2*(x+x^2)^2+2*(x+x^2)^3+4*(x+x^2)^2
                    else if(bothPL && a.value !== h2 || g1 === PL && !valEQ) {
                        result = Symbol.shell(CP).attach([a, b]);
                        result.updateHash();

                    }
                    else { 
                        result = a.attach(b);
                    }
                }
                else { 
                    if(g1 === FN && a.fname === SQRT && g2 !== EX && b.power.equals(0.5)) { 
                        var m = b.multiplier.clone();
                        b = sqrt(b.toUnitMultiplier().toLinear());
                        b.multiplier = m;
                    }
                    //fix for issue #3 and #159
                    if(a.length === 2 && b.length === 2 && even(a.power) && even(b.power)) {
                        result = _.add(expand(a), expand(b));
                    }
                    else {
                        result = Symbol.shell(CP).attach([a, b]);
                        result.updateHash();
                    }  
                }

                if(result.multiplier.equals(0)) result = new Symbol(0);

                //make sure to remove unnecessary wraps
                if(result.length === 1) { 
                    var m = result.multiplier;
                    result = firstObject(result.symbols);
                    result.multiplier = result.multiplier.multiply(m);
                }

                return result;
            }
            else { 
                //keep symbols to the right 
                if(bIsSymbol && !aIsSymbol) { 
                    var t = a; a = b; b = t; //swap
                    t = bIsSymbol; bIsSymbol = aIsSymbol; aIsSymbol = t;
                }
                
                var bIsMatrix = isMatrix(b);
            
                if(aIsSymbol && bIsMatrix) {
                    b.eachElement(function(e) {
                       return _.add(a.clone(), e); 
                    });
                }
                else {
                    if(isMatrix(a) && bIsMatrix) { 
                        b = a.add(b);
                    }
                    else if(aIsSymbol && isVector(b)) {
                        b.each(function(x, i) {
                            i--;
                            b.elements[i] = _.add(a.clone(), b.elements[i]);
                        });
                    }
                    else { 
                        if(isVector(a) && isVector(b)) { 
                            b.each(function(x, i) {
                                i--;
                                b.elements[i] = _.add(a.elements[i], b.elements[i]);
                            });
                        }
                        else if(isVector(a) && isMatrix(b)) { 
                            //try to convert a to a matrix
                            return _.add(b, a);
                        }
                        else if(isMatrix(a) && isVector(b)) {
                            if(b.elements.length === a.rows()) {
                                var M = new Matrix(), l = a.cols();
                                b.each(function(e, i) {
                                    var row = [];
                                    for(var j=0; j<l; j++) { 
                                        row.push(_.add(a.elements[i-1][j].clone(), e.clone()));
                                    }
                                    M.elements.push(row);
                                });
                                return M;
                            }
                            else err('Dimensions must match!');
                        }
                    }
                }
                return b;
            }
                
        };
        
        /**
         * Gets called when the parser finds the - operator. Not the prefix operator. See this.add
         * @param {Symbol} symbol1
         * @param {Symbol} symbol2
         * @returns {Symbol}
         */
        this.subtract = function(a, b) { 
            var aIsSymbol = aIsSymbol = isSymbol(a), 
                bIsSymbol = isSymbol(b), t;
            
            if(aIsSymbol && bIsSymbol) {
                return this.add(a, b.negate());
            }
            else {
                if(bIsSymbol) {
                    t = b; b = a; a = t;
                    aIsSymbol = bIsSymbol;
                }
                if(aIsSymbol && isVector(b)) {
                    b = b.map(function(x) {
                        return _.subtract(x, a.clone());
                    });
                }
                else if(isVector(a) && isVector(b)) {
                    if(a.dimensions() === b.dimensions()) b = a.subtract(b);
                    else _.error('Unable to subtract vectors. Dimensions do not match.');
                }
                else if(isMatrix(a) && isVector(b)) {
                    if(b.elements.length === a.rows()) {
                        var M = new Matrix(), l = a.cols();
                        b.each(function(e, i) {
                            var row = [];
                            for(var j=0; j<l; j++) { 
                                row.push(_.subtract(a.elements[i-1][j].clone(), e.clone()));
                            }
                            M.elements.push(row);
                        });
                        return M;
                    }
                    else err('Dimensions must match!');
                }
                else if(isVector(a) && isMatrix(b)) {
                    var M = b.clone().negate();
                    return _.add(M, a);
                }
                else if(isMatrix(a) && isMatrix(b)) {
                    b = a.subtract(b);
                }
                return b;
            }
        };

        /**
         * Gets called when the parser finds the * operator. See this.add
         * @param {Symbol} a
         * @param {Symbol} b
         * @returns {Symbol}
         */
        this.multiply = function(a, b) { 
            var aIsSymbol = isSymbol(a),
                bIsSymbol = isSymbol(b);
        
            if(aIsSymbol && bIsSymbol) {
                //handle Infinty
                if(a.isInfinity || b.isInfinity) { 
                    if(a.equals(0) || b.equals(0))
                        throw new UndefinedError(a+'*'+b+' is undefined!');
                    if(b.power.lessThan(0))
                        throw new UndefinedError('Infinity/Infinity is not defined!');
                    var sign = a.multiplier.multiply(b.multiplier).sign(),
                        inf = Symbol.infinity();
                    if(a.isConstant() || b.isConstant() || (a.isInfinity && b.isInfinity)) {
                        if(sign < 0)
                            inf.negate();
                        return inf;
                    }
                }
                //the quickies
                if(a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {
                    var retval = new Symbol(a.multiplier.multiply(b.multiplier).toDecimal());
                    return retval;
                }

                //don't waste time
                if(a.isOne()) return b.clone();
                if(b.isOne()) return a.clone();

                if(a.multiplier.equals(0) || b.multiplier.equals(0)) return new Symbol(0);

                if(b.group > a.group && !(b.group === CP)) return this.multiply(b, a);
                //correction for PL/CB dilemma
                if(a.group === CB && b.group === PL && a.value === b.value) { 
                    var t = a; a = b; b = t;//swap
                }

                var g1 = a.group,
                    g2 = b.group,
                    bnum = b.multiplier.num,
                    bden = b.multiplier.den;

                if(g1 === FN && a.fname === SQRT && !b.isConstant() && a.args[0].value === b.value) {
                    //unwrap sqrt
                    var a_pow = a.power;
                    a = a.args[0].clone();
                    a.setPower(new Frac(0.5).multiply(a_pow));
                    g1 = a.group;
                }                
                var v1 = a.value,
                    v2 = b.value,
                    sign = new Frac(a.multiplier.lessThan(0) ? -1 : 1),
                    //since P is just a morphed version of N we need to see if they relate
                    ONN = (g1 === P && g2 === N && b.multiplier.equals(a.value)),
                    //don't multiply the multiplier of b since that's equal to the value of a
                    m = ONN ? new Frac(1).multiply(a.multiplier).abs() : a.multiplier.multiply(b.multiplier).abs(),
                    result = a.clone().toUnitMultiplier();
                b = b.clone().toUnitMultiplier(true);
                
                //if both are PL then their hashes have to match
                if(v1 === v2 && g1 === PL && g1 === g2) {
                    v1 = a.text('hash');
                    v2 = b.text('hash');
                }

                //same issue with (x^2+1)^x*(x^2+1)
                //EX needs an exception when multiplying because it needs to recognize
                //that (x+x^2)^x has the same hash as (x+x^2). The latter is kept as x
                if(g2 === EX && b.previousGroup === PL && g1 === PL) {
                    v1 = text(a, 'hash', EX);
                }
                

                if((v1 === v2 || ONN) && !(g1 === PL && (g2 === S || g2 === P || g2 === FN)) && !(g1 === PL && g2 === CB)) {                   
                    var p1 = a.power,
                        p2 = b.power,
                        isSymbolP1 = isSymbol(p1),
                        isSymbolP2 = isSymbol(p2),
                        toEX = (isSymbolP1 || isSymbolP2);
                    //TODO: this needs cleaning up
                    if(g1 === PL && g2 !== PL && b.previousGroup !== PL && p1.equals(1)) {
                        result = new Symbol(0);
                        a.each(function(x) {
                            result = _.add(result, _.multiply(x, b.clone()));
                        }, true);
                    }
                    else {
                        //add the powers
                        result.power = toEX ? _.add(
                            !(isSymbol(p1)) ? new Symbol(p1) : p1, 
                            !(isSymbol(p2)) ? new Symbol(p2) : p2
                        ): (g1 === N /*don't add powers for N*/? p1 : p1.add(p2));

                        //eliminate zero power values and convert them to numbers
                        if(result.power.equals(0)) result = result.convert(N);

                        //properly convert to EX
                        if(toEX) result.convert(EX);

                        //take care of imaginaries
                        if(a.imaginary && b.imaginary) { 
                            var isEven = even(result.power % 2);
                            if(isEven) {
                                result = new Symbol(1);
                                m.negate();
                            }
                        }

                        //cleanup: this causes the LaTeX generator to get confused as to how to render the symbol
                        if(result.group !== EX && result.previousGroup) result.previousGroup = undefined;
                        //the sign for b is floating around. Remember we are assuming that the odd variable will carry
                        //the sign but this isn't true if they're equals symbols
                        result.multiplier = result.multiplier.multiply(b.multiplier);
                    }
                }
                else if(g1 === CB && a.isLinear()){ 
                    if(g2 === CB) b.distributeExponent();
                    if(g2 === CB && b.isLinear()) { 
                        for(var s in b.symbols) {
                            var x = b.symbols[s];
                            result = result.combine(x);
                        }
                        result.multiplier = result.multiplier.multiply(b.multiplier);
                    }
                    else { 
                        result.combine(b);
                    }
                }
                else {
                    //the multiplier was already handled so nothing left to do
                    if(g1 !== N) { 
                        if(g1 === CB) {
                            result.distributeExponent();
                            result.combine(b);
                        }
                        else if(!b.isOne()) {
                            var bm = b.multiplier.clone();
                            b.toUnitMultiplier();
                            result = Symbol.shell(CB).combine([result, b]);
                            //transfer the multiplier to the outside
                            result.multiplier = result.multiplier.multiply(bm);
                        }
                    }     
                    else { 
                        result = b.clone().toUnitMultiplier();
                    }
                }

                if(result.group === P) { 
                    var logV = Math.log(result.value),
                        n1 = Math.log(bnum)/logV,
                        n2 = Math.log(bden)/logV,
                        ndiv = m.num/bnum,
                        ddiv = m.den/bden;
                    //we don't want to divide by zero no do we? Strange things happen.
                    if(n1 !== 0 && isInt(n1) && isInt(ndiv)) {
                        result.power = result.power.add(new Frac(n1));
                        m.num /= bnum; //BigInt? Keep that in mind for the future.
                    }
                    if(n2 !== 0 && isInt(n2) && isInt(ddiv)) {
                        result.power = result.power.subtract(new Frac(n2));
                        m.den /= bden; //BigInt? Keep that in mind for the future.
                    }
                }

                //unpack CB if length is only one
                if(result.length === 1) { 
                    var t = result.multiplier;
                    //transfer the multiplier
                    result = firstObject(result.symbols);
                    result.multiplier = result.multiplier.multiply(t);
                }

                //reduce square root
                var ps = result.power.toString(); 
                if(even(ps) && result.fname === SQRT) { 
                    var p = result.power;
                    result = result.args[0]; 
                    result = _.multiply(new Symbol(m), _.pow(result, new Symbol(p.divide(new Frac(2)))));
                }
                else {
                    result.multiplier = result.multiplier.multiply(m).multiply(sign);
                    if(result.group === CP && result.isImaginary())
                        result.distributeMultiplier();
                }


                //back convert group P to a simpler group N if possible
                if(result.group === P && isInt(result.power.toDecimal())) result = result.convert(N);

                return result;
            }
            else {
                //****** Matrices & Vector *****//
                if(bIsSymbol && !aIsSymbol) { //keep symbols to the right 
                    t = a; a = b; b = t; //swap
                    t = bIsSymbol; bIsSymbol = aIsSymbol; aIsSymbol = t;
                }

                var isMatrixB = isMatrix(b), isMatrixA = isMatrix(a);
                if(aIsSymbol && isMatrixB) {
                    b.eachElement(function(e) {
                       return _.multiply(a.clone(), e); 
                    });
                }
                else {
                    if(isMatrixA && isMatrixB) { 
                        b = a.multiply(b);
                    }
                    else if(aIsSymbol && isVector(b)) {
                        b.each(function(x, i) {
                            i--;
                            b.elements[i] = _.multiply(a.clone(), b.elements[i]);
                        });
                    }
                    else {
                        if(isVector(a) && isVector(b)) {
                            b.each(function(x, i) {
                                i--;
                                b.elements[i] = _.multiply(a.elements[i], b.elements[i]);
                            });
                        }
                        else if(isVector(a) && isMatrix(b)) {
                            //try to convert a to a matrix
                            return this.multiply(b, a);
                        }
                        else if(isMatrix(a) && isVector(b)) { 
                            if(b.elements.length === a.rows()) {
                                var M = new Matrix(), l = a.cols();
                                b.each(function(e, i) {
                                    var row = [];
                                    for(var j=0; j<l; j++) { 
                                        row.push(_.multiply(a.elements[i-1][j].clone(), e.clone()));
                                    }
                                    M.elements.push(row);
                                });
                                return M;
                            }
                            else err('Dimensions must match!');
                        }
                    }
                }

                return b;
            }
        };
        
        /**
         * Gets called when the parser finds the / operator. See this.add
         * @param {Symbol} a
         * @param {Symbol} b
         * @returns {Symbol}
         */
        this.divide = function(a, b) { 
            var aIsSymbol = isSymbol(a),
                bIsSymbol = isSymbol(b);
        
            if(aIsSymbol && bIsSymbol) {
                var result;
                if(b.equals(0)) 
                    throw new DivisionByZero('Division by zero not allowed!');
                
                if(a.isConstant() && b.isConstant()) {
                    result = a.clone();
                    result.multiplier = result.multiplier.divide(b.multiplier);
                }
                else {
                    b.invert();
                    result = _.multiply(a, b);
                }
                return result;
            }
            else {
                //******* Vectors & Matrices *********//
                var isVectorA = isVector(a), isVectorB = isVector(b);
                if(aIsSymbol && isVectorB) {
                    b = b.map(function(x){
                        return _.divide(a.clone(),x);
                    });
                }
                else if(isVectorA && bIsSymbol) {
                    b = a.map(function(x) {
                        return _.divide(x, b.clone());
                    });
                }
                else if(isVectorA && isVectorB) {
                    if(a.dimensions() === b.dimensions()) {
                        b = b.map(function(x, i) {
                            return _.divide(a.elements[--i], x);
                        });
                    }
                    else _.error('Cannot divide vectors. Dimensions do not match!');
                }
                else {
                    var isMatrixA = isMatrix(a), isMatrixB = isMatrix(b);
                    if(isMatrixA && bIsSymbol) {
                        a.eachElement(function(x) {
                            return _.divide(x, b.clone());
                        });
                        b = a;
                    }
                    else if(isMatrixA && isMatrixB) {
                        if(a.rows() === b.rows() && a.cols() === b.cols()) {
                            a.eachElement(function(x, i, j) {
                                return _.divide(x, b.elements[i][j]);
                            });
                        }
                        else {
                            _.error('Dimensions do not match!');
                        }
                    }
                    else if(isMatrixA && isVectorB) {
                        if(a.cols() === b.dimensions()) {
                            a.eachElement(function(x, i, j) {
                                return _.divide(x, b.elements[i].clone());
                            });
                            b = a;
                        }
                        else {
                            _.error('Unable to divide matrix by vector.');
                        }
                    }
                }
                return b;
            }
        };

        /**
         * Gets called when the parser finds the ^ operator. See this.add
         * @param {Symbol} a
         * @param {Symbol} b
         * @returns {Symbol}
         */
        this.pow = function(a, b) { 
            var aIsSymbol = isSymbol(a),
                bIsSymbol = isSymbol(b);
            if(aIsSymbol && bIsSymbol) {  
                //handle infinity
                if(a.isInfinity || b.isInfinity) {
                    if(a.isInfinity && b.isInfinity)
                        throw new UndefinedError('('+a+')^('+b+') is undefined!');
                    
                    if(a.isConstant() && b.isInfinity) { 
                        if(a.equals(0)) {
                            if(b.lessThan(0))
                                throw new UndefinedError('0^Infinity is undefined!');
                            return new Symbol(0);
                        }
                        if(a.equals(1))
                            throw new UndefinedError('1^'+b.toString()+' is undefined!');
                        //a^-oo
                        if(b.lessThan(0))
                            return new Symbol(0);
                        //a^oo
                        if(!a.lessThan(0))
                            return Symbol.infinity();
                    }
                        
                    if(a.isInfinity && b.isConstant()) { 
                        if(b.equals(0))
                            throw new UndefinedError(a+'^0 is undefined!');
                        if(b.lessThan(0))
                            return new Symbol(0);
                        return _.multiply(Symbol.infinity(), _.pow(new Symbol(a.sign()), b.clone()));
                    }
                }
                    
                var aIsZero = a.equals(0);
                if(aIsZero && b.equals(0)) err('0^0 is undefined!');
                //return 0 right away if possible
                if(aIsZero && b.isConstant() && b.multiplier.greaterThan(0))
                    return new Symbol(0);
                
                var bIsConstant = b.isConstant(),
                    aIsConstant = a.isConstant(), 
                    bIsInt = b.isInteger(),
                    m = a.multiplier,
                    result = a.clone();
                if(aIsConstant && bIsConstant && a.equals(0) && b.lessThan(0))
                    throw new UndefinedError('Division by zero is not allowed!');
                
                //compute imaginary numbers right away
                if(Settings.PARSE2NUMBER && aIsConstant && bIsConstant && a.sign() < 0 && evenFraction(b)) { 
                    var k, re, im;
                    k = Math.PI*b;
                    re = new Symbol(Math.cos(k));
                    im = _.multiply(Symbol.imaginary(), new Symbol(Math.sin(k)));
                    return _.add(re, im);
                }
                
                //imaginary number under negative nthroot or to the n
                if(Settings.PARSE2NUMBER && a.isImaginary() && bIsConstant) { 
                    var re, im, r, theta, nre, nim;
                    re = a.realpart();
                    im = a.imagpart();
                    if(re.isConstant('all') && im.isConstant('all')) {
                        theta = new Symbol(Math.atan2(im, re)*b);
                        r = _.pow(Symbol.hyp(re, im), b); 
                        nre = _.multiply(r.clone(), _.trig.cos(theta.clone()));
                        nim = _.multiply(r, _.trig.sin(theta));
                        return _.add(nre, _.multiply(Symbol.imaginary(), nim));
                    }
                }
                /*
                if(a.isImaginary() && bIsConstant && b.multiplier.num.abs().equals(1) && !b.multiplier.den.equals(1)) { 
                    var sign = b.sign();
                    b = abs(b);
                    var p, re, im, theta, n, ai, bi, di, ei, ii, th;
                    p = Symbol.toPolarFormArray(a);
                    theta = _.multiply(b.clone(), arg(a));
                    di = _.pow(p[0], b);
                    ai = _.trig.cos(theta.clone());
                    bi = _.trig.sin(theta);
                        
                    if(sign < 0) {
                        re = _.divide(ai, di.clone());
                        im = _.divide(bi, di);
                    }
                    else {
                        re = _.multiply(ai, di.clone());
                        im = _.multiply(bi, di);
                    }
                    return _.add(re, _.multiply(im, Symbol.imaginary()));
                }
                */
                
                //take care of the symbolic part
                result.toUnitMultiplier();
                //simpifly sqrt
                if(result.group === FN && result.fname === SQRT && !bIsConstant) { 
                    var s = result.args[0];
                    s.multiplyPower(new Symbol(0.5));
                    s.multiplier.multiply(result.multiplier);
                    s.multiplyPower(b);
                    result = s; 
                }
                else { 
                    var sign = m.sign();
                    //handle cases such as (-a^3)^(1/4)
                    if(evenFraction(b) && sign < 0) {
                        //swaperoo
                        //first put the sign back on the symbol
                        result.negate();
                        //wrap it in brackets
                        result = _.symfunction(PARENTHESIS, [result]);
                        //move the sign back the exterior and let nerdamer handle the rest
                        result.negate();
                    }
                    result.multiplyPower(b);
                }

                if(aIsConstant && bIsConstant && Settings.PARSE2NUMBER) { 
                    var c;
                    //remove the sign
                    if(sign < 0) {
                        a.negate();
                        if(b.multiplier.den.equals(2)) 
                            //we know that the numerator has to be odd and therefore it's i
                            c = new Symbol(Settings.IMAGINARY);
                        else if(isInt(b.multiplier)) {
                            if(even(b.multiplier))
                                c = new Symbol(1);
                            else 
                                c = new Symbol(-1);
                        }
                        else if(!even(b.multiplier.den)) {
                            sign = Math.pow(sign, b.multiplier.num);
                            c = new Symbol(Math.pow(a, b)*sign);
                        }
                        else {
                            c = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());
                        }
                            
                    }

                    result = new Symbol(Math.pow(a.multiplier.toDecimal(), b.multiplier.toDecimal()));
                    //result = new Symbol(Math2.bigpow(a.multiplier, b.multiplier));
                    //put the back sign
                    if(c)
                        result = _.multiply(result, c);
                }
                else if(bIsInt && !m.equals(1)) { 
                    var p = b.multiplier.toDecimal();
                    var sgn = Math.sign(p);
                    p = Math.abs(p);
                    var multiplier = new Frac(1); 
                    multiplier.num = m.num.pow(p);
                    multiplier.den = m.den.pow(p);
                    if(sgn < 0)
                        multiplier.invert();
                    //multiplying is justified since after mulltiplyPower if it was of group P it will now be of group N
                    result.multiplier = result.multiplier.multiply(multiplier);
                }
                else { 
                    var sign = a.sign();
                    if(b.isConstant() && a.isConstant() && !b.multiplier.den.equals(1) && sign < 0 ) { 
                        //we know the sign is negative so if the denominator for b == 2 then it's i
                        if(b.multiplier.den.equals(2)) {
                            var i = new Symbol(Settings.IMAGINARY);
                            a.negate();//remove the sign
                            //if the power is negative then i is negative
                            if(b.lessThan(0)) {
                                i.negate();
                                b.negate();//remove the sign from the power
                            }
                            //pull the power normally and put back the imaginary
                            result = _.multiply(_.pow(a, b), i);
                        }
                        else { 
                            var aa = a.clone();
                            aa.multiplier.negate();
                            result = _.pow(_.symfunction(PARENTHESIS, [new Symbol(-1)]), b.clone()); 
                            var _a = _.pow(new Symbol(aa.multiplier.num), b.clone());
                            var _b = _.pow(new Symbol(aa.multiplier.den), b.clone());
                            var r = _.divide(_a, _b);
                            result = _.multiply(result, r);
                        }  
                    }
                    else if(Settings.PARSE2NUMBER && b.isImaginary()) {
                        //4^(i + 2) = e^(- (2 - 4 i) π n + (2 + i) log(4))
                        var re, im, aa, a1, b1, c1;
                        aa = a.clone().toLinear();
                        re = b.realpart();
                        im = b.imagpart();
                        a1 = _.pow(aa.clone(), re);
                        b1 = trig.cos(_.multiply(im.clone(), log(aa.clone())));
                        c1 = _.multiply(trig.sin(_.multiply(im, log(aa))), Symbol.imaginary());
                        result = _.multiply(a1, _.add(b1, c1));
                        result = _.expand(_.parse(result));
                    }
                    else { 
                        //b is a symbol
                        var neg_num = a.group === N && sign < 0,
                            num = testSQRT(new Symbol(neg_num ? m.num : Math.abs(m.num)).setPower(b.clone())),
                            den = testSQRT(new Symbol(m.den).setPower(b.clone()).invert());  

                        //eliminate imaginary if possible
                        if(a.imaginary) { 
                            if(bIsInt) {
                                var s, p, n;
                                s = Math.sign(b);
                                p = abs(b);
                                n = p%4;
                                result = new Symbol(even(n) ? -1 : Settings.IMAGINARY);
                                if(n === 0 || s < 0 && (n === 1) || s > 0 && (n === 3)) {
                                    result.negate();
                                }
                            }
                            else {
                                //assume i = sqrt(-1) -> (-1)^(1/2)
                                var nr = b.multiplier.multiply(Frac.quick(1, 2)),
                                    //the denominator denotes the power so raise to it. It will turn positive it round
                                    tn = Math.pow(-1, nr.num);
                                result = even(nr.den) ? new Symbol(-1).setPower(nr, true) : new Symbol(tn);
                            }
                        } 
                        //ensure that the sign is carried by the symbol and not the multiplier
                        //this enables us to check down the line if the multiplier can indeed be transferred
                        if(sign < 0 && !neg_num) result.negate();
                        
                        //retain the absolute value
                        if(bIsConstant && a.group !== EX) { 
                            var evenr = even(b.multiplier.den),
                                evenp = even(a.power),
                                n = result.power.toDecimal(),
                                evennp = even(n);
                            if(evenr && evenp && !evennp) {
                                if(n === 1 ) result = _.symfunction(ABS, [result]);
                                else if(!isInt(n)) {
                                    var p = result.power;
                                    result = _.symfunction(ABS, [result.toLinear()]).setPower(p);
                                }
                                else {
                                    result = _.multiply(_.symfunction(ABS, [result.clone().toLinear()]), 
                                        result.clone().setPower(new Frac(n-1)));
                                }
                                //quick workaround. Revisit
                                if(Settings.POSITIVE_MULTIPLIERS && result.fname === ABS)
                                    result = result.args[0];
                            }
                        }   
                    }   
                }

                result = testSQRT(result);
                //don't multiply until we've tested the remaining symbol
                if(num && den)
                    result = _.multiply(result, testPow(_.multiply(num, den)));

                //reduce square root
                if(result.fname === SQRT) { 
                    var isEX = result.group === EX;
                    var t = isEX ? result.power.multiplier.toString() : result.power.toString();
                    if(even(t)) { 
                        var pt = isEX ? _.divide(result.power, new Symbol(2)) : new Symbol(result.power.divide(new Frac(2))),
                            m = result.multiplier;
                        result = _.pow(result.args[0], pt);
                        result.multiplier = result.multiplier.multiply(m);
                    }
                }
                //detect Euler's identity
                else if(!Settings.IGNORE_E && result.isE() && result.group === EX && result.power.contains('pi') 
                        && result.power.contains(Settings.IMAGINARY)) {
                    //we have a match
                    var m1 = result.multiplier,
                        m2 = result.power.multiplier;
                    result = new Symbol(even(m2.num) ? m1 : m1.negate());
                    result = _.pow(result, new Symbol(m2.den).invert());
                }
                return result;
            }
            else {
                if(isVector(a) && bIsSymbol) {
                    a = a.map(function(x) {
                        return _.pow(x, b.clone());
                    });
                }
                else if(isMatrix(a) && bIsSymbol) {
                    a.eachElement(function(x) {
                        return _.pow(x, b.clone());
                    });
                }
                return a;
            }
        };
        
        //gets called when the parser finds the , operator. 
        this.comma = function(a, b) { 
            var aIsArray = (a instanceof Array),
                bIsArray = (b instanceof Array),
                aHasSubArray = (aIsArray && a[0] instanceof Array);

            if ( (aIsArray && aHasSubArray) || (aIsArray && !bIsArray) ) a.push(b);
            else a = [a,b];
            return a;
        };
        
        //the equality setter
        this.equals = function(a, b) {
            //equality can only be set for group S so complain it's not
            if(a.group !== S && !a.isLinear())
                err('Cannot set equality for '+a.toString());
            VARS[a.value] = b.clone();
            return b;
        };
        
        //modulus
        this.mod_or_percent = function(a, b) {
            if(a && b)
                return mod(a, b);
            return _.percent(b);
        };
        
        //percent
        this.percent = function(a) {
            return _.divide(a, new Symbol(100));
        };
        
        this.percent_add = function(a, b) {
            return _.add(_.percent(a), b);
        };
        
        this.percent_subtract = function(a, b) {
            return _.subtract(_.percent(a), b);
        };
        //function to quickly convert bools to Symbols
        var bool2Symbol = function(x) {
            return new Symbol(x === true ? 1 : 0);
        };
        //check for equality
        this.eq = function(a, b) {
            return bool2Symbol(a.equals(b));
        };
        //checks for greater than
        this.gt = function(a, b) {
            return bool2Symbol(a.gt(b));
        };
        //checks for greater than equal
        this.gte = function(a, b) {
            return bool2Symbol(a.gte(b));
        };
        //checks for less than
        this.lt = function(a, b) {
            return bool2Symbol(a.lt(b));
        };
        //checks for less than equal
        this.lte = function(a, b) {
            return bool2Symbol(a.lte(b));
        };
        //wraps the factorial
        this.factorial = function(a) {
            return this.symfunction(FACTORIAL, [a]);
        };
        //wraps the double factorial
        this.dfactorial = function(a) {
            return this.symfunction(DOUBLEFACTORIAL, [a]);
        };
        //wacky fix for factorial with prefixes
        this.factadd = function(a, b) {
            return _.add(this.symfunction(FACTORIAL, [a]), b);
        };
        this.dfactadd = function(a, b) {
            return _.add(this.symfunction(DOUBLEFACTORIAL, [a]), b);
        };
        this.factsub = function(a, b) {
            return _.subtract(this.symfunction(FACTORIAL, [a]), b);
        };
        this.dfactsub = function(a, b) {
            return _.subtract(this.symfunction(DOUBLEFACTORIAL, [a]), b);
        };
    }    
    /* "STATIC" */
    //converts a number to a fraction. 
    var Fraction = {
        /**
         * Converts a decimal to a fraction
         * @param {number} value
         * @param {object} opts
         * @returns {Array} - an array containing the denominator and the numerator
         */
        convert: function( value, opts ) { 
            var frac;
            if( value === 0 ) {
                frac = [ 0, 1];
            }
            else {
                if( value < 1e-6 || value > 1e20) {
                    var qc = this.quickConversion( Number(value) );
                    if( qc[1] <= 1e20 ) { 
                        var abs = Math.abs( value );
                        var sign = value/abs;
                        frac = this.fullConversion( abs.toFixed( (qc[1]+'').length-1 ));
                        frac[0] = frac[0]*sign;
                    }
                    else {
                        frac = qc;
                    }
                }
                else {
                    frac = this.fullConversion( value );
                }
            }
            return frac;
        },
        /**
         * If the fraction is too small or too large this gets called instead of fullConversion method
         * @param {number} dec
         * @returns {Array} - an array containing the denominator and the numerator
         */
        quickConversion: function(dec) {
            var x = (dec.toExponential()+'').split('e');
            var d = x[0].split('.')[1];// get the number of places after the decimal
            var l = d ? d.length : 0; // maybe the coefficient is an integer;
            //call Math.round to avoid rounding error
            return [Math.round(Math.pow(10,l)*x[0]), Math.pow(10, Math.abs(x[1])+l)];
        },
        /**
         * Returns a good approximation of a fraction. This method gets called by convert
         * http://mathforum.org/library/drmath/view/61772.html
         * Decimal To Fraction Conversion - A Simpler Version
         * Dr Peterson
         * @param {number} dec
         * @returns {Array} - an array containing the denominator and the numerator
         */
        fullConversion: function( dec ) {
            var done = false;
            //you can adjust the epsilon to a larger number if you don't need very high precision
            var n1 = 0, d1 = 1, n2 = 1, d2 = 0, n = 0, q = dec, epsilon = 1e-16;
            while(!done) {
                n++;
                if( n > 10000 ){
                    done = true;
                }
                var a = Math.floor(q);
                var num = n1 + a * n2;
                var den = d1 + a * d2;
                var e = (q - a);
                if( e < epsilon) {
                    done = true;
                }
                q = 1/e;
                n1 = n2; d1 = d2; n2 = num; d2 = den;
                if(Math.abs(num/den-dec) < epsilon || n > 30) {
                    done = true;
                }
            }
            return [num, den];
        }
    };

    //Depends on Fraction
    //The latex generator
    var LaTeX = {
        space: '~',
        dot: ' \\cdot ',
        //grab a list of supported functions but remove the excluded ones found in exclFN
        
        latex: function(symbol, option) { 
            //it might be an array
            if(symbol.clone)
                symbol = symbol.clone(); //leave original as-is
            
            if(isArray(symbol)) {
                var LaTeXArray = [];
                for(var i=0; i<symbol.length; i++) {
                    var sym = symbol[i];
                    //This way I can generate LaTeX on an array of strings.
                    if(!isSymbol(sym))
                        sym = _.parse(sym);
                    LaTeXArray.push(this.latex(sym));
                }
                return this.brackets(LaTeXArray.join(', '), 'square');
            }
            
            if(isMatrix(symbol)) {
                var TeX = '\\begin{pmatrix}\n';
                for(var i=0; i<symbol.elements.length; i++) {
                    var rowTeX = [],
                        e = symbol.elements[i];
                    for(var j=0; j<e.length; j++) {
                        rowTeX.push(this.latex(e[j]));
                    }
                    TeX += rowTeX.join(' & ');
                    if (i<symbol.elements.length-1){    
                        TeX+='\\\\\n';
                    }
                }
                TeX += '\\end{pmatrix}';
                return TeX;
            }

            if (isVector(symbol)) {
                var TeX = '\\left[';
                for (var i = 0; i < symbol.elements.length; i++){
                    TeX += this.latex(symbol.elements[i]) + ' ' + (i!==symbol.elements.length-1 ? ',\\,' : '');
                }
                TeX += '\\right]';
                return TeX;
            }

            symbol = symbol.clone();
            var decimal = option === 'decimal',
                power = symbol.power,
                invert = isNegative(power),
                negative = symbol.multiplier.lessThan(0);

            if(symbol.group === P && decimal) {
                return String(symbol.multiplier.toDecimal()*Math.pow(symbol.value, symbol.power.toDecimal()));
            }
            else {
                symbol.multiplier = symbol.multiplier.abs();

                    //if the user wants the result in decimal format then return it as such by placing it at the top part
                var m_array;

                if(decimal) {
                    var m = String(symbol.multiplier.toDecimal());
                    if(m == '1' && !decimal) m = '';
                    m_array = [m, ''];
                }
                else {
                    m_array = [symbol.multiplier.num, symbol.multiplier.den];
                }
                    //get the value as a two part array
                var v_array = this.value(symbol, invert, option, negative),
                    p;    
                //make it all positive since we know whether to push the power to the numerator or denominator already.
                if(invert) power.negate();
                //the power is simple since it requires no additional formatting. We can get it to a
                //string right away. pass in true to neglect unit powers
                if(decimal)  { 
                    p = isSymbol(power) ? LaTeX.latex(power, option) : String(power.toDecimal());
                    if(p == '1') p = '';
                }
                //get the latex representation
                else if(isSymbol(power)) p = this.latex(power, option);
                //get it as a fraction
                else p = this.formatFrac(power, true);
                //use this array to specify if the power is getting attached to the top or the bottom
                var p_array = ['', ''],
                    //stick it to the top or the bottom. If it's negative then the power gets placed on the bottom
                    index = invert ? 1 : 0;
                p_array[index] = p;

                //special case group P and decimal
                var retval = (negative ? '-': '')+this.set(m_array, v_array, p_array, symbol.group === CB);

                return retval.replace(/\+\-/gi, '-');
            }
                
        },
        //greek mapping
        greek: {
            alpha:      '\\alpha',
            beta:       '\\beta',
            gamma:      '\\gamma',
            delta:      '\\delta',
            epsilon:    '\\epsilon',
            zeta:       '\\zeta',
            eta:        '\\eta',
            theta:      '\\theta',
            iota:       '\\iota',
            kappa:      '\\kappa',
            lambda:     '\\lambda',
            mu:         '\\mu',
            nu:         '\\nu',
            xi:         '\\xi',
            omnikron:   '\\omnikron',
            pi:         '\\pi',
            rho:        '\\rho',
            sigma:      '\\sigma',
            tau:        '\\tau',
            upsilon:    '\\upsilon',
            phi:        '\\phi',
            chi:        '\\chi',
            psi:        '\\psi',
            omega:      '\\omega',
            Gamma:      '\\Gamma',
            Delta:      '\\Delta',
            Epsilon:    '\\Epsilon',
            Theta:      '\\Theta',
            Lambda:     '\\Lambda',
            Xi:         '\\Xi',
            Pi:         '\\Pi',
            Sigma:      '\\Sigma',
            Phi:        '\\Phi',
            Psi:        '\\Psi',
            Omega:      '\\Omega'
        },
        //get the raw value of the symbol as an array
        value: function(symbol, inverted, option, negative) { 
            var group = symbol.group,
                previousGroup = symbol.previousGroup,
                v = ['', ''],
                index =  inverted ? 1 : 0; 
            /*if(group === N) //do nothing since we want to return top & bottom blank; */
            if(symbol.isInfinity) {
                v[index] = '\\infty';
            }
            else if(group === S || group === P || previousGroup === S || previousGroup === P || previousGroup === N) { 
                var value = symbol.value; 
                if(value.replace) 
                    value = value.replace(/(.+)_$/, '$1\\_');
                //split it so we can check for instances of alpha as well as alpha_b
                var t_varray = String(value).split('_'); 
                var greek = this.greek[t_varray[0]];
                if(greek) {
                    t_varray[0] = greek;
                    value = t_varray.join('_');
                }
                v[index] = value;
            }
            else if(group === FN || previousGroup === FN) { 
                var name,
                    input = [],
                    fname = symbol.fname;
                //collect the arguments
                for(var i=0; i<symbol.args.length; i++) {
                    var arg = symbol.args[i], item;
                    if(typeof arg === 'string')
                        item = arg;
                    else
                        item = this.latex(arg, option);
                    input.push(item);
                }

                if(fname === SQRT) {
                    v[index] = '\\sqrt'+this.braces(input.join(','));
                }
                else if(fname === ABS) {
                    v[index] = this.brackets(input.join(','), 'abs');
                }
                else if(fname === PARENTHESIS) { 
                    v[index] = this.brackets(input.join(','), 'parens');
                }
                else if(fname === 'limit') {
                    v[index] = ' \\lim\\limits_{'+input[1]+' \\to '+input[2]+'} '+input[0];
                }
                else if(fname === 'integrate') {
                    v[index] = '\\int'+this.braces(input[0])+this.braces('d'+input[1]);
                }
                else if(fname === 'defint') {
                    v[index] = '\\int\\limits_'+this.braces(input[1])+'^'+this.braces(input[2])+' '+input[0]+' d'+input[3];
                }
                else if(fname === FACTORIAL || fname === DOUBLEFACTORIAL) {
                    var arg = symbol.args[0];
                    if(arg.power.equals(1) && (arg.isComposite() || arg.isCombination())) {
                        input[0] = this.brackets(input[0]);
                    }
                    v[index] = input[0]+(fname === FACTORIAL ? '!' : '!!');
                }
                else if(fname === 'floor') {
                    v[index] = '\\left \\lfloor'+this.braces(input[0])+'\\right \\rfloor';
                }
                else if(fname === 'ceil') {
                    v[index] = '\\left \\lceil'+this.braces(input[0])+'\\right \\rceil';
                }
                //capture log(a, b)
                else if(fname === 'log' && input.length > 1) {
                    v[index] = '\\mathrm'+this.braces('log')+'_'+this.braces(input[1])+this.brackets(input[0]);
                }
                //capture log(a, b)
                else if(fname === 'log10') {
                    v[index] = '\\mathrm'+this.braces('log')+'_'+this.braces(10)+this.brackets(input[0]);
                }
                else if(fname === 'sum') {
                    var a = input[0],
                        b = input[1],
                        c = input[2],
                        d = input[3];
                    v[index] = '\\sum\\limits_{'+this.braces(b)+'='+this.braces(c)+'}^'+this.braces(d)+' '+this.braces(a)+'';
                }
                else if(fname === 'product') {
                    var a = input[0],
                        b = input[1],
                        c = input[2],
                        d = input[3];
                    v[index] = '\\prod\\limits_{'+this.braces(b)+'='+this.braces(c)+'}^'+this.braces(d)+' '+this.braces(a)+'';
                }
                else if(fname === 'nthroot') {
                    v[index] = '\\sqrt['+input[1]+']'+this.braces(input[0]);
                }
                else if(fname === 'mod') {
                    v[index] = input[0]+' \\bmod '+input[1];
                }
                else if(fname === 'realpart') { 
                    v[index] = '\\operatorname{Re}'+this.brackets(input[0]);
                }
                else if(fname === 'imagpart') { 
                    v[index] = '\\operatorname{Im}'+this.brackets(input[0]);
                }
                else { 
                    var name = fname!=='' ? '\\mathrm'+this.braces(fname.replace(/_/g, '\\_')) : '';
                    v[index] = name+this.brackets(input.join(','), 'parens');
                }  
            }
            else if(symbol.isComposite()) { 
                var collected = symbol.collectSymbols().sort(
                        group === CP || previousGroup === CP ? 
                        function(a, b) { return b.group - a.group;}:
                        function(a, b) { 
                            var x = isSymbol(a.power) ? -1 : a.power;
                            var y = isSymbol(b.power) ? -1 : b.power;
                            return y-x;
                        }
                    ),
                    symbols = [],
                    l = collected.length;
                for(var i=0; i<l; i++) {
                    symbols.push(LaTeX.latex(collected[i], option));
                }
                var value = symbols.join('+'); 

                v[index] = !(symbol.isLinear() && symbol.multiplier.equals(1)) || negative ? this.brackets(value, 'parens') : value;
            }
            else if(group === CB || previousGroup === EX || previousGroup === CB) { 
                if(group === CB)
                    symbol.distributeExponent();
                //this almost feels a little like cheating but I need to know if I should be wrapping the symbol
                //in brackets or not. We'll do this by checking the value of the numerator and then comparing it 
                //to whether the symbol value is "simple" or not.
                var denominator = [],
                    numerator = [];
                //generate a profile
                var den_map = [], num_map = [], num_c = 0, den_c = 0;
                var setBrackets = function(container, map, counter) {
                    if(counter > 1 && map.length > 0) {
                        var l = map.length;
                        for(var i=0; i<l; i++) {
                            var idx = map[i], item = container[idx];
                            if(!(/^\\left\(.+\\right\)\^\{.+\}$/g.test(item) || /^\\left\(.+\\right\)$/g.test(item))) {
                                container[idx] = LaTeX.brackets(item, 'parens');
                            }
                        }
                    }  
                    return container;
                };
                
                //generate latex for each of them
                symbol.each(function(x) { 
                    var isDenom = isNegative(x.power),
                        laTex;
                    
                    if(isDenom) { 
                        laTex = LaTeX.latex(x.invert(), option);
                        den_c++;
                        if(x.isComposite()) {
                            if(symbol.multiplier.den != 1 && Math.abs(x.power) == 1) laTex = LaTeX.brackets(laTex, 'parens');
                            den_map.push(denominator.length); //make a note of where the composite was found 
                        }
                        
                        denominator.push(laTex);
                    }
                    else {
                        laTex = LaTeX.latex(x, option);
                        num_c++;
                        if(x.isComposite()) {
                            if(symbol.multiplier.num != 1 && Math.abs(x.power) == 1) laTex = LaTeX.brackets(laTex, 'parens');
                            num_map.push(numerator.length);   //make a note of where the composite was found 
                        }
                        numerator.push(laTex);
                    }
                });

                //apply brackets
                setBrackets(numerator, num_map, num_c);
                v[0] = numerator.join(this.dot); //collapse the numerator into one string

                setBrackets(denominator, den_map, den_c);
                v[1] = denominator.join(this.dot); 
            }

            return v;
        },
        set: function(m, v, p, combine_power) { 
            var isBracketed = function(v) {
                return /^\\left\(.+\\right\)$/.test(v);
            };
            //format the power if it exists
            if(p) p = this.formatP(p);
            //group CB will have to be wrapped since the power applies to both it's numerator and denominator
            if(combine_power) {
                //POSSIBLE BUG: If powers for group CB format wrong, investigate this since I might have overlooked something
                //the assumption is that in every case the denonimator should be empty when dealing with CB. I can't think
                //of a case where this isn't true
                var tp = p[0];
                p[0] = ''; //temporarily make p blank
            }

            //merge v and p. Not that v MUST be first since the order matters
            v = this.merge(v, p);
            var mn = m[0], md = m[1], vn = v[0], vd = v[1];
            //filters
            //if the top has a variable but the numerator is one drop it
            if(vn && mn == 1) mn = '';
            //if denominator is 1 drop it always
            if(md == 1) md = ''; 
            //prepare the top portion but check that it's not already bracketed. If it is then leave out the cdot
            var top = this.join(mn, vn, !isBracketed(vn) ? this.dot : '');

            //prepare the bottom portion but check that it's not already bracketed. If it is then leave out the cdot
            var bottom = this.join(md, vd, !isBracketed(vd) ? this.dot : '');
            //format the power if it exists
            //make it a fraction if both top and bottom exists
            if(top && bottom) {
                var frac = this.frac(top, bottom);
                if(combine_power && tp) frac = this.brackets(frac)+tp; 
                return frac;
            }
            //otherwise only the top exists so return that
            else return top;
        },
        merge: function(a, b) {
            var r = [];
            for(var i=0; i<2; i++) r[i] = a[i]+b[i];
            return r;
        },
        //joins together two strings if both exist
        join: function(n, d, glue) {
            if(!n && !d) return '';
            if(n && !d) return n;
            if(d && !n) return d;
            return n+glue+d;
        },
        formatP: function(p_array) {
            for(var i=0; i<2; i++) {
                var p = p_array[i];
                if(p) p_array[i] = '^'+this.braces(p);
            }
            return p_array;    
        },
        /**
         * formats the fractions accordingly.
         * @param {Frac} f
         * @param {bool} make_1_blank - let's the function know to return blank for denominators == 1
         */ 
        formatFrac: function(f, is_pow) { 
            var n = f.num.toString(), 
                d = f.den.toString(); 
            //no need to have x^1
            if(is_pow && n === '1' && d === '1') return '';
            //no need to have x/1
            if(d === '1') return n;
            return this.frac(n, d);
        },
        frac: function(n, d) {
            return '\\frac'+this.braces(n)+this.braces(d);
        },
        braces: function(e) {
            return '{'+e+'}';
        },
        brackets: function(e, typ) {
            typ = typ || 'parens';
            var bracketTypes = {
                parens: ['(', ')'],
                square: ['[', ']'],
                brace:  ['{', '}'],
                abs:    ['|', '|'],
                angle:  ['\\langle', '\\rangle']
            };
            var bracket = bracketTypes[typ];
            return '\\left'+bracket[0]+e+'\\right'+bracket[1];
        }
    };
    
    function Vector(v) { 
        if(isVector(v)) this.elements = v.items.slice(0);
        else if(isArray(v)) this.elements = v.slice(0);
        else this.elements = [].slice.call(arguments);
    }
    
    Vector.arrayPrefill = function(n, val) {
        var a = [];
        val = val || 0;
        for(var i=0; i<n; i++) a[i] = val;
        return a;
    };
    
    Vector.fromArray = function(a) {
        var v = new Vector();
        v.elements = a;
        return v;
    };
    
    //Ported from Sylvester.js
    Vector.prototype = {
        custom: true,
        // Returns element i of the vector
        e: function(i) {
            return (i < 1 || i > this.elements.length) ? null : this.elements[i-1];
        },
        
        set: function(i, val) {
            this.elements[i] = new Symbol(val);
        },
        
        // Returns the number of elements the vector has
        dimensions: function() {
            return this.elements.length;
        },

        // Returns the modulus ('length') of the vector
        modulus: function() {
            return block('SAFE', function() {
                return _.pow((this.dot(this.clone())), new Symbol(0.5));
            }, undefined, this);
        },

        // Returns true iff the vector is equal to the argument
        eql: function(vector) {
            var n = this.elements.length;
            var V = vector.elements || vector;
            if (n !== V.length) { return false; }
            do {
                if (Math.abs(_.subtract(this.elements[n-1],V[n-1]).valueOf()) > PRECISION) { return false; }
            } while (--n);
            return true;
        },

        // Returns a clone of the vector
        clone: function() {
            var V = new Vector(),
                l = this.elements.length;
            for(var i=0; i<l; i++) {
                //Rule: all items within the vector must have a clone method.
                V.elements.push(this.elements[i].clone());
            }
            
            return V;
        },

        // Maps the vector to another vector according to the given function
        map: function(fn) {
            var elements = [];
            this.each(function(x, i) {
                elements.push(fn(x, i));
            });
            return new Vector(elements);
        },

        // Calls the iterator for each element of the vector in turn
        each: function(fn) { 
            var n = this.elements.length, k=n, i;
            do { 
                i = k-n;
                fn(this.elements[i], i+1);
            } while (--n);
        },

        // Returns a new vector created by normalizing the receiver
        toUnitVector: function() {
            return block('SAFE', function() {
                var r = this.modulus();
                if (r.valueOf() === 0) { return this.clone(); }
                return this.map(function(x) { return _.divide(x, r); });
            }, undefined, this);    
        },

        // Returns the angle between the vector and the argument (also a vector)
        angleFrom: function(vector) {
            return block('SAFE', function() {
                var V = vector.elements || vector;
                var n = this.elements.length;
                if (n !== V.length) { return null; }
                var dot = new Symbol(0), mod1 = new Symbol(0), mod2 = new Symbol(0);
                // Work things out in parallel to save time
                this.each(function(x, i) {
                    dot = _.add(dot, _.multiply(x, V[i-1]));
                    mod1 = _.add(mod1, _.multiply(x, x));//will not conflict in safe block
                    mod2 = _.add(mod2, _.multiply(V[i-1], V[i-1]));//will not conflict in safe block
                });
                mod1 = _.pow(mod1, new Symbol(0.5)); mod2 = _.pow(mod2, new Symbol(0.5));
                var product = _.multiply(mod1,mod2);
                if(product.valueOf() === 0) { return null; }
                var theta = _.divide(dot, product);
                var theta_val = theta.valueOf();
                if(theta_val < -1) { theta = -1; }
                if (theta_val > 1) { theta = 1; }
                return new Symbol(Math.acos(theta));
            }, undefined, this);
        },

        // Returns true iff the vector is parallel to the argument
        isParallelTo: function(vector) {
          var angle = this.angleFrom(vector).valueOf();
          return (angle === null) ? null : (angle <= PRECISION);
        },

        // Returns true iff the vector is antiparallel to the argument
        isAntiparallelTo: function(vector) {
          var angle = this.angleFrom(vector).valueOf();
          return (angle === null) ? null : (Math.abs(angle - Math.PI) <= Sylvester.precision);
        },

        // Returns true iff the vector is perpendicular to the argument
        isPerpendicularTo: function(vector) {
          var dot = this.dot(vector);
          return (dot === null) ? null : (Math.abs(dot) <= Sylvester.precision);
        },

        // Returns the result of adding the argument to the vector
        add: function(vector) {
            return block('SAFE', function(){
                var V = vector.elements || vector;
                if (this.elements.length !== V.length) { return null; }
                return this.map(function(x, i) { return _.add(x, V[i-1]); });
            }, undefined, this);
        },

        // Returns the result of subtracting the argument from the vector
        subtract: function(vector) { 
            return block('SAFE', function(){
                var V = vector.elements || vector;
                if (this.elements.length !== V.length) { return null; }
                return this.map(function(x, i) { return _.subtract(x, V[i-1]); });
            }, undefined, this);
        },

        // Returns the result of multiplying the elements of the vector by the argument
        multiply: function(k) {
            return this.map(function(x) { return x.clone()*k.clone(); });
        },

        x: function(k) { return this.multiply(k); },

        // Returns the scalar product of the vector with the argument
        // Both vectors must have equal dimensionality
        dot: function(vector) {
            return block('SAFE', function() {
                var V = vector.elements || vector;
                var product = new Symbol(0), n = this.elements.length;
                if (n !== V.length) { return null; }
                do { product = _.add(product, _.multiply(this.elements[n-1], V[n-1])); } while (--n);
                return product;
            }, undefined, this);  
        },

        // Returns the vector product of the vector with the argument
        // Both vectors must have dimensionality 3
        cross: function(vector) {
            var B = vector.elements || vector;
            if(this.elements.length !== 3 || B.length !== 3) { return null; }
            var A = this.elements;
            return block('SAFE', function() {
                return new Vector([
                    _.subtract(_.multiply(A[1], B[2]), _.multiply(A[2], B[1])),
                    _.subtract(_.multiply(A[2], B[0]), _.multiply(A[0], B[2])),
                    _.subtract(_.multiply(A[0], B[1]), _.multiply(A[1], B[0]))
                ]);
            }, undefined, this);  
        },

        // Returns the (absolute) largest element of the vector
        max: function() {
            var m = 0, n = this.elements.length, k = n, i;
            do { i = k - n;
                if(Math.abs(this.elements[i].valueOf()) > Math.abs(m.valueOf())) { m = this.elements[i]; }
            } while (--n);
            return m;
        },

        // Returns the index of the first match found
        indexOf: function(x) {
            var index = null, n = this.elements.length, k = n, i;
            do { 
                i = k-n;
                if(index === null && this.elements[i].valueOf() === x.valueOf()) {
                    index = i+1;
                }
            } while (--n);
            return index;
        },
        text: function(x) {
            return text(this);
        },
        toString: function() {
            return this.text();
        },
        latex: function(option) {
            var tex = [];
            for(var i=0;i<this.elements.length;i++) {
                tex.push(LaTeX.latex.call(LaTeX, this.elements[i], option));
            }
            return '['+tex.join(', ')+']';
        }
    };
    
    function Matrix() {
        var m = arguments,
            l = m.length, i, el = [];
        if(isMatrix(m)) { //if it's a matrix then make a clone
            for(i=0; i<l; i++) {
                el.push(m[i].slice(0));
            }
        }
        else {
            var row, lw, rl;
            for(i=0; i<l; i++) {
                row = m[i];
                if(isVector(row)) row = row.elements;
                if(!isArray(row)) row = [row];
                rl = row.length;
                if(lw && lw !== rl) err('Unable to create Matrix. Row dimensions do not match!');
                el.push(row);
                lw = rl;
            }
        }
        this.elements = el;
    }
    
    Matrix.identity = function(n) {
        var m = new Matrix();
        for(var i=0; i<n; i++) {
            m.elements.push([]);
            for(var j=0; j<n; j++) {
                m.set(i, j, i === j ? new Symbol(1) : new Symbol(0));
            }
        }
        return m;
    };

    Matrix.fromArray = function(arr) {
        function F(args) {
            return Matrix.apply(this, args);
        }
        F.prototype = Matrix.prototype;

        return new F(arr);
    };
    
    Matrix.zeroMatrix = function(rows, cols) {
        var m = new Matrix();
        for(var i=0; i<rows; i++) {
            m.elements.push(Vector.arrayPrefill(cols, new Symbol(0)));
        }
        return m;
    };
    
    Matrix.prototype = {
        //needs be true to let the parser know not to try to cast it to a symbol
        custom: true, 
        get: function(row, column) {
            if(!this.elements[row])
                return undefined;
            return this.elements[row][column];
        },
        set: function(row, column, value) { 
            if(!this.elements[row]) 
                this.elements[row] = [];
            this.elements[row][column] = isSymbol(value) ? value : new Symbol(value);
        },
        cols: function() {
            return this.elements[0].length;
        },
        rows: function() {
            return this.elements.length;
        },
        row: function(n) {
            if(!n || n > this.cols()) return [];
            return this.elements[n-1];
        },
        col: function(n) {
            var nr = this.rows(),
                col = []; 
            if(n > this.cols() || !n) return col;
            for(var i=0; i<nr; i++) {
                col.push(this.elements[i][n-1]);
            }
            return col;
        },
        eachElement: function(fn) {
            var nr = this.rows(),
                nc = this.cols(), i, j;
            for(i=0; i<nr; i++) {
                for(j=0; j<nc; j++) {
                    this.elements[i][j] = fn.call(this, this.elements[i][j], i, j);
                }
            }
        },
        //ported from Sylvester.js
        determinant: function() {
            if (!this.isSquare()) { return null; }
            var M = this.toRightTriangular();
            var det = M.elements[0][0], n = M.elements.length-1, k = n, i;
            do { 
                i = k-n+1;
                det = _.multiply(det,M.elements[i][i]);
            } while (--n);
            return det;
        },
        isSquare: function() {
            return this.elements.length === this.elements[0].length;
        },
        isSingular: function() {
            return this.isSquare() && this.determinant() === 0;
        },
        augment: function(m) {
            var r = this.rows(), rr = m.rows();
            if(r !== rr) err("Cannot augment matrix. Rows don't match.");
            for(var i=0; i<r; i++) {
                this.elements[i] = this.elements[i].concat(m.elements[i]);
            }
            
            return this;
        },
        clone: function() {
            var r = this.rows(), c = this.cols(),
                m = new Matrix();
            for(var i=0; i<r; i++) {
                m.elements[i] = [];
                for(var j=0; j<c; j++) { 
                    var symbol = this.elements[i][j]; 
                    m.elements[i][j] = isSymbol(symbol) ? symbol.clone() : symbol;
                }
            }
            return m;
        },
        //ported from Sylvester.js
        invert: function() {
            if(!this.isSquare()) err('Matrix is not square!');
            return block('SAFE', function() {
                var ni = this.elements.length, ki = ni, i, j;
                var imatrix = Matrix.identity(ni);
                var M = this.augment(imatrix).toRightTriangular(); 
                var np, kp = M.elements[0].length, p, els, divisor;
                var inverse_elements = [], new_element;
                // Matrix is non-singular so there will be no zeros on the diagonal
                // Cycle through rows from last to first
                do { 
                    i = ni-1;
                    // First, normalise diagonal elements to 1
                    els = []; np = kp;
                    inverse_elements[i] = [];
                    divisor = M.elements[i][i];
                    do { 
                        p = kp - np;
                        new_element = _.divide(M.elements[i][p], divisor.clone());
                        els.push(new_element);
                        // Shuffle of the current row of the right hand side into the results
                        // array as it will not be modified by later runs through this loop
                        if (p >= ki) { inverse_elements[i].push(new_element); }
                    } while (--np);
                    M.elements[i] = els;
                    // Then, subtract this row from those above it to
                    // give the identity matrix on the left hand side
                    for (j=0; j<i; j++) {
                      els = []; np = kp;
                      do { p = kp - np; 
                        els.push(_.subtract(M.elements[j][p].clone(),_.multiply(M.elements[i][p].clone(), M.elements[j][i].clone())));
                      } while (--np);
                      M.elements[j] = els;
                    }
                } while (--ni);
                return Matrix.fromArray(inverse_elements);
            }, undefined, this);
        },
        //ported from Sylvester.js
        toRightTriangular: function() {
            return block('SAFE', function(){
                var M = this.clone(), els, fel, nel, 
                    n = this.elements.length, k = n, i, np, kp = this.elements[0].length, p;
                do { 
                    i = k-n;
                    fel = M.elements[i][i]; 
                    if(fel.valueOf() === 0) {
                        for(var j=i+1; j<k; j++) {
                        nel = M.elements[j][i];
                        if (nel && nel.valueOf() !== 0) {
                            els = []; np = kp;
                            do { 
                                p = kp-np; 
                                els.push(_.add(M.elements[i][p].clone(), M.elements[j][p].clone()));
                            } while (--np);
                            M.elements[i] = els;
                            break;
                        }
                      }
                    }
                    var fel = M.elements[i][i]; 
                    if(fel.valueOf() !== 0) {
                        for (j=i+1; j<k; j++) { 
                            var multiplier = _.divide(M.elements[j][i].clone(),M.elements[i][i].clone()); 
                            els = []; np = kp;
                            do { p = kp - np;
                                // Elements with column numbers up to an including the number
                                // of the row that we're subtracting can safely be set straight to
                                // zero, since that's the point of this routine and it avoids having
                                // to loop over and correct rounding errors later
                                els.push(p <= i ? new Symbol(0) : 
                                        _.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), multiplier.clone())));
                            } while (--np);
                            M.elements[j] = els;
                        }
                    }
                } while (--n);

                return M;  
            }, undefined, this);     
        },
        transpose: function() {
            var rows = this.elements.length, cols = this.elements[0].length;
            var M = new Matrix(), ni = cols, i, nj, j;
            
            do { 
                i = cols - ni;
                M.elements[i] = [];
                nj = rows;
                do { j = rows - nj;
                    M.elements[i][j] = this.elements[j][i].clone();
                } while (--nj);
            } while (--ni);
            return M;
        },
        // Returns true if the matrix can multiply the argument from the left
        canMultiplyFromLeft: function(matrix) {
          var l = isMatrix(matrix) ? matrix.elements.length : matrix.length;
          // this.columns should equal matrix.rows
          return (this.elements[0].length === l);
        },
        sameSize: function(matrix) {
            return this.rows() === matrix.rows() && this.cols() === matrix.cols();
        },
        multiply: function(matrix) {    
            return block('SAFE', function(){
                var M = matrix.elements || matrix;
                if (!this.canMultiplyFromLeft(M)) { 
                    if(this.sameSize(matrix)) {
                        var MM = new Matrix();
                        var rows = this.rows();
                        for(var i=0; i<rows; i++) {
                            var e = _.multiply(new Vector(this.elements[i]), new Vector(matrix.elements[i]));
                            MM.elements[i] = e.elements;
                        }
                        return MM;
                    }
                    return null; 
                }
                var ni = this.elements.length, ki = ni, i, nj, kj = M[0].length, j;
                var cols = this.elements[0].length, elements = [], sum, nc, c;
                do { 
                    i = ki-ni;
                    elements[i] = [];
                    nj = kj;
                    do { 
                        j = kj - nj;
                        sum = new Symbol(0);
                        nc = cols;
                        do { 
                            c = cols-nc;
                            sum = _.add(sum, _.multiply(this.elements[i][c], M[c][j])) ;
                        } while (--nc);
                      elements[i][j] = sum;
                    } while (--nj);
                } while (--ni);
                return Matrix.fromArray(elements);
            }, undefined, this);
        },
        add: function(matrix) {
            var M = new Matrix();
            if(this.sameSize(matrix)) {
                this.eachElement(function(e, i, j) {
                    M.set(i, j, _.add(e.clone(), matrix.elements[i][j]));
                });
            }
            return M;
        },
        subtract: function(matrix) {
            var M = new Matrix();
            if(this.sameSize(matrix)) {
                this.eachElement(function(e, i, j) {
                    M.set(i, j, _.subtract(e.clone(), matrix.elements[i][j]));
                });
            }
            return M;
        },
        negate: function() {
            this.each(function(e) {
               return e.negate(); 
            });
            return this;
        },
        toVector: function() {
            if(this.rows () === 1 || this.cols() === 1) {
                var v = new Vector();
                v.elements = this.elements;
                return v;
            }
            return this;
        },
        toString: function(newline) {
            var l = this.rows(),
                s = [];
            newline = newline === undefined ? '\n' : newline;
            for(var i=0; i<l; i++) {
                s.push('['+this.elements[i].map(function(x) {
                    return x !== undefined ? x.toString() : '';
                }).join(',')+']');
            }
            return 'matrix'+inBrackets(s.join(','));
        },
        text: function() {
            return 'matrix('+this.toString('')+')';
        },
        latex: function(option) {
            var cols = this.cols(), elements = this.elements; 
            return format('\\begin{vmatrix}{0}\\end{vmatrix}', function() {
                var tex = []; 
                for(var row in elements) {
                    var row_tex = [];
                    for(var i=0; i<cols; i++) {
                        row_tex.push(LaTeX.latex.call(LaTeX, elements[row][i], option));
                    }
                    tex.push(row_tex.join(' & '));
                }
                return tex.join(' \\cr ');
            });
        }
    };
    
    //aliases
    Matrix.prototype.each = Matrix.prototype.eachElement;
    
    /* END CLASSES */

    /* FINALIZE */
    var finalize = function() {
        reserveNames(_.constants);
        reserveNames(_.functions);
        //generatePrimes(Settings.init_primes);//generate the firs 100 primes
    };
    
    var build = Utils.build = function(symbol, arg_array) { 
        symbol = block('PARSE2NUMBER', function() {
            return _.parse(symbol);
        }, true);
        var args = variables(symbol);
        var supplements = [];
        var ftext = function(symbol, xports) { 
            xports = xports || [];
            var c = [],
                group = symbol.group,
                prefix = '';

            var ftext_complex = function(group) {
                var d = group === CB ? '*' : '+',
                    cc = [];
                
                for(var x in symbol.symbols) {
                    var sym = symbol.symbols[x],
                        ft = ftext(sym, xports)[0];
                    //wrap it in brackets if it's group PL or CP
                    if(sym.isComposite())
                        ft = inBrackets(ft);
                    cc.push(ft);
                }
                var retval = cc.join(d);
                retval = retval && !symbol.multiplier.equals(1) ? inBrackets(retval) : retval;
                return retval;
            },

            ftext_function = function(bn) { 
                var retval;
                if(bn in Math) retval = 'Math.'+bn;
                else {
                    if(supplements.indexOf(bn) === -1) { //make sure you're not adding the function twice
                        //Math2 functions aren't part of the standard javascript
                        //Math library and must be exported.
                        xports.push('var '+bn+' = '+ Math2[bn].toString()+'; ');
                        supplements.push(bn);
                    }
                    retval = bn;
                }
                retval = retval+inBrackets(symbol.args.map(function(x) {
                    return ftext(x, xports)[0];
                }).join(','));

                return retval;
            };

            //the multiplier
            if(group === N) 
                c.push(symbol.multiplier.toDecimal());
            else if(symbol.multiplier.equals(-1)) 
                prefix = '-';
            else if(!symbol.multiplier.equals(1)) 
                c.push(symbol.multiplier.toDecimal());
            //the value
            var value;
            
            if(group === S || group === P) value = symbol.value;
            else if(group === FN) { 
                value = ftext_function(symbol.fname);
            }
            else if(group === EX) {
                var pg = symbol.previousGroup;
                if(pg === N || pg === S) value = symbol.value;
                else if(pg === FN) value = ftext_function(symbol.fname);
                else value = ftext_complex(symbol.previousGroup);
            }
            else {
                value = ftext_complex(symbol.group);
            }     

            if(symbol.group !== N && !symbol.power.equals(1)) {
                var pow = ftext(_.parse(symbol.power));
                xports.push(pow[1]);
                value = 'Math.pow'+inBrackets(value+','+pow[0]);
            }

            if(value) c.push(prefix+value);

            return [c.join('*'), xports.join('').replace(/\n+\s+/g, ' ')];
        };
        if(arg_array) { 
            for(var i=0; i<args.length; i++) {
                var arg = args[i];
                if(arg_array.indexOf(arg) === -1) err(arg+' not found in argument array');
            }
            args = arg_array;
        }
        var f_array = ftext(symbol);
        return new Function(args, f_array[1]+' return '+f_array[0]+';');
    };
    
    finalize(); //final preparations
    /* END FINALIZE */

    /* BUILD CORE */
    //This contains all the parts of nerdamer and enables nerdamer's internal functions
    //to be used.
    var C = {
        Operator: Operator,
        groups: Groups,
        Symbol: Symbol,
        Expression: Expression,
        Frac: Frac,
        Vector: Vector,
        Matrix: Matrix,
        Parser: Parser,
        Fraction: Fraction,
        Math2: Math2,
        LaTeX: LaTeX,
        Utils: Utils,
        PARSER: _,
        PARENTHESIS: PARENTHESIS, 
        Settings: Settings,
        err: err,
        bigInt: bigInt,
        exceptions: {
            DivisionByZero: DivisionByZero,
            ParseError: ParseError,
            UndefinedError: UndefinedError, 
            MaximumIterationsReached: MaximumIterationsReached
        }
    };
    
    //provide a mechanism for accessing functions directly
    //Not yet complete!!! Some functions will return undefined. This can maybe 
    //just remove the function object at some point when all functions are eventually
    //housed in the global function object.
    C.Utils.importFunctions = function() {
        var o = {};
        for(var x in _.functions)
            o[x] = _.functions[x][0];
        return o;
    };
    //TODO: fix 
    if(!_.error)
        _.error = err;
    /* END BUILD CORE */

    
    /* EXPORTS */
    /**
     * 
     * @param {String} expression the expression to be evaluated
     * @param {Object} subs the object containing the variable values
     * @param {Integer} location a specific location in the equation list to 
     * insert the evaluated expression
     * @param {String} option additional options
     * @returns {Expression} 
     */
    
    var libExports = function(expression, subs, option, location) { 
        //is the user declaring a function?
        var fndec = /^([a-z_][a-z\d\_]*)\(([a-z_,\s]*)\):=(.+)$/gi.exec(expression);
        if(fndec) 
            return nerdamer.setFunction(fndec[1], fndec[2].split(','), fndec[3]);

        var variable, fn, args;
        //convert any expression passed in to a string
        if(expression instanceof Expression) expression = expression.toString();

        var multi_options = isArray(option),
            expand = 'expand',
            numer = multi_options ? option.indexOf('numer') !== -1 : option === 'numer';
        if((multi_options ? option.indexOf(expand) !== -1 : option === expand)) {
            expression = format('{0}({1})', expand, expression);
        }
        var e = block('PARSE2NUMBER', function(){ 
            return _.parse(expression, subs);
        }, numer || Settings.PARSE2NUMBER);
        
        if(location) { EXPRESSIONS[location-1] = e; }
        else { EXPRESSIONS.push(e);}
        
        if(variable) libExports.setVar(variable, e);
        if(fn) libExports.setFunction(fn, args, e);
        
        return new Expression(e);
    };
    
    libExports.rpn = function(expression) {
        return _.parse(expression, null, true);
    };
    
    libExports.convertToLaTeX = function(e) {
        return _.toTeX(e);
    };
    
    /**
     * Get the version of nerdamer or a loaded add-on
     * @param {String} add_on - The add-on being checked
     * @returns {String} returns the version of nerdamer
     */
    libExports.version = function(add_on) {
        if(add_on) {
            try {
                return C[add_on].version;
            }
            catch(e) {
                return "No module named "+add_on+" found!";
            }
        }
        return version;
    };
    
    /**
     * Get nerdamer generated warnings
     * @returns {String[]}
     */
    libExports.getWarnings = function() {
        return WARNINGS;
    };
    
    /**
     * 
     * @param {String} constant The name of the constant to be set
     * @param {mixed} value The value of the constant 
     * @returns {Object} Returns the nerdamer object
     */
    libExports.setConstant = function(constant, value) {
        validateName(constant); 
        if(!isReserved(constant)) {
            //fix for issue #127
            if(value === 'delete' || value === '') {
                delete _.constants[constant];
            }
            else {
                if(isNaN(value)) throw new Error('Constant must be a number!');
                _.constants[constant] =  value;
            }
        }    
        return this;
    };
    
    /**
     * Returns the value of a previously set constant
     * @param {type} constant
     * @returns {String}
     */
    libExports.getConstant = function(constant) {
        return String(_.constant[constant]);
    };
    
    /**
     * 
     * @param {String} name The name of the function
     * @param {Array} params_array A list containing the parameter name of the functions
     * @param {String} body The body of the function
     * @returns {Boolean} returns true if succeeded and falls on fail
     * @example nerdamer.setFunction('f',['x'], 'x^2+2');
     */
    libExports.setFunction = function(name, params_array, body) {
        validateName(name);
        if(!isReserved(name)) {
            params_array = params_array || variables(_.parse(body));
            _.functions[name] = [_.mapped_function, params_array.length, {
                    name: name,
                    params: params_array,
                    body: body
            }];
            return true;
        }
        return false;
    };
    
    /**
     * 
     * @returns {C} Exports the nerdamer core functions and objects
     */
    libExports.getCore = function() {
        return C;
    };

    libExports.getExpression = libExports.getEquation = Expression.getExpression;
    
    /**
     * 
     * @param {Boolean} asArray The returned names are returned as an array if this is set to true;
     * @returns {String|Array}
     */
    libExports.reserved = function(asArray) {
        if(asArray){ return RESERVED; }
        return RESERVED.join(', ');
    };
    
    /**
     * 
     * @param {Integer} equation_number the number of the equation to clear. 
     * If 'all' is supplied then all equations are cleared
     * @param {Boolean} keep_EXPRESSIONS_fixed use true if you don't want to keep EXPRESSIONS length fixed
     * @returns {Object} Returns the nerdamer object
     */
    libExports.clear = function( equation_number, keep_EXPRESSIONS_fixed ) { 
        if(equation_number === 'all') { EXPRESSIONS = []; }
        else if(equation_number === 'last') { EXPRESSIONS.pop(); }
        else if(equation_number === 'first') { EXPRESSIONS.shift(); }
        else { 
            var index = !equation_number ? EXPRESSIONS.length : equation_number-1; 
            keep_EXPRESSIONS_fixed === true ? EXPRESSIONS[index] = undefined : remove(EXPRESSIONS, index);
        }   
        return this;
    };
    
    /**
     * Alias for nerdamer.clear('all')
     */
    libExports.flush = function() {
        this.clear('all');
        return this;
    };
    
    /**
     * 
     * @param {Boolean} asObject
     * @param {Boolean} asLaTeX
     * @param {String|String[]} option 
     * @returns {Array}
     */
    libExports.expressions = function( asObject, asLaTeX, option ) {
        var result = asObject ? {} : [];
        for(var i=0; i<EXPRESSIONS.length; i++) {
            var eq = asLaTeX ? LaTeX.latex(EXPRESSIONS[i], option) : text(EXPRESSIONS[i], option);
            asObject ? result[i+1] = eq : result.push(eq);
        }
        return result;
    };
    
    //the method for registering modules
    libExports.register = function(obj) { 
        var core = this.getCore();
        
        if(isArray(obj)) {
            for(var i=0; i<obj.length; i++) {
                if(obj) this.register(obj[i]);
            }
        }
        else if(obj && Settings.exclude.indexOf(obj.name) === -1) {
            //make sure all the dependencies are available
            if(obj.dependencies) {
                for(var i=0; i<obj.dependencies.length; i++)
                    if(!core[obj.dependencies[i]]) 
                        throw new Error(format('{0} requires {1} to be loaded!', obj.name, obj.dependencies[i]));
            }
            //if no parent object is provided then the function does not have an address and cannot be called directly
            var parent_obj = obj.parent, 
                fn = obj.build.call(core); //call constructor to get function
            if(parent_obj) {
                if(!core[parent_obj]) core[obj.parent] = {};
                
                var ref_obj = parent_obj === 'nerdamer' ? this : core[parent_obj];
                //attach the function to the core
                ref_obj[obj.name] = fn;
            }
            if(obj.visible) _.functions[obj.name] = [fn, obj.numargs]; //make the function available
            
        } 
    };
    
    /**
     * @param {String} name variable name
     * @returns {boolean} validates if the profided string is a valid variable name
     */
    libExports.validateName = validateName;
    
    /**
     * @param {String} varname variable name
     * @returns {boolean} validates if the profided string is a valid variable name
     */
    libExports.validVarName = function(varname) {
        try {
            validateName(varname);
            return RESERVED.indexOf(varname) === -1;
        }
        catch(e){ return false; }
    };
    
    /**
     * 
     * @returns {Array} Array of functions currently supported by nerdamer
     */
    libExports.supported = function() {
        return keys(_.functions);
    };
    
    /**
     * 
     * @returns {Number} The number equations/expressions currently loaded
     */
    libExports.numEquations = libExports.numExpressions = function() {
        return EXPRESSIONS.length;
    };
    /* END EXPORTS */
    
    /**
     * 
     * @param {String} v variable to be set
     * @param {String} val value of variable. This can be a variable expression or number
     * @returns {Object} Returns the nerdamer object
     */
    libExports.setVar = function(v, val) {
        validateName(v);
        //check if it's not already a constant
        if(v in _.constants)
            err('Cannot set value for constant '+v);
        if(val === 'delete' || val === '') 
            delete VARS[v];
        else {
            VARS[v] = isSymbol(val) ? val : _.parse(val);
        }
        return this;
    };
    
    /**
     * Returns the value of a set variable
     * @param {type} v
     * @returns {varies}
     */
    libExports.getVar = function(v) {
        return VARS[v];
    };
    /**
     * Clear the variables from the VARS object
     * @returns {Object} Returns the nerdamer object
     */    
    libExports.clearVars = function() {
        VARS = {};
        return this;
    };
    
    /**
     * 
     * @param {Function} loader
     * @returns {nerdamer}
     */
    libExports.load = function(loader) {
        loader.call(this);
        return this;
    };
    
    /**
     * @param {String} output - output format. Can be 'object' (just returns the VARS object), 'text' or 'latex'. Default: 'text'
     * @param {String|String[]} option
     * @returns {Object} Returns an object with the variables
     */    
    libExports.getVars = function(output, option) {
        output = output || 'text';
        var variables = {};
        if (output === 'object') variables = VARS;
        else {
            for (var v in VARS) {
                if (output === 'latex') {
                    variables[v] = VARS[v].latex(option);
                } else if (output === 'text') {
                    variables[v] = VARS[v].text(option);
                }
            }
        }
        return variables;
    };
    
    /**
     * Set the value of a setting
     * @param {String} setting The setting to be changed
     * @param {boolean} value 
     */
    libExports.set = function(setting, value) {
        //current options:
        //PARSE2NUMBER, suppress_errors
        if(typeof setting === 'object')
            for(var x in setting) { 
                libExports.set(x, setting[x]);
            }
                
        var disallowed = ['SAFE'];
        if(disallowed.indexOf(setting) !== -1) err('Cannot modify setting: '+setting);
        Settings[setting] = value;
    };
    
    /**
     * Get the value of a setting
     * @param {type} setting
     * @returns {undefined}
     */
    libExports.get = function(setting) {
        return Settings[setting];
    };
    
    /**
     * This functions makes internal functions available externally
     * @param {bool} override Override the functions when calling api if it exists 
     */
    libExports.api = function(override) {
        //Map internal functions to external ones
        var linker = function(fname) {
            return function() {
                var args = [].slice.call(arguments);
                for(var i=0; i<args.length; i++)
                    args[i] = _.parse(args[i]);
                return new Expression(block('PARSE2NUMBER', function() {
                    return _.callfunction(fname, args);
                }));
            };
        };
        //perform the mapping
        for(var x in _.functions) 
            if(!(x in libExports) || override)
                libExports[x] = linker(x);
    };
    
    libExports.replaceFunction = function(name, fn, num_args) {
        var existing = _.functions[name];
        var new_num_args = typeof num_args === 'undefined' ? existing[1]: num_args;
        _.functions[name] = [fn.call(undefined, existing[0], C), new_num_args];
    };
    
    //helper function to set and operator
    //Operator('^', 'pow', 6, false, false),
    //function Operator(val, fn, precedence, left_assoc, is_prefix, is_postfix, operation) 
    libExports.setOperator = function(symbol, name, precendence, left_assoc, is_prefix, is_postfix, fn) {
        _.operators[symbol] = new Operator(symbol, name, precendence, left_assoc, is_prefix, is_postfix, fn);
        _.name = name; //make the parser aware of this  new function
        CUSTOM_OPERATORS[name] = symbol; //let nerdamer know how to display it
    };
    
    libExports.getOperator = function(symbol) {
        return _.operators[symbol];
    };
    
    libExports.api();

    return libExports; //Done
})({
    //https://github.com/peterolson/BigInteger.js
    bigInt: (function(){
        var bigInt = function(undefined){var BASE=1e7,LOG_BASE=7,MAX_INT=9007199254740992,MAX_INT_ARR=smallToArray(MAX_INT),LOG_MAX_INT=Math.log(MAX_INT);function Integer(v,radix){if(typeof v==="undefined")return Integer[0];if(typeof radix!=="undefined")return+radix===10?parseValue(v):parseBase(v,radix);return parseValue(v)}function BigInteger(value,sign){this.value=value;this.sign=sign;this.isSmall=false;}BigInteger.prototype=Object.create(Integer.prototype);function SmallInteger(value){this.value=value;this.sign=value<0;this.isSmall=true;}SmallInteger.prototype=Object.create(Integer.prototype);function isPrecise(n){return-MAX_INT<n&&n<MAX_INT}function smallToArray(n){if(n<1e7)return[n];if(n<1e14)return[n%1e7,Math.floor(n/1e7)];return[n%1e7,Math.floor(n/1e7)%1e7,Math.floor(n/1e14)]}function arrayToSmall(arr){trim(arr);var length=arr.length;if(length<4&&compareAbs(arr,MAX_INT_ARR)<0){switch(length){case 0:return 0;case 1:return arr[0];case 2:return arr[0]+arr[1]*BASE;default:return arr[0]+(arr[1]+arr[2]*BASE)*BASE}}return arr}function trim(v){var i=v.length;while(v[--i]===0);v.length=i+1;}function createArray(length){var x=new Array(length);var i=-1;while(++i<length){x[i]=0;}return x}function truncate(n){if(n>0)return Math.floor(n);return Math.ceil(n)}function add(a,b){var l_a=a.length,l_b=b.length,r=new Array(l_a),carry=0,base=BASE,sum,i;for(i=0;i<l_b;i++){sum=a[i]+b[i]+carry;carry=sum>=base?1:0;r[i]=sum-carry*base;}while(i<l_a){sum=a[i]+carry;carry=sum===base?1:0;r[i++]=sum-carry*base;}if(carry>0)r.push(carry);return r}function addAny(a,b){if(a.length>=b.length)return add(a,b);return add(b,a)}function addSmall(a,carry){var l=a.length,r=new Array(l),base=BASE,sum,i;for(i=0;i<l;i++){sum=a[i]-base+carry;carry=Math.floor(sum/base);r[i]=sum-carry*base;carry+=1;}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base);}return r}BigInteger.prototype.add=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.subtract(n.negate())}var a=this.value,b=n.value;if(n.isSmall){return new BigInteger(addSmall(a,Math.abs(b)),this.sign)}return new BigInteger(addAny(a,b),this.sign)};BigInteger.prototype.plus=BigInteger.prototype.add;SmallInteger.prototype.add=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.subtract(n.negate())}var b=n.value;if(n.isSmall){if(isPrecise(a+b))return new SmallInteger(a+b);b=smallToArray(Math.abs(b));}return new BigInteger(addSmall(b,Math.abs(a)),a<0)};SmallInteger.prototype.plus=SmallInteger.prototype.add;function subtract(a,b){var a_l=a.length,b_l=b.length,r=new Array(a_l),borrow=0,base=BASE,i,difference;for(i=0;i<b_l;i++){difference=a[i]-borrow-b[i];if(difference<0){difference+=base;borrow=1;}else borrow=0;r[i]=difference;}for(i=b_l;i<a_l;i++){difference=a[i]-borrow;if(difference<0)difference+=base;else{r[i++]=difference;break}r[i]=difference;}for(;i<a_l;i++){r[i]=a[i];}trim(r);return r}function subtractAny(a,b,sign){var value;if(compareAbs(a,b)>=0){value=subtract(a,b);}else{value=subtract(b,a);sign=!sign;}value=arrayToSmall(value);if(typeof value==="number"){if(sign)value=-value;return new SmallInteger(value)}return new BigInteger(value,sign)}function subtractSmall(a,b,sign){var l=a.length,r=new Array(l),carry=-b,base=BASE,i,difference;for(i=0;i<l;i++){difference=a[i]+carry;carry=Math.floor(difference/base);difference%=base;r[i]=difference<0?difference+base:difference;}r=arrayToSmall(r);if(typeof r==="number"){if(sign)r=-r;return new SmallInteger(r)}return new BigInteger(r,sign)}BigInteger.prototype.subtract=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.add(n.negate())}var a=this.value,b=n.value;if(n.isSmall)return subtractSmall(a,Math.abs(b),this.sign);return subtractAny(a,b,this.sign)};BigInteger.prototype.minus=BigInteger.prototype.subtract;SmallInteger.prototype.subtract=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.add(n.negate())}var b=n.value;if(n.isSmall){return new SmallInteger(a-b)}return subtractSmall(b,Math.abs(a),a>=0)};SmallInteger.prototype.minus=SmallInteger.prototype.subtract;BigInteger.prototype.negate=function(){return new BigInteger(this.value,!this.sign)};SmallInteger.prototype.negate=function(){var sign=this.sign;var small=new SmallInteger(-this.value);small.sign=!sign;return small};BigInteger.prototype.abs=function(){return new BigInteger(this.value,false)};SmallInteger.prototype.abs=function(){return new SmallInteger(Math.abs(this.value))};function multiplyLong(a,b){var a_l=a.length,b_l=b.length,l=a_l+b_l,r=createArray(l),base=BASE,product,carry,i,a_i,b_j;for(i=0;i<a_l;++i){a_i=a[i];for(var j=0;j<b_l;++j){b_j=b[j];product=a_i*b_j+r[i+j];carry=Math.floor(product/base);r[i+j]=product-carry*base;r[i+j+1]+=carry;}}trim(r);return r}function multiplySmall(a,b){var l=a.length,r=new Array(l),base=BASE,carry=0,product,i;for(i=0;i<l;i++){product=a[i]*b+carry;carry=Math.floor(product/base);r[i]=product-carry*base;}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base);}return r}function shiftLeft(x,n){var r=[];while(n-- >0)r.push(0);return r.concat(x)}function multiplyKaratsuba(x,y){var n=Math.max(x.length,y.length);if(n<=30)return multiplyLong(x,y);n=Math.ceil(n/2);var b=x.slice(n),a=x.slice(0,n),d=y.slice(n),c=y.slice(0,n);var ac=multiplyKaratsuba(a,c),bd=multiplyKaratsuba(b,d),abcd=multiplyKaratsuba(addAny(a,b),addAny(c,d));var product=addAny(addAny(ac,shiftLeft(subtract(subtract(abcd,ac),bd),n)),shiftLeft(bd,2*n));trim(product);return product}function useKaratsuba(l1,l2){return-.012*l1-.012*l2+15e-6*l1*l2>0}BigInteger.prototype.multiply=function(v){var n=parseValue(v),a=this.value,b=n.value,sign=this.sign!==n.sign,abs;if(n.isSmall){if(b===0)return Integer[0];if(b===1)return this;if(b===-1)return this.negate();abs=Math.abs(b);if(abs<BASE){return new BigInteger(multiplySmall(a,abs),sign)}b=smallToArray(abs);}if(useKaratsuba(a.length,b.length))return new BigInteger(multiplyKaratsuba(a,b),sign);return new BigInteger(multiplyLong(a,b),sign)};BigInteger.prototype.times=BigInteger.prototype.multiply;function multiplySmallAndArray(a,b,sign){if(a<BASE){return new BigInteger(multiplySmall(b,a),sign)}return new BigInteger(multiplyLong(b,smallToArray(a)),sign)}SmallInteger.prototype._multiplyBySmall=function(a){if(isPrecise(a.value*this.value)){return new SmallInteger(a.value*this.value)}return multiplySmallAndArray(Math.abs(a.value),smallToArray(Math.abs(this.value)),this.sign!==a.sign)};BigInteger.prototype._multiplyBySmall=function(a){if(a.value===0)return Integer[0];if(a.value===1)return this;if(a.value===-1)return this.negate();return multiplySmallAndArray(Math.abs(a.value),this.value,this.sign!==a.sign)};SmallInteger.prototype.multiply=function(v){return parseValue(v)._multiplyBySmall(this)};SmallInteger.prototype.times=SmallInteger.prototype.multiply;function square(a){var l=a.length,r=createArray(l+l),base=BASE,product,carry,i,a_i,a_j;for(i=0;i<l;i++){a_i=a[i];for(var j=0;j<l;j++){a_j=a[j];product=a_i*a_j+r[i+j];carry=Math.floor(product/base);r[i+j]=product-carry*base;r[i+j+1]+=carry;}}trim(r);return r}BigInteger.prototype.square=function(){return new BigInteger(square(this.value),false)};SmallInteger.prototype.square=function(){var value=this.value*this.value;if(isPrecise(value))return new SmallInteger(value);return new BigInteger(square(smallToArray(Math.abs(this.value))),false)};function divMod1(a,b){var a_l=a.length,b_l=b.length,base=BASE,result=createArray(b.length),divisorMostSignificantDigit=b[b_l-1],lambda=Math.ceil(base/(2*divisorMostSignificantDigit)),remainder=multiplySmall(a,lambda),divisor=multiplySmall(b,lambda),quotientDigit,shift,carry,borrow,i,l,q;if(remainder.length<=a_l)remainder.push(0);divisor.push(0);divisorMostSignificantDigit=divisor[b_l-1];for(shift=a_l-b_l;shift>=0;shift--){quotientDigit=base-1;if(remainder[shift+b_l]!==divisorMostSignificantDigit){quotientDigit=Math.floor((remainder[shift+b_l]*base+remainder[shift+b_l-1])/divisorMostSignificantDigit);}carry=0;borrow=0;l=divisor.length;for(i=0;i<l;i++){carry+=quotientDigit*divisor[i];q=Math.floor(carry/base);borrow+=remainder[shift+i]-(carry-q*base);carry=q;if(borrow<0){remainder[shift+i]=borrow+base;borrow=-1;}else{remainder[shift+i]=borrow;borrow=0;}}while(borrow!==0){quotientDigit-=1;carry=0;for(i=0;i<l;i++){carry+=remainder[shift+i]-base+divisor[i];if(carry<0){remainder[shift+i]=carry+base;carry=0;}else{remainder[shift+i]=carry;carry=1;}}borrow+=carry;}result[shift]=quotientDigit;}remainder=divModSmall(remainder,lambda)[0];return[arrayToSmall(result),arrayToSmall(remainder)]}function divMod2(a,b){var a_l=a.length,b_l=b.length,result=[],part=[],base=BASE,guess,xlen,highx,highy,check;while(a_l){part.unshift(a[--a_l]);trim(part);if(compareAbs(part,b)<0){result.push(0);continue}xlen=part.length;highx=part[xlen-1]*base+part[xlen-2];highy=b[b_l-1]*base+b[b_l-2];if(xlen>b_l){highx=(highx+1)*base;}guess=Math.ceil(highx/highy);do{check=multiplySmall(b,guess);if(compareAbs(check,part)<=0)break;guess--;}while(guess);result.push(guess);part=subtract(part,check);}result.reverse();return[arrayToSmall(result),arrayToSmall(part)]}function divModSmall(value,lambda){var length=value.length,quotient=createArray(length),base=BASE,i,q,remainder,divisor;remainder=0;for(i=length-1;i>=0;--i){divisor=remainder*base+value[i];q=truncate(divisor/lambda);remainder=divisor-q*lambda;quotient[i]=q|0;}return[quotient,remainder|0]}function divModAny(self,v){var value,n=parseValue(v);var a=self.value,b=n.value;var quotient;if(b===0)throw new Error("Cannot divide by zero");if(self.isSmall){if(n.isSmall){return[new SmallInteger(truncate(a/b)),new SmallInteger(a%b)]}return[Integer[0],self]}if(n.isSmall){if(b===1)return[self,Integer[0]];if(b==-1)return[self.negate(),Integer[0]];var abs=Math.abs(b);if(abs<BASE){value=divModSmall(a,abs);quotient=arrayToSmall(value[0]);var remainder=value[1];if(self.sign)remainder=-remainder;if(typeof quotient==="number"){if(self.sign!==n.sign)quotient=-quotient;return[new SmallInteger(quotient),new SmallInteger(remainder)]}return[new BigInteger(quotient,self.sign!==n.sign),new SmallInteger(remainder)]}b=smallToArray(abs);}var comparison=compareAbs(a,b);if(comparison===-1)return[Integer[0],self];if(comparison===0)return[Integer[self.sign===n.sign?1:-1],Integer[0]];if(a.length+b.length<=200)value=divMod1(a,b);else value=divMod2(a,b);quotient=value[0];var qSign=self.sign!==n.sign,mod=value[1],mSign=self.sign;if(typeof quotient==="number"){if(qSign)quotient=-quotient;quotient=new SmallInteger(quotient);}else quotient=new BigInteger(quotient,qSign);if(typeof mod==="number"){if(mSign)mod=-mod;mod=new SmallInteger(mod);}else mod=new BigInteger(mod,mSign);return[quotient,mod]}BigInteger.prototype.divmod=function(v){var result=divModAny(this,v);return{quotient:result[0],remainder:result[1]}};SmallInteger.prototype.divmod=BigInteger.prototype.divmod;BigInteger.prototype.divide=function(v){return divModAny(this,v)[0]};SmallInteger.prototype.over=SmallInteger.prototype.divide=BigInteger.prototype.over=BigInteger.prototype.divide;BigInteger.prototype.mod=function(v){return divModAny(this,v)[1]};SmallInteger.prototype.remainder=SmallInteger.prototype.mod=BigInteger.prototype.remainder=BigInteger.prototype.mod;BigInteger.prototype.pow=function(v){var n=parseValue(v),a=this.value,b=n.value,value,x,y;if(b===0)return Integer[1];if(a===0)return Integer[0];if(a===1)return Integer[1];if(a===-1)return n.isEven()?Integer[1]:Integer[-1];if(n.sign){return Integer[0]}if(!n.isSmall)throw new Error("The exponent "+n.toString()+" is too large.");if(this.isSmall){if(isPrecise(value=Math.pow(a,b)))return new SmallInteger(truncate(value))}x=this;y=Integer[1];while(true){if(b&1===1){y=y.times(x);--b;}if(b===0)break;b/=2;x=x.square();}return y};SmallInteger.prototype.pow=BigInteger.prototype.pow;BigInteger.prototype.modPow=function(exp,mod){exp=parseValue(exp);mod=parseValue(mod);if(mod.isZero())throw new Error("Cannot take modPow with modulus 0");var r=Integer[1],base=this.mod(mod);while(exp.isPositive()){if(base.isZero())return Integer[0];if(exp.isOdd())r=r.multiply(base).mod(mod);exp=exp.divide(2);base=base.square().mod(mod);}return r};SmallInteger.prototype.modPow=BigInteger.prototype.modPow;function compareAbs(a,b){if(a.length!==b.length){return a.length>b.length?1:-1}for(var i=a.length-1;i>=0;i--){if(a[i]!==b[i])return a[i]>b[i]?1:-1}return 0}BigInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall)return 1;return compareAbs(a,b)};SmallInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=Math.abs(this.value),b=n.value;if(n.isSmall){b=Math.abs(b);return a===b?0:a>b?1:-1}return-1};BigInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(this.sign!==n.sign){return n.sign?1:-1}if(n.isSmall){return this.sign?-1:1}return compareAbs(a,b)*(this.sign?-1:1)};BigInteger.prototype.compareTo=BigInteger.prototype.compare;SmallInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall){return a==b?0:a>b?1:-1}if(a<0!==n.sign){return a<0?-1:1}return a<0?1:-1};SmallInteger.prototype.compareTo=SmallInteger.prototype.compare;BigInteger.prototype.equals=function(v){return this.compare(v)===0};SmallInteger.prototype.eq=SmallInteger.prototype.equals=BigInteger.prototype.eq=BigInteger.prototype.equals;BigInteger.prototype.notEquals=function(v){return this.compare(v)!==0};SmallInteger.prototype.neq=SmallInteger.prototype.notEquals=BigInteger.prototype.neq=BigInteger.prototype.notEquals;BigInteger.prototype.greater=function(v){return this.compare(v)>0};SmallInteger.prototype.gt=SmallInteger.prototype.greater=BigInteger.prototype.gt=BigInteger.prototype.greater;BigInteger.prototype.lesser=function(v){return this.compare(v)<0};SmallInteger.prototype.lt=SmallInteger.prototype.lesser=BigInteger.prototype.lt=BigInteger.prototype.lesser;BigInteger.prototype.greaterOrEquals=function(v){return this.compare(v)>=0};SmallInteger.prototype.geq=SmallInteger.prototype.greaterOrEquals=BigInteger.prototype.geq=BigInteger.prototype.greaterOrEquals;BigInteger.prototype.lesserOrEquals=function(v){return this.compare(v)<=0};SmallInteger.prototype.leq=SmallInteger.prototype.lesserOrEquals=BigInteger.prototype.leq=BigInteger.prototype.lesserOrEquals;BigInteger.prototype.isEven=function(){return(this.value[0]&1)===0};SmallInteger.prototype.isEven=function(){return(this.value&1)===0};BigInteger.prototype.isOdd=function(){return(this.value[0]&1)===1};SmallInteger.prototype.isOdd=function(){return(this.value&1)===1};BigInteger.prototype.isPositive=function(){return!this.sign};SmallInteger.prototype.isPositive=function(){return this.value>0};BigInteger.prototype.isNegative=function(){return this.sign};SmallInteger.prototype.isNegative=function(){return this.value<0};BigInteger.prototype.isUnit=function(){return false};SmallInteger.prototype.isUnit=function(){return Math.abs(this.value)===1};BigInteger.prototype.isZero=function(){return false};SmallInteger.prototype.isZero=function(){return this.value===0};BigInteger.prototype.isDivisibleBy=function(v){var n=parseValue(v);var value=n.value;if(value===0)return false;if(value===1)return true;if(value===2)return this.isEven();return this.mod(n).equals(Integer[0])};SmallInteger.prototype.isDivisibleBy=BigInteger.prototype.isDivisibleBy;function isBasicPrime(v){var n=v.abs();if(n.isUnit())return false;if(n.equals(2)||n.equals(3)||n.equals(5))return true;if(n.isEven()||n.isDivisibleBy(3)||n.isDivisibleBy(5))return false;if(n.lesser(25))return true}BigInteger.prototype.isPrime=function(){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs(),nPrev=n.prev();var a=[2,3,5,7,11,13,17,19],b=nPrev,d,t,i,x;while(b.isEven())b=b.divide(2);for(i=0;i<a.length;i++){x=bigInt(a[i]).modPow(b,n);if(x.equals(Integer[1])||x.equals(nPrev))continue;for(t=true, d=b;t&&d.lesser(nPrev);d=d.multiply(2)){x=x.square().mod(n);if(x.equals(nPrev))t=false;}if(t)return false}return true};SmallInteger.prototype.isPrime=BigInteger.prototype.isPrime;BigInteger.prototype.isProbablePrime=function(iterations){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var t=iterations===undefined?5:iterations;for(var i=0;i<t;i++){var a=bigInt.randBetween(2,n.minus(2));if(!a.modPow(n.prev(),n).isUnit())return false}return true};SmallInteger.prototype.isProbablePrime=BigInteger.prototype.isProbablePrime;BigInteger.prototype.modInv=function(n){var t=bigInt.zero,newT=bigInt.one,r=parseValue(n),newR=this.abs(),q,lastT,lastR;while(!newR.equals(bigInt.zero)){q=r.divide(newR);lastT=t;lastR=r;t=newT;r=newR;newT=lastT.subtract(q.multiply(newT));newR=lastR.subtract(q.multiply(newR));}if(!r.equals(1))throw new Error(this.toString()+" and "+n.toString()+" are not co-prime");if(t.compare(0)===-1){t=t.add(n);}if(this.isNegative()){return t.negate()}return t};SmallInteger.prototype.modInv=BigInteger.prototype.modInv;BigInteger.prototype.next=function(){var value=this.value;if(this.sign){return subtractSmall(value,1,this.sign)}return new BigInteger(addSmall(value,1),this.sign)};SmallInteger.prototype.next=function(){var value=this.value;if(value+1<MAX_INT)return new SmallInteger(value+1);return new BigInteger(MAX_INT_ARR,false)};BigInteger.prototype.prev=function(){var value=this.value;if(this.sign){return new BigInteger(addSmall(value,1),true)}return subtractSmall(value,1,this.sign)};SmallInteger.prototype.prev=function(){var value=this.value;if(value-1>-MAX_INT)return new SmallInteger(value-1);return new BigInteger(MAX_INT_ARR,true)};var powersOfTwo=[1];while(powersOfTwo[powersOfTwo.length-1]<=BASE)powersOfTwo.push(2*powersOfTwo[powersOfTwo.length-1]);var powers2Length=powersOfTwo.length,highestPower2=powersOfTwo[powers2Length-1];function shift_isSmall(n){return(typeof n==="number"||typeof n==="string")&&+Math.abs(n)<=BASE||n instanceof BigInteger&&n.value.length<=1}BigInteger.prototype.shiftLeft=function(n){if(!shift_isSmall(n)){throw new Error(String(n)+" is too large for shifting.")}n=+n;if(n<0)return this.shiftRight(-n);var result=this;while(n>=powers2Length){result=result.multiply(highestPower2);n-=powers2Length-1;}return result.multiply(powersOfTwo[n])};SmallInteger.prototype.shiftLeft=BigInteger.prototype.shiftLeft;BigInteger.prototype.shiftRight=function(n){var remQuo;if(!shift_isSmall(n)){throw new Error(String(n)+" is too large for shifting.")}n=+n;if(n<0)return this.shiftLeft(-n);var result=this;while(n>=powers2Length){if(result.isZero())return result;remQuo=divModAny(result,highestPower2);result=remQuo[1].isNegative()?remQuo[0].prev():remQuo[0];n-=powers2Length-1;}remQuo=divModAny(result,powersOfTwo[n]);return remQuo[1].isNegative()?remQuo[0].prev():remQuo[0]};SmallInteger.prototype.shiftRight=BigInteger.prototype.shiftRight;function bitwise(x,y,fn){y=parseValue(y);var xSign=x.isNegative(),ySign=y.isNegative();var xRem=xSign?x.not():x,yRem=ySign?y.not():y;var xBits=[],yBits=[];var xStop=false,yStop=false;while(!xStop||!yStop){if(xRem.isZero()){xStop=true;xBits.push(xSign?1:0);}else if(xSign)xBits.push(xRem.isEven()?1:0);else xBits.push(xRem.isEven()?0:1);if(yRem.isZero()){yStop=true;yBits.push(ySign?1:0);}else if(ySign)yBits.push(yRem.isEven()?1:0);else yBits.push(yRem.isEven()?0:1);xRem=xRem.over(2);yRem=yRem.over(2);}var result=[];for(var i=0;i<xBits.length;i++)result.push(fn(xBits[i],yBits[i]));var sum=bigInt(result.pop()).negate().times(bigInt(2).pow(result.length));while(result.length){sum=sum.add(bigInt(result.pop()).times(bigInt(2).pow(result.length)));}return sum}BigInteger.prototype.not=function(){return this.negate().prev()};SmallInteger.prototype.not=BigInteger.prototype.not;BigInteger.prototype.and=function(n){return bitwise(this,n,function(a,b){return a&b})};SmallInteger.prototype.and=BigInteger.prototype.and;BigInteger.prototype.or=function(n){return bitwise(this,n,function(a,b){return a|b})};SmallInteger.prototype.or=BigInteger.prototype.or;BigInteger.prototype.xor=function(n){return bitwise(this,n,function(a,b){return a^b})};SmallInteger.prototype.xor=BigInteger.prototype.xor;var LOBMASK_I=1<<30,LOBMASK_BI=(BASE&-BASE)*(BASE&-BASE)|LOBMASK_I;function roughLOB(n){var v=n.value,x=typeof v==="number"?v|LOBMASK_I:v[0]+v[1]*BASE|LOBMASK_BI;return x&-x}function max(a,b){a=parseValue(a);b=parseValue(b);return a.greater(b)?a:b}function min(a,b){a=parseValue(a);b=parseValue(b);return a.lesser(b)?a:b}function gcd(a,b){a=parseValue(a).abs();b=parseValue(b).abs();if(a.equals(b))return a;if(a.isZero())return b;if(b.isZero())return a;var c=Integer[1],d,t;while(a.isEven()&&b.isEven()){d=Math.min(roughLOB(a),roughLOB(b));a=a.divide(d);b=b.divide(d);c=c.multiply(d);}while(a.isEven()){a=a.divide(roughLOB(a));}do{while(b.isEven()){b=b.divide(roughLOB(b));}if(a.greater(b)){t=b;b=a;a=t;}b=b.subtract(a);}while(!b.isZero());return c.isUnit()?a:a.multiply(c)}function lcm(a,b){a=parseValue(a).abs();b=parseValue(b).abs();return a.divide(gcd(a,b)).multiply(b)}function randBetween(a,b){a=parseValue(a);b=parseValue(b);var low=min(a,b),high=max(a,b);var range=high.subtract(low);if(range.isSmall)return low.add(Math.round(Math.random()*range));var length=range.value.length-1;var result=[],restricted=true;for(var i=length;i>=0;i--){var top=restricted?range.value[i]:BASE;var digit=truncate(Math.random()*top);result.unshift(digit);if(digit<top)restricted=false;}result=arrayToSmall(result);return low.add(typeof result==="number"?new SmallInteger(result):new BigInteger(result,false))}var parseBase=function(text,base){var length=text.length;var i;var absBase=Math.abs(base);for(var i=0;i<length;i++){var c=text[i].toLowerCase();if(c==="-")continue;if(/[a-z0-9]/.test(c)){if(/[0-9]/.test(c)&&+c>=absBase){if(c==="1"&&absBase===1)continue;throw new Error(c+" is not a valid digit in base "+base+".")}else if(c.charCodeAt(0)-87>=absBase){throw new Error(c+" is not a valid digit in base "+base+".")}}}if(2<=base&&base<=36){if(length<=LOG_MAX_INT/Math.log(base)){var result=parseInt(text,base);if(isNaN(result)){throw new Error(c+" is not a valid digit in base "+base+".")}return new SmallInteger(parseInt(text,base))}}base=parseValue(base);var digits=[];var isNegative=text[0]==="-";for(i=isNegative?1:0;i<text.length;i++){var c=text[i].toLowerCase(),charCode=c.charCodeAt(0);if(48<=charCode&&charCode<=57)digits.push(parseValue(c));else if(97<=charCode&&charCode<=122)digits.push(parseValue(c.charCodeAt(0)-87));else if(c==="<"){var start=i;do{i++;}while(text[i]!==">");digits.push(parseValue(text.slice(start+1,i)));}else throw new Error(c+" is not a valid character")}return parseBaseFromArray(digits,base,isNegative)};function parseBaseFromArray(digits,base,isNegative){var val=Integer[0],pow=Integer[1],i;for(i=digits.length-1;i>=0;i--){val=val.add(digits[i].times(pow));pow=pow.times(base);}return isNegative?val.negate():val}function stringify(digit){var v=digit.value;if(typeof v==="number")v=[v];if(v.length===1&&v[0]<=35){return"0123456789abcdefghijklmnopqrstuvwxyz".charAt(v[0])}return"<"+v+">"}function toBase(n,base){base=bigInt(base);if(base.isZero()){if(n.isZero())return"0";throw new Error("Cannot convert nonzero numbers to base 0.")}if(base.equals(-1)){if(n.isZero())return"0";if(n.isNegative())return new Array(1-n).join("10");return"1"+new Array(+n).join("01")}var minusSign="";if(n.isNegative()&&base.isPositive()){minusSign="-";n=n.abs();}if(base.equals(1)){if(n.isZero())return"0";return minusSign+new Array(+n+1).join(1)}var out=[];var left=n,divmod;while(left.isNegative()||left.compareAbs(base)>=0){divmod=left.divmod(base);left=divmod.quotient;var digit=divmod.remainder;if(digit.isNegative()){digit=base.minus(digit).abs();left=left.next();}out.push(stringify(digit));}out.push(stringify(left));return minusSign+out.reverse().join("")}BigInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!==10)return toBase(this,radix);var v=this.value,l=v.length,str=String(v[--l]),zeros="0000000",digit;while(--l>=0){digit=String(v[l]);str+=zeros.slice(digit.length)+digit;}var sign=this.sign?"-":"";return sign+str};SmallInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!=10)return toBase(this,radix);return String(this.value)};BigInteger.prototype.toJSON=SmallInteger.prototype.toJSON=function(){return this.toString()};BigInteger.prototype.valueOf=function(){return+this.toString()};BigInteger.prototype.toJSNumber=BigInteger.prototype.valueOf;SmallInteger.prototype.valueOf=function(){return this.value};SmallInteger.prototype.toJSNumber=SmallInteger.prototype.valueOf;function parseStringValue(v){if(isPrecise(+v)){var x=+v;if(x===truncate(x))return new SmallInteger(x);throw"Invalid integer: "+v}var sign=v[0]==="-";if(sign)v=v.slice(1);var split=v.split(/e/i);if(split.length>2)throw new Error("Invalid integer: "+split.join("e"));if(split.length===2){var exp=split[1];if(exp[0]==="+")exp=exp.slice(1);exp=+exp;if(exp!==truncate(exp)||!isPrecise(exp))throw new Error("Invalid integer: "+exp+" is not a valid exponent.");var text=split[0];var decimalPlace=text.indexOf(".");if(decimalPlace>=0){exp-=text.length-decimalPlace-1;text=text.slice(0,decimalPlace)+text.slice(decimalPlace+1);}if(exp<0)throw new Error("Cannot include negative exponent part for integers");text+=new Array(exp+1).join("0");v=text;}var isValid=/^([0-9][0-9]*)$/.test(v);if(!isValid)throw new Error("Invalid integer: "+v);var r=[],max=v.length,l=LOG_BASE,min=max-l;while(max>0){r.push(+v.slice(min,max));min-=l;if(min<0)min=0;max-=l;}trim(r);return new BigInteger(r,sign)}function parseNumberValue(v){if(isPrecise(v)){if(v!==truncate(v))throw new Error(v+" is not an integer.");return new SmallInteger(v)}return parseStringValue(v.toString())}function parseValue(v){if(typeof v==="number"){return parseNumberValue(v)}if(typeof v==="string"){return parseStringValue(v)}return v}for(var i=0;i<1e3;i++){Integer[i]=new SmallInteger(i);if(i>0)Integer[-i]=new SmallInteger(-i);}Integer.one=Integer[1];Integer.zero=Integer[0];Integer.minusOne=Integer[-1];Integer.max=max;Integer.min=min;Integer.gcd=gcd;Integer.lcm=lcm;Integer.isInstance=function(x){return x instanceof BigInteger||x instanceof SmallInteger};Integer.randBetween=randBetween;Integer.fromArray=function(digits,base,isNegative){return parseBaseFromArray(digits.map(parseValue),parseValue(base||10),isNegative)};return Integer}();if('object'!=="undefined"&&module.hasOwnProperty("exports")){module.exports=bigInt;}if(typeof undefined==="function"&&undefined.amd){undefined("big-integer",[],function(){return bigInt});}        return bigInt;
    })()
});

{
    module.exports = nerdamer;
}});

const EPS$$1 = 1e-5;
let globalId = 0;
function getGlobalId$$1() {
    return globalId++;
}
function addLikeSurfaceFaces$$1(likeSurfaceFaces, face1, face2) {
    // There cannot be two subgroups which will later be connected, as the "graph" of like surface faces is fully
    // connected
    for (let i = 0; i < likeSurfaceFaces.length; i++) {
        const faceGroup = likeSurfaceFaces[i];
        let foundFace1 = false, foundFace2 = false;
        for (let j = 0; j < faceGroup.length; j++) {
            const face = faceGroup[j];
            if (face == face1) {
                foundFace1 = true;
            }
            if (face == face2) {
                foundFace2 = true;
            }
        }
        if (foundFace1 != foundFace2) {
            faceGroup.push(foundFace1 ? face2 : face1);
            return;
        }
        else if (foundFace1) {
            // found both
            return;
        }
    }
    // nothing found, add a new group
    likeSurfaceFaces.push([face1, face2]);
}
function assembleFaceFromLooseEdges$$1(edges, surface, originalFace) {
    const visited = new Set();
    function nextStart() {
        return edges.find(edge => !visited.has(edge));
    }
    const loops = [];
    let startEdge, currentEdge = undefined;
    while ((startEdge = nextStart())) {
        currentEdge = startEdge;
        const loop = [];
        let total = 0;
        do {
            visited.add(currentEdge);
            loop.push(currentEdge);
            const possibleEdges = edges.filter(edge => currentEdge.b.like(edge.a));
            const normalAtCurrentB = surface.normalP(currentEdge.b);
            const nextEdgeIndex = possibleEdges.indexWithMax(edge => currentEdge.bDir.angleRelativeNormal(edge.aDir, normalAtCurrentB));
            currentEdge = possibleEdges[nextEdgeIndex];
        } while (startEdge != currentEdge && total++ < 200);
        assert(total != 201);
        loops.push(loop);
    }
    const assembledFaces = BRep$$1.assembleFacesFromLoops(loops, surface, originalFace);
    assertf(() => 1 == assembledFaces.length);
    return assembledFaces[0];
}
/**
 * ## Markdown header
 * ![foo](screenshots/Capture.PNG)
 * {@link ../screenshots/Capture.PNG}
 * find the next edge with the MAXIMUM angle
 */
function calcNextEdgeIndex$$1(currentEdge, possibleEdges, faceNormalAtCurrentB) {
    let maxValue = -20, advanced = false, result = Number.MAX_SAFE_INTEGER;
    const normVector = currentEdge.bDir.cross(faceNormalAtCurrentB);
    const eps = 1e-4;
    const dir = sign$1(currentEdge.deltaT());
    const ecd = currentEdge.curve.diff(currentEdge.bT, -dir * eps).dot(normVector);
    for (let i = possibleEdges.length; i--;) {
        const edge = possibleEdges[i];
        const angle1 = currentEdge.bDir.negated().angleRelativeNormal(edge.aDir, faceNormalAtCurrentB);
        const angle = (angle1 + TAU + NLA_PRECISION) % TAU - NLA_PRECISION;
        if (eq0(angle)) {
            // do advanced analysis
            if (currentEdge.curve.isColinearTo(edge.curve)) {
                continue;
            }
            const edgeDir = sign$1(edge.deltaT());
            const iscd = edge.curve.diff(edge.aT, edgeDir * eps).dot(normVector);
            const diff = iscd - ecd;
            // if diff > 0, the angle is actually ~= 0
            if (diff < 0 && (!advanced || diff > maxValue)) {
                advanced = true;
                maxValue = diff;
                result = i;
            }
        }
        else if (!advanced) {
            if (gt(angle, maxValue)) {
                maxValue = angle;
                result = i;
            }
        }
    }
    return result == Number.MAX_SAFE_INTEGER ? 0 : result;
}
class BRep$$1 extends Transformable {
    constructor(faces, infiniteVolume, generator, vertexNames) {
        super();
        this.faces = faces;
        assertInst(Face$$1, ...faces);
        this.infiniteVolume = infiniteVolume;
        assert(!this.infiniteVolume || true === this.infiniteVolume);
        this.generator = generator;
        this.vertexNames = vertexNames;
        this.edgeFaces = undefined;
        //this.assertSanity()
    }
    static loop1ContainsLoop2(loop1, ccw1, loop2, ccw2, surface) {
        for (const edge of loop2) {
            const loop1ContainsPoint = surface.loopContainsPoint(loop1, edge.a);
            if (PointVsFace$$1.ON_EDGE != loop1ContainsPoint)
                return PointVsFace$$1.INSIDE == loop1ContainsPoint;
        }
        for (const edge of loop2) {
            const edgePoint = edge.curve.at(edge.aT * 0.2 + edge.bT * 0.8);
            const loop1ContainsPoint = surface.loopContainsPoint(loop1, edgePoint);
            if (PointVsFace$$1.ON_EDGE != loop1ContainsPoint)
                return PointVsFace$$1.INSIDE == loop1ContainsPoint;
        }
        if (ccw1 != ccw2) {
            return ccw2;
        }
        throw new Error(loop1.sce + loop2.sce);
    }
    static assembleFacesFromLoops(loops, surface, originalFace, infoFactory) {
        function placeRecursively(newLoopInfo, loopInfos) {
            if (loopInfos.length == 0) {
                loopInfos.push(newLoopInfo);
            }
            else {
                const subLoopInfo = loopInfos.find(loopInfo => BRep$$1.loop1ContainsLoop2(loopInfo.loop, loopInfo.ccw, newLoopInfo.loop, newLoopInfo.ccw, surface));
                if (subLoopInfo) {
                    placeRecursively(newLoopInfo, subLoopInfo.subloops);
                }
                else {
                    // newLoopInfo isnt contained by any other subLoopInfo
                    for (let i = loopInfos.length; --i >= 0;) {
                        const subLoopInfo = loopInfos[i];
                        //console.log("cheving subLoopInfo", surface.loopContainsPoint(newLoopInfo.edges,
                        // subLoopInfo.edges[0].a))
                        if (BRep$$1.loop1ContainsLoop2(newLoopInfo.loop, newLoopInfo.ccw, subLoopInfo.loop, subLoopInfo.ccw, surface)) {
                            newLoopInfo.subloops.push(subLoopInfo);
                            loopInfos.splice(i, 1); // remove it
                        }
                    }
                    loopInfos.push(newLoopInfo);
                }
            }
        }
        function newFacesRecursive(loopInfo) {
            // CW loops can be top level, if they are holes in the original face not contained in the new face
            if (loopInfo.ccw) {
                if (loopInfo.subloops.every(sl => !sl.ccw)) {
                    const holes = loopInfo.subloops.map(sl => sl.loop);
                    const info = infoFactory && infoFactory.newSubFace(originalFace, surface, loopInfo.loop, holes);
                    const newFace = new originalFace.constructor(surface, loopInfo.loop, holes, 'genface' + getGlobalId$$1(), info);
                    newFaces.push(newFace);
                    loopInfo.subloops.forEach(sl => sl.subloops.forEach(slsl => slsl.ccw && newFacesRecursive(slsl)));
                }
                else {
                    loopInfo.subloops.forEach(sl => sl.ccw && newFacesRecursive(sl));
                }
            }
        }
        const newFaces = [];
        const topLevelLoops = [];
        loops.forEach(loop => placeRecursively({
            loop: loop,
            ccw: surface.edgeLoopCCW(loop),
            subloops: [],
        }, topLevelLoops));
        topLevelLoops.forEach(tll => newFacesRecursive(tll));
        return newFaces;
    }
    /**
     * Create a [BRep] by concatenating the faces of other BReps. Only use this if certain that the faces of the BReps do not intersect.
     * Otherwise, use [BRep.plus].
     * @param bReps
     * @param generator
     */
    static join(bReps, generator) {
        return new BRep$$1(bReps.flatMap(b2 => b2.faces), false, generator);
    }
    containsPoint(p, forceInsideOutside = false) {
        const dirs = [
            V(-0.3920414696448526, -0.12936136783391444, -0.9108068525164064),
            V(0.6520650903544943, -0.07151288645511984, -0.7547827667692488),
            V(0.9433494201061395, -0.2402757256238473, -0.22882186797013926),
            V(0.13678704228501923, -0.04480387361087783, 0.9895867410047372),
            V(0.0662057922721913, -0.5865836917435423, 0.8071780259955845),
            V(-0.7322576567870621, -0.12953393611526787, 0.6685953061989045),
            V(0.6579719127258273, -0.012300218400456116, 0.7529420075219719),
            V(-0.5576497966736425, 0.8006695748324647, 0.2189861552871446),
        ];
        dirLoop: for (const dir of dirs) {
            const testLine = new L3$$1(p, dir);
            let inside = this.infiniteVolume;
            for (const face of this.faces) {
                assert(!face.surface.containsCurve(testLine));
                const ists = face.surface.isTsForLine(testLine);
                for (const t of ists) {
                    const p = testLine.at(t);
                    const pvf = face.containsPoint2(p);
                    //assert(pvf != PointVsFace.ON_EDGE)
                    !forceInsideOutside && assert(!eq0(t));
                    if (t > 0) {
                        if (pvf == PointVsFace$$1.ON_EDGE) {
                            continue dirLoop;
                        }
                        if (pvf == PointVsFace$$1.INSIDE) {
                            inside = !inside;
                        }
                    }
                }
            }
            return inside;
        }
        return false;
    }
    withMergedFaces() {
        const likeSurfaceFaces = [];
        for (let i = 0; i < this.faces.length; i++) {
            let addedToGroup = false;
            for (let j = 0; j < i; j++) {
                if (this.faces[i].surface.isCoplanarTo(this.faces[j].surface)) {
                    const faceGroup = likeSurfaceFaces.find(faceGroup => faceGroup.includes(this.faces[j]));
                    if (faceGroup) {
                        faceGroup.push(this.faces[i]);
                        addedToGroup = true;
                    }
                }
            }
            !addedToGroup && likeSurfaceFaces.push([this.faces[i]]);
        }
        console.log('likeSurfaceFaces', likeSurfaceFaces);
        if (likeSurfaceFaces.every(group => group.length == 1))
            return this;
        const newFaces = [];
        let total = 0;
        for (const faceGroup of likeSurfaceFaces) {
            console.log(faceGroup);
            if (faceGroup.length == 1) {
                newFaces.push(faceGroup[0]);
            }
            else {
                const allEdges = faceGroup.flatMap(face => face.getAllEdges());
                for (let i = allEdges.length; i-- > 0;) {
                    for (let j = 0; j < i; j++) {
                        console.log('blugh', total);
                        assert(i >= 0 && j >= 0 && total++ < 500, i + ' ' + j + ' ' + total);
                        if (allEdges[i].isCoEdge(allEdges[j])) {
                            // remove both
                            allEdges.splice(i, 1);
                            allEdges.splice(j, 1);
                            i--;
                            break;
                        }
                    }
                }
                const newFace = assembleFaceFromLooseEdges$$1(allEdges, faceGroup[0].surface, faceGroup[0]);
                newFaces.push(newFace);
            }
        }
        return new BRep$$1(newFaces, this.infiniteVolume, this.generator && this.generator + '.withMergedFaces()', this.vertexNames);
    }
    calculateVolume() {
        return this.faces.map(face => face.zDirVolume().volume).sum();
    }
    toMesh() {
        const mesh = new Mesh()
            .addVertexBuffer('normals', 'ts_Normal')
            .addIndexBuffer('TRIANGLES')
            .addIndexBuffer('LINES');
        mesh.faceIndexes = new Map();
        for (const face of this.faces) {
            const triangleStart = mesh.TRIANGLES.length;
            face.addToMesh(mesh);
            mesh.faceIndexes.set(face, { start: triangleStart, count: mesh.TRIANGLES.length - triangleStart });
        }
        //this.buildAdjacencies()
        //for (const edge of this.edgeFaces.keys()) {
        //
        //}
        return mesh;
    }
    minus(other, infoFactory) {
        const generator = this.generator && other.generator && this.generator + '.minus(' + other.generator + ')';
        return this.intersection(other.flipped(), true, true, generator, infoFactory);
    }
    plus(other, infoFactory) {
        const generator = this.generator && other.generator && this.generator + '.plus(' + other.generator + ')';
        return this.flipped()
            .intersection(other.flipped(), true, true, generator, infoFactory)
            .flipped();
    }
    and(other, infoFactory) {
        const generator = this.generator && other.generator && this.generator + '.and(' + other.generator + ')';
        return this.intersection(other, true, true, generator, infoFactory);
    }
    xor(other, infoFactory) {
        const generator = this.generator && other.generator && this.generator + '.xor(' + other.generator + ')';
        return new BRep$$1(this.minus(other, infoFactory).faces.concat(other.minus(this, infoFactory).faces), this.infiniteVolume != other.infiniteVolume, generator);
    }
    equals(obj) {
        return (this.faces.length == obj.faces.length &&
            this.faces.every(face => obj.faces.some(face2 => face.equals(face2))));
    }
    like(brep) {
        return (this.faces.length == brep.faces.length &&
            this.faces.every(face => brep.faces.some(face2 => face.likeFace(face2))));
    }
    //reconstituteCoplanarFaces(likeSurfacePlanes, edgeLooseSegments, faceMap, newFaces) {
    //    likeSurfacePlanes.forEach(faceGroup => {
    //        // calculate total contours
    //        let surface = faceGroup[0].surface, bag = []
    //        faceGroup.forEach(face => {
    //            Array.prototype.push.apply(bag, faceMap(face))
    //            face.getAllEdges().forEach(edge => {
    //                let edgeSubSegments
    //                if (edgeSubSegments = edgeLooseSegments.get(edge)) {
    //                    Array.prototype.push.apply(bag, edgeSubSegments)
    //                } else {
    //                    bag.push(edge)
    //                }
    //            })
    //        })
    //        let currentEdge, loops = []
    //        while (currentEdge = bag.find(edge => !edge.visited)) {
    //            let path = []
    //            do {
    //                currentEdge.visited = true
    //                path.push(currentEdge)
    //                let possibleNextEdges = bag.filter(edge => currentEdge.b.like(edge.a))
    //                // lowest angle, i.e. the right-most next edge
    //                let nextEdgeIndex = possibleNextEdges.indexWithMax((edge, index) =>
    // -currentEdge.bDir.angleRelativeNormal(edge.aDir, surface.normalP(currentEdge.b))) currentEdge =
    // possibleNextEdges[nextEdgeIndex] } while (!currentEdge.visited) let startIndex = path.find(currentEdge) if (-1
    // != startIndex) { loops.push(path.slice(startIndex)) } } }) }
    toString() {
        return `new BRep([\n${this.faces.join(',\n').replace(/^/gm, '\t')}], ${this.infiniteVolume})`;
    }
    getConstructorParameters() {
        return [this.faces, this.infiniteVolume];
    }
    toSource(useGenerator = true) {
        return ((useGenerator && this.generator) ||
            `new BRep([\n${this.faces
                .map(SCE)
                .join(',\n')
                .replace(/^/gm, '\t')}], ${this.infiniteVolume})`);
    }
    /**
     * Rightmost next segment doesn't work, as the correct next segment isn't obvious from the current corner
     * alone.
     * (at least, not without extensive pre-analysis on the face edges, which shouldn't be necessary, as the
     * correct new faces are defined by the new edges already.) Leftmost edge should work. Holes which touch the
     * edge of the face will be added to the face contour.
     *
     * New segments will always be part left-er than existing ones, so no special check is required.
     *
     */
    reconstituteFaces(oldFaces, edgeSubEdges, faceMap, newFaces, infoFactory) {
        const oldFaceStatuses = new Map();
        // reconstitute faces
        const insideEdges = [];
        for (const face of oldFaces) {
            const usableOldEdges = face.getAllEdges().filter(edge => !edgeSubEdges.get(edge));
            const subEdges = face
                .getAllEdges()
                .mapFilter(edge => edgeSubEdges.get(edge))
                .concatenated();
            const newEdges = faceMap.get(face) || [];
            if (newEdges.length || subEdges.length) {
                oldFaceStatuses.set(face, 'partial');
                const loops = [];
                // new edges are definitely part of a resulting loop
                // old edges (both contour and holes) can either be part of a new loop, in which case they will already
                // have been visited when starting a loop search with a new edge, OR they can be stranded, OR they can
                // remain in their old loop
                function getNextStart() {
                    return (newEdges.find(edge => !visitedEdges.has(edge)) ||
                        subEdges.find(edge => !visitedEdges.has(edge)) ||
                        usableOldEdges.find(edge => !visitedEdges.has(edge)));
                }
                const visitedEdges = new Set();
                // search for a loop:
                let currentEdge;
                while ((currentEdge = getNextStart())) {
                    const startEdge = currentEdge, edges = [];
                    let i = 0;
                    // wether only new edges are used (can include looseSegments)
                    do {
                        visitedEdges.add(currentEdge);
                        edges.push(currentEdge);
                        // find next edge
                        const possibleOldEdges = usableOldEdges.filter(edge => currentEdge.b.like(edge.a));
                        const possibleSubEdges = subEdges.filter(edge => currentEdge.b.like(edge.a));
                        const possibleNewEdges = newEdges.filter(edge => currentEdge.b.like(edge.a));
                        const possibleEdges = possibleOldEdges.concat(possibleSubEdges, possibleNewEdges);
                        if (0 == possibleEdges.length)
                            break;
                        assert(0 < possibleEdges.length, () => face.sce);
                        const faceNormalAtCurrentB = face.surface.normalP(currentEdge.b);
                        const nextEdgeIndex = calcNextEdgeIndex$$1(currentEdge, possibleEdges, faceNormalAtCurrentB);
                        currentEdge = possibleEdges[nextEdgeIndex];
                        if (visitedEdges.has(currentEdge)) {
                            break;
                        }
                        assert(currentEdge);
                        assert(currentEdge != startEdge);
                    } while (++i < 400);
                    if (400 == i) {
                        assert(false, 'too many');
                    }
                    // check if we found a loop
                    if (edges.length > 1 && currentEdge == startEdge) {
                        loops.push(edges);
                    }
                }
                const faceNewFaces = BRep$$1.assembleFacesFromLoops(loops, face.surface, face, infoFactory);
                newFaces.push(...faceNewFaces);
                const faceNewFacesEdges = faceNewFaces.flatMap(face => face.getAllEdges());
                insideEdges.push(...usableOldEdges.filter(edge => faceNewFacesEdges.includes(edge)));
            }
        }
        while (insideEdges.length != 0) {
            const insideEdge = insideEdges.pop();
            const adjacentFaces = this.edgeFaces.get(insideEdge.getCanon());
            adjacentFaces.forEach(info => {
                if (!oldFaceStatuses.has(info.face)) {
                    oldFaceStatuses.set(info.face, 'inside');
                    insideEdges.push.apply(insideEdges, info.face.getAllEdges());
                }
            });
        }
        newFaces.push(...oldFaces.filter(face => oldFaceStatuses.get(face) == 'inside'));
    }
    static getLooseEdgeSegments(edgePointInfoss, edgeFaces) {
        const result = new JavaMap();
        // if there are no point info, the original edge will be kept, so we should return nothing
        // otherwise, something will be returned, even if it a new edge identical to the base edge
        for (const [canonEdge, pointInfos] of edgePointInfoss) {
            if (0 == pointInfos.length)
                continue;
            const allFaces = edgeFaces.get(canonEdge);
            pointInfos.sort((a, b) => snap0(a.edgeT - b.edgeT) || +!!undefined);
            let startP = canonEdge.a, startDir = canonEdge.aDir, startT = canonEdge.aT, startInfo;
            function addNewEdge(startInfo, endInfo, newEdge) {
                for (let i = 0; i < allFaces.length; i++) {
                    const faceInfo = allFaces[i];
                    mapPush(result, !faceInfo.reversed ? canonEdge : canonEdge.flipped(), !faceInfo.reversed ? newEdge : newEdge.flipped());
                }
            }
            for (let i = 0; i < pointInfos.length; i++) {
                const info = pointInfos[i];
                const pDir = canonEdge.tangentAt(info.edgeT);
                if (!eq(info.edgeT, startT)) {
                    const newEdge = Edge$$1.create(canonEdge.curve, startP, info.p, startT, info.edgeT, undefined, startDir, pDir, 'looseSegment' + getGlobalId$$1());
                    addNewEdge(startInfo, info, newEdge);
                }
                startP = info.p;
                startT = info.edgeT;
                startInfo = info;
                startDir = pDir;
            }
            if (startInfo && !eq(startT, canonEdge.bT)) {
                const newEdge = Edge$$1.create(canonEdge.curve, startP, canonEdge.b, startT, canonEdge.bT, undefined, startDir, canonEdge.bDir, 'looseSegment' + getGlobalId$$1());
                addNewEdge(startInfo, undefined, newEdge);
            }
        }
        return result;
    }
    getIntersectionEdges(brep2) {
        const faceMap = new Map(), thisEdgePoints = new JavaMap(), otherEdgePoints = new JavaMap();
        const checkedPairs = new JavaSet();
        this.faces.forEach(face => {
            //console.log('face', face.toString())
            brep2.faces.forEach(face2 => {
                //console.log('face2', face2.toString())
                face.intersectFace(face2, this, brep2, faceMap, thisEdgePoints, otherEdgePoints, checkedPairs);
            });
        });
        return Array.from(faceMap.values()).concatenated();
    }
    shellCount() {
        const foundFaces = new Set();
        let face, result = 0;
        while ((face = this.faces.find(face => !foundFaces.has(face)))) {
            result++;
            const stack = [face];
            while ((face = stack.pop())) {
                // @ts-ignore
                for (const edge of face.getAllEdges()) {
                    // @ts-ignore
                    for (const { face: face2 } of this.edgeFaces.get(edge.getCanon())) {
                        if (face !== face2 && !foundFaces.has(face2)) {
                            foundFaces.add(face2);
                            stack.push(face2);
                        }
                    }
                }
            }
        }
        return result;
    }
    getAABB() {
        return AABB.forAABBs(this.faces.map(face => face.getAABB()));
    }
    assertSanity() {
        if (!NLA_DEBUG)
            return;
        // const allFaceEdges = this.faces.flatMap(face => face.getAllEdges())
        // for (const { i, j } of combinations(allFaceEdges.length)) {
        // const a = allFaceEdges[i],
        // 	b = allFaceEdges[j]
        // assert(i == j || !a.isCoEdge(b) || a == b || a.flippedOf == b, 'coedges not linked properly', a, b)
        // assert(
        // 	i == j ||
        // 		!a.curve.isColinearTo(b.curve) ||
        // 		(a.curve.equals(b.curve) && a.isCoEdge(b)) ||
        // 		!a.overlaps(b),
        // 	'colinear edges overlap',
        // 	a,
        // 	b,
        // )
        // }
        this.buildAdjacencies();
        for (const [canonEdge, edgeFaceInfos] of this.edgeFaces) {
            // TODO handle curved faces
            assert(edgeFaceInfos.length % 2 == 0, () => canonEdge + edgeFaceInfos.sce);
        }
    }
    //intersection3(other: BRep, buildThis: boolean, buildOther: boolean, name?: string): BRep {
    //    this.assertSanity()
    //    other.assertSanity()
    //    this.buildAdjacencies()
    //    other.buildAdjacencies()
    //
    //    // edge / edge
    //    for (const [edge1, edge1Faces] of this.edgeFaces) {
    //        for (const [edge2, edge2Faces] of other.edgeFaces) {
    //            const curve1 = edge1.curve, curve2 = edge2.curve
    //            if (curve1.isColinearTo(curve2)) {
    //                if (edge1.overlaps(edge2)) {
    //                    // faces have a common edge
    //                    const aT = curve1.pointT(edge2.a), bT = curve1.pointT(edge2.a)
    //                    const minT = min(aT, bT), maxT = max(aT, bT)
    //                    const commonEdge = Edge.create(curve1, min(edge1.minT, minT), min(edge1.maxT, maxT), )
    //                }
    //            } else if (x = curve1.isInfosWithCurve(edge2.curve)) {
    //                // edges intersect in a point
    //            }
    //        }
    //    }
    //
    //    // point / edge
    //    function pointEdge(b1, b2, has, add) {
    //        for (const v1 of this.vertFaces.keys()) {
    //            for (const edge2 of other.edgeFaces.keys()) {
    //                if (edge2.curve.containsPoint(v1)) {
    //                    const edge2T = edge2.curve.pointT(v1)
    //                    if (eq(edge2.aT, edge2T) || eq(edge2.bT, edge2T)) {
    //                        add(v1, eq(edge2.aT, edge2T) ? edge2.a : edge2.b)
    //                    }
    //                }
    //            }
    //        }
    //    }
    //    const pairs: CustomSet<[Equalable, Equalable]> = new CustomSet<[Equalable, Equalable]>()
    //    pointEdge(this, other, (a, b) => pairs.has([a, b]), (a, b) => pairs.add([a, b]))
    //    pointEdge(other, this, (b, a) => pairs.has([a, b]), (b, a) => pairs.add([a, b]))
    //
    //
    //    // point / point
    //    for (const v1 of this.vertFaces.keys()) {
    //        for (const v2 of other.vertFaces.keys()) {
    //            if (v1.like(v2)) {
    //
    //            }
    //        }
    //    }
    //
    //    for (const face1 of this.faces) {
    //        for (const face2 of other.faces) {
    //            face1.intersectFace(face2)
    //        }
    //    }
    //
    //}
    buildAdjacencies() {
        if (this.edgeFaces)
            return this;
        this.edgeFaces = new JavaMap();
        for (const face of this.faces) {
            for (const edge of face.getAllEdges()) {
                const canon = edge.getCanon();
                const normalAtCanonA = face.surface.normalP(canon.a);
                const inside = normalAtCanonA.cross(canon == edge ? edge.aDir : edge.bDir);
                mapPush(this.edgeFaces, canon, {
                    face: face,
                    edge: edge,
                    normalAtCanonA: normalAtCanonA,
                    reversed: canon != edge,
                    inside: inside,
                    angle: 0,
                });
            }
        }
        for (const [canonEdge, edgeFaceInfos] of this.edgeFaces) {
            // TODO handle curved faces
            //assert(edgeFaceInfos.length % 2 == 0, () => canonEdge + edgeFaceInfos.sce)
            const faceInfo0 = edgeFaceInfos.find(faceInfo => faceInfo.reversed);
            if (!faceInfo0) {
                console.warn('invalid brep');
                continue;
            }
            edgeFaceInfos.forEach(faceInfo => {
                if (faceInfo != faceInfo0) {
                    faceInfo.angle = faceInfo0.inside.angleRelativeNormal(faceInfo.inside, canonEdge.aDir.unit());
                    if (faceInfo.angle < 0)
                        faceInfo.angle += 2 * Math.PI;
                }
            });
            edgeFaceInfos.sort((a, b) => snap(a.angle - b.angle, 0)); // TODO  || assertNever()
        }
        return this;
    }
    /**
     * Cases for volumes A and B
     *
     *          1.  Volumes do not touch.
     *          2.  face/face Face surfaces intersect each other.
     *              implies edges going through faces.
     *              e.g. box(5, 5, 5) - box(5, 5, 5).translate(1, 1, 1)
     *          3.  face/edge Edge of A lies in a face of B
     *              implies vertices of A lying in face of B
     *              e.g. box(5, 5, 5) - box(3, 3, 3).rotateZ([0, 1, 2] * PI / 2).translate(0, 1, 1)
     *          4.  edge/edge Two edges are colinear.
     *              implies vertex of A lying in edge of B
     *           5.  vertex/edge Vertex of A lies on edge of B (but no edge/edge)
     *          6.  vertex/vertex with/without edge/edge, edge/face and face/face intersections
     *          7.  vertex lies in face
     *
     *
     *
     */
    intersection(other, buildThis, buildOther, generator, infoFactory) {
        this.assertSanity();
        other.assertSanity();
        this.buildAdjacencies();
        other.buildAdjacencies();
        const faceMap = new Map();
        const thisEdgePoints = new JavaMap(), otherEdgePoints = new JavaMap();
        const checkedPairs = new JavaSet();
        for (const thisFace of this.faces) {
            for (const otherFace of other.faces) {
                thisFace.intersectFace(otherFace, this, other, faceMap, thisEdgePoints, otherEdgePoints, checkedPairs);
            }
        }
        for (const edge of thisEdgePoints.keys()) {
            assert(this.edgeFaces.get(edge));
        }
        for (const edge of otherEdgePoints.keys()) {
            assert(other.edgeFaces.get(edge));
        }
        const newFaces = [];
        if (0 == faceMap.size && 0 == thisEdgePoints.size && 0 == otherEdgePoints.size) {
            const thisInOther = other.containsPoint(this.faces[0].contour[0].a, true);
            const otherInThis = !thisInOther && this.containsPoint(other.faces[0].contour[0].a);
            return this;
        }
        else {
            if (buildThis) {
                const edgeLooseSegments = BRep$$1.getLooseEdgeSegments(thisEdgePoints, this.edgeFaces);
                // @ts-ignore
                const els = this.faces.map(face => [
                    face,
                    Array.from(edgeLooseSegments.entries()).flatMap(([edge, subs]) => (face.getAllEdges().some(e => e.equals(edge)) ? subs : [])),
                ]);
                this.reconstituteFaces(this.faces, edgeLooseSegments, faceMap, newFaces, infoFactory);
            }
            if (buildOther) {
                const edgeLooseSegments = BRep$$1.getLooseEdgeSegments(otherEdgePoints, other.edgeFaces);
                // @ts-ignore
                const els = other.faces.map(face => [
                    face,
                    Array.from(edgeLooseSegments.entries()).flatMap(([edge, subs]) => (face.getAllEdges().some(e => e.equals(edge)) ? subs : [])),
                ]);
                other.reconstituteFaces(other.faces, edgeLooseSegments, faceMap, newFaces, infoFactory);
            }
        }
        //buildCoplanar && this.reconstituteCoplanarFaces(likeSurfaceFaces, edgeLooseSegments, faceMap, newFaces,
        // this.infiniteVolume, other.infiniteVolume)
        const result = new BRep$$1(newFaces, this.infiniteVolume && other.infiniteVolume, generator);
        //result.buildAdjacencies()
        return result;
    }
    transform(m4, desc) {
        let vertexNames;
        if (this.vertexNames) {
            vertexNames = new Map();
            this.vertexNames.forEach((name, vertex) => vertexNames.set(m4.transformPoint(vertex), name + desc));
        }
        return new BRep$$1(this.faces.map(f => f.transform(m4)), this.infiniteVolume, this.generator && desc && this.generator + desc, // if desc isn't set, the generator will be invalid
        vertexNames);
    }
    flipped() {
        return new BRep$$1(this.faces.map(f => f.flipped()), !this.infiniteVolume, this.generator && this.generator + '.flipped()', this.vertexNames);
    }
}
BRep$$1.EMPTY = new BRep$$1([], false, 'BRep.EMPTY', new Map()).buildAdjacencies();
BRep$$1.R3 = new BRep$$1([], true, 'BRep.R3', new Map()).buildAdjacencies();
function dotCurve$$1(v, cDir, cDDT) {
    let dot = v.dot(cDir);
    if (eq0(dot)) {
        dot = v.dot(cDDT);
    }
    assert(!eq0(dot));
    return dot;
}
function dotCurve2$$1(curve, t, normal, sign) {
    assert(sign == 1 || sign == -1, sign);
    const tangentDot = curve.tangentAt(t).dot(normal);
    // if tangentDot != 0 the curve simply crosses the plane
    if (!eq0(tangentDot)) {
        return sign * tangentDot;
    }
    if (curve.ddt) {
        const ddtDot = curve.ddt(t).dot(normal);
        // tangentDot == 0 ==> critical point at t, if ddtDot != 0, then it is a turning point, otherwise we can't be sure
        // and must do a numeric test
        if (!eq0(ddtDot)) {
            return ddtDot;
        }
    }
    const numericDot = curve
        .at(t)
        .to(curve.at(t + sign * 4 * NLA_PRECISION))
        .dot(normal);
    assert(!(curve instanceof L3$$1));
    return numericDot;
}
const INSIDE$$1 = 0, OUTSIDE$$1 = 1, COPLANAR_SAME$$1 = 2, COPLANAR_OPPOSITE$$1 = 3, ALONG_EDGE_OR_PLANE$$1 = 4;
/**
 *
 * @param brep BREP to check
 * @param edge edge to check
 * @param dirAtEdgeA the direction vector to check
 * @param faceNormal If dirAtEdgeA doesn't split a volume, but is along a face, the returned value depends on
 *     wether that faces normal1 points in the same direction as faceNormal
 * @returns INSIDE, OUTSIDE, COPLANAR_SAME or COPLANAR_OPPOSITE
 */
//function splitsVolumeEnclosingFaces(brep: BRep, edge: Edge, dirAtEdgeA: V3, faceNormal: V3): int {
//    assert(arguments.length == 4)
//    //assert(p.equals(edge.a))
//    const ab1 = edge.aDir.unit()
//    const relFaces = facesWithEdge(edge, brep.faces) as any[]
//    relFaces.forEach(faceInfo => {
//        faceInfo.normalAtEdgeA = faceInfo.face.surface.normalP(edge.a)
//        faceInfo.edgeDirAtEdgeA = !faceInfo.reversed
//            ? faceInfo.edge.aDir
//            : faceInfo.edge.bDir
//        faceInfo.outsideVector = faceInfo.edgeDirAtEdgeA.cross(faceInfo.normalAtEdgeA)
//        faceInfo.angle = (dirAtEdgeA.angleRelativeNormal(faceInfo.outsideVector.negated(), ab1) + 2 * Math.PI +
// NLA_PRECISION / 2) % (2 * Math.PI) }) assert(relFaces.length != 0, edge.toSource()) relFaces.sort((a, b) => a.angle
// - b.angle) // assert(relFaces.length % 2 == 0, edge.toSource()) // even number of touching faces  if
// (eq0(relFaces[0].angle)) { //assert(false) todo const coplanarSame = relFaces[0].normalAtEdgeA.dot(faceNormal) > 0;
// return coplanarSame ? COPLANAR_SAME : COPLANAR_OPPOSITE } else { return !relFaces[0].reversed ? INSIDE : OUTSIDE } }
function splitsVolumeEnclosingFaces$$1(brep, canonEdge, dirAtEdgeA, faceNormal) {
    assert(arguments.length == 4);
    assert(canonEdge == canonEdge.getCanon());
    //assert(p.equals(canonEdge.a))
    const edgeFaceInfos = brep.edgeFaces.get(canonEdge);
    assertf(() => edgeFaceInfos.length % 2 == 0);
    assertf(() => brep.edgeFaces);
    const faceInfo0 = edgeFaceInfos[0];
    const aDir1 = canonEdge.aDir.unit();
    const angleToCanon = (faceInfo0.inside.angleRelativeNormal(dirAtEdgeA, aDir1) + 2 * Math.PI + NLA_PRECISION) % (2 * Math.PI) -
        NLA_PRECISION;
    const nearestFaceInfoIndex = edgeFaceInfos.findIndex(faceInfo => lt(angleToCanon, faceInfo.angle));
    const nearestFaceInfo = edgeFaceInfos[nearestFaceInfoIndex == -1 ? edgeFaceInfos.length - 1 : nearestFaceInfoIndex - 1];
    if (eq(nearestFaceInfo.angle, angleToCanon)) {
        //assert(false) todo
        const coplanarSame = nearestFaceInfo.normalAtCanonA.dot(faceNormal) > 0;
        return coplanarSame ? COPLANAR_SAME$$1 : COPLANAR_OPPOSITE$$1;
    }
    else {
        return nearestFaceInfo.reversed ? INSIDE$$1 : OUTSIDE$$1;
    }
}
function splitsVolumeEnclosingFacesP$$1(brep, canonEdge, p, pInside, pFaceNormal) {
    assert(arguments.length == 5);
    assert(canonEdge == canonEdge.getCanon());
    //assert(p.equals(canonEdge.a))
    assertf(() => brep.edgeFaces);
    const edgeFaceInfos = brep.edgeFaces.get(canonEdge);
    assertf(() => edgeFaceInfos.length % 2 == 0);
    const pDir1 = canonEdge.tangentAt(canonEdge.curve.pointT(p)).unit();
    const faceInfoAngleFromPInsideNeg = (faceInfo) => {
        const faceInfoPDir = faceInfo.edge.getCanon() == faceInfo.edge ? pDir1 : pDir1.negated();
        const faceInfoInsideAtP = faceInfo.face.surface.normalP(p).cross(faceInfoPDir);
        const faceInfoAngleAtP = pInside.angleRelativeNormal(faceInfoInsideAtP, pDir1);
        return -((faceInfoAngleAtP + TAU + NLA_PRECISION) % TAU - NLA_PRECISION);
    };
    const nearestFaceInfo = edgeFaceInfos.withMax(faceInfoAngleFromPInsideNeg);
    if (eq0(faceInfoAngleFromPInsideNeg(nearestFaceInfo))) {
        //assert(false) todo
        const coplanarSame = nearestFaceInfo.face.surface.normalP(p).dot(pFaceNormal) > 0;
        return coplanarSame ? COPLANAR_SAME$$1 : COPLANAR_OPPOSITE$$1;
    }
    else {
        return nearestFaceInfo.reversed ? OUTSIDE$$1 : INSIDE$$1;
    }
}
function splitsVolumeEnclosingFacesP2$$1(brep, canonEdge, p, testCurve, curveT, dir, faceNormal) {
    assert(canonEdge == canonEdge.getCanon());
    //assert(p.equals(canonEdge.a))
    assertf(() => brep.edgeFaces);
    const edgeFaceInfos = brep.edgeFaces.get(canonEdge);
    assertf(() => edgeFaceInfos.length % 2 == 0);
    const pDir1 = canonEdge.tangentAt(canonEdge.curve.pointT(p)).unit();
    let pInside = testCurve.tangentAt(curveT).times(dir);
    if (pInside.isParallelTo(pDir1)) {
        pInside = testCurve.diff(curveT, 1e-4 * dir / testCurve.tangentAt(curveT).length()).rejectedFrom(pDir1);
        pInside = pInside.div(pInside.length());
    }
    let minValue = 20, advanced = false, result = OUTSIDE$$1;
    for (const faceInfo of edgeFaceInfos) {
        const faceInfoPDir = faceInfo.edge.getCanon() == faceInfo.edge ? pDir1 : pDir1.negated();
        const faceInfoInsideAtP = faceInfo.face.surface.normalP(p).cross(faceInfoPDir);
        const faceInfoAngleAtP = pInside.angleRelativeNormal(faceInfoInsideAtP, pDir1);
        const angle = (faceInfoAngleAtP + TAU + NLA_PRECISION) % TAU - NLA_PRECISION;
        if (eq0(angle)) {
            // do advanced analysis
            const normVector = faceInfo.face.surface.normalP(p);
            if (faceInfo.face.surface.containsCurve(testCurve)) {
                const coplanarSame = normVector.dot(faceNormal) > 0;
                return coplanarSame ? COPLANAR_SAME$$1 : COPLANAR_OPPOSITE$$1;
            }
            const testPlane = P3$$1.normalOnAnchor(pDir1, p);
            const isCurve = faceInfo.face.surface.isCurvesWithPlane(testPlane)[0];
            const isCurvePT = isCurve.pointT(p);
            const dirFactor = sign$1(isCurve.tangentAt(isCurvePT).dot(pInside));
            const eps = 1e-4;
            const iscd = isCurve
                .at(isCurvePT)
                .to(isCurve.at(isCurvePT + dir * dirFactor * eps))
                .dot(normVector);
            const ecd = testCurve
                .at(curveT)
                .to(testCurve.at(curveT + dir * eps))
                .dot(normVector);
            const diff = (iscd - ecd) * (faceInfo.reversed ? -1 : 1);
            if (diff > 0 && (!advanced || diff < minValue)) {
                advanced = true;
                minValue = diff;
                result = faceInfo.reversed ? OUTSIDE$$1 : INSIDE$$1;
            }
        }
        else if (!advanced) {
            if (angle < minValue) {
                minValue = angle;
                result = faceInfo.reversed ? OUTSIDE$$1 : INSIDE$$1;
            }
        }
    }
    return result;
}
function splitsVolumeEnclosingCone$$1(brep, p, dir) {
    const testPlane = P3$$1.forAnchorAndPlaneVectors(p, dir, dir.getPerpendicular());
    const rays = [];
    for (let k = 0; k < brep.faces.length; k++) {
        const planeFace = brep.faces[k];
        assertf(() => planeFace instanceof PlaneFace$$1);
        if (planeFace.getAllEdges().some(edge => edge.a.like(p))) {
            if (testPlane.isParallelToPlane(planeFace.surface.plane)) {
                if (planeFace.pointsToInside(p, dir) != PointVsFace$$1.OUTSIDE) {
                    return ALONG_EDGE_OR_PLANE$$1;
                }
            }
            else {
                const isLine = L3$$1.fromPlanes(testPlane, planeFace.surface.plane);
                const ps = planeFace.edgeISPsWithPlane(isLine, testPlane);
                let i = 0;
                while (i < ps.length) {
                    const a = ps[i++], b = ps[i++];
                    const out = a.p.like(p);
                    if (out || b.p.like(p)) {
                        const dir2 = out ? isLine.dir1 : isLine.dir1.negated();
                        const angle = (dir.angleRelativeNormal(dir2, testPlane.normal1) + 2 * Math.PI + NLA_PRECISION / 2) %
                            (2 * Math.PI);
                        rays.push({ angle: angle, out: out });
                    }
                }
            }
        }
    }
    rays.sort((a, b) => a.angle - b.angle);
    //console.log("testPlane", testPlane.toSource(), "rays", rays.toSource())
    if (eq0(rays[0].angle)) {
        return ALONG_EDGE_OR_PLANE$$1;
    }
    else {
        return rays[0].out ? OUTSIDE$$1 : INSIDE$$1;
    }
}
function splitsVolumeEnclosingCone2$$1(brep, p, curve, curveT, fb) {
    assert(curve.containsPoint(p));
    const pFaces = brep.faces.filter(face => face.getAllEdges().some(edge => edge.a.like(p)));
    for (let k = 0; k < pFaces.length; k++) {
        const face = pFaces[k];
        if (face.surface.containsCurve(curve)) {
            //assert(false)
            if (face.pointsToInside3(p, curve, curveT, fb) != PointVsFace$$1.OUTSIDE) {
                return ALONG_EDGE_OR_PLANE$$1;
            }
        }
    }
    const EPS$$1 = 1e-6;
    return brep.containsPoint(curve.at(curveT + fb * EPS$$1), true) ? INSIDE$$1 : OUTSIDE$$1;
}
function fff$$1(info, surface) {
    const canonA = info.edge.reversed ? info.edge.b : info.edge.a;
    const surfaceNormalAtCanonA = surface.normalP(canonA);
    const dot = snap0(info.inside.dot(surfaceNormalAtCanonA));
    if (0 !== dot) {
        return 0 < dot ? OUTSIDE$$1 : INSIDE$$1;
    }
    if (surface.isCoplanarTo(info.face.surface)) {
        return 0 < info.normalAtCanonA.dot(surfaceNormalAtCanonA) ? COPLANAR_SAME$$1 : COPLANAR_OPPOSITE$$1;
    }
    throw new Error();
}
function triangulateVertices$$1(normal, vertices, holeStarts) {
    const absMaxDim = normal.maxAbsDim(), factor = sign$1(normal.e(absMaxDim));
    const contour = new Float64Array(vertices.length * 2);
    let i = vertices.length;
    /*
     var [coord0, coord1] = [['y', 'z'], ['z', 'x'], ['x', 'y']][maxAbsDim]
     while (i--) {
     contour[i * 2    ] = vertices[i][coord0] * factor
     contour[i * 2 + 1] = vertices[i][coord1]
     }
     */
    while (i--) {
        // unroll disambiguation instead of accessing elements by string name ([coord0] etc)
        // as it confuses google closure
        switch (absMaxDim) {
            case 0:
                contour[i * 2] = vertices[i].y * factor;
                contour[i * 2 + 1] = vertices[i].z;
                break;
            case 1:
                contour[i * 2] = vertices[i].z * factor;
                contour[i * 2 + 1] = vertices[i].x;
                break;
            case 2:
                contour[i * 2] = vertices[i].x * factor;
                contour[i * 2 + 1] = vertices[i].y;
                break;
        }
    }
    return earcut_1(contour, holeStarts);
}
/**
 * Solves a quadratic system of equations of the form
 *      a * x + b * y = c
 *      x² + y² = 1
 * This can be understood as the intersection of the unit circle with a line.
 *      => y = (c - a x) / b
 *      => x² + (c - a x)² / b² = 1
 *      => x² b² + c² - 2 c a x + a² x² = b²
 *      => (a² + b²) x² - 2 a c x + (c² - b²) = 0
 *
 * a * b + (b -c) * (b + c)
 */
function intersectionUnitCircleLine$$1(a, b, c) {
    assertNumbers(a, b, c);
    // TODO: disambiguate on a < b
    const term = sqrt(a * a + b * b - c * c);
    return {
        x1: (a * c + b * term) / (a * a + b * b),
        x2: (a * c - b * term) / (a * a + b * b),
        y1: (b * c - a * term) / (a * a + b * b),
        y2: (b * c + a * term) / (a * a + b * b),
    };
}
function intersectionUnitCircleLine2$$1(a, b, c) {
    assertNumbers(a, b, c);
    // TODO: disambiguate on a < b
    // cf. pqFormula
    const termSqr = snap0(a * a + b * b - c * c);
    if (termSqr < 0) {
        return [];
    }
    else if (termSqr == 0) {
        return [[a * c / (a * a + b * b), b * c / (a * a + b * b)]];
    }
    else {
        const term = sqrt(termSqr);
        return [
            [(a * c + b * term) / (a * a + b * b), (b * c - a * term) / (a * a + b * b)],
            [(a * c - b * term) / (a * a + b * b), (b * c + a * term) / (a * a + b * b)],
        ];
    }
}
function intersectionCircleLine$$1(a, b, c, r) {
    assertNumbers(a, b, c, r);
    const term = sqrt(r * r * (a * a + b * b) - c * c);
    return {
        x1: (a * c + b * term) / (a * a + b * b),
        x2: (a * c - b * term) / (a * a + b * b),
        y1: (b * c - a * term) / (a * a + b * b),
        y2: (b * c + a * term) / (a * a + b * b),
    };
}
/**
 * Solves a quadratic system of equations of the form
 *      a * x + b * y = c
 *      x^2 - y^2 = 1
 * This can be understood as the intersection of the unit hyperbola with a line.
 *
 * @returns with x1 >= x2 and y1 <= y2
 * a * b + (b -c) * (b + c)
 */
function intersectionUnitHyperbolaLine$$1(a, b, c) {
    assertNumbers(a, b, c);
    const aa = a * a, bb = b * b, cc = c * c;
    // TODO: disambiguate on a < b
    //var xTerm = sqrt(4*cc*aa-4*(bb-aa)*(-cc-bb))
    const xTerm = 2 * sqrt(bb * cc + bb * bb - aa * bb);
    const yTerm = sqrt(4 * cc * bb - 4 * (bb - aa) * (cc - aa));
    return {
        x1: (-2 * a * c + xTerm) / 2 / (bb - aa),
        x2: (-2 * a * c - xTerm) / 2 / (bb - aa),
        y1: (2 * b * c - yTerm) / 2 / (bb - aa),
        y2: (2 * b * c + yTerm) / 2 / (bb - aa),
    };
}
function curvePointPP$$1(ps1, ps2, startPoint, dontCheck) {
    const EPS$$1 = NLA_PRECISION / 4;
    //if (!dontCheck) {
    //    const p = curvePointPP(ps1, ps2, startPoint, true).p
    //    if (!ps1.containsPoint(p)) {
    //        console.log("foo, startPoint was " + startPoint.sce)
    //        ps1.containsPoint(p)
    //    }
    //}
    let Q = startPoint;
    let st1 = ps1.pointFoot(Q);
    let st2 = ps2.pointFoot(Q);
    let a, b, aNormal, bNormal, abNormalsCross;
    //console.log("curvePointPP, startPoint was " + startPoint.sce)
    //console.log(Q.sce+ ',')
    let i = 16;
    do {
        a = ps1.pST(st1.x, st1.y);
        b = ps2.pST(st2.x, st2.y);
        if (eq0(a.distanceTo(b), EPS$$1))
            break;
        // drPs.push({p:a,text:'a'+j+' '+i})
        // drPs.push({p:b,text:'b'+j+' '+i})
        aNormal = ps1.normalST(st1.x, st1.y);
        bNormal = ps2.normalST(st2.x, st2.y);
        // next Q is the intersection of the planes
        // (x - a) * aNormal,
        // (x - b) * bNormal and
        // (x - Q) * (aNormal X bNormal)
        abNormalsCross = aNormal.cross(bNormal);
        // drVs.push({anchor: Q, dir: aNormal})
        // drVs.push({anchor: Q, dir: bNormal})
        Q = V3.add(bNormal.cross(abNormalsCross).times(a.dot(aNormal)), abNormalsCross.cross(aNormal).times(b.dot(bNormal)), abNormalsCross.times(abNormalsCross.dot(Q))).div(abNormalsCross.squared());
        //console.log(Q.sce+ ',')
        // feet of Q on ps1 and ps2 (closest points)
        st1 = ps1.pointFoot(Q, st1.x, st1.y);
        st2 = ps2.pointFoot(Q, st2.x, st2.y);
    } while (--i);
    //assert(ps1.containsPoint(Q), Q, ps1)
    //assert(ps2.containsPoint(Q))
    if (!eq0(a.distanceTo(b), EPS$$1)) {
        return undefined;
    }
    return { p: Q, st1: st1, st2: st2 };
}
/**
 * Follow the intersection curve of two parametric surfaces starting from a given point.
 * @param {ParametricSurface} ps1
 * @param {ParametricSurface} ps2
 * @param {number} s1Step
 * @param {number} t1Step
 * @param {number} s2Step
 * @param {number} t2Step
 * @param {number} curveStepSize
 * @return {Curve[]}
 */
function followAlgorithmPP$$1(ps1, ps2, startPoint, curveStepSize, bounds1 = stInAABB2$$1.bind(undefined, ps1), bounds2 = stInAABB2$$1.bind(undefined, ps2)) {
    const points = [];
    const tangents = [];
    const st1s = [];
    const st2s = [];
    let Q = startPoint;
    let st1 = ps1.stP(Q);
    let st2 = ps2.stP(Q);
    assert(ps1.pST(st1.x, st1.y).like(Q));
    assert(st1.like(ps1.pointFoot(Q, st1.x, st1.y)));
    assert(st2.like(ps2.pointFoot(Q, st2.x, st2.y)));
    assert(ps2.pST(st2.x, st2.y).like(Q));
    for (let i = 0; i < 1000; i++) {
        {
            ({ p: Q, st1, st2 } = curvePointPP$$1(ps1, ps2, Q));
        }
        assert(ps1.containsPoint(Q), Q, ps1);
        assert(ps2.containsPoint(Q));
        const aNormal = ps1.normalST(st1.x, st1.y);
        const bNormal = ps2.normalST(st2.x, st2.y);
        const tangent = aNormal.cross(bNormal).toLength(curveStepSize);
        tangents.push(tangent);
        points.push(Q);
        st1s.push(st1);
        st2s.push(st2);
        if (i > 4) {
            if (!bounds1(st1.x, st1.y) || !bounds2(st2.x, st2.y)) {
                break;
            }
        }
        Q = Q.plus(tangent);
    }
    return { points, tangents, st1s, st2s };
}
/**
 * Iteratively calculate points on an implicit 2D curve.
 * @param ic The curve in question.
 * @param startP The point at which to start.
 * @param stepLength The step the algorithm takes. Will be the approximate distance between points.
 * @param bounds Bounds function.
 * @param endP End point. If undefined, algorithm will continue until out of bounds or back at start point.
 * @param startTangent TODO Ignore this.
 * @returns Calculated points and tangents. points[0] and tangents[0] will be startP and startTangent.
 */
function followAlgorithm2d$$1(ic, startP, stepLength = 0.5, bounds, validST, endP, startTangent) {
    assertNumbers(stepLength, ic(0, 0));
    assertVectors(startP);
    if (!startTangent) {
        startTangent = new V3(-ic.y(startP.x, startP.y), ic.x(startP.x, startP.y), 0).toLength(stepLength);
    }
    assertVectors(startTangent);
    const points = [];
    const tangents = [];
    assert(eq0(ic(startP.x, startP.y), 0.01), 'isZero(implicitCurve(startPoint.x, startPoint.y))');
    let i = 0, p = startP, tangent = startTangent, fullLoop = false;
    do {
        points.push(p);
        tangents.push(tangent);
        const searchStart = p.plus(tangent);
        assert(searchStart);
        const newP = curvePointMF$$1(ic, searchStart);
        const dfpdx = ic.x(newP.x, newP.y), dfpdy = ic.y(newP.x, newP.y);
        const newTangent = new V3(-dfpdy, dfpdx, 0).toLength(stepLength);
        //const reversedDir = p.minus(prevp).dot(tangent) < 0
        assert(!p.equals(newP));
        // check if we passed a singularity
        if (tangent.dot(newTangent) < 0) {
            const singularity = newtonIterate2d(ic.x, ic.y, p.x, p.y);
            if (eq0(ic(singularity.x, singularity.y)) && singularity.distanceTo(p) < abs$2(stepLength)) {
                // end on this point
                points.push(singularity);
                tangents.push(p.to(singularity));
                break;
            }
            else {
                throw new Error();
            }
        }
        // check for endP
        if (endP && p.equals(endP)) {
            break;
        }
        // check if loop
        if (fullLoop) {
            if (p.distanceTo(startP) > abs$2(stepLength)) {
                const p = points.pop();
                tangents.pop();
                assert(points.last.distanceTo(startP) <= abs$2(stepLength));
                break;
            }
        }
        else {
            if (i > 4 && p.distanceTo(startP) <= abs$2(stepLength)) {
                fullLoop = true;
            }
        }
        // check if out of bounds
        if (i > 1 && !stInAABB2$$1(bounds, p.x, p.y)) {
            const endP = figureOutBorderPoint(bounds, p, ic);
            points.pop();
            tangents.pop();
            if (points.last.distanceTo(endP) < abs$2(stepLength) / 2) {
                points.pop();
                tangents.pop();
            }
            const endTangent = new V3(-ic.y(endP.x, endP.y), ic.x(endP.x, endP.y), 0).toLength(stepLength);
            points.push(endP);
            tangents.push(endTangent);
            break;
        }
        if (i > 4 && !validST(p.x, p.y)) {
            break;
        }
        assert(eq0(ic(newP.x, newP.y), NLA_PRECISION * 2), p, newP, searchStart);
        tangent = newTangent;
        p = newP;
    } while (++i < 1000);
    assert(i < 1000);
    //assert(points.length > 6)
    return { points, tangents };
}
/**
 * Given a point p just outside the bounds, figure out the nearby intersection of the bounds with the ic.
 * @param bounds
 * @param p
 * @param ic
 */
function figureOutBorderPoint(bounds, p, ic) {
    if (p.x < bounds.sMin || bounds.sMax < p.x) {
        const s = bounds.sMax < p.x ? bounds.sMax : bounds.sMin;
        const t = newtonIterateWithDerivative(t => ic(s, t), p.y, 4, t => ic.y(s, t));
        if (stInAABB2$$1(bounds, s, t)) {
            return new V3(s, t, 0);
        }
    }
    if (p.y < bounds.tMin || bounds.tMax < p.y) {
        const t = bounds.tMax < p.y ? bounds.tMax : bounds.tMin;
        const s = newtonIterateWithDerivative(s => ic(s, t), p.x, 4, s => ic.x(s, t));
        assert(stInAABB2$$1(bounds, s, t));
        return new V3(s, t, 0);
    }
    throw new Error(p + ' ' + bounds);
}
function followAlgorithm2dAdjustable$$1(ic, start, stepLength = 0.5, bounds, endp = start) {
    assertNumbers(stepLength, ic(0, 0));
    assertVectors(start);
    //assert (!startDir || startDir instanceof V3)
    const points = [];
    const tangents = [];
    assert(eq0(ic(start.x, start.y), 0.01), 'isZero(implicitCurve(startPoint.x, startPoint.y))');
    let p = start, prevp = p;
    let i = 0;
    do {
        const dfpdx = ic.x(p.x, p.y), dfpdy = ic.y(p.x, p.y);
        const dfpdxx = ic.xx(p.x, p.y), dfpdyy = ic.yy(p.x, p.y), dfpdxy = ic.xy(p.x, p.y);
        const c2factor = abs$2((Math.pow(dfpdy, 2) * dfpdxx - 2 * dfpdx * dfpdy * dfpdxy + Math.pow(dfpdx, 2) * dfpdyy) / Math.pow((Math.pow(dfpdx, 2) + Math.pow(dfpdy, 2)), 2));
        const c2 = new V3(dfpdx, dfpdy, 0).times(c2factor);
        const s = 1 / 16 / c2.length();
        const tangent = new V3(-dfpdy, dfpdx, 0).unit();
        const reversedDir = p.minus(prevp).dot(tangent) < 0;
        const newPStart = p.plus(tangent.times(s).plus(c2.times(Math.pow(s, 2) / 2)));
        points.push(p);
        tangents.push(tangent);
        prevp = p;
        const newP = curvePointMF$$1(ic, newPStart);
        if (newP.equals(p)) {
            assertNever();
        }
        console.log(p.to(newP).length());
        p = newP;
        assert(eq0(ic(p.x, p.y)));
    } while (i++ < 1000 && (i < 4 || prevp.distanceTo(endp) > stepLength) && bounds(p.x, p.y));
    assert(i != 1000);
    //assert(bounds(p.x, p.y))
    const end = i < 4 || prevp.distanceTo(endp) > stepLength ? p : endp;
    const endTangent = new V3(-ic.y(end.x, end.y), ic.x(end.x, end.y), 0).toLength(stepLength);
    points.push(end);
    tangents.push(endTangent);
    //assert(points.length > 6)
    // TODO gleichmäßige Verteilung der Punkte
    return { points, tangents };
}
// both curves must be in the same s-t coordinates for this to make sense
function intersectionICurveICurve$$1(iCurve1, startParams1, endParams1, startDir, stepLength, iCurve2) {
    assertNumbers(stepLength, iCurve1(0, 0), iCurve2(0, 0));
    assertVectors(startParams1, endParams1);
    assert(!startDir || startDir instanceof V3);
    const vertices = [];
    assert(eq0(iCurve1(startParams1.x, startParams1.y)));
    stepLength = stepLength || 0.5;
    const eps = 1e-5;
    let p = startParams1, prevp = p; // startDir ? p.minus(startDir) : p
    let i = 0;
    while (i++ < 1000 && (i < 4 || p.distanceTo(endParams1) > 1.1 * stepLength)) {
        const fp = iCurve1(p.x, p.y);
        const dfpdx = (iCurve1(p.x + eps, p.y) - fp) / eps, dfpdy = (iCurve1(p.x, p.y + eps) - fp) / eps;
        let tangent = new V3(-dfpdy, dfpdx, 0).toLength(stepLength);
        if (p.minus(prevp).dot(tangent) < 0)
            tangent = tangent.negated();
        prevp = p;
        p = curvePointMF$$1(iCurve1, p.plus(tangent));
        vertices.push(p);
    }
    // TODO gleichmäßige Verteilung der Punkte
    return vertices;
}
function intersectionICurveICurve2$$1(iCurve1, loopPoints1, iCurve2) {
    let p = loopPoints1[0], val = iCurve2(p.x, p.y), lastVal;
    const iss = [];
    for (let i = 0; i < loopPoints1.length; i++) {
        lastVal = val;
        p = loopPoints1[i];
        val = iCurve2(p.x, p.y);
        if (val * lastVal <= 0) {
            // TODO < ?
            iss.push(newtonIterate2d(iCurve1, iCurve2, p.x, p.y));
        }
    }
    return iss;
}
// export function intersectionPCurveISurface(
// 	parametricCurve: Curve,
// 	searchStart: number,
// 	searchEnd: number,
// 	searchStep: number,
// 	implicitSurface: ImplicitSurface,
// ) {
// 	assertNumbers(searchStart, searchEnd, searchStep)
// 	const iss = []
// 	let val = implicitSurface(parametricCurve(searchStart)),
// 		lastVal
// 	for (let t = searchStart + searchStep; t <= searchEnd; t += searchStep) {
// 		lastVal = val
// 		val = implicitSurface(parametricCurve(t))
// 		if (val * lastVal <= 0) {
// 			iss.push(newtonIterate1d(t => implicitSurface(parametricCurve(t)), t))
// 		}
// 	}
// 	return iss
// }
function cassini$$1(a, c) {
    return (x, y) => (x * x + y * y) * (x * x + y * y) - 2 * c * c * (x * x - y * y) - (Math.pow(a, 4) - Math.pow(c, 4));
}
var MathFunctionR2R$$1;
(function (MathFunctionR2R$$1) {
    function forNerdamer(expression, args = ['x', 'y']) {
        const ndf = nerdamer_core(expression);
        const ndfs = nerdamer_core.diff(ndf, args[0]);
        const ndft = nerdamer_core.diff(ndf, args[1]);
        const f = ndf.buildFunction(args);
        f.x = ndfs.buildFunction(args);
        f.y = ndft.buildFunction(args);
        f.xx = nerdamer_core.diff(ndfs, args[0]).buildFunction(args);
        f.xy = nerdamer_core.diff(ndfs, args[1]).buildFunction(args);
        f.yy = nerdamer_core.diff(ndft, args[1]).buildFunction(args);
        return f;
    }
    MathFunctionR2R$$1.forNerdamer = forNerdamer;
    function nerdamerToR2_R(expression, args = ['x', 'y']) {
        return expression.buildFunction(args);
    }
    MathFunctionR2R$$1.nerdamerToR2_R = nerdamerToR2_R;
    function forFFxFy(f, fx, fy) {
        f.x = fx;
        f.y = fy;
        return f;
    }
    MathFunctionR2R$$1.forFFxFy = forFFxFy;
})(MathFunctionR2R$$1 || (MathFunctionR2R$$1 = {}));
const cas2$$1 = cassini$$1(0.9, 1.02);
function arrayLerp$$1(lerp$$1, arr, t) {
    if (0 === t % 1)
        return arr[t];
    return lerp$$1(arr[Math.floor(t)], arr[Math.ceil(t)], t % 1);
}

function doNotSerialize$$1(target, key) {
    const map = target.__SERIALIZATION_BLACKLIST || (target.__SERIALIZATION_BLACKLIST = {});
    map[key] = 'no';
}
class ClassSerializer$$1 {
    constructor() {
        this.CLASS_NAMES = new Map();
        this.NAME_CLASSES = new Map();
        this.addClass('Object', Object);
    }
    addClass(name, clazz) {
        if (this.NAME_CLASSES.has(name)) {
            throw new Error(name);
        }
        this.NAME_CLASSES.set(name, clazz);
        this.CLASS_NAMES.set(clazz, name);
        return this;
    }
    addNamespace(namespace, namespaceName) {
        Object.keys(namespace).forEach(symbol => {
            const o = namespace[symbol];
            if ('function' == typeof o && o.name) {
                this.addClass((namespaceName ? namespaceName + '.' : '') + symbol, o);
            }
        });
        return this;
    }
    setUpdater(f) {
        this.updater = f;
        return this;
    }
    serialize(v) {
        return JSON.stringify(this.serializeObj(v));
    }
    serializeObj(v) {
        const gatherList = (v) => {
            //console.log(path.toString())
            if (undefined !== v && v.hasOwnProperty('constructor') && this.CLASS_NAMES.has(v.constructor)) {
                // do nothing, this is a class/function prototype
            }
            else if (Array.isArray(v)) {
                if (visited.has(v)) {
                    if (!listMap.has(v)) {
                        listMap.set(v, resultList.length);
                        resultList.push(v);
                    }
                }
                else {
                    visited.add(v);
                    for (let i = 0; i < v.length; i++) {
                        gatherList(v[i]);
                    }
                }
            }
            else if (undefined !== v && 'object' == typeof v) {
                if (visited.has(v)) {
                    if (!listMap.has(v)) {
                        listMap.set(v, resultList.length);
                        resultList.push(v);
                    }
                }
                else {
                    assert(!v.__noxTarget || !visited.has(v.__noxTarget));
                    assert(!v.__noxProxy || !visited.has(v.__noxProxy));
                    visited.add(v);
                    if (!v.getConstructorParameters) {
                        for (const key of Object.keys(v).sort()) {
                            if (key == '__noxProxy' || key == '__noxTarget')
                                continue;
                            if (!v.__SERIALIZATION_BLACKLIST || !v.__SERIALIZATION_BLACKLIST[key]) {
                                gatherList(v[key]);
                            }
                        }
                    }
                    gatherList(Object.getPrototypeOf(v));
                }
            }
        };
        const transform = (v, allowLinks, first) => {
            if ('string' == typeof v || 'number' == typeof v || 'boolean' == typeof v || null === v) {
                return v;
            }
            if ('undefined' == typeof v) {
                return { '#REF': -1 };
            }
            if (v.hasOwnProperty('constructor') && this.CLASS_NAMES.has(v.constructor)) {
                return { '#REF': this.CLASS_NAMES.get(v.constructor) };
            }
            let index;
            if (allowLinks && !first && undefined !== (index = listMap.get(v))) {
                return { '#REF': index };
            }
            if (Array.isArray(v)) {
                return v.map(x => transform(x, allowLinks));
            }
            //if (mobx && mobx.isObservableArray(v)) {
            //	const result = {'#PROTO': 'ObservableArray'} as any
            //	v.forEach((val, i) => result[i] = transform(val))
            //	return result
            //}
            if ('object' == typeof v) {
                if (v.getConstructorParameters) {
                    return {
                        '#CONSTRUCTOR': this.CLASS_NAMES.get(v.constructor),
                        '#ARGS': transform(v.getConstructorParameters(), false),
                    };
                }
                const result = {};
                if (Object.prototype !== Object.getPrototypeOf(v)) {
                    result['#PROTO'] = transform(Object.getPrototypeOf(v), allowLinks);
                }
                for (const key of Object.keys(v)) {
                    if (key == '__noxProxy' || key == '__noxTarget')
                        continue;
                    if (!v.__SERIALIZATION_BLACKLIST || !v.__SERIALIZATION_BLACKLIST[key]) {
                        result[key] = transform(v[key], allowLinks);
                    }
                }
                return result;
            }
            throw new Error('?' + typeof v + v.toString());
        };
        const visited = new Set();
        const listMap = new Map();
        let resultList = [];
        listMap.set(v, 0);
        resultList.push(v);
        gatherList(v);
        resultList = resultList.map(v => transform(v, true, true));
        return resultList;
    }
    unserialize(string) {
        let depth = 0;
        const fixObject = (v, onReady) => {
            depth++;
            if (depth > 100)
                throw new Error();
            if (v && v.constructor === Array) {
                onReady(v);
                for (let i = 0; i < v.length; i++) {
                    fixObject(v[i], x => (v[i] = x));
                }
            }
            else if ('object' == typeof v && undefined != v) {
                if ('#CONSTRUCTOR' in v) {
                    const protoName = v['#CONSTRUCTOR'];
                    const proto = this.NAME_CLASSES.get(protoName);
                    assert(proto, protoName + ' Missing ');
                    let args = undefined;
                    fixObject(v['#ARGS'], x => (args = x));
                    onReady(new proto(...args));
                }
                else if ('#REF' in v) {
                    const ref = v['#REF'];
                    if ('string' == typeof ref) {
                        onReady(this.NAME_CLASSES.get(ref).prototype);
                    }
                    else if ('number' == typeof ref) {
                        if (-1 == ref) {
                            onReady(undefined);
                        }
                        else if (fixedObjects[ref]) {
                            onReady(fixedObjects[ref]);
                        }
                        else {
                            fixObject(tree[ref], x => onReady((fixedObjects[ref] = x)));
                        }
                    }
                }
                else {
                    let result;
                    if ('#PROTO' in v) {
                        fixObject(v['#PROTO'], x => {
                            result = Object.create(x);
                            onReady(result);
                        });
                    }
                    else {
                        onReady((result = v));
                    }
                    const keys = Object.keys(v);
                    for (let i = 0; i < keys.length; i++) {
                        //if ('name' == keys[i]) console.log(result)
                        if ('#PROTO' != keys[i]) {
                            fixObject(v[keys[i]], x => (result[keys[i]] = x));
                            //Object.defineProperty(result, keys[i], {
                            //	value: fixObjects(v[keys[i]]),
                            //	enumerable: true,
                            //	writable: true,
                            //	configurable: true
                            //})
                        }
                    }
                    Object.defineProperty(result, 'loadID', {
                        value: getGlobalId$$1(),
                        enumerable: false,
                        writable: false,
                    });
                    this.updater && this.updater(result);
                }
            }
            else {
                onReady(v);
            }
            depth--;
        };
        // const linkReferences = (v: any) => {
        // 	if (v && v.constructor === Array) {
        // 		for (let i = 0; i < v.length; i++) {
        // 			v[i] = linkReferences(v[i])
        // 		}
        // 		return v
        // 	} else if ('object' == typeof v && undefined != v) {
        // 		if ('#REF' in v) {
        // 			return tree[v['#REF']]
        // 		} else {
        // 			const keys = Object.keys(v)
        // 			for (let i = 0; i < keys.length; i++) {
        // 				v[keys[i]] = linkReferences(v[keys[i]])
        // 			}
        // 			return v
        // 		}
        // 	} else {
        // 		return v
        // 	}
        // }
        const tree = JSON.parse(string);
        // console.log(tree)
        const fixedObjects = new Array(tree.length);
        fixObject({ '#REF': 0 }, () => { });
        // console.log(tree)
        // linkReferences(tree)
        // console.log(tree)
        return fixedObjects[0];
    }
}

const fragmentShaderLighting = `
	precision highp float;
	uniform vec4 color;
	uniform vec3 camPos;
	varying vec3 normal;
	varying vec4 vPosition;
	void main() {
		vec3 normal1 = normalize(normal);
		vec3 lightPos = vec3(1000, 2000, 4000);
		vec3 lightDir = normalize(vPosition.xyz - lightPos);
        vec3 reflectionDirection = reflect(lightDir, normal1);
        vec3 eyeDirection = normalize(camPos.xyz-vPosition.xyz);
        float uMaterialShininess = 256.0;
		float specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), uMaterialShininess);
		float lightIntensity = 0.6 + 0.2 * max(0.0, -dot(lightDir, normal1)) + 0.2*specularLightWeighting;
		gl_FragColor = vec4(vec3(color) * lightIntensity, 1);
	}
`;
const vertexShaderLighting = `
	uniform mat4 ts_ModelViewProjectionMatrix;
	uniform mat4 ts_ModelViewMatrix;
	attribute vec4 ts_Vertex;
	uniform mat3 ts_NormalMatrix;
	attribute vec3 ts_Normal;
	uniform vec4 color;
	varying vec3 normal;
	varying vec4 vPosition;
	void main() {
		gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;
        vPosition = ts_ModelViewMatrix * ts_Vertex;
		normal = normalize(ts_NormalMatrix * ts_Normal);
	}
`;
const vertexShaderWaves = `
	uniform mat4 ts_ModelViewProjectionMatrix;
	uniform mat4 ts_ModelViewMatrix;
	attribute vec4 ts_Vertex;
	uniform mat3 ts_NormalMatrix;
	attribute vec3 ts_Normal;
	uniform vec4 color;
	varying vec3 normal;
	varying vec4 vPosition;
	void main() {
		normal = normalize(ts_NormalMatrix * ts_Normal);
		float offset = mod  (((ts_Vertex.x + ts_Vertex.y + ts_Vertex.z) * 31.0), 20.0) - 10.0;
		vec4 modPos = ts_Vertex + vec4(normal * offset, 0);
		gl_Position = ts_ModelViewProjectionMatrix * modPos;
        vPosition = ts_ModelViewMatrix * modPos;
	}
`;
const vertexShaderBasic = `
	uniform mat4 ts_ModelViewProjectionMatrix;
	attribute vec4 ts_Vertex;
	void main() {
		gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;
	}
`;
const vertexShaderColor = `
	uniform mat4 ts_ModelViewProjectionMatrix;
	attribute vec4 ts_Vertex;
	attribute vec4 color;
	varying vec4 fragColor;
	void main() {
		gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;
		fragColor = color;
	}
`;
const vertexShaderArc = `
	uniform mat4 ts_ModelViewProjectionMatrix;
	attribute vec4 ts_Vertex;
	uniform float step, offset;
	uniform float radius, width;
	void main() {
		float r = radius;
		float t = offset + ts_Vertex.x * step;
		float pRadius = r - ts_Vertex.y * width;
		vec4 p = vec4(pRadius * cos(t), pRadius * sin(t), 0, 1);
		gl_Position = ts_ModelViewProjectionMatrix * p;
}
`;
const vertexShaderConic3d = `
	uniform mat4 ts_ModelViewProjectionMatrix;
	attribute vec4 ts_Vertex;
	uniform float startT, endT, scale;
	uniform vec3 center, f1, f2;
	uniform int mode;
	float sinh(float x) { return (exp(x) - exp(-x)) / 2.0; }
	float cosh(float x) { return (exp(x) + exp(-x)) / 2.0; }
	void main() {
		float t = startT + ts_Vertex.x * (endT - startT);

		vec3 normal = normalize(cross(f1, f2));

		vec3 p, tangent;
		if (0 == mode) { // ellipse
			p = center + f1 * cos(t) + f2 * sin(t);
			tangent = f1 * -sin(t) + f2 * cos(t);
		}
		if (1 == mode) { // parabola
			p = center + f1 * t + f2 * t * t;
			tangent = f1 + f2 * t;
		}
		if (2 == mode) { // hyperbola
			p = center + f1 * cosh(t) + f2 * sinh(t);
			tangent = f1 * sinh(t) + f2 * cosh(t);
		}
		vec3 outDir = normalize(cross(normal, tangent));
		vec3 p2 = p + scale * (outDir * ts_Vertex.y + normal * ts_Vertex.z);
		gl_Position = ts_ModelViewProjectionMatrix * vec4(p2, 1);
	}
`;
const vertexShaderBezier = `
    // calculates a bezier curve using ts_Vertex.x as the (t) parameter of the curve
	uniform mat4 ts_ModelViewProjectionMatrix;
	attribute vec4 ts_Vertex;
	uniform float width, startT, endT;
	uniform vec3 p0, p1, p2, p3;
	void main() {
		// ts_Vertex.y is in [0, 1]
		float t = startT + ts_Vertex.x * (endT - startT), s = 1.0 - t;
		float c0 = s * s * s, c1 = 3.0 * s * s * t, c2 = 3.0 * s * t * t, c3 = t * t * t;
		vec3 pPos = p0 * c0 + p1 * c1 + p2 * c2 + p3 * c3;
		float c01 = 3.0 * s * s, c12 = 6.0 * s * t, c23 = 3.0 * t * t;
		vec3 pTangent = (p1 - p0) * c01 + (p2 - p1) * c12 + (p3 - p2) * c23;
		vec3 pNormal = normalize(vec3(pTangent.y, -pTangent.x, 0));
		vec4 p = vec4(pPos - ts_Vertex.y * width * pNormal, 1);
		gl_Position = ts_ModelViewProjectionMatrix * p;
	}
`;
const vertexShaderBezier3d = `
    // calculates a bezier curve using ts_Vertex.x as the (t) parameter of the curve
	uniform float scale, startT, endT;
	uniform vec3 ps[4];
	uniform vec3 p0, p1, p2, p3, normal;
	uniform mat4 ts_ModelViewProjectionMatrix;
	attribute vec4 ts_Vertex;
	void main() {
		// ts_Vertex.y is in [0, 1]
		vec3 p5 = ps[0];
		float t = startT + ts_Vertex.x * (endT - startT), s = 1.0 - t;
		float c0 = s * s * s, c1 = 3.0 * s * s * t, c2 = 3.0 * s * t * t, c3 = t * t * t;
		vec3 p = p0 * c0 + p1 * c1 + p2 * c2 + p3 * c3;
		float c01 = 3.0 * s * s, c12 = 6.0 * s * t, c23 = 3.0 * t * t;
		vec3 pTangent = (p1 - p0) * c01 + (p2 - p1) * c12 + (p3 - p2) * c23;
		vec3 outDir = normalize(cross(normal, pTangent));
		vec3 correctNormal = normalize(cross(pTangent, outDir));
		vec3 p2 = p + scale * (outDir * ts_Vertex.y + correctNormal * ts_Vertex.z);
		gl_Position = ts_ModelViewProjectionMatrix * vec4(p2, 1);
	}
`;
const vertexShaderGeneric = `
	uniform float scale;
	uniform mat4 ts_ModelViewProjectionMatrix;
	attribute vec4 ts_Vertex;
	uniform mat3 ts_NormalMatrix;
	attribute vec3 ts_Normal;
	void main() {
		vec3 normal = normalize(ts_NormalMatrix * ts_Normal);
		vec4 vertexPos = ts_Vertex + vec4(normal * scale, 0);
		gl_Position = ts_ModelViewProjectionMatrix * vertexPos;
	}
`;
const vertexShaderRing = `
	#define M_PI 3.1415926535897932384626433832795
	uniform float step;
	uniform float innerRadius, outerRadius;
	attribute float index;
	uniform mat4 ts_ModelViewProjectionMatrix;
	attribute vec4 ts_Vertex;
	void main() {
		gl_Position = ts_ModelViewProjectionMatrix * vec4(index, index, index, 1);
		float id = atan(ts_Vertex.x, ts_Vertex.y) / M_PI  * 32.0;
		float radius = mod(id, 2.0) < 1.0 ? outerRadius : innerRadius;
		gl_Position = ts_ModelViewProjectionMatrix * vec4(radius * cos(index * step), radius * sin(index * step), 0, 1);
	}
`;
const fragmentShaderColor = `
	precision highp float;
	uniform vec4 color;
	void main() {
		gl_FragColor = color;
	}
`;
const fragmentShaderVaryingColor = `
	precision highp float;
	varying vec4 fragColor;
	void main() {
		gl_FragColor = fragColor;
	}
`;
const fragmentShaderColorHighlight = `
	precision highp float;
	uniform vec4 color;
	void main() {
		float diagonal = (gl_FragCoord.x + 2.0 * gl_FragCoord.y);
		if (mod(diagonal, 50.0) > 40.0) { // mod(diagonal, 2.0) > 1.0
			discard;
			//gl_FragColor = color + vec4(0.2,0.2,0.2,0);
		} else {
			gl_FragColor = color - vec4(0.2,0.2,0.2,0);
		}
	}
`;
const vertexShaderTexture = `
	varying vec2 texturePos;
	attribute vec4 ts_Vertex;
	uniform mat4 ts_ModelViewProjectionMatrix;
	void main() {
		texturePos = ts_Vertex.xy;
		gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;
	}
`;
const fragmentShaderTextureColor = `
	precision highp float;
	varying vec2 texturePos;
	uniform vec4 color;
	uniform sampler2D texture;
	void main() {
		gl_FragColor = texture2D(texture, texturePos) * color;
	}
`;

function parseGetParams$$1(str) {
    const result = {};
    str.split('&').forEach(function (item) {
        const splitIndex = item.indexOf('=');
        if (-1 == splitIndex) {
            result[item] = item;
        }
        else {
            result[item.substr(0, splitIndex)] = decodeURI(item.substr(splitIndex + 1));
        }
    });
    return result;
}
const COLORS$$1 = {
    RD_FILL: chroma('#9EDBF9'),
    RD_STROKE: chroma('#77B0E0'),
    TS_FILL: chroma('#D19FE3'),
    TS_STROKE: chroma('#A76BC2'),
    PP_FILL: chroma('#F3B6CF'),
    PP_STROKE: chroma('#EB81B4'),
};
class BREPGLContext$$1 {
    constructor(gl) {
        this.cachedMeshes = new WeakMap();
        this.shaders = initShaders$$1(gl);
        initMeshes$$1((this.meshes = {}), gl);
    }
    static create(gl) {
        addOwnProperties(gl, BREPGLContext$$1.prototype);
        addOwnProperties(gl, new BREPGLContext$$1(gl));
        return gl;
    }
    drawPoint(p, color = GL_COLOR_BLACK, size = 5) {
        this.pushMatrix();
        this.translate(p);
        this.scale(size, size, size);
        this.shaders.singleColor.uniforms({ color: color }).draw(this.meshes.sphere1);
        this.popMatrix();
    }
    drawEdge(edge, color = GL_COLOR_BLACK, width = 2) {
        CURVE_PAINTERS$$1[edge.curve.constructor.name](this, edge.curve, color, edge.minT, edge.maxT, width);
    }
    drawCurve(curve, color = GL_COLOR_BLACK, width = 2, tStart, tEnd) {
        CURVE_PAINTERS$$1[curve.constructor.name](this, curve, color, tStart, tEnd, width);
    }
    drawVector(vector, anchor, color = GL_COLOR_BLACK, size = 1) {
        this.pushMatrix();
        const vT = vector.getPerpendicular().unit();
        this.multMatrix(M4.forSys(vector, vT, vector.cross(vT).unit(), anchor));
        1 != size && this.scale(size, size, size);
        this.shaders.singleColor
            .uniforms({
            color: color,
        })
            .draw(this.meshes.vector);
        this.popMatrix();
    }
    drawVectors(drVs) {
        this.drawVector(V3.X, V3.O, chroma('red').gl(), undefined);
        this.drawVector(V3.Y, V3.O, chroma('green').gl(), undefined);
        this.drawVector(V3.Z, V3.O, chroma('blue').gl(), undefined);
        drVs.forEach(vi => this.drawVector(vi.dir1, vi.anchor, vi.color, undefined));
    }
    drawPlane(customPlane, color, dotted = false) {
        this.pushMatrix();
        this.multMatrix(M4.forSys(customPlane.right, customPlane.up, customPlane.normal1));
        this.translate(customPlane.sMin, customPlane.tMin, customPlane.w);
        this.scale(customPlane.sMax - customPlane.sMin, customPlane.tMax - customPlane.tMin, 1);
        const mesh = dotted ? this.meshes.xyDottedLinePlane : this.meshes.xyLinePlane;
        this.shaders.singleColor.uniforms({ color: color }).draw(mesh, this.LINES);
        this.popMatrix();
    }
}
function conicPainter(mode, gl, ellipse, color, startT, endT, width = 2) {
    gl.shaders.ellipse3d
        .uniforms({
        f1: ellipse.f1,
        f2: ellipse.f2,
        center: ellipse.center,
        color: color,
        startT: startT,
        endT: endT,
        scale: width,
        mode: mode,
    })
        .draw(gl.meshes.pipe);
}
const CURVE_PAINTERS$$1 = {
    [SemiEllipseCurve$$1.name]: conicPainter.bind(undefined, 0),
    [ParabolaCurve$$1.name]: conicPainter.bind(undefined, 1),
    [HyperbolaCurve$$1.name]: conicPainter.bind(undefined, 2),
    [ImplicitCurve$$1.name](gl, curve, color, startT, endT, width = 2) {
        let mesh = gl.cachedMeshes.get(curve);
        const RES = 4;
        if (!mesh) {
            mesh = new Mesh().addIndexBuffer('TRIANGLES').addVertexBuffer('normals', 'ts_Normal');
            curve.addToMesh(mesh, RES);
            mesh.compile();
            gl.cachedMeshes.set(curve, mesh);
        }
        const startIndex = ceil(startT);
        const endIndex = floor(endT);
        if (startIndex <= endIndex) {
            const indexFactor = 2 * // no of triangles per face
                RES * // no of faces
                3; // no of indexes per triangle
            gl.shaders.generic3d
                .uniforms({
                color: color,
                scale: width,
            })
                .draw(mesh, gl.TRIANGLES, startIndex * indexFactor, (floor(endT) - startIndex) * indexFactor);
            if (startT % 1 !== 0) {
                const p = curve.at(startT);
                gl.pushMatrix();
                const m = M4.forSys(p.to(curve.points[startIndex]), mesh.normals[startIndex * RES].toLength(width), mesh.normals[startIndex * RES + 1].toLength(width), p);
                gl.multMatrix(m);
                gl.shaders.singleColor.uniforms({ color: color }).draw(gl.meshes.pipeSegmentForICurve);
                console.log(gl.meshes.pipeSegmentForICurve);
                gl.popMatrix();
            }
            if (endT % 1 !== 0) {
                const p = curve.at(endT);
                gl.pushMatrix();
                const m = M4.forSys(curve.points[endIndex].to(p), mesh.normals[endIndex * RES].toLength(width), mesh.normals[endIndex * RES + 1].toLength(width), curve.points[endIndex]);
                gl.multMatrix(m);
                gl.shaders.singleColor.uniforms({ color: color }).draw(gl.meshes.pipeSegmentForICurve);
                gl.popMatrix();
            }
        }
        else {
            const p1 = curve.at(startT);
            const p2 = curve.at(endT);
            gl.pushMatrix();
            const v0 = p1.to(p2), v1 = v0.getPerpendicular().toLength(width), v2 = v0.cross(v1).toLength(width);
            const m = M4.forSys(v0, v1, v2, p1);
            gl.multMatrix(m);
            gl.shaders.singleColor.uniforms({ color: color }).draw(gl.meshes.pipeSegmentForICurve);
            gl.popMatrix();
        }
    },
    [BezierCurve$$1.name](gl, curve, color, startT, endT, width = 2, normal = V3.Z) {
        gl.shaders.bezier3d
            .uniforms({
            p0: curve.p0,
            p1: curve.p1,
            p2: curve.p2,
            p3: curve.p3,
            color: color,
            startT: startT,
            endT: endT,
            scale: width,
            normal: normal,
        })
            .draw(gl.meshes.pipe);
    },
    [L3$$1.name](gl, curve, color, startT, endT, width = 2, normal = V3.Z) {
        gl.pushMatrix();
        const a = curve.at(startT), b = curve.at(endT);
        const ab = b.minus(a), abT = ab.getPerpendicular().unit();
        const m = M4.forSys(ab, abT, ab.cross(abT).unit(), a);
        gl.multMatrix(m);
        gl.scale(1, width, width);
        gl.shaders.singleColor
            .uniforms({
            color: color,
        })
            .draw(gl.meshes.pipe);
        gl.popMatrix();
    },
};
CURVE_PAINTERS$$1[PICurve$$1.name] = CURVE_PAINTERS$$1[ImplicitCurve$$1.name];
CURVE_PAINTERS$$1[PPCurve$$1.name] = CURVE_PAINTERS$$1[ImplicitCurve$$1.name];
function initMeshes$$1(_meshes, _gl) {
    _gl.makeCurrent();
    _meshes.sphere1 = Mesh.sphere(2);
    _meshes.segment = Mesh.plane({ startY: -0.5, height: 1, detailX: 128 });
    _meshes.text = Mesh.plane();
    _meshes.vector = Mesh.rotation([V3.O, V(0, 0.05, 0), V(0.8, 0.05), V(0.8, 0.1), V(1, 0)], L3$$1.X, TAU, 16, true);
    _meshes.pipe = Mesh.rotation(arrayFromFunction(128, i => new V3(i / 127, -0.5, 0)), L3$$1.X, TAU, 8, true);
    _meshes.xyLinePlane = Mesh.plane();
    _meshes.xyDottedLinePlane = makeDottedLinePlane();
    _meshes.pipeSegmentForICurve = Mesh.offsetVertices(M4.rotateY(90 * DEG).transformedPoints(arrayFromFunction(4, i => V3.polar(1, TAU * i / 4))), V3.X, true);
}
function initShaders$$1(_gl) {
    _gl.makeCurrent();
    return {
        singleColor: Shader.create(vertexShaderBasic, fragmentShaderColor),
        multiColor: Shader.create(vertexShaderColor, fragmentShaderVaryingColor),
        singleColorHighlight: Shader.create(vertexShaderBasic, fragmentShaderColorHighlight),
        textureColor: Shader.create(vertexShaderTexture, fragmentShaderTextureColor),
        arc: Shader.create(vertexShaderRing, fragmentShaderColor),
        arc2: Shader.create(vertexShaderArc, fragmentShaderColor),
        ellipse3d: Shader.create(vertexShaderConic3d, fragmentShaderColor),
        generic3d: Shader.create(vertexShaderGeneric, fragmentShaderColor),
        bezier3d: Shader.create(vertexShaderBezier3d, fragmentShaderColor),
        bezier: Shader.create(vertexShaderBezier, fragmentShaderColor),
        lighting: Shader.create(vertexShaderLighting, fragmentShaderLighting),
        waves: Shader.create(vertexShaderWaves, fragmentShaderLighting),
    };
}
function makeDottedLinePlane(count = 128) {
    const mesh = new Mesh().addIndexBuffer('LINES');
    const OXvertices = arrayFromFunction(count, i => new V3(i / count, 0, 0));
    mesh.vertices.push(...OXvertices);
    mesh.vertices.push(...M4.forSys(V3.Y, V3.O, V3.O, V3.X).transformedPoints(OXvertices));
    mesh.vertices.push(...M4.forSys(V3.X.negated(), V3.O, V3.O, new V3(1, 1, 0)).transformedPoints(OXvertices));
    mesh.vertices.push(...M4.forSys(V3.Y.negated(), V3.O, V3.O, V3.Y).transformedPoints(OXvertices));
    mesh.LINES = arrayFromFunction(count * 4, i => i - (i >= count * 2 ? 1 : 0));
    mesh.compile();
    return mesh;
}
function initNavigationEvents$$1(_gl, eye, paintScreen) {
    const canvas = _gl.canvas;
    let lastPos = V3.O;
    //_gl.onmousedown.push((e) => {
    //	e.preventDefault()
    //	e.stopPropagation()
    //})
    //_gl.onmouseup.push((e) => {
    //	e.preventDefault()
    //	e.stopPropagation()
    //})
    canvas.addEventListener('mousemove', (e) => {
        const pagePos = V(e.pageX, e.pageY);
        const delta = lastPos.to(pagePos);
        //noinspection JSBitwiseOperatorUsage
        if (e.buttons & 4) {
            // pan
            const moveCamera = V(-delta.x * 2 / _gl.canvas.width, delta.y * 2 / _gl.canvas.height);
            const inverseProjectionMatrix = _gl.projectionMatrix.inversed();
            const worldMoveCamera = inverseProjectionMatrix.transformVector(moveCamera);
            eye.pos = eye.pos.plus(worldMoveCamera);
            eye.focus = eye.focus.plus(worldMoveCamera);
            setupCamera$$1(eye, _gl);
            paintScreen();
        }
        // scene rotation
        //noinspection JSBitwiseOperatorUsage
        if (e.buttons & 2) {
            const rotateLR = -delta.x / 6.0 * DEG;
            const rotateUD = -delta.y / 6.0 * DEG;
            // rotate
            let matrix = M4.rotateLine(eye.focus, eye.up, rotateLR);
            //let horizontalRotationAxis = focus.minus(pos).cross(up)
            const horizontalRotationAxis = eye.up.cross(eye.pos.minus(eye.focus));
            matrix = matrix.times(M4.rotateLine(eye.focus, horizontalRotationAxis, rotateUD));
            eye.pos = matrix.transformPoint(eye.pos);
            eye.up = matrix.transformVector(eye.up);
            setupCamera$$1(eye, _gl);
            paintScreen();
        }
        lastPos = pagePos;
    });
    canvas.addEventListener('wheel', (e) => {
        // zoom
        const wheelY = -sign$1(e.deltaY) * 2;
        // console.log(e.deltaY, e.deltaX)
        eye.zoomFactor *= pow(0.9, -wheelY);
        const mouseCoordsOnCanvas = getPosOnTarget$$1(e);
        const mousePosFrustrum = V(mouseCoordsOnCanvas.x * 2 / _gl.canvas.offsetWidth - 1, -mouseCoordsOnCanvas.y * 2 / _gl.canvas.offsetHeight + 1, 0);
        const moveCamera = mousePosFrustrum.times(1 - 1 / pow(0.9, -wheelY));
        const inverseProjectionMatrix = _gl.projectionMatrix.inversed();
        const worldMoveCamera = inverseProjectionMatrix.transformVector(moveCamera);
        //console.log("moveCamera", moveCamera)
        //console.log("worldMoveCamera", worldMoveCamera)
        eye.pos = eye.pos.plus(worldMoveCamera);
        eye.focus = eye.focus.plus(worldMoveCamera);
        // tilt
        const mousePosWC = inverseProjectionMatrix.transformPoint(mousePosFrustrum);
        const tiltMatrix = M4.rotateLine(mousePosWC, eye.pos.to(eye.focus), -sign$1(e.deltaX) * 10 * DEG);
        eye.up = tiltMatrix.transformVector(eye.up);
        eye.pos = tiltMatrix.transformPoint(eye.pos);
        eye.focus = tiltMatrix.transformPoint(eye.focus);
        setupCamera$$1(eye, _gl);
        paintScreen();
        e.preventDefault();
    });
}
/**
 * Transforms position on the screen into a line in world coordinates.
 */
function getMouseLine$$1(pos, _gl) {
    const ndc1 = V(pos.x * 2 / _gl.canvas.width - 1, -pos.y * 2 / _gl.canvas.height + 1, 0);
    const ndc2 = V(pos.x * 2 / _gl.canvas.width - 1, -pos.y * 2 / _gl.canvas.height + 1, 1);
    //console.log(ndc)
    const inverseProjectionMatrix = _gl.projectionMatrix.inversed();
    const s = inverseProjectionMatrix.transformPoint(ndc1);
    const dir = inverseProjectionMatrix.transformPoint(ndc2).minus(s);
    return L3$$1.anchorDirection(s, dir);
}
function getPosOnTarget$$1(e) {
    const target = e.target;
    const targetRect = target.getBoundingClientRect();
    const mouseCoordsOnElement = {
        x: e.clientX - targetRect.left,
        y: e.clientY - targetRect.top,
    };
    return mouseCoordsOnElement;
}
function setupCamera$$1(_eye, _gl) {
    const { pos, focus, up, zoomFactor } = _eye;
    //console.log("pos", pos.$, "focus", focus.$, "up", up.$)
    _gl.matrixMode(_gl.PROJECTION);
    _gl.loadIdentity();
    //_gl.perspective(70, _gl.canvas.width / _gl.canvas.height, 0.1, 1000);
    const lr = _gl.canvas.width / 2 / zoomFactor;
    const bt = _gl.canvas.height / 2 / zoomFactor;
    _gl.ortho(-lr, lr, -bt, bt, -1e4, 1e4);
    _gl.lookAt(pos, focus, up);
    _gl.matrixMode(_gl.MODELVIEW);
    cameraChangeListeners$$1.forEach(l => l(_eye));
}
const cameraChangeListeners$$1 = [];
const SHADERS_TYPE_VAR$$1 = false && initShaders$$1(0);



var brepts = Object.freeze({
	breakDownPPCurves: breakDownPPCurves$$1,
	AABB2: AABB2$$1,
	stInAABB2: stInAABB2$$1,
	curvePoint: curvePoint$$1,
	curvePointMF: curvePointMF$$1,
	Curve: Curve$$1,
	XiEtaCurve: XiEtaCurve$$1,
	ImplicitCurve: ImplicitCurve$$1,
	BezierCurve: BezierCurve$$1,
	HyperbolaCurve: HyperbolaCurve$$1,
	L3: L3$$1,
	PICurve: PICurve$$1,
	PPCurve: PPCurve$$1,
	ParabolaCurve: ParabolaCurve$$1,
	SemiEllipseCurve: SemiEllipseCurve$$1,
	P3: P3$$1,
	get PointVsFace () { return PointVsFace$$1; },
	Surface: Surface$$1,
	ImplicitSurface: ImplicitSurface$$1,
	ParametricSurface: ParametricSurface$$1,
	ConicSurface: ConicSurface$$1,
	ProjectedCurveSurface: ProjectedCurveSurface$$1,
	getExtremePointsHelper: getExtremePointsHelper$$1,
	RotatedCurveSurface: RotatedCurveSurface$$1,
	SemiCylinderSurface: SemiCylinderSurface$$1,
	SemiEllipsoidSurface: SemiEllipsoidSurface$$1,
	PlaneSurface: PlaneSurface$$1,
	ZDirVolumeVisitor: ZDirVolumeVisitor$$1,
	glqV3: glqV3$$1,
	glqArray: glqArray$$1,
	CalculateAreaVisitor: CalculateAreaVisitor$$1,
	projectCurve: projectCurve$$1,
	projectPointCurve: projectPointCurve$$1,
	rotateCurve: rotateCurve$$1,
	get B2T () { return B2T$$1; },
	CustomPlane: CustomPlane$$1,
	Edge: Edge$$1,
	PCurveEdge: PCurveEdge$$1,
	StraightEdge: StraightEdge$$1,
	FaceInfoFactory: FaceInfoFactory,
	Face: Face$$1,
	PlaneFace: PlaneFace$$1,
	RotationFace: RotationFace$$1,
	EPS: EPS$$1,
	getGlobalId: getGlobalId$$1,
	addLikeSurfaceFaces: addLikeSurfaceFaces$$1,
	assembleFaceFromLooseEdges: assembleFaceFromLooseEdges$$1,
	calcNextEdgeIndex: calcNextEdgeIndex$$1,
	dotCurve: dotCurve$$1,
	dotCurve2: dotCurve2$$1,
	INSIDE: INSIDE$$1,
	OUTSIDE: OUTSIDE$$1,
	COPLANAR_SAME: COPLANAR_SAME$$1,
	COPLANAR_OPPOSITE: COPLANAR_OPPOSITE$$1,
	ALONG_EDGE_OR_PLANE: ALONG_EDGE_OR_PLANE$$1,
	splitsVolumeEnclosingFaces: splitsVolumeEnclosingFaces$$1,
	splitsVolumeEnclosingFacesP: splitsVolumeEnclosingFacesP$$1,
	splitsVolumeEnclosingFacesP2: splitsVolumeEnclosingFacesP2$$1,
	splitsVolumeEnclosingCone: splitsVolumeEnclosingCone$$1,
	splitsVolumeEnclosingCone2: splitsVolumeEnclosingCone2$$1,
	fff: fff$$1,
	triangulateVertices: triangulateVertices$$1,
	intersectionUnitCircleLine: intersectionUnitCircleLine$$1,
	intersectionUnitCircleLine2: intersectionUnitCircleLine2$$1,
	intersectionCircleLine: intersectionCircleLine$$1,
	intersectionUnitHyperbolaLine: intersectionUnitHyperbolaLine$$1,
	curvePointPP: curvePointPP$$1,
	followAlgorithmPP: followAlgorithmPP$$1,
	followAlgorithm2d: followAlgorithm2d$$1,
	followAlgorithm2dAdjustable: followAlgorithm2dAdjustable$$1,
	intersectionICurveICurve: intersectionICurveICurve$$1,
	intersectionICurveICurve2: intersectionICurveICurve2$$1,
	cassini: cassini$$1,
	get MathFunctionR2R () { return MathFunctionR2R$$1; },
	cas2: cas2$$1,
	arrayLerp: arrayLerp$$1,
	BRep: BRep$$1,
	doNotSerialize: doNotSerialize$$1,
	ClassSerializer: ClassSerializer$$1,
	parseGetParams: parseGetParams$$1,
	COLORS: COLORS$$1,
	CURVE_PAINTERS: CURVE_PAINTERS$$1,
	initMeshes: initMeshes$$1,
	initShaders: initShaders$$1,
	initNavigationEvents: initNavigationEvents$$1,
	getMouseLine: getMouseLine$$1,
	getPosOnTarget: getPosOnTarget$$1,
	setupCamera: setupCamera$$1,
	cameraChangeListeners: cameraChangeListeners$$1,
	SHADERS_TYPE_VAR: SHADERS_TYPE_VAR$$1,
	BREPGLContext: BREPGLContext$$1
});

const eye = { pos: V(1000, 1000, 1000), focus: V3.O, up: V3.Z, zoomFactor: 1 };
const drVs = [];
const bReps = [];
const edgeViewerColors = ['darkorange', 'darkgreen', 'cyan'].map(c => chroma(c).gl());
let bRepMeshes = [];
//bMesh: Mesh & {faceIndexes?: Map<Face, {start: int, count: int}>},
//cMesh: Mesh & {faceIndexes?: Map<Face, {start: int, count: int}>},
let edgesMesh;
let faceMesh;
let meshes = [];
let hovering;
const addMissing = (to, from) => Object.keys(from).forEach(key => 'Buffer' != key && !to[key] && (to[key] = from[key]));
// tslint:disable-next-line:class-name
class RenderObjects {
    constructor() {
        this.a = undefined;
        this.b = undefined;
        this.c = undefined;
        this.d = undefined;
        this.edges = [];
        this.wireframe = false;
        this.normallines = false;
        this.i = undefined;
        this.hjk = undefined;
        this.drPs = [];
        this.drVs = [];
        this.mesh = undefined;
        this.paintMeshNormals = false;
        this.paintWireframe = false;
    }
}
const renderObjectKeys = Object.keys(new RenderObjects());
addMissing(window, ts3dutils);
addMissing(window, tsgl);
addMissing(window, brepts);
addMissing(window, new RenderObjects());
const arrayLiteralType = (x) => x;
const g = window;
function objectAssignConcatArray(a, b) {
    for (const key of Object.keys(b)) {
        if (Array.isArray(g[key]) && Array.isArray(b[key])) {
            a[key].push(...b[key]);
        }
        else if (undefined !== b[key]) {
            a[key] = b[key];
        }
    }
    return a;
}
function initBRep() {
    eye.pos = V(1, 2, 101);
    eye.focus = V(0, 1, 0);
    eye.up = V(0, 1, 0);
    eye.zoomFactor = 8;
    const htmlContext = INIT_HTML();
    const hash = window.location.search.substr(1) || window.location.hash.substr(1) || '';
    const command = decodeURIComponent(hash);
    console.log(command);
    const hashContext = new Function(`let ${renderObjectKeys.join(',')};${command};return{${renderObjectKeys.join(',')}}`)();
    // hashContext last, so i value in hash wins
    objectAssignConcatArray(g, htmlContext);
    objectAssignConcatArray(g, hashContext);
    console.log(htmlContext);
    Object.assign(eye, g.i);
    // let gets: any = {a, b, c, d, mesh, edges, points, vectors}
    // g.hjk && Object.assign(g, HJK())
    arrayLiteralType(['a', 'b', 'c', 'd']).forEach(k => {
        if (g[k]) {
            bReps.push(g[k]);
        }
    });
    bRepMeshes = bReps.map(bRep => bRep.toMesh());
    bRepMeshes.forEach(mesh => {
        mesh.computeWireframeFromFlatTriangles('wireframe');
        mesh.computeNormalLines(0.1, 'normallines');
        mesh.compile();
    });
    if (g.mesh) {
        console.log('mesh/es from GET', bRepMeshes);
        meshes = g.mesh instanceof Array ? g.mesh : [g.mesh];
        meshes.forEach(mesh => {
            mesh.computeWireframeFromFlatTriangles('wireframe');
            mesh.computeNormalLines(0.1, 'normallines');
            mesh.compile();
        });
    }
    if (g.edges) {
        console.log('edges from GET');
        edgesMesh = new Mesh()
            .addIndexBuffer('TRIANGLES')
            .addVertexBuffer('normals', 'ts_Normal')
            .addVertexBuffer('curve1', 'curve1')
            .addVertexBuffer('curve1colors', 'curve1colors');
        g.edges.forEach((edge, edgeIndex) => {
            const points = edge.points();
            for (let i = 0; i < points.length - 1; i++) {
                const color = edgeViewerColors[(edgeIndex + i % 2) % edgeViewerColors.length];
                // const tangent = edge.tangentAt(i)
                // dMesh.curve1.push(points[i], points[i].plus(tangent.toLength(1)))
                edgesMesh.curve1.push(points[i], points[i + 1]);
                edgesMesh.curve1colors.push(color, color);
            }
            edge.curve instanceof PICurve$$1 && edge.curve.addToMesh(edgesMesh, 8, 0.02, 2);
        });
        //dMesh.computeWireframeFromFlatTriangles()
        edgesMesh.compile();
    }
    if (g.face) {
        if (!g.face.length) {
            g.face = [g.face];
        }
        faceMesh = new Mesh()
            .addIndexBuffer('TRIANGLES')
            .addIndexBuffer('LINES')
            .addVertexBuffer('tangents', 'tangents')
            .addVertexBuffer('normals', 'ts_Normal');
        for (const face of g.face) {
            face.addToMesh(faceMesh);
            for (const edge of face.allEdges) {
                const ts = edge.curve.calcSegmentTs(edge.aT, edge.bT, edge.reversed, true);
                for (const t of ts) {
                    const p = edge.curve.at(t);
                    faceMesh.tangents.push(p, p.plus(edge.tangentAt(t)));
                }
            }
        }
        faceMesh.compile();
    }
    g.drPs.push();
}
const meshColors = [
    chroma.scale(['#ff297f', '#6636FF']),
    chroma.scale(['#ffe93a', '#ff6e35']),
    chroma.scale(['#1eff33', '#4960ff']),
    chroma.scale(['#31fff8', '#2dff2a']),
].map(scale => scale.mode('lab').colors(20, null));
const meshColorssGL = meshColors.map(cs => cs.map(c => c.gl()));
function viewerPaint(time$$1, gl) {
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    gl.loadIdentity();
    setupCamera$$1(eye, gl);
    gl.drawVectors(drVs);
    gl.shaders.lighting.uniforms({ camPos: eye.pos });
    for (let i = 0; i < bRepMeshes.length; i++) {
        const mesh = bRepMeshes[i];
        gl.pushMatrix();
        //gl.translate(30, 0, 0)
        gl.projectionMatrix.m[11] -= 1 / (1 << 20); // prevent Z-fighting
        g.paintWireframe &&
            mesh.indexBuffers.wireframe &&
            gl.shaders.singleColor
                .uniforms({ color: COLORS$$1.TS_STROKE.gl() })
                .drawBuffers(mesh.vertexBuffers, mesh.indexBuffers.wireframe, gl.LINES);
        g.paintMeshNormals &&
            mesh.indexBuffers.normallines &&
            gl.shaders.singleColor
                .uniforms({ color: COLORS$$1.TS_STROKE.gl() })
                .drawBuffers(mesh.vertexBuffers, mesh.indexBuffers.normallines, gl.LINES);
        gl.shaders.singleColor
            .uniforms({ color: COLORS$$1.TS_STROKE.gl() })
            .drawBuffers(mesh.vertexBuffers, mesh.indexBuffers.LINES, gl.LINES);
        gl.projectionMatrix.m[11] += 1 / (1 << 20);
        let faceIndex = bReps[i].faces.length;
        while (faceIndex--) {
            const face = bReps[i].faces[faceIndex];
            const faceTriangleIndexes = mesh.faceIndexes.get(face);
            gl.shaders.lighting
                .uniforms({
                color: hovering == face
                    ? meshColors
                        .emod(i)
                        .emod(faceIndex)
                        .darken(2)
                        .gl()
                    : meshColorssGL.emod(i).emod(faceIndex),
            })
                .draw(mesh, gl.TRIANGLES, faceTriangleIndexes.start, faceTriangleIndexes.count);
        }
        gl.popMatrix();
    }
    if (faceMesh) {
        gl.shaders.singleColor
            .uniforms({ color: chroma('red').gl() })
            .drawBuffers({ ts_Vertex: faceMesh.vertexBuffers.tangents }, undefined, gl.LINES);
    }
    for (const mesh of meshes) {
        gl.pushMatrix();
        gl.projectionMatrix.m[11] -= 1 / (1 << 20); // prevent Z-fighting
        g.paintWireframe &&
            mesh.indexBuffers.wireframe &&
            gl.shaders.singleColor
                .uniforms({ color: COLORS$$1.TS_STROKE.gl() })
                .drawBuffers(mesh.vertexBuffers, mesh.indexBuffers.wireframe, gl.LINES);
        g.paintMeshNormals &&
            mesh.indexBuffers.normallines &&
            gl.shaders.singleColor
                .uniforms({ color: COLORS$$1.TS_STROKE.gl() })
                .drawBuffers(mesh.vertexBuffers, mesh.indexBuffers.normallines, gl.LINES);
        gl.projectionMatrix.m[11] += 1 / (1 << 20);
        mesh.TRIANGLES &&
            gl.shaders.lighting
                .uniforms({
                color: chroma('#ffFF00').gl(),
                camPos: eye.pos,
            })
                .draw(mesh);
        gl.popMatrix();
    }
    if (hovering instanceof Edge$$1) {
        gl.projectionMatrix.m[11] -= 1 / (1 << 20); // prevent Z-fighting
        gl.drawEdge(hovering, GL_COLOR_BLACK, 2 / eye.zoomFactor);
        gl.projectionMatrix.m[11] += 1 / (1 << 20);
    }
    g.edges && g.edges.forEach((e, i) => gl.drawEdge(e, edgeViewerColors.emod(i), 2.5 / eye.zoomFactor));
    g.drPs.forEach(info => gl.drawPoint(info instanceof V3 ? info : info.p, chroma('#cc0000').gl(), 5 / eye.zoomFactor));
    drawPlanes.forEach(plane => gl.drawPlane(plane, plane.color, hovering == plane));
    // gl.begin(gl.LINES)
    // gl.color('red')
    // ;[].forEach(x => gl.vertex(x))
    // gl.end()
}
//var sketchPlane = new CustomPlane(V3.X, V3(1, 0, -1).unit(), V3.Y, -500, 500, -500, 500, 0xff00ff);
const drawPlanes = [
    new CustomPlane$$1(V3.O, V3.Y, V3.Z, 'planeYZ', chroma(0xff0000).gl()),
    new CustomPlane$$1(V3.O, V3.X, V3.Z, 'planeZX', chroma(0x00ff00).gl()),
    new CustomPlane$$1(V3.O, V3.X, V3.Y, 'planeXY', chroma(0x0000ff).gl()),
];
let paintScreen;
function viewerMain() {
    return __awaiter(this, void 0, void 0, function* () {
        const meshNormalsCheckbox = document.getElementById('paint-mesh-normals');
        meshNormalsCheckbox.onclick = e => {
            g.paintMeshNormals = !g.paintMeshNormals;
            paintScreen();
        };
        const wireframeCheckbox = document.getElementById('paint-wireframe');
        wireframeCheckbox.onclick = e => {
            g.paintWireframe = !g.paintWireframe;
            paintScreen();
        };
        paintScreen = () => requestAnimationFrame(t => viewerPaint(t, gl));
        B2T$$1.defaultFont = yield B2T$$1.loadFont(BREPTS_ROOT + '/fonts/FiraSansMedium.woff');
        window.onerror = function (errorMsg, url, lineNumber, column, errorObj) {
            console.log(errorMsg, url, lineNumber, column, errorObj);
        };
        const gl = BREPGLContext$$1.create(TSGLContext.create({ canvas: document.getElementById('testcanvas') }));
        gl.fullscreen();
        gl.canvas.oncontextmenu = () => false;
        setupCamera$$1(eye, gl);
        //gl.cullFace(gl.FRONT_AND_BACK);
        gl.clearColor(1.0, 1.0, 1.0, 0.0);
        gl.enable(gl.BLEND);
        gl.enable(gl.DEPTH_TEST);
        gl.enable(gl.CULL_FACE);
        gl.depthFunc(gl.LEQUAL);
        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA); // TODO ?!
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        gl.loadIdentity();
        gl.scale(10, 10, 10);
        gl.loadIdentity();
        initNavigationEvents$$1(gl, eye, paintScreen);
        cameraChangeListeners$$1.push(function (eye) {
            const round = (x) => round10(x, -3);
            const roundedEye = {
                pos: eye.pos.map(round),
                focus: eye.focus.map(round),
                up: eye.up.map(round),
                zoomFactor: round(eye.zoomFactor),
            };
            const iSource = 'i=' + roundedEye.toSource().replace(/[\n\r\s]+|^\(|\)$/g, '');
            const hash = window.location.hash.substr(1) || iSource;
            const result = hash.match(/i=\{[^}]*\}/) ? hash.replace(/i=\{[^}]*\}/, iSource) : hash + ';' + iSource;
            window.history.replaceState(undefined, undefined, '#' + result);
        });
        // initInfoEvents(paintScreen, g l)
        //initToolTips() // hide tooltip on mouseover
        //initPointInfoEvents()
        initBRep();
        setupCamera$$1(eye, gl);
        paintScreen();
    });
}
function alignX(dir) {
    eye.focus = V3.O;
    eye.pos = V(100 * dir, 0, 0);
    eye.up = V3.Z;
    paintScreen();
}
function alignY(dir) {
    eye.focus = V3.O;
    eye.pos = V(0, 100 * dir, 0);
    eye.up = V3.Z;
    paintScreen();
}
function alignZ(dir) {
    eye.focus = V3.O;
    eye.pos = V(0, 0, 100 * dir);
    eye.up = V3.Y;
    paintScreen();
}
function rot(angleInDeg) {
    eye.up = M4.rotateLine(eye.pos, eye.pos.to(eye.focus), angleInDeg * DEG).transformVector(eye.up);
    paintScreen();
}

exports.viewerMain = viewerMain;
exports.alignX = alignX;
exports.alignY = alignY;
exports.alignZ = alignZ;
exports.rot = rot;
exports.RenderObjects = RenderObjects;

return exports;

}({},svgpathdata));
//# sourceMappingURL=viewer.js.map
