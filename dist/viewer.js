var viewer = (function (exports, javasetmap_ts) {
    'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    /**
     * @license
     *
     * js - JavaScript library for color conversions
     *
     * Copyright (c) 2011-2017, Gregor Aisch
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are met:
     *
     * 1. Redistributions of source code must retain the above copyright notice, this
     *    list of conditions and the following disclaimer.
     *
     * 2. Redistributions in binary form must reproduce the above copyright notice,
     *    this list of conditions and the following disclaimer in the documentation
     *    and/or other materials provided with the distribution.
     *
     * 3. The name Gregor Aisch may not be used to endorse or promote products
     *    derived from this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
     * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
     * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
     * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
     * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    // tslint:disable:no-unnecessary-qualifier
    const { abs, atan2, cos, floor, log, min, max, round, sign, sin, sqrt, cbrt, PI, hypot } = Math;
    function lerp(a, b, f) {
        return a + (b - a) * f;
    }
    function lerpInv(a, b, f) {
        return (f - a) / (b - a);
    }
    function clamp(x, min = 0, max = 1) {
        return x < min ? min : x > max ? max : x;
    }
    function newtonIterate1d(f, xStart, max_steps, eps = 1e-8) {
        let x = xStart, fx;
        while (max_steps-- && abs((fx = f(x))) > eps) {
            const dfdx = (f(x + eps) - fx) / eps;
            console.log("fx / dfdx", fx / dfdx, "fx", fx, "x", x);
            x = x - fx / dfdx;
        }
        return x;
    }
    function bisect(f, a, b, steps) {
        //assert(a < b)
        let fA = f(a);
        // let fB = f(b)
        //assert(fA * fB < 0)
        while (steps--) {
            const c = (a + b) / 2;
            const fC = f(c);
            // console.log("fC", fC, "c", c)
            if (sign(fA) == sign(fC)) {
                a = c;
                fA = fC;
            }
            else {
                b = c;
                // fB = fC
            }
        }
        //assert(a <= (b + a) / 2)
        //assert(b >= (b + a) / 2)
        return (a + b) / 2;
    }
    const DEG2RAD = PI / 180;
    const RAD2DEG = 180 / PI;
    function color(...args) {
        if (args[0] instanceof Color) {
            return args[0];
        }
        if (args.length > 1 && "string" == typeof args[args.length - 1]) {
            return guess(args.slice(0, args.length - 1), args[args.length - 1]);
        }
        else if (Array.isArray(args[0])) {
            return guess(args[0]);
        }
        else {
            return guess(args);
        }
    }
    class Color {
        /** @internal */
        constructor(r, g, b, a = 1) {
            this.r = r;
            this.g = g;
            this.b = b;
            this.a = a;
        }
        // public shade() {
        // 	const shades: [string, string, number][] = [
        // 		["ff0000", "red"],
        // 		["ffa500", "orange"],
        // 		["ffff00", "yellow"],
        // 		["008000", "green"],
        // 		["0000ff", "blue"],
        // 		["ee82ee", "violet"],
        // 		["a52a2a", "brown"],
        // 		["000000", "black"],
        // 		["808080", "grey"],
        // 		["ffffff", "white"],
        // 	] as any
        // 	function angleDiff(a: number, b: number) {
        // 		const d = (a - b) % 360
        // 		if (d > 180) return d - 360
        // 		if (d < -180) return d + 360
        // 		return d
        // 	}
        // 	shades.forEach(arr => arr.push(color(arr[0]).hsl()[0]))
        // 	const [h, s, l] = this.hsl()
        // 	if (l > 0.9) return "white"
        // 	if (l > 0.8 && s < 0.2) return "white"
        // 	if (s < 0.1) return "grey"
        // 	if (s < 0.4 && h > 0 && h < 48) return "brown"
        // 	const distanceInXYZ: { [hue: number]: number } = { 0: 0 }
        // 	for (let i = 60; i <= 360; i += 60) {
        // 		distanceInXYZ[i] =
        // 			distanceInXYZ[i - 60] + distance(hsl(i - 60, 1, 0.5), hsl(i, 1, 0.5), "xyz")
        // 	}
        // 	// console.log(distanceInXYZ)
        // 	const shadeEnds: { [hue: number]: number } = {
        // 		0: 9,
        // 		38: 48,
        // 		60: 65,
        // 		120: 165,
        // 		240: 245,
        // 		300: 338,
        // 		360: 369,
        // 	}
        // 	const getColorDistanceAlongXYZHue = (hueDegrees: number) => {
        // 		const base = hueDegrees - (hueDegrees % 60)
        // 		return (
        // 			distanceInXYZ[base] + distance(hsl(base, 1, 0.5), hsl(hueDegrees, 1, 0.5), "xyz")
        // 		)
        // 	}
        // 	const colorXYZD = getColorDistanceAlongXYZHue(this.hsl()[0])
        // 	const md = distanceInXYZ[360]
        // 	const shadeHue =
        // 		(Object.keys(shadeEnds) as any[]).find(shadeHue => shadeEnds[shadeHue | 0] >= this.hsl()[0])! % 360
        // 	return shades.find(([_hex, _name, _hue]) => (_hue | 0) === shadeHue)![1]
        // 	// process.exit()
        // 	return withMax(shades, ([_hex, _name, _hue]) => {
        // 		return -abs(angleDiff(this.hsl()[0], _hue))
        // 	})[1]
        // 	return withMax(shades, ([_hex, _name, _hue]) => {
        // 		const [thisL, thisA, thisB] = this.lab()
        // 		const [L, A, B] = color(_hex).lab()
        // 		return -hypot(thisL - L, thisA - A, thisB - B)
        // 	})[1]
        // }
        /**
         * @see [[mix]]
         */
        mix(col2, f, m = "rgb") {
            return mix(this, col2, f, m);
        }
        rgb(doRound = true, clamp_ = true) {
            const f = (t) => {
                if (doRound)
                    t = round(t);
                if (clamp_)
                    t = clamp(t, 0, 255);
                return t;
            };
            const { r, g, b } = this;
            return [f(r), f(g), f(b)];
        }
        rgba(doRound = true, clamp_ = true) {
            const f = (t) => {
                if (doRound)
                    t = round(t);
                if (clamp_)
                    t = clamp(t, 0, 255);
                return t;
            };
            const { r, g, b, a } = this;
            return [f(r), f(g), f(b), a];
        }
        /**
         * Return a hex-string representation of this color.
         *
         * @param mode
         * @see #num for a hex-number representation.
         * @example chroma.color('yellow').alpha(0.7).hex()
         * @example chroma.color('yellow').alpha(0.7).hex('rgba')
         * @example chroma.color('yellow').alpha(0.7).hex('argb')
         */
        hex(mode = "rgb") {
            const { r, g, b, a } = this;
            return rgb2hex(r, g, b, a, mode);
        }
        /**
         * Returns the [HSL] representation of this color. hue will always be in [0;360). Values are never NaN.
         *
         * @example chroma.color('purple').hsl()
         */
        hsl() {
            const { r, g, b } = this;
            return rgb2hsl(r, g, b);
        }
        /**
         * Returns the [HSL] representation of this color. hue will always be in [0;360). Values are never NaN.
         *
         * @example chroma.color('purple').hsv()
         */
        hsv() {
            const { r, g, b } = this;
            return rgb2hsv(r, g, b);
        }
        /**
         * Returns the [HSL] representation of this color. hue will always be in [0;360). Values are never NaN.
         *
         * @example chroma.color('purple').hcg()
         */
        hcg() {
            const { r, g, b } = this;
            return rgb2hcg(r, g, b);
        }
        /**
         * Returns a CSS `rgb(...)` or `hsl(...)` string representation that can be used as CSS-color definition. The alpha
         * value is not output if it 1.
         * @example chroma.color('teal').css() // == "rgb(0,128,128)"
         * @example chroma.color('teal').alpha(0.5).css() // == "rgba(0,128,128,0.5)"
         * @example chroma.color('teal').css('hsl') // == "hsl(180,100%,25.1%)"
         */
        css(mode = "rgb") {
            if ("rgb" == mode) {
                const { r, g, b, a } = this;
                return rgb2css(r, g, b, a);
            }
            else if ("hsl" == mode) {
                return hsl2css(this.hsl(), this.alpha());
            }
            else {
                throw new Error();
            }
        }
        name(closest = false) {
            const thisNum = this.num();
            const name = Object.keys(w3cx11).find((name) => w3cx11[name] == thisNum);
            if (!name && closest) {
                const [thisLStar, thisAStar, thisBStar] = this.lab();
                return withMax(Object.keys(w3cx11), (name) => {
                    const [lStar, aStar, bStar] = num(w3cx11[name]).lab();
                    return -hypot(thisLStar - lStar, thisAStar - aStar, thisBStar - bStar);
                });
            }
            return name;
        }
        /**
         * Get the [CMYK](#CMYK) representation of this color.
         *
         * @example chroma.color('red').cmyk()
         */
        cmyk() {
            const { r, g, b } = this;
            return rgb2cmyk(r, g, b);
        }
        /**
         * Returns the [GL] representation of this color.
         * @example chroma.color('33cc00').gl()
         */
        gl() {
            const { r, g, b, a } = this;
            return [r / 255, g / 255, b / 255, a];
        }
        luminance(lum1) {
            const { r, g, b, a } = this;
            const [, Y] = rgb2xyz(r, g, b);
            if (undefined === lum1) {
                return Y;
            }
            const inverseLerp = (a, b, val) => (val - a) / (b - a);
            if (lum1 > Y) {
                // lerp to white
                return mix(this, white, inverseLerp(Y, 1, lum1), "xyz").alpha(a);
            }
            else {
                // lerp to black
                return mix(black, this, inverseLerp(0, Y, lum1), "xyz").alpha(a);
            }
        }
        /**
         * Get color temperature of this color in Kelvin. This only makes sense for colors close to those output by
         * kelvin
         *
         * @example [c = chroma.color('#ff3300'), c.temperature()]
         * @example [c = chroma.color('#ffe3cd'), c.temperature()]
         * @example [c = chroma.color('#b3ccff'), c.temperature()]
         */
        temperature() {
            const { r, g, b } = this;
            return rgb2kelvin(r, g, b);
        }
        /**
         * Returns a new [Color] with a channel changed.
         * @example chroma.color('skyblue').set('hsl.h', 0) // change hue to 0 deg (=red)
         * @example chroma.color('hotpink').set('lch.c', 30) // set chromaticity to 30
         * @example chroma.color('orangered').set('lab.l', x => x / 2) // half Lab lightness
         * @example chroma.color('darkseagreen').set('lch.c', x => x * 2) // double Lch saturation
         */
        set(modeAndChannel, value) {
            const [mode, channel] = modeAndChannel.split(".");
            const src = this[mode]();
            const i = mode.indexOf(channel);
            if (-1 == i)
                throw new Error("invalid channel");
            src[i] = "number" == typeof value ? value : value(src[i]);
            return color(src, mode).alpha(this.a);
        }
        /**
         * Returns whether this color is outside the RGB color cube and will be clipped/clamped when calling .rgb()
         *
         * @example [c = chroma.lch( 20, 40, 50), c.clipped()]
         * @example [c = chroma.lch( 40, 40, 50), c.clipped()]
         * @example [c = chroma.lch( 60, 40, 50), c.clipped()]
         * @example [c = chroma.lch( 80, 40, 50), c.clipped()]
         * @example [c = chroma.lch(100, 40, 50), c.clipped()]
         */
        clipped() {
            const { r, g, b } = this;
            return !(0 <= r && r <= 255 && 0 <= g && g <= 255 && 0 <= b && b <= 255);
        }
        /**
         * Returns black or white, whichever has the highest contrast to `this`.
         * In the readme you should see the result of this.
         *
         * @example chroma.color('red')
         * @example chroma.color('yellow')
         */
        textColor() {
            return this.luminance() > 0.5 ? black : white;
        }
        alpha(alpha1) {
            if (undefined === alpha1) {
                return this.a;
            }
            const { r, g, b } = this;
            return rgb(r, g, b, alpha1);
        }
        darker(amount = 1) {
            const [l, a, b] = this.lab();
            return lab(l - LAB_Kn * amount, a, b, this.alpha());
        }
        /**
         *
         * @param amount
         * @example chroma.color('hotpink')
         * @example chroma.color('hotpink').brighter()
         * @example chroma.color('hotpink').brighter(2)
         * @example chroma.color('hotpink').brighter(3)
         */
        brighter(amount = 1) {
            return this.darker(-amount);
        }
        /**
         * Returns a new [Color] with increased saturation.
         * @param amount How much.
         * @example chroma.color('slategray')
         * @example chroma.color('slategray').saturate()
         * @example chroma.color('slategray').saturate(2)
         * @example chroma.color('slategray').saturate(3)
         */
        saturate(amount = 1) {
            const [l, c, h] = this.lch();
            return lch(l, max(0, c + amount * LAB_Kn), h, this.alpha());
        }
        /**
         * Equivalent to `saturate(-amount)`.
         * @see #saturate
         */
        desaturate(amount = 1) {
            return this.saturate(-amount);
        }
        premultiplied() {
            const { r, g, b, a } = this;
            return rgb(r * a, g * a, b * a, a);
        }
        /**
         * Returns the [HSI] representation of this color. hue will always be in [0; 360). Values are never NaN.
         *
         * @example chroma.color('purple').hsi()
         */
        hsi() {
            const { r, g, b } = this;
            return rgb2hsi(r, g, b);
        }
        /**
         * Returns the [LAB] representation of this color.
         *
         * @example chroma.color('purple').lab()
         */
        lab() {
            const { r, g, b } = this;
            return rgb2lab(r, g, b);
        }
        /**
         * Return a hex-num of this color.
         *
         * @param mode
         * @see #num for a hex-number representation.
         * @example chroma.color('yellow').alpha(0.7).hex()
         * @example chroma.color('yellow').alpha(0.7).hex('rgba')
         * @example chroma.color('yellow').alpha(0.7).hex('argb')
         */
        num(mode = "rgb") {
            const { r, g, b, a } = this;
            return rgb2num(r, g, b, a, mode);
        }
        /**
         * Returns the [LCH] representation of this color. hue will always be in [0; 360). Values are never NaN.
         *
         * @example chroma.color('purple').lch()
         */
        lch() {
            const { r, g, b } = this;
            return rgb2lch(r, g, b);
        }
        /**
         * Returns the [XYZ] representation of this color. hue will always be in [0; 360). Values are never NaN.
         *
         * @example chroma.color('purple').xyz()
         */
        xyz() {
            const { r, g, b } = this;
            return rgb2xyz(r, g, b);
        }
        /**
         * Whether this [Color](#Color) is identical (strict equality of r, g, b, a) to `color`.
         */
        equals(color) {
            const { r, g, b, a } = this;
            const { r: r2, g: g2, b: b2, a: a2 } = color;
            return r == r2 && g == g2 && b == b2 && a == a2;
        }
        hashCode() {
            return this.num("rgba");
        }
        /**
         * @example chroma.color('red').toSource() // == "rgb(255, 0, 0)"
         * @example chroma.rgb(-2, 100.02, 200, 0.5).toSource() // == "rgb(-2, 100.02, 200, 0.5)"
         */
        toSource() {
            const { r, g, b, a } = this;
            return "chroma.rgb(" + r + ", " + g + ", " + b + (a === 1 ? ")" : ", " + a + ")");
        }
    }
    Color.prototype.toString = Color.prototype.css;
    Color.prototype.kelvin = Color.prototype.temperature;
    /**
     * @example chroma.black
     */
    const black = new Color(0, 0, 0, 1);
    /**
     * @example chroma.black
     */
    const white = new Color(255, 255, 255, 1);
    const brewer = {
        OrRd: [0xfff7ec, 0xfee8c8, 0xfdd49e, 0xfdbb84, 0xfc8d59, 0xef6548, 0xd7301f, 0xb30000, 0x7f0000],
        PuBu: [0xfff7fb, 0xece7f2, 0xd0d1e6, 0xa6bddb, 0x74a9cf, 0x3690c0, 0x0570b0, 0x045a8d, 0x023858],
        BuPu: [0xf7fcfd, 0xe0ecf4, 0xbfd3e6, 0x9ebcda, 0x8c96c6, 0x8c6bb1, 0x88419d, 0x810f7c, 0x4d004b],
        Oranges: [0xfff5eb, 0xfee6ce, 0xfdd0a2, 0xfdae6b, 0xfd8d3c, 0xf16913, 0xd94801, 0xa63603, 0x7f2704],
        BuGn: [0xf7fcfd, 0xe5f5f9, 0xccece6, 0x99d8c9, 0x66c2a4, 0x41ae76, 0x238b45, 0x006d2c, 0x00441b],
        YlOrBr: [0xffffe5, 0xfff7bc, 0xfee391, 0xfec44f, 0xfe9929, 0xec7014, 0xcc4c02, 0x993404, 0x662506],
        YlGn: [0xffffe5, 0xf7fcb9, 0xd9f0a3, 0xaddd8e, 0x78c679, 0x41ab5d, 0x238443, 0x006837, 0x004529],
        Reds: [0xfff5f0, 0xfee0d2, 0xfcbba1, 0xfc9272, 0xfb6a4a, 0xef3b2c, 0xcb181d, 0xa50f15, 0x67000d],
        RdPu: [0xfff7f3, 0xfde0dd, 0xfcc5c0, 0xfa9fb5, 0xf768a1, 0xdd3497, 0xae017e, 0x7a0177, 0x49006a],
        Greens: [0xf7fcf5, 0xe5f5e0, 0xc7e9c0, 0xa1d99b, 0x74c476, 0x41ab5d, 0x238b45, 0x006d2c, 0x00441b],
        YlGnBu: [0xffffd9, 0xedf8b1, 0xc7e9b4, 0x7fcdbb, 0x41b6c4, 0x1d91c0, 0x225ea8, 0x253494, 0x081d58],
        Purples: [0xfcfbfd, 0xefedf5, 0xdadaeb, 0xbcbddc, 0x9e9ac8, 0x807dba, 0x6a51a3, 0x54278f, 0x3f007d],
        GnBu: [0xf7fcf0, 0xe0f3db, 0xccebc5, 0xa8ddb5, 0x7bccc4, 0x4eb3d3, 0x2b8cbe, 0x0868ac, 0x084081],
        Greys: [0xffffff, 0xf0f0f0, 0xd9d9d9, 0xbdbdbd, 0x969696, 0x737373, 0x525252, 0x252525, 0x000000],
        YlOrRd: [0xffffcc, 0xffeda0, 0xfed976, 0xfeb24c, 0xfd8d3c, 0xfc4e2a, 0xe31a1c, 0xbd0026, 0x800026],
        PuRd: [0xf7f4f9, 0xe7e1ef, 0xd4b9da, 0xc994c7, 0xdf65b0, 0xe7298a, 0xce1256, 0x980043, 0x67001f],
        Blues: [0xf7fbff, 0xdeebf7, 0xc6dbef, 0x9ecae1, 0x6baed6, 0x4292c6, 0x2171b5, 0x08519c, 0x08306b],
        PuBuGn: [0xfff7fb, 0xece2f0, 0xd0d1e6, 0xa6bddb, 0x67a9cf, 0x3690c0, 0x02818a, 0x016c59, 0x014636],
        Viridis: [0x440154, 0x482777, 0x3f4a8a, 0x31678e, 0x26838f, 0x1f9d8a, 0x6cce5a, 0xb6de2b, 0xfee825],
        Spectral: [
            0x9e0142,
            0xd53e4f,
            0xf46d43,
            0xfdae61,
            0xfee08b,
            0xffffbf,
            0xe6f598,
            0xabdda4,
            0x66c2a5,
            0x3288bd,
            0x5e4fa2,
        ],
        RdYlGn: [
            0xa50026,
            0xd73027,
            0xf46d43,
            0xfdae61,
            0xfee08b,
            0xffffbf,
            0xd9ef8b,
            0xa6d96a,
            0x66bd63,
            0x1a9850,
            0x006837,
        ],
        RdBu: [
            0x67001f,
            0xb2182b,
            0xd6604d,
            0xf4a582,
            0xfddbc7,
            0xf7f7f7,
            0xd1e5f0,
            0x92c5de,
            0x4393c3,
            0x2166ac,
            0x053061,
        ],
        PiYG: [
            0x8e0152,
            0xc51b7d,
            0xde77ae,
            0xf1b6da,
            0xfde0ef,
            0xf7f7f7,
            0xe6f5d0,
            0xb8e186,
            0x7fbc41,
            0x4d9221,
            0x276419,
        ],
        PRGn: [
            0x40004b,
            0x762a83,
            0x9970ab,
            0xc2a5cf,
            0xe7d4e8,
            0xf7f7f7,
            0xd9f0d3,
            0xa6dba0,
            0x5aae61,
            0x1b7837,
            0x00441b,
        ],
        RdYlBu: [
            0xa50026,
            0xd73027,
            0xf46d43,
            0xfdae61,
            0xfee090,
            0xffffbf,
            0xe0f3f8,
            0xabd9e9,
            0x74add1,
            0x4575b4,
            0x313695,
        ],
        BrBG: [
            0x543005,
            0x8c510a,
            0xbf812d,
            0xdfc27d,
            0xf6e8c3,
            0xf5f5f5,
            0xc7eae5,
            0x80cdc1,
            0x35978f,
            0x01665e,
            0x003c30,
        ],
        RdGy: [
            0x67001f,
            0xb2182b,
            0xd6604d,
            0xf4a582,
            0xfddbc7,
            0xffffff,
            0xe0e0e0,
            0xbababa,
            0x878787,
            0x4d4d4d,
            0x1a1a1a,
        ],
        PuOr: [
            0x7f3b08,
            0xb35806,
            0xe08214,
            0xfdb863,
            0xfee0b6,
            0xf7f7f7,
            0xd8daeb,
            0xb2abd2,
            0x8073ac,
            0x542788,
            0x2d004b,
        ],
        Set2: [0x66c2a5, 0xfc8d62, 0x8da0cb, 0xe78ac3, 0xa6d854, 0xffd92f, 0xe5c494, 0xb3b3b3],
        Accent: [0x7fc97f, 0xbeaed4, 0xfdc086, 0xffff99, 0x386cb0, 0xf0027f, 0xbf5b17, 0x666666],
        Set1: [0xe41a1c, 0x377eb8, 0x4daf4a, 0x984ea3, 0xff7f00, 0xffff33, 0xa65628, 0xf781bf, 0x999999],
        Set3: [
            0x8dd3c7,
            0xffffb3,
            0xbebada,
            0xfb8072,
            0x80b1d3,
            0xfdb462,
            0xb3de69,
            0xfccde5,
            0xd9d9d9,
            0xbc80bd,
            0xccebc5,
            0xffed6f,
        ],
        Dark2: [0x1b9e77, 0xd95f02, 0x7570b3, 0xe7298a, 0x66a61e, 0xe6ab02, 0xa6761d, 0x666666],
        Paired: [
            0xa6cee3,
            0x1f78b4,
            0xb2df8a,
            0x33a02c,
            0xfb9a99,
            0xe31a1c,
            0xfdbf6f,
            0xff7f00,
            0xcab2d6,
            0x6a3d9a,
            0xffff99,
            0xb15928,
        ],
        Pastel2: [0xb3e2cd, 0xfdcdac, 0xcbd5e8, 0xf4cae4, 0xe6f5c9, 0xfff2ae, 0xf1e2cc, 0xcccccc],
        Pastel1: [0xfbb4ae, 0xb3cde3, 0xccebc5, 0xdecbe4, 0xfed9a6, 0xffffcc, 0xe5d8bd, 0xfddaec, 0xf2f2f2],
    };
    /**
     * X11 color names
     * http://www.w3.org/TR/css3-color/#svg-color
     *
     * @example chroma.Object.keys(w3cx11).slice(0, 4)
     */
    const w3cx11 = {
        aliceblue: 0xf0f8ff,
        antiquewhite: 0xfaebd7,
        aqua: 0x00ffff,
        aquamarine: 0x7fffd4,
        azure: 0xf0ffff,
        beige: 0xf5f5dc,
        bisque: 0xffe4c4,
        black: 0x000000,
        blanchedalmond: 0xffebcd,
        blue: 0x0000ff,
        blueviolet: 0x8a2be2,
        brown: 0xa52a2a,
        burlywood: 0xdeb887,
        cadetblue: 0x5f9ea0,
        chartreuse: 0x7fff00,
        chocolate: 0xd2691e,
        coral: 0xff7f50,
        cornflower: 0x6495ed,
        cornflowerblue: 0x6495ed,
        cornsilk: 0xfff8dc,
        crimson: 0xdc143c,
        cyan: 0x00ffff,
        darkblue: 0x00008b,
        darkcyan: 0x008b8b,
        darkgoldenrod: 0xb8860b,
        darkgray: 0xa9a9a9,
        darkgreen: 0x006400,
        darkgrey: 0xa9a9a9,
        darkkhaki: 0xbdb76b,
        darkmagenta: 0x8b008b,
        darkolivegreen: 0x556b2f,
        darkorange: 0xff8c00,
        darkorchid: 0x9932cc,
        darkred: 0x8b0000,
        darksalmon: 0xe9967a,
        darkseagreen: 0x8fbc8f,
        darkslateblue: 0x483d8b,
        darkslategray: 0x2f4f4f,
        darkslategrey: 0x2f4f4f,
        darkturquoise: 0x00ced1,
        darkviolet: 0x9400d3,
        deeppink: 0xff1493,
        deepskyblue: 0x00bfff,
        dimgray: 0x696969,
        dimgrey: 0x696969,
        dodgerblue: 0x1e90ff,
        firebrick: 0xb22222,
        floralwhite: 0xfffaf0,
        forestgreen: 0x228b22,
        fuchsia: 0xff00ff,
        gainsboro: 0xdcdcdc,
        ghostwhite: 0xf8f8ff,
        gold: 0xffd700,
        goldenrod: 0xdaa520,
        gray: 0x808080,
        green: 0x008000,
        greenyellow: 0xadff2f,
        grey: 0x808080,
        honeydew: 0xf0fff0,
        hotpink: 0xff69b4,
        indianred: 0xcd5c5c,
        indigo: 0x4b0082,
        ivory: 0xfffff0,
        khaki: 0xf0e68c,
        laserlemon: 0xffff54,
        lavender: 0xe6e6fa,
        lavenderblush: 0xfff0f5,
        lawngreen: 0x7cfc00,
        lemonchiffon: 0xfffacd,
        lightblue: 0xadd8e6,
        lightcoral: 0xf08080,
        lightcyan: 0xe0ffff,
        lightgoldenrod: 0xfafad2,
        lightgoldenrodyellow: 0xfafad2,
        lightgray: 0xd3d3d3,
        lightgreen: 0x90ee90,
        lightgrey: 0xd3d3d3,
        lightpink: 0xffb6c1,
        lightsalmon: 0xffa07a,
        lightseagreen: 0x20b2aa,
        lightskyblue: 0x87cefa,
        lightslategray: 0x778899,
        lightslategrey: 0x778899,
        lightsteelblue: 0xb0c4de,
        lightyellow: 0xffffe0,
        lime: 0x00ff00,
        limegreen: 0x32cd32,
        linen: 0xfaf0e6,
        magenta: 0xff00ff,
        maroon: 0x800000,
        maroon2: 0x7f0000,
        maroon3: 0xb03060,
        mediumaquamarine: 0x66cdaa,
        mediumblue: 0x0000cd,
        mediumorchid: 0xba55d3,
        mediumpurple: 0x9370db,
        mediumseagreen: 0x3cb371,
        mediumslateblue: 0x7b68ee,
        mediumspringgreen: 0x00fa9a,
        mediumturquoise: 0x48d1cc,
        mediumvioletred: 0xc71585,
        midnightblue: 0x191970,
        mintcream: 0xf5fffa,
        mistyrose: 0xffe4e1,
        moccasin: 0xffe4b5,
        navajowhite: 0xffdead,
        navy: 0x000080,
        oldlace: 0xfdf5e6,
        olive: 0x808000,
        olivedrab: 0x6b8e23,
        orange: 0xffa500,
        orangered: 0xff4500,
        orchid: 0xda70d6,
        palegoldenrod: 0xeee8aa,
        palegreen: 0x98fb98,
        paleturquoise: 0xafeeee,
        palevioletred: 0xdb7093,
        papayawhip: 0xffefd5,
        peachpuff: 0xffdab9,
        peru: 0xcd853f,
        pink: 0xffc0cb,
        plum: 0xdda0dd,
        powderblue: 0xb0e0e6,
        purple: 0x800080,
        purple2: 0x7f007f,
        purple3: 0xa020f0,
        rebeccapurple: 0x663399,
        red: 0xff0000,
        rosybrown: 0xbc8f8f,
        royalblue: 0x4169e1,
        saddlebrown: 0x8b4513,
        salmon: 0xfa8072,
        sandybrown: 0xf4a460,
        seagreen: 0x2e8b57,
        seashell: 0xfff5ee,
        sienna: 0xa0522d,
        silver: 0xc0c0c0,
        skyblue: 0x87ceeb,
        slateblue: 0x6a5acd,
        slategray: 0x708090,
        slategrey: 0x708090,
        snow: 0xfffafa,
        springgreen: 0x00ff7f,
        steelblue: 0x4682b4,
        tan: 0xd2b48c,
        teal: 0x008080,
        thistle: 0xd8bfd8,
        tomato: 0xff6347,
        turquoise: 0x40e0d0,
        violet: 0xee82ee,
        wheat: 0xf5deb3,
        white: 0xffffff,
        whitesmoke: 0xf5f5f5,
        yellow: 0xffff00,
        yellowgreen: 0x9acd32,
    };
    /**
     * Create a new random [Color] from a random point in the RGB color space.
     * @param randomSource A function which returns random `number`s in the interval [0; 1). Useful if you want to
     *     create a deterministic sequence of "random" colors. Defaults to `Math.random`.
     */
    function random(randomSource = Math.random) {
        return num((randomSource() * 16777216) | 0);
    }
    /**
     * Create a valid RGB color (`.clipped() == false`) from a random point in the CIELAB color space. This results in
     * more colors in the RGB color space where humans can perceive more differences.
     * @param randomSource A function which returns random `number`s in the interval [0; 1). Useful if you want to
     *     create a deterministic sequence of "random" colors. Defaults to `Math.random`.
     * @example chroma.random((() => { let i = 0; return () => (i = (i *Math.SQRT2) % 1); })())
     */
    // export function randomLab(randomSource = Math.random) {
    // 	const labAMin = -87,
    // 		labAMax = 99,
    // 		labBMin = -108,
    // 		labBMax = 95
    // 	let maxIterations = 100
    // 	while (maxIterations--) {
    // 		const u = randomSource(),
    // 			v = randomSource(),
    // 			w = randomSource()
    // 		// The following matrix multiplication transform the random point (u v w) in the unit cube into the
    // 		// oriented bounding box (OBB) of the projection of the RGB space into the LAB space. This is necessary to
    // 		// avoid a huge number of misses.
    // 		const color = lab(
    // 			u * -53.903 + v * -88.755 + w * 71.7 + 99.707,
    // 			u * -82.784 + v * 187.036 + w * -2.422 + -28.17,
    // 			u * -75.813 + v * -141.406 + w * -48.261 + 152.469,
    // 		)
    // 		console.log(color.lab())
    // 		console.log(color.rgba(false, false))
    // 		if (!color.clipped()) return color
    // 	}
    // 	throw new Error("Could find a random color in 100 iterations")
    // }
    /**
     * Mixes two colors. The mix ratio is a value between 0 and 1.
     * The color mixing produces different results based the color space used for interpolation.
     *
     * @param col2
     * @param f
     * @param m
     * @example chroma.mix('red', 'blue')
     * @example chroma.mix('red', 'blue', 0.25)
     * @example chroma.mix('red', 'blue', 0.75)
     *
     * @example chroma.mix('red', 'blue', 0.5, 'rgb')
     * @example chroma.mix('red', 'blue', 0.5, 'hsl')
     * @example chroma.mix('red', 'blue', 0.5, 'lab')
     * @example chroma.mix('red', 'blue', 0.5, 'lch')
     * @example chroma.mix('red', 'blue', 0.5, 'lrgb')
     */
    function mix(col1, col2, f = 0.5, m = "rgb") {
        const c1 = color(col1);
        const c2 = color(col2);
        const res = interpolators[m] && interpolators[m](c1, c2, f, m);
        if (!res) {
            throw new Error("color mode " + m + " is not supported");
        }
        return res.alpha(lerp(c1.alpha(), c2.alpha(), f));
    }
    /**
     * Parse a CSS color. See [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color) for all the possible
     * variants.
     *
     * @example chroma.css('hsl(2rad 90% 50% / 0.9)')
     * @example chroma.css('laserlemon')
     */
    function css(cssString) {
        const [r, g, b, a] = css2rgb(cssString);
        return new Color(r, g, b, a);
    }
    function lch(...args) {
        return guess(args, "lch");
    }
    function hsl(...args) {
        return guess(args, "hsl");
    }
    function lab(...args) {
        return guess(args, "lab");
    }
    /**
     * @example chroma.num(0x663399) // rebeccapurple
     */
    function num(num) {
        const [r, g, b] = num2rgb(num);
        return new Color(r, g, b);
    }
    function rgb(...args) {
        return guess(args, "rgb");
    }
    function scale(...args) {
        const f = ((t) => f._at(t));
        Object.getOwnPropertyNames(Scale.prototype).forEach((key) => (f[key] = Scale.prototype[key]));
        if (Array.isArray(args[0]))
            args = args[0];
        if (args.length == 1 && "string" == typeof args[0])
            args = brewer[args[0]];
        f._init("function" == typeof args[0] ? args[0] : args.map((a) => color(a)));
        //f.setColors(args.length > 1 ? args : args[0])
        return f;
    }
    class Scale {
        classes(classes) {
            if (undefined === classes) {
                return this._classes;
            }
            if (Array.isArray(classes)) {
                this._classes = classes;
                this.domain(classes[0], classes[classes.length - 1]);
            }
            else {
                if (classes % 1 != 0 || classes < 1)
                    throw new Error("invalid classes param");
                // const d = analyze(this.domain())
                this._classes = limits(this.domain(), "e", classes);
            }
            return this;
        }
        domain(...domain) {
            if (undefined === domain[0]) {
                return "function" !== typeof this._colors
                    ? this._pos.map((p) => lerp(this._min, this._max, p))
                    : [this._min, this._max];
            }
            this._min = domain[0];
            this._max = domain[domain.length - 1];
            if (2 == domain.length) {
                if ("function" !== typeof this._colors) {
                    // equidistant positions
                    this._pos = this._colors.map((_, c) => c / (this._colors.length - 1));
                }
            }
            else if ("function" !== typeof this._colors && domain.length == this._colors.length) {
                this._pos = domain.map((d) => lerpInv(this._min, this._max, d));
            }
            else {
                throw new Error("invalid domain " + domain);
            }
            return this;
        }
        mode(mode) {
            if (undefined === mode) {
                return this._mode;
            }
            this._mode = mode;
            this._resetCache();
            return this;
        }
        /**
         * Set the output format return by `this(x)` and `this.colors(n)`.
         * @param outputFormat The color format to use. Pass `undefined` to return [Color] objects.
         * @return `this`
         * @example chroma.scale("red", "white").out("hex")(0) // == "#ff0000"
         * @example chroma.scale("red", "white").out("num").colors(2) // == [0xff0000, 0xffffff]
         */
        out(outputFormat) {
            this._out = outputFormat;
            return this;
        }
        /**
         * This makes sure the lightness range is spread evenly across a color scale. Especially useful when working
         * with [multi-hue color scales](https://www.vis4.net/blog/2013/09/mastering-multi-hued-color-scales/), where
         * simple gamma correction can't help you very much.
         *
         * @example chroma.scale('black','red','yellow','white')
         * @example chroma.scale('black','red','yellow','white').correctLightness()
         */
        correctLightness(enableCorrectLightness = true) {
            if (this._correctLightness != enableCorrectLightness) {
                this._resetCache();
                const colors = this._colors;
                if (enableCorrectLightness && "function" !== typeof colors) {
                    // make sure that the colors have ascending or descending lightnesses
                    let sign = 0;
                    for (let i = 1; i < colors.length; i++) {
                        const sign2 = colors[i].lab()[0] - colors[i - 1].lab()[0];
                        if (0 == sign) {
                            sign = sign2;
                        }
                        else if (sign * sign2 < 0) {
                            throw new Error("scale color lightnesses must be monotonic");
                        }
                    }
                }
            }
            this._correctLightness = enableCorrectLightness;
            return this;
        }
        padding(paddingLeft, paddingRight = paddingLeft) {
            if (!paddingLeft) {
                return [this._paddingLeft, this._paddingRight];
            }
            this._paddingLeft = paddingLeft;
            this._paddingRight = paddingRight;
            return this;
        }
        /**
         * Get a number of equidistant colors.
         * @param numColors The number of colors to return.
         * @param format Output format. Defaults to `"hex"`. Pass `"color"` to get {@link Color} objects.
         * @returns If `numColors` is `undefined`, the colors which define this [Scale]. If `numColors` is 1,
         * `[this((min + max) / 2)]`. Otherwise, an array where the first element is `this(min)`, the last one is
         * `this(max)` and the rest are equidistant samples between min and max.
         * @example chroma.scale('OrRd').colors(5)
         * @example chroma.scale(['white', 'black']).colors(12)
         */
        colors(numColors, format = "hex") {
            let result;
            if (undefined === numColors) {
                result = this._colors.slice();
            }
            else if (numColors == 1) {
                result = [this._color((this._min + this._max) / 2)];
            }
            else if (numColors > 1) {
                result = Array.from({ length: numColors }, (_, i) => this._color(lerp(this._min, this._max, i / (numColors - 1))));
            }
            else {
                // returns all colors based on the defined classes
                let samples;
                if (this._classes && this._classes.length > 2) {
                    samples = Array.from({ length: this._classes.length - 1 }, (_, i) => (this._classes[i] + this._classes[i + 1]) * 0.5);
                }
                else {
                    samples = this.domain(); // TODO?!
                }
                result = samples.map((s) => this._color(s));
            }
            return (format != "color" ? result.map((c) => c[format]()) : result);
        }
        cache(enableCache) {
            if (undefined === enableCache) {
                return !!this._cache;
            }
            this._cache = enableCache ? this._cache || new Map() : undefined;
            return this;
        }
        gamma(gamma) {
            if (undefined === gamma) {
                return this._gamma;
            }
            this._gamma = gamma;
            return this;
        }
        /**
         * @ignore
         */
        _at(t) {
            const c = this._color(t);
            return this._out ? c[this._out]() : c;
        }
        /**
         * @ignore
         */
        _init(colorsOrFunction) {
            this._colors = colorsOrFunction;
            if ("function" != typeof colorsOrFunction) {
                this._pos = colorsOrFunction.map((_, i) => i / (colorsOrFunction.length - 1));
            }
            this._mode = "rgb";
            this.domain(0, 1);
            this._paddingLeft = 0;
            this._paddingRight = 0;
            this._correctLightness = false;
            this._cache = new Map();
            this._gamma = 1;
        }
        _getClass(value) {
            return this._classes.findIndex((cls) => value <= cls) - 1;
        }
        _color(val, bypassMap = false) {
            let t;
            if (!bypassMap) {
                const min = this._min, max = this._max;
                if (this._classes && this._classes.length > 2) {
                    const c = this._getClass(val);
                    t = c / (this._classes.length - 2);
                }
                else if (max !== min) {
                    t = (val - min) / (max - min);
                }
                else {
                    t = 1;
                }
                if (this._correctLightness) {
                    t = this._tCorrectedLightness(t);
                }
            }
            else {
                t = val;
            }
            t = t ** this._gamma;
            t = (this._paddingLeft + t) / (1 + this._paddingLeft + this._paddingRight);
            //	t = this._paddingLeft + t * (1 - this._paddingLeft - this._paddingRight)
            t = clamp(t, 0, 1);
            const tHash = t;
            const cacheResult = this._cache && this._cache.get(tHash);
            if (cacheResult) {
                return cacheResult;
            }
            else {
                let col;
                if (Array.isArray(this._colors)) {
                    for (let i = 0; i < this._pos.length; i++) {
                        const p = this._pos[i];
                        if (t <= p) {
                            col = this._colors[i];
                            break;
                        }
                        if (t >= p && i == this._pos.length - 1) {
                            col = this._colors[i];
                            break;
                        }
                        if (t > p && t < this._pos[i + 1]) {
                            t = (t - p) / (this._pos[i + 1] - p);
                            col = mix(this._colors[i], this._colors[i + 1], t, this._mode);
                            break;
                        }
                    }
                }
                else {
                    col = this._colors(t);
                }
                if (this._cache) {
                    // tslint:disable-next-line
                    this._cache.set(tHash, col);
                }
                // tslint:disable-next-line
                return col;
            }
        }
        _tCorrectedLightness(t0_1) {
            const L0 = this._color(0, true).lab()[0];
            const L1 = this._color(1, true).lab()[0];
            const L_ideal = lerp(L0, L1, t0_1);
            return bisect((t) => this._color(t, true).lab()[0] - L_ideal, 0, 1, 8);
        }
        _resetCache() {
            if (this._cache)
                this._cache.clear();
        }
    }
    var scales;
    (function (scales) {
        /**
         * @example chroma.scales.cool()
         */
        function cool() {
            return scale([hsl(180, 1, 0.9), hsl(250, 0.7, 0.4)]);
        }
        scales.cool = cool;
        /**
         * @example chroma.scales.hot()
         */
        function hot() {
            return scale(["#000", "#f00", "#ff0", "#fff"]).mode("rgb");
        }
        scales.hot = hot;
    })(scales || (scales = {}));
    function analyze(data) {
        const r = {
            min: Infinity,
            max: -Infinity,
            sum: 0,
            values: [],
            count: 0,
        };
        function add(val) {
            if (val != undefined && !isNaN(val)) {
                r.values.push(val);
                r.sum += val;
                if (val < r.min)
                    r.min = val;
                if (val > r.max)
                    r.max = val;
                r.count += 1;
            }
        }
        data.forEach((val) => add(val));
        r.domain = [r.min, r.max];
        r.limits = function (mode, num) {
            return limits(this, mode, num);
        };
        return r;
    }
    function limits(data, mode = "e", num = 7) {
        const info = Array.isArray(data) ? analyze(data) : data;
        const { min, max, values } = info;
        values.sort((a, b) => a - b);
        if (num == 1) {
            return [min, max];
        }
        if (mode.startsWith("c")) {
            return [min, max];
        }
        else if (mode.startsWith("e")) {
            return Array.from({ length: num + 1 }, (_, i) => lerp(min, max, i / num));
        }
        else if (mode.startsWith("l")) {
            if (min <= 0) {
                throw new Error("Logarithmic scales are only possible for values > 0");
            }
            const min_log = Math.LOG10E * log(min);
            const max_log = Math.LOG10E * log(max);
            return Array.from({ length: num + 1 }, (_, i) => 10 ** lerp(min_log, max_log, i / num));
        }
        else if (mode.startsWith("q")) {
            return Array.from({ length: num + 1 }, (_, i) => {
                const p = ((values.length - 1) * i) / num;
                const pb = floor(p);
                return pb == p ? values[pb] : lerp(values[pb], values[pb + 1], p - pb);
            });
        }
        else if (mode.startsWith("k")) {
            // implementation based on
            // http://code.google.com/p/figue/source/browse/trunk/figue.js#336
            // simplified for 1-d input values
            const n = values.length;
            const assignments = new Array(n);
            const clusterSizes = new Array(num);
            let repeat = true;
            let nb_iters = 0;
            let centroids = Array.from({ length: num + 1 }, (_, i) => lerp(min, max, i / num));
            do {
                // assignment step
                clusterSizes.fill(0);
                for (let i = 0; i < values.length; i++) {
                    const value = values[i];
                    const minDistIndex = indexOfMax(centroids, (c) => -abs(c - value));
                    clusterSizes[minDistIndex]++;
                    assignments[i] = minDistIndex;
                }
                // update centroids step
                const newCentroids = new Array(num).fill(0);
                for (let i = 0; i < assignments.length; i++) {
                    const cluster = assignments[i];
                    newCentroids[cluster] += values[i];
                }
                for (let j = 0; j < newCentroids.length; j++) {
                    newCentroids[j] /= clusterSizes[j];
                }
                // check convergence
                repeat = newCentroids.some((nc, j) => nc != centroids[j]);
                centroids = newCentroids;
            } while (nb_iters++ < 200 && repeat);
            // finished k-means clustering
            // the next part is borrowed from gabrielflor.it
            const kClusters = Array.from({ length: num }, () => []);
            for (let i = 0; i < assignments.length; i++) {
                const cluster = assignments[i];
                kClusters[cluster].push(values[i]);
            }
            const tmpKMeansBreaks = [];
            for (const kCluster of kClusters) {
                tmpKMeansBreaks.push(kCluster[0], kCluster[kCluster.length - 1]);
            }
            tmpKMeansBreaks.sort((a, b) => a - b);
            const limits = [];
            limits.push(tmpKMeansBreaks[0]);
            for (let i = 1; i < tmpKMeansBreaks.length; i += 2) {
                const v = tmpKMeansBreaks[i];
                if (!isNaN(v) && limits.indexOf(v) == -1) {
                    limits.push(v);
                }
            }
            return limits;
        }
        else {
            throw new Error("unknown mode");
        }
    }
    const interpolators = {};
    // const _guess_formats: { p: number; test: (args: any[]) => ColorFormat | undefined }[] = []
    const _input = {};
    function linear_interpolator(col1, col2, f, m) {
        const xyz1 = col1[m]();
        const xyz2 = col2[m]();
        return guess([
            lerp(xyz1[0], xyz2[0], f),
            lerp(xyz1[1], xyz2[1], f),
            lerp(xyz1[2], xyz2[2], f),
            lerp(col1.alpha(), col2.alpha(), f),
        ], m);
    }
    interpolators.xyz = interpolators.rgb = interpolators.lab = linear_interpolator;
    interpolators.num = function (col1, col2, f) {
        const n1 = col1.num();
        const n2 = col2.num();
        return num(lerp(n1, n2, f));
    };
    interpolators.lrgb = function (col1, col2, f) {
        const [r1, g1, b1, a1] = col1.rgba(false, false);
        const [r2, g2, b2, a2] = col2.rgba(false, false);
        return new Color(sqrt(r1 ** 2 * (1 - f) + r2 ** 2 * f), sqrt(g1 ** 2 * (1 - f) + g2 ** 2 * f), sqrt(b1 ** 2 * (1 - f) + b2 ** 2 * f), lerp(a1, a2, f));
    };
    function guess(args, mode) {
        if (Array.isArray(args[0]))
            args = args[0];
        if (!mode) {
            if (args.length == 1 && args[0] in w3cx11) {
                mode = "name";
            }
            else if (args.length == 1 && "string" == typeof args[0]) {
                mode = "css";
            }
            else if (args.length == 3) {
                mode = "rgb";
            }
            else if (args.length == 4 && "number" == typeof args[3] && args[3] >= 0 && args[3] <= 1) {
                mode = "rgb";
            }
            else if (args.length == 1 && "number" == typeof args[0] && args[0] >= 0 && args[0] <= 0xffffff) {
                mode = "num";
            }
            else
                throw new Error("could not guess mode. args " + JSON.stringify(args));
        }
        const channels = _input[mode](...args);
        return new Color(channels[0], channels[1], channels[2], undefined !== channels[3] ? channels[3] : 1);
    }
    function hex2rgb(hex) {
        let m;
        if ((m = hex.match(/^#?([A-F\d]{2})([A-F\d]{2})([A-F\d]{2})([A-F\d]{2})?$/i))) {
            return [parseInt(m[1], 16), parseInt(m[2], 16), parseInt(m[3], 16), m[4] ? parseInt(m[4], 16) / 255 : 1];
        }
        else if ((m = hex.match(/^#?([A-F\d])([A-F\d])([A-F\d])([A-F\d])?$/i))) {
            return [
                parseInt(m[1], 16) * 0x11,
                parseInt(m[2], 16) * 0x11,
                parseInt(m[3], 16) * 0x11,
                m[4] ? (parseInt(m[4], 16) * 0x11) / 255 : 1,
            ];
        }
        throw new Error("invalid hex color: " + hex);
    }
    // interface ColorModes {
    // 	cmyk: CMYK
    // 	gl: GL
    // 	rgb: RGB
    // 	rgba: RGBA
    // 	lab: LAB
    // 	hsl: HSL
    // 	hsv: HSV
    // 	hsi: HSI
    // 	xyz: XYZ
    // 	hcg: HCG
    // 	lch: LCH
    // 	hex: string
    // 	num: number
    // 	name: string
    // 	kelvin: number
    // 	css: string
    // }
    function rgb2hex(r255, g255, b255, a1, mode = "rgb") {
        r255 = clamp(round(r255), 0, 255);
        g255 = clamp(round(g255), 0, 255);
        b255 = clamp(round(b255), 0, 255);
        const rgb = (r255 << 16) | (g255 << 8) | b255;
        const rgbString = rgb.toString(16).padStart(6, "0");
        const alphaString = round(clamp(a1) * 255)
            .toString(16)
            .padStart(2, "0");
        return "#" + ("argb" == mode ? alphaString + rgbString : "rgba" == mode ? rgbString + alphaString : rgbString);
    }
    _input.lrgb = _input.rgb;
    _input.hex = hex2rgb;
    _input.hsl = hsl2rgb;
    function norm360(degrees) {
        return ((degrees % 360) + 360) % 360;
    }
    _input.hsv = hsv2rgb;
    function num2rgb(num) {
        if (!("number" == typeof num && num >= 0 && num <= 0xffffff)) {
            throw new Error("unknown num color: " + num);
        }
        const r = num >> 16;
        const g = (num >> 8) & 0xff;
        const b = num & 0xff;
        return [r, g, b, 1];
    }
    function rgb2num(r255, g255, b255, a1 = 1, mode = "rgb") {
        const rgbNum = (round(r255) << 16) | (round(g255) << 8) | round(b255);
        if ("rgb" === mode) {
            return rgbNum;
        }
        else if ("rgba" === mode) {
            return (rgbNum << 8) | (round(a1 * 255) << 24);
        }
        else {
            return (round(a1 * 255) << 24) | rgbNum;
        }
    }
    _input.num = num2rgb;
    const WS = "\\s*";
    const FLOAT = "([+-]?(?:\\d*\\.?)?\\d+(?:[eE][+-]?\\d+)?)";
    const CSS_RGB_REGEX = new RegExp(["^rgba?\\(", FLOAT, ",", FLOAT, ",", FLOAT, "(?:,", FLOAT + "(%)?", ")?\\)$"].join(WS), "i");
    const CSS_RGB_WS_REGEX = new RegExp(["^rgba?\\(", FLOAT, FLOAT, FLOAT, "(?:/", FLOAT + "(%)?", ")?\\)$"].join(WS), "i");
    const CSS_RGB_PERCENT_REGEX = new RegExp(["^rgba?\\(", FLOAT + "%", ",", FLOAT + "%", ",", FLOAT + "%", "(?:,", FLOAT + "(%)?", ")?\\)$"].join(WS), "i");
    const CSS_RGB_WS_PERCENT_REGEX = new RegExp(["^rgba?\\(", FLOAT + "%", FLOAT + "%", FLOAT + "%", "(?:/", FLOAT + "(%)?", ")?\\)$"].join(WS), "i");
    const CSS_HSL_REGEX = new RegExp(["^hsla?\\(", FLOAT + "(deg|rad|turn)?", ",", FLOAT + "%", ",", FLOAT + "%", "(?:,", FLOAT + "(%)?", ")?\\)$"].join(WS), "i");
    const CSS_HSL_WS_REGEX = new RegExp(["^hsla?\\(", FLOAT + "(deg|rad|turn)?\\s+" + FLOAT + "%", FLOAT + "%", "(?:/", FLOAT + "(%)?", ")?\\)$"].join(WS), "i");
    function css2rgb(css) {
        if (w3cx11 && w3cx11.hasOwnProperty(css)) {
            return num2rgb(w3cx11[css.toLowerCase()]);
        }
        let m;
        if ((m = css.match(CSS_RGB_REGEX) || css.match(CSS_RGB_WS_REGEX))) {
            return [
                clamp(+m[1], 0, 255),
                clamp(+m[2], 0, 255),
                clamp(+m[3], 0, 255),
                m[4] ? clamp(m[5] ? +m[4] / 100 : +m[4]) : 1,
            ];
        }
        else if ((m = css.match(CSS_RGB_PERCENT_REGEX) || css.match(CSS_RGB_WS_PERCENT_REGEX))) {
            return [
                clamp(+m[1] / 100) * 255,
                clamp(+m[2] / 100) * 255,
                clamp(+m[3] / 100) * 255,
                m[4] ? clamp(m[5] ? +m[4] / 100 : +m[4]) : 1,
            ];
        }
        else if ((m = css.match(CSS_HSL_REGEX) || css.match(CSS_HSL_WS_REGEX))) {
            const CONVERSION = { deg: 1, rad: RAD2DEG, turn: 360 };
            const angleUnit = (m[2] ? m[2].toLowerCase() : "deg");
            return hsl2rgb((((+m[1] * CONVERSION[angleUnit]) % 360) + 360) % 360, clamp(+m[3] / 100), clamp(+m[4] / 100), m[5] ? clamp(m[6] ? +m[5] / 100 : +m[5]) : 1);
        }
        else {
            return hex2rgb(css);
        }
    }
    function rgb2css(r, g, b, a = 1) {
        if (a >= 1) {
            return "rgb(" + [r, g, b].map(round).join(",") + ")";
        }
        else {
            return "rgba(" + [r, g, b].map(round).join(",") + "," + a + ")";
        }
    }
    function rnd(a) {
        return round(a * 100) / 100;
    }
    function hsl2css([h, s, l], alpha) {
        const mode = alpha < 1 ? "hsla" : "hsl";
        return (mode +
            "(" +
            rnd(h) +
            "," +
            rnd(s * 100) +
            "%" +
            "," +
            rnd(l * 100) +
            "%" +
            ("hsla" == mode ? "," + rnd(alpha) : "") +
            ")");
    }
    _input.css = css2rgb;
    _input.name = function (name) {
        return num2rgb(w3cx11[name]);
    };
    function lch2lab(l, c, hueDegrees) {
        /*
        Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.
        These formulas were invented by David Dalrymple to obtain maximum contrast without going
        out of gamut if the parameters are in the range 0-1.

        A saturation multiplier was added by Gregor Aisch
         */
        return [l, cos(hueDegrees * DEG2RAD) * c, sin(hueDegrees * DEG2RAD) * c];
    }
    function lch2rgb(l, c, hDegrees, alpha1 = 1) {
        const [, a, b] = lch2lab(l, c, hDegrees);
        return cielab2rgb(l, a, b, alpha1);
    }
    function lab2lch(l, a, b) {
        const c = hypot(a, b);
        const h = (atan2(b, a) * RAD2DEG + 360) % 360;
        return [l, c, h];
    }
    function rgb2lch(r255, g255, b255) {
        const [l, a, b2] = rgb2lab(r255, g255, b255);
        return lab2lch(l, a, b2);
    }
    _input.lch = lch2rgb;
    function rgb2cmyk(r255, g255, b255) {
        r255 /= 255;
        g255 /= 255;
        b255 /= 255;
        const k = 1 - max(r255, g255, b255);
        if (1 == k)
            return [0, 0, 0, 1];
        const c = (1 - r255 - k) / (1 - k);
        const m = (1 - g255 - k) / (1 - k);
        const y = (1 - b255 - k) / (1 - k);
        return [c, m, y, k];
    }
    function cmyk2rgb(c1, m1, y1, k1, alpha1 = 1) {
        if (k1 == 1) {
            return [0, 0, 0, alpha1];
        }
        const r255 = 255 * (1 - c1) * (1 - k1);
        const g255 = 255 * (1 - m1) * (1 - k1);
        const b255 = 255 * (1 - y1) * (1 - k1);
        return [r255, g255, b255, alpha1];
    }
    _input.cmyk = cmyk2rgb;
    _input.gl = function (r, g, b, a = 1) {
        return [r * 255, g * 255, b * 255, a];
    };
    //function rgb2luminance(r: number, g: number, b: number) {
    //	// https://en.wikipedia.org/wiki/Relative_luminance
    //	const [, Y] = rgb2xyz(r, g, b)
    //	return Y
    //}
    function rgbChannel2RgbLinear(x255) {
        const x1 = x255 / 255;
        // http://entropymine.com/imageworsener/srgbformula/
        if (x1 <= 0.04045) {
            return x1 / 12.92;
        }
        else {
            return ((x1 + 0.055) / 1.055) ** 2.4;
        }
    }
    function rgbLinearChannel2Rgb(xLinear1) {
        if (xLinear1 <= 0.0031308) {
            return 255 * (12.92 * xLinear1);
        }
        else {
            return 255 * ((1 + 0.055) * xLinear1 ** (1 / 2.4) - 0.055);
        }
    }
    function kelvin2rgb(kelvin) {
        const t = kelvin / 100;
        let r, g, b;
        if (t < 66) {
            r = 255;
            g = -155.25485562709179 - 0.44596950469579133 * (t - 2) + 104.49216199393888 * log(t - 2);
            b = t < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (t - 10) + 115.67994401066147 * log(t - 10);
        }
        else {
            r = 351.97690566805693 + 0.114206453784165 * (t - 55) - 40.25366309332127 * log(t - 55);
            g = 325.4494125711974 + 0.07943456536662342 * (t - 50) - 28.0852963507957 * log(t - 50);
            b = 255;
        }
        return [r, g, b];
    }
    _input.rgb = (...args) => args;
    function rgb2kelvin(r255, g255, b255) {
        console.log(b255 - r255);
        if (g255 + b255 < 158.61) {
            console.log("0 < t < 20");
            // calc from green
            return round(newtonIterate1d((t) => g255 - (-155.25485562709179 - 0.44596950469579133 * (t - 2) + 104.49216199393888 * log(t - 2)), 15, 4) * 100);
        }
        else if (b255 - r255 < 0) {
            console.log("20 < t < 66");
            return round(newtonIterate1d((t) => b255 - (-254.76935184120902 + 0.8274096064007395 * (t - 10) + 115.67994401066147 * log(t - 10)), 43, 4) * 100);
        }
        else {
            console.log("0 < t < 400, start= " + (-1.4 * (r255 + g255) + 755));
            return round(newtonIterate1d((t) => r255 - (351.97690566805693 + 0.114206453784165 * (t - 55) - 40.25366309332127 * log(t - 55)), -1.4 * (r255 + g255) + 755, 8) * 100);
        }
    }
    _input.temperature = _input.kelvin = _input.K = kelvin2rgb;
    /**
     * r, g, b can be in any interval (0-1 or 0-255)
     * @param r
     * @param g
     * @param b
     */
    function rgb2hexhue(r, g, b) {
        const m = min(r, g, b);
        const M = max(r, g, b);
        const delta = M - m;
        let hueTurnX6; // angle as value between 0 and 6
        if (0 == delta) {
            hueTurnX6 = 0;
        }
        else if (r == M) {
            // second term to make sure the value is > 0
            hueTurnX6 = (g - b) / delta + (g < b ? 6 : 0);
        }
        else if (g == M) {
            hueTurnX6 = 2 + (b - r) / delta;
        }
        else {
            hueTurnX6 = 4 + (r - g) / delta;
        }
        return [hueTurnX6 * 60, m, M];
    }
    function hcxm2rgb(hueDegrees, c1, x1, m1, alpha1) {
        const m255 = m1 * 255;
        const cm255 = c1 * 255 + m255;
        const xm255 = x1 * 255 + m255;
        if (hueDegrees < 60) {
            return [cm255, xm255, m255, alpha1];
        }
        else if (hueDegrees < 120) {
            return [xm255, cm255, m255, alpha1];
        }
        else if (hueDegrees < 180) {
            return [m255, cm255, xm255, alpha1];
        }
        else if (hueDegrees < 240) {
            return [m255, xm255, cm255, alpha1];
        }
        else if (hueDegrees < 300) {
            return [xm255, m255, cm255, alpha1];
        }
        else {
            return [cm255, m255, xm255, alpha1];
        }
    }
    /**
     * https://en.wikipedia.org/w/index.php?title=HSL_and_HSV&oldid=856714654#From_HSL
     */
    function hsl2rgb(hueDegrees, s1, l1, alpha1 = 1) {
        hueDegrees = norm360(hueDegrees);
        const c1 = (1 - abs(2 * l1 - 1)) * s1;
        return hcxm2rgb(hueDegrees, c1, c1 * (1 - abs(((hueDegrees / 60) % 2) - 1)), l1 - c1 / 2, alpha1);
    }
    function rgb2hsl(r255, g255, b255) {
        const [hue, min1, max1] = rgb2hexhue(r255 / 255, g255 / 255, b255 / 255);
        const l1 = (max1 + min1) / 2;
        let s1;
        if (max1 == min1) {
            s1 = 0;
        }
        else {
            s1 = l1 < 0.5 ? (max1 - min1) / (max1 + min1) : (max1 - min1) / (2 - max1 - min1);
        }
        return [hue, s1, l1];
    }
    function hsv2rgb(hueDegrees, s1, v1, alpha1 = 1) {
        hueDegrees = norm360(hueDegrees);
        const c1 = v1 * s1;
        return hcxm2rgb(hueDegrees, c1, c1 * (1 - abs(((hueDegrees / 60) % 2) - 1)), v1 - c1, alpha1);
    }
    function rgb2hsv(r255, g255, b255) {
        const [hue, min255, max255] = rgb2hexhue(r255, g255, b255);
        const delta255 = max255 - min255;
        const v1 = max255 / 255.0;
        const s1 = max255 == 0 ? 0 : delta255 / max255;
        return [hue, s1, v1];
    }
    function hcg2rgb(hueDegrees, c1, g1, alpha1 = 1) {
        hueDegrees = norm360(hueDegrees);
        const p = g1 * (1 - c1);
        return hcxm2rgb(hueDegrees, c1, c1 * (1 - abs(((hueDegrees / 60) % 2) - 1)), p, alpha1);
    }
    function rgb2hcg(r255, g255, b255) {
        const [hue, min255, max255] = rgb2hexhue(r255, g255, b255);
        const c1 = (max255 - min255) / 255;
        const _g1 = c1 < 1 ? min255 / 255 / (1 - c1) : 0;
        return [hue, c1, _g1];
    }
    _input.hcg = hcg2rgb;
    function cielab2rgb(LStar100, aStar, bStar, alpha = 1) {
        const [x, y, z] = cielab2xyz(LStar100, aStar, bStar);
        return xyz2rgb(x, y, z, alpha);
    }
    function cielab2xyz(LStar100, aStar, bStar) {
        function fInv(t) {
            if (t > LAB_delta) {
                return t ** 3;
            }
            else {
                return LAB_3DeltaPow2 * (t - 4 / 29);
            }
        }
        return [
            LAB_Xn * fInv((LStar100 + 16) / 116 + aStar / 500),
            LAB_Yn * fInv((LStar100 + 16) / 116),
            LAB_Zn * fInv((LStar100 + 16) / 116 - bStar / 200),
        ];
    }
    function xyz2cielab(x, y, z) {
        // https://en.wikipedia.org/w/index.php?title=CIELAB_color_space&oldid=849576085#Forward_transformation
        function f(t) {
            if (t > LAB_deltaPow3) {
                return cbrt(t);
            }
            else {
                return t / LAB_3DeltaPow2 + 4 / 29;
            }
        }
        return [116 * f(y / LAB_Yn) - 16, 500 * (f(x / LAB_Xn) - f(y / LAB_Yn)), 200 * (f(y / LAB_Yn) - f(z / LAB_Zn))];
    }
    // const LAB_CONSTANTS = {
    const LAB_Kn = 18;
    const LAB_Xn = 0.95047;
    const LAB_Yn = 1;
    const LAB_Zn = 1.08883;
    const LAB_delta = 0.206896552; // delta = 6 / 29
    const LAB_3DeltaPow2 = 0.12841855; // 3 * delta ** 2
    const LAB_deltaPow3 = 0.008856452; // delta ** 3
    // }
    function rgb2lab(r255, g255, b255) {
        const [x, y, z] = rgb2xyz(r255, g255, b255);
        return xyz2cielab(x, y, z);
    }
    function rgb2xyz(r255, g255, b255) {
        // https://en.wikipedia.org/wiki/SRGB#The_reverse_transformation
        const r1Linear = rgbChannel2RgbLinear(r255);
        const g1Linear = rgbChannel2RgbLinear(g255);
        const b1Linear = rgbChannel2RgbLinear(b255);
        const X = 0.4124564 * r1Linear + 0.3575761 * g1Linear + 0.1804375 * b1Linear;
        const Y = 0.2126729 * r1Linear + 0.7151522 * g1Linear + 0.072175 * b1Linear;
        const Z = 0.0193339 * r1Linear + 0.119192 * g1Linear + 0.9503041 * b1Linear;
        return [X, Y, Z];
    }
    function xyz2rgb(X1, Y1, Z1, alpha1 = 1) {
        // https://en.wikipedia.org/wiki/SRGB#The_forward_transformation_(CIE_XYZ_to_sRGB)
        const r1Linear = 3.2404542 * X1 - 1.5371385 * Y1 - 0.4985314 * Z1;
        const g1Linear = -0.969266 * X1 + 1.8760108 * Y1 + 0.041556 * Z1;
        const b1Linear = 0.0556434 * X1 - 0.2040259 * Y1 + 1.0572252 * Z1;
        return [rgbLinearChannel2Rgb(r1Linear), rgbLinearChannel2Rgb(g1Linear), rgbLinearChannel2Rgb(b1Linear), alpha1];
    }
    _input.xyz = xyz2rgb;
    _input.lab = cielab2rgb;
    /**
     * For HSI, we use the direct angle calculation. I.e. atan2(beta, alpha). See wikipedia link. This is why we don't use
     * hcxm2rgb.
     */
    function hsi2rgb(hueDegrees, s1, i1, alpha1 = 1) {
        /*
        borrowed from here:
        http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp
         */
        let r, g, b;
        let hRad = hueDegrees * DEG2RAD;
        if (hRad < (2 * PI) / 3) {
            b = (1 - s1) / 3;
            r = (1 + (s1 * cos(hRad)) / cos(PI / 3 - hRad)) / 3;
            g = 1 - (b + r);
        }
        else if (hRad < (4 * PI) / 3) {
            hRad -= (2 * PI) / 3;
            r = (1 - s1) / 3;
            g = (1 + (s1 * cos(hRad)) / cos(PI / 3 - hRad)) / 3;
            b = 1 - (r + g);
        }
        else {
            hRad -= (4 * PI) / 3;
            g = (1 - s1) / 3;
            b = (1 + (s1 * cos(hRad)) / cos(PI / 3 - hRad)) / 3;
            r = 1 - (g + b);
        }
        return [3 * i1 * r * 255, 3 * i1 * g * 255, 3 * i1 * b * 255, alpha1];
    }
    /**
     * For HSI, we use the direct angle calculation. I.e. atan2(beta, alpha). See wikipedia link. This is why we don't use
     * rgb2hexhue.
     */
    function rgb2hsi(r255, g255, b255) {
        // See https://en.wikipedia.org/wiki/HSL_and_HSV#Hue_and_chroma
        // See https://en.wikipedia.org/wiki/HSL_and_HSV#Lightness
        const r1 = r255 / 255;
        const g1 = g255 / 255;
        const b1 = b255 / 255;
        const i1 = (r1 + g1 + b1) / 3;
        if (r1 == g1 && g1 == b1) {
            return [0, 0, i1];
        }
        else {
            const alpha = (1 / 2) * (2 * r1 - g1 - b1);
            const beta = (sqrt(3) / 2) * (g1 - b1);
            const hRad = atan2(beta, alpha);
            const min1 = min(r1, g1, b1);
            const s1 = 1 - min1 / i1;
            return [(hRad < 0 ? 2 * PI + hRad : hRad) * RAD2DEG, s1, i1];
        }
    }
    _input.hsi = hsi2rgb;
    interpolators.hsv = interpolators.hsl = interpolators.hsi = interpolators.lch = interpolators.hcg = function interpolate_hsx(color1, color2, f, m) {
        const [a1, b1, c1] = color1[m]();
        const [a2, b2, c2] = color2[m]();
        function lerpHue(hue1, hue2, f) {
            const dh = norm360(hue2 - hue1 + 180) - 180;
            return hue1 + f * dh;
        }
        return color(("h" == m.charAt(0) ? lerpHue : lerp)(a1, a2, f), lerp(b1, b2, f), ("h" == m.charAt(2) ? lerpHue : lerp)(c1, c2, f), m);
    };
    function indexOfMax(arr, f) {
        let maxValue = -Infinity, maxValueIndex = -1;
        for (let i = 0; i < arr.length; i++) {
            const value = f(arr[i]);
            if (value > maxValue) {
                maxValue = value;
                maxValueIndex = i;
            }
        }
        return maxValueIndex;
    }
    function withMax(arr, f) {
        return arr[indexOfMax(arr, f)];
    }

    /**
     * Returns a function, that, as long as it continues to be invoked, will not
     * be triggered. The function will be called after it stops being called for
     * N milliseconds. If `immediate` is passed, trigger the function on the
     * leading edge, instead of the trailing. The function also has a property 'clear' 
     * that is a function which will clear the timer to prevent previously scheduled executions. 
     *
     * @source underscore.js
     * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/
     * @param {Function} function to wrap
     * @param {Number} timeout in ms (`100`)
     * @param {Boolean} whether to execute at the beginning (`false`)
     * @api public
     */
    function debounce(func, wait, immediate){
      var timeout, args, context, timestamp, result;
      if (null == wait) wait = 100;

      function later() {
        var last = Date.now() - timestamp;

        if (last < wait && last >= 0) {
          timeout = setTimeout(later, wait - last);
        } else {
          timeout = null;
          if (!immediate) {
            result = func.apply(context, args);
            context = args = null;
          }
        }
      }
      var debounced = function(){
        context = this;
        args = arguments;
        timestamp = Date.now();
        var callNow = immediate && !timeout;
        if (!timeout) timeout = setTimeout(later, wait);
        if (callNow) {
          result = func.apply(context, args);
          context = args = null;
        }

        return result;
      };

      debounced.clear = function() {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
      };
      
      debounced.flush = function() {
        if (timeout) {
          result = func.apply(context, args);
          context = args = null;
          
          clearTimeout(timeout);
          timeout = null;
        }
      };

      return debounced;
    }
    // Adds compatibility for ES modules
    debounce.debounce = debounce;

    var debounce_1 = debounce;

    const PI$1 = Math.PI;
    const TAU = 2 * PI$1;
    /** Use rollup-plugin-replace or similar to avoid error in browser. */
    // @ts-ignore
    const NLA_DEBUG = "development" != "production";
    const NLA_PRECISION = 1 / (1 << 26);
    console.log("NLA_PRECISION", NLA_PRECISION);
    console.log("NLA_DEBUG", NLA_DEBUG);
    let oldConsole = undefined;
    function disableConsole() {
        oldConsole = console.log;
        console.log = function () { };
    }
    function enableConsole() {
        if (oldConsole) {
            console.log = oldConsole;
        }
    }
    function hasConstructor(instance, cons) {
        return instance.constructor == cons;
    }
    function assertInst(what, ...objs) {
        var _a, _b;
        {
            for (let i = 0; i < objs.length; i++) {
                if (!(objs[i] instanceof what)) {
                    throw new Error("assertInst objs[" +
                        i +
                        "] is not a " +
                        what.prototype.name +
                        ". " + ((_b = (_a = objs[i]) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) +
                        objs[i]);
                }
            }
        }
        return true;
    }
    function assertNumbers(...numbers) {
        {
            for (let i = 0; i < numbers.length; i++) {
                if ("number" !== typeof numbers[i]) {
                    throw new Error(`assertNumbers arguments[${i}] is not a number. ${typeof numbers[i]} == typeof ${numbers[i]}`);
                }
            }
        }
        return true;
    }
    function assertInts(...numbers) {
        {
            for (let i = 0; i < numbers.length; i++) {
                if ("number" !== typeof numbers[i] || numbers[i] % 1 !== 0) {
                    throw new Error(`assertNumbers arguments[${i}] is not an int. ${typeof numbers[i]} == typeof ${numbers[i]}`);
                }
            }
        }
        return true;
    }
    function assert(value, ...messages) {
        if ( !value) {
            throw new Error("assert failed: " +
                messages
                    .map((message) => "function" === typeof message ? message() : message || "")
                    .join("\n"));
        }
        return true;
    }
    function assertNever(value) {
        throw new Error();
    }
    function assertf(f, ...messages) {
        if ( !f()) {
            throw new Error("assertf failed: " +
                f.toString() +
                messages
                    .map((message) => "function" === typeof message ? message() : message || "")
                    .join("\n"));
        }
    }
    function lerp$1(a, b, t) {
        return a * (1 - t) + b * t;
    }
    function lerpInv$1(a, b, t) {
        return (t - a) / (b - a);
    }
    const originalNumberToString = Number.prototype.toString;
    Number.prototype.toString = function (radix) {
        if (PI$1 == this) {
            return "PI";
        }
        return originalNumberToString.call(this, radix);
    };
    const eq0 = (x, EPS = NLA_PRECISION) => Math.abs(x) <= EPS;
    const eq = (x, y, EPS = NLA_PRECISION) => Math.abs(x - y) <= EPS;
    const lt = (x, y, EPS = NLA_PRECISION) => x - y < -EPS;
    const gt = (x, y, EPS = NLA_PRECISION) => y - x < -EPS;
    const le = (x, y, EPS = NLA_PRECISION) => x - y <= EPS;
    const ge = (x, y, EPS = NLA_PRECISION) => y - x <= EPS;
    const eqAngle = (x, y) => zeroAngle(x - y);
    const zeroAngle = (x) => ((x % (2 * Math.PI)) + 2 * Math.PI + NLA_PRECISION) % (2 * Math.PI) <
        2 * NLA_PRECISION;
    const snap = (x, to) => Math.abs(x - to) <= NLA_PRECISION ? to : x;
    const snap2 = (x, ...to) => to.reduce((x, to) => (Math.abs(x - to) <= NLA_PRECISION ? to : x), x);
    const snapEPS = (x, EPS, ...to) => to.reduce((x, to) => (Math.abs(x - to) <= EPS ? to : x), x);
    const snap0 = (x, EPS = NLA_PRECISION) => Math.abs(x) <= EPS ? 0 : x;
    const canonAngle = (x) => ((x % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);
    /** @deprecated */ const eq02 = eq0;
    /** @deprecated */ const eq2 = eq;
    /**
     * Decimal adjustment of a number.
     *
     * @param f  The type of adjustment.
     * @param value The number.
     * @param exp The exponent (the 10 logarithm of the adjustment base).
     * @returns The adjusted value.
     */
    function decimalAdjust(f, value, exp) {
        // If the exp is undefined or zero...
        if (typeof exp === "undefined" || +exp === 0) {
            return f(value);
        }
        value = +value;
        exp = +exp;
        // If the value is not a number or the exp is not an integer...
        if (isNaN(value) || !(typeof exp === "number" && exp % 1 === 0)) {
            return NaN;
        }
        // Shift
        let vs = value.toString().split("e");
        value = f(+(vs[0] + "e" + (vs[1] ? +vs[1] - exp : -exp)));
        // Shift back
        vs = value.toString().split("e");
        return +(vs[0] + "e" + (vs[1] ? +vs[1] + exp : exp));
    }
    const round10 = decimalAdjust.bind(undefined, Math.round);
    const floor10 = decimalAdjust.bind(undefined, Math.floor);
    const ceil10 = decimalAdjust.bind(undefined, Math.ceil);
    const GOLDEN_RATIO = (1 + Math.sqrt(5)) / 2;
    function mod(a, b) {
        return ((a % b) + b) % b;
    }
    function clamp$1(val, min, max) {
        assertNumbers(val, min, max);
        return Math.max(min, Math.min(max, val));
    }
    function between(val, min, max) {
        assertNumbers(val, min, max);
        return min <= val && val <= max;
    }
    function fuzzyBetween(val, min, max) {
        assertNumbers(val, min, max);
        return le(min, val) && le(val, max);
    }
    function mapPush(map, key, val) {
        const array = map.get(key);
        if (array) {
            array.push(val);
        }
        else {
            map.set(key, [val]);
        }
    }
    function fuzzyUniques(vals) {
        const round = (val) => Math.floor(val * (1 << 26)) / (1 << 26);
        const map = new Map();
        for (let i = 0; i < vals.length; i++) {
            const val = vals[i], roundVal = round(val);
            let key;
            if (!map.has(roundVal) &&
                !((key = map.get(roundVal - 1 / (1 << 26))) && eq(key, val)) &&
                !((key = map.get(roundVal + 1 / (1 << 26))) && eq(key, val))) {
                map.set(roundVal, val);
            }
        }
        return Array.from(map.values());
    }
    function fuzzyUniquesF(vals, f) {
        const round = (val) => Math.floor(val * (1 << 26)) / (1 << 26);
        const map = new Map();
        for (let i = 0; i < vals.length; i++) {
            const val = vals[i], roundVal = round(f(val));
            let key;
            if (!map.has(roundVal) &&
                !((key = map.get(roundVal - 1 / (1 << 26))) && eq(key, f(val))) &&
                !((key = map.get(roundVal + 1 / (1 << 26))) && eq(key, f(val)))) {
                map.set(roundVal, val);
            }
        }
        return Array.from(map.values());
    }
    function addOwnProperties(target, props, ...exclude) {
        Object.getOwnPropertyNames(props).forEach((key) => {
            //console.log(props, key)
            if (!exclude.includes(key)) {
                if (target.hasOwnProperty(key)) {
                    console.warn("target ", target, " already has property ", key, target[key]);
                }
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(props, key));
            }
        });
    }
    let defaultRoundFunction = (x) => x; // Math.round10(x, -4)
    function forceFinite(val) {
        const valNum = parseFloat(val.replace(",", ".").replace(/^[^0-9,\.\-]/, ""));
        return Number.isFinite(valNum) ? valNum : 0;
    }
    const MINUS = (a, b) => a - b;
    function floatHashCode(f) {
        return ~~(f * (1 << 28));
    }
    /**
     * combinations(2) will generate
     * [0,0] [0,1] [1,1] [0,2] [1,2] [2,2]
     */
    function* combinations(n) {
        for (let i = 0; i < n; i++) {
            for (let j = i; j < n; j++) {
                yield { i: i, j: j };
            }
        }
    }
    /* The arithmetic-geometric mean of two non-negative numbers */
    function arithmeticGeometricMean(x, y) {
        assertf(() => lt(0, x));
        assertf(() => lt(0, y));
        let a = x, g = y;
        let i = 30;
        while (i-- && a != g) {
            [a, g] = [(a + g) / 2, Math.sqrt(a * g)];
        }
        assert(i != -1);
        return a;
    }
    /**
     * One degree in radians. Use like Math.sin(30 * DEG).
     */
    const DEG = 0.017453292519943295;
    function rad2deg(rad) {
        //  discuss at: http://phpjs.org/functions/deg2rad/
        // original by: Enrique Gonzalez
        // improved by: Thomas Grainger (http://graingert.co.uk)
        //   example 1: deg2rad(45)
        //   returns 1: 0.7853981633974483
        return rad / DEG;
    }
    /**
     * numberToStr(2/3) == '0.6p'
     * numberToStr(7/12) == '0.583p'
     * numberToStr(2/7) == '0.285714pppppp'
     * numberToStr(NLA_PRECISION) == '0+'
     * numberToStr(-NLA_PRECISION) == '0-'
     * numberToStr(2-NLA_PRECISION) == '2-'
     * numberToStr(0) == '0='
     *
     */
    function numberToStr(value, length) {
        let minAbsDiff = Infinity, closestValue = undefined, closestValueStr = undefined;
        function test(testValue, testValueStr) {
            const absDiff = Math.abs(testValue - value);
            console.log(testValue, testValueStr, absDiff);
            if (absDiff < minAbsDiff) {
                minAbsDiff = absDiff;
                closestValue = testValue;
                closestValueStr = testValueStr;
            }
            return 0 == absDiff;
        }
        function overline(str) {
            return str
                .split("")
                .map((c) => c + "\u0304")
                .join("");
        }
        if (test(parseFloat(value.toFixed(length)), value.toFixed(length)))
            return closestValueStr + "=";
        const valueStr = "" + value;
        const toDecimal = valueStr.substr(0, valueStr.indexOf(".") + 1);
        const decimals = valueStr.substr(valueStr.indexOf(".") + 1);
        for (let startPos = 0; startPos < length; startPos++) {
            for (let endPos = startPos + 1; endPos <= length; endPos++) {
                const prefixDecimals = decimals.substr(0, startPos);
                const period = decimals.substr(startPos, endPos);
                const testValue = parseFloat(toDecimal +
                    prefixDecimals +
                    period.repeat(Math.ceil((17 - startPos) / period.length)));
                if (test(testValue, toDecimal + prefixDecimals + overline(period)))
                    return closestValueStr + "=";
            }
        }
        return closestValueStr + (closestValue < value ? "-" : "+");
    }
    function time(f) {
        const start = performance.now();
        f();
        return performance.now() - start;
    }
    Object.map = function (o, f, context = undefined) {
        const result = {};
        for (const key in o) {
            result[key] = f.call(context, o[key], key, o);
        }
        return result;
    };
    function arrayHashCode(arr) {
        let result = 0;
        for (let i = 0; i < arr.length; i++) {
            result = (result * 31 + hashCode(arr[i])) | 0;
        }
        return result | 0;
    }
    function hashCode(o) {
        if ("number" === typeof o || undefined === o) {
            return o | 0;
        }
        else if (Array.isArray(o)) {
            return arrayHashCode(o);
        }
        else {
            return null === o ? 0 : o.hashCode();
        }
    }
    String.prototype.capitalizeFirstLetter = function () {
        return this.charAt(0).toUpperCase() + this.slice(1);
    };
    String.prototype.equals = function (x) {
        return this == x;
    };
    function SCE(o) {
        switch (typeof o) {
            case "undefined":
                return "undefined";
            case "function":
                return o.toString();
            case "number":
                return "" + o;
            case "string":
                return JSON.stringify(o);
            case "object":
                if (null == o) {
                    return "null";
                }
                else {
                    return o.sce;
                }
            default:
                throw new Error();
        }
    }
    function STR(o) {
        return o.str;
    }
    Object.defineProperty(Object.prototype, "sce", {
        get: function () {
            return this.toSource();
        },
        configurable: true,
    });
    Object.defineProperty(Object.prototype, "str", {
        get: function () {
            return this.toString();
        },
        configurable: true,
    });
    function ilog(x) {
        console.log(x);
        return x;
    }
    //const NLA = {}
    //for (let key in ARRAY_UTILITIES) {
    //    const nlaName = 'array' + key.capitalizeFirstLetter()
    //    assert(!NLA[nlaName])
    //    NLA[nlaName] = (arr, ...rest) => ARRAY_UTILITIES[key].apply(arr, rest)
    //}
    /**
     * solves x² + px + q = 0
     */
    function pqFormula(p, q) {
        // 4 times the discriminant:in
        const discriminantX4 = (p * p) / 4 - q;
        if (discriminantX4 < -NLA_PRECISION) {
            return [];
        }
        else if (discriminantX4 <= NLA_PRECISION) {
            return [-p / 2];
        }
        else {
            const root = Math.sqrt(discriminantX4);
            return [-p / 2 - root, -p / 2 + root];
        }
    }
    /**
     * from pomax' library
     * solves ax³ + bx² + cx + d = 0
     * This function from pomax' utils
     * @returns 0-3 roots
     */
    function solveCubicReal2(a, b, c, d) {
        if (eq0(a)) {
            if (eq0(b)) {
                return [-d / c];
            }
            else {
                return pqFormula(c / b, d / b);
            }
        }
        const divisor = a;
        a = b / divisor;
        b = c / divisor;
        c = d / divisor;
        const p = (3 * b - a * a) / 3, pDiv3 = p / 3, pDiv3Pow3 = pDiv3 * pDiv3 * pDiv3, q = (2 * a * a * a - 9 * a * b + 27 * c) / 27, qDiv2 = q / 2, discriminant = qDiv2 * qDiv2 + pDiv3Pow3;
        // 18abcd - 4b³d + b²c² - 4ac³ - 27a²d²
        if (discriminant < -NLA_PRECISION / 8) {
            const r = Math.sqrt(-pDiv3Pow3), t = -q / (2 * r), cosphi = t < -1 ? -1 : t > 1 ? 1 : t, // clamp t to [-1;1]
            phi = Math.acos(cosphi), t1 = 2 * Math.cbrt(r);
            const x1 = t1 * Math.cos(phi / 3) - a / 3;
            const x2 = t1 * Math.cos((phi + 2 * Math.PI) / 3) - a / 3;
            const x3 = t1 * Math.cos((phi + 4 * Math.PI) / 3) - a / 3;
            return [x1, x2, x3];
        }
        else if (discriminant <= NLA_PRECISION / 8) {
            if (0 == qDiv2) {
                // TODO: compare with likeO?
                return [-a / 3];
            }
            const u1 = qDiv2 < 0 ? Math.cbrt(-qDiv2) : -Math.cbrt(qDiv2);
            const x1 = 2 * u1 - a / 3;
            const x2 = -u1 - a / 3;
            return [x1, x2];
        }
        else {
            const sd = Math.sqrt(discriminant);
            const u1 = Math.cbrt(-qDiv2 + sd);
            const v1 = Math.cbrt(qDiv2 + sd);
            return [u1 - v1 - a / 3];
        }
    }
    function checkDerivate(f, df, a, b, maxFaults = 0) {
        const eps = 1e-4;
        let faults = 0;
        for (let t = a; t < b; t += (b - a) / 100) {
            const dfdt = df(t);
            const df2 = (f(t + eps) - f(t)) / eps;
            assert((faults += +!eq2(df2, dfdt, 0.1)) <= maxFaults, `df2 == ${df2} != ${df(t)} = df(t)`);
        }
    }
    function bisect$1(f, a, b, steps) {
        assert(a < b);
        let fA = f(a), fB = f(b);
        assert(fA * fB < 0);
        while (steps--) {
            const c = (b + a) / 2;
            const fC = f(c);
            if (Math.sign(fA) == Math.sign(fC)) {
                a = c;
                fA = fC;
            }
            else {
                b = c;
                fB = fC;
            }
        }
        assert(a <= (b + a) / 2);
        assert(b >= (b + a) / 2);
        return lerp$1(a, b, 0.5);
    }
    function callsce(name, ...params) {
        return name + "(" + params.map(SCE).join(",") + ")";
    }
    function removeJSComments(str) {
        const SPLITTER = /\/\/[^\r\n]+(?:\r\n|\n\r|\r|\n|$)|\/\*(?:[^*]|\*[^/])+\*\/|"(?:[^"\\]|\\.)+"|'(?:[^'\\]|\\.)+'|(?:`|})(?:[^`\$\\]|\$[^{]|\\.)+(?:`|\${)|(?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/)|[^`"']/g;
        return str.replace(SPLITTER, (x) => x.startsWith("//") || x.startsWith("/*") ? "" : x);
    }

    function arraySwap(arr, i, j) {
        const temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    function arrayCopy(src, sstart, dst, dstart, length) {
        assertInts(sstart, dstart, length);
        dstart += length;
        length += sstart;
        while (length-- > sstart) {
            dst[--dstart] = src[length];
        }
        return dst;
    }
    /**
     * Copies a number of items from one array to another, with a definable step size between items in the source and
     * destination array.
     *
     * @param src The source array.
     * @param sstart The location of the first item in the source array.
     * @param sstep The offset between items in the source array.
     * @param dst The destination array.
     * @param dstart The location of the first item in the destination array.
     * @param dstep The offset between items in the destination array.
     * @param count The number of items to copy.
     */
    function arrayCopyStep(src, sstart, sstep, dst, dstart, dstep, count) {
        let srcIndex = sstart + count * sstep;
        let dIndex = dstart + count * dstep;
        while (srcIndex > sstart) {
            dst[(dIndex -= dstep)] = src[(srcIndex -= sstep)];
        }
    }
    /**
     * Copies a number of contiguous, evenly-spaced blocks from one array to another.
     *
     * @param src The source array.
     * @param sstart The start of the first block in the source array.
     * @param sstep The offset from the start of one block to the start of the next block in the source array.
     * @param dst The destination array.
     * @param dstart The start of the first block in the destination array.
     * @param dstep The offset from the start of one block to the start of the next block in the destination array.
     * @param blockSize The length of one block.
     * @param blockCount The number of blocks to copy.
     */
    function arrayCopyBlocks(src, sstart, sstep, dst, dstart, dstep, blockSize, blockCount) {
        for (let i = 0; i < blockCount; i++) {
            arrayCopy(src, sstart + sstep * i, dst, dstart + dstep * i, blockSize);
        }
    }
    function arrayRange(startInclusive, endExclusive, step = 1) {
        assertNumbers(startInclusive, step);
        //console.log(Math.ceil((endExclusive - startInclusive) / step))
        const arrLength = Math.ceil((endExclusive - startInclusive) / step);
        const result = new Array(arrLength); // '- startInclusive' so that chunk in the last row will also be selected, even
        // if the row is not complete
        for (let i = startInclusive, index = 0; index < arrLength; i += step, index++) {
            result[index] = i;
        }
        return result;
    }
    /**
     * Returns a number of evenly-spaced values between t0 and t1 (inclusive).
     * @param t0 First value.
     * @param t1 Last value.
     * @param count Total number of values.
     */
    function arraySamples(t0, t1, count = 64) {
        return arrayFromFunction(count, (i) => lerp$1(t0, t1, i / (count - 1)));
    }
    function arrayFromFunction(length, f) {
        assertNumbers(length);
        assert("function" == typeof f);
        const a = new Array(length);
        let elIndex = length;
        while (elIndex--) {
            a[elIndex] = f(elIndex, length);
        }
        return a;
    }
    /**
     * Return the element in the array for which f(el) is highest. There is no `withMin`, call withMax(x => -f(x))
     * instead.
     *
     * @param arr The array to search.
     * @param f
     */
    function withMax$1(arr, f) {
        let i = arr.length, result = undefined, maxVal = -Infinity;
        while (i--) {
            const el = arr[i], val = f(el, i, arr);
            if (val > maxVal) {
                maxVal = val;
                result = el;
            }
        }
        return result;
    }
    /**
     * Returns the sum of the absolute values of the components of arr vector.
     * E.g. V(1, -2, 3) === abs(1) + abs(-2) + abs(3) === 1 + 2 + 3 === 6
     */
    function absSum(arr) {
        let i = arr.length;
        let result = 0;
        while (i--) {
            result += Math.abs(arr[i]);
        }
        return result;
    }
    function emod(arr, i) {
        return arr[mod(i, arr.length)];
    }
    function sliceStep(arr, start, end, step, chunkSize = 1) {
        assertNumbers(start, step);
        start < 0 && (start = arr.length + start);
        end <= 0 && (end = arr.length + end);
        const resultLength = Math.ceil((end - start) / step);
        const result = new Array(resultLength); // '- start' so that chunk in the last row
        // will also be selected, even if the row is
        // not complete
        let index = 0;
        for (let i = start; i < end; i += step) {
            for (let j = i; j < Math.min(i + chunkSize, end); j++) {
                result[index++] = arr[j];
            }
        }
        assert(resultLength == index);
        return result;
    }
    function splicePure(arr, start = 0, deleteCount = 0, ...items) {
        const arrayLength = arr.length;
        const _deleteCount = deleteCount < 0 ? 0 : deleteCount;
        let _start;
        if (start < 0) {
            if (Math.abs(start) > arrayLength) {
                _start = 0;
            }
            else {
                _start = arrayLength + start;
            }
        }
        else if (start > arrayLength) {
            _start = arrayLength;
        }
        else {
            _start = start;
        }
        const newLength = arr.length - _deleteCount + items.length;
        const result = new Array(newLength);
        let dst = newLength;
        let src = arr.length;
        while (src-- > _start + _deleteCount) {
            result[--dst] = arr[src];
        }
        src = items.length;
        while (src--) {
            result[--dst] = items[src];
        }
        src = _start;
        while (src--) {
            result[--dst] = items[src];
        }
        return result;
    }
    function arrayEquals(arr, obj) {
        if (arr === obj)
            return true;
        if (Object.getPrototypeOf(obj) !== Array.prototype)
            return false;
        if (arr.length !== obj.length)
            return false;
        for (let i = 0; i < arr.length; i++) {
            if (!equals(arr[i], obj[i]))
                return false;
        }
        return true;
    }
    function equals(a, b) {
        return Array.isArray(a)
            ? arrayEquals(a, b)
            : "object" === typeof a
                ? a.equals(b)
                : a === b;
    }
    /**
     * arr.map(f).filter((x) => x)
     */
    function mapFilter(arr, f) {
        const length = arr.length;
        const result = [];
        for (let i = 0; i < length; i++) {
            if (i in arr) {
                const val = f(arr[i], i, arr);
                if (val) {
                    result.push(val);
                }
            }
        }
        return result;
    }
    function clear(arr, ...newItems) {
        return arr.splice(0, arr.length, ...newItems);
    }
    /**
     *
     * @returns function concat.apply([], arr)
     */
    function concatenated(arr) {
        return Array.prototype.concat.apply([], arr);
    }
    function min$1(arr) {
        let i = arr.length, max = Infinity;
        while (i--) {
            const val = arr[i];
            if (max > val)
                max = val;
        }
        return max;
    }
    function max$1(arr) {
        // faster and no limit on array size, see https://jsperf.com/math-max-apply-vs-loop/2
        let i = arr.length, max = -Infinity;
        while (i--) {
            const val = arr[i];
            if (max < val)
                max = val;
        }
        return max;
    }
    function indexWithMax(arr, f) {
        if (arr.length == 0) {
            return -1;
        }
        let i = arr.length, result = -1, maxVal = -Infinity;
        while (i--) {
            const val = f(arr[i], i, arr);
            if (val > maxVal) {
                maxVal = val;
                result = i;
            }
        }
        return result;
    }
    function sum(arr) {
        let i = arr.length;
        let result = 0;
        while (i--) {
            result += arr[i];
        }
        return result;
    }
    function sumInPlaceTree(arr) {
        if (0 == arr.length)
            return 0;
        let l = arr.length;
        while (l != 1) {
            const lHalfFloor = Math.floor(l / 2);
            const lHalfCeil = Math.ceil(l / 2);
            for (let i = 0; i < lHalfFloor; i++) {
                arr[i] += arr[i + lHalfCeil];
            }
            l = lHalfCeil;
        }
        return arr[0];
    }
    function unique(arr) {
        const uniqueSet = new Set(arr);
        return Array.from(uniqueSet);
    }
    function remove(arr, o) {
        const index = arr.indexOf(o);
        if (index != -1) {
            arr.splice(index, 1);
            return true;
        }
        return false;
    }
    function removeIndex(arr, i) {
        const result = arr[i];
        arr.splice(i, 1);
        return result;
    }
    function bagRemoveIndex(arr, i) {
        const result = arr[i];
        if (i == arr.length - 1) {
            arr.pop();
        }
        else {
            arr[i] = arr.pop();
        }
        return result;
    }
    function removeMatch(arr, matcher) {
        const index = arr.findIndex(matcher);
        if (-1 != index) {
            return removeIndex(arr, index);
        }
    }
    function removeAll(arr, o) {
        let i = o.length;
        while (i--) {
            remove(arr, o[i]);
        }
    }
    function toggle(arr, o) {
        const index = arr.indexOf(o);
        if (index != -1) {
            arr.splice(index, 1);
            return false;
        }
        else {
            arr.push(o);
            return true;
        }
    }
    function bagToggle(arr, o) {
        const index = arr.indexOf(o);
        if (index != -1) {
            bagRemoveIndex(arr, index);
            return false;
        }
        else {
            arr.push(o);
            return true;
        }
    }
    function binaryIndexOf(arr, searchElement, cmp = (a, b) => a - b) {
        let minIndex = 0;
        let maxIndex = arr.length - 1;
        let currentIndex;
        let currentElement;
        while (minIndex <= maxIndex) {
            currentIndex = ((minIndex + maxIndex) / 2) | 0;
            currentElement = arr[currentIndex];
            if (cmp(currentElement, searchElement) < 0) {
                minIndex = currentIndex + 1;
            }
            else if (cmp(currentElement, searchElement) > 0) {
                maxIndex = currentIndex - 1;
            }
            else {
                return currentIndex;
            }
        }
        return -minIndex - 1;
    }
    function binaryInsert(arr, el, cmp = MINUS) {
        let minIndex = 0;
        let maxIndex = arr.length;
        let currentIndex;
        let currentElement;
        while (minIndex < maxIndex) {
            currentIndex = ~~((minIndex + maxIndex) / 2);
            currentElement = arr[currentIndex];
            if (cmp(currentElement, el) < 0) {
                minIndex = currentIndex + 1;
            }
            else {
                maxIndex = currentIndex;
            }
        }
        arr.splice(minIndex, 0, el);
    }
    function firstUnsorted(arr, cmp) {
        for (let i = 1; i < arr.length; i++) {
            if (cmp(arr[i - 1], arr[i]) > 0)
                return i;
        }
        return -1;
    }
    function getLast(arr) {
        return arr[arr.length - 1];
    }
    function setLast(arr, val) {
        return (arr[arr.length - 1] = val);
    }
    function removeIndexes(arr, indexes) {
        indexes.sort((a, b) => a - b);
        if (0 === indexes.length)
            return arr;
        if (1 === indexes.length) {
            arr.splice(indexes[0], 1);
            return arr;
        }
        let dstPos = indexes[0];
        let nextSkip = indexes[0];
        let indexesPos = 0;
        for (let srcPos = indexes[0]; srcPos < arr.length; srcPos++) {
            if (srcPos !== nextSkip) {
                arr[dstPos++] = arr[srcPos];
            }
            else {
                indexesPos++;
                if (indexesPos < indexes.length) {
                    nextSkip = indexes[indexesPos];
                }
                else {
                    arr.splice(dstPos, srcPos + 1 - dstPos);
                    return arr;
                }
            }
        }
        throw new Error("illegal state");
    }

    /**
     * Immutable 3d-vector/point.
     */
    class V3 {
        constructor(x, y, z) {
            this.x = x;
            this.y = y;
            this.z = z;
            assertNumbers(x, y, z);
        }
        static random() {
            return new V3(Math.random(), Math.random(), Math.random());
        }
        static parallel(a, b) {
            return a.dot(b) - a.length() * b.length();
        }
        /**
         * See http://math.stackexchange.com/questions/44689/how-to-find-a-random-axis-or-unit-vector-in-3d
         * @returns A random point on the unit sphere with uniform distribution across the surface.
         */
        static randomUnit() {
            const zRotation = Math.random() * 2 * Math.PI;
            const z = Math.random() * 2 - 1;
            const zRadius = Math.sqrt(1 - Math.pow(z, 2));
            return new V3(zRadius * Math.cos(zRotation), zRadius * Math.sin(zRotation), z);
        }
        //noinspection JSUnusedLocalSymbols
        /**
         * Documentation stub. You want {@see V3#sphere}
         */
        static fromAngles(theta, phi) {
            throw new Error();
        }
        static fromFunction(f) {
            return new V3(f(0), f(1), f(2));
        }
        static min(a, b) {
            return new V3(Math.min(a.x, b.x), Math.min(a.y, b.y), Math.min(a.z, b.z));
        }
        static max(a, b) {
            return new V3(Math.max(a.x, b.x), Math.max(a.y, b.y), Math.max(a.z, b.z));
        }
        static lerp(a, b, t) {
            return new V3(a.x * (1 - t) + b.x * t, a.y * (1 - t) + b.y * t, a.z * (1 - t) + b.z * t);
        }
        static fromArray(a) {
            return new V3(a[0], a[1], a[2]);
        }
        static angleBetween(a, b) {
            return a.angleTo(b);
        }
        static zip(f, ...args) {
            assert(f instanceof Function);
            return new V3(f.apply(undefined, args.map((x) => x.x)), f.apply(undefined, args.map((x) => x.y)), f.apply(undefined, args.map((x) => x.z)));
        }
        static normalOnPoints(a, b, c) {
            assertVectors(a, b, c);
            return a.to(b).cross(a.to(c));
        }
        static add(...vs) {
            assertVectors(...vs);
            let x = 0, y = 0, z = 0;
            let i = vs.length;
            while (i--) {
                x += vs[i].x;
                y += vs[i].y;
                z += vs[i].z;
            }
            return new V3(x, y, z);
        }
        static sub(...vs) {
            assertVectors(...vs);
            let x = vs[0].x, y = vs[0].y, z = vs[0].z;
            let i = vs.length;
            while (i--) {
                x -= vs[i].x;
                y -= vs[i].y;
                z -= vs[i].z;
            }
            return new V3(x, y, z);
        }
        /**
         * Pack an array of V3s into an array of numbers (Float32Array by default).
         *
         * @param v3arr source array
         * @param dest destination array. If provided, must be large enough to fit v3count items.
         * @param srcStart starting index in source array
         * @param destStart starting index in destination array
         * @param v3count Number of V3s to copy.
         * @returns Packed array.
         */
        static pack(v3arr, dest, srcStart = 0, destStart = 0, v3count = v3arr.length - srcStart) {
            //assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')
            const result = dest || new Float32Array(3 * v3count); // TODO
            assert(result.length - destStart >= v3count * 3, "dest.length - destStart >= v3count * 3", result.length, destStart, v3count * 3);
            let i = v3count, srcIndex = srcStart, destIndex = destStart;
            while (i--) {
                const v = v3arr[srcIndex++];
                result[destIndex++] = v.x;
                result[destIndex++] = v.y;
                result[destIndex++] = v.z;
            }
            return result;
        }
        static unpack(packedArray, dest, srcStart = 0, destStart = 0, v3count = (packedArray.length - srcStart) / 3) {
            //assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')
            dest = dest || new Array(v3count);
            assert(dest.length - destStart >= v3count, "dest.length - destStart >= v3count");
            let i = v3count, srcIndex = srcStart, destIndex = destStart;
            while (i--) {
                dest[destIndex++] = new V3(packedArray[srcIndex++], packedArray[srcIndex++], packedArray[srcIndex++]);
            }
            return dest;
        }
        static packXY(v3arr, dest, srcStart = 0, destStart = 0, v3count = v3arr.length - srcStart) {
            //assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')
            const result = dest || new Float32Array(2 * v3count);
            assert(result.length - destStart >= v3count, "dest.length - destStart >= v3count");
            let i = v3count, srcIndex = srcStart, destIndex = destStart;
            while (i--) {
                const v = v3arr[srcIndex++];
                result[destIndex++] = v.x;
                result[destIndex++] = v.y;
            }
            return result;
        }
        static unpackXY(src, dest, srcStart = 0, destStart = 0, v3count = Math.min(src.length / 2, (dest && dest.length) || Infinity) -
            destStart) {
            //assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')
            dest = dest || new Array(v3count);
            assert(dest.length - destStart >= v3count, "dest.length - destStart >= v3count");
            assert(src.length - srcStart >= v3count * 2, "dest.length - destStart >= v3count");
            let i = v3count, srcIndex = srcStart, destIndex = destStart;
            while (i--) {
                dest[destIndex++] = new V3(src[srcIndex++], src[srcIndex++], 0);
            }
            return dest;
        }
        static perturbed(v, delta) {
            return v.perturbed(delta);
        }
        static polar(radius, phi, z = 0) {
            return new V3(radius * Math.cos(phi), radius * Math.sin(phi), z);
        }
        /**
         *
         * @param longitude angle in XY plane
         * @param latitude "height"/z dir angle
         */
        static sphere(longitude, latitude, length = 1) {
            return new V3(length * Math.cos(latitude) * Math.cos(longitude), length * Math.cos(latitude) * Math.sin(longitude), length * Math.sin(latitude));
        }
        static inverseLerp(a, b, x) {
            const ab = a.to(b);
            return a.to(x).dot(ab) / ab.squared();
        }
        get [0]() {
            return this.x;
        }
        get [1]() {
            return this.y;
        }
        get [2]() {
            return this.z;
        }
        get u() {
            return this.x;
        }
        get v() {
            return this.y;
        }
        perturbed(delta = NLA_PRECISION * 0.8) {
            return this.map((x) => x + (Math.random() - 0.5) * delta);
        }
        *[Symbol.iterator]() {
            yield this.x;
            yield this.y;
            yield this.z;
        }
        e(index) {
            assert(index >= 0 && index < 3);
            return 0 == index ? this.x : 1 == index ? this.y : this.z;
        }
        negated() {
            return new V3(-this.x, -this.y, -this.z);
        }
        abs() {
            return new V3(Math.abs(this.x), Math.abs(this.y), Math.abs(this.z));
        }
        plus(a) {
            assertVectors(a);
            return new V3(this.x + a.x, this.y + a.y, this.z + a.z);
        }
        /**
         * Hadarmard product (or Schur product)
         * Element-wise multiplication of two vectors.
         * @see https://en.wikipedia.org/wiki/Hadamard_product_(matrices)
         *
         */
        schur(a) {
            return new V3(this.x * a.x, this.y * a.y, this.z * a.z);
        }
        /**
         * Element-wise division.
         */
        divv(a) {
            return new V3(this.x / a.x, this.y / a.y, this.z / a.z);
        }
        /**
         * See also {@link to} which is a.minus(this)
         */
        minus(a) {
            assertVectors(a);
            return new V3(this.x - a.x, this.y - a.y, this.z - a.z);
        }
        to(a) {
            assertVectors(a);
            return a.minus(this);
        }
        times(factor) {
            assertNumbers(factor);
            return new V3(this.x * factor, this.y * factor, this.z * factor);
        }
        div(a) {
            assertNumbers(a);
            return new V3(this.x / a, this.y / a, this.z / a);
        }
        /**
         * Dot product.
         * @see https://en.wikipedia.org/wiki/Dot_product
         */
        dot(a) {
            assertInst(V3, a);
            return this.x * a.x + this.y * a.y + this.z * a.z;
        }
        /**
         * Linearly interpolate
         */
        lerp(b, t) {
            assertVectors(b);
            assertNumbers(t);
            return V3.lerp(this, b, t);
        }
        squared() {
            return this.dot(this);
        }
        distanceTo(a) {
            assertVectors(a);
            //return this.minus(a).length()
            return Math.hypot(this.x - a.x, this.y - a.y, this.z - a.z);
        }
        distanceToSquared(a) {
            assertVectors(a);
            return this.minus(a).squared();
        }
        ///**
        // * See also {@see #setTo} for the individual
        // *
        // * @param v
        // */
        //assign(v) {
        //	assertVectors(v)
        //	this.x = v.x
        //	this.y = v.y
        //	this.z = v.z
        //}
        //
        ///**
        // * See also {@see #assign} for the V3 version
        // *
        // * @param x
        // * @param y
        // * @param z
        // */
        //setTo(x, y, z = 0) {
        //	this.x = x
        //	this.y = y
        //	this.z = z
        //}
        toSource() {
            return V3.NAMEMAP.get(this) || this.toString();
        }
        nonParallelVector() {
            const abs = this.abs();
            if (abs.x <= abs.y && abs.x <= abs.z) {
                return V3.X;
            }
            else if (abs.y <= abs.x && abs.y <= abs.z) {
                return V3.Y;
            }
            else {
                return V3.Z;
            }
        }
        slerp(b, t) {
            assertVectors(b);
            assertNumbers(t);
            const sin = Math.sin;
            const omega = this.angleTo(b);
            return this.times(sin((1 - t) * omega) / sin(omega)).plus(b.times(sin(t * omega) / sin(omega)));
        }
        min(b) {
            return new V3(Math.min(this.x, b.x), Math.min(this.y, b.y), Math.min(this.z, b.z));
        }
        max(b) {
            return new V3(Math.max(this.x, b.x), Math.max(this.y, b.y), Math.max(this.z, b.z));
        }
        equals(v) {
            return this == v || (this.x == v.x && this.y == v.y && this.z == v.z);
        }
        /**
         *
         * The cross product is defined as:
         * a x b = |a| * |b| * sin(phi) * n
         * where |.| is the euclidean norm, phi is the angle between the vectors
         * and n is a unit vector perpendicular to both a and b.
         *
         * The cross product is zero for parallel vectors.
         * @see https://en.wikipedia.org/wiki/Cross_product
         */
        cross(v) {
            return new V3(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x);
        }
        minElement() {
            return Math.min(this.x, this.y, this.z);
        }
        maxElement() {
            return Math.max(this.x, this.y, this.z);
        }
        toArray(n = 3) {
            return [this.x, this.y, this.z].slice(0, n);
        }
        /**
         * Get a perpendicular vector.
         * For vectors in the XY-Plane, returns vector rotated 90° CCW.
         */
        getPerpendicular() {
            if (eq0(this.x) && eq0(this.y)) {
                if (eq0(this.z)) {
                    throw new Error("zero vector");
                }
                // v is Vector(0, 0, v.z)
                return V3.Y;
            }
            return new V3(-this.y, this.x, 0);
        }
        //noinspection JSMethodCanBeStatic
        dim() {
            return 3;
        }
        els() {
            return [this.x, this.y, this.z];
        }
        angleXY() {
            return Math.atan2(this.y, this.x);
        }
        lengthXY() {
            return Math.hypot(this.x, this.y);
            //return Math.sqrt(this.x * this.x + this.y * this.y)
        }
        squaredXY() {
            return this.x * this.x + this.y * this.y;
        }
        xy() {
            return new V3(this.x, this.y, 0);
        }
        /**
         * Transform this vector element-wise by way of function f. Returns V3(f(x), f(y), f(z))
         * @param f function to apply to elements (number -> number)
         */
        map(f) {
            return new V3(f(this.x, "x"), f(this.y, "y"), f(this.z, "z"));
        }
        toString(roundFunction) {
            roundFunction = roundFunction || defaultRoundFunction;
            return (V3.NAMEMAP.get(this) ||
                "V(" + [this.x, this.y, this.z].map(roundFunction).join(", ") + ")"); //+ this.id
        }
        angleTo(b) {
            assert(1 == arguments.length);
            assertVectors(b);
            assert(!this.likeO());
            assert(!b.likeO());
            return Math.acos(Math.min(1, this.dot(b) / this.length() / b.length()));
        }
        /**
         *
         * phi = angle between A and B
         * alpha = angle between n and normal1
         *
         * A . B = ||A|| * ||B|| * cos(phi)
         * A x B = ||A|| * ||B|| * sin(phi) * n (n = unit vector perpendicular)
         * (A x B) . normal1 = ||A|| * ||B|| * sin(phi) * cos(alpha)
         */
        angleRelativeNormal(vector, normal1) {
            assert(2 == arguments.length);
            assertVectors(vector, normal1);
            assertf(() => normal1.hasLength(1));
            //assert(vector.isPerpendicularTo(normal1), 'vector.isPerpendicularTo(normal1)' + vector.sce + normal1.sce)
            //assert(this.isPerpendicularTo(normal1), 'this.isPerpendicularTo(normal1)' + this.dot(vector)) //
            // -0.000053600770598683675
            return Math.atan2(this.cross(vector).dot(normal1), this.dot(vector));
        }
        /**
         * Returns true iff this is parallel to vector, i.e. this * s == vector, where s is a positive or negative number,
         * using eq. Throw a DebugError
         * - if vector is not a Vector or
         * - if this has a length of 0 or
         * - if vector has a length of 0
         */
        isParallelTo(vector) {
            assertVectors(vector);
            assert(!this.likeO());
            assert(!vector.likeO());
            // a . b takes on values of +|a|*|b| (vectors same direction) to -|a|*|b| (opposite direction)
            // in both cases the vectors are parallel, so check if abs(a . b) == |a|*|b|
            const dot = this.dot(vector);
            return eq(this.squared() * vector.squared(), dot * dot);
        }
        isPerpendicularTo(vector) {
            assertVectors(vector);
            assert(!this.likeO(), "!this.likeO()");
            assert(!vector.likeO(), "!vector.likeO()");
            return eq0(this.dot(vector));
        }
        isReverseDirTo(other) {
            assertVectors(other);
            assert(!this.likeO());
            assert(!other.likeO());
            // a . b takes on values of +|a|*|b| (vectors same direction) to -|a|*|b| (opposite direction)
            // in both cases the vectors are parallel, so check if abs(a . b) == |a|*|b|
            const dot = this.dot(other);
            return eq(Math.sqrt(this.squared() * other.squared()), dot);
        }
        /**
         * Returns the length of this Vector, i.e. the euclidean norm.
         *
         * Note that the partial derivatives of the euclidean norm at point x are equal to the
         * components of the unit vector x.
         */
        length() {
            return Math.hypot(this.x, this.y, this.z);
            //return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
        }
        /**
         * Definition: V3.likeO == V3.like(V3.O)
         */
        likeO() {
            return this.like(V3.O);
        }
        /**
         * eq(this.x, obj.x) && eq(this.y, obj.y) && eq(this.z, obj.z)
         * @param obj
         */
        like(obj) {
            if (obj === this)
                return true;
            if (!(obj instanceof V3))
                return false;
            return eq(this.x, obj.x) && eq(this.y, obj.y) && eq(this.z, obj.z);
        }
        /**
         * equivalent to this.like(v) || this.negated().like(v)
         */
        likeOrReversed(v) {
            return eq(Math.abs(this.dot(v)), Math.sqrt(this.squared() * v.squared()));
        }
        /**
         * Returns a new unit Vector (.length() === 1) with the same direction as this vector. Throws a
         * DebugError if this has a length of 0.
         */
        unit() {
            assert(!this.likeO(), "cannot normalize zero vector");
            return this.div(this.length());
        }
        /**
         * Documentation stub. You want {@link unit}
         */
        normalized() {
            throw new Error("documentation stub. use .unit()");
        }
        /**
         * Returns a new V3 equal to this scaled so that its length is equal to newLength.
         *
         * Passing a negative newLength will flip the vector.
         */
        toLength(newLength) {
            assertNumbers(newLength);
            return this.times(newLength / this.length());
        }
        /**
         * Returns a new Vector which is the projection of this vector onto the passed vector.
         * Examples
         *
         * 	V(3, 4).projectedOn(V(1, 0)) // returns V(3, 0)
         * 	V(3, 4).projectedOn(V(2, 0)) // returns V(3, 0)
         * 	V(3, 4).projectedOn(V(-1, 0)) // returns V(-3, 0)
         * 	V(3, 4).projectedOn(V(0, 1)) // returns V(0, 4)
         * 	V(3, 4).projectedOn(V(1, 1)) // returns
         */
        projectedOn(b) {
            assertVectors(b);
            // https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2
            return b.times(this.dot(b) / b.dot(b));
        }
        rejectedFrom(b) {
            assertVectors(b);
            // https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2
            return this.minus(b.times(this.dot(b) / b.dot(b)));
        }
        rejectedFrom1(b1) {
            assertVectors(b1);
            assert(b1.hasLength(1));
            // https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2
            return this.minus(b1.times(this.dot(b1)));
        }
        /**
         * Returns the length of this vector rejected from the unit vector b.
         *
         *       /|
         * this / |    ^
         *     /__|    | b
         *      r
         *  Returns length of r (r === this.rejectedFrom(b))
         */
        rejectedLength(b) {
            assertVectors(b);
            return Math.sqrt(this.dot(this) - Math.pow(this.dot(b), 2) / b.dot(b));
        }
        /**
         * Returns the length of this vector rejected from the unit vector b1.
         *
         *       /|
         * this / |    ^
         *     /__|    | b1
         *      r
         *  Returns length of r (r === this.rejectedFrom(b1))
         */
        rejected1Length(b1) {
            assertVectors(b1);
            assert(b1.hasLength(1));
            return Math.sqrt(this.dot(this) - Math.pow(this.dot(b1), 2));
        }
        /**
         * Returns true iff the length() of this vector is equal to 'length', using eq
         * @example
         * V(3, 4).hasLength(5) === true
         * @example
         * V(1, 1).hasLength(1) === false
         */
        hasLength(length) {
            assertNumbers(length);
            return eq(length, this.length());
        }
        /**
         * Returns the sum of the absolute values of the components of this vector.
         * E.g. V(1, -2, 3) === abs(1) + abs(-2) + abs(3) === 1 + 2 + 3 === 6
         */
        absSum() {
            return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
        }
        /**
         * returns min(|x|, |y|, |z|)
         */
        minAbsElement() {
            return Math.min(Math.abs(this.x), Math.abs(this.y), Math.min(this.z));
        }
        /**
         * returns max(|x|, |y|, |z|)
         */
        maxAbsElement() {
            return Math.max(Math.abs(this.x), Math.abs(this.y), Math.abs(this.z));
        }
        maxAbsDim() {
            const xAbs = Math.abs(this.x), yAbs = Math.abs(this.y), zAbs = Math.abs(this.z);
            return xAbs >= yAbs ? (xAbs >= zAbs ? 0 : 2) : yAbs >= zAbs ? 1 : 2;
        }
        minAbsDim() {
            const xAbs = Math.abs(this.x), yAbs = Math.abs(this.y), zAbs = Math.abs(this.z);
            return xAbs < yAbs ? (xAbs < zAbs ? 0 : 2) : yAbs < zAbs ? 1 : 2;
        }
        withElement(dim, el) {
            assert(["x", "y", "z"].includes(dim), "" + dim);
            assertNumbers(el);
            if ("x" == dim) {
                return new V3(el, this.y, this.z);
            }
            if ("y" == dim) {
                return new V3(this.x, el, this.z);
            }
            return new V3(this.x, this.y, el);
        }
        hashCode() {
            function floatHashCode(f) {
                return ~~(f * (1 << 28));
            }
            return ~~((floatHashCode(this.x) * 31 + floatHashCode(this.y)) * 31 +
                floatHashCode(this.z));
        }
        /**
         * as sadjkh akjhs djkahsd kjahs k skjhdakjh dkjash dkjahs kjdhas kj dhkjahsd kjahs dkjahs dkjhas kjdkajs
         * hdkljhfkjahdslfghal dasd
         *
         * * asdjklas dasds
         */
        hashCodes() {
            //function floatHashCode(f) {
            //	return ~~(f * (1 << 28))
            //}
            // compare hashCode.floatHashCode
            // the following ops are equivalent to
            // floatHashCode((el - NLA_PRECISION) % (2 * NLA_PRECISION))
            // this results in the hashCode for the (out of 8 possible) cube with the lowest hashCode
            // the other 7 can be calculated by adding constants
            const xHC = ~~(this.x * (1 << 28) - 0.5), yHC = ~~(this.y * (1 << 28) - 0.5), zHC = ~~(this.z * (1 << 28) - 0.5), hc = ~~((xHC * 31 + yHC) * 31 + zHC);
            return [
                ~~hc,
                ~~(hc + 961),
                ~~(hc + 31),
                ~~(hc + 31 + 961),
                ~~(hc + 1),
                ~~(hc + 1 + 961),
                ~~(hc + 1 + 31),
                ~~(hc + 1 + 31 + 961),
            ];
        }
        //static areDisjoint(it: Iterable<V3>): boolean {
        //	const vSet = new CustomSet
        //	for (const v of it) {
        //		if (!v.equals(vSet.canonicalizeLike(v))) {
        //			// like value already in set
        //			return false
        //		}
        //	}
        //	return true
        //}
        compareTo(other) {
            if (this.x != other.x) {
                return this.x - other.x;
            }
            else if (this.y != other.y) {
                return this.y - other.y;
            }
            else {
                return this.z - other.z;
            }
        }
        compareTo2(other, eps = NLA_PRECISION) {
            if (!eq2(this.x, other.x, eps)) {
                return this.x - other.x;
            }
            else if (!eq2(this.y, other.y, eps)) {
                return this.y - other.y;
            }
            else if (!eq2(this.z, other.z, eps)) {
                return this.z - other.z;
            }
            else {
                return 0;
            }
        }
        toAngles() {
            return {
                theta: Math.atan2(this.y, this.x),
                phi: Math.asin(this.z / this.length()),
            };
        }
    }
    V3.O = new V3(0, 0, 0);
    V3.X = new V3(1, 0, 0);
    V3.Y = new V3(0, 1, 0);
    V3.Z = new V3(0, 0, 1);
    V3.XY = new V3(1, 1, 0);
    V3.XYZ = new V3(1, 1, 1);
    V3.INF = new V3(Infinity, Infinity, Infinity);
    V3.UNITS = [V3.X, V3.Y, V3.Z];
    V3.NAMEMAP = new javasetmap_ts.JavaMap()
        .set(V3.O, "V3.O")
        .set(V3.X, "V3.X")
        .set(V3.Y, "V3.Y")
        .set(V3.Z, "V3.Z")
        .set(V3.XYZ, "V3.XYZ")
        .set(V3.INF, "V3.INF");
    function V(a, b, c) {
        if (arguments.length == 3) {
            return new V3(parseFloat(a), parseFloat(b), parseFloat(c));
        }
        else if (arguments.length == 2) {
            return new V3(parseFloat(a), parseFloat(b), 0);
        }
        else if (arguments.length == 1) {
            if (typeof a == "object") {
                if (a instanceof V3) {
                    // immutable, so
                    return a;
                }
                else if (a instanceof Array ||
                    a instanceof Float32Array ||
                    a instanceof Float64Array) {
                    if (2 == a.length) {
                        return new V3(parseFloat(a[0]), parseFloat(a[1]), 0);
                    }
                    else if (3 == a.length) {
                        return new V3(parseFloat(a[0]), parseFloat(a[1]), parseFloat(a[2]));
                    }
                }
                else if ("x" in a && "y" in a) {
                    return new V3(parseFloat(a.x), parseFloat(a.y), "z" in a ? parseFloat(a.z) : 0);
                }
            }
        }
        throw new Error("invalid arguments" + arguments);
    }

    const P3YZ = { normal1: V3.X, w: 0 };
    const P3ZX = { normal1: V3.Y, w: 0 };
    const P3XY = { normal1: V3.Z, w: 0 };
    class Transformable {
        mirror(plane) {
            return this.transform(M4.mirror(plane));
        }
        mirroredX() {
            return this.mirror(P3YZ);
        }
        mirrorY() {
            return this.mirror(P3ZX);
        }
        mirrorZ() {
            return this.mirror(P3XY);
        }
        project(plane) {
            return this.transform(M4.project(plane));
        }
        projectXY() {
            return this.transform(M4.project(P3XY));
        }
        projectYZ() {
            return this.transform(M4.project(P3YZ));
        }
        projectZX() {
            return this.transform(M4.project(P3ZX));
        }
        translate(...args) {
            return this.transform(M4.translate.apply(undefined, args), callsce.call(undefined, ".translate", ...args));
        }
        scale(...args) {
            return this.transform(M4.scale.apply(undefined, args), callsce.call(undefined, ".scale", ...args));
        }
        rotateX(radians) {
            return this.transform(M4.rotateX(radians), `.rotateX(${radians})`);
        }
        rotateY(radians) {
            return this.transform(M4.rotateY(radians), `.rotateY(${radians})`);
        }
        rotateZ(radians) {
            return this.transform(M4.rotateZ(radians), `.rotateZ(${radians})`);
        }
        rotate(rotationCenter, rotationAxis, radians) {
            return this.transform(M4.rotateLine(rotationCenter, rotationAxis, radians), callsce(".rotate", rotationCenter, rotationAxis, radians));
        }
        rotateAB(from, to) {
            return this.transform(M4.rotateAB(from, to), callsce(".rotateAB", from, to));
        }
        eulerZXZ(alpha, beta, gamma) {
            throw new Error();
            //return this.transform(M4.eulerZXZ(alpha, beta, gamma))
        }
        shearX(y, z) {
            // prettier-ignore
            return this.transform(new M4([
                1, y, z, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1
            ]));
        }
        foo() {
            return this.transform(M4.FOO);
        }
        fooInv() {
            return this.transform(M4.FOO_INV);
        }
        visit(visitor, ...args) {
            let proto = Object.getPrototypeOf(this);
            // walk up the prototype chain until we find a defined function in o
            while (!visitor.hasOwnProperty(proto.constructor.name) &&
                proto !== Transformable.prototype) {
                proto = Object.getPrototypeOf(proto);
            }
            if (visitor.hasOwnProperty(proto.constructor.name)) {
                return visitor[proto.constructor.name].apply(this, args);
            }
            else {
                throw new Error("No implementation for " + this.constructor.name);
            }
        }
    }

    class Vector {
        constructor(v) {
            this.v = v;
            assertInst(Float64Array, v);
        }
        static fromFunction(dims, f) {
            assertNumbers(dims);
            const e = new Float64Array(dims);
            let i = dims;
            while (i--) {
                e[i] = f(i);
            }
            return new Vector(e);
        }
        static random(dims) {
            return Vector.fromFunction(dims, (i) => Math.random());
        }
        static from(...args) {
            assert(args[0] instanceof Float64Array ||
                args.every((a) => "number" == typeof a), 'args[0] instanceof Float64Array || args.every(a => "number" == typeof a)');
            return new Vector(args[0] instanceof Float64Array ? args[0] : Float64Array.from(args));
        }
        static Zero(dims) {
            assertNumbers(dims);
            let i = 0;
            const n = new Float64Array(dims);
            while (i--) {
                n[i] = 0;
            }
            return new Vector(n);
        }
        static Unit(dims, dir) {
            assertNumbers(dims, dir);
            let i = 0;
            const n = new Float64Array(dims);
            while (i--) {
                n[i] = +(i == dir); // +true === 1, +false === 0
            }
            return new Vector(n);
        }
        /**
         * Pack an array of Vectors into an array of numbers (Float32Array by default).
         *
         * @param vectors source array
         * @param dest destination array. If provided, must be large enough to fit v3count items.
         * @param srcStart starting index in source array
         * @param destStart starting index in destination array
         * @param vectorCount Number of V3s to copy.
         * @returns Packed array.
         */
        static pack(vectors, dest, srcStart = 0, destStart = 0, vectorCount = vectors.length - srcStart) {
            //assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')
            const dim = vectors[0].dim();
            const result = dest || new Float32Array(dim * vectorCount); // TODO
            assert(result.length - destStart >= vectorCount * dim, "dest.length - destStart >= v3count * 3", result.length, destStart, vectorCount * 3);
            let i = vectorCount, srcIndex = srcStart, destIndex = destStart;
            while (i--) {
                const v = vectors[srcIndex++];
                for (let d = 0; d < dim; d++) {
                    result[destIndex++] = v.v[d];
                }
            }
            return result;
        }
        static lerp(a, b, t) {
            assert(a.dim() == b.dim());
            const n = new Float64Array(a.v.length);
            let i = a.v.length;
            while (i--) {
                n[i] = a.v[i] * (1 - t) + b.v[i] * t;
            }
            return new Vector(n);
        }
        static add(...vs) {
            const dim = vs[0].v.length;
            const result = new Float64Array(dim);
            let i = vs.length;
            while (i--) {
                let d = dim;
                while (d--) {
                    result[d] += vs[i].v[d];
                }
            }
            return new Vector(result);
        }
        /**
         * Create a new 4D Vector from a V3 and a weight.
         * @param v3
         * @param weight
         */
        static fromV3AndWeight(v3, weight) {
            return new Vector(new Float64Array([v3.x * weight, v3.y * weight, v3.z * weight, weight]));
        }
        get x() {
            return this.v[0];
        }
        get y() {
            return this.v[1];
        }
        get z() {
            return this.v[2];
        }
        get w() {
            return this.v[3];
        }
        [Symbol.iterator]() {
            return this.v[Symbol.iterator]();
        }
        dim() {
            return this.v.length;
        }
        e(index) {
            if (0 > index || index >= this.v.length) {
                throw new Error("array index out of bounds");
            }
            return this.v[index];
        }
        plus(vector) {
            const u = this.v, v = vector.v;
            const n = new Float64Array(u.length);
            let i = u.length;
            while (i--) {
                n[i] = u[i] + v[i];
            }
            return new Vector(n);
        }
        minus(vector) {
            const u = this.v, v = vector.v;
            const n = new Float64Array(u.length);
            let i = u.length;
            while (i--) {
                n[i] = u[i] - v[i];
            }
            return new Vector(n);
        }
        times(factor) {
            const u = this.v;
            const n = new Float64Array(u.length);
            let i = u.length;
            while (i--) {
                n[i] = u[i] * factor;
            }
            return new Vector(n);
        }
        div(val) {
            const u = this.v;
            const n = new Float64Array(u.length);
            let i = u.length;
            while (i--) {
                n[i] = u[i] / val;
            }
            return new Vector(n);
        }
        dot(vector) {
            assert(this.dim == vector.dim, "passed vector must have the same dim");
            let result = 0;
            const u = this.v, v = vector.v;
            let i = u.length;
            while (i--) {
                result += u[i] * v[i];
            }
            return result;
        }
        cross(vector) {
            assertInst(Vector, vector);
            const n = new Float64Array(3);
            n[0] = this.v[1] * vector.v[2] - this.v[2] * vector.v[1];
            n[1] = this.v[2] * vector.v[0] - this.v[0] * vector.v[2];
            n[2] = this.v[0] * vector.v[1] - this.v[1] * vector.v[0];
            return new Vector(n);
        }
        schur(vector) {
            assertInst(Vector, vector);
            const u = this.v, v = vector.v;
            const n = new Float64Array(u.length);
            let i = u.length;
            while (i--) {
                n[i] = u[i] * v[i];
            }
            return new Vector(n);
        }
        equals(obj) {
            if (obj === this)
                return true;
            if (obj.constructor !== Vector)
                return false;
            if (this.v.length != obj.v.length)
                return false;
            let i = this.v.length;
            while (i--) {
                if (this.v[i] !== obj.v[i])
                    return false;
            }
            return true;
        }
        like(obj) {
            if (obj === this)
                return true;
            if (obj.constructor !== Vector)
                return false;
            if (this.v.length != obj.v.length)
                return false;
            let i = this.v.length;
            while (i--) {
                if (!eq(this.v[i], obj.v[i]))
                    return false;
            }
            return true;
        }
        map(f) {
            return new Vector(this.v.map(f));
        }
        toString(roundFunction) {
            roundFunction = roundFunction || ((v) => +v.toFixed(6));
            return "Vector(" + this.v.map(roundFunction).join(", ") + ")";
        }
        toSource() {
            return callsce("VV", ...this.v);
        }
        angleTo(vector) {
            assertInst(Vector, vector);
            assert(!this.isZero(), "!this.likeO()");
            assert(!vector.isZero(), "!vector.likeO()");
            return Math.acos(clamp$1(this.dot(vector) / this.length() / vector.length(), -1, 1));
        }
        /**
         * Returns true iff this is parallel to vector, using eq
         * Throw a DebugError
         * - if vector is not a Vector or
         * - if this has a length of 0 or
         * - if vector has a length of 0
         */
        isParallelTo(vector) {
            assertInst(Vector, vector);
            assert(!this.isZero(), "!this.likeO()");
            assert(!vector.isZero(), "!vector.likeO()");
            // a . b takes on values of +|a|*|b| (vectors same direction) to -|a|*|b| (opposite direction)
            // in both cases the vectors are paralle, so check if abs(a . b) == |a|*|b|
            return eq(Math.sqrt(this.lengthSquared() * vector.lengthSquared()), Math.abs(this.dot(vector)));
        }
        isPerpendicularTo(vector) {
            assertInst(Vector, vector);
            assert(!this.isZero(), "!this.likeO()");
            assert(!vector.isZero(), "!vector.likeO()");
            return eq0(this.dot(vector));
        }
        /**
         * Returns true iff the length of this vector is 0, as returned by NLA.isZero.
         * Definition: Vector.prototype.isZero = () => NLA.isZero(this.length())
         */
        isZero() {
            return eq0(this.length());
        }
        /*/ Returns the length of this Vector, i.e. the euclidian norm.*/
        length() {
            return Math.hypot.apply(undefined, this.v);
            //return Math.sqrt(this.lengthSquared())
        }
        lengthSquared() {
            let result = 0;
            const u = this.v;
            let i = u.length;
            while (i--) {
                result += u[i] * u[i];
            }
            return result;
        }
        /**
         * Returns a new unit Vector (.length() === 1) with the same direction as this vector. Throws a
         */
        unit() {
            const length = this.length();
            if (eq0(length)) {
                throw new Error("cannot normalize zero vector");
            }
            return this.div(this.length());
        }
        /**
         * Documentation stub. You want {@link unit}
         */
        normalized() {
            throw new Error("documentation stub. use .unit()");
        }
        asRowMatrix() {
            return new Matrix(this.v.length, 1, this.v);
        }
        asColMatrix() {
            return new Matrix(1, this.v.length, this.v);
        }
        /**
         * Returns a new Vector which is the projection of this vector onto the passed vector.
         * @example
         * VV(3, 4).projectedOn(VV(1, 0)) // returns VV(3, 0)
         * @example
         * VV(3, 4).projectedOn(VV(2, 0)) // returns VV(3, 0)
         * @example
         * VV(3, 4).projectedOn(VV(-1, 0)) // returns VV(-3, 0)
         * @example
         * VV(3, 4).projectedOn(VV(0, 1)) // returns VV(0, 4)
         * @example
         * VV(3, 4).projectedOn(VV(1, 1)) // returns
         */
        projectedOn(b) {
            assertInst(Vector, b);
            // https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2
            return b.times(this.dot(b) / b.dot(b));
        }
        rejectedOn(b) {
            assertInst(Vector, b);
            // https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2
            return this.minus(b.times(this.dot(b) / b.dot(b)));
        }
        to(a) {
            return a.minus(this);
        }
        /**
         * Returns true iff the length() of this vector is equal to 'length', using equals
         * E.g. NLA.V(3, 4).hasLength(5) === true
         * NLA.V(1, 1).hasLength(1) === false
         */
        hasLength(length) {
            assertNumbers(length);
            return eq(length, this.length());
        }
        V3() {
            //assert(this.dim() == 3)
            return new V3(this.v[0], this.v[1], this.v[2]);
        }
        /**
         * Project into 3 dimensions.
         */
        p3() {
            assert(this.v.length == 4);
            const w = this.v[3];
            return new V3(this.v[0] / w, this.v[1] / w, this.v[2] / w);
        }
        transposed() {
            return new Matrix(this.v.length, 1, this.v);
        }
    }
    function VV(...values) {
        return new Vector(new Float64Array(values));
    }
    function vArrGet(vArr, dim, i) {
        assert(vArr.length % dim == 0);
        return new Vector(Float64Array.prototype.slice.call(vArr, i * dim, (i + 1) * dim));
    }
    function vArrSet(vArr, i, vector) {
        const dim = vector.dim();
        assert(vArr.length % dim == 0);
        let d = dim;
        while (d--) {
            vArr[i * dim + d] = vector.v[d];
        }
    }

    class Matrix {
        constructor(width, height, m) {
            this.width = width;
            this.height = height;
            this.m = m;
            assertInts(width, height);
            assertf(() => 0 < width);
            assertf(() => 0 < height);
            assert(width * height == m.length, "width * height == m.length", width, height, m.length);
        }
        static random(width, height) {
            return Matrix.fromFunction(width, height, () => Math.random());
        }
        static fromFunction(width, height, f) {
            const m = new Float64Array(height * width);
            let elIndex = height * width;
            while (elIndex--) {
                m[elIndex] = f(Math.floor(elIndex / width), elIndex % width, elIndex);
            }
            return new Matrix(width, height, m);
        }
        static identityN(dim) {
            assertInts(dim);
            const m = new Float64Array(dim * dim);
            // Float64Arrays are init to 0
            let elIndex = dim * (dim + 1);
            while (elIndex) {
                elIndex -= dim + 1;
                m[elIndex] = 1;
            }
            return new Matrix(dim, dim, m);
        }
        /**
         * Create new dim x dim matrix equal to an identity matrix with rows/colums i and k swapped. Note that i and k
         * are 0-indexed.
         */
        static permutation(dim, i, k) {
            assertInts(dim, i, k);
            assertf(() => 0 <= i && i < dim);
            assertf(() => 0 <= k && k < dim);
            const m = new Float64Array(dim * dim);
            // Float64Array are init to 0
            let elIndex = dim * (dim + 1);
            while (elIndex) {
                elIndex -= dim + 1;
                m[elIndex] = 1;
            }
            m[i * dim + i] = 0;
            m[k * dim + k] = 0;
            m[i * dim + k] = 1;
            m[k * dim + i] = 1;
            return new Matrix(dim, dim, m);
        }
        static fromRowArrays(...rowArrays) {
            if (0 == rowArrays.length) {
                throw new Error("cannot have 0 vector");
            }
            const height = rowArrays.length;
            const width = rowArrays[0].length;
            const m = new Float64Array(height * width);
            arrayCopy(rowArrays[0], 0, m, 0, width);
            for (let rowIndex = 1; rowIndex < height; rowIndex++) {
                if (rowArrays[rowIndex].length != width) {
                    throw new Error("all row arrays must be the same length");
                }
                arrayCopy(rowArrays[rowIndex], 0, m, rowIndex * width, width);
            }
            return this.new(width, height, m);
        }
        static fromColVectors(colVectors) {
            return Matrix.fromColArrays(...colVectors.map((v) => v.v));
        }
        static forWidthHeight(width, height) {
            return new Matrix(width, height, new Float64Array(width * height));
        }
        static fromColArrays(...colArrays) {
            if (0 == colArrays.length) {
                throw new Error("cannot have 0 vector");
            }
            const width = colArrays.length;
            const height = colArrays[0].length;
            const m = new Float64Array(height * width);
            arrayCopyStep(colArrays[0], 0, 1, m, 0, width, height);
            for (let colIndex = 1; colIndex < width; colIndex++) {
                if (colArrays[colIndex].length != height) {
                    throw new Error("all col arrays must be the same length");
                }
                arrayCopyStep(colArrays[colIndex], 0, 1, m, colIndex, width, height);
            }
            return this.new(width, height, m);
        }
        static product(...args) {
            const [ms, result] = Array.isArray(args[0])
                ? [args[0], args[1]]
                : [args, undefined];
            if (0 == ms.length)
                throw new Error("Can't guess matrix size.");
            if (1 == ms.length)
                return Matrix.copy(ms[0], result);
            return Matrix.copy(ms.reduce((a, b) => a.times(b)), result);
        }
        /**
         * Numerically calculate all the partial derivatives of f at x0.
         *
         * @param f
         * @param x0
         * @param fx0 f(x0), pass it if you have it already
         * @param EPSILON
         */
        static jacobi(f, x0, fx0 = f(x0), EPSILON = 1e-6) {
            const jacobi = Matrix.forWidthHeight(x0.length, fx0.length);
            for (let colIndex = 0; colIndex < x0.length; colIndex++) {
                x0[colIndex] += EPSILON;
                const fx = f(x0);
                for (let rowIndex = 0; rowIndex < fx0.length; rowIndex++) {
                    const value = (fx[rowIndex] - fx0[rowIndex]) / EPSILON;
                    jacobi.setEl(rowIndex, colIndex, value);
                }
                x0[colIndex] -= EPSILON;
            }
            return jacobi;
        }
        static copy(src, result = src.new()) {
            assertInst(Matrix, src, result);
            assert(src.width == result.width);
            assert(src.height == result.height);
            assert(result != src, "result != src");
            const s = src.m, d = result.m;
            let i = s.length;
            while (i--) {
                d[i] = s[i];
            }
            return result;
        }
        static new(width, height, m) {
            return new Matrix(width, height, m);
        }
        copy() {
            return Matrix.copy(this);
        }
        e(rowIndex, colIndex) {
            assertInts(rowIndex, colIndex);
            assert(0 <= rowIndex && rowIndex < this.height, "rowIndex out of bounds " + rowIndex);
            assert(0 <= colIndex && colIndex < this.width, "colIndex out of bounds " + colIndex);
            return this.m[rowIndex * this.width + colIndex];
        }
        setEl(rowIndex, colIndex, val) {
            assertInts(rowIndex, colIndex);
            assert(0 <= rowIndex && rowIndex < this.height, "rowIndex out of bounds " + rowIndex);
            assert(0 <= colIndex && colIndex < this.width, "colIndex out of bounds " + colIndex);
            assertNumbers(val);
            this.m[rowIndex * this.width + colIndex] = val;
        }
        plus(m) {
            assert(this.width == m.width);
            assert(this.height == m.height);
            const r = this.new();
            let i = this.m.length;
            while (i--)
                r.m[i] = this.m[i] + m.m[i];
            return r;
        }
        minus(m) {
            assert(this.width == m.width);
            assert(this.height == m.height);
            const r = this.new();
            let i = this.m.length;
            while (i--)
                r.m[i] = this.m[i] - m.m[i];
            return r;
        }
        mulScalar(scalar) {
            assertNumbers(scalar);
            const r = this.new();
            let i = this.m.length;
            while (i--)
                r.m[i] = this.m[i] * scalar;
            return r;
        }
        divScalar(scalar) {
            assertNumbers(scalar);
            const r = this.new();
            let i = this.m.length;
            while (i--)
                r.m[i] = this.m[i] / scalar;
            return r;
        }
        new() {
            return new Matrix(this.width, this.height, new Float64Array(this.width * this.height));
        }
        toString(f, colNames, rowNames) {
            f = f || ((v) => v.toFixed(6));
            assert(typeof f(0) == "string", "" + typeof f(0));
            assert(!colNames || colNames.length == this.width);
            assert(!rowNames || rowNames.length == this.height);
            const rounded = Array.from(this.m).map(f);
            const rows = arrayFromFunction(this.height, (rowIndex) => rounded.slice(rowIndex * this.width, (rowIndex + 1) * this.width)); // select matrix row
            if (colNames) {
                rows.unshift(Array.from(colNames));
            }
            if (rowNames) {
                rows.forEach((row, rowIndex) => row.unshift(rowNames[rowIndex - (colNames ? 1 : 0)] || ""));
            }
            const colWidths = arrayFromFunction(this.width, (colIndex) => max$1(rows.map((row) => row[colIndex].length)));
            return rows
                .map((row, rowIndex) => row
                .map((x, colIndex) => {
                // pad numbers with spaces to col width
                const padder = (rowIndex == 0 && colNames) || (colIndex == 0 && rowNames)
                    ? String.prototype.padEnd
                    : String.prototype.padStart;
                return padder.call(x, colWidths[colIndex]);
            })
                .join("  "))
                .map((x) => x + "\n")
                .join(""); // join rows
        }
        row(rowIndex) {
            assertInts(rowIndex);
            assert(0 <= rowIndex && rowIndex < this.height, "rowIndex out of bounds " + rowIndex);
            const v = new Float64Array(this.width);
            arrayCopy(this.m, rowIndex * this.width, v, 0, this.width);
            return new Vector(v);
        }
        col(colIndex) {
            assertInts(colIndex);
            assert(0 <= colIndex && colIndex < this.width, "colIndex out of bounds " + colIndex);
            const v = new Float64Array(this.height);
            arrayCopyStep(this.m, colIndex, this.width, v, 0, 1, this.height);
            return new Vector(v);
        }
        dim() {
            return { width: this.width, height: this.height };
        }
        dimString() {
            return this.width + "x" + this.height;
        }
        equals(obj) {
            if (obj.constructor != this.constructor)
                return false;
            if (this.width != obj.width || this.height != obj.height)
                return false;
            let elIndex = this.m.length;
            while (elIndex--) {
                if (this.m[elIndex] != obj.m[elIndex])
                    return false;
            }
            return true;
        }
        equalsMatrix(matrix, precision = NLA_PRECISION) {
            assertInst(Matrix, matrix);
            if (this.width != matrix.width || this.height != matrix.height)
                return false;
            let elIndex = this.m.length;
            while (elIndex--) {
                if (Math.abs(this.m[elIndex] - matrix.m[elIndex]) > precision)
                    return false;
            }
            return true;
        }
        hashCode() {
            let result = 0;
            let elIndex = this.m.length;
            while (elIndex--) {
                result = result * 31 + floatHashCode(this.m[elIndex]);
            }
            return result;
        }
        // todo rename
        isZero() {
            let elIndex = this.m.length;
            while (elIndex--) {
                if (!eq0(this.m[elIndex])) {
                    return false;
                }
            }
            return true;
        }
        isOrthogonal() {
            return (this.isSquare() &&
                this.transposed().times(this).equalsMatrix(Matrix.identityN(this.width)));
        }
        /**
         * Returns L, U, P such that L * U == P * this
         */
        luDecomposition() {
            assertf(() => this.isSquare(), this.dim().toSource());
            const dim = this.width;
            const uRowArrays = this.asRowArrays(Float64Array);
            const lRowArrays = arrayFromFunction(dim, (row) => new Float64Array(dim));
            const pRowArrays = Matrix.identityN(dim).asRowArrays(Float64Array);
            let currentRowIndex = 0;
            for (let colIndex = 0; colIndex < dim; colIndex++) {
                // find largest value in colIndex
                let maxAbsValue = 0, pivotRowIndex = -1, numberOfNonZeroRows = 0;
                for (let rowIndex = currentRowIndex; rowIndex < dim; rowIndex++) {
                    const el = uRowArrays[rowIndex][colIndex];
                    numberOfNonZeroRows += +(0 != el);
                    if (Math.abs(el) > maxAbsValue) {
                        maxAbsValue = Math.abs(el);
                        pivotRowIndex = rowIndex;
                    }
                }
                // TODO: check with isZero
                if (0 == maxAbsValue) {
                    // column contains only zeros
                    continue;
                }
                assert(-1 !== pivotRowIndex);
                // swap rows
                arraySwap(uRowArrays, currentRowIndex, pivotRowIndex);
                arraySwap(lRowArrays, currentRowIndex, pivotRowIndex);
                arraySwap(pRowArrays, currentRowIndex, pivotRowIndex);
                lRowArrays[colIndex][colIndex] = 1;
                if (1 < numberOfNonZeroRows) {
                    // subtract pivot (now current) row from all below it
                    for (let rowIndex = currentRowIndex + 1; rowIndex < dim; rowIndex++) {
                        const l = uRowArrays[rowIndex][colIndex] /
                            uRowArrays[currentRowIndex][colIndex];
                        lRowArrays[rowIndex][colIndex] = l;
                        // subtract pivot row * l from row 'rowIndex'
                        for (let colIndex2 = colIndex; colIndex2 < dim; colIndex2++) {
                            uRowArrays[rowIndex][colIndex2] -=
                                l * uRowArrays[currentRowIndex][colIndex2];
                        }
                    }
                }
                currentRowIndex++; // this doesn't increase if pivot was zero
            }
            return {
                L: Matrix.fromRowArrays(...lRowArrays),
                U: Matrix.fromRowArrays(...uRowArrays),
                P: Matrix.fromRowArrays(...pRowArrays),
            };
        }
        gauss() {
            const width = this.width, height = this.height;
            const uRowArrays = this.asRowArrays(Float64Array);
            const lRowArrays = arrayFromFunction(height, (row) => new Float64Array(width));
            const pRowArrays = Matrix.identityN(height).asRowArrays(Float64Array);
            let currentRowIndex = 0;
            for (let colIndex = 0; colIndex < width; colIndex++) {
                // console.log('currentRowIndex', currentRowIndex)	// find largest value in colIndex
                let maxAbsValue = 0, pivotRowIndex = -1, numberOfNonZeroRows = 0;
                for (let rowIndex = currentRowIndex; rowIndex < height; rowIndex++) {
                    const el = uRowArrays[rowIndex][colIndex];
                    numberOfNonZeroRows += +(0 != el);
                    if (Math.abs(el) > maxAbsValue) {
                        maxAbsValue = Math.abs(el);
                        pivotRowIndex = rowIndex;
                    }
                }
                // TODO: check with isZero
                if (0 == maxAbsValue) {
                    // column contains only zeros
                    continue;
                }
                assert(-1 !== pivotRowIndex);
                // swap rows
                arraySwap(uRowArrays, currentRowIndex, pivotRowIndex);
                arraySwap(lRowArrays, currentRowIndex, pivotRowIndex);
                arraySwap(pRowArrays, currentRowIndex, pivotRowIndex);
                lRowArrays[currentRowIndex][colIndex] = 1;
                if (1 < numberOfNonZeroRows) {
                    // subtract pivot (now current) row from all below it
                    for (let rowIndex = currentRowIndex + 1; rowIndex < height; rowIndex++) {
                        const l = uRowArrays[rowIndex][colIndex] /
                            uRowArrays[currentRowIndex][colIndex];
                        lRowArrays[rowIndex][colIndex] = l;
                        // subtract pivot row * l from row 'rowIndex'
                        for (let colIndex2 = colIndex; colIndex2 < width; colIndex2++) {
                            uRowArrays[rowIndex][colIndex2] -=
                                l * uRowArrays[currentRowIndex][colIndex2];
                        }
                    }
                }
                currentRowIndex++; // this doesn't increase if pivot was zero
            }
            return {
                L: Matrix.fromRowArrays(...lRowArrays),
                U: Matrix.fromRowArrays(...uRowArrays),
                P: Matrix.fromRowArrays(...pRowArrays),
            };
        }
        qrDecompositionGivensRotation() {
            // function sigma(c: number, s: number) {
            // 	if (0 == c) {
            // 		return 1
            // 	}
            // 	if (Math.abs(s) < Math.abs(c)) {
            // 		return 0.5 * Math.sign(c) * s
            // 	}
            // 	return (2 * Math.sign(s)) / c
            // }
            const R = this.copy();
            function matrixForCS(dim, i, k, c, s) {
                const m = Matrix.identityN(dim);
                m.setEl(i, i, c);
                m.setEl(k, k, c);
                m.setEl(i, k, s);
                m.setEl(k, i, -s);
                return m;
            }
            let qTransposed = Matrix.identityN(this.height);
            for (let colIndex = 0; colIndex < this.width; colIndex++) {
                // find largest value in colIndex
                for (let rowIndex = colIndex + 1; rowIndex < this.height; rowIndex++) {
                    //console.log('row ', rowIndex, 'col ', colIndex)
                    const xi = R.e(colIndex, colIndex);
                    const xk = R.e(rowIndex, colIndex);
                    if (xk == 0) {
                        continue;
                    }
                    const r = Math.hypot(xi, xk);
                    const c = xi / r;
                    const s = xk / r;
                    // apply transformation on every column:
                    for (let col2 = colIndex; col2 < this.width; col2++) {
                        const x1 = R.e(colIndex, col2) * c + R.e(rowIndex, col2) * s;
                        const x2 = R.e(rowIndex, col2) * c - R.e(colIndex, col2) * s;
                        R.setEl(colIndex, col2, x1);
                        R.setEl(rowIndex, col2, x2);
                    }
                    //console.log('r ', r, 'c ', c, 's ', s, 'sigma', sigma(c, s))
                    //console.log(this.toString(),'cs\n', matrixForCS(this.height, colIndex, rowIndex, c, s).toString())
                    qTransposed = matrixForCS(this.height, colIndex, rowIndex, c, s).times(qTransposed);
                }
            }
            //console.log(qTransposed.transposed().toString(), this.toString(),
            // qTransposed.transposed().times(this).toString())
            return { Q: qTransposed.transposed(), R };
        }
        isPermutation() {
            if (!this.isSquare())
                return false;
            if (this.m.some((value) => !eq0(value) && !eq(1, value)))
                return false;
            const rows = this.asRowArrays(Array);
            if (rows.some((row) => row.filter((value) => eq(1, value)).length != 1))
                return false;
            const cols = this.asColArrays(Array);
            if (cols.some((col) => col.filter((value) => eq(1, value)).length != 1))
                return false;
            return true;
        }
        isDiagonal(precision) {
            let i = this.m.length;
            while (i--) {
                if (0 !== i % (this.width + 1) && !eq0(this.m[i]))
                    return false;
            }
            return true;
        }
        isIdentity(precision) {
            return (this.isLowerUnitriangular(precision) && this.isUpperTriangular(precision));
        }
        isUpperTriangular(precision = NLA_PRECISION) {
            if (!this.isSquare())
                return false;
            for (let rowIndex = 1; rowIndex < this.height; rowIndex++) {
                for (let colIndex = 0; colIndex < rowIndex; colIndex++) {
                    if (!eq0(this.m[rowIndex * this.width + colIndex], precision)) {
                        return false;
                    }
                }
            }
            return true;
        }
        isSymmetric(precision = NLA_PRECISION) {
            if (!this.isSquare())
                return false;
            for (let rowIndex = 0; rowIndex < this.height - 1; rowIndex++) {
                for (let colIndex = rowIndex + 1; colIndex < this.width; colIndex++) {
                    const a = this.m[rowIndex * this.width + colIndex];
                    const b = this.m[colIndex * this.width + rowIndex];
                    if (!eq(a, b, precision)) {
                        return false;
                    }
                }
            }
            return true;
        }
        /**
         * Returns x, so that this * x = b
         * More efficient than calculating the inverse for few (~ <= this.height) values
         */
        solveLinearSystem(b) {
            assertInst(Vector, b);
            const { L, U, P } = this.luDecomposition();
            const y = L.solveForwards(P.timesVector(b));
            const x = U.solveBackwards(y);
            return x;
        }
        isLowerUnitriangular(precision = NLA_PRECISION) {
            if (!this.isSquare())
                return false;
            for (let rowIndex = 0; rowIndex < this.height - 1; rowIndex++) {
                for (let colIndex = rowIndex; colIndex < this.width; colIndex++) {
                    const el = this.m[rowIndex * this.width + colIndex];
                    if (rowIndex == colIndex ? !eq(1, el, precision) : !eq0(el, precision)) {
                        return false;
                    }
                }
            }
            return true;
        }
        isLowerTriangular(precision = NLA_PRECISION) {
            if (!this.isSquare())
                return false;
            for (let rowIndex = 0; rowIndex < this.height - 1; rowIndex++) {
                for (let colIndex = rowIndex + 1; colIndex < this.width; colIndex++) {
                    if (!eq0(this.m[rowIndex * this.width + colIndex], precision)) {
                        return false;
                    }
                }
            }
            return true;
        }
        solveBackwards(x) {
            assertVectors(x);
            assert(this.height == x.dim(), "this.height == x.dim()");
            assert(this.isUpperTriangular(), "this.isUpperTriangular()\n" + this.str);
            const v = new Float64Array(this.width);
            let rowIndex = this.height;
            while (rowIndex--) {
                let temp = x.v[rowIndex];
                for (let colIndex = rowIndex + 1; colIndex < this.width; colIndex++) {
                    temp -= v[colIndex] * this.e(rowIndex, colIndex);
                }
                v[rowIndex] = temp / this.e(rowIndex, rowIndex);
            }
            return new Vector(v);
        }
        solveBackwardsMatrix(matrix) {
            const colVectors = new Array(matrix.width);
            let i = matrix.width;
            while (i--) {
                colVectors[i] = this.solveBackwards(matrix.col(i));
            }
            return Matrix.fromColVectors(colVectors);
        }
        solveForwardsMatrix(matrix) {
            const colVectors = new Array(matrix.width);
            let i = matrix.width;
            while (i--) {
                colVectors[i] = this.solveForwards(matrix.col(i));
            }
            return Matrix.fromColVectors(colVectors);
        }
        solveForwards(x) {
            assertVectors(x);
            assert(this.height == x.dim(), "this.height == x.dim()");
            assertf(() => this.isLowerTriangular(), this.toString());
            const v = new Float64Array(this.width);
            for (let rowIndex = 0; rowIndex < this.height; rowIndex++) {
                let temp = x.v[rowIndex];
                for (let colIndex = 0; colIndex < rowIndex; colIndex++) {
                    temp -= v[colIndex] * this.e(rowIndex, colIndex);
                }
                v[rowIndex] = temp / this.e(rowIndex, rowIndex);
            }
            return new Vector(v);
        }
        /**
         * Calculates rank of matrix.
         * Number of linearly independant row/column vectors.
         * Is equal to the unmber of dimensions the image of the affine transformation represented this matrix has.
         */
        rank() {
            const U = this.gauss().U;
            let rowIndex = this.height;
            while (rowIndex-- && U.row(rowIndex).isZero()) { }
            return rowIndex + 1;
        }
        rowsIndependent() {
            return this.height == this.rank();
        }
        colsIndependent() {
            return this.width == this.rank();
        }
        asRowArrays(arrayConstructor = Float64Array) {
            return arrayFromFunction(this.height, (rowIndex) => this.rowArray(rowIndex, arrayConstructor));
        }
        asColArrays(arrayConstructor = Float64Array) {
            return arrayFromFunction(this.width, (colIndex) => this.colArray(colIndex, arrayConstructor));
        }
        rowArray(rowIndex, arrayConstructor = Float64Array) {
            const result = new arrayConstructor(this.width);
            return arrayCopy(this.m, rowIndex * this.width, result, 0, this.width);
        }
        colArray(colIndex, arrayConstructor = Float64Array) {
            const result = new arrayConstructor(this.width);
            arrayCopyStep(this.m, colIndex, this.height, result, 0, 1, this.height);
            return result;
        }
        subMatrix(firstColIndex, subWidth, firstRowIndex, subHeight) {
            assert(0 < firstColIndex && 0 < subWidth && 0 < firstRowIndex && 0 < subHeight);
            assert(firstColIndex + subWidth <= this.width &&
                firstRowIndex + subHeight <= this.height);
            const m = new Float64Array(subWidth * subHeight);
            arrayCopyBlocks(this.m, firstColIndex, this.width, m, 0, subWidth, subHeight, subWidth);
            return new Matrix(subWidth, subHeight, m);
        }
        map(fn) {
            return new Matrix(this.width, this.height, this.m.map(fn));
        }
        dimEquals(matrix) {
            assertInst(Matrix, matrix);
            return this.width == matrix.width && this.height == matrix.height;
        }
        inversed() {
            if (this.isSquare()) {
                if (2 == this.width)
                    return this.inversed2();
                if (3 == this.width)
                    return this.inversed3();
                if (4 == this.width)
                    return this.inversed4();
            }
            const { L, U, P } = this.luDecomposition();
            const y = L.solveForwardsMatrix(P);
            const inverse = U.solveBackwardsMatrix(y);
            return inverse;
        }
        inversed2() {
            assertf(() => 2 == this.width && 2 == this.height);
            const result = Matrix.forWidthHeight(2, 2), m = this.m, r = result.m;
            const det = m[0] * m[3] - m[1] * r[2];
            r[0] = m[3] / det;
            r[1] = -m[2] / det;
            r[2] = -m[1] / det;
            r[3] = m[0] / det;
            return result;
        }
        inversed3(result = Matrix.forWidthHeight(3, 3)) {
            assertInst(Matrix, result);
            assertf(() => 3 == this.width && 3 == this.height);
            assertf(() => 3 == result.width && 3 == result.height);
            assert(() => this != result);
            const m = this.m, r = result.m;
            r[0] = m[4] * m[8] - m[5] * m[7];
            r[1] = -m[1] * m[8] + m[2] * m[7];
            r[2] = m[1] * m[5] - m[2] * m[4];
            r[3] = -m[3] * m[8] + m[5] * m[6];
            r[4] = m[0] * m[8] - m[2] * m[6];
            r[5] = -m[0] * m[5] + m[2] * m[3];
            r[6] = m[3] * m[7] - m[4] * m[6];
            r[7] = -m[0] * m[7] + m[1] * m[6];
            r[8] = m[0] * m[4] - m[1] * m[3];
            const det = m[0] * r[0] + m[1] * r[3] + m[2] * r[6];
            let i = 9;
            while (i--) {
                r[i] /= det;
            }
            return result;
        }
        // prettier-ignore
        inversed4(result = Matrix.forWidthHeight(4, 4)) {
            assertInst(Matrix, result);
            assertf(() => 4 == this.width && 4 == this.height);
            assertf(() => 4 == result.width && 4 == result.height);
            assert(() => this != result);
            const m = this.m, r = result.m;
            // first compute transposed cofactor matrix:
            // cofactor of an element is the determinant of the 3x3 matrix gained by removing the column and row belonging
            // to the element
            r[0] = m[5] * m[10] * m[15] - m[5] * m[14] * m[11] - m[6] * m[9] * m[15]
                + m[6] * m[13] * m[11] + m[7] * m[9] * m[14] - m[7] * m[13] * m[10];
            r[1] = -m[1] * m[10] * m[15] + m[1] * m[14] * m[11] + m[2] * m[9] * m[15]
                - m[2] * m[13] * m[11] - m[3] * m[9] * m[14] + m[3] * m[13] * m[10];
            r[2] = m[1] * m[6] * m[15] - m[1] * m[14] * m[7] - m[2] * m[5] * m[15]
                + m[2] * m[13] * m[7] + m[3] * m[5] * m[14] - m[3] * m[13] * m[6];
            r[3] = -m[1] * m[6] * m[11] + m[1] * m[10] * m[7] + m[2] * m[5] * m[11]
                - m[2] * m[9] * m[7] - m[3] * m[5] * m[10] + m[3] * m[9] * m[6];
            r[4] = -m[4] * m[10] * m[15] + m[4] * m[14] * m[11] + m[6] * m[8] * m[15]
                - m[6] * m[12] * m[11] - m[7] * m[8] * m[14] + m[7] * m[12] * m[10];
            r[5] = m[0] * m[10] * m[15] - m[0] * m[14] * m[11] - m[2] * m[8] * m[15]
                + m[2] * m[12] * m[11] + m[3] * m[8] * m[14] - m[3] * m[12] * m[10];
            r[6] = -m[0] * m[6] * m[15] + m[0] * m[14] * m[7] + m[2] * m[4] * m[15]
                - m[2] * m[12] * m[7] - m[3] * m[4] * m[14] + m[3] * m[12] * m[6];
            r[7] = m[0] * m[6] * m[11] - m[0] * m[10] * m[7] - m[2] * m[4] * m[11]
                + m[2] * m[8] * m[7] + m[3] * m[4] * m[10] - m[3] * m[8] * m[6];
            r[8] = m[4] * m[9] * m[15] - m[4] * m[13] * m[11] - m[5] * m[8] * m[15]
                + m[5] * m[12] * m[11] + m[7] * m[8] * m[13] - m[7] * m[12] * m[9];
            r[9] = -m[0] * m[9] * m[15] + m[0] * m[13] * m[11] + m[1] * m[8] * m[15]
                - m[1] * m[12] * m[11] - m[3] * m[8] * m[13] + m[3] * m[12] * m[9];
            r[10] = m[0] * m[5] * m[15] - m[0] * m[13] * m[7] - m[1] * m[4] * m[15]
                + m[1] * m[12] * m[7] + m[3] * m[4] * m[13] - m[3] * m[12] * m[5];
            r[11] = -m[0] * m[5] * m[11] + m[0] * m[9] * m[7] + m[1] * m[4] * m[11]
                - m[1] * m[8] * m[7] - m[3] * m[4] * m[9] + m[3] * m[8] * m[5];
            r[12] = -m[4] * m[9] * m[14] + m[4] * m[13] * m[10] + m[5] * m[8] * m[14]
                - m[5] * m[12] * m[10] - m[6] * m[8] * m[13] + m[6] * m[12] * m[9];
            r[13] = m[0] * m[9] * m[14] - m[0] * m[13] * m[10] - m[1] * m[8] * m[14]
                + m[1] * m[12] * m[10] + m[2] * m[8] * m[13] - m[2] * m[12] * m[9];
            r[14] = -m[0] * m[5] * m[14] + m[0] * m[13] * m[6] + m[1] * m[4] * m[14]
                - m[1] * m[12] * m[6] - m[2] * m[4] * m[13] + m[2] * m[12] * m[5];
            r[15] = m[0] * m[5] * m[10] - m[0] * m[9] * m[6] - m[1] * m[4] * m[10]
                + m[1] * m[8] * m[6] + m[2] * m[4] * m[9] - m[2] * m[8] * m[5];
            // calculate determinant using laplace expansion (cf https://en.wikipedia.org/wiki/Laplace_expansion),
            // as we already have the cofactors. We multiply a column by a row as the cofactor matrix is transposed.
            const det = m[0] * r[0] + m[1] * r[4] + m[2] * r[8] + m[3] * r[12];
            // assert(!isZero(det), 'det may not be zero, i.e. the matrix is not invertible')
            let i = 16;
            while (i--) {
                r[i] /= det;
            }
            return result;
        }
        canMultiply(matrix) {
            assertInst(Matrix, matrix);
            return this.width == matrix.height;
        }
        times(matrix) {
            assertInst(Matrix, matrix);
            assert(this.canMultiply(matrix), `Cannot multiply this {this.dimString()} by matrix {matrix.dimString()}`);
            const nWidth = matrix.width, nHeight = this.height, n = this.width;
            const nM = new Float64Array(nWidth * nHeight);
            let nRowIndex = nHeight;
            while (nRowIndex--) {
                let nColIndex = nWidth;
                while (nColIndex--) {
                    let result = 0;
                    let i = n;
                    while (i--) {
                        result += this.m[nRowIndex * n + i] * matrix.m[i * nWidth + nColIndex];
                    }
                    nM[nRowIndex * nWidth + nColIndex] = result;
                }
            }
            return new Matrix(nWidth, nHeight, nM);
        }
        timesVector(v) {
            assertVectors(v);
            assert(this.width == v.dim());
            const nHeight = this.height, n = this.width;
            const nM = new Float64Array(nHeight);
            let nRowIndex = nHeight;
            while (nRowIndex--) {
                let result = 0;
                let i = n;
                while (i--) {
                    result += this.m[nRowIndex * n + i] * v.v[i];
                }
                nM[nRowIndex] = result;
            }
            return new Vector(nM);
        }
        transposed() {
            const tWidth = this.height, tHeight = this.width;
            const tM = new Float64Array(tWidth * tHeight);
            let tRowIndex = tHeight;
            while (tRowIndex--) {
                let tColIndex = tWidth;
                while (tColIndex--) {
                    tM[tRowIndex * tWidth + tColIndex] = this.m[tColIndex * tHeight + tRowIndex];
                }
            }
            return new Matrix(tWidth, tHeight, tM);
        }
        /**
         * In-place transpose.
         */
        transpose() {
            const h = this.height, w = this.width, tM = this.m;
            let tRowIndex = h;
            while (tRowIndex--) {
                let tColIndex = Math.min(tRowIndex, w);
                while (tColIndex--) {
                    const temp = tM[tRowIndex * w + tColIndex];
                    tM[tRowIndex * w + tColIndex] = tM[tColIndex * h + tRowIndex];
                    tM[tColIndex * h + tRowIndex] = temp;
                }
            }
            this.width = h;
            this.height = w;
        }
        isSquare() {
            return this.height == this.width;
        }
        diagonal() {
            if (!this.isSquare()) {
                throw new Error("!!");
            }
            const v = new Float64Array(this.width);
            let elIndex = this.width * (this.width + 1);
            let vIndex = this.width;
            while (vIndex--) {
                elIndex -= this.width + 1;
                v[vIndex] = this.m[elIndex];
            }
            return new Vector(v);
        }
        maxEl() {
            return max$1(this.m);
        }
        minEl() {
            return min$1(this.m);
        }
        maxAbsColSum() {
            let result = 0;
            let colIndex = this.width;
            while (colIndex--) {
                let absSum = 0;
                let rowIndex = this.height;
                while (rowIndex--) {
                    absSum += Math.abs(this.m[rowIndex * this.width + colIndex]);
                }
                result = Math.max(result, absSum);
            }
            return result;
        }
        maxAbsRowSum() {
            let result = 0;
            let rowIndex = this.height;
            while (rowIndex--) {
                let absSum = 0;
                let colIndex = this.width;
                while (colIndex--) {
                    absSum += Math.abs(this.m[rowIndex * this.width + colIndex]);
                }
                result = Math.max(result, absSum);
            }
            return result;
        }
        getTriangularDeterminant() {
            assert(this.isUpperTriangular() || this.isLowerTriangular(), "not a triangular matrix");
            let product = 1;
            let elIndex = this.width * (this.width + 1);
            while (elIndex) {
                elIndex -= this.width + 1;
                product *= this.m[elIndex];
            }
            return product;
        }
        /**
         * Calculates the determinant by first calculating the LU decomposition. If you already have that, use
         * U.getTriangularDeterminant()
         */
        getDeterminant() {
            // PA = LU
            // det(A) * det(B) = det(A * B)
            // det(P) == 1 (permutation matrix)
            // det(L) == 1 (main diagonal is 1s
            // =>  det(A) == det(U)
            return this.luDecomposition().U.getTriangularDeterminant();
        }
        hasFullRank() {
            return Math.min(this.width, this.height) == this.rank();
        }
        permutationAsIndexMap() {
            assertf(() => this.isPermutation());
            const result = new Array(this.height);
            let i = this.height;
            while (i--) {
                const searchIndexStart = i * this.width;
                let searchIndex = searchIndexStart;
                while (this.m[searchIndex] < 0.5)
                    searchIndex++;
                result[i] = searchIndex - searchIndexStart;
            }
            return result;
        }
        getDependentRowIndexes(gauss = this.gauss()) {
            const { L, U, P } = gauss;
            // rows which end up as zero vectors in U are not linearly independent
            const dependents = new Array(this.height);
            let uRowIndex = this.height;
            while (uRowIndex--) {
                const uRow = U.row(uRowIndex);
                if (uRow.length() < NLA_PRECISION) {
                    dependents[uRowIndex] = true;
                }
                else {
                    break;
                }
            }
            // figure out from which other rows the rows which end up as zero vectors are created by
            let lRowIndex = this.height;
            while (lRowIndex--) {
                if (dependents[lRowIndex]) {
                    let lColIndex = Math.min(lRowIndex, this.width);
                    while (lColIndex--) {
                        if (0 !== L.e(lRowIndex, lColIndex)) {
                            dependents[lColIndex] = true;
                        }
                    }
                }
            }
            console.log("m\n", this.toString((x) => "" + x));
            console.log("L\n", L.toString((x) => "" + x));
            console.log("U\n", U.toString((x) => "" + x));
            console.log("P\n", P.toString((x) => "" + x));
            // gauss algorithm permutes the order of the rows, so map our results back to the original indices
            const indexMap = P.permutationAsIndexMap();
            const dependentRowIndexes = dependents
                .map((b, index) => b && indexMap[index])
                .filter((x) => x != undefined);
            return dependentRowIndexes;
        }
        lerp(b, t, result = this.new()) {
            assertInst(Matrix, b, result);
            assertNumbers(t);
            assert(this.width == b.width && this.height == b.height);
            const s = 1 - t;
            let i = this.m.length;
            while (i--) {
                result.m[i] = s * this.m[i] + t * b.m[i];
            }
            return result;
        }
    }

    const { PI: PI$1$1, abs: abs$1 } = Math;
    // tslint:enable:member-ordering
    class M4 extends Matrix {
        /**
         * Takes 16 arguments in row-major order, which can be passed individually, as a list, or even as
         * four lists, one for each row. If the arguments are omitted then the identity matrix is constructed instead.
         *
         *  0  1  2  3
         *  4  5  6  7
         *  8  9 10 11
         * 12 13 14 15
         */
        constructor(...var_args) {
            let m;
            if (0 == var_args.length) {
                m = new Float64Array(16);
            }
            else {
                const flattened = concatenated(var_args);
                assert(flattened.length == 16, "flattened.length == 16 " + flattened.length);
                m = new Float64Array(flattened);
            }
            super(4, 4, m);
        }
        /**
         * Returns the matrix that when multiplied with `matrix` results in the
         * identity matrix. You can optionally pass an existing matrix in `result`
         * to avoid allocating a new matrix. This implementation is from the Mesa
         * OpenGL function `__gluInvertMatrixd()` found in `project.c`.
         */
        static inverse(matrix, result = new M4()) {
            return matrix.inversed4(result);
        }
        /**
         * Create new dim x dim matrix equal to an identity matrix with rows/colums i and k swapped. Note that i and k
         * are 0-indexed.
         */
        static permutation4(i, k, result = new M4()) {
            assertInts(i, k);
            assertf(() => 0 <= i && i < 4);
            assertf(() => 0 <= k && k < 4);
            const m = result.m;
            M4.identity(result);
            m[i * 4 + i] = 0;
            m[k * 4 + k] = 0;
            m[i * 4 + k] = 1;
            m[k * 4 + i] = 1;
            return result;
        }
        /**
         * Returns `matrix`, exchanging columns for rows. You can optionally pass an
         * existing matrix in `result` to avoid allocating a new matrix.
         */
        static transpose(matrix, result = new M4()) {
            assertInst(M4, matrix);
            assertInst(M4, result);
            assert(matrix != result, "matrix != result");
            const m = matrix.m, r = result.m;
            r[0] = m[0];
            r[1] = m[4];
            r[2] = m[8];
            r[3] = m[12];
            r[4] = m[1];
            r[5] = m[5];
            r[6] = m[9];
            r[7] = m[13];
            r[8] = m[2];
            r[9] = m[6];
            r[10] = m[10];
            r[11] = m[14];
            r[12] = m[3];
            r[13] = m[7];
            r[14] = m[11];
            r[15] = m[15];
            return result;
        }
        /**
         * Returns the concatenation of the transforms for `left` and `right`.
         */
        static multiply(left, right, result = new M4()) {
            assertInst(M4, left, right);
            assertInst(M4, result);
            assert(left != result, "left != result");
            assert(right != result, "right != result");
            const a = left.m, b = right.m, r = result.m;
            r[0] = a[0] * b[0] + a[1] * b[4] + (a[2] * b[8] + a[3] * b[12]);
            r[1] = a[0] * b[1] + a[1] * b[5] + (a[2] * b[9] + a[3] * b[13]);
            r[2] = a[0] * b[2] + a[1] * b[6] + (a[2] * b[10] + a[3] * b[14]);
            r[3] = a[0] * b[3] + a[1] * b[7] + (a[2] * b[11] + a[3] * b[15]);
            r[4] = a[4] * b[0] + a[5] * b[4] + (a[6] * b[8] + a[7] * b[12]);
            r[5] = a[4] * b[1] + a[5] * b[5] + (a[6] * b[9] + a[7] * b[13]);
            r[6] = a[4] * b[2] + a[5] * b[6] + (a[6] * b[10] + a[7] * b[14]);
            r[7] = a[4] * b[3] + a[5] * b[7] + (a[6] * b[11] + a[7] * b[15]);
            r[8] = a[8] * b[0] + a[9] * b[4] + (a[10] * b[8] + a[11] * b[12]);
            r[9] = a[8] * b[1] + a[9] * b[5] + (a[10] * b[9] + a[11] * b[13]);
            r[10] = a[8] * b[2] + a[9] * b[6] + (a[10] * b[10] + a[11] * b[14]);
            r[11] = a[8] * b[3] + a[9] * b[7] + (a[10] * b[11] + a[11] * b[15]);
            r[12] = a[12] * b[0] + a[13] * b[4] + (a[14] * b[8] + a[15] * b[12]);
            r[13] = a[12] * b[1] + a[13] * b[5] + (a[14] * b[9] + a[15] * b[13]);
            r[14] = a[12] * b[2] + a[13] * b[6] + (a[14] * b[10] + a[15] * b[14]);
            r[15] = a[12] * b[3] + a[13] * b[7] + (a[14] * b[11] + a[15] * b[15]);
            return result;
        }
        static product(...args) {
            const [m4s, result] = Array.isArray(args[0])
                ? [args[0], args[1]]
                : [args, new M4()];
            if (0 == m4s.length)
                return M4.identity(result);
            if (1 == m4s.length)
                return M4.copy(m4s[0], result);
            if (2 == m4s.length)
                return M4.multiply(m4s[0], m4s[1], result);
            let a = M4.temp0, b = M4.temp1;
            M4.multiply(m4s[0], m4s[1], a);
            for (let i = 2; i < m4s.length - 1; i++) {
                M4.multiply(a, m4s[i], b);
                [a, b] = [b, a];
            }
            return M4.multiply(a, getLast(m4s), result);
        }
        static forSys(e0, e1, e2 = e0.cross(e1), origin = V3.O) {
            assertVectors(e0, e1, e2, origin);
            // prettier-ignore
            return new M4(e0.x, e1.x, e2.x, origin.x, e0.y, e1.y, e2.y, origin.y, e0.z, e1.z, e2.z, origin.z, 0, 0, 0, 1);
        }
        static forRows(n0, n1, n2, n3 = V3.O) {
            assertVectors(n0, n1, n2, n3);
            // prettier-ignore
            return new M4(n0.x, n0.y, n0.z, 0, n1.x, n1.y, n1.z, 0, n2.x, n2.y, n2.z, 0, n3.x, n3.y, n3.z, 1);
        }
        /**
         * Returns an identity matrix. You can optionally pass an existing matrix in `result` to avoid allocating a new
         * matrix. This emulates the OpenGL function `glLoadIdentity()`
         *
         * Unless initializing a matrix to be modified, use M4.IDENTITY
         */
        static identity(result = new M4()) {
            assertInst(M4, result);
            const m = result.m;
            m[0] = m[5] = m[10] = m[15] = 1;
            m[1] = m[2] = m[3] = m[4] = m[6] = m[7] = m[8] = m[9] = m[11] = m[12] = m[13] = m[14] = 0;
            return result;
        }
        /**
         * Creates a new M4 initialized by a user defined callback function
         *
         * @param f signature: (elRow, elCol, elIndex) =>
         *     el, where elIndex is the row-major index, i.e. eLindex == elRow * 4 + elCol
         * @param result
         */
        static fromFunction4(f, result = new M4()) {
            assert(typeof f == "function");
            assertInst(M4, result);
            const m = result.m;
            let i = 16;
            while (i--) {
                m[i] = f(Math.floor(i / 4), i % 4, i);
            }
            return result;
        }
        /**
         * Returns a perspective transform matrix, which makes far away objects appear smaller than nearby objects. The
         * `aspect` argument should be the width divided by the height of your viewport and `fov` is the top-to-bottom angle
         * of the field of view in degrees. You can optionally pass an existing matrix in `result` to avoid allocating a new
         * matrix. This emulates the OpenGL function `gluPerspective()`.
         * {@see perspectiveRad}
         * perspectiveRad
         * @param fovDegrees in degrees
         * @param aspect aspect ratio = width/height of viewport
         * @param near near plane
         * @param far far plane
         * @param result A new M4 as described.
         */
        static perspective(fovDegrees, aspect, near, far, result = new M4()) {
            return M4.perspectiveRad(fovDegrees * DEG, aspect, near, far, result);
        }
        static perspectiveRad(fov, aspect, near, far, result = new M4()) {
            assertInst(M4, result);
            assertNumbers(fov, aspect, near, far);
            const y = Math.tan(fov / 2) * near;
            const x = y * aspect;
            return M4.frustum(-x, x, -y, y, near, far, result);
        }
        static perspectivePlane(vanishingPlane, result = new M4()) {
            assertInst(M4, result);
            const m = result.m;
            m[0] = 1;
            m[1] = 0;
            m[2] = 0;
            m[3] = 0;
            m[4] = 0;
            m[5] = 1;
            m[6] = 0;
            m[7] = 0;
            m[8] = 0;
            m[9] = 0;
            m[10] = 1;
            m[11] = 0;
            m[12] = vanishingPlane.normal1.x;
            m[13] = vanishingPlane.normal1.y;
            m[14] = vanishingPlane.normal1.z;
            m[15] = -vanishingPlane.w;
            return result;
        }
        // the OpenGL function `glFrustum()`.
        static frustum(left, right, bottom, top, near, far, result = new M4()) {
            assertNumbers(left, right, bottom, top, near, far);
            assert(0 < near, "0 < near");
            assert(near < far, "near < far");
            assertInst(M4, result);
            const m = result.m;
            m[0] = (2 * near) / (right - left);
            m[1] = 0;
            m[2] = (right + left) / (right - left);
            m[3] = 0;
            m[4] = 0;
            m[5] = (2 * near) / (top - bottom);
            m[6] = (top + bottom) / (top - bottom);
            m[7] = 0;
            m[8] = 0;
            m[9] = 0;
            m[10] = -(far + near) / (far - near);
            m[11] = (-2 * far * near) / (far - near);
            m[12] = 0;
            m[13] = 0;
            m[14] = -1;
            m[15] = 0;
            return result;
        }
        /**
         * Returns a new M4 representing the a projection through/towards a point onto a plane.
         */
        static projectPlanePoint(p, plane, result = new M4()) {
            assertVectors(p, plane.normal1);
            assertInst(M4, result);
            const m = result.m;
            const n = plane.normal1, w = plane.w;
            const np = n.dot(p);
            m[0] = p.x * n.x + w - np;
            m[1] = p.x * n.y;
            m[2] = p.x * n.z;
            m[3] = -w * p.x;
            m[4] = p.y * n.x;
            m[5] = p.y * n.y + w - np;
            m[6] = p.y * n.z;
            m[7] = -w * p.y;
            m[8] = p.z * n.x;
            m[9] = p.z * n.y;
            m[10] = p.z * n.z + w - np;
            m[11] = -w * p.z;
            m[12] = n.x;
            m[13] = n.y;
            m[14] = n.z;
            m[15] = -np;
            return result;
        }
        /**
         * Orthographic/orthogonal projection. Transforms the cuboid with the dimensions X: [left right] Y: [bottom, top]
         * Z: [near far] to the cuboid X: [-1, 1] Y [-1, 1] Z [-1, 1]
         */
        static ortho(left, right, bottom, top, near, far, result = new M4()) {
            assertNumbers(left, right, bottom, top, near, far);
            assertInst(M4, result);
            const m = result.m;
            m[0] = 2 / (right - left);
            m[1] = 0;
            m[2] = 0;
            m[3] = -(right + left) / (right - left);
            m[4] = 0;
            m[5] = 2 / (top - bottom);
            m[6] = 0;
            m[7] = -(top + bottom) / (top - bottom);
            m[8] = 0;
            m[9] = 0;
            m[10] = -2 / (far - near);
            m[11] = -(far + near) / (far - near);
            m[12] = 0;
            m[13] = 0;
            m[14] = 0;
            m[15] = 1;
            return result;
        }
        static scale(...args) {
            let x, y, z, result;
            if (args[0] instanceof V3) {
                assert(args.length <= 2);
                ({ x, y, z } = args[0]);
                result = args[1];
            }
            else if ("number" != typeof args[1]) {
                x = y = z = args[0];
                result = args[1];
            }
            else {
                assert(args.length <= 4);
                x = args[0];
                y = args[1];
                z = undefined != args[2] ? args[2] : 1;
                result = args[3];
            }
            undefined == result && (result = new M4());
            assertInst(M4, result);
            assertNumbers(x, y, z);
            const m = result.m;
            m[0] = x;
            m[1] = 0;
            m[2] = 0;
            m[3] = 0;
            m[4] = 0;
            m[5] = y;
            m[6] = 0;
            m[7] = 0;
            m[8] = 0;
            m[9] = 0;
            m[10] = z;
            m[11] = 0;
            m[12] = 0;
            m[13] = 0;
            m[14] = 0;
            m[15] = 1;
            return result;
        }
        static translate(...args) {
            let x, y, z, result;
            if (args[0] instanceof V3) {
                assert(args.length <= 2);
                ({ x, y, z } = args[0]);
                result = args[1];
            }
            else {
                assert(args.length <= 4);
                x = args[0];
                y = undefined != args[1] ? args[1] : 0;
                z = undefined != args[2] ? args[2] : 0;
                result = args[3];
            }
            undefined == result && (result = new M4());
            assertInst(M4, result);
            assertNumbers(x, y, z);
            const m = result.m;
            m[0] = 1;
            m[1] = 0;
            m[2] = 0;
            m[3] = x;
            m[4] = 0;
            m[5] = 1;
            m[6] = 0;
            m[7] = y;
            m[8] = 0;
            m[9] = 0;
            m[10] = 1;
            m[11] = z;
            m[12] = 0;
            m[13] = 0;
            m[14] = 0;
            m[15] = 1;
            return result;
        }
        /**
         * Returns a matrix that rotates by `a` degrees around the vector (x, y, z). You can optionally pass an existing
         * matrix in `result` to avoid allocating a new matrix. This emulates the OpenGL function `glRotate()`.
         */
        //static rotation(radians: raddd, x: number, y: number, z: number, result?: M4): M4
        static rotate(radians, v, result) {
            undefined == result && (result = new M4());
            assertInst(M4, result);
            let { x, y, z } = v;
            assert(!new V3(x, y, z).likeO(), "!V(x, y, z).likeO()");
            const m = result.m;
            const d = Math.sqrt(x * x + y * y + z * z);
            x /= d;
            y /= d;
            z /= d;
            const cos = Math.cos(radians), sin = Math.sin(radians), t = 1 - cos;
            m[0] = x * x * t + cos;
            m[1] = x * y * t - z * sin;
            m[2] = x * z * t + y * sin;
            m[3] = 0;
            m[4] = y * x * t + z * sin;
            m[5] = y * y * t + cos;
            m[6] = y * z * t - x * sin;
            m[7] = 0;
            m[8] = z * x * t - y * sin;
            m[9] = z * y * t + x * sin;
            m[10] = z * z * t + cos;
            m[11] = 0;
            m[12] = 0;
            m[13] = 0;
            m[14] = 0;
            m[15] = 1;
            return result;
        }
        /**
         * Returns a matrix that puts the camera at the eye point `ex, ey, ez` looking
         * toward the center point `cx, cy, cz` with an up direction of `ux, uy, uz`.
         * You can optionally pass an existing matrix in `result` to avoid allocating
         * a new matrix. This emulates the OpenGL function `gluLookAt()`.
         */
        static lookAt(eye, focus, up, result = new M4()) {
            assertVectors(eye, focus, up);
            assertInst(M4, result);
            const m = result.m;
            const f = eye.minus(focus).unit();
            const s = up.cross(f).unit();
            const t = f.cross(s).unit();
            m[0] = s.x;
            m[1] = s.y;
            m[2] = s.z;
            m[3] = -s.dot(eye);
            m[4] = t.x;
            m[5] = t.y;
            m[6] = t.z;
            m[7] = -t.dot(eye);
            m[8] = f.x;
            m[9] = f.y;
            m[10] = f.z;
            m[11] = -f.dot(eye);
            m[12] = 0;
            m[13] = 0;
            m[14] = 0;
            m[15] = 1;
            return result;
        }
        /**
         * Create a rotation matrix for rotating around the X axis
         */
        static rotateX(radians) {
            assertNumbers(radians);
            const sin = Math.sin(radians), cos = Math.cos(radians);
            const els = [1, 0, 0, 0, 0, cos, -sin, 0, 0, sin, cos, 0, 0, 0, 0, 1];
            return new M4(els);
        }
        /**
         * Create a rotation matrix for rotating around the Y axis
         */
        static rotateY(radians) {
            const sin = Math.sin(radians), cos = Math.cos(radians);
            const els = [cos, 0, sin, 0, 0, 1, 0, 0, -sin, 0, cos, 0, 0, 0, 0, 1];
            return new M4(els);
        }
        /**
         * Create a rotation matrix for rotating around the Z axis
         */
        static rotateZ(radians) {
            const sin = Math.sin(radians), cos = Math.cos(radians);
            const els = [cos, -sin, 0, 0, sin, cos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
            return new M4(els);
        }
        /**
         * New rotation matrix such that result.transformVector(a).isParallelTo(b) through smallest rotation.
         * Performs no scaling.
         */
        static rotateAB(a, b, result = new M4()) {
            // see http://inside.mines.edu/fs_home/gmurray/ArbitraryAxisRotation/
            assertVectors(a, b);
            assertInst(M4, result);
            const rotationAxis = a.cross(b), rotationAxisLength = rotationAxis.length();
            if (eq0(rotationAxisLength)) {
                return M4.identity(result);
            }
            const radians = Math.atan2(rotationAxisLength, a.dot(b));
            return M4.rotateLine(V3.O, rotationAxis, radians, result);
        }
        /**
         * Matrix for rotation about arbitrary line defined by an anchor point and direction.
         * rotationAxis does not need to be unit
         */
        static rotateLine(rotationAnchor, rotationAxis, radians, result = new M4()) {
            // see http://inside.mines.edu/fs_home/gmurray/ArbitraryAxisRotation/
            assertVectors(rotationAnchor, rotationAxis);
            assertNumbers(radians);
            assertInst(M4, result);
            rotationAxis = rotationAxis.unit();
            const ax = rotationAnchor.x, ay = rotationAnchor.y, az = rotationAnchor.z, dx = rotationAxis.x, dy = rotationAxis.y, dz = rotationAxis.z;
            const m = result.m, cos = Math.cos(radians), sin = Math.sin(radians);
            m[0] = dx * dx + (dy * dy + dz * dz) * cos;
            m[1] = dx * dy * (1 - cos) - dz * sin;
            m[2] = dx * dz * (1 - cos) + dy * sin;
            m[3] =
                (ax * (dy * dy + dz * dz) - dx * (ay * dy + az * dz)) * (1 - cos) +
                    (ay * dz - az * dy) * sin;
            m[4] = dx * dy * (1 - cos) + dz * sin;
            m[5] = dy * dy + (dx * dx + dz * dz) * cos;
            m[6] = dy * dz * (1 - cos) - dx * sin;
            m[7] =
                (ay * (dx * dx + dz * dz) - dy * (ax * dx + az * dz)) * (1 - cos) +
                    (az * dx - ax * dz) * sin;
            m[8] = dx * dz * (1 - cos) - dy * sin;
            m[9] = dy * dz * (1 - cos) + dx * sin;
            m[10] = dz * dz + (dx * dx + dy * dy) * cos;
            m[11] =
                (az * (dx * dx + dy * dy) - dz * (ax * dx + ay * dy)) * (1 - cos) +
                    (ax * dy - ay * dx) * sin;
            m[12] = 0;
            m[13] = 0;
            m[14] = 0;
            m[15] = 1;
            return result;
        }
        /**
         * Create an affine matrix for mirroring into an arbitrary plane:
         */
        static mirror(plane, result = new M4()) {
            assertVectors(plane.normal1);
            assertInst(M4, result);
            const [nx, ny, nz] = plane.normal1;
            const w = plane.w;
            const m = result.m;
            m[0] = 1.0 - 2.0 * nx * nx;
            m[1] = -2.0 * ny * nx;
            m[2] = -2.0 * nz * nx;
            m[3] = 2.0 * nx * w;
            m[4] = -2.0 * nx * ny;
            m[5] = 1.0 - 2.0 * ny * ny;
            m[6] = -2.0 * nz * ny;
            m[7] = 2.0 * ny * w;
            m[8] = -2.0 * nx * nz;
            m[9] = -2.0 * ny * nz;
            m[10] = 1.0 - 2.0 * nz * nz;
            m[11] = 2.0 * nz * w;
            m[12] = 0;
            m[13] = 0;
            m[14] = 0;
            m[15] = 1;
            return result;
        }
        /**
         *
         * @param plane
         * @param dir Projection direction. Optional, if not specified plane normal1 will be used.
         * @param result {@see M4}
         */
        static project(plane, dir = plane.normal1, result = new M4()) {
            // TODO: doc
            // plane.normal1 DOT (p + lambda * dir) = w (1)
            // extract lambda:
            // plane.normal1 DOT p + lambda * plane.normal1 DOT dir = w
            // lambda = (w - plane.normal1 DOT p) / plane.normal1 DOT dir
            // result = p + lambda * dir
            // result = p + dir * (w - plane.normal1 DOT p) / plane.normal1 DOT dir
            // result =  w * dir / (plane.normal1 DOT dir) + p - plane.normal1 DOT p * dir / (plane.normal1 DOT dir) *
            //  a + d * (w - n . a) / (nd)
            //  a + dw - d * na
            assertVectors(dir, plane.normal1);
            assertInst(M4, result);
            const w = plane.w;
            const m = result.m;
            const nd = plane.normal1.dot(dir);
            const { x: nx, y: ny, z: nz } = plane.normal1;
            const { x: dx, y: dy, z: dz } = dir.div(nd);
            /*
                 rejectedFrom: return this.minus(b.times(this.dot(b) / b.dot(b)))
                 return M4.forSys(
                 V3.X.rejectedFrom(plane.normal1),
                 V3.Y.rejectedFrom(plane.normal1),
                 V3.Z.rejectedFrom(plane.normal1),
                 plane.anchor,
                 result
                 )
                 */
            m[0] = 1.0 - nx * dx;
            m[1] = -ny * dx;
            m[2] = -nz * dx;
            m[3] = dx * w;
            m[4] = -nx * dy;
            m[5] = 1.0 - ny * dy;
            m[6] = -nz * dy;
            m[7] = dy * w;
            m[8] = -nx * dz;
            m[9] = -ny * dz;
            m[10] = 1.0 - nz * dz;
            m[11] = dz * w;
            m[12] = 0;
            m[13] = 0;
            m[14] = 0;
            m[15] = 1;
            return result;
        }
        static lineProjection(line, result = new M4()) {
            assertVectors(line.anchor, line.dir1);
            assertInst(M4, result);
            const ax = line.anchor.x, ay = line.anchor.y, az = line.anchor.z;
            const dx = line.dir1.x, dy = line.dir1.y, dz = line.dir1.z;
            const m = result.m;
            /*
                 projectedOn: return b.times(this.dot(b) / b.dot(b))
                 */
            m[0] = dx * dx;
            m[1] = dx * dy;
            m[2] = dx * dz;
            m[3] = ax;
            m[4] = dy * dx;
            m[5] = dy * dy;
            m[6] = dy * dz;
            m[7] = ay;
            m[8] = dz * dx;
            m[9] = dz * dy;
            m[10] = dz * dz;
            m[11] = az;
            m[12] = 0;
            m[13] = 0;
            m[14] = 0;
            m[15] = 1;
            return result;
        }
        static pointInversion(p, result = new M4()) {
            assertVectors(p);
            assertInst(M4, result);
            const m = result.m;
            m[0] = -1;
            m[1] = 0;
            m[2] = 0;
            m[3] = 2 * p.x;
            m[4] = 0;
            m[5] = -1;
            m[6] = 0;
            m[7] = 2 * p.y;
            m[8] = 0;
            m[9] = 0;
            m[10] = -1;
            m[11] = 2 * p.z;
            m[12] = 0;
            m[13] = 0;
            m[14] = 0;
            m[15] = 1;
            return result;
        }
        static new(width, height, m) {
            assert(4 == width && 4 == height);
            return new M4(...m);
        }
        get X() {
            return this.transformVector(V3.X);
        }
        get Y() {
            return this.transformVector(V3.Y);
        }
        get Z() {
            return this.transformVector(V3.Z);
        }
        get O() {
            return this.getTranslation();
        }
        isMirror(precision = NLA_PRECISION) {
            const m = this.m;
            const nx = Math.sqrt((1 - m[0]) / 2);
            const ny = Math.sqrt((1 - m[5]) / 2);
            const nz = Math.sqrt((1 - m[10]) / 2);
            return (eq(m[1], -2.0 * ny * nx, precision) &&
                eq(m[2], -2.0 * nz * nx, precision) &&
                eq(m[4], -2.0 * nx * ny, precision) &&
                eq(m[6], -2.0 * nz * ny, precision) &&
                eq(m[8], -2.0 * nx * nz, precision) &&
                eq(m[9], -2.0 * ny * nz, precision) &&
                eq(m[12], 0, precision) &&
                eq(m[13], 0, precision) &&
                eq(m[14], 0, precision) &&
                eq(m[15], 1, precision) &&
                eq(m[3] * ny, m[7] * nx, precision) &&
                eq(m[7] * nz, m[11] * ny, precision) &&
                eq(m[11] * nx, m[3] * nz, precision));
        }
        // ### GL.Matrix.frustum(left, right, bottom, top, near, far[, result])
        //
        // Sets up a viewing frustum, which is shaped like a truncated pyramid with the
        // camera where the point of the pyramid would be. You can optionally pass an
        // existing matrix in `result` to avoid allocating a new matrix. This emulates
        /**
         * Returns a new M4 which is equal to the inverse of this.
         */
        inversed(result) {
            return M4.inverse(this, result);
        }
        /**
         * Matrix trace is defined as the sum of the elements of the main diagonal.
         */
        trace() {
            return this.m[0] + this.m[5] + this.m[10] + this.m[15];
        }
        as3x3(result) {
            result = M4.copy(this, result);
            const m = result.m;
            m[3] = m[7] = m[11] = m[12] = m[13] = m[14] = 0;
            m[15] = 1;
            return result;
        }
        transform(m4) {
            return m4.times(this);
        }
        realEigenValues3() {
            const m = this.m;
            assert(0 == m[12] && 0 == m[13] && 0 == m[14]);
            // determinant of (this - λI):
            // | a-λ  b   c  |
            // |  d  e-λ  f  | = -λ^3 + λ^2 (a+e+i) + λ (-a e-a i+b d+c g-e i+f h) + a(ei - fh) - b(di - fg) + c(dh - eg)
            // |  g   h  i-λ |
            const [a, b, c, , d, e, f, , g, h, i] = m;
            // det(this - λI) = -λ^3 +λ^2 (a+e+i) + λ (-a e-a i-b d+c g-e i+f h)+ (a e i-a f h-b d i+b f g+c d h-c e g)
            const s = -1;
            const t = a + e + i; // equivalent to trace of matrix
            const u = -a * e - a * i + b * d + c * g - e * i + f * h; // equivalent to 1/2 (trace(this²) - trace²(A))
            const w = a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g); // equivalent to matrix determinant
            console.log(s, t, u, w);
            return solveCubicReal2(s, t, u, w);
        }
        realEigenVectors3() {
            const eigenValues = this.realEigenValues3();
            const this3x3 = this.times(M4.IDENTITY3);
            console.log(this.toString());
            console.log(this3x3.toString());
            let mats = eigenValues.map((ev) => M4.IDENTITY3.scale(-ev).plus(this3x3));
            console.log(mats.map((m) => m.determinant3()));
            console.log(mats.map((m) => "" + m.toString((v) => "" + v)).join("\n\n"));
            console.log(mats.map((m) => "" + m.gauss().U.toString((v) => "" + v)).join("\n\n"));
            console.log("mats.map(m=>m.rank())", mats.map((m) => m.rank()));
            if (1 == eigenValues.length) {
                console.log(mats[0].toString());
                assertf(() => 0 == mats[0].rank());
                // col vectors
                return arrayFromFunction(3, (col) => new V3(this.m[col], this.m[4 + col], this.m[8 + col]));
            }
            if (2 == eigenValues.length) {
                // one matrix should have rank 1, the other rank 2
                if (1 == mats[0].rank()) {
                    mats = [mats[1], mats[0]];
                }
                assertf(() => 2 == mats[0].rank());
                assertf(() => 1 == mats[1].rank());
                // mat[0] has rank 2, mat[1] has rank 1
                const gauss0 = mats[0].gauss().U;
                const eigenVector0 = gauss0.row(0).cross(gauss0.row(1)).V3().unit();
                const planeNormal = mats[1].gauss().U.row(0).V3();
                const eigenVector1 = planeNormal.getPerpendicular().unit();
                const eigenVector2 = eigenVector0
                    .cross(eigenVector1)
                    .rejectedFrom(planeNormal);
                return [eigenVector0, eigenVector1, eigenVector2];
            }
            if (3 == eigenValues.length) {
                mats.forEach((mat, i) => assert(2 == mat.rank(), i + ": " + mat.rank()));
                // the (A - lambda I) matrices map to a plane. This means, that there is an entire line in R³ which maps to
                // the point V3.O
                return mats.map((mat) => {
                    const gauss = mat.gauss().U;
                    return gauss.row(0).cross(gauss.row(1)).V3().unit();
                });
            }
            throw new Error("there cannot be more than 3 eigen values");
        }
        /**
         * U * SIGMA * VSTAR = this
         * U and VSTAR are orthogonal matrices
         * SIGMA is a diagonal matrix
         */
        svd3() {
            function matrixForCS(i, k, c, s) {
                const m = M4.identity();
                m.setEl(i, i, c);
                m.setEl(k, k, c);
                m.setEl(i, k, s);
                m.setEl(k, i, -s);
                return m;
            }
            const A = this.as3x3();
            let S = A.transposed().times(A), V = M4.identity();
            console.log(S.str);
            for (let it = 0; it < 16; it++) {
                console.log("blahg\n", V.times(S).times(V.transposed()).str);
                assert(V.times(S).times(V.transposed()).likeM4(A.transposed().times(A)), V.times(S).times(V.transposed()).str, A.transposed().times(A).str);
                let maxOffDiagonal = 0, maxOffDiagonalIndex = 1, j = 10;
                while (j--) {
                    const val = Math.abs(S.m[j]);
                    if (j % 4 != Math.floor(j / 4) && val > maxOffDiagonal) {
                        maxOffDiagonal = val;
                        maxOffDiagonalIndex = j;
                    }
                }
                const i = Math.floor(maxOffDiagonalIndex / 4), k = maxOffDiagonalIndex % 4;
                const a_ii = S.m[5 * i], a_kk = S.m[5 * k], a_ik = S.m[maxOffDiagonalIndex];
                const phi = a_ii === a_kk ? PI$1$1 / 4 : Math.atan((2 * a_ik) / (a_ii - a_kk)) / 2;
                console.log(maxOffDiagonalIndex, i, k, "phi", phi);
                const cos = Math.cos(phi), sin = Math.sin(phi);
                const givensRotation = matrixForCS(i, k, cos, -sin);
                assert(givensRotation.transposed().times(givensRotation).likeIdentity());
                console.log(givensRotation.str);
                V = V.times(givensRotation);
                S = M4.product(givensRotation.transposed(), S, givensRotation);
                console.log(S.str);
            }
            const sigma = S.map((el, elIndex) => (elIndex % 5 == 0 ? Math.sqrt(el) : 0));
            return {
                U: M4.product(A, V, sigma.map((el, elIndex) => (elIndex % 5 == 0 ? 1 / el : 0))),
                SIGMA: sigma,
                VSTAR: V.transposed(),
            };
        }
        map(fn) {
            return M4.fromFunction4((x, y, i) => fn(this.m[i], i, this.m));
        }
        likeM4(m4) {
            assertInst(M4, m4);
            return this.m.every((el, index) => eq(el, m4.m[index]));
        }
        /**
         * Returns a new M4 equal to the transpose of this.
         */
        transposed(result) {
            return M4.transpose(this, result);
        }
        /**
         * Returns a new M4 which equal to (this * matrix) (in that order)
         */
        times(matrix) {
            return M4.multiply(this, matrix);
        }
        /**
         * In a perspective projection, parallel lines meet in a vanishing point.
         *
         * Returns undefined if there is no vanishing point, either because this is not a perspective transform,
         * or because the passed dir is perpendicular to the projections direction.
         *
         * @param dir
         */
        vanishingPoint(dir) {
            assertVectors(dir);
            const m = this.m;
            const vx = dir.x, vy = dir.y, vz = dir.z;
            const w = vx * m[12] + vy * m[13] + vz * m[14];
            if (eq0(w))
                return undefined;
            const x = vx * m[0] + vy * m[1] + vz * m[2];
            const y = vx * m[4] + vy * m[5] + vz * m[6];
            const z = vx * m[8] + vy * m[9] + vz * m[10];
            return new V3(x / w, y / w, z / w);
        }
        /**
         * Transforms the vector as a point with a w coordinate of 1. This means translations will have an effect, for
         * example.
         */
        transformPoint(v) {
            assertVectors(v);
            const m = this.m;
            const vx = v.x, vy = v.y, vz = v.z;
            const x = vx * m[0] + vy * m[1] + vz * m[2] + m[3];
            const y = vx * m[4] + vy * m[5] + vz * m[6] + m[7];
            const z = vx * m[8] + vy * m[9] + vz * m[10] + m[11];
            const w = vx * m[12] + vy * m[13] + vz * m[14] + m[15];
            // scale such that fourth element becomes 1:
            return new V3(x / w, y / w, z / w);
        }
        /**
         * Transforms the vector as a vector with a w coordinate of 0. This means translations will have no effect, for
         * example. Will throw an exception if the calculated w component != 0. This occurs for example when attempting
         * to transform a vector with a perspective matrix.
         */
        transformVector(v, checkW = true) {
            assertVectors(v);
            const m = this.m;
            const w = v.x * m[12] + v.y * m[13] + v.z * m[14];
            checkW &&
                assert(eq0(w), () => "w === 0 needs to be true for this to make sense (w =" + w + this.str);
            return new V3(m[0] * v.x + m[1] * v.y + m[2] * v.z, m[4] * v.x + m[5] * v.y + m[6] * v.z, m[8] * v.x + m[9] * v.y + m[10] * v.z);
        }
        transformVector2(v, anchor) {
            // v and anchor define a line(t) = anchor + t v
            // we can view the calculation of the transformed vector as the derivative of the transformed line at t = 0
            // d/dt (this * line(t)) (0)
            assertVectors(v, anchor);
            const transformedAnchor = this.timesVector(VV(anchor.x, anchor.y, anchor.z, 1));
            const transformedVector = this.timesVector(VV(v.x, v.y, v.z, 0));
            return transformedVector
                .times(transformedAnchor.w)
                .minus(transformedAnchor.times(transformedVector.w))
                .div(Math.pow(transformedAnchor.w, 2))
                .V3();
        }
        transformedPoints(vs) {
            return vs.map((v) => this.transformPoint(v));
        }
        transformedVectors(vs) {
            return vs.map((v) => this.transformVector(v));
        }
        new() {
            return new M4();
        }
        isRegular() {
            return !eq0(this.determinant());
        }
        isAxisAligned() {
            const m = this.m;
            return (1 >= +!eq0(m[0]) + +!eq0(m[1]) + +!eq0(m[2]) &&
                1 >= +!eq0(m[4]) + +!eq0(m[5]) + +!eq0(m[6]) &&
                1 >= +!eq0(m[8]) + +!eq0(m[9]) + +!eq0(m[10]));
        }
        /**
         * A matrix M is orthogonal iff M * M^T = I
         * I being the identity matrix.
         *
         * @returns If this matrix is orthogonal or very close to it. Comparison of the identity matrix and
         * this * this^T is done with {@link #likeM4}
         */
        isOrthogonal() {
            // return this.transposed().times(this).likeM4(M4.IDENTITY)
            M4.transpose(this, M4.temp0);
            M4.multiply(this, M4.temp0, M4.temp1);
            return M4.IDENTITY.likeM4(M4.temp1);
        }
        /**
         * A matrix M is symmetric iff M == M^T
         * I being the identity matrix.
         *
         * @returns If this matrix is symmetric or very close to it. Comparison of the identity matrix and
         * this * this^T is done with {@link #likeM4}
         */
        isSymmetric() {
            M4.transpose(this, M4.temp0);
            return this.likeM4(M4.temp0);
        }
        /**
         * A matrix M is skew symmetric iff M = -M^T
         */
        isSkewSymmetric(precision) {
            return (eq0(this.m[0], precision) &&
                eq0(this.m[5], precision) &&
                eq0(this.m[10], precision) &&
                eq0(this.m[15], precision) &&
                eq(this.m[1], this.m[4], precision) &&
                eq(this.m[2], this.m[8], precision) &&
                eq(this.m[3], this.m[12], precision) &&
                eq(this.m[6], this.m[9], precision) &&
                eq(this.m[7], this.m[13], precision) &&
                eq(this.m[11], this.m[14], precision));
        }
        /**
         * A matrix M is normal1 iff M * M^-T == M^T * M TODO: ^-T?
         * I being the identity matrix.
         *
         * @returns If this matrix is symmetric or very close to it. Comparison of the identity matrix and
         * this * this^T is done with {@link #likeM4}
         */
        isNormal() {
            M4.transpose(this, M4.temp0); // temp0 = this^-T
            M4.multiply(this, M4.temp0, M4.temp1); // temp1 = this * this^-T
            M4.multiply(M4.temp0, this, M4.temp2); // temp2 = this^-T * this
            return M4.temp1.likeM4(M4.temp2);
        }
        /**
         * Determinant of matrix.
         *
         * Notes:
         *      For matrices A and B
         *      det(A * B) = det(A) * det(B)
         *      det(A^-1) = 1 / det(A)
         */
        determinant() {
            // | a b c d |
            // | e f g h |
            // | i j k l |
            // | m n o p |
            const $ = this.m, a = $[0], b = $[1], c = $[2], d = $[3], e = $[4], f = $[5], g = $[6], h = $[7], i = $[8], j = $[9], k = $[10], l = $[11], m = $[12], n = $[13], o = $[14], p = $[15], klop = k * p - l * o, jlnp = j * p - l * n, jkno = j * o - k * n, ilmp = i * p - l * m, ikmo = i * o - k * m, ijmn = i * n - j * m;
            return (a * (f * klop - g * jlnp + h * jkno) -
                b * (e * klop - g * ilmp + h * ikmo) +
                c * (e * jlnp - f * ilmp + h * ijmn) -
                d * (e * jkno - f * ikmo + g * ijmn));
        }
        determinant3() {
            const [a, b, c, , d, e, f, , g, h, i] = this.m;
            const det = a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g);
            return det;
        }
        /**
         * determine whether this matrix is a mirroring transformation
         */
        isMirroring() {
            /*
                 var u = V(this.m[0], this.m[4], this.m[8])
                 var v = V(this.m[1], this.m[5], this.m[9])
                 var w = V(this.m[2], this.m[6], this.m[10])
        
                 // for a true orthogonal, non-mirrored base, u.cross(v) == w
                 // If they have an opposite direction then we are mirroring
                 var mirrorvalue = u.cross(v).dot(w)
                 var ismirror = (mirrorvalue < 0)
                 return ismirror
                 */
            return this.determinant() < 0; // TODO: also valid for 4x4?
        }
        /**
         * Get the translation part of this matrix, i.e. the result of this.transformPoint(V3.O)
         */
        getTranslation() {
            const m = this.m, w = m[15];
            return new V3(m[3] / w, m[7] / w, m[11] / w);
        }
        /**
         * Returns this matrix scaled so that the determinant is 1.
         * det(c * A) = (c ** n) * det(A) for n x n matrices,
         * so we need to divide by the 4th root of the determinant
         */
        normalized() {
            const detAbs = abs$1(this.determinant());
            return 1 == detAbs ? this : this.divScalar(Math.pow(detAbs, 0.25));
        }
        /**
         * Returns this matrix scaled so that the determinant is 1.
         * det(c * A) = (c ** n) * det(A) for n x n matrices,
         * so we need to divide by the 4th root of the determinant
         */
        normalized2() {
            const div = this.m[15];
            return 1 == div ? this : this.divScalar(div);
        }
        /**
         * Returns if the matrix has the following form (within NLA_PRECISION):
         * a b c 0
         * c d e 0
         * f g h 0
         * 0 0 0 1
         */
        like3x3() {
            const m = this.m;
            return (eq(1, m[15]) &&
                eq0(m[12]) &&
                eq0(m[13]) &&
                eq0(m[14]) &&
                eq0(m[3]) &&
                eq0(m[7]) &&
                eq0(m[11]));
        }
        isNoProj() {
            const m = this.m;
            return 0 == m[12] && 0 == m[13] && 0 == m[14] && 1 == m[15];
        }
        likeIdentity() {
            return this.m.every((val, i) => ((i / 4) | 0) == i % 4 ? eq(1, val) : eq0(val));
        }
        isIdentity() {
            return this.m.every((val, i) => ((i / 4) | 0) == i % 4 ? 1 == val : 0 == val);
        }
        toString(f = (v) => v.toFixed(6).replace(/([0.])(?=0*$)/g, " ")) {
            assert(typeof f(0) == "string", "" + typeof f(0));
            // slice this.m to convert it to an Array (from TypeArray)
            const rounded = Array.prototype.slice.call(this.m).map(f);
            const colWidths = [0, 1, 2, 3].map((colIndex) => max$1(sliceStep(rounded, colIndex, 0, 4).map((x) => x.length)));
            return [0, 1, 2, 3]
                .map((rowIndex) => rounded
                .slice(rowIndex * 4, rowIndex * 4 + 4) // select matrix row
                .map((x, colIndex) => " ".repeat(colWidths[colIndex] - x.length) + x) // pad numbers with
                // spaces to col width
                .join(" "))
                .join("\n"); // join rows
        }
        /**
         * Wether this matrix is a translation matrix, i.e. of the form
         * ```
         *  1, 0, 0, x,
         *  0, 1, 0, y,
         *  0, 0, 1, z,
         *  0, 0, 0, 1
         * ```
         */
        isTranslation() {
            // 2: any value, otherwise same value
            // prettier-ignore
            const mask = [
                1, 0, 0, 2,
                0, 1, 0, 2,
                0, 0, 1, 2,
                0, 0, 0, 1
            ];
            return mask.every((expected, index) => expected == 2 || expected == this.m[index]);
        }
        /**
         * Wether this matrix is a translation matrix, i.e. of the form
         * ```
         *  s, 0, 0, 0,
         *  0, t, 0, 0,
         *  0, 0, v, 0,
         *  0, 0, 0, 1
         * ```
         */
        isScaling() {
            // prettier-ignore
            const mask = [
                2, 0, 0, 0,
                0, 2, 0, 0,
                0, 0, 2, 0,
                0, 0, 0, 1
            ];
            return mask.every((expected, index) => expected == 2 || expected == this.m[index]);
        }
        isZRotation() {
            // prettier-ignore
            const mask = [
                2, 2, 0, 0,
                2, 2, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1
            ];
            return (mask.every((expected, index) => expected == 2 || expected == this.m[index]) &&
                eq(1, Math.pow(this.m[0], 2) + Math.pow(this.m[1], 2)) &&
                this.m[0] == this.m[5] &&
                this.m[1] == -this.m[4]);
        }
        toSource() {
            const name = M4.NAMEMAP.get(this);
            if (name) {
                return name;
            }
            else if (this.isTranslation()) {
                return callsce("M4.translate", this.O);
            }
            else if (this.isScaling()) {
                return callsce("M4.scale", this.m[0], this.m[5], this.m[10]);
            }
            else if (this.isNoProj()) {
                return !this.O.equals(V3.O)
                    ? callsce("M4.forSys", this.X, this.Y, this.Z, this.O)
                    : callsce("M4.forSys", this.X, this.Y, this.Z);
            }
            else if (this.isMirror(0)) {
                const m = this.m;
                const nx = Math.sqrt((1 - m[0]) / 2);
                const ny = Math.sqrt((1 - m[5]) / 2);
                const nz = Math.sqrt((1 - m[10]) / 2);
                const w = m[3] / 2.0 / nx;
                return callsce("M4.mirror", { normal1: new V3(nx, ny, nz), w });
            }
            else {
                const m = this.m;
                return ("new M4(" +
                    ("\n\t" + m[0] + ",\t" + m[1] + ",\t" + m[2] + ",\t" + m[3] + ",") +
                    ("\n\t" + m[4] + ",\t" + m[5] + ",\t" + m[6] + ",\t" + m[7] + ",") +
                    ("\n\t" + m[8] + ",\t" + m[9] + ",\t" + m[10] + ",\t" + m[11] + ",") +
                    ("\n\t" + m[12] + ",\t" + m[13] + ",\t" + m[14] + ",\t" + m[15] + ")"));
            }
        }
        xyAreaFactor() {
            return this.transformVector(V3.X).cross(this.transformVector(V3.Y)).length();
        }
    }
    /**
     * A simple (consists of integers), regular, non-orthogonal matrix, useful mainly for testing.
     * M4.FOO_INV = M4.FOO.inverse()
     */
    // prettier-ignore
    M4.FOO = new M4(0, 1, 1, 2, 0.3, 0.4, 0.8, 13, 2.1, 3.4, 5.5, 8.9, 0, 0, 0, 1);
    M4.FOO_INV = M4.FOO.inversed();
    M4.IDENTITY = M4.identity();
    // prettier-ignore
    M4.O = new M4(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    M4.YZX = M4.forSys(V3.Y, V3.Z, V3.X);
    M4.ZXY = M4.forSys(V3.Z, V3.X, V3.Y);
    // prettier-ignore
    M4.IDENTITY3 = new M4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0);
    M4.temp0 = new M4();
    M4.temp1 = new M4();
    M4.temp2 = new M4();
    M4.NAMEMAP = new javasetmap_ts.JavaMap()
        .set(M4.IDENTITY3, "M4.IDENTITY3")
        .set(M4.FOO, "M4.FOO")
        .set(M4.O, "M4.O")
        .set(M4.FOO_INV, "M4.FOO_INV")
        .set(M4.IDENTITY, "M4.IDENTITY")
        .set(M4.ZXY, "M4.ZXY")
        .set(M4.YZX, "M4.YZX");
    M4.prototype.height = 4;
    M4.prototype.width = 4;
    addOwnProperties(M4.prototype, Transformable.prototype, "constructor");

    const KEYWORD_REGEXP = new RegExp("^(" +
        "abstract|boolean|break|byte|case|catch|char|class|const|continue|debugger|" +
        "default|delete|do|double|else|enum|export|extends|false|final|finally|" +
        "float|for|function|goto|if|implements|import|in|instanceof|int|interface|" +
        "long|native|new|null|package|private|protected|public|return|short|static|" +
        "super|switch|synchronized|this|throw|throws|transient|true|try|typeof|" +
        "undefined|var|void|volatile|while|with" +
        ")$");
    function stringIsLegalKey(key) {
        return /^[a-z_$][0-9a-z_$]*$/gi.test(key) && !KEYWORD_REGEXP.test(key);
    }
    const seen = [];
    function toSource(o, indent = 0) {
        if (undefined === o)
            return "undefined";
        if (null === o)
            return "null";
        return o.toSource();
    }
    function addToSourceMethodToPrototype(clazz, method) {
        if (!clazz.prototype.toSource) {
            Object.defineProperty(clazz.prototype, "toSource", {
                value: method,
                writable: true,
                configurable: true,
                enumerable: false,
            });
        }
    }
    addToSourceMethodToPrototype(Boolean, Boolean.prototype.toString);
    addToSourceMethodToPrototype(Function, Function.prototype.toString);
    addToSourceMethodToPrototype(Number, Number.prototype.toString);
    addToSourceMethodToPrototype(RegExp, RegExp.prototype.toString);
    addToSourceMethodToPrototype(Date, function () {
        return "new Date(" + this.getTime() + ")";
    });
    addToSourceMethodToPrototype(String, function () {
        return JSON.stringify(this);
    });
    addToSourceMethodToPrototype(Array, function () {
        if (seen.includes(this)) {
            return "CIRCULAR_REFERENCE";
        }
        seen.push(this);
        let result = "[";
        for (let i = 0; i < this.length; i++) {
            result += "\n\t" + toSource(this[i]).replace(/\r\n|\n|\r/g, "$&\t");
            if (i !== this.length - 1) {
                result += ",";
            }
        }
        result += 0 === this.length ? "]" : "\n]";
        seen.pop();
        return result;
    });
    addToSourceMethodToPrototype(Object, function () {
        if (seen.includes(this)) {
            return "CIRCULAR_REFERENCE";
        }
        seen.push(this);
        let result = "{";
        const keys = Object.keys(this).sort();
        for (let i = 0; i < keys.length; i++) {
            const k = keys[i];
            result +=
                "\n\t" +
                    (stringIsLegalKey(k) ? k : JSON.stringify(k)) +
                    ": " +
                    toSource(this[k]).replace(/\r\n|\n|\r/g, "$&\t");
            if (i !== keys.length - 1) {
                result += ",";
            }
        }
        result += 0 === keys.length ? "}" : "\n}";
        seen.pop();
        return result;
    });

    class AABB extends Transformable {
        constructor(min = V3.INF, max = V3.INF.negated()) {
            super();
            this.min = min;
            this.max = max;
            assertVectors(min, max);
        }
        static forXYZ(x, y, z) {
            return new AABB(V3.O, new V3(x, y, z));
        }
        static forAABBs(aabbs) {
            const result = new AABB();
            for (const aabb of aabbs) {
                result.addAABB(aabb);
            }
            return result;
        }
        addPoint(p) {
            assertVectors(p);
            this.min = this.min.min(p);
            this.max = this.max.max(p);
            return this;
        }
        addPoints(ps) {
            ps.forEach((p) => this.addPoint(p));
            return this;
        }
        addAABB(aabb) {
            assertInst(AABB, aabb);
            this.addPoint(aabb.min);
            this.addPoint(aabb.max);
            return this;
        }
        /**
         * Returns the largest AABB contained in this which doesn't overlap with aabb
         * @param aabb
         */
        withoutAABB(aabb) {
            assertInst(AABB, aabb);
            let min, max;
            const volume = this.volume(), size = this.size();
            let remainingVolume = -Infinity;
            for (let i = 0; i < 3; i++) {
                const dim = ["x", "y", "z"][i];
                const cond = aabb.min[dim] - this.min[dim] > this.max[dim] - aabb.max[dim];
                const dimMin = cond
                    ? this.min[dim]
                    : Math.max(this.min[dim], aabb.max[dim]);
                const dimMax = !cond
                    ? this.max[dim]
                    : Math.min(this.max[dim], aabb.min[dim]);
                const newRemainingVolume = ((dimMax - dimMin) * volume) / size[dim];
                if (newRemainingVolume > remainingVolume) {
                    remainingVolume = newRemainingVolume;
                    min = this.min.withElement(dim, dimMin);
                    max = this.max.withElement(dim, dimMax);
                }
            }
            return new AABB(min, max);
        }
        getIntersectionAABB(aabb) {
            assertInst(AABB, aabb);
            return new AABB(this.min.max(aabb.min), this.max.min(aabb.max));
        }
        touchesAABB(aabb) {
            assertInst(AABB, aabb);
            return !(this.min.x > aabb.max.x ||
                this.max.x < aabb.min.x ||
                this.min.y > aabb.max.y ||
                this.max.y < aabb.min.y ||
                this.min.z > aabb.max.z ||
                this.max.z < aabb.min.z);
        }
        touchesAABBfuzzy(aabb, precisision = NLA_PRECISION) {
            assertInst(AABB, aabb);
            return !(lt(aabb.max.x, this.min.x, precisision) ||
                lt(this.max.x, aabb.min.x, precisision) ||
                lt(aabb.max.y, this.min.y, precisision) ||
                lt(this.max.y, aabb.min.y, precisision) ||
                lt(aabb.max.z, this.min.z, precisision) ||
                lt(this.max.z, aabb.min.z, precisision));
        }
        intersectsAABB(aabb) {
            assertInst(AABB, aabb);
            return !(this.min.x >= aabb.max.x ||
                this.max.x <= aabb.min.x ||
                this.min.y >= aabb.max.y ||
                this.max.y <= aabb.min.y ||
                this.min.z >= aabb.max.z ||
                this.max.z <= aabb.min.z);
        }
        intersectsAABB2d(aabb) {
            assertInst(AABB, aabb);
            return !(this.min.x >= aabb.max.x ||
                this.max.x <= aabb.min.x ||
                this.min.y >= aabb.max.y ||
                this.max.y <= aabb.min.y);
        }
        containsPoint(p) {
            assertVectors(p);
            return (this.min.x <= p.x &&
                this.min.y <= p.y &&
                this.min.z <= p.z &&
                this.max.x >= p.x &&
                this.max.y >= p.y &&
                this.max.z >= p.z);
        }
        containsSphere(center, radius) {
            assertVectors(center);
            assertNumbers(radius);
            return this.distanceToPoint(center) > radius;
        }
        intersectsSphere(center, radius) {
            assertVectors(center);
            assertNumbers(radius);
            return this.distanceToPoint(center) <= radius;
        }
        distanceToPoint(p) {
            assertVectors(p);
            const x = p.x, y = p.y, z = p.z;
            const min = this.min, max = this.max;
            if (this.containsPoint(p)) {
                return Math.max(min.x - x, x - max.x, min.y - y, y - max.y, min.z - z, z - max.z);
            }
            return p.distanceTo(new V3(clamp$1(x, min.x, max.x), clamp$1(y, min.y, max.y), clamp$1(z, min.z, max.z)));
        }
        containsAABB(aabb) {
            assertInst(AABB, aabb);
            return this.containsPoint(aabb.min) && this.containsPoint(aabb.max);
        }
        likeAABB(aabb) {
            assertInst(AABB, aabb);
            return this.min.like(aabb.min) && this.max.like(aabb.max);
        }
        intersectsLine(line) {
            assertVectors(line.anchor, line.dir1);
            const dir = line.dir1.map((el) => el || Number.MIN_VALUE);
            const minTs = this.min.minus(line.anchor).divv(dir);
            const maxTs = this.max.minus(line.anchor).divv(dir);
            const tMin = minTs.min(maxTs).maxElement(), tMax = minTs.max(maxTs).minElement();
            return tMin <= tMax && !(tMax < line.tMin || line.tMax < tMin);
        }
        hasVolume() {
            return (this.min.x <= this.max.x &&
                this.min.y <= this.max.y &&
                this.min.z <= this.max.z);
        }
        volume() {
            if (!this.hasVolume()) {
                return -1;
            }
            const v = this.max.minus(this.min);
            return v.x * v.y * v.z;
        }
        size() {
            return this.max.minus(this.min);
        }
        getCenter() {
            return this.min.plus(this.max).div(2);
        }
        transform(m4) {
            assertInst(M4, m4);
            assert(m4.isAxisAligned());
            const aabb = new AABB();
            aabb.addPoint(m4.transformPoint(this.min));
            aabb.addPoint(m4.transformPoint(this.max));
            return aabb;
        }
        ofTransformed(m4) {
            assertInst(M4, m4);
            const aabb = new AABB();
            aabb.addPoints(m4.transformedPoints(this.corners()));
            return aabb;
        }
        corners() {
            const { min, max } = this;
            return [
                min,
                new V3(min.x, min.y, max.z),
                new V3(min.x, max.y, min.z),
                new V3(min.x, max.y, max.z),
                new V3(max.x, min.y, min.z),
                new V3(max.x, min.y, max.z),
                new V3(max.x, max.y, min.z),
                max,
            ];
        }
        toString() {
            return callsce("new AABB", this.min, this.max);
        }
        toSource() {
            return this.toString();
        }
        /**
         * Return the matrix which transforms the AABB from V3.O to V3.XYZ to this AABB.
         */
        getM4() {
            return M4.translate(this.min).times(M4.scale(this.size()));
        }
    }

    const gaussLegendre24Xs = [
        -0.0640568928626056260850430826247450385909,
        0.0640568928626056260850430826247450385909,
        -0.1911188674736163091586398207570696318404,
        0.1911188674736163091586398207570696318404,
        -0.3150426796961633743867932913198102407864,
        0.3150426796961633743867932913198102407864,
        -0.4337935076260451384870842319133497124524,
        0.4337935076260451384870842319133497124524,
        -0.5454214713888395356583756172183723700107,
        0.5454214713888395356583756172183723700107,
        -0.6480936519369755692524957869107476266696,
        0.6480936519369755692524957869107476266696,
        -0.7401241915785543642438281030999784255232,
        0.7401241915785543642438281030999784255232,
        -0.8200019859739029219539498726697452080761,
        0.8200019859739029219539498726697452080761,
        -0.8864155270044010342131543419821967550873,
        0.8864155270044010342131543419821967550873,
        -0.9382745520027327585236490017087214496548,
        0.9382745520027327585236490017087214496548,
        -0.9747285559713094981983919930081690617411,
        0.9747285559713094981983919930081690617411,
        -0.9951872199970213601799974097007368118745,
        0.9951872199970213601799974097007368118745,
    ];
    const gaussLegendre24Weights = [
        0.1279381953467521569740561652246953718517,
        0.1279381953467521569740561652246953718517,
        0.1258374563468282961213753825111836887264,
        0.1258374563468282961213753825111836887264,
        0.121670472927803391204463153476262425607,
        0.121670472927803391204463153476262425607,
        0.1155056680537256013533444839067835598622,
        0.1155056680537256013533444839067835598622,
        0.1074442701159656347825773424466062227946,
        0.1074442701159656347825773424466062227946,
        0.0976186521041138882698806644642471544279,
        0.0976186521041138882698806644642471544279,
        0.086190161531953275917185202983742667185,
        0.086190161531953275917185202983742667185,
        0.0733464814110803057340336152531165181193,
        0.0733464814110803057340336152531165181193,
        0.0592985849154367807463677585001085845412,
        0.0592985849154367807463677585001085845412,
        0.0442774388174198061686027482113382288593,
        0.0442774388174198061686027482113382288593,
        0.0285313886289336631813078159518782864491,
        0.0285313886289336631813078159518782864491,
        0.0123412297999871995468056670700372915759,
        0.0123412297999871995468056670700372915759,
    ];
    function assertVectors(...vectors) {
        {
            for (let i = 0; i < arguments.length; i++) {
                if (!(arguments[i] instanceof V3 || arguments[i] instanceof Vector)) {
                    throw new Error("assertVectors arguments[" +
                        i +
                        "] is not a vector. " +
                        typeof arguments[i] +
                        " == typeof " +
                        arguments[i]);
                }
            }
        }
        return true;
    }
    function gaussLegendreQuadrature24(f, startT, endT) {
        //let result = 0
        //for (let i = 0; i < gaussLegendre24Xs.length; i++) {
        //	// gauss-legendre goes from -1 to 1, so we need to scale
        //	let t = startT + (gaussLegendre24Xs[i] + 1) / 2 * (endT - startT)
        //	result += gaussLegendre24Weights[i] * f(t)
        //}
        //const result = NLA
        //		.arrayFromFunction(24, i => startT + (gaussLegendre24Xs[i] + 1) / 2 * (endT - startT))
        //		.map((t, i) => gaussLegendre24Weights[i] * f(t))
        //		.sumInPlaceTree()
        //99.54182500782605
        //99.54182500782602
        // again, [-1,1], so div by 2
        //return result // 2 * (endT - startT)
        return ((glq24_11((t) => f(startT + ((t + 1) / 2) * (endT - startT))) / 2) *
            (endT - startT));
    }
    /**
     * Calculate the integral of f in the interval [-1;1].
     * @param f
     */
    function glq24_11(f) {
        return sumInPlaceTree(arrayFromFunction(24, (i) => gaussLegendre24Weights[i] * f(gaussLegendre24Xs[i])));
    }
    function glqInSteps(f, startT, endT, steps) {
        const dt = (endT - startT) / steps;
        return ((sumInPlaceTree(arrayFromFunction(steps, (i) => glq24_11((t) => f(startT + dt * i + ((t + 1) / 2) * dt)))) /
            2) *
            dt);
    }
    function midpointRuleQuadrature(f, startT, endT, steps = 32) {
        const dt = (endT - startT) / steps;
        return (sumInPlaceTree(arrayFromFunction(steps, (i) => startT + dt / 2 + dt * i).map(f)) * dt);
    }
    /**
     * incomplete elliptic integral of the first kind
     * EllipticF(phi, k2) = INT[0; phi] 1 / sqrt(1 - k2 * sin²(phi)) dphi
     */
    function EllipticF(phi, k2) {
        return gaussLegendreQuadrature24((phi) => Math.pow(1 - k2 * Math.pow(Math.sin(phi), 2), -0.5), 0, phi);
    }
    /**
     * incomplete elliptic integral of the second kind
     * EllipticE(phi, k2) = INT[0; phi] sqrt(1 - k2 * sin²(phi)) dphi
     */
    function EllipticE(phi, k2) {
        return gaussLegendreQuadrature24((phi) => Math.pow(1 - k2 * Math.pow(Math.sin(phi), 2), 0.5), 0, phi);
    }
    function getIntervals(ts, min, max) {
        ts.sort((a, b) => a - b);
        if (!eq(ts[0], min)) {
            ts.splice(0, 0, min);
        }
        if (!eq(getLast(ts), max)) {
            ts.push(max);
        }
        return arrayFromFunction(ts.length - 1, (i) => [ts[i], ts[i + 1]]);
    }
    function isCCW(vertices, normal) {
        const dsa = doubleSignedArea(vertices, normal);
        assert(0 != dsa);
        return dsa < 0;
    }
    function doubleSignedArea(vertices, normal) {
        assert(!normal.likeO(), "!normal.likeO()");
        const absMaxDim = normal.maxAbsDim();
        // order is important, coord0 and coord1 must be set so that coord0, coord1 and maxDim span a right-hand coordinate
        // system var [coord0, coord1] = [['y', 'z'], ['z', 'x'], ['x', 'y']][maxAbsDim]
        const doubleSignedArea = vertices
            .map((v0, i, vertices) => {
            const v1 = vertices[(i + 1) % vertices.length];
            //return (v1[coord0] - v0[coord0]) * (v1[coord1] + v0[coord1])
            switch (absMaxDim) {
                case 0:
                    return (v1.y - v0.y) * (v1.z + v0.z);
                case 1:
                    return (v1.z - v0.z) * (v1.x + v0.x);
                case 2:
                    return (v1.x - v0.x) * (v1.y + v0.y);
            }
        })
            .reduce((a, b) => a + b);
        return snap(doubleSignedArea * Math.sign(normal.e(absMaxDim)), 0);
    }
    function newtonIterate(f, x, steps = 4, EPSILON, stepize = 1) {
        EPSILON = EPSILON || 1e-8;
        for (let i = 0; i < steps; i++) {
            const fx = f(x);
            const dfdx = Matrix.jacobi(f, x, fx, EPSILON);
            assert(!dfdx.isZero());
            const dx = dfdx.solveLinearSystem(new Vector(new Float64Array(fx))).v;
            assert(!isNaN(dx[0]));
            //console.log('fx / dfdx', fx / dfdx)
            for (let j = 0; j < x.length; j++)
                x[j] -= dx[j] * stepize;
        }
        return x;
    }
    function newtonIterate1d$1(f, xStart, steps = 8, epsOrDf = 1e-8) {
        if ("number" === typeof epsOrDf) {
            let x = xStart;
            for (let i = 0; i < steps; i++) {
                const fx = f(x);
                const dfdx = (f(x + epsOrDf) - fx) / epsOrDf;
                //console.log('fx / dfdx', fx / dfdx)
                x = x - fx / dfdx;
            }
            return x;
        }
        else {
            return newtonIterateWithDerivative(f, xStart, steps, epsOrDf);
        }
    }
    function newtonIterateWithDerivative(f, xStart, steps = 4, df) {
        let x = xStart;
        for (let i = 0; i < steps; i++) {
            const fx = f(x);
            const dfdx = df(x);
            if (isNaN(fx) || isNaN(dfdx)) {
                console.log();
                //console.log('fx / dfdx', fx / dfdx)
            }
            x = x - fx / dfdx;
            if (isNaN(fx)) {
                console.log();
                //console.log('fx / dfdx', fx / dfdx)
            }
        }
        return x;
    }
    function newtonIterateWithDerivative2(fAndDf, xStart, steps = 8, xMin = -Infinity, xMax = Infinity) {
        assert(steps % 1 == 0);
        let x = xStart;
        for (let i = 0; i < steps; i++) {
            const [fx, dfdx] = fAndDf(x);
            if (isNaN(fx) || isNaN(dfdx)) {
                console.log();
                //console.log('fx / dfdx', fx / dfdx)
            }
            x = x - fx / dfdx;
            if (0 == dfdx || x < xMin || xMax < x) {
                return undefined;
            }
        }
        return x;
    }
    function newtonIterateSmart(f, xStart, steps = 4, df, mindf = 1e-6) {
        let x = xStart;
        for (let i = 0; i < steps; i++) {
            const fx = f(x);
            const dfdx = df(x);
            if (Math.abs(dfdx) < mindf && Math.abs(fx) < mindf) {
                return newtonIterate1d$1(df, x, steps, df);
            }
            if (isNaN(fx) || isNaN(dfdx)) {
                console.log();
                //console.log('fx / dfdx', fx / dfdx)
            }
            x = x - fx / dfdx;
            if (isNaN(fx)) {
                console.log();
                //console.log('fx / dfdx', fx / dfdx)
            }
        }
        return x;
    }
    function newtonIterate2d(f1, f2, sStart, tStart, steps) {
        const EPSILON = 1e-6;
        steps = steps || 4;
        let s = sStart, t = tStart, f1ts, f2ts;
        do {
            /*
                 | a b |-1                   |  d -b |
                 | c d |   = 1 / (ad - bc) * | -c  a |
                 */
            f1ts = f1(s, t);
            f2ts = f2(s, t);
            /*
                 let df1s = (f1(s + EPSILON, t) - f1ts) / EPSILON, df1t = (f1(s, t + EPSILON) - f1ts) / EPSILON,
                 df2s = (f2(s + EPSILON, t) - f2ts) / EPSILON, df2t = (f2(s, t + EPSILON) - f2ts) / EPSILON
                 let det = df1s * df2t - df1t * df2s
                 s = s - ( df2t * f1ts - df1t * f2ts) / det
                 t = t - (-df2s * f1ts + df1s * f2ts) / det
                 */
            // TODO: is this even more accurate?
            const df1s = f1(s + EPSILON, t) - f1ts, df1t = f1(s, t + EPSILON) - f1ts, df2s = f2(s + EPSILON, t) - f2ts, df2t = f2(s, t + EPSILON) - f2ts;
            const det = (df1s * df2t - df1t * df2s) / EPSILON;
            const ds = (df2t * f1ts - df1t * f2ts) / det;
            const dt = (-df2s * f1ts + df1s * f2ts) / det;
            s -= ds;
            t -= dt;
        } while (--steps && Math.pow(f1ts, 2) + Math.pow(f2ts, 2) > NLA_PRECISION);
        if (Math.pow(f1ts, 2) + Math.pow(f2ts, 2) > NLA_PRECISION) {
            console.log(Math.pow(f1ts, 2) + Math.pow(f2ts, 2));
            return undefined;
        }
        return new V3(s, t, 0);
    }
    function newtonIterate2dWithDerivatives(f, g, sStart, tStart, steps, dfds, dfdt, dgds, dgdt) {
        steps = steps || 4;
        let s = sStart, t = tStart;
        let f1ts, f2ts;
        do {
            /*
                 | a b |-1                   |  d -b |
                 | c d |   = 1 / (ad - bc) * | -c  a |
                 */
            f1ts = f(s, t);
            f2ts = g(s, t);
            const df1s = dfds(s, t), df1t = dfdt(s, t), df2s = dgds(s, t), df2t = dgdt(s, t);
            // TODO: is this even more accurate?
            const det = df1s * df2t - df1t * df2s;
            const ds = (df2t * f1ts - df1t * f2ts) / det;
            const dt = (-df2s * f1ts + df1s * f2ts) / det;
            s -= ds;
            t -= dt;
        } while (--steps && f1ts * f1ts + f2ts * f2ts > NLA_PRECISION / 32);
        if (!steps) {
            //console.log(f1ts * f1ts + f2ts * f2ts)
            return undefined;
        }
        return V(s, t, 0);
    }
    function getRoots(f, a, b, stepSize, df) {
        const results = [];
        for (let startT = a; startT <= b; startT += stepSize) {
            const dt = stepSize * Math.abs(df(startT));
            if (Math.abs(f(startT)) <= dt) {
                //const t = newtonIterate1d(f, startT, 16)
                let t = newtonIterateWithDerivative(f, startT, 16, df);
                if (!eq0(f(t)) || eq0(df(t))) {
                    t = newtonIterate1d$1(df, startT, 16);
                    // const a = startT - dt,
                    // 	b = startT + dt
                    //if (f(a) * f(b) < 0) {
                    //    t = bisect(f, a, b, 16)
                    //} else if (df(a) * df(b) < 0) {
                    //    t = bisect(df, a, b, 16)
                    //}
                }
                if (eq0(f(t)) && !results.some((r) => eq(r, t))) {
                    results.push(t);
                }
            }
        }
        return results;
    }

    var ts3dutils = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AABB: AABB,
        DEG: DEG,
        EllipticE: EllipticE,
        EllipticF: EllipticF,
        GOLDEN_RATIO: GOLDEN_RATIO,
        M4: M4,
        MINUS: MINUS,
        Matrix: Matrix,
        NLA_DEBUG: NLA_DEBUG,
        NLA_PRECISION: NLA_PRECISION,
        P3XY: P3XY,
        P3YZ: P3YZ,
        P3ZX: P3ZX,
        PI: PI$1,
        SCE: SCE,
        STR: STR,
        TAU: TAU,
        Transformable: Transformable,
        V: V,
        V3: V3,
        VV: VV,
        Vector: Vector,
        absSum: absSum,
        addOwnProperties: addOwnProperties,
        arithmeticGeometricMean: arithmeticGeometricMean,
        arrayCopy: arrayCopy,
        arrayCopyBlocks: arrayCopyBlocks,
        arrayCopyStep: arrayCopyStep,
        arrayEquals: arrayEquals,
        arrayFromFunction: arrayFromFunction,
        arrayHashCode: arrayHashCode,
        arrayRange: arrayRange,
        arraySamples: arraySamples,
        arraySwap: arraySwap,
        assert: assert,
        assertInst: assertInst,
        assertInts: assertInts,
        assertNever: assertNever,
        assertNumbers: assertNumbers,
        assertVectors: assertVectors,
        assertf: assertf,
        bagRemoveIndex: bagRemoveIndex,
        bagToggle: bagToggle,
        between: between,
        binaryIndexOf: binaryIndexOf,
        binaryInsert: binaryInsert,
        bisect: bisect$1,
        callsce: callsce,
        canonAngle: canonAngle,
        ceil10: ceil10,
        checkDerivate: checkDerivate,
        clamp: clamp$1,
        clear: clear,
        combinations: combinations,
        concatenated: concatenated,
        defaultRoundFunction: defaultRoundFunction,
        disableConsole: disableConsole,
        doubleSignedArea: doubleSignedArea,
        emod: emod,
        enableConsole: enableConsole,
        eq: eq,
        eq0: eq0,
        eq02: eq02,
        eq2: eq2,
        eqAngle: eqAngle,
        equals: equals,
        firstUnsorted: firstUnsorted,
        floatHashCode: floatHashCode,
        floor10: floor10,
        forceFinite: forceFinite,
        fuzzyBetween: fuzzyBetween,
        fuzzyUniques: fuzzyUniques,
        fuzzyUniquesF: fuzzyUniquesF,
        gaussLegendre24Weights: gaussLegendre24Weights,
        gaussLegendre24Xs: gaussLegendre24Xs,
        gaussLegendreQuadrature24: gaussLegendreQuadrature24,
        ge: ge,
        getIntervals: getIntervals,
        getLast: getLast,
        getRoots: getRoots,
        glq24_11: glq24_11,
        glqInSteps: glqInSteps,
        gt: gt,
        hasConstructor: hasConstructor,
        hashCode: hashCode,
        ilog: ilog,
        indexWithMax: indexWithMax,
        isCCW: isCCW,
        le: le,
        lerp: lerp$1,
        lerpInv: lerpInv$1,
        lt: lt,
        mapFilter: mapFilter,
        mapPush: mapPush,
        max: max$1,
        midpointRuleQuadrature: midpointRuleQuadrature,
        min: min$1,
        mod: mod,
        newtonIterate: newtonIterate,
        newtonIterate1d: newtonIterate1d$1,
        newtonIterate2d: newtonIterate2d,
        newtonIterate2dWithDerivatives: newtonIterate2dWithDerivatives,
        newtonIterateSmart: newtonIterateSmart,
        newtonIterateWithDerivative: newtonIterateWithDerivative,
        newtonIterateWithDerivative2: newtonIterateWithDerivative2,
        numberToStr: numberToStr,
        pqFormula: pqFormula,
        rad2deg: rad2deg,
        remove: remove,
        removeAll: removeAll,
        removeIndex: removeIndex,
        removeIndexes: removeIndexes,
        removeJSComments: removeJSComments,
        removeMatch: removeMatch,
        round10: round10,
        setLast: setLast,
        sliceStep: sliceStep,
        snap: snap,
        snap0: snap0,
        snap2: snap2,
        snapEPS: snapEPS,
        solveCubicReal2: solveCubicReal2,
        splicePure: splicePure,
        sum: sum,
        sumInPlaceTree: sumInPlaceTree,
        time: time,
        toSource: toSource,
        toggle: toggle,
        unique: unique,
        vArrGet: vArrGet,
        vArrSet: vArrSet,
        withMax: withMax$1,
        zeroAngle: zeroAngle
    });

    /// <reference types="webgl-strict-types" />
    const WGL = WebGLRenderingContext;
    class Buffer$1 {
        /**
         * Provides a simple method of uploading data to a GPU buffer.
         *
         * @example
         *     const vertices = new Buffer(WGL.ARRAY_BUFFER, Float32Array)
         *     vertices.data = [[0, 0, 0], [1, 0, 0], [0, 1, 0], [1, 1, 0]]
         *     vertices.compile()
         *
         * @example
         *     const indices = new Buffer(WGL.ELEMENT_ARRAY_BUFFER, Uint16Array)
         *     indices.data = [[0, 1, 2], [2, 1, 3]]
         *     indices.compile()
         *
         * @param target Specifies the target to which the buffer object is bound.
         * @param type
         */
        constructor(target, type) {
            this.target = target;
            this.type = type;
            this.buffer = undefined;
            this.data = [];
            /** Number of elements in buffer. 2 V3s is still 2, not 6. */
            this.count = 0;
            /** Space between elements in buffer. 3 for V3s. */
            this.spacing = 1;
            this.hasBeenCompiled = false;
            assert(target == WGL.ARRAY_BUFFER || target == WGL.ELEMENT_ARRAY_BUFFER, 'target == WGL.ARRAY_BUFFER || target == WGL.ELEMENT_ARRAY_BUFFER');
            assert(type == Float32Array || type == Uint16Array || type == Uint32Array, 'type == Float32Array || type == Uint16Array || type == Uint32Array');
            if (Uint16Array == type) {
                this.bindSize = WGL.UNSIGNED_SHORT;
            }
            else if (Uint32Array == type) {
                this.bindSize = WGL.UNSIGNED_INT;
            }
        }
        /**
         * Upload the contents of `data` to the GPU in preparation for rendering. The data must be a list of lists
         * where each inner list has the same length. For example, each element of data for vertex normals would be a
         * list of length three. This will remember the data length and element length for later use by shaders.
         *
         * This could have used `[].concat.apply([], this.data)` to flatten the array but Google
         * Chrome has a maximum number of arguments so the concatenations are chunked to avoid that limit.
         *
         * @param usage Either `WGL.STATIC_DRAW` or `WGL.DYNAMIC_DRAW`. Defaults to `WGL.STATIC_DRAW`
         */
        compile(usage = WGL.STATIC_DRAW, gl = currentGL()) {
            assert(WGL.STATIC_DRAW == usage || WGL.DYNAMIC_DRAW == usage, 'WGL.STATIC_DRAW == type || WGL.DYNAMIC_DRAW == type');
            this.buffer = this.buffer || gl.createBuffer();
            let buffer;
            if (this.data.length == 0) {
                console.warn('empty buffer ' + this.name);
                //console.trace()
            }
            if (this.data.length == 0 || this.data[0] instanceof V3) {
                assert(!(this.data[0] instanceof V3) || this.type == Float32Array);
                V3.pack(this.data, (buffer = new this.type(this.data.length * 3))); // asserts that all
                // elements are V3s
                this.spacing = 3;
                this.count = this.data.length;
                this.maxValue = 0;
            }
            else {
                //assert(Array != this.data[0].constructor, this.name + this.data[0])
                if (Array.isArray(this.data[0])) {
                    const bufferLength = this.data.length * this.data[0].length;
                    buffer = new this.type(bufferLength);
                    let i = this.data.length, destPtr = bufferLength;
                    while (i--) {
                        const subArray = this.data[i];
                        let j = subArray.length;
                        while (j--) {
                            buffer[--destPtr] = subArray[j];
                        }
                    }
                    assert(0 == destPtr);
                }
                else {
                    buffer = new this.type(this.data);
                }
                const spacing = this.data.length ? buffer.length / this.data.length : 0;
                assert(spacing % 1 == 0, `buffer ${this.name} elements not of consistent size, average size is ` + spacing);
                {
                    if (10000 <= buffer.length) {
                        this.maxValue = 0;
                    }
                    else {
                        this.maxValue = Math.max.apply(undefined, buffer);
                    }
                }
                assert([1, 2, 3, 4].includes(spacing));
                this.spacing = spacing;
                this.count = this.data.length;
            }
            gl.bindBuffer(this.target, this.buffer);
            gl.bufferData(this.target, buffer, usage);
            this.hasBeenCompiled = true;
        }
    }

    const { cos: cos$1, sin: sin$1, PI: PI$2, min: min$2, max: max$2 } = Math;
    const WGL$1 = WebGLRenderingContext;
    const tempM4_1 = new M4();
    const tempM4_2 = new M4();
    /**
     * @example new Mesh()
     *        .addIndexBuffer('TRIANGLES')
     *        .addIndexBuffer('LINES')
     *        .addVertexBuffer('normals', 'ts_Normal')
     */
    class Mesh extends Transformable {
        constructor() {
            super();
            this.hasBeenCompiled = false;
            this.vertexBuffers = {};
            this.indexBuffers = {};
            this.addVertexBuffer('vertices', 'ts_Vertex');
        }
        /**
         * Calculate area, volume and centroid of the mesh.
         *
         * The area is the sum of the areas of the triangles.
         *
         * For closed meshes, the volume is the contained volume. If the volume is inside-out, i.e. the face normals point
         * inwards, the returned value is negative. In general, this calculates the sum of the z-direction shadow volumes
         * of the triangles. The z-dir shadow volume is the cut-off prism with the triangle projected onto the XY plane as
         * the base face and the triangle itself as the top face.
         *
         * The centroid is the "mean point of all points inside the volume". If a uniform density is assumed, this is
         * equivalent to the center of gravity. In general, this calculates the weighted average of the centroids of all the
         * triangle shadow volumes.
         */
        calcVolume() {
            let totalVolumeX2 = 0, totalCentroidWithZX2 = V3.O, totalAreaX2 = 0;
            const triangles = this.TRIANGLES;
            const vertices = this.vertices;
            for (let i = 0; i < triangles.length; i += 3) {
                const ai = triangles[i + 0], bi = triangles[i + 1], ci = triangles[i + 2];
                const a = vertices[ai], b = vertices[bi], c = vertices[ci];
                const ab = b.minus(a), ac = c.minus(a);
                const normal = ab.cross(ac);
                //const centroidZ = (v0.z + v1.z + v2.z) / 3
                const faceCentroid = V3.add(a, b, c).div(3);
                //totalVolume += centroidZ * (area === v01.cross(v02).length() / 2) * v01.cross(v02).unit().z
                totalVolumeX2 += faceCentroid.z * normal.z;
                const faceAreaX2 = normal.length();
                totalAreaX2 += faceAreaX2;
                // NB: the shadow volume centroid does NOT have the same XY coordinates
                // as the face centroid.
                // calculate the weighted centroid of the shadow volume:
                // faceShadowCentroid = INTEGRATE [0; 1] (
                //   INTEGRATE [0; 1 - s] (
                //     normal.z *
                //     ((1 - s - t) a + s b + t c) *
                //     ((1 - s - t) a + s b + t c).z
                //   ) dt
                // ) ds
                // = (a (2 a.z + b.z + c.z) + b (a.z + 2 b.z + c.z) + c (a.z + b.z + 2 c.z)) / 24
                const faceShadowCentroid = V3.add(a.times(2 * a.z + b.z + c.z), b.times(a.z + 2 * b.z + c.z), c.times(a.z + b.z + 2 * c.z)).times(normal.z); // 1/24 factor is done at very end
                totalCentroidWithZX2 = totalCentroidWithZX2.plus(faceShadowCentroid);
            }
            // sumInPlaceTree adds negligible additional accuracy for XY sphere
            const volume = totalVolumeX2 / 2;
            return {
                volume,
                centroid: eq0(volume) ? V3.O : totalCentroidWithZX2.div(24 * volume).schur(new V3(1, 1, 0.5)),
                area: totalAreaX2 / 2,
            };
        }
        /**
         * Add a new vertex buffer with a list as a property called `name` on this object and map it to
         * the attribute called `attribute` in all shaders that draw this mesh.
         * @example new Mesh().addVertexBuffer('coords', 'ts_TexCoord')
         */
        addVertexBuffer(name, attribute) {
            assert(!this.vertexBuffers[attribute], 'Buffer ' + attribute + ' already exists.');
            //assert(!this[name])
            this.hasBeenCompiled = false;
            assert('string' == typeof name);
            assert('string' == typeof attribute);
            const buffer = (this.vertexBuffers[attribute] = new Buffer$1(WGL$1.ARRAY_BUFFER, Float32Array));
            buffer.name = name;
            this[name] = [];
            return this;
        }
        /**
         * Add a new index buffer.
         * @example new Mesh().addIndexBuffer('TRIANGLES')
         * @example new Mesh().addIndexBuffer('LINES')
         */
        addIndexBuffer(name, type = WGL$1.UNSIGNED_SHORT) {
            this.hasBeenCompiled = false;
            const arrayType = WGL$1.UNSIGNED_SHORT == type ? Uint16Array : Uint32Array;
            const buffer = (this.indexBuffers[name] = new Buffer$1(WGL$1.ELEMENT_ARRAY_BUFFER, arrayType));
            buffer.name = name;
            this[name] = [];
            return this;
        }
        concat(...others) {
            const result = new Mesh();
            const allMeshes = [this].concat(others);
            Object.getOwnPropertyNames(this.vertexBuffers).forEach((attribute) => {
                assert(others.every((other) => !!other.vertexBuffers[attribute]));
                const bufferName = this.vertexBuffers[attribute].name;
                if ('ts_Vertex' !== attribute) {
                    result.addVertexBuffer(bufferName, attribute);
                }
                result[bufferName] = [].concat(...allMeshes.map((mesh) => mesh[bufferName]));
            });
            Object.getOwnPropertyNames(this.indexBuffers).forEach((name) => {
                assert(others.every((other) => !!other.indexBuffers[name]));
                result.addIndexBuffer(name, this.indexBuffers[name].bindSize);
                const newIndexBufferData = new Array(allMeshes.reduce((sum, mesh) => sum + mesh[name].length, 0));
                let ptr = 0;
                let startIndex = 0;
                for (const mesh of allMeshes) {
                    for (const index of mesh[name]) {
                        newIndexBufferData[ptr++] = startIndex + index;
                    }
                    startIndex += mesh.vertices.length;
                }
                result[name] = newIndexBufferData;
            });
            result.compile();
            return result;
        }
        /**
         * Upload all attached buffers to the GPU in preparation for rendering. This doesn't need to be called every
         * frame, only needs to be done when the data changes.
         *
         * Sets `this.hasBeenCompiled` to true.
         */
        compile(gl = currentGL()) {
            // figure out shortest vertex buffer to make sure indexBuffers are in bounds
            let minVertexBufferLength = Infinity; // TODO, _minBufferName
            Object.getOwnPropertyNames(this.vertexBuffers).forEach((attribute) => {
                const buffer = this.vertexBuffers[attribute];
                buffer.data = this[buffer.name];
                buffer.compile(undefined, gl);
                if (this[buffer.name].length < minVertexBufferLength) {
                    // _minBufferName = attribute
                    minVertexBufferLength = this[buffer.name].length;
                }
            });
            for (const name in this.indexBuffers) {
                const buffer = this.indexBuffers[name];
                buffer.data = this[buffer.name];
                buffer.compile(undefined, gl);
                // if (NLA_DEBUG && buffer.maxValue >= minVertexBufferLength) {
                // 	throw new Error(`max index value for buffer ${name}
                // 	is too large ${buffer.maxValue} min Vbuffer size: ${minVertexBufferLength} ${minBufferName}`)
                // }
            }
            this.hasBeenCompiled = true;
            return this;
        }
        static fromBinarySTL(stl) {
            return __awaiter(this, void 0, void 0, function* () {
                return new Promise((resolve, reject) => {
                    const mesh = new Mesh().addVertexBuffer('normals', 'ts_Normal');
                    const fileReader = new FileReader();
                    fileReader.onerror = reject;
                    fileReader.onload = function (_progressEvent) {
                        const dataView = new DataView(this.result);
                        const HEADER_BYTE_SIZE = 80;
                        const triangleCount = dataView.getUint32(HEADER_BYTE_SIZE, true);
                        mesh.normals.length = triangleCount * 3;
                        mesh.vertices.length = triangleCount * 3;
                        let i = triangleCount * 3, bufferPtr = HEADER_BYTE_SIZE + 4;
                        function readV3() {
                            const x = dataView.getFloat32(bufferPtr, true);
                            bufferPtr += 4;
                            const y = dataView.getFloat32(bufferPtr, true);
                            bufferPtr += 4;
                            const z = dataView.getFloat32(bufferPtr, true);
                            bufferPtr += 4;
                            return new V3(x, y, z);
                        }
                        while (i) {
                            i -= 3;
                            const normal = readV3();
                            mesh.normals[i + 0] = normal;
                            mesh.normals[i + 1] = normal;
                            mesh.normals[i + 2] = normal;
                            mesh.vertices[i + 0] = readV3();
                            mesh.vertices[i + 1] = readV3();
                            mesh.vertices[i + 2] = readV3();
                            bufferPtr += 2;
                        }
                        resolve(mesh);
                    };
                    fileReader.readAsArrayBuffer(stl);
                });
            });
        }
        toBinarySTL() {
            if (!this.TRIANGLES)
                throw new Error('TRIANGLES must be defined.');
            const HEADER_BYTE_SIZE = 80, FLOAT_BYTE_SIZE = 4;
            const triangles = this.TRIANGLES;
            const triangleCount = triangles.length / 3;
            const buffer = new ArrayBuffer(HEADER_BYTE_SIZE + 4 + triangleCount * (4 * 3 * FLOAT_BYTE_SIZE + 2));
            const dataView = new DataView(buffer);
            dataView.setUint32(HEADER_BYTE_SIZE, triangleCount, true);
            let bufferPtr = HEADER_BYTE_SIZE + 4;
            let i = triangles.length;
            while (i) {
                i -= 3;
                const a = this.vertices[triangles[i]], b = this.vertices[triangles[i + 1]], c = this.vertices[triangles[i + 2]];
                const normal = V3.normalOnPoints(a, b, c);
                [normal, a, b, c].forEach((v) => {
                    dataView.setFloat32(bufferPtr, v.x, true);
                    bufferPtr += 4;
                    dataView.setFloat32(bufferPtr, v.y, true);
                    bufferPtr += 4;
                    dataView.setFloat32(bufferPtr, v.z, true);
                    bufferPtr += 4;
                });
                // skip 2 bytes, already initalized to zero
                bufferPtr += 2;
            }
            assert(bufferPtr == buffer.byteLength, bufferPtr + ' ' + buffer.byteLength);
            return new Blob([buffer], { type: 'application/octet-stream' });
        }
        /**
         * Returns a new Mesh with transformed vertices.
         *
         * Transform all vertices by `matrix` and all normals by the inverse transpose of `matrix`.
         *
         * Index buffer data is referenced.
         */
        transform(m4) {
            const mesh = new Mesh();
            mesh.vertices = m4.transformedPoints(this.vertices);
            if (this.normals) {
                mesh.addVertexBuffer('normals', 'ts_Normal');
                const invTrans = m4.as3x3(tempM4_1).inversed(tempM4_2).transposed(tempM4_1);
                mesh.normals = this.normals.map((n) => invTrans.transformVector(n).unit());
                // mesh.normals.forEach(n => assert(n.hasLength(1)))
            }
            for (const name in this.indexBuffers) {
                mesh.addIndexBuffer(name);
                mesh[name] = this[name];
            }
            for (const attribute in this.vertexBuffers) {
                if ('ts_Vertex' !== attribute && 'ts_Normal' !== attribute) {
                    const name = this.vertexBuffers[attribute].name;
                    mesh.addVertexBuffer(name, attribute);
                    mesh[name] = this[name];
                }
            }
            // this.hasBeenCompiled && mesh.compile()
            return mesh;
        }
        /**
         * Computes a new normal for each vertex from the average normal of the neighboring triangles. This means
         * adjacent triangles must share vertices for the resulting normals to be smooth.
         */
        computeNormalsFromFlatTriangles() {
            if (!this.normals)
                this.addVertexBuffer('normals', 'ts_Normal');
            // tslint:disable:no-string-literal
            //this.vertexBuffers['ts_Normal'].data = arrayFromFunction(this.vertices.length, i => V3.O)
            const TRIANGLES = this.TRIANGLES, vertices = this.vertices, normals = this.normals;
            normals.length = vertices.length;
            for (let i = 0; i < TRIANGLES.length; i += 3) {
                const ai = TRIANGLES[i], bi = TRIANGLES[i + 1], ci = TRIANGLES[i + 2];
                const a = vertices[ai];
                const b = vertices[bi];
                const c = vertices[ci];
                const normal = b.minus(a).cross(c.minus(a)).unit();
                normals[ai] = normals[ai].plus(normal);
                normals[bi] = normals[bi].plus(normal);
                normals[ci] = normals[ci].plus(normal);
            }
            for (let i = 0; i < vertices.length; i++) {
                normals[i] = normals[i].unit();
            }
            this.hasBeenCompiled = false;
            return this;
        }
        computeWireframeFromFlatTriangles(indexBufferName = 'LINES') {
            if (!this.TRIANGLES)
                throw new Error('TRIANGLES must be defined.');
            const canonEdges = new Set();
            function canonEdge(i0, i1) {
                const iMin = min$2(i0, i1), iMax = max$2(i0, i1);
                return (iMin << 16) | iMax;
            }
            // function uncanonEdge(key) {
            // 	return [key >> 16, key & 0xffff]
            // }
            const t = this.TRIANGLES;
            for (let i = 0; i < t.length; i += 3) {
                canonEdges.add(canonEdge(t[i + 0], t[i + 1]));
                canonEdges.add(canonEdge(t[i + 1], t[i + 2]));
                canonEdges.add(canonEdge(t[i + 2], t[i + 0]));
            }
            const data = indexBufferName;
            if (!this[data])
                this.addIndexBuffer(indexBufferName);
            //this.LINES = new Array(canonEdges.size)
            canonEdges.forEach((val) => this[data].push(val >> 16, val & 0xffff));
            this.hasBeenCompiled = false;
            return this;
        }
        computeWireframeFromFlatTrianglesClosedMesh(indexBufferName = 'LINES') {
            if (!this.TRIANGLES)
                throw new Error('TRIANGLES must be defined.');
            if (!this.LINES)
                this.addIndexBuffer('LINES');
            const tris = this.TRIANGLES;
            if (!this[indexBufferName])
                this.addIndexBuffer(indexBufferName);
            const lines = this[indexBufferName];
            for (let i = 0; i < tris.length; i += 3) {
                if (tris[i + 0] < tris[i + 1])
                    lines.push(tris[i + 0], tris[i + 1]);
                if (tris[i + 1] < tris[i + 2])
                    lines.push(tris[i + 1], tris[i + 2]);
                if (tris[i + 2] < tris[i + 0])
                    lines.push(tris[i + 2], tris[i + 0]);
            }
            this.hasBeenCompiled = false;
            return this;
        }
        computeNormalLines(length = 1, indexBufferName = 'LINES') {
            if (!this.normals) {
                throw new Error('normals must be defined.');
            }
            const vs = this.vertices, si = this.vertices.length;
            if (!this[indexBufferName])
                this.addIndexBuffer(indexBufferName);
            for (let i = 0; i < this.normals.length; i++) {
                vs[si + i] = vs[i].plus(this.normals[i].toLength(length));
                this[indexBufferName].push(si + i, i);
            }
            this.hasBeenCompiled = false;
            return this;
        }
        getAABB() {
            return new AABB().addPoints(this.vertices);
        }
        getBoundingSphere() {
            const sphere = { center: this.getAABB().getCenter(), radius: 0 };
            for (let i = 0; i < this.vertices.length; i++) {
                sphere.radius = Math.max(sphere.radius, this.vertices[i].minus(sphere.center).length());
            }
            return sphere;
        }
        /**
         * Generates a square mesh in the XY plane.
         * Texture coordinates (buffer "coords") are set to go from 0 to 1 in either direction.
         *
         * @param options foo
         * @param options.detail Defaults to 1
         * @param options.detailX Defaults to options.detail. Number of subdivisions in X direction.
         * @param options.detailY Defaults to options.detail. Number of subdivisions in Y direction.j
         * @param options.width defaults to 1
         * @param options.height defaults to 1
         * @param options.startX defaults to 0
         * @param options.startY defaults to 0
         */
        static plane(options = {}) {
            const detailX = options.detailX || options.detail || 1;
            const detailY = options.detailY || options.detail || 1;
            const startX = options.startX || 0;
            const startY = options.startY || 0;
            const width = options.width || 1;
            const height = options.height || 1;
            const mesh = new Mesh()
                .addIndexBuffer('LINES')
                .addIndexBuffer('TRIANGLES')
                .addVertexBuffer('normals', 'ts_Normal')
                .addVertexBuffer('coords', 'ts_TexCoord');
            for (let j = 0; j <= detailY; j++) {
                const t = j / detailY;
                for (let i = 0; i <= detailX; i++) {
                    const s = i / detailX;
                    mesh.vertices.push(new V3(startX + s * width, startY + t * height, 0));
                    mesh.coords.push([s, t]);
                    mesh.normals.push(V3.Z);
                    if (i < detailX && j < detailY) {
                        const offset = i + j * (detailX + 1);
                        mesh.TRIANGLES.push(offset, offset + detailX + 1, offset + 1, offset + detailX + 1, offset + detailX + 2, offset + 1);
                    }
                }
            }
            for (let i = 0; i < detailX; i++) {
                mesh.LINES.push(i, i + 1);
                mesh.LINES.push((detailX + 1) * detailY + i, (detailX + 1) * detailY + i + 1);
            }
            for (let j = 0; j < detailY; j++) {
                mesh.LINES.push(detailX * j, detailX * (j + 1) + 1);
                mesh.LINES.push(detailX * (j + 1), detailX * (j + 2) + 1);
            }
            mesh.compile();
            return mesh;
        }
        static box(xDetail = 1, yDetail = 1, zDetail = 1) {
            const mesh = new Mesh()
                .addIndexBuffer('LINES')
                .addIndexBuffer('TRIANGLES')
                .addVertexBuffer('normals', 'ts_Normal');
            mesh.vertices.length = mesh.normals.length =
                2 * ((xDetail + 1) * (yDetail + 1) + (yDetail + 1) * (zDetail + 1) + (zDetail + 1) * (xDetail + 1));
            mesh.TRIANGLES.length = 4 * (xDetail * yDetail + yDetail * zDetail + zDetail * xDetail);
            let vi = 0, ti = 0;
            function x(detailX, detailY, m, startX = 0, width = 1, startY = 0, height = 1) {
                const normal = m.transformVector(V3.Z);
                for (let j = 0; j <= detailY; j++) {
                    const t = j / detailY;
                    for (let i = 0; i <= detailX; i++) {
                        const s = i / detailX;
                        mesh.vertices[vi] = m.transformPoint(new V3(startX + s * width, startY + t * height, 0));
                        mesh.normals[vi] = normal;
                        vi++;
                        if (i < detailX && j < detailY) {
                            const offset = i + j * (detailX + 1);
                            mesh.TRIANGLES[ti++] = offset;
                            mesh.TRIANGLES[ti++] = offset + detailX + 1;
                            mesh.TRIANGLES[ti++] = offset + 1;
                            mesh.TRIANGLES[ti++] = offset + detailX + 1;
                            mesh.TRIANGLES[ti++] = offset + detailX + 2;
                            mesh.TRIANGLES[ti++] = offset + 1;
                        }
                    }
                }
            }
            x(yDetail, xDetail, M4.forSys(V3.Y, V3.X, V3.Z.negated()));
            x(xDetail, yDetail, M4.translate(V3.Z));
            x(zDetail, yDetail, M4.forSys(V3.Z, V3.Y, V3.X.negated()));
            x(yDetail, zDetail, M4.forSys(V3.Y, V3.Z, V3.X, V3.X));
            x(xDetail, zDetail, M4.forSys(V3.X, V3.Z, V3.Y.negated()));
            x(zDetail, xDetail, M4.forSys(V3.Z, V3.X, V3.Y, V3.Y));
            return mesh;
        }
        /**
         * Generates a unit cube (1x1x1) starting at the origin and extending into the (+ + +) octant.
         * I.e. box from V3.O to V3(1,1,1)
         * Creates line (only cube edges), triangle, vertex and normal1 buffers.
         */
        static cube() {
            const mesh = new Mesh()
                .addVertexBuffer('normals', 'ts_Normal')
                .addIndexBuffer('TRIANGLES')
                .addIndexBuffer('LINES');
            // basically indexes for faces of the cube. vertices each need to be added 3 times,
            // as they have different normals depending on the face being rendered
            // prettier-ignore
            const VERTEX_CORNERS = [
                0, 1, 2, 3,
                4, 5, 6, 7,
                0, 4, 1, 5,
                2, 6, 3, 7,
                2, 6, 0, 4,
                3, 7, 1, 5,
            ];
            mesh.vertices = VERTEX_CORNERS.map((i) => Mesh.UNIT_CUBE_CORNERS[i]);
            mesh.normals = [V3.X.negated(), V3.X, V3.Y.negated(), V3.Y, V3.Z.negated(), V3.Z].flatMap((v) => [v, v, v, v]);
            for (let i = 0; i < 6 * 4; i += 4) {
                pushQuad(mesh.TRIANGLES, 0 != i % 8, VERTEX_CORNERS[i], VERTEX_CORNERS[i + 1], VERTEX_CORNERS[i + 2], VERTEX_CORNERS[i + 3]);
            }
            // indexes of LINES relative to UNIT_CUBE_CORNERS. Mapped to VERTEX_CORNERS.indexOf
            // so they make sense in the context of the mesh
            // prettier-ignore
            mesh.LINES = [
                0, 1,
                0, 2,
                1, 3,
                2, 3,
                0, 4,
                1, 5,
                2, 6,
                3, 7,
                4, 5,
                4, 6,
                5, 7,
                6, 7,
            ].map(i => VERTEX_CORNERS.indexOf(i));
            mesh.compile();
            return mesh;
        }
        static isocahedron() {
            return Mesh.sphere(0);
        }
        static sphere2(latitudes, longitudes) {
            const baseVertices = arrayFromFunction(latitudes, (i) => {
                const angle = (i / (latitudes - 1)) * PI$2 - PI$2 / 2;
                return new V3(0, cos$1(angle), sin$1(angle));
            });
            return Mesh.rotation(baseVertices, { anchor: V3.O, dir1: V3.Z }, 2 * PI$2, longitudes, true, baseVertices);
        }
        /**
         * Returns a sphere mesh with radius 1 created by subdividing the faces of a isocahedron (20-sided) recursively
         * The sphere is positioned at the origin
         * @param subdivisions
         *      How many recursive divisions to do. A subdivision divides a triangle into 4,
         *      so the total number of triangles is 20 * 4^subdivisions
         * @returns
         *      Contains vertex and normal1 buffers and index buffers for triangles and LINES
         */
        static sphere(subdivisions = 3) {
            const golden = (1 + Math.sqrt(5)) / 2, u = new V3(1, golden, 0).unit(), s = u.x, t = u.y;
            // base vertices of isocahedron
            const vertices = [
                new V3(-s, t, 0),
                new V3(s, t, 0),
                new V3(-s, -t, 0),
                new V3(s, -t, 0),
                new V3(0, -s, t),
                new V3(0, s, t),
                new V3(0, -s, -t),
                new V3(0, s, -t),
                new V3(t, 0, -s),
                new V3(t, 0, s),
                new V3(-t, 0, -s),
                new V3(-t, 0, s),
            ];
            // base triangles of isocahedron
            // prettier-ignore
            const triangles = [
                // 5 faces around point 0
                0, 11, 5,
                0, 5, 1,
                0, 1, 7,
                0, 7, 10,
                0, 10, 11,
                // 5 adjacent faces
                1, 5, 9,
                5, 11, 4,
                11, 10, 2,
                10, 7, 6,
                7, 1, 8,
                // 5 faces around point 3
                3, 9, 4,
                3, 4, 2,
                3, 2, 6,
                3, 6, 8,
                3, 8, 9,
                // 5 adjacent faces
                4, 9, 5,
                2, 4, 11,
                6, 2, 10,
                8, 6, 7,
                9, 8, 1,
            ];
            /**
             * Tesselates triangle a b c
             * a b c must already be in vertices with the indexes ia ib ic
             * res is the number of subdivisions to do. 0 just results in triangle and line indexes being added to the
             * respective buffers.
             */
            function tesselateRecursively(a, b, c, res, vertices, triangles, ia, ib, ic, lines) {
                if (0 == res) {
                    triangles.push(ia, ib, ic);
                    if (ia < ib)
                        lines.push(ia, ib);
                    if (ib < ic)
                        lines.push(ib, ic);
                    if (ic < ia)
                        lines.push(ic, ia);
                }
                else {
                    // subdivide the triangle abc into 4 by adding a vertex (with the correct distance from the origin)
                    // between each segment ab, bc and cd, then calling the function recursively
                    const abMid1 = a.plus(b).toLength(1), bcMid1 = b.plus(c).toLength(1), caMid1 = c.plus(a).toLength(1);
                    // indexes of new vertices:
                    const iabm = vertices.length, ibcm = iabm + 1, icam = iabm + 2;
                    vertices.push(abMid1, bcMid1, caMid1);
                    tesselateRecursively(abMid1, bcMid1, caMid1, res - 1, vertices, triangles, iabm, ibcm, icam, lines);
                    tesselateRecursively(a, abMid1, caMid1, res - 1, vertices, triangles, ia, iabm, icam, lines);
                    tesselateRecursively(b, bcMid1, abMid1, res - 1, vertices, triangles, ib, ibcm, iabm, lines);
                    tesselateRecursively(c, caMid1, bcMid1, res - 1, vertices, triangles, ic, icam, ibcm, lines);
                }
            }
            const mesh = new Mesh()
                .addVertexBuffer('normals', 'ts_Normal')
                .addIndexBuffer('TRIANGLES')
                .addIndexBuffer('LINES');
            mesh.vertices.push(...vertices);
            subdivisions = undefined == subdivisions ? 4 : subdivisions;
            for (let i = 0; i < 20; i++) {
                const [ia, ic, ib] = triangles.slice(i * 3, i * 3 + 3);
                tesselateRecursively(vertices[ia], vertices[ic], vertices[ib], subdivisions, mesh.vertices, mesh.TRIANGLES, ia, ic, ib, mesh.LINES);
            }
            mesh.normals = mesh.vertices;
            mesh.compile();
            return mesh;
        }
        static aabb(aabb) {
            const matrix = M4.product(M4.translate(aabb.min), M4.scale(aabb.size().max(new V3(NLA_PRECISION, NLA_PRECISION, NLA_PRECISION))));
            const mesh = Mesh.cube().transform(matrix);
            // mesh.vertices = aabb.corners()
            mesh.computeNormalLines(20);
            mesh.compile();
            return mesh;
        }
        static offsetVertices(vertices, offset, close, normals) {
            assertVectors.apply(undefined, vertices);
            assertVectors(offset);
            const mesh = new Mesh().addIndexBuffer('TRIANGLES').addVertexBuffer('coords', 'ts_TexCoord');
            normals && mesh.addVertexBuffer('normals', 'ts_Normal');
            mesh.vertices = vertices.concat(vertices.map((v) => v.plus(offset)));
            const vl = vertices.length;
            mesh.coords = arrayFromFunction(vl * 2, (i) => [(i % vl) / vl, (i / vl) | 0]);
            const triangles = mesh.TRIANGLES;
            for (let i = 0; i < vertices.length - 1; i++) {
                pushQuad(triangles, false, i, i + 1, vertices.length + i, vertices.length + i + 1);
            }
            if (close) {
                pushQuad(triangles, false, vertices.length - 1, 0, vertices.length * 2 - 1, vertices.length);
            }
            if (normals) {
                mesh.normals = normals.concat(normals);
            }
            mesh.compile();
            return mesh;
        }
        // Creates a new $Mesh by rotating $vertices by $totalRads around $lineAxis (according to the right-hand
        // rule). $steps is the number of steps to take. $close is whether the vertices of the first and last step
        // should be connected by triangles. If $normals is set (pass an array of V3s of the same length as $vertices),
        // these will also be rotated and correctly added to the mesh.
        // @example const precious = Mesh.rotation([V(10, 0, -2), V(10, 0, 2), V(11, 0, 2), V(11, 0, -2)], , L3.Z, 512)
        static rotation(vertices, lineAxis, totalRads, steps, close = true, normals) {
            const mesh = new Mesh().addIndexBuffer('TRIANGLES');
            normals && mesh.addVertexBuffer('normals', 'ts_Normal');
            const vc = vertices.length, vTotal = vc * steps;
            const rotMat = new M4();
            const triangles = mesh.TRIANGLES;
            for (let i = 0; i < steps; i++) {
                // add triangles
                const rads = (totalRads / steps) * i;
                M4.rotateLine(lineAxis.anchor, lineAxis.dir1, rads, rotMat);
                mesh.vertices.push(...rotMat.transformedPoints(vertices));
                normals && mesh.normals.push(...rotMat.transformedVectors(normals));
                if (close || i !== steps - 1) {
                    for (let j = 0; j < vc - 1; j++) {
                        pushQuad(triangles, false, i * vc + j + 1, i * vc + j, ((i + 1) * vc + j + 1) % vTotal, ((i + 1) * vc + j) % vTotal);
                    }
                }
            }
            mesh.compile();
            return mesh;
        }
        static parametric(pF, pN, sMin, sMax, tMin, tMax, sRes, tRes) {
            const mesh = new Mesh().addIndexBuffer('TRIANGLES').addVertexBuffer('normals', 'ts_Normal');
            for (let si = 0; si <= sRes; si++) {
                const s = lerp$1(sMin, sMax, si / sRes);
                for (let ti = 0; ti <= tRes; ti++) {
                    const t = lerp$1(tMin, tMax, ti / tRes);
                    mesh.vertices.push(pF(s, t));
                    pN && mesh.normals.push(pN(s, t));
                    if (ti < tRes && si < sRes) {
                        const offset = ti + si * (tRes + 1);
                        pushQuad(mesh.TRIANGLES, false, offset, offset + tRes + 1, offset + 1, offset + tRes + 2);
                    }
                }
            }
            return mesh;
        }
        static load(json) {
            const mesh = new Mesh();
            if (Array.isArray(json.vertices[0])) {
                mesh.vertices = json.vertices.map((x) => V(x));
            }
            else {
                throw new Error();
            }
            if (json.triangles) {
                mesh.addIndexBuffer('TRIANGLES');
                mesh.TRIANGLES = json.triangles;
            }
            if (json.normals) {
                mesh.addVertexBuffer('normals', 'ts_Normal');
                mesh.normals = json.normals;
            }
            mesh.compile();
            return mesh;
        }
        toJSON() {
            return {
                vertices: this.vertices.map((x) => x.toArray()),
                TRIANGLES: this.TRIANGLES,
            };
        }
    }
    // unique corners of a unit cube. Used by Mesh.cube to generate a cube mesh.
    Mesh.UNIT_CUBE_CORNERS = [
        V3.O,
        new V3(0, 0, 1),
        new V3(0, 1, 0),
        new V3(0, 1, 1),
        new V3(1, 0, 0),
        new V3(1, 0, 1),
        new V3(1, 1, 0),
        V3.XYZ,
    ];

    /* tslint:disable:no-string-literal */
    const WGL$2 = WebGLRenderingContext;
    /**
     * These are all the draw modes usable in OpenGL ES
     */
    const DRAW_MODE_NAMES = {
        [WGL$2.POINTS]: 'POINTS',
        [WGL$2.LINES]: 'LINES',
        [WGL$2.LINE_STRIP]: 'LINE_STRIP',
        [WGL$2.LINE_LOOP]: 'LINE_LOOP',
        [WGL$2.TRIANGLES]: 'TRIANGLES',
        [WGL$2.TRIANGLE_STRIP]: 'TRIANGLE_STRIP',
        [WGL$2.TRIANGLE_FAN]: 'TRIANGLE_FAN',
    };
    const DRAW_MODE_CHECKS = {
        [WGL$2.POINTS]: (_) => true,
        [WGL$2.LINES]: (x) => 0 == x % 2,
        [WGL$2.LINE_STRIP]: (x) => x > 2,
        [WGL$2.LINE_LOOP]: (x) => x > 2,
        [WGL$2.TRIANGLES]: (x) => 0 == x % 3,
        [WGL$2.TRIANGLE_STRIP]: (x) => x > 3,
        [WGL$2.TRIANGLE_FAN]: (x) => x > 3,
    };
    const SHADER_VAR_TYPES = [
        'FLOAT',
        'FLOAT_MAT2',
        'FLOAT_MAT3',
        'FLOAT_MAT4',
        'FLOAT_VEC2',
        'FLOAT_VEC3',
        'FLOAT_VEC4',
        'INT',
        'INT_VEC2',
        'INT_VEC3',
        'INT_VEC4',
        'UNSIGNED_INT',
    ];
    function isArray(obj) {
        return Array == obj.constructor || Float32Array == obj.constructor || Float64Array == obj.constructor;
    }
    function isFloatArray(obj) {
        return (Float32Array == obj.constructor ||
            Float64Array == obj.constructor ||
            (Array.isArray(obj) && obj.every((x) => 'number' == typeof x)));
    }
    function isIntArray(x) {
        if ([Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array].some((y) => x instanceof y)) {
            return true;
        }
        return ((x instanceof Float32Array || x instanceof Float64Array || Array.isArray(x)) &&
            x.every((x) => Number.isInteger(x)));
    }
    //const x:UniformTypes = undefined as 'FLOAT_VEC4' | 'FLOAT_VEC3'
    class Shader {
        /**
         * Provides a convenient wrapper for WebGL shaders. A few uniforms and attributes,
         * prefixed with `gl_`, are automatically added to all shader sources to make
         * simple shaders easier to write.
         * Headers for the following variables are automatically prepended to the passed source. The correct variables
         * are also automatically passed to the shader when drawing.
         *
         * For vertex and fragment shaders:
         uniform mat3 ts_NormalMatrix;
         uniform mat4 ts_ModelViewMatrix;
         uniform mat4 ts_ProjectionMatrix;
         uniform mat4 ts_ModelViewProjectionMatrix;
         uniform mat4 ts_ModelViewMatrixInverse;
         uniform mat4 ts_ProjectionMatrixInverse;
         uniform mat4 ts_ModelViewProjectionMatrixInverse;
         *
         *
         * Example usage:
         *
         *  const shader = new GL.Shader(
         *      `void main() { gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex; }`,
         *      `uniform vec4 color; void main() { gl_FragColor = color; }`)
         *
         *  shader.uniforms({ color: [1, 0, 0, 1] }).draw(mesh)
         *
         * Compiles a shader program using the provided vertex and fragment shaders.
         */
        constructor(vertexSource, fragmentSource, gl = currentGL()) {
            this.projectionMatrixVersion = -1;
            this.modelViewMatrixVersion = -1;
            // const versionRegex = /^(?:\s+|\/\/[\s\S]*?[\r\n]+|\/\*[\s\S]*?\*\/)+(#version\s+(\d+)\s+es)/
            // Headers are prepended to the sources to provide some automatic functionality.
            const header = `
		uniform mat3 ts_NormalMatrix;
		uniform mat4 ts_ModelViewMatrix;
		uniform mat4 ts_ProjectionMatrix;
		uniform mat4 ts_ModelViewProjectionMatrix;
		uniform mat4 ts_ModelViewMatrixInverse;
		uniform mat4 ts_ProjectionMatrixInverse;
		uniform mat4 ts_ModelViewProjectionMatrixInverse;
	`;
            const matrixNames = header.match(/\bts_\w+/g);
            // Compile and link errors are thrown as strings.
            function compileSource(type, source) {
                const shader = gl.createShader(type);
                gl.shaderSource(shader, source);
                gl.compileShader(shader);
                if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
                    throw new Error('compile error: ' + gl.getShaderInfoLog(shader));
                }
                return shader;
            }
            this.gl = gl;
            this.program = gl.createProgram();
            gl.attachShader(this.program, compileSource(gl.VERTEX_SHADER, vertexSource));
            gl.attachShader(this.program, compileSource(gl.FRAGMENT_SHADER, fragmentSource));
            gl.linkProgram(this.program);
            if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {
                throw new Error('link error: ' + gl.getProgramInfoLog(this.program));
            }
            this.attributeLocations = {};
            this.uniformLocations = {};
            this.constantAttributes = {};
            // Check for the use of built-in matrices that require expensive matrix
            // multiplications to compute, and record these in `activeMatrices`.
            this.activeMatrices = {};
            matrixNames &&
                matrixNames.forEach((name) => {
                    if (gl.getUniformLocation(this.program, name)) {
                        this.activeMatrices[name] = true;
                    }
                });
            this.uniformInfos = {};
            for (let i = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS); i-- > 0;) {
                // see https://www.khronos.org/registry/OpenGL-Refpages/es2.0/xhtml/glGetActiveUniform.xml
                // this.program has already been checked
                // i is in bounds
                const info = gl.getActiveUniform(this.program, i);
                this.uniformInfos[info.name] = info;
            }
        }
        static create(vertexSource, fragmentSource, gl) {
            return new Shader(vertexSource, fragmentSource, gl);
        }
        /**
         * Set a uniform for each property of `uniforms`. The correct `viewerGL.uniform*()` method is inferred from the
         * value types and from the stored uniform sampler flags.
         */
        uniforms(uniforms) {
            const gl = this.gl;
            gl.useProgram(this.program);
            for (const name in uniforms) {
                const location = this.uniformLocations[name] || gl.getUniformLocation(this.program, name);
                // !location && console.warn(name + ' uniform is not used in shader')
                if (!location)
                    continue;
                this.uniformLocations[name] = location;
                let value = uniforms[name];
                const info = this.uniformInfos[name];
                {
                    // TODO: better errors
                    if (gl.SAMPLER_2D == info.type || gl.SAMPLER_CUBE == info.type || gl.INT == info.type) {
                        if (1 == info.size) {
                            assert(Number.isInteger(value));
                        }
                        else {
                            assert(isIntArray(value) && value.length == info.size, 'value must be int array if info.size != 1');
                        }
                    }
                    assert(gl.FLOAT != info.type || (1 == info.size && 'number' === typeof value) || isFloatArray(value));
                    assert(gl.FLOAT_VEC3 != info.type ||
                        (1 == info.size && value instanceof V3) ||
                        (Array.isArray(value) && info.size == value.length && assertVectors(...value)));
                    assert(gl.FLOAT_VEC4 != info.type || 1 != info.size || (isFloatArray(value) && value.length == 4));
                    assert(gl.FLOAT_MAT4 != info.type || value instanceof M4, () => value.toSource());
                    assert(gl.FLOAT_MAT3 != info.type || value.length == 9 || value instanceof M4);
                }
                if (value instanceof V3) {
                    value = value.toArray();
                }
                if (gl.FLOAT_VEC4 == info.type && info.size != 1) {
                    if (value instanceof Float32Array || value instanceof Float64Array) {
                        gl.uniform4fv(location, value instanceof Float32Array ? value : Float32Array.from(value));
                    }
                    else {
                        gl.uniform4fv(location, value.concatenated());
                    }
                }
                else if (gl.FLOAT == info.type && info.size != 1) {
                    gl.uniform1fv(location, value);
                }
                else if (gl.FLOAT_VEC3 == info.type && info.size != 1) {
                    gl.uniform3fv(location, V3.pack(value));
                }
                else if (value.length) {
                    switch (value.length) {
                        case 1:
                            gl.uniform1fv(location, value);
                            break;
                        case 2:
                            gl.uniform2fv(location, value);
                            break;
                        case 3:
                            gl.uniform3fv(location, value);
                            break;
                        case 4:
                            gl.uniform4fv(location, value);
                            break;
                        // Matrices are automatically transposed, since WebGL uses column-major
                        // indices instead of row-major indices.
                        case 9:
                            // prettier-ignore
                            gl.uniformMatrix3fv(location, false, new Float32Array([
                                value[0], value[3], value[6],
                                value[1], value[4], value[7],
                                value[2], value[5], value[8],
                            ]));
                            break;
                        case 16:
                            // prettier-ignore
                            gl.uniformMatrix4fv(location, false, new Float32Array([
                                value[0], value[4], value[8], value[12],
                                value[1], value[5], value[9], value[13],
                                value[2], value[6], value[10], value[14],
                                value[3], value[7], value[11], value[15],
                            ]));
                            break;
                        default:
                            throw new Error('don\'t know how to load uniform "' + name + '" of length ' + value.length);
                    }
                }
                else if ('number' == typeof value) {
                    if (gl.SAMPLER_2D == info.type || gl.SAMPLER_CUBE == info.type || gl.INT == info.type) {
                        gl.uniform1i(location, value);
                    }
                    else {
                        gl.uniform1f(location, value);
                    }
                }
                else if ('boolean' == typeof value) {
                    gl.uniform1i(location, +value);
                }
                else if (value instanceof M4) {
                    const m = value.m;
                    if (gl.FLOAT_MAT4 == info.type) {
                        // prettier-ignore
                        gl.uniformMatrix4fv(location, false, [
                            m[0], m[4], m[8], m[12],
                            m[1], m[5], m[9], m[13],
                            m[2], m[6], m[10], m[14],
                            m[3], m[7], m[11], m[15]
                        ]);
                    }
                    else if (gl.FLOAT_MAT3 == info.type) {
                        // prettier-ignore
                        gl.uniformMatrix3fv(location, false, [
                            m[0], m[4], m[8],
                            m[1], m[5], m[9],
                            m[2], m[6], m[10]
                        ]);
                    }
                    else if (gl.FLOAT_MAT2 == info.type) {
                        // prettier-ignore
                        gl.uniformMatrix2fv(location, false, new Float32Array([
                            m[0], m[4],
                            m[1], m[5]
                        ]));
                    }
                    else {
                        throw new Error(`Can't assign M4 to ${info.type}`);
                    }
                }
                else {
                    throw new Error('attempted to set uniform "' + name + '" to invalid value ' + value);
                }
            }
            return this;
        }
        attributes(attributes) {
            const gl = this.gl;
            gl.useProgram(this.program);
            for (const name in attributes) {
                const location = this.attributeLocations[name] || gl.getAttribLocation(this.program, name);
                if (location == -1) {
                    if (!name.startsWith('ts_')) {
                        console.warn(`Vertex buffer ${name} was not bound because the attribute is not active.`);
                    }
                    continue;
                }
                this.attributeLocations[name] = location;
                gl.disableVertexAttribArray(location);
                let value = attributes[name];
                if (value instanceof V3) {
                    // TODO: figure out the types here...
                    value = value.toArray();
                }
                if ('number' === typeof value) {
                    gl.vertexAttrib1f(location, value);
                }
                else {
                    gl.vertexAttrib4fv(location, value);
                    // switch ((value as number[]).length) {
                    // 	case 1:
                    // 		gl.vertexAttrib1fv(location, value as number[])
                    // 		break
                    // 	case 2:
                    // 		gl.vertexAttrib2fv(location, value as number[])
                    // 		break
                    // 	case 3:
                    // 		gl.vertexAttrib3fv(location, value as number[])
                    // 		break
                    // 	case 4:
                    // 		break
                    // }
                }
                this.constantAttributes[name] = true;
            }
            return this;
        }
        /**
         * Sets all uniform matrix attributes, binds all relevant buffers, and draws the mesh geometry as indexed
         * triangles or indexed LINES. Set `mode` to `gl.LINES` (and either add indices to `LINES` or call
         * `computeWireframe()`) to draw the mesh in wireframe.
         *
         * @param mesh
         * @param mode Defaults to 'TRIANGLES'. Must be passed as string so the correct index buffer can be
         *     automatically drawn.
         * @param start int
         * @param count int
         */
        draw(mesh, mode = WGL$2.TRIANGLES, start, count) {
            assert(mesh.hasBeenCompiled, 'mesh.hasBeenCompiled');
            assert(undefined != DRAW_MODE_NAMES[mode]);
            const modeName = DRAW_MODE_NAMES[mode];
            // assert(mesh.indexBuffers[modeStr], `mesh.indexBuffers[${modeStr}] undefined`)
            return this.drawBuffers(mesh.vertexBuffers, mesh.indexBuffers[modeName], mode, start, count);
        }
        /**
         * Sets all uniform matrix attributes, binds all relevant buffers, and draws the
         * indexed mesh geometry. The `vertexBuffers` argument is a map from attribute
         * names to `Buffer` objects of type `WGL.ARRAY_BUFFER`, `indexBuffer` is a `Buffer`
         * object of type `WGL.ELEMENT_ARRAY_BUFFER`, and `mode` is a WebGL primitive mode
         * like `WGL.TRIANGLES` or `WGL.LINES`. This method automatically creates and caches
         * vertex attribute pointers for attributes as needed.
         */
        drawBuffers(vertexBuffers, indexBuffer, mode = WGL$2.TRIANGLES, start = 0, count) {
            const gl = this.gl;
            assert(undefined != DRAW_MODE_NAMES[mode]);
            assertf(() => 1 <= Object.keys(vertexBuffers).length);
            Object.keys(vertexBuffers).forEach((key) => assertInst(Buffer$1, vertexBuffers[key]));
            // Only varruct up the built-in matrices that are active in the shader
            const on = this.activeMatrices;
            const modelViewMatrixInverse = (on['ts_ModelViewMatrixInverse'] || on['ts_NormalMatrix']) &&
                //&& this.modelViewMatrixVersion != gl.modelViewMatrixVersion
                gl.modelViewMatrix.inversed();
            const projectionMatrixInverse = on['ts_ProjectionMatrixInverse'] &&
                //&& this.projectionMatrixVersion != gl.projectionMatrixVersion
                gl.projectionMatrix.inversed();
            const modelViewProjectionMatrix = (on['ts_ModelViewProjectionMatrix'] || on['ts_ModelViewProjectionMatrixInverse']) &&
                //&& (this.projectionMatrixVersion != gl.projectionMatrixVersion || this.modelViewMatrixVersion !=
                // gl.modelViewMatrixVersion)
                gl.projectionMatrix.times(gl.modelViewMatrix);
            const uni = {}; // Uniform Matrices
            on['ts_ModelViewMatrix'] &&
                this.modelViewMatrixVersion != gl.modelViewMatrixVersion &&
                (uni['ts_ModelViewMatrix'] = gl.modelViewMatrix);
            on['ts_ModelViewMatrixInverse'] && (uni['ts_ModelViewMatrixInverse'] = modelViewMatrixInverse);
            on['ts_ProjectionMatrix'] &&
                this.projectionMatrixVersion != gl.projectionMatrixVersion &&
                (uni['ts_ProjectionMatrix'] = gl.projectionMatrix);
            projectionMatrixInverse && (uni['ts_ProjectionMatrixInverse'] = projectionMatrixInverse);
            modelViewProjectionMatrix && (uni['ts_ModelViewProjectionMatrix'] = modelViewProjectionMatrix);
            modelViewProjectionMatrix &&
                on['ts_ModelViewProjectionMatrixInverse'] &&
                (uni['ts_ModelViewProjectionMatrixInverse'] = modelViewProjectionMatrix.inversed());
            on['ts_NormalMatrix'] &&
                this.modelViewMatrixVersion != gl.modelViewMatrixVersion &&
                (uni['ts_NormalMatrix'] = modelViewMatrixInverse.transposed());
            this.uniforms(uni);
            this.projectionMatrixVersion = gl.projectionMatrixVersion;
            this.modelViewMatrixVersion = gl.modelViewMatrixVersion;
            // Create and enable attribute pointers as necessary.
            let minVertexBufferLength = Infinity;
            for (const attribute in vertexBuffers) {
                const buffer = vertexBuffers[attribute];
                assert(buffer.hasBeenCompiled);
                const location = this.attributeLocations[attribute] || gl.getAttribLocation(this.program, attribute);
                if (location == -1 || !buffer.buffer) {
                    if (!attribute.startsWith('ts_')) {
                        console.warn(`Vertex buffer ${attribute} was not bound because the attribute is not active.`);
                    }
                    continue;
                }
                this.attributeLocations[attribute] = location;
                gl.bindBuffer(WGL$2.ARRAY_BUFFER, buffer.buffer);
                gl.enableVertexAttribArray(location);
                gl.vertexAttribPointer(location, buffer.spacing, WGL$2.FLOAT, false, 0, 0);
                minVertexBufferLength = Math.min(minVertexBufferLength, buffer.count);
            }
            // Disable unused attribute pointers.
            for (const attribute in this.attributeLocations) {
                if (!(attribute in vertexBuffers)) {
                    gl.disableVertexAttribArray(this.attributeLocations[attribute]);
                }
            }
            {
                const numAttribs = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);
                for (let i = 0; i < numAttribs; ++i) {
                    const buffer = gl.getVertexAttrib(i, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING);
                    if (!buffer) {
                        const info = gl.getActiveAttrib(this.program, i);
                        if (!this.constantAttributes[info.name]) {
                            console.warn('No buffer is bound to attribute ' + info.name + ' and it was not set with .attributes()');
                        }
                    }
                    // console.log('name:', info.name, 'type:', info.type, 'size:', info.size)
                }
            }
            // Draw the geometry.
            if (minVertexBufferLength) {
                if (undefined === count) {
                    count = indexBuffer ? indexBuffer.count : minVertexBufferLength;
                }
                assert(DRAW_MODE_CHECKS[mode](count), 'count ' +
                    count +
                    "doesn't fulfill requirement +" +
                    DRAW_MODE_CHECKS[mode].toString() +
                    ' for mode ' +
                    DRAW_MODE_NAMES[mode]);
                if (indexBuffer) {
                    assert(indexBuffer.hasBeenCompiled);
                    assert(minVertexBufferLength > indexBuffer.maxValue);
                    assert(count % indexBuffer.spacing == 0);
                    assert(start % indexBuffer.spacing == 0);
                    if (start + count > indexBuffer.count) {
                        throw new Error('Buffer not long enough for passed parameters start/length/buffer length ' +
                            start +
                            ' ' +
                            count +
                            ' ' +
                            indexBuffer.count);
                    }
                    gl.bindBuffer(WGL$2.ELEMENT_ARRAY_BUFFER, indexBuffer.buffer);
                    // start parameter has to be multiple of sizeof(WGL.UNSIGNED_SHORT)
                    gl.drawElements(mode, count, indexBuffer.bindSize, indexBuffer.type.BYTES_PER_ELEMENT * start);
                }
                else {
                    if (start + count > minVertexBufferLength) {
                        throw new Error('invalid');
                    }
                    gl.drawArrays(mode, start, count);
                }
                gl.drawCallCount++;
            }
            return this;
        }
    }

    /// <reference types="webgl-strict-types" />
    class Texture {
        /**
         * Provides a simple wrapper around WebGL textures that supports render-to-texture.
         *
         * The arguments `width` and `height` give the size of the texture in texels.
         * WebGL texture dimensions must be powers of two unless `filter` is set to
         * either `WGL.NEAREST` or `WGL.LINEAR` and `wrap` is set to `WGL.CLAMP_TO_EDGE`
         * (which they are by default).
         *
         * Texture parameters can be passed in via the `options` argument.
         * Example usage:
         *
         *      let tex = new GL.Texture(256, 256, {
         *       magFilter: WGL.NEAREST,
         *       minFilter: WGL.LINEAR,
         *
         *       wrapS: WGL.REPEAT,
         *       wrapT: WGL.REPEAT,
         *
         *       format: WGL.RGB, // Defaults to WGL.RGBA
         *       type: WGL.FLOAT // Defaults to WGL.UNSIGNED_BYTE
         *     })
         *
         */
        constructor(width, height, options = {}, gl = currentGL()) {
            this.gl = gl;
            this.width = width;
            this.height = height;
            this.format = options.format || gl.RGBA;
            this.internalFormat = options.internalFormat || gl.RGBA;
            this.type = options.type || gl.UNSIGNED_BYTE;
            const magFilter = options.filter || options.magFilter || gl.LINEAR;
            const minFilter = options.filter || options.minFilter || gl.LINEAR;
            if (this.type === gl.FLOAT) {
                if (gl.version != 2 && !gl.getExtension('OES_texture_float')) {
                    throw new Error('OES_texture_float is required but not supported');
                }
                if ((minFilter !== gl.NEAREST || magFilter !== gl.NEAREST) &&
                    !gl.getExtension('OES_texture_float_linear')) {
                    throw new Error('OES_texture_float_linear is required but not supported');
                }
            }
            else if (this.type === gl.HALF_FLOAT_OES) {
                if (!gl.getExtension('OES_texture_half_float')) {
                    throw new Error('OES_texture_half_float is required but not supported');
                }
                if ((minFilter !== gl.NEAREST || magFilter !== gl.NEAREST) &&
                    !gl.getExtension('OES_texture_half_float_linear')) {
                    throw new Error('OES_texture_half_float_linear is required but not supported');
                }
            }
            this.texture = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, options.wrap || options.wrapS || gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, options.wrap || options.wrapT || gl.CLAMP_TO_EDGE);
            gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, width, height, 0, this.format, this.type, options.data);
        }
        setData(data) {
            this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);
            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.internalFormat, this.width, this.height, 0, this.format, this.type, data);
        }
        bind(unit) {
            this.gl.activeTexture((this.gl.TEXTURE0 + unit));
            this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);
        }
        unbind(unit) {
            this.gl.activeTexture((this.gl.TEXTURE0 + unit));
            this.gl.bindTexture(this.gl.TEXTURE_2D, null);
        }
        drawTo(render) {
            const gl = this.gl;
            const prevFramebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);
            if (!this.framebuffer) {
                // create a renderbuffer for the depth component
                const prevRenderbuffer = gl.getParameter(gl.RENDERBUFFER_BINDING);
                const depthRenderbuffer = gl.createRenderbuffer();
                gl.bindRenderbuffer(gl.RENDERBUFFER, depthRenderbuffer);
                // DEPTH_COMPONENT16 is the only depth format
                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.width, this.height);
                gl.bindRenderbuffer(gl.RENDERBUFFER, prevRenderbuffer);
                // create a framebuffer to render to
                this.framebuffer = gl.createFramebuffer();
                gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0);
                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthRenderbuffer);
                if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) !== gl.FRAMEBUFFER_COMPLETE) {
                    throw new Error('Rendering to this texture is not supported (incomplete this.framebuffer)');
                }
            }
            else if (prevFramebuffer !== this.framebuffer) {
                gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
            }
            const prevViewport = gl.getParameter(gl.VIEWPORT);
            gl.viewport(0, 0, this.width, this.height);
            render(gl);
            // restore previous state
            prevFramebuffer !== this.framebuffer && gl.bindFramebuffer(gl.FRAMEBUFFER, prevFramebuffer);
            gl.viewport(prevViewport[0], prevViewport[1], prevViewport[2], prevViewport[3]);
        }
        swapWith(other) {
            assert(this.gl == other.gl);
            let temp;
            temp = other.texture;
            other.texture = this.texture;
            this.texture = temp;
            temp = other.width;
            other.width = this.width;
            this.width = temp;
            temp = other.height;
            other.height = this.height;
            this.height = temp;
        }
        /**
         * Return a new texture created from `imgElement`, an `<img>` tag.
         */
        static fromImage(imgElement, options = {}, gl = currentGL()) {
            const texture = new Texture(imgElement.width, imgElement.height, options, gl);
            try {
                gl.texImage2D(gl.TEXTURE_2D, 0, texture.format, texture.format, texture.type, imgElement);
            }
            catch (e) {
                if (location.protocol == 'file:') {
                    throw new Error('imgElement not loaded for security reasons (serve this page over "http://" instead)');
                }
                else {
                    throw new Error('imgElement not loaded for security reasons (imgElement must originate from the same ' +
                        'domain as this page or use Cross-Origin Resource Sharing)');
                }
            }
            if (options.minFilter && options.minFilter != gl.NEAREST && options.minFilter != gl.LINEAR) {
                gl.generateMipmap(gl.TEXTURE_2D);
            }
            return texture;
        }
        /**
         * Returns a checkerboard texture that will switch to the correct texture when it loads.
         */
        static fromURLSwitch(url, options, gl = currentGL()) {
            Texture.checkerBoardCanvas =
                Texture.checkerBoardCanvas ||
                    (function () {
                        const c = document.createElement('canvas').getContext('2d');
                        if (!c)
                            throw new Error('Could not create 2d canvas.');
                        c.canvas.width = c.canvas.height = 128;
                        for (let y = 0; y < c.canvas.height; y += 16) {
                            for (let x = 0; x < c.canvas.width; x += 16) {
                                //noinspection JSBitwiseOperatorUsage
                                c.fillStyle = (x ^ y) & 16 ? '#FFF' : '#DDD';
                                c.fillRect(x, y, 16, 16);
                            }
                        }
                        return c.canvas;
                    })();
            const texture = Texture.fromImage(Texture.checkerBoardCanvas, options);
            const image = new Image();
            image.onload = () => Texture.fromImage(image, options, gl).swapWith(texture);
            // error event doesn't return a reason. Most likely a 404.
            image.onerror = () => {
                throw new Error('Could not load image ' + image.src + '. 404?');
            };
            image.src = url;
            return texture;
        }
        static fromURL(url, options, gl = currentGL()) {
            return new Promise((resolve, reject) => {
                const image = new Image();
                image.onload = () => resolve(Texture.fromImage(image, options, gl));
                image.onerror = (ev) => reject('Could not load image ' + image.src + '. 404?' + ev);
                image.src = url;
            });
        }
    }

    var posCoordVS = "attribute vec2 ts_TexCoord;attribute vec4 ts_Vertex;uniform mat4 ts_ModelViewProjectionMatrix;varying vec2 coord;void main(){coord=ts_TexCoord.xy;gl_Position=ts_ModelViewProjectionMatrix*ts_Vertex;}";

    var sdfRenderFS = "precision mediump float;uniform sampler2D u_texture;uniform vec4 u_color;uniform float u_buffer;uniform float u_gamma;uniform float u_debug;varying vec2 coord;void main(){float dist=texture2D(u_texture,coord).r;if(u_debug>0.0){gl_FragColor=vec4(dist,dist,dist,1);}else{float alpha=smoothstep(u_buffer-u_gamma,u_buffer+u_gamma,dist);gl_FragColor=vec4(u_color.rgb,alpha*u_color.a);if(gl_FragColor.a==0.0){discard;}}}";

    /*
     ** Copyright (c) 2012 The Khronos Group Inc.
     **
     ** Permission is hereby granted, free of charge, to any person obtaining a
     ** copy of this software and/or associated documentation files (the
     ** 'Materials'), to deal in the Materials without restriction, including
     ** without limitation the rights to use, copy, modify, merge, publish,
     ** distribute, sublicense, and/or sell copies of the Materials, and to
     ** permit persons to whom the Materials are furnished to do so, subject to
     ** the following conditions:
     **
     ** The above copyright notice and this permission notice shall be included
     ** in all copies or substantial portions of the Materials.
     **
     ** THE MATERIALS ARE PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
     ** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
     ** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
     ** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
     ** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
     ** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
     ** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
     */
    const GL = WebGLRenderingContext;
    // Various functions for helping debug WebGL apps.
    /**
     * Wrapped logging function.
     * @param msg Message to log.
     */
    function log$1(msg) {
        if (window.console && window.console.log) {
            window.console.log(msg);
        }
    }
    /**
     * Wrapped error logging function.
     * @param msg Message to log.
     */
    function error(msg) {
        if (window.console && window.console.error) {
            window.console.error(msg);
        }
        else {
            log$1(msg);
        }
    }
    /**
     * Which arguments are enums based on the number of arguments to the function.
     * So
     *    'texImage2D': {
     *       9: { 0:true, 2:true, 6:true, 7:true },
     *       6: { 0:true, 2:true, 3:true, 4:true },
     *    },
     *
     * means if there are 9 arguments then 6 and 7 are enums, if there are 6
     * arguments 3 and 4 are enums
     *
     * @type {!Object.<number, !Object.<number, string>}
     */
    const glValidEnumContexts = {
        // Generic setters and getters
        enable: { 1: { 0: true } },
        disable: { 1: { 0: true } },
        getParameter: { 1: { 0: true } },
        // Rendering
        drawArrays: { 3: { 0: true } },
        drawElements: { 4: { 0: true, 2: true } },
        // Shaders
        createShader: { 1: { 0: true } },
        getShaderParameter: { 2: { 1: true } },
        getProgramParameter: { 2: { 1: true } },
        getShaderPrecisionFormat: { 2: { 0: true, 1: true } },
        // Vertex attributes
        getVertexAttrib: { 2: { 1: true } },
        vertexAttribPointer: { 6: { 2: true } },
        // Textures
        bindTexture: { 2: { 0: true } },
        activeTexture: { 1: { 0: true } },
        getTexParameter: { 2: { 0: true, 1: true } },
        texParameterf: { 3: { 0: true, 1: true } },
        texParameteri: { 3: { 0: true, 1: true, 2: true } },
        // texImage2D and texSubImage2D are defined below with WebGL 2 entrypoints
        copyTexImage2D: { 8: { 0: true, 2: true } },
        copyTexSubImage2D: { 8: { 0: true } },
        generateMipmap: { 1: { 0: true } },
        // compressedTexImage2D and compressedTexSubImage2D are defined below with WebGL 2 entrypoints
        // Buffer objects
        bindBuffer: { 2: { 0: true } },
        // bufferData and bufferSubData are defined below with WebGL 2 entrypoints
        getBufferParameter: { 2: { 0: true, 1: true } },
        // Renderbuffers and framebuffers
        pixelStorei: { 2: { 0: true, 1: true } },
        // readPixels is defined below with WebGL 2 entrypoints
        bindRenderbuffer: { 2: { 0: true } },
        bindFramebuffer: { 2: { 0: true } },
        checkFramebufferStatus: { 1: { 0: true } },
        framebufferRenderbuffer: { 4: { 0: true, 1: true, 2: true } },
        framebufferTexture2D: { 5: { 0: true, 1: true, 2: true } },
        getFramebufferAttachmentParameter: { 3: { 0: true, 1: true, 2: true } },
        getRenderbufferParameter: { 2: { 0: true, 1: true } },
        renderbufferStorage: { 4: { 0: true, 1: true } },
        // Frame buffer operations (clear, blend, depth test, stencil)
        clear: { 1: { 0: { enumBitwiseOr: ['COLOR_BUFFER_BIT', 'DEPTH_BUFFER_BIT', 'STENCIL_BUFFER_BIT'] } } },
        depthFunc: { 1: { 0: true } },
        blendFunc: { 2: { 0: true, 1: true } },
        blendFuncSeparate: { 4: { 0: true, 1: true, 2: true, 3: true } },
        blendEquation: { 1: { 0: true } },
        blendEquationSeparate: { 2: { 0: true, 1: true } },
        stencilFunc: { 3: { 0: true } },
        stencilFuncSeparate: { 4: { 0: true, 1: true } },
        stencilMaskSeparate: { 2: { 0: true } },
        stencilOp: { 3: { 0: true, 1: true, 2: true } },
        stencilOpSeparate: { 4: { 0: true, 1: true, 2: true, 3: true } },
        // Culling
        cullFace: { 1: { 0: true } },
        frontFace: { 1: { 0: true } },
        // ANGLE_instanced_arrays extension
        drawArraysInstancedANGLE: { 4: { 0: true } },
        drawElementsInstancedANGLE: { 5: { 0: true, 2: true } },
        // EXT_blend_minmax extension
        blendEquationEXT: { 1: { 0: true } },
        // WebGL 2 Buffer objects
        bufferData: {
            3: { 0: true, 2: true },
            4: { 0: true, 2: true },
            5: { 0: true, 2: true },
        },
        bufferSubData: {
            3: { 0: true },
            4: { 0: true },
            5: { 0: true },
        },
        copyBufferSubData: { 5: { 0: true, 1: true } },
        getBufferSubData: { 3: { 0: true }, 4: { 0: true }, 5: { 0: true } },
        // WebGL 2 Framebuffer objects
        blitFramebuffer: {
            10: { 8: { enumBitwiseOr: ['COLOR_BUFFER_BIT', 'DEPTH_BUFFER_BIT', 'STENCIL_BUFFER_BIT'] }, 9: true },
        },
        framebufferTextureLayer: { 5: { 0: true, 1: true } },
        invalidateFramebuffer: { 2: { 0: true } },
        invalidateSubFramebuffer: { 6: { 0: true } },
        readBuffer: { 1: { 0: true } },
        // WebGL 2 Renderbuffer objects
        getInternalformatParameter: { 3: { 0: true, 1: true, 2: true } },
        renderbufferStorageMultisample: { 5: { 0: true, 2: true } },
        // WebGL 2 Texture objects
        texStorage2D: { 5: { 0: true, 2: true } },
        texStorage3D: { 6: { 0: true, 2: true } },
        texImage2D: {
            9: { 0: true, 2: true, 6: true, 7: true },
            6: { 0: true, 2: true, 3: true, 4: true },
            10: { 0: true, 2: true, 6: true, 7: true },
        },
        texImage3D: {
            10: { 0: true, 2: true, 7: true, 8: true },
            11: { 0: true, 2: true, 7: true, 8: true },
        },
        texSubImage2D: {
            9: { 0: true, 6: true, 7: true },
            7: { 0: true, 4: true, 5: true },
            10: { 0: true, 6: true, 7: true },
        },
        texSubImage3D: {
            11: { 0: true, 8: true, 9: true },
            12: { 0: true, 8: true, 9: true },
        },
        copyTexSubImage3D: { 9: { 0: true } },
        compressedTexImage2D: {
            7: { 0: true, 2: true },
            8: { 0: true, 2: true },
            9: { 0: true, 2: true },
        },
        compressedTexImage3D: {
            8: { 0: true, 2: true },
            9: { 0: true, 2: true },
            10: { 0: true, 2: true },
        },
        compressedTexSubImage2D: {
            8: { 0: true, 6: true },
            9: { 0: true, 6: true },
            10: { 0: true, 6: true },
        },
        compressedTexSubImage3D: {
            10: { 0: true, 8: true },
            11: { 0: true, 8: true },
            12: { 0: true, 8: true },
        },
        // WebGL 2 Vertex attribs
        vertexAttribIPointer: { 5: { 2: true } },
        // WebGL 2 Writing to the drawing buffer
        drawArraysInstanced: { 4: { 0: true } },
        drawElementsInstanced: { 5: { 0: true, 2: true } },
        drawRangeElements: { 6: { 0: true, 4: true } },
        // WebGL 2 Reading back pixels
        readPixels: {
            7: { 4: true, 5: true },
            8: { 4: true, 5: true },
        },
        // WebGL 2 Multiple Render Targets
        clearBufferfv: { 3: { 0: true }, 4: { 0: true } },
        clearBufferiv: { 3: { 0: true }, 4: { 0: true } },
        clearBufferuiv: { 3: { 0: true }, 4: { 0: true } },
        clearBufferfi: { 4: { 0: true } },
        // WebGL 2 Query objects
        beginQuery: { 2: { 0: true } },
        endQuery: { 1: { 0: true } },
        getQuery: { 2: { 0: true, 1: true } },
        getQueryParameter: { 2: { 1: true } },
        // WebGL 2 Sampler objects
        samplerParameteri: { 3: { 1: true, 2: true } },
        samplerParameterf: { 3: { 1: true } },
        getSamplerParameter: { 2: { 1: true } },
        // WebGL 2 Sync objects
        fenceSync: { 2: { 0: true, 1: { enumBitwiseOr: [] } } },
        clientWaitSync: { 3: { 1: { enumBitwiseOr: ['SYNC_FLUSH_COMMANDS_BIT'] } } },
        waitSync: { 3: { 1: { enumBitwiseOr: [] } } },
        getSyncParameter: { 2: { 1: true } },
        // WebGL 2 Transform Feedback
        bindTransformFeedback: { 2: { 0: true } },
        beginTransformFeedback: { 1: { 0: true } },
        transformFeedbackVaryings: { 3: { 2: true } },
        // WebGL2 Uniform Buffer Objects and Transform Feedback Buffers
        bindBufferBase: { 3: { 0: true } },
        bindBufferRange: { 5: { 0: true } },
        getIndexedParameter: { 2: { 0: true } },
        getActiveUniforms: { 3: { 2: true } },
        getActiveUniformBlockParameter: { 3: { 2: true } },
    };
    /**
     * Map of numbers to names.
     * @type {Object}
     */
    let glEnums = null;
    /**
     * Map of names to numbers.
     * @type {Object}
     */
    let enumStringToValue = null;
    /**
     * Initializes this module. Safe to call more than once.
     * @param ctx A WebGL context. If
     *    you have more than one context it doesn't matter which one
     *    you pass in, it is only used to pull out constants.
     */
    function init() {
        if (null === glEnums) {
            glEnums = {};
            enumStringToValue = {};
            const c = window.WebGL2RenderingContext || window.WebGLRenderingContext;
            if (!c)
                throw new Error('Neither WebGL2RenderingContext nor WebGLRenderingContext exists on window.');
            for (const propertyName in c) {
                const prop = c[propertyName];
                if ('number' === typeof prop) {
                    glEnums[prop] = propertyName;
                    enumStringToValue[propertyName] = prop;
                }
            }
        }
    }
    /**
     * Returns true or false if value matches any WebGL enum
     * @param value Value to check if it might be an enum.
     * @return True if value matches one of the WebGL defined enums
     */
    function mightBeEnum(value) {
        init();
        return glEnums[value] !== undefined;
    }
    /**
     * Gets an string version of an WebGL enum.
     *
     * Example:
     *   var str = WebGLDebugUtil.glEnumToString(ctx.getError())
     *
     * @param value Value to return an enum for
     * @return The string version of the enum.
     */
    function glEnumToString(value) {
        init();
        var name = glEnums[value];
        return name !== undefined ? 'gl.' + name : '/*UNKNOWN WebGL ENUM*/ 0x' + value.toString(16) + '';
    }
    /**
     * Converts the argument of a WebGL function to a string.
     * Attempts to convert enum arguments to strings.
     *
     * Example:
     *   WebGLDebugUtil.init(ctx)
     *   var str = WebGLDebugUtil.glFunctionArgToString('bindTexture', 2, 0, gl.TEXTURE_2D)
     *
     * would return 'TEXTURE_2D'
     *
     * @param functionName the name of the WebGL function.
     * @param numArgs the number of arguments passed to the function.
     * @param argumentIndex the index of the argument.
     * @param value The value of the argument.
     * @return The value as a string.
     */
    function glFunctionArgToString(functionName, numArgs, argumentIndex, value) {
        const funcInfo = glValidEnumContexts[functionName];
        if (funcInfo !== undefined) {
            const funcOverloadInfo = funcInfo[numArgs];
            if (funcOverloadInfo !== undefined) {
                const argInfo = funcOverloadInfo[argumentIndex];
                if (argInfo) {
                    if (typeof argInfo === 'object') {
                        const enums = argInfo.enumBitwiseOr;
                        const orEnums = [];
                        let orResult = 0;
                        for (let i = 0; i < enums.length; ++i) {
                            const enumValue = enumStringToValue[enums[i]];
                            if ((value & enumValue) !== 0) {
                                orResult |= enumValue;
                                orEnums.push(glEnumToString(enumValue));
                            }
                        }
                        if (orResult === value) {
                            return orEnums.join(' | ');
                        }
                        else {
                            return glEnumToString(value);
                        }
                    }
                    else {
                        return glEnumToString(value);
                    }
                }
            }
        }
        if (value === null) {
            return 'null';
        }
        else if (value === undefined) {
            return 'undefined';
        }
        else {
            return value.toString();
        }
    }
    /**
     * Converts the arguments of a WebGL function to a string.
     * Attempts to convert enum arguments to strings.
     *
     * @param functionName the name of the WebGL function.
     * @param args The arguments.
     * @return The arguments as a string.
     */
    function glFunctionArgsToString(functionName, args) {
        // apparently we can't do args.join(',')
        var argStr = '';
        var numArgs = args.length;
        for (var ii = 0; ii < numArgs; ++ii) {
            argStr += (ii == 0 ? '' : ', ') + glFunctionArgToString(functionName, numArgs, ii, args[ii]);
        }
        return argStr;
    }
    function makePropertyWrapper(wrapper, original, propertyName) {
        //log('wrap prop: ' + propertyName)
        wrapper.__defineGetter__(propertyName, function () {
            return original[propertyName];
        });
        // TODO(gmane): this needs to handle properties that take more than
        // one value?
        wrapper.__defineSetter__(propertyName, function (value) {
            //log('set: ' + propertyName)
            original[propertyName] = value;
        });
    }
    /**
     * Given a WebGL context returns a wrapped context that calls
     * gl.getError after every command and calls a function if the
     * result is not NO_ERROR.
     *
     * You can supply your own function if you want. For example, if you'd like
     * an exception thrown on any GL error you could do this
     *
     *    function throwOnGLError(err, funcName, args) {
     *      throw new Error(WebGLDebugUtils.glEnumToString(err) +
     *            ' was caused by call to ' + funcName)
     *    }
     *
     *    ctx = WebGLDebugUtils.makeDebugContext(
     *        canvas.getContext('webgl'), throwOnGLError)
     *
     * @param ctx The webgl context to wrap.
     * @param opt_onErrorFunc The function
     *     to call when gl.getError returns an error. If not specified the default
     *     function calls console.log with a message.
     * @param opt_onFunc The
     *     function to call when each webgl function is called. You
     *     can use this to log all calls for example.
     * @param opt_err_ctx The webgl context
     *        to call getError on if different than ctx.
     */
    function makeDebugContext(ctx, opt_onErrorFunc, opt_onFunc, opt_err_ctx = ctx) {
        init();
        opt_onErrorFunc =
            opt_onErrorFunc ||
                function (err, functionName, args) {
                    // apparently we can't do args.join(',')
                    var argStr = '';
                    var numArgs = args.length;
                    for (let i = 0; i < numArgs; ++i) {
                        argStr += (i == 0 ? '' : ', ') + glFunctionArgToString(functionName, numArgs, i, args[i]);
                    }
                    error('WebGL error ' + glEnumToString(err) + ' in ' + functionName + '(' + argStr + ')');
                };
        // Holds booleans for each GL error so after we get the error ourselves
        // we can still return it to the client app.
        const glErrorShadow = {};
        // Makes a function that calls a WebGL function and then calls getError.
        function makeErrorWrapper(ctx, functionName) {
            return function (...args) {
                if (opt_onFunc) {
                    opt_onFunc(functionName, args);
                }
                const result = ctx[functionName].apply(ctx, args);
                const err = opt_err_ctx.getError();
                if (err != 0) {
                    glErrorShadow[err] = true;
                    opt_onErrorFunc(err, functionName, args);
                }
                return result;
            };
        }
        // Make a an object that has a copy of every property of the WebGL context
        // but wraps all functions.
        const wrapper = {};
        for (let propertyName in ctx) {
            const prop = ctx[propertyName];
            if ('function' === typeof prop) {
                if (propertyName != 'getExtension') {
                    wrapper[propertyName] = makeErrorWrapper(ctx, propertyName);
                }
                else {
                    let wrapped = makeErrorWrapper(ctx, propertyName);
                    wrapper[propertyName] = function () {
                        const result = wrapped.apply(ctx, arguments);
                        if (!result) {
                            return null;
                        }
                        return makeDebugContext(result, opt_onErrorFunc, opt_onFunc, opt_err_ctx);
                    };
                }
            }
            else {
                makePropertyWrapper(wrapper, ctx, propertyName);
            }
        }
        // Override the getError function with one that returns our saved results.
        wrapper.getError = function () {
            for (const err in glErrorShadow) {
                if (glErrorShadow.hasOwnProperty(err)) {
                    if (glErrorShadow[err]) {
                        glErrorShadow[err] = false;
                        return parseInt(err);
                    }
                }
            }
            return ctx.NO_ERROR;
        };
        return wrapper;
    }
    function isWebGL2RenderingContext(o) {
        return !!o.createTransformFeedback;
    }
    /**
     * Resets a context to the initial state.
     * @param ctx The webgl context to
     *     reset.
     */
    function resetToInitialState(ctx2) {
        if (isWebGL2RenderingContext(ctx2)) {
            ctx2.bindVertexArray(null);
        }
        const numAttribs = ctx2.getParameter(ctx2.MAX_VERTEX_ATTRIBS);
        const tmp = ctx2.createBuffer();
        ctx2.bindBuffer(ctx2.ARRAY_BUFFER, tmp);
        for (let ii = 0; ii < numAttribs; ++ii) {
            ctx2.disableVertexAttribArray(ii);
            ctx2.vertexAttribPointer(ii, 4, ctx2.FLOAT, false, 0, 0);
            ctx2.vertexAttrib1f(ii, 0);
            if (isWebGL2RenderingContext(ctx2)) {
                ctx2.vertexAttribDivisor(ii, 0);
            }
        }
        ctx2.deleteBuffer(tmp);
        const numTextureUnits = ctx2.getParameter(ctx2.MAX_TEXTURE_IMAGE_UNITS);
        for (let ii = 0; ii < numTextureUnits; ++ii) {
            ctx2.activeTexture((ctx2.TEXTURE0 + ii));
            ctx2.bindTexture(ctx2.TEXTURE_CUBE_MAP, null);
            ctx2.bindTexture(ctx2.TEXTURE_2D, null);
            if (isWebGL2RenderingContext(ctx2)) {
                ctx2.bindTexture(ctx2.TEXTURE_2D_ARRAY, null);
                ctx2.bindTexture(ctx2.TEXTURE_3D, null);
                ctx2.bindSampler(ii, null);
            }
        }
        ctx2.activeTexture(ctx2.TEXTURE0);
        ctx2.useProgram(null);
        ctx2.bindBuffer(ctx2.ARRAY_BUFFER, null);
        ctx2.bindBuffer(ctx2.ELEMENT_ARRAY_BUFFER, null);
        ctx2.bindFramebuffer(ctx2.FRAMEBUFFER, null);
        ctx2.bindRenderbuffer(ctx2.RENDERBUFFER, null);
        ctx2.disable(ctx2.BLEND);
        ctx2.disable(ctx2.CULL_FACE);
        ctx2.disable(ctx2.DEPTH_TEST);
        ctx2.disable(ctx2.DITHER);
        ctx2.disable(ctx2.SCISSOR_TEST);
        ctx2.blendColor(0, 0, 0, 0);
        ctx2.blendEquation(ctx2.FUNC_ADD);
        ctx2.blendFunc(ctx2.ONE, ctx2.ZERO);
        ctx2.clearColor(0, 0, 0, 0);
        ctx2.clearDepth(1);
        ctx2.clearStencil(-1);
        ctx2.colorMask(true, true, true, true);
        ctx2.cullFace(ctx2.BACK);
        ctx2.depthFunc(ctx2.LESS);
        ctx2.depthMask(true);
        ctx2.depthRange(0, 1);
        ctx2.frontFace(ctx2.CCW);
        ctx2.hint(ctx2.GENERATE_MIPMAP_HINT, ctx2.DONT_CARE);
        ctx2.lineWidth(1);
        ctx2.pixelStorei(ctx2.PACK_ALIGNMENT, 4);
        ctx2.pixelStorei(ctx2.UNPACK_ALIGNMENT, 4);
        ctx2.pixelStorei(ctx2.UNPACK_FLIP_Y_WEBGL, false);
        ctx2.pixelStorei(ctx2.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
        ctx2.pixelStorei(ctx2.UNPACK_COLORSPACE_CONVERSION_WEBGL, ctx2.BROWSER_DEFAULT_WEBGL);
        ctx2.polygonOffset(0, 0);
        ctx2.sampleCoverage(1, false);
        ctx2.scissor(0, 0, ctx2.canvas.width, ctx2.canvas.height);
        ctx2.stencilFunc(ctx2.ALWAYS, 0, 0xffffffff);
        ctx2.stencilMask(0xffffffff);
        ctx2.stencilOp(ctx2.KEEP, ctx2.KEEP, ctx2.KEEP);
        ctx2.viewport(0, 0, ctx2.canvas.width, ctx2.canvas.height);
        ctx2.clear(ctx2.COLOR_BUFFER_BIT | ctx2.DEPTH_BUFFER_BIT | ctx2.STENCIL_BUFFER_BIT);
        if (isWebGL2RenderingContext(ctx2)) {
            ctx2.drawBuffers([ctx2.BACK]);
            ctx2.readBuffer(ctx2.BACK);
            ctx2.bindBuffer(ctx2.COPY_READ_BUFFER, null);
            ctx2.bindBuffer(ctx2.COPY_WRITE_BUFFER, null);
            ctx2.bindBuffer(ctx2.PIXEL_PACK_BUFFER, null);
            ctx2.bindBuffer(ctx2.PIXEL_UNPACK_BUFFER, null);
            const numTransformFeedbacks = ctx2.getParameter(ctx2.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS);
            for (let ii = 0; ii < numTransformFeedbacks; ++ii) {
                ctx2.bindBufferBase(ctx2.TRANSFORM_FEEDBACK_BUFFER, ii, null);
            }
            const numUBOs = ctx2.getParameter(ctx2.MAX_UNIFORM_BUFFER_BINDINGS);
            for (let ii = 0; ii < numUBOs; ++ii) {
                ctx2.bindBufferBase(ctx2.UNIFORM_BUFFER, ii, null);
            }
            ctx2.disable(ctx2.RASTERIZER_DISCARD);
            ctx2.pixelStorei(ctx2.UNPACK_IMAGE_HEIGHT, 0);
            ctx2.pixelStorei(ctx2.UNPACK_SKIP_IMAGES, 0);
            ctx2.pixelStorei(ctx2.UNPACK_ROW_LENGTH, 0);
            ctx2.pixelStorei(ctx2.UNPACK_SKIP_ROWS, 0);
            ctx2.pixelStorei(ctx2.UNPACK_SKIP_PIXELS, 0);
            ctx2.pixelStorei(ctx2.PACK_ROW_LENGTH, 0);
            ctx2.pixelStorei(ctx2.PACK_SKIP_ROWS, 0);
            ctx2.pixelStorei(ctx2.PACK_SKIP_PIXELS, 0);
            ctx2.hint(ctx2.FRAGMENT_SHADER_DERIVATIVE_HINT, ctx2.DONT_CARE);
        }
        // TODO: This should NOT be needed but Firefox fails with 'hint'
        while (ctx2.getError()) { }
    }
    /**
     * Given a canvas element returns a wrapped canvas element that will
     * simulate lost context. The canvas returned adds the following functions.
     *
     * loseContext:
     *   simulates a lost context event.
     *
     * restoreContext:
     *   simulates the context being restored.
     *
     * lostContextInNCalls:
     *   loses the context after N gl calls.
     *
     * getNumCalls:
     *   tells you how many gl calls there have been so far.
     *
     * setRestoreTimeout:
     *   sets the number of milliseconds until the context is restored
     *   after it has been lost. Defaults to 0. Pass -1 to prevent
     *   automatic restoring.
     *
     * @param canvas The canvas element to wrap.
     */
    function makeLostContextSimulatingCanvas(canvas) {
        const canvas2 = canvas;
        let unwrappedContext_;
        const onLost_ = [];
        const onRestored_ = [];
        let wrappedContext_ = {};
        let contextId_ = 1;
        let contextLost_ = false;
        // const resourceId_ = 0
        const resourceDb_ = [];
        let numCallsToLoseContext_ = 0;
        let numCalls_ = 0;
        let canRestore_ = false;
        let restoreTimeout_ = 0;
        // Holds booleans for each GL error so can simulate errors.
        const glErrorShadow_ = {};
        canvas2.getContext = (function (f) {
            return function () {
                const ctx = f.apply(canvas2, arguments);
                // Did we get a context and is it a WebGL context?
                // @ts-ignore
                if (ctx instanceof GL ||
                    (window.WebGL2RenderingContext && ctx instanceof WebGL2RenderingContext)) {
                    if (ctx != unwrappedContext_) {
                        if (unwrappedContext_) {
                            throw new Error('got different context');
                        }
                        unwrappedContext_ = ctx;
                        wrappedContext_ = makeLostContextSimulatingContext(unwrappedContext_);
                    }
                    return wrappedContext_;
                }
                return ctx;
            };
        })(canvas2.getContext);
        function wrapEvent(listener) {
            if (typeof listener == 'function') {
                return listener;
            }
            else {
                return function (e) {
                    listener.handleEvent(e);
                };
            }
        }
        function addOnContextLostListener(listener) {
            onLost_.push(wrapEvent(listener));
        }
        function addOnContextRestoredListener(listener) {
            onRestored_.push(wrapEvent(listener));
        }
        function wrapAddEventListener(canvas) {
            const f = canvas.addEventListener;
            canvas.addEventListener = function (type, listener) {
                switch (type) {
                    case 'webglcontextlost':
                        addOnContextLostListener(listener);
                        break;
                    case 'webglcontextrestored':
                        addOnContextRestoredListener(listener);
                        break;
                    default:
                        f.apply(canvas, arguments);
                }
            };
        }
        wrapAddEventListener(canvas2);
        canvas2.loseContext = function () {
            if (!contextLost_) {
                contextLost_ = true;
                numCallsToLoseContext_ = 0;
                ++contextId_;
                while (unwrappedContext_.getError())
                    clearErrors();
                glErrorShadow_[unwrappedContext_.CONTEXT_LOST_WEBGL] = true;
                const event = makeWebGLContextEvent('context lost');
                const callbacks = onLost_.slice();
                setTimeout(function () {
                    //log('numCallbacks:' + callbacks.length)
                    for (let ii = 0; ii < callbacks.length; ++ii) {
                        //log('calling callback:' + ii)
                        callbacks[ii](event);
                    }
                    if (restoreTimeout_ >= 0) {
                        setTimeout(function () {
                            canvas2.restoreContext();
                        }, restoreTimeout_);
                    }
                }, 0);
            }
        };
        canvas2.restoreContext = function () {
            if (contextLost_) {
                if (onRestored_.length) {
                    setTimeout(function () {
                        if (!canRestore_) {
                            throw new Error('can not restore. webglcontestlost listener did not call event.preventDefault');
                        }
                        freeResources();
                        resetToInitialState(unwrappedContext_);
                        contextLost_ = false;
                        numCalls_ = 0;
                        canRestore_ = false;
                        const callbacks = onRestored_.slice();
                        const event = makeWebGLContextEvent('context restored');
                        for (let ii = 0; ii < callbacks.length; ++ii) {
                            callbacks[ii](event);
                        }
                    }, 0);
                }
            }
        };
        canvas2.loseContextInNCalls = function (numCalls) {
            if (contextLost_) {
                throw new Error('You can not ask a lost context to be lost');
            }
            numCallsToLoseContext_ = numCalls_ + numCalls;
        };
        canvas2.getNumCalls = function () {
            return numCalls_;
        };
        canvas2.setRestoreTimeout = function (timeout) {
            restoreTimeout_ = timeout;
        };
        // function isWebGLObject(obj: any): obj is WebGLObject {
        // 	//return false
        // 	return (
        // 		obj instanceof WebGLBuffer ||
        // 		obj instanceof WebGLFramebuffer ||
        // 		obj instanceof WebGLProgram ||
        // 		obj instanceof WebGLRenderbuffer ||
        // 		obj instanceof WebGLShader ||
        // 		obj instanceof WebGLTexture
        // 	)
        // }
        // function checkResources(args: any[]) {
        // 	for (let i = 0; i < args.length; ++i) {
        // 		const arg = args[i]
        // 		if (isWebGLObject(arg)) {
        // 			return (arg as any).__webglDebugContextLostId__ == contextId_
        // 		}
        // 	}
        // 	return true
        // }
        function clearErrors() {
            const k = Object.keys(glErrorShadow_);
            for (let i = 0; i < k.length; ++i) {
                delete glErrorShadow_[k[i]];
            }
        }
        function loseContextIfTime() {
            ++numCalls_;
            if (!contextLost_) {
                if (numCallsToLoseContext_ == numCalls_) {
                    canvas2.loseContext();
                }
            }
        }
        // Makes a function that simulates WebGL when out of context.
        function makeLostContextFunctionWrapper(ctx, functionName) {
            const f = ctx[functionName];
            return function () {
                // log('calling:' + functionName)
                // Only call the functions if the context is not lost.
                loseContextIfTime();
                if (!contextLost_) {
                    //if (!checkResources(arguments)) {
                    //  glErrorShadow_[wrappedContext_.INVALID_OPERATION] = true
                    //  return
                    //}
                    const result = f.apply(ctx, arguments);
                    return result;
                }
            };
        }
        function freeResources() {
            for (let ii = 0; ii < resourceDb_.length; ++ii) {
                const resource = resourceDb_[ii];
                if (resource instanceof WebGLBuffer) {
                    unwrappedContext_.deleteBuffer(resource);
                }
                else if (resource instanceof WebGLFramebuffer) {
                    unwrappedContext_.deleteFramebuffer(resource);
                }
                else if (resource instanceof WebGLProgram) {
                    unwrappedContext_.deleteProgram(resource);
                }
                else if (resource instanceof WebGLRenderbuffer) {
                    unwrappedContext_.deleteRenderbuffer(resource);
                }
                else if (resource instanceof WebGLShader) {
                    unwrappedContext_.deleteShader(resource);
                }
                else if (resource instanceof WebGLTexture) {
                    unwrappedContext_.deleteTexture(resource);
                }
                else if (isWebGL2RenderingContext(unwrappedContext_)) {
                    if (resource instanceof WebGLQuery) {
                        unwrappedContext_.deleteQuery(resource);
                    }
                    else if (resource instanceof WebGLSampler) {
                        unwrappedContext_.deleteSampler(resource);
                    }
                    else if (resource instanceof WebGLSync) {
                        unwrappedContext_.deleteSync(resource);
                    }
                    else if (resource instanceof WebGLTransformFeedback) {
                        unwrappedContext_.deleteTransformFeedback(resource);
                    }
                    else if (resource instanceof WebGLVertexArrayObject) {
                        unwrappedContext_.deleteVertexArray(resource);
                    }
                }
            }
        }
        function makeWebGLContextEvent(statusMessage) {
            return {
                statusMessage: statusMessage,
                preventDefault: function () {
                    canRestore_ = true;
                },
            };
        }
        return canvas2;
        function makeLostContextSimulatingContext(ctx) {
            // copy all functions and properties to wrapper
            for (const propertyName in ctx) {
                if (typeof ctx[propertyName] == 'function') {
                    wrappedContext_[propertyName] = makeLostContextFunctionWrapper(ctx, propertyName);
                }
                else {
                    makePropertyWrapper(wrappedContext_, ctx, propertyName);
                }
            }
            // Wrap a few functions specially.
            wrappedContext_.getError = function () {
                loseContextIfTime();
                if (!contextLost_) {
                    let err;
                    while ((err = unwrappedContext_.getError())) {
                        glErrorShadow_[err] = true;
                    }
                }
                for (const err in glErrorShadow_) {
                    if (glErrorShadow_[err]) {
                        delete glErrorShadow_[err];
                        return err;
                    }
                }
                return wrappedContext_.NO_ERROR;
            };
            const creationFunctions = [
                'createBuffer',
                'createFramebuffer',
                'createProgram',
                'createRenderbuffer',
                'createShader',
                'createTexture',
            ];
            if (isWebGL2RenderingContext(ctx)) {
                creationFunctions.push('createQuery', 'createSampler', 'fenceSync', 'createTransformFeedback', 'createVertexArray');
            }
            for (let i = 0; i < creationFunctions.length; ++i) {
                const functionName = creationFunctions[i];
                wrappedContext_[functionName] = (function (f) {
                    return function () {
                        loseContextIfTime();
                        if (contextLost_) {
                            return null;
                        }
                        const obj = f.apply(ctx, arguments);
                        obj.__webglDebugContextLostId__ = contextId_;
                        resourceDb_.push(obj);
                        return obj;
                    };
                })(ctx[functionName]);
            }
            const functionsThatShouldReturnNull = [
                'getActiveAttrib',
                'getActiveUniform',
                'getBufferParameter',
                'getContextAttributes',
                'getAttachedShaders',
                'getFramebufferAttachmentParameter',
                'getParameter',
                'getProgramParameter',
                'getProgramInfoLog',
                'getRenderbufferParameter',
                'getShaderParameter',
                'getShaderInfoLog',
                'getShaderSource',
                'getTexParameter',
                'getUniform',
                'getUniformLocation',
                'getVertexAttrib',
            ];
            if (isWebGL2RenderingContext(ctx)) {
                functionsThatShouldReturnNull.push('getInternalformatParameter', 'getQuery', 'getQueryParameter', 'getSamplerParameter', 'getSyncParameter', 'getTransformFeedbackVarying', 'getIndexedParameter', 'getUniformIndices', 'getActiveUniforms', 'getActiveUniformBlockParameter', 'getActiveUniformBlockName');
            }
            for (let ii = 0; ii < functionsThatShouldReturnNull.length; ++ii) {
                const functionName = functionsThatShouldReturnNull[ii];
                wrappedContext_[functionName] = (function (f) {
                    return function () {
                        loseContextIfTime();
                        if (contextLost_) {
                            return null;
                        }
                        return f.apply(ctx, arguments);
                    };
                })(wrappedContext_[functionName]);
            }
            const isFunctions = [
                'isBuffer',
                'isEnabled',
                'isFramebuffer',
                'isProgram',
                'isRenderbuffer',
                'isShader',
                'isTexture',
            ];
            if (isWebGL2RenderingContext(ctx)) {
                isFunctions.push('isQuery', 'isSampler', 'isSync', 'isTransformFeedback', 'isVertexArray');
            }
            for (let ii = 0; ii < isFunctions.length; ++ii) {
                const functionName = isFunctions[ii];
                wrappedContext_[functionName] = (function (f) {
                    return function () {
                        loseContextIfTime();
                        if (contextLost_) {
                            return false;
                        }
                        return f.apply(ctx, arguments);
                    };
                })(wrappedContext_[functionName]);
            }
            wrappedContext_.checkFramebufferStatus = (function (f) {
                return function () {
                    loseContextIfTime();
                    if (contextLost_) {
                        return wrappedContext_.FRAMEBUFFER_UNSUPPORTED;
                    }
                    return f.apply(ctx, arguments);
                };
            })(wrappedContext_.checkFramebufferStatus);
            wrappedContext_.getAttribLocation = (function (f) {
                return function () {
                    loseContextIfTime();
                    if (contextLost_) {
                        return -1;
                    }
                    return f.apply(ctx, arguments);
                };
            })(wrappedContext_.getAttribLocation);
            wrappedContext_.getVertexAttribOffset = (function (f) {
                return function () {
                    loseContextIfTime();
                    if (contextLost_) {
                        return 0;
                    }
                    return f.apply(ctx, arguments);
                };
            })(wrappedContext_.getVertexAttribOffset);
            wrappedContext_.isContextLost = function () {
                return contextLost_;
            };
            if (isWebGL2RenderingContext(ctx)) {
                wrappedContext_.getFragDataLocation = (function (f) {
                    return function () {
                        loseContextIfTime();
                        if (contextLost_) {
                            return -1;
                        }
                        return f.apply(ctx, arguments);
                    };
                })(wrappedContext_.getFragDataLocation);
                wrappedContext_.clientWaitSync = (function (f) {
                    return function () {
                        loseContextIfTime();
                        if (contextLost_) {
                            return wrappedContext_.WAIT_FAILED;
                        }
                        return f.apply(ctx, arguments);
                    };
                })(wrappedContext_.clientWaitSync);
                wrappedContext_.getUniformBlockIndex = (function (f) {
                    return function () {
                        loseContextIfTime();
                        if (contextLost_) {
                            return wrappedContext_.INVALID_INDEX;
                        }
                        return f.apply(ctx, arguments);
                    };
                })(wrappedContext_.getUniformBlockIndex);
            }
            return wrappedContext_;
        }
    }

    /**
     * There's only one constant, use it for default values. Use chroma-js or similar for actual colors.
     */
    const GL_COLOR_BLACK = [0, 0, 0, 1];
    function currentGL() {
        return TSGLContextBase.gl;
    }
    function isNumber(obj) {
        const str = Object.prototype.toString.call(obj);
        return str == '[object Number]' || str == '[object Boolean]';
    }
    class TSGLContextBase {
        constructor(gl, immediate = {
            mesh: new Mesh().addVertexBuffer('coords', 'ts_TexCoord').addVertexBuffer('colors', 'ts_Color'),
            mode: -1,
            coord: [0, 0],
            color: [1, 1, 1, 1],
            pointSize: 1,
            shader: Shader.create(`
			attribute vec4 ts_Color;
			attribute vec4 ts_Vertex;
			uniform mat4 ts_ModelViewProjectionMatrix;
			attribute vec2 ts_TexCoord;
            uniform float pointSize;
            varying vec4 color;
            varying vec2 coord;
            void main() {
                color = ts_Color;
                coord = ts_TexCoord;
                gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;
                gl_PointSize = pointSize;
            }
		`, `
			precision highp float;
            uniform sampler2D texture;
            uniform float pointSize;
            // uniform bool useTexture;
            varying vec4 color;
            varying vec2 coord;
            void main() {
                gl_FragColor = color;
                // if (useTexture) gl_FragColor *= texture2D(texture, coord.xy);
            }
        `, gl),
        }) {
            this.immediate = immediate;
            this.modelViewMatrix = M4.identity();
            this.projectionMatrix = M4.identity();
            this.tempMatrix = new M4();
            this.resultMatrix = new M4();
            this.modelViewStack = [];
            this.projectionStack = [];
            this.drawCallCount = 0;
            this.projectionMatrixVersion = 0;
            this.modelViewMatrixVersion = 0;
            this.cachedSDFMeshes = {};
            this.matrixMode(TSGLContextBase.MODELVIEW);
        }
        /// Implement the OpenGL modelview and projection matrix stacks, along with some other useful GLU matrix functions.
        matrixMode(mode) {
            switch (mode) {
                case this.MODELVIEW:
                    this.currentMatrixName = 'modelViewMatrix';
                    this.stack = this.modelViewStack;
                    break;
                case this.PROJECTION:
                    this.currentMatrixName = 'projectionMatrix';
                    this.stack = this.projectionStack;
                    break;
                default:
                    throw new Error('invalid matrix mode ' + mode);
            }
        }
        loadIdentity() {
            M4.identity(this[this.currentMatrixName]);
            this.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++;
        }
        loadMatrix(m4) {
            M4.copy(m4, this[this.currentMatrixName]);
            this.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++;
        }
        multMatrix(m4) {
            M4.multiply(this[this.currentMatrixName], m4, this.resultMatrix);
            const temp = this.resultMatrix;
            this.resultMatrix = this[this.currentMatrixName];
            this[this.currentMatrixName] = temp;
            this.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++;
        }
        mirror(plane) {
            this.multMatrix(M4.mirror(plane));
        }
        perspective(fovDegrees, aspect, near, far) {
            this.multMatrix(M4.perspectiveRad(fovDegrees * DEG, aspect, near, far, this.tempMatrix));
        }
        frustum(left, right, bottom, top, near, far) {
            this.multMatrix(M4.frustum(left, right, bottom, top, near, far, this.tempMatrix));
        }
        ortho(left, right, bottom, top, near, far) {
            this.multMatrix(M4.ortho(left, right, bottom, top, near, far, this.tempMatrix));
        }
        scale(...args) {
            this.multMatrix(M4.scale(...args, this.tempMatrix));
        }
        mirroredX() {
            this.multMatrix(M4.mirror(P3ZX));
        }
        translate(x, y, z) {
            if (undefined !== y) {
                this.multMatrix(M4.translate(x, y, z, this.tempMatrix));
            }
            else {
                this.multMatrix(M4.translate(x, this.tempMatrix));
            }
        }
        rotate(angleDegrees, x, y, z) {
            this.multMatrix(M4.rotate(angleDegrees * DEG, { x, y, z }, this.tempMatrix));
        }
        lookAt(eye, center, up) {
            this.multMatrix(M4.lookAt(eye, center, up, this.tempMatrix));
        }
        pushMatrix() {
            this.stack.push(M4.copy(this[this.currentMatrixName]));
        }
        popMatrix() {
            const pop = this.stack.pop();
            assert(undefined !== pop);
            this[this.currentMatrixName] = pop;
            this.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++;
        }
        /**
         * World coordinates (WC) to screen/window coordinates matrix
         */
        wcToWindowMatrix() {
            const viewport = this.getParameter(this.VIEWPORT);
            const [x, y, w, h] = viewport;
            // prettier-ignore
            const viewportToScreenMatrix = new M4([
                w / 2, 0, 0, x + w / 2,
                h / 2, 0, 0, y + h / 2,
                0, 0, 1, 0,
                0, 0, 0, 1,
            ]);
            return M4.product(viewportToScreenMatrix, this.projectionMatrix, this.modelViewMatrix);
        }
        /////////// IMMEDIATE MODE
        // ### Immediate mode
        //
        // Provide an implementation of OpenGL's deprecated immediate mode. This is
        // deprecated for a reason: constantly re-specifying the geometry is a bad
        // idea for performance. You should use a `GL.Mesh` instead, which specifies
        // the geometry once and caches it on the graphics card. Still, nothing
        // beats a quick `viewerGL.begin(WGL.POINTS); viewerGL.vertex(1, 2, 3); viewerGL.end();` for
        // debugging. This intentionally doesn't implement fixed-function lighting
        // because it's only meant for quick debugging tasks.
        pointSize(pointSize) {
            this.immediate.shader.uniforms({ pointSize: pointSize });
        }
        begin(mode) {
            if (this.immediate.mode != -1)
                throw new Error('mismatched viewerGL.begin() and viewerGL.end() calls');
            this.immediate.mode = mode;
            this.immediate.mesh.colors = [];
            this.immediate.mesh.coords = [];
            this.immediate.mesh.vertices = [];
        }
        color(...args) {
            this.immediate.color =
                1 == args.length && Array.isArray(args[0])
                    ? args[0]
                    : 1 == args.length && 'number' == typeof args[0]
                        ? hexIntToGLColor(args[0])
                        : 1 == args.length && 'string' == typeof args[0]
                            ? color(args[0]).gl()
                            : [args[0], args[1], args[2], args[3] || 1];
        }
        texCoord(...args) {
            this.immediate.coord = V.apply(undefined, args).toArray(2);
        }
        vertex(...args) {
            this.immediate.mesh.colors.push(this.immediate.color);
            this.immediate.mesh.coords.push(this.immediate.coord);
            this.immediate.mesh.vertices.push(V.apply(undefined, args));
        }
        end() {
            if (this.immediate.mode == -1)
                throw new Error('mismatched viewerGL.begin() and viewerGL.end() calls');
            this.immediate.mesh.compile();
            this.immediate.shader
                .uniforms({
                useTexture: !!TSGLContextBase.gl.getParameter(this.TEXTURE_BINDING_2D),
            })
                .drawBuffers(this.immediate.mesh.vertexBuffers, undefined, this.immediate.mode);
            this.immediate.mode = -1;
        }
        makeCurrent() {
            TSGLContextBase.gl = this;
        }
        /**
         * Starts an animation loop.
         */
        animate(callback) {
            const requestAnimationFrame = window.requestAnimationFrame ||
                window.mozRequestAnimationFrame ||
                window.webkitRequestAnimationFrame ||
                function (callback) {
                    setTimeout(() => callback(performance.now()), 1000 / 60);
                };
            let time = performance.now(), keepUpdating = true;
            const update = (now) => {
                if (keepUpdating) {
                    callback.call(this, now, now - time);
                    time = now;
                    requestAnimationFrame(update);
                }
            };
            requestAnimationFrame(update);
            return () => {
                keepUpdating = false;
            };
        }
        /**
         * Provide an easy way to get a fullscreen app running, including an
         * automatic 3D perspective projection matrix by default. This should be
         * called once.
         *
         * Just fullscreen, no automatic camera:
         *
         *     viewerGL.fullscreen({ camera: false })
         *
         * Adjusting field of view, near plane distance, and far plane distance:
         *
         *     viewerGL.fullscreen({ fov: 45, near: 0.1, far: 1000 })
         *
         * Adding padding from the edge of the window:
         *
         *     viewerGL.fullscreen({ paddingLeft: 250, paddingBottom: 60 })
         */
        fullscreen(options = {}) {
            const top = options.paddingTop || 0;
            const left = options.paddingLeft || 0;
            const right = options.paddingRight || 0;
            const bottom = options.paddingBottom || 0;
            if (!document.body) {
                throw new Error("document.body doesn't exist yet (call viewerGL.fullscreen() from " +
                    'window.onload() or from inside the <body> tag)');
            }
            document.body.appendChild(this.canvas);
            document.body.style.overflow = 'hidden';
            this.canvas.style.position = 'absolute';
            this.canvas.style.left = left + 'px';
            this.canvas.style.top = top + 'px';
            this.canvas.style.width = window.innerWidth - left - right + 'px';
            this.canvas.style.bottom = window.innerHeight - top - bottom + 'px';
            const gl = this;
            function windowOnResize() {
                gl.canvas.width = (window.innerWidth - left - right) * window.devicePixelRatio;
                gl.canvas.height = (window.innerHeight - top - bottom) * window.devicePixelRatio;
                gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
                if (options.camera) {
                    gl.matrixMode(TSGLContextBase.PROJECTION);
                    gl.loadIdentity();
                    gl.perspective(options.fov || 45, gl.canvas.width / gl.canvas.height, options.near || 0.1, options.far || 1000);
                    gl.matrixMode(TSGLContextBase.MODELVIEW);
                }
            }
            window.addEventListener('resize', windowOnResize);
            windowOnResize();
            return this;
        }
        getMouseLine(canvasPosXOrE, canvasPosY) {
            if (canvasPosXOrE instanceof MouseEvent) {
                return this.getMouseLine(canvasPosXOrE.offsetX, canvasPosXOrE.offsetY);
            }
            const ndc1 = V((canvasPosXOrE * 2) / this.canvas.offsetWidth - 1, (-canvasPosY * 2) / this.canvas.offsetHeight + 1, 0);
            const ndc2 = V((canvasPosXOrE * 2) / this.canvas.offsetWidth - 1, (-canvasPosY * 2) / this.canvas.offsetHeight + 1, 1);
            const inverseProjectionMatrix = this.projectionMatrix.inversed();
            const anchor = inverseProjectionMatrix.transformPoint(ndc1);
            const dir = inverseProjectionMatrix.transformPoint(ndc2).minus(anchor);
            return { anchor, dir };
        }
        viewportFill() {
            this.viewport(0, 0, this.canvas.width, this.canvas.height);
        }
        setupTextRendering(pngURL, jsonURL) {
            return __awaiter(this, void 0, void 0, function* () {
                this.textRenderShader = Shader.create(posCoordVS, sdfRenderFS);
                [this.textAtlas, this.textMetrics] = yield Promise.all([
                    Texture.fromURL(pngURL, {
                        format: this.LUMINANCE,
                        internalFormat: this.LUMINANCE,
                        type: this.UNSIGNED_BYTE,
                    }),
                    fetch(jsonURL).then((r) => r.json()),
                ]);
                // const cs = this.textMetrics.chars
                // const maxY = Object.keys(cs).reduce((a, b) => Math.max(a, cs[b][3]), 0)
                // const minY = Object.keys(cs).reduce((a, b) => Math.min(a, cs[b][3] - cs[b][1]), 0)
                // console.log(maxY, minY)
            });
        }
        getSDFMeshForString(str) {
            assert(this.textMetrics);
            return (this.cachedSDFMeshes[str] ||
                (this.cachedSDFMeshes[str] = createTextMesh(this.textMetrics, this.textAtlas, str)));
        }
        renderText(string, color, size = 1, xAlign = 'left', baseline = 'bottom', gamma = 0.05, lineHeight = 1.2) {
            const strMesh = this.getSDFMeshForString(string);
            this.pushMatrix();
            this.scale(size);
            const xTranslate = { left: 0, center: -0.5, right: -1 };
            const yTranslate = {
                top: -this.textMetrics.ascender / this.textMetrics.size,
                middle: (-this.textMetrics.ascender - this.textMetrics.descender) / 2 / this.textMetrics.size,
                alphabetic: 0,
                bottom: -this.textMetrics.descender / this.textMetrics.size,
            };
            // console.log('yTranslate[baseline]', yTranslate[baseline])
            this.translate(xTranslate[xAlign] * strMesh.width, yTranslate[baseline], 0);
            this.multMatrix(M4.forSys(V3.X, V3.Y, new V3(0, -lineHeight, 0)));
            this.textAtlas.bind(0);
            this.textRenderShader
                .uniforms({ texture: 0, u_color: color, u_debug: 0, u_gamma: gamma, u_buffer: 192 / 256 })
                .draw(strMesh);
            this.popMatrix();
            // gl.uniform1f(shader.u_debug, debug ? 1 : 0)
            // gl.uniform4fv(shader.u_color, [1, 1, 1, 1])
            // gl.uniform1f(shader.u_buffer, buffer)
            // gl.drawArrays(gl.TRIANGLES, 0, vertexBuffer.numItems)
            // gl.uniform4fv(shader.u_color, [0, 0, 0, 1])
            // gl.uniform1f(shader.u_buffer, 192 / 256)
            // gl.uniform1f(shader.u_gamma, (gamma * 1.4142) / scale)
            // gl.drawArrays(gl.TRIANGLES, 0, vertexBuffer.numItems)
        }
        static create(options = {}) {
            const canvas = options.canvas || document.createElement('canvas');
            if (!options.canvas) {
                canvas.width = 800;
                canvas.height = 600;
            }
            if (!('alpha' in options))
                options.alpha = false;
            let newGL = undefined;
            try {
                newGL = canvas.getContext('webgl2', options);
                newGL && (newGL.version = 2);
                if (!newGL) {
                    newGL = canvas.getContext('webgl', options) || canvas.getContext('experimental-webgl', options);
                    newGL && (newGL.version = 1);
                }
                console.log('getting context');
            }
            catch (e) {
                console.log(e, 'Failed to get context');
            }
            if (!newGL)
                throw new Error('WebGL not supported');
            if (options.throwOnError) {
                newGL = makeDebugContext(newGL, (err, funcName) => {
                    throw new Error(glEnumToString(err) + ' was caused by ' + funcName);
                });
            }
            TSGLContextBase.gl = newGL;
            addOwnProperties(newGL, TSGLContextBase.prototype);
            addOwnProperties(newGL, new TSGLContextBase(newGL));
            //addEventListeners(newGL)
            return newGL;
        }
        /**
         * Sets the canvas render resolution (canvas.width and canvas.height) to match the display. I.e. it takes into
         * account window.devicePixelRatio.
         * @param maxPixelRatio A limit for the pixelRatio. Useful for very high DPI devices such as mobile devices.
         */
        fixCanvasRes(maxPixelRatio = Infinity) {
            this.canvas.width = this.canvas.clientWidth * Math.min(window.devicePixelRatio, maxPixelRatio);
            this.canvas.height = this.canvas.clientHeight * Math.min(window.devicePixelRatio, maxPixelRatio);
            this.viewport(0, 0, this.canvas.width, this.canvas.height);
        }
    }
    TSGLContextBase.MODELVIEW = 0;
    TSGLContextBase.PROJECTION = 1;
    TSGLContextBase.HALF_FLOAT_OES = 0x8d61;
    var TSGLContext;
    (function (TSGLContext) {
        /**
         * `create()` creates a new WebGL context and augments it with more methods. The alpha channel is disabled
         * by default because it usually causes unintended transparencies in the canvas.
         */
        TSGLContext.create = TSGLContextBase.create;
    })(TSGLContext || (TSGLContext = {}));
    // enum WGL_ERROR {
    // 	NO_ERROR = WGL.NO_ERROR,
    // 	INVALID_ENUM = WGL.INVALID_ENUM,
    // 	INVALID_VALUE = WGL.INVALID_VALUE,
    // 	INVALID_OPERATION = WGL.INVALID_OPERATION,
    // 	INVALID_FRAMEBUFFER_OPERATION = WGL.INVALID_FRAMEBUFFER_OPERATION,
    // 	OUT_OF_MEMORY = WGL.OUT_OF_MEMORY,
    // 	CONTEXT_LOST_WEBGL = WGL.CONTEXT_LOST_WEBGL,
    // }
    TSGLContextBase.prototype.MODELVIEW = TSGLContextBase.MODELVIEW;
    TSGLContextBase.prototype.PROJECTION = TSGLContextBase.PROJECTION;
    TSGLContextBase.prototype.HALF_FLOAT_OES = TSGLContextBase.HALF_FLOAT_OES;
    /**
     *
     * Push two triangles:
     * ```
     c - d
     | \ |
     a - b
     ```
     */
    function pushQuad(triangles, flipped, a, b, c, d) {
        // prettier-ignore
        if (flipped) {
            triangles.push(a, c, b, b, c, d);
        }
        else {
            triangles.push(a, b, c, b, d, c);
        }
    }
    function hexIntToGLColor(color) {
        return [(color >> 16) / 255.0, ((color >> 8) & 0xff) / 255.0, (color & 0xff) / 255.0, 1.0];
    }
    // function measureText(metrics: FontJsonMetrics, text: string, size: number) {
    // 	const dimensions = {
    // 		advance: 0,
    // 	}
    // 	const scale = size / metrics.size
    // 	for (let i = 0; i < text.length; i++) {
    // 		const horiAdvance = metrics.chars[text[i]][4]
    // 		dimensions.advance += horiAdvance * scale
    // 	}
    // 	return dimensions
    // }
    // gl.getExtension('OES_standard_derivatives')
    // gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE)
    // gl.enable(gl.BLEND)
    // const texture = gl.createTexture()
    // const vertexBuffer = gl.createBuffer()
    // const textureBuffer = gl.createBuffer()
    function createTextMesh(fontMetrics, fontTextureAtlas, str, lineHeight = 1) {
        const mesh = new Mesh().addIndexBuffer('TRIANGLES').addVertexBuffer('coords', 'ts_TexCoord');
        let cursorX = 0;
        let cursorY = 0;
        function drawGlyph(chr) {
            const metric = fontMetrics.chars[chr];
            if (!metric)
                return;
            const [width, height, horiBearingX, horiBearingY, horiAdvance, posX, posY] = metric;
            const { size, buffer } = fontMetrics;
            const quadStartIndex = mesh.vertices.length;
            // buffer = margin on texture
            if (width > 0 && height > 0) {
                // Add a quad (= two triangles) per glyph.
                const left = (cursorX + horiBearingX - buffer) / size;
                const right = (cursorX + horiBearingX + width + buffer) / size;
                const bottom = (horiBearingY - height - buffer) / size;
                const top = (horiBearingY + buffer) / size;
                mesh.vertices.push(new V3(left, bottom, cursorY / size), new V3(right, bottom, cursorY / size), new V3(left, top, cursorY / size), new V3(right, top, cursorY / size));
                const coordsLeft = posX / fontTextureAtlas.width;
                const coordsRight = (posX + width + 2 * buffer) / fontTextureAtlas.width;
                const coordsBottom = (posY + height + 2 * buffer) / fontTextureAtlas.height;
                const coordsTop = posY / fontTextureAtlas.height;
                mesh.coords.push([coordsLeft, coordsBottom], [coordsRight, coordsBottom], [coordsLeft, coordsTop], [coordsRight, coordsTop]);
                // mesh.coords.push([0, 0], [0, 1], [1, 0], [1, 1])
                pushQuad(mesh.TRIANGLES, false, quadStartIndex, quadStartIndex + 1, quadStartIndex + 2, quadStartIndex + 3);
            }
            // pen.x += Math.ceil(horiAdvance * scale);
            cursorX += horiAdvance;
        }
        for (let i = 0; i < str.length; i++) {
            const chr = str[i];
            if ('\n' == chr) {
                cursorX = 0;
                cursorY += lineHeight * fontMetrics.size;
            }
            else {
                drawGlyph(chr);
            }
        }
        return Object.assign(mesh.compile(), { width: cursorX / fontMetrics.size, lineCount: cursorY + 1 });
    }

    var tsgl = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Buffer: Buffer$1,
        GL_COLOR_BLACK: GL_COLOR_BLACK,
        Mesh: Mesh,
        SHADER_VAR_TYPES: SHADER_VAR_TYPES,
        Shader: Shader,
        get TSGLContext () { return TSGLContext; },
        TSGLContextBase: TSGLContextBase,
        Texture: Texture,
        currentGL: currentGL,
        glEnumToString: glEnumToString,
        glFunctionArgToString: glFunctionArgToString,
        glFunctionArgsToString: glFunctionArgsToString,
        init: init,
        isArray: isArray,
        isNumber: isNumber,
        isWebGL2RenderingContext: isWebGL2RenderingContext,
        makeDebugContext: makeDebugContext,
        makeLostContextSimulatingCanvas: makeLostContextSimulatingCanvas,
        mightBeEnum: mightBeEnum,
        pushQuad: pushQuad,
        resetToInitialState: resetToInitialState
    });

    const { abs: abs$2, acos, acosh, asin, asinh, atan, atanh, atan2: atan2$1, ceil, cbrt: cbrt$1, expm1, clz32, cos: cos$2, cosh, exp, floor: floor$1, fround, hypot: hypot$1, imul, log: log$2, log1p, log2, log10, max: max$3, min: min$3, pow, random: random$1, round: round$1, sign: sign$1, sin: sin$2, sinh, sqrt: sqrt$1, tan, tanh, trunc, E, LN10, LN2, LOG10E, LOG2E, PI: PI$3, SQRT1_2, SQRT2, } = Math;

    let insideIsInfosWithCurve = false;
    class Curve extends Transformable {
        constructor(tMin, tMax) {
            super();
            this.tMin = tMin;
            this.tMax = tMax;
            assertNumbers(tMin, tMax);
            assert("number" === typeof tMin && !isNaN(tMin));
            assert("number" === typeof tMax && !isNaN(tMax));
            assert(tMin < tMax, "tMin < tMax " + tMin + " < " + tMax);
        }
        static integrate(curve, startT, endT, steps) {
            const step = (endT - startT) / steps;
            let length = 0;
            let p = curve.at(startT);
            let i = 0, t = startT + step;
            for (; i < steps; i++, t += step) {
                const next = curve.at(t);
                length += p.distanceTo(next);
                p = next;
            }
            return length;
        }
        static ispsRecursive(curve1, tMin, tMax, curve2, sMin, sMax) {
            // the recursive function finds good approximates for the intersection points
            // curve1 function uses newton iteration to improve the result as much as possible
            function handleStartTS(startT, startS) {
                if (!result.some((info) => eq(info.tThis, startT) && eq(info.tOther, startS))) {
                    const f1 = (t, s) => curve1.tangentAt(t).dot(curve1.at(t).minus(curve2.at(s)));
                    const f2 = (t, s) => curve2.tangentAt(s).dot(curve1.at(t).minus(curve2.at(s)));
                    // f = (b1, b2, t1, t2) = b1.tangentAt(t1).dot(b1.at(t1).minus(b2.at(t2)))
                    const dfdt1 = (b1, b2, t1, t2) => b1.ddt(t1).dot(b1.at(t1).minus(b2.at(t2))) +
                        b1.tangentAt(t1).squared();
                    const dfdt2 = (b1, b2, t1, t2) => -b1.tangentAt(t1).dot(b2.tangentAt(t2));
                    const ni = newtonIterate2dWithDerivatives(f1, f2, startT, startS, 16, dfdt1.bind(undefined, curve1, curve2), dfdt2.bind(undefined, curve1, curve2), (t, s) => -dfdt2(curve2, curve1, s, t), (t, s) => -dfdt1(curve2, curve1, s, t));
                    assert(isFinite(ni.x));
                    assert(isFinite(ni.y));
                    if (ni == undefined)
                        console.log(startT, startS, curve1.sce, curve2.sce);
                    result.push({ tThis: ni.x, tOther: ni.y, p: curve1.at(ni.x) });
                }
            }
            // returns whether an intersection was immediately found (i.e. without further recursion)
            function findRecursive(tMin, tMax, sMin, sMax, curve1AABB, curve2AABB, depth = 0) {
                const EPS = NLA_PRECISION;
                if (curve1AABB.touchesAABBfuzzy(curve2AABB)) {
                    const tMid = (tMin + tMax) / 2;
                    const sMid = (sMin + sMax) / 2;
                    if (Math.abs(tMax - tMin) < EPS || Math.abs(sMax - sMin) < EPS) {
                        handleStartTS(tMid, sMid);
                        return true;
                    }
                    else {
                        const curve1AABBleft = curve1.getAABB(tMin, tMid);
                        const curve2AABBleft = curve2.getAABB(sMin, sMid);
                        let curve1AABBright, curve2AABBright;
                        // if one of the following calls immediately finds an intersection, we don't want to call the others
                        // as that will lead to the same intersection being output multiple times
                        findRecursive(tMin, tMid, sMin, sMid, curve1AABBleft, curve2AABBleft, depth + 1) ||
                            findRecursive(tMin, tMid, sMid, sMax, curve1AABBleft, (curve2AABBright = curve2.getAABB(sMid, sMax)), depth + 1) ||
                            findRecursive(tMid, tMax, sMin, sMid, (curve1AABBright = curve1.getAABB(tMid, tMax)), curve2AABBleft, depth + 1) ||
                            findRecursive(tMid, tMax, sMid, sMax, curve1AABBright, curve2AABBright, depth + 1);
                    }
                }
                return false;
            }
            const result = [];
            findRecursive(tMin, tMax, sMin, sMax, curve1.getAABB(tMin, tMax), curve2.getAABB(sMin, sMax));
            return fuzzyUniquesF(result, (info) => info.tThis);
        }
        /**
         * Searches a 2d area for (an) implicit curve(s).
         * @param implicitCurve
         * @param bounds Defines area to search.
         * @param uStep Granularity of search in s-direction.
         * @param vStep Granularity of search in t-direction.
         * @param stepSize step size to take along the curve
         * @return
         */
        static breakDownIC(implicitCurve, bounds, uStep, vStep, stepSize, validUV) {
            //undefined == didu && (didu = (u, v) => (implicitCurve(u + EPS, v) - implicitCurve(u, v)) / EPS)
            //undefined == didv && (didv = (u, v) => (implicitCurve(u, v + EPS) - implicitCurve(u, v)) / EPS)
            const { uMin, uMax, vMin, vMax } = bounds;
            const deltaS = uMax - uMin, deltaT = vMax - vMin;
            const sRes = ceil(deltaS / uStep), tRes = ceil(deltaT / vStep);
            const grid = new Array(sRes * tRes).fill(0);
            // const printGrid = () =>
            // 	console.log(
            // 		arrayFromFunction(tRes, i =>
            // 			grid
            // 				.slice(sRes * i, sRes * (i + 1))
            // 				.map(v => (v ? 'X' : '_'))
            // 				.join(''),
            // 		).join('\n'),
            // 	)
            const get = (i, j) => grid[j * sRes + i];
            const set = (i, j) => 0 <= i && i < sRes && 0 <= j && j < tRes && (grid[j * sRes + i] = 1);
            const result = [];
            const logTable = [];
            for (let i = 0; i < sRes; i++) {
                search: for (let j = 0; j < tRes; j++) {
                    if (get(i, j))
                        continue;
                    set(i, j);
                    let u = uMin + (i + 0.5) * uStep, v = vMin + (j + 0.5) * vStep;
                    const startS = u, startT = v;
                    // basically curvePoint
                    for (let k = 0; k < 8; k++) {
                        const fp = implicitCurve(u, v);
                        const dfpdx = implicitCurve.x(u, v), dfpdy = implicitCurve.y(u, v);
                        if (0 === Math.pow(dfpdx, 2) + Math.pow(dfpdy, 2)) {
                            // top of a hill, keep looking
                            continue search;
                        }
                        const scale = fp / (Math.pow(dfpdx, 2) + Math.pow(dfpdy, 2));
                        u -= scale * dfpdx;
                        v -= scale * dfpdy;
                    }
                    const li = floor$1((u - uMin) / uStep), lj = floor$1((v - vMin) / vStep);
                    logTable.push({
                        i,
                        j,
                        li,
                        lj,
                        startS,
                        startT,
                        u,
                        v,
                        "bounds(u, v)": uvInAABB2(bounds, u, v),
                        "ic(s,t)": implicitCurve(u, v),
                    });
                    if (!(i == li && j == lj) && get(li, lj)) {
                        continue search;
                    }
                    set(li, lj);
                    // u, v are now good starting coordinates to use follow algorithm
                    if (uvInAABB2(bounds, u, v) &&
                        validUV(u, v) &&
                        eq0(implicitCurve(u, v))) {
                        const subResult = mkcurves(implicitCurve, u, v, stepSize, bounds, validUV);
                        for (const curveData of subResult) {
                            assert(curveData.points.length > 2);
                            for (const { x, y } of curveData.points) {
                                const lif = (x - uMin) / uStep, ljf = (y - vMin) / vStep;
                                set((lif - 0.5) | 0, (ljf - 0.5) | 0);
                                set((lif - 0.5) | 0, (ljf + 0.5) | 0);
                                set((lif + 0.5) | 0, (ljf - 0.5) | 0);
                                set((lif + 0.5) | 0, (ljf + 0.5) | 0);
                            }
                        }
                        //printGrid()
                        result.push(...subResult);
                    }
                }
            }
            // console.table(logTable)
            for (const { points } of result) {
                for (let i = 0; i < points.length - 1; i++) {
                    assert(!points[i].equals(points[i + 1]));
                }
            }
            return result;
        }
        toString() {
            return this.toSource();
        }
        toSource(rounder = (x) => x) {
            return callsce.call(undefined, "new " + this.constructor.name, ...this.getConstructorParameters(), this.tMin, this.tMax);
        }
        withBounds(tMin = this.tMin, tMax = this.tMax) {
            //assert(this.tMin <= tMin && tMin <= this.tMax)
            //assert(this.tMin <= tMax && tMax <= this.tMax)
            return new this.constructor(...this.getConstructorParameters(), tMin, tMax);
        }
        /**
         * The point on the line that is closest to the given point.
         */
        closestPointToPoint(p) {
            return this.at(this.closestTToPoint(p));
        }
        isValidT(t) {
            return le(this.tMin, t) && le(t, this.tMax);
        }
        diff(t, eps) {
            return this.at(t).to(this.at(t + eps));
        }
        // TODO: tmin/tmax first
        closestTToPoint(p, tStart, tMin = this.tMin, tMax = this.tMax) {
            // this.at(t) has minimal distance to p when this.tangentAt(t) is perpendicular to
            // the vector between this.at(t) and p. This is the case iff the dot product of the two is 0.
            // f = (this.at(t) - p) . (this.tangentAt(t)
            // df = this.tangentAt(t) . this.tangentAt(t) + (this.at(t) - p) . this.ddt(t)
            //    = this.tangentAt(t)² + (this.at(t) - p) . this.ddt(t)
            const f = (t) => this.at(t).minus(p).dot(this.tangentAt(t)); // 5th degree polynomial
            const df = (t) => this.tangentAt(t).squared() + this.at(t).minus(p).dot(this.ddt(t));
            //checkDerivate(f, df, tMin, tMax)
            const STEPS = 32;
            if (undefined === tStart) {
                tStart = withMax$1(arrayFromFunction(STEPS, (i) => tMin + ((tMax - tMin) * i) / (STEPS - 1)), (t) => -this.at(t).distanceTo(p));
            }
            return newtonIterateWithDerivative(f, tStart, 16, df);
        }
        /**
         * So different edges on the same curve do not have different vertices, they are always generated
         * on fixed points this.at(k * this.tIncrement), with k taking integer values
         *
         */
        calcSegmentPoints(aT, bT, a, b, reversed, includeFirst) {
            assert(this.tIncrement, "tIncrement not defined on " + this);
            const inc = this.tIncrement;
            const result = [];
            if (includeFirst)
                result.push(a);
            assert(reversed != aT < bT);
            if (aT < bT) {
                const start = Math.ceil((aT + NLA_PRECISION) / inc);
                const end = Math.floor((bT - NLA_PRECISION) / inc);
                for (let i = start; i <= end; i++) {
                    result.push(this.at(i * inc));
                }
            }
            else {
                const start = Math.floor((aT - NLA_PRECISION) / inc);
                const end = Math.ceil((bT + NLA_PRECISION) / inc);
                for (let i = start; i >= end; i--) {
                    result.push(this.at(i * inc));
                }
            }
            result.push(b);
            return result;
        }
        calcSegmentTs(aT, bT, reversed, includeFirst) {
            assert(this.tIncrement, "tIncrement not defined on " + this);
            const inc = this.tIncrement;
            const result = [];
            if (includeFirst)
                result.push(aT);
            assert(reversed != aT < bT);
            if (aT < bT) {
                const start = Math.ceil((aT + NLA_PRECISION) / inc);
                const end = Math.floor((bT - NLA_PRECISION) / inc);
                for (let i = start; i <= end; i++) {
                    result.push(i * inc);
                }
            }
            else {
                const start = Math.floor((aT - NLA_PRECISION) / inc);
                const end = Math.ceil((bT + NLA_PRECISION) / inc);
                for (let i = start; i >= end; i--) {
                    result.push(i * inc);
                }
            }
            result.push(bT);
            return result;
        }
        /**
         *
         * @param p
         * @param tStart Defines interval with tEnd in which a start value for t will be searched.
         * Result is not necessarily in this interval.
         * @param tEnd
         */
        distanceToPoint(p, tStart, tEnd) {
            const closestT = this.closestTToPoint(p, tStart, tEnd);
            return this.at(closestT).distanceTo(p);
        }
        asSegmentDistanceToPoint(p, tStart, tEnd) {
            let t = this.closestTToPoint(p, tStart, tEnd);
            t = clamp$1(t, tStart, tEnd);
            return this.at(t).distanceTo(p);
        }
        /**
         * Behavior when curves are colinear: self intersections
         */
        isInfosWithCurve(curve) {
            if (insideIsInfosWithCurve) {
                return Curve.ispsRecursive(this, this.tMin, this.tMax, curve, curve.tMin, curve.tMax);
            }
            else {
                try {
                    insideIsInfosWithCurve = true;
                    const infos = curve.isInfosWithCurve(this);
                    return infos.map((info) => {
                        assert(info);
                        const { tThis, tOther, p } = info;
                        return { tOther: tThis, tThis: tOther, p };
                    });
                }
                finally {
                    insideIsInfosWithCurve = false;
                }
            }
        }
        isTsWithSurface(surface) {
            if (surface instanceof PlaneSurface) {
                return this.isTsWithPlane(surface.plane);
            }
            if (surface instanceof ProjectedCurveSurface) {
                const projPlane = new P3(surface.dir.unit(), 0);
                const projThis = this.project(projPlane);
                const projEllipse = surface.baseCurve.project(projPlane);
                return projEllipse.isInfosWithCurve(projThis).map((info) => info.tOther);
            }
            if (surface instanceof EllipsoidSurface) {
                const thisOC = this.transform(surface.matrixInverse);
                if (!thisOC.getAABB().touchesAABBfuzzy(new AABB(V3.XYZ.negated(), V3.XYZ))) {
                    return [];
                }
                const f = (t) => thisOC.at(t).length() - 1;
                const df = (t) => thisOC.at(t).unit().dot(thisOC.tangentAt(t));
                const stepSize = 1 / (1 << 11);
                const result = [];
                for (let startT = this.tMin; startT <= this.tMax; startT += stepSize) {
                    const dt = stepSize * thisOC.tangentAt(startT).length();
                    if (abs$2(f(startT)) <= dt) {
                        //const t = newtonIterate1d(f, startT, 16)
                        let t = newtonIterateWithDerivative(f, startT, 16, df);
                        if (!eq0(f(t)) || eq0(df(t))) {
                            t = newtonIterate1d$1(df, startT, 16);
                            //if (f(a) * f(b) < 0) {
                            //    t = bisect(f, a, b, 16)
                            //} else if (df(a) * df(b) < 0) {
                            //    t = bisect(df, a, b, 16)
                            //}
                        }
                        if (eq0(f(t)) && !result.some((r) => eq(r, t))) {
                            result.push(t);
                        }
                    }
                }
                return result.filter((t) => surface.containsPoint(this.at(t)));
            }
            throw new Error();
        }
        arcLength(startT, endT, steps = 1) {
            assert(startT < endT, "startT < endT");
            return glqInSteps((t) => this.tangentAt(t).length(), startT, endT, steps);
        }
        equals(obj) {
            if (this === obj)
                return true;
            return (hasConstructor(obj, this.constructor) &&
                arrayEquals(this.getConstructorParameters(), obj.getConstructorParameters()));
        }
        hashCode() {
            return arrayHashCode(this.getConstructorParameters());
        }
        getAABB(tMin = this.tMin, tMax = this.tMax) {
            tMin = isFinite(tMin) ? tMin : this.tMin;
            tMax = isFinite(tMax) ? tMax : this.tMax;
            const tMinAt = this.at(tMin), tMaxAt = this.at(tMax);
            const roots = this.roots();
            const mins = [0, 0, 0];
            const maxs = [0, 0, 0];
            for (let dim = 0; dim < 3; dim++) {
                const tRoots = roots[dim];
                mins[dim] = Math.min(tMinAt.e(dim), tMaxAt.e(dim));
                maxs[dim] = Math.max(tMinAt.e(dim), tMaxAt.e(dim));
                for (const tRoot of tRoots) {
                    if (tMin < tRoot && tRoot < tMax) {
                        mins[dim] = Math.min(mins[dim], this.at(tRoot).e(dim));
                        maxs[dim] = Math.max(maxs[dim], this.at(tRoot).e(dim));
                    }
                }
            }
            return new AABB(V3.fromArray(mins), V3.fromArray(maxs));
        }
        reversed() {
            throw new Error();
        }
        clipPlane(plane) {
            const ists = this.isTsWithPlane(plane).filter((ist) => this.tMin <= ist && ist <= this.tMax);
            return mapFilter(getIntervals(ists, this.tMin, this.tMax), ([a, b]) => {
                const midT = (a + b) / 2;
                return (!eq(a, b) &&
                    plane.distanceToPointSigned(this.at(midT)) < 0 &&
                    this.withBounds(a, b));
            });
        }
    }
    Curve.hlol = 0;
    function mkcurves(implicitCurve, sStart, tStart, stepSize, bounds, validUV) {
        const start = V(sStart, tStart);
        assert(stepSize > 0);
        // checkDerivate(s => implicitCurve(s, 0), s => didu(s, 0), -1, 1, 0)
        // checkDerivate(t => implicitCurve(0, t), t => didv(0, t), -1, 1, 0)
        const { points, tangents } = followAlgorithm2d(implicitCurve, start, stepSize, bounds, validUV);
        if (points.length > 4 &&
            points[0].distanceTo(getLast(points)) <= abs$2(stepSize)) {
            // this is a loop: split it
            for (let i = 0; i < points.length - 1; i++) {
                assert(!points[i].equals(points[i + 1]));
            }
            const half = floor$1(points.length / 2);
            const points1 = points.slice(0, half), points2 = points.slice(half - 1, points.length);
            const tangents1 = tangents.slice(0, half), tangents2 = tangents.slice(half - 1, tangents.length);
            //tangents2[tangents2.length - 1] = tangents1[0]
            //points2[tangents2.length - 1] = points1[0]
            for (let i = 0; i < points1.length - 1; i++) {
                assert(!points1[i].equals(points1[i + 1]));
            }
            for (let i = 0; i < points2.length - 1; i++) {
                assert(!points2[i].equals(points2[i + 1]));
            }
            return [
                { points: points1, tangents: tangents1 },
                { points: points2, tangents: tangents2 },
            ];
        }
        else {
            // not a loop: check in the other direction
            const { points: reversePoints, tangents: reverseTangents, } = followAlgorithm2d(implicitCurve, start, -stepSize, bounds, validUV);
            const result = followAlgorithm2d(implicitCurve, getLast(reversePoints), stepSize, bounds, validUV, undefined, getLast(reverseTangents).negated());
            assert(result.points.length > 2);
            return [result];
        }
    }
    function breakDownPPCurves(ps1, ps2, uStep, vStep, stepSize) {
        const { uMin, uMax, vMin, vMax } = ps1;
        const bounds = uvInAABB2.bind(undefined, ps1);
        const bounds2 = uvInAABB2.bind(undefined, ps2);
        const deltaU = uMax - uMin, deltaV = vMax - vMin;
        const sRes = ceil(deltaU / uStep), tRes = ceil(deltaV / vStep);
        const grid = new Array(sRes * tRes).fill(0);
        //const printGrid = () => console.log(arrayFromFunction(tRes, i => grid.slice(sRes * i, sRes * (i + 1)).map(v => v ? 'X' : '_').join('')).join('\n'))
        const at = (i, j) => grid[j * sRes + i];
        const set = (i, j) => 0 <= i && i < sRes && 0 <= j && j < tRes && (grid[j * sRes + i] = 1);
        const result = [];
        const logTable = [];
        for (let i = 0; i < sRes; i++) {
            search: for (let j = 0; j < tRes; j++) {
                if (at(i, j))
                    continue;
                set(i, j);
                const startU = uMin + (i + 0.5) * uStep, startV = vMin + (j + 0.5) * vStep;
                // assume point is valid, currently (TODO)
                const curvePointPPResult = curvePointPP(ps1, ps2, ps1.pUV(startU, startV));
                if (undefined === curvePointPPResult) {
                    continue search;
                }
                const { p: startP, st1: { x: u, y: v }, st2: { x: u2, y: v2 }, } = curvePointPPResult;
                const li = floor$1((u - uMin) / uStep), lj = floor$1((v - vMin) / vStep);
                logTable.push({
                    i,
                    j,
                    li,
                    lj,
                    startU,
                    startV,
                    u,
                    v,
                    "bounds(u, v)": bounds(u, v),
                });
                if (!(i == li && j == lj) && at(li, lj)) {
                    continue search;
                }
                set(li, lj);
                // u, v are now good starting coordinates to use follow algorithm
                if (bounds(u, v) && bounds2(u2, v2)) {
                    console.log(V(u, v).sce);
                    const subResult = mkPPCurves(ps1, ps2, startP, stepSize, bounds, bounds2);
                    for (const curveData of subResult) {
                        assert(curveData.st1s.length > 2);
                        for (const { x, y } of curveData.st1s) {
                            const lif = (x - uMin) / uStep, ljf = (y - vMin) / vStep;
                            set((lif - 0.5) | 0, (ljf - 0.5) | 0);
                            set((lif - 0.5) | 0, (ljf + 0.5) | 0);
                            set((lif + 0.5) | 0, (ljf - 0.5) | 0);
                            set((lif + 0.5) | 0, (ljf + 0.5) | 0);
                        }
                    }
                    //printGrid()
                    result.push(...subResult);
                }
            }
        }
        console.table(logTable);
        for (const { points } of result) {
            for (let i = 0; i < points.length - 1; i++) {
                assert(!points[i].equals(points[i + 1]));
            }
        }
        return result.map(({ points, tangents, st1s }) => {
            return new PPCurve(points, tangents, ps1, ps2, st1s, undefined, stepSize, 1);
        });
    }
    function mkPPCurves(ps1, ps2, startPoint, stepSize, bounds1, bounds2) {
        // checkDerivate(s => implicitCurve(s, 0), s => didu(s, 0), -1, 1, 0)
        // checkDerivate(t => implicitCurve(0, t), t => didv(0, t), -1, 1, 0)
        const { points, tangents, st1s } = followAlgorithmPP(ps1, ps2, startPoint, stepSize, bounds1, bounds2);
        if (points[0].distanceTo(getLast(points)) < stepSize && points.length > 2) {
            // this is a loop: split it
            for (let i = 0; i < points.length - 1; i++) {
                assert(!points[i].equals(points[i + 1]));
            }
            const half = floor$1(points.length / 2);
            const points1 = points.slice(0, half), points2 = points.slice(half - 1, points.length);
            const tangents1 = tangents.slice(0, half), tangents2 = tangents.slice(half - 1, tangents.length);
            const st1s1 = st1s.slice(0, half), st1s2 = st1s.slice(half - 1, tangents.length);
            tangents2[tangents2.length - 1] = tangents1[0];
            points2[tangents2.length - 1] = points1[0];
            st1s2[tangents2.length - 1] = st1s1[0];
            for (let i = 0; i < points1.length - 1; i++) {
                assert(!points1[i].equals(points1[i + 1]));
            }
            for (let i = 0; i < points2.length - 1; i++) {
                assert(!points2[i].equals(points2[i + 1]));
            }
            return [
                { points: points1, tangents: tangents1, st1s: st1s1 },
                { points: points2, tangents: tangents2, st1s: st1s2 },
            ];
        }
        else {
            // not a loop: check in the other direction
            const { points: reversePoints } = followAlgorithmPP(ps1, ps2, startPoint, -stepSize, bounds1, bounds2);
            const result = followAlgorithmPP(ps1, ps2, getLast(reversePoints), stepSize, bounds1, bounds2);
            assert(result.points.length > 2);
            return [result];
        }
    }
    function AABB2(uMin, uMax, vMin, vMax) {
        return { uMin, uMax, vMin, vMax };
    }
    function uvInAABB2(aabb2, u, v) {
        return (aabb2.uMin <= u && u <= aabb2.uMax && aabb2.vMin <= v && v <= aabb2.vMax);
    }
    /**
     * Finds a point on a 2D implicit curve.
     *
     * @param implicitCurve The curve follows the path where implicitCurve(u, v) is zero.
     * @param startPoint The point from which to start looking (only .x = u and .y = v will be read).
     * @param didu Derivative of implicitCurve in the first parameter.
     * @param didv Derivative of implicitCurve in the second parameter.
     */
    function curvePoint(implicitCurve, startPoint, didu, didv) {
        let p = startPoint;
        for (let i = 0; i < 8; i++) {
            const fp = implicitCurve(p.x, p.y);
            const dfpdx = didu(p.x, p.y);
            const dfpdy = didv(p.x, p.y);
            const scale = fp / (dfpdx * dfpdx + dfpdy * dfpdy);
            p = p.minus(new V3(scale * dfpdx, scale * dfpdy, 0));
        }
        return p;
    }
    function curvePointMF(mf, startPoint, steps = 8, eps = 1 / (1 << 30)) {
        let p = startPoint;
        for (let i = 0; i < steps; i++) {
            const fp = mf(p.x, p.y);
            const dfpdx = mf.x(p.x, p.y);
            const dfpdy = mf.y(p.x, p.y);
            const scale = fp / (dfpdx * dfpdx + dfpdy * dfpdy);
            p = p.minus(new V3(scale * dfpdx, scale * dfpdy, 0));
            if (abs$2(fp) <= eps)
                break;
        }
        return p;
    }

    class XiEtaCurve extends Curve {
        constructor(center, f1, f2, tMin, tMax) {
            super(tMin, tMax);
            this.center = center;
            this.f1 = f1;
            this.f2 = f2;
            this.tMin = tMin;
            this.tMax = tMax;
            assertVectors(center, f1, f2);
            this.normal = f1.cross(f2);
            if (!this.normal.likeO()) {
                this.normal = this.normal.unit();
                this.matrix = M4.forSys(f1, f2, this.normal, center);
                this.matrixInverse = this.matrix.inversed();
            }
            else {
                this.matrix = M4.forSys(f1, f2, f1.unit(), center);
                const f1p = f1.getPerpendicular();
                // prettier-ignore
                this.matrixInverse = new M4(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1).times(M4.forSys(f1, f1p, f1.cross(f1p), center).inversed());
            }
        }
        /**
         * Intersection of the unit curve with the line ax + by = c.
         */
        static intersectionUnitLine(a, b, c, tMin, tMax) {
            throw new Error("abstract");
        }
        /**
         * Returns a new EllipseCurve representing an ellipse parallel to the XY-plane
         * with semi-major/minor axes parallel t the X and Y axes.
         *
         * @param a length of the axis parallel to X axis.
         * @param b length of the axis parallel to Y axis.
         * @param center center of the ellipse.
         */
        static forAB(a, b, center = V3.O) {
            return new this(center, V(a, 0, 0), V(0, b, 0));
        }
        static XYLCValid(pLC) {
            throw new Error("abstract");
        }
        static XYLCPointT(pLC, tMin, tMax) {
            throw new Error("abstract");
        }
        static unitIsInfosWithLine(anchorLC, dirLC, anchorWC, dirWC, tMin, tMax) {
            throw new Error("abstract");
        }
        addToMesh(mesh, res = 4, radius = 0, pointStep = 1) {
            const baseNormals = arrayFromFunction(res, (i) => V3.polar(1, (TAU * i) / res));
            const baseVertices = arrayFromFunction(res, (i) => V3.polar(radius, (TAU * i) / res));
            const inc = this.tIncrement;
            const start = Math.ceil((this.tMin + NLA_PRECISION) / inc);
            const end = Math.floor((this.tMax - NLA_PRECISION) / inc);
            for (let i = start; i <= end; i += pointStep) {
                const t = i * inc;
                const start = mesh.vertices.length;
                if (0 !== i) {
                    for (let j = 0; j < res; j++) {
                        pushQuad(mesh.TRIANGLES, true, start - res + j, start + j, start - res + ((j + 1) % res), start + ((j + 1) % res));
                    }
                }
                const point = this.at(t), tangent = this.tangentAt(t);
                const matrix = M4.forSys(this.normal, tangent.cross(this.normal), tangent, point);
                mesh.normals.push(...matrix.transformedVectors(baseNormals));
                mesh.vertices.push(...matrix.transformedPoints(baseVertices));
            }
        }
        getConstructorParameters() {
            return [this.center, this.f1, this.f2];
        }
        isInfosWithCurve(curve) {
            if (curve instanceof L3) {
                return this.isInfosWithLine(curve.anchor, curve.dir1, this.tMin, this.tMax, curve.tMin, curve.tMax);
            }
            if (curve instanceof BezierCurve) {
                return this.isInfosWithBezier(curve);
            }
            if (curve instanceof XiEtaCurve) {
                if (!this.normal.isParallelTo(curve.normal)) {
                    return mapFilter(this.isTsWithPlane(curve.getPlane()), (tThis) => {
                        const p = this.at(tThis);
                        if (curve.containsPoint(p)) {
                            return { tThis, tOther: curve.pointT(p), p };
                        }
                        return undefined;
                    });
                }
            }
            return super.isInfosWithCurve(curve);
        }
        transform(m4) {
            return new this.constructor(m4.transformPoint(this.center), m4.transformVector(this.f1), m4.transformVector(this.f2), this.tMin, this.tMax);
        }
        equals(obj) {
            return (this == obj ||
                (undefined != obj &&
                    this.constructor == obj.constructor &&
                    this.center.equals(obj.center) &&
                    this.f1.equals(obj.f1) &&
                    this.f2.equals(obj.f2)));
        }
        hashCode() {
            let hashCode = 0;
            hashCode = hashCode * 31 + this.center.hashCode();
            hashCode = hashCode * 31 + this.f1.hashCode();
            hashCode = hashCode * 31 + this.f2.hashCode();
            return hashCode | 0;
        }
        likeCurve(curve) {
            return (hasConstructor(curve, this.constructor) &&
                this.center.like(curve.center) &&
                this.f1.like(curve.f1) &&
                this.f2.like(curve.f2));
        }
        normalP(t) {
            return this.tangentAt(t).cross(this.normal);
        }
        getPlane() {
            return P3.normalOnAnchor(this.normal, this.center);
        }
        isTsWithPlane(planeWC) {
            assertInst(P3, planeWC);
            /*
                 this: x = center + f1 * cos t + f2 * sin t  (1)
                 plane:
                 n := plane.normal1
                 n DOT x == plane.w           (2)
                 plane defined by f1/f2
                 x = center + f1 * xi + f2 * eta         (3)
                 intersection plane and planef1/f2:
                 insert (3) into (2):
                 n DOT center + n DOT f1 * xi + n DOT f2 * eta = plane.w | -n DOT center
                 n DOT f1 * xi + n DOT f2 * eta = plane.w - n DOT center (4)
                 points on ellipse have additional condition
                 eta * eta + xi * xi = 1 (5)
                 g1 := n DOT f1
                 g2 := n DOT f2
                 g3 := w - n DOT center
                 solve system (5)/(6)
                 g1 * xi + g2 * eta = g3 (6)
                 */
            if (planeWC.normal1.isParallelTo(this.normal)) {
                return [];
            }
            const n = planeWC.normal1, w = planeWC.w, center = this.center, f1 = this.f1, f2 = this.f2, g1 = n.dot(f1), g2 = n.dot(f2), g3 = w - n.dot(center);
            return this.constructor.intersectionUnitLine(g1, g2, g3, this.tMin, this.tMax);
        }
        pointT(p) {
            assertVectors(p);
            const pLC = this.matrixInverse.transformPoint(p);
            return this.constructor.XYLCPointT(pLC);
        }
        containsPoint(p) {
            const pLC = this.matrixInverse.transformPoint(p);
            return (eq0(pLC.z) &&
                this.isValidT(this.constructor.XYLCPointT(pLC, this.tMin, this.tMax)));
        }
        isInfosWithLine(anchorWC, dirWC, tMin = this.tMin, tMax = this.tMax, lineMin = -100000, lineMax = 100000) {
            const anchorLC = this.matrixInverse.transformPoint(anchorWC);
            const dirLC = this.matrixInverse.transformVector(dirWC);
            if (eq0(dirLC.z)) {
                // local line parallel to XY-plane
                if (eq0(anchorLC.z)) {
                    // local line lies in XY-plane
                    return this.constructor.unitIsInfosWithLine(anchorLC, dirLC, anchorWC, dirWC, tMin, tMax);
                }
            }
            else {
                // if the line intersects the XY-plane in a single point, there can be an intersection there
                // find point, then check if distance from circle = 1
                const otherTAtZ0 = anchorLC.z / dirLC.z;
                const isp = dirLC.times(otherTAtZ0).plus(anchorLC);
                if (this.constructor.XYLCValid(isp)) {
                    // point lies on unit circle
                    return [
                        {
                            tThis: this.constructor.XYLCPointT(isp),
                            tOther: otherTAtZ0,
                            p: anchorWC.plus(dirWC.times(otherTAtZ0)),
                        },
                    ];
                }
            }
            return [];
        }
        isTsWithSurface(surface) {
            if (surface instanceof PlaneSurface) {
                return this.isTsWithPlane(surface.plane);
            }
            else if (surface instanceof EllipsoidSurface) {
                const isEllipses = surface.isCurvesWithPlane(this.getPlane());
                return isEllipses
                    .flatMap((isEllipse) => this.isInfosWithCurve(isEllipse))
                    .filter((info) => surface.containsPoint(info.p))
                    .map((info) => info.tThis);
            }
            else if (surface instanceof ProjectedCurveSurface ||
                surface instanceof ConicSurface) {
                return surface
                    .isCurvesWithPlane(this.getPlane())
                    .flatMap((curve) => this.isInfosWithCurve(curve))
                    .map((info) => info.tThis);
            }
            else {
                throw new Error();
            }
        }
        isInfosWithBezier(bezierWC) {
            const bezierLC = bezierWC.transform(this.matrixInverse);
            if (new PlaneSurface(P3.XY).containsCurve(bezierLC)) {
                return this.isInfosWithBezier2D(bezierWC);
            }
            else {
                const infos = mapFilter(bezierLC.isTsWithPlane(P3.XY), (tOther) => {
                    const pLC = bezierLC.at(tOther);
                    if (this.constructor.XYLCValid(pLC)) {
                        return {
                            tOther: tOther,
                            p: bezierWC.at(tOther),
                            tThis: this.constructor.XYLCPointT(pLC),
                        };
                    }
                    return undefined;
                });
                return infos;
            }
        }
        isInfosWithBezier2D(bezierWC, sMin = bezierWC.tMin, sMax = bezierWC.tMax) {
            return Curve.ispsRecursive(this, this.tMin, this.tMax, bezierWC, sMin, sMax);
        }
        isOrthogonal() {
            return this.f1.isPerpendicularTo(this.f2);
        }
        at2(xi, eta) {
            assertNumbers(xi, eta);
            // center + f1 xi + f2 eta
            return this.center.plus(this.f1.times(xi)).plus(this.f2.times(eta));
        }
        debugInfo() {
            return {
                points: [
                    this.center,
                    this.at2(0.5, 0),
                    this.at2(0, 1 / 3),
                    this.at2(0, 2 / 3),
                ],
                lines: [this.center, this.at2(0, 1), this.center, this.at2(1, 0)],
            };
        }
    }
    /**
     * Transforms the unit 4d parabola
     * P(t) = t² (0, 1, 0, 0) + t (1, 0, 0, 0) + (0, 0, 0, 1) using m and projects
     * the result into 3d. This is used for the transform4 implementation of conics.
     * The parabola may not cross the vanishing plane of m in the interval
     * [tMin, tMax], as that would result in discontinuities.
     */
    function parabola4Projection(m, tMin, tMax) {
        const w1 = m.m[12];
        const w2 = m.m[13];
        const wc = m.m[15];
        // if the 4d parabola crosses the vanishing plane, it will lead to multiple/infinite hyperbolas, both of which we
        // want to avoid. Hence, we must check that the entire interval [tMin, tMax] is on one side of the vanishing plane.
        // Checking tMax, tMin and the extremas is enough.
        const extremas = solveCubicReal2(0, w2, w1, wc);
        const wx0 = (x) => Number.isFinite(x) ? snap0(Math.pow(x, 2) * w2 + x * w1 + wc) : sign$1(w2) * Infinity;
        if (wx0(tMin) * wx0(tMax) < 0 ||
            extremas.some((x) => wx0(x) * (wx0(tMin) + wx0(tMax)) < 0)) {
            console.log(m.str);
            throw new Error("The entire interval must be on one side of the vanishing plane. P=" +
                toSource(P3.vanishingPlane(m)));
        }
        if (eq0(wc)) {
            // the following matrix maps a curve C onto itself, with the parameter being inverted:
            // C2(t) = C(-1/t). This makes C(0) a real value, which is necessary for the projection calculation.
            // the sign inversion is so the tangent direction does not change.
            // prettier-ignore
            const mm = new M4(-1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0);
            if (!eq0(w2)) {
                return parabola4Projection(m.times(mm), -1 / tMin, -1 / tMax);
            }
            // wc == w2 == 0 => degenerates to a line:
            // C(t) = (t² f2 + t f1 + c) / (t w1)
            // C(t) = (t f2 + f1 + c) / (t w2 + w1)
            // substitute t = (1/s - w1) / w2
            // C(s) = f2 / w2 + s (f1 - f2 w1 / w2), which is a line
            // we can multiply the direction vector by w2 to avoid divisions:
            // C(t) = f2 / w2 + s (f1 w2 - f2 w1)
            const f1 = m.col(0);
            const f2 = m.col(1);
            return L3.anchorDirection(f2.p3(), f1.V3().times(f2.w).minus(f2.V3().times(f1.w)));
        }
        {
            // ensure that the bottom-right value = 1. this does not change the 3d result.
            m.m[15] !== 1 && (m = m.divScalar(m.m[15]));
            const w2 = m.m[13];
            const w1 = m.m[12];
            const wc = m.m[15];
            // we want to split m into X * P, such that X is a transformation with no projective component (first three
            // values of the bottom row = 0), which can be handled by the usual .transform() method, and P which has only a
            // projective component (only the last row differs from the identity matrix). This simplifies the following
            // calculation. X * P = m => X * P * P^-1 = m * P^-1 => X = m * P^-1
            // prettier-ignore
            const Pinv = new M4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -m.m[12], -m.m[13], -m.m[14], 1);
            const X = m.times(Pinv);
            // P'(t) = 0 is true for t = 0 and t1. The center is in between P(0) and P(t1), or P(t1) / 2, as P(0) = O
            const delta = 4 * w2 * wc - Math.pow(w1, 2);
            const center = new V3((-w1 * wc) / delta, (2 * Math.pow(wc, 2)) / delta, 0);
            // f2 is parallel to P'(0), i.e. horizontal. Solve Py(t2) = Cy = Py(t1) / 2 for t2 and simplify
            // f2x = Px(t2) - Cx = Px(t2) - Px(t1) / 2 to get the x-component of f2:
            const f2x = 1 / sqrt$1(abs$2(delta)) / wc;
            const f2 = new V3(f2x, 0, 0);
            let result;
            if (eq0(delta)) {
                result = new ParabolaCurve(V3.O, V3.X, V3.Y, tMin, tMax);
            }
            else if (0 < delta) {
                const tMapInv = (t) => {
                    const wt = Math.pow(t, 2) * w2 + t * w1 + wc;
                    const xi = 1 -
                        (delta / 2 / Math.pow(wc, 2)) * (Number.isFinite(t) ? Math.pow(t, 2) / wt : 1 / w2);
                    const xx = acos(xi);
                    const p = Number.isFinite(t)
                        ? new V3(t, Math.pow(t, 2), 0).div(wt)
                        : new V3(0, 1 / w2, 0);
                    const pLC = M4.forSys(center.negated(), f2, V3.Z, center)
                        .inversed()
                        .transformPoint(p);
                    const angle = pLC.angleXY();
                    if (t > 0 && pLC.y < 0) {
                        return angle + TAU;
                    }
                    else if (t < 0 && pLC.y > 0) {
                        return angle - TAU;
                    }
                    return angle;
                };
                result = EllipseCurve.andFixTs(center, center.negated(), f2, tMapInv(tMin), tMapInv(tMax));
            }
            else {
                const tMapInv = (t) => sign$1(t) *
                    acosh(1 -
                        (delta / 2 / Math.pow(wc, 2)) *
                            (Number.isFinite(t)
                                ? Math.pow(t, 2) / (Math.pow(t, 2) * w2 + t * w1 + wc)
                                : 1 / w2));
                result = new HyperbolaCurve(center, center.negated(), f2, tMapInv(tMin), tMapInv(tMax));
            }
            return result.transform(X);
        }
    }

    class ImplicitCurve extends Curve {
        constructor(points, tangents, dir = 1, generator, tMin = 1 == dir ? 0 : -(points.length - 1), tMax = 1 == dir ? points.length - 1 : 0) {
            super(tMin, tMax);
            this.points = points;
            this.tangents = tangents;
            this.dir = dir;
            this.generator = generator;
            assert(points.length > 2);
            assert(0 <= tMin && tMin <= points.length - 1, tMin, points.length);
            assert(0 <= tMax && tMax <= points.length - 1, tMax, points.length);
        }
        likeCurve(curve) {
            throw new Error("Method not implemented.");
        }
        toSource(rounder = (x) => x) {
            return this.generator || super.toSource(rounder);
        }
        containsPoint(p) {
            assertVectors(p);
            return !isNaN(this.pointT(p));
        }
        equals(obj) {
            return (this == obj ||
                (Object.getPrototypeOf(obj) == PICurve.prototype &&
                    this.points[0].equals(obj.points[0]) &&
                    this.tangents[0].equals(obj.tangents[0])));
        }
        hashCode() {
            return arrayHashCode([this.points[0], this.tangents[0]]);
        }
        tangentP(pWC) {
            assertVectors(pWC);
            assert(this.containsPoint(pWC), "this.containsPoint(pWC)" + this.containsPoint(pWC));
            const t = this.pointT(pWC);
            return this.tangentAt(t);
        }
        tangentAt(t) {
            t = clamp$1(t, this.tMin, this.tMax);
            return V3.lerp(this.tangents[floor$1(t)], this.tangents[ceil(t)], t % 1);
        }
        at(t) {
            assert(isFinite(t));
            return V3.lerp(this.points[floor$1(t)], this.points[ceil(t)], t % 1);
        }
        getConstructorParameters() {
            throw new Error();
        }
        roots() {
            const allTs = arrayRange(0, this.points.length);
            return [allTs, allTs, allTs];
        }
        /**
         * @param mesh
         * @param res
         * @param radius default to 0. Use the shader to achieve dynamic scaling.
         * @param pointStep
         */
        addToMesh(mesh, res = 4, radius = 0, pointStep = 1) {
            const baseNormals = arrayFromFunction(res, (i) => V3.polar(1, (TAU * i) / res));
            const baseVertices = arrayFromFunction(res, (i) => V3.polar(radius, (TAU * i) / res));
            let prevTangent = V3.Z, prevMatrix = M4.IDENTITY;
            for (let i = 0; i < this.points.length; i += pointStep) {
                const start = mesh.vertices.length;
                if (0 !== i) {
                    for (let j = 0; j < res; j++) {
                        pushQuad(mesh.TRIANGLES, true, start - res + j, start + j, start - res + ((j + 1) % res), start + ((j + 1) % res));
                    }
                }
                const point = this.points[i], tangent = this.tangents[i];
                const tangentMatrix = M4.rotateAB(prevTangent, tangent).times(prevMatrix);
                mesh.normals.push(...tangentMatrix.transformedVectors(baseNormals));
                const baseMatrix = M4.translate(point).times(tangentMatrix);
                mesh.vertices.push(...baseMatrix.transformedPoints(baseVertices));
                prevTangent = tangent;
                prevMatrix = tangentMatrix;
            }
        }
        rootsApprox() {
            const roots = [[], [], []];
            const points = this.points;
            let lastDiff = points[1].minus(points[0]);
            for (let i = 2; i < points.length; i++) {
                const diff = points[i].minus(points[i - 1]);
                for (let dim = 0; dim < 3; dim++) {
                    if (Math.sign(lastDiff.e(dim)) != Math.sign(diff.e(dim))) {
                        roots[dim].push(i);
                    }
                }
                lastDiff = diff;
            }
            return roots;
        }
        pointT(pWC) {
            const startT = withMax$1(arrayRange(floor$1(this.tMin), ceil(this.tMax), 1), (t) => -pWC.distanceTo(this.points[t]));
            if (undefined === startT)
                throw new Error();
            if (this.points[startT].like(pWC))
                return startT;
            const a = max$3(0, startT - 1), b = min$3(this.points.length - 1, startT + 1);
            const tangent = this.tangentAt(startT);
            const f = (t) => this.at(t).to(pWC).dot(tangent);
            // const df = (t: number) => -this.tangentAt(clamp(t, 0, this.points.length - 1)).dot(tangent)
            //checkDerivate(f, df, 0, this.points.length - 2, 3)
            const t = bisect$1(f, a, b, 32);
            if (!isFinite(t) || !eq0(this.at(t).distanceTo(pWC))) {
                return NaN;
            }
            return t;
        }
    }
    ImplicitCurve.prototype.tIncrement = 1;
    /**
     * isInfosWithLine for an ImplicitCurve defined as the intersection of two surfaces.
     */
    function surfaceIsICurveIsInfosWithLine(surface1, surface2, anchorWC, dirWC, tMin, tMax, lineMin, lineMax) {
        const line = new L3(anchorWC, dirWC.unit());
        const psTs = surface1.isTsForLine(line);
        const isTs = surface2.isTsForLine(line);
        const commonTs = psTs.filter((psT) => isTs.some((isT) => eq(psT, isT)));
        const commonTInfos = commonTs.map((t) => ({
            tThis: 0,
            tOther: t / dirWC.length(),
            p: line.at(t),
        }));
        const result = commonTInfos.filter((info) => this.containsPoint(info.p));
        result.forEach((info) => (info.tThis = this.pointT(info.p)));
        return result;
    }

    /**
     * Bezier curve with degree 3.
     */
    class BezierCurve extends Curve {
        constructor(p0, p1, p2, p3, tMin = -0.1, tMax = 1.1) {
            super(tMin, tMax);
            assertVectors(p0, p1, p2, p3);
            assert(isFinite(tMin) && isFinite(tMax));
            //assert(!L3.throughPoints(p0, p3).containsPoint(p1) || !L3.throughPoints(p0, p3).containsPoint(p2))
            this.p0 = p0;
            this.p1 = p1;
            this.p2 = p2;
            this.p3 = p3;
        }
        get points() {
            return [this.p0, this.p1, this.p2, this.p3];
        }
        /**
         * Returns a new BezierCurve with curve.at(x) == V(x, ax³ + bx² + cx + d, 0).
         */
        static graphXY(a, b, c, d, tMin, tMax) {
            // d = p0y
            // c = -3 p0y + 3 p1y => p1y = c/3 + p0y
            // b = 3 p0y - 6 p1y + 3 p2y => p2y = b/3 - p0y + 2 p1y
            // a = -p0y + 3 p1y -3 p2y + p3y => p3y = a + p0y - 3 p1y + 3 p2y
            const p0y = d;
            const p1y = c / 3 + p0y;
            const p2y = b / 3 - p0y + 2 * p1y;
            const p3y = a + p0y - 3 * p1y + 3 * p2y;
            return new BezierCurve(V(0, p0y), V(1 / 3, p1y), V(2 / 3, p2y), V(1, p3y), tMin, tMax);
        }
        static quadratic(a, b, c, tMin = 0, tMax = 1) {
            const line = L3.throughPoints(a, c);
            if (line.containsPoint(b)) {
                return line;
            }
            else {
                // p1 = 1/3 a + 2/3 b
                // p2 = 1/3 c + 2/3 b
                return new BezierCurve(a, b.times(2).plus(a).div(3), b.times(2).plus(c).div(3), c, tMin, tMax);
            }
        }
        /**
         * Returns a bezier curve which approximates a CCW unit circle arc starting at V3.X of angle phi
         * phi <= PI / 2 is recommended
         *
         * Formula from here: https://pomax.github.io/bezierinfo/#circles_cubic
         */
        static approximateUnitArc(phi) {
            const f = (4 / 3) * Math.tan(phi / 4);
            return new BezierCurve(V3.X, new V3(1, f, 0), new V3(cos$2(phi) + f * sin$2(phi), sin$2(phi) - f * cos$2(phi), 0), V3.sphere(phi, 0), 0, 1);
        }
        getConstructorParameters() {
            return [this.p0, this.p1, this.p2, this.p3];
        }
        at(t) {
            // = s^3 p0 + 3 s^2 t p1 + 3 s t^2 p2 + t^3 p3
            assertNumbers(t);
            const p0 = this.p0, p1 = this.p1, p2 = this.p2, p3 = this.p3;
            const s = 1 - t, c0 = s * s * s, c1 = 3 * s * s * t, c2 = 3 * s * t * t, c3 = t * t * t;
            return new V3(p0.x * c0 + p1.x * c1 + p2.x * c2 + p3.x * c3, p0.y * c0 + p1.y * c1 + p2.y * c2 + p3.y * c3, p0.z * c0 + p1.z * c1 + p2.z * c2 + p3.z * c3);
        }
        /**
         * s := (1 - t)
         * at(t) := s³ p0 + 3 s² t p1 + 3 s t² p2 + t³ p3
         * tangent(t) := 3 s² (p1 - p0) + 6 s t (p2 - p1) + 3 t² (p3 - p2)
         *            := 3 (1 - t)² (p1 - p0) + 6 (1 - t) t (p2 - p1) + 3 t² (p3 - p2)
         *            := 3 (1 - 2 t + t²) (p1 - p0) + 6 (t - t²) (p2 - p1) + 3 t² (p3 - p2)
         *            := (3 (p3 - p2) - 6 (p2 - p1) + 3 (p1 - p0)) t²*
         *                + (-6 (p1 - p0) + (p2 - p1)) t
         *                + 3 (p1 - p0)
         */
        tangentAt(t) {
            assertNumbers(t);
            const p0 = this.p0, p1 = this.p1, p2 = this.p2, p3 = this.p3;
            const s = 1 - t, c01 = 3 * s * s, c12 = 6 * s * t, c23 = 3 * t * t;
            return new V3((p1.x - p0.x) * c01 + (p2.x - p1.x) * c12 + (p3.x - p2.x) * c23, (p1.y - p0.y) * c01 + (p2.y - p1.y) * c12 + (p3.y - p2.y) * c23, (p1.z - p0.z) * c01 + (p2.z - p1.z) * c12 + (p3.z - p2.z) * c23);
        }
        ddt(t) {
            assertNumbers(t);
            const p0 = this.p0, p1 = this.p1, p2 = this.p2, p3 = this.p3;
            const c012 = 6 * (1 - t), c123 = 6 * t;
            return new V3((p2.x - 2 * p1.x + p0.x) * c012 + (p3.x - 2 * p2.x + p1.x) * c123, (p2.y - 2 * p1.y + p0.y) * c012 + (p3.y - 2 * p2.y + p1.y) * c123, (p2.z - 2 * p1.z + p0.z) * c012 + (p3.z - 2 * p2.z + p1.z) * c123);
        }
        normalP(t) {
            const tangent = this.tangentAt(t);
            const rot = tangent.cross(this.ddt(t));
            return rot.cross(tangent);
        }
        isTsWithPlane(planeWC) {
            assertInst(P3, planeWC);
            /*
                 We are solving for t:
                 n := plane.normal1
                 this.at(t) DOT n == plane.w // according to plane definition
                 (a t³ + b t² + c t + d) DOT n == plane.w // bezier curve as cubic equation
                 (a DOT n) t³ + (b DOT n) t³ + (c DOT n) t + d DOT n - plane.w == 0 // multiply out DOT n, minus plane.w
                 */
            const { p0, p1, p2, p3 } = this;
            const n = planeWC.normal1;
            const a = p1.minus(p2).times(3).minus(p0).plus(p3);
            const b = p0.plus(p2).times(3).minus(p1.times(6));
            const c = p1.minus(p0).times(3);
            const d = p0;
            return solveCubicReal2(a.dot(n), b.dot(n), c.dot(n), d.dot(n) - planeWC.w).filter((t) => between(t, this.tMin, this.tMax));
        }
        isTsWithSurface(surfaceWC) {
            if (surfaceWC instanceof CylinderSurface) {
                const projPlane = new P3(surfaceWC.dir.unit(), 0);
                const projThis = this.project(projPlane);
                const projEllipse = surfaceWC.baseCurve.project(projPlane);
                return projEllipse
                    .isInfosWithBezier2D(projThis)
                    .map((info) => info.tOther);
            }
            return super.isTsWithSurface(surfaceWC);
        }
        likeCurve(curve) {
            return (this == curve ||
                (hasConstructor(curve, BezierCurve) &&
                    this.p0.like(curve.p0) &&
                    this.p1.like(curve.p1) &&
                    this.p2.like(curve.p2) &&
                    this.p3.like(curve.p3)));
        }
        equals(obj) {
            return (this == obj ||
                (hasConstructor(obj, BezierCurve) &&
                    this.p0.equals(obj.p0) &&
                    this.p1.equals(obj.p1) &&
                    this.p2.equals(obj.p2) &&
                    this.p3.equals(obj.p3)));
        }
        hashCode() {
            let hashCode = 0;
            hashCode = hashCode * 31 + this.p0.hashCode();
            hashCode = hashCode * 31 + this.p1.hashCode();
            hashCode = hashCode * 31 + this.p2.hashCode();
            hashCode = hashCode * 31 + this.p3.hashCode();
            return hashCode | 0;
        }
        /**
         * Checks if this curve is colinear to the passed curve, i.e.
         * for every t:number there exists a s:number with this.at(t) = curve.at(s)
         */
        isColinearTo(curve) {
            if (this === curve || this.likeCurve(curve))
                return true;
            if (!(curve instanceof BezierCurve))
                return false;
            // first, find out where/if curve.p0 and curve.p3 are on this
            // then split this at curve.p0 --> curve.p3 to compare points p1 and p2
            let curveP0T, curveP3T;
            // assign in if condition to exploit short-circuit
            if (isNaN((curveP0T = this.pointT(curve.p0))) ||
                isNaN((curveP3T = this.pointT(curve.p3)))) {
                return false;
            }
            let thisSplit;
            if (eq(1, curveP0T)) {
                // this.split(curveP0T).right is degenerate in this case, so we need to handle it separately
                // this.split(curveP3T): 0 --> curveP3T --> 1
                // .right: curveP3T --> 1
                // .reversed(): 1 --> curveP3T
                thisSplit = this.split(curveP3T)[1].reversed();
            }
            else {
                // curveP3T describes the point on this
                // adjust it so it describes the same point on this.split(curveP0T).right
                // this:                       0           p0t        p3t      1
                //                             |            |          |       |
                // this.split(curveP0T).right:              0        p3tad     1
                const curveP3Tadjusted = (curveP3T - curveP0T) / (1 - curveP0T);
                thisSplit = this.split(curveP0T)[1].split(curveP3Tadjusted)[0];
            }
            return curve.likeCurve(thisSplit);
        }
        selectPart(t0, t1) {
            const t1Adjusted = (t1 - t0) / (1 - t0);
            return this.split(t0)[1].split(t1Adjusted)[0];
        }
        reversed() {
            return new BezierCurve(this.p3, this.p2, this.p1, this.p0, 1 - this.tMax, 1 - this.tMin);
        }
        getCoefficients() {
            const { p0, p1, p2, p3 } = this;
            // calculate cubic equation coefficients
            // a t³ + b t² + c t + d = 0
            // multiplying out the cubic Bézier curve equation gives:
            // a = -p0 + 3 p1 - 3 p2 + p3
            // b = 3 p0 - 6 p1 + 3 p2
            // c = -3 p0 + 3 p1
            // d = p0 - p
            const a = p1.minus(p2).times(3).minus(p0).plus(p3);
            const b = p0.plus(p2).times(3).minus(p1.times(6));
            const c = p1.minus(p0).times(3);
            const d = p0;
            return [a, b, c, d];
        }
        tangentCoefficients() {
            const { p0, p1, p2, p3 } = this;
            const p01 = p1.minus(p0), p12 = p2.minus(p1), p23 = p3.minus(p2);
            const a = p01.plus(p23).times(3).minus(p12.times(6));
            const b = p12.minus(p01).times(6);
            const c = p01.times(3);
            return [V3.O, a, b, c];
        }
        pointT2(p, tMin = this.tMin, tMax = this.tMax) {
            const t = this.closestTToPoint(p, undefined, tMin, tMax);
            assert(this.at(t).like(p));
            return t;
        }
        pointT(p) {
            const { p0, p1, p2, p3 } = this;
            // calculate cubic equation coefficients
            // a t³ + b t² + c t + d = 0
            // multiplying out the cubic Bézier curve equation gives:
            // a = -p0 + 3 p1 - 3 p2 + p3
            // b = 3 p0 - 6 p1 + 3 p2
            // c = -3 p0 + 3 p1
            // d = p0 - p
            const a = p1.minus(p2).times(3).minus(p0).plus(p3);
            const b = p0.plus(p2).times(3).minus(p1.times(6));
            const c = p1.minus(p0).times(3);
            const d = p0.minus(p);
            // a t³ + b t² + c t + d = 0 is 3 cubic equations, some of which can be degenerate
            const maxDim = NLA_PRECISION < a.maxAbsElement()
                ? a.maxAbsDim()
                : NLA_PRECISION < b.maxAbsElement()
                    ? b.maxAbsDim()
                    : NLA_PRECISION < c.maxAbsElement()
                        ? c.maxAbsDim()
                        : assertNever();
            const results = solveCubicReal2(a.e(maxDim), b.e(maxDim), c.e(maxDim), d.e(maxDim)).filter((t) => this.at(t).like(p));
            if (0 == results.length)
                return NaN;
            if (1 == results.length)
                return results[0];
            throw new Error("multiple intersection " + this.toString() + p.sce);
        }
        pointT3(p) {
            const { p0, p1, p2, p3 } = this;
            // calculate cubic equation coefficients
            // a t³ + b t² + c t + d = 0
            // multiplying out the cubic Bézier curve equation gives:
            // a = -p0 + 3 p1 - 3 p2 + p3
            // b = 3 p0 - 6 p1 + 3 p2
            // c = -3 p0 + 3 p1
            // d = p0 - p
            const a = p1.minus(p2).times(3).minus(p0).plus(p3).els();
            const b = p0.plus(p2).times(3).minus(p1.times(6)).els();
            const c = p1.minus(p0).times(3).els();
            const d = p0.minus(p).els();
            let results = undefined;
            // assume passed point is on curve and that curve does not self-intersect,
            // i.e. there is exactly one correct result for t
            // try to find a single result in the x-dimension, if multiple are found,
            // filter them by checking the other dimensions
            for (let dim = 0; dim < 3; dim++) {
                if (eq0(a[dim]) && eq0(b[dim]) && eq0(c[dim])) {
                    // for case x:
                    // ax == bx == cx == 0 => x(t) = dx
                    // x value is constant
                    // if x == 0 for all t, this does not limit the result, otherwise, there is no result, i.e
                    // the passed point is not on the curve
                    if (!eq0(d[dim]))
                        return NaN;
                }
                else {
                    const newResults = solveCubicReal2(a[dim], b[dim], c[dim], d[dim]);
                    if (0 == newResults.length)
                        return NaN;
                    if (1 == newResults.length)
                        return newResults[0];
                    if (results) {
                        results = results.filter((t) => newResults.some((t2) => eq(t, t2)));
                        if (0 == results.length)
                            return NaN;
                        if (1 == results.length)
                            return results[0];
                    }
                    else {
                        results = newResults;
                    }
                }
            }
            throw new Error("multiple intersection " + results + this.toString() + p.sce);
        }
        transform(m4) {
            // perspective projection turn bezier curve into rational spline
            assert(m4.isNoProj(), m4.str);
            return new BezierCurve(m4.transformPoint(this.p0), m4.transformPoint(this.p1), m4.transformPoint(this.p2), m4.transformPoint(this.p3), this.tMin, this.tMax);
        }
        transform4(m4) {
            if (m4.isNoProj()) {
                return this.transform(m4);
            }
            else {
                return this.toNURBS().transform4(m4);
            }
        }
        isClosed() {
            return this.p0.like(this.p3);
        }
        isQuadratic() {
            return this.p0.lerp(this.p1, 1.5).like(this.p3.lerp(this.p2, 1.5));
        }
        debugInfo() {
            return {
                lines: [0, 1, 1, 2, 2, 3].map((i) => this.points[i]),
                points: this.points,
            };
        }
        split(t) {
            // do de Casteljau's algorithm at t, the resulting points are the points needed to create 2 new curves
            const s = 1 - t;
            const { p0, p1, p2, p3 } = this;
            /*
                p3 // n3
                b01 = s p0 + t p1
                b11 = s p1 + t p2
                b21 = s p2 + t p3 // n2
                b02 = s b01 + t b11
                b12 = s b11 + t b21 // n1
                b03 = s b02 + t b12 // n0
        
                c01 =
                */
            const b01 = p0.times(s).plus(p1.times(t)), b11 = p1.times(s).plus(p2.times(t)), b21 = p2.times(s).plus(p3.times(t));
            const b02 = b01.times(s).plus(b11.times(t)), b12 = b11.times(s).plus(b21.times(t));
            const b03 = b02.times(s).plus(b12.times(t));
            return [
                new BezierCurve(p0, b01, b02, b03),
                new BezierCurve(b03, b12, b21, p3),
            ];
        }
        containsPoint(p) {
            return isFinite(this.pointT(p));
        }
        roots() {
            /**
             *            := (3 (p3 - p2) - 6 (p2 - p1) + 3 (p1 - p0)) t²*
             *                + (-6 (p1 - p0) + 6 (p2 - p1)) t
             *                + 3 (p1 - p0)
             *                */
            const { p0, p1, p2, p3 } = this;
            const p01 = p1.minus(p0), p12 = p2.minus(p1), p23 = p3.minus(p2);
            const a = p01.plus(p23).times(3).minus(p12.times(6));
            const b = p12.minus(p01).times(6);
            const c = p01.times(3);
            return arrayFromFunction(3, (dim) => solveCubicReal2(0, a.e(dim), b.e(dim), c.e(dim)));
        }
        isInfosWithLine(anchorWC, dirWC, tMin, tMax, lineMin = -100000, lineMax = 100000) {
            // const dirLength = dirWC.length()
            // // TODO: no:
            // let result = Curve.ispsRecursive(this, this.tMin, this.tMax, new L3(anchorWC, dirWC.unit()), lineMin, lineMax)
            // result = fuzzyUniquesF(result, info => info.tOther)
            // result.forEach(info => (info.tOther /= dirLength))
            // return result
            // looking for this.at(t) == line.at(s)
            // this.at(t).x == anchorWC.x + dirWC.x * s
            // (this.at(t).x - anchorWC.x) / dirWC.x == s (analogue for y and z) (1x, 1y, 1z)
            // (1x) - (1y):
            // (this.at(t).x - anchorWC.x) / dirWC.x - (this.at(t).y - anchorWC.y) / dirWC.y == 0
            // (this.at(t).x - anchorWC.x) * dirWC.y - (this.at(t).y - anchorWC.y) * dirWC.x == 0 (2)
            // cubic equation params (see #pointT):
            const { p0, p1, p2, p3 } = this;
            const a = p1.minus(p2).times(3).minus(p0).plus(p3);
            const v1 = V3.UNITS[a.minAbsDim()];
            const testPlane = P3.forAnchorAndPlaneVectors(anchorWC, dirWC, v1.isParallelTo(dirWC) ? a : v1);
            return this.isTsWithPlane(testPlane)
                .map((tThis) => {
                const p = this.at(tThis);
                return { tThis, tOther: L3.pointT(anchorWC, dirWC, p), p };
            })
                .filter((info) => L3.containsPoint(anchorWC, dirWC, info.p));
        }
        closestPointToLine(line, tMin, tMax) {
            // (this(t)-line(s)) * line.dir == 0 (1)
            // (this(t)-line(s)) * this.tangentAt(t) == 0 (2)
            // this(t) * line.dir - line(s) * line.dir == 0
            // this(t) * line.dir - line.anchor * line.dir - s line.dir * line.dir == 0
            // this(t) * line.dir - line.anchor * line.dir == s (3)
            // insert (3) in (2)
            // (this(t)-line(this(t) * line.dir - line.anchor * line.dir)) * this.tangentAt(t) == 0 (4)
            // (4) is a 5th degree polynomial, solve numerically
            tMin = isFinite(tMin) ? tMin : this.tMin;
            tMax = isFinite(tMax) ? tMax : this.tMax;
            const anchorDotDir1 = line.anchor.dot(line.dir1);
            const f = (t) => {
                const atT = this.at(t);
                return atT
                    .minus(line.at(atT.dot(line.dir1) - anchorDotDir1))
                    .dot(this.tangentAt(t));
            };
            const STEPS = 32;
            const startT = withMax$1(arrayFromFunction(STEPS, (i) => tMin + ((tMax - tMin) * i) / STEPS), (t) => -f(t));
            return newtonIterate1d$1(f, startT, 8);
        }
        /**
         *
         * @param bezier
         * @param tMin
         * @param tMax
         * @param sMin
         * @param {number=} sMax
         * @returns
         */
        isInfosWithBezier3(bezier, tMin, tMax, sMin, sMax) {
            const handleStartTS = (startT, startS) => {
                if (!result.some((info) => eq(info.tThis, startT) && eq(info.tOther, startS))) {
                    const f1 = (t, s) => this.tangentAt(t).dot(this.at(t).minus(bezier.at(s)));
                    const f2 = (t, s) => bezier.tangentAt(s).dot(this.at(t).minus(bezier.at(s)));
                    // f = (b1, b2, t1, t2) = b1.tangentAt(t1).dot(b1.at(t1).minus(b2.at(t2)))
                    const fdt1 = (b1, b2, t1, t2) => b1.ddt(t1).dot(b1.at(t1).minus(b2.at(t2))) +
                        b1.tangentAt(t1).squared();
                    const fdt2 = (b1, b2, t1, t2) => -b1.tangentAt(t1).dot(b2.tangentAt(t2));
                    const ni = newtonIterate2dWithDerivatives(f1, f2, startT, startS, 16, fdt1.bind(undefined, this, bezier), fdt2.bind(undefined, this, bezier), (t, s) => -fdt2(bezier, this, s, t), (t, s) => -fdt1(bezier, this, s, t));
                    result.push({ tThis: ni.x, tOther: ni.y, p: this.at(ni.x) });
                }
            };
            tMin = undefined !== tMin ? tMin : this.tMin;
            tMax = undefined !== tMax ? tMax : this.tMax;
            sMin = undefined !== sMin ? sMin : bezier.tMin;
            sMax = undefined !== sMax ? sMax : bezier.tMax;
            // stack of indices:
            const indices = [tMin, tMax, sMin, sMax];
            const result = [];
            while (indices.length) {
                const i = indices.length - 4;
                const tMin = indices[i], tMax = indices[i + 1], sMin = indices[i + 2], sMax = indices[i + 3];
                indices.length -= 4;
                const thisAABB = this.getAABB(tMin, tMax);
                const otherAABB = bezier.getAABB(sMin, sMax);
                // console.log(tMin, tMax, sMin, sMax, thisAABB.sce, otherAABB.sce)
                if (thisAABB && otherAABB && thisAABB.intersectsAABB2d(otherAABB)) {
                    const tMid = (tMin + tMax) / 2;
                    const sMid = (sMin + sMax) / 2;
                    const EPS = 0.00001;
                    if (tMax - tMin < EPS || sMax - sMin < EPS) {
                        console.log(tMin, tMax, sMin, sMax);
                        console.log(thisAABB.sce);
                        console.log(otherAABB.sce);
                        console.log(tMid, sMid);
                        handleStartTS(tMid, sMid);
                    }
                    else {
                        indices.push(tMin, tMid, sMin, sMid, tMin, tMid, sMid, sMax, tMid, tMax, sMin, sMid, tMid, tMax, sMid, sMax);
                    }
                }
            }
            return result;
        }
        isInfosWithBezier(bezier, tMin, tMax, sMin, sMax) {
            tMin = undefined !== tMin ? tMin : this.tMin;
            tMax = undefined !== tMax ? tMax : this.tMax;
            sMin = undefined !== sMin ? sMin : bezier.tMin;
            sMax = undefined !== sMax ? sMax : bezier.tMax;
            assertf(() => tMin < tMax);
            assertf(() => sMin < sMax);
            const result = [];
            const likeCurves = this.likeCurve(bezier), colinearCurves = this.isColinearTo(bezier);
            if (likeCurves || colinearCurves) {
                if (!likeCurves) {
                    // only colinear
                    // recalculate sMin and sMax so they are valid on this, from then on we can ignore bezier
                    sMin = this.pointT(bezier.at(sMin));
                    sMax = this.pointT(bezier.at(sMax));
                }
                tMin = Math.min(tMin, sMin);
                tMax = Math.max(tMax, sMax);
                const splits = fuzzyUniques(concatenated(this.roots()).filter(isFinite).concat([tMin, tMax])).sort(MINUS);
                //const aabbs = arrayFromFunction(splits.length - 1, i => this.getAABB(splits[i], splits[i + 1]))
                Array.from(combinations(splits.length - 1)).forEach(({ i, j }) => {
                    // adjacent curves can't intersect
                    if (Math.abs(i - j) > 2) {
                        // console.log(splits[i], splits[i + 1], splits[j], splits[j + 1], aabbs[i], aabbs[j])
                        //findRecursive(splits[i], splits[i + 1], splits[j], splits[j + 1], aabbs[i], aabbs[j])
                        result.push(...Curve.ispsRecursive(this, splits[i], splits[i + 1], bezier, splits[j], splits[j + 1]));
                    }
                });
            }
            else {
                return Curve.ispsRecursive(this, tMin, tMax, bezier, sMin, sMax);
            }
            return result;
        }
        selfIntersectionsInfo() {
            return this.isInfosWithBezier(this);
        }
        isInfosWithCurve(curve) {
            if (curve instanceof L3) {
                return this.isInfosWithLine(curve.anchor, curve.dir1, curve.tMin, curve.tMax);
            }
            if (curve instanceof BezierCurve) {
                return this.isInfosWithBezier(curve);
            }
            return curve
                .isInfosWithCurve(this)
                .map(({ tThis, tOther, p }) => ({ tThis: tOther, tOther: tThis, p }));
        }
        /**
         * Approximate this bezier curve with a number of circular segments. This curve is recursively split in half until
         * segments are close enough (relative error < REL_ERR in two test points) to an arc which goes through the start,
         * end and mid points of the segment.
         * @returns each EllipseCurve is circular and their tMin and tMax respectively define their start and end points.
         * @param t0 Start parameter of segment which should be approximated.
         * @param t1 End parameter of segment which should be approximated.
         * @param REL_ERROR max allowable relative error.
         * @param result Resulting circle arcs are stored in this array. Mainly used by the recursion.
         */
        circleApprox(t0 = this.tMin, t1 = this.tMax, REL_ERROR = 1 / 1024, result = []) {
            const a = this.at(t0), b = this.at(t1), tMid = (t0 + t1) / 2, pMid = this.at(tMid), abLine = L3.throughPoints(a, b);
            if (!abLine.containsPoint(pMid) &&
                between(abLine.pointT(pMid), 0, abLine.pointT(b))) {
                const arc = EllipseCurve.circleThroughPoints(a, pMid, b), arcRadius = arc.f1.length(), pTest1 = this.at(lerp$1(t0, t1, 0.25)), pTest2 = this.at(lerp$1(t0, t1, 0.75));
                if (abs$2(arc.center.distanceTo(pTest1) / arcRadius - 1) <= REL_ERROR &&
                    abs$2(arc.center.distanceTo(pTest2) / arcRadius - 1) <= REL_ERROR) {
                    result.push(arc);
                    return result;
                }
            }
            this.circleApprox(t0, tMid, REL_ERROR, result);
            this.circleApprox(tMid, t1, REL_ERROR, result);
            return result;
        }
        toNURBS() {
            return NURBS.fromBezier(this);
        }
    }
    /**
     * https://en.wikipedia.org/wiki/Cubic_function#/media/File:Graph_of_cubic_polynomial.svg
     */
    BezierCurve.EX2D = BezierCurve.graphXY(2, -3, -3, 2);
    BezierCurve.EX3D = new BezierCurve(V3.O, V(-0.1, -1, 1), V(1.1, 1, 1), V3.X);
    BezierCurve.QUARTER_CIRCLE = BezierCurve.approximateUnitArc(PI$3 / 2);
    BezierCurve.prototype.hlol = Curve.hlol++;
    BezierCurve.prototype.tIncrement = 1 / 80;

    /**
     * x² - y² = 1
     * C(t) = center + f1 * cosh(t) + f2 * sinh(t)
     */
    class HyperbolaCurve extends XiEtaCurve {
        constructor(center, f1, f2, tMin = -7, tMax = 7) {
            super(center, f1, f2, tMin, tMax);
        }
        static XYLCValid(pLC) {
            return pLC.x > 0 && eq(1, pLC.x * pLC.x - pLC.y * pLC.y);
        }
        static XYLCPointT(pLC) {
            return Math.asinh(pLC.y);
        }
        /**
         * http://www.wolframalpha.com/input/?i=x%C2%BRep-y%C2%BRep%3D1,ax%2Bby%3Dc
         * Minor empiric test shows asinh(eta) consistently gets more accurate results than atanh(eta/xi)
         */
        static intersectionUnitLine(a, b, c) {
            if (eq0(b)) {
                const sqrtVal = snap0(Math.pow(c, 2) / Math.pow(a, 2) - 1);
                if (sqrtVal < 0 || c * a < 0) {
                    return [];
                }
                else if (sqrtVal == 0) {
                    return [0];
                }
                const eta1 = Math.sqrt(sqrtVal);
                return [-Math.asinh(eta1), Math.asinh(eta1)];
            }
            else if (eq(abs$2(a), abs$2(b))) {
                if (le(c * a, 0)) {
                    return [];
                }
                const eta = (sign$1(a * b) * (Math.pow(c, 2) - Math.pow(a, 2))) / 2 / a / c;
                return [Math.asinh(eta)];
            }
            else {
                const sqrtVal = snap0(Math.pow(b, 2) * (-(Math.pow(a, 2)) + Math.pow(b, 2) + Math.pow(c, 2)));
                if (sqrtVal < 0) {
                    return [];
                }
                const xi1 = (a * c - Math.sqrt(sqrtVal)) / (Math.pow(a, 2) - Math.pow(b, 2));
                const xi2 = (a * c + Math.sqrt(sqrtVal)) / (Math.pow(a, 2) - Math.pow(b, 2));
                const eta1 = (Math.pow(b, 2) * c - a * Math.sqrt(sqrtVal)) / (b * (Math.pow(b, 2) - Math.pow(a, 2)));
                const eta2 = (Math.pow(b, 2) * c + a * Math.sqrt(sqrtVal)) / (b * (Math.pow(b, 2) - Math.pow(a, 2)));
                return [xi1 > 0 && Math.asinh(eta1), xi2 > 0 && Math.asinh(eta2)].filter((x) => x !== false);
            }
        }
        at(t) {
            assertNumbers(t);
            // = center + f1 cosh t + f2 sinh t
            return this.center
                .plus(this.f1.times(Math.cosh(t)))
                .plus(this.f2.times(Math.sinh(t)));
        }
        toString() {
            return `${this.center} + ${this.f1} * cosh(t) + ${this.f2} * sinh(t)`;
        }
        tangentAt(t) {
            assertNumbers(t);
            // = f1 sinh t + f2 cosh t
            return this.f1.times(Math.sinh(t)).plus(this.f2.times(Math.cosh(t)));
        }
        tangentAt2(xi, eta) {
            assertNumbers(xi, eta);
            // = f1 eta + f2 xi
            return this.f1.times(eta).plus(this.f2.times(xi));
        }
        ddt(t) {
            assertNumbers(t);
            return this.f1.times(Math.cosh(t)).plus(this.f2.times(Math.sinh(t)));
        }
        isColinearTo(curve) {
            if (!hasConstructor(curve, HyperbolaCurve))
                return false;
            if (!curve.center || !this.center.like(curve.center)) {
                return false;
            }
            if (this === curve) {
                return true;
            }
            const { f1: f1, f2: f2 } = this.rightAngled(), { f1: c1, f2: c2 } = curve.rightAngled();
            return (eq(f1.squared(), Math.abs(f1.dot(c1))) &&
                eq(f2.squared(), Math.abs(f2.dot(c2))));
        }
        reversed() {
            return new HyperbolaCurve(this.center, this.f1, this.f2.negated(), -this.tMax, -this.tMin);
        }
        rightAngled() {
            const f1 = this.f1, f2 = this.f2, a = f1.dot(f2), b = f2.squared() + f1.squared();
            if (eq0(a)) {
                return this;
            }
            const g1 = 2 * a, g2 = b + Math.sqrt(b * b - 4 * a * a);
            const { x1: xi, y1: eta } = intersectionUnitHyperbolaLine(g1, g2, 0);
            return new HyperbolaCurve(this.center, f1.times(xi).plus(f2.times(eta)), f1.times(eta).plus(f2.times(xi)));
        }
        eccentricity() {
            const mainAxes = this.rightAngled();
            const f1length = mainAxes.f1.length(), f2length = mainAxes.f1.length();
            const [a, b] = f1length > f2length ? [f1length, f2length] : [f2length, f1length];
            return Math.sqrt(1 + (b * b) / a / a);
        }
        roots() {
            // tangent(t) = f1 sinh t + f2 cosh t = 0
            // tangentAt2(xi, eta) = f1 eta + f2 xi = V3.O
            // xi² - eta² = 1 (by def for hyperbola)
            return arrayFromFunction(3, (dim) => {
                const a = this.f2.e(dim), b = this.f1.e(dim);
                return HyperbolaCurve.intersectionUnitLine(a, b, 0);
            });
        }
        transform4(m4) {
            const tMap = (t) => sign$1(t) * min$3(10, sqrt$1(-(1 - cosh(t)) / (1 + cosh(t))));
            // prettier-ignore
            const parabolaToUnitHyperbola = new M4(0, 1, 0, 1, 2, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 1);
            return parabola4Projection(M4.product(m4, this.matrix, parabolaToUnitHyperbola), tMap(this.tMin), tMap(this.tMax));
        }
    }
    HyperbolaCurve.XY = new HyperbolaCurve(V3.O, V3.X, V3.Y);
    HyperbolaCurve.prototype.tIncrement = PI$3 / 16;

    /**
     * A 3-dimensional line. Defined by an anchor and a normalized direction vector.
     */
    class L3 extends Curve {
        constructor(anchor, // line anchor
        dir1, // normalized line dir
        tMin = -4096, tMax = 4096) {
            super(tMin, tMax);
            this.anchor = anchor;
            this.dir1 = dir1;
            assertVectors(anchor, dir1);
            assert(dir1.hasLength(1), "dir must be unit" + dir1);
            assertf(() => !Number.isNaN(anchor.x));
        }
        isTsWithSurface(surface) {
            return surface.isTsForLine(this);
        }
        static throughPoints(anchor, b, tMin = 0, tMax) {
            const dir = b.minus(anchor);
            return new L3(anchor, dir.unit(), tMin, undefined !== tMax ? tMax : dir.length());
        }
        static anchorDirection(anchor, dir, min = 0, max = dir.length()) {
            const dir1 = dir.unit();
            return new L3(anchor, dir1, "number" == typeof min ? min : min.minus(anchor).dot(dir1), "number" == typeof max ? max : max.minus(anchor).dot(dir1));
        }
        static pointT(anchor, dir, x) {
            assertVectors(anchor, dir, x);
            return x.minus(anchor).dot(dir) / dir.squared();
        }
        static at(anchor, dir, t) {
            return anchor.plus(dir.times(t));
        }
        /**
         * Create new line which is the intersection of two planes. Throws error if planes are parallel.
         * @param plane1
         * @param plane2
         */
        static fromPlanes(plane1, plane2) {
            assertInst(P3, plane1, plane2);
            const dir = plane1.normal1.cross(plane2.normal1);
            const length = dir.length();
            if (length < 1e-10) {
                throw new Error("Parallel planes");
            }
            return plane1.intersectionWithPlane(plane2);
        }
        static containsPoint(anchor, dir, p) {
            const closestT = L3.pointT(anchor, dir, p);
            const distance = L3.at(anchor, dir, closestT).distanceTo(p);
            return eq0(distance);
        }
        roots() {
            return [[], [], []];
        }
        containsPoint(p) {
            assertVectors(p);
            const dist = this.distanceToPoint(p);
            assertNumbers(dist);
            return eq0(dist);
        }
        likeCurve(curve) {
            return (this == curve ||
                (hasConstructor(curve, L3) &&
                    this.anchor.like(curve.anchor) &&
                    this.dir1.like(curve.dir1)));
        }
        equals(obj) {
            return (this == obj ||
                (Object.getPrototypeOf(obj) == L3.prototype &&
                    this.anchor.equals(obj.anchor) &&
                    this.dir1.equals(obj.dir1)));
        }
        isColinearTo(obj) {
            return (obj instanceof L3 &&
                this.containsPoint(obj.anchor) &&
                eq(1, Math.abs(this.dir1.dot(obj.dir1))));
        }
        distanceToLine(line) {
            assertInst(L3, line);
            if (this.isParallelToLine(line)) {
                return this.distanceToPoint(line.anchor);
            }
            const dirCross1 = this.dir1.cross(line.dir1).unit();
            const anchorDiff = this.anchor.minus(line.anchor);
            return Math.abs(anchorDiff.dot(dirCross1));
        }
        distanceToPoint(x) {
            assertVectors(x);
            // See http://mathworld.wolfram.com/Point-LineDistance3-Dimensional.html
            const t = x.minus(this.anchor).dot(this.dir1);
            return this.at(t).distanceTo(x);
            //return x.minus(this.anchor).cross(x.minus(this.anchor.plus(this.dir1))).length()
        }
        asSegmentDistanceToPoint(x, sStart, sEnd) {
            let t = x.minus(this.anchor).dot(this.dir1);
            t = clamp$1(t, sStart, sEnd);
            return this.at(t).minus(x).length();
        }
        asSegmentDistanceToLine(line, sStart, sEnd) {
            assertInst(L3, line);
            const dirCross = this.dir1.cross(line.dir1);
            const div = dirCross.squared();
            if (eq0(div)) {
                return undefined;
            } // lines parallel
            const anchorDiff = line.anchor.minus(this.anchor);
            // check if distance is zero (see also L3.distanceToLine)
            if (!eq0(anchorDiff.dot(dirCross.unit()))) {
                return undefined;
            }
            let t = this.infoClosestToLine(line).t;
            t = clamp$1(t, sStart, sEnd);
            return this.at(clamp$1(t, sStart, sEnd));
        }
        at(t) {
            assertNumbers(t);
            return this.anchor.plus(this.dir1.times(t));
        }
        /**
         * This function returns lambda for a given point x
         *
         * Every point x on this line is described by the equation
         *      x = this.anchor + lambda * this.dir1 | - this.anchor
         *      x - this.anchor = lambda * this.dir1 | DOT this.dir1
         *      (x - this.anchor) DOT this.dir1 = lambda (dir1² is 1 as |dir1| == 1)
         *
         *  @param x
         *  @returns
         */
        pointT(x) {
            assertVectors(x);
            const t = x.minus(this.anchor).dot(this.dir1);
            return t;
        }
        /**
         * Returns true if the line is parallel (this.dir = line.dir || this.dir = -line.dir) to the argument.
         */
        isParallelToLine(line) {
            assertInst(L3, line);
            // we know that 1 == this.dir1.length() == line.dir1.length(), we can check for parallelity simpler than
            // isParallelTo()
            return eq(1, Math.abs(this.dir1.dot(line.dir1)));
        }
        angleToLine(line) {
            assertInst(L3, line);
            return this.dir1.angleTo(line.dir1);
        }
        /**
         *
         * @param line
         * @returns {boolean} If the distance between the lines is zero
         */
        intersectsLine(line) {
            return eq0(this.distanceToLine(line));
        }
        isInfosWithCurve(curve) {
            if (curve instanceof L3) {
                return this.isInfosWithLine(curve.anchor, curve.dir1);
            }
            return super.isInfosWithCurve(curve);
        }
        isInfosWithLine(anchorWC, dirWC) {
            const dirCross = this.dir1.cross(dirWC);
            const div = dirCross.squared();
            if (eq0(div)) {
                // lines are parallel
                return [];
            }
            const anchorDiff = anchorWC.minus(this.anchor);
            if (eq0(anchorDiff.dot(dirCross))) {
                const tThis = anchorDiff.cross(dirWC).dot(dirCross) / div;
                const tOther = anchorDiff.cross(this.dir1).dot(dirCross) / div;
                const p = this.at(tThis);
                return [{ tThis: tThis, tOther: tOther, p: p }];
            }
            return [];
        }
        isInfoWithLine(line) {
            // todo infos?
            assertInst(L3, line);
            const dirCross = this.dir1.cross(line.dir1);
            const div = dirCross.squared();
            if (eq0(div)) {
                return undefined;
            } // lines parallel
            const anchorDiff = line.anchor.minus(this.anchor);
            // check if distance is zero (see also L3.distanceToLine)
            if (!eq0(anchorDiff.dot(dirCross.unit()))) {
                return undefined;
            }
            const t = anchorDiff.cross(line.dir1).dot(dirCross) / div;
            return this.at(t);
        }
        /**
         * returns s and t with this.at(s) == line.at(t)
         */
        intersectionLineST(line) {
            // the two points on two lines the closest two each other are the ones whose
            // connecting
            // TODO Where does this come from?
            // TODO: return value when no IS?
            assertInst(L3, line);
            const dirCross = this.dir1.cross(line.dir1);
            const div = dirCross.squared();
            const anchorDiff = line.anchor.minus(this.anchor);
            const s = anchorDiff.cross(this.dir1).dot(dirCross) / div;
            const t = anchorDiff.cross(line.dir1).dot(dirCross) / div;
            return { s: s, t: t };
            // console.log(segmentIntersectsRay, a, b, "ab", ab, "p", p, "dir", dir, s > 0 && t / div >= 0 && t / div <= 1,
            // "s", s, "t", t, "div", div)
        }
        ddt() {
            return V3.O;
        }
        getConstructorParameters() {
            return [this.anchor, this.dir1];
        }
        closestTToPoint(p) {
            // similar logic as pointT; we project the vector (anchor -> p) onto dir1, then add anchor back to it
            const nearestT = p.minus(this.anchor).dot(this.dir1);
            return nearestT;
        }
        infoClosestToLine(line) {
            /*
                 line = a + s*b
                 this = c + t*d
        
                 (this - line) * b = 0
                 (this - line) * d = 0
        
                 (a + s*b - c - t*d) * b = 0
                 (a + s*b - c - t*d) * d = 0
        
                 (a - c + s*b - t*d) * b = 0
                 (a - c + s*b - t*d) * d = 0
        
                 (a - c)*b + (s*b - t*d)*b = 0
                 (a - c)*d + (s*b - t*d)*d = 0
        
                 (a - c)*b + s*(b*b) - t*(d*b) = 0
                 (a - c)*d + s*(b*d) - t*(d*d) = 0
        
                 s = (t*(d*b) - (a - c)*b) / (b*b)
                 =>
                 (a - c)*d + (t*(d*b) - (a - c)*b) / (b*b)*(b*d) - t*(d*d) = 0 | * (b*b)
                 (a - c)*d * (b*b) + (t*(d*b) - (a - c)*b)*(b*d) - t*(d*d) * (b*b) = 0
                 (a - c)*d * (b*b) + t*(d*b)*(b*d) - (a - c)*b*(b*d) - t*(d*d) * (b*b) = 0
                 t = ((a - c)*b*(b*d) - (a - c)*d * (b*b)) / ((d*b)*(b*d) - (d*d) * (b*b))
                 */
            if (this.isParallelToLine(line)) {
                return { t: NaN, s: NaN, distance: this.distanceToLine(line) };
            }
            const a = line.anchor, b = line.dir1, c = this.anchor, d = this.dir1;
            const bd = b.dot(d), bb = b.squared(), dd = d.squared(), ca = a.minus(c), divisor = bd * bd - dd * bb;
            const t = (ca.dot(b) * bd - ca.dot(d) * bb) / divisor;
            const s = (ca.dot(b) * dd - ca.dot(d) * bd) / divisor;
            return {
                t: t,
                s: s,
                closest: this.at(t),
                closest2: line.at(s),
                distance: this.at(t).distanceTo(line.at(s)),
            };
        }
        intersectionWithPlane(plane) {
            // plane: plane.normal1 * p = plane.w
            // line: p=line.point + lambda * line.dir1
            const lambda = (plane.w - plane.normal1.dot(this.anchor)) / plane.normal1.dot(this.dir1);
            const point = this.anchor.plus(this.dir1.times(lambda));
            return point;
        }
        tangentAt() {
            return this.dir1;
        }
        isTWithPlane(plane) {
            // plane: plane.normal1 * p = plane.w
            // line: p=line.point + lambda * line.dir1
            const div = plane.normal1.dot(this.dir1);
            if (eq0(div))
                return NaN;
            const lambda = (plane.w - plane.normal1.dot(this.anchor)) / div;
            return lambda;
        }
        reversed() {
            return new L3(this.anchor, this.dir1.negated(), -this.tMax, -this.tMin);
        }
        isTsWithPlane(planeWC) {
            const t = this.isTWithPlane(planeWC);
            return isNaN(t) ? [] : [t];
        }
        flipped() {
            return new L3(this.anchor, this.dir1.negated());
        }
        transform(m4) {
            const newAnchor = m4.transformPoint(this.anchor);
            const newDir = m4.transformVector(this.dir1);
            return new L3(newAnchor, newDir.unit(), this.tMin * newDir.length(), this.tMax * newDir.length());
        }
        transform4(m4) {
            const vanishingPlane = P3.vanishingPlane(m4);
            if (!vanishingPlane)
                return this.transform(m4);
            const pMin = this.at(this.tMin);
            const pMax = this.at(this.tMax);
            if (le(vanishingPlane.distanceToPointSigned(pMin), 0) ||
                le(vanishingPlane.distanceToPointSigned(pMax), 0)) {
                throw new Error("line must be in front of vanishingPlane in [tMin, tMax]");
            }
            const anchor = lt(0, vanishingPlane.distanceToPointSigned(this.anchor))
                ? this.anchor
                : this.at((this.tMin + this.tMax) / 2);
            const transformedAnchor = m4.timesVector(VV(anchor.x, anchor.y, anchor.z, 1));
            const transformedVector = m4.timesVector(VV(this.dir1.x, this.dir1.y, this.dir1.z, 0));
            const newDir = transformedVector
                .times(transformedAnchor.w)
                .minus(transformedAnchor.times(transformedVector.w))
                .V3();
            const newAnchor = transformedAnchor.p3();
            return L3.anchorDirection(newAnchor, newDir, m4.transformPoint(pMin), m4.transformPoint(pMax));
        }
        hashCode() {
            return this.anchor.hashCode() * 31 + this.dir1.hashCode();
        }
    }
    L3.X = new L3(V3.O, V3.X);
    L3.Y = new L3(V3.O, V3.Y);
    L3.Z = new L3(V3.O, V3.Z);
    L3.prototype.hlol = Curve.hlol++;
    L3.prototype.tIncrement = 256;

    class PICurve extends ImplicitCurve {
        constructor(points, tangents, parametricSurface, implicitSurface, pmPoints, pmTangents, stepSize, dir = 1, generator, tMin, tMax) {
            super(points, tangents, dir, generator, tMin, tMax);
            this.parametricSurface = parametricSurface;
            this.implicitSurface = implicitSurface;
            this.pmPoints = pmPoints;
            this.pmTangents = pmTangents;
            this.stepSize = stepSize;
            assert(Array.isArray(pmPoints));
            assert(dir == 1);
            assert(stepSize <= 1);
            const pf = parametricSurface.pUVFunc();
            const dpdu = parametricSurface.dpdu();
            const dpdv = parametricSurface.dpdv();
            const didp = implicitSurface.didp.bind(implicitSurface);
            this.didu = (u, v) => didp(pf(u, v)).dot(dpdu(u, v));
            this.didv = (u, v) => didp(pf(u, v)).dot(dpdv(u, v));
            for (let i = 0; i < points.length - 1; i++) {
                assert(!points[i].equals(points[i + 1]));
                //assert(parametricSurface.pUV(pmPoints[i].x, pmPoints[i].y).equals(points[i]))
            }
            {
                const ps = this.parametricSurface;
                const is = implicitSurface;
                const pFunc = ps.pUVFunc(), iFunc = is.implicitFunction();
                const dpdu = ps.dpdu();
                const dpdv = ps.dpdv();
                const didp = is.didp.bind(is);
                const mf = MathFunctionR2R.forFFxFy((x, y) => iFunc(pFunc(x, y)), (u, v) => didp(pFunc(u, v)).dot(dpdu(u, v)), (u, v) => didp(pFunc(u, v)).dot(dpdv(u, v)));
                const { points } = followAlgorithm2d(mf, this.pmPoints[0], stepSize, ps, (u, v) => is.containsPoint(pFunc(u, v)), getLast(this.pmPoints), this.pmTangents[0]);
                if (points.length !== this.points.length) {
                    followAlgorithm2d(mf, this.pmPoints[0], stepSize, ps, (u, v) => is.containsPoint(pFunc(u, v)), getLast(this.pmPoints), this.pmTangents[0]);
                }
                assert(points.length == this.points.length, points.length, this.points.length);
            }
        }
        static forParametricStartEnd(ps, is, pmStart, pmEnd, stepSize = 0.02, startPMTangent, tMin, tMax) {
            const pFunc = ps.pUVFunc(), iFunc = is.implicitFunction();
            const dpdu = ps.dpdu();
            const dpdv = ps.dpdv();
            const didp = is.didp.bind(is);
            const mf = MathFunctionR2R.forFFxFy((x, y) => iFunc(pFunc(x, y)), (u, v) => didp(pFunc(u, v)).dot(dpdu(u, v)), (u, v) => didp(pFunc(u, v)).dot(dpdv(u, v)));
            const { points, tangents } = followAlgorithm2d(mf, pmStart, stepSize, ps, (u, v) => is.containsPoint(pFunc(u, v)), pmEnd, startPMTangent);
            return PICurve.forParametricPointsTangents(ps, is, points, tangents, stepSize, 1, tMin, tMax);
        }
        static forStartEnd(ps, is, start, end, stepSize = 0.02, startTangent, min, max) {
            const startPM = ps.uvP(start);
            const dpdu = ps.dpdu()(startPM.x, startPM.y), dpdv = ps.dpdv()(startPM.x, startPM.y);
            const startPMTangent = startTangent &&
                M4.forSys(dpdu, dpdv).inversed().transformVector(startTangent);
            // assert(dpdu.times(startPMTangent.x).plus(dpdv.times(startPMTangent.y)).like(startTangent))
            const curve = PICurve.forParametricStartEnd(ps, is, startPM, ps.uvP(end), stepSize, startPMTangent);
            return curve.withBounds(min && curve.pointT(min), max && curve.pointT(max));
        }
        static forParametricPointsTangents(ps, is, pmPoints, pmTangents, stepSize, dir = 1, tMin, tMax) {
            const pFunc = ps.pUVFunc(), dpdu = ps.dpdu();
            const dpdv = ps.dpdv();
            const points = pmPoints.map(({ x, y }) => pFunc(x, y));
            const tangents = pmPoints.map(({ x: u, y: v }, i) => {
                const ds = dpdu(u, v);
                const dt = dpdv(u, v);
                return ds.times(pmTangents[i].x).plus(dt.times(pmTangents[i].y));
                //const p = points[i]
                //return cs.normalP(p).cross(ses.normalP(p))
                //	.toLength(ds.times(pmTangents[i].x).plus(dt.times(pmTangents[i].y)).length())
            });
            return new PICurve(points, tangents, ps, is, pmPoints, pmTangents, stepSize, dir, undefined, tMin, tMax);
        }
        getConstructorParameters() {
            return [
                this.points,
                this.tangents,
                this.parametricSurface,
                this.implicitSurface,
                this.pmPoints,
                this.pmTangents,
                this.stepSize,
                this.dir,
                this.generator,
            ];
        }
        implicitCurve() {
            const pF = this.parametricSurface.pUVFunc();
            const iF = this.implicitSurface.implicitFunction();
            return (u, v) => iF(pF(u, v));
        }
        isColinearTo(curve) {
            if (curve instanceof PICurve) {
                if (this.equals(curve)) {
                    return true;
                }
                if (this.parametricSurface.isCoplanarTo(curve.parametricSurface) &&
                    this.implicitSurface.isCoplanarTo(curve.implicitSurface)) ;
                return false;
            }
            else {
                return false;
            }
        }
        containsPoint(p) {
            assertVectors(p);
            const t = this.pointT(p);
            return !isNaN(t) && this.isValidT(t);
        }
        equals(obj) {
            return (Object.getPrototypeOf(obj) == PICurve.prototype &&
                this.parametricSurface.equals(obj.parametricSurface) &&
                this.implicitSurface.equals(obj.implicitSurface) &&
                this.points[0].equals(obj.points[0]) &&
                this.tangents[0].equals(obj.tangents[0]) &&
                this.dir === obj.dir);
        }
        hashCode() {
            let hashCode = 0;
            hashCode = hashCode * 31 + this.parametricSurface.hashCode();
            hashCode = hashCode * 31 + this.implicitSurface.hashCode();
            hashCode = hashCode * 31 + this.points[0].hashCode();
            hashCode = hashCode * 31 + this.tangents[0].hashCode();
            return hashCode | 0;
        }
        tangentP(point) {
            assertVectors(point);
            assert(this.containsPoint(point), "this.containsPoint(point)");
            const t = this.pointT(point);
            return this.tangentAt(t);
        }
        tangentAt(t) {
            assert(!isNaN(t));
            if (0 === t % 1)
                return this.tangents[t];
            const uv = this.uvT(t);
            const uvTangent = new V3(-this.didv(uv.x, uv.y), this.didu(uv.x, uv.y), 0).toLength(this.stepSize);
            const du = this.parametricSurface.dpdu()(uv.x, uv.y);
            const dv = this.parametricSurface.dpdv()(uv.x, uv.y);
            return du.times(uvTangent.x).plus(dv.times(uvTangent.y));
        }
        at(t) {
            assert(!isNaN(t));
            if (0 === t % 1)
                return this.points[t];
            const startParams = V3.lerp(this.pmPoints[floor$1(t)], this.pmPoints[ceil(t)], t % 1);
            return this.closestPointToParams(startParams);
        }
        uvT(t) {
            assert(!isNaN(t));
            //TODO: use elerp
            if (0 === t % 1)
                return this.pmPoints[t];
            const startParams = V3.lerp(this.pmPoints[floor$1(t)], this.pmPoints[ceil(t)], t % 1);
            return curvePoint(this.implicitCurve(), startParams, this.didu, this.didv);
        }
        closestTToPoint(p, tStart) {
            // TODO
            return 0;
        }
        closestPointToParams(startUV) {
            const pointParams = curvePoint(this.implicitCurve(), startUV, this.didu, this.didv);
            return this.parametricSurface.pUVFunc()(pointParams.x, pointParams.y);
        }
        isTsWithSurface(surface) {
            if (surface instanceof EllipsoidSurface) {
                const pS = this.parametricSurface, iS = this.implicitSurface;
                if (pS instanceof ProjectedCurveSurface &&
                    iS instanceof EllipsoidSurface) {
                    const iscs = iS.isCurvesWithSurface(surface);
                    const points = iscs.flatMap((isc) => isc.isTsWithSurface(pS).map((t) => isc.at(t)));
                    const ts = fuzzyUniques(points.map((p) => this.pointT(p)));
                    return ts.filter((t) => !isNaN(t) && this.isValidT(t));
                }
            }
            else if (ImplicitSurface.is(surface)) {
                const result = [];
                const iF = surface.implicitFunction();
                let prevSignedDistance = iF(this.points[0]);
                for (let i = 1; i < this.points.length; i++) {
                    const point = this.points[i];
                    const signedDistance = iF(point);
                    if (prevSignedDistance * signedDistance <= 0) {
                        const pF = this.parametricSurface.pUVFunc();
                        const dpdu = this.parametricSurface.dpdu();
                        const dpdv = this.parametricSurface.dpdv();
                        const startUV = this.pmPoints[abs$2(prevSignedDistance) < abs$2(signedDistance) ? i - 1 : i];
                        const isUV = newtonIterate2dWithDerivatives(this.implicitCurve(), (u, v) => iF(pF(u, v)), startUV.x, startUV.y, 4, this.didu, this.didv, (u, v) => dpdu(u, v).dot(surface.didp(pF(u, v))), (u, v) => dpdv(u, v).dot(surface.didp(pF(u, v))));
                        result.push(this.pointT(this.parametricSurface.pUV(isUV.x, isUV.y)));
                    }
                    prevSignedDistance = signedDistance;
                }
                return result;
            }
            throw new Error();
        }
        isTsWithPlane(planeWC) {
            return this.isTsWithSurface(new PlaneSurface(planeWC));
            // version which intersects the plane with the defining surfaces of this PICurve, but this causes
            // issues when they are PICurves too:
            // assertInst(P3, planeWC)
            // const ps = this.parametricSurface,
            // 	is = this.implicitSurface
            // const pscs = ps.isCurvesWithPlane(planeWC)
            // const iscs = is.isCurvesWithPlane(planeWC)
            // const infos = iscs.flatMap(isc => pscs.flatMap(psc => isc.isInfosWithCurve(psc)))
            // const ts = fuzzyUniques(infos.map(info => this.pointT(info.p)))
            // return ts.filter(t => !isNaN(t) && this.isValidT(t))
        }
        pointT(p) {
            assertVectors(p);
            if (!this.parametricSurface.containsPoint(p) ||
                !this.implicitSurface.containsPoint(p)) {
                return NaN;
            }
            const pmPoint = this.parametricSurface.uvPFunc()(p);
            const ps = this.points, pmps = this.pmPoints;
            let t = 0, pmDistance = pmPoint.distanceTo(pmps[0]);
            while (pmDistance > abs$2(this.stepSize) && t < ps.length - 1) {
                // TODO -1?
                //console.log(t, pmps[t].$, pmDistance)
                t = min$3(pmps.length - 1, t + max$3(1, Math.round(pmDistance / abs$2(this.stepSize) / 2 / 2)));
                pmDistance = pmPoint.distanceTo(pmps[t]);
            }
            // if (t < this.pmPoints.length - 1 && pmDistance > pmPoint.distanceTo(pmps[t + 1])) {
            //     t++
            // }
            if (pmDistance > abs$2(this.stepSize) * 1.1) {
                // p is not on this curve
                return NaN;
            }
            if (t == ps.length - 1) {
                t--;
            }
            if (ps[t].like(p))
                return t;
            if (ps[t + 1].like(p))
                return t + 1;
            const startT = withMax$1(arrayRange(floor$1(this.tMin), ceil(this.tMax), 1), (t) => -pmPoint.distanceTo(pmps[t]));
            if (undefined === startT)
                throw new Error();
            if (ps[startT].like(p))
                return startT;
            //const [a, b] = 0 === startT
            //    ? [0, 1]
            //    : this.points.length - 1 === startT
            //        ? [startT - 1, startT]
            //        : pmPoint.distanceTo(pmps[startT - 1]) < pmPoint.distanceTo(pmps[startT + 1])
            //            ? [startT - 1, startT]
            //            : [startT, startT + 1]
            const a = max$3(0, startT - 1), b = min$3(this.points.length - 1, startT + 1);
            const tangent = this.tangentAt(startT);
            const f = (t) => this.at(clamp$1(t, 0, this.points.length - 1))
                .to(p)
                .dot(tangent);
            // const df = (t: number) => -this.tangentAt(clamp(t, 0, this.points.length - 1)).dot(tangent)
            //checkDerivate(f, df, 0, this.points.length - 2, 3)
            // 8 steps necessary because df can currently be way off
            t = bisect$1(f, a, b, 32);
            if (!isFinite(t) || this.at(t).distanceTo(p) > abs$2(this.stepSize)) {
                return NaN;
            }
            return t;
        }
        transform(m4) {
            const dirFactor = m4.isMirroring() ? -1 : 1;
            return PICurve.forStartEnd(this.parametricSurface.transform(m4), this.implicitSurface.transform(m4), m4.transformPoint(this.points[0]), m4.transformPoint(getLast(this.points)), this.stepSize * dirFactor, m4.transformVector(this.tangents[0]), m4.transformPoint(this.at(this.tMin)), m4.transformPoint(this.at(this.tMax)));
            //return PICurve.forParametricStartEnd(
            //	this.parametricSurface.transform(m4),
            //	this.implicitSurface.transform(m4),
            //	this.pmPoints[0],
            //	getLast(this.pmPoints),
            //	this.stepSize,
            //	this.dir,
            //	this.tMin,
            //	this.tMax)
            // TODO: pass transformed points?
            //return new PICurve(
            //	m4.transformedPoints(this.points),
            //	m4.transformedVectors(this.tangents),
            //    this.parametricSurface.transform(m4),
            //   this.implicitSurface.transform(m4),
            //   this.pmPoints,
            //   this.pmTangents,
            //this.stepSize,
            //   this.dir,
            //this.generator,
            //this.tMin, this.tMax)
        }
        roots() {
            const allTs = arrayRange(0, this.points.length);
            return [allTs, allTs, allTs];
        }
        isInfosWithLine(anchorWC, dirWC, tMin, tMax, lineMin, lineMax) {
            return surfaceIsICurveIsInfosWithLine.call(this, this.implicitSurface, this.parametricSurface, anchorWC, dirWC, tMin, tMax, lineMin, lineMax);
        }
        toSource(rounder = (x) => x) {
            const result = callsce("PICurve.forParametricStartEnd", this.parametricSurface, this.implicitSurface, this.pmPoints[0], getLast(this.pmPoints), this.stepSize, this.pmTangents[0], this.tMin, this.tMax);
            return result;
        }
    }
    PICurve.prototype.tIncrement = 1;

    class PPCurve extends ImplicitCurve {
        constructor(points, tangents, parametricSurface1, parametricSurface2, st1s, pmTangents, stepSize, dir = 1, generator, tMin, tMax) {
            super(points, tangents, dir, generator, tMin, tMax);
            this.parametricSurface1 = parametricSurface1;
            this.parametricSurface2 = parametricSurface2;
            this.st1s = st1s;
            this.pmTangents = pmTangents;
            this.stepSize = stepSize;
            assert(ParametricSurface.is(parametricSurface1));
            assert(ParametricSurface.is(parametricSurface2));
            assert(Array.isArray(st1s));
            assert(dir == 1);
            assert(stepSize <= 1);
        }
        at(t) {
            assert(!isNaN(t));
            if (0 === t % 1)
                return this.points[t];
            const startPoint = V3.lerp(this.points[floor$1(t)], this.points[ceil(t)], t % 1);
            return curvePointPP(this.parametricSurface1, this.parametricSurface2, startPoint).p;
        }
        isColinearTo(curve) {
            if (curve instanceof PPCurve) {
                if (this.equals(curve)) {
                    return true;
                }
                if (this.parametricSurface1.isCoplanarTo(curve.parametricSurface1) &&
                    this.parametricSurface1.isCoplanarTo(curve.parametricSurface2)) ;
                return false;
            }
            else {
                return false;
            }
        }
        containsPoint(p) {
            assertVectors(p);
            // TODO: wrong, as there could be another curve
            return (this.parametricSurface1.containsPoint(p) &&
                this.parametricSurface2.containsPoint(p) &&
                !isNaN(this.pointT(p)));
        }
        rootPoints() {
            const pF1 = this.parametricSurface1.pUVFunc();
            const pF2 = this.parametricSurface2.pUVFunc();
            const pN1 = this.parametricSurface1.normalUVFunc();
            const pN2 = this.parametricSurface2.normalUVFunc();
            const rootsApprox = this.rootsApprox();
            const results = [[], [], []];
            for (let dim = 0; dim < 3; dim++) {
                for (let i = 0; i < rootsApprox[dim].length; i++) {
                    const lambda = rootsApprox[dim][i];
                    const p = this.at(lambda);
                    assert(this.parametricSurface1.containsPoint(p));
                    const pp1 = this.parametricSurface1.uvP(p);
                    const { x: u, y: v } = this.parametricSurface2.uvP(p);
                    const startValues = [pp1.x, pp1.y, u, v];
                    function f(vals) {
                        const [u1, v1, u2, v2] = vals;
                        const diff = pF1(u1, v1).minus(pF2(u2, v2));
                        const n1 = pN1(u1, v1);
                        const n2 = pN2(u2, v2);
                        const tangent = n1.cross(n2);
                        return [diff.x, diff.y, diff.z, tangent.e(dim)];
                    }
                    const pps = newtonIterate(f, startValues, 8);
                    // assert(pF1(pps[0], pps[1]).like(pF2(pps[2], pps[3])),
                    // 	pF1(pps[0], pps[1]).sce + pF2(pps[2], pps[3]).sce)
                    const result = pF1(pps[0], pps[1]);
                    results[dim].push(result);
                }
            }
            return results;
        }
        roots() {
            return this.rootPoints().map((ps) => ps.map((p) => this.pointT(p)));
        }
        pointTangent(pWC) {
            assertVectors(pWC);
            assert(this.containsPoint(pWC), "this.containsPoint(pWC)");
            const n1 = this.parametricSurface1.normalP(pWC);
            const n2 = this.parametricSurface2.normalP(pWC);
            return n1.cross(n2);
        }
        transform(m4) {
            return new PPCurve(m4.transformedPoints(this.points), m4.transformedVectors(this.tangents), this.parametricSurface1.transform(m4), this.parametricSurface2.transform(m4), this.st1s, undefined, this.stepSize, this.dir, undefined);
        }
        toSource() {
            return callsce("PPCurve.forStartEnd", this.parametricSurface1, this.parametricSurface2, this.points[0], getLast(this.points), this.stepSize);
        }
        static forStartEnd(ps1, ps2, startPoint, end, stepSize = 0.02) {
            const { points, tangents, st1s } = followAlgorithmPP(ps1, ps2, startPoint, stepSize);
            return new PPCurve(points, tangents, ps1, ps2, st1s, undefined, stepSize, 1);
        }
        isInfosWithLine(anchorWC, dirWC, tMin, tMax, lineMin, lineMax) {
            return surfaceIsICurveIsInfosWithLine.call(this, this.parametricSurface1, this.parametricSurface2, anchorWC, dirWC, tMin, tMax, lineMin, lineMax);
        }
        isTsWithSurface(surface) {
            if (ImplicitSurface.is(surface)) {
                const result = [];
                const iF = surface.implicitFunction();
                const pUV1 = this.parametricSurface1.pUVFunc();
                const pUV2 = this.parametricSurface2.pUVFunc();
                let prevSignedDistance = iF(this.points[0]);
                for (let i = 1; i < this.points.length; i++) {
                    const point = this.points[i];
                    const signedDistance = iF(point);
                    if (prevSignedDistance * signedDistance <= 0) {
                        const startIndex = abs$2(prevSignedDistance) < abs$2(signedDistance) ? i - 1 : i;
                        const startPoint = this.points[startIndex];
                        const startUV1 = this.st1s[startIndex];
                        const startUV2 = this.parametricSurface2.uvP(startPoint);
                        const isSTUV = newtonIterate(([u1, v1, u2, v2]) => {
                            const ps1p = pUV1(u1, v1);
                            const ps2p = pUV2(u2, v2);
                            return [...ps1p.to(ps2p), iF(ps1p)];
                        }, [startUV1.x, startUV1.y, startUV2.x, startUV2.y]);
                        result.push(this.pointT(this.parametricSurface1.pUV(isSTUV[0], isSTUV[1])));
                    }
                    prevSignedDistance = signedDistance;
                }
                return result;
            }
            throw new Error("Method not implemented.");
        }
        isTsWithPlane(planeWC) {
            return this.isTsWithSurface(new PlaneSurface(planeWC));
        }
    }

    /**
     * eta = xi²
     */
    class ParabolaCurve extends XiEtaCurve {
        constructor(center, f1, f2, tMin = -10, tMax = 10) {
            super(center, f1, f2, tMin, tMax);
        }
        static eccentricity() {
            return 1;
        }
        static unitIsInfosWithLine(anchorLC, dirLC, anchorWC, dirWC) {
            // para: x² = y
            // line(t) = anchor + t dir
            // (ax + t dx)² = ay + t dy
            // ax² + t ax dx + t² dx² = ay + t dy
            // t² dx² + t (ax dx + dy) + ay² + ay = 0
            const pqDiv = Math.pow(dirLC.x, 2);
            const lineTs = pqFormula((anchorLC.x * dirLC.x + dirLC.y) / pqDiv, (Math.pow(anchorLC.x, 2) + anchorLC.y) / pqDiv);
            return lineTs
                .filter((tOther) => le(0, anchorLC.y + tOther * dirLC.y))
                .map((tOther) => ({
                tThis: dirLC.x * tOther + anchorLC.x,
                tOther: tOther,
                p: L3.at(anchorWC, dirWC, tOther),
            }));
        }
        static intersectionUnitLine(a, b, c) {
            /*
                 solve system (5)/(6)
                 g1 * xi + g2 * eta = g3 (6)
                 g1 * xi + g2 * xi * xi = g3
                 xi² + xi * g1/g2 - g3/g2 = 0
                 */
            return pqFormula(a / b, -c / b);
        }
        static XYLCValid(pLC) {
            return eq(Math.pow(pLC.x, 2), pLC.y);
        }
        static XYLCPointT(pLC) {
            return pLC.x;
        }
        static quadratic(a, b, c) {
            // (1 - t)² a + 2 * t * (1 - t) b + t² c
            // (1 -2t +t²)a + (2t -2t²) b + t² c
            // = t²(a - 2b + c) + t (-2a + 2b) + a
            // (2t - 2) a + (1 - 2t) b + 2t c = t(2a + 2b - 2c) - 2a + b
            // 2 a + -2 b + 2 c
            const f2 = a.plus(c).minus(b.times(2));
            const f1 = b.minus(a).times(2);
            const center = a;
            return new ParabolaCurve(center, f1, f2, 0, 1);
        }
        at(t) {
            // center + f1 t + f2 t²
            return this.center.plus(this.f1.times(t)).plus(this.f2.times(t * t));
        }
        tangentAt(t) {
            assertNumbers(t);
            // f1 + f2 2 t
            return this.f1.plus(this.f2.times(2 * t));
        }
        ddt(t) {
            assertNumbers(t);
            return this.f2.times(2);
        }
        tangentAt2(xi, eta) {
            assertNumbers(xi, eta);
            return this.f1.plus(this.f2.times(2 * eta));
        }
        reversed() {
            return new this.constructor(this.center, this.f1.negated(), this.f2, -this.tMax, -this.tMin);
        }
        /**
         * tangent: f1 + 2 * t * f2 = 0
         * t = -f1 / 2 / f2 (for individual dimensions)
         */
        roots() {
            const dimRoots = (dim) => eq0(this.f2.e(dim)) ? [] : [-this.f1.e(dim) / 2 / this.f2.e(dim)];
            return arrayFromFunction(3, dimRoots);
        }
        isColinearTo(curve) {
            if (!hasConstructor(curve, ParabolaCurve))
                return false;
            const thisRA = this.rightAngled(), curveRA = curve.rightAngled();
            return (thisRA.center.like(curveRA.center) &&
                thisRA.f2.like(curveRA.f2) &&
                thisRA.f1.likeOrReversed(curveRA.f1));
        }
        rightAngled() {
            // looking for vertex of parabola
            // this is the point where the tangent is perpendicular to the main axis (f2)
            // tangent = f1 + f2 * 2 * t0
            // f2 DOT (f1 + f2 * 2 * t0) == 0
            // f1 DOT f2 + f2 DOT f2 * 2 * t0 == 0
            // t0 == -(f1 DOT f2) / (f2 DOT f2 * 2)
            const f1 = this.f1, f2 = this.f2;
            const f1DOTf2 = f1.dot(f2);
            if (eq0(f1DOTf2) && f1.hasLength(1)) {
                return this;
            }
            const t0 = -f1DOTf2 / f2.squared() / 2;
            // we need to rearange tMin/tMax
            // tMin' = pointT(at(tMin)) =
            const raCenter = this.at(t0);
            const raF1 = this.tangentAt(t0), raF1Length = raF1.length(), raF11 = raF1.unit();
            const repos = (t) => this.at(t).minus(raCenter).dot(raF11);
            return new ParabolaCurve(raCenter, raF11, f2.div(Math.pow(raF1Length, 2)), repos(this.tMin), repos(this.tMax));
        }
        arcLength(startT, endT) {
            let f1 = this.f1;
            const f2 = this.f2;
            const f1DOTf2 = f1.dot(f2);
            let t0 = 0;
            if (!eq0(f1DOTf2)) {
                t0 = -f1DOTf2 / f2.squared() / 2;
                f1 = f1.plus(f2.times(2 * t0));
            }
            const f1Length = f1.length();
            const a = f2.length() / f1Length;
            function F(x) {
                return (Math.asinh(a * 2 * x) / 4 / a +
                    (x * Math.sqrt(1 + a * a * 4 * x * x)) / 2);
            }
            return f1Length * (F(endT - t0) - F(startT - t0));
        }
        transform4(m4) {
            return parabola4Projection(this.matrix.transform(m4), this.tMin, this.tMax);
        }
        asBezier() {
            return BezierCurve.quadratic(this.at(-1), new L3(this.at(-1), this.tangentAt(-1).unit()).isInfoWithLine(new L3(this.at(1), this.tangentAt(1).unit())), this.at(1));
        }
        /**
         * Returns new ParabolaCurve that has its center point at this.at(t0)
         * @param t0
         */
        recenter(t0) {
            // this.at(t) = f2 t² + f1 t + center
            // c2.at(t) = f2 (t + t0)² + f1 (t + t0) + center
            // c2.at(t) = f2 (t² + 2 t0 t + t0²) + f1 (t + t0) + center
            // c2.at(t) = f2 t² + (f1 + 2 f2 t0) t + center + f2 t0² + f1 t0
            return new ParabolaCurve(this.at(t0), this.f1.plus(this.f2.times(2 * t0)), this.f2);
        }
    }
    ParabolaCurve.XY = new ParabolaCurve(V3.O, V3.X, V3.Y);
    ParabolaCurve.YZ = new ParabolaCurve(V3.O, V3.Y, V3.Z);
    ParabolaCurve.ZX = new ParabolaCurve(V3.O, V3.Z, V3.X);
    ParabolaCurve.prototype.tIncrement = 1 / 32;

    class EllipseCurve extends XiEtaCurve {
        constructor(center, f1, f2, tMin = 0, tMax = PI$3) {
            super(center, f1, f2, tMin, tMax);
            assert(-PI$3 <= this.tMin && this.tMin < PI$3);
            assert(-PI$3 < this.tMax && this.tMax <= PI$3);
        }
        static andFixTs(center, f1, f2, tMin = 0, tMax = PI$3) {
            if (-PI$3 <= tMin && tMax <= PI$3) {
                return new EllipseCurve(center, f1, f2, tMin, tMax);
            }
            if (0 <= tMin && tMax <= TAU) {
                return new EllipseCurve(center, f1.negated(), f2.negated(), tMin - PI$3, tMax - PI$3);
            }
            if (-TAU <= tMin && tMax <= 0) {
                return new EllipseCurve(center, f1.negated(), f2.negated(), tMin + PI$3, tMax + PI$3);
            }
            throw new Error("Method not implemented.");
        }
        static XYLCValid(pLC) {
            const { x, y } = pLC;
            return eq0(Math.pow(x, 2) + Math.pow(y, 2) - 1);
        }
        static XYLCPointT(pLC, tMin, tMax) {
            assertNumbers(tMin, tMax);
            const t = atan2$1(pLC.y, pLC.x);
            const lowSplitter = lerp$1(tMin, tMax - TAU, 0.5);
            if (t < lowSplitter) {
                return t + TAU;
            }
            const highSplitter = lerp$1(tMax, tMin + TAU, 0.5);
            if (t > highSplitter) {
                return t - TAU;
            }
            return t;
        }
        static intersectionUnitLine(a, b, c, tMin, tMax) {
            const isLC = intersectionUnitCircleLine2(a, b, c);
            const result = [];
            for (const [xi, eta] of isLC) {
                const t = EllipseCurve.XYLCPointT(new V3(xi, eta, 0), tMin, tMax);
                fuzzyBetween(t, tMin, tMax) && result.push(t);
            }
            return result;
        }
        static unitIsInfosWithLine(anchorLC, dirLC, anchorWC, dirWC, tMin, tMax) {
            // ell: x² + y² = 1 = p²
            // line(t) = anchor + t dir
            // anchor² - 1 + 2 t dir anchor + t² dir² = 0
            const pqDiv = dirLC.squared();
            const lineTs = pqFormula((2 * dirLC.dot(anchorLC)) / pqDiv, (anchorLC.squared() - 1) / pqDiv);
            return lineTs
                .filter((tOther) => le(0, anchorLC.y + tOther * dirLC.y))
                .map((tOther) => ({
                tThis: EllipseCurve.XYLCPointT(dirLC.times(tOther).plus(anchorLC), tMin, tMax),
                tOther: tOther,
                p: L3.at(anchorWC, dirWC, tOther),
            }));
        }
        /**
         * Returns a new EllipseCurve representing a circle parallel to the XY-plane.`
         */
        static semicircle(radius, center = V3.O, tMin, tMax) {
            return new EllipseCurve(center, new V3(radius, 0, 0), new V3(0, radius, 0), tMin, tMax);
        }
        static circleForCenter2P(center, a, b, radius, tMin, tMax) {
            const f1 = center.to(a);
            const normal = f1.cross(center.to(b));
            const f2 = normal.cross(f1).toLength(f1.length());
            return new EllipseCurve(center, f1, f2, undefined !== tMin ? tMin : 0, undefined !== tMax ? tMax : f1.angleTo(center.to(b)));
        }
        split(tMin = this.tMin, tMax = this.tMax) {
            const result = [];
            tMin < 0 &&
                result.push(new EllipseCurve(this.center, this.f1.negated(), this.f2.negated(), tMin + PI$3, min$3(0, tMax) + PI$3));
            tMax > 0 &&
                result.push(new EllipseCurve(this.center, this.f1, this.f2, max$3(0, tMin), tMax));
            return result;
        }
        static forAB(a, b, center = V3.O) {
            return super.forAB(a, b, center);
        }
        /**
         * Create a circle curve which has a, b and c on it. a, b, c can't be on a straight line.
         * tMin defaults to 0, tMax defaults to the value for c
         */
        static circleThroughPoints(a, b, c, tMin = 0, tMax) {
            assertf(() => !L3.throughPoints(a, c).containsPoint(b));
            const normal = a.to(b).cross(b.to(c));
            const center = new L3(a.lerp(b, 0.5), normal.cross(a.to(b)).unit()).isInfoWithLine(new L3(b.lerp(c, 0.5), normal.cross(b.to(c)).unit()));
            const f1 = center.to(a).negated();
            return new EllipseCurve(center, f1, normal.unit().cross(f1), -PI$3, undefined === tMax
                ? f1.angleRelativeNormal(center.to(c), normal.unit())
                : tMax);
        }
        getAreaInDir(right, up, tStart, tEnd) {
            //assertf(() => tStart < tEnd)
            assertf(() => right.isPerpendicularTo(this.normal));
            assertf(() => up.isPerpendicularTo(this.normal));
            //assertf(() => EllipseCurve.isValidT(tStart), tStart)
            //assertf(() => EllipseCurve.isValidT(tEnd), tEnd)
            const upLC = this.matrixInverse.transformVector(up);
            const rightLC = upLC.cross(V3.Z);
            const normTStart = tStart - rightLC.angleXY();
            const normTEnd = tEnd - rightLC.angleXY();
            const transformedOriginY = this.matrixInverse
                .getTranslation()
                .dot(upLC.unit());
            // integral of sqrt(1 - x²) from 0 to cos(t)
            // Basically, we want
            // INTEGRAL[cos(t); PI/2] sqrt(1 - x²) dx
            // INTEGRAL[PI/2: cos(t)] -sqrt(1 - x²) dx
            // = INTEGRAL[cos(0); cos(t)] -sqrt(1 - x²) dx
            // = INTEGRAL[0; t] -sqrt(1 - cos²(t)) * -sin(t) dt
            // = INTEGRAL[0; t] -sin(t) * -sin(t) dt
            // = INTEGRAL[0; t] sin²(t) dt (partial integration / wolfram alpha)
            // = (1/2 * (t - sin(t) * cos(t)))[0; t] (this form has the distinct advantage of being defined everywhere)
            function fArea(t) {
                return (t - Math.sin(t) * Math.cos(t)) / 2;
            }
            // for the centroid, we want
            // cx = 1 / area * INTEGRAL[cos(t); PI/2] x * f(x) dx
            // cx = 1 / area * INTEGRAL[cos(t); PI/2] x * sqrt(1 - x²) dx
            // cx = 1 / area * INTEGRAL[cos(0); cos(t)] x * -sqrt(1 - x²) dx
            // ...
            // cx = 1 / area * INTEGRAL[0; t] cos(t) * sin²(t) dt // WA
            // cx = 1 / area * (sin^3(t) / 3)[0; t]
            function cxTimesArea(t) {
                return Math.pow(Math.sin(t), 3) / 3;
            }
            // cy = 1 / area * INTEGRAL[cos(t); PI/2] f²(x) / 2 dx
            // cy = 1 / area * INTEGRAL[cos(0); cos(t)] -(1 - x²) / 2 dx
            // cy = 1 / area * INTEGRAL[0; t] (cos²(t) - 1) * -sin(t) / 2 dt
            // cy = 1 / area * (cos (3 * t) - 9 * cos(t)) / 24 )[0; t]
            function cyTimesArea(t) {
                return (Math.cos(3 * t) - 9 * Math.cos(t)) / 24;
            }
            const restArea = -transformedOriginY * (-Math.cos(normTEnd) + Math.cos(normTStart));
            const area = fArea(normTEnd) - fArea(normTStart) + restArea;
            const cxt = (cxTimesArea(normTEnd) -
                cxTimesArea(normTStart) +
                ((-transformedOriginY * (-Math.cos(normTEnd) - Math.cos(normTStart))) /
                    2) *
                    restArea) /
                area;
            const cyt = (cyTimesArea(normTEnd) -
                cyTimesArea(normTStart) -
                (-transformedOriginY / 2) * restArea) /
                area;
            const factor = this.matrix.xyAreaFactor(); // * upLC.length()
            //console.log('fctor', factor, 'area', area, 'resultarea', area* factor)
            assert(!eq0(factor));
            return {
                area: area * factor,
                centroid: this.matrix.transformPoint(M4.rotateZ(rightLC.angleXY()).transformPoint(new V3(cxt, cyt, 0))),
            };
        }
        at(t) {
            assertNumbers(t);
            //assert(this.isValidT(t))
            // = center + f1 cos t + f2 sin t
            return this.center
                .plus(this.f1.times(Math.cos(t)))
                .plus(this.f2.times(Math.sin(t)));
        }
        tangentAt(t) {
            assertNumbers(t);
            //assert(this.isValidT(t))
            // ) f2 cos(t) - f1 sin(t)
            return this.f2.times(Math.cos(t)).minus(this.f1.times(Math.sin(t)));
        }
        ddt(t) {
            assertNumbers(t);
            assert(this.isValidT(t));
            return this.f2.times(-Math.sin(t)).minus(this.f1.times(Math.cos(t)));
        }
        tangentAt2(xi, eta) {
            return this.f2.times(xi).minus(this.f1.times(eta));
        }
        isCircular() {
            return (eq(this.f1.length(), this.f2.length()) &&
                this.f1.isPerpendicularTo(this.f2));
        }
        isColinearTo(curve) {
            if (!hasConstructor(curve, EllipseCurve))
                return false;
            if (!this.center.like(curve.center)) {
                return false;
            }
            if (this == curve) {
                return true;
            }
            if (this.isCircular()) {
                return (curve.isCircular() &&
                    eq(this.f1.length(), curve.f1.length()) &&
                    this.normal.isParallelTo(curve.normal));
            }
            else {
                let { f1: f1, f2: f2 } = this.rightAngled(), { f1: c1, f2: c2 } = curve.rightAngled();
                if (f1.length() > f2.length()) {
                    [f1, f2] = [f2, f1];
                }
                if (c1.length() > c2.length()) {
                    [c1, c2] = [c2, c1];
                }
                return (eq(f1.squared(), Math.abs(f1.dot(c1))) &&
                    eq(f2.squared(), Math.abs(f2.dot(c2))));
            }
        }
        pointT(pWC) {
            assertVectors(pWC);
            assert(this.containsPoint(pWC));
            const pLC = this.matrixInverse.transformPoint(pWC);
            const t = EllipseCurve.XYLCPointT(pLC, this.tMin, this.tMax);
            assert(this.isValidT(t));
            return t;
        }
        reversed() {
            return new EllipseCurve(this.center, this.f1.negated(), this.f2, PI$3 - this.tMax, PI$3 - this.tMin);
        }
        eccentricity() {
            const mainAxes = this.rightAngled();
            const f1length = mainAxes.f1.length(), f2length = mainAxes.f1.length();
            const [a, b] = f1length > f2length ? [f1length, f2length] : [f2length, f1length];
            return Math.sqrt(1 - (b * b) / a / a);
        }
        circumference() {
            return this.arcLength(-Math.PI, Math.PI);
        }
        arcLength(tStart = this.tMin, tEnd = this.tMax, steps = 2) {
            assert(tStart < tEnd, "startT < endT");
            const f1Length = this.f1.length();
            if (eq(f1Length, this.f2.length())) {
                return f1Length * (tEnd - tStart);
            }
            return super.arcLength(tStart, tEnd, steps);
        }
        circumferenceApproximate() {
            // approximate circumference by Ramanujan
            // https://en.wikipedia.org/wiki/Ellipse#Circumference
            const { f1, f2 } = this.rightAngled(), a = f1.length(), b = f2.length();
            const h = Math.pow((a - b), 2) / Math.pow((a + b), 2);
            return Math.PI * (a + b) * (1 + (3 * h) / (10 + Math.sqrt(4 - 3 * h)));
        }
        /**
         * Radii of the ellipse are described by
         * q(phi) = f1 * cos(phi) + f2 * sin(phi)
         * or q(xi, eta) = f1 * xi + f2 * eta (1) with the added condition
         * xi² + eta² = 1 (2)
         * we want to find the radius where the corresponding tangent is perpendicular
         * tangent: q'(phi) = f1 * -sin(phi) + f2 * cos(phi)
         * tangent: q'(xi, eta) = f1 * -eta + f2 * xi
         * perpendicular when: q'(xi, eta) DOT q(xi, eta) = 0
         * (f1 * -eta + f2 * xi) DOT (f1 * xi + f2 * eta) = 0
         * DOT is distributive:
         * f1² * (-eta * xi) + f1 * f2 * (-eta² + xi²) + f2² * (xi * eta) = 0
         * (f2² - f1²) * (eta * xi) + f1 * f2 * (-eta² + xi²) = 0
         * a * (xi² - eta²) + b * xi * eta = 0 (2)
         * with a = f1 * f2, b = f2² - f1²
         * => (xi/eta)² + xi/eta * b/a + 1 = 0 (divide by a * eta²)
         * xi/eta = b/a/2 +- sqrt(b²/a²/4 - 1) | * 2*a*eta
         * 2 * a * xi = eta * (b +- sqrt(b² - 4 * a²))
         * g1 * xi - g2 * eta = 0 (3)
         * with g1 = 2 * a, g2 = b +- sqrt(b² - 4 * a²)
         * Solve (3), (2) with intersectionUnitCircleLine
         */
        rightAngled() {
            const f1 = this.f1, f2 = this.f2, a = f1.dot(f2), b = f2.squared() - f1.squared();
            if (eq0(a)) {
                return this;
            }
            const g1 = 2 * a, g2 = b + Math.sqrt(b * b + 4 * a * a);
            const { x1: xi, y1: eta } = intersectionUnitCircleLine(g1, g2, 0);
            const f1RA = f1.times(xi).plus(f2.times(eta));
            const f2RA = f1.times(-eta).plus(f2.times(xi));
            return new EllipseCurve(this.center, f1RA, f2RA, -PI$3, PI$3);
        }
        isInfosWithEllipse(ellipse) {
            if (this.normal.isParallelTo(ellipse.normal) &&
                eq0(this.center.minus(ellipse.center).dot(ellipse.normal))) {
                // ellipses are coplanar
                const ellipseLCRA = ellipse.transform(this.matrixInverse).rightAngled();
                const r1 = ellipseLCRA.f1.lengthXY(), r2 = ellipseLCRA.f2.lengthXY(), centerDist = ellipseLCRA.center.lengthXY();
                const rMin = min$3(r1, r2), rMax = max$3(r1, r2);
                if (lt(centerDist + rMax, 1) || // entirely inside unit circle
                    lt(1, centerDist - rMax) || // entirely outside unit circle
                    lt(1, rMin - centerDist) || // contains unit circle
                    (eq(1, r1) && eq(1, r2) && eq0(centerDist)) // also unit circle, return no IS
                ) {
                    return [];
                }
                const f = (t) => ellipseLCRA.at(t).lengthXY() - 1;
                const df = (t) => ellipseLCRA.at(t).xy().dot(ellipseLCRA.tangentAt(t)) /
                    ellipseLCRA.at(t).lengthXY();
                checkDerivate(f, df, -PI$3, PI$3, 1);
                const ellipseLCRATs = [];
                for (let startT = (-4 / 5) * PI$3; startT < PI$3; startT += PI$3 / 4) {
                    let t = newtonIterateSmart(f, startT, 16, df, 1e-4);
                    le(t, -PI$3) && (t += TAU);
                    assert(!isNaN(t));
                    if (between(t, -PI$3, PI$3) &&
                        eq0(f(t)) &&
                        !ellipseLCRATs.some((r) => eq(t, r))) {
                        ellipseLCRATs.push(t);
                    }
                }
                const result = [];
                for (const ellipseLCRAT of ellipseLCRATs) {
                    const p = this.matrix.transformPoint(ellipseLCRA.at(ellipseLCRAT));
                    if (this.containsPoint(p) && ellipse.containsPoint(p)) {
                        result.push({ tThis: this.pointT(p), tOther: ellipse.pointT(p), p });
                    }
                }
                return result;
                //const angle = ellipseLCRA.f1.angleXY()
                //const aSqr = ellipseLCRA.f1.squared(), bSqr = ellipseLCRA.f2.squared()
                //const a = Math.sqrt(aSqr), b = Math.sqrt(bSqr)
                //const {x: centerX, y: centerY} = ellipseLCRA.center
                //const rotCenterX = centerX * Math.cos(-angle) + centerY * -Math.sin(-angle)
                //const rotCenterY = centerX * Math.sin(-angle) + centerY * Math.cos(-angle)
                //const rotCenter = V(rotCenterX, rotCenterY)
                //const f = t => {
                //	const lex = Math.cos(t) - rotCenterX, ley = Math.sin(t) - rotCenterY
                //	return lex * lex / aSqr + ley * ley / bSqr - 1
                //}
                //const f2 = (x, y) => (x * x + y * y - 1)
                //const f3 = (x, y) => ((x - rotCenterX) * (x - rotCenterX) / aSqr + (y - rotCenterY) * (y - rotCenterY) /
                // bSqr - 1) const results = [] const resetMatrix = this.matrix.times(M4.rotateZ(angle)) for (let startT =
                // Math.PI / 4; startT < 2 * Math.PI; startT += Math.PI / 2) { const startP = EllipseCurve.XY.at(startT)
                // const p = newtonIterate2d(f3, f2, startP.x, startP.y, 10) if (p && !results.some(r => r.like(p))) {
                // results.push(p) } } const rotEl = new EllipseCurve(rotCenter, V(a, 0, 0), V(0, b, 0)) return
                // results.map(pLC => { const p = resetMatrix.transformPoint(pLC) return {tThis: this.pointT(p, PI),
                // tOther: ellipse.pointT(p, PI), p} })
            }
            else {
                return mapFilter(this.isTsWithPlane(P3.normalOnAnchor(ellipse.normal.unit(), ellipse.center)), (t) => {
                    const p = this.at(t);
                    if (ellipse.containsPoint(p)) {
                        return { tThis: t, tOther: ellipse.pointT(p), p };
                    }
                    return undefined;
                });
            }
        }
        isInfosWithCurve(curve) {
            if (curve instanceof EllipseCurve) {
                return this.isInfosWithEllipse(curve);
            }
            return super.isInfosWithCurve(curve);
        }
        transform4(m4) {
            const tMap = (t) => sign$1(t) * sqrt$1((1 - cos$2(t)) / (1 + cos$2(t)));
            // prettier-ignore
            const parabolaToUnitEllipse = new M4(0, -1, 0, 1, 2, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1);
            return parabola4Projection(M4.product(m4, this.matrix, parabolaToUnitEllipse), tMap(this.tMin), tMap(this.tMax));
        }
        roots() {
            // tangent(t) = f2 cos t - f1 sin t
            // solve for each dimension separately
            // tangent(eta, xi) = f2 eta - f1 xi
            return arrayFromFunction(3, (dim) => {
                const a = this.f2.e(dim);
                const b = -this.f1.e(dim);
                return intersectionUnitCircleLine2(a, b, 0)
                    .map(([xi, eta]) => Math.atan2(eta, xi))
                    .filter((t) => this.isValidT(t));
            });
        }
        closestTToPoint(p, tStart) {
            // (at(t) - p) * tangentAt(t) = 0
            // (xi f1 + eta f2 + q) * (xi f2 - eta f1) = 0
            // xi eta (f2^2-f1^2) + xi f2 q - eta² f1 f2 + xi² f1 f2 - eta f1 q = 0
            //  (xi² - eta²) f1 f2 + xi eta (f2^2-f1^2) + xi f2 q - eta f1 q = 0
            // atan2 of p is a good first approximation for the searched t
            tStart = tStart || this.matrixInverse.transformPoint(p).angleXY();
            const pRelCenter = p.minus(this.center);
            const f = (t) => this.tangentAt(t).dot(this.f1
                .times(Math.cos(t))
                .plus(this.f2.times(Math.sin(t)))
                .minus(pRelCenter));
            return newtonIterate1d$1(f, tStart, 8);
        }
        area() {
            // see
            // https://upload.wikimedia.org/wikipedia/commons/thumb/4/4e/Cross_product_parallelogram.svg/220px-Cross_product_parallelogram.svg.png
            return Math.PI * this.f1.cross(this.f2).length();
        }
        angleToT(phi) {
            // atan2(y, x) = phi
            const phiDir = this.f1
                .unit()
                .times(Math.cos(phi))
                .plus(this.f2.rejectedFrom(this.f1).unit().times(Math.sin(phi)));
            const dirLC = this.matrixInverse.transformVector(phiDir);
            return dirLC.angleXY();
        }
    }
    EllipseCurve.UNIT = new EllipseCurve(V3.O, V3.X, V3.Y);
    EllipseCurve.prototype.hlol = Curve.hlol++;
    EllipseCurve.prototype.tIncrement = (2 * Math.PI) / (4 * 32);

    /**
     * Non-Uniform Rational B-Spline implementation.
     *
     * See https://pages.mtu.edu/~shene/COURSES/cs3621/NOTES/ for a good reference.
     *
     *
     */
    class NURBS extends Curve {
        constructor(
        /**
         * The control points of the NURBS curve, as 4D homogeneous coordinates.
         */
        points, 
        /**
         * The degree of the NURBS curve. Must be at least 1 (linear).
         */
        degree, knots = NURBS.openUniformKnots(points.length, degree), tMin = knots[degree], tMax = knots[knots.length - degree - 1]) {
            super(tMin, tMax);
            this.points = points;
            this.degree = degree;
            this.knots = knots;
            const knotsLength = points.length + degree + 1;
             Object.freeze(points);
             Object.freeze(knots);
            assert(knots.length === knotsLength, "bad knot vector length: expected " +
                knotsLength +
                " (degree = " +
                degree +
                " pcount = " +
                points.length +
                "), but was " +
                knots.length);
            assert(knots[degree] <= tMin);
            assert(tMax <= knots[knots.length - degree - 1]);
            for (let i = 0; i < points.length; i++) {
                assert(points[i].dim() == 4);
            }
            assert(degree >= 1, "degree must be at least 1 (linear)");
            assert(degree % 1 == 0);
            assert(-1 == firstUnsorted(knots, MINUS), "knot values must be in ascending order");
        }
        getConstructorParameters() {
            return [this.points, this.degree, this.knots];
        }
        at4(t) {
            
                assert(between(t, this.tMin, this.tMax), t + " " + this.tMin + " " + this.tMax);
            const { points, degree, knots } = this;
            // find s (the spline segment) for the [t] value provided
            const s = this.tInterval(t);
            const v = Vector.pack(points, new Float64Array((degree + 1) * 4), s - degree, 0, degree + 1);
            for (let level = 0; level < degree; level++) {
                // build level l of the pyramid
                for (let i = degree; i > level; i--) {
                    const alpha = (t - knots[i + s - degree]) /
                        (knots[i + s - level] - knots[i + s - degree]);
                    // interpolate each component
                    for (let dim = 0; dim < 4; dim++) {
                        v[i * 4 + dim] =
                            (1 - alpha) * v[(i - 1) * 4 + dim] + alpha * v[i * 4 + dim];
                    }
                }
            }
            return new Vector(v.slice(degree * 4, (degree + 1) * 4));
        }
        at(t) {
            return this.at4(t).p3();
        }
        /**
         d(k, i, t) = a(i, k, t) * d(k - 1, i, t) + (1 - a(i, k, t)) * d(k - 1, i - 1, t)
         a(i, k, t) = (t - knots[i]) / (knots[i + 1 + n - k] - knots[i])
         a'(i, k, t) = 1 / (knots[i + 1 + n - k] - knots[i])
      
         d/dt =  a(i, k, t) * d'(k - 1, i, t) + a'(i, k, t) * d(k - 1, i, t)
         + (1 - a(i, k, t)) * d'(k - 1, i - 1, t) + a'(i, k, t) * d(k - 1, i - 1, t)
         */
        ptDtDdt4(t) {
            const { points, degree, knots } = this;
            // find s (the spline segment) for the [t] value provided
            const s = this.tInterval(t);
            const v = Vector.pack(points, new Float64Array((degree + 1) * 4), s - degree, 0, degree + 1);
            let ddt = Vector.Zero(4);
            let derivative;
            for (let level = 0; level < degree; level++) {
                if (level == degree - 2) {
                    // see https://www.globalspec.com/reference/61012/203279/10-8-derivatives
                    const a = new Vector(v.slice(degree * 4, (degree + 1) * 4));
                    const b = new Vector(v.slice((degree - 1) * 4, degree * 4));
                    const c = new Vector(v.slice((degree - 2) * 4, (degree - 1) * 4));
                    function step(k, i, dkMinus1iMinus1, dkMinus1i) {
                        return dkMinus1i
                            .minus(dkMinus1iMinus1)
                            .times(k / (knots[i + degree - k] - knots[i - 1]));
                    }
                    ddt = step(degree, s + 1, step(degree - 1, s + 1, a, b), step(degree - 1, s, b, c));
                }
                if (level == degree - 1) {
                    const a = new Vector(v.slice(degree * 4, (degree + 1) * 4));
                    const b = new Vector(v.slice((degree - 1) * 4, degree * 4));
                    derivative = b.minus(a).times(degree / (knots[s] - knots[s + 1]));
                }
                for (let i = degree; i > level; i--) {
                    const alpha = (t - knots[i + s - degree]) /
                        (knots[i + s - level] - knots[i + s - degree]);
                    // interpolate each component
                    for (let dim = 0; dim < 4; dim++) {
                        v[i * 4 + dim] =
                            (1 - alpha) * v[(i - 1) * 4 + dim] + alpha * v[i * 4 + dim];
                    }
                }
            }
            const p = new Vector(v.slice(degree * 4, degree * 4 + 4));
            return [p, derivative, ddt];
        }
        tangentAt(t) {
            // x(t) = xw(t) / w(t)
            // quotient rule
            const [p, derivative] = this.ptDtDdt4(t);
            const expected = derivative
                .times(p.w)
                .minus(p.times(derivative.w))
                .div(Math.pow(p.w, 2))
                .V3();
            return expected;
        }
        ddt(t) {
            const [p, dt, ddt] = this.ptDtDdt4(t);
            // =(-w(t) x(t) w''(t) - 2 w(t) w'(t) x'(t) + 2 x(t) w'(t)^2 + w(t)^2 x''(t))/w(t)^3
            // =(x(t) ((-w(t)) w''(t) + 2 w'(t)^2) - x'(t) 2 w(t) w'(t) + x''(t) w(t)^2 )/w(t)^3
            // prettier-ignore
            return Vector.add(p.times(-p.w * ddt.w + 2 * Math.pow(dt.w, 2)), dt.times(-2 * p.w * dt.w), ddt.times(Math.pow(p.w, 2))).div(Math.pow(p.w, 3)).V3();
        }
        ptDtDdt(t) {
            const [pt, dt4, ddt4] = this.ptDtDdt4(t);
            return [
                pt.p3(),
                dt4
                    .times(pt.w)
                    .minus(pt.times(dt4.w))
                    .div(Math.pow(pt.w, 2))
                    .V3(),
                Vector.add(pt.times(-pt.w * ddt4.w + 2 * Math.pow(dt4.w, 2)), //
                dt4.times(-2 * pt.w * dt4.w), ddt4.times(Math.pow(pt.w, 2)))
                    .div(Math.pow(pt.w, 3))
                    .V3(),
            ];
        }
        pointT(pWC) {
            return this.closestTToPoint(pWC);
        }
        closestTToPoint(p, tStart, tMin = this.tMin, tMax = this.tMax) {
            // this.at(t) has minimal distance to p when this.tangentAt(t) is perpendicular to
            // the vector between this.at(t) and p. This is the case iff the dot product of the two is 0.
            // f = (this.at(t) - p) . (this.tangentAt(t)
            // df = this.tangentAt(t) . this.tangentAt(t) + (this.at(t) - p) . this.ddt(t)
            //    = this.tangentAt(t)² + (this.at(t) - p) . this.ddt(t)
            const f = (t) => {
                const [pt, dt, ddt] = this.ptDtDdt(t);
                return [pt.minus(p).dot(dt), dt.squared() + pt.minus(p).dot(ddt)];
            };
            //checkDerivate(f, df, tMin, tMax)
            const STEPS = 32;
            if (undefined === tStart) {
                tStart = withMax$1(arraySamples(tMin, tMax, STEPS), (t) => -this.at(t).distanceTo(p));
            }
            const result = newtonIterateWithDerivative2(f, tStart, 8, this.tMin, this.tMax);
            //assert(undefined !== result)
            return result;
        }
        containsPoint(pWC) {
            const tGuess = this.closestTToPoint(pWC);
            return undefined === tGuess ? false : this.at(tGuess).like(pWC);
        }
        derivate() {
            const k = this.degree;
            const ps = arrayFromFunction(this.points.length - 1, (i) => this.points[i]
                .to(this.points[i + 1])
                .times(k / (this.knots[i + k + 1] - this.knots[i + 1])));
            return new NURBS(ps, this.degree - 1, this.knots.slice(1, -1), this.tMin, this.tMax);
        }
        /**
         * Create a new NURBS of equal degree with the added knot [newKnot]. New NURBS will have one additional control
         * point.
         */
        withKnot(newKnot) {
            assert(between(newKnot, this.tMin, this.tMax));
            const k = this.tInterval(newKnot);
            const { knots, points, degree } = this;
            const insertPoints = arrayFromFunction(this.degree, (j) => {
                const i = k - degree + 1 + j;
                const aiNumerator = newKnot - knots[i];
                // 0/0 defined as 0:
                const ai = aiNumerator == 0 ? 0 : aiNumerator / (knots[i + degree] - knots[i]);
                assert(between(ai, 0, 1));
                return Vector.lerp(points[i - 1], points[i], ai);
            });
            const newPoints = points.slice();
            newPoints.splice(k - degree + 1, degree - 1, ...insertPoints);
            const newKnots = knots.slice();
            newKnots.splice(k + 1, 0, newKnot);
            return new NURBS(newPoints, degree, newKnots, this.tMin, this.tMax);
        }
        removeKnot(t) {
            const { knots, points, degree } = this;
            let k = this.tInterval(t), s = 0; // s = multiplicity of the knot
            while (knots[k + 1] == t) {
                k++;
                s++;
            }
            if (s == 0)
                throw new Error("There is no knot " + t + "!");
            // the points which were relevant when inserting were (k - p - 1) to (k - 1). (- 1) because the current k has
            // been increased by one due to the insertion.
            // p - 1 points were replaced by p points, hence we need to generate the original p - 1 point, + 1 to check if
            // this transformation is valid.
            const insertPoints = [points[k - degree - 1]];
            const oldKnots = knots.slice();
            oldKnots.splice(k, 1);
            for (let i = k - degree; i <= k - s; i++) {
                const alphaInv = (oldKnots[i + degree] - oldKnots[i]) / (t - oldKnots[i]);
                const oldPoint = Vector.lerp(getLast(insertPoints), points[i], alphaInv);
                insertPoints.push(oldPoint);
            }
            if (getLast(insertPoints).like(points[k + 1 - s])) {
                const oldPoints = points.slice();
                oldPoints.splice(k - degree - 1, degree - s + 3, ...insertPoints);
                return new NURBS(oldPoints, degree, oldKnots);
            }
            return undefined;
        }
        static openUniformKnots(pointCount, degree, tMin = 0, tMax = 1) {
            const knotsLength = pointCount + degree + 1;
            return arrayFromFunction(knotsLength, (i) => {
                if (i <= degree) {
                    return tMin;
                }
                else if (i >= knotsLength - degree - 1) {
                    return tMax;
                }
                else {
                    return lerp$1(tMin, tMax, (i - degree) / (knotsLength - degree * 2 - 1));
                }
            });
        }
        static bezierKnots(degree, tMin = 0, tMax = 1) {
            const result = new Array((degree + 1) * 2);
            for (let i = 0; i < degree + 1; i++) {
                result[i] = tMin;
                result[degree + 1 + i] = tMax;
            }
            return result;
        }
        static fromBezier(bezier) {
            const bezier01 = bezier.selectPart(bezier.tMin, bezier.tMax);
            return NURBS.Bezier(bezier01.points);
        }
        static Bezier(points, tMin = 0, tMax = 1) {
            return new NURBS(points.map((p) => p instanceof V3 ? new Vector(new Float64Array([p.x, p.y, p.z, 1])) : p), points.length - 1, arrayFromFunction(points.length * 2, (i) => (i < points.length ? 0 : 1)), tMin, tMax);
        }
        static fromHyperbola(hyperbola, tMin = hyperbola.tMin, tMax = hyperbola.tMax) {
            const p0 = HyperbolaCurve.XY.at(tMin);
            const p2 = HyperbolaCurve.XY.at(tMax);
            const p1 = new V3((sinh(tMin) - sinh(tMax)) / sinh(tMin - tMax), (cosh(tMin) - cosh(tMax)) / sinh(tMin - tMax), 0);
            // M: midpoint between p0 and p2
            // X: intersection of line through p1 and M and unit hyperbola
            // result.at(1/2) = X
            // result.at(1/2) = (1/4 p0 + 1/2 p1 w + 1/4 p2) / (1/4 + 1/ 2 w + 1/4)
            // result.at(1/2) = (1/2 p0 + p1 w + 1/2 p2) / (1 + w)
            // result.at(1/2) = (M + p1 w) / (1 + w) = X
            // => w * (p1 - X) = (X - M)
            // as p1, X and M are all on the same line, we can solve this equation with only the x
            const M = p0.lerp(p2, 0.5);
            const Xx = 1 / sqrt$1(1 - Math.pow((M.y / M.x), 2));
            const w = (Xx - M.x) / (p1.x - Xx);
            return NURBS.fromV3s([p0, p1, p2], 2, undefined, [1, w, 1]).transform(hyperbola.matrix);
        }
        static fromParabola(parabola) {
            return NURBS.fromBezier(parabola.asBezier());
        }
        static fromEllipse(ellipse) {
            const unitSemiEllipse = new NURBS([
                VV(1, 0, 0, 1),
                VV(1, 1, 0, 1).times(SQRT1_2),
                VV(0, 1, 0, 1),
                VV(-1, 1, 0, 1).times(SQRT1_2),
                VV(-1, 0, 0, 1),
                VV(-1, -1, 0, 1).times(SQRT1_2),
                VV(0, -1, 0, 1),
            ], 2, [0, 0, 0, PI$3 / 2, PI$3 / 2, PI$3, PI$3, (3 * PI$3) / 2, (3 * PI$3) / 2, 2 * PI$3]);
            return unitSemiEllipse.transform(ellipse.matrix);
        }
        /**
         * Create a new NURBS from V3s, with optional weights.
         * @param points
         * @param degree
         * @param knots
         * @param weights
         */
        static fromV3s(points, degree, knots, weights = arrayFromFunction(points.length, () => 1)) {
            assert(points.length == weights.length);
            return new NURBS(points.map((p, i) => Vector.fromV3AndWeight(p, weights[i])), degree, knots);
        }
        isUniform(precision = 0) {
            const intervals = arrayFromFunction(this.knots.length - 1, (i) => this.knots[i + 1] - this.knots[i]);
            const [min, max] = minAndMax(intervals);
            return eq(min, max, precision);
        }
        /**
         * NURBS is a B spline if control points all have the same weight.
         */
        isBSpline(precision = 0) {
            const [minWeight, maxWeight] = minAndMax(this.points.map((p) => p.w));
            return eq(minWeight, maxWeight, precision);
        }
        /**
         * Whether this is a (rational) bezier curve.
         */
        isBezier(precision = 0) {
            if (this.degree + 1 != this.points.length)
                return false;
            const [min0, max0] = minAndMax(this.knots, 0, this.degree + 1);
            if (!eq(min0, max0, precision))
                return false;
            const [min1, max1] = minAndMax(this.knots, this.degree + 1);
            if (!eq(min1, max1, precision))
                return false;
            return true;
        }
        /**
         * Splits NURBS curve into rational bezier curves.
         * See https://pages.mtu.edu/~shene/COURSES/cs3621/NOTES/spline/B-spline/subdivision.html
         */
        getSegments() {
            const { knots, points, degree } = this;
            const result = [];
            const v = Vector.pack(points, new Float64Array(points.length * 4));
            const vectorFromV = (i) => new Vector(v.slice(i * 4, (i + 1) * 4));
            let k = degree + 1; // k = knot index we are duplicating
            while (k < knots.length - degree - 1) {
                const t = knots[k];
                const prevKnot = knots[k - 1];
                let s = 1; // s = multiplicity of the knot
                while (knots[k + 1] == t) {
                    k++;
                    s++;
                }
                const newNURBSPoints = new Array(degree + 1);
                // the first s + 1 points are identical to the current curve
                for (let i = 0; i < s + 1; i++) {
                    newNURBSPoints[i] = vectorFromV(k - degree - s + i);
                }
                // we need to have multiplicity degree, so insert (degree - s) times
                for (let level = 1; level <= degree - s; level++) {
                    for (let i = k - degree; i <= k - s - level; i++) {
                        const alpha = (t - prevKnot) / (knots[i + degree + 1] - prevKnot);
                        for (let dim = 0; dim < 4; dim++) {
                            v[i * 4 + dim] =
                                (1 - alpha) * v[i * 4 + dim] + alpha * v[(i + 1) * 4 + dim];
                        }
                    }
                    newNURBSPoints[s + level] = vectorFromV(k - degree);
                }
                const newNURBSKnots = arrayFromFunction((degree + 1) * 2, (i) => i < degree + 1 ? knots[k - s] : t);
                result.push(new NURBS(newNURBSPoints, degree, newNURBSKnots));
                k++;
            }
            // last curve
            const newNURBSPoints = arrayFromFunction(degree + 1, (i) => vectorFromV(points.length - degree - 1 + i));
            const newNURBSKnots = arrayFromFunction((degree + 1) * 2, (i) => i < degree + 1 ? knots[k - 1] : knots[k]);
            result.push(new NURBS(newNURBSPoints, degree, newNURBSKnots));
            return result;
        }
        split(t) {
            const { knots, points, degree } = this;
            assert(le(this.tMin, t) && le(t, this.tMax));
            let k = this.tInterval(t), s = 0; // s = multiplicity of the knot
            while (knots[k + 1] == t) {
                k++;
                s++;
            }
            const vectorFromV = (i) => new Vector(v.slice(i * 4, (i + 1) * 4));
            const leftPoints = new Array(k + 1 - s);
            // the first k + s + 1 points are identical to the current curve
            for (let i = 0; i < k + s - degree + 1; i++) {
                leftPoints[i] = this.points[i];
            }
            const rightPointsLength = points.length - (k - degree);
            const v = Vector.pack(points, new Float64Array(rightPointsLength * 4), k - degree);
            // we need to have multiplicity degree, so insert (degree - s) times
            for (let level = 1; level <= degree - s; level++) {
                for (let i = k - degree; i <= k - s - level; i++) {
                    const alpha = (t - knots[i + level]) / (knots[i + degree + 1] - knots[i + level]);
                    const j = i - (k - degree);
                    for (let dim = 0; dim < 4; dim++) {
                        v[j * 4 + dim] =
                            (1 - alpha) * v[j * 4 + dim] + alpha * v[(j + 1) * 4 + dim];
                    }
                }
                leftPoints[k - degree + level] = vectorFromV(0);
            }
            const leftKnots = knots.slice(0, k + degree + 2 - s);
            for (let i = 0; i < degree - s + 1; i++) {
                leftKnots[k - s + 1 + i] = t;
            }
            const rightKnots = knots.slice(k - degree);
            for (let i = 0; i < degree + 1; i++) {
                rightKnots[i] = t;
            }
            const rightPoints = arrayFromFunction(rightPointsLength, (i) => vArrGet(v, 4, i));
            return [
                new NURBS(leftPoints, degree, leftKnots),
                new NURBS(rightPoints, degree, rightKnots),
            ];
        }
        simplify() {
            assert(this.isBezier());
            if (3 == this.degree && this.isBSpline()) {
                return new BezierCurve(this.points[0].p3(), this.points[1].p3(), this.points[2].p3(), this.points[3].p3(), this.tMin, this.tMax);
            }
            else if (2 == this.degree) {
                const [P0, P1, P2] = this.points;
                const [p0, p1, p2] = this.points.map((p) => p.p3());
                const c = NURBS.simplifyUnit2(P0.w, P1.w, P2.w).transform(M4.forSys(p1.to(p0), p1.to(p2), undefined, p1));
                const [tMin, tMax] = [c.pointT(p0), c.pointT(p2)].sort();
                return c.withBounds(snap(tMin, c.tMin), snap(tMax, c.tMax));
            }
            else if (1 == this.degree) {
                return L3.throughPoints(this.points[0].p3(), this.points[1].p3());
            }
            else {
                return this;
            }
        }
        static simplifyUnit2(w0, w1, w2) {
            // see https://math.stackexchange.com/a/2794874/230980
            const delta = w0 * w2 - Math.pow(w1, 2);
            const cxy = (w0 * w2) / 2 / delta;
            const center = new V3(cxy, cxy, 0);
            const k = (Math.pow(w1, 2) + delta - 2 * w1 * sqrt$1(abs$2(delta))) / 2 / delta;
            const p = V3.X;
            const q = new V3(k, cxy, 0);
            // const q = new V3(cxy, k, 0)
            if (eq0(delta)) {
                return new ParabolaCurve(new V3(1 / 4, 1 / 4, 0), new V3(1, -1, 0), new V3(1, 1, 0), -0.5, 0.5);
            }
            else if (delta < 0) {
                // hyperbola
                return new HyperbolaCurve(center, center.to(p), center.to(q));
            }
            else {
                // ellipse
                return new EllipseCurve(center, center.to(p), center.to(q), 0);
            }
        }
        elevateDegreeBezier() {
            assert(this.isBezier());
            const newPoints = new Array(this.points.length + 1);
            newPoints[0] = this.points[0];
            newPoints[this.points.length] = this.points[this.points.length - 1];
            for (let i = 1; i < this.points.length; i++) {
                newPoints[i] = Vector.lerp(this.points[i], this.points[i - 1], i / (this.degree + 1));
            }
            const newKnots = NURBS.bezierKnots(this.degree + 1, this.knots[0], this.knots[this.degree + 1]);
            return new NURBS(newPoints, this.degree + 1, newKnots, this.tMin, this.tMax);
        }
        elevateDegree() {
            const segmentsElevated = this.getSegments().map((b) => b.elevateDegreeBezier());
            // stitch together the segments
            const newPoints = new Array(2 + segmentsElevated.length * this.degree);
            newPoints[0] = segmentsElevated[0].points[0];
            setLast(newPoints, getLast(getLast(segmentsElevated).points));
            for (let i = 0; i < segmentsElevated.length; i++) {
                for (let pi = 1; pi < segmentsElevated[i].points.length - 1; pi++) {
                    newPoints[i * (segmentsElevated[0].points.length - 2) + pi] =
                        segmentsElevated[i].points[pi];
                }
            }
            const newKnots = new Array(newPoints.length + this.degree + 2);
            for (let i = 0; i < this.degree + 2; i++) {
                newKnots[i] = this.knots[0];
            }
            for (let i = 0; i < segmentsElevated.length; i++) {
                for (let pi = 1; pi < segmentsElevated[i].points.length - 1; pi++) {
                    newKnots[i * (segmentsElevated[0].points.length - 2) + pi + this.degree + 1] = getLast(segmentsElevated[i].knots);
                }
            }
            newKnots[newKnots.length - 1] = getLast(this.knots);
            newKnots[newKnots.length - 2] = getLast(this.knots);
            let result = new NURBS(newPoints, this.degree + 1, newKnots, this.tMin, this.tMax);
            for (let i = 0; i < segmentsElevated.length - 1; i++) {
                let optimization;
                while ((optimization = result.removeKnot(getLast(segmentsElevated[i].knots)))) {
                    result = optimization;
                }
            }
            return result;
        }
        transform(m4) {
            return this.transform4(m4);
        }
        transform4(m4) {
            return new NURBS(this.points.map((p) => m4.timesVector(p)), this.degree, this.knots, this.tMin, this.tMax);
        }
        /**
         * Returns the index of the interval which contains the value t.
         */
        tInterval(t) {
            const { degree, knots } = this;
            for (let s = degree; s < knots.length - 1 - degree; s++) {
                if (t >= knots[s] && t <= knots[s + 1]) {
                    return s;
                }
            }
            throw new Error(t + " " + knots);
        }
        static UnitCircle(sections = 2, tMin = 0, tMax = PI$3) {
            const dt = tMax - tMin;
            const tStep = dt / sections;
            const w = sin$2(PI$3 / 2 - tStep / 2);
            // cos
            const r = 1 / cos$2(tStep / 2);
            const points = arrayFromFunction(sections * 2 + 1, (i) => {
                const t = lerp$1(tMin, tMax, i / 2 / sections);
                if (i % 2 == 0) {
                    // control point on circle
                    return VV(cos$2(t), sin$2(t), 0, 1);
                }
                else {
                    return VV(r * w * cos$2(t), r * w * sin$2(t), 0, w);
                }
            });
            const knots = [];
            knots.push(tMin, tMin, tMin);
            for (let i = 0; i < sections - 1; i++) {
                const knot = lerp$1(tMin, tMax, (i + 1) / sections);
                knots.push(knot, knot);
            }
            knots.push(tMax, tMax, tMax);
            return new NURBS(points, 2, knots);
        }
        debugInfo() {
            return {
                points: [
                    ...this.knots.slice(this.degree, -this.degree).map((t) => this.at(t)),
                    ...this.points.map((p) => p.p3()),
                ],
                lines: this.points.flatMap((p, i, ps) => ps[i + 1] ? [p.p3(), ps[i + 1].p3()] : []),
            };
        }
        isTsWithPlane(planeWC) {
            const { knots, degree, points } = this;
            const controlPointTs = [
                knots[degree],
                ...points
                    .slice(1, -1)
                    .map((p, i) => this.closestTToPoint(p.p3(), undefined, knots[i + 3], knots[i + degree])),
                knots[knots.length - degree - 1],
            ];
            const result = [];
            for (let i = 0; i < this.points.length - 1; i++) {
                const findClosest = (startT) => {
                    console.log("startT", startT);
                    // try {
                    const f = (t) => {
                        const [p, dt] = this.ptDtDdt(t);
                        return [planeWC.distanceToPointSigned(p), planeWC.normal1.dot(dt)];
                    };
                    let t = newtonIterateWithDerivative2(f, startT, 8, this.tMin, this.tMax);
                    let [distanceAtT, distanceDtAtT] = undefined === t ? [undefined, undefined] : f(t);
                    if (t === undefined || !eq0(distanceAtT) || eq0(distanceDtAtT)) {
                        t = newtonIterateWithDerivative2((t) => {
                            const [, dt, ddt] = this.ptDtDdt(t);
                            return [planeWC.normal1.dot(dt), planeWC.normal1.dot(ddt)];
                        }, startT, 8, this.tMin, this.tMax);
                    }
                    [distanceAtT, distanceDtAtT] = undefined === t ? [] : f(t);
                    if (undefined !== t &&
                        eq0(distanceAtT) &&
                        !result.some((r) => eq(r, t))) {
                        result.push(t);
                    }
                };
                const a = this.points[i].p3();
                const b = this.points[i + 1].p3();
                const ad = snap0(planeWC.distanceToPointSigned(a));
                const bd = snap0(planeWC.distanceToPointSigned(b));
                if (ad * bd < 0) {
                    const startT = lerp$1(controlPointTs[i], controlPointTs[i + 1], ad / (ad - bd));
                    findClosest(startT);
                }
                else if (0 == bd) {
                    findClosest(this.closestTToPoint(b, controlPointTs[i + 1]));
                }
            }
            return result;
        }
        isInfosWithCurve(curveWC) {
            if (curveWC instanceof L3) {
                return this.isInfosWithLine(curveWC.anchor, curveWC.dir1);
            }
            return super.isInfosWithCurve(curveWC);
        }
        isInfosWithLine(anchor, dir) {
            const thisPlane = P3.fromPoints(this.points.map((p) => p.p3()));
            const l = L3.anchorDirection(anchor, dir);
            const maxDistanceToPlane = max$1(this.points.map((p) => thisPlane.distanceToPoint(p.p3())));
            const thisIsPlanar = eq0(maxDistanceToPlane);
            if (thisIsPlanar && !thisPlane.containsLine(l)) {
                const [t] = l.isTsWithPlane(thisPlane);
                if (undefined === t)
                    return [];
                const p = l.at(t);
                return this.containsPoint(p)
                    ? [{ tThis: this.pointT(p), tOther: L3.pointT(anchor, dir, p), p }]
                    : [];
            }
            else {
                const thisTs = this.isTsWithPlane(P3.normalOnAnchor(thisPlane.normal1.cross(dir), anchor));
                const infos = thisTs.map((tThis) => {
                    const p = this.at(tThis);
                    return { tThis, tOther: L3.pointT(anchor, dir, p), p };
                });
                return thisIsPlanar
                    ? infos
                    : infos.filter((info) => L3.containsPoint(anchor, dir, info.p));
            }
        }
        roots() {
            console.log(this.tMin, this.tMax);
            arraySamples(this.tMin, this.tMax, 30).forEach((t) => {
                console.log(t + "," + this.tangentAt(t).z);
            });
            const result = [[], [], []];
            for (let i = 0; i < this.points.length - 1; i++) {
                const findClosest = (startT, d) => {
                    console.log("d", d, "startT", startT);
                    // try {
                    const root = newtonIterateWithDerivative2((t) => {
                        const [, dt, ddt] = this.ptDtDdt(t);
                        return [dt.e(d), ddt.e(d)];
                    }, startT, 8, this.tMin, this.tMax);
                    if (undefined !== root) {
                        result[d].push(root);
                    }
                    console.log("d", d, "startT", startT, "root", root);
                };
                const a = this.points[i].p3();
                const b = this.points[i + 1].p3();
                const ab = a.to(b);
                for (let d = 0; d < 3; d++) {
                    if (0 !== i && eq0(ab.e(d))) {
                        const startT = lerp$1(this.knots[i], this.knots[i + this.degree + 2], 0.5);
                        findClosest(startT, d);
                    }
                    else if (i < this.points.length - 2) {
                        const bc = b.to(this.points[i + 2].p3());
                        if (!eq0(bc.e(d)) && ab.e(d) * bc.e(d) < 0) {
                            findClosest(this.closestTToPoint(b, this.guessTClosestToControlPoint(i + 1)), d);
                        }
                    }
                }
            }
            console.log(result);
            return result;
        }
        //getAABB() {
        //	return new AABB().addPoints(this.points.map(p => p.p3()))
        //}
        /**
         * Rough approximation of t param for points closest to control point.
         */
        guessTClosestToControlPoint(pointIndex) {
            return lerp$1(this.knots[pointIndex], this.knots[pointIndex + this.degree + 1], 0.5);
        }
        likeCurve(curve) {
            return (this == curve ||
                (hasConstructor(curve, NURBS) &&
                    this.degree === curve.degree &&
                    this.points.every((p, i) => p.like(curve.points[i])) &&
                    this.knots.every((k, i) => eq(k, curve.knots[i]))));
        }
        isColinearTo(curve) {
            throw new Error("This doesn't even make sense.");
        }
    }
    NURBS.EX2D = NURBS.fromV3s([
        V(51, 141),
        V(11, 76),
        V(29, 32),
        V(46, 102),
        V(74, 148),
        V(189, 107),
        V(56, 10),
        V(206, 10),
        V(211, 98),
        V(195, 141),
        V(139, 148),
    ], 4);
    NURBS.EX3D = new NURBS([
        VV(94, 0, -34, 1),
        VV(69, 57, 45, 0.5),
        VV(-20, 44, 91, 1),
        VV(-89, -13, 47, 0.5),
        VV(-56, -97, -7, 1),
        VV(34, -83, -54, 0.5),
        VV(112, -53, 16, 1),
        VV(79, 30, 70, 0.5),
        VV(-2, -9, 141, 1),
        VV(-80, -40, 72, 0.5),
        VV(-38, -150, 43, 1),
        VV(43, -110, -29, 0.5),
        VV(130, -106, 65, 1),
    ], 2, [-12, -12, -12, -8, -8, -4, -4, 0, 0, 4, 4, 8, 8, 12, 12, 12]);
    NURBS.prototype.tIncrement = 1 / 128;
    function minAndMax(arr, start = 0, end = arr.length) {
        let min = Infinity, max = -Infinity;
        for (let i = start; i < end; i++) {
            if (min > arr[i])
                min = arr[i];
            if (max < arr[i])
                max = arr[i];
        }
        return [min, max];
    }

    /**
     * Plane x DOT this.normal1 = this.w
     */
    class P3 extends Transformable {
        /**
         * Oriented plane, i.e. splits R^3 in half, with one half being "in front" of the plane.
         * Leads to multiple comparisons: isCoplanarToPlane returns if the plane occupies the same space,
         * like returns if the plane occupies the same space and has the same orientation
         *
         * Points x on the plane fulfill the equation: normal1 DOT x = w
         *
         * @param normal1 unit plane normal1
         * @param w signed (rel to normal1) distance from the origin
         */
        constructor(normal1, w = 0) {
            super();
            this.normal1 = normal1;
            this.w = w;
            assertVectors(normal1);
            assertNumbers(w);
            assert(normal1.hasLength(1), "normal1.hasLength(1)" + normal1);
        }
        get anchor() {
            return this.normal1.times(this.w);
        }
        static throughPoints(a, b, c) {
            assertVectors(a, b, c);
            const n1 = b.minus(a).cross(c.minus(a)).unit();
            return new P3(n1, n1.dot(a));
        }
        static normalOnAnchor(normal, anchor) {
            assertVectors(normal, anchor);
            const n1 = normal.unit();
            return new this(n1, n1.dot(anchor));
        }
        /**
         * Create a plane which intersects the X, Y and Z axes at the specified offsets.
         * x/x0 + y/y0 + y/y0 = 1
         */
        static forAxisIntercepts(x0, y0, z0) {
            assertNumbers(x0, y0, z0);
            const normal = new V3(1 / x0, 1 / y0, 1 / z0);
            return new P3(normal.unit(), normal.length());
        }
        /**
         * Create a plane containing `anchor` and extending in directions `v0` and `v1`.
         * `v0` and `v1` may not be parallel.
         * @param anchor
         * @param v0
         * @param v1
         */
        static forAnchorAndPlaneVectors(anchor, v0, v1) {
            assertVectors(anchor, v0, v1);
            assert(!v0.isParallelTo(v1));
            return this.normalOnAnchor(v0.cross(v1), anchor);
        }
        /**
         * Create a plane which contains botha point and a line. The point may not lie on the line.
         * @param p
         * @param line
         */
        static forPointAndLine(p, line) {
            return this.forAnchorAndPlaneVectors(line.anchor, line.dir1, line.anchor.to(p));
        }
        /**
         * ax + by + cz + d = 0
         */
        static forABCD(a, b, c, d) {
            const normalLength = Math.hypot(a, b, c);
            if (eq0(normalLength))
                return undefined;
            return new P3(new V3(a / normalLength, b / normalLength, c / normalLength), -d / normalLength);
        }
        static vanishingPlane(m4) {
            return P3.forABCD(m4.m[12], m4.m[13], m4.m[14], m4.m[15]);
        }
        static forAABB(aabb, distance = 0) {
            return [
                new P3(V3.X, aabb.max.x + distance),
                new P3(V3.X.negated(), -aabb.min.x - distance),
                new P3(V3.Y, aabb.max.y + distance),
                new P3(V3.Y.negated(), -aabb.min.y - distance),
                new P3(V3.Z, aabb.max.z + distance),
                new P3(V3.Z.negated(), -aabb.min.z - distance),
            ];
        }
        // Fit a plane to a collection of points.
        // Fast, and accurate to within a few degrees.
        // Returns None if the points do not span a plane.
        static fromPoints(points) {
            const n = points.length;
            if (n < 3) {
                return undefined;
            }
            const centroid = V3.add(...points).div(n);
            // Calculate full 3x3 covariance matrix, excluding symmetries:
            let xx = 0.0;
            let xy = 0.0;
            let xz = 0.0;
            let yy = 0.0;
            let yz = 0.0;
            let zz = 0.0;
            for (const p of points) {
                const r = p.minus(centroid);
                xx += r.x * r.x;
                xy += r.x * r.y;
                xz += r.x * r.z;
                yy += r.y * r.y;
                yz += r.y * r.z;
                zz += r.z * r.z;
            }
            xx /= n;
            xy /= n;
            xz /= n;
            yy /= n;
            yz /= n;
            zz /= n;
            let weighted_dir = V3.O;
            {
                const det_x = yy * zz - yz * yz;
                const axis_dir = new V3(det_x, xz * yz - xy * zz, xy * yz - xz * yy);
                let weight = det_x * det_x;
                if (weighted_dir.dot(axis_dir) < 0.0) {
                    weight = -weight;
                }
                weighted_dir = weighted_dir.plus(axis_dir.times(weight));
            }
            {
                const det_y = xx * zz - xz * xz;
                const axis_dir = new V3(xz * yz - xy * zz, det_y, xy * xz - yz * xx);
                let weight = det_y * det_y;
                if (weighted_dir.dot(axis_dir) < 0.0) {
                    weight = -weight;
                }
                weighted_dir = weighted_dir.plus(axis_dir.times(weight));
            }
            {
                const det_z = xx * yy - xy * xy;
                const axis_dir = new V3(xy * yz - xz * yy, xy * xz - yz * xx, det_z);
                let weight = det_z * det_z;
                if (weighted_dir.dot(axis_dir) < 0.0) {
                    weight = -weight;
                }
                weighted_dir = weighted_dir.plus(axis_dir.times(weight));
            }
            const normal = weighted_dir.unit();
            return P3.normalOnAnchor(normal, centroid);
        }
        axisIntercepts() {
            const w = this.w, n = this.normal1;
            return new V3(w / n.x, w / n.y, w / n.z);
        }
        isCoplanarToPlane(plane) {
            assertInst(P3, plane);
            return this.like(plane) || this.likeFlipped(plane);
        }
        like(plane) {
            assertInst(P3, plane);
            return eq(this.w, plane.w) && this.normal1.like(plane.normal1);
        }
        likeFlipped(plane) {
            assertInst(P3, plane);
            return eq(this.w, -plane.w) && this.normal1.like(plane.normal1.negated());
        }
        /**
         * True iff plane.normal1 is equal to this.normal1 or it's negation.
         *
         */
        isParallelToPlane(plane) {
            assertInst(P3, plane);
            return eq(1, Math.abs(this.normal1.dot(plane.normal1)));
        }
        isParallelToLine(line) {
            assertInst(L3, line);
            return eq0(this.normal1.dot(line.dir1));
        }
        isPerpendicularToLine(line) {
            assertInst(L3, line);
            // this.normal1 || line.dir1
            return eq(1, Math.abs(this.normal1.dot(line.dir1)));
        }
        isPerpendicularToPlane(plane) {
            assertInst(P3, plane);
            return eq0(this.normal1.dot(plane.normal1));
        }
        toSource() {
            return callsce("new P3", this.normal1, this.w);
        }
        translated(offset) {
            return new P3(this.normal1, this.w + offset.dot(this.normal1));
        }
        transform(m4) {
            // See https://stackoverflow.com/questions/7685495/transforming-a-3d-plane-using-a-4x4-matrix
            // See http://www.songho.ca/opengl/gl_normaltransform.html
            // with homogeneous coordinates, the hessian normal form of this plane is
            // (p, 1) * (normal1, -w) = 0
            // transformation: (m4^-1 * (p, 1)) DOT (normal1, -w) = 0
            // => (p, 1) DOT ((m4^-T) * (normal1, -w)) = 0
            // (validity of the above transformation is easily seen by expanding the matrix multiplication and dot product)
            // hence, (newNormal, newW) = (m4^-T) * (normal1, -w)
            // we divide both newNormal and newW by newNormal.length() to normalize the normal vector
            const m4InversedTransposed = M4.transpose(M4.inverse(m4, M4.temp0), M4.temp1);
            const [nx, ny, nz] = this.normal1;
            const newNormal = m4InversedTransposed.timesVector(VV(nx, ny, nz, -this.w));
            return P3.forABCD(newNormal.x, newNormal.y, newNormal.z, newNormal.w);
        }
        distanceToLine(line) {
            assertInst(L3, line);
            if (!this.isParallelToLine(line)) {
                return this.distanceToPoint(line.anchor);
            }
            else {
                return 0;
            }
        }
        containsPoint(x) {
            assertVectors(x);
            return eq(this.w, this.normal1.dot(x));
        }
        containsLine(line) {
            assertInst(L3, line);
            return this.containsPoint(line.anchor) && this.isParallelToLine(line);
        }
        distanceToPointSigned(point) {
            assertInst(V3, point);
            return this.normal1.dot(point) - this.w;
        }
        distanceToPoint(point) {
            assertInst(V3, point);
            return Math.abs(this.normal1.dot(point) - this.w);
        }
        intersectionWithLine(line) {
            return line.intersectionWithPlane(this);
        }
        intersectionWithPlane(plane) {
            assertInst(P3, plane);
            /*
        
                 this: n0 * x = w0
                 plane: n1 * x = w1
                 plane perpendicular to both which goes through origin:
                 n2 := n0 X x1
                 n2 * x = 0
                 */
            if (this.isParallelToPlane(plane)) {
                return undefined;
            }
            /*
                 var n0 = this.normal1, n1 = plane.normal1, n2 = n0.cross(n1).unit(), m = M4.forSys(n0, n1, n2)
                 var x0 = this.anchor, x1 = plane.anchor, x2 = V3.O
                 var p = n2.times(x2.dot(n2))
                 .plus(n1.cross(n2).times(x0.dot(n0)))
                 .plus(n2.cross(n0).times(x1.dot(n1)))
                 .div(m.determinant())
                 */
            const n0 = this.normal1, n1 = plane.normal1, n2 = n0.cross(n1).unit();
            const p = M4.forRows(n0, n1, n2)
                .inversed()
                .transformVector(new V3(this.w, plane.w, 0));
            return new L3(p, n2);
        }
        /**
         * Returns the point in the plane closest to the given point
         *
         */
        projectedPoint(x) {
            // See http://math.stackexchange.com/questions/444968/project-a-point-in-3d-on-a-given-plane
            // p = x - ((x - planeAnchor) * normal1) * normal1
            return x.minus(this.normal1.times(x.minus(this.anchor).dot(this.normal1)));
        }
        projectedVector(x) {
            // See V3.rejectedFrom. Simplified, as this.normal1.length() == 1
            return x.minus(this.normal1.times(x.dot(this.normal1)));
        }
        flipped() {
            return new P3(this.normal1.negated(), -this.w);
        }
        containsCurve(curve) {
            if (curve instanceof L3) {
                return this.containsLine(curve);
            }
            else if (curve instanceof EllipseCurve ||
                curve instanceof HyperbolaCurve ||
                curve instanceof ParabolaCurve) {
                return (this.containsPoint(curve.center) &&
                    this.normal1.isParallelTo(curve.normal));
            }
            else if (curve instanceof BezierCurve) {
                return curve.points.every((p) => this.containsPoint(p));
            }
            else {
                throw new Error("" + curve);
            }
        }
        equals(obj) {
            return (hasConstructor(obj, P3) &&
                this.normal1.equals(obj.normal1) &&
                this.w == obj.w);
        }
        hashCode() {
            return (this.normal1.hashCode() * 31) | (0 + floatHashCode(this.w));
        }
    }
    P3.YZ = new P3(V3.X, 0);
    P3.ZX = new P3(V3.Y, 0);
    P3.XY = new P3(V3.Z, 0);

    class Surface extends Transformable {
        static loopContainsPointGeneral(loop, pWC, testLine, lineOut) {
            const testPlane = P3.normalOnAnchor(lineOut, pWC);
            // edges colinear to the testing line; these will always be counted as "inside" relative to the testing line
            const colinearEdges = loop.map((edge) => edge.colinearToLine(testLine));
            let inside = false;
            function logIS(isP) {
                const isT = testLine.pointT(isP);
                if (eq0(isT)) {
                    return true;
                }
                else if (isT > 0) {
                    inside = !inside;
                }
                return false;
            }
            for (let edgeIndex = 0; edgeIndex < loop.length; edgeIndex++) {
                const edge = loop[edgeIndex];
                const nextEdgeIndex = (edgeIndex + 1) % loop.length, nextEdge = loop[nextEdgeIndex];
                //console.log(edge.toSource()) {p:V(2, -2.102, 0),
                if (colinearEdges[edgeIndex]) {
                    const lineAT = testLine.pointT(edge.a), lineBT = testLine.pointT(edge.b);
                    if (Math.min(lineAT, lineBT) <= NLA_PRECISION &&
                        -NLA_PRECISION <= Math.max(lineAT, lineBT)) {
                        return PointVsFace.ON_EDGE;
                    }
                    // edge colinear to intersection
                    const nextInside = colinearEdges[nextEdgeIndex] ||
                        dotCurve2(nextEdge.curve, nextEdge.aT, lineOut, sign$1(nextEdge.deltaT())) < 0;
                    if (!nextInside) {
                        if (logIS(edge.b))
                            return PointVsFace.ON_EDGE;
                    }
                }
                else {
                    for (const edgeT of edge.edgeISTsWithPlane(testPlane)) {
                        if (edgeT == edge.bT) {
                            if (!testLine.containsPoint(edge.b))
                                continue;
                            // endpoint lies on intersection line
                            if (edge.b.like(pWC)) {
                                // TODO: refactor, dont check for different sides, just logIs everything
                                return PointVsFace.ON_EDGE;
                            }
                            const edgeInside = dotCurve2(edge.curve, edge.bT, lineOut, -sign$1(edge.deltaT())) < 0;
                            const nextInside = colinearEdges[nextEdgeIndex] ||
                                dotCurve2(nextEdge.curve, nextEdge.aT, lineOut, sign$1(nextEdge.deltaT())) < 0;
                            if (edgeInside != nextInside) {
                                if (logIS(edge.b))
                                    return PointVsFace.ON_EDGE;
                            }
                        }
                        else if (edgeT != edge.aT) {
                            const p = edge.curve.at(edgeT);
                            if (!testLine.containsPoint(p))
                                continue;
                            // edge crosses line, neither starts nor ends on it
                            if (logIS(p))
                                return PointVsFace.ON_EDGE;
                            // TODO: tangents?
                        }
                    }
                }
            }
            return inside ? PointVsFace.INSIDE : PointVsFace.OUTSIDE;
        }
        static loopContainsPointEllipse(loop, pWC, testLine, pWCT) {
            const lineOut = testLine.normal;
            const testPlane = P3.normalOnAnchor(testLine.normal, pWC);
            const colinearEdges = loop.map((edge) => testLine.isColinearTo(edge.curve));
            let inside = false;
            if (undefined === pWCT) {
                pWCT = testLine.pointT(pWC);
            }
            const pT = pWCT;
            function logIS(isP) {
                const isT = testLine.pointT(isP);
                if (eq(pT, isT)) {
                    return true;
                }
                else if (pT < isT && le(isT, PI$3)) {
                    inside = !inside;
                }
                return false;
            }
            for (let edgeIndex = 0; edgeIndex < loop.length; edgeIndex++) {
                const edge = loop[edgeIndex];
                const nextEdgeIndex = (edgeIndex + 1) % loop.length, nextEdge = loop[nextEdgeIndex];
                //console.log(edge.toSource()) {p:V(2, -2.102, 0),
                if (colinearEdges[edgeIndex]) {
                    let edgeT;
                    if (edge.curve.containsPoint(pWC) &&
                        le(edge.minT, (edgeT = edge.curve.pointT(pWC))) &&
                        le(edgeT, edge.maxT)) {
                        return PointVsFace.ON_EDGE;
                    }
                    // edge colinear to intersection
                    const nextInside = colinearEdges[nextEdgeIndex] ||
                        dotCurve2(nextEdge.curve, nextEdge.aT, lineOut, sign$1(nextEdge.deltaT())) < 0;
                    if (!nextInside && testLine.containsPoint(edge.b)) {
                        if (logIS(edge.b))
                            return PointVsFace.ON_EDGE;
                    }
                }
                else {
                    for (const edgeT of edge.edgeISTsWithPlane(testPlane)) {
                        if (edgeT == edge.bT) {
                            if (!testLine.containsPoint(edge.b))
                                continue;
                            // endpoint lies on intersection testLine
                            const edgeInside = dotCurve2(edge.curve, edge.bT, lineOut, -sign$1(edge.deltaT())) < 0;
                            const nextInside = colinearEdges[nextEdgeIndex] ||
                                dotCurve2(nextEdge.curve, nextEdge.aT, lineOut, sign$1(nextEdge.deltaT())) < 0;
                            if (edgeInside != nextInside) {
                                if (logIS(edge.b))
                                    return PointVsFace.ON_EDGE;
                            }
                        }
                        else if (edgeT != edge.aT) {
                            const p = edge.curve.at(edgeT);
                            if (!testLine.containsPoint(p))
                                continue;
                            // edge crosses testLine, neither starts nor ends on it
                            if (logIS(p))
                                return PointVsFace.ON_EDGE;
                            // TODO: tangents?
                        }
                    }
                }
            }
            return inside ? PointVsFace.INSIDE : PointVsFace.OUTSIDE;
        }
        toString() {
            return this.toSource();
        }
        toSource(rounder = (x) => x) {
            return callsce.call(undefined, "new " + this.constructor.name, ...this.getConstructorParameters());
        }
        /**
         * Return points which would touch AABB. Doesnt include borders due to parametric bounds, for example.
         */
        getExtremePoints() {
            return [];
        }
        isCurvesWithSurface(surface) {
            return surface.isCurvesWithSurface(this); //.map(curve => curve.reversed())
        }
        containsCurve(curve) {
            if (curve instanceof PPCurve) {
                if (this.equals(curve.parametricSurface1) ||
                    this.equals(curve.parametricSurface2)) {
                    return true;
                }
            }
            if (curve instanceof ImplicitCurve) {
                for (let i = ceil(curve.tMin) + 1; i <= floor$1(curve.tMax) - 1; i++) {
                    if (!this.containsPoint(curve.points[i])) {
                        return false;
                    }
                }
                return true;
            }
            return false;
        }
        flipped2(doFlip) {
            return doFlip ? this.flipped() : this;
        }
        clipCurves(curves) {
            return curves;
        }
        equals(obj) {
            return (this === obj ||
                (this.constructor === obj.constructor &&
                    arrayEquals(this.getConstructorParameters(), obj.getConstructorParameters())));
        }
        hashCode() {
            return arrayHashCode(this.getConstructorParameters());
        }
        zDirVolume(allEdges) {
            return this.visit(ZDirVolumeVisitor, allEdges);
        }
        calculateArea(allEdges) {
            return this.visit(CalculateAreaVisitor, allEdges);
        }
    }
    var PointVsFace;
    (function (PointVsFace) {
        PointVsFace[PointVsFace["INSIDE"] = 0] = "INSIDE";
        PointVsFace[PointVsFace["OUTSIDE"] = 1] = "OUTSIDE";
        PointVsFace[PointVsFace["ON_EDGE"] = 2] = "ON_EDGE";
    })(PointVsFace || (PointVsFace = {}));

    class ParametricSurface extends Surface {
        constructor(uMin, uMax, vMin, vMax) {
            super();
            this.uMin = uMin;
            this.uMax = uMax;
            this.vMin = vMin;
            this.vMax = vMax;
            assertNumbers(uMin, uMax, vMin, vMax);
            assert(uMin < uMax);
            assert(vMin < vMax);
            assert(emod(this.getConstructorParameters(), -4) == this.uMin, this.getConstructorParameters(), this.uMin);
        }
        static isCurvesParametricImplicitSurface(ps, is, uStep, vStep = uStep, curveStepSize) {
            const pf = ps.pUVFunc(), icc = is.implicitFunction();
            const dpdu = ps.dpdu();
            const dpdv = ps.dpdv();
            const didp = is.didp.bind(is);
            const ist = (x, y) => icc(pf(x, y));
            const didu = (u, v) => didp(pf(u, v)).dot(dpdu(u, v));
            const didv = (u, v) => didp(pf(u, v)).dot(dpdv(u, v));
            const mf = MathFunctionR2R.forFFxFy(ist, didu, didv);
            const curves = Curve.breakDownIC(mf, ps, uStep, vStep, curveStepSize, (u, v) => is.containsPoint(pf(u, v))).map(({ points, tangents }, _i) => PICurve.forParametricPointsTangents(ps, is, points, tangents, curveStepSize));
            return curves;
        }
        static isCurvesParametricParametricSurface(ps1, ps2, s1Step, t1Step = s1Step, curveStepSize) {
            return breakDownPPCurves(ps1, ps2, s1Step, t1Step, curveStepSize);
        }
        static is(obj) {
            return obj.pUVFunc;
        }
        pUV(u, v) {
            return this.pUVFunc()(u, v);
        }
        pUVFunc() {
            return this.pUV.bind(this);
        }
        uvP(pWC) {
            return this.uvPFunc()(pWC);
        }
        uvPFunc() {
            return this.uvP.bind(this);
        }
        bounds(u, v) {
            return this.uMin <= u && u <= this.uMax && this.vMin <= v && v <= this.vMax;
        }
        /**
         * Positive values are inside bounds.
         */
        boundsSigned(u, v) {
            return min$3(u - this.uMin, this.uMax - u, v - this.vMin, this.vMax - v);
        }
        normalP(p) {
            const pmPoint = this.uvPFunc()(p);
            return this.normalUV(pmPoint.x, pmPoint.y);
        }
        normalUVFunc() {
            return this.normalUV.bind(this);
        }
        normalUV(u, v) {
            return this.normalUVFunc()(u, v);
        }
        parametersValid(u, v) {
            return between(u, this.uMin, this.uMax) && between(v, this.vMin, this.vMax);
        }
        toMesh(uStep = this.uStep, vStep = this.vStep) {
            assert(isFinite(this.vMin) &&
                isFinite(this.vMax) &&
                isFinite(this.uMin) &&
                isFinite(this.uMax));
            assert(isFinite(uStep) && isFinite(vStep));
            return Mesh.parametric(this.pUVFunc(), this.normalUVFunc(), this.uMin, this.uMax, this.vMin, this.vMax, ceil((this.uMax - this.uMin) / uStep), ceil((this.vMax - this.vMin) / vStep));
        }
        isCurvesWithImplicitSurface(is, uStep, vStep, stepSize) {
            return ParametricSurface.isCurvesParametricImplicitSurface(this, is, uStep, vStep, stepSize);
        }
        edgeLoopCCW(contour) {
            const ptpF = this.uvPFunc();
            return isCCW(contour.flatMap((e) => e.getVerticesNo0()).map((v) => ptpF(v)), V3.Z);
        }
        like(object) {
            if (!this.isCoplanarTo(object))
                return false;
            // normals need to point in the same direction (outwards or inwards) for both
            const pSMinTMin = this.pUVFunc()(this.uMin, this.vMin);
            const thisNormal = this.normalUVFunc()(this.uMin, this.vMin);
            const otherNormal = object.normalP(pSMinTMin);
            return 0 < thisNormal.dot(otherNormal);
        }
        getApproxAABB() {
            const result = new AABB();
            result.addPoints(this.getExtremePoints());
            const ps = [V(0, 0), V(0, 1), V(1, 0), V(1, 1), V(0.5, 0.5)].map((p) => this.pUV(lerp$1(this.uMin, this.uMax, p.x), lerp$1(this.vMin, this.vMax, p.y)));
            result.addPoints(ps);
            return result;
        }
    }

    class ConicSurface extends ParametricSurface {
        /**
         * returns new cone C = {apex + f1 * v * cos(u) + f2 * v * sin(u) + f3 * v |
         * -PI <= u <= PI, 0 <= v}
         *
         * If the coordinate system [f1 f2 dir] is right-handed, the normals will
         * point outwards, otherwise inwards.
         *
         * @param f1
         * @param f2
         * @param dir Direction in which the cone opens. The ellipse spanned by f1,
         *   f2 is contained at (apex + dir).
         */
        constructor(center, f1, f2, dir, uMin = 0, uMax = PI$3, vMin = 0, vMax = 16) {
            super(uMin, uMax, vMin, vMax);
            this.center = center;
            this.f1 = f1;
            this.f2 = f2;
            this.dir = dir;
            assertVectors(center, f1, f2, dir);
            assert(-PI$3 <= uMin && uMax <= PI$3);
            assert(0 <= vMin, vMin);
            this.matrix = M4.forSys(f1, f2, dir, center);
            this.matrixInverse = this.matrix.inversed();
            this.normalDir = sign$1(this.f1.cross(this.f2).dot(this.dir));
            this.pLCNormalWCMatrix = this.matrix
                .as3x3()
                .inversed()
                .transposed()
                .scale(this.normalDir);
        }
        getConstructorParameters() {
            return [
                this.center,
                this.f1,
                this.f2,
                this.dir,
                this.uMin,
                this.uMax,
                this.vMin,
                this.vMax,
            ];
        }
        pointFoot(pWC, startU, startV) {
            if (undefined === startU || undefined === startV) {
                // similar to uvP
                const pLC = this.matrixInverse.transformPoint(pWC);
                const angle = pLC.angleXY();
                if (undefined === startU) {
                    startU = angle < -PI$3 / 2 ? angle + TAU : angle;
                }
                if (undefined === startV) {
                    startV = pLC.z + (pLC.lengthXY() - pLC.z) * SQRT1_2;
                }
            }
            const f = ([u, v]) => {
                const pUVToPWC = this.pUV(u, v).to(pWC);
                return [this.dpdu()(u, v).dot(pUVToPWC), this.dpdv()(u).dot(pUVToPWC)];
            };
            const { 0: x, 1: y } = newtonIterate(f, [startU, startV]);
            return new V3(x, y, 0);
        }
        get apex() {
            return this.center;
        }
        static atApexThroughEllipse(apex, ellipse, uMin, uMax, vMin, vMax) {
            assertVectors(apex);
            assertInst(EllipseCurve, ellipse);
            return new ConicSurface(apex, ellipse.f1, ellipse.f2, apex.to(ellipse.center), uMin, uMax, vMin, vMax);
        }
        static unitISLineTs(anchor, dir) {
            const { x: ax, y: ay, z: az } = anchor;
            const { x: dx, y: dy, z: dz } = dir;
            // this cone: x² + y² = z²
            // line: p = anchor + t * dir1
            // split line equation into 3 component equations, insert into cone equation
            // transform to form (a t² + b t + c = 0) and solve with pqFormula
            const a = dx * dx + dy * dy - dz * dz;
            const b = 2 * (ax * dx + ay * dy - az * dz);
            const c = ax * ax + ay * ay - az * az;
            // cone only defined for 0 <= z, so filter invalid values
            return pqFormula(b / a, c / a).filter((t) => 0 < az + t * dz);
        }
        // calculate intersection of plane ax + cz = d and cone x² + y² = z²
        static unitISPlane(a, c, d) {
            if (eq0(c)) {
                // plane is "vertical", i.e. parallel to Y and Z axes
                assert(!eq0(a)); // normal would be zero, which is invalid
                // z² - y² = d²/a²
                if (eq0(d)) {
                    // d = 0 => z² - y² = 0 => z² = y² => z = y
                    // plane goes through origin/V3.O
                    return [
                        new L3(V3.O, new V3(0, -SQRT1_2, -SQRT1_2), undefined, 0),
                        new L3(V3.O, new V3(0, -SQRT1_2, SQRT1_2), 0),
                    ];
                }
                else {
                    // hyperbola
                    const center = new V3(d / a, 0, 0);
                    const f1 = new V3(0, 0, abs$2(d / a)); // abs, because we always want the
                    // hyperbola to be pointing up
                    const f2 = new V3(0, d / a, 0);
                    return [new HyperbolaCurve(center, f1, f2)];
                }
            }
            else {
                // c != 0
                const aa = a * a, cc = c * c;
                if (eq0(d)) {
                    // ax + cz = d => x = d - cz / a => x² = d² - 2cdz/a + c²z²/a²
                    // x² + y² = z²
                    // => d² - 2cdz/a + c²z²/a² + y² = z²
                    if (eq(aa, cc)) {
                        return [new L3(V3.O, new V3(c, 0, -a).unit())];
                    }
                    else if (aa < cc) {
                        throw new Error("intersection is single point V3.O");
                    }
                    else if (aa > cc) {
                        return [
                            new L3(V3.O, new V3(c, sqrt$1(aa - cc), -a).unit()),
                            new L3(V3.O, new V3(c, -sqrt$1(aa - cc), -a).unit()),
                        ];
                    }
                }
                else {
                    if (eq(aa, cc)) {
                        // parabola
                        const parabolaVertex = new V3(d / 2 / a, 0, d / 2 / c);
                        const parabolaVertexTangentPoint = new V3(d / 2 / a, d / c, d / 2 / c);
                        const p2 = new V3(0, 0, d / c);
                        const f2 = p2.minus(parabolaVertex);
                        return [
                            new ParabolaCurve(parabolaVertex, parabolaVertexTangentPoint.minus(parabolaVertex), f2.z < 0 ? f2.negated() : f2),
                        ];
                    }
                    else if (aa < cc) {
                        // ellipse
                        const center = new V3((-a * d) / (cc - aa), 0, (d * c) / (cc - aa));
                        if (center.z < 0) {
                            return [];
                        }
                        const p1 = new V3(d / (a - c), 0, -d / (a - c));
                        const p2 = new V3((-a * d) / (cc - aa), d / sqrt$1(cc - aa), (d * c) / (cc - aa));
                        return [
                            new EllipseCurve(center, center.to(p1), center.to(p2), -PI$3, PI$3),
                        ];
                    }
                    else if (aa > cc) {
                        // hyperbola
                        const center = new V3((-a * d) / (cc - aa), 0, (d * c) / (cc - aa));
                        // const p1 = new V3(d / (a - c), 0, -d / (a - c))
                        // const p2 = new V3(-a * d / (cc - aa), d / sqrt(aa - cc), d * c /
                        // (cc - aa)) const f1 = center.to(p1)
                        const f1 = new V3((d * c) / (aa - cc), 0, (-d * a) / (aa - cc));
                        const f2 = new V3(0, d / sqrt$1(aa - cc), 0);
                        return [new HyperbolaCurve(center, f1.z > 0 ? f1 : f1.negated(), f2)];
                    }
                }
            }
            throw new Error("???");
        }
        equals(obj) {
            return (this == obj ||
                (Object.getPrototypeOf(this) == Object.getPrototypeOf(obj) &&
                    this.center.equals(obj.center) &&
                    this.f1.equals(obj.f1) &&
                    this.f2.equals(obj.f2) &&
                    this.dir.equals(obj.dir)));
        }
        like(object) {
            if (!this.isCoplanarTo(object))
                return false;
            // normals need to point in the same direction (outwards or inwards) for
            // both
            return this.normalDir == object.normalDir;
        }
        getVectors() {
            return [
                { anchor: this.center, dir1: this.dir },
                { anchor: this.center.plus(this.dir), dir1: this.f1 },
                { anchor: this.center.plus(this.dir), dir1: this.f2 },
            ];
        }
        getSeamPlane() {
            return P3.forAnchorAndPlaneVectors(this.center, this.f1, this.dir);
        }
        loopContainsPoint(contour, p) {
            assertVectors(p);
            const line = this.center.like(p)
                ? new L3(p, this.matrix.transformVector(new V3(0, 1, 1)).unit())
                : L3.throughPoints(p, this.apex);
            const lineOut = line.dir1.cross(this.dir);
            return Surface.loopContainsPointGeneral(contour, p, line, lineOut);
        }
        isTsForLine(line) {
            // transforming line manually has advantage that dir1 will not be
            // renormalized, meaning that calculated values t for lineLC are directly
            // transferable to line
            const anchorLC = this.matrixInverse.transformPoint(line.anchor);
            const dirLC = this.matrixInverse.transformVector(line.dir1);
            return ConicSurface.unitISLineTs(anchorLC, dirLC);
        }
        /**
         * Interestingly, two cones don't need to have parallel dirs to be coplanar.
         */
        isCoplanarTo(surface) {
            if (this === surface)
                return true;
            if (!(surface instanceof ConicSurface) || !this.apex.like(surface.apex))
                return false;
            // at this point apexes are equal
            return this.containsEllipse(new EllipseCurve(surface.center.plus(surface.dir), surface.f1, surface.f2));
        }
        containsEllipse(ellipse) {
            const ellipseLC = ellipse.transform(this.matrixInverse);
            if (ellipseLC.center.z < 0) {
                return false;
            }
            const { f1, f2 } = ellipseLC.rightAngled();
            const p1 = ellipseLC.center.plus(f1), p2 = ellipseLC.center.plus(f2);
            // check if both endpoints are on the cone's surface
            // and that one main axis is perpendicular to the Z-axis
            return (eq(Math.pow(p1.x, 2) + Math.pow(p1.y, 2), Math.pow(p1.z, 2)) &&
                eq(Math.pow(p2.x, 2) + Math.pow(p2.y, 2), Math.pow(p2.z, 2)) &&
                (eq0(f1.z) || eq0(f2.z)));
        }
        containsLine(line) {
            const lineLC = line.transform(this.matrixInverse);
            const d = lineLC.dir1;
            return lineLC.containsPoint(V3.O) && eq(d.x * d.x + d.y * d.y, d.z * d.z);
        }
        containsParabola(curve) {
            assertInst(ParabolaCurve, curve);
            const curveLC = curve.transform(this.matrixInverse);
            if (curveLC.center.z < 0 || curveLC.f2.z < 0) {
                return false;
            }
            const { center, f1, f2 } = curveLC.rightAngled();
            // check if center is on the surface,
            // that tangent is perpendicular to the Z-axis
            // and that "y" axis is parallel to surface
            return (eq(center.x * center.x + center.y * center.y, center.z * center.z) &&
                eq0(f1.z) &&
                eq(f2.x * f2.x + f2.y * f2.y, f2.z * f2.z));
        }
        containsHyperbola(curve) {
            // calculate intersection of plane ax + cz = 1 and cone x² + y² = z²
            // const center = new V3(-a / (cc - aa), 0, 1 / (cc - aa))
            // const p1 = new V3(1 / (a - c), 0, -1 / (a - c))
            // const p2 = new V3(-a / (cc - aa), 1 / sqrt(aa - cc), 1 / (cc - aa))
            // const f1 = new V3(1 * c / (aa - cc), 0, -a / (aa - cc) )
            // const f2 = new V3(0, 1 / sqrt(aa - cc), 0)
            assertInst(HyperbolaCurve, curve);
            const curveLC = curve.transform(this.matrixInverse).rightAngled();
            const centerXY = curveLC.center.xy();
            if (centerXY.likeO()) {
                return false;
            }
            const rot = centerXY.angleXY();
            const { center, f1, f2 } = curveLC.rotateZ(-rot);
            // s = a / (aa - cc)
            // t = -c / (aa - cc)
            // s + t = 1 / (a + c)
            // s - t = 1 / (a - c)
            // (s + t)(s - t) = (ss - tt) = 1 / (aa - cc)
            // u = 1 / sqrt(aa - cc) = sqrt(ss - tt)
            // check if center is on the surface,
            // that tangent is perpendicular to the Z-axis
            return (f1.z > 0 &&
                eq(center.x, f1.z) &&
                eq(center.z, f1.x) &&
                eq0(center.y) &&
                eq0(f1.y) &&
                eq(sqrt$1(abs$2(Math.pow(center.x, 2) - Math.pow(center.z, 2))), abs$2(f2.y)) &&
                eq0(f2.x) &&
                eq0(f2.z));
        }
        containsCurve(curve) {
            if (curve instanceof EllipseCurve) {
                return this.containsEllipse(curve);
            }
            else if (curve instanceof L3) {
                return this.containsLine(curve);
            }
            else if (curve instanceof HyperbolaCurve) {
                return this.containsHyperbola(curve);
            }
            else if (curve instanceof ParabolaCurve) {
                return this.containsParabola(curve);
            }
            else {
                return super.containsCurve(curve);
            }
        }
        transform(m4) {
            return new ConicSurface(m4.transformPoint(this.center), m4.transformVector(this.f1).times(m4.isMirroring() ? -1 : 1), m4.transformVector(this.f2), m4.transformVector(this.dir), this.uMin, this.uMax, this.vMin, this.vMax);
        }
        transform4(m4) {
            const transformedApex = m4.timesVector(Vector.fromV3AndWeight(this.center, 1));
            const isometricV = (z) => new EllipseCurve(new V3(0, 0, z), new V3(z, 0, 0), new V3(0, z, 0));
            if (!eq0(transformedApex.w)) {
                // sMin doesn't change, but tMin does...
                const c = m4.transformPoint(this.center), f1 = m4
                    .transformVector2(this.f1, this.center)
                    .times(m4.isMirroring() ? -1 : 1), f2 = m4.transformVector2(this.f2, this.center), dir = m4.transformVector2(this.dir, this.center);
                const matrixInv = M4.forSys(f1, f2, dir, c).inversed();
                const x = isometricV(this.vMin).transform4(matrixInv.times(m4).times(this.matrix));
                const y = isometricV(this.vMax).transform4(matrixInv.times(m4).times(this.matrix));
                const aabb = AABB.forAABBs([x.getAABB(), y.getAABB()]);
                console.log("aabb", aabb);
                console.log(matrixInv.str);
                console.log(x.str, y.str);
                return new ConicSurface(c, f1, f2, dir, this.uMin, this.uMax, aabb.min.z, aabb.max.z);
            }
            else {
                const dir = transformedApex.V3();
                const baseCurve = isometricV(this.vMin).transform4(m4.times(this.matrix));
                const matrixInv = M4.forSys(baseCurve.f1, baseCurve.f2, dir.unit(), baseCurve.center).inversed();
                const aabb = isometricV(this.vMax)
                    .transform4(matrixInv.times(m4.times(this.matrix)))
                    .getAABB();
                return new CylinderSurface(baseCurve, dir.unit(), this.uMin, this.uMax, min$3(0, aabb.min.z, aabb.max.z), max$3(0, aabb.min.z, aabb.max.z));
            }
        }
        flipped() {
            return new ConicSurface(this.center, this.f1.negated(), this.f2, this.dir);
        }
        normalUVFunc() {
            const { f1, f2 } = this, f3 = this.dir;
            return (d, _z) => {
                return f2
                    .cross(f1)
                    .plus(f2.cross(f3.times(Math.cos(d))))
                    .plus(f3.cross(f1.times(Math.sin(d))))
                    .unit();
            };
        }
        normalP(p) {
            //TODO assert(!p.like(this.center))
            const pLC = this.matrixInverse.transformPoint(p);
            return this.normalUVFunc()(pLC.angleXY(), pLC.z);
        }
        pUVFunc() {
            return (u, v) => {
                // center + f1 v cos u + f2 v sin u + v dir
                const resultLC = new V3(v * cos$2(u), v * sin$2(u), v);
                return this.matrix.transformPoint(resultLC);
            };
        }
        dpdu() {
            return (u, v) => {
                const resultLC = new V3(v * -sin$2(u), v * cos$2(u), 0);
                return this.matrix.transformVector(resultLC);
            };
        }
        dpdv() {
            return (s) => {
                const resultLC = new V3(cos$2(s), sin$2(s), 1);
                return this.matrix.transformVector(resultLC);
            };
        }
        implicitFunction() {
            return (pWC) => {
                const pLC = this.matrixInverse.transformPoint(pWC);
                const radiusLC = pLC.lengthXY();
                return this.normalDir * (radiusLC - pLC.z);
            };
        }
        didp(pWC) {
            const pLC = this.matrixInverse.transformPoint(pWC);
            return this.pLCNormalWCMatrix.transformVector(pLC.xy().unit().withElement("z", -1).times(this.normalDir));
        }
        containsPoint(p) {
            return eq0(this.implicitFunction()(p));
        }
        uvP(pWC) {
            const pLC = this.matrixInverse.transformPoint(pWC);
            const angle = pLC.angleXY();
            return new V3(angle < -PI$3 / 2 ? angle + TAU : angle, pLC.z, 0);
        }
        isCurvesWithSurface(surface) {
            if (surface instanceof PlaneSurface) {
                return this.isCurvesWithPlane(surface.plane);
            }
            else if (ImplicitSurface.is(surface)) {
                return ParametricSurface.isCurvesParametricImplicitSurface(this, surface, 0.1, 0.1 / this.dir.length(), 0.02);
            }
            return super.isCurvesWithSurface(surface);
        }
        getCenterLine() {
            return new L3(this.center, this.dir);
        }
        isCurvesWithPlane(plane) {
            assertInst(P3, plane);
            const planeLC = plane.transform(this.matrixInverse);
            const planeNormal = planeLC.normal1;
            const c = planeNormal.z;
            /** "rotate" plane normal1 when passing to {@link ConicSurface.unitISPlane} so that
             *  y-component of normal1 is 0 */
            const a = planeNormal.lengthXY();
            const d = planeLC.w;
            // generated curves need to be rotated back before transforming to world
            // coordinates
            const rotationMatrix = M4.rotateZ(planeNormal.angleXY());
            const wcMatrix = eq0(planeNormal.lengthXY())
                ? this.matrix
                : this.matrix.times(rotationMatrix);
            return ConicSurface.unitISPlane(a, c, d).flatMap((curve) => {
                const curveWC = curve.transform(wcMatrix);
                if (curve instanceof EllipseCurve) {
                    const curveLC = curve.transform(rotationMatrix);
                    const ts = curveLC.isTsWithPlane(P3.ZX);
                    const intervals = getIntervals(ts, -PI$3, PI$3).filter(([a, b]) => curveLC.at((a + b) / 2).y > 0);
                    return intervals.flatMap(([a, b]) => curveWC.split(a, b));
                }
                const p = curveWC.at(0.2);
                return this.normalP(p).cross(plane.normal1).dot(curveWC.tangentAt(0.2)) >
                    0
                    ? curveWC
                    : curveWC.reversed();
            });
        }
        debugInfo() {
            return {
                ps: [this.center],
                lines: [
                    this.center,
                    this.center.plus(this.f1),
                    this.center.plus(this.f2),
                    this.center.plus(this.dir),
                ],
            };
        }
    }
    /**
     * Unit cone. x² + y² = z², 0 <= z
     */
    ConicSurface.UNIT = new ConicSurface(V3.O, V3.X, V3.Y, V3.Z);
    ConicSurface.prototype.uStep = PI$3 / 16;
    ConicSurface.prototype.vStep = 256;

    /**
     * Surface normal1 is (t, z) => this.baseCurve.tangentAt(t) X this.dir
     * Choose dir appropriately to select surface orientation.
     */
    class ProjectedCurveSurface extends ParametricSurface {
        constructor(baseCurve, dir, uMin = baseCurve.tMin, uMax = baseCurve.tMax, vMin = -100, vMax = 100) {
            super(uMin, uMax, vMin, vMax);
            this.baseCurve = baseCurve;
            this.dir = dir;
            assertInst(Curve, baseCurve);
            assertInst(V3, dir);
            assert(uMin < uMax);
            assert(vMin < vMax);
        }
        getConstructorParameters() {
            return [
                this.baseCurve,
                this.dir,
                this.uMin,
                this.uMax,
                this.vMin,
                this.vMax,
            ];
        }
        equals(obj) {
            return (this == obj ||
                (Object.getPrototypeOf(this) == Object.getPrototypeOf(obj) &&
                    this.dir.equals(obj.dir) &&
                    this.baseCurve.equals(obj.baseCurve)));
        }
        hashCode() {
            return arrayHashCode([this.dir, this.baseCurve]);
        }
        containsLine(line) {
            return this.dir.isParallelTo(line.dir1) && this.containsPoint(line.anchor);
        }
        dpdu() {
            return (u, v) => this.baseCurve.tangentAt(u);
        }
        dpdv() {
            return (u, v) => this.dir;
        }
        normalUV(u, v) {
            return this.baseCurve.tangentAt(u).cross(this.dir).unit();
        }
        pUV(u, v) {
            return this.baseCurve.at(u).plus(this.dir.times(v));
        }
        pointFoot(pWC, ss) {
            const basePlane = new P3(this.dir.unit(), 0);
            const projCurve = this.baseCurve.project(basePlane);
            const projPoint = basePlane.projectedPoint(pWC);
            const t = projCurve.closestTToPoint(projPoint, ss, this.uMin, this.uMax);
            const z = L3.pointT(this.baseCurve.at(t), this.dir, pWC);
            return new V3(t, z, 0);
        }
        uvPFunc() {
            const projPlane = new P3(this.dir.unit(), 0);
            const projBaseCurve = this.baseCurve.project(projPlane);
            return (pWC) => {
                const projPoint = projPlane.projectedPoint(pWC);
                assertNumbers(this.uMin);
                const t = projBaseCurve.pointT(projPoint, this.uMin, this.uMax);
                const z = L3.pointT(this.baseCurve.at(t), this.dir, pWC);
                return new V3(t, z, 0);
            };
        }
        isCurvesWithPlane(plane) {
            assertInst(P3, plane);
            if (this.dir.isPerpendicularTo(plane.normal1)) {
                const ts = this.baseCurve.isTsWithPlane(plane);
                return ts.map((t) => {
                    const l3dir = 0 < this.baseCurve.tangentAt(t).dot(plane.normal1)
                        ? this.dir
                        : this.dir.negated();
                    return new L3(this.baseCurve.at(t), l3dir.unit());
                });
            }
            else {
                let projCurve = this.baseCurve.transform(M4.project(plane, this.dir));
                if (this.dir.dot(plane.normal1) > 0) {
                    // we need to flip the ellipse so the tangent is correct
                    projCurve = projCurve.reversed();
                }
                return [projCurve];
            }
        }
        isCurvesWithSurface(surface) {
            if (surface instanceof PlaneSurface) {
                return this.isCurvesWithPlane(surface.plane);
            }
            if (surface instanceof ProjectedCurveSurface) {
                const dir1 = surface.dir;
                if (this.dir.isParallelTo(dir1)) {
                    const ts = surface.baseCurve.isTsWithSurface(this);
                    return ts.map((t) => {
                        const p = surface.baseCurve.at(t);
                        const correctDir = this.normalP(p).cross(surface.normalP(p));
                        return new L3(p, dir1.times(sign$1(correctDir.dot(dir1))));
                    });
                }
                else if (ImplicitSurface.is(surface)) {
                    let curves2 = ParametricSurface.isCurvesParametricImplicitSurface(this, surface, 0.1, 0.1 / surface.dir.length(), 0.05);
                    curves2 = surface.clipCurves(curves2);
                    return curves2;
                }
                else {
                    let curves2 = ParametricSurface.isCurvesParametricParametricSurface(this, surface, 0.05, 0.1 / surface.dir.length(), 0.05);
                    curves2 = this.clipCurves(curves2);
                    curves2 = surface.clipCurves(curves2);
                    return curves2;
                }
            }
            if (surface instanceof EllipsoidSurface) {
                return surface.isCurvesWithSurface(this);
            }
            return super.isCurvesWithSurface(surface);
        }
        containsPoint(pWC) {
            const uv = this.uvPFunc()(pWC);
            return this.pUVFunc()(uv.x, uv.y).like(pWC);
        }
        containsCurve(curve) {
            if (curve instanceof L3) {
                return (this.dir.isParallelTo(curve.dir1) && this.containsPoint(curve.anchor));
            }
            if (curve instanceof ImplicitCurve) {
                return super.containsCurve(curve);
            }
            // project baseCurve and test curve onto a common plane and check if the curves are alike
            const projPlane = new P3(this.dir.unit(), 0);
            const projBaseCurve = this.baseCurve.project(projPlane);
            const projCurve = curve.project(projPlane);
            return projBaseCurve.isColinearTo(projCurve);
        }
        isCoplanarTo(surface) {
            return (this == surface ||
                (hasConstructor(surface, ProjectedCurveSurface) &&
                    this.dir.isParallelTo(surface.dir) &&
                    this.containsCurve(surface.baseCurve)));
        }
        like(object) {
            if (!this.isCoplanarTo(object))
                return false;
            // normals need to point in the same direction (outwards or inwards) for both
            const p00 = this.pUVFunc()(0, 0);
            const thisNormal = this.normalUVFunc()(0, 0);
            const otherNormal = object.normalP(p00);
            return 0 < thisNormal.dot(otherNormal);
        }
        loopContainsPoint(loop, p) {
            assertVectors(p);
            assert(isFinite(p.x), p.y, p.z);
            const line = new L3(p, this.dir.unit());
            const ptpf = this.uvPFunc();
            const pp = ptpf(p);
            if (isNaN(pp.x)) {
                console.log(this.sce, p.sce);
                assert(false);
            }
            const lineOut = this.baseCurve.tangentAt(pp.x).rejectedFrom(this.dir);
            return Surface.loopContainsPointGeneral(loop, p, line, lineOut);
        }
        transform(m4) {
            const f = m4.isMirroring() ? -1 : 1;
            return new this.constructor(this.baseCurve.transform(m4), m4.transformVector(this.dir).times(f), this.uMin, this.uMax, 1 == f ? this.vMin : -this.vMax, 1 == f ? this.vMax : -this.vMin);
        }
        transform4(m4) {
            const vp = m4.vanishingPoint(this.dir);
            if (!vp) {
                const f = m4.isMirroring() ? -1 : 1;
                return new this.constructor(this.baseCurve.transform4(m4), m4.normalized().transformVector(this.dir).times(f), undefined, undefined, 1 == f ? this.vMin : -this.vMax, 1 == f ? this.vMax : -this.vMin);
            }
            const curveT = this.baseCurve.transform4(m4);
            if (curveT instanceof EllipseCurve) {
                console.log(vp.sce, curveT.sce);
                return ConicSurface.atApexThroughEllipse(vp, m4.isMirroring() ? curveT : curveT.reversed(), this.uMin, this.uMax, 1, 2);
            }
            return new PointProjectedSurface(curveT, vp, P3.throughPoints(curveT.at(curveT.tMin), curveT.at((curveT.tMin + curveT.tMax) / 2), curveT.at(curveT.tMax)), 1, this.uMin, this.uMax, 1, 2);
        }
        isTsForLine(line) {
            assertInst(L3, line);
            const projPlane = new P3(this.dir.unit(), 0);
            const projDir = projPlane.projectedVector(line.dir1);
            if (projDir.likeO()) {
                // line is parallel to this.dir
                return [];
            }
            const projAnchor = projPlane.projectedPoint(line.anchor);
            const projBaseCurve = this.baseCurve.project(projPlane);
            return projBaseCurve
                .isInfosWithLine(projAnchor, projDir, this.uMin, this.uMax, line.tMin, line.tMax)
                .map((info) => info.tOther);
        }
        flipped() {
            return new this.constructor(this.baseCurve, this.dir.negated(), this.uMin, this.uMax, -this.vMax, -this.vMin);
        }
    }
    ProjectedCurveSurface.prototype.uStep = 1 / 128;
    ProjectedCurveSurface.prototype.vStep = 256;

    /**
     * Rotation surface with r = f(z)
     */
    class RotatedCurveSurface extends ParametricSurface {
        constructor(curve, matrix = M4.IDENTITY, uMin = 0, uMax = PI$3, vMin = curve.tMin, vMax = curve.tMax) {
            // d/dz (r(z))
            super(uMin, uMax, vMin, vMax);
            this.curve = curve;
            this.matrix = matrix;
            assertInst(M4, matrix);
            assert(matrix.isNoProj());
            assert(eq0(curve.at(vMin).y));
            this.matrixInverse = matrix.inversed();
            this.vStep = this.curve.tIncrement;
        }
        getConstructorParameters() {
            return [this.curve, this.matrix, this.uMin, this.uMax, this.vMin, this.vMax];
        }
        flipped() {
            return new RotatedCurveSurface(this.curve, this.matrix.times(M4.mirror(P3.YZ)), this.uMin, this.uMax, this.vMin, this.vMax);
        }
        transform(m4) {
            return new RotatedCurveSurface(this.curve, m4.isMirroring()
                ? m4.times(this.matrix).times(M4.mirror(P3.YZ))
                : m4.times(this.matrix), this.uMin, this.uMax, this.vMin, this.vMax);
        }
        containsPoint(pWC) {
            const pLC = this.matrixInverse.transformPoint(pWC);
            const radius = pLC.lengthXY();
            return this.curve.containsPoint(new V3(radius, 0, pLC.z));
        }
        pUVFunc() {
            return (u, v) => {
                const { x: radius, z: z } = this.curve.at(v);
                return this.matrix.transformPoint(V3.polar(radius, u, z));
            };
        }
        dpdu() {
            return (u, v) => {
                const radius = this.curve.at(v).x;
                const resultLC = new V3(radius * -sin$2(u), radius * cos$2(u), 0);
                return this.matrix.transformVector(resultLC);
            };
        }
        dpdv() {
            return (u, v) => {
                const { x: drdt, z: dzdt } = this.curve.tangentAt(v);
                return this.matrix.transformVector(V3.polar(drdt, u, dzdt));
            };
        }
        normalUVFunc() {
            const matrix = this.matrix.inversed().transposed().as3x3();
            const normalLength = this.matrix.isMirroring() ? -1 : 1;
            return (u, v) => {
                const { x: drdt, z: dzdt } = this.curve.tangentAt(v);
                return matrix
                    .transformVector(V3.polar(dzdt, u, -drdt))
                    .toLength(normalLength);
            };
        }
        uvPFunc() {
            return (pWC) => {
                const pLC = this.matrixInverse.transformPoint(pWC);
                const angle = EllipseCurve.XYLCPointT(pLC, this.uMin, this.uMax);
                const radius = pLC.lengthXY();
                return new V3(angle, this.curve.pointT(new V3(radius, 0, pLC.z)), 0);
            };
        }
        pointFoot(pWC, startS, startT) {
            const pLC = this.matrixInverse.transformPoint(pWC);
            const angle = abs$2(pLC.angleXY());
            const radius = pLC.lengthXY();
            return new V3(angle, this.curve.closestTToPoint(new V3(radius, 0, pLC.z)), 0);
        }
        isTsForLine(line) {
            const anchorLC = this.matrixInverse.transformPoint(line.anchor);
            const dirLC = this.matrixInverse.transformVector(line.dir1);
            if (dirLC.isParallelTo(V3.Z)) {
                if (!fuzzyBetween(anchorLC.angleXY(), this.uMin, this.uMax))
                    return [];
                return this.curve
                    .isInfosWithLine(new V3(anchorLC.lengthXY(), 0, anchorLC.z), dirLC)
                    .map((info) => info.tOther);
            }
            else if (L3.containsPoint(anchorLC.xy(), dirLC.xy(), V3.O)) {
                // line goes through Z axis
                const dotter = dirLC.xy().unit();
                return [
                    ...this.curve.isInfosWithLine(new V3(dotter.dot(anchorLC), 0, anchorLC.z), new V3(dotter.dot(dirLC), 0, dirLC.z)),
                    ...this.curve.isInfosWithLine(new V3(-dotter.dot(anchorLC), 0, anchorLC.z), new V3(-dotter.dot(dirLC), 0, dirLC.z)),
                ]
                    .map((info) => info.tOther)
                    .filter((t) => fuzzyBetween(L3.at(anchorLC, dirLC, t).angleXY(), this.uMin, this.uMax));
            }
            else if (dirLC.isPerpendicularTo(V3.Z)) {
                const secs = this.isCurvesWithPlaneLC(new P3(V3.Z, anchorLC.z));
                if (!secs)
                    return [];
                return secs.flatMap((sec) => sec.isInfosWithLine(anchorLC, dirLC).map((info) => info.tOther));
            }
            else {
                // transform into hyperbola
                // f(t) = V(((ax + t dx)² + (ay + t dy)²) ** 1/2, 0, az + t dz)
                // f(t) = V((ax² + 2 ax t dx + t² dx² + ay² + 2 ay t dy + t² dy²) ** 1/2, 0, az + t dz)
                // f(t) = V((t² (dx² + dy²) + 2 t (ax dx + ay dy) + ax² + ay²) ** 1/2, 0, az + t * dz)
                // (anchorLC.xy + t * dirLC.xy) * dir.xy = 0
                // t * dirLC.xy² = -anchorLC.xy * dirLC.xy
                const closestTToZ = -anchorLC.xy().dot(dirLC.xy()) / dirLC.xy().squared();
                const closestPointToZ = L3.at(anchorLC, dirLC, closestTToZ);
                const scaleX = closestPointToZ.lengthXY();
                const lineGradientWC = dirLC.z / dirLC.lengthXY();
                const scaleZ = scaleX * lineGradientWC;
                const hc = HyperbolaCurve.XY.transform(M4.rotateX(90 * DEG)
                    .scale(scaleX, 0, scaleZ)
                    .translate(0, 0, closestPointToZ.z));
                const infos = hc.isInfosWithCurve(this.curve);
                return infos
                    .map((info) => (info.p.z - anchorLC.z) / dirLC.z)
                    .filter((t) => fuzzyBetween(L3.at(anchorLC, dirLC, t).angleXY(), this.uMin, this.uMax));
            }
        }
        isCurvesWithPlaneLC(planeLC) {
            if (planeLC.normal1.isParallelTo(V3.Z)) {
                return this.curve.isTsWithPlane(planeLC).map((t) => {
                    const { x: radius } = this.curve.at(t);
                    return new EllipseCurve(new V3(0, 0, planeLC.w), new V3(radius, 0, 0), new V3(0, radius, 0), this.uMin, this.uMax).transform(this.matrix);
                });
            }
            else if (planeLC.normal1.isPerpendicularTo(V3.Z) &&
                planeLC.containsPoint(V3.O)) {
                return [
                    this.curve
                        .rotateZ(V3.Y.angleRelativeNormal(planeLC.normal1, V3.Z))
                        .transform(this.matrix),
                ];
            }
            return undefined;
        }
        isCurvesWithPlane(plane) {
            const planeLC = plane.transform(this.matrixInverse);
            const planeLCCurves = this.isCurvesWithPlaneLC(planeLC);
            if (planeLCCurves) {
                return planeLCCurves.map((curve) => curve.transform(this.matrix));
            }
            else {
                return ParametricSurface.isCurvesParametricImplicitSurface(this, new PlaneSurface(plane), 0.05, 0.05, 0.02);
            }
        }
        loopContainsPoint(loop, pWC) {
            const pLC = this.matrixInverse.transformPoint(pWC);
            const angle = EllipseCurve.XYLCPointT(pLC, this.uMin, this.uMax);
            const testCurveLC = EllipseCurve.semicircle(pLC.lengthXY(), new V3(0, 0, pLC.z));
            const testCurveWC = testCurveLC.transform(this.matrix);
            return Surface.loopContainsPointEllipse(loop, pWC, testCurveWC, angle);
        }
        isCoplanarTo(surface) {
            if (this === surface)
                return true;
            if (!hasConstructor(surface, RotatedCurveSurface))
                return false;
            const surfaceLCToThisLC = this.matrixInverse.times(surface.matrix);
            assert(!surfaceLCToThisLC.X.xy().likeO());
            const zRotation = surfaceLCToThisLC.X.angleXY();
            return surface.curve
                .transform(M4.rotateZ(-zRotation).times(surfaceLCToThisLC))
                .isColinearTo(this.curve);
        }
        isCurvesWithSurface(surface) {
            if (surface instanceof PlaneSurface) {
                return this.isCurvesWithPlane(surface.plane);
            }
            return super.isCurvesWithSurface(surface);
        }
        containsCurve(curve) {
            if (curve.constructor == this.curve.constructor) {
                const curveLC = curve.transform(this.matrixInverse);
                // find a point on curveLC which isn't on the Z-axis
                const t = withMax$1([0, 0.5, 1].map((x) => lerp$1(curveLC.tMin, curveLC.tMax, x)), (t) => curveLC.at(t).lengthXY());
                const angle = curveLC.at(t).angleXY();
                const curveLCRotated = curveLC.rotateZ(-angle);
                if (this.curve.isColinearTo(curveLCRotated)) {
                    return true;
                }
            }
            if (curve instanceof EllipseCurve) {
                const curveLC = curve.transform(this.matrixInverse);
                if (curveLC.normal.isParallelTo(V3.Z)) {
                    return (curveLC.isCircular() &&
                        this.curve.containsPoint(new V3(curveLC.f1.length(), 0, curveLC.center.z)));
                }
                return false;
            }
            return super.containsCurve(curve);
        }
        getExtremePoints() {
            return getExtremePointsHelper.call(this, this.curve);
        }
        asNURBSSurface() {
            // y = 0 for baseNURBS
            const baseNURBS = NURBS.fromEllipse(this.curve);
            const rotationNURBS = NURBS.UnitCircle(2, this.vMin, this.vMax);
            return new NURBSSurface(rotationNURBS.points.flatMap((rv) => baseNURBS.points.map((b) => this.matrix.timesVector(VV(rv.x * b.x, rv.y * b.x, b.z * rv.w, rv.w * b.w)))), baseNURBS.knots, rotationNURBS.knots, baseNURBS.degree, rotationNURBS.degree, baseNURBS.tMin, baseNURBS.tMax, rotationNURBS.tMin, rotationNURBS.tMax);
        }
    }
    RotatedCurveSurface.prototype.uStep = EllipseCurve.prototype.tIncrement;
    function getExtremePointsHelper(curve) {
        // this logic comes from EllipseCurve.roots
        const f1 = this.matrix.X;
        const f2 = this.matrix.Y;
        return [0, 1, 2].flatMap((dim) => {
            const a = f2.e(dim);
            const b = -f1.e(dim);
            const xiEtas = eq0(a) && eq0(b) ? [[1, 0]] : intersectionUnitCircleLine2(a, b, 0);
            return xiEtas.flatMap(([xi, eta]) => {
                const u = Math.atan2(eta, xi);
                if (!(lt(this.uMin, u) && lt(u, this.uMax)))
                    return [];
                const testCurve = curve.transform(this.matrix.times(M4.rotateZ(u)));
                return testCurve.roots()[dim].map((v) => this.pUV(u, v));
            });
        });
    }

    class CylinderSurface extends ProjectedCurveSurface {
        // @ts-ignore
        // readonly baseCurve: EllipseCurve
        constructor(baseCurve, dir1, uMin = baseCurve.tMin, uMax = baseCurve.tMax, zMin = -Infinity, zMax = Infinity) {
            super(baseCurve, dir1, uMin, uMax, zMin, zMax);
            this.baseCurve = baseCurve;
            assertInst(EllipseCurve, baseCurve);
            //assert(!baseCurve.normal1.isPerpendicularTo(dir1), !baseCurve.normal1.isPerpendicularTo(dir1))
            this.matrix = M4.forSys(baseCurve.f1, baseCurve.f2, dir1, baseCurve.center);
            this.matrixInverse = this.matrix.inversed();
            this.normalDir = sign$1(this.baseCurve.normal.dot(this.dir));
            this.pLCNormalWCMatrix = this.matrix
                .as3x3()
                .inversed()
                .transposed()
                .scale(this.normalDir);
            this.pWCNormalWCMatrix = this.pLCNormalWCMatrix.times(this.matrixInverse);
        }
        static semicylinder(radius, sMin, sMax, tMin, tMax) {
            return new CylinderSurface(new EllipseCurve(V3.O, new V3(radius, 0, 0), new V3(0, radius, 0)), V3.Z, sMin, sMax, tMin, tMax);
        }
        /**
         *
         * @param anchorLC
         * @param dirLC not necessarily unit
         */
        static unitISLineTs(anchorLC, dirLC) {
            const { x: ax, y: ay } = anchorLC;
            const { x: dx, y: dy } = dirLC;
            // this cylinder: x² + y² = 1
            // line: p = anchorLC + t * dirLC
            // split line equation into 3 component equations, insert into cylinder equation
            // x = ax + t * dx
            // y = ay + t * dy
            // (ax² + 2 ax t dx + t²dx²) + (ay² + 2 ay t dy + t²dy²) = 1
            // transform to form (a t² + b t + c = 0) and solve with pqFormula
            const a = Math.pow(dx, 2) + Math.pow(dy, 2);
            const b = 2 * (ax * dx + ay * dy);
            const c = Math.pow(ax, 2) + Math.pow(ay, 2) - 1;
            return pqFormula(b / a, c / a).filter((t) => EllipseCurve.XYLCValid(new V3(ax + dx * t, ay + dy * t, 0)));
        }
        normalP(p) {
            return this.pLCNormalWCMatrix
                .transformVector(this.matrixInverse.transformPoint(p).xy())
                .unit();
        }
        loopContainsPoint(loop, p) {
            assertVectors(p);
            if (!this.containsPoint(p))
                return OUTSIDE;
            const line = new L3(p, this.dir.unit());
            const lineOut = this.dir.cross(this.normalP(p));
            return Surface.loopContainsPointGeneral(loop, p, line, lineOut);
        }
        isTsForLine(line) {
            assertInst(L3, line);
            // transforming line manually has advantage that dir1 will not be renormalized,
            // meaning that calculated values t for localLine are directly transferable to line
            const dirLC = this.matrixInverse.transformVector(line.dir1);
            if (dirLC.isParallelTo(V3.Z)) {
                // line is parallel to this.dir
                return [];
            }
            const anchorLC = this.matrixInverse.transformPoint(line.anchor);
            assert(!CylinderSurface.unitISLineTs(anchorLC, dirLC).length ||
                !isNaN(CylinderSurface.unitISLineTs(anchorLC, dirLC)[0]), "sad " + dirLC);
            return CylinderSurface.unitISLineTs(anchorLC, dirLC);
        }
        isCoplanarTo(surface) {
            return (this == surface ||
                (hasConstructor(surface, CylinderSurface) &&
                    this.dir.isParallelTo(surface.dir) &&
                    this.containsEllipse(surface.baseCurve, false)));
        }
        like(surface) {
            if (!this.isCoplanarTo(surface))
                return false;
            // normals need to point in the same direction (outwards or inwards) for both
            const thisFacesOut = 0 < this.baseCurve.normal.dot(this.dir);
            const objectFacesOut = 0 < surface.baseCurve.normal.dot(surface.dir);
            return thisFacesOut == objectFacesOut;
        }
        containsEllipse(ellipse, checkAABB = true) {
            const projEllipse = ellipse.transform(M4.project(this.baseCurve.getPlane(), this.dir));
            return this.baseCurve == ellipse || this.baseCurve.isColinearTo(projEllipse);
        }
        containsCurve(curve) {
            if (curve instanceof L3) {
                return this.containsLine(curve);
            }
            else if (curve instanceof EllipseCurve) {
                return this.containsEllipse(curve);
            }
            else if (curve instanceof BezierCurve) {
                return false;
            }
            else {
                return super.containsCurve(curve);
            }
        }
        implicitFunction() {
            return (pWC) => {
                const pLC = this.matrixInverse.transformPoint(pWC);
                return (pLC.lengthXY() - 1) * this.normalDir;
            };
        }
        didp(pWC) {
            const pLC = this.matrixInverse.transformPoint(pWC);
            const pLCLengthXY = pLC.lengthXY();
            const didpLC = new V3(pLC.x / pLCLengthXY, pLC.y / pLCLengthXY, 0);
            return this.pLCNormalWCMatrix.transformVector(didpLC);
        }
        containsPoint(pWC) {
            const pLC = this.matrixInverse.transformPoint(pWC);
            return this.baseCurve.isValidT(EllipseCurve.XYLCPointT(pLC, this.uMin, this.uMax));
        }
        uvP(pWC) {
            assert(arguments.length == 1);
            const pLC = this.matrixInverse.transformPoint(pWC);
            const u = EllipseCurve.XYLCPointT(pLC, this.vMin, this.vMax);
            return new V3(u, pLC.z, 0);
        }
        isCurvesWithSurface(surface2) {
            if (surface2 instanceof ProjectedCurveSurface) {
                if (surface2.dir.isParallelTo(this.dir)) {
                    const projectedCurve = surface2.baseCurve.transform(M4.project(this.baseCurve.getPlane(), this.dir));
                    return this.baseCurve.isInfosWithCurve(projectedCurve).map((info) => {
                        const lineDir = sign$1(this.normalP(info.p)
                            .cross(surface2.normalP(info.p))
                            .dot(this.dir)) || 1;
                        return new L3(info.p, this.dir.times(lineDir));
                    });
                }
            }
            if (surface2 instanceof CylinderSurface) {
                if (eq0(this.getCenterLine().distanceToLine(surface2.getCenterLine()))) {
                    throw new Error();
                }
            }
            return super.isCurvesWithSurface(surface2);
        }
        getCenterLine() {
            return new L3(this.baseCurve.center, this.dir);
        }
        facesOutwards() {
            return this.baseCurve.normal.dot(this.dir) > 0;
        }
        getSeamPlane() {
            let normal = this.baseCurve.f1.cross(this.dir);
            normal = normal.times(-sign$1(normal.dot(this.baseCurve.f2)));
            return P3.normalOnAnchor(normal, this.baseCurve.center);
        }
        clipCurves(curves) {
            return curves.flatMap((curve) => curve.clipPlane(this.getSeamPlane()));
        }
    }
    CylinderSurface.UNIT = new CylinderSurface(EllipseCurve.UNIT, V3.Z, undefined, undefined, 0, 1);
    CylinderSurface.prototype.uStep = TAU / 32;
    CylinderSurface.prototype.vStep = 256;

    class EllipsoidSurface extends ParametricSurface {
        constructor(center, f1, f2, f3, uMin = 0, uMax = PI$3, vMin = -PI$3 / 2, vMax = PI$3 / 2) {
            super(uMin, uMax, vMin, vMax);
            this.center = center;
            this.f1 = f1;
            this.f2 = f2;
            this.f3 = f3;
            assert(0 <= uMin && uMin <= PI$3, uMin);
            assert(0 <= uMax && uMax <= PI$3, uMax);
            assert(-PI$3 / 2 <= vMin && vMin <= PI$3 / 2);
            assert(-PI$3 / 2 <= vMax && vMax <= PI$3 / 2);
            assertVectors(center, f1, f2, f3);
            this.matrix = M4.forSys(f1, f2, f3, center);
            this.matrixInverse = this.matrix.inversed();
            this.normalDir = sign$1(this.f1.cross(this.f2).dot(this.f3));
            this.pLCNormalWCMatrix = this.matrix
                .as3x3()
                .inversed()
                .transposed()
                .scale(this.normalDir);
            this.pWCNormalWCMatrix = this.pLCNormalWCMatrix.times(this.matrixInverse);
        }
        static unitArea(contour) {
            const totalArea = sum(contour.map((edge) => {
                if (edge.curve instanceof PICurve) {
                    const points = edge.curve.calcSegmentPoints(edge.aT, edge.bT, edge.a, edge.b, edge.aT > edge.bT, true);
                    let sum = 0;
                    for (let i = 0; i < points.length - 1; i++) {
                        const p = points[i], ppp = points[i + 1];
                        sum += ((abs$2(p.angleXY()) + abs$2(ppp.angleXY())) / 2) * (ppp.z - p.z);
                    }
                    return sum;
                }
                else if (edge.curve instanceof EllipseCurve) {
                    const f = (t) => {
                        const at = edge.curve.at(t), tangent = edge.curve.tangentAt(t);
                        const angleXY = abs$2(at.angleXY());
                        //const arcLength = angleXY * Math.sqrt(1 - at.z ** 2) ( == at.lengthXY())
                        //const scaling = tangent.z / at.lengthXY()
                        return angleXY * tangent.z;
                    };
                    const val = glqInSteps(f, edge.aT, edge.bT, 1);
                    return val;
                }
                else {
                    throw new Error();
                }
            }));
            return totalArea;
        }
        /**
         * unit sphere: x² + y² + z² = 1
         * line: p = anchor + t * dir |^2
         * p² = (anchor + t * dir)^2
         * 1 == (anchor + t * dir)^2
         * 1 == anchor DOT anchor + 2 * anchor * t * dir + t² * dir DOT dir
         */
        static unitISTsWithLine(anchor, dir) {
            // for 0 = a t² + b t + c
            const a = dir.dot(dir);
            const b = 2 * anchor.dot(dir);
            const c = anchor.dot(anchor) - 1;
            return pqFormula(b / a, c / a).filter((t) => le(0, anchor.y + t * dir.y));
        }
        /**
         * unit sphere: x² + y² + z² = 1
         * plane: normal1 DOT p = w
         */
        static unitISCurvesWithPlane(plane) {
            const distPlaneCenter = Math.abs(plane.w);
            if (lt(distPlaneCenter, 1)) {
                // result is a circle
                // radius of circle: imagine right angled triangle (origin -> center of intersection circle -> point on
                // intersection circle) pythagoras: 1² == distPlaneCenter² + isCircleRadius² => isCircleRadius == sqrt(1 -
                // distPlaneCenter²)
                const isCircleRadius = Math.sqrt(1 - Math.pow(distPlaneCenter, 2));
                const anchorY = plane.normal1.y * plane.w;
                const d = abs$2(distPlaneCenter * isCircleRadius);
                if (le(anchorY, -d) && !eq0(distPlaneCenter)) {
                    return [];
                }
                else if (le(anchorY, 0) && !plane.normal1.isParallelTo(V3.Y)) {
                    const f1 = plane.normal1.isParallelTo(V3.Y)
                        ? V3.Z
                        : plane.normal1.cross(V3.Y).toLength(isCircleRadius);
                    const f2 = f1.cross(plane.normal1);
                    const minEta = -anchorY / f2.y, minT = max$3(0, Math.asin(minEta));
                    return [new EllipseCurve(plane.anchor, f1, f2, minT, PI$3 - minT)];
                }
                else {
                    const f2 = (plane.normal1.isParallelTo(V3.Y)
                        ? V3.X
                        : plane.normal1.cross(V3.Y)).toLength(isCircleRadius);
                    const f1 = f2.cross(plane.normal1);
                    const minXi = eq0(f1.y) ? -1 : -anchorY / f1.y, maxT = Math.acos(max$3(-1, minXi - NLA_PRECISION));
                    return [
                        new EllipseCurve(plane.anchor, f1.negated(), f2, PI$3 - maxT, PI$3),
                        new EllipseCurve(plane.anchor, f1, f2.negated(), 0, maxT),
                    ];
                }
            }
            else {
                return [];
            }
        }
        static unitISCurvesWithEllipsoidSurface(surface) {
            if (surface.isSphere()) {
                const surfaceRadius = surface.f1.length();
                const surfaceCenterDist = surface.center.length();
                if (le(1, surfaceCenterDist - surfaceRadius) ||
                    le(surfaceCenterDist + surfaceRadius, 1) ||
                    le(surfaceCenterDist - surfaceRadius, -1)) {
                    return [];
                }
                else {
                    // origin, surface.center and points on the intersection curves form a triangle.
                    // the height on the segment origin - surface.center is the radius of the is curves
                    // the distance from the origin to the lot point is the distance to the intersection plane
                    function heron(a, b, c) {
                        const p = (a + b + c) / 2;
                        return sqrt$1(p * (p - a) * (p - b) * (p - c));
                    }
                    const triangleArea = heron(1, surfaceRadius, surfaceCenterDist);
                    const radius = (triangleArea * 2) / surfaceCenterDist;
                    const isCurvesCenterDist = sign$1(1 + Math.pow(surfaceCenterDist, 2) - Math.pow(surfaceRadius, 2)) *
                        sqrt$1(1 - Math.pow(radius, 2));
                    const plane = new P3(surface.center.unit(), isCurvesCenterDist);
                    return EllipsoidSurface.unitISCurvesWithPlane(plane.flipped());
                }
            }
            throw new Error();
        }
        static unitISCurvesWithCylinderSurface(surface) {
            if (new L3(surface.baseCurve.center, surface.dir).containsPoint(V3.O)) {
                const projEllipse = surface.baseCurve.transform(M4.project(new P3(surface.dir, 0)));
                const f1Length = projEllipse.f1.length(), f2Length = projEllipse.f2.length();
                if (lt(1, min$3(f1Length, f2Length)))
                    return [];
                if (projEllipse.isCircular()) {
                    const distISCurveCenter = Math.sqrt(1 - Math.pow(min$3(1, f1Length), 2));
                    const isCurveCenter = (surface.dir.y < 0
                        ? surface.dir.negated()
                        : surface.dir).times(distISCurveCenter);
                    // isCurve.at(t).y = isCurveCenter.y + projEllipse.f1.y * cos(t) + projEllipse.f2.y * sin(t) = 0
                    return [new EllipseCurve(isCurveCenter, projEllipse.f1, projEllipse.f2)];
                }
            }
            throw new Error();
        }
        static sphere(radius, center = V3.O) {
            assertNumbers(radius);
            return new EllipsoidSurface(center, new V3(radius, 0, 0), new V3(0, radius, 0), new V3(0, 0, radius));
        }
        /**
         * x²/a² + y²/b² + z²/c² = 1
         */
        static forABC(a, b, c, center = V3.O) {
            return new EllipsoidSurface(center, new V3(a, 0, 0), new V3(0, b, 0), new V3(0, 0, c));
        }
        static calculateAreaSpheroid(a, b, c, edges) {
            assertf(() => a.isPerpendicularTo(b));
            assertf(() => b.isPerpendicularTo(c));
            assertf(() => c.isPerpendicularTo(a));
            // handling discontinuities:
            // option 1: check for intersections with baseline, if there are any integrate parts separetely
            // "rotate" the edge so that there are no overlaps
            const matrix = M4.forSys(a, b, c), matrixInverse = matrix.inversed();
            const circleRadius = a.length();
            const c1 = c.unit();
            const totalArea = sum(edges.map((edge) => {
                if (edge.curve instanceof EllipseCurve) {
                    const f = (t) => {
                        const at = edge.curve.at(t), tangent = edge.tangentAt(t);
                        const localAt = matrixInverse.transformPoint(at);
                        const angleXY = localAt.angleXY();
                        const arcLength = angleXY * circleRadius * Math.sqrt(1 + Math.pow(localAt.z, 2));
                        const scaling = Math.sqrt(1 + Math.pow(c1.dot(tangent), 2));
                        return arcLength * scaling;
                    };
                    const val = glqInSteps(f, edge.aT, edge.bT, 1);
                    return val;
                }
                else {
                    throw new Error();
                }
            }));
            return totalArea;
        }
        getConstructorParameters() {
            return [
                this.center,
                this.f1,
                this.f2,
                this.f3,
                this.uMin,
                this.uMax,
                this.vMin,
                this.vMax,
            ];
        }
        equals(obj) {
            return (this == obj ||
                (Object.getPrototypeOf(obj) == this.constructor.prototype &&
                    this.matrix.equals(obj.matrix)));
        }
        edgeLoopCCW(loop) {
            return (EllipsoidSurface.unitArea(loop.map((edge) => edge.transform(this.matrixInverse))) > 0);
            //let totalAngle = 0
            //for (let i = 0; i < contour.length; i++) {
            //    const ipp = (i + 1) % contour.length
            //    const edge = contour[i], nextEdge = contour[ipp]
            //    totalAngle += edge.bDir.angleRelativeNormal(nextEdge.aDir, this.normalP(edge.b))
            //}
            //return le(0, totalAngle)
        }
        like(object) {
            if (!this.isCoplanarTo(object))
                return false;
            // normals need to point in the same direction (outwards or inwards) for both
            return this.matrix.determinant3() * object.matrix.determinant3() > 0;
        }
        rootPoints() { }
        toMesh() {
            return ParametricSurface.prototype.toMesh.call(this);
        }
        clipCurves(curves) {
            return curves.flatMap((curve) => curve.clipPlane(this.getSeamPlane()));
        }
        dpdu() {
            // dp(u, v) = new V3(cos(t) * cos(s), cos(t) * sin(s), sin(t)
            return (u, v) => this.matrix.transformVector(new V3(cos$2(v) * -sin$2(u), cos$2(v) * cos$2(u), 0));
        }
        dpdv() {
            return (u, v) => this.matrix.transformVector(new V3(-sin$2(v) * cos$2(u), -sin$2(v) * sin$2(u), cos$2(v)));
        }
        isCurvesWithPCS(surface) {
            let curves2 = ParametricSurface.isCurvesParametricImplicitSurface(surface, this, 0.1, 0.1 / surface.dir.length(), 0.05);
            curves2 = this.clipCurves(curves2);
            return curves2;
        }
        isCurvesWithPCSSmart(surface) {
            const surfaceLC = surface.transform(this.matrixInverse);
            //const lcMinZ0RelO =
            const baseCurveLC = surfaceLC.baseCurve.project(new P3(surfaceLC.dir, 0));
            const ists = baseCurveLC.isTsWithSurface(EllipsoidSurface.UNIT);
            const insideIntervals = getIntervals(ists, baseCurveLC.tMin, baseCurveLC.tMax).filter(([a, b]) => baseCurveLC.at((a + b) / 2).length() < 1);
            const projectedCurves = [0, 1].map((id) => {
                return (t) => {
                    const atSqr = snap(baseCurveLC.at(t).squared(), 1);
                    const lineISTs = /* +- */ sqrt$1(1 - atSqr);
                    //assert(!isNaN(lineISTs))
                    return eq0(lineISTs)
                        ? baseCurveLC.at(t)
                        : baseCurveLC
                            .at(t)
                            .plus(surfaceLC.dir.times(sign$1(id - 0.5) * lineISTs));
                };
            });
            const dProjectedCurves = [0, 1].map((id) => {
                return (t) => {
                    // d/dt sqrt(1 - baseCurveLC.at(t).squared())
                    // = -1/2 * 1/sqrt(1 - baseCurveLC.at(t).squared()) * -2*baseCurveLC.at(t) * baseCurveLC.tangentAt(t)
                    const atSqr = snap(baseCurveLC.at(t).squared(), 1);
                    const lineISTs = /* +- */ baseCurveLC
                        .at(t)
                        .times(-1 / sqrt$1(1 - atSqr))
                        .dot(baseCurveLC.tangentAt(t));
                    //assert(!isNaN(lineISTs))
                    return baseCurveLC
                        .tangentAt(t)
                        .plus(surfaceLC.dir.times(sign$1(id - 0.5) * lineISTs));
                };
            });
            //const f2 = t => sqrt(1 - baseCurveLC.at(t).squared())
            //const df2 = t => baseCurveLC.at(t).times(-1 / sqrt(1 -
            // baseCurveLC.at(t).squared())).dot(baseCurveLC.tangentAt(t)) checkDerivate(f2, df2, 0.31, 0.60)
            const curves = [];
            for (const [aT, bT] of insideIntervals) {
                //const aLine = new L3(baseCurveLC.at(aT), surfaceLC.dir1)
                //const a = EllipsoidSurface.UNIT.isTsForLine(aLine).map(t => aLine.at(t))
                //const bLine = new L3(baseCurveLC.at(bT), surfaceLC.dir1)
                //const b = EllipsoidSurface.UNIT.isTsForLine(bLine).map(t => bLine.at(t))
                for (const i of [0, 1]) {
                    const f = (t) => projectedCurves[i](t).y;
                    const df = (t) => dProjectedCurves[i](t).y;
                    checkDerivate(f, df, aT + 0.1, bT - 0.1);
                    const tsAtY0 = getRoots(f, aT + NLA_PRECISION, bT - NLA_PRECISION, 1 / (1 << 11), df);
                    const ii2 = getIntervals(tsAtY0, aT, bT).filter(([a, b]) => f((a + b) / 2) > 0);
                    for (const [aT2, bT2] of ii2) {
                        let aP = projectedCurves[i](aT2), bP = projectedCurves[i](bT2);
                        0 === i && ([aP, bP] = [bP, aP]);
                        assert(EllipsoidSurface.UNIT.containsPoint(aP));
                        assert(EllipsoidSurface.UNIT.containsPoint(bP));
                        curves.push(PICurve.forStartEnd(surface, this, this.matrix.transformPoint(bP), this.matrix.transformPoint(aP), undefined));
                    }
                }
            }
            return surface.clipCurves(curves);
        }
        isCurvesWithSurface(surface) {
            if (surface instanceof PlaneSurface) {
                return this.isCurvesWithPlane(surface.plane);
            }
            else if (surface instanceof CylinderSurface) {
                return this.isCurvesWithCylinderSurface(surface);
            }
            else if (surface instanceof EllipsoidSurface) {
                const surfaceLC = surface.transform(this.matrixInverse);
                const curves = EllipsoidSurface.unitISCurvesWithEllipsoidSurface(surfaceLC).map((c) => c.transform(this.matrix));
                return surface.clipCurves(curves);
            }
            else if (surface instanceof ProjectedCurveSurface) {
                return this.isCurvesWithPCS(surface);
            }
            else if (surface instanceof ParametricSurface) {
                let curves2 = ParametricSurface.isCurvesParametricImplicitSurface(surface, this, 0.1, 0.1, 0.05);
                curves2 = this.clipCurves(curves2);
                curves2 = surface.clipCurves(curves2);
                return curves2;
            }
            else {
                throw new Error();
            }
        }
        isCurvesWithPlane(plane) {
            const planeLC = plane.transform(this.matrixInverse);
            return EllipsoidSurface.unitISCurvesWithPlane(planeLC).map((c) => c.transform(this.matrix));
        }
        isCurvesWithCylinderSurface(surface) {
            if (L3.containsPoint(surface.baseCurve.center, surface.dir, this.center)) {
                assert(this.isSphere());
                const ellipseProjected = surface.baseCurve.transform(M4.project(surface.baseCurve.getPlane(), surface.dir));
                if (ellipseProjected.isCircular()) {
                    const thisRadius = this.f1.length();
                    const surfaceRadius = ellipseProjected.f1.length();
                    assert(false);
                }
            }
            return this.isCurvesWithPCS(surface);
        }
        isTsForLine(line) {
            assertInst(L3, line);
            // transforming line manually has advantage that dir1 will not be renormalized,
            // meaning that calculated values t for localLine are directly transferable to line
            const anchorLC = this.matrixInverse.transformPoint(line.anchor);
            const dirLC = this.matrixInverse.transformVector(line.dir1);
            return EllipsoidSurface.unitISTsWithLine(anchorLC, dirLC);
        }
        isCoplanarTo(surface) {
            if (this === surface)
                return true;
            if (!hasConstructor(surface, EllipsoidSurface))
                return false;
            if (!this.center.like(surface.center))
                return false;
            if (this.isSphere())
                return surface.isSphere() && eq(this.f1.length(), this.f2.length());
            const otherMatrixLC = this.matrixInverse.times(surface.matrix);
            // Ellipsoid with matrix otherMatrixLC is unit sphere iff otherMatrixLC is orthogonal
            return otherMatrixLC.like3x3() && otherMatrixLC.isOrthogonal();
        }
        containsEllipse(ellipse) {
            const ellipseLC = ellipse.transform(this.matrixInverse);
            const distEllipseLCCenter = ellipseLC.center.length();
            const correctRadius = Math.sqrt(1 - Math.pow(distEllipseLCCenter, 2));
            return (lt(distEllipseLCCenter, 1) &&
                ellipseLC.isCircular() &&
                ellipseLC.f1.hasLength(correctRadius));
            //&& le(0, ellipseLC.getAABB().min.y)
        }
        containsCurve(curve) {
            if (curve instanceof EllipseCurve) {
                return this.containsEllipse(curve);
            }
            else {
                return super.containsCurve(curve);
            }
        }
        transform(m4) {
            assert(m4.isNoProj(), () => m4.sce);
            return new EllipsoidSurface(m4.transformPoint(this.center), m4.transformVector(this.f1), m4.transformVector(this.f2), m4.transformVector(this.f3).times(m4.isMirroring() ? -1 : 1));
        }
        transform4(m4) {
            console.log("transform4");
            const resultMatrix = m4.times(this.matrix);
            console.log(resultMatrix.toString());
            const scaleDir = V(resultMatrix.m[12], resultMatrix.m[13], resultMatrix.m[14]);
            // need to find parameters where scaleDir is parallel to the normal
            const pLC = this.pLCNormalWCMatrix.inversed().transformPoint(scaleDir);
            const s = pLC.angleXY();
            const t = Math.asin(clamp$1(pLC.z, -1, 1));
            const fa = resultMatrix.transformPoint(scaleDir.unit());
            const fb = resultMatrix.transformPoint(scaleDir.unit().negated());
            const newCenter = V3.lerp(fa, fb, 0.5);
            console.log(scaleDir.sce, s, t, fa, fb, "newCenter", newCenter.sce);
            return new EllipsoidSurface(newCenter, m4.transformVector2(this.f1, this.center), m4.transformVector2(this.f2, this.center), m4
                .transformVector2(this.f3, this.center)
                .times(m4.isMirroring() ? -1 : 1));
        }
        isInsideOut() {
            return this.f1.cross(this.f2).dot(this.f3) < 0;
        }
        flipped() {
            return new EllipsoidSurface(this.center, this.f1, this.f2, this.f3.negated(), this.uMin, this.uMax, -this.vMax, -this.vMin);
        }
        normalUVFunc() {
            // ugh
            // paramtric ellipsoid point q(a, b)
            // normal1 == (dq(a, b) / da) X (dq(a, b) / db) (cross product of partial derivatives)
            // normal1 == cos b * (f2 X f3 * cos b * cos a + f3 X f1 * cos b * sin a + f1 X f2 * sin b)
            return (a, b) => {
                const { f1, f2, f3 } = this;
                const normal = f2
                    .cross(f3)
                    .times(Math.cos(b) * Math.cos(a))
                    .plus(f3.cross(f1).times(Math.cos(b) * Math.sin(a)))
                    .plus(f1.cross(f2).times(Math.sin(b)))
                    //.times(Math.cos(b))
                    .unit();
                return normal;
            };
        }
        normalP(p) {
            return this.pLCNormalWCMatrix
                .transformVector(this.matrixInverse.transformPoint(p))
                .unit();
        }
        normalUV(u, v) {
            return this.pLCNormalWCMatrix.transformVector(V3.sphere(u, v)).unit();
        }
        uvPFunc() {
            return (pWC) => {
                const pLC = this.matrixInverse.transformPoint(pWC);
                const alpha = abs$2(pLC.angleXY());
                const beta = Math.asin(clamp$1(pLC.z, -1, 1));
                assert(isFinite(alpha));
                assert(isFinite(beta));
                return new V3(alpha, beta, 0);
            };
        }
        pUVFunc() {
            // this(a, b) = f1 cos a cos b + f2 sin a cos b + f2 sin b
            return (alpha, beta) => {
                return this.matrix.transformPoint(V3.sphere(alpha, beta));
            };
        }
        isSphere() {
            return (eq(this.f1.length(), this.f2.length()) &&
                eq(this.f2.length(), this.f3.length()) &&
                eq(this.f3.length(), this.f1.length()) &&
                this.f1.isPerpendicularTo(this.f2) &&
                this.f2.isPerpendicularTo(this.f3) &&
                this.f3.isPerpendicularTo(this.f1));
        }
        isVerticalSpheroid() {
            return (eq(this.f1.length(), this.f2.length()) &&
                this.f1.isPerpendicularTo(this.f2) &&
                this.f2.isPerpendicularTo(this.f3) &&
                this.f3.isPerpendicularTo(this.f1));
        }
        mainAxes() {
            // q(a, b) = f1 cos a cos b + f2 sin a cos b + f3 sin b
            // q(s, t, u) = s * f1 + t * f2 + u * f3 with s² + t² + u² = 1
            // (del q(a, b) / del a) = f1 (-sin a) cos b  + f2 cos a cos b
            // (del q(a, b) / del b) = f1 cos a (-sin b) + f2 sin a (-sin b) + f2 cos b
            // del q(s, t, u) / del a = -t f1 + s f2
            // (del q(a, b) / del a) DOT q(a, b) == 0
            // (f1 (-sin a) cos b  + f2 cos a cos b) DOT (f1 cos a cos b + f2 sin a cos b + f2 sin b) == 0
            // (del q(a, b) / del b) DOT q(a, b) == 0
            // (f1 cos a (-sin b) + f2 sin a (-sin b) + f2 cos b) DOT (f1 cos a cos b + f2 sin a cos b + f2 sin b) == 0
            // Solve[
            // (f1 (-sin a) cos b  + f2 cos a cos b) * (f1 cos a cos b + f2 sin a cos b + f2 sin b) = 0,
            // (f1 cos a (-sin b) + f2 sin a (-sin b) + f2 cos b) * (f1 cos a cos b + f2 sin a cos b + f2 sin b) = 0}, a, b]
            const { f1, f2, f3 } = this;
            if (eq0(f1.dot(f2)) && eq0(f2.dot(f3)) && eq0(f3.dot(f1))) {
                return this;
            }
            //const f = ([a, b], x?) => {
            //    const sinA = Math.sin(a), cosA = Math.cos(a), sinB = Math.sin(b), cosB = Math.cos(b)
            //    const centerToP = V3.add(f1.times(cosA * cosB), f2.times(sinA * cosB), f3.times(sinB))
            //    const centerToPdelA = f1.times(-sinA * cosB).plus(f2.times(cosA * cosB))
            //    const centerToPdelB = V3.add(f1.times(cosA * -sinB), f2.times(sinA * -sinB), f3.times(cosB))
            //    x && console.log(centerToP.sce, centerToPdelA.sce, centerToPdelB.sce)
            //    return [centerToP.dot(centerToPdelA), centerToP.dot(centerToPdelB)]
            //}
            //const mainF1Params = newtonIterate(f, [0, 0], 8), mainF1 = this.pUVFunc()(mainF1Params[0], mainF1Params[1])
            //console.log(f(mainF1Params, 1).sce)
            //const mainF2Params = newtonIterate(f, this.uvPFunc()(f2.rejectedFrom(mainF1)).toArray(2), 8),
            //   mainF2 = this.pUVFunc()(mainF2Params[0], mainF2Params[1])
            //console.log(this.normalUVFunc()(mainF2Params[0], mainF2Params[1]).sce)
            //assert(mainF1.isPerpendicularTo(mainF2), mainF1, mainF2, mainF1.dot(mainF2), mainF1Params)
            //const mainF3Params = this.uvPFunc()(mainF1.cross(mainF2)), mainF3 = this.pUVFunc()(mainF3Params[0],
            // mainF3Params[1]) return new EllipsoidSurface(this.center, mainF1, mainF2, mainF3)
            const { U, SIGMA } = this.matrix.svd3();
            assert(SIGMA.isDiagonal());
            assert(U.isOrthogonal());
            const U_SIGMA = U.times(SIGMA);
            // column vectors of U_SIGMA
            const [mainF1, mainF2, mainF3] = arrayFromFunction(3, (i) => new V3(U_SIGMA.m[i], U_SIGMA.m[i + 4], U_SIGMA.m[i + 8]));
            return new EllipsoidSurface(this.center, mainF1, mainF2, mainF3);
        }
        containsPoint(p) {
            return eq0(this.implicitFunction()(p));
        }
        boundsFunction() {
            return (a, b) => between(a, 0, PI$3) && between(b, -PI$3, PI$3);
        }
        volume() {
            return (4 / 3) * Math.PI * this.f1.dot(this.f2.cross(this.f3));
        }
        loopContainsPoint(loop, pWC) {
            if (!this.containsPoint(pWC))
                return PointVsFace.OUTSIDE;
            assertVectors(pWC);
            assert(Edge.isLoop(loop));
            const pLCXY = this.matrixInverse.transformPoint(pWC).xy();
            const testLine = new EllipseCurve(this.center, this.f3, pLCXY.likeO() ? this.f2 : this.matrix.transformVector(pLCXY.unit()));
            if (P3.normalOnAnchor(this.f2.unit(), this.center).containsPoint(pWC)) {
                return loop.some((edge) => edge.curve.containsPoint(pWC) &&
                    fuzzyBetween(edge.curve.pointT(pWC), edge.minT, edge.maxT))
                    ? PointVsFace.ON_EDGE
                    : PointVsFace.OUTSIDE;
            }
            return Surface.loopContainsPointEllipse(loop, pWC, testLine);
        }
        surfaceAreaApprox() {
            // See https://en.wikipedia.org/wiki/Ellipsoid#Surface_area
            const mainAxes = this.mainAxes(), a = mainAxes.f1.length(), b = mainAxes.f2.length(), c = mainAxes.f3.length();
            const p = 1.6075;
            return (4 *
                PI$3 *
                Math.pow((Math.pow(a * b, p) + Math.pow(b * c, p) + Math.pow(c * a, p)) / 3, 1 / p));
        }
        surfaceArea() {
            // See https://en.wikipedia.org/wiki/Ellipsoid#Surface_area
            const mainAxes = this.mainAxes(), f1l = mainAxes.f1.length(), f2l = mainAxes.f2.length(), f3l = mainAxes.f3.length(), [c, b, a] = [f1l, f2l, f3l].sort(MINUS);
            // https://en.wikipedia.org/w/index.php?title=Spheroid&oldid=761246800#Area
            function spheroidArea(a, c) {
                if (c < a) {
                    const eccentricity2 = 1 - Math.pow(c, 2) / Math.pow(a, 2);
                    const eccentricity = Math.sqrt(eccentricity2);
                    return (2 *
                        PI$3 *
                        Math.pow(a, 2) *
                        (1 +
                            ((1 - eccentricity2) / Math.sqrt(eccentricity)) *
                                Math.atanh(eccentricity)));
                }
                else {
                    const eccentricity = Math.sqrt(1 - Math.pow(a, 2) / Math.pow(c, 2));
                    return (2 *
                        PI$3 *
                        Math.pow(a, 2) *
                        (1 + (c / a / eccentricity) * Math.asin(eccentricity)));
                }
            }
            if (eq(a, b)) {
                return spheroidArea(a, c);
            }
            else if (eq(b, c)) {
                return spheroidArea(b, a);
            }
            else if (eq(c, a)) {
                return spheroidArea(c, b);
            }
            const phi = Math.acos(c / a);
            const kk = (Math.pow(a, 2) * (Math.pow(b, 2) - Math.pow(c, 2))) / (Math.pow(b, 2) * (Math.pow(a, 2) - Math.pow(c, 2)));
            const incompleteEllipticInt1 = gaussLegendreQuadrature24((phi) => Math.pow(1 - kk * Math.pow(Math.sin(phi), 2), -0.5), 0, phi);
            const incompleteEllipticInt2 = gaussLegendreQuadrature24((phi) => Math.pow(1 - kk * Math.pow(Math.sin(phi), 2), 0.5), 0, phi);
            return ((2 * PI$3 * Math.pow(c, 2) + (2 * PI$3 * a * b) / Math.sin(phi)) *
                (incompleteEllipticInt2 * Math.pow(Math.sin(phi), 2) +
                    incompleteEllipticInt1 * Math.pow(Math.cos(phi), 2)));
        }
        getSeamPlane() {
            const plane = P3.forAnchorAndPlaneVectors(this.center, this.f1, this.f3);
            return plane.normal1.dot(this.f2) < 0 ? plane : plane.flipped();
        }
        getExtremePoints() {
            return getExtremePointsHelper.call(this, new EllipseCurve(V3.O, V3.X, V3.Z, -PI$3 / 2, PI$3 / 2));
        }
        pointFoot(pWC, startS, startT) {
            console.log(pWC.sce);
            if (undefined === startS || undefined === startT) {
                let pLC1 = this.matrixInverse.transformPoint(pWC).unit();
                if (pLC1.y < 0)
                    pLC1 = pLC1.negated();
                ({ x: startS, y: startT } = EllipsoidSurface.UNIT.uvP(pLC1));
            }
            const dpdu = this.dpdu();
            const dpdv = this.dpdv();
            const [u, v] = newtonIterate(([u, v]) => {
                const p = this.pUV(u, v);
                console.log([p, p.plus(dpdu(u, v)), p, p.plus(dpdv(u, v))].map(toSource).join() +
                    ",");
                const pUVToPWC = this.pUV(u, v).to(pWC);
                return [pUVToPWC.dot(dpdu(u, v)), pUVToPWC.dot(dpdv(u, v))];
            }, [startS, startT], 8, undefined, 0.1);
            return new V3(u, v, 0);
        }
        implicitFunction() {
            return (pWC) => {
                const pLC = this.matrixInverse.transformPoint(pWC);
                return (pLC.length() - 1) * this.normalDir;
            };
        }
        // = this.inverseMatrix.transformPoint(this.inverseMatrix.transformPoint(pWC).unit())
        didp(pWC) {
            // i(pWC) = this.inverseMatrix.transformPoint(pWC).length() - 1
            // chain diff rule
            const pLC = this.matrixInverse.transformPoint(pWC);
            return this.pLCNormalWCMatrix.transformVector(pLC.unit()); //.times(this.normalDir)
        }
        /*+
         * An ellipsoid remains an ellipsoid after a perspective transform (as long as it does not intersect the vanishing
         * plane. This transforms a matrix with a perspective component into one which would return an identical ellipsoid,
         * but with no perspective component.
         */
        static unitTransform4(m) {
            m.m[15] !== 1 && (m = m.divScalar(m.m[15]));
            // X * P = m => X = m * P^-1
            // prettier-ignore
            const Pinv = new M4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -m.m[12], -m.m[13], -m.m[14], 1);
            const pn = new V3(m.m[12], m.m[13], m.m[14]), pw = m.m[15];
            const pwSqrMinusPnSqr = Math.pow(pw, 2) - pn.squared();
            if (lt(pwSqrMinusPnSqr, 0)) {
                throw new Error("vanishing plane intersects unit sphere");
            }
            const c = pn.div(-pwSqrMinusPnSqr);
            const scale = pn.times((pw * pn.length()) / (pn.squared() * -pwSqrMinusPnSqr));
            const scale1 = pw / -pwSqrMinusPnSqr;
            const scale2 = 1 / sqrt$1(pwSqrMinusPnSqr);
            const rotNX = M4.forSys(pn.unit(), pn.getPerpendicular().unit());
            return M4.product(m, Pinv, M4.translate(c), rotNX, M4.scale(scale1, scale2, scale2), rotNX.transposed());
        }
    }
    EllipsoidSurface.UNIT = new EllipsoidSurface(V3.O, V3.X, V3.Y, V3.Z);
    EllipsoidSurface.prototype.uStep = PI$3 / 32;
    EllipsoidSurface.prototype.vStep = PI$3 / 32;

    class PlaneSurface extends ParametricSurface {
        constructor(plane, right = plane.normal1.getPerpendicular().unit(), up = plane.normal1.cross(right).unit(), uMin = -100, uMax = 100, vMin = -100, vMax = 100) {
            super(uMin, uMax, vMin, vMax);
            this.plane = plane;
            this.right = right;
            this.up = up;
            assertInst(P3, plane);
            assert(this.right.cross(this.up).like(this.plane.normal1));
            this.matrix = M4.forSys(right, up, plane.normal1, plane.anchor);
        }
        toSource(rounder = (x) => x) {
            return callsce.call(undefined, "new PlaneSurface", ...this.getConstructorParameters());
        }
        static throughPoints(a, b, c) {
            return new PlaneSurface(P3.throughPoints(a, b, c));
        }
        static forAnchorAndPlaneVectors(anchor, v0, v1, uMin, uMax, vMin, vMax) {
            return new PlaneSurface(P3.forAnchorAndPlaneVectors(anchor, v0, v1), v0, v1, uMin, uMax, vMin, vMax);
        }
        isCoplanarTo(surface) {
            return (hasConstructor(surface, PlaneSurface) &&
                this.plane.isCoplanarToPlane(surface.plane));
        }
        isTsForLine(line) {
            return line.isTsWithPlane(this.plane);
        }
        like(surface) {
            return (hasConstructor(surface, PlaneSurface) && this.plane.like(surface.plane));
        }
        pUV(u, v) {
            return this.matrix.transformPoint(new V3(u, v, 0));
        }
        implicitFunction() {
            return (p) => this.plane.distanceToPointSigned(p);
        }
        isCurvesWithSurface(surface2) {
            if (surface2 instanceof PlaneSurface) {
                return this.isCurvesWithPlane(surface2.plane);
            }
            return super.isCurvesWithSurface(surface2);
        }
        isCurvesWithPlane(plane) {
            const result = this.plane.intersectionWithPlane(plane);
            return result ? [result] : [];
        }
        edgeLoopCCW(contour) {
            assert(Edge.isLoop(contour), "isLoop");
            return isCCW(contour.flatMap((edge) => edge.points()), this.plane.normal1);
        }
        loopContainsPoint(loop, p) {
            const dir = this.right.plus(this.up.times(0.123)).unit();
            const line = new L3(p, dir);
            const lineOut = dir.cross(this.plane.normal1);
            return Surface.loopContainsPointGeneral(loop, p, line, lineOut);
        }
        uvPFunc() {
            const matrixInverse = this.matrix.inversed();
            return function (pWC) {
                return matrixInverse.transformPoint(pWC);
            };
        }
        pointFoot(pWC) {
            return this.uvP(pWC);
        }
        normalP(pWC) {
            return this.plane.normal1;
        }
        containsPoint(p) {
            return this.plane.containsPoint(p);
        }
        containsCurve(curve) {
            return curve instanceof ImplicitCurve
                ? super.containsCurve(curve)
                : this.plane.containsCurve(curve);
        }
        transform(m4) {
            return new PlaneSurface(this.plane.transform(m4));
        }
        transform4(m4) {
            return new PlaneSurface(this.plane.transform(m4));
        }
        flipped() {
            return new PlaneSurface(this.plane.flipped(), this.right, this.up.negated());
        }
        getConstructorParameters() {
            return [
                this.plane,
                this.right,
                this.up,
                this.uMin,
                this.uMax,
                this.vMin,
                this.vMax,
            ];
        }
        dpdu() {
            return () => this.right;
        }
        dpdv() {
            return () => this.up;
        }
        didp(pWC) {
            return this.plane.normal1;
        }
        normalUV() {
            return this.plane.normal1;
        }
    }
    PlaneSurface.prototype.uStep = 1e6;
    PlaneSurface.prototype.vStep = 1e6;

    class PointProjectedSurface extends ParametricSurface {
        constructor(curve, apex, curvePlane, normalDir = 1, uMin = curve.tMin, uMax = curve.tMax, vMin = 0, vMax = 16) {
            super(uMin, uMax, vMin, vMax);
            this.curve = curve;
            this.apex = apex;
            this.curvePlane = curvePlane;
            this.normalDir = normalDir;
            assertInst(Curve, curve);
            assert(!(curve instanceof L3), "use PlaneSurface instead");
            assert(!(curve instanceof EllipseCurve), "use ConicSurface instead");
            assert(!(curve instanceof ImplicitCurve), "this just seems like a terrible idea");
            assert(new PlaneSurface(curvePlane).containsCurve(curve));
            assertVectors(apex);
            assert(0 <= vMin);
            this.planeProjectionMatrix = M4.projectPlanePoint(apex, curvePlane);
            this.uStep = curve.tIncrement;
        }
        pointFoot(pWC, startU, startV) {
            if (undefined === startU || undefined === startV) {
                // similar to stP
                if (undefined === startU) {
                    startU = pWC.like(this.apex)
                        ? 0
                        : this.curve.closestTToPoint(this.planeProjectionMatrix.transformPoint(pWC)) * this.normalDir;
                }
                if (undefined === startV) {
                    startV = V3.inverseLerp(this.apex, this.curve.at(startU), pWC);
                }
            }
            const f = ([u, v]) => {
                const pUVToPWC = this.pUV(u, v).to(pWC);
                return [this.dpdu()(u, v).dot(pUVToPWC), this.dpdv()(u).dot(pUVToPWC)];
            };
            const { 0: x, 1: y } = newtonIterate(f, [startU, startV]);
            return new V3(x, y, 0);
        }
        getConstructorParameters() {
            return [
                this.curve,
                this.apex,
                this.curvePlane,
                this.normalDir,
                this.uMin,
                this.uMax,
                this.vMin,
                this.vMax,
            ];
        }
        static unitISLineTs(anchor, dir) {
            const { x: ax, y: ay, z: az } = anchor;
            const { x: dx, y: dy, z: dz } = dir;
            // this cone: x² + y² = z²
            // line: p = anchor + t * dir1
            // split line equation into 3 component equations, insert into cone equation
            // transform to form (a t² + b t + c = 0) and solve with pqFormula
            const a = dx * dx + dy * dy - dz * dz;
            const b = 2 * (ax * dx + ay * dy - az * dz);
            const c = ax * ax + ay * ay - az * az;
            // cone only defined for 0 <= z, so filter invalid values
            return pqFormula(b / a, c / a).filter((t) => 0 < az + t * dz);
        }
        equals(obj) {
            return (this == obj ||
                (hasConstructor(obj, PointProjectedSurface) &&
                    this.curve.equals(obj.curve) &&
                    this.apex.equals(this.apex)));
        }
        like(object) {
            if (!this.isCoplanarTo(object))
                return false;
            // normals need to point in the same direction (outwards or inwards) for both
            return this.normalDir == object.normalDir;
        }
        loopContainsPoint(contour, p) {
            assertVectors(p);
            const line = this.apex.like(p)
                ? new L3(p, this.apex.to(this.curve.at(this.curve.tMin)).unit())
                : L3.throughPoints(p, this.apex);
            const lineOut = line.dir1.cross(this.curvePlane.normal1);
            return Surface.loopContainsPointGeneral(contour, p, line, lineOut);
        }
        isTsForLine(line) {
            // transforming line manually has advantage that dir1 will not be renormalized,
            // meaning that calculated values t for lineLC are directly transferable to line
            const anchorPlane = this.planeProjectionMatrix.transformPoint(line.anchor);
            const anchor2Plane = this.planeProjectionMatrix.transformPoint(line.anchor.plus(line.dir1));
            if (anchorPlane.like(anchor2Plane)) {
                // line projects onto a point in plane.
                // there are either no or infinite intersection points
                return [];
            }
            return this.curve
                .isInfosWithLine(anchorPlane, anchorPlane.to(anchor2Plane), undefined, undefined, line.tMin, line.tMax)
                .map((info) => info.tOther);
        }
        /**
         * Interestingly, two cones don't need to have parallel dirs to be coplanar.
         */
        isCoplanarTo(surface) {
            if (this === surface)
                return true;
            if (!(surface instanceof PointProjectedSurface) ||
                !this.apex.like(surface.apex))
                return false;
            // at this point apexes are equal
            return this.containsCurve(surface.curve);
        }
        containsLine(line) {
            if (this.curvePlane.isParallelToLine(line)) {
                return false;
            }
            if (!line.containsPoint(this.apex)) {
                return false;
            }
            const p = this.curvePlane.intersectionWithLine(line);
            return this.curve.containsPoint(p);
        }
        containsCurve(curve) {
            if (curve instanceof L3) {
                return this.containsLine(curve);
            }
            else if (!(curve instanceof ImplicitCurve)) {
                const otherCurveOnThisPlane = curve.transform(this.planeProjectionMatrix);
                return this.curve.isColinearTo(otherCurveOnThisPlane);
            }
            else {
                return super.containsCurve(curve);
            }
        }
        transform(m4) {
            return new PointProjectedSurface(this.curve.transform(m4), m4.transformPoint(this.apex), this.curvePlane.transform(m4), (m4.isMirroring() ? -1 : 1) * this.normalDir, this.uMin, this.uMax, this.vMin, this.vMax);
        }
        flipped() {
            return new PointProjectedSurface(this.curve, this.apex, this.curvePlane, -this.normalDir, -this.uMax, -this.uMin, this.vMin, this.vMax);
        }
        normalUVFunc() {
            const dpdv = this.dpdv();
            return (u) => this.curve
                .tangentAt(u * this.normalDir)
                .times(this.normalDir)
                .cross(dpdv(u))
                .unit();
        }
        pUVFunc() {
            return (u, v) => {
                return this.apex.lerp(this.curve.at(u * this.normalDir), v);
            };
        }
        dpdu() {
            return (u, v) => {
                return this.curve.tangentAt(u * this.normalDir).times(v * this.normalDir);
            };
        }
        dpdv() {
            return (u) => {
                return this.apex.to(this.curve.at(u * this.normalDir));
            };
        }
        containsPoint(pWC) {
            return (this.apex.like(pWC) ||
                this.curve.containsPoint(this.planeProjectionMatrix.transformPoint(pWC)));
        }
        uvP(pWC) {
            const u = pWC.like(this.apex)
                ? 0
                : this.curve.pointT(this.planeProjectionMatrix.transformPoint(pWC));
            const v = V3.inverseLerp(this.apex, this.curve.at(u), pWC);
            return new V3(u * this.normalDir, v, 0);
        }
        isCurvesWithSurface(surface) {
            if (surface instanceof PlaneSurface) {
                return this.isCurvesWithPlane(surface.plane);
            }
            else if (ImplicitSurface.is(surface)) {
                return ParametricSurface.isCurvesParametricImplicitSurface(this, surface, 0.1, 0.1 / this.curvePlane.distanceToPoint(this.apex), 0.02);
            }
            return super.isCurvesWithSurface(surface);
        }
        isCurvesWithPlane(plane) {
            if (plane.containsPoint(this.apex)) {
                if (plane.isParallelToPlane(this.curvePlane)) {
                    return [];
                }
                return this.curve
                    .isTsWithPlane(plane)
                    .map((t) => L3.throughPoints(this.apex, this.curve.at(t)));
            }
            return [this.curve.transform(M4.projectPlanePoint(this.apex, plane))];
        }
    }
    PointProjectedSurface.prototype.vStep = 256;

    class NURBSSurface extends ParametricSurface {
        constructor(
        /**
         * Control points in u-major order. I.e. the first pointCountU points are a NURBS.
         */
        points, knotsU, knotsV, degreeU, degreeV, uMin = knotsU[degreeU], uMax = knotsU[knotsU.length - degreeU - 1], vMin = knotsV[degreeV], vMax = knotsV[knotsV.length - degreeV - 1]) {
            super(uMin, uMax, vMin, vMax);
            this.points = points;
            this.knotsU = knotsU;
            this.knotsV = knotsV;
            this.degreeU = degreeU;
            this.degreeV = degreeV;
            const pointCountU = knotsU.length - 1 - degreeU;
            const pointCountV = knotsV.length - 1 - degreeV;
            assert(pointCountU * pointCountV == points.length);
            assert(degreeU <= degreeV, "degreeU <= degreeV");
            assert(-1 === firstUnsorted(knotsU, MINUS), "knot values must be in ascending order");
            assert(-1 === firstUnsorted(knotsV, MINUS), "knot values must be in ascending order");
        }
        getConstructorParameters() {
            return [
                this.points,
                this.knotsU,
                this.knotsV,
                this.degreeU,
                this.degreeV,
                this.uMin,
                this.uMax,
                this.vMin,
                this.vMax,
            ];
        }
        transform(m4) {
            return this.transform4(m4);
        }
        transform4(m4) {
            return new NURBSSurface(this.points.map((p) => m4.timesVector(p)), this.knotsU, this.knotsV, this.degreeU, this.degreeV, this.uMin, this.uMax, this.vMin, this.vMax);
        }
        pUV(u, v) {
            return this.isoparametricU(u).at(v);
        }
        dpdu() {
            return (u, v) => this.isoparametricV(v).tangentAt(u);
        }
        dpdv() {
            return (u, v) => this.isoparametricU(u).tangentAt(v);
        }
        normalUV(u, v) {
            const normal = this.dpdu()(u, v).cross(this.dpdv()(u, v));
            return normal.likeO() ? V3.X : normal.unit();
        }
        isoparametricU(u) {
            const pointCountU = this.knotsU.length - 1 - this.degreeU;
            const pointCountV = this.knotsV.length - 1 - this.degreeV;
            return new NURBS(arrayFromFunction(pointCountV, (i) => {
                return deBoor(this.points.slice(i * pointCountU, (i + 1) * pointCountU), this.degreeU, this.knotsU, u);
            }), this.degreeV, this.knotsV, this.vMin, this.vMax);
        }
        isoparametricV(v) {
            const pointCountU = this.knotsU.length - 1 - this.degreeU;
            return new NURBS(arrayFromFunction(pointCountU, (i) => {
                return deBoor(sliceStep(this.points, i, this.points.length, pointCountU, 1), this.degreeV, this.knotsV, v);
            }), this.degreeU, this.knotsU, this.uMin, this.uMax);
        }
        debugInfo() {
            const pointCountU = this.knotsU.length - 1 - this.degreeU;
            const pointCountV = this.knotsV.length - 1 - this.degreeV;
            const grid = [];
            for (let u = 0; u < pointCountU; u++) {
                for (let v = 0; v < pointCountV; v++) {
                    const i = v * pointCountU + u;
                    if (u < pointCountU - 1) {
                        const j = v * pointCountU + u + 1;
                        grid.push(this.points[i].p3(), this.points[j].p3());
                    }
                    if (v < pointCountV - 1) {
                        const j = (v + 1) * pointCountU + u;
                        grid.push(this.points[i].p3(), this.points[j].p3());
                    }
                }
            }
            return { points: this.points.map((p) => p.p3()), lines: grid };
        }
        flipped() {
            const pointCountU = this.knotsU.length - 1 - this.degreeU;
            return new NURBSSurface(arrayFromFunction(this.points.length, (i) => {
                const u = i % pointCountU;
                return this.points[i - u + (pointCountU - u - 1)];
            }), this.knotsU.map((x) => -x).reverse(), this.knotsV, this.degreeU, this.degreeV, -this.uMax, -this.uMin, this.vMin, this.vMax);
        }
        isCoplanarTo(surface) {
            throw new Error("not implemented");
        }
        isTsForLine(line) {
            // intersect line with
            const startT = 4;
            // Once we have a starting t param, there are two options:
            // 1. 1-D Newton iterate on (t) -> (distanceFromSurface)
            // 2. 3-D Newton iterate on (u, v, t) -> this.pUV(u, v).to(line.at(t))
            // Let's go with 2, because 1 will require doing a nested newton iteration.
            const [startU, startV] = this.pointFoot(line.at(startT));
            const [, , t] = newtonIterate(([u, v, t]) => {
                console.log("uvt", u, v, t);
                const lineP = line.at(t);
                return ilog(this.pUV(u, v).to(lineP).toArray());
            }, [startU, startV, startT], 8);
            return [t];
        }
        pointFoot(pWC, startU, startV) {
            const closestPointIndex = indexWithMax(this.points, (p) => -p.p3().distanceTo(pWC));
            const pointCountU = this.knotsU.length - this.degreeU - 1;
            const closestPointPos = V(closestPointIndex % pointCountU, (closestPointIndex / pointCountU) | 0);
            const start = this.guessUVForMeshPos(closestPointPos.x, closestPointPos.y);
            const dpdu = this.dpdu();
            const dpdv = this.dpdv();
            try {
                const [u, v] = newtonIterate(([u, v]) => {
                    // console.log("u,v", u, v)
                    const pUV = this.pUV(u, v);
                    const pUVToPWC = pUV.to(pWC);
                    return [pUVToPWC.dot(dpdu(u, v)), pUVToPWC.dot(dpdv(u, v))];
                }, [start.x, start.y], 16);
                return new V3(u, v, 0);
            }
            catch (e) {
                return undefined;
            }
        }
        isCurvesWithPlane(plane) {
            throw new Error("Method not implemented.");
        }
        containsPoint(pWC) {
            const foot = this.pointFoot(pWC);
            return foot && this.pUV(foot.x, foot.y).like(pWC);
        }
        loopContainsPoint(contour, point) {
            throw new Error("Method not implemented.");
        }
        guessUVForMeshPos(x, y) {
            function eLerp(arr, t, lerp) {
                if (0 === t % 1)
                    return arr[t];
                return lerp(arr[floor$1(t)], arr[ceil(t)], t % 1);
            }
            return new V3(clamp$1(eLerp(this.knotsU, x + (this.degreeU + 1) / 2, lerp$1), this.uMin, this.uMax), clamp$1(eLerp(this.knotsV, y + (this.degreeV + 1) / 2, lerp$1), this.vMin, this.vMax), 0);
        }
    }
    NURBSSurface.prototype.uStep = 1 / 8;
    NURBSSurface.prototype.vStep = 1 / 8;
    function getInterval(degree, knots, t) {
        for (let s = degree; s < knots.length - 1 - degree; s++) {
            if (t >= knots[s] && t <= knots[s + 1]) {
                return s;
            }
        }
        throw new Error(t + " " + knots);
    }
    function deBoor(points, degree, knots, t) {
        // find s (the spline segment) for the [t] value provided
        const s = getInterval(degree, knots, t);
        const v = Vector.pack(points, new Float64Array(points.length * 4));
        // l (level) goes from 1 to the curve degree + 1
        for (let l = 1; l <= degree; l++) {
            // build level l of the pyramid
            for (let i = s; i > s - degree - 1 + l; i--) {
                const alpha = (t - knots[i]) / (knots[i + degree + 1 - l] - knots[i]);
                // interpolate each component
                for (let d = 0; d < 4; d++) {
                    v[i * 4 + d] = (1 - alpha) * v[(i - 1) * 4 + d] + alpha * v[i * 4 + d];
                }
            }
        }
        return new Vector(v.slice(s * 4, s * 4 + 4));
    }

    /**
     * In general: the z-dir shadow volume of a face is the integral: SURFACE_INTEGRAL[p in face] (normal(p).z * p.z) dp
     * In general: the centroid of the z-dir shadow volume of a face is the integral:
     *     SURFACE_INTEGRAL[p in face] ((p schur (1, 1, 0.5)) * normal(p).z * p.z) dp
     *     dividing the z component by 2 is usually done at the very end
     */
    const ZDirVolumeVisitor = {
        [ConicSurface.name](edges) {
            console.log(this);
            const dpdu = this.dpdu();
            const dpdv = this.dpdv();
            // INT[edge.at; edge.bT] (at(t) DOT dir) * (at(t) - at(t).projectedOn(dir) / 2).z dt
            const totalVolume = sum(edges.map((edgeWC) => {
                const curveWC = edgeWC.curve;
                if (curveWC instanceof EllipseCurve ||
                    curveWC instanceof HyperbolaCurve ||
                    curveWC instanceof ParabolaCurve) {
                    const f = (curveT) => {
                        const at = curveWC.at(curveT), tangentWC = curveWC.tangentAt(curveT);
                        const uvOfPWC = this.uvP(at);
                        // INTEGRATE [0; atUV.y] (dpdu(atUV.x, t) X dpdv(atUV.x)).z * pUV(atUV.x, t).z dt
                        // dpdu(u, v) === t * dpdu(s, 1)
                        // => INTEGRATE [0; atUV.y] (t * dpdu(atUV.x, 1) X dpdv(atUV.x)).z * pUV(atUV.x, t).z dt
                        // => (dpdu(atUV.x, 1) X dpdv(atUV.x)).z * INTEGRATE [0; atUV.y] t * pUV(atUV.x, t).z dt
                        // pUV(u, v) === t * (pUV(s, 1) - center) + center
                        // => (dpdu(atUV.x, 1) X dpdv(atUV.x)).z
                        //      * INTEGRATE [0; atUV.y] t² * (pUV(atUV.x, t) - center).z + t * center.z dt
                        // => (dpdu(atUV.x, 1) X dpdv(atUV.x)).z
                        //      * INTEGRATE [0; atUV.y] t² * (pUV(atUV.x, t) - center).z + t * center.z dt
                        // => (dpdu(atUV.x, 1) X dpdv(atUV.x)).z
                        //      * (1/3 t³ pUV(atUV.x, 1).z + 1/2 t² center.z)[0; atUV.y]
                        const du = -M4.forSys(dpdu(uvOfPWC.x, uvOfPWC.y), dpdv(uvOfPWC.x))
                            .inversed()
                            .transformVector(tangentWC).x;
                        const factor = (Math.pow(uvOfPWC.y, 3) / 3) *
                            (this.pUV(uvOfPWC.x, 1).z - this.center.z) +
                            (Math.pow(uvOfPWC.y, 2) / 2) * this.center.z;
                        const actual = dpdu(uvOfPWC.x, factor).cross(dpdv(uvOfPWC.x)).z;
                        return actual * du;
                    };
                    const val = glqInSteps(f, edgeWC.aT, edgeWC.bT, 1);
                    return val;
                }
                else if (curveWC instanceof L3) {
                    return 0;
                }
                else {
                    throw new Error();
                }
            }));
            const centroidZX2Parts = edges.map((edgeWC) => {
                const curveWC = edgeWC.curve;
                if (curveWC instanceof EllipseCurve ||
                    curveWC instanceof HyperbolaCurve ||
                    curveWC instanceof ParabolaCurve) {
                    const f = (curveT) => {
                        const at = curveWC.at(curveT), tangentWC = curveWC.tangentAt(curveT);
                        const uvOfPWC = this.uvP(at);
                        // INTEGRATE [0; atUV.y] dpdu(atUV.x, t) X dpdv(atUV.x, t) * pUV(atUV.x, t).z dt
                        // dpdv is constant with respect to t
                        // => (dpdu(atUV.x, t) X dpdv(atUV.x, t)).z
                        //      * (INTEGRATE [0; atUV.y] t * pUV(atUV.x, t) * pUV(atUV.x, t).z dt)
                        // dpdu(u, v) === t * dpdu(s, 1)
                        // pUV(u, v) === t * (pUV(s, 1) - center) + center
                        // INTEGRATE [0; atUV.y] t * pUV(atUV.x, t) * pUV(atUV.x, t).z dt
                        // = INTEGRATE [0; atUV.y] t *
                        //                         (t * (pUV(s, 1) - center) + center) *
                        //                         (t (pUV(s, 1) - center).z + center.z) dt
                        // = INTEGRATE [0; atUV.y] t³ (pUV(s, 1) - center) * (pUV(s, 1) - center).z
                        //                       + t² ((pUV(s, 1) - center) * center.z + (pUV(s, 1) - center).z * center)
                        //                       + t center center.z dt
                        // = (1/4 t^4 (pUV(s, 1) - center) * (pUV(s, 1) - center).z
                        //   (1/3 t³ ((pUV(s, 1) - center) * center.z + (pUV(s, 1) - center).z * center)
                        //   (1/2 t² center center.z dt)[0; atUV.y]
                        const pUVS1V = this.pUV(uvOfPWC.x, 1).minus(this.center);
                        const factor = V3.add(pUVS1V.times((1 / 4) * Math.pow(uvOfPWC.y, 4) * pUVS1V.z +
                            (1 / 3) * Math.pow(uvOfPWC.y, 3) * this.center.z), this.center.times((1 / 3) * Math.pow(uvOfPWC.y, 3) * pUVS1V.z +
                            (1 / 2) * Math.pow(uvOfPWC.y, 2) * this.center.z));
                        const partialCentroid = factor.times(dpdu(uvOfPWC.x, 1).cross(dpdv(uvOfPWC.x)).z);
                        const ds = -M4.forSys(dpdu(uvOfPWC.x, uvOfPWC.y), dpdv(uvOfPWC.x))
                            .inversed()
                            .transformVector(tangentWC).x;
                        return partialCentroid.times(ds);
                    };
                    return glqV3(f, edgeWC.aT, edgeWC.bT);
                }
                else if (curveWC instanceof L3) {
                    return V3.O;
                }
                else {
                    throw new Error();
                }
            });
            const centroid = V3.add(...centroidZX2Parts)
                .schur(new V3(1, 1, 0.5))
                .div(totalVolume);
            return { volume: totalVolume, centroid: centroid };
        },
        [PlaneSurface.name](edges) {
            const r1 = this.right;
            const u1 = this.up;
            const c = this.plane.anchor;
            assert(r1.hasLength(1));
            assert(u1.hasLength(1));
            assert(r1.isPerpendicularTo(u1));
            const volumeAndCentroidZX2Parts = edges.map((edgeWC) => {
                const curveWC = edgeWC.curve;
                if (curveWC instanceof L3) {
                    // split shadow volume into two triangle shadow volumes and use the same logic as for mesh triangles:
                    function triangleShadowVolumeAndCentroid(a, b, c) {
                        const ab = b.minus(a), ac = c.minus(a);
                        const normal = ab.cross(ac);
                        const faceCentroid = V3.add(a, b, c).div(3);
                        return [
                            (faceCentroid.z * normal.z) / 2,
                            V3.add(a.times(2 * a.z + b.z + c.z), b.times(a.z + 2 * b.z + c.z), c.times(a.z + b.z + 2 * c.z)).times(normal.z),
                        ];
                    }
                    const a = edgeWC.a, b = edgeWC.b;
                    const as = a.dot(r1);
                    const bs = b.dot(r1);
                    const aBase = this.pUV(as, 0);
                    const bBase = this.pUV(bs, 0);
                    const [v1, c1] = triangleShadowVolumeAndCentroid(a, b, aBase);
                    const [v2, c2] = triangleShadowVolumeAndCentroid(bBase, aBase, b);
                    return [v1 + v2, c1.plus(c2).div(24)];
                }
                else if (curveWC instanceof ImplicitCurve) {
                    throw new Error();
                }
                else {
                    const sliceAreaAndCentroidZX2TimesDs = (curveT) => {
                        const p = curveWC.at(curveT);
                        const s = p.dot(r1);
                        const t = p.dot(u1);
                        const area = t * c.z + s * t * r1.z + (1 / 2) * Math.pow(t, 2) * u1.z;
                        const ds = -curveWC.tangentAt(curveT).dot(r1);
                        return [
                            area * ds,
                            ...V3.add(c.times(area), r1.times(c.z * s * t + r1.z * Math.pow(s, 2) * t + (1 / 2) * s * Math.pow(t, 2) * u1.z), u1.times((1 / 2) * c.z * Math.pow(t, 2) +
                                (1 / 2) * r1.z * s * Math.pow(t, 2) +
                                (1 / 3) * Math.pow(t, 3) * u1.z)).times(ds),
                        ];
                    };
                    const [vol, cx, cy, cz] = glqArray(sliceAreaAndCentroidZX2TimesDs, edgeWC.aT, edgeWC.bT, 4);
                    return [
                        vol * this.plane.normal1.z,
                        new V3(cx, cy, cz).times(this.plane.normal1.z),
                    ];
                }
            });
            return mergeVolumeAndCentroidZX2Parts(volumeAndCentroidZX2Parts);
        },
        /**
         * Generic implementation.
         */
        [ParametricSurface.name](edges) {
            const dpdu = this.dpdu();
            const dpdv = this.dpdv();
            const volume = edges.map((edgeWC) => {
                const curveWC = edgeWC.curve;
                if (curveWC instanceof ImplicitCurve) {
                    throw new Error();
                }
                else {
                    const sliceAreaAndCentroidZX2TimesDs = (curveT) => {
                        // use curve.tangent not edge.tangent, reverse edges are handled by the integration boundaries
                        const pWC = curveWC.at(curveT), tangentWC = curveWC.tangentAt(curveT);
                        const uvOfPWC = this.uvP(pWC);
                        const slice = (t) => {
                            const p = this.pUV(uvOfPWC.x, t);
                            const normal = dpdu(uvOfPWC.x, t).cross(dpdv(uvOfPWC.x, t));
                            return p.z * normal.z;
                        };
                        const sliceIntegral0ToPWCT = glqInSteps(slice, 0, uvOfPWC.y, 1);
                        // const dt = tangentWC.dot(scalingVector)
                        const dt = -M4.forSys(dpdu(uvOfPWC.x, uvOfPWC.y), dpdv(uvOfPWC.x, uvOfPWC.y))
                            .inversed()
                            .transformVector(tangentWC).x;
                        const sliceAreaTimesDs = sliceIntegral0ToPWCT * dt;
                        const slice2 = (t) => {
                            const p = this.pUV(uvOfPWC.x, t);
                            const normal = dpdu(uvOfPWC.x, t).cross(dpdv(uvOfPWC.x, t));
                            return p.times(p.z * normal.z);
                        };
                        const sliceIntegral0ToPWCT2 = glqV3(slice2, 0, uvOfPWC.y);
                        // const dt = tangentWC.dot(scalingVector)
                        const sliceCentroidZX2TimesDs = sliceIntegral0ToPWCT2.times(dt);
                        return [sliceAreaTimesDs, ...sliceCentroidZX2TimesDs.toArray()];
                    };
                    const [vol, cx, cy, cz] = glqArray(sliceAreaAndCentroidZX2TimesDs, edgeWC.aT, edgeWC.bT, 4);
                    return [vol, new V3(cx, cy, cz)];
                }
            });
            return mergeVolumeAndCentroidZX2Parts(volume);
        },
        /**
         * at(t)
         * |\                                    ^
         * | \ at(t).projectedOn(dir1)            \  dir1
         * |  \                                    \
         * |   \ at(t).rejectedFrom(dir1) = b
         * |   |
         * |___|
         *        z = 0
         *
         *
         * A = ((at(t) + at(t).rejectedFrom(dir1)) / 2).z * at(t).projectedOn(dir1).lengthXY()
         * scaling = tangentAt(t) DOT dir1.cross(V3.Z).unit()
         */
        [ProjectedCurveSurface.name](edges) {
            if (V3.Z.cross(this.dir).likeO())
                return { volume: 0, centroid: V3.O };
            // normalize this.dir so it always points up
            const upDir1 = this.dir.toLength(Math.sign(this.dir.z) || 1);
            const scalingVector = V3.Z.cross(upDir1).unit();
            // the length of the base of the trapezoid is calculated by dotting with the baseVector
            const baseVector = upDir1.rejectedFrom(V3.Z).unit();
            // INT[edge.at; edge.bT] (at(t) DOT dir1) * (at(t) - at(t).projectedOn(dir) / 2).z
            const volume = edges.map((edgeWC) => {
                if (edgeWC.curve instanceof L3) {
                    return [0, V3.O];
                }
                else if (edgeWC.curve instanceof ImplicitCurve) {
                    return [0, V3.O];
                    // 	const { points, tangents } = edgeWC.curve
                    // 	const minT = edgeWC.minT,
                    // 		maxT = edgeWC.maxT
                    // 	let sum = 0
                    // 	const start = Math.ceil(minT + NLA_PRECISION)
                    // 	const end = Math.floor(maxT - NLA_PRECISION)
                    // 	for (let i = start; i <= end; i++) {
                    // 		const at = points[i],
                    // 			tangent = tangents[i]
                    // 		const area = (at.z + at.rejectedFrom1(upDir1).z) / 2 * at.projectedOn(upDir1).dot(baseVector)
                    // 		const scale = tangent.dot(scalingVector)
                    // 		sum += area * scale
                    // 	}
                    // 	const f = (t: number) => {
                    // 		const at = edgeWC.curve.at(t),
                    // 			tangent = edgeWC.curve.tangentAt(t)
                    // 		const area = (at.z + at.rejectedFrom1(upDir1).z) / 2 * at.projectedOn(upDir1).dot(baseVector)
                    // 		const scale = tangent.dot(scalingVector)
                    // 		return area * scale
                    // 	}
                    // 	sum += f(minT) * (start - minT - 0.5)
                    // 	sum += f(maxT) * (maxT - end - 0.5)
                    // 	return sum * Math.sign(edgeWC.deltaT())
                }
                else {
                    const f = (curveT) => {
                        // use curve.tangent not edge.tangent, reverse edges are handled by the integration boundaries
                        const at = edgeWC.curve.at(curveT), tangent = edgeWC.curve.tangentAt(curveT);
                        const b = at.rejectedFrom1(upDir1);
                        const area = (at.z * b.to(at).dot(baseVector)) / 2 +
                            (b.z * b.to(at).dot(baseVector)) / 2;
                        const areaCentroidA = V3.add(at.xy(), b, at).times((at.z * b.to(at).dot(baseVector)) / 2 / 3);
                        const areaCentroidB = V3.add(at.xy(), b, b.xy()).times((b.z * b.to(at).dot(baseVector)) / 2 / 3);
                        const scale = tangent.dot(scalingVector);
                        return [
                            area * scale,
                            ...areaCentroidA.plus(areaCentroidB).times(scale).schur(V(1, 1, 2)),
                        ];
                    };
                    const [vol, cx, cy, cz] = glqArray(f, edgeWC.aT, edgeWC.bT, 4);
                    return [vol, new V3(cx, cy, cz)];
                }
            });
            return mergeVolumeAndCentroidZX2Parts(volume);
        },
        // volume does scale linearly, so this could be done in the local coordinate system
        // however, shear matrices lead to point-to-plane distances having to be calculated along a vector other than
        // the plane normal
        [RotatedCurveSurface.name](edges) {
            const dpdu = this.dpdu();
            const dpdv = this.dpdv();
            const totalVolume = sum(edges.map((edgeWC) => {
                const curveWC = edgeWC.curve;
                const f = (curveT) => {
                    const pWC = curveWC.at(curveT), tangentWC = curveWC.tangentAt(curveT);
                    const uvOfPWC = this.uvP(pWC);
                    const pLC = this.matrixInverse.transformPoint(pWC);
                    const dpdvAtS0 = this instanceof RotatedCurveSurface
                        ? this.curve.tangentAt(uvOfPWC.y)
                        : V(-pLC.z, 0, pLC.lengthXY());
                    // const slice = (phi: number) => {
                    // 	const p = this.pUV(phi, uvOfPWC.y)
                    // 	const normal = dpdu(phi, uvOfPWC.y).cross(dpdv(phi, uvOfPWC.y))
                    // 	return p.z * normal.z
                    // }
                    // const z = this.curve.at(uvOfPWC.y).z
                    // const r = this.curve.at(uvOfPWC.y).lengthXY()
                    // const pz =
                    // 	this.f1.z * r * cos(s) +
                    // 	this.f2.z * r * sin(s) +
                    // 	this.f3.z * z +
                    // 	this.center.z
                    // const dpdux = this.f1.x * r * -sin(s) + this.f2.x * r * cos(s)
                    // const dpduy = this.f1.y * r * -sin(s) + this.f2.y * r * cos(s)
                    // const dpdvx = this.f1.x * dr * cos(s) + this.f2.x * dr * sin(s) + this.f3.x * dz
                    // const dpdvy = this.f1.y * dr * cos(s) + this.f2.y * dr * sin(s) + this.f3.y * dz
                    // const normalz = dpdux * dpdvy - dpduy * dpdvx
                    // result = pz * normalz
                    const r = pLC.lengthXY(), z = pLC.z;
                    const dr = dpdvAtS0.x;
                    const dz = dpdvAtS0.z;
                    const a = this.matrix.X.z * r, b = this.matrix.Y.z * r, c = this.matrix.Z.z * z + this.matrix.O.z;
                    const t0 = (this.matrix.X.x * this.matrix.Y.y -
                        this.matrix.X.y * this.matrix.Y.x) *
                        r *
                        dr;
                    const t1 = (this.matrix.Y.x * this.matrix.X.y -
                        this.matrix.Y.y * this.matrix.X.x) *
                        r *
                        dr;
                    const t2 = (this.matrix.X.x * this.matrix.X.y -
                        this.matrix.X.y * this.matrix.X.x) *
                        r *
                        dr;
                    const t3 = (this.matrix.Y.x * this.matrix.Y.y -
                        this.matrix.Y.y * this.matrix.Y.x) *
                        r *
                        dr;
                    const t4 = (this.matrix.Y.x * this.matrix.Z.y -
                        this.matrix.Y.y * this.matrix.Z.x) *
                        r *
                        dz;
                    const t5 = (this.matrix.X.x * this.matrix.Z.y -
                        this.matrix.X.y * this.matrix.Z.x) *
                        r *
                        dz;
                    const sliceIntegral = (p) => {
                        return ((6 * (c * (-t0 + t1) + a * t4 - b * t5) * p +
                            3 *
                                (3 * b * t0 - b * t1 + a * (t2 - t3) + 4 * c * t5) *
                                cos$2(p) +
                            3 *
                                (3 * a * t1 - a * t0 - b * (t2 - t3) + 4 * c * t4) *
                                sin$2(p) +
                            3 * (a * t5 - b * t4 + c * (t2 - t3)) * cos$2(2 * p) +
                            3 * (a * t4 + b * t5 + c * (t0 + t1)) * sin$2(2 * p) +
                            (a * (t2 - t3) - b * (t0 + t1)) * cos$2(3 * p) +
                            (a * (t0 + t1) + b * (t2 - t3)) * sin$2(3 * p)) /
                            12);
                    };
                    const dt = M4.forSys(dpdu(uvOfPWC.x, uvOfPWC.y), dpdv(uvOfPWC.x, uvOfPWC.y))
                        .inversed()
                        .transformVector(tangentWC).y;
                    const sliceIntegral0ToPWCS = sliceIntegral(uvOfPWC.x); //- sliceIntegral(0) //(always 0)
                    const result = sliceIntegral0ToPWCS * dt;
                    return result;
                };
                return gaussLegendreQuadrature24(f, edgeWC.aT, edgeWC.bT);
            }));
            // calc centroid:
            const centroidZX2Parts = edges.map((edgeWC) => {
                const f = (curveT) => {
                    const curveWC = edgeWC.curve;
                    const pWC = curveWC.at(curveT), tangentWC = curveWC.tangentAt(curveT);
                    const uvOfPWC = this.uvP(pWC);
                    const slice = (phi) => {
                        const p = this.pUV(phi, uvOfPWC.y);
                        const normal = dpdu(phi, uvOfPWC.y).cross(dpdv(phi, uvOfPWC.y));
                        return p.times(p.z * normal.z);
                    };
                    const sliceIntegral0ToPWCS = glqV3(slice, 0, uvOfPWC.x);
                    const dt = M4.forSys(dpdu(uvOfPWC.x, uvOfPWC.y), dpdv(uvOfPWC.x, uvOfPWC.y))
                        .inversed()
                        .transformVector(tangentWC).y;
                    const result = sliceIntegral0ToPWCS.times(dt);
                    return result;
                };
                return glqV3(f, edgeWC.aT, edgeWC.bT);
            });
            const centroid = V3.add(...centroidZX2Parts)
                .schur(new V3(1, 1, 0.5))
                .div(totalVolume);
            return { volume: totalVolume, centroid: centroid };
        },
    };
    ZDirVolumeVisitor[EllipsoidSurface.name] =
        ZDirVolumeVisitor[RotatedCurveSurface.name];
    function glqV3(f, startT, endT) {
        return gaussLegendre24Xs
            .reduce((val, currVal, index) => {
            const x = startT + ((currVal + 1) / 2) * (endT - startT);
            return val.plus(f(x).times(gaussLegendre24Weights[index]));
        }, V3.O)
            .times((endT - startT) / 2);
    }
    function glqArray(f, startT, endT, numEls = 3) {
        const result = new Array(numEls).fill(0);
        for (let i = 0; i < 24; i++) {
            const x = startT + ((gaussLegendre24Xs[i] + 1) / 2) * (endT - startT);
            const fx = f(x);
            for (let j = 0; j < numEls; j++) {
                result[j] += fx[j] * gaussLegendre24Weights[i];
            }
        }
        for (let j = 0; j < numEls; j++) {
            result[j] *= (endT - startT) / 2;
        }
        return result;
    }
    function mergeVolumeAndCentroidZX2Parts(volumeAndCentroidZX2Parts) {
        const volume = volumeAndCentroidZX2Parts.reduce((result, [volume]) => result + volume, 0);
        const weightedCentroid = V3.add(...volumeAndCentroidZX2Parts.map(([, centroidZX2]) => centroidZX2)).schur(new V3(1, 1, 0.5));
        return { volume, centroid: weightedCentroid.div(volume) };
    }

    const CalculateAreaVisitor = {
        [ConicSurface.name](edges) {
            const dpdu = this.dpdu();
            const dpdv = this.dpdv();
            // calculation cannot be done in local coordinate system, as the area doesnt scale proportionally
            const totalArea = sum(edges.map((edge) => {
                if (edge.curve instanceof EllipseCurve ||
                    edge.curve instanceof HyperbolaCurve ||
                    edge.curve instanceof ParabolaCurve) {
                    const f = (t) => {
                        const at = edge.curve.at(t), tangentWC = edge.tangentAt(t);
                        const uvOfPWC = this.uvP(at);
                        // INTEGRATE [0; atUV.y]
                        //   dpdu(atUV.x, t) X dpdv(atUV.x, t)
                        // dt
                        // dpdv is constant with respect to t
                        // => dpdv(atUV.x, 0) X (INTEGRATE [0; atUV.y] dpdu(atUV.x, t) dt)
                        // dpdu(u, v) === v * dpdu(u, 1)
                        // => dpdv(atUV.x, 0) X (1/2 t² dpdu(atUV.x, 1))[0; atUV.y]
                        // => dpdv(atUV.x, 0) X dpdu(atUV.x, atUV.y² / 2)
                        const du = -M4.forSys(dpdu(uvOfPWC.x, uvOfPWC.y), dpdv(uvOfPWC.x))
                            .inversed()
                            .transformVector(tangentWC).x;
                        return (dpdu(uvOfPWC.x, Math.pow(uvOfPWC.y, 2) / 2)
                            .cross(dpdv(uvOfPWC.x))
                            .length() * du);
                    };
                    return glqInSteps(f, edge.aT, edge.bT, 1);
                }
                else if (edge.curve instanceof L3) {
                    return 0;
                }
                else {
                    throw new Error();
                }
            }));
            return totalArea * this.normalDir;
        },
        [PlaneSurface.name](edges) {
            let totalArea = 0;
            const r1 = this.right, u1 = this.up;
            for (const edge of edges) {
                let edgeArea;
                const curve = edge.curve;
                if (curve instanceof L3) {
                    edgeArea =
                        ((edge.a.dot(u1) + edge.b.dot(u1)) / 2) * edge.b.to(edge.a).dot(r1);
                }
                else if (curve instanceof EllipseCurve) {
                    // INTEGRATE[aT; bT] (curve.at(t) * u1) * (tangent(t) * r1) dt
                    // INTEGRATE[aT; bT] (u1 f1 cos t + u1 f2 sin t + u1 c) * (r1 f1 (-sin t) + r1 f2 cos t) dt
                    const { f1, f2, center } = curve;
                    const a = u1.dot(f1), b = u1.dot(f2), c = u1.dot(center), d = r1.dot(f1), e = r1.dot(f2);
                    function fArea(t) {
                        return (0.25 *
                            (2 * (-b * d + a * e) * t +
                                4 * c * d * cos$2(t) +
                                4 * c * e * sin$2(t) +
                                (a * d - b * e) * cos$2(2 * t) +
                                (b * d + a * e) * sin$2(2 * t)));
                    }
                    edgeArea = -(fArea(edge.bT) - fArea(edge.aT));
                }
                else if (curve instanceof ImplicitCurve) {
                    throw new Error("implement for implicitCurve");
                }
                else {
                    const dir1 = u1;
                    assertf(() => dir1.hasLength(1));
                    // INT[aT; bT] at(t) * dir1 * tangentAt(t).rejectedFrom(dir1) dt
                    const f = (curveT) => {
                        const at = curve.at(curveT);
                        const tangent = curve.tangentAt(curveT);
                        const ds = r1.dot(tangent);
                        const t = u1.dot(at);
                        return ds * t;
                    };
                    edgeArea = glqInSteps(f, edge.aT, edge.bT, 3);
                }
                totalArea += edgeArea;
            }
            assert(isFinite(totalArea));
            return totalArea;
        },
        [RotatedCurveSurface.name](edges, canApproximate = true) {
            const f1 = this.matrix.X, f2 = this.matrix.Y, f3 = this.matrix.Z;
            const likeVerticalSpheroid = eq(f1.length(), f2.length()) &&
                f1.isPerpendicularTo(f2) &&
                f2.isPerpendicularTo(f3) &&
                f3.isPerpendicularTo(f1);
            const areaParts = edges.map((edgeWC, ei) => {
                console.log("edge", ei, edgeWC.sce);
                const curveWC = edgeWC.curve;
                if (edgeWC.curve instanceof ImplicitCurve) {
                    throw new Error();
                }
                else {
                    if (likeVerticalSpheroid) {
                        const f = (curveT) => {
                            const pWC = curveWC.at(curveT), tangent = curveWC.tangentAt(curveT);
                            const pLC = this.matrixInverse.transformPoint(pWC);
                            const { x: angleXY, y: t } = this.uvP(pWC);
                            const arcRadius = this.matrix.transformVector(pLC.xy()).length();
                            const arcLength = angleXY * arcRadius;
                            const dpdv = this.dpdv()(angleXY, t).unit();
                            const scaling = dpdv.dot(tangent);
                            return arcLength * scaling;
                        };
                        return glqInSteps(f, edgeWC.aT, edgeWC.bT, 1);
                    }
                    else {
                        const dpdu = this.dpdu(), dpdv = this.dpdv();
                        const f2 = (curveT) => {
                            const pWC = curveWC.at(curveT), tangentWC = curveWC.tangentAt(curveT);
                            const uvPWC = this.uvP(pWC);
                            const slice = (phi) => {
                                //return this.dpdu()(phi, st.y).length() * this.dpdv()(phi, st.y).length()
                                return dpdu(phi, uvPWC.y).cross(dpdv(phi, uvPWC.y)).length();
                            };
                            // we need to do a coordinate transform from curveT to dt, as that is what we are integrating
                            const dt = M4.forSys(dpdu(uvPWC.x, uvPWC.y), dpdv(uvPWC.x, uvPWC.y))
                                .inversed()
                                .transformVector(tangentWC).y;
                            return glqInSteps(slice, 0, uvPWC.x, 1) * dt;
                        };
                        return glqInSteps(f2, edgeWC.aT, edgeWC.bT, 1);
                    }
                }
            });
            return sum(areaParts);
        },
        [ProjectedCurveSurface.name](edges) {
            // calculation cannot be done in local coordinate system, as the area doesn't scale proportionally
            const thisDir1 = this.dir.unit();
            const totalArea = sum(edges.map((edge) => {
                if (edge.curve instanceof L3) {
                    return 0;
                }
                else if (edge.curve instanceof ImplicitCurve) {
                    const { points, tangents } = edge.curve;
                    const minT = edge.minT, maxT = edge.maxT;
                    let sum = 0;
                    const start = ceil(minT + NLA_PRECISION);
                    const end = floor$1(maxT - NLA_PRECISION);
                    for (let i = start; i <= end; i++) {
                        const at = points[i], tangent = tangents[i]; //.toLength(edge.curve.stepSize)
                        const scaling = this.normalP(at).cross(thisDir1).unit().dot(tangent);
                        sum += at.dot(thisDir1) * scaling;
                    }
                    const f = (t) => {
                        const at = edge.curve.at(t), tangent = edge.curve.tangentAt(t);
                        const scaling = this.normalP(at).cross(thisDir1).unit().dot(tangent);
                        return at.dot(thisDir1) * scaling;
                    };
                    sum += f(minT) * (start - minT - 0.5);
                    sum += f(maxT) * (maxT - end - 0.5);
                    return sum * sign$1(edge.deltaT());
                }
                else {
                    const f = (t) => {
                        const at = edge.curve.at(t);
                        const tangent = edge.tangentAt(t);
                        const scaling = tangent.rejected1Length(thisDir1);
                        return at.dot(thisDir1) * scaling;
                    };
                    const val = glqInSteps(f, edge.aT, edge.bT, 1);
                    const sign = Math.sign(this.normalP(edge.a)
                        .cross(this.dir)
                        .dot(edge.curve.tangentAt(edge.aT)));
                    assert(0 !== sign);
                    return val * sign;
                }
            }));
            console.log("totalArea", totalArea);
            return totalArea;
        },
    };
    CalculateAreaVisitor[EllipsoidSurface.name] =
        CalculateAreaVisitor[RotatedCurveSurface.name];

    /**
     * https://opentype.js.org v1.3.3 | (c) Frederik De Bleser and other contributors | MIT License | Uses tiny-inflate by Devon Govett and string.prototype.codepointat polyfill by Mathias Bynens
     */

    /*! https://mths.be/codepointat v0.2.0 by @mathias */
    if (!String.prototype.codePointAt) {
    	(function() {
    		var defineProperty = (function() {
    			// IE 8 only supports `Object.defineProperty` on DOM elements
    			try {
    				var object = {};
    				var $defineProperty = Object.defineProperty;
    				var result = $defineProperty(object, object, object) && $defineProperty;
    			} catch(error) {}
    			return result;
    		}());
    		var codePointAt = function(position) {
    			if (this == null) {
    				throw TypeError();
    			}
    			var string = String(this);
    			var size = string.length;
    			// `ToInteger`
    			var index = position ? Number(position) : 0;
    			if (index != index) { // better `isNaN`
    				index = 0;
    			}
    			// Account for out-of-bounds indices:
    			if (index < 0 || index >= size) {
    				return undefined;
    			}
    			// Get the first code unit
    			var first = string.charCodeAt(index);
    			var second;
    			if ( // check if it’s the start of a surrogate pair
    				first >= 0xD800 && first <= 0xDBFF && // high surrogate
    				size > index + 1 // there is a next code unit
    			) {
    				second = string.charCodeAt(index + 1);
    				if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate
    					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
    					return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
    				}
    			}
    			return first;
    		};
    		if (defineProperty) {
    			defineProperty(String.prototype, 'codePointAt', {
    				'value': codePointAt,
    				'configurable': true,
    				'writable': true
    			});
    		} else {
    			String.prototype.codePointAt = codePointAt;
    		}
    	}());
    }

    var TINF_OK = 0;
    var TINF_DATA_ERROR = -3;

    function Tree() {
      this.table = new Uint16Array(16);   /* table of code length counts */
      this.trans = new Uint16Array(288);  /* code -> symbol translation table */
    }

    function Data(source, dest) {
      this.source = source;
      this.sourceIndex = 0;
      this.tag = 0;
      this.bitcount = 0;
      
      this.dest = dest;
      this.destLen = 0;
      
      this.ltree = new Tree();  /* dynamic length/symbol tree */
      this.dtree = new Tree();  /* dynamic distance tree */
    }

    /* --------------------------------------------------- *
     * -- uninitialized global data (static structures) -- *
     * --------------------------------------------------- */

    var sltree = new Tree();
    var sdtree = new Tree();

    /* extra bits and base tables for length codes */
    var length_bits = new Uint8Array(30);
    var length_base = new Uint16Array(30);

    /* extra bits and base tables for distance codes */
    var dist_bits = new Uint8Array(30);
    var dist_base = new Uint16Array(30);

    /* special ordering of code length codes */
    var clcidx = new Uint8Array([
      16, 17, 18, 0, 8, 7, 9, 6,
      10, 5, 11, 4, 12, 3, 13, 2,
      14, 1, 15
    ]);

    /* used by tinf_decode_trees, avoids allocations every call */
    var code_tree = new Tree();
    var lengths = new Uint8Array(288 + 32);

    /* ----------------------- *
     * -- utility functions -- *
     * ----------------------- */

    /* build extra bits and base tables */
    function tinf_build_bits_base(bits, base, delta, first) {
      var i, sum;

      /* build bits table */
      for (i = 0; i < delta; ++i) { bits[i] = 0; }
      for (i = 0; i < 30 - delta; ++i) { bits[i + delta] = i / delta | 0; }

      /* build base table */
      for (sum = first, i = 0; i < 30; ++i) {
        base[i] = sum;
        sum += 1 << bits[i];
      }
    }

    /* build the fixed huffman trees */
    function tinf_build_fixed_trees(lt, dt) {
      var i;

      /* build fixed length tree */
      for (i = 0; i < 7; ++i) { lt.table[i] = 0; }

      lt.table[7] = 24;
      lt.table[8] = 152;
      lt.table[9] = 112;

      for (i = 0; i < 24; ++i) { lt.trans[i] = 256 + i; }
      for (i = 0; i < 144; ++i) { lt.trans[24 + i] = i; }
      for (i = 0; i < 8; ++i) { lt.trans[24 + 144 + i] = 280 + i; }
      for (i = 0; i < 112; ++i) { lt.trans[24 + 144 + 8 + i] = 144 + i; }

      /* build fixed distance tree */
      for (i = 0; i < 5; ++i) { dt.table[i] = 0; }

      dt.table[5] = 32;

      for (i = 0; i < 32; ++i) { dt.trans[i] = i; }
    }

    /* given an array of code lengths, build a tree */
    var offs = new Uint16Array(16);

    function tinf_build_tree(t, lengths, off, num) {
      var i, sum;

      /* clear code length count table */
      for (i = 0; i < 16; ++i) { t.table[i] = 0; }

      /* scan symbol lengths, and sum code length counts */
      for (i = 0; i < num; ++i) { t.table[lengths[off + i]]++; }

      t.table[0] = 0;

      /* compute offset table for distribution sort */
      for (sum = 0, i = 0; i < 16; ++i) {
        offs[i] = sum;
        sum += t.table[i];
      }

      /* create code->symbol translation table (symbols sorted by code) */
      for (i = 0; i < num; ++i) {
        if (lengths[off + i]) { t.trans[offs[lengths[off + i]]++] = i; }
      }
    }

    /* ---------------------- *
     * -- decode functions -- *
     * ---------------------- */

    /* get one bit from source stream */
    function tinf_getbit(d) {
      /* check if tag is empty */
      if (!d.bitcount--) {
        /* load next tag */
        d.tag = d.source[d.sourceIndex++];
        d.bitcount = 7;
      }

      /* shift bit out of tag */
      var bit = d.tag & 1;
      d.tag >>>= 1;

      return bit;
    }

    /* read a num bit value from a stream and add base */
    function tinf_read_bits(d, num, base) {
      if (!num)
        { return base; }

      while (d.bitcount < 24) {
        d.tag |= d.source[d.sourceIndex++] << d.bitcount;
        d.bitcount += 8;
      }

      var val = d.tag & (0xffff >>> (16 - num));
      d.tag >>>= num;
      d.bitcount -= num;
      return val + base;
    }

    /* given a data stream and a tree, decode a symbol */
    function tinf_decode_symbol(d, t) {
      while (d.bitcount < 24) {
        d.tag |= d.source[d.sourceIndex++] << d.bitcount;
        d.bitcount += 8;
      }
      
      var sum = 0, cur = 0, len = 0;
      var tag = d.tag;

      /* get more bits while code value is above sum */
      do {
        cur = 2 * cur + (tag & 1);
        tag >>>= 1;
        ++len;

        sum += t.table[len];
        cur -= t.table[len];
      } while (cur >= 0);
      
      d.tag = tag;
      d.bitcount -= len;

      return t.trans[sum + cur];
    }

    /* given a data stream, decode dynamic trees from it */
    function tinf_decode_trees(d, lt, dt) {
      var hlit, hdist, hclen;
      var i, num, length;

      /* get 5 bits HLIT (257-286) */
      hlit = tinf_read_bits(d, 5, 257);

      /* get 5 bits HDIST (1-32) */
      hdist = tinf_read_bits(d, 5, 1);

      /* get 4 bits HCLEN (4-19) */
      hclen = tinf_read_bits(d, 4, 4);

      for (i = 0; i < 19; ++i) { lengths[i] = 0; }

      /* read code lengths for code length alphabet */
      for (i = 0; i < hclen; ++i) {
        /* get 3 bits code length (0-7) */
        var clen = tinf_read_bits(d, 3, 0);
        lengths[clcidx[i]] = clen;
      }

      /* build code length tree */
      tinf_build_tree(code_tree, lengths, 0, 19);

      /* decode code lengths for the dynamic trees */
      for (num = 0; num < hlit + hdist;) {
        var sym = tinf_decode_symbol(d, code_tree);

        switch (sym) {
          case 16:
            /* copy previous code length 3-6 times (read 2 bits) */
            var prev = lengths[num - 1];
            for (length = tinf_read_bits(d, 2, 3); length; --length) {
              lengths[num++] = prev;
            }
            break;
          case 17:
            /* repeat code length 0 for 3-10 times (read 3 bits) */
            for (length = tinf_read_bits(d, 3, 3); length; --length) {
              lengths[num++] = 0;
            }
            break;
          case 18:
            /* repeat code length 0 for 11-138 times (read 7 bits) */
            for (length = tinf_read_bits(d, 7, 11); length; --length) {
              lengths[num++] = 0;
            }
            break;
          default:
            /* values 0-15 represent the actual code lengths */
            lengths[num++] = sym;
            break;
        }
      }

      /* build dynamic trees */
      tinf_build_tree(lt, lengths, 0, hlit);
      tinf_build_tree(dt, lengths, hlit, hdist);
    }

    /* ----------------------------- *
     * -- block inflate functions -- *
     * ----------------------------- */

    /* given a stream and two trees, inflate a block of data */
    function tinf_inflate_block_data(d, lt, dt) {
      while (1) {
        var sym = tinf_decode_symbol(d, lt);

        /* check for end of block */
        if (sym === 256) {
          return TINF_OK;
        }

        if (sym < 256) {
          d.dest[d.destLen++] = sym;
        } else {
          var length, dist, offs;
          var i;

          sym -= 257;

          /* possibly get more bits from length code */
          length = tinf_read_bits(d, length_bits[sym], length_base[sym]);

          dist = tinf_decode_symbol(d, dt);

          /* possibly get more bits from distance code */
          offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);

          /* copy match */
          for (i = offs; i < offs + length; ++i) {
            d.dest[d.destLen++] = d.dest[i];
          }
        }
      }
    }

    /* inflate an uncompressed block of data */
    function tinf_inflate_uncompressed_block(d) {
      var length, invlength;
      var i;
      
      /* unread from bitbuffer */
      while (d.bitcount > 8) {
        d.sourceIndex--;
        d.bitcount -= 8;
      }

      /* get length */
      length = d.source[d.sourceIndex + 1];
      length = 256 * length + d.source[d.sourceIndex];

      /* get one's complement of length */
      invlength = d.source[d.sourceIndex + 3];
      invlength = 256 * invlength + d.source[d.sourceIndex + 2];

      /* check length */
      if (length !== (~invlength & 0x0000ffff))
        { return TINF_DATA_ERROR; }

      d.sourceIndex += 4;

      /* copy block */
      for (i = length; i; --i)
        { d.dest[d.destLen++] = d.source[d.sourceIndex++]; }

      /* make sure we start next block on a byte boundary */
      d.bitcount = 0;

      return TINF_OK;
    }

    /* inflate stream from source to dest */
    function tinf_uncompress(source, dest) {
      var d = new Data(source, dest);
      var bfinal, btype, res;

      do {
        /* read final block flag */
        bfinal = tinf_getbit(d);

        /* read block type (2 bits) */
        btype = tinf_read_bits(d, 2, 0);

        /* decompress block */
        switch (btype) {
          case 0:
            /* decompress uncompressed block */
            res = tinf_inflate_uncompressed_block(d);
            break;
          case 1:
            /* decompress block with fixed huffman trees */
            res = tinf_inflate_block_data(d, sltree, sdtree);
            break;
          case 2:
            /* decompress block with dynamic huffman trees */
            tinf_decode_trees(d, d.ltree, d.dtree);
            res = tinf_inflate_block_data(d, d.ltree, d.dtree);
            break;
          default:
            res = TINF_DATA_ERROR;
        }

        if (res !== TINF_OK)
          { throw new Error('Data error'); }

      } while (!bfinal);

      if (d.destLen < d.dest.length) {
        if (typeof d.dest.slice === 'function')
          { return d.dest.slice(0, d.destLen); }
        else
          { return d.dest.subarray(0, d.destLen); }
      }
      
      return d.dest;
    }

    /* -------------------- *
     * -- initialization -- *
     * -------------------- */

    /* build fixed huffman trees */
    tinf_build_fixed_trees(sltree, sdtree);

    /* build extra bits and base tables */
    tinf_build_bits_base(length_bits, length_base, 4, 3);
    tinf_build_bits_base(dist_bits, dist_base, 2, 1);

    /* fix a special case */
    length_bits[28] = 0;
    length_base[28] = 258;

    var tinyInflate = tinf_uncompress;

    // The Bounding Box object

    function derive(v0, v1, v2, v3, t) {
        return Math.pow(1 - t, 3) * v0 +
            3 * Math.pow(1 - t, 2) * t * v1 +
            3 * (1 - t) * Math.pow(t, 2) * v2 +
            Math.pow(t, 3) * v3;
    }
    /**
     * A bounding box is an enclosing box that describes the smallest measure within which all the points lie.
     * It is used to calculate the bounding box of a glyph or text path.
     *
     * On initialization, x1/y1/x2/y2 will be NaN. Check if the bounding box is empty using `isEmpty()`.
     *
     * @exports opentype.BoundingBox
     * @class
     * @constructor
     */
    function BoundingBox() {
        this.x1 = Number.NaN;
        this.y1 = Number.NaN;
        this.x2 = Number.NaN;
        this.y2 = Number.NaN;
    }

    /**
     * Returns true if the bounding box is empty, that is, no points have been added to the box yet.
     */
    BoundingBox.prototype.isEmpty = function() {
        return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);
    };

    /**
     * Add the point to the bounding box.
     * The x1/y1/x2/y2 coordinates of the bounding box will now encompass the given point.
     * @param {number} x - The X coordinate of the point.
     * @param {number} y - The Y coordinate of the point.
     */
    BoundingBox.prototype.addPoint = function(x, y) {
        if (typeof x === 'number') {
            if (isNaN(this.x1) || isNaN(this.x2)) {
                this.x1 = x;
                this.x2 = x;
            }
            if (x < this.x1) {
                this.x1 = x;
            }
            if (x > this.x2) {
                this.x2 = x;
            }
        }
        if (typeof y === 'number') {
            if (isNaN(this.y1) || isNaN(this.y2)) {
                this.y1 = y;
                this.y2 = y;
            }
            if (y < this.y1) {
                this.y1 = y;
            }
            if (y > this.y2) {
                this.y2 = y;
            }
        }
    };

    /**
     * Add a X coordinate to the bounding box.
     * This extends the bounding box to include the X coordinate.
     * This function is used internally inside of addBezier.
     * @param {number} x - The X coordinate of the point.
     */
    BoundingBox.prototype.addX = function(x) {
        this.addPoint(x, null);
    };

    /**
     * Add a Y coordinate to the bounding box.
     * This extends the bounding box to include the Y coordinate.
     * This function is used internally inside of addBezier.
     * @param {number} y - The Y coordinate of the point.
     */
    BoundingBox.prototype.addY = function(y) {
        this.addPoint(null, y);
    };

    /**
     * Add a Bézier curve to the bounding box.
     * This extends the bounding box to include the entire Bézier.
     * @param {number} x0 - The starting X coordinate.
     * @param {number} y0 - The starting Y coordinate.
     * @param {number} x1 - The X coordinate of the first control point.
     * @param {number} y1 - The Y coordinate of the first control point.
     * @param {number} x2 - The X coordinate of the second control point.
     * @param {number} y2 - The Y coordinate of the second control point.
     * @param {number} x - The ending X coordinate.
     * @param {number} y - The ending Y coordinate.
     */
    BoundingBox.prototype.addBezier = function(x0, y0, x1, y1, x2, y2, x, y) {
        // This code is based on http://nishiohirokazu.blogspot.com/2009/06/how-to-calculate-bezier-curves-bounding.html
        // and https://github.com/icons8/svg-path-bounding-box

        var p0 = [x0, y0];
        var p1 = [x1, y1];
        var p2 = [x2, y2];
        var p3 = [x, y];

        this.addPoint(x0, y0);
        this.addPoint(x, y);

        for (var i = 0; i <= 1; i++) {
            var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
            var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
            var c = 3 * p1[i] - 3 * p0[i];

            if (a === 0) {
                if (b === 0) { continue; }
                var t = -c / b;
                if (0 < t && t < 1) {
                    if (i === 0) { this.addX(derive(p0[i], p1[i], p2[i], p3[i], t)); }
                    if (i === 1) { this.addY(derive(p0[i], p1[i], p2[i], p3[i], t)); }
                }
                continue;
            }

            var b2ac = Math.pow(b, 2) - 4 * c * a;
            if (b2ac < 0) { continue; }
            var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);
            if (0 < t1 && t1 < 1) {
                if (i === 0) { this.addX(derive(p0[i], p1[i], p2[i], p3[i], t1)); }
                if (i === 1) { this.addY(derive(p0[i], p1[i], p2[i], p3[i], t1)); }
            }
            var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);
            if (0 < t2 && t2 < 1) {
                if (i === 0) { this.addX(derive(p0[i], p1[i], p2[i], p3[i], t2)); }
                if (i === 1) { this.addY(derive(p0[i], p1[i], p2[i], p3[i], t2)); }
            }
        }
    };

    /**
     * Add a quadratic curve to the bounding box.
     * This extends the bounding box to include the entire quadratic curve.
     * @param {number} x0 - The starting X coordinate.
     * @param {number} y0 - The starting Y coordinate.
     * @param {number} x1 - The X coordinate of the control point.
     * @param {number} y1 - The Y coordinate of the control point.
     * @param {number} x - The ending X coordinate.
     * @param {number} y - The ending Y coordinate.
     */
    BoundingBox.prototype.addQuad = function(x0, y0, x1, y1, x, y) {
        var cp1x = x0 + 2 / 3 * (x1 - x0);
        var cp1y = y0 + 2 / 3 * (y1 - y0);
        var cp2x = cp1x + 1 / 3 * (x - x0);
        var cp2y = cp1y + 1 / 3 * (y - y0);
        this.addBezier(x0, y0, cp1x, cp1y, cp2x, cp2y, x, y);
    };

    // Geometric objects

    /**
     * A bézier path containing a set of path commands similar to a SVG path.
     * Paths can be drawn on a context using `draw`.
     * @exports opentype.Path
     * @class
     * @constructor
     */
    function Path() {
        this.commands = [];
        this.fill = 'black';
        this.stroke = null;
        this.strokeWidth = 1;
    }

    /**
     * @param  {number} x
     * @param  {number} y
     */
    Path.prototype.moveTo = function(x, y) {
        this.commands.push({
            type: 'M',
            x: x,
            y: y
        });
    };

    /**
     * @param  {number} x
     * @param  {number} y
     */
    Path.prototype.lineTo = function(x, y) {
        this.commands.push({
            type: 'L',
            x: x,
            y: y
        });
    };

    /**
     * Draws cubic curve
     * @function
     * curveTo
     * @memberof opentype.Path.prototype
     * @param  {number} x1 - x of control 1
     * @param  {number} y1 - y of control 1
     * @param  {number} x2 - x of control 2
     * @param  {number} y2 - y of control 2
     * @param  {number} x - x of path point
     * @param  {number} y - y of path point
     */

    /**
     * Draws cubic curve
     * @function
     * bezierCurveTo
     * @memberof opentype.Path.prototype
     * @param  {number} x1 - x of control 1
     * @param  {number} y1 - y of control 1
     * @param  {number} x2 - x of control 2
     * @param  {number} y2 - y of control 2
     * @param  {number} x - x of path point
     * @param  {number} y - y of path point
     * @see curveTo
     */
    Path.prototype.curveTo = Path.prototype.bezierCurveTo = function(x1, y1, x2, y2, x, y) {
        this.commands.push({
            type: 'C',
            x1: x1,
            y1: y1,
            x2: x2,
            y2: y2,
            x: x,
            y: y
        });
    };

    /**
     * Draws quadratic curve
     * @function
     * quadraticCurveTo
     * @memberof opentype.Path.prototype
     * @param  {number} x1 - x of control
     * @param  {number} y1 - y of control
     * @param  {number} x - x of path point
     * @param  {number} y - y of path point
     */

    /**
     * Draws quadratic curve
     * @function
     * quadTo
     * @memberof opentype.Path.prototype
     * @param  {number} x1 - x of control
     * @param  {number} y1 - y of control
     * @param  {number} x - x of path point
     * @param  {number} y - y of path point
     */
    Path.prototype.quadTo = Path.prototype.quadraticCurveTo = function(x1, y1, x, y) {
        this.commands.push({
            type: 'Q',
            x1: x1,
            y1: y1,
            x: x,
            y: y
        });
    };

    /**
     * Closes the path
     * @function closePath
     * @memberof opentype.Path.prototype
     */

    /**
     * Close the path
     * @function close
     * @memberof opentype.Path.prototype
     */
    Path.prototype.close = Path.prototype.closePath = function() {
        this.commands.push({
            type: 'Z'
        });
    };

    /**
     * Add the given path or list of commands to the commands of this path.
     * @param  {Array} pathOrCommands - another opentype.Path, an opentype.BoundingBox, or an array of commands.
     */
    Path.prototype.extend = function(pathOrCommands) {
        if (pathOrCommands.commands) {
            pathOrCommands = pathOrCommands.commands;
        } else if (pathOrCommands instanceof BoundingBox) {
            var box = pathOrCommands;
            this.moveTo(box.x1, box.y1);
            this.lineTo(box.x2, box.y1);
            this.lineTo(box.x2, box.y2);
            this.lineTo(box.x1, box.y2);
            this.close();
            return;
        }

        Array.prototype.push.apply(this.commands, pathOrCommands);
    };

    /**
     * Calculate the bounding box of the path.
     * @returns {opentype.BoundingBox}
     */
    Path.prototype.getBoundingBox = function() {
        var box = new BoundingBox();

        var startX = 0;
        var startY = 0;
        var prevX = 0;
        var prevY = 0;
        for (var i = 0; i < this.commands.length; i++) {
            var cmd = this.commands[i];
            switch (cmd.type) {
                case 'M':
                    box.addPoint(cmd.x, cmd.y);
                    startX = prevX = cmd.x;
                    startY = prevY = cmd.y;
                    break;
                case 'L':
                    box.addPoint(cmd.x, cmd.y);
                    prevX = cmd.x;
                    prevY = cmd.y;
                    break;
                case 'Q':
                    box.addQuad(prevX, prevY, cmd.x1, cmd.y1, cmd.x, cmd.y);
                    prevX = cmd.x;
                    prevY = cmd.y;
                    break;
                case 'C':
                    box.addBezier(prevX, prevY, cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
                    prevX = cmd.x;
                    prevY = cmd.y;
                    break;
                case 'Z':
                    prevX = startX;
                    prevY = startY;
                    break;
                default:
                    throw new Error('Unexpected path command ' + cmd.type);
            }
        }
        if (box.isEmpty()) {
            box.addPoint(0, 0);
        }
        return box;
    };

    /**
     * Draw the path to a 2D context.
     * @param {CanvasRenderingContext2D} ctx - A 2D drawing context.
     */
    Path.prototype.draw = function(ctx) {
        ctx.beginPath();
        for (var i = 0; i < this.commands.length; i += 1) {
            var cmd = this.commands[i];
            if (cmd.type === 'M') {
                ctx.moveTo(cmd.x, cmd.y);
            } else if (cmd.type === 'L') {
                ctx.lineTo(cmd.x, cmd.y);
            } else if (cmd.type === 'C') {
                ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
            } else if (cmd.type === 'Q') {
                ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);
            } else if (cmd.type === 'Z') {
                ctx.closePath();
            }
        }

        if (this.fill) {
            ctx.fillStyle = this.fill;
            ctx.fill();
        }

        if (this.stroke) {
            ctx.strokeStyle = this.stroke;
            ctx.lineWidth = this.strokeWidth;
            ctx.stroke();
        }
    };

    /**
     * Convert the Path to a string of path data instructions
     * See http://www.w3.org/TR/SVG/paths.html#PathData
     * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values
     * @return {string}
     */
    Path.prototype.toPathData = function(decimalPlaces) {
        decimalPlaces = decimalPlaces !== undefined ? decimalPlaces : 2;

        function floatToString(v) {
            if (Math.round(v) === v) {
                return '' + Math.round(v);
            } else {
                return v.toFixed(decimalPlaces);
            }
        }

        function packValues() {
            var arguments$1 = arguments;

            var s = '';
            for (var i = 0; i < arguments.length; i += 1) {
                var v = arguments$1[i];
                if (v >= 0 && i > 0) {
                    s += ' ';
                }

                s += floatToString(v);
            }

            return s;
        }

        var d = '';
        for (var i = 0; i < this.commands.length; i += 1) {
            var cmd = this.commands[i];
            if (cmd.type === 'M') {
                d += 'M' + packValues(cmd.x, cmd.y);
            } else if (cmd.type === 'L') {
                d += 'L' + packValues(cmd.x, cmd.y);
            } else if (cmd.type === 'C') {
                d += 'C' + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
            } else if (cmd.type === 'Q') {
                d += 'Q' + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);
            } else if (cmd.type === 'Z') {
                d += 'Z';
            }
        }

        return d;
    };

    /**
     * Convert the path to an SVG <path> element, as a string.
     * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values
     * @return {string}
     */
    Path.prototype.toSVG = function(decimalPlaces) {
        var svg = '<path d="';
        svg += this.toPathData(decimalPlaces);
        svg += '"';
        if (this.fill && this.fill !== 'black') {
            if (this.fill === null) {
                svg += ' fill="none"';
            } else {
                svg += ' fill="' + this.fill + '"';
            }
        }

        if (this.stroke) {
            svg += ' stroke="' + this.stroke + '" stroke-width="' + this.strokeWidth + '"';
        }

        svg += '/>';
        return svg;
    };

    /**
     * Convert the path to a DOM element.
     * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values
     * @return {SVGPathElement}
     */
    Path.prototype.toDOMElement = function(decimalPlaces) {
        var temporaryPath = this.toPathData(decimalPlaces);
        var newPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');

        newPath.setAttribute('d', temporaryPath);

        return newPath;
    };

    // Run-time checking of preconditions.

    function fail(message) {
        throw new Error(message);
    }

    // Precondition function that checks if the given predicate is true.
    // If not, it will throw an error.
    function argument(predicate, message) {
        if (!predicate) {
            fail(message);
        }
    }
    var check = { fail: fail, argument: argument, assert: argument };

    // Data types used in the OpenType font file.

    var LIMIT16 = 32768; // The limit at which a 16-bit number switches signs == 2^15
    var LIMIT32 = 2147483648; // The limit at which a 32-bit number switches signs == 2 ^ 31

    /**
     * @exports opentype.decode
     * @class
     */
    var decode = {};
    /**
     * @exports opentype.encode
     * @class
     */
    var encode = {};
    /**
     * @exports opentype.sizeOf
     * @class
     */
    var sizeOf = {};

    // Return a function that always returns the same value.
    function constant(v) {
        return function() {
            return v;
        };
    }

    // OpenType data types //////////////////////////////////////////////////////

    /**
     * Convert an 8-bit unsigned integer to a list of 1 byte.
     * @param {number}
     * @returns {Array}
     */
    encode.BYTE = function(v) {
        check.argument(v >= 0 && v <= 255, 'Byte value should be between 0 and 255.');
        return [v];
    };
    /**
     * @constant
     * @type {number}
     */
    sizeOf.BYTE = constant(1);

    /**
     * Convert a 8-bit signed integer to a list of 1 byte.
     * @param {string}
     * @returns {Array}
     */
    encode.CHAR = function(v) {
        return [v.charCodeAt(0)];
    };

    /**
     * @constant
     * @type {number}
     */
    sizeOf.CHAR = constant(1);

    /**
     * Convert an ASCII string to a list of bytes.
     * @param {string}
     * @returns {Array}
     */
    encode.CHARARRAY = function(v) {
        var b = [];
        for (var i = 0; i < v.length; i += 1) {
            b[i] = v.charCodeAt(i);
        }

        return b;
    };

    /**
     * @param {Array}
     * @returns {number}
     */
    sizeOf.CHARARRAY = function(v) {
        return v.length;
    };

    /**
     * Convert a 16-bit unsigned integer to a list of 2 bytes.
     * @param {number}
     * @returns {Array}
     */
    encode.USHORT = function(v) {
        return [(v >> 8) & 0xFF, v & 0xFF];
    };

    /**
     * @constant
     * @type {number}
     */
    sizeOf.USHORT = constant(2);

    /**
     * Convert a 16-bit signed integer to a list of 2 bytes.
     * @param {number}
     * @returns {Array}
     */
    encode.SHORT = function(v) {
        // Two's complement
        if (v >= LIMIT16) {
            v = -(2 * LIMIT16 - v);
        }

        return [(v >> 8) & 0xFF, v & 0xFF];
    };

    /**
     * @constant
     * @type {number}
     */
    sizeOf.SHORT = constant(2);

    /**
     * Convert a 24-bit unsigned integer to a list of 3 bytes.
     * @param {number}
     * @returns {Array}
     */
    encode.UINT24 = function(v) {
        return [(v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
    };

    /**
     * @constant
     * @type {number}
     */
    sizeOf.UINT24 = constant(3);

    /**
     * Convert a 32-bit unsigned integer to a list of 4 bytes.
     * @param {number}
     * @returns {Array}
     */
    encode.ULONG = function(v) {
        return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
    };

    /**
     * @constant
     * @type {number}
     */
    sizeOf.ULONG = constant(4);

    /**
     * Convert a 32-bit unsigned integer to a list of 4 bytes.
     * @param {number}
     * @returns {Array}
     */
    encode.LONG = function(v) {
        // Two's complement
        if (v >= LIMIT32) {
            v = -(2 * LIMIT32 - v);
        }

        return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
    };

    /**
     * @constant
     * @type {number}
     */
    sizeOf.LONG = constant(4);

    encode.FIXED = encode.ULONG;
    sizeOf.FIXED = sizeOf.ULONG;

    encode.FWORD = encode.SHORT;
    sizeOf.FWORD = sizeOf.SHORT;

    encode.UFWORD = encode.USHORT;
    sizeOf.UFWORD = sizeOf.USHORT;

    /**
     * Convert a 32-bit Apple Mac timestamp integer to a list of 8 bytes, 64-bit timestamp.
     * @param {number}
     * @returns {Array}
     */
    encode.LONGDATETIME = function(v) {
        return [0, 0, 0, 0, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
    };

    /**
     * @constant
     * @type {number}
     */
    sizeOf.LONGDATETIME = constant(8);

    /**
     * Convert a 4-char tag to a list of 4 bytes.
     * @param {string}
     * @returns {Array}
     */
    encode.TAG = function(v) {
        check.argument(v.length === 4, 'Tag should be exactly 4 ASCII characters.');
        return [v.charCodeAt(0),
                v.charCodeAt(1),
                v.charCodeAt(2),
                v.charCodeAt(3)];
    };

    /**
     * @constant
     * @type {number}
     */
    sizeOf.TAG = constant(4);

    // CFF data types ///////////////////////////////////////////////////////////

    encode.Card8 = encode.BYTE;
    sizeOf.Card8 = sizeOf.BYTE;

    encode.Card16 = encode.USHORT;
    sizeOf.Card16 = sizeOf.USHORT;

    encode.OffSize = encode.BYTE;
    sizeOf.OffSize = sizeOf.BYTE;

    encode.SID = encode.USHORT;
    sizeOf.SID = sizeOf.USHORT;

    // Convert a numeric operand or charstring number to a variable-size list of bytes.
    /**
     * Convert a numeric operand or charstring number to a variable-size list of bytes.
     * @param {number}
     * @returns {Array}
     */
    encode.NUMBER = function(v) {
        if (v >= -107 && v <= 107) {
            return [v + 139];
        } else if (v >= 108 && v <= 1131) {
            v = v - 108;
            return [(v >> 8) + 247, v & 0xFF];
        } else if (v >= -1131 && v <= -108) {
            v = -v - 108;
            return [(v >> 8) + 251, v & 0xFF];
        } else if (v >= -32768 && v <= 32767) {
            return encode.NUMBER16(v);
        } else {
            return encode.NUMBER32(v);
        }
    };

    /**
     * @param {number}
     * @returns {number}
     */
    sizeOf.NUMBER = function(v) {
        return encode.NUMBER(v).length;
    };

    /**
     * Convert a signed number between -32768 and +32767 to a three-byte value.
     * This ensures we always use three bytes, but is not the most compact format.
     * @param {number}
     * @returns {Array}
     */
    encode.NUMBER16 = function(v) {
        return [28, (v >> 8) & 0xFF, v & 0xFF];
    };

    /**
     * @constant
     * @type {number}
     */
    sizeOf.NUMBER16 = constant(3);

    /**
     * Convert a signed number between -(2^31) and +(2^31-1) to a five-byte value.
     * This is useful if you want to be sure you always use four bytes,
     * at the expense of wasting a few bytes for smaller numbers.
     * @param {number}
     * @returns {Array}
     */
    encode.NUMBER32 = function(v) {
        return [29, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
    };

    /**
     * @constant
     * @type {number}
     */
    sizeOf.NUMBER32 = constant(5);

    /**
     * @param {number}
     * @returns {Array}
     */
    encode.REAL = function(v) {
        var value = v.toString();

        // Some numbers use an epsilon to encode the value. (e.g. JavaScript will store 0.0000001 as 1e-7)
        // This code converts it back to a number without the epsilon.
        var m = /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(value);
        if (m) {
            var epsilon = parseFloat('1e' + ((m[2] ? +m[2] : 0) + m[1].length));
            value = (Math.round(v * epsilon) / epsilon).toString();
        }

        var nibbles = '';
        for (var i = 0, ii = value.length; i < ii; i += 1) {
            var c = value[i];
            if (c === 'e') {
                nibbles += value[++i] === '-' ? 'c' : 'b';
            } else if (c === '.') {
                nibbles += 'a';
            } else if (c === '-') {
                nibbles += 'e';
            } else {
                nibbles += c;
            }
        }

        nibbles += (nibbles.length & 1) ? 'f' : 'ff';
        var out = [30];
        for (var i$1 = 0, ii$1 = nibbles.length; i$1 < ii$1; i$1 += 2) {
            out.push(parseInt(nibbles.substr(i$1, 2), 16));
        }

        return out;
    };

    /**
     * @param {number}
     * @returns {number}
     */
    sizeOf.REAL = function(v) {
        return encode.REAL(v).length;
    };

    encode.NAME = encode.CHARARRAY;
    sizeOf.NAME = sizeOf.CHARARRAY;

    encode.STRING = encode.CHARARRAY;
    sizeOf.STRING = sizeOf.CHARARRAY;

    /**
     * @param {DataView} data
     * @param {number} offset
     * @param {number} numBytes
     * @returns {string}
     */
    decode.UTF8 = function(data, offset, numBytes) {
        var codePoints = [];
        var numChars = numBytes;
        for (var j = 0; j < numChars; j++, offset += 1) {
            codePoints[j] = data.getUint8(offset);
        }

        return String.fromCharCode.apply(null, codePoints);
    };

    /**
     * @param {DataView} data
     * @param {number} offset
     * @param {number} numBytes
     * @returns {string}
     */
    decode.UTF16 = function(data, offset, numBytes) {
        var codePoints = [];
        var numChars = numBytes / 2;
        for (var j = 0; j < numChars; j++, offset += 2) {
            codePoints[j] = data.getUint16(offset);
        }

        return String.fromCharCode.apply(null, codePoints);
    };

    /**
     * Convert a JavaScript string to UTF16-BE.
     * @param {string}
     * @returns {Array}
     */
    encode.UTF16 = function(v) {
        var b = [];
        for (var i = 0; i < v.length; i += 1) {
            var codepoint = v.charCodeAt(i);
            b[b.length] = (codepoint >> 8) & 0xFF;
            b[b.length] = codepoint & 0xFF;
        }

        return b;
    };

    /**
     * @param {string}
     * @returns {number}
     */
    sizeOf.UTF16 = function(v) {
        return v.length * 2;
    };

    // Data for converting old eight-bit Macintosh encodings to Unicode.
    // This representation is optimized for decoding; encoding is slower
    // and needs more memory. The assumption is that all opentype.js users
    // want to open fonts, but saving a font will be comparatively rare
    // so it can be more expensive. Keyed by IANA character set name.
    //
    // Python script for generating these strings:
    //
    //     s = u''.join([chr(c).decode('mac_greek') for c in range(128, 256)])
    //     print(s.encode('utf-8'))
    /**
     * @private
     */
    var eightBitMacEncodings = {
        'x-mac-croatian':  // Python: 'mac_croatian'
        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø' +
        '¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ',
        'x-mac-cyrillic':  // Python: 'mac_cyrillic'
        'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњ' +
        'јЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю',
        'x-mac-gaelic': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/GAELIC.TXT
        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæø' +
        'ṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ',
        'x-mac-greek':  // Python: 'mac_greek'
        'Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩ' +
        'άΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\u00AD',
        'x-mac-icelandic':  // Python: 'mac_iceland'
        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +
        '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
        'x-mac-inuit': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/INUIT.TXT
        'ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗ' +
        'ᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł',
        'x-mac-ce':  // Python: 'mac_latin2'
        'ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅ' +
        'ņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ',
        macintosh:  // Python: 'mac_roman'
        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +
        '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
        'x-mac-romanian':  // Python: 'mac_romanian'
        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș' +
        '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
        'x-mac-turkish':  // Python: 'mac_turkish'
        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +
        '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ'
    };

    /**
     * Decodes an old-style Macintosh string. Returns either a Unicode JavaScript
     * string, or 'undefined' if the encoding is unsupported. For example, we do
     * not support Chinese, Japanese or Korean because these would need large
     * mapping tables.
     * @param {DataView} dataView
     * @param {number} offset
     * @param {number} dataLength
     * @param {string} encoding
     * @returns {string}
     */
    decode.MACSTRING = function(dataView, offset, dataLength, encoding) {
        var table = eightBitMacEncodings[encoding];
        if (table === undefined) {
            return undefined;
        }

        var result = '';
        for (var i = 0; i < dataLength; i++) {
            var c = dataView.getUint8(offset + i);
            // In all eight-bit Mac encodings, the characters 0x00..0x7F are
            // mapped to U+0000..U+007F; we only need to look up the others.
            if (c <= 0x7F) {
                result += String.fromCharCode(c);
            } else {
                result += table[c & 0x7F];
            }
        }

        return result;
    };

    // Helper function for encode.MACSTRING. Returns a dictionary for mapping
    // Unicode character codes to their 8-bit MacOS equivalent. This table
    // is not exactly a super cheap data structure, but we do not care because
    // encoding Macintosh strings is only rarely needed in typical applications.
    var macEncodingTableCache = typeof WeakMap === 'function' && new WeakMap();
    var macEncodingCacheKeys;
    var getMacEncodingTable = function (encoding) {
        // Since we use encoding as a cache key for WeakMap, it has to be
        // a String object and not a literal. And at least on NodeJS 2.10.1,
        // WeakMap requires that the same String instance is passed for cache hits.
        if (!macEncodingCacheKeys) {
            macEncodingCacheKeys = {};
            for (var e in eightBitMacEncodings) {
                /*jshint -W053 */  // Suppress "Do not use String as a constructor."
                macEncodingCacheKeys[e] = new String(e);
            }
        }

        var cacheKey = macEncodingCacheKeys[encoding];
        if (cacheKey === undefined) {
            return undefined;
        }

        // We can't do "if (cache.has(key)) {return cache.get(key)}" here:
        // since garbage collection may run at any time, it could also kick in
        // between the calls to cache.has() and cache.get(). In that case,
        // we would return 'undefined' even though we do support the encoding.
        if (macEncodingTableCache) {
            var cachedTable = macEncodingTableCache.get(cacheKey);
            if (cachedTable !== undefined) {
                return cachedTable;
            }
        }

        var decodingTable = eightBitMacEncodings[encoding];
        if (decodingTable === undefined) {
            return undefined;
        }

        var encodingTable = {};
        for (var i = 0; i < decodingTable.length; i++) {
            encodingTable[decodingTable.charCodeAt(i)] = i + 0x80;
        }

        if (macEncodingTableCache) {
            macEncodingTableCache.set(cacheKey, encodingTable);
        }

        return encodingTable;
    };

    /**
     * Encodes an old-style Macintosh string. Returns a byte array upon success.
     * If the requested encoding is unsupported, or if the input string contains
     * a character that cannot be expressed in the encoding, the function returns
     * 'undefined'.
     * @param {string} str
     * @param {string} encoding
     * @returns {Array}
     */
    encode.MACSTRING = function(str, encoding) {
        var table = getMacEncodingTable(encoding);
        if (table === undefined) {
            return undefined;
        }

        var result = [];
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);

            // In all eight-bit Mac encodings, the characters 0x00..0x7F are
            // mapped to U+0000..U+007F; we only need to look up the others.
            if (c >= 0x80) {
                c = table[c];
                if (c === undefined) {
                    // str contains a Unicode character that cannot be encoded
                    // in the requested encoding.
                    return undefined;
                }
            }
            result[i] = c;
            // result.push(c);
        }

        return result;
    };

    /**
     * @param {string} str
     * @param {string} encoding
     * @returns {number}
     */
    sizeOf.MACSTRING = function(str, encoding) {
        var b = encode.MACSTRING(str, encoding);
        if (b !== undefined) {
            return b.length;
        } else {
            return 0;
        }
    };

    // Helper for encode.VARDELTAS
    function isByteEncodable(value) {
        return value >= -128 && value <= 127;
    }

    // Helper for encode.VARDELTAS
    function encodeVarDeltaRunAsZeroes(deltas, pos, result) {
        var runLength = 0;
        var numDeltas = deltas.length;
        while (pos < numDeltas && runLength < 64 && deltas[pos] === 0) {
            ++pos;
            ++runLength;
        }
        result.push(0x80 | (runLength - 1));
        return pos;
    }

    // Helper for encode.VARDELTAS
    function encodeVarDeltaRunAsBytes(deltas, offset, result) {
        var runLength = 0;
        var numDeltas = deltas.length;
        var pos = offset;
        while (pos < numDeltas && runLength < 64) {
            var value = deltas[pos];
            if (!isByteEncodable(value)) {
                break;
            }

            // Within a byte-encoded run of deltas, a single zero is best
            // stored literally as 0x00 value. However, if we have two or
            // more zeroes in a sequence, it is better to start a new run.
            // Fore example, the sequence of deltas [15, 15, 0, 15, 15]
            // becomes 6 bytes (04 0F 0F 00 0F 0F) when storing the zero
            // within the current run, but 7 bytes (01 0F 0F 80 01 0F 0F)
            // when starting a new run.
            if (value === 0 && pos + 1 < numDeltas && deltas[pos + 1] === 0) {
                break;
            }

            ++pos;
            ++runLength;
        }
        result.push(runLength - 1);
        for (var i = offset; i < pos; ++i) {
            result.push((deltas[i] + 256) & 0xff);
        }
        return pos;
    }

    // Helper for encode.VARDELTAS
    function encodeVarDeltaRunAsWords(deltas, offset, result) {
        var runLength = 0;
        var numDeltas = deltas.length;
        var pos = offset;
        while (pos < numDeltas && runLength < 64) {
            var value = deltas[pos];

            // Within a word-encoded run of deltas, it is easiest to start
            // a new run (with a different encoding) whenever we encounter
            // a zero value. For example, the sequence [0x6666, 0, 0x7777]
            // needs 7 bytes when storing the zero inside the current run
            // (42 66 66 00 00 77 77), and equally 7 bytes when starting a
            // new run (40 66 66 80 40 77 77).
            if (value === 0) {
                break;
            }

            // Within a word-encoded run of deltas, a single value in the
            // range (-128..127) should be encoded within the current run
            // because it is more compact. For example, the sequence
            // [0x6666, 2, 0x7777] becomes 7 bytes when storing the value
            // literally (42 66 66 00 02 77 77), but 8 bytes when starting
            // a new run (40 66 66 00 02 40 77 77).
            if (isByteEncodable(value) && pos + 1 < numDeltas && isByteEncodable(deltas[pos + 1])) {
                break;
            }

            ++pos;
            ++runLength;
        }
        result.push(0x40 | (runLength - 1));
        for (var i = offset; i < pos; ++i) {
            var val = deltas[i];
            result.push(((val + 0x10000) >> 8) & 0xff, (val + 0x100) & 0xff);
        }
        return pos;
    }

    /**
     * Encode a list of variation adjustment deltas.
     *
     * Variation adjustment deltas are used in ‘gvar’ and ‘cvar’ tables.
     * They indicate how points (in ‘gvar’) or values (in ‘cvar’) get adjusted
     * when generating instances of variation fonts.
     *
     * @see https://www.microsoft.com/typography/otspec/gvar.htm
     * @see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6gvar.html
     * @param {Array}
     * @return {Array}
     */
    encode.VARDELTAS = function(deltas) {
        var pos = 0;
        var result = [];
        while (pos < deltas.length) {
            var value = deltas[pos];
            if (value === 0) {
                pos = encodeVarDeltaRunAsZeroes(deltas, pos, result);
            } else if (value >= -128 && value <= 127) {
                pos = encodeVarDeltaRunAsBytes(deltas, pos, result);
            } else {
                pos = encodeVarDeltaRunAsWords(deltas, pos, result);
            }
        }
        return result;
    };

    // Convert a list of values to a CFF INDEX structure.
    // The values should be objects containing name / type / value.
    /**
     * @param {Array} l
     * @returns {Array}
     */
    encode.INDEX = function(l) {
        //var offset, offsets, offsetEncoder, encodedOffsets, encodedOffset, data,
        //    i, v;
        // Because we have to know which data type to use to encode the offsets,
        // we have to go through the values twice: once to encode the data and
        // calculate the offsets, then again to encode the offsets using the fitting data type.
        var offset = 1; // First offset is always 1.
        var offsets = [offset];
        var data = [];
        for (var i = 0; i < l.length; i += 1) {
            var v = encode.OBJECT(l[i]);
            Array.prototype.push.apply(data, v);
            offset += v.length;
            offsets.push(offset);
        }

        if (data.length === 0) {
            return [0, 0];
        }

        var encodedOffsets = [];
        var offSize = (1 + Math.floor(Math.log(offset) / Math.log(2)) / 8) | 0;
        var offsetEncoder = [undefined, encode.BYTE, encode.USHORT, encode.UINT24, encode.ULONG][offSize];
        for (var i$1 = 0; i$1 < offsets.length; i$1 += 1) {
            var encodedOffset = offsetEncoder(offsets[i$1]);
            Array.prototype.push.apply(encodedOffsets, encodedOffset);
        }

        return Array.prototype.concat(encode.Card16(l.length),
                               encode.OffSize(offSize),
                               encodedOffsets,
                               data);
    };

    /**
     * @param {Array}
     * @returns {number}
     */
    sizeOf.INDEX = function(v) {
        return encode.INDEX(v).length;
    };

    /**
     * Convert an object to a CFF DICT structure.
     * The keys should be numeric.
     * The values should be objects containing name / type / value.
     * @param {Object} m
     * @returns {Array}
     */
    encode.DICT = function(m) {
        var d = [];
        var keys = Object.keys(m);
        var length = keys.length;

        for (var i = 0; i < length; i += 1) {
            // Object.keys() return string keys, but our keys are always numeric.
            var k = parseInt(keys[i], 0);
            var v = m[k];
            // Value comes before the key.
            d = d.concat(encode.OPERAND(v.value, v.type));
            d = d.concat(encode.OPERATOR(k));
        }

        return d;
    };

    /**
     * @param {Object}
     * @returns {number}
     */
    sizeOf.DICT = function(m) {
        return encode.DICT(m).length;
    };

    /**
     * @param {number}
     * @returns {Array}
     */
    encode.OPERATOR = function(v) {
        if (v < 1200) {
            return [v];
        } else {
            return [12, v - 1200];
        }
    };

    /**
     * @param {Array} v
     * @param {string}
     * @returns {Array}
     */
    encode.OPERAND = function(v, type) {
        var d = [];
        if (Array.isArray(type)) {
            for (var i = 0; i < type.length; i += 1) {
                check.argument(v.length === type.length, 'Not enough arguments given for type' + type);
                d = d.concat(encode.OPERAND(v[i], type[i]));
            }
        } else {
            if (type === 'SID') {
                d = d.concat(encode.NUMBER(v));
            } else if (type === 'offset') {
                // We make it easy for ourselves and always encode offsets as
                // 4 bytes. This makes offset calculation for the top dict easier.
                d = d.concat(encode.NUMBER32(v));
            } else if (type === 'number') {
                d = d.concat(encode.NUMBER(v));
            } else if (type === 'real') {
                d = d.concat(encode.REAL(v));
            } else {
                throw new Error('Unknown operand type ' + type);
                // FIXME Add support for booleans
            }
        }

        return d;
    };

    encode.OP = encode.BYTE;
    sizeOf.OP = sizeOf.BYTE;

    // memoize charstring encoding using WeakMap if available
    var wmm = typeof WeakMap === 'function' && new WeakMap();

    /**
     * Convert a list of CharString operations to bytes.
     * @param {Array}
     * @returns {Array}
     */
    encode.CHARSTRING = function(ops) {
        // See encode.MACSTRING for why we don't do "if (wmm && wmm.has(ops))".
        if (wmm) {
            var cachedValue = wmm.get(ops);
            if (cachedValue !== undefined) {
                return cachedValue;
            }
        }

        var d = [];
        var length = ops.length;

        for (var i = 0; i < length; i += 1) {
            var op = ops[i];
            d = d.concat(encode[op.type](op.value));
        }

        if (wmm) {
            wmm.set(ops, d);
        }

        return d;
    };

    /**
     * @param {Array}
     * @returns {number}
     */
    sizeOf.CHARSTRING = function(ops) {
        return encode.CHARSTRING(ops).length;
    };

    // Utility functions ////////////////////////////////////////////////////////

    /**
     * Convert an object containing name / type / value to bytes.
     * @param {Object}
     * @returns {Array}
     */
    encode.OBJECT = function(v) {
        var encodingFunction = encode[v.type];
        check.argument(encodingFunction !== undefined, 'No encoding function for type ' + v.type);
        return encodingFunction(v.value);
    };

    /**
     * @param {Object}
     * @returns {number}
     */
    sizeOf.OBJECT = function(v) {
        var sizeOfFunction = sizeOf[v.type];
        check.argument(sizeOfFunction !== undefined, 'No sizeOf function for type ' + v.type);
        return sizeOfFunction(v.value);
    };

    /**
     * Convert a table object to bytes.
     * A table contains a list of fields containing the metadata (name, type and default value).
     * The table itself has the field values set as attributes.
     * @param {opentype.Table}
     * @returns {Array}
     */
    encode.TABLE = function(table) {
        var d = [];
        var length = table.fields.length;
        var subtables = [];
        var subtableOffsets = [];

        for (var i = 0; i < length; i += 1) {
            var field = table.fields[i];
            var encodingFunction = encode[field.type];
            check.argument(encodingFunction !== undefined, 'No encoding function for field type ' + field.type + ' (' + field.name + ')');
            var value = table[field.name];
            if (value === undefined) {
                value = field.value;
            }

            var bytes = encodingFunction(value);

            if (field.type === 'TABLE') {
                subtableOffsets.push(d.length);
                d = d.concat([0, 0]);
                subtables.push(bytes);
            } else {
                d = d.concat(bytes);
            }
        }

        for (var i$1 = 0; i$1 < subtables.length; i$1 += 1) {
            var o = subtableOffsets[i$1];
            var offset = d.length;
            check.argument(offset < 65536, 'Table ' + table.tableName + ' too big.');
            d[o] = offset >> 8;
            d[o + 1] = offset & 0xff;
            d = d.concat(subtables[i$1]);
        }

        return d;
    };

    /**
     * @param {opentype.Table}
     * @returns {number}
     */
    sizeOf.TABLE = function(table) {
        var numBytes = 0;
        var length = table.fields.length;

        for (var i = 0; i < length; i += 1) {
            var field = table.fields[i];
            var sizeOfFunction = sizeOf[field.type];
            check.argument(sizeOfFunction !== undefined, 'No sizeOf function for field type ' + field.type + ' (' + field.name + ')');
            var value = table[field.name];
            if (value === undefined) {
                value = field.value;
            }

            numBytes += sizeOfFunction(value);

            // Subtables take 2 more bytes for offsets.
            if (field.type === 'TABLE') {
                numBytes += 2;
            }
        }

        return numBytes;
    };

    encode.RECORD = encode.TABLE;
    sizeOf.RECORD = sizeOf.TABLE;

    // Merge in a list of bytes.
    encode.LITERAL = function(v) {
        return v;
    };

    sizeOf.LITERAL = function(v) {
        return v.length;
    };

    // Table metadata

    /**
     * @exports opentype.Table
     * @class
     * @param {string} tableName
     * @param {Array} fields
     * @param {Object} options
     * @constructor
     */
    function Table(tableName, fields, options) {
        for (var i = 0; i < fields.length; i += 1) {
            var field = fields[i];
            this[field.name] = field.value;
        }

        this.tableName = tableName;
        this.fields = fields;
        if (options) {
            var optionKeys = Object.keys(options);
            for (var i$1 = 0; i$1 < optionKeys.length; i$1 += 1) {
                var k = optionKeys[i$1];
                var v = options[k];
                if (this[k] !== undefined) {
                    this[k] = v;
                }
            }
        }
    }

    /**
     * Encodes the table and returns an array of bytes
     * @return {Array}
     */
    Table.prototype.encode = function() {
        return encode.TABLE(this);
    };

    /**
     * Get the size of the table.
     * @return {number}
     */
    Table.prototype.sizeOf = function() {
        return sizeOf.TABLE(this);
    };

    /**
     * @private
     */
    function ushortList(itemName, list, count) {
        if (count === undefined) {
            count = list.length;
        }
        var fields = new Array(list.length + 1);
        fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};
        for (var i = 0; i < list.length; i++) {
            fields[i + 1] = {name: itemName + i, type: 'USHORT', value: list[i]};
        }
        return fields;
    }

    /**
     * @private
     */
    function tableList(itemName, records, itemCallback) {
        var count = records.length;
        var fields = new Array(count + 1);
        fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};
        for (var i = 0; i < count; i++) {
            fields[i + 1] = {name: itemName + i, type: 'TABLE', value: itemCallback(records[i], i)};
        }
        return fields;
    }

    /**
     * @private
     */
    function recordList(itemName, records, itemCallback) {
        var count = records.length;
        var fields = [];
        fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};
        for (var i = 0; i < count; i++) {
            fields = fields.concat(itemCallback(records[i], i));
        }
        return fields;
    }

    // Common Layout Tables

    /**
     * @exports opentype.Coverage
     * @class
     * @param {opentype.Table}
     * @constructor
     * @extends opentype.Table
     */
    function Coverage(coverageTable) {
        if (coverageTable.format === 1) {
            Table.call(this, 'coverageTable',
                [{name: 'coverageFormat', type: 'USHORT', value: 1}]
                .concat(ushortList('glyph', coverageTable.glyphs))
            );
        } else {
            check.assert(false, 'Can\'t create coverage table format 2 yet.');
        }
    }
    Coverage.prototype = Object.create(Table.prototype);
    Coverage.prototype.constructor = Coverage;

    function ScriptList(scriptListTable) {
        Table.call(this, 'scriptListTable',
            recordList('scriptRecord', scriptListTable, function(scriptRecord, i) {
                var script = scriptRecord.script;
                var defaultLangSys = script.defaultLangSys;
                check.assert(!!defaultLangSys, 'Unable to write GSUB: script ' + scriptRecord.tag + ' has no default language system.');
                return [
                    {name: 'scriptTag' + i, type: 'TAG', value: scriptRecord.tag},
                    {name: 'script' + i, type: 'TABLE', value: new Table('scriptTable', [
                        {name: 'defaultLangSys', type: 'TABLE', value: new Table('defaultLangSys', [
                            {name: 'lookupOrder', type: 'USHORT', value: 0},
                            {name: 'reqFeatureIndex', type: 'USHORT', value: defaultLangSys.reqFeatureIndex}]
                            .concat(ushortList('featureIndex', defaultLangSys.featureIndexes)))}
                        ].concat(recordList('langSys', script.langSysRecords, function(langSysRecord, i) {
                            var langSys = langSysRecord.langSys;
                            return [
                                {name: 'langSysTag' + i, type: 'TAG', value: langSysRecord.tag},
                                {name: 'langSys' + i, type: 'TABLE', value: new Table('langSys', [
                                    {name: 'lookupOrder', type: 'USHORT', value: 0},
                                    {name: 'reqFeatureIndex', type: 'USHORT', value: langSys.reqFeatureIndex}
                                    ].concat(ushortList('featureIndex', langSys.featureIndexes)))}
                            ];
                        })))}
                ];
            })
        );
    }
    ScriptList.prototype = Object.create(Table.prototype);
    ScriptList.prototype.constructor = ScriptList;

    /**
     * @exports opentype.FeatureList
     * @class
     * @param {opentype.Table}
     * @constructor
     * @extends opentype.Table
     */
    function FeatureList(featureListTable) {
        Table.call(this, 'featureListTable',
            recordList('featureRecord', featureListTable, function(featureRecord, i) {
                var feature = featureRecord.feature;
                return [
                    {name: 'featureTag' + i, type: 'TAG', value: featureRecord.tag},
                    {name: 'feature' + i, type: 'TABLE', value: new Table('featureTable', [
                        {name: 'featureParams', type: 'USHORT', value: feature.featureParams} ].concat(ushortList('lookupListIndex', feature.lookupListIndexes)))}
                ];
            })
        );
    }
    FeatureList.prototype = Object.create(Table.prototype);
    FeatureList.prototype.constructor = FeatureList;

    /**
     * @exports opentype.LookupList
     * @class
     * @param {opentype.Table}
     * @param {Object}
     * @constructor
     * @extends opentype.Table
     */
    function LookupList(lookupListTable, subtableMakers) {
        Table.call(this, 'lookupListTable', tableList('lookup', lookupListTable, function(lookupTable) {
            var subtableCallback = subtableMakers[lookupTable.lookupType];
            check.assert(!!subtableCallback, 'Unable to write GSUB lookup type ' + lookupTable.lookupType + ' tables.');
            return new Table('lookupTable', [
                {name: 'lookupType', type: 'USHORT', value: lookupTable.lookupType},
                {name: 'lookupFlag', type: 'USHORT', value: lookupTable.lookupFlag}
            ].concat(tableList('subtable', lookupTable.subtables, subtableCallback)));
        }));
    }
    LookupList.prototype = Object.create(Table.prototype);
    LookupList.prototype.constructor = LookupList;

    // Record = same as Table, but inlined (a Table has an offset and its data is further in the stream)
    // Don't use offsets inside Records (probable bug), only in Tables.
    var table = {
        Table: Table,
        Record: Table,
        Coverage: Coverage,
        ScriptList: ScriptList,
        FeatureList: FeatureList,
        LookupList: LookupList,
        ushortList: ushortList,
        tableList: tableList,
        recordList: recordList,
    };

    // Parsing utility functions

    // Retrieve an unsigned byte from the DataView.
    function getByte(dataView, offset) {
        return dataView.getUint8(offset);
    }

    // Retrieve an unsigned 16-bit short from the DataView.
    // The value is stored in big endian.
    function getUShort(dataView, offset) {
        return dataView.getUint16(offset, false);
    }

    // Retrieve a signed 16-bit short from the DataView.
    // The value is stored in big endian.
    function getShort(dataView, offset) {
        return dataView.getInt16(offset, false);
    }

    // Retrieve an unsigned 32-bit long from the DataView.
    // The value is stored in big endian.
    function getULong(dataView, offset) {
        return dataView.getUint32(offset, false);
    }

    // Retrieve a 32-bit signed fixed-point number (16.16) from the DataView.
    // The value is stored in big endian.
    function getFixed(dataView, offset) {
        var decimal = dataView.getInt16(offset, false);
        var fraction = dataView.getUint16(offset + 2, false);
        return decimal + fraction / 65535;
    }

    // Retrieve a 4-character tag from the DataView.
    // Tags are used to identify tables.
    function getTag(dataView, offset) {
        var tag = '';
        for (var i = offset; i < offset + 4; i += 1) {
            tag += String.fromCharCode(dataView.getInt8(i));
        }

        return tag;
    }

    // Retrieve an offset from the DataView.
    // Offsets are 1 to 4 bytes in length, depending on the offSize argument.
    function getOffset(dataView, offset, offSize) {
        var v = 0;
        for (var i = 0; i < offSize; i += 1) {
            v <<= 8;
            v += dataView.getUint8(offset + i);
        }

        return v;
    }

    // Retrieve a number of bytes from start offset to the end offset from the DataView.
    function getBytes(dataView, startOffset, endOffset) {
        var bytes = [];
        for (var i = startOffset; i < endOffset; i += 1) {
            bytes.push(dataView.getUint8(i));
        }

        return bytes;
    }

    // Convert the list of bytes to a string.
    function bytesToString(bytes) {
        var s = '';
        for (var i = 0; i < bytes.length; i += 1) {
            s += String.fromCharCode(bytes[i]);
        }

        return s;
    }

    var typeOffsets = {
        byte: 1,
        uShort: 2,
        short: 2,
        uLong: 4,
        fixed: 4,
        longDateTime: 8,
        tag: 4
    };

    // A stateful parser that changes the offset whenever a value is retrieved.
    // The data is a DataView.
    function Parser(data, offset) {
        this.data = data;
        this.offset = offset;
        this.relativeOffset = 0;
    }

    Parser.prototype.parseByte = function() {
        var v = this.data.getUint8(this.offset + this.relativeOffset);
        this.relativeOffset += 1;
        return v;
    };

    Parser.prototype.parseChar = function() {
        var v = this.data.getInt8(this.offset + this.relativeOffset);
        this.relativeOffset += 1;
        return v;
    };

    Parser.prototype.parseCard8 = Parser.prototype.parseByte;

    Parser.prototype.parseUShort = function() {
        var v = this.data.getUint16(this.offset + this.relativeOffset);
        this.relativeOffset += 2;
        return v;
    };

    Parser.prototype.parseCard16 = Parser.prototype.parseUShort;
    Parser.prototype.parseSID = Parser.prototype.parseUShort;
    Parser.prototype.parseOffset16 = Parser.prototype.parseUShort;

    Parser.prototype.parseShort = function() {
        var v = this.data.getInt16(this.offset + this.relativeOffset);
        this.relativeOffset += 2;
        return v;
    };

    Parser.prototype.parseF2Dot14 = function() {
        var v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;
        this.relativeOffset += 2;
        return v;
    };

    Parser.prototype.parseULong = function() {
        var v = getULong(this.data, this.offset + this.relativeOffset);
        this.relativeOffset += 4;
        return v;
    };

    Parser.prototype.parseOffset32 = Parser.prototype.parseULong;

    Parser.prototype.parseFixed = function() {
        var v = getFixed(this.data, this.offset + this.relativeOffset);
        this.relativeOffset += 4;
        return v;
    };

    Parser.prototype.parseString = function(length) {
        var dataView = this.data;
        var offset = this.offset + this.relativeOffset;
        var string = '';
        this.relativeOffset += length;
        for (var i = 0; i < length; i++) {
            string += String.fromCharCode(dataView.getUint8(offset + i));
        }

        return string;
    };

    Parser.prototype.parseTag = function() {
        return this.parseString(4);
    };

    // LONGDATETIME is a 64-bit integer.
    // JavaScript and unix timestamps traditionally use 32 bits, so we
    // only take the last 32 bits.
    // + Since until 2038 those bits will be filled by zeros we can ignore them.
    Parser.prototype.parseLongDateTime = function() {
        var v = getULong(this.data, this.offset + this.relativeOffset + 4);
        // Subtract seconds between 01/01/1904 and 01/01/1970
        // to convert Apple Mac timestamp to Standard Unix timestamp
        v -= 2082844800;
        this.relativeOffset += 8;
        return v;
    };

    Parser.prototype.parseVersion = function(minorBase) {
        var major = getUShort(this.data, this.offset + this.relativeOffset);

        // How to interpret the minor version is very vague in the spec. 0x5000 is 5, 0x1000 is 1
        // Default returns the correct number if minor = 0xN000 where N is 0-9
        // Set minorBase to 1 for tables that use minor = N where N is 0-9
        var minor = getUShort(this.data, this.offset + this.relativeOffset + 2);
        this.relativeOffset += 4;
        if (minorBase === undefined) { minorBase = 0x1000; }
        return major + minor / minorBase / 10;
    };

    Parser.prototype.skip = function(type, amount) {
        if (amount === undefined) {
            amount = 1;
        }

        this.relativeOffset += typeOffsets[type] * amount;
    };

    ///// Parsing lists and records ///////////////////////////////

    // Parse a list of 32 bit unsigned integers.
    Parser.prototype.parseULongList = function(count) {
        if (count === undefined) { count = this.parseULong(); }
        var offsets = new Array(count);
        var dataView = this.data;
        var offset = this.offset + this.relativeOffset;
        for (var i = 0; i < count; i++) {
            offsets[i] = dataView.getUint32(offset);
            offset += 4;
        }

        this.relativeOffset += count * 4;
        return offsets;
    };

    // Parse a list of 16 bit unsigned integers. The length of the list can be read on the stream
    // or provided as an argument.
    Parser.prototype.parseOffset16List =
    Parser.prototype.parseUShortList = function(count) {
        if (count === undefined) { count = this.parseUShort(); }
        var offsets = new Array(count);
        var dataView = this.data;
        var offset = this.offset + this.relativeOffset;
        for (var i = 0; i < count; i++) {
            offsets[i] = dataView.getUint16(offset);
            offset += 2;
        }

        this.relativeOffset += count * 2;
        return offsets;
    };

    // Parses a list of 16 bit signed integers.
    Parser.prototype.parseShortList = function(count) {
        var list = new Array(count);
        var dataView = this.data;
        var offset = this.offset + this.relativeOffset;
        for (var i = 0; i < count; i++) {
            list[i] = dataView.getInt16(offset);
            offset += 2;
        }

        this.relativeOffset += count * 2;
        return list;
    };

    // Parses a list of bytes.
    Parser.prototype.parseByteList = function(count) {
        var list = new Array(count);
        var dataView = this.data;
        var offset = this.offset + this.relativeOffset;
        for (var i = 0; i < count; i++) {
            list[i] = dataView.getUint8(offset++);
        }

        this.relativeOffset += count;
        return list;
    };

    /**
     * Parse a list of items.
     * Record count is optional, if omitted it is read from the stream.
     * itemCallback is one of the Parser methods.
     */
    Parser.prototype.parseList = function(count, itemCallback) {
        if (!itemCallback) {
            itemCallback = count;
            count = this.parseUShort();
        }
        var list = new Array(count);
        for (var i = 0; i < count; i++) {
            list[i] = itemCallback.call(this);
        }
        return list;
    };

    Parser.prototype.parseList32 = function(count, itemCallback) {
        if (!itemCallback) {
            itemCallback = count;
            count = this.parseULong();
        }
        var list = new Array(count);
        for (var i = 0; i < count; i++) {
            list[i] = itemCallback.call(this);
        }
        return list;
    };

    /**
     * Parse a list of records.
     * Record count is optional, if omitted it is read from the stream.
     * Example of recordDescription: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }
     */
    Parser.prototype.parseRecordList = function(count, recordDescription) {
        // If the count argument is absent, read it in the stream.
        if (!recordDescription) {
            recordDescription = count;
            count = this.parseUShort();
        }
        var records = new Array(count);
        var fields = Object.keys(recordDescription);
        for (var i = 0; i < count; i++) {
            var rec = {};
            for (var j = 0; j < fields.length; j++) {
                var fieldName = fields[j];
                var fieldType = recordDescription[fieldName];
                rec[fieldName] = fieldType.call(this);
            }
            records[i] = rec;
        }
        return records;
    };

    Parser.prototype.parseRecordList32 = function(count, recordDescription) {
        // If the count argument is absent, read it in the stream.
        if (!recordDescription) {
            recordDescription = count;
            count = this.parseULong();
        }
        var records = new Array(count);
        var fields = Object.keys(recordDescription);
        for (var i = 0; i < count; i++) {
            var rec = {};
            for (var j = 0; j < fields.length; j++) {
                var fieldName = fields[j];
                var fieldType = recordDescription[fieldName];
                rec[fieldName] = fieldType.call(this);
            }
            records[i] = rec;
        }
        return records;
    };

    // Parse a data structure into an object
    // Example of description: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }
    Parser.prototype.parseStruct = function(description) {
        if (typeof description === 'function') {
            return description.call(this);
        } else {
            var fields = Object.keys(description);
            var struct = {};
            for (var j = 0; j < fields.length; j++) {
                var fieldName = fields[j];
                var fieldType = description[fieldName];
                struct[fieldName] = fieldType.call(this);
            }
            return struct;
        }
    };

    /**
     * Parse a GPOS valueRecord
     * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record
     * valueFormat is optional, if omitted it is read from the stream.
     */
    Parser.prototype.parseValueRecord = function(valueFormat) {
        if (valueFormat === undefined) {
            valueFormat = this.parseUShort();
        }
        if (valueFormat === 0) {
            // valueFormat2 in kerning pairs is most often 0
            // in this case return undefined instead of an empty object, to save space
            return;
        }
        var valueRecord = {};

        if (valueFormat & 0x0001) { valueRecord.xPlacement = this.parseShort(); }
        if (valueFormat & 0x0002) { valueRecord.yPlacement = this.parseShort(); }
        if (valueFormat & 0x0004) { valueRecord.xAdvance = this.parseShort(); }
        if (valueFormat & 0x0008) { valueRecord.yAdvance = this.parseShort(); }

        // Device table (non-variable font) / VariationIndex table (variable font) not supported
        // https://docs.microsoft.com/fr-fr/typography/opentype/spec/chapter2#devVarIdxTbls
        if (valueFormat & 0x0010) { valueRecord.xPlaDevice = undefined; this.parseShort(); }
        if (valueFormat & 0x0020) { valueRecord.yPlaDevice = undefined; this.parseShort(); }
        if (valueFormat & 0x0040) { valueRecord.xAdvDevice = undefined; this.parseShort(); }
        if (valueFormat & 0x0080) { valueRecord.yAdvDevice = undefined; this.parseShort(); }

        return valueRecord;
    };

    /**
     * Parse a list of GPOS valueRecords
     * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record
     * valueFormat and valueCount are read from the stream.
     */
    Parser.prototype.parseValueRecordList = function() {
        var valueFormat = this.parseUShort();
        var valueCount = this.parseUShort();
        var values = new Array(valueCount);
        for (var i = 0; i < valueCount; i++) {
            values[i] = this.parseValueRecord(valueFormat);
        }
        return values;
    };

    Parser.prototype.parsePointer = function(description) {
        var structOffset = this.parseOffset16();
        if (structOffset > 0) {
            // NULL offset => return undefined
            return new Parser(this.data, this.offset + structOffset).parseStruct(description);
        }
        return undefined;
    };

    Parser.prototype.parsePointer32 = function(description) {
        var structOffset = this.parseOffset32();
        if (structOffset > 0) {
            // NULL offset => return undefined
            return new Parser(this.data, this.offset + structOffset).parseStruct(description);
        }
        return undefined;
    };

    /**
     * Parse a list of offsets to lists of 16-bit integers,
     * or a list of offsets to lists of offsets to any kind of items.
     * If itemCallback is not provided, a list of list of UShort is assumed.
     * If provided, itemCallback is called on each item and must parse the item.
     * See examples in tables/gsub.js
     */
    Parser.prototype.parseListOfLists = function(itemCallback) {
        var offsets = this.parseOffset16List();
        var count = offsets.length;
        var relativeOffset = this.relativeOffset;
        var list = new Array(count);
        for (var i = 0; i < count; i++) {
            var start = offsets[i];
            if (start === 0) {
                // NULL offset
                // Add i as owned property to list. Convenient with assert.
                list[i] = undefined;
                continue;
            }
            this.relativeOffset = start;
            if (itemCallback) {
                var subOffsets = this.parseOffset16List();
                var subList = new Array(subOffsets.length);
                for (var j = 0; j < subOffsets.length; j++) {
                    this.relativeOffset = start + subOffsets[j];
                    subList[j] = itemCallback.call(this);
                }
                list[i] = subList;
            } else {
                list[i] = this.parseUShortList();
            }
        }
        this.relativeOffset = relativeOffset;
        return list;
    };

    ///// Complex tables parsing //////////////////////////////////

    // Parse a coverage table in a GSUB, GPOS or GDEF table.
    // https://www.microsoft.com/typography/OTSPEC/chapter2.htm
    // parser.offset must point to the start of the table containing the coverage.
    Parser.prototype.parseCoverage = function() {
        var startOffset = this.offset + this.relativeOffset;
        var format = this.parseUShort();
        var count = this.parseUShort();
        if (format === 1) {
            return {
                format: 1,
                glyphs: this.parseUShortList(count)
            };
        } else if (format === 2) {
            var ranges = new Array(count);
            for (var i = 0; i < count; i++) {
                ranges[i] = {
                    start: this.parseUShort(),
                    end: this.parseUShort(),
                    index: this.parseUShort()
                };
            }
            return {
                format: 2,
                ranges: ranges
            };
        }
        throw new Error('0x' + startOffset.toString(16) + ': Coverage format must be 1 or 2.');
    };

    // Parse a Class Definition Table in a GSUB, GPOS or GDEF table.
    // https://www.microsoft.com/typography/OTSPEC/chapter2.htm
    Parser.prototype.parseClassDef = function() {
        var startOffset = this.offset + this.relativeOffset;
        var format = this.parseUShort();
        if (format === 1) {
            return {
                format: 1,
                startGlyph: this.parseUShort(),
                classes: this.parseUShortList()
            };
        } else if (format === 2) {
            return {
                format: 2,
                ranges: this.parseRecordList({
                    start: Parser.uShort,
                    end: Parser.uShort,
                    classId: Parser.uShort
                })
            };
        }
        throw new Error('0x' + startOffset.toString(16) + ': ClassDef format must be 1 or 2.');
    };

    ///// Static methods ///////////////////////////////////
    // These convenience methods can be used as callbacks and should be called with "this" context set to a Parser instance.

    Parser.list = function(count, itemCallback) {
        return function() {
            return this.parseList(count, itemCallback);
        };
    };

    Parser.list32 = function(count, itemCallback) {
        return function() {
            return this.parseList32(count, itemCallback);
        };
    };

    Parser.recordList = function(count, recordDescription) {
        return function() {
            return this.parseRecordList(count, recordDescription);
        };
    };

    Parser.recordList32 = function(count, recordDescription) {
        return function() {
            return this.parseRecordList32(count, recordDescription);
        };
    };

    Parser.pointer = function(description) {
        return function() {
            return this.parsePointer(description);
        };
    };

    Parser.pointer32 = function(description) {
        return function() {
            return this.parsePointer32(description);
        };
    };

    Parser.tag = Parser.prototype.parseTag;
    Parser.byte = Parser.prototype.parseByte;
    Parser.uShort = Parser.offset16 = Parser.prototype.parseUShort;
    Parser.uShortList = Parser.prototype.parseUShortList;
    Parser.uLong = Parser.offset32 = Parser.prototype.parseULong;
    Parser.uLongList = Parser.prototype.parseULongList;
    Parser.struct = Parser.prototype.parseStruct;
    Parser.coverage = Parser.prototype.parseCoverage;
    Parser.classDef = Parser.prototype.parseClassDef;

    ///// Script, Feature, Lookup lists ///////////////////////////////////////////////
    // https://www.microsoft.com/typography/OTSPEC/chapter2.htm

    var langSysTable = {
        reserved: Parser.uShort,
        reqFeatureIndex: Parser.uShort,
        featureIndexes: Parser.uShortList
    };

    Parser.prototype.parseScriptList = function() {
        return this.parsePointer(Parser.recordList({
            tag: Parser.tag,
            script: Parser.pointer({
                defaultLangSys: Parser.pointer(langSysTable),
                langSysRecords: Parser.recordList({
                    tag: Parser.tag,
                    langSys: Parser.pointer(langSysTable)
                })
            })
        })) || [];
    };

    Parser.prototype.parseFeatureList = function() {
        return this.parsePointer(Parser.recordList({
            tag: Parser.tag,
            feature: Parser.pointer({
                featureParams: Parser.offset16,
                lookupListIndexes: Parser.uShortList
            })
        })) || [];
    };

    Parser.prototype.parseLookupList = function(lookupTableParsers) {
        return this.parsePointer(Parser.list(Parser.pointer(function() {
            var lookupType = this.parseUShort();
            check.argument(1 <= lookupType && lookupType <= 9, 'GPOS/GSUB lookup type ' + lookupType + ' unknown.');
            var lookupFlag = this.parseUShort();
            var useMarkFilteringSet = lookupFlag & 0x10;
            return {
                lookupType: lookupType,
                lookupFlag: lookupFlag,
                subtables: this.parseList(Parser.pointer(lookupTableParsers[lookupType])),
                markFilteringSet: useMarkFilteringSet ? this.parseUShort() : undefined
            };
        }))) || [];
    };

    Parser.prototype.parseFeatureVariationsList = function() {
        return this.parsePointer32(function() {
            var majorVersion = this.parseUShort();
            var minorVersion = this.parseUShort();
            check.argument(majorVersion === 1 && minorVersion < 1, 'GPOS/GSUB feature variations table unknown.');
            var featureVariations = this.parseRecordList32({
                conditionSetOffset: Parser.offset32,
                featureTableSubstitutionOffset: Parser.offset32
            });
            return featureVariations;
        }) || [];
    };

    var parse = {
        getByte: getByte,
        getCard8: getByte,
        getUShort: getUShort,
        getCard16: getUShort,
        getShort: getShort,
        getULong: getULong,
        getFixed: getFixed,
        getTag: getTag,
        getOffset: getOffset,
        getBytes: getBytes,
        bytesToString: bytesToString,
        Parser: Parser,
    };

    // The `cmap` table stores the mappings from characters to glyphs.

    function parseCmapTableFormat12(cmap, p) {
        //Skip reserved.
        p.parseUShort();

        // Length in bytes of the sub-tables.
        cmap.length = p.parseULong();
        cmap.language = p.parseULong();

        var groupCount;
        cmap.groupCount = groupCount = p.parseULong();
        cmap.glyphIndexMap = {};

        for (var i = 0; i < groupCount; i += 1) {
            var startCharCode = p.parseULong();
            var endCharCode = p.parseULong();
            var startGlyphId = p.parseULong();

            for (var c = startCharCode; c <= endCharCode; c += 1) {
                cmap.glyphIndexMap[c] = startGlyphId;
                startGlyphId++;
            }
        }
    }

    function parseCmapTableFormat4(cmap, p, data, start, offset) {
        // Length in bytes of the sub-tables.
        cmap.length = p.parseUShort();
        cmap.language = p.parseUShort();

        // segCount is stored x 2.
        var segCount;
        cmap.segCount = segCount = p.parseUShort() >> 1;

        // Skip searchRange, entrySelector, rangeShift.
        p.skip('uShort', 3);

        // The "unrolled" mapping from character codes to glyph indices.
        cmap.glyphIndexMap = {};
        var endCountParser = new parse.Parser(data, start + offset + 14);
        var startCountParser = new parse.Parser(data, start + offset + 16 + segCount * 2);
        var idDeltaParser = new parse.Parser(data, start + offset + 16 + segCount * 4);
        var idRangeOffsetParser = new parse.Parser(data, start + offset + 16 + segCount * 6);
        var glyphIndexOffset = start + offset + 16 + segCount * 8;
        for (var i = 0; i < segCount - 1; i += 1) {
            var glyphIndex = (void 0);
            var endCount = endCountParser.parseUShort();
            var startCount = startCountParser.parseUShort();
            var idDelta = idDeltaParser.parseShort();
            var idRangeOffset = idRangeOffsetParser.parseUShort();
            for (var c = startCount; c <= endCount; c += 1) {
                if (idRangeOffset !== 0) {
                    // The idRangeOffset is relative to the current position in the idRangeOffset array.
                    // Take the current offset in the idRangeOffset array.
                    glyphIndexOffset = (idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2);

                    // Add the value of the idRangeOffset, which will move us into the glyphIndex array.
                    glyphIndexOffset += idRangeOffset;

                    // Then add the character index of the current segment, multiplied by 2 for USHORTs.
                    glyphIndexOffset += (c - startCount) * 2;
                    glyphIndex = parse.getUShort(data, glyphIndexOffset);
                    if (glyphIndex !== 0) {
                        glyphIndex = (glyphIndex + idDelta) & 0xFFFF;
                    }
                } else {
                    glyphIndex = (c + idDelta) & 0xFFFF;
                }

                cmap.glyphIndexMap[c] = glyphIndex;
            }
        }
    }

    // Parse the `cmap` table. This table stores the mappings from characters to glyphs.
    // There are many available formats, but we only support the Windows format 4 and 12.
    // This function returns a `CmapEncoding` object or null if no supported format could be found.
    function parseCmapTable(data, start) {
        var cmap = {};
        cmap.version = parse.getUShort(data, start);
        check.argument(cmap.version === 0, 'cmap table version should be 0.');

        // The cmap table can contain many sub-tables, each with their own format.
        // We're only interested in a "platform 0" (Unicode format) and "platform 3" (Windows format) table.
        cmap.numTables = parse.getUShort(data, start + 2);
        var offset = -1;
        for (var i = cmap.numTables - 1; i >= 0; i -= 1) {
            var platformId = parse.getUShort(data, start + 4 + (i * 8));
            var encodingId = parse.getUShort(data, start + 4 + (i * 8) + 2);
            if ((platformId === 3 && (encodingId === 0 || encodingId === 1 || encodingId === 10)) ||
                (platformId === 0 && (encodingId === 0 || encodingId === 1 || encodingId === 2 || encodingId === 3 || encodingId === 4))) {
                offset = parse.getULong(data, start + 4 + (i * 8) + 4);
                break;
            }
        }

        if (offset === -1) {
            // There is no cmap table in the font that we support.
            throw new Error('No valid cmap sub-tables found.');
        }

        var p = new parse.Parser(data, start + offset);
        cmap.format = p.parseUShort();

        if (cmap.format === 12) {
            parseCmapTableFormat12(cmap, p);
        } else if (cmap.format === 4) {
            parseCmapTableFormat4(cmap, p, data, start, offset);
        } else {
            throw new Error('Only format 4 and 12 cmap tables are supported (found format ' + cmap.format + ').');
        }

        return cmap;
    }

    function addSegment(t, code, glyphIndex) {
        t.segments.push({
            end: code,
            start: code,
            delta: -(code - glyphIndex),
            offset: 0,
            glyphIndex: glyphIndex
        });
    }

    function addTerminatorSegment(t) {
        t.segments.push({
            end: 0xFFFF,
            start: 0xFFFF,
            delta: 1,
            offset: 0
        });
    }

    // Make cmap table, format 4 by default, 12 if needed only
    function makeCmapTable(glyphs) {
        // Plan 0 is the base Unicode Plan but emojis, for example are on another plan, and needs cmap 12 format (with 32bit)
        var isPlan0Only = true;
        var i;

        // Check if we need to add cmap format 12 or if format 4 only is fine
        for (i = glyphs.length - 1; i > 0; i -= 1) {
            var g = glyphs.get(i);
            if (g.unicode > 65535) {
                console.log('Adding CMAP format 12 (needed!)');
                isPlan0Only = false;
                break;
            }
        }

        var cmapTable = [
            {name: 'version', type: 'USHORT', value: 0},
            {name: 'numTables', type: 'USHORT', value: isPlan0Only ? 1 : 2},

            // CMAP 4 header
            {name: 'platformID', type: 'USHORT', value: 3},
            {name: 'encodingID', type: 'USHORT', value: 1},
            {name: 'offset', type: 'ULONG', value: isPlan0Only ? 12 : (12 + 8)}
        ];

        if (!isPlan0Only)
            { cmapTable = cmapTable.concat([
                // CMAP 12 header
                {name: 'cmap12PlatformID', type: 'USHORT', value: 3}, // We encode only for PlatformID = 3 (Windows) because it is supported everywhere
                {name: 'cmap12EncodingID', type: 'USHORT', value: 10},
                {name: 'cmap12Offset', type: 'ULONG', value: 0}
            ]); }

        cmapTable = cmapTable.concat([
            // CMAP 4 Subtable
            {name: 'format', type: 'USHORT', value: 4},
            {name: 'cmap4Length', type: 'USHORT', value: 0},
            {name: 'language', type: 'USHORT', value: 0},
            {name: 'segCountX2', type: 'USHORT', value: 0},
            {name: 'searchRange', type: 'USHORT', value: 0},
            {name: 'entrySelector', type: 'USHORT', value: 0},
            {name: 'rangeShift', type: 'USHORT', value: 0}
        ]);

        var t = new table.Table('cmap', cmapTable);

        t.segments = [];
        for (i = 0; i < glyphs.length; i += 1) {
            var glyph = glyphs.get(i);
            for (var j = 0; j < glyph.unicodes.length; j += 1) {
                addSegment(t, glyph.unicodes[j], i);
            }

            t.segments = t.segments.sort(function (a, b) {
                return a.start - b.start;
            });
        }

        addTerminatorSegment(t);

        var segCount = t.segments.length;
        var segCountToRemove = 0;

        // CMAP 4
        // Set up parallel segment arrays.
        var endCounts = [];
        var startCounts = [];
        var idDeltas = [];
        var idRangeOffsets = [];
        var glyphIds = [];

        // CMAP 12
        var cmap12Groups = [];

        // Reminder this loop is not following the specification at 100%
        // The specification -> find suites of characters and make a group
        // Here we're doing one group for each letter
        // Doing as the spec can save 8 times (or more) space
        for (i = 0; i < segCount; i += 1) {
            var segment = t.segments[i];

            // CMAP 4
            if (segment.end <= 65535 && segment.start <= 65535) {
                endCounts = endCounts.concat({name: 'end_' + i, type: 'USHORT', value: segment.end});
                startCounts = startCounts.concat({name: 'start_' + i, type: 'USHORT', value: segment.start});
                idDeltas = idDeltas.concat({name: 'idDelta_' + i, type: 'SHORT', value: segment.delta});
                idRangeOffsets = idRangeOffsets.concat({name: 'idRangeOffset_' + i, type: 'USHORT', value: segment.offset});
                if (segment.glyphId !== undefined) {
                    glyphIds = glyphIds.concat({name: 'glyph_' + i, type: 'USHORT', value: segment.glyphId});
                }
            } else {
                // Skip Unicode > 65535 (16bit unsigned max) for CMAP 4, will be added in CMAP 12
                segCountToRemove += 1;
            }

            // CMAP 12
            // Skip Terminator Segment
            if (!isPlan0Only && segment.glyphIndex !== undefined) {
                cmap12Groups = cmap12Groups.concat({name: 'cmap12Start_' + i, type: 'ULONG', value: segment.start});
                cmap12Groups = cmap12Groups.concat({name: 'cmap12End_' + i, type: 'ULONG', value: segment.end});
                cmap12Groups = cmap12Groups.concat({name: 'cmap12Glyph_' + i, type: 'ULONG', value: segment.glyphIndex});
            }
        }

        // CMAP 4 Subtable
        t.segCountX2 = (segCount - segCountToRemove) * 2;
        t.searchRange = Math.pow(2, Math.floor(Math.log((segCount - segCountToRemove)) / Math.log(2))) * 2;
        t.entrySelector = Math.log(t.searchRange / 2) / Math.log(2);
        t.rangeShift = t.segCountX2 - t.searchRange;

        t.fields = t.fields.concat(endCounts);
        t.fields.push({name: 'reservedPad', type: 'USHORT', value: 0});
        t.fields = t.fields.concat(startCounts);
        t.fields = t.fields.concat(idDeltas);
        t.fields = t.fields.concat(idRangeOffsets);
        t.fields = t.fields.concat(glyphIds);

        t.cmap4Length = 14 + // Subtable header
            endCounts.length * 2 +
            2 + // reservedPad
            startCounts.length * 2 +
            idDeltas.length * 2 +
            idRangeOffsets.length * 2 +
            glyphIds.length * 2;

        if (!isPlan0Only) {
            // CMAP 12 Subtable
            var cmap12Length = 16 + // Subtable header
                cmap12Groups.length * 4;

            t.cmap12Offset = 12 + (2 * 2) + 4 + t.cmap4Length;
            t.fields = t.fields.concat([
                {name: 'cmap12Format', type: 'USHORT', value: 12},
                {name: 'cmap12Reserved', type: 'USHORT', value: 0},
                {name: 'cmap12Length', type: 'ULONG', value: cmap12Length},
                {name: 'cmap12Language', type: 'ULONG', value: 0},
                {name: 'cmap12nGroups', type: 'ULONG', value: cmap12Groups.length / 3}
            ]);

            t.fields = t.fields.concat(cmap12Groups);
        }

        return t;
    }

    var cmap = { parse: parseCmapTable, make: makeCmapTable };

    // Glyph encoding

    var cffStandardStrings = [
        '.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',
        'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',
        'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',
        'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
        'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',
        'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
        'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling',
        'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft',
        'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph',
        'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand',
        'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring',
        'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE',
        'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu',
        'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn',
        'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright',
        'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex',
        'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex',
        'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute',
        'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute',
        'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute',
        'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave',
        'yacute', 'ydieresis', 'zcaron', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior',
        'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', '266 ff', 'onedotenleader',
        'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle',
        'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'commasuperior', 'threequartersemdash', 'periodsuperior',
        'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior',
        'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'ffi', 'ffl',
        'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',
        'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',
        'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',
        'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall',
        'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall',
        'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall',
        'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds',
        'zerosuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior',
        'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior',
        'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior',
        'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall',
        'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall',
        'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall',
        'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall',
        'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall', '001.000',
        '001.001', '001.002', '001.003', 'Black', 'Bold', 'Book', 'Light', 'Medium', 'Regular', 'Roman', 'Semibold'];

    var cffStandardEncoding = [
        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
        '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',
        'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',
        'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',
        'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
        'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',
        'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
        'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '',
        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
        'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle',
        'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger',
        'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright',
        'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde',
        'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron',
        'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '',
        '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '',
        'lslash', 'oslash', 'oe', 'germandbls'];

    var cffExpertEncoding = [
        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
        '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior',
        'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader',
        'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle',
        'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon',
        'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior',
        'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior',
        'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl',
        'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',
        'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',
        'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',
        'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '',
        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
        'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall',
        'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior',
        '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters',
        'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '',
        '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',
        'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior',
        'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior',
        'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall',
        'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall',
        'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall',
        'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall',
        'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall',
        'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];

    var standardNames = [
        '.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent',
        'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash',
        'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less',
        'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
        'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright',
        'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
        'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde',
        'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave',
        'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis',
        'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis',
        'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section',
        'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal',
        'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation',
        'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown',
        'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright',
        'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft',
        'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction',
        'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase',
        'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute',
        'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex',
        'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut',
        'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth',
        'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior',
        'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla',
        'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];

    /**
     * This is the encoding used for fonts created from scratch.
     * It loops through all glyphs and finds the appropriate unicode value.
     * Since it's linear time, other encodings will be faster.
     * @exports opentype.DefaultEncoding
     * @class
     * @constructor
     * @param {opentype.Font}
     */
    function DefaultEncoding(font) {
        this.font = font;
    }

    DefaultEncoding.prototype.charToGlyphIndex = function(c) {
        var code = c.codePointAt(0);
        var glyphs = this.font.glyphs;
        if (glyphs) {
            for (var i = 0; i < glyphs.length; i += 1) {
                var glyph = glyphs.get(i);
                for (var j = 0; j < glyph.unicodes.length; j += 1) {
                    if (glyph.unicodes[j] === code) {
                        return i;
                    }
                }
            }
        }
        return null;
    };

    /**
     * @exports opentype.CmapEncoding
     * @class
     * @constructor
     * @param {Object} cmap - a object with the cmap encoded data
     */
    function CmapEncoding(cmap) {
        this.cmap = cmap;
    }

    /**
     * @param  {string} c - the character
     * @return {number} The glyph index.
     */
    CmapEncoding.prototype.charToGlyphIndex = function(c) {
        return this.cmap.glyphIndexMap[c.codePointAt(0)] || 0;
    };

    /**
     * @exports opentype.CffEncoding
     * @class
     * @constructor
     * @param {string} encoding - The encoding
     * @param {Array} charset - The character set.
     */
    function CffEncoding(encoding, charset) {
        this.encoding = encoding;
        this.charset = charset;
    }

    /**
     * @param  {string} s - The character
     * @return {number} The index.
     */
    CffEncoding.prototype.charToGlyphIndex = function(s) {
        var code = s.codePointAt(0);
        var charName = this.encoding[code];
        return this.charset.indexOf(charName);
    };

    /**
     * @exports opentype.GlyphNames
     * @class
     * @constructor
     * @param {Object} post
     */
    function GlyphNames(post) {
        switch (post.version) {
            case 1:
                this.names = standardNames.slice();
                break;
            case 2:
                this.names = new Array(post.numberOfGlyphs);
                for (var i = 0; i < post.numberOfGlyphs; i++) {
                    if (post.glyphNameIndex[i] < standardNames.length) {
                        this.names[i] = standardNames[post.glyphNameIndex[i]];
                    } else {
                        this.names[i] = post.names[post.glyphNameIndex[i] - standardNames.length];
                    }
                }

                break;
            case 2.5:
                this.names = new Array(post.numberOfGlyphs);
                for (var i$1 = 0; i$1 < post.numberOfGlyphs; i$1++) {
                    this.names[i$1] = standardNames[i$1 + post.glyphNameIndex[i$1]];
                }

                break;
            case 3:
                this.names = [];
                break;
            default:
                this.names = [];
                break;
        }
    }

    /**
     * Gets the index of a glyph by name.
     * @param  {string} name - The glyph name
     * @return {number} The index
     */
    GlyphNames.prototype.nameToGlyphIndex = function(name) {
        return this.names.indexOf(name);
    };

    /**
     * @param  {number} gid
     * @return {string}
     */
    GlyphNames.prototype.glyphIndexToName = function(gid) {
        return this.names[gid];
    };

    function addGlyphNamesAll(font) {
        var glyph;
        var glyphIndexMap = font.tables.cmap.glyphIndexMap;
        var charCodes = Object.keys(glyphIndexMap);

        for (var i = 0; i < charCodes.length; i += 1) {
            var c = charCodes[i];
            var glyphIndex = glyphIndexMap[c];
            glyph = font.glyphs.get(glyphIndex);
            glyph.addUnicode(parseInt(c));
        }

        for (var i$1 = 0; i$1 < font.glyphs.length; i$1 += 1) {
            glyph = font.glyphs.get(i$1);
            if (font.cffEncoding) {
                if (font.isCIDFont) {
                    glyph.name = 'gid' + i$1;
                } else {
                    glyph.name = font.cffEncoding.charset[i$1];
                }
            } else if (font.glyphNames.names) {
                glyph.name = font.glyphNames.glyphIndexToName(i$1);
            }
        }
    }

    function addGlyphNamesToUnicodeMap(font) {
        font._IndexToUnicodeMap = {};

        var glyphIndexMap = font.tables.cmap.glyphIndexMap;
        var charCodes = Object.keys(glyphIndexMap);

        for (var i = 0; i < charCodes.length; i += 1) {
            var c = charCodes[i];
            var glyphIndex = glyphIndexMap[c];
            if (font._IndexToUnicodeMap[glyphIndex] === undefined) {
                font._IndexToUnicodeMap[glyphIndex] = {
                    unicodes: [parseInt(c)]
                };
            } else {
                font._IndexToUnicodeMap[glyphIndex].unicodes.push(parseInt(c));
            }
        }
    }

    /**
     * @alias opentype.addGlyphNames
     * @param {opentype.Font}
     * @param {Object}
     */
    function addGlyphNames(font, opt) {
        if (opt.lowMemory) {
            addGlyphNamesToUnicodeMap(font);
        } else {
            addGlyphNamesAll(font);
        }
    }

    // Drawing utility functions.

    // Draw a line on the given context from point `x1,y1` to point `x2,y2`.
    function line(ctx, x1, y1, x2, y2) {
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.stroke();
    }

    var draw = { line: line };

    // The Glyph object
    // import glyf from './tables/glyf' Can't be imported here, because it's a circular dependency

    function getPathDefinition(glyph, path) {
        var _path = path || new Path();
        return {
            configurable: true,

            get: function() {
                if (typeof _path === 'function') {
                    _path = _path();
                }

                return _path;
            },

            set: function(p) {
                _path = p;
            }
        };
    }
    /**
     * @typedef GlyphOptions
     * @type Object
     * @property {string} [name] - The glyph name
     * @property {number} [unicode]
     * @property {Array} [unicodes]
     * @property {number} [xMin]
     * @property {number} [yMin]
     * @property {number} [xMax]
     * @property {number} [yMax]
     * @property {number} [advanceWidth]
     */

    // A Glyph is an individual mark that often corresponds to a character.
    // Some glyphs, such as ligatures, are a combination of many characters.
    // Glyphs are the basic building blocks of a font.
    //
    // The `Glyph` class contains utility methods for drawing the path and its points.
    /**
     * @exports opentype.Glyph
     * @class
     * @param {GlyphOptions}
     * @constructor
     */
    function Glyph(options) {
        // By putting all the code on a prototype function (which is only declared once)
        // we reduce the memory requirements for larger fonts by some 2%
        this.bindConstructorValues(options);
    }

    /**
     * @param  {GlyphOptions}
     */
    Glyph.prototype.bindConstructorValues = function(options) {
        this.index = options.index || 0;

        // These three values cannot be deferred for memory optimization:
        this.name = options.name || null;
        this.unicode = options.unicode || undefined;
        this.unicodes = options.unicodes || options.unicode !== undefined ? [options.unicode] : [];

        // But by binding these values only when necessary, we reduce can
        // the memory requirements by almost 3% for larger fonts.
        if ('xMin' in options) {
            this.xMin = options.xMin;
        }

        if ('yMin' in options) {
            this.yMin = options.yMin;
        }

        if ('xMax' in options) {
            this.xMax = options.xMax;
        }

        if ('yMax' in options) {
            this.yMax = options.yMax;
        }

        if ('advanceWidth' in options) {
            this.advanceWidth = options.advanceWidth;
        }

        // The path for a glyph is the most memory intensive, and is bound as a value
        // with a getter/setter to ensure we actually do path parsing only once the
        // path is actually needed by anything.
        Object.defineProperty(this, 'path', getPathDefinition(this, options.path));
    };

    /**
     * @param {number}
     */
    Glyph.prototype.addUnicode = function(unicode) {
        if (this.unicodes.length === 0) {
            this.unicode = unicode;
        }

        this.unicodes.push(unicode);
    };

    /**
     * Calculate the minimum bounding box for this glyph.
     * @return {opentype.BoundingBox}
     */
    Glyph.prototype.getBoundingBox = function() {
        return this.path.getBoundingBox();
    };

    /**
     * Convert the glyph to a Path we can draw on a drawing context.
     * @param  {number} [x=0] - Horizontal position of the beginning of the text.
     * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
     * @param  {Object=} options - xScale, yScale to stretch the glyph.
     * @param  {opentype.Font} if hinting is to be used, the font
     * @return {opentype.Path}
     */
    Glyph.prototype.getPath = function(x, y, fontSize, options, font) {
        x = x !== undefined ? x : 0;
        y = y !== undefined ? y : 0;
        fontSize = fontSize !== undefined ? fontSize : 72;
        var commands;
        var hPoints;
        if (!options) { options = { }; }
        var xScale = options.xScale;
        var yScale = options.yScale;

        if (options.hinting && font && font.hinting) {
            // in case of hinting, the hinting engine takes care
            // of scaling the points (not the path) before hinting.
            hPoints = this.path && font.hinting.exec(this, fontSize);
            // in case the hinting engine failed hPoints is undefined
            // and thus reverts to plain rending
        }

        if (hPoints) {
            // Call font.hinting.getCommands instead of `glyf.getPath(hPoints).commands` to avoid a circular dependency
            commands = font.hinting.getCommands(hPoints);
            x = Math.round(x);
            y = Math.round(y);
            // TODO in case of hinting xyScaling is not yet supported
            xScale = yScale = 1;
        } else {
            commands = this.path.commands;
            var scale = 1 / (this.path.unitsPerEm || 1000) * fontSize;
            if (xScale === undefined) { xScale = scale; }
            if (yScale === undefined) { yScale = scale; }
        }

        var p = new Path();
        for (var i = 0; i < commands.length; i += 1) {
            var cmd = commands[i];
            if (cmd.type === 'M') {
                p.moveTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));
            } else if (cmd.type === 'L') {
                p.lineTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));
            } else if (cmd.type === 'Q') {
                p.quadraticCurveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),
                                   x + (cmd.x * xScale), y + (-cmd.y * yScale));
            } else if (cmd.type === 'C') {
                p.curveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),
                          x + (cmd.x2 * xScale), y + (-cmd.y2 * yScale),
                          x + (cmd.x * xScale), y + (-cmd.y * yScale));
            } else if (cmd.type === 'Z') {
                p.closePath();
            }
        }

        return p;
    };

    /**
     * Split the glyph into contours.
     * This function is here for backwards compatibility, and to
     * provide raw access to the TrueType glyph outlines.
     * @return {Array}
     */
    Glyph.prototype.getContours = function() {
        if (this.points === undefined) {
            return [];
        }

        var contours = [];
        var currentContour = [];
        for (var i = 0; i < this.points.length; i += 1) {
            var pt = this.points[i];
            currentContour.push(pt);
            if (pt.lastPointOfContour) {
                contours.push(currentContour);
                currentContour = [];
            }
        }

        check.argument(currentContour.length === 0, 'There are still points left in the current contour.');
        return contours;
    };

    /**
     * Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.
     * @return {Object}
     */
    Glyph.prototype.getMetrics = function() {
        var commands = this.path.commands;
        var xCoords = [];
        var yCoords = [];
        for (var i = 0; i < commands.length; i += 1) {
            var cmd = commands[i];
            if (cmd.type !== 'Z') {
                xCoords.push(cmd.x);
                yCoords.push(cmd.y);
            }

            if (cmd.type === 'Q' || cmd.type === 'C') {
                xCoords.push(cmd.x1);
                yCoords.push(cmd.y1);
            }

            if (cmd.type === 'C') {
                xCoords.push(cmd.x2);
                yCoords.push(cmd.y2);
            }
        }

        var metrics = {
            xMin: Math.min.apply(null, xCoords),
            yMin: Math.min.apply(null, yCoords),
            xMax: Math.max.apply(null, xCoords),
            yMax: Math.max.apply(null, yCoords),
            leftSideBearing: this.leftSideBearing
        };

        if (!isFinite(metrics.xMin)) {
            metrics.xMin = 0;
        }

        if (!isFinite(metrics.xMax)) {
            metrics.xMax = this.advanceWidth;
        }

        if (!isFinite(metrics.yMin)) {
            metrics.yMin = 0;
        }

        if (!isFinite(metrics.yMax)) {
            metrics.yMax = 0;
        }

        metrics.rightSideBearing = this.advanceWidth - metrics.leftSideBearing - (metrics.xMax - metrics.xMin);
        return metrics;
    };

    /**
     * Draw the glyph on the given context.
     * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
     * @param  {number} [x=0] - Horizontal position of the beginning of the text.
     * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
     * @param  {Object=} options - xScale, yScale to stretch the glyph.
     */
    Glyph.prototype.draw = function(ctx, x, y, fontSize, options) {
        this.getPath(x, y, fontSize, options).draw(ctx);
    };

    /**
     * Draw the points of the glyph.
     * On-curve points will be drawn in blue, off-curve points will be drawn in red.
     * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
     * @param  {number} [x=0] - Horizontal position of the beginning of the text.
     * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
     */
    Glyph.prototype.drawPoints = function(ctx, x, y, fontSize) {
        function drawCircles(l, x, y, scale) {
            ctx.beginPath();
            for (var j = 0; j < l.length; j += 1) {
                ctx.moveTo(x + (l[j].x * scale), y + (l[j].y * scale));
                ctx.arc(x + (l[j].x * scale), y + (l[j].y * scale), 2, 0, Math.PI * 2, false);
            }

            ctx.closePath();
            ctx.fill();
        }

        x = x !== undefined ? x : 0;
        y = y !== undefined ? y : 0;
        fontSize = fontSize !== undefined ? fontSize : 24;
        var scale = 1 / this.path.unitsPerEm * fontSize;

        var blueCircles = [];
        var redCircles = [];
        var path = this.path;
        for (var i = 0; i < path.commands.length; i += 1) {
            var cmd = path.commands[i];
            if (cmd.x !== undefined) {
                blueCircles.push({x: cmd.x, y: -cmd.y});
            }

            if (cmd.x1 !== undefined) {
                redCircles.push({x: cmd.x1, y: -cmd.y1});
            }

            if (cmd.x2 !== undefined) {
                redCircles.push({x: cmd.x2, y: -cmd.y2});
            }
        }

        ctx.fillStyle = 'blue';
        drawCircles(blueCircles, x, y, scale);
        ctx.fillStyle = 'red';
        drawCircles(redCircles, x, y, scale);
    };

    /**
     * Draw lines indicating important font measurements.
     * Black lines indicate the origin of the coordinate system (point 0,0).
     * Blue lines indicate the glyph bounding box.
     * Green line indicates the advance width of the glyph.
     * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
     * @param  {number} [x=0] - Horizontal position of the beginning of the text.
     * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
     */
    Glyph.prototype.drawMetrics = function(ctx, x, y, fontSize) {
        var scale;
        x = x !== undefined ? x : 0;
        y = y !== undefined ? y : 0;
        fontSize = fontSize !== undefined ? fontSize : 24;
        scale = 1 / this.path.unitsPerEm * fontSize;
        ctx.lineWidth = 1;

        // Draw the origin
        ctx.strokeStyle = 'black';
        draw.line(ctx, x, -10000, x, 10000);
        draw.line(ctx, -10000, y, 10000, y);

        // This code is here due to memory optimization: by not using
        // defaults in the constructor, we save a notable amount of memory.
        var xMin = this.xMin || 0;
        var yMin = this.yMin || 0;
        var xMax = this.xMax || 0;
        var yMax = this.yMax || 0;
        var advanceWidth = this.advanceWidth || 0;

        // Draw the glyph box
        ctx.strokeStyle = 'blue';
        draw.line(ctx, x + (xMin * scale), -10000, x + (xMin * scale), 10000);
        draw.line(ctx, x + (xMax * scale), -10000, x + (xMax * scale), 10000);
        draw.line(ctx, -10000, y + (-yMin * scale), 10000, y + (-yMin * scale));
        draw.line(ctx, -10000, y + (-yMax * scale), 10000, y + (-yMax * scale));

        // Draw the advance width
        ctx.strokeStyle = 'green';
        draw.line(ctx, x + (advanceWidth * scale), -10000, x + (advanceWidth * scale), 10000);
    };

    // The GlyphSet object

    // Define a property on the glyph that depends on the path being loaded.
    function defineDependentProperty(glyph, externalName, internalName) {
        Object.defineProperty(glyph, externalName, {
            get: function() {
                // Request the path property to make sure the path is loaded.
                glyph.path; // jshint ignore:line
                return glyph[internalName];
            },
            set: function(newValue) {
                glyph[internalName] = newValue;
            },
            enumerable: true,
            configurable: true
        });
    }

    /**
     * A GlyphSet represents all glyphs available in the font, but modelled using
     * a deferred glyph loader, for retrieving glyphs only once they are absolutely
     * necessary, to keep the memory footprint down.
     * @exports opentype.GlyphSet
     * @class
     * @param {opentype.Font}
     * @param {Array}
     */
    function GlyphSet(font, glyphs) {
        this.font = font;
        this.glyphs = {};
        if (Array.isArray(glyphs)) {
            for (var i = 0; i < glyphs.length; i++) {
                var glyph = glyphs[i];
                glyph.path.unitsPerEm = font.unitsPerEm;
                this.glyphs[i] = glyph;
            }
        }

        this.length = (glyphs && glyphs.length) || 0;
    }

    /**
     * @param  {number} index
     * @return {opentype.Glyph}
     */
    GlyphSet.prototype.get = function(index) {
        // this.glyphs[index] is 'undefined' when low memory mode is on. glyph is pushed on request only.
        if (this.glyphs[index] === undefined) {
            this.font._push(index);
            if (typeof this.glyphs[index] === 'function') {
                this.glyphs[index] = this.glyphs[index]();
            }

            var glyph = this.glyphs[index];
            var unicodeObj = this.font._IndexToUnicodeMap[index];

            if (unicodeObj) {
                for (var j = 0; j < unicodeObj.unicodes.length; j++)
                    { glyph.addUnicode(unicodeObj.unicodes[j]); }
            }

            if (this.font.cffEncoding) {
                if (this.font.isCIDFont) {
                    glyph.name = 'gid' + index;
                } else {
                    glyph.name = this.font.cffEncoding.charset[index];
                }
            } else if (this.font.glyphNames.names) {
                glyph.name = this.font.glyphNames.glyphIndexToName(index);
            }

            this.glyphs[index].advanceWidth = this.font._hmtxTableData[index].advanceWidth;
            this.glyphs[index].leftSideBearing = this.font._hmtxTableData[index].leftSideBearing;
        } else {
            if (typeof this.glyphs[index] === 'function') {
                this.glyphs[index] = this.glyphs[index]();
            }
        }

        return this.glyphs[index];
    };

    /**
     * @param  {number} index
     * @param  {Object}
     */
    GlyphSet.prototype.push = function(index, loader) {
        this.glyphs[index] = loader;
        this.length++;
    };

    /**
     * @alias opentype.glyphLoader
     * @param  {opentype.Font} font
     * @param  {number} index
     * @return {opentype.Glyph}
     */
    function glyphLoader(font, index) {
        return new Glyph({index: index, font: font});
    }

    /**
     * Generate a stub glyph that can be filled with all metadata *except*
     * the "points" and "path" properties, which must be loaded only once
     * the glyph's path is actually requested for text shaping.
     * @alias opentype.ttfGlyphLoader
     * @param  {opentype.Font} font
     * @param  {number} index
     * @param  {Function} parseGlyph
     * @param  {Object} data
     * @param  {number} position
     * @param  {Function} buildPath
     * @return {opentype.Glyph}
     */
    function ttfGlyphLoader(font, index, parseGlyph, data, position, buildPath) {
        return function() {
            var glyph = new Glyph({index: index, font: font});

            glyph.path = function() {
                parseGlyph(glyph, data, position);
                var path = buildPath(font.glyphs, glyph);
                path.unitsPerEm = font.unitsPerEm;
                return path;
            };

            defineDependentProperty(glyph, 'xMin', '_xMin');
            defineDependentProperty(glyph, 'xMax', '_xMax');
            defineDependentProperty(glyph, 'yMin', '_yMin');
            defineDependentProperty(glyph, 'yMax', '_yMax');

            return glyph;
        };
    }
    /**
     * @alias opentype.cffGlyphLoader
     * @param  {opentype.Font} font
     * @param  {number} index
     * @param  {Function} parseCFFCharstring
     * @param  {string} charstring
     * @return {opentype.Glyph}
     */
    function cffGlyphLoader(font, index, parseCFFCharstring, charstring) {
        return function() {
            var glyph = new Glyph({index: index, font: font});

            glyph.path = function() {
                var path = parseCFFCharstring(font, glyph, charstring);
                path.unitsPerEm = font.unitsPerEm;
                return path;
            };

            return glyph;
        };
    }

    var glyphset = { GlyphSet: GlyphSet, glyphLoader: glyphLoader, ttfGlyphLoader: ttfGlyphLoader, cffGlyphLoader: cffGlyphLoader };

    // The `CFF` table contains the glyph outlines in PostScript format.

    // Custom equals function that can also check lists.
    function equals$1(a, b) {
        if (a === b) {
            return true;
        } else if (Array.isArray(a) && Array.isArray(b)) {
            if (a.length !== b.length) {
                return false;
            }

            for (var i = 0; i < a.length; i += 1) {
                if (!equals$1(a[i], b[i])) {
                    return false;
                }
            }

            return true;
        } else {
            return false;
        }
    }

    // Subroutines are encoded using the negative half of the number space.
    // See type 2 chapter 4.7 "Subroutine operators".
    function calcCFFSubroutineBias(subrs) {
        var bias;
        if (subrs.length < 1240) {
            bias = 107;
        } else if (subrs.length < 33900) {
            bias = 1131;
        } else {
            bias = 32768;
        }

        return bias;
    }

    // Parse a `CFF` INDEX array.
    // An index array consists of a list of offsets, then a list of objects at those offsets.
    function parseCFFIndex(data, start, conversionFn) {
        var offsets = [];
        var objects = [];
        var count = parse.getCard16(data, start);
        var objectOffset;
        var endOffset;
        if (count !== 0) {
            var offsetSize = parse.getByte(data, start + 2);
            objectOffset = start + ((count + 1) * offsetSize) + 2;
            var pos = start + 3;
            for (var i = 0; i < count + 1; i += 1) {
                offsets.push(parse.getOffset(data, pos, offsetSize));
                pos += offsetSize;
            }

            // The total size of the index array is 4 header bytes + the value of the last offset.
            endOffset = objectOffset + offsets[count];
        } else {
            endOffset = start + 2;
        }

        for (var i$1 = 0; i$1 < offsets.length - 1; i$1 += 1) {
            var value = parse.getBytes(data, objectOffset + offsets[i$1], objectOffset + offsets[i$1 + 1]);
            if (conversionFn) {
                value = conversionFn(value);
            }

            objects.push(value);
        }

        return {objects: objects, startOffset: start, endOffset: endOffset};
    }

    function parseCFFIndexLowMemory(data, start) {
        var offsets = [];
        var count = parse.getCard16(data, start);
        var objectOffset;
        var endOffset;
        if (count !== 0) {
            var offsetSize = parse.getByte(data, start + 2);
            objectOffset = start + ((count + 1) * offsetSize) + 2;
            var pos = start + 3;
            for (var i = 0; i < count + 1; i += 1) {
                offsets.push(parse.getOffset(data, pos, offsetSize));
                pos += offsetSize;
            }

            // The total size of the index array is 4 header bytes + the value of the last offset.
            endOffset = objectOffset + offsets[count];
        } else {
            endOffset = start + 2;
        }

        return {offsets: offsets, startOffset: start, endOffset: endOffset};
    }
    function getCffIndexObject(i, offsets, data, start, conversionFn) {
        var count = parse.getCard16(data, start);
        var objectOffset = 0;
        if (count !== 0) {
            var offsetSize = parse.getByte(data, start + 2);
            objectOffset = start + ((count + 1) * offsetSize) + 2;
        }

        var value = parse.getBytes(data, objectOffset + offsets[i], objectOffset + offsets[i + 1]);
        if (conversionFn) {
            value = conversionFn(value);
        }
        return value;
    }

    // Parse a `CFF` DICT real value.
    function parseFloatOperand(parser) {
        var s = '';
        var eof = 15;
        var lookup = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];
        while (true) {
            var b = parser.parseByte();
            var n1 = b >> 4;
            var n2 = b & 15;

            if (n1 === eof) {
                break;
            }

            s += lookup[n1];

            if (n2 === eof) {
                break;
            }

            s += lookup[n2];
        }

        return parseFloat(s);
    }

    // Parse a `CFF` DICT operand.
    function parseOperand(parser, b0) {
        var b1;
        var b2;
        var b3;
        var b4;
        if (b0 === 28) {
            b1 = parser.parseByte();
            b2 = parser.parseByte();
            return b1 << 8 | b2;
        }

        if (b0 === 29) {
            b1 = parser.parseByte();
            b2 = parser.parseByte();
            b3 = parser.parseByte();
            b4 = parser.parseByte();
            return b1 << 24 | b2 << 16 | b3 << 8 | b4;
        }

        if (b0 === 30) {
            return parseFloatOperand(parser);
        }

        if (b0 >= 32 && b0 <= 246) {
            return b0 - 139;
        }

        if (b0 >= 247 && b0 <= 250) {
            b1 = parser.parseByte();
            return (b0 - 247) * 256 + b1 + 108;
        }

        if (b0 >= 251 && b0 <= 254) {
            b1 = parser.parseByte();
            return -(b0 - 251) * 256 - b1 - 108;
        }

        throw new Error('Invalid b0 ' + b0);
    }

    // Convert the entries returned by `parseDict` to a proper dictionary.
    // If a value is a list of one, it is unpacked.
    function entriesToObject(entries) {
        var o = {};
        for (var i = 0; i < entries.length; i += 1) {
            var key = entries[i][0];
            var values = entries[i][1];
            var value = (void 0);
            if (values.length === 1) {
                value = values[0];
            } else {
                value = values;
            }

            if (o.hasOwnProperty(key) && !isNaN(o[key])) {
                throw new Error('Object ' + o + ' already has key ' + key);
            }

            o[key] = value;
        }

        return o;
    }

    // Parse a `CFF` DICT object.
    // A dictionary contains key-value pairs in a compact tokenized format.
    function parseCFFDict(data, start, size) {
        start = start !== undefined ? start : 0;
        var parser = new parse.Parser(data, start);
        var entries = [];
        var operands = [];
        size = size !== undefined ? size : data.length;

        while (parser.relativeOffset < size) {
            var op = parser.parseByte();

            // The first byte for each dict item distinguishes between operator (key) and operand (value).
            // Values <= 21 are operators.
            if (op <= 21) {
                // Two-byte operators have an initial escape byte of 12.
                if (op === 12) {
                    op = 1200 + parser.parseByte();
                }

                entries.push([op, operands]);
                operands = [];
            } else {
                // Since the operands (values) come before the operators (keys), we store all operands in a list
                // until we encounter an operator.
                operands.push(parseOperand(parser, op));
            }
        }

        return entriesToObject(entries);
    }

    // Given a String Index (SID), return the value of the string.
    // Strings below index 392 are standard CFF strings and are not encoded in the font.
    function getCFFString(strings, index) {
        if (index <= 390) {
            index = cffStandardStrings[index];
        } else {
            index = strings[index - 391];
        }

        return index;
    }

    // Interpret a dictionary and return a new dictionary with readable keys and values for missing entries.
    // This function takes `meta` which is a list of objects containing `operand`, `name` and `default`.
    function interpretDict(dict, meta, strings) {
        var newDict = {};
        var value;

        // Because we also want to include missing values, we start out from the meta list
        // and lookup values in the dict.
        for (var i = 0; i < meta.length; i += 1) {
            var m = meta[i];

            if (Array.isArray(m.type)) {
                var values = [];
                values.length = m.type.length;
                for (var j = 0; j < m.type.length; j++) {
                    value = dict[m.op] !== undefined ? dict[m.op][j] : undefined;
                    if (value === undefined) {
                        value = m.value !== undefined && m.value[j] !== undefined ? m.value[j] : null;
                    }
                    if (m.type[j] === 'SID') {
                        value = getCFFString(strings, value);
                    }
                    values[j] = value;
                }
                newDict[m.name] = values;
            } else {
                value = dict[m.op];
                if (value === undefined) {
                    value = m.value !== undefined ? m.value : null;
                }

                if (m.type === 'SID') {
                    value = getCFFString(strings, value);
                }
                newDict[m.name] = value;
            }
        }

        return newDict;
    }

    // Parse the CFF header.
    function parseCFFHeader(data, start) {
        var header = {};
        header.formatMajor = parse.getCard8(data, start);
        header.formatMinor = parse.getCard8(data, start + 1);
        header.size = parse.getCard8(data, start + 2);
        header.offsetSize = parse.getCard8(data, start + 3);
        header.startOffset = start;
        header.endOffset = start + 4;
        return header;
    }

    var TOP_DICT_META = [
        {name: 'version', op: 0, type: 'SID'},
        {name: 'notice', op: 1, type: 'SID'},
        {name: 'copyright', op: 1200, type: 'SID'},
        {name: 'fullName', op: 2, type: 'SID'},
        {name: 'familyName', op: 3, type: 'SID'},
        {name: 'weight', op: 4, type: 'SID'},
        {name: 'isFixedPitch', op: 1201, type: 'number', value: 0},
        {name: 'italicAngle', op: 1202, type: 'number', value: 0},
        {name: 'underlinePosition', op: 1203, type: 'number', value: -100},
        {name: 'underlineThickness', op: 1204, type: 'number', value: 50},
        {name: 'paintType', op: 1205, type: 'number', value: 0},
        {name: 'charstringType', op: 1206, type: 'number', value: 2},
        {
            name: 'fontMatrix',
            op: 1207,
            type: ['real', 'real', 'real', 'real', 'real', 'real'],
            value: [0.001, 0, 0, 0.001, 0, 0]
        },
        {name: 'uniqueId', op: 13, type: 'number'},
        {name: 'fontBBox', op: 5, type: ['number', 'number', 'number', 'number'], value: [0, 0, 0, 0]},
        {name: 'strokeWidth', op: 1208, type: 'number', value: 0},
        {name: 'xuid', op: 14, type: [], value: null},
        {name: 'charset', op: 15, type: 'offset', value: 0},
        {name: 'encoding', op: 16, type: 'offset', value: 0},
        {name: 'charStrings', op: 17, type: 'offset', value: 0},
        {name: 'private', op: 18, type: ['number', 'offset'], value: [0, 0]},
        {name: 'ros', op: 1230, type: ['SID', 'SID', 'number']},
        {name: 'cidFontVersion', op: 1231, type: 'number', value: 0},
        {name: 'cidFontRevision', op: 1232, type: 'number', value: 0},
        {name: 'cidFontType', op: 1233, type: 'number', value: 0},
        {name: 'cidCount', op: 1234, type: 'number', value: 8720},
        {name: 'uidBase', op: 1235, type: 'number'},
        {name: 'fdArray', op: 1236, type: 'offset'},
        {name: 'fdSelect', op: 1237, type: 'offset'},
        {name: 'fontName', op: 1238, type: 'SID'}
    ];

    var PRIVATE_DICT_META = [
        {name: 'subrs', op: 19, type: 'offset', value: 0},
        {name: 'defaultWidthX', op: 20, type: 'number', value: 0},
        {name: 'nominalWidthX', op: 21, type: 'number', value: 0}
    ];

    // Parse the CFF top dictionary. A CFF table can contain multiple fonts, each with their own top dictionary.
    // The top dictionary contains the essential metadata for the font, together with the private dictionary.
    function parseCFFTopDict(data, strings) {
        var dict = parseCFFDict(data, 0, data.byteLength);
        return interpretDict(dict, TOP_DICT_META, strings);
    }

    // Parse the CFF private dictionary. We don't fully parse out all the values, only the ones we need.
    function parseCFFPrivateDict(data, start, size, strings) {
        var dict = parseCFFDict(data, start, size);
        return interpretDict(dict, PRIVATE_DICT_META, strings);
    }

    // Returns a list of "Top DICT"s found using an INDEX list.
    // Used to read both the usual high-level Top DICTs and also the FDArray
    // discovered inside CID-keyed fonts.  When a Top DICT has a reference to
    // a Private DICT that is read and saved into the Top DICT.
    //
    // In addition to the expected/optional values as outlined in TOP_DICT_META
    // the following values might be saved into the Top DICT.
    //
    //    _subrs []        array of local CFF subroutines from Private DICT
    //    _subrsBias       bias value computed from number of subroutines
    //                      (see calcCFFSubroutineBias() and parseCFFCharstring())
    //    _defaultWidthX   default widths for CFF characters
    //    _nominalWidthX   bias added to width embedded within glyph description
    //
    //    _privateDict     saved copy of parsed Private DICT from Top DICT
    function gatherCFFTopDicts(data, start, cffIndex, strings) {
        var topDictArray = [];
        for (var iTopDict = 0; iTopDict < cffIndex.length; iTopDict += 1) {
            var topDictData = new DataView(new Uint8Array(cffIndex[iTopDict]).buffer);
            var topDict = parseCFFTopDict(topDictData, strings);
            topDict._subrs = [];
            topDict._subrsBias = 0;
            var privateSize = topDict.private[0];
            var privateOffset = topDict.private[1];
            if (privateSize !== 0 && privateOffset !== 0) {
                var privateDict = parseCFFPrivateDict(data, privateOffset + start, privateSize, strings);
                topDict._defaultWidthX = privateDict.defaultWidthX;
                topDict._nominalWidthX = privateDict.nominalWidthX;
                if (privateDict.subrs !== 0) {
                    var subrOffset = privateOffset + privateDict.subrs;
                    var subrIndex = parseCFFIndex(data, subrOffset + start);
                    topDict._subrs = subrIndex.objects;
                    topDict._subrsBias = calcCFFSubroutineBias(topDict._subrs);
                }
                topDict._privateDict = privateDict;
            }
            topDictArray.push(topDict);
        }
        return topDictArray;
    }

    // Parse the CFF charset table, which contains internal names for all the glyphs.
    // This function will return a list of glyph names.
    // See Adobe TN #5176 chapter 13, "Charsets".
    function parseCFFCharset(data, start, nGlyphs, strings) {
        var sid;
        var count;
        var parser = new parse.Parser(data, start);

        // The .notdef glyph is not included, so subtract 1.
        nGlyphs -= 1;
        var charset = ['.notdef'];

        var format = parser.parseCard8();
        if (format === 0) {
            for (var i = 0; i < nGlyphs; i += 1) {
                sid = parser.parseSID();
                charset.push(getCFFString(strings, sid));
            }
        } else if (format === 1) {
            while (charset.length <= nGlyphs) {
                sid = parser.parseSID();
                count = parser.parseCard8();
                for (var i$1 = 0; i$1 <= count; i$1 += 1) {
                    charset.push(getCFFString(strings, sid));
                    sid += 1;
                }
            }
        } else if (format === 2) {
            while (charset.length <= nGlyphs) {
                sid = parser.parseSID();
                count = parser.parseCard16();
                for (var i$2 = 0; i$2 <= count; i$2 += 1) {
                    charset.push(getCFFString(strings, sid));
                    sid += 1;
                }
            }
        } else {
            throw new Error('Unknown charset format ' + format);
        }

        return charset;
    }

    // Parse the CFF encoding data. Only one encoding can be specified per font.
    // See Adobe TN #5176 chapter 12, "Encodings".
    function parseCFFEncoding(data, start, charset) {
        var code;
        var enc = {};
        var parser = new parse.Parser(data, start);
        var format = parser.parseCard8();
        if (format === 0) {
            var nCodes = parser.parseCard8();
            for (var i = 0; i < nCodes; i += 1) {
                code = parser.parseCard8();
                enc[code] = i;
            }
        } else if (format === 1) {
            var nRanges = parser.parseCard8();
            code = 1;
            for (var i$1 = 0; i$1 < nRanges; i$1 += 1) {
                var first = parser.parseCard8();
                var nLeft = parser.parseCard8();
                for (var j = first; j <= first + nLeft; j += 1) {
                    enc[j] = code;
                    code += 1;
                }
            }
        } else {
            throw new Error('Unknown encoding format ' + format);
        }

        return new CffEncoding(enc, charset);
    }

    // Take in charstring code and return a Glyph object.
    // The encoding is described in the Type 2 Charstring Format
    // https://www.microsoft.com/typography/OTSPEC/charstr2.htm
    function parseCFFCharstring(font, glyph, code) {
        var c1x;
        var c1y;
        var c2x;
        var c2y;
        var p = new Path();
        var stack = [];
        var nStems = 0;
        var haveWidth = false;
        var open = false;
        var x = 0;
        var y = 0;
        var subrs;
        var subrsBias;
        var defaultWidthX;
        var nominalWidthX;
        if (font.isCIDFont) {
            var fdIndex = font.tables.cff.topDict._fdSelect[glyph.index];
            var fdDict = font.tables.cff.topDict._fdArray[fdIndex];
            subrs = fdDict._subrs;
            subrsBias = fdDict._subrsBias;
            defaultWidthX = fdDict._defaultWidthX;
            nominalWidthX = fdDict._nominalWidthX;
        } else {
            subrs = font.tables.cff.topDict._subrs;
            subrsBias = font.tables.cff.topDict._subrsBias;
            defaultWidthX = font.tables.cff.topDict._defaultWidthX;
            nominalWidthX = font.tables.cff.topDict._nominalWidthX;
        }
        var width = defaultWidthX;

        function newContour(x, y) {
            if (open) {
                p.closePath();
            }

            p.moveTo(x, y);
            open = true;
        }

        function parseStems() {
            var hasWidthArg;

            // The number of stem operators on the stack is always even.
            // If the value is uneven, that means a width is specified.
            hasWidthArg = stack.length % 2 !== 0;
            if (hasWidthArg && !haveWidth) {
                width = stack.shift() + nominalWidthX;
            }

            nStems += stack.length >> 1;
            stack.length = 0;
            haveWidth = true;
        }

        function parse(code) {
            var b1;
            var b2;
            var b3;
            var b4;
            var codeIndex;
            var subrCode;
            var jpx;
            var jpy;
            var c3x;
            var c3y;
            var c4x;
            var c4y;

            var i = 0;
            while (i < code.length) {
                var v = code[i];
                i += 1;
                switch (v) {
                    case 1: // hstem
                        parseStems();
                        break;
                    case 3: // vstem
                        parseStems();
                        break;
                    case 4: // vmoveto
                        if (stack.length > 1 && !haveWidth) {
                            width = stack.shift() + nominalWidthX;
                            haveWidth = true;
                        }

                        y += stack.pop();
                        newContour(x, y);
                        break;
                    case 5: // rlineto
                        while (stack.length > 0) {
                            x += stack.shift();
                            y += stack.shift();
                            p.lineTo(x, y);
                        }

                        break;
                    case 6: // hlineto
                        while (stack.length > 0) {
                            x += stack.shift();
                            p.lineTo(x, y);
                            if (stack.length === 0) {
                                break;
                            }

                            y += stack.shift();
                            p.lineTo(x, y);
                        }

                        break;
                    case 7: // vlineto
                        while (stack.length > 0) {
                            y += stack.shift();
                            p.lineTo(x, y);
                            if (stack.length === 0) {
                                break;
                            }

                            x += stack.shift();
                            p.lineTo(x, y);
                        }

                        break;
                    case 8: // rrcurveto
                        while (stack.length > 0) {
                            c1x = x + stack.shift();
                            c1y = y + stack.shift();
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            x = c2x + stack.shift();
                            y = c2y + stack.shift();
                            p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        }

                        break;
                    case 10: // callsubr
                        codeIndex = stack.pop() + subrsBias;
                        subrCode = subrs[codeIndex];
                        if (subrCode) {
                            parse(subrCode);
                        }

                        break;
                    case 11: // return
                        return;
                    case 12: // flex operators
                        v = code[i];
                        i += 1;
                        switch (v) {
                            case 35: // flex
                                // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 dx6 dy6 fd flex (12 35) |-
                                c1x = x   + stack.shift();    // dx1
                                c1y = y   + stack.shift();    // dy1
                                c2x = c1x + stack.shift();    // dx2
                                c2y = c1y + stack.shift();    // dy2
                                jpx = c2x + stack.shift();    // dx3
                                jpy = c2y + stack.shift();    // dy3
                                c3x = jpx + stack.shift();    // dx4
                                c3y = jpy + stack.shift();    // dy4
                                c4x = c3x + stack.shift();    // dx5
                                c4y = c3y + stack.shift();    // dy5
                                x = c4x   + stack.shift();    // dx6
                                y = c4y   + stack.shift();    // dy6
                                stack.shift();                // flex depth
                                p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                                p.curveTo(c3x, c3y, c4x, c4y, x, y);
                                break;
                            case 34: // hflex
                                // |- dx1 dx2 dy2 dx3 dx4 dx5 dx6 hflex (12 34) |-
                                c1x = x   + stack.shift();    // dx1
                                c1y = y;                      // dy1
                                c2x = c1x + stack.shift();    // dx2
                                c2y = c1y + stack.shift();    // dy2
                                jpx = c2x + stack.shift();    // dx3
                                jpy = c2y;                    // dy3
                                c3x = jpx + stack.shift();    // dx4
                                c3y = c2y;                    // dy4
                                c4x = c3x + stack.shift();    // dx5
                                c4y = y;                      // dy5
                                x = c4x + stack.shift();      // dx6
                                p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                                p.curveTo(c3x, c3y, c4x, c4y, x, y);
                                break;
                            case 36: // hflex1
                                // |- dx1 dy1 dx2 dy2 dx3 dx4 dx5 dy5 dx6 hflex1 (12 36) |-
                                c1x = x   + stack.shift();    // dx1
                                c1y = y   + stack.shift();    // dy1
                                c2x = c1x + stack.shift();    // dx2
                                c2y = c1y + stack.shift();    // dy2
                                jpx = c2x + stack.shift();    // dx3
                                jpy = c2y;                    // dy3
                                c3x = jpx + stack.shift();    // dx4
                                c3y = c2y;                    // dy4
                                c4x = c3x + stack.shift();    // dx5
                                c4y = c3y + stack.shift();    // dy5
                                x = c4x + stack.shift();      // dx6
                                p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                                p.curveTo(c3x, c3y, c4x, c4y, x, y);
                                break;
                            case 37: // flex1
                                // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 d6 flex1 (12 37) |-
                                c1x = x   + stack.shift();    // dx1
                                c1y = y   + stack.shift();    // dy1
                                c2x = c1x + stack.shift();    // dx2
                                c2y = c1y + stack.shift();    // dy2
                                jpx = c2x + stack.shift();    // dx3
                                jpy = c2y + stack.shift();    // dy3
                                c3x = jpx + stack.shift();    // dx4
                                c3y = jpy + stack.shift();    // dy4
                                c4x = c3x + stack.shift();    // dx5
                                c4y = c3y + stack.shift();    // dy5
                                if (Math.abs(c4x - x) > Math.abs(c4y - y)) {
                                    x = c4x + stack.shift();
                                } else {
                                    y = c4y + stack.shift();
                                }

                                p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                                p.curveTo(c3x, c3y, c4x, c4y, x, y);
                                break;
                            default:
                                console.log('Glyph ' + glyph.index + ': unknown operator ' + 1200 + v);
                                stack.length = 0;
                        }
                        break;
                    case 14: // endchar
                        if (stack.length > 0 && !haveWidth) {
                            width = stack.shift() + nominalWidthX;
                            haveWidth = true;
                        }

                        if (open) {
                            p.closePath();
                            open = false;
                        }

                        break;
                    case 18: // hstemhm
                        parseStems();
                        break;
                    case 19: // hintmask
                    case 20: // cntrmask
                        parseStems();
                        i += (nStems + 7) >> 3;
                        break;
                    case 21: // rmoveto
                        if (stack.length > 2 && !haveWidth) {
                            width = stack.shift() + nominalWidthX;
                            haveWidth = true;
                        }

                        y += stack.pop();
                        x += stack.pop();
                        newContour(x, y);
                        break;
                    case 22: // hmoveto
                        if (stack.length > 1 && !haveWidth) {
                            width = stack.shift() + nominalWidthX;
                            haveWidth = true;
                        }

                        x += stack.pop();
                        newContour(x, y);
                        break;
                    case 23: // vstemhm
                        parseStems();
                        break;
                    case 24: // rcurveline
                        while (stack.length > 2) {
                            c1x = x + stack.shift();
                            c1y = y + stack.shift();
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            x = c2x + stack.shift();
                            y = c2y + stack.shift();
                            p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        }

                        x += stack.shift();
                        y += stack.shift();
                        p.lineTo(x, y);
                        break;
                    case 25: // rlinecurve
                        while (stack.length > 6) {
                            x += stack.shift();
                            y += stack.shift();
                            p.lineTo(x, y);
                        }

                        c1x = x + stack.shift();
                        c1y = y + stack.shift();
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        x = c2x + stack.shift();
                        y = c2y + stack.shift();
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        break;
                    case 26: // vvcurveto
                        if (stack.length % 2) {
                            x += stack.shift();
                        }

                        while (stack.length > 0) {
                            c1x = x;
                            c1y = y + stack.shift();
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            x = c2x;
                            y = c2y + stack.shift();
                            p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        }

                        break;
                    case 27: // hhcurveto
                        if (stack.length % 2) {
                            y += stack.shift();
                        }

                        while (stack.length > 0) {
                            c1x = x + stack.shift();
                            c1y = y;
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            x = c2x + stack.shift();
                            y = c2y;
                            p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        }

                        break;
                    case 28: // shortint
                        b1 = code[i];
                        b2 = code[i + 1];
                        stack.push(((b1 << 24) | (b2 << 16)) >> 16);
                        i += 2;
                        break;
                    case 29: // callgsubr
                        codeIndex = stack.pop() + font.gsubrsBias;
                        subrCode = font.gsubrs[codeIndex];
                        if (subrCode) {
                            parse(subrCode);
                        }

                        break;
                    case 30: // vhcurveto
                        while (stack.length > 0) {
                            c1x = x;
                            c1y = y + stack.shift();
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            x = c2x + stack.shift();
                            y = c2y + (stack.length === 1 ? stack.shift() : 0);
                            p.curveTo(c1x, c1y, c2x, c2y, x, y);
                            if (stack.length === 0) {
                                break;
                            }

                            c1x = x + stack.shift();
                            c1y = y;
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            y = c2y + stack.shift();
                            x = c2x + (stack.length === 1 ? stack.shift() : 0);
                            p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        }

                        break;
                    case 31: // hvcurveto
                        while (stack.length > 0) {
                            c1x = x + stack.shift();
                            c1y = y;
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            y = c2y + stack.shift();
                            x = c2x + (stack.length === 1 ? stack.shift() : 0);
                            p.curveTo(c1x, c1y, c2x, c2y, x, y);
                            if (stack.length === 0) {
                                break;
                            }

                            c1x = x;
                            c1y = y + stack.shift();
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            x = c2x + stack.shift();
                            y = c2y + (stack.length === 1 ? stack.shift() : 0);
                            p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        }

                        break;
                    default:
                        if (v < 32) {
                            console.log('Glyph ' + glyph.index + ': unknown operator ' + v);
                        } else if (v < 247) {
                            stack.push(v - 139);
                        } else if (v < 251) {
                            b1 = code[i];
                            i += 1;
                            stack.push((v - 247) * 256 + b1 + 108);
                        } else if (v < 255) {
                            b1 = code[i];
                            i += 1;
                            stack.push(-(v - 251) * 256 - b1 - 108);
                        } else {
                            b1 = code[i];
                            b2 = code[i + 1];
                            b3 = code[i + 2];
                            b4 = code[i + 3];
                            i += 4;
                            stack.push(((b1 << 24) | (b2 << 16) | (b3 << 8) | b4) / 65536);
                        }
                }
            }
        }

        parse(code);

        glyph.advanceWidth = width;
        return p;
    }

    function parseCFFFDSelect(data, start, nGlyphs, fdArrayCount) {
        var fdSelect = [];
        var fdIndex;
        var parser = new parse.Parser(data, start);
        var format = parser.parseCard8();
        if (format === 0) {
            // Simple list of nGlyphs elements
            for (var iGid = 0; iGid < nGlyphs; iGid++) {
                fdIndex = parser.parseCard8();
                if (fdIndex >= fdArrayCount) {
                    throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');
                }
                fdSelect.push(fdIndex);
            }
        } else if (format === 3) {
            // Ranges
            var nRanges = parser.parseCard16();
            var first = parser.parseCard16();
            if (first !== 0) {
                throw new Error('CFF Table CID Font FDSelect format 3 range has bad initial GID ' + first);
            }
            var next;
            for (var iRange = 0; iRange < nRanges; iRange++) {
                fdIndex = parser.parseCard8();
                next = parser.parseCard16();
                if (fdIndex >= fdArrayCount) {
                    throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');
                }
                if (next > nGlyphs) {
                    throw new Error('CFF Table CID Font FDSelect format 3 range has bad GID ' + next);
                }
                for (; first < next; first++) {
                    fdSelect.push(fdIndex);
                }
                first = next;
            }
            if (next !== nGlyphs) {
                throw new Error('CFF Table CID Font FDSelect format 3 range has bad final GID ' + next);
            }
        } else {
            throw new Error('CFF Table CID Font FDSelect table has unsupported format ' + format);
        }
        return fdSelect;
    }

    // Parse the `CFF` table, which contains the glyph outlines in PostScript format.
    function parseCFFTable(data, start, font, opt) {
        font.tables.cff = {};
        var header = parseCFFHeader(data, start);
        var nameIndex = parseCFFIndex(data, header.endOffset, parse.bytesToString);
        var topDictIndex = parseCFFIndex(data, nameIndex.endOffset);
        var stringIndex = parseCFFIndex(data, topDictIndex.endOffset, parse.bytesToString);
        var globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);
        font.gsubrs = globalSubrIndex.objects;
        font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);

        var topDictArray = gatherCFFTopDicts(data, start, topDictIndex.objects, stringIndex.objects);
        if (topDictArray.length !== 1) {
            throw new Error('CFF table has too many fonts in \'FontSet\' - count of fonts NameIndex.length = ' + topDictArray.length);
        }

        var topDict = topDictArray[0];
        font.tables.cff.topDict = topDict;

        if (topDict._privateDict) {
            font.defaultWidthX = topDict._privateDict.defaultWidthX;
            font.nominalWidthX = topDict._privateDict.nominalWidthX;
        }

        if (topDict.ros[0] !== undefined && topDict.ros[1] !== undefined) {
            font.isCIDFont = true;
        }

        if (font.isCIDFont) {
            var fdArrayOffset = topDict.fdArray;
            var fdSelectOffset = topDict.fdSelect;
            if (fdArrayOffset === 0 || fdSelectOffset === 0) {
                throw new Error('Font is marked as a CID font, but FDArray and/or FDSelect information is missing');
            }
            fdArrayOffset += start;
            var fdArrayIndex = parseCFFIndex(data, fdArrayOffset);
            var fdArray = gatherCFFTopDicts(data, start, fdArrayIndex.objects, stringIndex.objects);
            topDict._fdArray = fdArray;
            fdSelectOffset += start;
            topDict._fdSelect = parseCFFFDSelect(data, fdSelectOffset, font.numGlyphs, fdArray.length);
        }

        var privateDictOffset = start + topDict.private[1];
        var privateDict = parseCFFPrivateDict(data, privateDictOffset, topDict.private[0], stringIndex.objects);
        font.defaultWidthX = privateDict.defaultWidthX;
        font.nominalWidthX = privateDict.nominalWidthX;

        if (privateDict.subrs !== 0) {
            var subrOffset = privateDictOffset + privateDict.subrs;
            var subrIndex = parseCFFIndex(data, subrOffset);
            font.subrs = subrIndex.objects;
            font.subrsBias = calcCFFSubroutineBias(font.subrs);
        } else {
            font.subrs = [];
            font.subrsBias = 0;
        }

        // Offsets in the top dict are relative to the beginning of the CFF data, so add the CFF start offset.
        var charStringsIndex;
        if (opt.lowMemory) {
            charStringsIndex = parseCFFIndexLowMemory(data, start + topDict.charStrings);
            font.nGlyphs = charStringsIndex.offsets.length;
        } else {
            charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);
            font.nGlyphs = charStringsIndex.objects.length;
        }

        var charset = parseCFFCharset(data, start + topDict.charset, font.nGlyphs, stringIndex.objects);
        if (topDict.encoding === 0) {
            // Standard encoding
            font.cffEncoding = new CffEncoding(cffStandardEncoding, charset);
        } else if (topDict.encoding === 1) {
            // Expert encoding
            font.cffEncoding = new CffEncoding(cffExpertEncoding, charset);
        } else {
            font.cffEncoding = parseCFFEncoding(data, start + topDict.encoding, charset);
        }

        // Prefer the CMAP encoding to the CFF encoding.
        font.encoding = font.encoding || font.cffEncoding;

        font.glyphs = new glyphset.GlyphSet(font);
        if (opt.lowMemory) {
            font._push = function(i) {
                var charString = getCffIndexObject(i, charStringsIndex.offsets, data, start + topDict.charStrings);
                font.glyphs.push(i, glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString));
            };
        } else {
            for (var i = 0; i < font.nGlyphs; i += 1) {
                var charString = charStringsIndex.objects[i];
                font.glyphs.push(i, glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString));
            }
        }
    }

    // Convert a string to a String ID (SID).
    // The list of strings is modified in place.
    function encodeString(s, strings) {
        var sid;

        // Is the string in the CFF standard strings?
        var i = cffStandardStrings.indexOf(s);
        if (i >= 0) {
            sid = i;
        }

        // Is the string already in the string index?
        i = strings.indexOf(s);
        if (i >= 0) {
            sid = i + cffStandardStrings.length;
        } else {
            sid = cffStandardStrings.length + strings.length;
            strings.push(s);
        }

        return sid;
    }

    function makeHeader() {
        return new table.Record('Header', [
            {name: 'major', type: 'Card8', value: 1},
            {name: 'minor', type: 'Card8', value: 0},
            {name: 'hdrSize', type: 'Card8', value: 4},
            {name: 'major', type: 'Card8', value: 1}
        ]);
    }

    function makeNameIndex(fontNames) {
        var t = new table.Record('Name INDEX', [
            {name: 'names', type: 'INDEX', value: []}
        ]);
        t.names = [];
        for (var i = 0; i < fontNames.length; i += 1) {
            t.names.push({name: 'name_' + i, type: 'NAME', value: fontNames[i]});
        }

        return t;
    }

    // Given a dictionary's metadata, create a DICT structure.
    function makeDict(meta, attrs, strings) {
        var m = {};
        for (var i = 0; i < meta.length; i += 1) {
            var entry = meta[i];
            var value = attrs[entry.name];
            if (value !== undefined && !equals$1(value, entry.value)) {
                if (entry.type === 'SID') {
                    value = encodeString(value, strings);
                }

                m[entry.op] = {name: entry.name, type: entry.type, value: value};
            }
        }

        return m;
    }

    // The Top DICT houses the global font attributes.
    function makeTopDict(attrs, strings) {
        var t = new table.Record('Top DICT', [
            {name: 'dict', type: 'DICT', value: {}}
        ]);
        t.dict = makeDict(TOP_DICT_META, attrs, strings);
        return t;
    }

    function makeTopDictIndex(topDict) {
        var t = new table.Record('Top DICT INDEX', [
            {name: 'topDicts', type: 'INDEX', value: []}
        ]);
        t.topDicts = [{name: 'topDict_0', type: 'TABLE', value: topDict}];
        return t;
    }

    function makeStringIndex(strings) {
        var t = new table.Record('String INDEX', [
            {name: 'strings', type: 'INDEX', value: []}
        ]);
        t.strings = [];
        for (var i = 0; i < strings.length; i += 1) {
            t.strings.push({name: 'string_' + i, type: 'STRING', value: strings[i]});
        }

        return t;
    }

    function makeGlobalSubrIndex() {
        // Currently we don't use subroutines.
        return new table.Record('Global Subr INDEX', [
            {name: 'subrs', type: 'INDEX', value: []}
        ]);
    }

    function makeCharsets(glyphNames, strings) {
        var t = new table.Record('Charsets', [
            {name: 'format', type: 'Card8', value: 0}
        ]);
        for (var i = 0; i < glyphNames.length; i += 1) {
            var glyphName = glyphNames[i];
            var glyphSID = encodeString(glyphName, strings);
            t.fields.push({name: 'glyph_' + i, type: 'SID', value: glyphSID});
        }

        return t;
    }

    function glyphToOps(glyph) {
        var ops = [];
        var path = glyph.path;
        ops.push({name: 'width', type: 'NUMBER', value: glyph.advanceWidth});
        var x = 0;
        var y = 0;
        for (var i = 0; i < path.commands.length; i += 1) {
            var dx = (void 0);
            var dy = (void 0);
            var cmd = path.commands[i];
            if (cmd.type === 'Q') {
                // CFF only supports bézier curves, so convert the quad to a bézier.
                var _13 = 1 / 3;
                var _23 = 2 / 3;

                // We're going to create a new command so we don't change the original path.
                cmd = {
                    type: 'C',
                    x: cmd.x,
                    y: cmd.y,
                    x1: _13 * x + _23 * cmd.x1,
                    y1: _13 * y + _23 * cmd.y1,
                    x2: _13 * cmd.x + _23 * cmd.x1,
                    y2: _13 * cmd.y + _23 * cmd.y1
                };
            }

            if (cmd.type === 'M') {
                dx = Math.round(cmd.x - x);
                dy = Math.round(cmd.y - y);
                ops.push({name: 'dx', type: 'NUMBER', value: dx});
                ops.push({name: 'dy', type: 'NUMBER', value: dy});
                ops.push({name: 'rmoveto', type: 'OP', value: 21});
                x = Math.round(cmd.x);
                y = Math.round(cmd.y);
            } else if (cmd.type === 'L') {
                dx = Math.round(cmd.x - x);
                dy = Math.round(cmd.y - y);
                ops.push({name: 'dx', type: 'NUMBER', value: dx});
                ops.push({name: 'dy', type: 'NUMBER', value: dy});
                ops.push({name: 'rlineto', type: 'OP', value: 5});
                x = Math.round(cmd.x);
                y = Math.round(cmd.y);
            } else if (cmd.type === 'C') {
                var dx1 = Math.round(cmd.x1 - x);
                var dy1 = Math.round(cmd.y1 - y);
                var dx2 = Math.round(cmd.x2 - cmd.x1);
                var dy2 = Math.round(cmd.y2 - cmd.y1);
                dx = Math.round(cmd.x - cmd.x2);
                dy = Math.round(cmd.y - cmd.y2);
                ops.push({name: 'dx1', type: 'NUMBER', value: dx1});
                ops.push({name: 'dy1', type: 'NUMBER', value: dy1});
                ops.push({name: 'dx2', type: 'NUMBER', value: dx2});
                ops.push({name: 'dy2', type: 'NUMBER', value: dy2});
                ops.push({name: 'dx', type: 'NUMBER', value: dx});
                ops.push({name: 'dy', type: 'NUMBER', value: dy});
                ops.push({name: 'rrcurveto', type: 'OP', value: 8});
                x = Math.round(cmd.x);
                y = Math.round(cmd.y);
            }

            // Contours are closed automatically.
        }

        ops.push({name: 'endchar', type: 'OP', value: 14});
        return ops;
    }

    function makeCharStringsIndex(glyphs) {
        var t = new table.Record('CharStrings INDEX', [
            {name: 'charStrings', type: 'INDEX', value: []}
        ]);

        for (var i = 0; i < glyphs.length; i += 1) {
            var glyph = glyphs.get(i);
            var ops = glyphToOps(glyph);
            t.charStrings.push({name: glyph.name, type: 'CHARSTRING', value: ops});
        }

        return t;
    }

    function makePrivateDict(attrs, strings) {
        var t = new table.Record('Private DICT', [
            {name: 'dict', type: 'DICT', value: {}}
        ]);
        t.dict = makeDict(PRIVATE_DICT_META, attrs, strings);
        return t;
    }

    function makeCFFTable(glyphs, options) {
        var t = new table.Table('CFF ', [
            {name: 'header', type: 'RECORD'},
            {name: 'nameIndex', type: 'RECORD'},
            {name: 'topDictIndex', type: 'RECORD'},
            {name: 'stringIndex', type: 'RECORD'},
            {name: 'globalSubrIndex', type: 'RECORD'},
            {name: 'charsets', type: 'RECORD'},
            {name: 'charStringsIndex', type: 'RECORD'},
            {name: 'privateDict', type: 'RECORD'}
        ]);

        var fontScale = 1 / options.unitsPerEm;
        // We use non-zero values for the offsets so that the DICT encodes them.
        // This is important because the size of the Top DICT plays a role in offset calculation,
        // and the size shouldn't change after we've written correct offsets.
        var attrs = {
            version: options.version,
            fullName: options.fullName,
            familyName: options.familyName,
            weight: options.weightName,
            fontBBox: options.fontBBox || [0, 0, 0, 0],
            fontMatrix: [fontScale, 0, 0, fontScale, 0, 0],
            charset: 999,
            encoding: 0,
            charStrings: 999,
            private: [0, 999]
        };

        var privateAttrs = {};

        var glyphNames = [];
        var glyph;

        // Skip first glyph (.notdef)
        for (var i = 1; i < glyphs.length; i += 1) {
            glyph = glyphs.get(i);
            glyphNames.push(glyph.name);
        }

        var strings = [];

        t.header = makeHeader();
        t.nameIndex = makeNameIndex([options.postScriptName]);
        var topDict = makeTopDict(attrs, strings);
        t.topDictIndex = makeTopDictIndex(topDict);
        t.globalSubrIndex = makeGlobalSubrIndex();
        t.charsets = makeCharsets(glyphNames, strings);
        t.charStringsIndex = makeCharStringsIndex(glyphs);
        t.privateDict = makePrivateDict(privateAttrs, strings);

        // Needs to come at the end, to encode all custom strings used in the font.
        t.stringIndex = makeStringIndex(strings);

        var startOffset = t.header.sizeOf() +
            t.nameIndex.sizeOf() +
            t.topDictIndex.sizeOf() +
            t.stringIndex.sizeOf() +
            t.globalSubrIndex.sizeOf();
        attrs.charset = startOffset;

        // We use the CFF standard encoding; proper encoding will be handled in cmap.
        attrs.encoding = 0;
        attrs.charStrings = attrs.charset + t.charsets.sizeOf();
        attrs.private[1] = attrs.charStrings + t.charStringsIndex.sizeOf();

        // Recreate the Top DICT INDEX with the correct offsets.
        topDict = makeTopDict(attrs, strings);
        t.topDictIndex = makeTopDictIndex(topDict);

        return t;
    }

    var cff = { parse: parseCFFTable, make: makeCFFTable };

    // The `head` table contains global information about the font.

    // Parse the header `head` table
    function parseHeadTable(data, start) {
        var head = {};
        var p = new parse.Parser(data, start);
        head.version = p.parseVersion();
        head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;
        head.checkSumAdjustment = p.parseULong();
        head.magicNumber = p.parseULong();
        check.argument(head.magicNumber === 0x5F0F3CF5, 'Font header has wrong magic number.');
        head.flags = p.parseUShort();
        head.unitsPerEm = p.parseUShort();
        head.created = p.parseLongDateTime();
        head.modified = p.parseLongDateTime();
        head.xMin = p.parseShort();
        head.yMin = p.parseShort();
        head.xMax = p.parseShort();
        head.yMax = p.parseShort();
        head.macStyle = p.parseUShort();
        head.lowestRecPPEM = p.parseUShort();
        head.fontDirectionHint = p.parseShort();
        head.indexToLocFormat = p.parseShort();
        head.glyphDataFormat = p.parseShort();
        return head;
    }

    function makeHeadTable(options) {
        // Apple Mac timestamp epoch is 01/01/1904 not 01/01/1970
        var timestamp = Math.round(new Date().getTime() / 1000) + 2082844800;
        var createdTimestamp = timestamp;

        if (options.createdTimestamp) {
            createdTimestamp = options.createdTimestamp + 2082844800;
        }

        return new table.Table('head', [
            {name: 'version', type: 'FIXED', value: 0x00010000},
            {name: 'fontRevision', type: 'FIXED', value: 0x00010000},
            {name: 'checkSumAdjustment', type: 'ULONG', value: 0},
            {name: 'magicNumber', type: 'ULONG', value: 0x5F0F3CF5},
            {name: 'flags', type: 'USHORT', value: 0},
            {name: 'unitsPerEm', type: 'USHORT', value: 1000},
            {name: 'created', type: 'LONGDATETIME', value: createdTimestamp},
            {name: 'modified', type: 'LONGDATETIME', value: timestamp},
            {name: 'xMin', type: 'SHORT', value: 0},
            {name: 'yMin', type: 'SHORT', value: 0},
            {name: 'xMax', type: 'SHORT', value: 0},
            {name: 'yMax', type: 'SHORT', value: 0},
            {name: 'macStyle', type: 'USHORT', value: 0},
            {name: 'lowestRecPPEM', type: 'USHORT', value: 0},
            {name: 'fontDirectionHint', type: 'SHORT', value: 2},
            {name: 'indexToLocFormat', type: 'SHORT', value: 0},
            {name: 'glyphDataFormat', type: 'SHORT', value: 0}
        ], options);
    }

    var head = { parse: parseHeadTable, make: makeHeadTable };

    // The `hhea` table contains information for horizontal layout.

    // Parse the horizontal header `hhea` table
    function parseHheaTable(data, start) {
        var hhea = {};
        var p = new parse.Parser(data, start);
        hhea.version = p.parseVersion();
        hhea.ascender = p.parseShort();
        hhea.descender = p.parseShort();
        hhea.lineGap = p.parseShort();
        hhea.advanceWidthMax = p.parseUShort();
        hhea.minLeftSideBearing = p.parseShort();
        hhea.minRightSideBearing = p.parseShort();
        hhea.xMaxExtent = p.parseShort();
        hhea.caretSlopeRise = p.parseShort();
        hhea.caretSlopeRun = p.parseShort();
        hhea.caretOffset = p.parseShort();
        p.relativeOffset += 8;
        hhea.metricDataFormat = p.parseShort();
        hhea.numberOfHMetrics = p.parseUShort();
        return hhea;
    }

    function makeHheaTable(options) {
        return new table.Table('hhea', [
            {name: 'version', type: 'FIXED', value: 0x00010000},
            {name: 'ascender', type: 'FWORD', value: 0},
            {name: 'descender', type: 'FWORD', value: 0},
            {name: 'lineGap', type: 'FWORD', value: 0},
            {name: 'advanceWidthMax', type: 'UFWORD', value: 0},
            {name: 'minLeftSideBearing', type: 'FWORD', value: 0},
            {name: 'minRightSideBearing', type: 'FWORD', value: 0},
            {name: 'xMaxExtent', type: 'FWORD', value: 0},
            {name: 'caretSlopeRise', type: 'SHORT', value: 1},
            {name: 'caretSlopeRun', type: 'SHORT', value: 0},
            {name: 'caretOffset', type: 'SHORT', value: 0},
            {name: 'reserved1', type: 'SHORT', value: 0},
            {name: 'reserved2', type: 'SHORT', value: 0},
            {name: 'reserved3', type: 'SHORT', value: 0},
            {name: 'reserved4', type: 'SHORT', value: 0},
            {name: 'metricDataFormat', type: 'SHORT', value: 0},
            {name: 'numberOfHMetrics', type: 'USHORT', value: 0}
        ], options);
    }

    var hhea = { parse: parseHheaTable, make: makeHheaTable };

    // The `hmtx` table contains the horizontal metrics for all glyphs.

    function parseHmtxTableAll(data, start, numMetrics, numGlyphs, glyphs) {
        var advanceWidth;
        var leftSideBearing;
        var p = new parse.Parser(data, start);
        for (var i = 0; i < numGlyphs; i += 1) {
            // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.
            if (i < numMetrics) {
                advanceWidth = p.parseUShort();
                leftSideBearing = p.parseShort();
            }

            var glyph = glyphs.get(i);
            glyph.advanceWidth = advanceWidth;
            glyph.leftSideBearing = leftSideBearing;
        }
    }

    function parseHmtxTableOnLowMemory(font, data, start, numMetrics, numGlyphs) {
        font._hmtxTableData = {};

        var advanceWidth;
        var leftSideBearing;
        var p = new parse.Parser(data, start);
        for (var i = 0; i < numGlyphs; i += 1) {
            // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.
            if (i < numMetrics) {
                advanceWidth = p.parseUShort();
                leftSideBearing = p.parseShort();
            }

            font._hmtxTableData[i] = {
                advanceWidth: advanceWidth,
                leftSideBearing: leftSideBearing
            };
        }
    }

    // Parse the `hmtx` table, which contains the horizontal metrics for all glyphs.
    // This function augments the glyph array, adding the advanceWidth and leftSideBearing to each glyph.
    function parseHmtxTable(font, data, start, numMetrics, numGlyphs, glyphs, opt) {
        if (opt.lowMemory)
            { parseHmtxTableOnLowMemory(font, data, start, numMetrics, numGlyphs); }
        else
            { parseHmtxTableAll(data, start, numMetrics, numGlyphs, glyphs); }
    }

    function makeHmtxTable(glyphs) {
        var t = new table.Table('hmtx', []);
        for (var i = 0; i < glyphs.length; i += 1) {
            var glyph = glyphs.get(i);
            var advanceWidth = glyph.advanceWidth || 0;
            var leftSideBearing = glyph.leftSideBearing || 0;
            t.fields.push({name: 'advanceWidth_' + i, type: 'USHORT', value: advanceWidth});
            t.fields.push({name: 'leftSideBearing_' + i, type: 'SHORT', value: leftSideBearing});
        }

        return t;
    }

    var hmtx = { parse: parseHmtxTable, make: makeHmtxTable };

    // The `ltag` table stores IETF BCP-47 language tags. It allows supporting

    function makeLtagTable(tags) {
        var result = new table.Table('ltag', [
            {name: 'version', type: 'ULONG', value: 1},
            {name: 'flags', type: 'ULONG', value: 0},
            {name: 'numTags', type: 'ULONG', value: tags.length}
        ]);

        var stringPool = '';
        var stringPoolOffset = 12 + tags.length * 4;
        for (var i = 0; i < tags.length; ++i) {
            var pos = stringPool.indexOf(tags[i]);
            if (pos < 0) {
                pos = stringPool.length;
                stringPool += tags[i];
            }

            result.fields.push({name: 'offset ' + i, type: 'USHORT', value: stringPoolOffset + pos});
            result.fields.push({name: 'length ' + i, type: 'USHORT', value: tags[i].length});
        }

        result.fields.push({name: 'stringPool', type: 'CHARARRAY', value: stringPool});
        return result;
    }

    function parseLtagTable(data, start) {
        var p = new parse.Parser(data, start);
        var tableVersion = p.parseULong();
        check.argument(tableVersion === 1, 'Unsupported ltag table version.');
        // The 'ltag' specification does not define any flags; skip the field.
        p.skip('uLong', 1);
        var numTags = p.parseULong();

        var tags = [];
        for (var i = 0; i < numTags; i++) {
            var tag = '';
            var offset = start + p.parseUShort();
            var length = p.parseUShort();
            for (var j = offset; j < offset + length; ++j) {
                tag += String.fromCharCode(data.getInt8(j));
            }

            tags.push(tag);
        }

        return tags;
    }

    var ltag = { make: makeLtagTable, parse: parseLtagTable };

    // The `maxp` table establishes the memory requirements for the font.

    // Parse the maximum profile `maxp` table.
    function parseMaxpTable(data, start) {
        var maxp = {};
        var p = new parse.Parser(data, start);
        maxp.version = p.parseVersion();
        maxp.numGlyphs = p.parseUShort();
        if (maxp.version === 1.0) {
            maxp.maxPoints = p.parseUShort();
            maxp.maxContours = p.parseUShort();
            maxp.maxCompositePoints = p.parseUShort();
            maxp.maxCompositeContours = p.parseUShort();
            maxp.maxZones = p.parseUShort();
            maxp.maxTwilightPoints = p.parseUShort();
            maxp.maxStorage = p.parseUShort();
            maxp.maxFunctionDefs = p.parseUShort();
            maxp.maxInstructionDefs = p.parseUShort();
            maxp.maxStackElements = p.parseUShort();
            maxp.maxSizeOfInstructions = p.parseUShort();
            maxp.maxComponentElements = p.parseUShort();
            maxp.maxComponentDepth = p.parseUShort();
        }

        return maxp;
    }

    function makeMaxpTable(numGlyphs) {
        return new table.Table('maxp', [
            {name: 'version', type: 'FIXED', value: 0x00005000},
            {name: 'numGlyphs', type: 'USHORT', value: numGlyphs}
        ]);
    }

    var maxp = { parse: parseMaxpTable, make: makeMaxpTable };

    // The `name` naming table.

    // NameIDs for the name table.
    var nameTableNames = [
        'copyright',              // 0
        'fontFamily',             // 1
        'fontSubfamily',          // 2
        'uniqueID',               // 3
        'fullName',               // 4
        'version',                // 5
        'postScriptName',         // 6
        'trademark',              // 7
        'manufacturer',           // 8
        'designer',               // 9
        'description',            // 10
        'manufacturerURL',        // 11
        'designerURL',            // 12
        'license',                // 13
        'licenseURL',             // 14
        'reserved',               // 15
        'preferredFamily',        // 16
        'preferredSubfamily',     // 17
        'compatibleFullName',     // 18
        'sampleText',             // 19
        'postScriptFindFontName', // 20
        'wwsFamily',              // 21
        'wwsSubfamily'            // 22
    ];

    var macLanguages = {
        0: 'en',
        1: 'fr',
        2: 'de',
        3: 'it',
        4: 'nl',
        5: 'sv',
        6: 'es',
        7: 'da',
        8: 'pt',
        9: 'no',
        10: 'he',
        11: 'ja',
        12: 'ar',
        13: 'fi',
        14: 'el',
        15: 'is',
        16: 'mt',
        17: 'tr',
        18: 'hr',
        19: 'zh-Hant',
        20: 'ur',
        21: 'hi',
        22: 'th',
        23: 'ko',
        24: 'lt',
        25: 'pl',
        26: 'hu',
        27: 'es',
        28: 'lv',
        29: 'se',
        30: 'fo',
        31: 'fa',
        32: 'ru',
        33: 'zh',
        34: 'nl-BE',
        35: 'ga',
        36: 'sq',
        37: 'ro',
        38: 'cz',
        39: 'sk',
        40: 'si',
        41: 'yi',
        42: 'sr',
        43: 'mk',
        44: 'bg',
        45: 'uk',
        46: 'be',
        47: 'uz',
        48: 'kk',
        49: 'az-Cyrl',
        50: 'az-Arab',
        51: 'hy',
        52: 'ka',
        53: 'mo',
        54: 'ky',
        55: 'tg',
        56: 'tk',
        57: 'mn-CN',
        58: 'mn',
        59: 'ps',
        60: 'ks',
        61: 'ku',
        62: 'sd',
        63: 'bo',
        64: 'ne',
        65: 'sa',
        66: 'mr',
        67: 'bn',
        68: 'as',
        69: 'gu',
        70: 'pa',
        71: 'or',
        72: 'ml',
        73: 'kn',
        74: 'ta',
        75: 'te',
        76: 'si',
        77: 'my',
        78: 'km',
        79: 'lo',
        80: 'vi',
        81: 'id',
        82: 'tl',
        83: 'ms',
        84: 'ms-Arab',
        85: 'am',
        86: 'ti',
        87: 'om',
        88: 'so',
        89: 'sw',
        90: 'rw',
        91: 'rn',
        92: 'ny',
        93: 'mg',
        94: 'eo',
        128: 'cy',
        129: 'eu',
        130: 'ca',
        131: 'la',
        132: 'qu',
        133: 'gn',
        134: 'ay',
        135: 'tt',
        136: 'ug',
        137: 'dz',
        138: 'jv',
        139: 'su',
        140: 'gl',
        141: 'af',
        142: 'br',
        143: 'iu',
        144: 'gd',
        145: 'gv',
        146: 'ga',
        147: 'to',
        148: 'el-polyton',
        149: 'kl',
        150: 'az',
        151: 'nn'
    };

    // MacOS language ID → MacOS script ID
    //
    // Note that the script ID is not sufficient to determine what encoding
    // to use in TrueType files. For some languages, MacOS used a modification
    // of a mainstream script. For example, an Icelandic name would be stored
    // with smRoman in the TrueType naming table, but the actual encoding
    // is a special Icelandic version of the normal Macintosh Roman encoding.
    // As another example, Inuktitut uses an 8-bit encoding for Canadian Aboriginal
    // Syllables but MacOS had run out of available script codes, so this was
    // done as a (pretty radical) "modification" of Ethiopic.
    //
    // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt
    var macLanguageToScript = {
        0: 0,  // langEnglish → smRoman
        1: 0,  // langFrench → smRoman
        2: 0,  // langGerman → smRoman
        3: 0,  // langItalian → smRoman
        4: 0,  // langDutch → smRoman
        5: 0,  // langSwedish → smRoman
        6: 0,  // langSpanish → smRoman
        7: 0,  // langDanish → smRoman
        8: 0,  // langPortuguese → smRoman
        9: 0,  // langNorwegian → smRoman
        10: 5,  // langHebrew → smHebrew
        11: 1,  // langJapanese → smJapanese
        12: 4,  // langArabic → smArabic
        13: 0,  // langFinnish → smRoman
        14: 6,  // langGreek → smGreek
        15: 0,  // langIcelandic → smRoman (modified)
        16: 0,  // langMaltese → smRoman
        17: 0,  // langTurkish → smRoman (modified)
        18: 0,  // langCroatian → smRoman (modified)
        19: 2,  // langTradChinese → smTradChinese
        20: 4,  // langUrdu → smArabic
        21: 9,  // langHindi → smDevanagari
        22: 21,  // langThai → smThai
        23: 3,  // langKorean → smKorean
        24: 29,  // langLithuanian → smCentralEuroRoman
        25: 29,  // langPolish → smCentralEuroRoman
        26: 29,  // langHungarian → smCentralEuroRoman
        27: 29,  // langEstonian → smCentralEuroRoman
        28: 29,  // langLatvian → smCentralEuroRoman
        29: 0,  // langSami → smRoman
        30: 0,  // langFaroese → smRoman (modified)
        31: 4,  // langFarsi → smArabic (modified)
        32: 7,  // langRussian → smCyrillic
        33: 25,  // langSimpChinese → smSimpChinese
        34: 0,  // langFlemish → smRoman
        35: 0,  // langIrishGaelic → smRoman (modified)
        36: 0,  // langAlbanian → smRoman
        37: 0,  // langRomanian → smRoman (modified)
        38: 29,  // langCzech → smCentralEuroRoman
        39: 29,  // langSlovak → smCentralEuroRoman
        40: 0,  // langSlovenian → smRoman (modified)
        41: 5,  // langYiddish → smHebrew
        42: 7,  // langSerbian → smCyrillic
        43: 7,  // langMacedonian → smCyrillic
        44: 7,  // langBulgarian → smCyrillic
        45: 7,  // langUkrainian → smCyrillic (modified)
        46: 7,  // langByelorussian → smCyrillic
        47: 7,  // langUzbek → smCyrillic
        48: 7,  // langKazakh → smCyrillic
        49: 7,  // langAzerbaijani → smCyrillic
        50: 4,  // langAzerbaijanAr → smArabic
        51: 24,  // langArmenian → smArmenian
        52: 23,  // langGeorgian → smGeorgian
        53: 7,  // langMoldavian → smCyrillic
        54: 7,  // langKirghiz → smCyrillic
        55: 7,  // langTajiki → smCyrillic
        56: 7,  // langTurkmen → smCyrillic
        57: 27,  // langMongolian → smMongolian
        58: 7,  // langMongolianCyr → smCyrillic
        59: 4,  // langPashto → smArabic
        60: 4,  // langKurdish → smArabic
        61: 4,  // langKashmiri → smArabic
        62: 4,  // langSindhi → smArabic
        63: 26,  // langTibetan → smTibetan
        64: 9,  // langNepali → smDevanagari
        65: 9,  // langSanskrit → smDevanagari
        66: 9,  // langMarathi → smDevanagari
        67: 13,  // langBengali → smBengali
        68: 13,  // langAssamese → smBengali
        69: 11,  // langGujarati → smGujarati
        70: 10,  // langPunjabi → smGurmukhi
        71: 12,  // langOriya → smOriya
        72: 17,  // langMalayalam → smMalayalam
        73: 16,  // langKannada → smKannada
        74: 14,  // langTamil → smTamil
        75: 15,  // langTelugu → smTelugu
        76: 18,  // langSinhalese → smSinhalese
        77: 19,  // langBurmese → smBurmese
        78: 20,  // langKhmer → smKhmer
        79: 22,  // langLao → smLao
        80: 30,  // langVietnamese → smVietnamese
        81: 0,  // langIndonesian → smRoman
        82: 0,  // langTagalog → smRoman
        83: 0,  // langMalayRoman → smRoman
        84: 4,  // langMalayArabic → smArabic
        85: 28,  // langAmharic → smEthiopic
        86: 28,  // langTigrinya → smEthiopic
        87: 28,  // langOromo → smEthiopic
        88: 0,  // langSomali → smRoman
        89: 0,  // langSwahili → smRoman
        90: 0,  // langKinyarwanda → smRoman
        91: 0,  // langRundi → smRoman
        92: 0,  // langNyanja → smRoman
        93: 0,  // langMalagasy → smRoman
        94: 0,  // langEsperanto → smRoman
        128: 0,  // langWelsh → smRoman (modified)
        129: 0,  // langBasque → smRoman
        130: 0,  // langCatalan → smRoman
        131: 0,  // langLatin → smRoman
        132: 0,  // langQuechua → smRoman
        133: 0,  // langGuarani → smRoman
        134: 0,  // langAymara → smRoman
        135: 7,  // langTatar → smCyrillic
        136: 4,  // langUighur → smArabic
        137: 26,  // langDzongkha → smTibetan
        138: 0,  // langJavaneseRom → smRoman
        139: 0,  // langSundaneseRom → smRoman
        140: 0,  // langGalician → smRoman
        141: 0,  // langAfrikaans → smRoman
        142: 0,  // langBreton → smRoman (modified)
        143: 28,  // langInuktitut → smEthiopic (modified)
        144: 0,  // langScottishGaelic → smRoman (modified)
        145: 0,  // langManxGaelic → smRoman (modified)
        146: 0,  // langIrishGaelicScript → smRoman (modified)
        147: 0,  // langTongan → smRoman
        148: 6,  // langGreekAncient → smRoman
        149: 0,  // langGreenlandic → smRoman
        150: 0,  // langAzerbaijanRoman → smRoman
        151: 0   // langNynorsk → smRoman
    };

    // While Microsoft indicates a region/country for all its language
    // IDs, we omit the region code if it's equal to the "most likely
    // region subtag" according to Unicode CLDR. For scripts, we omit
    // the subtag if it is equal to the Suppress-Script entry in the
    // IANA language subtag registry for IETF BCP 47.
    //
    // For example, Microsoft states that its language code 0x041A is
    // Croatian in Croatia. We transform this to the BCP 47 language code 'hr'
    // and not 'hr-HR' because Croatia is the default country for Croatian,
    // according to Unicode CLDR. As another example, Microsoft states
    // that 0x101A is Croatian (Latin) in Bosnia-Herzegovina. We transform
    // this to 'hr-BA' and not 'hr-Latn-BA' because Latin is the default script
    // for the Croatian language, according to IANA.
    //
    // http://www.unicode.org/cldr/charts/latest/supplemental/likely_subtags.html
    // http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry
    var windowsLanguages = {
        0x0436: 'af',
        0x041C: 'sq',
        0x0484: 'gsw',
        0x045E: 'am',
        0x1401: 'ar-DZ',
        0x3C01: 'ar-BH',
        0x0C01: 'ar',
        0x0801: 'ar-IQ',
        0x2C01: 'ar-JO',
        0x3401: 'ar-KW',
        0x3001: 'ar-LB',
        0x1001: 'ar-LY',
        0x1801: 'ary',
        0x2001: 'ar-OM',
        0x4001: 'ar-QA',
        0x0401: 'ar-SA',
        0x2801: 'ar-SY',
        0x1C01: 'aeb',
        0x3801: 'ar-AE',
        0x2401: 'ar-YE',
        0x042B: 'hy',
        0x044D: 'as',
        0x082C: 'az-Cyrl',
        0x042C: 'az',
        0x046D: 'ba',
        0x042D: 'eu',
        0x0423: 'be',
        0x0845: 'bn',
        0x0445: 'bn-IN',
        0x201A: 'bs-Cyrl',
        0x141A: 'bs',
        0x047E: 'br',
        0x0402: 'bg',
        0x0403: 'ca',
        0x0C04: 'zh-HK',
        0x1404: 'zh-MO',
        0x0804: 'zh',
        0x1004: 'zh-SG',
        0x0404: 'zh-TW',
        0x0483: 'co',
        0x041A: 'hr',
        0x101A: 'hr-BA',
        0x0405: 'cs',
        0x0406: 'da',
        0x048C: 'prs',
        0x0465: 'dv',
        0x0813: 'nl-BE',
        0x0413: 'nl',
        0x0C09: 'en-AU',
        0x2809: 'en-BZ',
        0x1009: 'en-CA',
        0x2409: 'en-029',
        0x4009: 'en-IN',
        0x1809: 'en-IE',
        0x2009: 'en-JM',
        0x4409: 'en-MY',
        0x1409: 'en-NZ',
        0x3409: 'en-PH',
        0x4809: 'en-SG',
        0x1C09: 'en-ZA',
        0x2C09: 'en-TT',
        0x0809: 'en-GB',
        0x0409: 'en',
        0x3009: 'en-ZW',
        0x0425: 'et',
        0x0438: 'fo',
        0x0464: 'fil',
        0x040B: 'fi',
        0x080C: 'fr-BE',
        0x0C0C: 'fr-CA',
        0x040C: 'fr',
        0x140C: 'fr-LU',
        0x180C: 'fr-MC',
        0x100C: 'fr-CH',
        0x0462: 'fy',
        0x0456: 'gl',
        0x0437: 'ka',
        0x0C07: 'de-AT',
        0x0407: 'de',
        0x1407: 'de-LI',
        0x1007: 'de-LU',
        0x0807: 'de-CH',
        0x0408: 'el',
        0x046F: 'kl',
        0x0447: 'gu',
        0x0468: 'ha',
        0x040D: 'he',
        0x0439: 'hi',
        0x040E: 'hu',
        0x040F: 'is',
        0x0470: 'ig',
        0x0421: 'id',
        0x045D: 'iu',
        0x085D: 'iu-Latn',
        0x083C: 'ga',
        0x0434: 'xh',
        0x0435: 'zu',
        0x0410: 'it',
        0x0810: 'it-CH',
        0x0411: 'ja',
        0x044B: 'kn',
        0x043F: 'kk',
        0x0453: 'km',
        0x0486: 'quc',
        0x0487: 'rw',
        0x0441: 'sw',
        0x0457: 'kok',
        0x0412: 'ko',
        0x0440: 'ky',
        0x0454: 'lo',
        0x0426: 'lv',
        0x0427: 'lt',
        0x082E: 'dsb',
        0x046E: 'lb',
        0x042F: 'mk',
        0x083E: 'ms-BN',
        0x043E: 'ms',
        0x044C: 'ml',
        0x043A: 'mt',
        0x0481: 'mi',
        0x047A: 'arn',
        0x044E: 'mr',
        0x047C: 'moh',
        0x0450: 'mn',
        0x0850: 'mn-CN',
        0x0461: 'ne',
        0x0414: 'nb',
        0x0814: 'nn',
        0x0482: 'oc',
        0x0448: 'or',
        0x0463: 'ps',
        0x0415: 'pl',
        0x0416: 'pt',
        0x0816: 'pt-PT',
        0x0446: 'pa',
        0x046B: 'qu-BO',
        0x086B: 'qu-EC',
        0x0C6B: 'qu',
        0x0418: 'ro',
        0x0417: 'rm',
        0x0419: 'ru',
        0x243B: 'smn',
        0x103B: 'smj-NO',
        0x143B: 'smj',
        0x0C3B: 'se-FI',
        0x043B: 'se',
        0x083B: 'se-SE',
        0x203B: 'sms',
        0x183B: 'sma-NO',
        0x1C3B: 'sms',
        0x044F: 'sa',
        0x1C1A: 'sr-Cyrl-BA',
        0x0C1A: 'sr',
        0x181A: 'sr-Latn-BA',
        0x081A: 'sr-Latn',
        0x046C: 'nso',
        0x0432: 'tn',
        0x045B: 'si',
        0x041B: 'sk',
        0x0424: 'sl',
        0x2C0A: 'es-AR',
        0x400A: 'es-BO',
        0x340A: 'es-CL',
        0x240A: 'es-CO',
        0x140A: 'es-CR',
        0x1C0A: 'es-DO',
        0x300A: 'es-EC',
        0x440A: 'es-SV',
        0x100A: 'es-GT',
        0x480A: 'es-HN',
        0x080A: 'es-MX',
        0x4C0A: 'es-NI',
        0x180A: 'es-PA',
        0x3C0A: 'es-PY',
        0x280A: 'es-PE',
        0x500A: 'es-PR',

        // Microsoft has defined two different language codes for
        // “Spanish with modern sorting” and “Spanish with traditional
        // sorting”. This makes sense for collation APIs, and it would be
        // possible to express this in BCP 47 language tags via Unicode
        // extensions (eg., es-u-co-trad is Spanish with traditional
        // sorting). However, for storing names in fonts, the distinction
        // does not make sense, so we give “es” in both cases.
        0x0C0A: 'es',
        0x040A: 'es',

        0x540A: 'es-US',
        0x380A: 'es-UY',
        0x200A: 'es-VE',
        0x081D: 'sv-FI',
        0x041D: 'sv',
        0x045A: 'syr',
        0x0428: 'tg',
        0x085F: 'tzm',
        0x0449: 'ta',
        0x0444: 'tt',
        0x044A: 'te',
        0x041E: 'th',
        0x0451: 'bo',
        0x041F: 'tr',
        0x0442: 'tk',
        0x0480: 'ug',
        0x0422: 'uk',
        0x042E: 'hsb',
        0x0420: 'ur',
        0x0843: 'uz-Cyrl',
        0x0443: 'uz',
        0x042A: 'vi',
        0x0452: 'cy',
        0x0488: 'wo',
        0x0485: 'sah',
        0x0478: 'ii',
        0x046A: 'yo'
    };

    // Returns a IETF BCP 47 language code, for example 'zh-Hant'
    // for 'Chinese in the traditional script'.
    function getLanguageCode(platformID, languageID, ltag) {
        switch (platformID) {
            case 0:  // Unicode
                if (languageID === 0xFFFF) {
                    return 'und';
                } else if (ltag) {
                    return ltag[languageID];
                }

                break;

            case 1:  // Macintosh
                return macLanguages[languageID];

            case 3:  // Windows
                return windowsLanguages[languageID];
        }

        return undefined;
    }

    var utf16 = 'utf-16';

    // MacOS script ID → encoding. This table stores the default case,
    // which can be overridden by macLanguageEncodings.
    var macScriptEncodings = {
        0: 'macintosh',           // smRoman
        1: 'x-mac-japanese',      // smJapanese
        2: 'x-mac-chinesetrad',   // smTradChinese
        3: 'x-mac-korean',        // smKorean
        6: 'x-mac-greek',         // smGreek
        7: 'x-mac-cyrillic',      // smCyrillic
        9: 'x-mac-devanagai',     // smDevanagari
        10: 'x-mac-gurmukhi',     // smGurmukhi
        11: 'x-mac-gujarati',     // smGujarati
        12: 'x-mac-oriya',        // smOriya
        13: 'x-mac-bengali',      // smBengali
        14: 'x-mac-tamil',        // smTamil
        15: 'x-mac-telugu',       // smTelugu
        16: 'x-mac-kannada',      // smKannada
        17: 'x-mac-malayalam',    // smMalayalam
        18: 'x-mac-sinhalese',    // smSinhalese
        19: 'x-mac-burmese',      // smBurmese
        20: 'x-mac-khmer',        // smKhmer
        21: 'x-mac-thai',         // smThai
        22: 'x-mac-lao',          // smLao
        23: 'x-mac-georgian',     // smGeorgian
        24: 'x-mac-armenian',     // smArmenian
        25: 'x-mac-chinesesimp',  // smSimpChinese
        26: 'x-mac-tibetan',      // smTibetan
        27: 'x-mac-mongolian',    // smMongolian
        28: 'x-mac-ethiopic',     // smEthiopic
        29: 'x-mac-ce',           // smCentralEuroRoman
        30: 'x-mac-vietnamese',   // smVietnamese
        31: 'x-mac-extarabic'     // smExtArabic
    };

    // MacOS language ID → encoding. This table stores the exceptional
    // cases, which override macScriptEncodings. For writing MacOS naming
    // tables, we need to emit a MacOS script ID. Therefore, we cannot
    // merge macScriptEncodings into macLanguageEncodings.
    //
    // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt
    var macLanguageEncodings = {
        15: 'x-mac-icelandic',    // langIcelandic
        17: 'x-mac-turkish',      // langTurkish
        18: 'x-mac-croatian',     // langCroatian
        24: 'x-mac-ce',           // langLithuanian
        25: 'x-mac-ce',           // langPolish
        26: 'x-mac-ce',           // langHungarian
        27: 'x-mac-ce',           // langEstonian
        28: 'x-mac-ce',           // langLatvian
        30: 'x-mac-icelandic',    // langFaroese
        37: 'x-mac-romanian',     // langRomanian
        38: 'x-mac-ce',           // langCzech
        39: 'x-mac-ce',           // langSlovak
        40: 'x-mac-ce',           // langSlovenian
        143: 'x-mac-inuit',       // langInuktitut
        146: 'x-mac-gaelic'       // langIrishGaelicScript
    };

    function getEncoding(platformID, encodingID, languageID) {
        switch (platformID) {
            case 0:  // Unicode
                return utf16;

            case 1:  // Apple Macintosh
                return macLanguageEncodings[languageID] || macScriptEncodings[encodingID];

            case 3:  // Microsoft Windows
                if (encodingID === 1 || encodingID === 10) {
                    return utf16;
                }

                break;
        }

        return undefined;
    }

    // Parse the naming `name` table.
    // FIXME: Format 1 additional fields are not supported yet.
    // ltag is the content of the `ltag' table, such as ['en', 'zh-Hans', 'de-CH-1904'].
    function parseNameTable(data, start, ltag) {
        var name = {};
        var p = new parse.Parser(data, start);
        var format = p.parseUShort();
        var count = p.parseUShort();
        var stringOffset = p.offset + p.parseUShort();
        for (var i = 0; i < count; i++) {
            var platformID = p.parseUShort();
            var encodingID = p.parseUShort();
            var languageID = p.parseUShort();
            var nameID = p.parseUShort();
            var property = nameTableNames[nameID] || nameID;
            var byteLength = p.parseUShort();
            var offset = p.parseUShort();
            var language = getLanguageCode(platformID, languageID, ltag);
            var encoding = getEncoding(platformID, encodingID, languageID);
            if (encoding !== undefined && language !== undefined) {
                var text = (void 0);
                if (encoding === utf16) {
                    text = decode.UTF16(data, stringOffset + offset, byteLength);
                } else {
                    text = decode.MACSTRING(data, stringOffset + offset, byteLength, encoding);
                }

                if (text) {
                    var translations = name[property];
                    if (translations === undefined) {
                        translations = name[property] = {};
                    }

                    translations[language] = text;
                }
            }
        }

        var langTagCount = 0;
        if (format === 1) {
            // FIXME: Also handle Microsoft's 'name' table 1.
            langTagCount = p.parseUShort();
        }

        return name;
    }

    // {23: 'foo'} → {'foo': 23}
    // ['bar', 'baz'] → {'bar': 0, 'baz': 1}
    function reverseDict(dict) {
        var result = {};
        for (var key in dict) {
            result[dict[key]] = parseInt(key);
        }

        return result;
    }

    function makeNameRecord(platformID, encodingID, languageID, nameID, length, offset) {
        return new table.Record('NameRecord', [
            {name: 'platformID', type: 'USHORT', value: platformID},
            {name: 'encodingID', type: 'USHORT', value: encodingID},
            {name: 'languageID', type: 'USHORT', value: languageID},
            {name: 'nameID', type: 'USHORT', value: nameID},
            {name: 'length', type: 'USHORT', value: length},
            {name: 'offset', type: 'USHORT', value: offset}
        ]);
    }

    // Finds the position of needle in haystack, or -1 if not there.
    // Like String.indexOf(), but for arrays.
    function findSubArray(needle, haystack) {
        var needleLength = needle.length;
        var limit = haystack.length - needleLength + 1;

        loop:
        for (var pos = 0; pos < limit; pos++) {
            for (; pos < limit; pos++) {
                for (var k = 0; k < needleLength; k++) {
                    if (haystack[pos + k] !== needle[k]) {
                        continue loop;
                    }
                }

                return pos;
            }
        }

        return -1;
    }

    function addStringToPool(s, pool) {
        var offset = findSubArray(s, pool);
        if (offset < 0) {
            offset = pool.length;
            var i = 0;
            var len = s.length;
            for (; i < len; ++i) {
                pool.push(s[i]);
            }

        }

        return offset;
    }

    function makeNameTable(names, ltag) {
        var nameID;
        var nameIDs = [];

        var namesWithNumericKeys = {};
        var nameTableIds = reverseDict(nameTableNames);
        for (var key in names) {
            var id = nameTableIds[key];
            if (id === undefined) {
                id = key;
            }

            nameID = parseInt(id);

            if (isNaN(nameID)) {
                throw new Error('Name table entry "' + key + '" does not exist, see nameTableNames for complete list.');
            }

            namesWithNumericKeys[nameID] = names[key];
            nameIDs.push(nameID);
        }

        var macLanguageIds = reverseDict(macLanguages);
        var windowsLanguageIds = reverseDict(windowsLanguages);

        var nameRecords = [];
        var stringPool = [];

        for (var i = 0; i < nameIDs.length; i++) {
            nameID = nameIDs[i];
            var translations = namesWithNumericKeys[nameID];
            for (var lang in translations) {
                var text = translations[lang];

                // For MacOS, we try to emit the name in the form that was introduced
                // in the initial version of the TrueType spec (in the late 1980s).
                // However, this can fail for various reasons: the requested BCP 47
                // language code might not have an old-style Mac equivalent;
                // we might not have a codec for the needed character encoding;
                // or the name might contain characters that cannot be expressed
                // in the old-style Macintosh encoding. In case of failure, we emit
                // the name in a more modern fashion (Unicode encoding with BCP 47
                // language tags) that is recognized by MacOS 10.5, released in 2009.
                // If fonts were only read by operating systems, we could simply
                // emit all names in the modern form; this would be much easier.
                // However, there are many applications and libraries that read
                // 'name' tables directly, and these will usually only recognize
                // the ancient form (silently skipping the unrecognized names).
                var macPlatform = 1;  // Macintosh
                var macLanguage = macLanguageIds[lang];
                var macScript = macLanguageToScript[macLanguage];
                var macEncoding = getEncoding(macPlatform, macScript, macLanguage);
                var macName = encode.MACSTRING(text, macEncoding);
                if (macName === undefined) {
                    macPlatform = 0;  // Unicode
                    macLanguage = ltag.indexOf(lang);
                    if (macLanguage < 0) {
                        macLanguage = ltag.length;
                        ltag.push(lang);
                    }

                    macScript = 4;  // Unicode 2.0 and later
                    macName = encode.UTF16(text);
                }

                var macNameOffset = addStringToPool(macName, stringPool);
                nameRecords.push(makeNameRecord(macPlatform, macScript, macLanguage,
                                                nameID, macName.length, macNameOffset));

                var winLanguage = windowsLanguageIds[lang];
                if (winLanguage !== undefined) {
                    var winName = encode.UTF16(text);
                    var winNameOffset = addStringToPool(winName, stringPool);
                    nameRecords.push(makeNameRecord(3, 1, winLanguage,
                                                    nameID, winName.length, winNameOffset));
                }
            }
        }

        nameRecords.sort(function(a, b) {
            return ((a.platformID - b.platformID) ||
                    (a.encodingID - b.encodingID) ||
                    (a.languageID - b.languageID) ||
                    (a.nameID - b.nameID));
        });

        var t = new table.Table('name', [
            {name: 'format', type: 'USHORT', value: 0},
            {name: 'count', type: 'USHORT', value: nameRecords.length},
            {name: 'stringOffset', type: 'USHORT', value: 6 + nameRecords.length * 12}
        ]);

        for (var r = 0; r < nameRecords.length; r++) {
            t.fields.push({name: 'record_' + r, type: 'RECORD', value: nameRecords[r]});
        }

        t.fields.push({name: 'strings', type: 'LITERAL', value: stringPool});
        return t;
    }

    var _name = { parse: parseNameTable, make: makeNameTable };

    // The `OS/2` table contains metrics required in OpenType fonts.

    var unicodeRanges = [
        {begin: 0x0000, end: 0x007F}, // Basic Latin
        {begin: 0x0080, end: 0x00FF}, // Latin-1 Supplement
        {begin: 0x0100, end: 0x017F}, // Latin Extended-A
        {begin: 0x0180, end: 0x024F}, // Latin Extended-B
        {begin: 0x0250, end: 0x02AF}, // IPA Extensions
        {begin: 0x02B0, end: 0x02FF}, // Spacing Modifier Letters
        {begin: 0x0300, end: 0x036F}, // Combining Diacritical Marks
        {begin: 0x0370, end: 0x03FF}, // Greek and Coptic
        {begin: 0x2C80, end: 0x2CFF}, // Coptic
        {begin: 0x0400, end: 0x04FF}, // Cyrillic
        {begin: 0x0530, end: 0x058F}, // Armenian
        {begin: 0x0590, end: 0x05FF}, // Hebrew
        {begin: 0xA500, end: 0xA63F}, // Vai
        {begin: 0x0600, end: 0x06FF}, // Arabic
        {begin: 0x07C0, end: 0x07FF}, // NKo
        {begin: 0x0900, end: 0x097F}, // Devanagari
        {begin: 0x0980, end: 0x09FF}, // Bengali
        {begin: 0x0A00, end: 0x0A7F}, // Gurmukhi
        {begin: 0x0A80, end: 0x0AFF}, // Gujarati
        {begin: 0x0B00, end: 0x0B7F}, // Oriya
        {begin: 0x0B80, end: 0x0BFF}, // Tamil
        {begin: 0x0C00, end: 0x0C7F}, // Telugu
        {begin: 0x0C80, end: 0x0CFF}, // Kannada
        {begin: 0x0D00, end: 0x0D7F}, // Malayalam
        {begin: 0x0E00, end: 0x0E7F}, // Thai
        {begin: 0x0E80, end: 0x0EFF}, // Lao
        {begin: 0x10A0, end: 0x10FF}, // Georgian
        {begin: 0x1B00, end: 0x1B7F}, // Balinese
        {begin: 0x1100, end: 0x11FF}, // Hangul Jamo
        {begin: 0x1E00, end: 0x1EFF}, // Latin Extended Additional
        {begin: 0x1F00, end: 0x1FFF}, // Greek Extended
        {begin: 0x2000, end: 0x206F}, // General Punctuation
        {begin: 0x2070, end: 0x209F}, // Superscripts And Subscripts
        {begin: 0x20A0, end: 0x20CF}, // Currency Symbol
        {begin: 0x20D0, end: 0x20FF}, // Combining Diacritical Marks For Symbols
        {begin: 0x2100, end: 0x214F}, // Letterlike Symbols
        {begin: 0x2150, end: 0x218F}, // Number Forms
        {begin: 0x2190, end: 0x21FF}, // Arrows
        {begin: 0x2200, end: 0x22FF}, // Mathematical Operators
        {begin: 0x2300, end: 0x23FF}, // Miscellaneous Technical
        {begin: 0x2400, end: 0x243F}, // Control Pictures
        {begin: 0x2440, end: 0x245F}, // Optical Character Recognition
        {begin: 0x2460, end: 0x24FF}, // Enclosed Alphanumerics
        {begin: 0x2500, end: 0x257F}, // Box Drawing
        {begin: 0x2580, end: 0x259F}, // Block Elements
        {begin: 0x25A0, end: 0x25FF}, // Geometric Shapes
        {begin: 0x2600, end: 0x26FF}, // Miscellaneous Symbols
        {begin: 0x2700, end: 0x27BF}, // Dingbats
        {begin: 0x3000, end: 0x303F}, // CJK Symbols And Punctuation
        {begin: 0x3040, end: 0x309F}, // Hiragana
        {begin: 0x30A0, end: 0x30FF}, // Katakana
        {begin: 0x3100, end: 0x312F}, // Bopomofo
        {begin: 0x3130, end: 0x318F}, // Hangul Compatibility Jamo
        {begin: 0xA840, end: 0xA87F}, // Phags-pa
        {begin: 0x3200, end: 0x32FF}, // Enclosed CJK Letters And Months
        {begin: 0x3300, end: 0x33FF}, // CJK Compatibility
        {begin: 0xAC00, end: 0xD7AF}, // Hangul Syllables
        {begin: 0xD800, end: 0xDFFF}, // Non-Plane 0 *
        {begin: 0x10900, end: 0x1091F}, // Phoenicia
        {begin: 0x4E00, end: 0x9FFF}, // CJK Unified Ideographs
        {begin: 0xE000, end: 0xF8FF}, // Private Use Area (plane 0)
        {begin: 0x31C0, end: 0x31EF}, // CJK Strokes
        {begin: 0xFB00, end: 0xFB4F}, // Alphabetic Presentation Forms
        {begin: 0xFB50, end: 0xFDFF}, // Arabic Presentation Forms-A
        {begin: 0xFE20, end: 0xFE2F}, // Combining Half Marks
        {begin: 0xFE10, end: 0xFE1F}, // Vertical Forms
        {begin: 0xFE50, end: 0xFE6F}, // Small Form Variants
        {begin: 0xFE70, end: 0xFEFF}, // Arabic Presentation Forms-B
        {begin: 0xFF00, end: 0xFFEF}, // Halfwidth And Fullwidth Forms
        {begin: 0xFFF0, end: 0xFFFF}, // Specials
        {begin: 0x0F00, end: 0x0FFF}, // Tibetan
        {begin: 0x0700, end: 0x074F}, // Syriac
        {begin: 0x0780, end: 0x07BF}, // Thaana
        {begin: 0x0D80, end: 0x0DFF}, // Sinhala
        {begin: 0x1000, end: 0x109F}, // Myanmar
        {begin: 0x1200, end: 0x137F}, // Ethiopic
        {begin: 0x13A0, end: 0x13FF}, // Cherokee
        {begin: 0x1400, end: 0x167F}, // Unified Canadian Aboriginal Syllabics
        {begin: 0x1680, end: 0x169F}, // Ogham
        {begin: 0x16A0, end: 0x16FF}, // Runic
        {begin: 0x1780, end: 0x17FF}, // Khmer
        {begin: 0x1800, end: 0x18AF}, // Mongolian
        {begin: 0x2800, end: 0x28FF}, // Braille Patterns
        {begin: 0xA000, end: 0xA48F}, // Yi Syllables
        {begin: 0x1700, end: 0x171F}, // Tagalog
        {begin: 0x10300, end: 0x1032F}, // Old Italic
        {begin: 0x10330, end: 0x1034F}, // Gothic
        {begin: 0x10400, end: 0x1044F}, // Deseret
        {begin: 0x1D000, end: 0x1D0FF}, // Byzantine Musical Symbols
        {begin: 0x1D400, end: 0x1D7FF}, // Mathematical Alphanumeric Symbols
        {begin: 0xFF000, end: 0xFFFFD}, // Private Use (plane 15)
        {begin: 0xFE00, end: 0xFE0F}, // Variation Selectors
        {begin: 0xE0000, end: 0xE007F}, // Tags
        {begin: 0x1900, end: 0x194F}, // Limbu
        {begin: 0x1950, end: 0x197F}, // Tai Le
        {begin: 0x1980, end: 0x19DF}, // New Tai Lue
        {begin: 0x1A00, end: 0x1A1F}, // Buginese
        {begin: 0x2C00, end: 0x2C5F}, // Glagolitic
        {begin: 0x2D30, end: 0x2D7F}, // Tifinagh
        {begin: 0x4DC0, end: 0x4DFF}, // Yijing Hexagram Symbols
        {begin: 0xA800, end: 0xA82F}, // Syloti Nagri
        {begin: 0x10000, end: 0x1007F}, // Linear B Syllabary
        {begin: 0x10140, end: 0x1018F}, // Ancient Greek Numbers
        {begin: 0x10380, end: 0x1039F}, // Ugaritic
        {begin: 0x103A0, end: 0x103DF}, // Old Persian
        {begin: 0x10450, end: 0x1047F}, // Shavian
        {begin: 0x10480, end: 0x104AF}, // Osmanya
        {begin: 0x10800, end: 0x1083F}, // Cypriot Syllabary
        {begin: 0x10A00, end: 0x10A5F}, // Kharoshthi
        {begin: 0x1D300, end: 0x1D35F}, // Tai Xuan Jing Symbols
        {begin: 0x12000, end: 0x123FF}, // Cuneiform
        {begin: 0x1D360, end: 0x1D37F}, // Counting Rod Numerals
        {begin: 0x1B80, end: 0x1BBF}, // Sundanese
        {begin: 0x1C00, end: 0x1C4F}, // Lepcha
        {begin: 0x1C50, end: 0x1C7F}, // Ol Chiki
        {begin: 0xA880, end: 0xA8DF}, // Saurashtra
        {begin: 0xA900, end: 0xA92F}, // Kayah Li
        {begin: 0xA930, end: 0xA95F}, // Rejang
        {begin: 0xAA00, end: 0xAA5F}, // Cham
        {begin: 0x10190, end: 0x101CF}, // Ancient Symbols
        {begin: 0x101D0, end: 0x101FF}, // Phaistos Disc
        {begin: 0x102A0, end: 0x102DF}, // Carian
        {begin: 0x1F030, end: 0x1F09F}  // Domino Tiles
    ];

    function getUnicodeRange(unicode) {
        for (var i = 0; i < unicodeRanges.length; i += 1) {
            var range = unicodeRanges[i];
            if (unicode >= range.begin && unicode < range.end) {
                return i;
            }
        }

        return -1;
    }

    // Parse the OS/2 and Windows metrics `OS/2` table
    function parseOS2Table(data, start) {
        var os2 = {};
        var p = new parse.Parser(data, start);
        os2.version = p.parseUShort();
        os2.xAvgCharWidth = p.parseShort();
        os2.usWeightClass = p.parseUShort();
        os2.usWidthClass = p.parseUShort();
        os2.fsType = p.parseUShort();
        os2.ySubscriptXSize = p.parseShort();
        os2.ySubscriptYSize = p.parseShort();
        os2.ySubscriptXOffset = p.parseShort();
        os2.ySubscriptYOffset = p.parseShort();
        os2.ySuperscriptXSize = p.parseShort();
        os2.ySuperscriptYSize = p.parseShort();
        os2.ySuperscriptXOffset = p.parseShort();
        os2.ySuperscriptYOffset = p.parseShort();
        os2.yStrikeoutSize = p.parseShort();
        os2.yStrikeoutPosition = p.parseShort();
        os2.sFamilyClass = p.parseShort();
        os2.panose = [];
        for (var i = 0; i < 10; i++) {
            os2.panose[i] = p.parseByte();
        }

        os2.ulUnicodeRange1 = p.parseULong();
        os2.ulUnicodeRange2 = p.parseULong();
        os2.ulUnicodeRange3 = p.parseULong();
        os2.ulUnicodeRange4 = p.parseULong();
        os2.achVendID = String.fromCharCode(p.parseByte(), p.parseByte(), p.parseByte(), p.parseByte());
        os2.fsSelection = p.parseUShort();
        os2.usFirstCharIndex = p.parseUShort();
        os2.usLastCharIndex = p.parseUShort();
        os2.sTypoAscender = p.parseShort();
        os2.sTypoDescender = p.parseShort();
        os2.sTypoLineGap = p.parseShort();
        os2.usWinAscent = p.parseUShort();
        os2.usWinDescent = p.parseUShort();
        if (os2.version >= 1) {
            os2.ulCodePageRange1 = p.parseULong();
            os2.ulCodePageRange2 = p.parseULong();
        }

        if (os2.version >= 2) {
            os2.sxHeight = p.parseShort();
            os2.sCapHeight = p.parseShort();
            os2.usDefaultChar = p.parseUShort();
            os2.usBreakChar = p.parseUShort();
            os2.usMaxContent = p.parseUShort();
        }

        return os2;
    }

    function makeOS2Table(options) {
        return new table.Table('OS/2', [
            {name: 'version', type: 'USHORT', value: 0x0003},
            {name: 'xAvgCharWidth', type: 'SHORT', value: 0},
            {name: 'usWeightClass', type: 'USHORT', value: 0},
            {name: 'usWidthClass', type: 'USHORT', value: 0},
            {name: 'fsType', type: 'USHORT', value: 0},
            {name: 'ySubscriptXSize', type: 'SHORT', value: 650},
            {name: 'ySubscriptYSize', type: 'SHORT', value: 699},
            {name: 'ySubscriptXOffset', type: 'SHORT', value: 0},
            {name: 'ySubscriptYOffset', type: 'SHORT', value: 140},
            {name: 'ySuperscriptXSize', type: 'SHORT', value: 650},
            {name: 'ySuperscriptYSize', type: 'SHORT', value: 699},
            {name: 'ySuperscriptXOffset', type: 'SHORT', value: 0},
            {name: 'ySuperscriptYOffset', type: 'SHORT', value: 479},
            {name: 'yStrikeoutSize', type: 'SHORT', value: 49},
            {name: 'yStrikeoutPosition', type: 'SHORT', value: 258},
            {name: 'sFamilyClass', type: 'SHORT', value: 0},
            {name: 'bFamilyType', type: 'BYTE', value: 0},
            {name: 'bSerifStyle', type: 'BYTE', value: 0},
            {name: 'bWeight', type: 'BYTE', value: 0},
            {name: 'bProportion', type: 'BYTE', value: 0},
            {name: 'bContrast', type: 'BYTE', value: 0},
            {name: 'bStrokeVariation', type: 'BYTE', value: 0},
            {name: 'bArmStyle', type: 'BYTE', value: 0},
            {name: 'bLetterform', type: 'BYTE', value: 0},
            {name: 'bMidline', type: 'BYTE', value: 0},
            {name: 'bXHeight', type: 'BYTE', value: 0},
            {name: 'ulUnicodeRange1', type: 'ULONG', value: 0},
            {name: 'ulUnicodeRange2', type: 'ULONG', value: 0},
            {name: 'ulUnicodeRange3', type: 'ULONG', value: 0},
            {name: 'ulUnicodeRange4', type: 'ULONG', value: 0},
            {name: 'achVendID', type: 'CHARARRAY', value: 'XXXX'},
            {name: 'fsSelection', type: 'USHORT', value: 0},
            {name: 'usFirstCharIndex', type: 'USHORT', value: 0},
            {name: 'usLastCharIndex', type: 'USHORT', value: 0},
            {name: 'sTypoAscender', type: 'SHORT', value: 0},
            {name: 'sTypoDescender', type: 'SHORT', value: 0},
            {name: 'sTypoLineGap', type: 'SHORT', value: 0},
            {name: 'usWinAscent', type: 'USHORT', value: 0},
            {name: 'usWinDescent', type: 'USHORT', value: 0},
            {name: 'ulCodePageRange1', type: 'ULONG', value: 0},
            {name: 'ulCodePageRange2', type: 'ULONG', value: 0},
            {name: 'sxHeight', type: 'SHORT', value: 0},
            {name: 'sCapHeight', type: 'SHORT', value: 0},
            {name: 'usDefaultChar', type: 'USHORT', value: 0},
            {name: 'usBreakChar', type: 'USHORT', value: 0},
            {name: 'usMaxContext', type: 'USHORT', value: 0}
        ], options);
    }

    var os2 = { parse: parseOS2Table, make: makeOS2Table, unicodeRanges: unicodeRanges, getUnicodeRange: getUnicodeRange };

    // The `post` table stores additional PostScript information, such as glyph names.

    // Parse the PostScript `post` table
    function parsePostTable(data, start) {
        var post = {};
        var p = new parse.Parser(data, start);
        post.version = p.parseVersion();
        post.italicAngle = p.parseFixed();
        post.underlinePosition = p.parseShort();
        post.underlineThickness = p.parseShort();
        post.isFixedPitch = p.parseULong();
        post.minMemType42 = p.parseULong();
        post.maxMemType42 = p.parseULong();
        post.minMemType1 = p.parseULong();
        post.maxMemType1 = p.parseULong();
        switch (post.version) {
            case 1:
                post.names = standardNames.slice();
                break;
            case 2:
                post.numberOfGlyphs = p.parseUShort();
                post.glyphNameIndex = new Array(post.numberOfGlyphs);
                for (var i = 0; i < post.numberOfGlyphs; i++) {
                    post.glyphNameIndex[i] = p.parseUShort();
                }

                post.names = [];
                for (var i$1 = 0; i$1 < post.numberOfGlyphs; i$1++) {
                    if (post.glyphNameIndex[i$1] >= standardNames.length) {
                        var nameLength = p.parseChar();
                        post.names.push(p.parseString(nameLength));
                    }
                }

                break;
            case 2.5:
                post.numberOfGlyphs = p.parseUShort();
                post.offset = new Array(post.numberOfGlyphs);
                for (var i$2 = 0; i$2 < post.numberOfGlyphs; i$2++) {
                    post.offset[i$2] = p.parseChar();
                }

                break;
        }
        return post;
    }

    function makePostTable() {
        return new table.Table('post', [
            {name: 'version', type: 'FIXED', value: 0x00030000},
            {name: 'italicAngle', type: 'FIXED', value: 0},
            {name: 'underlinePosition', type: 'FWORD', value: 0},
            {name: 'underlineThickness', type: 'FWORD', value: 0},
            {name: 'isFixedPitch', type: 'ULONG', value: 0},
            {name: 'minMemType42', type: 'ULONG', value: 0},
            {name: 'maxMemType42', type: 'ULONG', value: 0},
            {name: 'minMemType1', type: 'ULONG', value: 0},
            {name: 'maxMemType1', type: 'ULONG', value: 0}
        ]);
    }

    var post = { parse: parsePostTable, make: makePostTable };

    // The `GSUB` table contains ligatures, among other things.

    var subtableParsers = new Array(9);         // subtableParsers[0] is unused

    // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#SS
    subtableParsers[1] = function parseLookup1() {
        var start = this.offset + this.relativeOffset;
        var substFormat = this.parseUShort();
        if (substFormat === 1) {
            return {
                substFormat: 1,
                coverage: this.parsePointer(Parser.coverage),
                deltaGlyphId: this.parseUShort()
            };
        } else if (substFormat === 2) {
            return {
                substFormat: 2,
                coverage: this.parsePointer(Parser.coverage),
                substitute: this.parseOffset16List()
            };
        }
        check.assert(false, '0x' + start.toString(16) + ': lookup type 1 format must be 1 or 2.');
    };

    // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#MS
    subtableParsers[2] = function parseLookup2() {
        var substFormat = this.parseUShort();
        check.argument(substFormat === 1, 'GSUB Multiple Substitution Subtable identifier-format must be 1');
        return {
            substFormat: substFormat,
            coverage: this.parsePointer(Parser.coverage),
            sequences: this.parseListOfLists()
        };
    };

    // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#AS
    subtableParsers[3] = function parseLookup3() {
        var substFormat = this.parseUShort();
        check.argument(substFormat === 1, 'GSUB Alternate Substitution Subtable identifier-format must be 1');
        return {
            substFormat: substFormat,
            coverage: this.parsePointer(Parser.coverage),
            alternateSets: this.parseListOfLists()
        };
    };

    // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#LS
    subtableParsers[4] = function parseLookup4() {
        var substFormat = this.parseUShort();
        check.argument(substFormat === 1, 'GSUB ligature table identifier-format must be 1');
        return {
            substFormat: substFormat,
            coverage: this.parsePointer(Parser.coverage),
            ligatureSets: this.parseListOfLists(function() {
                return {
                    ligGlyph: this.parseUShort(),
                    components: this.parseUShortList(this.parseUShort() - 1)
                };
            })
        };
    };

    var lookupRecordDesc = {
        sequenceIndex: Parser.uShort,
        lookupListIndex: Parser.uShort
    };

    // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CSF
    subtableParsers[5] = function parseLookup5() {
        var start = this.offset + this.relativeOffset;
        var substFormat = this.parseUShort();

        if (substFormat === 1) {
            return {
                substFormat: substFormat,
                coverage: this.parsePointer(Parser.coverage),
                ruleSets: this.parseListOfLists(function() {
                    var glyphCount = this.parseUShort();
                    var substCount = this.parseUShort();
                    return {
                        input: this.parseUShortList(glyphCount - 1),
                        lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
                    };
                })
            };
        } else if (substFormat === 2) {
            return {
                substFormat: substFormat,
                coverage: this.parsePointer(Parser.coverage),
                classDef: this.parsePointer(Parser.classDef),
                classSets: this.parseListOfLists(function() {
                    var glyphCount = this.parseUShort();
                    var substCount = this.parseUShort();
                    return {
                        classes: this.parseUShortList(glyphCount - 1),
                        lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
                    };
                })
            };
        } else if (substFormat === 3) {
            var glyphCount = this.parseUShort();
            var substCount = this.parseUShort();
            return {
                substFormat: substFormat,
                coverages: this.parseList(glyphCount, Parser.pointer(Parser.coverage)),
                lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
            };
        }
        check.assert(false, '0x' + start.toString(16) + ': lookup type 5 format must be 1, 2 or 3.');
    };

    // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CC
    subtableParsers[6] = function parseLookup6() {
        var start = this.offset + this.relativeOffset;
        var substFormat = this.parseUShort();
        if (substFormat === 1) {
            return {
                substFormat: 1,
                coverage: this.parsePointer(Parser.coverage),
                chainRuleSets: this.parseListOfLists(function() {
                    return {
                        backtrack: this.parseUShortList(),
                        input: this.parseUShortList(this.parseShort() - 1),
                        lookahead: this.parseUShortList(),
                        lookupRecords: this.parseRecordList(lookupRecordDesc)
                    };
                })
            };
        } else if (substFormat === 2) {
            return {
                substFormat: 2,
                coverage: this.parsePointer(Parser.coverage),
                backtrackClassDef: this.parsePointer(Parser.classDef),
                inputClassDef: this.parsePointer(Parser.classDef),
                lookaheadClassDef: this.parsePointer(Parser.classDef),
                chainClassSet: this.parseListOfLists(function() {
                    return {
                        backtrack: this.parseUShortList(),
                        input: this.parseUShortList(this.parseShort() - 1),
                        lookahead: this.parseUShortList(),
                        lookupRecords: this.parseRecordList(lookupRecordDesc)
                    };
                })
            };
        } else if (substFormat === 3) {
            return {
                substFormat: 3,
                backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),
                inputCoverage: this.parseList(Parser.pointer(Parser.coverage)),
                lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),
                lookupRecords: this.parseRecordList(lookupRecordDesc)
            };
        }
        check.assert(false, '0x' + start.toString(16) + ': lookup type 6 format must be 1, 2 or 3.');
    };

    // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#ES
    subtableParsers[7] = function parseLookup7() {
        // Extension Substitution subtable
        var substFormat = this.parseUShort();
        check.argument(substFormat === 1, 'GSUB Extension Substitution subtable identifier-format must be 1');
        var extensionLookupType = this.parseUShort();
        var extensionParser = new Parser(this.data, this.offset + this.parseULong());
        return {
            substFormat: 1,
            lookupType: extensionLookupType,
            extension: subtableParsers[extensionLookupType].call(extensionParser)
        };
    };

    // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#RCCS
    subtableParsers[8] = function parseLookup8() {
        var substFormat = this.parseUShort();
        check.argument(substFormat === 1, 'GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1');
        return {
            substFormat: substFormat,
            coverage: this.parsePointer(Parser.coverage),
            backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),
            lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),
            substitutes: this.parseUShortList()
        };
    };

    // https://www.microsoft.com/typography/OTSPEC/gsub.htm
    function parseGsubTable(data, start) {
        start = start || 0;
        var p = new Parser(data, start);
        var tableVersion = p.parseVersion(1);
        check.argument(tableVersion === 1 || tableVersion === 1.1, 'Unsupported GSUB table version.');
        if (tableVersion === 1) {
            return {
                version: tableVersion,
                scripts: p.parseScriptList(),
                features: p.parseFeatureList(),
                lookups: p.parseLookupList(subtableParsers)
            };
        } else {
            return {
                version: tableVersion,
                scripts: p.parseScriptList(),
                features: p.parseFeatureList(),
                lookups: p.parseLookupList(subtableParsers),
                variations: p.parseFeatureVariationsList()
            };
        }

    }

    // GSUB Writing //////////////////////////////////////////////
    var subtableMakers = new Array(9);

    subtableMakers[1] = function makeLookup1(subtable) {
        if (subtable.substFormat === 1) {
            return new table.Table('substitutionTable', [
                {name: 'substFormat', type: 'USHORT', value: 1},
                {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)},
                {name: 'deltaGlyphID', type: 'USHORT', value: subtable.deltaGlyphId}
            ]);
        } else {
            return new table.Table('substitutionTable', [
                {name: 'substFormat', type: 'USHORT', value: 2},
                {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}
            ].concat(table.ushortList('substitute', subtable.substitute)));
        }
    };

    subtableMakers[3] = function makeLookup3(subtable) {
        check.assert(subtable.substFormat === 1, 'Lookup type 3 substFormat must be 1.');
        return new table.Table('substitutionTable', [
            {name: 'substFormat', type: 'USHORT', value: 1},
            {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}
        ].concat(table.tableList('altSet', subtable.alternateSets, function(alternateSet) {
            return new table.Table('alternateSetTable', table.ushortList('alternate', alternateSet));
        })));
    };

    subtableMakers[4] = function makeLookup4(subtable) {
        check.assert(subtable.substFormat === 1, 'Lookup type 4 substFormat must be 1.');
        return new table.Table('substitutionTable', [
            {name: 'substFormat', type: 'USHORT', value: 1},
            {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}
        ].concat(table.tableList('ligSet', subtable.ligatureSets, function(ligatureSet) {
            return new table.Table('ligatureSetTable', table.tableList('ligature', ligatureSet, function(ligature) {
                return new table.Table('ligatureTable',
                    [{name: 'ligGlyph', type: 'USHORT', value: ligature.ligGlyph}]
                    .concat(table.ushortList('component', ligature.components, ligature.components.length + 1))
                );
            }));
        })));
    };

    function makeGsubTable(gsub) {
        return new table.Table('GSUB', [
            {name: 'version', type: 'ULONG', value: 0x10000},
            {name: 'scripts', type: 'TABLE', value: new table.ScriptList(gsub.scripts)},
            {name: 'features', type: 'TABLE', value: new table.FeatureList(gsub.features)},
            {name: 'lookups', type: 'TABLE', value: new table.LookupList(gsub.lookups, subtableMakers)}
        ]);
    }

    var gsub = { parse: parseGsubTable, make: makeGsubTable };

    // The `GPOS` table contains kerning pairs, among other things.

    // Parse the metadata `meta` table.
    // https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6meta.html
    function parseMetaTable(data, start) {
        var p = new parse.Parser(data, start);
        var tableVersion = p.parseULong();
        check.argument(tableVersion === 1, 'Unsupported META table version.');
        p.parseULong(); // flags - currently unused and set to 0
        p.parseULong(); // tableOffset
        var numDataMaps = p.parseULong();

        var tags = {};
        for (var i = 0; i < numDataMaps; i++) {
            var tag = p.parseTag();
            var dataOffset = p.parseULong();
            var dataLength = p.parseULong();
            var text = decode.UTF8(data, start + dataOffset, dataLength);

            tags[tag] = text;
        }
        return tags;
    }

    function makeMetaTable(tags) {
        var numTags = Object.keys(tags).length;
        var stringPool = '';
        var stringPoolOffset = 16 + numTags * 12;

        var result = new table.Table('meta', [
            {name: 'version', type: 'ULONG', value: 1},
            {name: 'flags', type: 'ULONG', value: 0},
            {name: 'offset', type: 'ULONG', value: stringPoolOffset},
            {name: 'numTags', type: 'ULONG', value: numTags}
        ]);

        for (var tag in tags) {
            var pos = stringPool.length;
            stringPool += tags[tag];

            result.fields.push({name: 'tag ' + tag, type: 'TAG', value: tag});
            result.fields.push({name: 'offset ' + tag, type: 'ULONG', value: stringPoolOffset + pos});
            result.fields.push({name: 'length ' + tag, type: 'ULONG', value: tags[tag].length});
        }

        result.fields.push({name: 'stringPool', type: 'CHARARRAY', value: stringPool});

        return result;
    }

    var meta = { parse: parseMetaTable, make: makeMetaTable };

    // The `sfnt` wrapper provides organization for the tables in the font.

    function log2$1(v) {
        return Math.log(v) / Math.log(2) | 0;
    }

    function computeCheckSum(bytes) {
        while (bytes.length % 4 !== 0) {
            bytes.push(0);
        }

        var sum = 0;
        for (var i = 0; i < bytes.length; i += 4) {
            sum += (bytes[i] << 24) +
                (bytes[i + 1] << 16) +
                (bytes[i + 2] << 8) +
                (bytes[i + 3]);
        }

        sum %= Math.pow(2, 32);
        return sum;
    }

    function makeTableRecord(tag, checkSum, offset, length) {
        return new table.Record('Table Record', [
            {name: 'tag', type: 'TAG', value: tag !== undefined ? tag : ''},
            {name: 'checkSum', type: 'ULONG', value: checkSum !== undefined ? checkSum : 0},
            {name: 'offset', type: 'ULONG', value: offset !== undefined ? offset : 0},
            {name: 'length', type: 'ULONG', value: length !== undefined ? length : 0}
        ]);
    }

    function makeSfntTable(tables) {
        var sfnt = new table.Table('sfnt', [
            {name: 'version', type: 'TAG', value: 'OTTO'},
            {name: 'numTables', type: 'USHORT', value: 0},
            {name: 'searchRange', type: 'USHORT', value: 0},
            {name: 'entrySelector', type: 'USHORT', value: 0},
            {name: 'rangeShift', type: 'USHORT', value: 0}
        ]);
        sfnt.tables = tables;
        sfnt.numTables = tables.length;
        var highestPowerOf2 = Math.pow(2, log2$1(sfnt.numTables));
        sfnt.searchRange = 16 * highestPowerOf2;
        sfnt.entrySelector = log2$1(highestPowerOf2);
        sfnt.rangeShift = sfnt.numTables * 16 - sfnt.searchRange;

        var recordFields = [];
        var tableFields = [];

        var offset = sfnt.sizeOf() + (makeTableRecord().sizeOf() * sfnt.numTables);
        while (offset % 4 !== 0) {
            offset += 1;
            tableFields.push({name: 'padding', type: 'BYTE', value: 0});
        }

        for (var i = 0; i < tables.length; i += 1) {
            var t = tables[i];
            check.argument(t.tableName.length === 4, 'Table name' + t.tableName + ' is invalid.');
            var tableLength = t.sizeOf();
            var tableRecord = makeTableRecord(t.tableName, computeCheckSum(t.encode()), offset, tableLength);
            recordFields.push({name: tableRecord.tag + ' Table Record', type: 'RECORD', value: tableRecord});
            tableFields.push({name: t.tableName + ' table', type: 'RECORD', value: t});
            offset += tableLength;
            check.argument(!isNaN(offset), 'Something went wrong calculating the offset.');
            while (offset % 4 !== 0) {
                offset += 1;
                tableFields.push({name: 'padding', type: 'BYTE', value: 0});
            }
        }

        // Table records need to be sorted alphabetically.
        recordFields.sort(function(r1, r2) {
            if (r1.value.tag > r2.value.tag) {
                return 1;
            } else {
                return -1;
            }
        });

        sfnt.fields = sfnt.fields.concat(recordFields);
        sfnt.fields = sfnt.fields.concat(tableFields);
        return sfnt;
    }

    // Get the metrics for a character. If the string has more than one character
    // this function returns metrics for the first available character.
    // You can provide optional fallback metrics if no characters are available.
    function metricsForChar(font, chars, notFoundMetrics) {
        for (var i = 0; i < chars.length; i += 1) {
            var glyphIndex = font.charToGlyphIndex(chars[i]);
            if (glyphIndex > 0) {
                var glyph = font.glyphs.get(glyphIndex);
                return glyph.getMetrics();
            }
        }

        return notFoundMetrics;
    }

    function average(vs) {
        var sum = 0;
        for (var i = 0; i < vs.length; i += 1) {
            sum += vs[i];
        }

        return sum / vs.length;
    }

    // Convert the font object to a SFNT data structure.
    // This structure contains all the necessary tables and metadata to create a binary OTF file.
    function fontToSfntTable(font) {
        var xMins = [];
        var yMins = [];
        var xMaxs = [];
        var yMaxs = [];
        var advanceWidths = [];
        var leftSideBearings = [];
        var rightSideBearings = [];
        var firstCharIndex;
        var lastCharIndex = 0;
        var ulUnicodeRange1 = 0;
        var ulUnicodeRange2 = 0;
        var ulUnicodeRange3 = 0;
        var ulUnicodeRange4 = 0;

        for (var i = 0; i < font.glyphs.length; i += 1) {
            var glyph = font.glyphs.get(i);
            var unicode = glyph.unicode | 0;

            if (isNaN(glyph.advanceWidth)) {
                throw new Error('Glyph ' + glyph.name + ' (' + i + '): advanceWidth is not a number.');
            }

            if (firstCharIndex > unicode || firstCharIndex === undefined) {
                // ignore .notdef char
                if (unicode > 0) {
                    firstCharIndex = unicode;
                }
            }

            if (lastCharIndex < unicode) {
                lastCharIndex = unicode;
            }

            var position = os2.getUnicodeRange(unicode);
            if (position < 32) {
                ulUnicodeRange1 |= 1 << position;
            } else if (position < 64) {
                ulUnicodeRange2 |= 1 << position - 32;
            } else if (position < 96) {
                ulUnicodeRange3 |= 1 << position - 64;
            } else if (position < 123) {
                ulUnicodeRange4 |= 1 << position - 96;
            } else {
                throw new Error('Unicode ranges bits > 123 are reserved for internal usage');
            }
            // Skip non-important characters.
            if (glyph.name === '.notdef') { continue; }
            var metrics = glyph.getMetrics();
            xMins.push(metrics.xMin);
            yMins.push(metrics.yMin);
            xMaxs.push(metrics.xMax);
            yMaxs.push(metrics.yMax);
            leftSideBearings.push(metrics.leftSideBearing);
            rightSideBearings.push(metrics.rightSideBearing);
            advanceWidths.push(glyph.advanceWidth);
        }

        var globals = {
            xMin: Math.min.apply(null, xMins),
            yMin: Math.min.apply(null, yMins),
            xMax: Math.max.apply(null, xMaxs),
            yMax: Math.max.apply(null, yMaxs),
            advanceWidthMax: Math.max.apply(null, advanceWidths),
            advanceWidthAvg: average(advanceWidths),
            minLeftSideBearing: Math.min.apply(null, leftSideBearings),
            maxLeftSideBearing: Math.max.apply(null, leftSideBearings),
            minRightSideBearing: Math.min.apply(null, rightSideBearings)
        };
        globals.ascender = font.ascender;
        globals.descender = font.descender;

        var headTable = head.make({
            flags: 3, // 00000011 (baseline for font at y=0; left sidebearing point at x=0)
            unitsPerEm: font.unitsPerEm,
            xMin: globals.xMin,
            yMin: globals.yMin,
            xMax: globals.xMax,
            yMax: globals.yMax,
            lowestRecPPEM: 3,
            createdTimestamp: font.createdTimestamp
        });

        var hheaTable = hhea.make({
            ascender: globals.ascender,
            descender: globals.descender,
            advanceWidthMax: globals.advanceWidthMax,
            minLeftSideBearing: globals.minLeftSideBearing,
            minRightSideBearing: globals.minRightSideBearing,
            xMaxExtent: globals.maxLeftSideBearing + (globals.xMax - globals.xMin),
            numberOfHMetrics: font.glyphs.length
        });

        var maxpTable = maxp.make(font.glyphs.length);

        var os2Table = os2.make(Object.assign({
            xAvgCharWidth: Math.round(globals.advanceWidthAvg),
            usFirstCharIndex: firstCharIndex,
            usLastCharIndex: lastCharIndex,
            ulUnicodeRange1: ulUnicodeRange1,
            ulUnicodeRange2: ulUnicodeRange2,
            ulUnicodeRange3: ulUnicodeRange3,
            ulUnicodeRange4: ulUnicodeRange4,
            // See http://typophile.com/node/13081 for more info on vertical metrics.
            // We get metrics for typical characters (such as "x" for xHeight).
            // We provide some fallback characters if characters are unavailable: their
            // ordering was chosen experimentally.
            sTypoAscender: globals.ascender,
            sTypoDescender: globals.descender,
            sTypoLineGap: 0,
            usWinAscent: globals.yMax,
            usWinDescent: Math.abs(globals.yMin),
            ulCodePageRange1: 1, // FIXME: hard-code Latin 1 support for now
            sxHeight: metricsForChar(font, 'xyvw', {yMax: Math.round(globals.ascender / 2)}).yMax,
            sCapHeight: metricsForChar(font, 'HIKLEFJMNTZBDPRAGOQSUVWXY', globals).yMax,
            usDefaultChar: font.hasChar(' ') ? 32 : 0, // Use space as the default character, if available.
            usBreakChar: font.hasChar(' ') ? 32 : 0, // Use space as the break character, if available.
        }, font.tables.os2));

        var hmtxTable = hmtx.make(font.glyphs);
        var cmapTable = cmap.make(font.glyphs);

        var englishFamilyName = font.getEnglishName('fontFamily');
        var englishStyleName = font.getEnglishName('fontSubfamily');
        var englishFullName = englishFamilyName + ' ' + englishStyleName;
        var postScriptName = font.getEnglishName('postScriptName');
        if (!postScriptName) {
            postScriptName = englishFamilyName.replace(/\s/g, '') + '-' + englishStyleName;
        }

        var names = {};
        for (var n in font.names) {
            names[n] = font.names[n];
        }

        if (!names.uniqueID) {
            names.uniqueID = {en: font.getEnglishName('manufacturer') + ':' + englishFullName};
        }

        if (!names.postScriptName) {
            names.postScriptName = {en: postScriptName};
        }

        if (!names.preferredFamily) {
            names.preferredFamily = font.names.fontFamily;
        }

        if (!names.preferredSubfamily) {
            names.preferredSubfamily = font.names.fontSubfamily;
        }

        var languageTags = [];
        var nameTable = _name.make(names, languageTags);
        var ltagTable = (languageTags.length > 0 ? ltag.make(languageTags) : undefined);

        var postTable = post.make();
        var cffTable = cff.make(font.glyphs, {
            version: font.getEnglishName('version'),
            fullName: englishFullName,
            familyName: englishFamilyName,
            weightName: englishStyleName,
            postScriptName: postScriptName,
            unitsPerEm: font.unitsPerEm,
            fontBBox: [0, globals.yMin, globals.ascender, globals.advanceWidthMax]
        });

        var metaTable = (font.metas && Object.keys(font.metas).length > 0) ? meta.make(font.metas) : undefined;

        // The order does not matter because makeSfntTable() will sort them.
        var tables = [headTable, hheaTable, maxpTable, os2Table, nameTable, cmapTable, postTable, cffTable, hmtxTable];
        if (ltagTable) {
            tables.push(ltagTable);
        }
        // Optional tables
        if (font.tables.gsub) {
            tables.push(gsub.make(font.tables.gsub));
        }
        if (metaTable) {
            tables.push(metaTable);
        }

        var sfntTable = makeSfntTable(tables);

        // Compute the font's checkSum and store it in head.checkSumAdjustment.
        var bytes = sfntTable.encode();
        var checkSum = computeCheckSum(bytes);
        var tableFields = sfntTable.fields;
        var checkSumAdjusted = false;
        for (var i$1 = 0; i$1 < tableFields.length; i$1 += 1) {
            if (tableFields[i$1].name === 'head table') {
                tableFields[i$1].value.checkSumAdjustment = 0xB1B0AFBA - checkSum;
                checkSumAdjusted = true;
                break;
            }
        }

        if (!checkSumAdjusted) {
            throw new Error('Could not find head table with checkSum to adjust.');
        }

        return sfntTable;
    }

    var sfnt = { make: makeSfntTable, fontToTable: fontToSfntTable, computeCheckSum: computeCheckSum };

    // The Layout object is the prototype of Substitution objects, and provides

    function searchTag(arr, tag) {
        /* jshint bitwise: false */
        var imin = 0;
        var imax = arr.length - 1;
        while (imin <= imax) {
            var imid = (imin + imax) >>> 1;
            var val = arr[imid].tag;
            if (val === tag) {
                return imid;
            } else if (val < tag) {
                imin = imid + 1;
            } else { imax = imid - 1; }
        }
        // Not found: return -1-insertion point
        return -imin - 1;
    }

    function binSearch(arr, value) {
        /* jshint bitwise: false */
        var imin = 0;
        var imax = arr.length - 1;
        while (imin <= imax) {
            var imid = (imin + imax) >>> 1;
            var val = arr[imid];
            if (val === value) {
                return imid;
            } else if (val < value) {
                imin = imid + 1;
            } else { imax = imid - 1; }
        }
        // Not found: return -1-insertion point
        return -imin - 1;
    }

    // binary search in a list of ranges (coverage, class definition)
    function searchRange(ranges, value) {
        // jshint bitwise: false
        var range;
        var imin = 0;
        var imax = ranges.length - 1;
        while (imin <= imax) {
            var imid = (imin + imax) >>> 1;
            range = ranges[imid];
            var start = range.start;
            if (start === value) {
                return range;
            } else if (start < value) {
                imin = imid + 1;
            } else { imax = imid - 1; }
        }
        if (imin > 0) {
            range = ranges[imin - 1];
            if (value > range.end) { return 0; }
            return range;
        }
    }

    /**
     * @exports opentype.Layout
     * @class
     */
    function Layout(font, tableName) {
        this.font = font;
        this.tableName = tableName;
    }

    Layout.prototype = {

        /**
         * Binary search an object by "tag" property
         * @instance
         * @function searchTag
         * @memberof opentype.Layout
         * @param  {Array} arr
         * @param  {string} tag
         * @return {number}
         */
        searchTag: searchTag,

        /**
         * Binary search in a list of numbers
         * @instance
         * @function binSearch
         * @memberof opentype.Layout
         * @param  {Array} arr
         * @param  {number} value
         * @return {number}
         */
        binSearch: binSearch,

        /**
         * Get or create the Layout table (GSUB, GPOS etc).
         * @param  {boolean} create - Whether to create a new one.
         * @return {Object} The GSUB or GPOS table.
         */
        getTable: function(create) {
            var layout = this.font.tables[this.tableName];
            if (!layout && create) {
                layout = this.font.tables[this.tableName] = this.createDefaultTable();
            }
            return layout;
        },

        /**
         * Returns all scripts in the substitution table.
         * @instance
         * @return {Array}
         */
        getScriptNames: function() {
            var layout = this.getTable();
            if (!layout) { return []; }
            return layout.scripts.map(function(script) {
                return script.tag;
            });
        },

        /**
         * Returns the best bet for a script name.
         * Returns 'DFLT' if it exists.
         * If not, returns 'latn' if it exists.
         * If neither exist, returns undefined.
         */
        getDefaultScriptName: function() {
            var layout = this.getTable();
            if (!layout) { return; }
            var hasLatn = false;
            for (var i = 0; i < layout.scripts.length; i++) {
                var name = layout.scripts[i].tag;
                if (name === 'DFLT') { return name; }
                if (name === 'latn') { hasLatn = true; }
            }
            if (hasLatn) { return 'latn'; }
        },

        /**
         * Returns all LangSysRecords in the given script.
         * @instance
         * @param {string} [script='DFLT']
         * @param {boolean} create - forces the creation of this script table if it doesn't exist.
         * @return {Object} An object with tag and script properties.
         */
        getScriptTable: function(script, create) {
            var layout = this.getTable(create);
            if (layout) {
                script = script || 'DFLT';
                var scripts = layout.scripts;
                var pos = searchTag(layout.scripts, script);
                if (pos >= 0) {
                    return scripts[pos].script;
                } else if (create) {
                    var scr = {
                        tag: script,
                        script: {
                            defaultLangSys: {reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: []},
                            langSysRecords: []
                        }
                    };
                    scripts.splice(-1 - pos, 0, scr);
                    return scr.script;
                }
            }
        },

        /**
         * Returns a language system table
         * @instance
         * @param {string} [script='DFLT']
         * @param {string} [language='dlft']
         * @param {boolean} create - forces the creation of this langSysTable if it doesn't exist.
         * @return {Object}
         */
        getLangSysTable: function(script, language, create) {
            var scriptTable = this.getScriptTable(script, create);
            if (scriptTable) {
                if (!language || language === 'dflt' || language === 'DFLT') {
                    return scriptTable.defaultLangSys;
                }
                var pos = searchTag(scriptTable.langSysRecords, language);
                if (pos >= 0) {
                    return scriptTable.langSysRecords[pos].langSys;
                } else if (create) {
                    var langSysRecord = {
                        tag: language,
                        langSys: {reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: []}
                    };
                    scriptTable.langSysRecords.splice(-1 - pos, 0, langSysRecord);
                    return langSysRecord.langSys;
                }
            }
        },

        /**
         * Get a specific feature table.
         * @instance
         * @param {string} [script='DFLT']
         * @param {string} [language='dlft']
         * @param {string} feature - One of the codes listed at https://www.microsoft.com/typography/OTSPEC/featurelist.htm
         * @param {boolean} create - forces the creation of the feature table if it doesn't exist.
         * @return {Object}
         */
        getFeatureTable: function(script, language, feature, create) {
            var langSysTable = this.getLangSysTable(script, language, create);
            if (langSysTable) {
                var featureRecord;
                var featIndexes = langSysTable.featureIndexes;
                var allFeatures = this.font.tables[this.tableName].features;
                // The FeatureIndex array of indices is in arbitrary order,
                // even if allFeatures is sorted alphabetically by feature tag.
                for (var i = 0; i < featIndexes.length; i++) {
                    featureRecord = allFeatures[featIndexes[i]];
                    if (featureRecord.tag === feature) {
                        return featureRecord.feature;
                    }
                }
                if (create) {
                    var index = allFeatures.length;
                    // Automatic ordering of features would require to shift feature indexes in the script list.
                    check.assert(index === 0 || feature >= allFeatures[index - 1].tag, 'Features must be added in alphabetical order.');
                    featureRecord = {
                        tag: feature,
                        feature: { params: 0, lookupListIndexes: [] }
                    };
                    allFeatures.push(featureRecord);
                    featIndexes.push(index);
                    return featureRecord.feature;
                }
            }
        },

        /**
         * Get the lookup tables of a given type for a script/language/feature.
         * @instance
         * @param {string} [script='DFLT']
         * @param {string} [language='dlft']
         * @param {string} feature - 4-letter feature code
         * @param {number} lookupType - 1 to 9
         * @param {boolean} create - forces the creation of the lookup table if it doesn't exist, with no subtables.
         * @return {Object[]}
         */
        getLookupTables: function(script, language, feature, lookupType, create) {
            var featureTable = this.getFeatureTable(script, language, feature, create);
            var tables = [];
            if (featureTable) {
                var lookupTable;
                var lookupListIndexes = featureTable.lookupListIndexes;
                var allLookups = this.font.tables[this.tableName].lookups;
                // lookupListIndexes are in no particular order, so use naive search.
                for (var i = 0; i < lookupListIndexes.length; i++) {
                    lookupTable = allLookups[lookupListIndexes[i]];
                    if (lookupTable.lookupType === lookupType) {
                        tables.push(lookupTable);
                    }
                }
                if (tables.length === 0 && create) {
                    lookupTable = {
                        lookupType: lookupType,
                        lookupFlag: 0,
                        subtables: [],
                        markFilteringSet: undefined
                    };
                    var index = allLookups.length;
                    allLookups.push(lookupTable);
                    lookupListIndexes.push(index);
                    return [lookupTable];
                }
            }
            return tables;
        },

        /**
         * Find a glyph in a class definition table
         * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#class-definition-table
         * @param {object} classDefTable - an OpenType Layout class definition table
         * @param {number} glyphIndex - the index of the glyph to find
         * @returns {number} -1 if not found
         */
        getGlyphClass: function(classDefTable, glyphIndex) {
            switch (classDefTable.format) {
                case 1:
                    if (classDefTable.startGlyph <= glyphIndex && glyphIndex < classDefTable.startGlyph + classDefTable.classes.length) {
                        return classDefTable.classes[glyphIndex - classDefTable.startGlyph];
                    }
                    return 0;
                case 2:
                    var range = searchRange(classDefTable.ranges, glyphIndex);
                    return range ? range.classId : 0;
            }
        },

        /**
         * Find a glyph in a coverage table
         * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#coverage-table
         * @param {object} coverageTable - an OpenType Layout coverage table
         * @param {number} glyphIndex - the index of the glyph to find
         * @returns {number} -1 if not found
         */
        getCoverageIndex: function(coverageTable, glyphIndex) {
            switch (coverageTable.format) {
                case 1:
                    var index = binSearch(coverageTable.glyphs, glyphIndex);
                    return index >= 0 ? index : -1;
                case 2:
                    var range = searchRange(coverageTable.ranges, glyphIndex);
                    return range ? range.index + glyphIndex - range.start : -1;
            }
        },

        /**
         * Returns the list of glyph indexes of a coverage table.
         * Format 1: the list is stored raw
         * Format 2: compact list as range records.
         * @instance
         * @param  {Object} coverageTable
         * @return {Array}
         */
        expandCoverage: function(coverageTable) {
            if (coverageTable.format === 1) {
                return coverageTable.glyphs;
            } else {
                var glyphs = [];
                var ranges = coverageTable.ranges;
                for (var i = 0; i < ranges.length; i++) {
                    var range = ranges[i];
                    var start = range.start;
                    var end = range.end;
                    for (var j = start; j <= end; j++) {
                        glyphs.push(j);
                    }
                }
                return glyphs;
            }
        }

    };

    // The Position object provides utility methods to manipulate

    /**
     * @exports opentype.Position
     * @class
     * @extends opentype.Layout
     * @param {opentype.Font}
     * @constructor
     */
    function Position(font) {
        Layout.call(this, font, 'gpos');
    }

    Position.prototype = Layout.prototype;

    /**
     * Init some data for faster and easier access later.
     */
    Position.prototype.init = function() {
        var script = this.getDefaultScriptName();
        this.defaultKerningTables = this.getKerningTables(script);
    };

    /**
     * Find a glyph pair in a list of lookup tables of type 2 and retrieve the xAdvance kerning value.
     *
     * @param {integer} leftIndex - left glyph index
     * @param {integer} rightIndex - right glyph index
     * @returns {integer}
     */
    Position.prototype.getKerningValue = function(kerningLookups, leftIndex, rightIndex) {
        for (var i = 0; i < kerningLookups.length; i++) {
            var subtables = kerningLookups[i].subtables;
            for (var j = 0; j < subtables.length; j++) {
                var subtable = subtables[j];
                var covIndex = this.getCoverageIndex(subtable.coverage, leftIndex);
                if (covIndex < 0) { continue; }
                switch (subtable.posFormat) {
                    case 1:
                        // Search Pair Adjustment Positioning Format 1
                        var pairSet = subtable.pairSets[covIndex];
                        for (var k = 0; k < pairSet.length; k++) {
                            var pair = pairSet[k];
                            if (pair.secondGlyph === rightIndex) {
                                return pair.value1 && pair.value1.xAdvance || 0;
                            }
                        }
                        break;      // left glyph found, not right glyph - try next subtable
                    case 2:
                        // Search Pair Adjustment Positioning Format 2
                        var class1 = this.getGlyphClass(subtable.classDef1, leftIndex);
                        var class2 = this.getGlyphClass(subtable.classDef2, rightIndex);
                        var pair$1 = subtable.classRecords[class1][class2];
                        return pair$1.value1 && pair$1.value1.xAdvance || 0;
                }
            }
        }
        return 0;
    };

    /**
     * List all kerning lookup tables.
     *
     * @param {string} [script='DFLT'] - use font.position.getDefaultScriptName() for a better default value
     * @param {string} [language='dflt']
     * @return {object[]} The list of kerning lookup tables (may be empty), or undefined if there is no GPOS table (and we should use the kern table)
     */
    Position.prototype.getKerningTables = function(script, language) {
        if (this.font.tables.gpos) {
            return this.getLookupTables(script, language, 'kern', 2);
        }
    };

    // The Substitution object provides utility methods to manipulate

    /**
     * @exports opentype.Substitution
     * @class
     * @extends opentype.Layout
     * @param {opentype.Font}
     * @constructor
     */
    function Substitution(font) {
        Layout.call(this, font, 'gsub');
    }

    // Check if 2 arrays of primitives are equal.
    function arraysEqual(ar1, ar2) {
        var n = ar1.length;
        if (n !== ar2.length) { return false; }
        for (var i = 0; i < n; i++) {
            if (ar1[i] !== ar2[i]) { return false; }
        }
        return true;
    }

    // Find the first subtable of a lookup table in a particular format.
    function getSubstFormat(lookupTable, format, defaultSubtable) {
        var subtables = lookupTable.subtables;
        for (var i = 0; i < subtables.length; i++) {
            var subtable = subtables[i];
            if (subtable.substFormat === format) {
                return subtable;
            }
        }
        if (defaultSubtable) {
            subtables.push(defaultSubtable);
            return defaultSubtable;
        }
        return undefined;
    }

    Substitution.prototype = Layout.prototype;

    /**
     * Create a default GSUB table.
     * @return {Object} gsub - The GSUB table.
     */
    Substitution.prototype.createDefaultTable = function() {
        // Generate a default empty GSUB table with just a DFLT script and dflt lang sys.
        return {
            version: 1,
            scripts: [{
                tag: 'DFLT',
                script: {
                    defaultLangSys: { reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: [] },
                    langSysRecords: []
                }
            }],
            features: [],
            lookups: []
        };
    };

    /**
     * List all single substitutions (lookup type 1) for a given script, language, and feature.
     * @param {string} [script='DFLT']
     * @param {string} [language='dflt']
     * @param {string} feature - 4-character feature name ('aalt', 'salt', 'ss01'...)
     * @return {Array} substitutions - The list of substitutions.
     */
    Substitution.prototype.getSingle = function(feature, script, language) {
        var substitutions = [];
        var lookupTables = this.getLookupTables(script, language, feature, 1);
        for (var idx = 0; idx < lookupTables.length; idx++) {
            var subtables = lookupTables[idx].subtables;
            for (var i = 0; i < subtables.length; i++) {
                var subtable = subtables[i];
                var glyphs = this.expandCoverage(subtable.coverage);
                var j = (void 0);
                if (subtable.substFormat === 1) {
                    var delta = subtable.deltaGlyphId;
                    for (j = 0; j < glyphs.length; j++) {
                        var glyph = glyphs[j];
                        substitutions.push({ sub: glyph, by: glyph + delta });
                    }
                } else {
                    var substitute = subtable.substitute;
                    for (j = 0; j < glyphs.length; j++) {
                        substitutions.push({ sub: glyphs[j], by: substitute[j] });
                    }
                }
            }
        }
        return substitutions;
    };

    /**
     * List all alternates (lookup type 3) for a given script, language, and feature.
     * @param {string} [script='DFLT']
     * @param {string} [language='dflt']
     * @param {string} feature - 4-character feature name ('aalt', 'salt'...)
     * @return {Array} alternates - The list of alternates
     */
    Substitution.prototype.getAlternates = function(feature, script, language) {
        var alternates = [];
        var lookupTables = this.getLookupTables(script, language, feature, 3);
        for (var idx = 0; idx < lookupTables.length; idx++) {
            var subtables = lookupTables[idx].subtables;
            for (var i = 0; i < subtables.length; i++) {
                var subtable = subtables[i];
                var glyphs = this.expandCoverage(subtable.coverage);
                var alternateSets = subtable.alternateSets;
                for (var j = 0; j < glyphs.length; j++) {
                    alternates.push({ sub: glyphs[j], by: alternateSets[j] });
                }
            }
        }
        return alternates;
    };

    /**
     * List all ligatures (lookup type 4) for a given script, language, and feature.
     * The result is an array of ligature objects like { sub: [ids], by: id }
     * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
     * @param {string} [script='DFLT']
     * @param {string} [language='dflt']
     * @return {Array} ligatures - The list of ligatures.
     */
    Substitution.prototype.getLigatures = function(feature, script, language) {
        var ligatures = [];
        var lookupTables = this.getLookupTables(script, language, feature, 4);
        for (var idx = 0; idx < lookupTables.length; idx++) {
            var subtables = lookupTables[idx].subtables;
            for (var i = 0; i < subtables.length; i++) {
                var subtable = subtables[i];
                var glyphs = this.expandCoverage(subtable.coverage);
                var ligatureSets = subtable.ligatureSets;
                for (var j = 0; j < glyphs.length; j++) {
                    var startGlyph = glyphs[j];
                    var ligSet = ligatureSets[j];
                    for (var k = 0; k < ligSet.length; k++) {
                        var lig = ligSet[k];
                        ligatures.push({
                            sub: [startGlyph].concat(lig.components),
                            by: lig.ligGlyph
                        });
                    }
                }
            }
        }
        return ligatures;
    };

    /**
     * Add or modify a single substitution (lookup type 1)
     * Format 2, more flexible, is always used.
     * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
     * @param {Object} substitution - { sub: id, delta: number } for format 1 or { sub: id, by: id } for format 2.
     * @param {string} [script='DFLT']
     * @param {string} [language='dflt']
     */
    Substitution.prototype.addSingle = function(feature, substitution, script, language) {
        var lookupTable = this.getLookupTables(script, language, feature, 1, true)[0];
        var subtable = getSubstFormat(lookupTable, 2, {                // lookup type 1 subtable, format 2, coverage format 1
            substFormat: 2,
            coverage: {format: 1, glyphs: []},
            substitute: []
        });
        check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);
        var coverageGlyph = substitution.sub;
        var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
        if (pos < 0) {
            pos = -1 - pos;
            subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
            subtable.substitute.splice(pos, 0, 0);
        }
        subtable.substitute[pos] = substitution.by;
    };

    /**
     * Add or modify an alternate substitution (lookup type 1)
     * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
     * @param {Object} substitution - { sub: id, by: [ids] }
     * @param {string} [script='DFLT']
     * @param {string} [language='dflt']
     */
    Substitution.prototype.addAlternate = function(feature, substitution, script, language) {
        var lookupTable = this.getLookupTables(script, language, feature, 3, true)[0];
        var subtable = getSubstFormat(lookupTable, 1, {                // lookup type 3 subtable, format 1, coverage format 1
            substFormat: 1,
            coverage: {format: 1, glyphs: []},
            alternateSets: []
        });
        check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);
        var coverageGlyph = substitution.sub;
        var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
        if (pos < 0) {
            pos = -1 - pos;
            subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
            subtable.alternateSets.splice(pos, 0, 0);
        }
        subtable.alternateSets[pos] = substitution.by;
    };

    /**
     * Add a ligature (lookup type 4)
     * Ligatures with more components must be stored ahead of those with fewer components in order to be found
     * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
     * @param {Object} ligature - { sub: [ids], by: id }
     * @param {string} [script='DFLT']
     * @param {string} [language='dflt']
     */
    Substitution.prototype.addLigature = function(feature, ligature, script, language) {
        var lookupTable = this.getLookupTables(script, language, feature, 4, true)[0];
        var subtable = lookupTable.subtables[0];
        if (!subtable) {
            subtable = {                // lookup type 4 subtable, format 1, coverage format 1
                substFormat: 1,
                coverage: { format: 1, glyphs: [] },
                ligatureSets: []
            };
            lookupTable.subtables[0] = subtable;
        }
        check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);
        var coverageGlyph = ligature.sub[0];
        var ligComponents = ligature.sub.slice(1);
        var ligatureTable = {
            ligGlyph: ligature.by,
            components: ligComponents
        };
        var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
        if (pos >= 0) {
            // ligatureSet already exists
            var ligatureSet = subtable.ligatureSets[pos];
            for (var i = 0; i < ligatureSet.length; i++) {
                // If ligature already exists, return.
                if (arraysEqual(ligatureSet[i].components, ligComponents)) {
                    return;
                }
            }
            // ligature does not exist: add it.
            ligatureSet.push(ligatureTable);
        } else {
            // Create a new ligatureSet and add coverage for the first glyph.
            pos = -1 - pos;
            subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
            subtable.ligatureSets.splice(pos, 0, [ligatureTable]);
        }
    };

    /**
     * List all feature data for a given script and language.
     * @param {string} feature - 4-letter feature name
     * @param {string} [script='DFLT']
     * @param {string} [language='dflt']
     * @return {Array} substitutions - The list of substitutions.
     */
    Substitution.prototype.getFeature = function(feature, script, language) {
        if (/ss\d\d/.test(feature)) {
            // ss01 - ss20
            return this.getSingle(feature, script, language);
        }
        switch (feature) {
            case 'aalt':
            case 'salt':
                return this.getSingle(feature, script, language)
                        .concat(this.getAlternates(feature, script, language));
            case 'dlig':
            case 'liga':
            case 'rlig': return this.getLigatures(feature, script, language);
        }
        return undefined;
    };

    /**
     * Add a substitution to a feature for a given script and language.
     * @param {string} feature - 4-letter feature name
     * @param {Object} sub - the substitution to add (an object like { sub: id or [ids], by: id or [ids] })
     * @param {string} [script='DFLT']
     * @param {string} [language='dflt']
     */
    Substitution.prototype.add = function(feature, sub, script, language) {
        if (/ss\d\d/.test(feature)) {
            // ss01 - ss20
            return this.addSingle(feature, sub, script, language);
        }
        switch (feature) {
            case 'aalt':
            case 'salt':
                if (typeof sub.by === 'number') {
                    return this.addSingle(feature, sub, script, language);
                }
                return this.addAlternate(feature, sub, script, language);
            case 'dlig':
            case 'liga':
            case 'rlig':
                return this.addLigature(feature, sub, script, language);
        }
        return undefined;
    };

    function isBrowser() {
        return typeof window !== 'undefined';
    }

    function nodeBufferToArrayBuffer(buffer) {
        var ab = new ArrayBuffer(buffer.length);
        var view = new Uint8Array(ab);
        for (var i = 0; i < buffer.length; ++i) {
            view[i] = buffer[i];
        }

        return ab;
    }

    function arrayBufferToNodeBuffer(ab) {
        var buffer = new Buffer(ab.byteLength);
        var view = new Uint8Array(ab);
        for (var i = 0; i < buffer.length; ++i) {
            buffer[i] = view[i];
        }

        return buffer;
    }

    function checkArgument(expression, message) {
        if (!expression) {
            throw message;
        }
    }

    // The `glyf` table describes the glyphs in TrueType outline format.

    // Parse the coordinate data for a glyph.
    function parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {
        var v;
        if ((flag & shortVectorBitMask) > 0) {
            // The coordinate is 1 byte long.
            v = p.parseByte();
            // The `same` bit is re-used for short values to signify the sign of the value.
            if ((flag & sameBitMask) === 0) {
                v = -v;
            }

            v = previousValue + v;
        } else {
            //  The coordinate is 2 bytes long.
            // If the `same` bit is set, the coordinate is the same as the previous coordinate.
            if ((flag & sameBitMask) > 0) {
                v = previousValue;
            } else {
                // Parse the coordinate as a signed 16-bit delta value.
                v = previousValue + p.parseShort();
            }
        }

        return v;
    }

    // Parse a TrueType glyph.
    function parseGlyph(glyph, data, start) {
        var p = new parse.Parser(data, start);
        glyph.numberOfContours = p.parseShort();
        glyph._xMin = p.parseShort();
        glyph._yMin = p.parseShort();
        glyph._xMax = p.parseShort();
        glyph._yMax = p.parseShort();
        var flags;
        var flag;

        if (glyph.numberOfContours > 0) {
            // This glyph is not a composite.
            var endPointIndices = glyph.endPointIndices = [];
            for (var i = 0; i < glyph.numberOfContours; i += 1) {
                endPointIndices.push(p.parseUShort());
            }

            glyph.instructionLength = p.parseUShort();
            glyph.instructions = [];
            for (var i$1 = 0; i$1 < glyph.instructionLength; i$1 += 1) {
                glyph.instructions.push(p.parseByte());
            }

            var numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;
            flags = [];
            for (var i$2 = 0; i$2 < numberOfCoordinates; i$2 += 1) {
                flag = p.parseByte();
                flags.push(flag);
                // If bit 3 is set, we repeat this flag n times, where n is the next byte.
                if ((flag & 8) > 0) {
                    var repeatCount = p.parseByte();
                    for (var j = 0; j < repeatCount; j += 1) {
                        flags.push(flag);
                        i$2 += 1;
                    }
                }
            }

            check.argument(flags.length === numberOfCoordinates, 'Bad flags.');

            if (endPointIndices.length > 0) {
                var points = [];
                var point;
                // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.
                if (numberOfCoordinates > 0) {
                    for (var i$3 = 0; i$3 < numberOfCoordinates; i$3 += 1) {
                        flag = flags[i$3];
                        point = {};
                        point.onCurve = !!(flag & 1);
                        point.lastPointOfContour = endPointIndices.indexOf(i$3) >= 0;
                        points.push(point);
                    }

                    var px = 0;
                    for (var i$4 = 0; i$4 < numberOfCoordinates; i$4 += 1) {
                        flag = flags[i$4];
                        point = points[i$4];
                        point.x = parseGlyphCoordinate(p, flag, px, 2, 16);
                        px = point.x;
                    }

                    var py = 0;
                    for (var i$5 = 0; i$5 < numberOfCoordinates; i$5 += 1) {
                        flag = flags[i$5];
                        point = points[i$5];
                        point.y = parseGlyphCoordinate(p, flag, py, 4, 32);
                        py = point.y;
                    }
                }

                glyph.points = points;
            } else {
                glyph.points = [];
            }
        } else if (glyph.numberOfContours === 0) {
            glyph.points = [];
        } else {
            glyph.isComposite = true;
            glyph.points = [];
            glyph.components = [];
            var moreComponents = true;
            while (moreComponents) {
                flags = p.parseUShort();
                var component = {
                    glyphIndex: p.parseUShort(),
                    xScale: 1,
                    scale01: 0,
                    scale10: 0,
                    yScale: 1,
                    dx: 0,
                    dy: 0
                };
                if ((flags & 1) > 0) {
                    // The arguments are words
                    if ((flags & 2) > 0) {
                        // values are offset
                        component.dx = p.parseShort();
                        component.dy = p.parseShort();
                    } else {
                        // values are matched points
                        component.matchedPoints = [p.parseUShort(), p.parseUShort()];
                    }

                } else {
                    // The arguments are bytes
                    if ((flags & 2) > 0) {
                        // values are offset
                        component.dx = p.parseChar();
                        component.dy = p.parseChar();
                    } else {
                        // values are matched points
                        component.matchedPoints = [p.parseByte(), p.parseByte()];
                    }
                }

                if ((flags & 8) > 0) {
                    // We have a scale
                    component.xScale = component.yScale = p.parseF2Dot14();
                } else if ((flags & 64) > 0) {
                    // We have an X / Y scale
                    component.xScale = p.parseF2Dot14();
                    component.yScale = p.parseF2Dot14();
                } else if ((flags & 128) > 0) {
                    // We have a 2x2 transformation
                    component.xScale = p.parseF2Dot14();
                    component.scale01 = p.parseF2Dot14();
                    component.scale10 = p.parseF2Dot14();
                    component.yScale = p.parseF2Dot14();
                }

                glyph.components.push(component);
                moreComponents = !!(flags & 32);
            }
            if (flags & 0x100) {
                // We have instructions
                glyph.instructionLength = p.parseUShort();
                glyph.instructions = [];
                for (var i$6 = 0; i$6 < glyph.instructionLength; i$6 += 1) {
                    glyph.instructions.push(p.parseByte());
                }
            }
        }
    }

    // Transform an array of points and return a new array.
    function transformPoints(points, transform) {
        var newPoints = [];
        for (var i = 0; i < points.length; i += 1) {
            var pt = points[i];
            var newPt = {
                x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,
                y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,
                onCurve: pt.onCurve,
                lastPointOfContour: pt.lastPointOfContour
            };
            newPoints.push(newPt);
        }

        return newPoints;
    }

    function getContours(points) {
        var contours = [];
        var currentContour = [];
        for (var i = 0; i < points.length; i += 1) {
            var pt = points[i];
            currentContour.push(pt);
            if (pt.lastPointOfContour) {
                contours.push(currentContour);
                currentContour = [];
            }
        }

        check.argument(currentContour.length === 0, 'There are still points left in the current contour.');
        return contours;
    }

    // Convert the TrueType glyph outline to a Path.
    function getPath(points) {
        var p = new Path();
        if (!points) {
            return p;
        }

        var contours = getContours(points);

        for (var contourIndex = 0; contourIndex < contours.length; ++contourIndex) {
            var contour = contours[contourIndex];

            var prev = null;
            var curr = contour[contour.length - 1];
            var next = contour[0];

            if (curr.onCurve) {
                p.moveTo(curr.x, curr.y);
            } else {
                if (next.onCurve) {
                    p.moveTo(next.x, next.y);
                } else {
                    // If both first and last points are off-curve, start at their middle.
                    var start = {x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5};
                    p.moveTo(start.x, start.y);
                }
            }

            for (var i = 0; i < contour.length; ++i) {
                prev = curr;
                curr = next;
                next = contour[(i + 1) % contour.length];

                if (curr.onCurve) {
                    // This is a straight line.
                    p.lineTo(curr.x, curr.y);
                } else {
                    var prev2 = prev;
                    var next2 = next;

                    if (!prev.onCurve) {
                        prev2 = { x: (curr.x + prev.x) * 0.5, y: (curr.y + prev.y) * 0.5 };
                    }

                    if (!next.onCurve) {
                        next2 = { x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5 };
                    }

                    p.quadraticCurveTo(curr.x, curr.y, next2.x, next2.y);
                }
            }

            p.closePath();
        }
        return p;
    }

    function buildPath(glyphs, glyph) {
        if (glyph.isComposite) {
            for (var j = 0; j < glyph.components.length; j += 1) {
                var component = glyph.components[j];
                var componentGlyph = glyphs.get(component.glyphIndex);
                // Force the ttfGlyphLoader to parse the glyph.
                componentGlyph.getPath();
                if (componentGlyph.points) {
                    var transformedPoints = (void 0);
                    if (component.matchedPoints === undefined) {
                        // component positioned by offset
                        transformedPoints = transformPoints(componentGlyph.points, component);
                    } else {
                        // component positioned by matched points
                        if ((component.matchedPoints[0] > glyph.points.length - 1) ||
                            (component.matchedPoints[1] > componentGlyph.points.length - 1)) {
                            throw Error('Matched points out of range in ' + glyph.name);
                        }
                        var firstPt = glyph.points[component.matchedPoints[0]];
                        var secondPt = componentGlyph.points[component.matchedPoints[1]];
                        var transform = {
                            xScale: component.xScale, scale01: component.scale01,
                            scale10: component.scale10, yScale: component.yScale,
                            dx: 0, dy: 0
                        };
                        secondPt = transformPoints([secondPt], transform)[0];
                        transform.dx = firstPt.x - secondPt.x;
                        transform.dy = firstPt.y - secondPt.y;
                        transformedPoints = transformPoints(componentGlyph.points, transform);
                    }
                    glyph.points = glyph.points.concat(transformedPoints);
                }
            }
        }

        return getPath(glyph.points);
    }

    function parseGlyfTableAll(data, start, loca, font) {
        var glyphs = new glyphset.GlyphSet(font);

        // The last element of the loca table is invalid.
        for (var i = 0; i < loca.length - 1; i += 1) {
            var offset = loca[i];
            var nextOffset = loca[i + 1];
            if (offset !== nextOffset) {
                glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));
            } else {
                glyphs.push(i, glyphset.glyphLoader(font, i));
            }
        }

        return glyphs;
    }

    function parseGlyfTableOnLowMemory(data, start, loca, font) {
        var glyphs = new glyphset.GlyphSet(font);

        font._push = function(i) {
            var offset = loca[i];
            var nextOffset = loca[i + 1];
            if (offset !== nextOffset) {
                glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));
            } else {
                glyphs.push(i, glyphset.glyphLoader(font, i));
            }
        };

        return glyphs;
    }

    // Parse all the glyphs according to the offsets from the `loca` table.
    function parseGlyfTable(data, start, loca, font, opt) {
        if (opt.lowMemory)
            { return parseGlyfTableOnLowMemory(data, start, loca, font); }
        else
            { return parseGlyfTableAll(data, start, loca, font); }
    }

    var glyf = { getPath: getPath, parse: parseGlyfTable};

    /* A TrueType font hinting interpreter.
    *
    * (c) 2017 Axel Kittenberger
    *
    * This interpreter has been implemented according to this documentation:
    * https://developer.apple.com/fonts/TrueType-Reference-Manual/RM05/Chap5.html
    *
    * According to the documentation F24DOT6 values are used for pixels.
    * That means calculation is 1/64 pixel accurate and uses integer operations.
    * However, Javascript has floating point operations by default and only
    * those are available. One could make a case to simulate the 1/64 accuracy
    * exactly by truncating after every division operation
    * (for example with << 0) to get pixel exactly results as other TrueType
    * implementations. It may make sense since some fonts are pixel optimized
    * by hand using DELTAP instructions. The current implementation doesn't
    * and rather uses full floating point precision.
    *
    * xScale, yScale and rotation is currently ignored.
    *
    * A few non-trivial instructions are missing as I didn't encounter yet
    * a font that used them to test a possible implementation.
    *
    * Some fonts seem to use undocumented features regarding the twilight zone.
    * Only some of them are implemented as they were encountered.
    *
    * The exports.DEBUG statements are removed on the minified distribution file.
    */

    var instructionTable;
    var exec;
    var execGlyph;
    var execComponent;

    /*
    * Creates a hinting object.
    *
    * There ought to be exactly one
    * for each truetype font that is used for hinting.
    */
    function Hinting(font) {
        // the font this hinting object is for
        this.font = font;

        this.getCommands = function (hPoints) {
            return glyf.getPath(hPoints).commands;
        };

        // cached states
        this._fpgmState  =
        this._prepState  =
            undefined;

        // errorState
        // 0 ... all okay
        // 1 ... had an error in a glyf,
        //       continue working but stop spamming
        //       the console
        // 2 ... error at prep, stop hinting at this ppem
        // 3 ... error at fpeg, stop hinting for this font at all
        this._errorState = 0;
    }

    /*
    * Not rounding.
    */
    function roundOff(v) {
        return v;
    }

    /*
    * Rounding to grid.
    */
    function roundToGrid(v) {
        //Rounding in TT is supposed to "symmetrical around zero"
        return Math.sign(v) * Math.round(Math.abs(v));
    }

    /*
    * Rounding to double grid.
    */
    function roundToDoubleGrid(v) {
        return Math.sign(v) * Math.round(Math.abs(v * 2)) / 2;
    }

    /*
    * Rounding to half grid.
    */
    function roundToHalfGrid(v) {
        return Math.sign(v) * (Math.round(Math.abs(v) + 0.5) - 0.5);
    }

    /*
    * Rounding to up to grid.
    */
    function roundUpToGrid(v) {
        return Math.sign(v) * Math.ceil(Math.abs(v));
    }

    /*
    * Rounding to down to grid.
    */
    function roundDownToGrid(v) {
        return Math.sign(v) * Math.floor(Math.abs(v));
    }

    /*
    * Super rounding.
    */
    var roundSuper = function (v) {
        var period = this.srPeriod;
        var phase = this.srPhase;
        var threshold = this.srThreshold;
        var sign = 1;

        if (v < 0) {
            v = -v;
            sign = -1;
        }

        v += threshold - phase;

        v = Math.trunc(v / period) * period;

        v += phase;

        // according to http://xgridfit.sourceforge.net/round.html
        if (v < 0) { return phase * sign; }

        return v * sign;
    };

    /*
    * Unit vector of x-axis.
    */
    var xUnitVector = {
        x: 1,

        y: 0,

        axis: 'x',

        // Gets the projected distance between two points.
        // o1/o2 ... if true, respective original position is used.
        distance: function (p1, p2, o1, o2) {
            return (o1 ? p1.xo : p1.x) - (o2 ? p2.xo : p2.x);
        },

        // Moves point p so the moved position has the same relative
        // position to the moved positions of rp1 and rp2 than the
        // original positions had.
        //
        // See APPENDIX on INTERPOLATE at the bottom of this file.
        interpolate: function (p, rp1, rp2, pv) {
            var do1;
            var do2;
            var doa1;
            var doa2;
            var dm1;
            var dm2;
            var dt;

            if (!pv || pv === this) {
                do1 = p.xo - rp1.xo;
                do2 = p.xo - rp2.xo;
                dm1 = rp1.x - rp1.xo;
                dm2 = rp2.x - rp2.xo;
                doa1 = Math.abs(do1);
                doa2 = Math.abs(do2);
                dt = doa1 + doa2;

                if (dt === 0) {
                    p.x = p.xo + (dm1 + dm2) / 2;
                    return;
                }

                p.x = p.xo + (dm1 * doa2 + dm2 * doa1) / dt;
                return;
            }

            do1 = pv.distance(p, rp1, true, true);
            do2 = pv.distance(p, rp2, true, true);
            dm1 = pv.distance(rp1, rp1, false, true);
            dm2 = pv.distance(rp2, rp2, false, true);
            doa1 = Math.abs(do1);
            doa2 = Math.abs(do2);
            dt = doa1 + doa2;

            if (dt === 0) {
                xUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
                return;
            }

            xUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
        },

        // Slope of line normal to this
        normalSlope: Number.NEGATIVE_INFINITY,

        // Sets the point 'p' relative to point 'rp'
        // by the distance 'd'.
        //
        // See APPENDIX on SETRELATIVE at the bottom of this file.
        //
        // p   ... point to set
        // rp  ... reference point
        // d   ... distance on projection vector
        // pv  ... projection vector (undefined = this)
        // org ... if true, uses the original position of rp as reference.
        setRelative: function (p, rp, d, pv, org) {
            if (!pv || pv === this) {
                p.x = (org ? rp.xo : rp.x) + d;
                return;
            }

            var rpx = org ? rp.xo : rp.x;
            var rpy = org ? rp.yo : rp.y;
            var rpdx = rpx + d * pv.x;
            var rpdy = rpy + d * pv.y;

            p.x = rpdx + (p.y - rpdy) / pv.normalSlope;
        },

        // Slope of vector line.
        slope: 0,

        // Touches the point p.
        touch: function (p) {
            p.xTouched = true;
        },

        // Tests if a point p is touched.
        touched: function (p) {
            return p.xTouched;
        },

        // Untouches the point p.
        untouch: function (p) {
            p.xTouched = false;
        }
    };

    /*
    * Unit vector of y-axis.
    */
    var yUnitVector = {
        x: 0,

        y: 1,

        axis: 'y',

        // Gets the projected distance between two points.
        // o1/o2 ... if true, respective original position is used.
        distance: function (p1, p2, o1, o2) {
            return (o1 ? p1.yo : p1.y) - (o2 ? p2.yo : p2.y);
        },

        // Moves point p so the moved position has the same relative
        // position to the moved positions of rp1 and rp2 than the
        // original positions had.
        //
        // See APPENDIX on INTERPOLATE at the bottom of this file.
        interpolate: function (p, rp1, rp2, pv) {
            var do1;
            var do2;
            var doa1;
            var doa2;
            var dm1;
            var dm2;
            var dt;

            if (!pv || pv === this) {
                do1 = p.yo - rp1.yo;
                do2 = p.yo - rp2.yo;
                dm1 = rp1.y - rp1.yo;
                dm2 = rp2.y - rp2.yo;
                doa1 = Math.abs(do1);
                doa2 = Math.abs(do2);
                dt = doa1 + doa2;

                if (dt === 0) {
                    p.y = p.yo + (dm1 + dm2) / 2;
                    return;
                }

                p.y = p.yo + (dm1 * doa2 + dm2 * doa1) / dt;
                return;
            }

            do1 = pv.distance(p, rp1, true, true);
            do2 = pv.distance(p, rp2, true, true);
            dm1 = pv.distance(rp1, rp1, false, true);
            dm2 = pv.distance(rp2, rp2, false, true);
            doa1 = Math.abs(do1);
            doa2 = Math.abs(do2);
            dt = doa1 + doa2;

            if (dt === 0) {
                yUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
                return;
            }

            yUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
        },

        // Slope of line normal to this.
        normalSlope: 0,

        // Sets the point 'p' relative to point 'rp'
        // by the distance 'd'
        //
        // See APPENDIX on SETRELATIVE at the bottom of this file.
        //
        // p   ... point to set
        // rp  ... reference point
        // d   ... distance on projection vector
        // pv  ... projection vector (undefined = this)
        // org ... if true, uses the original position of rp as reference.
        setRelative: function (p, rp, d, pv, org) {
            if (!pv || pv === this) {
                p.y = (org ? rp.yo : rp.y) + d;
                return;
            }

            var rpx = org ? rp.xo : rp.x;
            var rpy = org ? rp.yo : rp.y;
            var rpdx = rpx + d * pv.x;
            var rpdy = rpy + d * pv.y;

            p.y = rpdy + pv.normalSlope * (p.x - rpdx);
        },

        // Slope of vector line.
        slope: Number.POSITIVE_INFINITY,

        // Touches the point p.
        touch: function (p) {
            p.yTouched = true;
        },

        // Tests if a point p is touched.
        touched: function (p) {
            return p.yTouched;
        },

        // Untouches the point p.
        untouch: function (p) {
            p.yTouched = false;
        }
    };

    Object.freeze(xUnitVector);
    Object.freeze(yUnitVector);

    /*
    * Creates a unit vector that is not x- or y-axis.
    */
    function UnitVector(x, y) {
        this.x = x;
        this.y = y;
        this.axis = undefined;
        this.slope = y / x;
        this.normalSlope = -x / y;
        Object.freeze(this);
    }

    /*
    * Gets the projected distance between two points.
    * o1/o2 ... if true, respective original position is used.
    */
    UnitVector.prototype.distance = function(p1, p2, o1, o2) {
        return (
            this.x * xUnitVector.distance(p1, p2, o1, o2) +
            this.y * yUnitVector.distance(p1, p2, o1, o2)
        );
    };

    /*
    * Moves point p so the moved position has the same relative
    * position to the moved positions of rp1 and rp2 than the
    * original positions had.
    *
    * See APPENDIX on INTERPOLATE at the bottom of this file.
    */
    UnitVector.prototype.interpolate = function(p, rp1, rp2, pv) {
        var dm1;
        var dm2;
        var do1;
        var do2;
        var doa1;
        var doa2;
        var dt;

        do1 = pv.distance(p, rp1, true, true);
        do2 = pv.distance(p, rp2, true, true);
        dm1 = pv.distance(rp1, rp1, false, true);
        dm2 = pv.distance(rp2, rp2, false, true);
        doa1 = Math.abs(do1);
        doa2 = Math.abs(do2);
        dt = doa1 + doa2;

        if (dt === 0) {
            this.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
            return;
        }

        this.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
    };

    /*
    * Sets the point 'p' relative to point 'rp'
    * by the distance 'd'
    *
    * See APPENDIX on SETRELATIVE at the bottom of this file.
    *
    * p   ...  point to set
    * rp  ... reference point
    * d   ... distance on projection vector
    * pv  ... projection vector (undefined = this)
    * org ... if true, uses the original position of rp as reference.
    */
    UnitVector.prototype.setRelative = function(p, rp, d, pv, org) {
        pv = pv || this;

        var rpx = org ? rp.xo : rp.x;
        var rpy = org ? rp.yo : rp.y;
        var rpdx = rpx + d * pv.x;
        var rpdy = rpy + d * pv.y;

        var pvns = pv.normalSlope;
        var fvs = this.slope;

        var px = p.x;
        var py = p.y;

        p.x = (fvs * px - pvns * rpdx + rpdy - py) / (fvs - pvns);
        p.y = fvs * (p.x - px) + py;
    };

    /*
    * Touches the point p.
    */
    UnitVector.prototype.touch = function(p) {
        p.xTouched = true;
        p.yTouched = true;
    };

    /*
    * Returns a unit vector with x/y coordinates.
    */
    function getUnitVector(x, y) {
        var d = Math.sqrt(x * x + y * y);

        x /= d;
        y /= d;

        if (x === 1 && y === 0) { return xUnitVector; }
        else if (x === 0 && y === 1) { return yUnitVector; }
        else { return new UnitVector(x, y); }
    }

    /*
    * Creates a point in the hinting engine.
    */
    function HPoint(
        x,
        y,
        lastPointOfContour,
        onCurve
    ) {
        this.x = this.xo = Math.round(x * 64) / 64; // hinted x value and original x-value
        this.y = this.yo = Math.round(y * 64) / 64; // hinted y value and original y-value

        this.lastPointOfContour = lastPointOfContour;
        this.onCurve = onCurve;
        this.prevPointOnContour = undefined;
        this.nextPointOnContour = undefined;
        this.xTouched = false;
        this.yTouched = false;

        Object.preventExtensions(this);
    }

    /*
    * Returns the next touched point on the contour.
    *
    * v  ... unit vector to test touch axis.
    */
    HPoint.prototype.nextTouched = function(v) {
        var p = this.nextPointOnContour;

        while (!v.touched(p) && p !== this) { p = p.nextPointOnContour; }

        return p;
    };

    /*
    * Returns the previous touched point on the contour
    *
    * v  ... unit vector to test touch axis.
    */
    HPoint.prototype.prevTouched = function(v) {
        var p = this.prevPointOnContour;

        while (!v.touched(p) && p !== this) { p = p.prevPointOnContour; }

        return p;
    };

    /*
    * The zero point.
    */
    var HPZero = Object.freeze(new HPoint(0, 0));

    /*
    * The default state of the interpreter.
    *
    * Note: Freezing the defaultState and then deriving from it
    * makes the V8 Javascript engine going awkward,
    * so this is avoided, albeit the defaultState shouldn't
    * ever change.
    */
    var defaultState = {
        cvCutIn: 17 / 16,    // control value cut in
        deltaBase: 9,
        deltaShift: 0.125,
        loop: 1,             // loops some instructions
        minDis: 1,           // minimum distance
        autoFlip: true
    };

    /*
    * The current state of the interpreter.
    *
    * env  ... 'fpgm' or 'prep' or 'glyf'
    * prog ... the program
    */
    function State(env, prog) {
        this.env = env;
        this.stack = [];
        this.prog = prog;

        switch (env) {
            case 'glyf' :
                this.zp0 = this.zp1 = this.zp2 = 1;
                this.rp0 = this.rp1 = this.rp2 = 0;
                /* fall through */
            case 'prep' :
                this.fv = this.pv = this.dpv = xUnitVector;
                this.round = roundToGrid;
        }
    }

    /*
    * Executes a glyph program.
    *
    * This does the hinting for each glyph.
    *
    * Returns an array of moved points.
    *
    * glyph: the glyph to hint
    * ppem: the size the glyph is rendered for
    */
    Hinting.prototype.exec = function(glyph, ppem) {
        if (typeof ppem !== 'number') {
            throw new Error('Point size is not a number!');
        }

        // Received a fatal error, don't do any hinting anymore.
        if (this._errorState > 2) { return; }

        var font = this.font;
        var prepState = this._prepState;

        if (!prepState || prepState.ppem !== ppem) {
            var fpgmState = this._fpgmState;

            if (!fpgmState) {
                // Executes the fpgm state.
                // This is used by fonts to define functions.
                State.prototype = defaultState;

                fpgmState =
                this._fpgmState =
                    new State('fpgm', font.tables.fpgm);

                fpgmState.funcs = [ ];
                fpgmState.font = font;

                if (exports.DEBUG) {
                    console.log('---EXEC FPGM---');
                    fpgmState.step = -1;
                }

                try {
                    exec(fpgmState);
                } catch (e) {
                    console.log('Hinting error in FPGM:' + e);
                    this._errorState = 3;
                    return;
                }
            }

            // Executes the prep program for this ppem setting.
            // This is used by fonts to set cvt values
            // depending on to be rendered font size.

            State.prototype = fpgmState;
            prepState =
            this._prepState =
                new State('prep', font.tables.prep);

            prepState.ppem = ppem;

            // Creates a copy of the cvt table
            // and scales it to the current ppem setting.
            var oCvt = font.tables.cvt;
            if (oCvt) {
                var cvt = prepState.cvt = new Array(oCvt.length);
                var scale = ppem / font.unitsPerEm;
                for (var c = 0; c < oCvt.length; c++) {
                    cvt[c] = oCvt[c] * scale;
                }
            } else {
                prepState.cvt = [];
            }

            if (exports.DEBUG) {
                console.log('---EXEC PREP---');
                prepState.step = -1;
            }

            try {
                exec(prepState);
            } catch (e) {
                if (this._errorState < 2) {
                    console.log('Hinting error in PREP:' + e);
                }
                this._errorState = 2;
            }
        }

        if (this._errorState > 1) { return; }

        try {
            return execGlyph(glyph, prepState);
        } catch (e) {
            if (this._errorState < 1) {
                console.log('Hinting error:' + e);
                console.log('Note: further hinting errors are silenced');
            }
            this._errorState = 1;
            return undefined;
        }
    };

    /*
    * Executes the hinting program for a glyph.
    */
    execGlyph = function(glyph, prepState) {
        // original point positions
        var xScale = prepState.ppem / prepState.font.unitsPerEm;
        var yScale = xScale;
        var components = glyph.components;
        var contours;
        var gZone;
        var state;

        State.prototype = prepState;
        if (!components) {
            state = new State('glyf', glyph.instructions);
            if (exports.DEBUG) {
                console.log('---EXEC GLYPH---');
                state.step = -1;
            }
            execComponent(glyph, state, xScale, yScale);
            gZone = state.gZone;
        } else {
            var font = prepState.font;
            gZone = [];
            contours = [];
            for (var i = 0; i < components.length; i++) {
                var c = components[i];
                var cg = font.glyphs.get(c.glyphIndex);

                state = new State('glyf', cg.instructions);

                if (exports.DEBUG) {
                    console.log('---EXEC COMP ' + i + '---');
                    state.step = -1;
                }

                execComponent(cg, state, xScale, yScale);
                // appends the computed points to the result array
                // post processes the component points
                var dx = Math.round(c.dx * xScale);
                var dy = Math.round(c.dy * yScale);
                var gz = state.gZone;
                var cc = state.contours;
                for (var pi = 0; pi < gz.length; pi++) {
                    var p = gz[pi];
                    p.xTouched = p.yTouched = false;
                    p.xo = p.x = p.x + dx;
                    p.yo = p.y = p.y + dy;
                }

                var gLen = gZone.length;
                gZone.push.apply(gZone, gz);
                for (var j = 0; j < cc.length; j++) {
                    contours.push(cc[j] + gLen);
                }
            }

            if (glyph.instructions && !state.inhibitGridFit) {
                // the composite has instructions on its own
                state = new State('glyf', glyph.instructions);

                state.gZone = state.z0 = state.z1 = state.z2 = gZone;

                state.contours = contours;

                // note: HPZero cannot be used here, since
                //       the point might be modified
                gZone.push(
                    new HPoint(0, 0),
                    new HPoint(Math.round(glyph.advanceWidth * xScale), 0)
                );

                if (exports.DEBUG) {
                    console.log('---EXEC COMPOSITE---');
                    state.step = -1;
                }

                exec(state);

                gZone.length -= 2;
            }
        }

        return gZone;
    };

    /*
    * Executes the hinting program for a component of a multi-component glyph
    * or of the glyph itself for a non-component glyph.
    */
    execComponent = function(glyph, state, xScale, yScale)
    {
        var points = glyph.points || [];
        var pLen = points.length;
        var gZone = state.gZone = state.z0 = state.z1 = state.z2 = [];
        var contours = state.contours = [];

        // Scales the original points and
        // makes copies for the hinted points.
        var cp; // current point
        for (var i = 0; i < pLen; i++) {
            cp = points[i];

            gZone[i] = new HPoint(
                cp.x * xScale,
                cp.y * yScale,
                cp.lastPointOfContour,
                cp.onCurve
            );
        }

        // Chain links the contours.
        var sp; // start point
        var np; // next point

        for (var i$1 = 0; i$1 < pLen; i$1++) {
            cp = gZone[i$1];

            if (!sp) {
                sp = cp;
                contours.push(i$1);
            }

            if (cp.lastPointOfContour) {
                cp.nextPointOnContour = sp;
                sp.prevPointOnContour = cp;
                sp = undefined;
            } else {
                np = gZone[i$1 + 1];
                cp.nextPointOnContour = np;
                np.prevPointOnContour = cp;
            }
        }

        if (state.inhibitGridFit) { return; }

        if (exports.DEBUG) {
            console.log('PROCESSING GLYPH', state.stack);
            for (var i$2 = 0; i$2 < pLen; i$2++) {
                console.log(i$2, gZone[i$2].x, gZone[i$2].y);
            }
        }

        gZone.push(
            new HPoint(0, 0),
            new HPoint(Math.round(glyph.advanceWidth * xScale), 0)
        );

        exec(state);

        // Removes the extra points.
        gZone.length -= 2;

        if (exports.DEBUG) {
            console.log('FINISHED GLYPH', state.stack);
            for (var i$3 = 0; i$3 < pLen; i$3++) {
                console.log(i$3, gZone[i$3].x, gZone[i$3].y);
            }
        }
    };

    /*
    * Executes the program loaded in state.
    */
    exec = function(state) {
        var prog = state.prog;

        if (!prog) { return; }

        var pLen = prog.length;
        var ins;

        for (state.ip = 0; state.ip < pLen; state.ip++) {
            if (exports.DEBUG) { state.step++; }
            ins = instructionTable[prog[state.ip]];

            if (!ins) {
                throw new Error(
                    'unknown instruction: 0x' +
                    Number(prog[state.ip]).toString(16)
                );
            }

            ins(state);

            // very extensive debugging for each step
            /*
            if (exports.DEBUG) {
                var da;
                if (state.gZone) {
                    da = [];
                    for (let i = 0; i < state.gZone.length; i++)
                    {
                        da.push(i + ' ' +
                            state.gZone[i].x * 64 + ' ' +
                            state.gZone[i].y * 64 + ' ' +
                            (state.gZone[i].xTouched ? 'x' : '') +
                            (state.gZone[i].yTouched ? 'y' : '')
                        );
                    }
                    console.log('GZ', da);
                }

                if (state.tZone) {
                    da = [];
                    for (let i = 0; i < state.tZone.length; i++) {
                        da.push(i + ' ' +
                            state.tZone[i].x * 64 + ' ' +
                            state.tZone[i].y * 64 + ' ' +
                            (state.tZone[i].xTouched ? 'x' : '') +
                            (state.tZone[i].yTouched ? 'y' : '')
                        );
                    }
                    console.log('TZ', da);
                }

                if (state.stack.length > 10) {
                    console.log(
                        state.stack.length,
                        '...', state.stack.slice(state.stack.length - 10)
                    );
                } else {
                    console.log(state.stack.length, state.stack);
                }
            }
            */
        }
    };

    /*
    * Initializes the twilight zone.
    *
    * This is only done if a SZPx instruction
    * refers to the twilight zone.
    */
    function initTZone(state)
    {
        var tZone = state.tZone = new Array(state.gZone.length);

        // no idea if this is actually correct...
        for (var i = 0; i < tZone.length; i++)
        {
            tZone[i] = new HPoint(0, 0);
        }
    }

    /*
    * Skips the instruction pointer ahead over an IF/ELSE block.
    * handleElse .. if true breaks on matching ELSE
    */
    function skip(state, handleElse)
    {
        var prog = state.prog;
        var ip = state.ip;
        var nesting = 1;
        var ins;

        do {
            ins = prog[++ip];
            if (ins === 0x58) // IF
                { nesting++; }
            else if (ins === 0x59) // EIF
                { nesting--; }
            else if (ins === 0x40) // NPUSHB
                { ip += prog[ip + 1] + 1; }
            else if (ins === 0x41) // NPUSHW
                { ip += 2 * prog[ip + 1] + 1; }
            else if (ins >= 0xB0 && ins <= 0xB7) // PUSHB
                { ip += ins - 0xB0 + 1; }
            else if (ins >= 0xB8 && ins <= 0xBF) // PUSHW
                { ip += (ins - 0xB8 + 1) * 2; }
            else if (handleElse && nesting === 1 && ins === 0x1B) // ELSE
                { break; }
        } while (nesting > 0);

        state.ip = ip;
    }

    /*----------------------------------------------------------*
    *          And then a lot of instructions...                *
    *----------------------------------------------------------*/

    // SVTCA[a] Set freedom and projection Vectors To Coordinate Axis
    // 0x00-0x01
    function SVTCA(v, state) {
        if (exports.DEBUG) { console.log(state.step, 'SVTCA[' + v.axis + ']'); }

        state.fv = state.pv = state.dpv = v;
    }

    // SPVTCA[a] Set Projection Vector to Coordinate Axis
    // 0x02-0x03
    function SPVTCA(v, state) {
        if (exports.DEBUG) { console.log(state.step, 'SPVTCA[' + v.axis + ']'); }

        state.pv = state.dpv = v;
    }

    // SFVTCA[a] Set Freedom Vector to Coordinate Axis
    // 0x04-0x05
    function SFVTCA(v, state) {
        if (exports.DEBUG) { console.log(state.step, 'SFVTCA[' + v.axis + ']'); }

        state.fv = v;
    }

    // SPVTL[a] Set Projection Vector To Line
    // 0x06-0x07
    function SPVTL(a, state) {
        var stack = state.stack;
        var p2i = stack.pop();
        var p1i = stack.pop();
        var p2 = state.z2[p2i];
        var p1 = state.z1[p1i];

        if (exports.DEBUG) { console.log('SPVTL[' + a + ']', p2i, p1i); }

        var dx;
        var dy;

        if (!a) {
            dx = p1.x - p2.x;
            dy = p1.y - p2.y;
        } else {
            dx = p2.y - p1.y;
            dy = p1.x - p2.x;
        }

        state.pv = state.dpv = getUnitVector(dx, dy);
    }

    // SFVTL[a] Set Freedom Vector To Line
    // 0x08-0x09
    function SFVTL(a, state) {
        var stack = state.stack;
        var p2i = stack.pop();
        var p1i = stack.pop();
        var p2 = state.z2[p2i];
        var p1 = state.z1[p1i];

        if (exports.DEBUG) { console.log('SFVTL[' + a + ']', p2i, p1i); }

        var dx;
        var dy;

        if (!a) {
            dx = p1.x - p2.x;
            dy = p1.y - p2.y;
        } else {
            dx = p2.y - p1.y;
            dy = p1.x - p2.x;
        }

        state.fv = getUnitVector(dx, dy);
    }

    // SPVFS[] Set Projection Vector From Stack
    // 0x0A
    function SPVFS(state) {
        var stack = state.stack;
        var y = stack.pop();
        var x = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'SPVFS[]', y, x); }

        state.pv = state.dpv = getUnitVector(x, y);
    }

    // SFVFS[] Set Freedom Vector From Stack
    // 0x0B
    function SFVFS(state) {
        var stack = state.stack;
        var y = stack.pop();
        var x = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'SPVFS[]', y, x); }

        state.fv = getUnitVector(x, y);
    }

    // GPV[] Get Projection Vector
    // 0x0C
    function GPV(state) {
        var stack = state.stack;
        var pv = state.pv;

        if (exports.DEBUG) { console.log(state.step, 'GPV[]'); }

        stack.push(pv.x * 0x4000);
        stack.push(pv.y * 0x4000);
    }

    // GFV[] Get Freedom Vector
    // 0x0C
    function GFV(state) {
        var stack = state.stack;
        var fv = state.fv;

        if (exports.DEBUG) { console.log(state.step, 'GFV[]'); }

        stack.push(fv.x * 0x4000);
        stack.push(fv.y * 0x4000);
    }

    // SFVTPV[] Set Freedom Vector To Projection Vector
    // 0x0E
    function SFVTPV(state) {
        state.fv = state.pv;

        if (exports.DEBUG) { console.log(state.step, 'SFVTPV[]'); }
    }

    // ISECT[] moves point p to the InterSECTion of two lines
    // 0x0F
    function ISECT(state)
    {
        var stack = state.stack;
        var pa0i = stack.pop();
        var pa1i = stack.pop();
        var pb0i = stack.pop();
        var pb1i = stack.pop();
        var pi = stack.pop();
        var z0 = state.z0;
        var z1 = state.z1;
        var pa0 = z0[pa0i];
        var pa1 = z0[pa1i];
        var pb0 = z1[pb0i];
        var pb1 = z1[pb1i];
        var p = state.z2[pi];

        if (exports.DEBUG) { console.log('ISECT[], ', pa0i, pa1i, pb0i, pb1i, pi); }

        // math from
        // en.wikipedia.org/wiki/Line%E2%80%93line_intersection#Given_two_points_on_each_line

        var x1 = pa0.x;
        var y1 = pa0.y;
        var x2 = pa1.x;
        var y2 = pa1.y;
        var x3 = pb0.x;
        var y3 = pb0.y;
        var x4 = pb1.x;
        var y4 = pb1.y;

        var div = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
        var f1 = x1 * y2 - y1 * x2;
        var f2 = x3 * y4 - y3 * x4;

        p.x = (f1 * (x3 - x4) - f2 * (x1 - x2)) / div;
        p.y = (f1 * (y3 - y4) - f2 * (y1 - y2)) / div;
    }

    // SRP0[] Set Reference Point 0
    // 0x10
    function SRP0(state) {
        state.rp0 = state.stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'SRP0[]', state.rp0); }
    }

    // SRP1[] Set Reference Point 1
    // 0x11
    function SRP1(state) {
        state.rp1 = state.stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'SRP1[]', state.rp1); }
    }

    // SRP1[] Set Reference Point 2
    // 0x12
    function SRP2(state) {
        state.rp2 = state.stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'SRP2[]', state.rp2); }
    }

    // SZP0[] Set Zone Pointer 0
    // 0x13
    function SZP0(state) {
        var n = state.stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'SZP0[]', n); }

        state.zp0 = n;

        switch (n) {
            case 0:
                if (!state.tZone) { initTZone(state); }
                state.z0 = state.tZone;
                break;
            case 1 :
                state.z0 = state.gZone;
                break;
            default :
                throw new Error('Invalid zone pointer');
        }
    }

    // SZP1[] Set Zone Pointer 1
    // 0x14
    function SZP1(state) {
        var n = state.stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'SZP1[]', n); }

        state.zp1 = n;

        switch (n) {
            case 0:
                if (!state.tZone) { initTZone(state); }
                state.z1 = state.tZone;
                break;
            case 1 :
                state.z1 = state.gZone;
                break;
            default :
                throw new Error('Invalid zone pointer');
        }
    }

    // SZP2[] Set Zone Pointer 2
    // 0x15
    function SZP2(state) {
        var n = state.stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'SZP2[]', n); }

        state.zp2 = n;

        switch (n) {
            case 0:
                if (!state.tZone) { initTZone(state); }
                state.z2 = state.tZone;
                break;
            case 1 :
                state.z2 = state.gZone;
                break;
            default :
                throw new Error('Invalid zone pointer');
        }
    }

    // SZPS[] Set Zone PointerS
    // 0x16
    function SZPS(state) {
        var n = state.stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'SZPS[]', n); }

        state.zp0 = state.zp1 = state.zp2 = n;

        switch (n) {
            case 0:
                if (!state.tZone) { initTZone(state); }
                state.z0 = state.z1 = state.z2 = state.tZone;
                break;
            case 1 :
                state.z0 = state.z1 = state.z2 = state.gZone;
                break;
            default :
                throw new Error('Invalid zone pointer');
        }
    }

    // SLOOP[] Set LOOP variable
    // 0x17
    function SLOOP(state) {
        state.loop = state.stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'SLOOP[]', state.loop); }
    }

    // RTG[] Round To Grid
    // 0x18
    function RTG(state) {
        if (exports.DEBUG) { console.log(state.step, 'RTG[]'); }

        state.round = roundToGrid;
    }

    // RTHG[] Round To Half Grid
    // 0x19
    function RTHG(state) {
        if (exports.DEBUG) { console.log(state.step, 'RTHG[]'); }

        state.round = roundToHalfGrid;
    }

    // SMD[] Set Minimum Distance
    // 0x1A
    function SMD(state) {
        var d = state.stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'SMD[]', d); }

        state.minDis = d / 0x40;
    }

    // ELSE[] ELSE clause
    // 0x1B
    function ELSE(state) {
        // This instruction has been reached by executing a then branch
        // so it just skips ahead until matching EIF.
        //
        // In case the IF was negative the IF[] instruction already
        // skipped forward over the ELSE[]

        if (exports.DEBUG) { console.log(state.step, 'ELSE[]'); }

        skip(state, false);
    }

    // JMPR[] JuMP Relative
    // 0x1C
    function JMPR(state) {
        var o = state.stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'JMPR[]', o); }

        // A jump by 1 would do nothing.
        state.ip += o - 1;
    }

    // SCVTCI[] Set Control Value Table Cut-In
    // 0x1D
    function SCVTCI(state) {
        var n = state.stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'SCVTCI[]', n); }

        state.cvCutIn = n / 0x40;
    }

    // DUP[] DUPlicate top stack element
    // 0x20
    function DUP(state) {
        var stack = state.stack;

        if (exports.DEBUG) { console.log(state.step, 'DUP[]'); }

        stack.push(stack[stack.length - 1]);
    }

    // POP[] POP top stack element
    // 0x21
    function POP(state) {
        if (exports.DEBUG) { console.log(state.step, 'POP[]'); }

        state.stack.pop();
    }

    // CLEAR[] CLEAR the stack
    // 0x22
    function CLEAR(state) {
        if (exports.DEBUG) { console.log(state.step, 'CLEAR[]'); }

        state.stack.length = 0;
    }

    // SWAP[] SWAP the top two elements on the stack
    // 0x23
    function SWAP(state) {
        var stack = state.stack;

        var a = stack.pop();
        var b = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'SWAP[]'); }

        stack.push(a);
        stack.push(b);
    }

    // DEPTH[] DEPTH of the stack
    // 0x24
    function DEPTH(state) {
        var stack = state.stack;

        if (exports.DEBUG) { console.log(state.step, 'DEPTH[]'); }

        stack.push(stack.length);
    }

    // LOOPCALL[] LOOPCALL function
    // 0x2A
    function LOOPCALL(state) {
        var stack = state.stack;
        var fn = stack.pop();
        var c = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'LOOPCALL[]', fn, c); }

        // saves callers program
        var cip = state.ip;
        var cprog = state.prog;

        state.prog = state.funcs[fn];

        // executes the function
        for (var i = 0; i < c; i++) {
            exec(state);

            if (exports.DEBUG) { console.log(
                ++state.step,
                i + 1 < c ? 'next loopcall' : 'done loopcall',
                i
            ); }
        }

        // restores the callers program
        state.ip = cip;
        state.prog = cprog;
    }

    // CALL[] CALL function
    // 0x2B
    function CALL(state) {
        var fn = state.stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'CALL[]', fn); }

        // saves callers program
        var cip = state.ip;
        var cprog = state.prog;

        state.prog = state.funcs[fn];

        // executes the function
        exec(state);

        // restores the callers program
        state.ip = cip;
        state.prog = cprog;

        if (exports.DEBUG) { console.log(++state.step, 'returning from', fn); }
    }

    // CINDEX[] Copy the INDEXed element to the top of the stack
    // 0x25
    function CINDEX(state) {
        var stack = state.stack;
        var k = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'CINDEX[]', k); }

        // In case of k == 1, it copies the last element after popping
        // thus stack.length - k.
        stack.push(stack[stack.length - k]);
    }

    // MINDEX[] Move the INDEXed element to the top of the stack
    // 0x26
    function MINDEX(state) {
        var stack = state.stack;
        var k = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'MINDEX[]', k); }

        stack.push(stack.splice(stack.length - k, 1)[0]);
    }

    // FDEF[] Function DEFinition
    // 0x2C
    function FDEF(state) {
        if (state.env !== 'fpgm') { throw new Error('FDEF not allowed here'); }
        var stack = state.stack;
        var prog = state.prog;
        var ip = state.ip;

        var fn = stack.pop();
        var ipBegin = ip;

        if (exports.DEBUG) { console.log(state.step, 'FDEF[]', fn); }

        while (prog[++ip] !== 0x2D){ }

        state.ip = ip;
        state.funcs[fn] = prog.slice(ipBegin + 1, ip);
    }

    // MDAP[a] Move Direct Absolute Point
    // 0x2E-0x2F
    function MDAP(round, state) {
        var pi = state.stack.pop();
        var p = state.z0[pi];
        var fv = state.fv;
        var pv = state.pv;

        if (exports.DEBUG) { console.log(state.step, 'MDAP[' + round + ']', pi); }

        var d = pv.distance(p, HPZero);

        if (round) { d = state.round(d); }

        fv.setRelative(p, HPZero, d, pv);
        fv.touch(p);

        state.rp0 = state.rp1 = pi;
    }

    // IUP[a] Interpolate Untouched Points through the outline
    // 0x30
    function IUP(v, state) {
        var z2 = state.z2;
        var pLen = z2.length - 2;
        var cp;
        var pp;
        var np;

        if (exports.DEBUG) { console.log(state.step, 'IUP[' + v.axis + ']'); }

        for (var i = 0; i < pLen; i++) {
            cp = z2[i]; // current point

            // if this point has been touched go on
            if (v.touched(cp)) { continue; }

            pp = cp.prevTouched(v);

            // no point on the contour has been touched?
            if (pp === cp) { continue; }

            np = cp.nextTouched(v);

            if (pp === np) {
                // only one point on the contour has been touched
                // so simply moves the point like that

                v.setRelative(cp, cp, v.distance(pp, pp, false, true), v, true);
            }

            v.interpolate(cp, pp, np, v);
        }
    }

    // SHP[] SHift Point using reference point
    // 0x32-0x33
    function SHP(a, state) {
        var stack = state.stack;
        var rpi = a ? state.rp1 : state.rp2;
        var rp = (a ? state.z0 : state.z1)[rpi];
        var fv = state.fv;
        var pv = state.pv;
        var loop = state.loop;
        var z2 = state.z2;

        while (loop--)
        {
            var pi = stack.pop();
            var p = z2[pi];

            var d = pv.distance(rp, rp, false, true);
            fv.setRelative(p, p, d, pv);
            fv.touch(p);

            if (exports.DEBUG) {
                console.log(
                    state.step,
                    (state.loop > 1 ?
                       'loop ' + (state.loop - loop) + ': ' :
                       ''
                    ) +
                    'SHP[' + (a ? 'rp1' : 'rp2') + ']', pi
                );
            }
        }

        state.loop = 1;
    }

    // SHC[] SHift Contour using reference point
    // 0x36-0x37
    function SHC(a, state) {
        var stack = state.stack;
        var rpi = a ? state.rp1 : state.rp2;
        var rp = (a ? state.z0 : state.z1)[rpi];
        var fv = state.fv;
        var pv = state.pv;
        var ci = stack.pop();
        var sp = state.z2[state.contours[ci]];
        var p = sp;

        if (exports.DEBUG) { console.log(state.step, 'SHC[' + a + ']', ci); }

        var d = pv.distance(rp, rp, false, true);

        do {
            if (p !== rp) { fv.setRelative(p, p, d, pv); }
            p = p.nextPointOnContour;
        } while (p !== sp);
    }

    // SHZ[] SHift Zone using reference point
    // 0x36-0x37
    function SHZ(a, state) {
        var stack = state.stack;
        var rpi = a ? state.rp1 : state.rp2;
        var rp = (a ? state.z0 : state.z1)[rpi];
        var fv = state.fv;
        var pv = state.pv;

        var e = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'SHZ[' + a + ']', e); }

        var z;
        switch (e) {
            case 0 : z = state.tZone; break;
            case 1 : z = state.gZone; break;
            default : throw new Error('Invalid zone');
        }

        var p;
        var d = pv.distance(rp, rp, false, true);
        var pLen = z.length - 2;
        for (var i = 0; i < pLen; i++)
        {
            p = z[i];
            fv.setRelative(p, p, d, pv);
            //if (p !== rp) fv.setRelative(p, p, d, pv);
        }
    }

    // SHPIX[] SHift point by a PIXel amount
    // 0x38
    function SHPIX(state) {
        var stack = state.stack;
        var loop = state.loop;
        var fv = state.fv;
        var d = stack.pop() / 0x40;
        var z2 = state.z2;

        while (loop--) {
            var pi = stack.pop();
            var p = z2[pi];

            if (exports.DEBUG) {
                console.log(
                    state.step,
                    (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +
                    'SHPIX[]', pi, d
                );
            }

            fv.setRelative(p, p, d);
            fv.touch(p);
        }

        state.loop = 1;
    }

    // IP[] Interpolate Point
    // 0x39
    function IP(state) {
        var stack = state.stack;
        var rp1i = state.rp1;
        var rp2i = state.rp2;
        var loop = state.loop;
        var rp1 = state.z0[rp1i];
        var rp2 = state.z1[rp2i];
        var fv = state.fv;
        var pv = state.dpv;
        var z2 = state.z2;

        while (loop--) {
            var pi = stack.pop();
            var p = z2[pi];

            if (exports.DEBUG) {
                console.log(
                    state.step,
                    (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +
                    'IP[]', pi, rp1i, '<->', rp2i
                );
            }

            fv.interpolate(p, rp1, rp2, pv);

            fv.touch(p);
        }

        state.loop = 1;
    }

    // MSIRP[a] Move Stack Indirect Relative Point
    // 0x3A-0x3B
    function MSIRP(a, state) {
        var stack = state.stack;
        var d = stack.pop() / 64;
        var pi = stack.pop();
        var p = state.z1[pi];
        var rp0 = state.z0[state.rp0];
        var fv = state.fv;
        var pv = state.pv;

        fv.setRelative(p, rp0, d, pv);
        fv.touch(p);

        if (exports.DEBUG) { console.log(state.step, 'MSIRP[' + a + ']', d, pi); }

        state.rp1 = state.rp0;
        state.rp2 = pi;
        if (a) { state.rp0 = pi; }
    }

    // ALIGNRP[] Align to reference point.
    // 0x3C
    function ALIGNRP(state) {
        var stack = state.stack;
        var rp0i = state.rp0;
        var rp0 = state.z0[rp0i];
        var loop = state.loop;
        var fv = state.fv;
        var pv = state.pv;
        var z1 = state.z1;

        while (loop--) {
            var pi = stack.pop();
            var p = z1[pi];

            if (exports.DEBUG) {
                console.log(
                    state.step,
                    (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +
                    'ALIGNRP[]', pi
                );
            }

            fv.setRelative(p, rp0, 0, pv);
            fv.touch(p);
        }

        state.loop = 1;
    }

    // RTG[] Round To Double Grid
    // 0x3D
    function RTDG(state) {
        if (exports.DEBUG) { console.log(state.step, 'RTDG[]'); }

        state.round = roundToDoubleGrid;
    }

    // MIAP[a] Move Indirect Absolute Point
    // 0x3E-0x3F
    function MIAP(round, state) {
        var stack = state.stack;
        var n = stack.pop();
        var pi = stack.pop();
        var p = state.z0[pi];
        var fv = state.fv;
        var pv = state.pv;
        var cv = state.cvt[n];

        if (exports.DEBUG) {
            console.log(
                state.step,
                'MIAP[' + round + ']',
                n, '(', cv, ')', pi
            );
        }

        var d = pv.distance(p, HPZero);

        if (round) {
            if (Math.abs(d - cv) < state.cvCutIn) { d = cv; }

            d = state.round(d);
        }

        fv.setRelative(p, HPZero, d, pv);

        if (state.zp0 === 0) {
            p.xo = p.x;
            p.yo = p.y;
        }

        fv.touch(p);

        state.rp0 = state.rp1 = pi;
    }

    // NPUSB[] PUSH N Bytes
    // 0x40
    function NPUSHB(state) {
        var prog = state.prog;
        var ip = state.ip;
        var stack = state.stack;

        var n = prog[++ip];

        if (exports.DEBUG) { console.log(state.step, 'NPUSHB[]', n); }

        for (var i = 0; i < n; i++) { stack.push(prog[++ip]); }

        state.ip = ip;
    }

    // NPUSHW[] PUSH N Words
    // 0x41
    function NPUSHW(state) {
        var ip = state.ip;
        var prog = state.prog;
        var stack = state.stack;
        var n = prog[++ip];

        if (exports.DEBUG) { console.log(state.step, 'NPUSHW[]', n); }

        for (var i = 0; i < n; i++) {
            var w = (prog[++ip] << 8) | prog[++ip];
            if (w & 0x8000) { w = -((w ^ 0xffff) + 1); }
            stack.push(w);
        }

        state.ip = ip;
    }

    // WS[] Write Store
    // 0x42
    function WS$1(state) {
        var stack = state.stack;
        var store = state.store;

        if (!store) { store = state.store = []; }

        var v = stack.pop();
        var l = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'WS', v, l); }

        store[l] = v;
    }

    // RS[] Read Store
    // 0x43
    function RS(state) {
        var stack = state.stack;
        var store = state.store;

        var l = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'RS', l); }

        var v = (store && store[l]) || 0;

        stack.push(v);
    }

    // WCVTP[] Write Control Value Table in Pixel units
    // 0x44
    function WCVTP(state) {
        var stack = state.stack;

        var v = stack.pop();
        var l = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'WCVTP', v, l); }

        state.cvt[l] = v / 0x40;
    }

    // RCVT[] Read Control Value Table entry
    // 0x45
    function RCVT(state) {
        var stack = state.stack;
        var cvte = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'RCVT', cvte); }

        stack.push(state.cvt[cvte] * 0x40);
    }

    // GC[] Get Coordinate projected onto the projection vector
    // 0x46-0x47
    function GC(a, state) {
        var stack = state.stack;
        var pi = stack.pop();
        var p = state.z2[pi];

        if (exports.DEBUG) { console.log(state.step, 'GC[' + a + ']', pi); }

        stack.push(state.dpv.distance(p, HPZero, a, false) * 0x40);
    }

    // MD[a] Measure Distance
    // 0x49-0x4A
    function MD(a, state) {
        var stack = state.stack;
        var pi2 = stack.pop();
        var pi1 = stack.pop();
        var p2 = state.z1[pi2];
        var p1 = state.z0[pi1];
        var d = state.dpv.distance(p1, p2, a, a);

        if (exports.DEBUG) { console.log(state.step, 'MD[' + a + ']', pi2, pi1, '->', d); }

        state.stack.push(Math.round(d * 64));
    }

    // MPPEM[] Measure Pixels Per EM
    // 0x4B
    function MPPEM(state) {
        if (exports.DEBUG) { console.log(state.step, 'MPPEM[]'); }
        state.stack.push(state.ppem);
    }

    // FLIPON[] set the auto FLIP Boolean to ON
    // 0x4D
    function FLIPON(state) {
        if (exports.DEBUG) { console.log(state.step, 'FLIPON[]'); }
        state.autoFlip = true;
    }

    // LT[] Less Than
    // 0x50
    function LT(state) {
        var stack = state.stack;
        var e2 = stack.pop();
        var e1 = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'LT[]', e2, e1); }

        stack.push(e1 < e2 ? 1 : 0);
    }

    // LTEQ[] Less Than or EQual
    // 0x53
    function LTEQ(state) {
        var stack = state.stack;
        var e2 = stack.pop();
        var e1 = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'LTEQ[]', e2, e1); }

        stack.push(e1 <= e2 ? 1 : 0);
    }

    // GTEQ[] Greater Than
    // 0x52
    function GT(state) {
        var stack = state.stack;
        var e2 = stack.pop();
        var e1 = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'GT[]', e2, e1); }

        stack.push(e1 > e2 ? 1 : 0);
    }

    // GTEQ[] Greater Than or EQual
    // 0x53
    function GTEQ(state) {
        var stack = state.stack;
        var e2 = stack.pop();
        var e1 = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'GTEQ[]', e2, e1); }

        stack.push(e1 >= e2 ? 1 : 0);
    }

    // EQ[] EQual
    // 0x54
    function EQ(state) {
        var stack = state.stack;
        var e2 = stack.pop();
        var e1 = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'EQ[]', e2, e1); }

        stack.push(e2 === e1 ? 1 : 0);
    }

    // NEQ[] Not EQual
    // 0x55
    function NEQ(state) {
        var stack = state.stack;
        var e2 = stack.pop();
        var e1 = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'NEQ[]', e2, e1); }

        stack.push(e2 !== e1 ? 1 : 0);
    }

    // ODD[] ODD
    // 0x56
    function ODD(state) {
        var stack = state.stack;
        var n = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'ODD[]', n); }

        stack.push(Math.trunc(n) % 2 ? 1 : 0);
    }

    // EVEN[] EVEN
    // 0x57
    function EVEN(state) {
        var stack = state.stack;
        var n = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'EVEN[]', n); }

        stack.push(Math.trunc(n) % 2 ? 0 : 1);
    }

    // IF[] IF test
    // 0x58
    function IF(state) {
        var test = state.stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'IF[]', test); }

        // if test is true it just continues
        // if not the ip is skipped until matching ELSE or EIF
        if (!test) {
            skip(state, true);

            if (exports.DEBUG) { console.log(state.step,  'EIF[]'); }
        }
    }

    // EIF[] End IF
    // 0x59
    function EIF(state) {
        // this can be reached normally when
        // executing an else branch.
        // -> just ignore it

        if (exports.DEBUG) { console.log(state.step, 'EIF[]'); }
    }

    // AND[] logical AND
    // 0x5A
    function AND(state) {
        var stack = state.stack;
        var e2 = stack.pop();
        var e1 = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'AND[]', e2, e1); }

        stack.push(e2 && e1 ? 1 : 0);
    }

    // OR[] logical OR
    // 0x5B
    function OR(state) {
        var stack = state.stack;
        var e2 = stack.pop();
        var e1 = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'OR[]', e2, e1); }

        stack.push(e2 || e1 ? 1 : 0);
    }

    // NOT[] logical NOT
    // 0x5C
    function NOT(state) {
        var stack = state.stack;
        var e = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'NOT[]', e); }

        stack.push(e ? 0 : 1);
    }

    // DELTAP1[] DELTA exception P1
    // DELTAP2[] DELTA exception P2
    // DELTAP3[] DELTA exception P3
    // 0x5D, 0x71, 0x72
    function DELTAP123(b, state) {
        var stack = state.stack;
        var n = stack.pop();
        var fv = state.fv;
        var pv = state.pv;
        var ppem = state.ppem;
        var base = state.deltaBase + (b - 1) * 16;
        var ds = state.deltaShift;
        var z0 = state.z0;

        if (exports.DEBUG) { console.log(state.step, 'DELTAP[' + b + ']', n, stack); }

        for (var i = 0; i < n; i++) {
            var pi = stack.pop();
            var arg = stack.pop();
            var appem = base + ((arg & 0xF0) >> 4);
            if (appem !== ppem) { continue; }

            var mag = (arg & 0x0F) - 8;
            if (mag >= 0) { mag++; }
            if (exports.DEBUG) { console.log(state.step, 'DELTAPFIX', pi, 'by', mag * ds); }

            var p = z0[pi];
            fv.setRelative(p, p, mag * ds, pv);
        }
    }

    // SDB[] Set Delta Base in the graphics state
    // 0x5E
    function SDB(state) {
        var stack = state.stack;
        var n = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'SDB[]', n); }

        state.deltaBase = n;
    }

    // SDS[] Set Delta Shift in the graphics state
    // 0x5F
    function SDS(state) {
        var stack = state.stack;
        var n = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'SDS[]', n); }

        state.deltaShift = Math.pow(0.5, n);
    }

    // ADD[] ADD
    // 0x60
    function ADD(state) {
        var stack = state.stack;
        var n2 = stack.pop();
        var n1 = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'ADD[]', n2, n1); }

        stack.push(n1 + n2);
    }

    // SUB[] SUB
    // 0x61
    function SUB(state) {
        var stack = state.stack;
        var n2 = stack.pop();
        var n1 = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'SUB[]', n2, n1); }

        stack.push(n1 - n2);
    }

    // DIV[] DIV
    // 0x62
    function DIV(state) {
        var stack = state.stack;
        var n2 = stack.pop();
        var n1 = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'DIV[]', n2, n1); }

        stack.push(n1 * 64 / n2);
    }

    // MUL[] MUL
    // 0x63
    function MUL(state) {
        var stack = state.stack;
        var n2 = stack.pop();
        var n1 = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'MUL[]', n2, n1); }

        stack.push(n1 * n2 / 64);
    }

    // ABS[] ABSolute value
    // 0x64
    function ABS(state) {
        var stack = state.stack;
        var n = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'ABS[]', n); }

        stack.push(Math.abs(n));
    }

    // NEG[] NEGate
    // 0x65
    function NEG(state) {
        var stack = state.stack;
        var n = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'NEG[]', n); }

        stack.push(-n);
    }

    // FLOOR[] FLOOR
    // 0x66
    function FLOOR(state) {
        var stack = state.stack;
        var n = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'FLOOR[]', n); }

        stack.push(Math.floor(n / 0x40) * 0x40);
    }

    // CEILING[] CEILING
    // 0x67
    function CEILING(state) {
        var stack = state.stack;
        var n = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'CEILING[]', n); }

        stack.push(Math.ceil(n / 0x40) * 0x40);
    }

    // ROUND[ab] ROUND value
    // 0x68-0x6B
    function ROUND(dt, state) {
        var stack = state.stack;
        var n = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'ROUND[]'); }

        stack.push(state.round(n / 0x40) * 0x40);
    }

    // WCVTF[] Write Control Value Table in Funits
    // 0x70
    function WCVTF(state) {
        var stack = state.stack;
        var v = stack.pop();
        var l = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'WCVTF[]', v, l); }

        state.cvt[l] = v * state.ppem / state.font.unitsPerEm;
    }

    // DELTAC1[] DELTA exception C1
    // DELTAC2[] DELTA exception C2
    // DELTAC3[] DELTA exception C3
    // 0x73, 0x74, 0x75
    function DELTAC123(b, state) {
        var stack = state.stack;
        var n = stack.pop();
        var ppem = state.ppem;
        var base = state.deltaBase + (b - 1) * 16;
        var ds = state.deltaShift;

        if (exports.DEBUG) { console.log(state.step, 'DELTAC[' + b + ']', n, stack); }

        for (var i = 0; i < n; i++) {
            var c = stack.pop();
            var arg = stack.pop();
            var appem = base + ((arg & 0xF0) >> 4);
            if (appem !== ppem) { continue; }

            var mag = (arg & 0x0F) - 8;
            if (mag >= 0) { mag++; }

            var delta = mag * ds;

            if (exports.DEBUG) { console.log(state.step, 'DELTACFIX', c, 'by', delta); }

            state.cvt[c] += delta;
        }
    }

    // SROUND[] Super ROUND
    // 0x76
    function SROUND(state) {
        var n = state.stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'SROUND[]', n); }

        state.round = roundSuper;

        var period;

        switch (n & 0xC0) {
            case 0x00:
                period = 0.5;
                break;
            case 0x40:
                period = 1;
                break;
            case 0x80:
                period = 2;
                break;
            default:
                throw new Error('invalid SROUND value');
        }

        state.srPeriod = period;

        switch (n & 0x30) {
            case 0x00:
                state.srPhase = 0;
                break;
            case 0x10:
                state.srPhase = 0.25 * period;
                break;
            case 0x20:
                state.srPhase = 0.5  * period;
                break;
            case 0x30:
                state.srPhase = 0.75 * period;
                break;
            default: throw new Error('invalid SROUND value');
        }

        n &= 0x0F;

        if (n === 0) { state.srThreshold = 0; }
        else { state.srThreshold = (n / 8 - 0.5) * period; }
    }

    // S45ROUND[] Super ROUND 45 degrees
    // 0x77
    function S45ROUND(state) {
        var n = state.stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'S45ROUND[]', n); }

        state.round = roundSuper;

        var period;

        switch (n & 0xC0) {
            case 0x00:
                period = Math.sqrt(2) / 2;
                break;
            case 0x40:
                period = Math.sqrt(2);
                break;
            case 0x80:
                period = 2 * Math.sqrt(2);
                break;
            default:
                throw new Error('invalid S45ROUND value');
        }

        state.srPeriod = period;

        switch (n & 0x30) {
            case 0x00:
                state.srPhase = 0;
                break;
            case 0x10:
                state.srPhase = 0.25 * period;
                break;
            case 0x20:
                state.srPhase = 0.5  * period;
                break;
            case 0x30:
                state.srPhase = 0.75 * period;
                break;
            default:
                throw new Error('invalid S45ROUND value');
        }

        n &= 0x0F;

        if (n === 0) { state.srThreshold = 0; }
        else { state.srThreshold = (n / 8 - 0.5) * period; }
    }

    // ROFF[] Round Off
    // 0x7A
    function ROFF(state) {
        if (exports.DEBUG) { console.log(state.step, 'ROFF[]'); }

        state.round = roundOff;
    }

    // RUTG[] Round Up To Grid
    // 0x7C
    function RUTG(state) {
        if (exports.DEBUG) { console.log(state.step, 'RUTG[]'); }

        state.round = roundUpToGrid;
    }

    // RDTG[] Round Down To Grid
    // 0x7D
    function RDTG(state) {
        if (exports.DEBUG) { console.log(state.step, 'RDTG[]'); }

        state.round = roundDownToGrid;
    }

    // SCANCTRL[] SCAN conversion ConTRoL
    // 0x85
    function SCANCTRL(state) {
        var n = state.stack.pop();

        // ignored by opentype.js

        if (exports.DEBUG) { console.log(state.step, 'SCANCTRL[]', n); }
    }

    // SDPVTL[a] Set Dual Projection Vector To Line
    // 0x86-0x87
    function SDPVTL(a, state) {
        var stack = state.stack;
        var p2i = stack.pop();
        var p1i = stack.pop();
        var p2 = state.z2[p2i];
        var p1 = state.z1[p1i];

        if (exports.DEBUG) { console.log(state.step, 'SDPVTL[' + a + ']', p2i, p1i); }

        var dx;
        var dy;

        if (!a) {
            dx = p1.x - p2.x;
            dy = p1.y - p2.y;
        } else {
            dx = p2.y - p1.y;
            dy = p1.x - p2.x;
        }

        state.dpv = getUnitVector(dx, dy);
    }

    // GETINFO[] GET INFOrmation
    // 0x88
    function GETINFO(state) {
        var stack = state.stack;
        var sel = stack.pop();
        var r = 0;

        if (exports.DEBUG) { console.log(state.step, 'GETINFO[]', sel); }

        // v35 as in no subpixel hinting
        if (sel & 0x01) { r = 35; }

        // TODO rotation and stretch currently not supported
        // and thus those GETINFO are always 0.

        // opentype.js is always gray scaling
        if (sel & 0x20) { r |= 0x1000; }

        stack.push(r);
    }

    // ROLL[] ROLL the top three stack elements
    // 0x8A
    function ROLL(state) {
        var stack = state.stack;
        var a = stack.pop();
        var b = stack.pop();
        var c = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'ROLL[]'); }

        stack.push(b);
        stack.push(a);
        stack.push(c);
    }

    // MAX[] MAXimum of top two stack elements
    // 0x8B
    function MAX(state) {
        var stack = state.stack;
        var e2 = stack.pop();
        var e1 = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'MAX[]', e2, e1); }

        stack.push(Math.max(e1, e2));
    }

    // MIN[] MINimum of top two stack elements
    // 0x8C
    function MIN(state) {
        var stack = state.stack;
        var e2 = stack.pop();
        var e1 = stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'MIN[]', e2, e1); }

        stack.push(Math.min(e1, e2));
    }

    // SCANTYPE[] SCANTYPE
    // 0x8D
    function SCANTYPE(state) {
        var n = state.stack.pop();
        // ignored by opentype.js
        if (exports.DEBUG) { console.log(state.step, 'SCANTYPE[]', n); }
    }

    // INSTCTRL[] INSTCTRL
    // 0x8D
    function INSTCTRL(state) {
        var s = state.stack.pop();
        var v = state.stack.pop();

        if (exports.DEBUG) { console.log(state.step, 'INSTCTRL[]', s, v); }

        switch (s) {
            case 1 : state.inhibitGridFit = !!v; return;
            case 2 : state.ignoreCvt = !!v; return;
            default: throw new Error('invalid INSTCTRL[] selector');
        }
    }

    // PUSHB[abc] PUSH Bytes
    // 0xB0-0xB7
    function PUSHB(n, state) {
        var stack = state.stack;
        var prog = state.prog;
        var ip = state.ip;

        if (exports.DEBUG) { console.log(state.step, 'PUSHB[' + n + ']'); }

        for (var i = 0; i < n; i++) { stack.push(prog[++ip]); }

        state.ip = ip;
    }

    // PUSHW[abc] PUSH Words
    // 0xB8-0xBF
    function PUSHW(n, state) {
        var ip = state.ip;
        var prog = state.prog;
        var stack = state.stack;

        if (exports.DEBUG) { console.log(state.ip, 'PUSHW[' + n + ']'); }

        for (var i = 0; i < n; i++) {
            var w = (prog[++ip] << 8) | prog[++ip];
            if (w & 0x8000) { w = -((w ^ 0xffff) + 1); }
            stack.push(w);
        }

        state.ip = ip;
    }

    // MDRP[abcde] Move Direct Relative Point
    // 0xD0-0xEF
    // (if indirect is 0)
    //
    // and
    //
    // MIRP[abcde] Move Indirect Relative Point
    // 0xE0-0xFF
    // (if indirect is 1)

    function MDRP_MIRP(indirect, setRp0, keepD, ro, dt, state) {
        var stack = state.stack;
        var cvte = indirect && stack.pop();
        var pi = stack.pop();
        var rp0i = state.rp0;
        var rp = state.z0[rp0i];
        var p = state.z1[pi];

        var md = state.minDis;
        var fv = state.fv;
        var pv = state.dpv;
        var od; // original distance
        var d; // moving distance
        var sign; // sign of distance
        var cv;

        d = od = pv.distance(p, rp, true, true);
        sign = d >= 0 ? 1 : -1; // Math.sign would be 0 in case of 0

        // TODO consider autoFlip
        d = Math.abs(d);

        if (indirect) {
            cv = state.cvt[cvte];

            if (ro && Math.abs(d - cv) < state.cvCutIn) { d = cv; }
        }

        if (keepD && d < md) { d = md; }

        if (ro) { d = state.round(d); }

        fv.setRelative(p, rp, sign * d, pv);
        fv.touch(p);

        if (exports.DEBUG) {
            console.log(
                state.step,
                (indirect ? 'MIRP[' : 'MDRP[') +
                (setRp0 ? 'M' : 'm') +
                (keepD ? '>' : '_') +
                (ro ? 'R' : '_') +
                (dt === 0 ? 'Gr' : (dt === 1 ? 'Bl' : (dt === 2 ? 'Wh' : ''))) +
                ']',
                indirect ?
                    cvte + '(' + state.cvt[cvte] + ',' +  cv + ')' :
                    '',
                pi,
                '(d =', od, '->', sign * d, ')'
            );
        }

        state.rp1 = state.rp0;
        state.rp2 = pi;
        if (setRp0) { state.rp0 = pi; }
    }

    /*
    * The instruction table.
    */
    instructionTable = [
        /* 0x00 */ SVTCA.bind(undefined, yUnitVector),
        /* 0x01 */ SVTCA.bind(undefined, xUnitVector),
        /* 0x02 */ SPVTCA.bind(undefined, yUnitVector),
        /* 0x03 */ SPVTCA.bind(undefined, xUnitVector),
        /* 0x04 */ SFVTCA.bind(undefined, yUnitVector),
        /* 0x05 */ SFVTCA.bind(undefined, xUnitVector),
        /* 0x06 */ SPVTL.bind(undefined, 0),
        /* 0x07 */ SPVTL.bind(undefined, 1),
        /* 0x08 */ SFVTL.bind(undefined, 0),
        /* 0x09 */ SFVTL.bind(undefined, 1),
        /* 0x0A */ SPVFS,
        /* 0x0B */ SFVFS,
        /* 0x0C */ GPV,
        /* 0x0D */ GFV,
        /* 0x0E */ SFVTPV,
        /* 0x0F */ ISECT,
        /* 0x10 */ SRP0,
        /* 0x11 */ SRP1,
        /* 0x12 */ SRP2,
        /* 0x13 */ SZP0,
        /* 0x14 */ SZP1,
        /* 0x15 */ SZP2,
        /* 0x16 */ SZPS,
        /* 0x17 */ SLOOP,
        /* 0x18 */ RTG,
        /* 0x19 */ RTHG,
        /* 0x1A */ SMD,
        /* 0x1B */ ELSE,
        /* 0x1C */ JMPR,
        /* 0x1D */ SCVTCI,
        /* 0x1E */ undefined,   // TODO SSWCI
        /* 0x1F */ undefined,   // TODO SSW
        /* 0x20 */ DUP,
        /* 0x21 */ POP,
        /* 0x22 */ CLEAR,
        /* 0x23 */ SWAP,
        /* 0x24 */ DEPTH,
        /* 0x25 */ CINDEX,
        /* 0x26 */ MINDEX,
        /* 0x27 */ undefined,   // TODO ALIGNPTS
        /* 0x28 */ undefined,
        /* 0x29 */ undefined,   // TODO UTP
        /* 0x2A */ LOOPCALL,
        /* 0x2B */ CALL,
        /* 0x2C */ FDEF,
        /* 0x2D */ undefined,   // ENDF (eaten by FDEF)
        /* 0x2E */ MDAP.bind(undefined, 0),
        /* 0x2F */ MDAP.bind(undefined, 1),
        /* 0x30 */ IUP.bind(undefined, yUnitVector),
        /* 0x31 */ IUP.bind(undefined, xUnitVector),
        /* 0x32 */ SHP.bind(undefined, 0),
        /* 0x33 */ SHP.bind(undefined, 1),
        /* 0x34 */ SHC.bind(undefined, 0),
        /* 0x35 */ SHC.bind(undefined, 1),
        /* 0x36 */ SHZ.bind(undefined, 0),
        /* 0x37 */ SHZ.bind(undefined, 1),
        /* 0x38 */ SHPIX,
        /* 0x39 */ IP,
        /* 0x3A */ MSIRP.bind(undefined, 0),
        /* 0x3B */ MSIRP.bind(undefined, 1),
        /* 0x3C */ ALIGNRP,
        /* 0x3D */ RTDG,
        /* 0x3E */ MIAP.bind(undefined, 0),
        /* 0x3F */ MIAP.bind(undefined, 1),
        /* 0x40 */ NPUSHB,
        /* 0x41 */ NPUSHW,
        /* 0x42 */ WS$1,
        /* 0x43 */ RS,
        /* 0x44 */ WCVTP,
        /* 0x45 */ RCVT,
        /* 0x46 */ GC.bind(undefined, 0),
        /* 0x47 */ GC.bind(undefined, 1),
        /* 0x48 */ undefined,   // TODO SCFS
        /* 0x49 */ MD.bind(undefined, 0),
        /* 0x4A */ MD.bind(undefined, 1),
        /* 0x4B */ MPPEM,
        /* 0x4C */ undefined,   // TODO MPS
        /* 0x4D */ FLIPON,
        /* 0x4E */ undefined,   // TODO FLIPOFF
        /* 0x4F */ undefined,   // TODO DEBUG
        /* 0x50 */ LT,
        /* 0x51 */ LTEQ,
        /* 0x52 */ GT,
        /* 0x53 */ GTEQ,
        /* 0x54 */ EQ,
        /* 0x55 */ NEQ,
        /* 0x56 */ ODD,
        /* 0x57 */ EVEN,
        /* 0x58 */ IF,
        /* 0x59 */ EIF,
        /* 0x5A */ AND,
        /* 0x5B */ OR,
        /* 0x5C */ NOT,
        /* 0x5D */ DELTAP123.bind(undefined, 1),
        /* 0x5E */ SDB,
        /* 0x5F */ SDS,
        /* 0x60 */ ADD,
        /* 0x61 */ SUB,
        /* 0x62 */ DIV,
        /* 0x63 */ MUL,
        /* 0x64 */ ABS,
        /* 0x65 */ NEG,
        /* 0x66 */ FLOOR,
        /* 0x67 */ CEILING,
        /* 0x68 */ ROUND.bind(undefined, 0),
        /* 0x69 */ ROUND.bind(undefined, 1),
        /* 0x6A */ ROUND.bind(undefined, 2),
        /* 0x6B */ ROUND.bind(undefined, 3),
        /* 0x6C */ undefined,   // TODO NROUND[ab]
        /* 0x6D */ undefined,   // TODO NROUND[ab]
        /* 0x6E */ undefined,   // TODO NROUND[ab]
        /* 0x6F */ undefined,   // TODO NROUND[ab]
        /* 0x70 */ WCVTF,
        /* 0x71 */ DELTAP123.bind(undefined, 2),
        /* 0x72 */ DELTAP123.bind(undefined, 3),
        /* 0x73 */ DELTAC123.bind(undefined, 1),
        /* 0x74 */ DELTAC123.bind(undefined, 2),
        /* 0x75 */ DELTAC123.bind(undefined, 3),
        /* 0x76 */ SROUND,
        /* 0x77 */ S45ROUND,
        /* 0x78 */ undefined,   // TODO JROT[]
        /* 0x79 */ undefined,   // TODO JROF[]
        /* 0x7A */ ROFF,
        /* 0x7B */ undefined,
        /* 0x7C */ RUTG,
        /* 0x7D */ RDTG,
        /* 0x7E */ POP, // actually SANGW, supposed to do only a pop though
        /* 0x7F */ POP, // actually AA, supposed to do only a pop though
        /* 0x80 */ undefined,   // TODO FLIPPT
        /* 0x81 */ undefined,   // TODO FLIPRGON
        /* 0x82 */ undefined,   // TODO FLIPRGOFF
        /* 0x83 */ undefined,
        /* 0x84 */ undefined,
        /* 0x85 */ SCANCTRL,
        /* 0x86 */ SDPVTL.bind(undefined, 0),
        /* 0x87 */ SDPVTL.bind(undefined, 1),
        /* 0x88 */ GETINFO,
        /* 0x89 */ undefined,   // TODO IDEF
        /* 0x8A */ ROLL,
        /* 0x8B */ MAX,
        /* 0x8C */ MIN,
        /* 0x8D */ SCANTYPE,
        /* 0x8E */ INSTCTRL,
        /* 0x8F */ undefined,
        /* 0x90 */ undefined,
        /* 0x91 */ undefined,
        /* 0x92 */ undefined,
        /* 0x93 */ undefined,
        /* 0x94 */ undefined,
        /* 0x95 */ undefined,
        /* 0x96 */ undefined,
        /* 0x97 */ undefined,
        /* 0x98 */ undefined,
        /* 0x99 */ undefined,
        /* 0x9A */ undefined,
        /* 0x9B */ undefined,
        /* 0x9C */ undefined,
        /* 0x9D */ undefined,
        /* 0x9E */ undefined,
        /* 0x9F */ undefined,
        /* 0xA0 */ undefined,
        /* 0xA1 */ undefined,
        /* 0xA2 */ undefined,
        /* 0xA3 */ undefined,
        /* 0xA4 */ undefined,
        /* 0xA5 */ undefined,
        /* 0xA6 */ undefined,
        /* 0xA7 */ undefined,
        /* 0xA8 */ undefined,
        /* 0xA9 */ undefined,
        /* 0xAA */ undefined,
        /* 0xAB */ undefined,
        /* 0xAC */ undefined,
        /* 0xAD */ undefined,
        /* 0xAE */ undefined,
        /* 0xAF */ undefined,
        /* 0xB0 */ PUSHB.bind(undefined, 1),
        /* 0xB1 */ PUSHB.bind(undefined, 2),
        /* 0xB2 */ PUSHB.bind(undefined, 3),
        /* 0xB3 */ PUSHB.bind(undefined, 4),
        /* 0xB4 */ PUSHB.bind(undefined, 5),
        /* 0xB5 */ PUSHB.bind(undefined, 6),
        /* 0xB6 */ PUSHB.bind(undefined, 7),
        /* 0xB7 */ PUSHB.bind(undefined, 8),
        /* 0xB8 */ PUSHW.bind(undefined, 1),
        /* 0xB9 */ PUSHW.bind(undefined, 2),
        /* 0xBA */ PUSHW.bind(undefined, 3),
        /* 0xBB */ PUSHW.bind(undefined, 4),
        /* 0xBC */ PUSHW.bind(undefined, 5),
        /* 0xBD */ PUSHW.bind(undefined, 6),
        /* 0xBE */ PUSHW.bind(undefined, 7),
        /* 0xBF */ PUSHW.bind(undefined, 8),
        /* 0xC0 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 0),
        /* 0xC1 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 1),
        /* 0xC2 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 2),
        /* 0xC3 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 3),
        /* 0xC4 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 0),
        /* 0xC5 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 1),
        /* 0xC6 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 2),
        /* 0xC7 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 3),
        /* 0xC8 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 0),
        /* 0xC9 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 1),
        /* 0xCA */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 2),
        /* 0xCB */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 3),
        /* 0xCC */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 0),
        /* 0xCD */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 1),
        /* 0xCE */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 2),
        /* 0xCF */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 3),
        /* 0xD0 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 0),
        /* 0xD1 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 1),
        /* 0xD2 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 2),
        /* 0xD3 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 3),
        /* 0xD4 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 0),
        /* 0xD5 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 1),
        /* 0xD6 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 2),
        /* 0xD7 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 3),
        /* 0xD8 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 0),
        /* 0xD9 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 1),
        /* 0xDA */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 2),
        /* 0xDB */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 3),
        /* 0xDC */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 0),
        /* 0xDD */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 1),
        /* 0xDE */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 2),
        /* 0xDF */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 3),
        /* 0xE0 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 0),
        /* 0xE1 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 1),
        /* 0xE2 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 2),
        /* 0xE3 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 3),
        /* 0xE4 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 0),
        /* 0xE5 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 1),
        /* 0xE6 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 2),
        /* 0xE7 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 3),
        /* 0xE8 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 0),
        /* 0xE9 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 1),
        /* 0xEA */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 2),
        /* 0xEB */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 3),
        /* 0xEC */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 0),
        /* 0xED */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 1),
        /* 0xEE */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 2),
        /* 0xEF */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 3),
        /* 0xF0 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 0),
        /* 0xF1 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 1),
        /* 0xF2 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 2),
        /* 0xF3 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 3),
        /* 0xF4 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 0),
        /* 0xF5 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 1),
        /* 0xF6 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 2),
        /* 0xF7 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 3),
        /* 0xF8 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 0),
        /* 0xF9 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 1),
        /* 0xFA */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 2),
        /* 0xFB */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 3),
        /* 0xFC */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 0),
        /* 0xFD */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 1),
        /* 0xFE */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 2),
        /* 0xFF */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 3)
    ];

    /*****************************
      Mathematical Considerations
    ******************************

    fv ... refers to freedom vector
    pv ... refers to projection vector
    rp ... refers to reference point
    p  ... refers to to point being operated on
    d  ... refers to distance

    SETRELATIVE:
    ============

    case freedom vector == x-axis:
    ------------------------------

                            (pv)
                         .-'
                  rpd .-'
                   .-*
              d .-'90°'
             .-'       '
          .-'           '
       *-'               ' b
      rp                  '
                           '
                            '
                p *----------*-------------- (fv)
                              pm

      rpdx = rpx + d * pv.x
      rpdy = rpy + d * pv.y

      equation of line b

       y - rpdy = pvns * (x- rpdx)

       y = p.y

       x = rpdx + ( p.y - rpdy ) / pvns


    case freedom vector == y-axis:
    ------------------------------

        * pm
        |\
        | \
        |  \
        |   \
        |    \
        |     \
        |      \
        |       \
        |        \
        |         \ b
        |          \
        |           \
        |            \    .-' (pv)
        |         90° \.-'
        |           .-'* rpd
        |        .-'
        *     *-'  d
        p     rp

      rpdx = rpx + d * pv.x
      rpdy = rpy + d * pv.y

      equation of line b:
               pvns ... normal slope to pv

       y - rpdy = pvns * (x - rpdx)

       x = p.x

       y = rpdy +  pvns * (p.x - rpdx)



    generic case:
    -------------


                                  .'(fv)
                                .'
                              .* pm
                            .' !
                          .'    .
                        .'      !
                      .'         . b
                    .'           !
                   *              .
                  p               !
                             90°   .    ... (pv)
                               ...-*-'''
                      ...---'''    rpd
             ...---'''   d
       *--'''
      rp

        rpdx = rpx + d * pv.x
        rpdy = rpy + d * pv.y

     equation of line b:
        pvns... normal slope to pv

        y - rpdy = pvns * (x - rpdx)

     equation of freedom vector line:
        fvs ... slope of freedom vector (=fy/fx)

        y - py = fvs * (x - px)


      on pm both equations are true for same x/y

        y - rpdy = pvns * (x - rpdx)

        y - py = fvs * (x - px)

      form to y and set equal:

        pvns * (x - rpdx) + rpdy = fvs * (x - px) + py

      expand:

        pvns * x - pvns * rpdx + rpdy = fvs * x - fvs * px + py

      switch:

        fvs * x - fvs * px + py = pvns * x - pvns * rpdx + rpdy

      solve for x:

        fvs * x - pvns * x = fvs * px - pvns * rpdx - py + rpdy



              fvs * px - pvns * rpdx + rpdy - py
        x =  -----------------------------------
                     fvs - pvns

      and:

        y = fvs * (x - px) + py



    INTERPOLATE:
    ============

    Examples of point interpolation.

    The weight of the movement of the reference point gets bigger
    the further the other reference point is away, thus the safest
    option (that is avoiding 0/0 divisions) is to weight the
    original distance of the other point by the sum of both distances.

    If the sum of both distances is 0, then move the point by the
    arithmetic average of the movement of both reference points.




               (+6)
        rp1o *---->*rp1
             .     .                          (+12)
             .     .                  rp2o *---------->* rp2
             .     .                       .           .
             .     .                       .           .
             .    10          20           .           .
             |.........|...................|           .
                   .   .                               .
                   .   . (+8)                          .
                    po *------>*p                      .
                   .           .                       .
                   .    12     .          24           .
                   |...........|.......................|
                                      36


    -------



               (+10)
        rp1o *-------->*rp1
             .         .                      (-10)
             .         .              rp2 *<---------* rpo2
             .         .                   .         .
             .         .                   .         .
             .    10   .          30       .         .
             |.........|.............................|
                       .                   .
                       . (+5)              .
                    po *--->* p            .
                       .    .              .
                       .    .   20         .
                       |....|..............|
                         5        15


    -------


               (+10)
        rp1o *-------->*rp1
             .         .
             .         .
        rp2o *-------->*rp2


                                   (+10)
                              po *-------->* p

    -------


               (+10)
        rp1o *-------->*rp1
             .         .
             .         .(+30)
        rp2o *---------------------------->*rp2


                                            (+25)
                              po *----------------------->* p



    vim: set ts=4 sw=4 expandtab:
    *****/

    /**
     * Converts a string into a list of tokens.
     */

    /**
     * Create a new token
     * @param {string} char a single char
     */
    function Token(char) {
        this.char = char;
        this.state = {};
        this.activeState = null;
    }

    /**
     * Create a new context range
     * @param {number} startIndex range start index
     * @param {number} endOffset range end index offset
     * @param {string} contextName owner context name
     */
    function ContextRange(startIndex, endOffset, contextName) {
        this.contextName = contextName;
        this.startIndex = startIndex;
        this.endOffset = endOffset;
    }

    /**
     * Check context start and end
     * @param {string} contextName a unique context name
     * @param {function} checkStart a predicate function the indicates a context's start
     * @param {function} checkEnd a predicate function the indicates a context's end
     */
    function ContextChecker(contextName, checkStart, checkEnd) {
        this.contextName = contextName;
        this.openRange = null;
        this.ranges = [];
        this.checkStart = checkStart;
        this.checkEnd = checkEnd;
    }

    /**
     * @typedef ContextParams
     * @type Object
     * @property {array} context context items
     * @property {number} currentIndex current item index
     */

    /**
     * Create a context params
     * @param {array} context a list of items
     * @param {number} currentIndex current item index
     */
    function ContextParams(context, currentIndex) {
        this.context = context;
        this.index = currentIndex;
        this.length = context.length;
        this.current = context[currentIndex];
        this.backtrack = context.slice(0, currentIndex);
        this.lookahead = context.slice(currentIndex + 1);
    }

    /**
     * Create an event instance
     * @param {string} eventId event unique id
     */
    function Event(eventId) {
        this.eventId = eventId;
        this.subscribers = [];
    }

    /**
     * Initialize a core events and auto subscribe required event handlers
     * @param {any} events an object that enlists core events handlers
     */
    function initializeCoreEvents(events) {
        var this$1 = this;

        var coreEvents = [
            'start', 'end', 'next', 'newToken', 'contextStart',
            'contextEnd', 'insertToken', 'removeToken', 'removeRange',
            'replaceToken', 'replaceRange', 'composeRUD', 'updateContextsRanges'
        ];

        coreEvents.forEach(function (eventId) {
            Object.defineProperty(this$1.events, eventId, {
                value: new Event(eventId)
            });
        });

        if (!!events) {
            coreEvents.forEach(function (eventId) {
                var event = events[eventId];
                if (typeof event === 'function') {
                    this$1.events[eventId].subscribe(event);
                }
            });
        }
        var requiresContextUpdate = [
            'insertToken', 'removeToken', 'removeRange',
            'replaceToken', 'replaceRange', 'composeRUD'
        ];
        requiresContextUpdate.forEach(function (eventId) {
            this$1.events[eventId].subscribe(
                this$1.updateContextsRanges
            );
        });
    }

    /**
     * Converts a string into a list of tokens
     * @param {any} events tokenizer core events
     */
    function Tokenizer(events) {
        this.tokens = [];
        this.registeredContexts = {};
        this.contextCheckers = [];
        this.events = {};
        this.registeredModifiers = [];

        initializeCoreEvents.call(this, events);
    }

    /**
     * Sets the state of a token, usually called by a state modifier.
     * @param {string} key state item key
     * @param {any} value state item value
     */
    Token.prototype.setState = function(key, value) {
        this.state[key] = value;
        this.activeState = { key: key, value: this.state[key] };
        return this.activeState;
    };

    Token.prototype.getState = function (stateId) {
        return this.state[stateId] || null;
    };

    /**
     * Checks if an index exists in the tokens list.
     * @param {number} index token index
     */
    Tokenizer.prototype.inboundIndex = function(index) {
        return index >= 0 && index < this.tokens.length;
    };

    /**
     * Compose and apply a list of operations (replace, update, delete)
     * @param {array} RUDs replace, update and delete operations
     * TODO: Perf. Optimization (lengthBefore === lengthAfter ? dispatch once)
     */
    Tokenizer.prototype.composeRUD = function (RUDs) {
        var this$1 = this;

        var silent = true;
        var state = RUDs.map(function (RUD) { return (
            this$1[RUD[0]].apply(this$1, RUD.slice(1).concat(silent))
        ); });
        var hasFAILObject = function (obj) { return (
            typeof obj === 'object' &&
            obj.hasOwnProperty('FAIL')
        ); };
        if (state.every(hasFAILObject)) {
            return {
                FAIL: "composeRUD: one or more operations hasn't completed successfully",
                report: state.filter(hasFAILObject)
            };
        }
        this.dispatch('composeRUD', [state.filter(function (op) { return !hasFAILObject(op); })]);
    };

    /**
     * Replace a range of tokens with a list of tokens
     * @param {number} startIndex range start index
     * @param {number} offset range offset
     * @param {token} tokens a list of tokens to replace
     * @param {boolean} silent dispatch events and update context ranges
     */
    Tokenizer.prototype.replaceRange = function (startIndex, offset, tokens, silent) {
        offset = offset !== null ? offset : this.tokens.length;
        var isTokenType = tokens.every(function (token) { return token instanceof Token; });
        if (!isNaN(startIndex) && this.inboundIndex(startIndex) && isTokenType) {
            var replaced = this.tokens.splice.apply(
                this.tokens, [startIndex, offset].concat(tokens)
            );
            if (!silent) { this.dispatch('replaceToken', [startIndex, offset, tokens]); }
            return [replaced, tokens];
        } else {
            return { FAIL: 'replaceRange: invalid tokens or startIndex.' };
        }
    };

    /**
     * Replace a token with another token
     * @param {number} index token index
     * @param {token} token a token to replace
     * @param {boolean} silent dispatch events and update context ranges
     */
    Tokenizer.prototype.replaceToken = function (index, token, silent) {
        if (!isNaN(index) && this.inboundIndex(index) && token instanceof Token) {
            var replaced = this.tokens.splice(index, 1, token);
            if (!silent) { this.dispatch('replaceToken', [index, token]); }
            return [replaced[0], token];
        } else {
            return { FAIL: 'replaceToken: invalid token or index.' };
        }
    };

    /**
     * Removes a range of tokens
     * @param {number} startIndex range start index
     * @param {number} offset range offset
     * @param {boolean} silent dispatch events and update context ranges
     */
    Tokenizer.prototype.removeRange = function(startIndex, offset, silent) {
        offset = !isNaN(offset) ? offset : this.tokens.length;
        var tokens = this.tokens.splice(startIndex, offset);
        if (!silent) { this.dispatch('removeRange', [tokens, startIndex, offset]); }
        return tokens;
    };

    /**
     * Remove a token at a certain index
     * @param {number} index token index
     * @param {boolean} silent dispatch events and update context ranges
     */
    Tokenizer.prototype.removeToken = function(index, silent) {
        if (!isNaN(index) && this.inboundIndex(index)) {
            var token = this.tokens.splice(index, 1);
            if (!silent) { this.dispatch('removeToken', [token, index]); }
            return token;
        } else {
            return { FAIL: 'removeToken: invalid token index.' };
        }
    };

    /**
     * Insert a list of tokens at a certain index
     * @param {array} tokens a list of tokens to insert
     * @param {number} index insert the list of tokens at index
     * @param {boolean} silent dispatch events and update context ranges
     */
    Tokenizer.prototype.insertToken = function (tokens, index, silent) {
        var tokenType = tokens.every(
            function (token) { return token instanceof Token; }
        );
        if (tokenType) {
            this.tokens.splice.apply(
                this.tokens, [index, 0].concat(tokens)
            );
            if (!silent) { this.dispatch('insertToken', [tokens, index]); }
            return tokens;
        } else {
            return { FAIL: 'insertToken: invalid token(s).' };
        }
    };

    /**
     * A state modifier that is called on 'newToken' event
     * @param {string} modifierId state modifier id
     * @param {function} condition a predicate function that returns true or false
     * @param {function} modifier a function to update token state
     */
    Tokenizer.prototype.registerModifier = function(modifierId, condition, modifier) {
        this.events.newToken.subscribe(function(token, contextParams) {
            var conditionParams = [token, contextParams];
            var canApplyModifier = (
                condition === null ||
                condition.apply(this, conditionParams) === true
            );
            var modifierParams = [token, contextParams];
            if (canApplyModifier) {
                var newStateValue = modifier.apply(this, modifierParams);
                token.setState(modifierId, newStateValue);
            }
        });
        this.registeredModifiers.push(modifierId);
    };

    /**
     * Subscribe a handler to an event
     * @param {function} eventHandler an event handler function
     */
    Event.prototype.subscribe = function (eventHandler) {
        if (typeof eventHandler === 'function') {
            return ((this.subscribers.push(eventHandler)) - 1);
        } else {
            return { FAIL: ("invalid '" + (this.eventId) + "' event handler")};
        }
    };

    /**
     * Unsubscribe an event handler
     * @param {string} subsId subscription id
     */
    Event.prototype.unsubscribe = function (subsId) {
        this.subscribers.splice(subsId, 1);
    };

    /**
     * Sets context params current value index
     * @param {number} index context params current value index
     */
    ContextParams.prototype.setCurrentIndex = function(index) {
        this.index = index;
        this.current = this.context[index];
        this.backtrack = this.context.slice(0, index);
        this.lookahead = this.context.slice(index + 1);
    };

    /**
     * Get an item at an offset from the current value
     * example (current value is 3):
     *  1    2   [3]   4    5   |   items values
     * -2   -1    0    1    2   |   offset values
     * @param {number} offset an offset from current value index
     */
    ContextParams.prototype.get = function (offset) {
        switch (true) {
            case (offset === 0):
                return this.current;
            case (offset < 0 && Math.abs(offset) <= this.backtrack.length):
                return this.backtrack.slice(offset)[0];
            case (offset > 0 && offset <= this.lookahead.length):
                return this.lookahead[offset - 1];
            default:
                return null;
        }
    };

    /**
     * Converts a context range into a string value
     * @param {contextRange} range a context range
     */
    Tokenizer.prototype.rangeToText = function (range) {
        if (range instanceof ContextRange) {
            return (
                this.getRangeTokens(range)
                    .map(function (token) { return token.char; }).join('')
            );
        }
    };

    /**
     * Converts all tokens into a string
     */
    Tokenizer.prototype.getText = function () {
        return this.tokens.map(function (token) { return token.char; }).join('');
    };

    /**
     * Get a context by name
     * @param {string} contextName context name to get
     */
    Tokenizer.prototype.getContext = function (contextName) {
        var context = this.registeredContexts[contextName];
        return !!context ? context : null;
    };

    /**
     * Subscribes a new event handler to an event
     * @param {string} eventName event name to subscribe to
     * @param {function} eventHandler a function to be invoked on event
     */
    Tokenizer.prototype.on = function(eventName, eventHandler) {
        var event = this.events[eventName];
        if (!!event) {
            return event.subscribe(eventHandler);
        } else {
            return null;
        }
    };

    /**
     * Dispatches an event
     * @param {string} eventName event name
     * @param {any} args event handler arguments
     */
    Tokenizer.prototype.dispatch = function(eventName, args) {
        var this$1 = this;

        var event = this.events[eventName];
        if (event instanceof Event) {
            event.subscribers.forEach(function (subscriber) {
                subscriber.apply(this$1, args || []);
            });
        }
    };

    /**
     * Register a new context checker
     * @param {string} contextName a unique context name
     * @param {function} contextStartCheck a predicate function that returns true on context start
     * @param {function} contextEndCheck  a predicate function that returns true on context end
     * TODO: call tokenize on registration to update context ranges with the new context.
     */
    Tokenizer.prototype.registerContextChecker = function(contextName, contextStartCheck, contextEndCheck) {
        if (!!this.getContext(contextName)) { return {
            FAIL:
            ("context name '" + contextName + "' is already registered.")
        }; }
        if (typeof contextStartCheck !== 'function') { return {
            FAIL:
            "missing context start check."
        }; }
        if (typeof contextEndCheck !== 'function') { return {
            FAIL:
            "missing context end check."
        }; }
        var contextCheckers = new ContextChecker(
            contextName, contextStartCheck, contextEndCheck
        );
        this.registeredContexts[contextName] = contextCheckers;
        this.contextCheckers.push(contextCheckers);
        return contextCheckers;
    };

    /**
     * Gets a context range tokens
     * @param {contextRange} range a context range
     */
    Tokenizer.prototype.getRangeTokens = function(range) {
        var endIndex = range.startIndex + range.endOffset;
        return [].concat(
            this.tokens
                .slice(range.startIndex, endIndex)
        );
    };

    /**
     * Gets the ranges of a context
     * @param {string} contextName context name
     */
    Tokenizer.prototype.getContextRanges = function(contextName) {
        var context = this.getContext(contextName);
        if (!!context) {
            return context.ranges;
        } else {
            return { FAIL: ("context checker '" + contextName + "' is not registered.") };
        }
    };

    /**
     * Resets context ranges to run context update
     */
    Tokenizer.prototype.resetContextsRanges = function () {
        var registeredContexts = this.registeredContexts;
        for (var contextName in registeredContexts) {
            if (registeredContexts.hasOwnProperty(contextName)) {
                var context = registeredContexts[contextName];
                context.ranges = [];
            }
        }
    };

    /**
     * Updates context ranges
     */
    Tokenizer.prototype.updateContextsRanges = function () {
        this.resetContextsRanges();
        var chars = this.tokens.map(function (token) { return token.char; });
        for (var i = 0; i < chars.length; i++) {
            var contextParams = new ContextParams(chars, i);
            this.runContextCheck(contextParams);
        }
        this.dispatch('updateContextsRanges', [this.registeredContexts]);
    };

    /**
     * Sets the end offset of an open range
     * @param {number} offset range end offset
     * @param {string} contextName context name
     */
    Tokenizer.prototype.setEndOffset = function (offset, contextName) {
        var startIndex = this.getContext(contextName).openRange.startIndex;
        var range = new ContextRange(startIndex, offset, contextName);
        var ranges = this.getContext(contextName).ranges;
        range.rangeId = contextName + "." + (ranges.length);
        ranges.push(range);
        this.getContext(contextName).openRange = null;
        return range;
    };

    /**
     * Runs a context check on the current context
     * @param {contextParams} contextParams current context params
     */
    Tokenizer.prototype.runContextCheck = function(contextParams) {
        var this$1 = this;

        var index = contextParams.index;
        this.contextCheckers.forEach(function (contextChecker) {
            var contextName = contextChecker.contextName;
            var openRange = this$1.getContext(contextName).openRange;
            if (!openRange && contextChecker.checkStart(contextParams)) {
                openRange = new ContextRange(index, null, contextName);
                this$1.getContext(contextName).openRange = openRange;
                this$1.dispatch('contextStart', [contextName, index]);
            }
            if (!!openRange && contextChecker.checkEnd(contextParams)) {
                var offset = (index - openRange.startIndex) + 1;
                var range = this$1.setEndOffset(offset, contextName);
                this$1.dispatch('contextEnd', [contextName, range]);
            }
        });
    };

    /**
     * Converts a text into a list of tokens
     * @param {string} text a text to tokenize
     */
    Tokenizer.prototype.tokenize = function (text) {
        this.tokens = [];
        this.resetContextsRanges();
        var chars = Array.from(text);
        this.dispatch('start');
        for (var i = 0; i < chars.length; i++) {
            var char = chars[i];
            var contextParams = new ContextParams(chars, i);
            this.dispatch('next', [contextParams]);
            this.runContextCheck(contextParams);
            var token = new Token(char);
            this.tokens.push(token);
            this.dispatch('newToken', [token, contextParams]);
        }
        this.dispatch('end', [this.tokens]);
        return this.tokens;
    };

    // ╭─┄┄┄────────────────────────┄─────────────────────────────────────────────╮
    // ┊ Character Class Assertions ┊ Checks if a char belongs to a certain class ┊
    // ╰─╾──────────────────────────┄─────────────────────────────────────────────╯
    // jscs:disable maximumLineLength
    /**
     * Check if a char is Arabic
     * @param {string} c a single char
     */
    function isArabicChar(c) {
        return /[\u0600-\u065F\u066A-\u06D2\u06FA-\u06FF]/.test(c);
    }

    /**
     * Check if a char is an isolated arabic char
     * @param {string} c a single char
     */
    function isIsolatedArabicChar(char) {
        return /[\u0630\u0690\u0621\u0631\u0661\u0671\u0622\u0632\u0672\u0692\u06C2\u0623\u0673\u0693\u06C3\u0624\u0694\u06C4\u0625\u0675\u0695\u06C5\u06E5\u0676\u0696\u06C6\u0627\u0677\u0697\u06C7\u0648\u0688\u0698\u06C8\u0689\u0699\u06C9\u068A\u06CA\u066B\u068B\u06CB\u068C\u068D\u06CD\u06FD\u068E\u06EE\u06FE\u062F\u068F\u06CF\u06EF]/.test(char);
    }

    /**
     * Check if a char is an Arabic Tashkeel char
     * @param {string} c a single char
     */
    function isTashkeelArabicChar(char) {
        return /[\u0600-\u0605\u060C-\u060E\u0610-\u061B\u061E\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED]/.test(char);
    }

    /**
     * Check if a char is Latin
     * @param {string} c a single char
     */
    function isLatinChar(c) {
        return /[A-z]/.test(c);
    }

    /**
     * Check if a char is whitespace char
     * @param {string} c a single char
     */
    function isWhiteSpace(c) {
        return /\s/.test(c);
    }

    /**
     * Query a feature by some of it's properties to lookup a glyph substitution.
     */

    /**
     * Create feature query instance
     * @param {Font} font opentype font instance
     */
    function FeatureQuery(font) {
        this.font = font;
        this.features = {};
    }

    /**
     * @typedef SubstitutionAction
     * @type Object
     * @property {number} id substitution type
     * @property {string} tag feature tag
     * @property {any} substitution substitution value(s)
     */

    /**
     * Create a substitution action instance
     * @param {SubstitutionAction} action
     */
    function SubstitutionAction(action) {
        this.id = action.id;
        this.tag = action.tag;
        this.substitution = action.substitution;
    }

    /**
     * Lookup a coverage table
     * @param {number} glyphIndex glyph index
     * @param {CoverageTable} coverage coverage table
     */
    function lookupCoverage(glyphIndex, coverage) {
        if (!glyphIndex) { return -1; }
        switch (coverage.format) {
            case 1:
                return coverage.glyphs.indexOf(glyphIndex);

            case 2:
                var ranges = coverage.ranges;
                for (var i = 0; i < ranges.length; i++) {
                    var range = ranges[i];
                    if (glyphIndex >= range.start && glyphIndex <= range.end) {
                        var offset = glyphIndex - range.start;
                        return range.index + offset;
                    }
                }
                break;
            default:
                return -1; // not found
        }
        return -1;
    }

    /**
     * Handle a single substitution - format 1
     * @param {ContextParams} contextParams context params to lookup
     */
    function singleSubstitutionFormat1(glyphIndex, subtable) {
        var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);
        if (substituteIndex === -1) { return null; }
        return glyphIndex + subtable.deltaGlyphId;
    }

    /**
     * Handle a single substitution - format 2
     * @param {ContextParams} contextParams context params to lookup
     */
    function singleSubstitutionFormat2(glyphIndex, subtable) {
        var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);
        if (substituteIndex === -1) { return null; }
        return subtable.substitute[substituteIndex];
    }

    /**
     * Lookup a list of coverage tables
     * @param {any} coverageList a list of coverage tables
     * @param {ContextParams} contextParams context params to lookup
     */
    function lookupCoverageList(coverageList, contextParams) {
        var lookupList = [];
        for (var i = 0; i < coverageList.length; i++) {
            var coverage = coverageList[i];
            var glyphIndex = contextParams.current;
            glyphIndex = Array.isArray(glyphIndex) ? glyphIndex[0] : glyphIndex;
            var lookupIndex = lookupCoverage(glyphIndex, coverage);
            if (lookupIndex !== -1) {
                lookupList.push(lookupIndex);
            }
        }
        if (lookupList.length !== coverageList.length) { return -1; }
        return lookupList;
    }

    /**
     * Handle chaining context substitution - format 3
     * @param {ContextParams} contextParams context params to lookup
     */
    function chainingSubstitutionFormat3(contextParams, subtable) {
        var lookupsCount = (
            subtable.inputCoverage.length +
            subtable.lookaheadCoverage.length +
            subtable.backtrackCoverage.length
        );
        if (contextParams.context.length < lookupsCount) { return []; }
        // INPUT LOOKUP //
        var inputLookups = lookupCoverageList(
            subtable.inputCoverage, contextParams
        );
        if (inputLookups === -1) { return []; }
        // LOOKAHEAD LOOKUP //
        var lookaheadOffset = subtable.inputCoverage.length - 1;
        if (contextParams.lookahead.length < subtable.lookaheadCoverage.length) { return []; }
        var lookaheadContext = contextParams.lookahead.slice(lookaheadOffset);
        while (lookaheadContext.length && isTashkeelArabicChar(lookaheadContext[0].char)) {
            lookaheadContext.shift();
        }
        var lookaheadParams = new ContextParams(lookaheadContext, 0);
        var lookaheadLookups = lookupCoverageList(
            subtable.lookaheadCoverage, lookaheadParams
        );
        // BACKTRACK LOOKUP //
        var backtrackContext = [].concat(contextParams.backtrack);
        backtrackContext.reverse();
        while (backtrackContext.length && isTashkeelArabicChar(backtrackContext[0].char)) {
            backtrackContext.shift();
        }
        if (backtrackContext.length < subtable.backtrackCoverage.length) { return []; }
        var backtrackParams = new ContextParams(backtrackContext, 0);
        var backtrackLookups = lookupCoverageList(
            subtable.backtrackCoverage, backtrackParams
        );
        var contextRulesMatch = (
            inputLookups.length === subtable.inputCoverage.length &&
            lookaheadLookups.length === subtable.lookaheadCoverage.length &&
            backtrackLookups.length === subtable.backtrackCoverage.length
        );
        var substitutions = [];
        if (contextRulesMatch) {
            for (var i = 0; i < subtable.lookupRecords.length; i++) {
                var lookupRecord = subtable.lookupRecords[i];
                var lookupListIndex = lookupRecord.lookupListIndex;
                var lookupTable = this.getLookupByIndex(lookupListIndex);
                for (var s = 0; s < lookupTable.subtables.length; s++) {
                    var subtable$1 = lookupTable.subtables[s];
                    var lookup = this.getLookupMethod(lookupTable, subtable$1);
                    var substitutionType = this.getSubstitutionType(lookupTable, subtable$1);
                    if (substitutionType === '12') {
                        for (var n = 0; n < inputLookups.length; n++) {
                            var glyphIndex = contextParams.get(n);
                            var substitution = lookup(glyphIndex);
                            if (substitution) { substitutions.push(substitution); }
                        }
                    }
                }
            }
        }
        return substitutions;
    }

    /**
     * Handle ligature substitution - format 1
     * @param {ContextParams} contextParams context params to lookup
     */
    function ligatureSubstitutionFormat1(contextParams, subtable) {
        // COVERAGE LOOKUP //
        var glyphIndex = contextParams.current;
        var ligSetIndex = lookupCoverage(glyphIndex, subtable.coverage);
        if (ligSetIndex === -1) { return null; }
        // COMPONENTS LOOKUP
        // (!) note, components are ordered in the written direction.
        var ligature;
        var ligatureSet = subtable.ligatureSets[ligSetIndex];
        for (var s = 0; s < ligatureSet.length; s++) {
            ligature = ligatureSet[s];
            for (var l = 0; l < ligature.components.length; l++) {
                var lookaheadItem = contextParams.lookahead[l];
                var component = ligature.components[l];
                if (lookaheadItem !== component) { break; }
                if (l === ligature.components.length - 1) { return ligature; }
            }
        }
        return null;
    }

    /**
     * Handle decomposition substitution - format 1
     * @param {number} glyphIndex glyph index
     * @param {any} subtable subtable
     */
    function decompositionSubstitutionFormat1(glyphIndex, subtable) {
        var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);
        if (substituteIndex === -1) { return null; }
        return subtable.sequences[substituteIndex];
    }

    /**
     * Get default script features indexes
     */
    FeatureQuery.prototype.getDefaultScriptFeaturesIndexes = function () {
        var scripts = this.font.tables.gsub.scripts;
        for (var s = 0; s < scripts.length; s++) {
            var script = scripts[s];
            if (script.tag === 'DFLT') { return (
                script.script.defaultLangSys.featureIndexes
            ); }
        }
        return [];
    };

    /**
     * Get feature indexes of a specific script
     * @param {string} scriptTag script tag
     */
    FeatureQuery.prototype.getScriptFeaturesIndexes = function(scriptTag) {
        var tables = this.font.tables;
        if (!tables.gsub) { return []; }
        if (!scriptTag) { return this.getDefaultScriptFeaturesIndexes(); }
        var scripts = this.font.tables.gsub.scripts;
        for (var i = 0; i < scripts.length; i++) {
            var script = scripts[i];
            if (script.tag === scriptTag && script.script.defaultLangSys) {
                return script.script.defaultLangSys.featureIndexes;
            } else {
                var langSysRecords = script.langSysRecords;
                if (!!langSysRecords) {
                    for (var j = 0; j < langSysRecords.length; j++) {
                        var langSysRecord = langSysRecords[j];
                        if (langSysRecord.tag === scriptTag) {
                            var langSys = langSysRecord.langSys;
                            return langSys.featureIndexes;
                        }
                    }
                }
            }
        }
        return this.getDefaultScriptFeaturesIndexes();
    };

    /**
     * Map a feature tag to a gsub feature
     * @param {any} features gsub features
     * @param {string} scriptTag script tag
     */
    FeatureQuery.prototype.mapTagsToFeatures = function (features, scriptTag) {
        var tags = {};
        for (var i = 0; i < features.length; i++) {
            var tag = features[i].tag;
            var feature = features[i].feature;
            tags[tag] = feature;
        }
        this.features[scriptTag].tags = tags;
    };

    /**
     * Get features of a specific script
     * @param {string} scriptTag script tag
     */
    FeatureQuery.prototype.getScriptFeatures = function (scriptTag) {
        var features = this.features[scriptTag];
        if (this.features.hasOwnProperty(scriptTag)) { return features; }
        var featuresIndexes = this.getScriptFeaturesIndexes(scriptTag);
        if (!featuresIndexes) { return null; }
        var gsub = this.font.tables.gsub;
        features = featuresIndexes.map(function (index) { return gsub.features[index]; });
        this.features[scriptTag] = features;
        this.mapTagsToFeatures(features, scriptTag);
        return features;
    };

    /**
     * Get substitution type
     * @param {any} lookupTable lookup table
     * @param {any} subtable subtable
     */
    FeatureQuery.prototype.getSubstitutionType = function(lookupTable, subtable) {
        var lookupType = lookupTable.lookupType.toString();
        var substFormat = subtable.substFormat.toString();
        return lookupType + substFormat;
    };

    /**
     * Get lookup method
     * @param {any} lookupTable lookup table
     * @param {any} subtable subtable
     */
    FeatureQuery.prototype.getLookupMethod = function(lookupTable, subtable) {
        var this$1 = this;

        var substitutionType = this.getSubstitutionType(lookupTable, subtable);
        switch (substitutionType) {
            case '11':
                return function (glyphIndex) { return singleSubstitutionFormat1.apply(
                    this$1, [glyphIndex, subtable]
                ); };
            case '12':
                return function (glyphIndex) { return singleSubstitutionFormat2.apply(
                    this$1, [glyphIndex, subtable]
                ); };
            case '63':
                return function (contextParams) { return chainingSubstitutionFormat3.apply(
                    this$1, [contextParams, subtable]
                ); };
            case '41':
                return function (contextParams) { return ligatureSubstitutionFormat1.apply(
                    this$1, [contextParams, subtable]
                ); };
            case '21':
                return function (glyphIndex) { return decompositionSubstitutionFormat1.apply(
                    this$1, [glyphIndex, subtable]
                ); };
            default:
                throw new Error(
                    "lookupType: " + (lookupTable.lookupType) + " - " +
                    "substFormat: " + (subtable.substFormat) + " " +
                    "is not yet supported"
                );
        }
    };

    /**
     * [ LOOKUP TYPES ]
     * -------------------------------
     * Single                        1;
     * Multiple                      2;
     * Alternate                     3;
     * Ligature                      4;
     * Context                       5;
     * ChainingContext               6;
     * ExtensionSubstitution         7;
     * ReverseChainingContext        8;
     * -------------------------------
     *
     */

    /**
     * @typedef FQuery
     * @type Object
     * @param {string} tag feature tag
     * @param {string} script feature script
     * @param {ContextParams} contextParams context params
     */

    /**
     * Lookup a feature using a query parameters
     * @param {FQuery} query feature query
     */
    FeatureQuery.prototype.lookupFeature = function (query) {
        var contextParams = query.contextParams;
        var currentIndex = contextParams.index;
        var feature = this.getFeature({
            tag: query.tag, script: query.script
        });
        if (!feature) { return new Error(
            "font '" + (this.font.names.fullName.en) + "' " +
            "doesn't support feature '" + (query.tag) + "' " +
            "for script '" + (query.script) + "'."
        ); }
        var lookups = this.getFeatureLookups(feature);
        var substitutions = [].concat(contextParams.context);
        for (var l = 0; l < lookups.length; l++) {
            var lookupTable = lookups[l];
            var subtables = this.getLookupSubtables(lookupTable);
            for (var s = 0; s < subtables.length; s++) {
                var subtable = subtables[s];
                var substType = this.getSubstitutionType(lookupTable, subtable);
                var lookup = this.getLookupMethod(lookupTable, subtable);
                var substitution = (void 0);
                switch (substType) {
                    case '11':
                        substitution = lookup(contextParams.current);
                        if (substitution) {
                            substitutions.splice(currentIndex, 1, new SubstitutionAction({
                                id: 11, tag: query.tag, substitution: substitution
                            }));
                        }
                        break;
                    case '12':
                        substitution = lookup(contextParams.current);
                        if (substitution) {
                            substitutions.splice(currentIndex, 1, new SubstitutionAction({
                                id: 12, tag: query.tag, substitution: substitution
                            }));
                        }
                        break;
                    case '63':
                        substitution = lookup(contextParams);
                        if (Array.isArray(substitution) && substitution.length) {
                            substitutions.splice(currentIndex, 1, new SubstitutionAction({
                                id: 63, tag: query.tag, substitution: substitution
                            }));
                        }
                        break;
                    case '41':
                        substitution = lookup(contextParams);
                        if (substitution) {
                            substitutions.splice(currentIndex, 1, new SubstitutionAction({
                                id: 41, tag: query.tag, substitution: substitution
                            }));
                        }
                        break;
                    case '21':
                        substitution = lookup(contextParams.current);
                        if (substitution) {
                            substitutions.splice(currentIndex, 1, new SubstitutionAction({
                                id: 21, tag: query.tag, substitution: substitution
                            }));
                        }
                        break;
                }
                contextParams = new ContextParams(substitutions, currentIndex);
                if (Array.isArray(substitution) && !substitution.length) { continue; }
                substitution = null;
            }
        }
        return substitutions.length ? substitutions : null;
    };

    /**
     * Checks if a font supports a specific features
     * @param {FQuery} query feature query object
     */
    FeatureQuery.prototype.supports = function (query) {
        if (!query.script) { return false; }
        this.getScriptFeatures(query.script);
        var supportedScript = this.features.hasOwnProperty(query.script);
        if (!query.tag) { return supportedScript; }
        var supportedFeature = (
            this.features[query.script].some(function (feature) { return feature.tag === query.tag; })
        );
        return supportedScript && supportedFeature;
    };

    /**
     * Get lookup table subtables
     * @param {any} lookupTable lookup table
     */
    FeatureQuery.prototype.getLookupSubtables = function (lookupTable) {
        return lookupTable.subtables || null;
    };

    /**
     * Get lookup table by index
     * @param {number} index lookup table index
     */
    FeatureQuery.prototype.getLookupByIndex = function (index) {
        var lookups = this.font.tables.gsub.lookups;
        return lookups[index] || null;
    };

    /**
     * Get lookup tables for a feature
     * @param {string} feature
     */
    FeatureQuery.prototype.getFeatureLookups = function (feature) {
        // TODO: memoize
        return feature.lookupListIndexes.map(this.getLookupByIndex.bind(this));
    };

    /**
     * Query a feature by it's properties
     * @param {any} query an object that describes the properties of a query
     */
    FeatureQuery.prototype.getFeature = function getFeature(query) {
        if (!this.font) { return { FAIL: "No font was found"}; }
        if (!this.features.hasOwnProperty(query.script)) {
            this.getScriptFeatures(query.script);
        }
        var scriptFeatures = this.features[query.script];
        if (!scriptFeatures) { return (
            { FAIL: ("No feature for script " + (query.script))}
        ); }
        if (!scriptFeatures.tags[query.tag]) { return null; }
        return this.features[query.script].tags[query.tag];
    };

    /**
     * Arabic word context checkers
     */

    function arabicWordStartCheck(contextParams) {
        var char = contextParams.current;
        var prevChar = contextParams.get(-1);
        return (
            // ? arabic first char
            (prevChar === null && isArabicChar(char)) ||
            // ? arabic char preceded with a non arabic char
            (!isArabicChar(prevChar) && isArabicChar(char))
        );
    }

    function arabicWordEndCheck(contextParams) {
        var nextChar = contextParams.get(1);
        return (
            // ? last arabic char
            (nextChar === null) ||
            // ? next char is not arabic
            (!isArabicChar(nextChar))
        );
    }

    var arabicWordCheck = {
        startCheck: arabicWordStartCheck,
        endCheck: arabicWordEndCheck
    };

    /**
     * Arabic sentence context checkers
     */

    function arabicSentenceStartCheck(contextParams) {
        var char = contextParams.current;
        var prevChar = contextParams.get(-1);
        return (
            // ? an arabic char preceded with a non arabic char
            (isArabicChar(char) || isTashkeelArabicChar(char)) &&
            !isArabicChar(prevChar)
        );
    }

    function arabicSentenceEndCheck(contextParams) {
        var nextChar = contextParams.get(1);
        switch (true) {
            case nextChar === null:
                return true;
            case (!isArabicChar(nextChar) && !isTashkeelArabicChar(nextChar)):
                var nextIsWhitespace = isWhiteSpace(nextChar);
                if (!nextIsWhitespace) { return true; }
                if (nextIsWhitespace) {
                    var arabicCharAhead = false;
                    arabicCharAhead = (
                        contextParams.lookahead.some(
                            function (c) { return isArabicChar(c) || isTashkeelArabicChar(c); }
                        )
                    );
                    if (!arabicCharAhead) { return true; }
                }
                break;
            default:
                return false;
        }
    }

    var arabicSentenceCheck = {
        startCheck: arabicSentenceStartCheck,
        endCheck: arabicSentenceEndCheck
    };

    /**
     * Apply single substitution format 1
     * @param {Array} substitutions substitutions
     * @param {any} tokens a list of tokens
     * @param {number} index token index
     */
    function singleSubstitutionFormat1$1(action, tokens, index) {
        tokens[index].setState(action.tag, action.substitution);
    }

    /**
     * Apply single substitution format 2
     * @param {Array} substitutions substitutions
     * @param {any} tokens a list of tokens
     * @param {number} index token index
     */
    function singleSubstitutionFormat2$1(action, tokens, index) {
        tokens[index].setState(action.tag, action.substitution);
    }

    /**
     * Apply chaining context substitution format 3
     * @param {Array} substitutions substitutions
     * @param {any} tokens a list of tokens
     * @param {number} index token index
     */
    function chainingSubstitutionFormat3$1(action, tokens, index) {
        action.substitution.forEach(function (subst, offset) {
            var token = tokens[index + offset];
            token.setState(action.tag, subst);
        });
    }

    /**
     * Apply ligature substitution format 1
     * @param {Array} substitutions substitutions
     * @param {any} tokens a list of tokens
     * @param {number} index token index
     */
    function ligatureSubstitutionFormat1$1(action, tokens, index) {
        var token = tokens[index];
        token.setState(action.tag, action.substitution.ligGlyph);
        var compsCount = action.substitution.components.length;
        for (var i = 0; i < compsCount; i++) {
            token = tokens[index + i + 1];
            token.setState('deleted', true);
        }
    }

    /**
     * Supported substitutions
     */
    var SUBSTITUTIONS = {
        11: singleSubstitutionFormat1$1,
        12: singleSubstitutionFormat2$1,
        63: chainingSubstitutionFormat3$1,
        41: ligatureSubstitutionFormat1$1
    };

    /**
     * Apply substitutions to a list of tokens
     * @param {Array} substitutions substitutions
     * @param {any} tokens a list of tokens
     * @param {number} index token index
     */
    function applySubstitution(action, tokens, index) {
        if (action instanceof SubstitutionAction && SUBSTITUTIONS[action.id]) {
            SUBSTITUTIONS[action.id](action, tokens, index);
        }
    }

    /**
     * Apply Arabic presentation forms to a range of tokens
     */

    /**
     * Check if a char can be connected to it's preceding char
     * @param {ContextParams} charContextParams context params of a char
     */
    function willConnectPrev(charContextParams) {
        var backtrack = [].concat(charContextParams.backtrack);
        for (var i = backtrack.length - 1; i >= 0; i--) {
            var prevChar = backtrack[i];
            var isolated = isIsolatedArabicChar(prevChar);
            var tashkeel = isTashkeelArabicChar(prevChar);
            if (!isolated && !tashkeel) { return true; }
            if (isolated) { return false; }
        }
        return false;
    }

    /**
     * Check if a char can be connected to it's proceeding char
     * @param {ContextParams} charContextParams context params of a char
     */
    function willConnectNext(charContextParams) {
        if (isIsolatedArabicChar(charContextParams.current)) { return false; }
        for (var i = 0; i < charContextParams.lookahead.length; i++) {
            var nextChar = charContextParams.lookahead[i];
            var tashkeel = isTashkeelArabicChar(nextChar);
            if (!tashkeel) { return true; }
        }
        return false;
    }

    /**
     * Apply arabic presentation forms to a list of tokens
     * @param {ContextRange} range a range of tokens
     */
    function arabicPresentationForms(range) {
        var this$1 = this;

        var script = 'arab';
        var tags = this.featuresTags[script];
        var tokens = this.tokenizer.getRangeTokens(range);
        if (tokens.length === 1) { return; }
        var contextParams = new ContextParams(
            tokens.map(function (token) { return token.getState('glyphIndex'); }
        ), 0);
        var charContextParams = new ContextParams(
            tokens.map(function (token) { return token.char; }
        ), 0);
        tokens.forEach(function (token, index) {
            if (isTashkeelArabicChar(token.char)) { return; }
            contextParams.setCurrentIndex(index);
            charContextParams.setCurrentIndex(index);
            var CONNECT = 0; // 2 bits 00 (10: can connect next) (01: can connect prev)
            if (willConnectPrev(charContextParams)) { CONNECT |= 1; }
            if (willConnectNext(charContextParams)) { CONNECT |= 2; }
            var tag;
            switch (CONNECT) {
                case 1: (tag = 'fina'); break;
                case 2: (tag = 'init'); break;
                case 3: (tag = 'medi'); break;
            }
            if (tags.indexOf(tag) === -1) { return; }
            var substitutions = this$1.query.lookupFeature({
                tag: tag, script: script, contextParams: contextParams
            });
            if (substitutions instanceof Error) { return console.info(substitutions.message); }
            substitutions.forEach(function (action, index) {
                if (action instanceof SubstitutionAction) {
                    applySubstitution(action, tokens, index);
                    contextParams.context[index] = action.substitution;
                }
            });
        });
    }

    /**
     * Apply Arabic required ligatures feature to a range of tokens
     */

    /**
     * Update context params
     * @param {any} tokens a list of tokens
     * @param {number} index current item index
     */
    function getContextParams(tokens, index) {
        var context = tokens.map(function (token) { return token.activeState.value; });
        return new ContextParams(context, index || 0);
    }

    /**
     * Apply Arabic required ligatures to a context range
     * @param {ContextRange} range a range of tokens
     */
    function arabicRequiredLigatures(range) {
        var this$1 = this;

        var script = 'arab';
        var tokens = this.tokenizer.getRangeTokens(range);
        var contextParams = getContextParams(tokens);
        contextParams.context.forEach(function (glyphIndex, index) {
            contextParams.setCurrentIndex(index);
            var substitutions = this$1.query.lookupFeature({
                tag: 'rlig', script: script, contextParams: contextParams
            });
            if (substitutions.length) {
                substitutions.forEach(
                    function (action) { return applySubstitution(action, tokens, index); }
                );
                contextParams = getContextParams(tokens);
            }
        });
    }

    /**
     * Latin word context checkers
     */

    function latinWordStartCheck(contextParams) {
        var char = contextParams.current;
        var prevChar = contextParams.get(-1);
        return (
            // ? latin first char
            (prevChar === null && isLatinChar(char)) ||
            // ? latin char preceded with a non latin char
            (!isLatinChar(prevChar) && isLatinChar(char))
        );
    }

    function latinWordEndCheck(contextParams) {
        var nextChar = contextParams.get(1);
        return (
            // ? last latin char
            (nextChar === null) ||
            // ? next char is not latin
            (!isLatinChar(nextChar))
        );
    }

    var latinWordCheck = {
        startCheck: latinWordStartCheck,
        endCheck: latinWordEndCheck
    };

    /**
     * Apply Latin ligature feature to a range of tokens
     */

    /**
     * Update context params
     * @param {any} tokens a list of tokens
     * @param {number} index current item index
     */
    function getContextParams$1(tokens, index) {
        var context = tokens.map(function (token) { return token.activeState.value; });
        return new ContextParams(context, index || 0);
    }

    /**
     * Apply Arabic required ligatures to a context range
     * @param {ContextRange} range a range of tokens
     */
    function latinLigature(range) {
        var this$1 = this;

        var script = 'latn';
        var tokens = this.tokenizer.getRangeTokens(range);
        var contextParams = getContextParams$1(tokens);
        contextParams.context.forEach(function (glyphIndex, index) {
            contextParams.setCurrentIndex(index);
            var substitutions = this$1.query.lookupFeature({
                tag: 'liga', script: script, contextParams: contextParams
            });
            if (substitutions.length) {
                substitutions.forEach(
                    function (action) { return applySubstitution(action, tokens, index); }
                );
                contextParams = getContextParams$1(tokens);
            }
        });
    }

    /**
     * Infer bidirectional properties for a given text and apply
     * the corresponding layout rules.
     */

    /**
     * Create Bidi. features
     * @param {string} baseDir text base direction. value either 'ltr' or 'rtl'
     */
    function Bidi(baseDir) {
        this.baseDir = baseDir || 'ltr';
        this.tokenizer = new Tokenizer();
        this.featuresTags = {};
    }

    /**
     * Sets Bidi text
     * @param {string} text a text input
     */
    Bidi.prototype.setText = function (text) {
        this.text = text;
    };

    /**
     * Store essential context checks:
     * arabic word check for applying gsub features
     * arabic sentence check for adjusting arabic layout
     */
    Bidi.prototype.contextChecks = ({
        latinWordCheck: latinWordCheck,
        arabicWordCheck: arabicWordCheck,
        arabicSentenceCheck: arabicSentenceCheck
    });

    /**
     * Register arabic word check
     */
    function registerContextChecker(checkId) {
        var check = this.contextChecks[(checkId + "Check")];
        return this.tokenizer.registerContextChecker(
            checkId, check.startCheck, check.endCheck
        );
    }

    /**
     * Perform pre tokenization procedure then
     * tokenize text input
     */
    function tokenizeText() {
        registerContextChecker.call(this, 'latinWord');
        registerContextChecker.call(this, 'arabicWord');
        registerContextChecker.call(this, 'arabicSentence');
        return this.tokenizer.tokenize(this.text);
    }

    /**
     * Reverse arabic sentence layout
     * TODO: check base dir before applying adjustments - priority low
     */
    function reverseArabicSentences() {
        var this$1 = this;

        var ranges = this.tokenizer.getContextRanges('arabicSentence');
        ranges.forEach(function (range) {
            var rangeTokens = this$1.tokenizer.getRangeTokens(range);
            this$1.tokenizer.replaceRange(
                range.startIndex,
                range.endOffset,
                rangeTokens.reverse()
            );
        });
    }

    /**
     * Register supported features tags
     * @param {script} script script tag
     * @param {Array} tags features tags list
     */
    Bidi.prototype.registerFeatures = function (script, tags) {
        var this$1 = this;

        var supportedTags = tags.filter(
            function (tag) { return this$1.query.supports({script: script, tag: tag}); }
        );
        if (!this.featuresTags.hasOwnProperty(script)) {
            this.featuresTags[script] = supportedTags;
        } else {
            this.featuresTags[script] =
            this.featuresTags[script].concat(supportedTags);
        }
    };

    /**
     * Apply GSUB features
     * @param {Array} tagsList a list of features tags
     * @param {string} script a script tag
     * @param {Font} font opentype font instance
     */
    Bidi.prototype.applyFeatures = function (font, features) {
        if (!font) { throw new Error(
            'No valid font was provided to apply features'
        ); }
        if (!this.query) { this.query = new FeatureQuery(font); }
        for (var f = 0; f < features.length; f++) {
            var feature = features[f];
            if (!this.query.supports({script: feature.script})) { continue; }
            this.registerFeatures(feature.script, feature.tags);
        }
    };

    /**
     * Register a state modifier
     * @param {string} modifierId state modifier id
     * @param {function} condition a predicate function that returns true or false
     * @param {function} modifier a modifier function to set token state
     */
    Bidi.prototype.registerModifier = function (modifierId, condition, modifier) {
        this.tokenizer.registerModifier(modifierId, condition, modifier);
    };

    /**
     * Check if 'glyphIndex' is registered
     */
    function checkGlyphIndexStatus() {
        if (this.tokenizer.registeredModifiers.indexOf('glyphIndex') === -1) {
            throw new Error(
                'glyphIndex modifier is required to apply ' +
                'arabic presentation features.'
            );
        }
    }

    /**
     * Apply arabic presentation forms features
     */
    function applyArabicPresentationForms() {
        var this$1 = this;

        var script = 'arab';
        if (!this.featuresTags.hasOwnProperty(script)) { return; }
        checkGlyphIndexStatus.call(this);
        var ranges = this.tokenizer.getContextRanges('arabicWord');
        ranges.forEach(function (range) {
            arabicPresentationForms.call(this$1, range);
        });
    }

    /**
     * Apply required arabic ligatures
     */
    function applyArabicRequireLigatures() {
        var this$1 = this;

        var script = 'arab';
        if (!this.featuresTags.hasOwnProperty(script)) { return; }
        var tags = this.featuresTags[script];
        if (tags.indexOf('rlig') === -1) { return; }
        checkGlyphIndexStatus.call(this);
        var ranges = this.tokenizer.getContextRanges('arabicWord');
        ranges.forEach(function (range) {
            arabicRequiredLigatures.call(this$1, range);
        });
    }

    /**
     * Apply required arabic ligatures
     */
    function applyLatinLigatures() {
        var this$1 = this;

        var script = 'latn';
        if (!this.featuresTags.hasOwnProperty(script)) { return; }
        var tags = this.featuresTags[script];
        if (tags.indexOf('liga') === -1) { return; }
        checkGlyphIndexStatus.call(this);
        var ranges = this.tokenizer.getContextRanges('latinWord');
        ranges.forEach(function (range) {
            latinLigature.call(this$1, range);
        });
    }

    /**
     * Check if a context is registered
     * @param {string} contextId context id
     */
    Bidi.prototype.checkContextReady = function (contextId) {
        return !!this.tokenizer.getContext(contextId);
    };

    /**
     * Apply features to registered contexts
     */
    Bidi.prototype.applyFeaturesToContexts = function () {
        if (this.checkContextReady('arabicWord')) {
            applyArabicPresentationForms.call(this);
            applyArabicRequireLigatures.call(this);
        }
        if (this.checkContextReady('latinWord')) {
            applyLatinLigatures.call(this);
        }
        if (this.checkContextReady('arabicSentence')) {
            reverseArabicSentences.call(this);
        }
    };

    /**
     * process text input
     * @param {string} text an input text
     */
    Bidi.prototype.processText = function(text) {
        if (!this.text || this.text !== text) {
            this.setText(text);
            tokenizeText.call(this);
            this.applyFeaturesToContexts();
        }
    };

    /**
     * Process a string of text to identify and adjust
     * bidirectional text entities.
     * @param {string} text input text
     */
    Bidi.prototype.getBidiText = function (text) {
        this.processText(text);
        return this.tokenizer.getText();
    };

    /**
     * Get the current state index of each token
     * @param {text} text an input text
     */
    Bidi.prototype.getTextGlyphs = function (text) {
        this.processText(text);
        var indexes = [];
        for (var i = 0; i < this.tokenizer.tokens.length; i++) {
            var token = this.tokenizer.tokens[i];
            if (token.state.deleted) { continue; }
            var index = token.activeState.value;
            indexes.push(Array.isArray(index) ? index[0] : index);
        }
        return indexes;
    };

    // The Font object

    /**
     * @typedef FontOptions
     * @type Object
     * @property {Boolean} empty - whether to create a new empty font
     * @property {string} familyName
     * @property {string} styleName
     * @property {string=} fullName
     * @property {string=} postScriptName
     * @property {string=} designer
     * @property {string=} designerURL
     * @property {string=} manufacturer
     * @property {string=} manufacturerURL
     * @property {string=} license
     * @property {string=} licenseURL
     * @property {string=} version
     * @property {string=} description
     * @property {string=} copyright
     * @property {string=} trademark
     * @property {Number} unitsPerEm
     * @property {Number} ascender
     * @property {Number} descender
     * @property {Number} createdTimestamp
     * @property {string=} weightClass
     * @property {string=} widthClass
     * @property {string=} fsSelection
     */

    /**
     * A Font represents a loaded OpenType font file.
     * It contains a set of glyphs and methods to draw text on a drawing context,
     * or to get a path representing the text.
     * @exports opentype.Font
     * @class
     * @param {FontOptions}
     * @constructor
     */
    function Font(options) {
        options = options || {};
        options.tables = options.tables || {};

        if (!options.empty) {
            // Check that we've provided the minimum set of names.
            checkArgument(options.familyName, 'When creating a new Font object, familyName is required.');
            checkArgument(options.styleName, 'When creating a new Font object, styleName is required.');
            checkArgument(options.unitsPerEm, 'When creating a new Font object, unitsPerEm is required.');
            checkArgument(options.ascender, 'When creating a new Font object, ascender is required.');
            checkArgument(options.descender <= 0, 'When creating a new Font object, negative descender value is required.');

            // OS X will complain if the names are empty, so we put a single space everywhere by default.
            this.names = {
                fontFamily: {en: options.familyName || ' '},
                fontSubfamily: {en: options.styleName || ' '},
                fullName: {en: options.fullName || options.familyName + ' ' + options.styleName},
                // postScriptName may not contain any whitespace
                postScriptName: {en: options.postScriptName || (options.familyName + options.styleName).replace(/\s/g, '')},
                designer: {en: options.designer || ' '},
                designerURL: {en: options.designerURL || ' '},
                manufacturer: {en: options.manufacturer || ' '},
                manufacturerURL: {en: options.manufacturerURL || ' '},
                license: {en: options.license || ' '},
                licenseURL: {en: options.licenseURL || ' '},
                version: {en: options.version || 'Version 0.1'},
                description: {en: options.description || ' '},
                copyright: {en: options.copyright || ' '},
                trademark: {en: options.trademark || ' '}
            };
            this.unitsPerEm = options.unitsPerEm || 1000;
            this.ascender = options.ascender;
            this.descender = options.descender;
            this.createdTimestamp = options.createdTimestamp;
            this.tables = Object.assign(options.tables, {
                os2: Object.assign({
                    usWeightClass: options.weightClass || this.usWeightClasses.MEDIUM,
                    usWidthClass: options.widthClass || this.usWidthClasses.MEDIUM,
                    fsSelection: options.fsSelection || this.fsSelectionValues.REGULAR,
                }, options.tables.os2)
            });
        }

        this.supported = true; // Deprecated: parseBuffer will throw an error if font is not supported.
        this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);
        this.encoding = new DefaultEncoding(this);
        this.position = new Position(this);
        this.substitution = new Substitution(this);
        this.tables = this.tables || {};

        // needed for low memory mode only.
        this._push = null;
        this._hmtxTableData = {};

        Object.defineProperty(this, 'hinting', {
            get: function() {
                if (this._hinting) { return this._hinting; }
                if (this.outlinesFormat === 'truetype') {
                    return (this._hinting = new Hinting(this));
                }
            }
        });
    }

    /**
     * Check if the font has a glyph for the given character.
     * @param  {string}
     * @return {Boolean}
     */
    Font.prototype.hasChar = function(c) {
        return this.encoding.charToGlyphIndex(c) !== null;
    };

    /**
     * Convert the given character to a single glyph index.
     * Note that this function assumes that there is a one-to-one mapping between
     * the given character and a glyph; for complex scripts this might not be the case.
     * @param  {string}
     * @return {Number}
     */
    Font.prototype.charToGlyphIndex = function(s) {
        return this.encoding.charToGlyphIndex(s);
    };

    /**
     * Convert the given character to a single Glyph object.
     * Note that this function assumes that there is a one-to-one mapping between
     * the given character and a glyph; for complex scripts this might not be the case.
     * @param  {string}
     * @return {opentype.Glyph}
     */
    Font.prototype.charToGlyph = function(c) {
        var glyphIndex = this.charToGlyphIndex(c);
        var glyph = this.glyphs.get(glyphIndex);
        if (!glyph) {
            // .notdef
            glyph = this.glyphs.get(0);
        }

        return glyph;
    };

    /**
     * Update features
     * @param {any} options features options
     */
    Font.prototype.updateFeatures = function (options) {
        // TODO: update all features options not only 'latn'.
        return this.defaultRenderOptions.features.map(function (feature) {
            if (feature.script === 'latn') {
                return {
                    script: 'latn',
                    tags: feature.tags.filter(function (tag) { return options[tag]; })
                };
            } else {
                return feature;
            }
        });
    };

    /**
     * Convert the given text to a list of Glyph objects.
     * Note that there is no strict one-to-one mapping between characters and
     * glyphs, so the list of returned glyphs can be larger or smaller than the
     * length of the given string.
     * @param  {string}
     * @param  {GlyphRenderOptions} [options]
     * @return {opentype.Glyph[]}
     */
    Font.prototype.stringToGlyphs = function(s, options) {
        var this$1 = this;


        var bidi = new Bidi();

        // Create and register 'glyphIndex' state modifier
        var charToGlyphIndexMod = function (token) { return this$1.charToGlyphIndex(token.char); };
        bidi.registerModifier('glyphIndex', null, charToGlyphIndexMod);

        // roll-back to default features
        var features = options ?
        this.updateFeatures(options.features) :
        this.defaultRenderOptions.features;

        bidi.applyFeatures(this, features);

        var indexes = bidi.getTextGlyphs(s);

        var length = indexes.length;

        // convert glyph indexes to glyph objects
        var glyphs = new Array(length);
        var notdef = this.glyphs.get(0);
        for (var i = 0; i < length; i += 1) {
            glyphs[i] = this.glyphs.get(indexes[i]) || notdef;
        }
        return glyphs;
    };

    /**
     * @param  {string}
     * @return {Number}
     */
    Font.prototype.nameToGlyphIndex = function(name) {
        return this.glyphNames.nameToGlyphIndex(name);
    };

    /**
     * @param  {string}
     * @return {opentype.Glyph}
     */
    Font.prototype.nameToGlyph = function(name) {
        var glyphIndex = this.nameToGlyphIndex(name);
        var glyph = this.glyphs.get(glyphIndex);
        if (!glyph) {
            // .notdef
            glyph = this.glyphs.get(0);
        }

        return glyph;
    };

    /**
     * @param  {Number}
     * @return {String}
     */
    Font.prototype.glyphIndexToName = function(gid) {
        if (!this.glyphNames.glyphIndexToName) {
            return '';
        }

        return this.glyphNames.glyphIndexToName(gid);
    };

    /**
     * Retrieve the value of the kerning pair between the left glyph (or its index)
     * and the right glyph (or its index). If no kerning pair is found, return 0.
     * The kerning value gets added to the advance width when calculating the spacing
     * between glyphs.
     * For GPOS kerning, this method uses the default script and language, which covers
     * most use cases. To have greater control, use font.position.getKerningValue .
     * @param  {opentype.Glyph} leftGlyph
     * @param  {opentype.Glyph} rightGlyph
     * @return {Number}
     */
    Font.prototype.getKerningValue = function(leftGlyph, rightGlyph) {
        leftGlyph = leftGlyph.index || leftGlyph;
        rightGlyph = rightGlyph.index || rightGlyph;
        var gposKerning = this.position.defaultKerningTables;
        if (gposKerning) {
            return this.position.getKerningValue(gposKerning, leftGlyph, rightGlyph);
        }
        // "kern" table
        return this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0;
    };

    /**
     * @typedef GlyphRenderOptions
     * @type Object
     * @property {string} [script] - script used to determine which features to apply. By default, 'DFLT' or 'latn' is used.
     *                               See https://www.microsoft.com/typography/otspec/scripttags.htm
     * @property {string} [language='dflt'] - language system used to determine which features to apply.
     *                                        See https://www.microsoft.com/typography/developers/opentype/languagetags.aspx
     * @property {boolean} [kerning=true] - whether to include kerning values
     * @property {object} [features] - OpenType Layout feature tags. Used to enable or disable the features of the given script/language system.
     *                                 See https://www.microsoft.com/typography/otspec/featuretags.htm
     */
    Font.prototype.defaultRenderOptions = {
        kerning: true,
        features: [
            /**
             * these 4 features are required to render Arabic text properly
             * and shouldn't be turned off when rendering arabic text.
             */
            { script: 'arab', tags: ['init', 'medi', 'fina', 'rlig'] },
            { script: 'latn', tags: ['liga', 'rlig'] }
        ]
    };

    /**
     * Helper function that invokes the given callback for each glyph in the given text.
     * The callback gets `(glyph, x, y, fontSize, options)`.* @param  {string} text
     * @param {string} text - The text to apply.
     * @param  {number} [x=0] - Horizontal position of the beginning of the text.
     * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
     * @param  {GlyphRenderOptions=} options
     * @param  {Function} callback
     */
    Font.prototype.forEachGlyph = function(text, x, y, fontSize, options, callback) {
        x = x !== undefined ? x : 0;
        y = y !== undefined ? y : 0;
        fontSize = fontSize !== undefined ? fontSize : 72;
        options = Object.assign({}, this.defaultRenderOptions, options);
        var fontScale = 1 / this.unitsPerEm * fontSize;
        var glyphs = this.stringToGlyphs(text, options);
        var kerningLookups;
        if (options.kerning) {
            var script = options.script || this.position.getDefaultScriptName();
            kerningLookups = this.position.getKerningTables(script, options.language);
        }
        for (var i = 0; i < glyphs.length; i += 1) {
            var glyph = glyphs[i];
            callback.call(this, glyph, x, y, fontSize, options);
            if (glyph.advanceWidth) {
                x += glyph.advanceWidth * fontScale;
            }

            if (options.kerning && i < glyphs.length - 1) {
                // We should apply position adjustment lookups in a more generic way.
                // Here we only use the xAdvance value.
                var kerningValue = kerningLookups ?
                      this.position.getKerningValue(kerningLookups, glyph.index, glyphs[i + 1].index) :
                      this.getKerningValue(glyph, glyphs[i + 1]);
                x += kerningValue * fontScale;
            }

            if (options.letterSpacing) {
                x += options.letterSpacing * fontSize;
            } else if (options.tracking) {
                x += (options.tracking / 1000) * fontSize;
            }
        }
        return x;
    };

    /**
     * Create a Path object that represents the given text.
     * @param  {string} text - The text to create.
     * @param  {number} [x=0] - Horizontal position of the beginning of the text.
     * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
     * @param  {GlyphRenderOptions=} options
     * @return {opentype.Path}
     */
    Font.prototype.getPath = function(text, x, y, fontSize, options) {
        var fullPath = new Path();
        this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
            var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);
            fullPath.extend(glyphPath);
        });
        return fullPath;
    };

    /**
     * Create an array of Path objects that represent the glyphs of a given text.
     * @param  {string} text - The text to create.
     * @param  {number} [x=0] - Horizontal position of the beginning of the text.
     * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
     * @param  {GlyphRenderOptions=} options
     * @return {opentype.Path[]}
     */
    Font.prototype.getPaths = function(text, x, y, fontSize, options) {
        var glyphPaths = [];
        this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
            var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);
            glyphPaths.push(glyphPath);
        });

        return glyphPaths;
    };

    /**
     * Returns the advance width of a text.
     *
     * This is something different than Path.getBoundingBox() as for example a
     * suffixed whitespace increases the advanceWidth but not the bounding box
     * or an overhanging letter like a calligraphic 'f' might have a quite larger
     * bounding box than its advance width.
     *
     * This corresponds to canvas2dContext.measureText(text).width
     *
     * @param  {string} text - The text to create.
     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
     * @param  {GlyphRenderOptions=} options
     * @return advance width
     */
    Font.prototype.getAdvanceWidth = function(text, fontSize, options) {
        return this.forEachGlyph(text, 0, 0, fontSize, options, function() {});
    };

    /**
     * Draw the text on the given drawing context.
     * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
     * @param  {string} text - The text to create.
     * @param  {number} [x=0] - Horizontal position of the beginning of the text.
     * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
     * @param  {GlyphRenderOptions=} options
     */
    Font.prototype.draw = function(ctx, text, x, y, fontSize, options) {
        this.getPath(text, x, y, fontSize, options).draw(ctx);
    };

    /**
     * Draw the points of all glyphs in the text.
     * On-curve points will be drawn in blue, off-curve points will be drawn in red.
     * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
     * @param {string} text - The text to create.
     * @param {number} [x=0] - Horizontal position of the beginning of the text.
     * @param {number} [y=0] - Vertical position of the *baseline* of the text.
     * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
     * @param {GlyphRenderOptions=} options
     */
    Font.prototype.drawPoints = function(ctx, text, x, y, fontSize, options) {
        this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
            glyph.drawPoints(ctx, gX, gY, gFontSize);
        });
    };

    /**
     * Draw lines indicating important font measurements for all glyphs in the text.
     * Black lines indicate the origin of the coordinate system (point 0,0).
     * Blue lines indicate the glyph bounding box.
     * Green line indicates the advance width of the glyph.
     * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
     * @param {string} text - The text to create.
     * @param {number} [x=0] - Horizontal position of the beginning of the text.
     * @param {number} [y=0] - Vertical position of the *baseline* of the text.
     * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
     * @param {GlyphRenderOptions=} options
     */
    Font.prototype.drawMetrics = function(ctx, text, x, y, fontSize, options) {
        this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
            glyph.drawMetrics(ctx, gX, gY, gFontSize);
        });
    };

    /**
     * @param  {string}
     * @return {string}
     */
    Font.prototype.getEnglishName = function(name) {
        var translations = this.names[name];
        if (translations) {
            return translations.en;
        }
    };

    /**
     * Validate
     */
    Font.prototype.validate = function() {
        var _this = this;

        function assert(predicate, message) {
        }

        function assertNamePresent(name) {
            var englishName = _this.getEnglishName(name);
            assert(englishName && englishName.trim().length > 0);
        }

        // Identification information
        assertNamePresent('fontFamily');
        assertNamePresent('weightName');
        assertNamePresent('manufacturer');
        assertNamePresent('copyright');
        assertNamePresent('version');

        // Dimension information
        assert(this.unitsPerEm > 0);
    };

    /**
     * Convert the font object to a SFNT data structure.
     * This structure contains all the necessary tables and metadata to create a binary OTF file.
     * @return {opentype.Table}
     */
    Font.prototype.toTables = function() {
        return sfnt.fontToTable(this);
    };
    /**
     * @deprecated Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.
     */
    Font.prototype.toBuffer = function() {
        console.warn('Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.');
        return this.toArrayBuffer();
    };
    /**
     * Converts a `opentype.Font` into an `ArrayBuffer`
     * @return {ArrayBuffer}
     */
    Font.prototype.toArrayBuffer = function() {
        var sfntTable = this.toTables();
        var bytes = sfntTable.encode();
        var buffer = new ArrayBuffer(bytes.length);
        var intArray = new Uint8Array(buffer);
        for (var i = 0; i < bytes.length; i++) {
            intArray[i] = bytes[i];
        }

        return buffer;
    };

    /**
     * Initiate a download of the OpenType font.
     */
    Font.prototype.download = function(fileName) {
        var familyName = this.getEnglishName('fontFamily');
        var styleName = this.getEnglishName('fontSubfamily');
        fileName = fileName || familyName.replace(/\s/g, '') + '-' + styleName + '.otf';
        var arrayBuffer = this.toArrayBuffer();

        if (isBrowser()) {
            window.URL = window.URL || window.webkitURL;

            if (window.URL) {
                var dataView = new DataView(arrayBuffer);
                var blob = new Blob([dataView], {type: 'font/opentype'});

                var link = document.createElement('a');
                link.href = window.URL.createObjectURL(blob);
                link.download = fileName;

                var event = document.createEvent('MouseEvents');
                event.initEvent('click', true, false);
                link.dispatchEvent(event);
            } else {
                console.warn('Font file could not be downloaded. Try using a different browser.');
            }
        } else {
            var fs = require('fs');
            var buffer = arrayBufferToNodeBuffer(arrayBuffer);
            fs.writeFileSync(fileName, buffer);
        }
    };
    /**
     * @private
     */
    Font.prototype.fsSelectionValues = {
        ITALIC:              0x001, //1
        UNDERSCORE:          0x002, //2
        NEGATIVE:            0x004, //4
        OUTLINED:            0x008, //8
        STRIKEOUT:           0x010, //16
        BOLD:                0x020, //32
        REGULAR:             0x040, //64
        USER_TYPO_METRICS:   0x080, //128
        WWS:                 0x100, //256
        OBLIQUE:             0x200  //512
    };

    /**
     * @private
     */
    Font.prototype.usWidthClasses = {
        ULTRA_CONDENSED: 1,
        EXTRA_CONDENSED: 2,
        CONDENSED: 3,
        SEMI_CONDENSED: 4,
        MEDIUM: 5,
        SEMI_EXPANDED: 6,
        EXPANDED: 7,
        EXTRA_EXPANDED: 8,
        ULTRA_EXPANDED: 9
    };

    /**
     * @private
     */
    Font.prototype.usWeightClasses = {
        THIN: 100,
        EXTRA_LIGHT: 200,
        LIGHT: 300,
        NORMAL: 400,
        MEDIUM: 500,
        SEMI_BOLD: 600,
        BOLD: 700,
        EXTRA_BOLD: 800,
        BLACK:    900
    };

    // The `fvar` table stores font variation axes and instances.

    function addName(name, names) {
        var nameString = JSON.stringify(name);
        var nameID = 256;
        for (var nameKey in names) {
            var n = parseInt(nameKey);
            if (!n || n < 256) {
                continue;
            }

            if (JSON.stringify(names[nameKey]) === nameString) {
                return n;
            }

            if (nameID <= n) {
                nameID = n + 1;
            }
        }

        names[nameID] = name;
        return nameID;
    }

    function makeFvarAxis(n, axis, names) {
        var nameID = addName(axis.name, names);
        return [
            {name: 'tag_' + n, type: 'TAG', value: axis.tag},
            {name: 'minValue_' + n, type: 'FIXED', value: axis.minValue << 16},
            {name: 'defaultValue_' + n, type: 'FIXED', value: axis.defaultValue << 16},
            {name: 'maxValue_' + n, type: 'FIXED', value: axis.maxValue << 16},
            {name: 'flags_' + n, type: 'USHORT', value: 0},
            {name: 'nameID_' + n, type: 'USHORT', value: nameID}
        ];
    }

    function parseFvarAxis(data, start, names) {
        var axis = {};
        var p = new parse.Parser(data, start);
        axis.tag = p.parseTag();
        axis.minValue = p.parseFixed();
        axis.defaultValue = p.parseFixed();
        axis.maxValue = p.parseFixed();
        p.skip('uShort', 1);  // reserved for flags; no values defined
        axis.name = names[p.parseUShort()] || {};
        return axis;
    }

    function makeFvarInstance(n, inst, axes, names) {
        var nameID = addName(inst.name, names);
        var fields = [
            {name: 'nameID_' + n, type: 'USHORT', value: nameID},
            {name: 'flags_' + n, type: 'USHORT', value: 0}
        ];

        for (var i = 0; i < axes.length; ++i) {
            var axisTag = axes[i].tag;
            fields.push({
                name: 'axis_' + n + ' ' + axisTag,
                type: 'FIXED',
                value: inst.coordinates[axisTag] << 16
            });
        }

        return fields;
    }

    function parseFvarInstance(data, start, axes, names) {
        var inst = {};
        var p = new parse.Parser(data, start);
        inst.name = names[p.parseUShort()] || {};
        p.skip('uShort', 1);  // reserved for flags; no values defined

        inst.coordinates = {};
        for (var i = 0; i < axes.length; ++i) {
            inst.coordinates[axes[i].tag] = p.parseFixed();
        }

        return inst;
    }

    function makeFvarTable(fvar, names) {
        var result = new table.Table('fvar', [
            {name: 'version', type: 'ULONG', value: 0x10000},
            {name: 'offsetToData', type: 'USHORT', value: 0},
            {name: 'countSizePairs', type: 'USHORT', value: 2},
            {name: 'axisCount', type: 'USHORT', value: fvar.axes.length},
            {name: 'axisSize', type: 'USHORT', value: 20},
            {name: 'instanceCount', type: 'USHORT', value: fvar.instances.length},
            {name: 'instanceSize', type: 'USHORT', value: 4 + fvar.axes.length * 4}
        ]);
        result.offsetToData = result.sizeOf();

        for (var i = 0; i < fvar.axes.length; i++) {
            result.fields = result.fields.concat(makeFvarAxis(i, fvar.axes[i], names));
        }

        for (var j = 0; j < fvar.instances.length; j++) {
            result.fields = result.fields.concat(makeFvarInstance(j, fvar.instances[j], fvar.axes, names));
        }

        return result;
    }

    function parseFvarTable(data, start, names) {
        var p = new parse.Parser(data, start);
        var tableVersion = p.parseULong();
        check.argument(tableVersion === 0x00010000, 'Unsupported fvar table version.');
        var offsetToData = p.parseOffset16();
        // Skip countSizePairs.
        p.skip('uShort', 1);
        var axisCount = p.parseUShort();
        var axisSize = p.parseUShort();
        var instanceCount = p.parseUShort();
        var instanceSize = p.parseUShort();

        var axes = [];
        for (var i = 0; i < axisCount; i++) {
            axes.push(parseFvarAxis(data, start + offsetToData + i * axisSize, names));
        }

        var instances = [];
        var instanceStart = start + offsetToData + axisCount * axisSize;
        for (var j = 0; j < instanceCount; j++) {
            instances.push(parseFvarInstance(data, instanceStart + j * instanceSize, axes, names));
        }

        return {axes: axes, instances: instances};
    }

    var fvar = { make: makeFvarTable, parse: parseFvarTable };

    // The `GPOS` table contains kerning pairs, among other things.

    var subtableParsers$1 = new Array(10);         // subtableParsers[0] is unused

    // https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-1-single-adjustment-positioning-subtable
    // this = Parser instance
    subtableParsers$1[1] = function parseLookup1() {
        var start = this.offset + this.relativeOffset;
        var posformat = this.parseUShort();
        if (posformat === 1) {
            return {
                posFormat: 1,
                coverage: this.parsePointer(Parser.coverage),
                value: this.parseValueRecord()
            };
        } else if (posformat === 2) {
            return {
                posFormat: 2,
                coverage: this.parsePointer(Parser.coverage),
                values: this.parseValueRecordList()
            };
        }
        check.assert(false, '0x' + start.toString(16) + ': GPOS lookup type 1 format must be 1 or 2.');
    };

    // https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-2-pair-adjustment-positioning-subtable
    subtableParsers$1[2] = function parseLookup2() {
        var start = this.offset + this.relativeOffset;
        var posFormat = this.parseUShort();
        check.assert(posFormat === 1 || posFormat === 2, '0x' + start.toString(16) + ': GPOS lookup type 2 format must be 1 or 2.');
        var coverage = this.parsePointer(Parser.coverage);
        var valueFormat1 = this.parseUShort();
        var valueFormat2 = this.parseUShort();
        if (posFormat === 1) {
            // Adjustments for Glyph Pairs
            return {
                posFormat: posFormat,
                coverage: coverage,
                valueFormat1: valueFormat1,
                valueFormat2: valueFormat2,
                pairSets: this.parseList(Parser.pointer(Parser.list(function() {
                    return {        // pairValueRecord
                        secondGlyph: this.parseUShort(),
                        value1: this.parseValueRecord(valueFormat1),
                        value2: this.parseValueRecord(valueFormat2)
                    };
                })))
            };
        } else if (posFormat === 2) {
            var classDef1 = this.parsePointer(Parser.classDef);
            var classDef2 = this.parsePointer(Parser.classDef);
            var class1Count = this.parseUShort();
            var class2Count = this.parseUShort();
            return {
                // Class Pair Adjustment
                posFormat: posFormat,
                coverage: coverage,
                valueFormat1: valueFormat1,
                valueFormat2: valueFormat2,
                classDef1: classDef1,
                classDef2: classDef2,
                class1Count: class1Count,
                class2Count: class2Count,
                classRecords: this.parseList(class1Count, Parser.list(class2Count, function() {
                    return {
                        value1: this.parseValueRecord(valueFormat1),
                        value2: this.parseValueRecord(valueFormat2)
                    };
                }))
            };
        }
    };

    subtableParsers$1[3] = function parseLookup3() { return { error: 'GPOS Lookup 3 not supported' }; };
    subtableParsers$1[4] = function parseLookup4() { return { error: 'GPOS Lookup 4 not supported' }; };
    subtableParsers$1[5] = function parseLookup5() { return { error: 'GPOS Lookup 5 not supported' }; };
    subtableParsers$1[6] = function parseLookup6() { return { error: 'GPOS Lookup 6 not supported' }; };
    subtableParsers$1[7] = function parseLookup7() { return { error: 'GPOS Lookup 7 not supported' }; };
    subtableParsers$1[8] = function parseLookup8() { return { error: 'GPOS Lookup 8 not supported' }; };
    subtableParsers$1[9] = function parseLookup9() { return { error: 'GPOS Lookup 9 not supported' }; };

    // https://docs.microsoft.com/en-us/typography/opentype/spec/gpos
    function parseGposTable(data, start) {
        start = start || 0;
        var p = new Parser(data, start);
        var tableVersion = p.parseVersion(1);
        check.argument(tableVersion === 1 || tableVersion === 1.1, 'Unsupported GPOS table version ' + tableVersion);

        if (tableVersion === 1) {
            return {
                version: tableVersion,
                scripts: p.parseScriptList(),
                features: p.parseFeatureList(),
                lookups: p.parseLookupList(subtableParsers$1)
            };
        } else {
            return {
                version: tableVersion,
                scripts: p.parseScriptList(),
                features: p.parseFeatureList(),
                lookups: p.parseLookupList(subtableParsers$1),
                variations: p.parseFeatureVariationsList()
            };
        }

    }

    // GPOS Writing //////////////////////////////////////////////
    // NOT SUPPORTED
    var subtableMakers$1 = new Array(10);

    function makeGposTable(gpos) {
        return new table.Table('GPOS', [
            {name: 'version', type: 'ULONG', value: 0x10000},
            {name: 'scripts', type: 'TABLE', value: new table.ScriptList(gpos.scripts)},
            {name: 'features', type: 'TABLE', value: new table.FeatureList(gpos.features)},
            {name: 'lookups', type: 'TABLE', value: new table.LookupList(gpos.lookups, subtableMakers$1)}
        ]);
    }

    var gpos = { parse: parseGposTable, make: makeGposTable };

    // The `kern` table contains kerning pairs.

    function parseWindowsKernTable(p) {
        var pairs = {};
        // Skip nTables.
        p.skip('uShort');
        var subtableVersion = p.parseUShort();
        check.argument(subtableVersion === 0, 'Unsupported kern sub-table version.');
        // Skip subtableLength, subtableCoverage
        p.skip('uShort', 2);
        var nPairs = p.parseUShort();
        // Skip searchRange, entrySelector, rangeShift.
        p.skip('uShort', 3);
        for (var i = 0; i < nPairs; i += 1) {
            var leftIndex = p.parseUShort();
            var rightIndex = p.parseUShort();
            var value = p.parseShort();
            pairs[leftIndex + ',' + rightIndex] = value;
        }
        return pairs;
    }

    function parseMacKernTable(p) {
        var pairs = {};
        // The Mac kern table stores the version as a fixed (32 bits) but we only loaded the first 16 bits.
        // Skip the rest.
        p.skip('uShort');
        var nTables = p.parseULong();
        //check.argument(nTables === 1, 'Only 1 subtable is supported (got ' + nTables + ').');
        if (nTables > 1) {
            console.warn('Only the first kern subtable is supported.');
        }
        p.skip('uLong');
        var coverage = p.parseUShort();
        var subtableVersion = coverage & 0xFF;
        p.skip('uShort');
        if (subtableVersion === 0) {
            var nPairs = p.parseUShort();
            // Skip searchRange, entrySelector, rangeShift.
            p.skip('uShort', 3);
            for (var i = 0; i < nPairs; i += 1) {
                var leftIndex = p.parseUShort();
                var rightIndex = p.parseUShort();
                var value = p.parseShort();
                pairs[leftIndex + ',' + rightIndex] = value;
            }
        }
        return pairs;
    }

    // Parse the `kern` table which contains kerning pairs.
    function parseKernTable(data, start) {
        var p = new parse.Parser(data, start);
        var tableVersion = p.parseUShort();
        if (tableVersion === 0) {
            return parseWindowsKernTable(p);
        } else if (tableVersion === 1) {
            return parseMacKernTable(p);
        } else {
            throw new Error('Unsupported kern table version (' + tableVersion + ').');
        }
    }

    var kern = { parse: parseKernTable };

    // The `loca` table stores the offsets to the locations of the glyphs in the font.

    // Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,
    // relative to the beginning of the glyphData table.
    // The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)
    // The loca table has two versions: a short version where offsets are stored as uShorts, and a long
    // version where offsets are stored as uLongs. The `head` table specifies which version to use
    // (under indexToLocFormat).
    function parseLocaTable(data, start, numGlyphs, shortVersion) {
        var p = new parse.Parser(data, start);
        var parseFn = shortVersion ? p.parseUShort : p.parseULong;
        // There is an extra entry after the last index element to compute the length of the last glyph.
        // That's why we use numGlyphs + 1.
        var glyphOffsets = [];
        for (var i = 0; i < numGlyphs + 1; i += 1) {
            var glyphOffset = parseFn.call(p);
            if (shortVersion) {
                // The short table version stores the actual offset divided by 2.
                glyphOffset *= 2;
            }

            glyphOffsets.push(glyphOffset);
        }

        return glyphOffsets;
    }

    var loca = { parse: parseLocaTable };

    // opentype.js

    /**
     * The opentype library.
     * @namespace opentype
     */

    // File loaders /////////////////////////////////////////////////////////
    /**
     * Loads a font from a file. The callback throws an error message as the first parameter if it fails
     * and the font as an ArrayBuffer in the second parameter if it succeeds.
     * @param  {string} path - The path of the file
     * @param  {Function} callback - The function to call when the font load completes
     */
    function loadFromFile(path, callback) {
        var fs = require('fs');
        fs.readFile(path, function(err, buffer) {
            if (err) {
                return callback(err.message);
            }

            callback(null, nodeBufferToArrayBuffer(buffer));
        });
    }
    /**
     * Loads a font from a URL. The callback throws an error message as the first parameter if it fails
     * and the font as an ArrayBuffer in the second parameter if it succeeds.
     * @param  {string} url - The URL of the font file.
     * @param  {Function} callback - The function to call when the font load completes
     */
    function loadFromUrl(url, callback) {
        var request = new XMLHttpRequest();
        request.open('get', url, true);
        request.responseType = 'arraybuffer';
        request.onload = function() {
            if (request.response) {
                return callback(null, request.response);
            } else {
                return callback('Font could not be loaded: ' + request.statusText);
            }
        };

        request.onerror = function () {
            callback('Font could not be loaded');
        };

        request.send();
    }

    // Table Directory Entries //////////////////////////////////////////////
    /**
     * Parses OpenType table entries.
     * @param  {DataView}
     * @param  {Number}
     * @return {Object[]}
     */
    function parseOpenTypeTableEntries(data, numTables) {
        var tableEntries = [];
        var p = 12;
        for (var i = 0; i < numTables; i += 1) {
            var tag = parse.getTag(data, p);
            var checksum = parse.getULong(data, p + 4);
            var offset = parse.getULong(data, p + 8);
            var length = parse.getULong(data, p + 12);
            tableEntries.push({tag: tag, checksum: checksum, offset: offset, length: length, compression: false});
            p += 16;
        }

        return tableEntries;
    }

    /**
     * Parses WOFF table entries.
     * @param  {DataView}
     * @param  {Number}
     * @return {Object[]}
     */
    function parseWOFFTableEntries(data, numTables) {
        var tableEntries = [];
        var p = 44; // offset to the first table directory entry.
        for (var i = 0; i < numTables; i += 1) {
            var tag = parse.getTag(data, p);
            var offset = parse.getULong(data, p + 4);
            var compLength = parse.getULong(data, p + 8);
            var origLength = parse.getULong(data, p + 12);
            var compression = (void 0);
            if (compLength < origLength) {
                compression = 'WOFF';
            } else {
                compression = false;
            }

            tableEntries.push({tag: tag, offset: offset, compression: compression,
                compressedLength: compLength, length: origLength});
            p += 20;
        }

        return tableEntries;
    }

    /**
     * @typedef TableData
     * @type Object
     * @property {DataView} data - The DataView
     * @property {number} offset - The data offset.
     */

    /**
     * @param  {DataView}
     * @param  {Object}
     * @return {TableData}
     */
    function uncompressTable(data, tableEntry) {
        if (tableEntry.compression === 'WOFF') {
            var inBuffer = new Uint8Array(data.buffer, tableEntry.offset + 2, tableEntry.compressedLength - 2);
            var outBuffer = new Uint8Array(tableEntry.length);
            tinyInflate(inBuffer, outBuffer);
            if (outBuffer.byteLength !== tableEntry.length) {
                throw new Error('Decompression error: ' + tableEntry.tag + ' decompressed length doesn\'t match recorded length');
            }

            var view = new DataView(outBuffer.buffer, 0);
            return {data: view, offset: 0};
        } else {
            return {data: data, offset: tableEntry.offset};
        }
    }

    // Public API ///////////////////////////////////////////////////////////

    /**
     * Parse the OpenType file data (as an ArrayBuffer) and return a Font object.
     * Throws an error if the font could not be parsed.
     * @param  {ArrayBuffer}
     * @param  {Object} opt - options for parsing
     * @return {opentype.Font}
     */
    function parseBuffer(buffer, opt) {
        opt = (opt === undefined || opt === null) ?  {} : opt;

        var indexToLocFormat;
        var ltagTable;

        // Since the constructor can also be called to create new fonts from scratch, we indicate this
        // should be an empty font that we'll fill with our own data.
        var font = new Font({empty: true});

        // OpenType fonts use big endian byte ordering.
        // We can't rely on typed array view types, because they operate with the endianness of the host computer.
        // Instead we use DataViews where we can specify endianness.
        var data = new DataView(buffer, 0);
        var numTables;
        var tableEntries = [];
        var signature = parse.getTag(data, 0);
        if (signature === String.fromCharCode(0, 1, 0, 0) || signature === 'true' || signature === 'typ1') {
            font.outlinesFormat = 'truetype';
            numTables = parse.getUShort(data, 4);
            tableEntries = parseOpenTypeTableEntries(data, numTables);
        } else if (signature === 'OTTO') {
            font.outlinesFormat = 'cff';
            numTables = parse.getUShort(data, 4);
            tableEntries = parseOpenTypeTableEntries(data, numTables);
        } else if (signature === 'wOFF') {
            var flavor = parse.getTag(data, 4);
            if (flavor === String.fromCharCode(0, 1, 0, 0)) {
                font.outlinesFormat = 'truetype';
            } else if (flavor === 'OTTO') {
                font.outlinesFormat = 'cff';
            } else {
                throw new Error('Unsupported OpenType flavor ' + signature);
            }

            numTables = parse.getUShort(data, 12);
            tableEntries = parseWOFFTableEntries(data, numTables);
        } else {
            throw new Error('Unsupported OpenType signature ' + signature);
        }

        var cffTableEntry;
        var fvarTableEntry;
        var glyfTableEntry;
        var gposTableEntry;
        var gsubTableEntry;
        var hmtxTableEntry;
        var kernTableEntry;
        var locaTableEntry;
        var nameTableEntry;
        var metaTableEntry;
        var p;

        for (var i = 0; i < numTables; i += 1) {
            var tableEntry = tableEntries[i];
            var table = (void 0);
            switch (tableEntry.tag) {
                case 'cmap':
                    table = uncompressTable(data, tableEntry);
                    font.tables.cmap = cmap.parse(table.data, table.offset);
                    font.encoding = new CmapEncoding(font.tables.cmap);
                    break;
                case 'cvt ' :
                    table = uncompressTable(data, tableEntry);
                    p = new parse.Parser(table.data, table.offset);
                    font.tables.cvt = p.parseShortList(tableEntry.length / 2);
                    break;
                case 'fvar':
                    fvarTableEntry = tableEntry;
                    break;
                case 'fpgm' :
                    table = uncompressTable(data, tableEntry);
                    p = new parse.Parser(table.data, table.offset);
                    font.tables.fpgm = p.parseByteList(tableEntry.length);
                    break;
                case 'head':
                    table = uncompressTable(data, tableEntry);
                    font.tables.head = head.parse(table.data, table.offset);
                    font.unitsPerEm = font.tables.head.unitsPerEm;
                    indexToLocFormat = font.tables.head.indexToLocFormat;
                    break;
                case 'hhea':
                    table = uncompressTable(data, tableEntry);
                    font.tables.hhea = hhea.parse(table.data, table.offset);
                    font.ascender = font.tables.hhea.ascender;
                    font.descender = font.tables.hhea.descender;
                    font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;
                    break;
                case 'hmtx':
                    hmtxTableEntry = tableEntry;
                    break;
                case 'ltag':
                    table = uncompressTable(data, tableEntry);
                    ltagTable = ltag.parse(table.data, table.offset);
                    break;
                case 'maxp':
                    table = uncompressTable(data, tableEntry);
                    font.tables.maxp = maxp.parse(table.data, table.offset);
                    font.numGlyphs = font.tables.maxp.numGlyphs;
                    break;
                case 'name':
                    nameTableEntry = tableEntry;
                    break;
                case 'OS/2':
                    table = uncompressTable(data, tableEntry);
                    font.tables.os2 = os2.parse(table.data, table.offset);
                    break;
                case 'post':
                    table = uncompressTable(data, tableEntry);
                    font.tables.post = post.parse(table.data, table.offset);
                    font.glyphNames = new GlyphNames(font.tables.post);
                    break;
                case 'prep' :
                    table = uncompressTable(data, tableEntry);
                    p = new parse.Parser(table.data, table.offset);
                    font.tables.prep = p.parseByteList(tableEntry.length);
                    break;
                case 'glyf':
                    glyfTableEntry = tableEntry;
                    break;
                case 'loca':
                    locaTableEntry = tableEntry;
                    break;
                case 'CFF ':
                    cffTableEntry = tableEntry;
                    break;
                case 'kern':
                    kernTableEntry = tableEntry;
                    break;
                case 'GPOS':
                    gposTableEntry = tableEntry;
                    break;
                case 'GSUB':
                    gsubTableEntry = tableEntry;
                    break;
                case 'meta':
                    metaTableEntry = tableEntry;
                    break;
            }
        }

        var nameTable = uncompressTable(data, nameTableEntry);
        font.tables.name = _name.parse(nameTable.data, nameTable.offset, ltagTable);
        font.names = font.tables.name;

        if (glyfTableEntry && locaTableEntry) {
            var shortVersion = indexToLocFormat === 0;
            var locaTable = uncompressTable(data, locaTableEntry);
            var locaOffsets = loca.parse(locaTable.data, locaTable.offset, font.numGlyphs, shortVersion);
            var glyfTable = uncompressTable(data, glyfTableEntry);
            font.glyphs = glyf.parse(glyfTable.data, glyfTable.offset, locaOffsets, font, opt);
        } else if (cffTableEntry) {
            var cffTable = uncompressTable(data, cffTableEntry);
            cff.parse(cffTable.data, cffTable.offset, font, opt);
        } else {
            throw new Error('Font doesn\'t contain TrueType or CFF outlines.');
        }

        var hmtxTable = uncompressTable(data, hmtxTableEntry);
        hmtx.parse(font, hmtxTable.data, hmtxTable.offset, font.numberOfHMetrics, font.numGlyphs, font.glyphs, opt);
        addGlyphNames(font, opt);

        if (kernTableEntry) {
            var kernTable = uncompressTable(data, kernTableEntry);
            font.kerningPairs = kern.parse(kernTable.data, kernTable.offset);
        } else {
            font.kerningPairs = {};
        }

        if (gposTableEntry) {
            var gposTable = uncompressTable(data, gposTableEntry);
            font.tables.gpos = gpos.parse(gposTable.data, gposTable.offset);
            font.position.init();
        }

        if (gsubTableEntry) {
            var gsubTable = uncompressTable(data, gsubTableEntry);
            font.tables.gsub = gsub.parse(gsubTable.data, gsubTable.offset);
        }

        if (fvarTableEntry) {
            var fvarTable = uncompressTable(data, fvarTableEntry);
            font.tables.fvar = fvar.parse(fvarTable.data, fvarTable.offset, font.names);
        }

        if (metaTableEntry) {
            var metaTable = uncompressTable(data, metaTableEntry);
            font.tables.meta = meta.parse(metaTable.data, metaTable.offset);
            font.metas = font.tables.meta;
        }

        return font;
    }

    /**
     * Asynchronously load the font from a URL or a filesystem. When done, call the callback
     * with two arguments `(err, font)`. The `err` will be null on success,
     * the `font` is a Font object.
     * We use the node.js callback convention so that
     * opentype.js can integrate with frameworks like async.js.
     * @alias opentype.load
     * @param  {string} url - The URL of the font to load.
     * @param  {Function} callback - The callback.
     */
    function load(url, callback, opt) {
        var isNode = typeof window === 'undefined';
        var loadFn = isNode ? loadFromFile : loadFromUrl;

        return new Promise(function (resolve, reject) {
            loadFn(url, function(err, arrayBuffer) {
                if (err) {
                    if (callback) {
                        return callback(err);
                    } else {
                        reject(err);
                    }
                }
                var font;
                try {
                    font = parseBuffer(arrayBuffer, opt);
                } catch (e) {
                    if (callback) {
                        return callback(e, null);
                    } else {
                        reject(e);
                    }
                }
                if (callback) {
                    return callback(null, font);
                } else {
                    resolve(font);
                }
            });
        });
    }

    /**
     * Create a surface by projecting a curve in a direction.
     *
     * @param curve The curve to project.
     * @param offset The direction and distance to project curve.
     * @param flipped Whether the surface's default orientation (normal = curve tangent cross offset) should be flipped.
     */
    function projectCurve(curve, offset, flipped) {
        if (curve instanceof L3) {
            const surfaceNormal = offset.cross(curve.dir1).toLength(flipped ? -1 : 1);
            return new PlaneSurface(P3.normalOnAnchor(surfaceNormal, curve.anchor));
        }
        if (curve instanceof EllipseCurve) {
            const curveDir = flipped ? offset : offset.negated();
            return new CylinderSurface(curve, curveDir.unit(), undefined, undefined);
        }
        if (curve instanceof BezierCurve || curve instanceof XiEtaCurve) {
            const curveDir = offset.times(flipped ? 1 : -1);
            return new ProjectedCurveSurface(curve, curveDir, undefined, undefined, flipped ? 0 : -1, flipped ? 1 : 0);
        }
        throw new Error();
    }
    /**
     * Create a surface by projecting a curve onto a point.
     */
    function projectPointCurve(curve, tMin = curve.tMin, tMax = curve.tMax, p, flipped) {
        if (curve instanceof L3) {
            const up = curve.anchor.to(p).rejectedFrom(curve.dir1);
            return PlaneSurface.forAnchorAndPlaneVectors(curve.anchor, curve.dir1, up.unit(), tMin, tMax, 0, up.length());
        }
        else if (curve instanceof EllipseCurve) {
            // flip f2 by default
            const factor = -1 * (flipped ? -1 : 1);
            return new ConicSurface(p, curve.f1.times(factor), curve.f2, p.to(curve.center), tMin, tMax, 0, 1);
        }
        else {
            throw new Error("projectPointCurve not implemented for " + curve.constructor.name);
        }
    }
    /**
     * Create a surface by rotating a curve in the XZ-plane, with X > 0, around the Z-axis according to the right-hand rule.
     * @param curve The curve to rotate.
     * @param tMin The minimum value for t for which the surface should be defined.
     * @param tMax The maximum value for t for which the surface should be defined.
     * @param angle How much the curve should be rotated. sMin/sMax will be be 0/angle.
     * @param flipped Whether the surface's default orientation (normal = curve tangent cross rotation tangent) should be
     * flipped.
     */
    function rotateCurve(curve, tMin = curve.tMin, tMax = curve.tMax, angle, flipped) {
        assertf(() => new PlaneSurface(P3.ZX).containsCurve(curve));
        if (curve instanceof L3) {
            if (curve.dir1.isParallelTo(V3.Z)) {
                if (eq0(curve.anchor.x)) {
                    return undefined;
                    //throw new Error('Cannot rotate curve colinear to Z axis.')
                }
                const baseEllipse = new EllipseCurve(V3.O, curve.anchor.xy(), curve.anchor.xy().getPerpendicular(), 0, angle);
                // if curve.dir1 is going up (+Z), it the cylinder surface should face inwards
                const factor = (curve.dir1.z > 0 ? -1 : 1) * (flipped ? -1 : 1);
                const [zMin, zMax] = [
                    curve.at(tMin).z * factor,
                    curve.at(tMax).z * factor,
                ].sort(MINUS);
                return new CylinderSurface(baseEllipse, V3.Z.times(factor), 0, angle, zMin, zMax);
            }
            if (curve.at(tMin).xy().dot(curve.dir1) *
                curve.at(tMax).xy().dot(curve.dir1) <
                0) {
                throw new Error("line cannot cross the Z axis in the [tMin, tMax] interval, as conic surfaces cannot have an hourglass shape.");
            }
            if (curve.dir1.isPerpendicularTo(V3.Z)) {
                // if line.dir1 is pointing aways from V3.Z, then the surface should face up
                const factor = (curve.at(lerp$1(tMin, tMax, 0.5)).dot(curve.dir1) > 0 ? 1 : -1) *
                    (flipped ? -1 : 1);
                return new PlaneSurface(new P3(V3.Z.times(factor), curve.anchor.z * factor));
            }
            else {
                // apex is intersection of segment with Z-axis
                const a = curve.at(tMin), b = curve.at(tMax);
                const apexZ = a.z - (a.x * (b.z - a.z)) / (b.x - a.x);
                const apex = new V3(0, 0, apexZ);
                const factor = -(a.x > b.x ? -1 : 1) * (flipped ? -1 : 1);
                const s = new ConicSurface(apex, new V3(curve.dir1.lengthXY(), 0, 0), new V3(0, curve.dir1.lengthXY(), 0), new V3(0, 0, (a.x > b.x ? -1 : 1) * curve.dir1.z), 0, angle, 0, 1);
                return factor > 0 ? s : s.flipped();
            }
        }
        if (curve instanceof EllipseCurve) {
            const a = curve.at(tMin), b = curve.at(tMax);
            const ell = curve.rightAngled();
            const f1Perp = ell.f1.isPerpendicularTo(V3.Z), f2Perp = ell.f2.isPerpendicularTo(V3.Z);
            if (L3.Z.containsPoint(ell.center) && (f1Perp || f2Perp)) {
                flipped = flipped == a.z > b.z;
                let width = ell.f1.length(), height = ell.f2.length();
                if (ell.f1.isParallelTo(V3.Z)) {
                    [width, height] = [height, width];
                }
                return EllipsoidSurface.forABC(width, (!flipped ? 1 : -1) * width, height, ell.center);
            }
            else {
                const s = new RotatedCurveSurface(curve, M4.IDENTITY, tMin, tMax);
                return s;
            }
        }
        throw new Error();
    }
    var B2T;
    (function (B2T) {
        /**
         * Create a [BRep] of an axis-aligned box width starting at the origin and extending into +XYZ space.
         * @param width x-direction size.
         * @param height y-direction size.
         * @param depth z-direction size.
         * @param name
         */
        function box(width = 1, height = 1, depth = 1, name = "box" + getGlobalId()) {
            assertNumbers(width, height, depth);
            assert("string" === typeof name);
            const baseVertices = [
                new V3(0, 0, 0),
                new V3(0, height, 0),
                new V3(width, height, 0),
                new V3(width, 0, 0),
            ];
            const generator = callsce("B2T.box", width, height, depth, name);
            return B2T.extrudeVertices(baseVertices, P3.XY.flipped(), new V3(0, 0, depth), name, generator);
        }
        B2T.box = box;
        function puckman(radius, rads, height, name = "puckman" + getGlobalId()) {
            assertf(() => lt(0, radius));
            assertf(() => lt(0, rads) && le(rads, TAU));
            assertf(() => lt(0, height));
            const edges = StraightEdge.chain([
                V3.O,
                new V3(radius, 0, 0),
                new V3(radius, 0, height),
                new V3(0, 0, height),
            ], true);
            return B2T.rotateEdges(edges, rads, name);
        }
        B2T.puckman = puckman;
        function registerVertexName(map, name, p) {
            // TODO
            if (!Array.from(map.keys()).some((p2) => p2.like(p))) {
                map.set(p, name);
            }
        }
        B2T.registerVertexName = registerVertexName;
        /**
         * Create a [BRep] by projecting a number of edges in a direction.
         * @param baseFaceEdges
         * @param baseFacePlane
         * @param offset
         * @param name
         * @param gen
         * @param infoFactory
         */
        function extrudeEdges(baseFaceEdges, baseFacePlane = P3.XY, offset = V3.Z, name = "extrude" + getGlobalId(), gen, infoFactory) {
            baseFaceEdges = fixEdges(baseFaceEdges);
            //Array.from(combinations(baseFaceEdges.length)).forEach(({i, j}) => {
            //	assertf(() => !Edge.edgesIntersect(baseFaceEdges[i], baseFaceEdges[j]), baseFaceEdges[i].sce +
            // baseFaceEdges[j].sce) })
            assertf(() => Edge.isLoop(baseFaceEdges));
            // TODO checks..
            //if (offset.dot(baseFacePlane.normal1) > 0) {
            //	baseFacePlane = baseFacePlane.flipped()
            //}
            const vertexNames = new Map();
            const basePlaneSurface = new PlaneSurface(baseFacePlane);
            //assert(basePlaneSurface.edgeLoopCCW(baseFaceEdges), 'edges not CCW on baseFacePlane')
            const translationMatrix = M4.translate(offset);
            const topEdges = baseFaceEdges.map((edge) => edge.transform(translationMatrix, "top"));
            const edgeCount = baseFaceEdges.length;
            const bottomInfo = infoFactory && infoFactory.extrudeBottom(basePlaneSurface, baseFaceEdges);
            const bottomFace = new PlaneFace(basePlaneSurface, baseFaceEdges, [], name + "Bottom", bottomInfo);
            const topFaceEdges = topEdges.map((edge) => edge.flipped()).reverse();
            const topSurface = new PlaneSurface(baseFacePlane.flipped().translated(offset));
            const topInfo = infoFactory && infoFactory.extrudeBottom(topSurface, topFaceEdges);
            const topFace = new PlaneFace(topSurface, topFaceEdges, [], name + "Top", topInfo);
            baseFaceEdges.forEach((edge) => B2T.registerVertexName(vertexNames, edge.name + "A", edge.a));
            topFaceEdges.forEach((edge) => B2T.registerVertexName(vertexNames, edge.name + "A", edge.a));
            const ribs = arrayFromFunction(edgeCount, (i) => StraightEdge.throughPoints(baseFaceEdges[i].a, topEdges[i].a, name + "Rib" + i));
            const faces = baseFaceEdges.map((edge, i) => {
                const faceName = name + "Wall" + i;
                const j = (i + 1) % edgeCount;
                const faceEdges = [
                    baseFaceEdges[i].flipped(),
                    ribs[i],
                    topEdges[i],
                    ribs[j].flipped(),
                ];
                const surface = projectCurve(edge.curve, offset, edge.reversed);
                const info = infoFactory && infoFactory.extrudeWall(i, surface, faceEdges);
                return Face.create(surface, faceEdges, undefined, faceName, info);
            });
            faces.push(bottomFace, topFace);
            gen =
                gen ||
                    callsce("B2T.extrudeEdges", baseFaceEdges, baseFacePlane, offset, name);
            return new BRep(faces, baseFacePlane.normal1.dot(offset) > 0, gen, vertexNames);
        }
        B2T.extrudeEdges = extrudeEdges;
        function cylinder(radius = 1, height = 1, rads = TAU, name = "cylinder" + getGlobalId()) {
            const vertices = [
                new V3(0, 0, 0),
                new V3(radius, 0, 0),
                new V3(radius, 0, height),
                new V3(0, 0, height),
            ];
            return rotateEdges(StraightEdge.chain(vertices, true), rads, name);
        }
        B2T.cylinder = cylinder;
        function cone(radius = 1, height = 1, rads = TAU, name = "cone" + getGlobalId()) {
            const vertices = [
                new V3(0, 0, 0),
                new V3(radius, 0, height),
                new V3(0, 0, height),
            ];
            return rotateEdges(StraightEdge.chain(vertices, true), rads, name);
        }
        B2T.cone = cone;
        function sphere(radius = 1, name = "sphere" + getGlobalId(), rot = TAU) {
            const ee = new PCurveEdge(new EllipseCurve(V3.O, new V3(0, 0, -radius), new V3(radius, 0, 0)), new V3(0, 0, -radius), new V3(0, 0, radius), 0, PI$3, undefined, new V3(radius, 0, 0), new V3(-radius, 0, 0));
            const generator = callsce("B2T.sphere", radius, name, rot);
            return rotateEdges([StraightEdge.throughPoints(ee.b, ee.a), ee], rot, name, generator);
        }
        B2T.sphere = sphere;
        /**
         * Create a [[BRep]] of a menger sponge.
         * @param res 0: just a cube, 1: every cube face has one hole, 2: 9 holes, etc
         * @param name
         */
        function menger(res = 2, name = "menger" + getGlobalId()) {
            let result = B2T.box(1, 1, 1);
            if (0 == res)
                return result;
            const punch = B2T.box(1 / 3, 1 / 3, 2)
                .translate(1 / 3, 1 / 3, -1 / 2)
                .flipped();
            function recurse(steps, m4) {
                result = result.and(punch.transform(m4));
                if (steps > 1) {
                    const scaled = m4.times(M4.scale(1 / 3, 1 / 3, 1));
                    for (let i = 0; i < 9; i++) {
                        if (4 == i)
                            continue;
                        recurse(steps - 1, scaled.times(M4.translate(i % 3, (i / 3) | 0, 0)));
                    }
                }
            }
            recurse(res, M4.IDENTITY);
            recurse(res, M4.YZX);
            recurse(res, M4.ZXY);
            return result;
        }
        B2T.menger = menger;
        function menger2(res = 2, name = "menger" + getGlobalId()) {
            if (0 == res)
                return B2T.box(1, 1, 1);
            const punch = B2T.box(1 / 3, 1 / 3, 2)
                .translate(1 / 3, 1 / 3, -1 / 2)
                .flipped();
            const stencilFaces = [];
            function recurse(steps, m4) {
                stencilFaces.push(...punch.transform(m4).faces);
                if (steps > 1) {
                    const scaled = m4.times(M4.scale(1 / 3, 1 / 3, 1));
                    for (let i = 0; i < 9; i++) {
                        if (4 == i)
                            continue;
                        recurse(steps - 1, scaled.times(M4.translate(i % 3, (i / 3) | 0, 0)));
                    }
                }
            }
            recurse(res, M4.IDENTITY);
            const stencil = new BRep(stencilFaces, true);
            return B2T.box(1, 1, 1, name)
                .and(stencil)
                .and(stencil.transform(M4.YZX))
                .and(stencil.transform(M4.ZXY));
        }
        B2T.menger2 = menger2;
        /**
         * Create a [BRep] of a torus.
         * @param rSmall The radius to the surface of the torus.
         * @param rLarge The radius from the origin to the inside of the torus.
         * @param rads
         * @param name
         */
        function torus(rSmall, rLarge, rads = TAU, name = "torus" + getGlobalId()) {
            assertNumbers(rSmall, rLarge, rads);
            assertf(() => rLarge > rSmall);
            const curves = [
                EllipseCurve.semicircle(rSmall, new V3(rLarge, 0, 0)),
                EllipseCurve.semicircle(-rSmall, new V3(rLarge, 0, 0)),
            ];
            const baseEdges = curves.map((c) => PCurveEdge.forCurveAndTs(c, 0, Math.PI).rotateX(PI$3 / 2));
            return B2T.rotateEdges(baseEdges, rads, name);
        }
        B2T.torus = torus;
        /**
         * Create a [BRep] by smoothly rotating edges around Z.
         * baseLoop should be CCW on XZ plane for a bounded BRep
         */
        function rotateEdges(baseLoop, totalRads, name = "rotateEdges" + getGlobalId(), generator, infoFactory) {
            assert(baseLoop.every((e) => new PlaneSurface(P3.ZX).containsCurve(e.curve)));
            assert(!eq(PI$3, totalRads) || PI$3 == totalRads); // URHGJ
            assertf(() => lt(0, totalRads) && le(totalRads, TAU));
            totalRads = snap(totalRads, TAU);
            assertf(() => Edge.isLoop(baseLoop));
            const basePlane = new PlaneSurface(P3.ZX.flipped()).edgeLoopCCW(baseLoop)
                ? new PlaneSurface(P3.ZX.flipped())
                : new PlaneSurface(P3.ZX);
            // const rotationSteps = ceil((totalRads - NLA_PRECISION) / PI)
            // const angles = rotationSteps == 1 ? [-PI, -PI + totalRads] : [-PI, 0, totalRads - PI]
            const open = !eq(totalRads, 2 * PI$3);
            const baseRibCurves = baseLoop.map((edge) => {
                const a = edge.a, radius = a.lengthXY();
                if (!eq0(radius)) {
                    return new EllipseCurve(V(0, 0, a.z), V(radius, 0, 0), V(0, radius, 0));
                }
                return undefined;
            });
            const baseSurfaces = baseLoop.map((edge) => {
                const s = rotateCurve(edge.curve, edge.minT, edge.maxT, PI$3, edge.deltaT() > 0);
                const t = lerp$1(edge.aT, edge.bT, 0.5);
                s &&
                    assert(edge
                        .tangentAt(t)
                        .cross(V3.Y)
                        .dot(s.normalP(edge.curve.at(t))) < 0);
                return s;
            });
            let stepStartEdges = baseLoop, stepEndEdges;
            const faces = [];
            for (let rot = 0; rot < totalRads; rot += PI$3) {
                const aT = 0, bT = min$3(totalRads - rot, PI$3);
                const rotation = M4.rotateZ(rot + bT);
                stepEndEdges =
                    rot + bT == TAU
                        ? baseLoop
                        : baseLoop.map((edge) => edge.transform(rotation));
                const ribs = arrayFromFunction(baseLoop.length, (i) => {
                    const a = stepStartEdges[i].a, radius = a.lengthXY();
                    const b = stepEndEdges[i].a;
                    if (!eq0(radius)) {
                        const curve = 0 === rot ? baseRibCurves[i] : baseRibCurves[i].rotateZ(rot);
                        return new PCurveEdge(curve, a, b, aT, bT, undefined, curve.tangentAt(aT), curve.tangentAt(bT), name + "rib" + i);
                    }
                    return undefined;
                });
                for (let edgeIndex = 0; edgeIndex < baseLoop.length; edgeIndex++) {
                    if (baseSurfaces[edgeIndex]) {
                        const edge = stepStartEdges[edgeIndex];
                        const ipp = (edgeIndex + 1) % baseLoop.length;
                        const faceEdges = [
                            stepStartEdges[edgeIndex].flipped(),
                            !eq0(edge.a.x) && ribs[edgeIndex],
                            stepEndEdges[edgeIndex],
                            !eq0(edge.b.x) && ribs[ipp].flipped(),
                        ].filter((x) => x);
                        const surface = 0 === rot
                            ? baseSurfaces[edgeIndex]
                            : baseSurfaces[edgeIndex].rotateZ(rot);
                        const info = infoFactory &&
                            infoFactory.extrudeWall(edgeIndex, surface, faceEdges, undefined);
                        faces.push(Face.create(surface, faceEdges, undefined, name + "Wall" + edgeIndex, info));
                    }
                }
                stepStartEdges = stepEndEdges;
            }
            if (open) {
                const endFaceEdges = Edge.reversePath(stepEndEdges);
                const infoStart = infoFactory && infoFactory.rotationStart(basePlane, baseLoop, undefined);
                const infoEnd = infoFactory &&
                    infoFactory.rotationEnd(basePlane.flipped().rotateZ(totalRads), endFaceEdges, undefined);
                faces.push(new PlaneFace(basePlane, baseLoop, undefined, name + "start", infoStart), new PlaneFace(basePlane.flipped().rotateZ(totalRads), endFaceEdges, undefined, name + "end", infoEnd));
            }
            const infiniteVolume = new PlaneSurface(P3.ZX).edgeLoopCCW(baseLoop);
            return new BRep(faces, infiniteVolume, generator);
        }
        B2T.rotateEdges = rotateEdges;
        /**
         * loop should be CCW on XZ plane for a bounded BRep
         */
        //export function rotateEdgesUnsplit(loop: Edge[], rads: raddd, name: string): BRep {
        //	assert(Edge.isLoop(loop))
        //	const rotationMatrix = M4.rotateZ(rads)
        //	const open = !eq(rads, 2 * PI)
        //	const endEdges = open ? loop.map(edge => edge.transform(rotationMatrix)) : loop
        //	const edgeCount = loop.length
        //	const ribs = arrayFromFunction(edgeCount, i => {
        //		const a = loop[i].a, radius = a.lengthXY()
        //		const b = endEdges[i].a
        //		if (!eq0(radius)) {
        //			const curve = new EllipseCurve(V(0, 0, a.z), V(-radius, 0, 0), V(0, -radius, 0))
        //			const aT = -PI, bT = -PI + rads
        //			return new PCurveEdge(curve, a, b, aT, bT, undefined, curve.tangentAt(aT), curve.tangentAt(bT), name
        // + 'rib' + i) } }) const faces = loop.map((edge, i) => { const ipp = (i + 1) % edgeCount console.log('ljl', i,
        // ipp, ribs) const faceEdges = [ edge.flipped(), !eq0(edge.a.x) && ribs[i], endEdges[i], !eq0(edge.b.x) &&
        // ribs[ipp].flipped()].filter(x => x) if (edge instanceof StraightEdge) { const line = edge.curve let surface if
        // (line.dir1.isParallelTo(V3.Z)) { if (eq0(edge.a.x)) { return } let flipped = edge.a.z > edge.b.z surface = new
        // CylinderSurface(ribs[i].curve, !flipped ? V3.Z : V3.Z.negated()) } else if
        // (line.dir1.isPerpendicularTo(V3.Z)) { let flipped = edge.a.x > edge.b.x let surface = new PlaneSurface(new
        // P3(V3.Z, edge.a.z)) if (!flipped) surface = surface.flipped() if (!open) { const hole = flipped ? !eq0(edge.b.x)
        // && ribs[ipp].flipped() : !eq0(edge.a.x) && ribs[i] return new PlaneFace(surface, [flipped ? ribs[i] :
        // ribs[ipp].flipped()], hole && [[hole]]) } return new PlaneFace(surface, faceEdges) } else { // apex is
        // intersection of segment with Z-axis let a = edge.a, b = edge.b let apexZ = a.z - a.x * (b.z - a.z) / (b.x - a.x)
        // let apex = new V3(0, 0, apexZ) let flipped = edge.a.z > edge.b.z surface =
        // ConicSurface.atApexThroughEllipse(apex, ribs[a.x > b.x ? i : ipp].curve as EllipseCurve, !flipped ? 1 : -1)
        // } return Face.create(surface, faceEdges) } if (edge.curve instanceof EllipseCurve) { let flipped = undefined
        // let ell = edge.curve.rightAngled() let f1Perp = ell.f1.isPerpendicularTo(V3.Z), f2Perp =
        // ell.f2.isPerpendicularTo(V3.Z) if (L3.Z.containsPoint(ell.center) && (f1Perp || f2Perp)) { let f3length = f1Perp
        // ? ell.f1.length() : ell.f2.length() if (flipped) { f3length *= -1 } let surface = new
        // EllipsoidSurface(ell.center, ell.f1, ell.f2, ell.f1.cross(ell.f2).toLength(f3length)) return new
        // RotationFace(surface, faceEdges) } } else { assert(false, edge) } }).filter(x => x) if (open) { const
        // endFaceEdges = endEdges.map(edge => edge.flipped()).reverse() faces.push( new PlaneFace(new
        // PlaneSurface(P3.ZX.flipped()), loop), new PlaneFace(new PlaneSurface(P3.ZX.rotateZ(rads)), endFaceEdges)) }
        // return new BRep(faces, undefined) }
        function quaffle() {
            const baseK = B2T.sphere(1).translate(0, 1.7).flipped();
            //const baseK = B2T.box().scale(0.2).translate(0, 0.95).flipped()
            // const vs = B2T.DODECAHEDRON_VERTICES.concat(
            // B2T.DODECAHEDRON_FACE_VERTICES.map(fis => fis
            // .map(vi => B2T.DODECAHEDRON_VERTICES[vi])
            // .reduce((a,b) => a.plus(b), V3.O)
            // .unit()))
            const ss = new BRep(B2T.TETRAHEDRON_VERTICES.flatMap((v) => baseK.rotateAB(V3.Y, v).faces), false);
            //return ss
            return B2T.sphere().and(ss);
        }
        B2T.quaffle = quaffle;
        function extrudeFace(face, dir) {
            return new BRep(extrudeEdges(face.contour, face.surface.plane, dir)
                .faces.slice(0, -2)
                .concat(face, face.translate(dir.x, dir.y, dir.z).flipped(), face.holes.flatMap((hole) => extrudeEdges(hole, face.surface.plane.flipped(), dir).faces.slice(0, -2))), false);
        }
        B2T.extrudeFace = extrudeFace;
        function loadFonts() {
            return loadFont("fonts/FiraSansMedium.woff").then((font) => (B2T.defaultFont = font));
        }
        B2T.loadFonts = loadFonts;
        const loadedFonts = new Map();
        function loadFont(fontPath) {
            return new Promise(function (resolve, reject) {
                const font = loadedFonts.get(fontPath);
                if (font) {
                    resolve(font);
                }
                else {
                    load(fontPath, function (err, f) {
                        if (err) {
                            reject(err);
                        }
                        else {
                            loadedFonts.set(fontPath, f);
                            resolve(f);
                        }
                    });
                }
            });
        }
        B2T.loadFont = loadFont;
        function loadFontsAsync(callback) {
            if (B2T.defaultFont) {
                callback();
            }
            else {
                load("fonts/FiraSansMedium.woff", function (err, font) {
                    if (err) {
                        throw new Error("Could not load font: " + err);
                    }
                    else {
                        B2T.defaultFont = font;
                        callback();
                    }
                });
            }
        }
        B2T.loadFontsAsync = loadFontsAsync;
        /**
         * Create the [BRep] of a string rendered in a font.
         * @param text
         * @param size
         * @param depth
         * @param font An opentype.js font.
         */
        function text(text, size, depth = 1, font = B2T.defaultFont) {
            const path = font.getPath(text, 0, 0, size);
            const subpaths = [];
            path.commands.forEach((c) => {
                if (c.type == "M") {
                    subpaths.push([]);
                }
                getLast(subpaths).push(c);
            });
            const loops = subpaths.map((sp) => {
                const path = new Path();
                path.commands = sp;
                const loop = Edge.reversePath(edgePathFromSVG(path.toPathData(13))).map((e) => e.mirrorY());
                assert(Edge.isLoop(loop));
                return loop;
            });
            const faces = Face.assembleFacesFromLoops(loops, new PlaneSurface(P3.XY), PlaneFace);
            const generator = callsce("B2T.text", text, size, depth);
            return BRep.join(faces.map((face) => B2T.extrudeFace(face, V(0, 0, -depth))), generator);
        }
        B2T.text = text;
        function minorityReport() {
            const a = B2T.sphere();
            const b = B2T.text("LEO CROW", 64, 128)
                .scale(0.1 / 32)
                .translate(-0.5, -0.05, 1.2)
                .flipped();
            const c = B2T.sphere(0.98);
            return a.and(b).plus(c);
        }
        B2T.minorityReport = minorityReport;
        function whatever() {
            const iso = icosahedron();
            const numbersBRep = BRep.join(iso.faces.map((face, i) => {
                const numberBRep = text("" + (i + 1), 0.4, -2);
                const centroid = face.contour
                    .map((edge) => edge.a)
                    .reduce((a, b) => a.plus(b), V3.O)
                    .div(3);
                const sys = M4.forSys(face.contour[0].aDir, centroid.cross(face.contour[0].aDir), centroid.unit(), centroid);
                return numberBRep.transform(sys.times(M4.translate(-numberBRep.getAABB().size().x / 2, -0.1, -0.04)));
            }));
            const s = sphere(0.9);
            //return iso.and(numbersBRep)
            return iso.and(s).and(numbersBRep);
            //return numbersBRep
        }
        B2T.whatever = whatever;
        function whatever3() {
            const t = B2T.torus(1, 2);
            return B2T.box(5, 5, 2).translate(-2.5, -2.5).minus(t);
        }
        B2T.whatever3 = whatever3;
        function d20() {
            const iso = icosahedron();
            const numbersBRep = BRep.join(iso.faces.map((face, i) => {
                const numberBRep = text("" + (i + 1), 0.4, -2);
                const centroid = face.contour
                    .map((edge) => edge.a)
                    .reduce((a, b) => a.plus(b), V3.O)
                    .div(3);
                const sys = M4.forSys(face.contour[0].aDir, centroid.cross(face.contour[0].aDir), centroid.unit(), centroid);
                return numberBRep.transform(sys.times(M4.translate(-numberBRep.getAABB().size().x / 2, -0.1, -0.04)));
            }));
            const s = sphere(0.9);
            //return iso.and(numbersBRep)
            return iso.and(s).and(numbersBRep);
            //return numbersBRep
        }
        B2T.d20 = d20;
        function rotStep(edges, totalRadsOrAngles, countO) {
            const angles = "number" === typeof totalRadsOrAngles
                ? arrayFromFunction(countO, (i) => ((i + 1) / countO) * totalRadsOrAngles)
                : totalRadsOrAngles;
            const count = angles.length;
            const open = !eq(TAU, getLast(angles));
            const ribs = [
                edges,
                ...angles.map((phi) => {
                    if (eq(TAU, phi)) {
                        return edges;
                    }
                    const matrix = M4.rotateZ(phi);
                    return edges.map((edge) => edge.transform(matrix));
                }),
            ];
            const horizontalEdges = arrayFromFunction(count, (i) => {
                const ipp = (i + 1) % (count + 1);
                return arrayFromFunction(edges.length, (j) => {
                    if (!eq0(edges[j].a.lengthXY())) {
                        return StraightEdge.throughPoints(ribs[i][j].a, ribs[ipp][j].a);
                    }
                    return undefined;
                });
            });
            const faces = [];
            let face;
            edges.forEach((edge, i) => {
                const ipp = (i + 1) % edges.length;
                // for straight edges perpendicular to the Z-axis, we only create one face.
                if (edge instanceof StraightEdge &&
                    edge.curve.dir1.isPerpendicularTo(V3.Z)) {
                    const flipped = edge.a.x > edge.b.x;
                    const surface = new PlaneSurface(flipped ? new P3(V3.Z, edge.a.z) : new P3(V3.Z.negated(), -edge.a.z));
                    if (open) {
                        const faceEdges = [];
                        if (!eq0(edge.a.x)) {
                            faceEdges.push(...arrayFromFunction(count, (j) => horizontalEdges[j][i]));
                        }
                        faceEdges.push(ribs[count][i]);
                        if (!eq0(edge.b.x)) {
                            faceEdges.push(...arrayFromFunction(count, (j) => horizontalEdges[count - j - 1][ipp].flipped()));
                        }
                        faceEdges.push(edge.flipped());
                        face = new PlaneFace(surface, faceEdges);
                    }
                    else {
                        const contour = flipped
                            ? arrayFromFunction(count, (j) => horizontalEdges[j][i])
                            : arrayFromFunction(count, (j) => horizontalEdges[count - j - 1][ipp].flipped());
                        let hole;
                        if (flipped && !eq0(edge.b.x)) {
                            hole = arrayFromFunction(count, (j) => horizontalEdges[count - j - 1][ipp].flipped());
                        }
                        else if (!flipped && !eq0(edge.a.x)) {
                            hole = arrayFromFunction(count, (j) => horizontalEdges[j][i]);
                        }
                        face = new PlaneFace(surface, contour, hole ? [hole] : []);
                    }
                    faces.push(face);
                    return;
                }
                else if (edge instanceof StraightEdge) {
                    if (eq0(edge.a.lengthXY()) && eq0(edge.b.lengthXY())) {
                        return;
                    }
                }
                for (let r = 0; r < count; r++) {
                    const rpp = (r + 1) % (count + 1);
                    const faceEdges = [
                        ribs[r][i].flipped(),
                        horizontalEdges[r][i],
                        ribs[rpp][i],
                        horizontalEdges[r][ipp] && horizontalEdges[r][ipp].flipped(),
                    ].filter((x) => x);
                    let surface;
                    if (edge instanceof StraightEdge) {
                        surface = new PlaneSurface(P3.throughPoints(faceEdges[0].a, faceEdges[1].a, faceEdges[2].a));
                    }
                    else {
                        const maxX = edges[i].getAABB().max.x;
                        const phi = angles[r], prevPhi = 0 == r ? 0 : angles[r - 1];
                        const offset = V3.polar(maxX, prevPhi).to(V3.polar(maxX, phi));
                        surface = projectCurve(ribs[r][i].curve, offset, false);
                    }
                    faces.push(Face.create(surface, faceEdges));
                }
            });
            if (open) {
                const endFaceEdges = ribs[count].map((edge) => edge.flipped()).reverse();
                const endFace = new PlaneFace(new PlaneSurface(P3.ZX.rotateZ(getLast(angles))), endFaceEdges);
                faces.push(new PlaneFace(new PlaneSurface(P3.ZX.flipped()), edges), endFace);
            }
            return new BRep(faces, new PlaneSurface(P3.ZX).edgeLoopCCW(edges));
        }
        B2T.rotStep = rotStep;
        function fixEdges(edges) {
            return edges.flatMap((edge) => {
                const c = edge.curve;
                if (c instanceof EllipseCurve && c.tMin === -PI$3 && c.tMax === PI$3) {
                    const splitEdges = edge.minT < 0 && edge.maxT > 0 ? edge.split(0) : [edge];
                    return splitEdges.map((edge) => {
                        if (edge.minT >= 0) {
                            return createEdge(new EllipseCurve(c.center, c.f1, c.f2, max$3(0, c.tMin), c.tMax), edge.a, edge.b, edge.aT, edge.bT, undefined, edge.aDir, edge.bDir, edge.name);
                        }
                        else {
                            // "rotate" the curve
                            return createEdge(new EllipseCurve(c.center, c.f1.negated(), c.f2.negated(), c.tMin + PI$3, min$3(PI$3, c.tMax + PI$3)), edge.a, edge.b, edge.aT + PI$3, edge.bT + PI$3, undefined, edge.aDir, edge.bDir, edge.name);
                        }
                    });
                }
                if (c instanceof BezierCurve) {
                    if (edge.a.like(edge.b)) {
                        return edge.split(lerp$1(edge.aT, edge.bT, 0.5));
                    }
                }
                return edge;
            });
        }
        B2T.fixEdges = fixEdges;
        /**
         * Create a [BRep] by projecting edges created by joining vertices with straight edges.
         * @param baseVertices
         * @param baseFacePlane
         * @param offset
         * @param name
         * @param generator
         */
        function extrudeVertices(baseVertices, baseFacePlane, offset, name, generator) {
            assert(baseVertices.every((v) => v instanceof V3), "baseVertices.every(v => v instanceof V3)");
            assertInst(P3, baseFacePlane);
            assertVectors(offset);
            if (baseFacePlane.normal1.dot(offset) > 0)
                baseFacePlane = baseFacePlane.flipped();
            const edges = StraightEdge.chain(baseVertices, true);
            generator =
                generator ||
                    callsce("B2T.extrudeVertices", baseVertices, baseFacePlane, offset, name);
            return B2T.extrudeEdges(edges, baseFacePlane, offset, name, generator);
        }
        B2T.extrudeVertices = extrudeVertices;
        /**
         * Create a tetrahedron (3 sided pyramid) [BRep].
         * `a`, `b`, `c` and `d` can be in any order. The only constraint is that they cannot be on a common plane.
         * The resulting tetrahedron will always have outwards facing faces.
         * @param a
         * @param b
         * @param c
         * @param d
         * @param name
         */
        function tetrahedron(a, b, c, d, name = "tetra" + getGlobalId()) {
            assertVectors(a, b, c, d);
            const dDistance = P3.throughPoints(a, b, c).distanceToPointSigned(d);
            if (eq0(dDistance)) {
                throw new Error("four points are coplanar");
            }
            if (dDistance > 0) {
                [c, d] = [d, c];
            }
            const ab = StraightEdge.throughPoints(a, b);
            const ac = StraightEdge.throughPoints(a, c);
            const ad = StraightEdge.throughPoints(a, d);
            const bc = StraightEdge.throughPoints(b, c);
            const bd = StraightEdge.throughPoints(b, d);
            const cd = StraightEdge.throughPoints(c, d);
            const faces = [
                new PlaneFace(PlaneSurface.throughPoints(a, b, c), [ab, bc, ac.flipped()], [], name + "abc"),
                new PlaneFace(PlaneSurface.throughPoints(a, d, b), [ad, bd.flipped(), ab.flipped()], [], name + "adb"),
                new PlaneFace(PlaneSurface.throughPoints(b, d, c), [bd, cd.flipped(), bc.flipped()], [], name + "bdc"),
                new PlaneFace(PlaneSurface.throughPoints(c, d, a), [cd, ad.flipped(), ac], [], name + "cda"),
            ];
            const gen = callsce("B2T.tetrahedron", a, b, c, d);
            return new BRep(faces, false, gen);
        }
        B2T.tetrahedron = tetrahedron;
        const b = 1 / GOLDEN_RATIO, c = 2 - GOLDEN_RATIO;
        B2T.TETRAHEDRON_VERTICES = [
            new V3(1, 0, -SQRT1_2),
            new V3(-1, 0, -SQRT1_2),
            new V3(0, -1, SQRT1_2),
            new V3(0, 1, SQRT1_2),
        ].map((v) => v.unit());
        B2T.DODECAHEDRON_VERTICES = [
            new V3(c, 0, 1),
            new V3(-c, 0, 1),
            new V3(-b, b, b),
            new V3(0, 1, c),
            new V3(b, b, b),
            new V3(b, -b, b),
            new V3(0, -1, c),
            new V3(-b, -b, b),
            new V3(c, 0, -1),
            new V3(-c, 0, -1),
            new V3(-b, -b, -b),
            new V3(0, -1, -c),
            new V3(b, -b, -b),
            new V3(b, b, -b),
            new V3(0, 1, -c),
            new V3(-b, b, -b),
            new V3(1, c, 0),
            new V3(-1, c, 0),
            new V3(-1, -c, 0),
            new V3(1, -c, 0),
        ].map((v) => v.unit());
        B2T.DODECAHEDRON_FACE_VERTICES = [
            [4, 3, 2, 1, 0],
            [7, 6, 5, 0, 1],
            [12, 11, 10, 9, 8],
            [15, 14, 13, 8, 9],
            [14, 3, 4, 16, 13],
            [3, 14, 15, 17, 2],
            [11, 6, 7, 18, 10],
            [6, 11, 12, 19, 5],
            [4, 0, 5, 19, 16],
            [12, 8, 13, 16, 19],
            [15, 9, 10, 18, 17],
            [7, 1, 2, 17, 18],
        ];
        B2T.OCTAHEDRON_VERTICES = [
            new V3(1, 0, 0),
            new V3(-1, 0, 0),
            new V3(0, 1, 0),
            new V3(0, -1, 0),
            new V3(0, 0, 1),
            new V3(0, 0, -1),
        ];
        B2T.OCTAHEDRON_FACE_VERTICES = [
            [0, 2, 4],
            [2, 1, 4],
            [1, 3, 4],
            [3, 0, 4],
            [2, 0, 5],
            [1, 2, 5],
            [3, 1, 5],
            [0, 3, 5],
        ];
        const { x: s, y: t } = new V3(1, GOLDEN_RATIO, 0).unit();
        B2T.ICOSAHEDRON_VERTICES = [
            new V3(-s, t, 0),
            new V3(s, t, 0),
            new V3(-s, -t, 0),
            new V3(s, -t, 0),
            new V3(0, -s, t),
            new V3(0, s, t),
            new V3(0, -s, -t),
            new V3(0, s, -t),
            new V3(t, 0, -s),
            new V3(t, 0, s),
            new V3(-t, 0, -s),
            new V3(-t, 0, s),
        ];
        B2T.ICOSAHEDRON_FACE_VERTICES = [
            // 5 faces around point 0
            [0, 11, 5],
            [0, 5, 1],
            [0, 1, 7],
            [0, 7, 10],
            [0, 10, 11],
            // 5 adjacent faces
            [1, 5, 9],
            [5, 11, 4],
            [11, 10, 2],
            [10, 7, 6],
            [7, 1, 8],
            // 5 faces around point 3
            [3, 9, 4],
            [3, 4, 2],
            [3, 2, 6],
            [3, 6, 8],
            [3, 8, 9],
            // 5 adjacent faces
            [4, 9, 5],
            [2, 4, 11],
            [6, 2, 10],
            [8, 6, 7],
            [9, 8, 1],
        ];
        /**
         * Create a dodecahedron [BRep]. The vertices are on the unit sphere.
         */
        function dodecahedron() {
            return makePlatonic(B2T.DODECAHEDRON_VERTICES, B2T.DODECAHEDRON_FACE_VERTICES, "B2T.dodecahedron()");
        }
        B2T.dodecahedron = dodecahedron;
        /**
         * Create an octahedron [BRep]. The vertices are on the unit sphere.
         */
        function octahedron() {
            return makePlatonic(B2T.OCTAHEDRON_VERTICES, B2T.OCTAHEDRON_FACE_VERTICES, "B2T.octahedron()");
        }
        B2T.octahedron = octahedron;
        /**
         * Create an icosahedron [BRep]. The vertices are on the unit sphere.
         */
        function icosahedron() {
            return makePlatonic(B2T.ICOSAHEDRON_VERTICES, B2T.ICOSAHEDRON_FACE_VERTICES, "B2T.icosahedron()");
        }
        B2T.icosahedron = icosahedron;
        function makePlatonic(VS, FVIS, generator) {
            const edgeMap = new Map();
            const faces = FVIS.map((faceIndexes) => {
                const surface = PlaneSurface.throughPoints(VS[faceIndexes[0]], VS[faceIndexes[1]], VS[faceIndexes[2]]);
                const contour = arrayFromFunction(faceIndexes.length, (i) => {
                    const ipp = (i + 1) % faceIndexes.length;
                    const iA = faceIndexes[i], iB = faceIndexes[ipp];
                    const iMin = min$3(iA, iB), iMax = max$3(iA, iB), edgeID = iMin * VS.length + iMax;
                    let edge = edgeMap.get(edgeID);
                    !edge &&
                        edgeMap.set(edgeID, (edge = StraightEdge.throughPoints(VS[iMin], VS[iMax])));
                    return iA < iB ? edge : edge.flipped();
                });
                return new PlaneFace(surface, contour);
            });
            return new BRep(faces, false, generator);
        }
        /**
         * Create a [BRep] by projecting a number of edges onto a point.
         * @param baseEdges The edges forming the base of the pyramid.
         * @param apex The tip of the pyramid.
         * @param name
         */
        function pyramidEdges(baseEdges, apex, name = "pyramid" + getGlobalId()) {
            assertInst(Edge, ...baseEdges);
            assertVectors(apex);
            const ribs = baseEdges.map((baseEdge) => StraightEdge.throughPoints(apex, baseEdge.a));
            const faces = baseEdges.map((baseEdge, i) => {
                const faceName = name + "Wall" + i;
                const ipp = (i + 1) % baseEdges.length;
                const faceEdges = [ribs[i], baseEdge, ribs[ipp].flipped()];
                const surface = projectPointCurve(baseEdge.curve, baseEdge.minT, baseEdge.maxT, apex, baseEdge.deltaT() < 0);
                return Face.create(surface, faceEdges, undefined, faceName);
            });
            const baseSurface = new PlaneSurface(P3.XY).flipped();
            const bottomFace = Face.create(baseSurface, Edge.reversePath(baseEdges));
            faces.push(bottomFace);
            const generator = callsce("B2T.pyramidEdges", baseEdges, apex, name);
            return new BRep(faces, false, generator);
        }
        B2T.pyramidEdges = pyramidEdges;
        function fromBPT(bpt) {
            const lineRegex = /.+/g;
            const readLine = () => lineRegex.exec(bpt)[0];
            const readLineNumbers = () => readLine()
                .trim()
                .split(/\s+/)
                .map((s) => parseFloat(s));
            const numOfPatches = parseInt(readLine());
            const faces = arrayFromFunction(numOfPatches, () => {
                const [pointsUCount, pointsVCount] = readLineNumbers();
                const points = Array.from({ length: (pointsUCount + 1) * (pointsVCount + 1) }, () => VV(...readLineNumbers(), 1));
                const surface = new NURBSSurface(points, NURBS.bezierKnots(pointsUCount), NURBS.bezierKnots(pointsVCount), pointsUCount, pointsVCount, 0, 1, 0, 1);
                const edges = [
                    edgeForCurveAndTs(surface.isoparametricV(0)),
                    edgeForCurveAndTs(surface.isoparametricU(1)),
                    edgeForCurveAndTs(surface.isoparametricV(1)).flipped(),
                    edgeForCurveAndTs(surface.isoparametricU(0)).flipped(),
                ];
                return Face.create(surface, edges);
            });
            return new BRep(faces, false);
        }
        B2T.fromBPT = fromBPT;
    })(B2T || (B2T = {}));

    class CustomPlane extends P3 {
        constructor(anchor, right, up, name = "CustomPlane" + getGlobalId(), color = random().gl(), uMin = -500, uMax = 500, vMin = -500, vMax = 500) {
            const { normal1, w } = P3.forAnchorAndPlaneVectors(anchor, right, up);
            super(normal1, w);
            this.up = up;
            this.right = right;
            this.uMin = uMin;
            this.uMax = uMax;
            this.vMin = vMin;
            this.vMax = vMax;
            this.name = name;
            this.color = color;
        }
        get plane() {
            return this;
        }
        toPlaneSurface() {
            return new PlaneSurface(this, this.right, this.up);
        }
        toSource() {
            return callsce("new CustomPlane", this.anchor, this.right, this.up, this.name, this.color, this.uMin, this.uMax, this.vMin, this.vMax);
        }
        static forPlane(plane, color = GL_COLOR_BLACK, name) {
            //assert(!name)
            const up = plane.normal1.getPerpendicular().unit(), right = up.cross(plane.normal1);
            return new CustomPlane(plane.anchor, right, up, name, color);
        }
        static fromPlaneSurface(surface) {
            return new CustomPlane(surface.plane.anchor, surface.right, surface.up, "genCustomPlane" + getGlobalId());
        }
        distanceTo(line, mindist) {
            return min$1([
                new L3(this.anchor.plus(this.right.times(this.uMin)), this.up),
                new L3(this.anchor.plus(this.right.times(this.uMax)), this.up),
                new L3(this.anchor.plus(this.up.times(this.vMin)), this.right),
                new L3(this.anchor.plus(this.up.times(this.vMax)), this.right),
            ].map((line2, line2Index) => {
                const info = line2.infoClosestToLine(line);
                if ((isNaN(info.t) || // parallel LINES
                    (line2Index < 2 && this.vMin <= info.t && info.t <= this.vMax) ||
                    (line2Index >= 2 && this.uMin <= info.t && info.t <= this.uMax)) &&
                    info.distance <= mindist) {
                    return info.s;
                }
                else {
                    return Infinity;
                }
            }));
        }
        distanceTo2(line, mindist) {
            return min$1([
                new L3(this.anchor.plus(this.right.times(this.uMin)), this.up),
                new L3(this.anchor.plus(this.right.times(this.uMax)), this.up),
                new L3(this.anchor.plus(this.up.times(this.vMin)), this.right),
                new L3(this.anchor.plus(this.up.times(this.vMax)), this.right),
            ].map((line2, line2Index) => {
                const info = line2.infoClosestToLine(line);
                if ((isNaN(info.t) || // parallel LINES
                    (line2Index < 2 && this.vMin <= info.t && info.t <= this.vMax) ||
                    (line2Index >= 2 && this.uMin <= info.t && info.t <= this.uMax)) &&
                    info.distance <= mindist) {
                    return info.distance;
                }
                else {
                    return Infinity;
                }
            }));
        }
    }

    class Edge extends Transformable {
        constructor(curve, a, b, aT, bT, flippedOf, name) {
            super();
            this.curve = curve;
            this.a = a;
            this.b = b;
            this.aT = aT;
            this.bT = bT;
            this.flippedOf = flippedOf;
            this.name = name;
            assertNumbers(aT, bT);
            assert(!eq(aT, bT));
            assertVectors(a, b);
            assertf(() => curve instanceof Curve, curve);
            assertf(() => !curve.isValidT || (curve.isValidT(aT) && curve.isValidT(bT)), aT, bT, curve);
            //if (curve instanceof PICurve) {
            //    assertf(() => curve.at(aT).to(a).length() < 0.1, ''+curve.at(aT)+a)
            //    assertf(() => curve.at(bT).to(b).length() < 0.1, '' + curve.at(bT) + b)
            //} else {
            assertf(() => curve.at(aT).like(a), () => "" + curve.at(aT) + a + " aT should have been " + curve.pointT(a));
            assertf(() => curve.at(bT).like(b), () => "" + curve.at(bT) + b + " bT should have been " + curve.pointT(b));
            //}
            assertf(() => fuzzyBetween(aT, curve.tMin, curve.tMax), aT, curve.tMin, curve.tMax);
            assertf(() => fuzzyBetween(bT, curve.tMin, curve.tMax), bT, curve.tMin, curve.tMax);
            assert(!a.like(b), "!a.like(b)" + a + b);
            this.aT = clamp$1(aT, curve.tMin, curve.tMax);
            this.bT = clamp$1(bT, curve.tMin, curve.tMax);
            this.reversed = this.aT > this.bT;
        }
        get minT() {
            return Math.min(this.aT, this.bT);
        }
        get maxT() {
            return Math.max(this.aT, this.bT);
        }
        static isLoop(loop) {
            return loop.every((edge, i) => edge.b.like(loop[(i + 1) % loop.length].a));
        }
        static edgesIntersect(e1, e2) {
            // TODO: still getting some NaNs here..
            assertNumbers(e1.curve.hlol, e2.curve.hlol);
            assertInst(Edge, e1, e2);
            if (e1.curve.hlol < e2.curve.hlol) {
                [e2, e1] = [e1, e2];
            }
            const sts = e1.curve.isInfosWithCurve(e2.curve);
            if (sts.some((info) => isNaN(info.tThis) || isNaN(info.tOther))) {
                console.log(e1.sce);
                console.log(e2.sce);
                assert(false);
            }
            return sts.some(
            /// (  e1.aT < tThis < e1.bT  )  &&  (  e2.aT < tOther < e2.bT  )
            ({ tThis, tOther }) => {
                return e1.tValueInside(tThis) && e2.tValueInside(tOther);
            });
        }
        static assertLoop(edges) {
            edges.forEach((edge, i) => {
                const j = (i + 1) % edges.length;
                assert(edge.b.like(edges[j].a), `edges[${i}].b != edges[${j}].a (${edges[i].b.sce} != ${edges[j].a.sce})`);
            });
        }
        static reversePath(path, doReverse = true) {
            return doReverse
                ? arrayFromFunction(path.length, (i) => path[path.length - 1 - i].flipped())
                : path;
        }
        toString() {
            return callsce("new " + this.constructor.name, this.curve, this.a, this.b, this.aT, this.bT, undefined, this.aDir, this.bDir);
        }
        colinearToLine(line) {
            return this.curve instanceof L3 && this.curve.isColinearTo(line);
        }
        tValueInside(t) {
            return this.aT < this.bT
                ? lt(this.aT, t) && lt(t, this.bT)
                : lt(this.bT, t) && lt(t, this.aT);
        }
        isValidT(t) {
            return this.aT < this.bT
                ? le(this.aT, t) && le(t, this.bT)
                : le(this.bT, t) && le(t, this.aT);
        }
        clampedT(t) {
            return this.aT < this.bT
                ? clamp$1(t, this.aT, this.bT)
                : clamp$1(t, this.bT, this.aT);
        }
        /**
         * this is equals-equals. "isColinearTo" might make more sense but can't be used, because you can't get a
         * consistent hashCode for colinear curves
         * @param obj
         * @returns
         */
        equals(obj) {
            return (this === obj ||
                (this.constructor == obj.constructor &&
                    this.a.equals(obj.a) &&
                    this.b.equals(obj.b) &&
                    this.curve.equals(obj.curve)));
        }
        hashCode() {
            let hashCode = 0;
            hashCode = hashCode * 31 + this.a.hashCode();
            hashCode = hashCode * 31 + this.b.hashCode();
            hashCode = hashCode * 31 + this.curve.hashCode();
            return hashCode | 0;
        }
        like(edge) {
            // TODO this breaks on colinear edges,
            // TODO: what, where?
            return (this === edge ||
                (this.curve.isColinearTo(edge.curve) &&
                    this.a.like(edge.a) &&
                    this.b.like(edge.b) &&
                    this.aDir.isParallelTo(edge.aDir) &&
                    this.aDir.dot(edge.aDir) > 0));
        }
        isCanon() {
            return !this.reversed;
        }
        getCanon() {
            return this.reversed ? this.flipped() : this;
        }
        overlaps(edge, noback) {
            assert(this.curve.isColinearTo(edge.curve));
            const edgeAT = this.curve.containsPoint(edge.a) && this.curve.pointT(edge.a);
            const edgeBT = this.curve.containsPoint(edge.b) && this.curve.pointT(edge.b);
            if (false === edgeAT && false === edgeBT) {
                return noback ? false : edge.overlaps(this, true);
            }
            return !(le(edge.maxT, this.minT) || le(this.maxT, edge.minT));
        }
        getAABB() {
            const min = [Infinity, Infinity, Infinity], max = [-Infinity, -Infinity, -Infinity];
            this.curve.roots().forEach((ts, dim) => {
                ts.forEach((t) => {
                    if (lt(this.minT, t) && lt(t, this.maxT)) {
                        min[dim] = Math.min(min[dim], this.curve.at(t).e(dim));
                        max[dim] = Math.max(max[dim], this.curve.at(t).e(dim));
                    }
                });
            });
            const aabb = new AABB(V(min), V(max));
            aabb.addPoint(this.a);
            aabb.addPoint(this.b);
            return aabb;
        }
        length(steps = 1) {
            return this.curve.arcLength(this.minT, this.maxT, steps);
        }
        deltaT() {
            return this.bT - this.aT;
        }
        deltaTSign() {
            return sign$1(this.bT - this.aT);
        }
        atAvgT() {
            return this.curve.at((this.minT + this.maxT) / 2);
        }
        /**
         * Whether two edge loops are equal. Takes into account that two loops need not start with the same edge.
         * @param loop1
         * @param loop2
         */
        static loopsEqual(loop1, loop2) {
            return (loop1.length == loop2.length &&
                arrayRange(0, loop1.length, 1).some((offset) => loop1.every((edge, i) => edge.equals(loop2[(offset + i) % loop1.length]))));
        }
    }

    class StraightEdge extends Edge {
        constructor(line, a, b, aT, bT, flippedOf, name) {
            super(line, a, b, aT, bT, flippedOf, name);
            this.flippedOf = flippedOf;
            assertInst(L3, line);
            !flippedOf || assertInst(StraightEdge, flippedOf);
            !name || assertf(() => "string" === typeof name, name);
            this.tangent =
                this.aT < this.bT ? this.curve.dir1 : this.curve.dir1.negated();
        }
        get aDir() {
            return this.tangent;
        }
        get bDir() {
            return this.tangent;
        }
        static throughPoints(a, b, name) {
            return new StraightEdge(L3.throughPoints(a, b, 0, a.to(b).length()), a, b, 0, a.to(b).length(), undefined, name);
        }
        /**
         * Create a list of StraightEdges from a list of vertices.
         * @param vertices
         * @param closed Whether to connect the first and last vertices. Defaults to true.
         * @returns
         */
        static chain(vertices, closed = true) {
            const vc = vertices.length;
            return arrayFromFunction(closed ? vc : vc - 1, (i) => StraightEdge.throughPoints(vertices[i], vertices[(i + 1) % vc]));
        }
        toSource() {
            return callsce("new StraightEdge", this.curve, this.a, this.b, this.aT, this.bT);
        }
        getVerticesNo0() {
            return [this.b];
        }
        pointsCount() {
            return 2;
        }
        points() {
            return [this.a, this.b];
        }
        edgeISTsWithPlane(plane) {
            const edgeT = snap2(this.curve.isTWithPlane(plane), this.aT, this.bT);
            return this.minT <= edgeT && edgeT <= this.maxT ? [edgeT] : [];
        }
        edgeISTsWithSurface(surface) {
            if (surface instanceof PlaneSurface) {
                return this.edgeISTsWithPlane(surface.plane);
            }
            else {
                return surface
                    .isTsForLine(this.curve)
                    .map((edgeT) => snap2(edgeT, this.aT, this.bT))
                    .filter((edgeT) => this.minT <= edgeT && edgeT <= this.maxT);
            }
        }
        tangentAt() {
            return this.tangent;
        }
        flipped() {
            return (this.flippedOf ||
                (this.flippedOf = new StraightEdge(this.curve, this.b, this.a, this.bT, this.aT, this, this.name)));
        }
        transform(m4, desc) {
            const lineDir1TransLength = m4
                .transformVector2(this.curve.dir1, this.curve.anchor)
                .length();
            const curve = this.curve.transform(m4);
            const a = m4.transformPoint(this.a);
            const b = m4.transformPoint(this.b);
            return new StraightEdge(curve, a, b, m4.isNoProj() ? this.aT * lineDir1TransLength : curve.pointT(a), m4.isNoProj() ? this.bT * lineDir1TransLength : curve.pointT(b), undefined, "" + this.name + desc);
        }
        transform4(m4, desc) {
            const lineDir1TransLength = m4
                .transformVector2(this.curve.dir1, this.curve.anchor)
                .length();
            const curve = this.curve.transform4(m4);
            const a = m4.transformPoint(this.a);
            const b = m4.transformPoint(this.b);
            return new StraightEdge(curve, a, b, m4.isNoProj() ? this.aT * lineDir1TransLength : curve.pointT(a), m4.isNoProj() ? this.bT * lineDir1TransLength : curve.pointT(b), undefined, "" + this.name + desc);
        }
        isCoEdge(edge) {
            return (this === edge ||
                this === edge.flippedOf ||
                (edge.constructor instanceof StraightEdge &&
                    ((this.a.like(edge.a) && this.b.like(edge.b)) ||
                        (this.a.like(edge.b) && this.b.like(edge.a)))));
        }
        getEdgeT(p) {
            assertVectors(p);
            let edgeT = p.minus(this.curve.anchor).dot(this.curve.dir1);
            if (!eq0(this.curve.at(edgeT).distanceTo(p))) {
                return;
            }
            edgeT = snap2(edgeT, this.aT, this.bT);
            return this.minT <= edgeT && edgeT <= this.maxT ? edgeT : undefined;
        }
        split(t) {
            const p = this.curve.at(t);
            return [
                new StraightEdge(this.curve, this.a, p, this.aT, t, undefined, this.name + "left"),
                new StraightEdge(this.curve, p, this.b, t, this.bT, undefined, this.name + "right"),
            ];
        }
    }

    class PCurveEdge extends Edge {
        constructor(curve, a, b, aT, bT, flippedOf, aDir, bDir, name) {
            super(curve, a, b, aT, bT, flippedOf, name);
            this.flippedOf = flippedOf;
            this.aDir = aDir;
            this.bDir = bDir;
            assertVectors(aDir, bDir);
            assertf(() => !aDir.likeO(), curve);
            assertf(() => !bDir.likeO(), curve);
            if (!(curve instanceof PICurve)) {
                // TODO
                assertf(() => curve.tangentAt(aT).likeOrReversed(aDir), "" + aT + curve.tangentAt(aT).sce + " " + aDir.sce);
                assertf(() => curve.tangentAt(bT).likeOrReversed(bDir), "" + bT + curve.tangentAt(bT).sce + " " + bDir.sce);
            }
            assert(this.reversed === this.aDir.dot(curve.tangentAt(aT)) < 0, aT +
                " " +
                bT +
                " " +
                curve.constructor.name +
                " " +
                this.aDir.sce +
                " " +
                this.bDir.sce +
                " " +
                curve.tangentAt(aT));
            assert(this.reversed === this.bDir.dot(curve.tangentAt(bT)) < 0, aT +
                " " +
                bT +
                " " +
                curve.constructor.name +
                " " +
                this.aDir.sce +
                " " +
                this.bDir.sce +
                " " +
                curve.tangentAt(aT));
        }
        static forCurveAndTs(curve, aT, bT, name) {
            return new PCurveEdge(curve, curve.at(aT), curve.at(bT), aT, bT, undefined, aT < bT ? curve.tangentAt(aT) : curve.tangentAt(aT).negated(), aT < bT ? curve.tangentAt(bT) : curve.tangentAt(bT).negated(), name);
        }
        toSource() {
            return callsce("new PCurveEdge", this.curve, this.a, this.b, this.aT, this.bT, undefined, this.aDir, this.bDir, this.name);
        }
        getVerticesNo0() {
            return this.curve.calcSegmentPoints(this.aT, this.bT, this.a, this.b, this.reversed, false);
        }
        pointsCount() {
            return this.points().length;
        }
        points() {
            return this.curve.calcSegmentPoints(this.aT, this.bT, this.a, this.b, this.reversed, true);
        }
        edgeISTsWithSurface(surface) {
            return this.curve
                .isTsWithSurface(surface)
                .map((edgeT) => snap2(edgeT, this.aT, this.bT))
                .filter((edgeT) => this.minT <= edgeT && edgeT <= this.maxT);
        }
        edgeISTsWithPlane(surface) {
            return this.curve
                .isTsWithPlane(surface)
                .map((edgeT) => snap2(edgeT, this.aT, this.bT))
                .filter((edgeT) => this.minT <= edgeT && edgeT <= this.maxT);
        }
        tangentAt(t) {
            return !this.reversed
                ? this.curve.tangentAt(t)
                : this.curve.tangentAt(t).negated();
        }
        flipped() {
            return (this.flippedOf ||
                (this.flippedOf = new PCurveEdge(this.curve, this.b, this.a, this.bT, this.aT, this, this.bDir.negated(), this.aDir.negated(), this.name)));
        }
        transform(m4, desc) {
            return new PCurveEdge(this.curve.transform(m4), m4.transformPoint(this.a), m4.transformPoint(this.b), this.aT, this.bT, undefined, m4.transformVector(this.aDir), m4.transformVector(this.bDir), "" + this.name + desc);
        }
        transform4(m4, desc) {
            const a_ = m4.transformPoint(this.a);
            const b_ = m4.transformPoint(this.b);
            const curve_ = this.curve.transform4(m4);
            return new PCurveEdge(curve_, a_, b_, snap(curve_.pointT(a_), this.aT), snap(curve_.pointT(b_), this.bT), undefined, m4.transformVector(this.aDir), m4.transformVector(this.bDir), "" + this.name + desc);
        }
        isCoEdge(edge) {
            return (this === edge ||
                this === edge.flippedOf ||
                (this.curve.isColinearTo(edge.curve) &&
                    ((this.a.like(edge.a) && this.b.like(edge.b)) ||
                        (this.a.like(edge.b) && this.b.like(edge.a)))));
        }
        split(t) {
            const p = this.curve.at(t);
            const dir = this.tangentAt(t);
            return [
                new PCurveEdge(this.curve, this.a, p, this.aT, t, undefined, this.aDir, dir, this.name + "left"),
                new PCurveEdge(this.curve, p, this.b, t, this.bT, undefined, this.aDir, dir, this.name + "right"),
            ];
        }
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var t=function(r,e){return (t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r;}||function(t,r){for(var e in r)r.hasOwnProperty(e)&&(t[e]=r[e]);})(r,e)};function r(r,e){function i(){this.constructor=r;}t(r,e),r.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i);}function e(t){var r="";Array.isArray(t)||(t=[t]);for(var e=0;e<t.length;e++){var i=t[e];if(i.type===f.CLOSE_PATH)r+="z";else if(i.type===f.HORIZ_LINE_TO)r+=(i.relative?"h":"H")+i.x;else if(i.type===f.VERT_LINE_TO)r+=(i.relative?"v":"V")+i.y;else if(i.type===f.MOVE_TO)r+=(i.relative?"m":"M")+i.x+" "+i.y;else if(i.type===f.LINE_TO)r+=(i.relative?"l":"L")+i.x+" "+i.y;else if(i.type===f.CURVE_TO)r+=(i.relative?"c":"C")+i.x1+" "+i.y1+" "+i.x2+" "+i.y2+" "+i.x+" "+i.y;else if(i.type===f.SMOOTH_CURVE_TO)r+=(i.relative?"s":"S")+i.x2+" "+i.y2+" "+i.x+" "+i.y;else if(i.type===f.QUAD_TO)r+=(i.relative?"q":"Q")+i.x1+" "+i.y1+" "+i.x+" "+i.y;else if(i.type===f.SMOOTH_QUAD_TO)r+=(i.relative?"t":"T")+i.x+" "+i.y;else {if(i.type!==f.ARC)throw new Error('Unexpected command type "'+i.type+'" at index '+e+".");r+=(i.relative?"a":"A")+i.rX+" "+i.rY+" "+i.xRot+" "+ +i.lArcFlag+" "+ +i.sweepFlag+" "+i.x+" "+i.y;}}return r}function i(t,r){var e=t[0],i=t[1];return [e*Math.cos(r)-i*Math.sin(r),e*Math.sin(r)+i*Math.cos(r)]}function a(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];for(var e=0;e<t.length;e++)if("number"!=typeof t[e])throw new Error("assertNumbers arguments["+e+"] is not a number. "+typeof t[e]+" == typeof "+t[e]);return !0}var n=Math.PI;function o(t,r,e){t.lArcFlag=0===t.lArcFlag?0:1,t.sweepFlag=0===t.sweepFlag?0:1;var a=t.rX,o=t.rY,s=t.x,u=t.y;a=Math.abs(t.rX),o=Math.abs(t.rY);var h=i([(r-s)/2,(e-u)/2],-t.xRot/180*n),c=h[0],y=h[1],p=Math.pow(c,2)/Math.pow(a,2)+Math.pow(y,2)/Math.pow(o,2);1<p&&(a*=Math.sqrt(p),o*=Math.sqrt(p)),t.rX=a,t.rY=o;var m=Math.pow(a,2)*Math.pow(y,2)+Math.pow(o,2)*Math.pow(c,2),O=(t.lArcFlag!==t.sweepFlag?1:-1)*Math.sqrt(Math.max(0,(Math.pow(a,2)*Math.pow(o,2)-m)/m)),T=a*y/o*O,v=-o*c/a*O,l=i([T,v],t.xRot/180*n);t.cX=l[0]+(r+s)/2,t.cY=l[1]+(e+u)/2,t.phi1=Math.atan2((y-v)/o,(c-T)/a),t.phi2=Math.atan2((-y-v)/o,(-c-T)/a),0===t.sweepFlag&&t.phi2>t.phi1&&(t.phi2-=2*n),1===t.sweepFlag&&t.phi2<t.phi1&&(t.phi2+=2*n),t.phi1*=180/n,t.phi2*=180/n;}function s(t,r,e){a(t,r,e);var i=t*t+r*r-e*e;if(0>i)return [];if(0===i)return [[t*e/(t*t+r*r),r*e/(t*t+r*r)]];var n=Math.sqrt(i);return [[(t*e+r*n)/(t*t+r*r),(r*e-t*n)/(t*t+r*r)],[(t*e-r*n)/(t*t+r*r),(r*e+t*n)/(t*t+r*r)]]}var u,h=Math.PI/180;function c(t,r,e){return (1-e)*t+e*r}function y(t,r,e,i){return t+Math.cos(i/180*n)*r+Math.sin(i/180*n)*e}function p(t,r,e,i){var a=r-t,n=e-r,o=3*a+3*(i-e)-6*n,s=6*(n-a),u=3*a;return Math.abs(o)<1e-6?[-u/s]:function(t,r,e){void 0===e&&(e=1e-6);var i=t*t/4-r;if(i<-e)return [];if(i<=e)return [-t/2];var a=Math.sqrt(i);return [-t/2-a,-t/2+a]}(s/o,u/o,1e-6)}function m(t,r,e,i,a){var n=1-a;return t*(n*n*n)+r*(3*n*n*a)+e*(3*n*a*a)+i*(a*a*a)}!function(t){function r(){return u((function(t,r,e){return t.relative&&(void 0!==t.x1&&(t.x1+=r),void 0!==t.y1&&(t.y1+=e),void 0!==t.x2&&(t.x2+=r),void 0!==t.y2&&(t.y2+=e),void 0!==t.x&&(t.x+=r),void 0!==t.y&&(t.y+=e),t.relative=!1),t}))}function e(){var t=NaN,r=NaN,e=NaN,i=NaN;return u((function(a,n,o){return a.type&f.SMOOTH_CURVE_TO&&(a.type=f.CURVE_TO,t=isNaN(t)?n:t,r=isNaN(r)?o:r,a.x1=a.relative?n-t:2*n-t,a.y1=a.relative?o-r:2*o-r),a.type&f.CURVE_TO?(t=a.relative?n+a.x2:a.x2,r=a.relative?o+a.y2:a.y2):(t=NaN,r=NaN),a.type&f.SMOOTH_QUAD_TO&&(a.type=f.QUAD_TO,e=isNaN(e)?n:e,i=isNaN(i)?o:i,a.x1=a.relative?n-e:2*n-e,a.y1=a.relative?o-i:2*o-i),a.type&f.QUAD_TO?(e=a.relative?n+a.x1:a.x1,i=a.relative?o+a.y1:a.y1):(e=NaN,i=NaN),a}))}function n(){var t=NaN,r=NaN;return u((function(e,i,a){if(e.type&f.SMOOTH_QUAD_TO&&(e.type=f.QUAD_TO,t=isNaN(t)?i:t,r=isNaN(r)?a:r,e.x1=e.relative?i-t:2*i-t,e.y1=e.relative?a-r:2*a-r),e.type&f.QUAD_TO){t=e.relative?i+e.x1:e.x1,r=e.relative?a+e.y1:e.y1;var n=e.x1,o=e.y1;e.type=f.CURVE_TO,e.x1=((e.relative?0:i)+2*n)/3,e.y1=((e.relative?0:a)+2*o)/3,e.x2=(e.x+2*n)/3,e.y2=(e.y+2*o)/3;}else t=NaN,r=NaN;return e}))}function u(t){var r=0,e=0,i=NaN,a=NaN;return function(n){if(isNaN(i)&&!(n.type&f.MOVE_TO))throw new Error("path must start with moveto");var o=t(n,r,e,i,a);return n.type&f.CLOSE_PATH&&(r=i,e=a),void 0!==n.x&&(r=n.relative?r+n.x:n.x),void 0!==n.y&&(e=n.relative?e+n.y:n.y),n.type&f.MOVE_TO&&(i=r,a=e),o}}function O(t,r,e,i,n,o){return a(t,r,e,i,n,o),u((function(a,s,u,h){var c=a.x1,y=a.x2,p=a.relative&&!isNaN(h),m=void 0!==a.x?a.x:p?0:s,O=void 0!==a.y?a.y:p?0:u;function T(t){return t*t}a.type&f.HORIZ_LINE_TO&&0!==r&&(a.type=f.LINE_TO,a.y=a.relative?0:u),a.type&f.VERT_LINE_TO&&0!==e&&(a.type=f.LINE_TO,a.x=a.relative?0:s),void 0!==a.x&&(a.x=a.x*t+O*e+(p?0:n)),void 0!==a.y&&(a.y=m*r+a.y*i+(p?0:o)),void 0!==a.x1&&(a.x1=a.x1*t+a.y1*e+(p?0:n)),void 0!==a.y1&&(a.y1=c*r+a.y1*i+(p?0:o)),void 0!==a.x2&&(a.x2=a.x2*t+a.y2*e+(p?0:n)),void 0!==a.y2&&(a.y2=y*r+a.y2*i+(p?0:o));var v=t*i-r*e;if(void 0!==a.xRot&&(1!==t||0!==r||0!==e||1!==i))if(0===v)delete a.rX,delete a.rY,delete a.xRot,delete a.lArcFlag,delete a.sweepFlag,a.type=f.LINE_TO;else {var l=a.xRot*Math.PI/180,_=Math.sin(l),N=Math.cos(l),x=1/T(a.rX),d=1/T(a.rY),A=T(N)*x+T(_)*d,E=2*_*N*(x-d),C=T(_)*x+T(N)*d,M=A*i*i-E*r*i+C*r*r,R=E*(t*i+r*e)-2*(A*e*i+C*t*r),g=A*e*e-E*t*e+C*t*t,I=(Math.atan2(R,M-g)+Math.PI)%Math.PI/2,S=Math.sin(I),L=Math.cos(I);a.rX=Math.abs(v)/Math.sqrt(M*T(L)+R*S*L+g*T(S)),a.rY=Math.abs(v)/Math.sqrt(M*T(S)-R*S*L+g*T(L)),a.xRot=180*I/Math.PI;}return void 0!==a.sweepFlag&&0>v&&(a.sweepFlag=+!a.sweepFlag),a}))}function T(){return function(t){var r={};for(var e in t)r[e]=t[e];return r}}t.ROUND=function(t){function r(r){return Math.round(r*t)/t}return void 0===t&&(t=1e13),a(t),function(t){return void 0!==t.x1&&(t.x1=r(t.x1)),void 0!==t.y1&&(t.y1=r(t.y1)),void 0!==t.x2&&(t.x2=r(t.x2)),void 0!==t.y2&&(t.y2=r(t.y2)),void 0!==t.x&&(t.x=r(t.x)),void 0!==t.y&&(t.y=r(t.y)),void 0!==t.rX&&(t.rX=r(t.rX)),void 0!==t.rY&&(t.rY=r(t.rY)),t}},t.TO_ABS=r,t.TO_REL=function(){return u((function(t,r,e){return t.relative||(void 0!==t.x1&&(t.x1-=r),void 0!==t.y1&&(t.y1-=e),void 0!==t.x2&&(t.x2-=r),void 0!==t.y2&&(t.y2-=e),void 0!==t.x&&(t.x-=r),void 0!==t.y&&(t.y-=e),t.relative=!0),t}))},t.NORMALIZE_HVZ=function(t,r,e){return void 0===t&&(t=!0),void 0===r&&(r=!0),void 0===e&&(e=!0),u((function(i,a,n,o,s){if(isNaN(o)&&!(i.type&f.MOVE_TO))throw new Error("path must start with moveto");return r&&i.type&f.HORIZ_LINE_TO&&(i.type=f.LINE_TO,i.y=i.relative?0:n),e&&i.type&f.VERT_LINE_TO&&(i.type=f.LINE_TO,i.x=i.relative?0:a),t&&i.type&f.CLOSE_PATH&&(i.type=f.LINE_TO,i.x=i.relative?o-a:o,i.y=i.relative?s-n:s),i.type&f.ARC&&(0===i.rX||0===i.rY)&&(i.type=f.LINE_TO,delete i.rX,delete i.rY,delete i.xRot,delete i.lArcFlag,delete i.sweepFlag),i}))},t.NORMALIZE_ST=e,t.QT_TO_C=n,t.INFO=u,t.SANITIZE=function(t){void 0===t&&(t=0),a(t);var r=NaN,e=NaN,i=NaN,n=NaN;return u((function(a,o,s,u,h){var c=Math.abs,y=!1,p=0,m=0;if(a.type&f.SMOOTH_CURVE_TO&&(p=isNaN(r)?0:o-r,m=isNaN(e)?0:s-e),a.type&(f.CURVE_TO|f.SMOOTH_CURVE_TO)?(r=a.relative?o+a.x2:a.x2,e=a.relative?s+a.y2:a.y2):(r=NaN,e=NaN),a.type&f.SMOOTH_QUAD_TO?(i=isNaN(i)?o:2*o-i,n=isNaN(n)?s:2*s-n):a.type&f.QUAD_TO?(i=a.relative?o+a.x1:a.x1,n=a.relative?s+a.y1:a.y2):(i=NaN,n=NaN),a.type&f.LINE_COMMANDS||a.type&f.ARC&&(0===a.rX||0===a.rY||!a.lArcFlag)||a.type&f.CURVE_TO||a.type&f.SMOOTH_CURVE_TO||a.type&f.QUAD_TO||a.type&f.SMOOTH_QUAD_TO){var O=void 0===a.x?0:a.relative?a.x:a.x-o,T=void 0===a.y?0:a.relative?a.y:a.y-s;p=isNaN(i)?void 0===a.x1?p:a.relative?a.x:a.x1-o:i-o,m=isNaN(n)?void 0===a.y1?m:a.relative?a.y:a.y1-s:n-s;var v=void 0===a.x2?0:a.relative?a.x:a.x2-o,l=void 0===a.y2?0:a.relative?a.y:a.y2-s;c(O)<=t&&c(T)<=t&&c(p)<=t&&c(m)<=t&&c(v)<=t&&c(l)<=t&&(y=!0);}return a.type&f.CLOSE_PATH&&c(o-u)<=t&&c(s-h)<=t&&(y=!0),y?[]:a}))},t.MATRIX=O,t.ROTATE=function(t,r,e){void 0===r&&(r=0),void 0===e&&(e=0),a(t,r,e);var i=Math.sin(t),n=Math.cos(t);return O(n,i,-i,n,r-r*n+e*i,e-r*i-e*n)},t.TRANSLATE=function(t,r){return void 0===r&&(r=0),a(t,r),O(1,0,0,1,t,r)},t.SCALE=function(t,r){return void 0===r&&(r=t),a(t,r),O(t,0,0,r,0,0)},t.SKEW_X=function(t){return a(t),O(1,0,Math.atan(t),1,0,0)},t.SKEW_Y=function(t){return a(t),O(1,Math.atan(t),0,1,0,0)},t.X_AXIS_SYMMETRY=function(t){return void 0===t&&(t=0),a(t),O(-1,0,0,1,t,0)},t.Y_AXIS_SYMMETRY=function(t){return void 0===t&&(t=0),a(t),O(1,0,0,-1,0,t)},t.A_TO_C=function(){return u((function(t,r,e){return f.ARC===t.type?function(t,r,e){var a,n,s,u;t.cX||o(t,r,e);for(var y=Math.min(t.phi1,t.phi2),p=Math.max(t.phi1,t.phi2)-y,m=Math.ceil(p/90),O=new Array(m),T=r,v=e,l=0;l<m;l++){var _=c(t.phi1,t.phi2,l/m),N=c(t.phi1,t.phi2,(l+1)/m),x=N-_,d=4/3*Math.tan(x*h/4),A=[Math.cos(_*h)-d*Math.sin(_*h),Math.sin(_*h)+d*Math.cos(_*h)],E=A[0],C=A[1],M=[Math.cos(N*h),Math.sin(N*h)],R=M[0],g=M[1],I=[R+d*Math.sin(N*h),g-d*Math.cos(N*h)],S=I[0],L=I[1];O[l]={relative:t.relative,type:f.CURVE_TO};var H=function(r,e){var a=i([r*t.rX,e*t.rY],t.xRot),n=a[0],o=a[1];return [t.cX+n,t.cY+o]};a=H(E,C),O[l].x1=a[0],O[l].y1=a[1],n=H(S,L),O[l].x2=n[0],O[l].y2=n[1],s=H(R,g),O[l].x=s[0],O[l].y=s[1],t.relative&&(O[l].x1-=T,O[l].y1-=v,O[l].x2-=T,O[l].y2-=v,O[l].x-=T,O[l].y-=v),T=(u=[O[l].x,O[l].y])[0],v=u[1];}return O}(t,t.relative?0:r,t.relative?0:e):t}))},t.ANNOTATE_ARCS=function(){return u((function(t,r,e){return t.relative&&(r=0,e=0),f.ARC===t.type&&o(t,r,e),t}))},t.CLONE=T,t.CALCULATE_BOUNDS=function(){var t=function(t){var r={};for(var e in t)r[e]=t[e];return r},i=r(),a=n(),h=e(),c=u((function(r,e,n){var u=h(a(i(t(r))));function O(t){t>c.maxX&&(c.maxX=t),t<c.minX&&(c.minX=t);}function T(t){t>c.maxY&&(c.maxY=t),t<c.minY&&(c.minY=t);}if(u.type&f.DRAWING_COMMANDS&&(O(e),T(n)),u.type&f.HORIZ_LINE_TO&&O(u.x),u.type&f.VERT_LINE_TO&&T(u.y),u.type&f.LINE_TO&&(O(u.x),T(u.y)),u.type&f.CURVE_TO){O(u.x),T(u.y);for(var v=0,l=p(e,u.x1,u.x2,u.x);v<l.length;v++){0<(w=l[v])&&1>w&&O(m(e,u.x1,u.x2,u.x,w));}for(var _=0,N=p(n,u.y1,u.y2,u.y);_<N.length;_++){0<(w=N[_])&&1>w&&T(m(n,u.y1,u.y2,u.y,w));}}if(u.type&f.ARC){O(u.x),T(u.y),o(u,e,n);for(var x=u.xRot/180*Math.PI,d=Math.cos(x)*u.rX,A=Math.sin(x)*u.rX,E=-Math.sin(x)*u.rY,C=Math.cos(x)*u.rY,M=u.phi1<u.phi2?[u.phi1,u.phi2]:-180>u.phi2?[u.phi2+360,u.phi1+360]:[u.phi2,u.phi1],R=M[0],g=M[1],I=function(t){var r=t[0],e=t[1],i=180*Math.atan2(e,r)/Math.PI;return i<R?i+360:i},S=0,L=s(E,-d,0).map(I);S<L.length;S++){(w=L[S])>R&&w<g&&O(y(u.cX,d,E,w));}for(var H=0,U=s(C,-A,0).map(I);H<U.length;H++){var w;(w=U[H])>R&&w<g&&T(y(u.cY,A,C,w));}}return r}));return c.minX=1/0,c.maxX=-1/0,c.minY=1/0,c.maxY=-1/0,c};}(u||(u={}));var O,T=function(){function t(){}return t.prototype.round=function(t){return this.transform(u.ROUND(t))},t.prototype.toAbs=function(){return this.transform(u.TO_ABS())},t.prototype.toRel=function(){return this.transform(u.TO_REL())},t.prototype.normalizeHVZ=function(t,r,e){return this.transform(u.NORMALIZE_HVZ(t,r,e))},t.prototype.normalizeST=function(){return this.transform(u.NORMALIZE_ST())},t.prototype.qtToC=function(){return this.transform(u.QT_TO_C())},t.prototype.aToC=function(){return this.transform(u.A_TO_C())},t.prototype.sanitize=function(t){return this.transform(u.SANITIZE(t))},t.prototype.translate=function(t,r){return this.transform(u.TRANSLATE(t,r))},t.prototype.scale=function(t,r){return this.transform(u.SCALE(t,r))},t.prototype.rotate=function(t,r,e){return this.transform(u.ROTATE(t,r,e))},t.prototype.matrix=function(t,r,e,i,a,n){return this.transform(u.MATRIX(t,r,e,i,a,n))},t.prototype.skewX=function(t){return this.transform(u.SKEW_X(t))},t.prototype.skewY=function(t){return this.transform(u.SKEW_Y(t))},t.prototype.xSymmetry=function(t){return this.transform(u.X_AXIS_SYMMETRY(t))},t.prototype.ySymmetry=function(t){return this.transform(u.Y_AXIS_SYMMETRY(t))},t.prototype.annotateArcs=function(){return this.transform(u.ANNOTATE_ARCS())},t}(),v=function(t){return " "===t||"\t"===t||"\r"===t||"\n"===t},l=function(t){return "0".charCodeAt(0)<=t.charCodeAt(0)&&t.charCodeAt(0)<="9".charCodeAt(0)},_=function(t){function e(){var r=t.call(this)||this;return r.curNumber="",r.curCommandType=-1,r.curCommandRelative=!1,r.canParseCommandOrComma=!0,r.curNumberHasExp=!1,r.curNumberHasExpDigits=!1,r.curNumberHasDecimal=!1,r.curArgs=[],r}return r(e,t),e.prototype.finish=function(t){if(void 0===t&&(t=[]),this.parse(" ",t),0!==this.curArgs.length||!this.canParseCommandOrComma)throw new SyntaxError("Unterminated command at the path end.");return t},e.prototype.parse=function(t,r){var e=this;void 0===r&&(r=[]);for(var i=function(t){r.push(t),e.curArgs.length=0,e.canParseCommandOrComma=!0;},a=0;a<t.length;a++){var n=t[a],o=!(this.curCommandType!==f.ARC||3!==this.curArgs.length&&4!==this.curArgs.length||1!==this.curNumber.length||"0"!==this.curNumber&&"1"!==this.curNumber),s=l(n)&&("0"===this.curNumber&&"0"===n||o);if(!l(n)||s)if("e"!==n&&"E"!==n)if("-"!==n&&"+"!==n||!this.curNumberHasExp||this.curNumberHasExpDigits)if("."!==n||this.curNumberHasExp||this.curNumberHasDecimal||o){if(this.curNumber&&-1!==this.curCommandType){var u=Number(this.curNumber);if(isNaN(u))throw new SyntaxError("Invalid number ending at "+a);if(this.curCommandType===f.ARC)if(0===this.curArgs.length||1===this.curArgs.length){if(0>u)throw new SyntaxError('Expected positive number, got "'+u+'" at index "'+a+'"')}else if((3===this.curArgs.length||4===this.curArgs.length)&&"0"!==this.curNumber&&"1"!==this.curNumber)throw new SyntaxError('Expected a flag, got "'+this.curNumber+'" at index "'+a+'"');this.curArgs.push(u),this.curArgs.length===N[this.curCommandType]&&(f.HORIZ_LINE_TO===this.curCommandType?i({type:f.HORIZ_LINE_TO,relative:this.curCommandRelative,x:u}):f.VERT_LINE_TO===this.curCommandType?i({type:f.VERT_LINE_TO,relative:this.curCommandRelative,y:u}):this.curCommandType===f.MOVE_TO||this.curCommandType===f.LINE_TO||this.curCommandType===f.SMOOTH_QUAD_TO?(i({type:this.curCommandType,relative:this.curCommandRelative,x:this.curArgs[0],y:this.curArgs[1]}),f.MOVE_TO===this.curCommandType&&(this.curCommandType=f.LINE_TO)):this.curCommandType===f.CURVE_TO?i({type:f.CURVE_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x2:this.curArgs[2],y2:this.curArgs[3],x:this.curArgs[4],y:this.curArgs[5]}):this.curCommandType===f.SMOOTH_CURVE_TO?i({type:f.SMOOTH_CURVE_TO,relative:this.curCommandRelative,x2:this.curArgs[0],y2:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===f.QUAD_TO?i({type:f.QUAD_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===f.ARC&&i({type:f.ARC,relative:this.curCommandRelative,rX:this.curArgs[0],rY:this.curArgs[1],xRot:this.curArgs[2],lArcFlag:this.curArgs[3],sweepFlag:this.curArgs[4],x:this.curArgs[5],y:this.curArgs[6]})),this.curNumber="",this.curNumberHasExpDigits=!1,this.curNumberHasExp=!1,this.curNumberHasDecimal=!1,this.canParseCommandOrComma=!0;}if(!v(n))if(","===n&&this.canParseCommandOrComma)this.canParseCommandOrComma=!1;else if("+"!==n&&"-"!==n&&"."!==n)if(s)this.curNumber=n,this.curNumberHasDecimal=!1;else {if(0!==this.curArgs.length)throw new SyntaxError("Unterminated command at index "+a+".");if(!this.canParseCommandOrComma)throw new SyntaxError('Unexpected character "'+n+'" at index '+a+". Command cannot follow comma");if(this.canParseCommandOrComma=!1,"z"!==n&&"Z"!==n)if("h"===n||"H"===n)this.curCommandType=f.HORIZ_LINE_TO,this.curCommandRelative="h"===n;else if("v"===n||"V"===n)this.curCommandType=f.VERT_LINE_TO,this.curCommandRelative="v"===n;else if("m"===n||"M"===n)this.curCommandType=f.MOVE_TO,this.curCommandRelative="m"===n;else if("l"===n||"L"===n)this.curCommandType=f.LINE_TO,this.curCommandRelative="l"===n;else if("c"===n||"C"===n)this.curCommandType=f.CURVE_TO,this.curCommandRelative="c"===n;else if("s"===n||"S"===n)this.curCommandType=f.SMOOTH_CURVE_TO,this.curCommandRelative="s"===n;else if("q"===n||"Q"===n)this.curCommandType=f.QUAD_TO,this.curCommandRelative="q"===n;else if("t"===n||"T"===n)this.curCommandType=f.SMOOTH_QUAD_TO,this.curCommandRelative="t"===n;else {if("a"!==n&&"A"!==n)throw new SyntaxError('Unexpected character "'+n+'" at index '+a+".");this.curCommandType=f.ARC,this.curCommandRelative="a"===n;}else r.push({type:f.CLOSE_PATH}),this.canParseCommandOrComma=!0,this.curCommandType=-1;}else this.curNumber=n,this.curNumberHasDecimal="."===n;}else this.curNumber+=n,this.curNumberHasDecimal=!0;else this.curNumber+=n;else this.curNumber+=n,this.curNumberHasExp=!0;else this.curNumber+=n,this.curNumberHasExpDigits=this.curNumberHasExp;}return r},e.prototype.transform=function(t){return Object.create(this,{parse:{value:function(r,e){void 0===e&&(e=[]);for(var i=0,a=Object.getPrototypeOf(this).parse.call(this,r);i<a.length;i++){var n=a[i],o=t(n);Array.isArray(o)?e.push.apply(e,o):e.push(o);}return e}}})},e}(T),f=function(t){function i(r){var e=t.call(this)||this;return e.commands="string"==typeof r?i.parse(r):r,e}return r(i,t),i.prototype.encode=function(){return i.encode(this.commands)},i.prototype.getBounds=function(){var t=u.CALCULATE_BOUNDS();return this.transform(t),t},i.prototype.transform=function(t){for(var r=[],e=0,i=this.commands;e<i.length;e++){var a=t(i[e]);Array.isArray(a)?r.push.apply(r,a):r.push(a);}return this.commands=r,this},i.encode=function(t){return e(t)},i.parse=function(t){var r=new _,e=[];return r.parse(t,e),r.finish(e),e},i.CLOSE_PATH=1,i.MOVE_TO=2,i.HORIZ_LINE_TO=4,i.VERT_LINE_TO=8,i.LINE_TO=16,i.CURVE_TO=32,i.SMOOTH_CURVE_TO=64,i.QUAD_TO=128,i.SMOOTH_QUAD_TO=256,i.ARC=512,i.LINE_COMMANDS=i.LINE_TO|i.HORIZ_LINE_TO|i.VERT_LINE_TO,i.DRAWING_COMMANDS=i.HORIZ_LINE_TO|i.VERT_LINE_TO|i.LINE_TO|i.CURVE_TO|i.SMOOTH_CURVE_TO|i.QUAD_TO|i.SMOOTH_QUAD_TO|i.ARC,i}(T),N=((O={})[f.MOVE_TO]=2,O[f.LINE_TO]=2,O[f.HORIZ_LINE_TO]=1,O[f.VERT_LINE_TO]=1,O[f.CLOSE_PATH]=0,O[f.QUAD_TO]=4,O[f.SMOOTH_QUAD_TO]=2,O[f.CURVE_TO]=6,O[f.SMOOTH_CURVE_TO]=4,O[f.ARC]=7,O);

    function edgePathFromSVG(pathString) {
        let currentPos = undefined;
        const parsed = new f(pathString)
            .toAbs()
            .normalizeHVZ()
            .sanitize(NLA_PRECISION)
            .annotateArcs().commands;
        const path = [];
        for (const c of parsed) {
            assert("x" in c && "y" in c);
            const endPos = new V3(c.x, c.y, 0);
            switch (c.type) {
                case f.LINE_TO:
                    path.push(StraightEdge.throughPoints(currentPos, endPos));
                    break;
                case f.CURVE_TO: {
                    const c1 = new V3(c.x1, c.y1, 0);
                    const c2 = new V3(c.x2, c.y2, 0);
                    const curve = new BezierCurve(currentPos, c1, c2, endPos, 0, 1);
                    const edge = new PCurveEdge(curve, currentPos, endPos, 0, 1, undefined, curve.tangentAt(0), curve.tangentAt(1));
                    path.push(edge);
                    break;
                }
                case f.QUAD_TO: {
                    const c1 = new V3(c.x1, c.y1, 0);
                    const curve = ParabolaCurve.quadratic(currentPos, c1, endPos).rightAngled();
                    const edge = new PCurveEdge(curve, currentPos, endPos, curve.tMin, curve.tMax, undefined, curve.tangentAt(curve.tMin), curve.tangentAt(curve.tMax));
                    path.push(edge);
                    break;
                }
                case f.ARC: {
                    const phi1 = c.phi1 * DEG, phi2 = c.phi2 * DEG, [phiMin, phiMax] = [phi1, phi2].sort(MINUS);
                    const stops = arrayRange(-3, 4, 1)
                        .map((n) => n * PI$1)
                        .filter((stop) => phiMin <= stop && stop <= phiMax);
                    const center = V(c.cX, c.cY);
                    const f1 = V3.polar(c.rX, c.xRot * DEG);
                    const f2 = V3.polar(c.rY, c.xRot * DEG + Math.PI / 2);
                    const edges = getIntervals(stops, phiMin, phiMax).map(([t1, t2]) => {
                        const deltaT = t2 - t1;
                        const t1_ = mod(t1, TAU);
                        const t2_ = t1_ + deltaT;
                        assert(t1_ >= 0 == t2_ >= 0);
                        const gtPI = t1_ > PI$1 || t2_ > PI$1;
                        const aT = gtPI ? t1_ - PI$1 : t1_;
                        const bT = gtPI ? t2_ - PI$1 : t2_;
                        const curve = new EllipseCurve(center, gtPI ? f1.negated() : f1, gtPI ? f2.negated() : f2);
                        const a = phi1 == t1 ? currentPos : phi2 == t1 ? endPos : curve.at(aT);
                        const b = phi1 == t2 ? currentPos : phi2 == t2 ? endPos : curve.at(bT);
                        return new PCurveEdge(curve, a, b, aT, bT, undefined, curve.tangentAt(aT), curve.tangentAt(bT));
                    });
                    path.push(...(c.phiDelta > 0 ? edges : Edge.reversePath(edges)));
                    break;
                }
            }
            currentPos = endPos;
        }
        return path;
    }
    /**
     * Create an axis-aligned rectangle of edges on the XY-plane with the bottom-left corner on the origin.
     * @param width
     * @param height
     */
    function edgeRect(width = 1, height = width) {
        const vertices = [
            new V3(0, 0, 0),
            new V3(width, 0, 0),
            new V3(width, height, 0),
            new V3(0, height, 0),
        ];
        return StraightEdge.chain(vertices);
    }
    function edgeNgon(n = 3, radius = 1) {
        return StraightEdge.chain(arrayFromFunction(n, (i) => V3.polar(radius, (TAU * i) / n)));
    }
    function edgeStar(pointCount = 5, r0 = 1, r1 = 0.5) {
        const vertices = arrayFromFunction(pointCount * 2, (i) => V3.polar(0 == i % 2 ? r0 : r1, (TAU * i) / pointCount / 2));
        return StraightEdge.chain(vertices);
    }
    function createEdge(curve, a, b, aT, bT, flippedOf, aDir, bDir, name) {
        if (curve instanceof L3) {
            return new StraightEdge(curve, a, b, aT, bT, flippedOf, name);
        }
        else {
            return new PCurveEdge(curve, a, b, aT, bT, flippedOf, aDir, bDir, name);
        }
    }
    function edgeForCurveAndTs(curve, aT = curve.tMin, bT = curve.tMax) {
        return createEdge(curve, curve.at(aT), curve.at(bT), aT, bT, undefined, aT < bT ? curve.tangentAt(aT) : curve.tangentAt(aT).negated(), aT < bT ? curve.tangentAt(bT) : curve.tangentAt(bT).negated());
    }
    function reuleaux(n = 3, radius = 1) {
        assert(3 <= n);
        assert(1 == n % 2);
        const corners = arrayFromFunction(n, (i) => V3.polar(radius, (TAU * i) / n));
        return arrayFromFunction(n, (i) => {
            const aI = (i + floor$1(n / 2)) % n, bI = (i + ceil(n / 2)) % n;
            const a = corners[aI], b = corners[bI];
            const center = corners[i];
            const f1 = center.to(a), curve = new EllipseCurve(center, f1, V3.Z.cross(f1));
            return createEdge(curve, a, b, 0, curve.pointT(b), undefined, V3.Z.cross(f1), V3.Z.cross(center.to(b)));
        });
    }
    function round$2(edges, radius) {
        if (eq0(radius)) {
            return edges;
        }
        const corners = edges.map((edge, i) => {
            const j = (i + 1) % edges.length, nextEdge = edges[j];
            if (!edge.b.like(nextEdge.a))
                return undefined;
            const angleToNext = edge.bDir.angleTo(nextEdge.aDir);
            const c1 = edge.curve, c2 = nextEdge.curve;
            if (c1 instanceof L3 && c2 instanceof L3) {
                const normal = c1.dir1.cross(c2.dir1);
                if (eq0(angleToNext))
                    return undefined;
                const l1inside = normal.cross(c1.dir1), l2inside = normal.cross(c2.dir1);
                const l1offset = c1.transform(M4.translate(l1inside.toLength(radius)));
                const l2offset = c2.transform(M4.translate(l2inside.toLength(radius)));
                const center = l1offset.isInfoWithLine(l2offset);
                if (!center)
                    throw new Error("tangential curves");
                const cornerA = center.plus(l1inside.toLength(-radius));
                const cornerB = center.plus(l2inside.toLength(-radius));
                const f1 = l1inside.toLength(-radius);
                const curve = new EllipseCurve(center, f1, normal.cross(f1).toLength(radius));
                const cornerEdge = createEdge(curve, cornerA, cornerB, 0, curve.pointT(cornerB), undefined, c1.dir1, c2.dir1);
                return cornerEdge;
            }
            else {
                return arbitraryCorner(edge, nextEdge, radius);
            }
        });
        const result = edges.flatMap((edge, i) => {
            const h = (i + edges.length - 1) % edges.length;
            const prevCorner = corners[h], nextCorner = corners[i];
            if (!prevCorner && !nextCorner) {
                return edge;
            }
            const [aT, a, aDir] = !prevCorner
                ? [edge.aT, edge.a, edge.aDir]
                : [edge.curve.pointT(prevCorner.b), prevCorner.b, prevCorner.bDir];
            const [bT, b, bDir] = !nextCorner
                ? [edge.bT, edge.b, edge.bDir]
                : [edge.curve.pointT(nextCorner.a), nextCorner.a, nextCorner.aDir];
            const newEdge = createEdge(edge.curve, a, b, aT, bT, undefined, aDir, bDir);
            return !nextCorner ? newEdge : [newEdge, nextCorner];
        });
        return result;
    }
    function arbitraryCorner(e1, e2, radius) {
        const c1 = e1.curve, c2 = e2.curve;
        function f([t1, t2]) {
            const p1 = c1.at(t1), p2 = c2.at(t2);
            const dp1 = c1.tangentAt(t1), dp2 = c2.tangentAt(t2);
            const virtualPlaneNormal = dp1.cross(dp2);
            const normal1 = virtualPlaneNormal.cross(dp1).unit(), normal2 = virtualPlaneNormal.cross(dp2).unit();
            const dirCross = normal1.cross(normal2);
            if (virtualPlaneNormal.likeO()) {
                assert(false);
            } // lines parallel
            const p1p2 = p1.to(p2);
            // check if distance is zero (see also L3.distanceToLine)
            if (!eq0(p1p2.dot(virtualPlaneNormal))) {
                assert(false);
            }
            const dist1 = p1p2.cross(normal2).dot(dirCross) / dirCross.squared();
            const dist2 = p1p2.cross(normal1).dot(dirCross) / dirCross.squared();
            const g1 = p1.plus(normal1.times(dist1));
            const g2 = p2.plus(normal2.times(dist2));
            assert(g1.like(g2));
            return [abs$2(dist1) - radius, abs$2(dist2) - radius];
        }
        const startT1 = e1.bT - (radius * sign$1(e1.deltaT())) / e1.bDir.length();
        const startT2 = e2.aT + (radius * sign$1(e2.deltaT())) / e2.aDir.length();
        const [t1, t2] = newtonIterate(f, [startT1, startT2]);
        const cornerA = e1.curve.at(t1);
        const cornerB = e2.curve.at(t2);
        const dp1 = c1.tangentAt(t1), dp2 = c2.tangentAt(t2);
        const virtualPlaneNormal = dp1.cross(dp2);
        const normal1 = virtualPlaneNormal.cross(dp1).unit();
        const f1 = normal1.toLength(-radius);
        const center = cornerA.minus(f1);
        const curve = new EllipseCurve(center, f1, virtualPlaneNormal.cross(f1).toLength(radius));
        const cornerEdge = createEdge(curve, cornerA, cornerB, 0, curve.pointT(cornerB), undefined, c1.tangentAt(t1), c2.tangentAt(t2));
        return cornerEdge;
    }

    /**
     * Created by aval on 19.04.2017.
     */
    class FaceInfoFactory {
        static makeStatic(staticInfo) {
            return new (class extends FaceInfoFactory {
                constructor() {
                    super();
                }
                info(surface, contour, holes) {
                    return staticInfo;
                }
            })();
        }
        info(surface, contour, holes) {
            throw new Error("no default implementation");
        }
        extrudeBottom(surface, contour, holes = []) {
            return this.info(surface, contour, holes);
        }
        extrudeTop(surface, contour, holes = []) {
            return this.info(surface, contour, holes);
        }
        extrudeWall(index, surface, contour, holes = []) {
            return this.info(surface, contour, holes);
        }
        rotationWall(index, surface, contour, holes = []) {
            return this.info(surface, contour, holes);
        }
        rotationStart(surface, contour, holes = []) {
            return this.info(surface, contour, holes);
        }
        rotationEnd(surface, contour, holes = []) {
            return this.info(surface, contour, holes);
        }
        newSubFace(original, surface, contour, holes = []) {
            return original.info;
        }
        transform(original, m4, desc, surface, contour, holes = []) {
            return original.info;
        }
    }

    /**
     * Java style map.
     */
    class JavaMap {
        constructor() {
            this[Symbol.toStringTag] = "Map";
            this._map = new Map();
            this._size = 0;
        }
        toString() {
            return ("{" +
                Array.from(this.entries2())
                    .map(({ key, value }) => key + ":" + value)
                    .join(", ") +
                "}");
        }
        forEach(callbackfn, thisArg) {
            for (const bucket of this._map.values()) {
                for (const { key, value } of bucket) {
                    callbackfn.call(thisArg, value, key, this);
                }
            }
        }
        *keys() {
            for (const bucket of this._map.values()) {
                for (const { key } of bucket) {
                    yield key;
                }
            }
        }
        *values() {
            for (const bucket of this._map.values()) {
                for (const { value } of bucket) {
                    yield value;
                }
            }
        }
        [Symbol.iterator]() {
            return this.entries();
        }
        set(key, value) {
            this.set2(key, value);
            return this;
        }
        /**
         * Like {@link #set} except it returns true if key was new and false if the value was only updated.
         *
         */
        set2(key, val) {
            const hashCode = key.hashCode(), bucket = this._map.get(hashCode);
            //assert(hashCode === (hashCode | 0))
            if (bucket) {
                const pairIndex = bucket.findIndex((pair) => pair.key.equals(key));
                if (-1 == pairIndex) {
                    bucket.push({ key: key, value: val });
                }
                else {
                    bucket[pairIndex].value = val;
                    return false;
                }
            }
            else {
                this._map.set(hashCode, [{ key: key, value: val }]);
            }
            this._size++;
            return true;
        }
        has(key) {
            const hashCode = key.hashCode(), bucket = this._map.get(hashCode);
            //assert(hashCode === (hashCode | 0))
            return undefined !== bucket && bucket.some((pair) => pair.key.equals(key));
        }
        get(key) {
            const hashCode = key.hashCode(), bucket = this._map.get(hashCode), pair = bucket && bucket.find((pair) => pair.key.equals(key));
            return pair && pair.value;
        }
        getLike(key) {
            for (const hashCode of key.hashCodes()) {
                const bucket = this._map.get(hashCode);
                const canonVal = bucket && bucket.find((x) => x.key.like(key));
                if (canonVal)
                    return canonVal;
            }
        }
        setLike(key, val) {
            return !this.getLike(key) && this.set(key, val);
        }
        delete(key) {
            const hashCode = key.hashCode(), bucket = this._map.get(hashCode);
            if (bucket) {
                const index = bucket.findIndex((x) => x.key.equals(key));
                if (-1 != index) {
                    if (1 == bucket.length) {
                        this._map.delete(hashCode);
                    }
                    else {
                        bucket.splice(index, 1);
                    }
                    this._size--;
                    return true;
                }
            }
            return false;
        }
        deleteLike(key) {
            for (const hashCode of key.hashCodes()) {
                const bucket = this._map.get(hashCode);
                if (bucket) {
                    const index = bucket.findIndex((x) => x.key.like(key));
                    if (-1 != index) {
                        const deleted = bucket[index];
                        if (1 == bucket.length) {
                            this._map.delete(hashCode);
                        }
                        else {
                            bucket.splice(index, 1);
                        }
                        this._size--;
                        return deleted;
                    }
                }
            }
        }
        *entries2() {
            for (const bucket of this._map.values()) {
                yield* bucket;
            }
        }
        *entries() {
            for (const bucket of this._map.values()) {
                for (const { key, value } of bucket) {
                    yield [key, value];
                }
            }
        }
        clear() {
            this._map.clear();
            this._size = 0;
        }
        get size() {
            return this._size;
        }
    }

    class JavaSet {
        constructor(iterable) {
            this[Symbol.toStringTag] = "Set";
            this[Symbol.iterator] = JavaSet.prototype.values;
            this.keys = JavaSet.prototype.values;
            this._map = new Map();
            this._size = 0;
            if (iterable) {
                this.addAll(iterable);
            }
        }
        forEach(callbackfn, thisArg) {
            for (const [value] of this.entries()) {
                callbackfn.call(thisArg, value, value, this);
            }
        }
        add(val) {
            this.add2(val);
            return this;
        }
        add2(val) {
            // you can't use this.canonicalize here, as there is no way to differentiate if val
            // is new or if val was === the exisitng value (not only .equals)
            const hashCode = val.hashCode(), bucket = this._map.get(hashCode);
            if (bucket) {
                if (bucket.some((x) => x.equals(val))) {
                    return false;
                }
                bucket.push(val);
            }
            else {
                this._map.set(hashCode, [val]);
            }
            this._size++;
            return true;
        }
        addAll(iterable) {
            for (const val of iterable) {
                this.add(val);
            }
            return this;
        }
        canonicalize(val) {
            const hashCode = val.hashCode(), bucket = this._map.get(hashCode);
            if (bucket) {
                const existing = bucket.find((x) => x.equals(val));
                if (existing) {
                    return existing;
                }
                bucket.push(val);
            }
            else {
                this._map.set(hashCode, [val]);
            }
            this._size++;
            return val;
        }
        has(val) {
            const hashCode = val.hashCode(), bucket = this._map.get(hashCode);
            return undefined !== bucket && bucket.some((x) => x.equals(val));
        }
        getLike(val) {
            for (const hashCode of val.hashCodes()) {
                const bucket = this._map.get(hashCode);
                const canonVal = bucket && bucket.find((x) => x.like(val));
                if (canonVal)
                    return canonVal;
            }
        }
        canonicalizeLike(val) {
            // if this.getLike(val) is defined, return it, otherwise add val and return val
            return this.getLike(val) || this.canonicalize(val);
        }
        addLike(val) {
            return !this.getLike(val) && this.add(val);
        }
        delete(val) {
            const hashCode = val.hashCode(), bucket = this._map.get(hashCode);
            if (bucket) {
                const index = bucket.findIndex((x) => x.equals(val));
                if (-1 != index) {
                    if (1 == bucket.length) {
                        this._map.delete(hashCode);
                    }
                    else {
                        bucket.splice(index, 1);
                    }
                    this._size--;
                    return true;
                }
            }
            return false;
        }
        deleteLike(val) {
            for (const hashCode of val.hashCodes()) {
                const bucket = this._map.get(hashCode);
                if (bucket) {
                    const index = bucket.findIndex((x) => x.like(val));
                    if (-1 != index) {
                        const deleted = bucket[index];
                        if (1 == bucket.length) {
                            this._map.delete(hashCode);
                        }
                        else {
                            bucket.splice(index, 1);
                        }
                        this._size--;
                        return deleted;
                    }
                }
            }
        }
        *values() {
            for (const bucket of this._map.values()) {
                yield* bucket;
            }
        }
        *entries() {
            for (const bucket of this._map.values()) {
                for (const value of bucket) {
                    yield [value, value];
                }
            }
        }
        clear() {
            this._map.clear();
            this._size = 0;
        }
        get size() {
            return this._size;
        }
        toString() {
            return "{" + Array.from(this.values()).join(", ") + "}";
        }
    }
    class Pair {
        constructor(left, right) {
            this.left = left;
            this.right = right;
        }
        hashCode() {
            return this.left.hashCode() * 31 + this.right.hashCode();
        }
        equals(other) {
            return (this == other ||
                (Object.getPrototypeOf(other) == Pair.prototype &&
                    this.left.equals(other.left) &&
                    this.right.equals(other.right)));
        }
        toString() {
            return "(" + this.left.toString() + ", " + this.right.toString() + ")";
        }
        toSource() {
            return ("new Pair(" +
                this.left.toSource() +
                ", " +
                this.right.toSource() +
                ")");
        }
    }

    class Face extends Transformable {
        constructor(surface, contour, holes = [], name, info) {
            super();
            this.surface = surface;
            this.contour = contour;
            this.holes = holes;
            this.name = name;
            this.info = info;
            this.aabb = undefined;
            //assert(name)
            Edge.assertLoop(contour);
            assert(contour.every((f) => f instanceof Edge), () => "contour.every(f => f instanceof Edge)" + contour);
            // contour.forEach(e => !surface.containsCurve(e.curve) &&
            // console.log('FAIL:'+surface.distanceToPoint(e.curve.anchor)))
            //contour.forEach(e => {
            //	assert(surface.containsCurve(e.curve), 'edge not in surface ' + e + surface)
            //})
            //assert(surface.edgeLoopCCW(contour), surface.toString() + contour.join('\n'))
            holes && holes.forEach((hole) => Edge.assertLoop(hole));
            holes && holes.forEach((hole) => assert(!surface.edgeLoopCCW(hole)));
            assert(!holes || holes.constructor == Array, holes && holes.toString());
            this.allEdges = Array.prototype.concat.apply(this.contour, this.holes);
        }
        static assembleFacesFromLoops(loops, surface, faceConstructor) {
            function placeRecursively(newLoopInfo, loopInfos) {
                if (loopInfos.length == 0) {
                    loopInfos.push(newLoopInfo);
                }
                else {
                    const subLoopInfo = loopInfos.find((loopInfo) => BRep.loop1ContainsLoop2(loopInfo.loop, loopInfo.ccw, newLoopInfo.loop, newLoopInfo.ccw, surface));
                    if (subLoopInfo) {
                        placeRecursively(newLoopInfo, subLoopInfo.subloops);
                    }
                    else {
                        // newLoopInfo isnt contained by any other subLoopInfo
                        for (let i = loopInfos.length; --i >= 0;) {
                            const subLoopInfo = loopInfos[i];
                            //console.log('cheving subLoopInfo', surface.loopContainsPoint(newLoopInfo.edges,
                            // subLoopInfo.edges[0].a))
                            if (BRep.loop1ContainsLoop2(newLoopInfo.loop, newLoopInfo.ccw, subLoopInfo.loop, subLoopInfo.ccw, surface)) {
                                newLoopInfo.subloops.push(subLoopInfo);
                                loopInfos.splice(i, 1); // remove it
                            }
                        }
                        loopInfos.push(newLoopInfo);
                    }
                }
            }
            function newFacesRecursive(loopInfo) {
                newFaces.push(new faceConstructor(surface, loopInfo.ccw ? loopInfo.loop : Edge.reversePath(loopInfo.loop), loopInfo.subloops.map((sl) => sl.ccw ? Edge.reversePath(sl.loop) : sl.loop)));
                loopInfo.subloops.forEach((sl) => sl.subloops.forEach((sl2) => newFacesRecursive(sl2)));
            }
            const newFaces = [];
            const topLevelLoops = [];
            loops.forEach((loop) => placeRecursively({
                loop: loop,
                ccw: surface.edgeLoopCCW(loop),
                subloops: [],
            }, topLevelLoops));
            topLevelLoops.forEach((tll) => newFacesRecursive(tll));
            return newFaces;
        }
        //fromLoops(loops: Edge[][], surface: Surface) {
        //	type LoopInfo = {loop: Edge[], ccw: boolean, subloops: LoopInfo[]}
        //	function placeRecursively(newLoopInfo: LoopInfo, loopInfos: LoopInfo[]) {
        //		if (loopInfos.length == 0) {
        //			loopInfos.push(newLoopInfo)
        //		} else {
        //			const subLoopInfo = loopInfos.find(loopInfo => BRep.loop1ContainsLoop2(loopInfo.loop, loopInfo.ccw,
        // newLoopInfo.loop, newLoopInfo.ccw, surface)) if (subLoopInfo) { placeRecursively(newLoopInfo,
        // subLoopInfo.subloops) } else { // newLoopInfo isnt contained by any other subLoopInfo for (let i =
        // loopInfos.length; --i >= 0;) { const subLoopInfo = loopInfos[i] //console.log('cheving subLoopInfo',
        // surface.loopContainsPoint(newLoopInfo.edges, subLoopInfo.edges[0].a)) if
        // (BRep.loop1ContainsLoop2(newLoopInfo.loop, subLoopInfo.loop, surface)) { newLoopInfo.subloops.push(subLoopInfo)
        // loopInfos.splice(i, 1) // remove it } } loopInfos.push(newLoopInfo) } } }  function newFacesRecursive(loopInfo:
        // LoopInfo): void { // CW loops can be top level, if they are holes in the original face not contained in the new
        // face if (loopInfo.ccw) { if (loopInfo.subloops.every(sl => !sl.ccw)) { const newFace = new
        // faceConstructor(surface, loopInfo.loop, loopInfo.subloops.map(sl => sl.loop)) newFaces.push(newFace)
        // loopInfo.subloops.forEach(sl => sl.subloops.forEach(slsl => slsl.ccw && newFacesRecursive(slsl))) } else {
        // loopInfo.subloops.forEach(sl => sl.ccw && newFacesRecursive(sl)) } } }  const newFaces: Face[] = [] const
        // topLevelLoops:LoopInfo[] = [] loops.forEach(loop => placeRecursively({loop: loop, ccw:
        // surface.edgeLoopCCW(loop), subloops: []}, topLevelLoops)) topLevelLoops.forEach(tll => newFacesRecursive(tll))
        // return newFaces }
        static create(surface, faceEdges, holes, faceName, info) {
            return surface instanceof PlaneSurface
                ? new PlaneFace(surface, faceEdges, holes, faceName, info)
                : new RotationFace(surface, faceEdges, holes, faceName, info);
        }
        intersectFace(face2, thisBrep, face2Brep, faceMap, thisEdgePoints, otherEdgePoints, checkedPairs) {
            //thisEdgePoints = {
            //   get(key) {
            //       return _thisEdgePoints.get(key)
            //    },
            //    set(key, value) {
            //       assert(thisBrep.edgeFaces.get(key))
            //        _thisEdgePoints.set(key, value)
            //    }
            //}
            function hasPair(a, b) {
                return checkedPairs.has(new Pair(a, b));
            }
            function addPair(a, b) {
                return checkedPairs.add(new Pair(a, b));
            }
            /**
             * @param newEdge generated segment
             * @param col1 if newEdge is colinear to an edge of this, the edge in question
             * @param col2 same for face2
             * @return whether new edge was added.
             */
            function handleNewEdge(newEdge, col1, col2) {
                if (!col1 && !col2) {
                    let correctDir = face.surface
                        .normalP(newEdge.a)
                        .cross(face2.surface.normalP(newEdge.a));
                    if (correctDir.likeO()) {
                        const t = lerp$1(newEdge.aT, newEdge.bT, 1 / GOLDEN_RATIO), p = newEdge.curve.at(t);
                        correctDir = face.surface.normalP(p).cross(face2.surface.normalP(p));
                    }
                    if (!correctDir.likeO()) {
                        if (correctDir.dot(newEdge.aDir) < 0) {
                            newEdge = newEdge.flipped();
                        }
                        mapPush(faceMap, face, newEdge);
                        mapPush(faceMap, face2, newEdge.flipped());
                    }
                    else {
                        const p = newEdge.a;
                        const plane = P3.normalOnAnchor(newEdge.aDir, p);
                        const up = face.surface.normalP(p);
                        const sameDir = up.dot(face2.surface.normalP(p)) > 0;
                        const canonDir = plane.normal1.cross(up);
                        const curve = face.surface.isCurvesWithPlane(plane)[0], curveT = curve.pointT(p), curveDir = sign$1(canonDir.dot(curve.tangentAt(curveT)));
                        const curve2 = face2.surface.isCurvesWithPlane(plane)[0], curve2T = curve2.pointT(p), curve2Dir = sign$1(canonDir.dot(curve.tangentAt(curve2T)));
                        const foo = curve.diff(curveT, EPS * curveDir).dot(up);
                        const foo2 = curve2.diff(curve2T, EPS * curve2Dir).dot(up);
                        if (foo2 < foo) {
                            mapPush(faceMap, face2, sameDir ? newEdge.flipped() : newEdge);
                        }
                        if (up.dot(face2.surface.normalP(p)) < 0 == foo2 < foo) {
                            mapPush(faceMap, face, newEdge.flipped());
                        }
                        const bar = curve.diff(curveT, EPS * curveDir).dot(up);
                        const bar2 = curve2.diff(curve2T, EPS * curve2Dir).dot(up);
                        if (bar2 < bar) {
                            mapPush(faceMap, face2, sameDir ? newEdge : newEdge.flipped());
                        }
                        if (sameDir != bar2 < bar) {
                            mapPush(faceMap, face, newEdge);
                        }
                    }
                    return true;
                }
                function handleEdgeInFace(col1, col2, face, face2, thisBrep, face2Brep, coplanarSameIsInside, has, add) {
                    if (col1 && !col2) {
                        if (hasPair(col1.getCanon(), face2))
                            return false;
                        //add(col1.getCanon(), face2)
                        const surface2 = face2.surface;
                        // NB: a new edge is inserted even though it may be the same as an old one
                        // however it indicates that it intersects the other volume here, i.e. the old edge cannot
                        // be counted as 'inside' for purposes of reconstitution
                        thisBrep.edgeFaces.get(col1.getCanon()).forEach((faceInfo) => {
                            //const dot = snap0(surface2.normal1.dot(faceInfo.inside))
                            //if (dot == 0 ? !coplanarSameIsInside : dot < 0) {
                            const pointsInsideFace = fff(faceInfo, face2.surface);
                            const edgeInside = pointsInsideFace == INSIDE ||
                                (!coplanarSameIsInside && pointsInsideFace == COPLANAR_SAME);
                            const pushEdge = faceInfo.edge
                                .tangentAt(faceInfo.edge.curve.pointT(newEdge.a))
                                .like(newEdge.aDir)
                                ? newEdge
                                : newEdge.flipped();
                            assert(faceInfo.edge
                                .tangentAt(faceInfo.edge.curve.pointT(pushEdge.a))
                                .like(pushEdge.aDir));
                            edgeInside && mapPush(faceMap, faceInfo.face, pushEdge);
                        });
                        const surface2NormalAtNewEdgeA = surface2.normalP(newEdge.a);
                        const newEdgeInside = surface2NormalAtNewEdgeA.cross(newEdge.aDir);
                        const sVEF1 = splitsVolumeEnclosingFacesP(thisBrep, col1.getCanon(), newEdge.a, newEdgeInside, surface2NormalAtNewEdgeA);
                        let addNewEdge, addNewEdgeFlipped;
                        if ((addNewEdge =
                            sVEF1 == INSIDE ||
                                (coplanarSameIsInside && sVEF1 == COPLANAR_SAME))) {
                            mapPush(faceMap, face2, newEdge);
                        }
                        const sVEF2 = splitsVolumeEnclosingFacesP(thisBrep, col1.getCanon(), newEdge.a, newEdgeInside.negated(), surface2NormalAtNewEdgeA);
                        if ((addNewEdgeFlipped =
                            sVEF2 == INSIDE ||
                                (coplanarSameIsInside && sVEF2 == COPLANAR_SAME))) {
                            mapPush(faceMap, face2, newEdge.flipped());
                        }
                        if (addNewEdge ||
                            addNewEdgeFlipped ||
                            (sVEF1 == COPLANAR_SAME && sVEF2 == INSIDE) ||
                            (sVEF2 == COPLANAR_SAME && sVEF1 == INSIDE)) {
                            return true;
                        }
                    }
                    return false;
                }
                const c1 = handleEdgeInFace(col1, col2, face, face2, thisBrep, face2Brep, false);
                const c2 = handleEdgeInFace(col2, col1, face2, face, face2Brep, thisBrep, true);
                if (c1 || c2)
                    return true;
                if (col1 && col2) {
                    if (hasPair(col1.getCanon(), col2.getCanon()))
                        return false;
                    addPair(col1.getCanon(), col2.getCanon());
                    function handleColinearEdgeFaces(col1, col2, thisBrep, face2Brep, coplanarSameIsInside, thisEdgePoints, has, add) {
                        // not entirely sure for what i had the dirInsides in?
                        //const aDirNegatedInside = (newEdge.a.like(col2.a) || newEdge.a.like(col2.b)) &&
                        // splitsVolumeEnclosingCone(face2Brep, newEdge.a, newEdge.aDir.negated()) == INSIDE const
                        // bDirInside = (newEdge.b.like(col2.a) || newEdge.b.like(col2.b)) &&
                        // splitsVolumeEnclosingCone(face2Brep, newEdge.b, newEdge.bDir) == INSIDE
                        for (const faceInfo of thisBrep.edgeFaces.get(col1.getCanon())) {
                            const sVEF = splitsVolumeEnclosingFaces(face2Brep, col2.getCanon(), faceInfo.inside, faceInfo.normalAtCanonA);
                            const edgeInside = sVEF == INSIDE || (coplanarSameIsInside && sVEF == COPLANAR_SAME);
                            const pushEdge = faceInfo.edge.aDir.like(newEdge.aDir)
                                ? newEdge
                                : newEdge.flipped();
                            if (edgeInside) {
                                mapPush(faceMap, faceInfo.face, pushEdge);
                                const aT = col1.getCanon().curve.pointT(newEdge.a);
                                if (!eq(aT, col1.aT) && !eq(aT, col1.bT)) {
                                    // newEdge.a is in center of col1
                                    if (splitsVolumeEnclosingCone2(face2Brep, newEdge.a, newEdge.curve, newEdge.aT, -Math.sign(newEdge.deltaT())) == INSIDE) {
                                        mapPush(thisEdgePoints, col1.getCanon(), {
                                            p: newEdge.a,
                                            edgeT: aT,
                                        });
                                    }
                                }
                                const bT = col1.getCanon().curve.pointT(newEdge.b);
                                if (!eq(bT, col1.aT) && !eq(bT, col1.bT)) {
                                    if (splitsVolumeEnclosingCone2(face2Brep, newEdge.b, newEdge.curve, newEdge.bT, Math.sign(newEdge.deltaT())) == INSIDE) {
                                        mapPush(thisEdgePoints, col1.getCanon(), {
                                            p: newEdge.b,
                                            edgeT: bT,
                                        });
                                    }
                                }
                            }
                        }
                    }
                    handleColinearEdgeFaces(col1, col2, thisBrep, face2Brep, true, thisEdgePoints);
                    handleColinearEdgeFaces(col2, col1, face2Brep, thisBrep, false, otherEdgePoints);
                    return false;
                }
                return false;
            }
            // what needs to be generated: new edges on face
            // points on edges where they are cut by faces so that sub edges will be generated for loops
            // points on ends of edges where the edge will be an edge in the new volume where it goes from A to B
            //         you don't want those to be marked as 'inside', otherwise invalid faces will be added
            // if a face cuts a corner, nothing needs to be done, as that alone does not limit what adjacent faces will be
            function handleEndPoint(a, b, newEdge) {
                // ends in the middle of b's face
                if (a && !b) {
                    if (!a.colinear && a.edgeT != a.edge.aT && a.edgeT != a.edge.bT) {
                        mapPush(thisEdgePoints, a.edge.getCanon(), a);
                        assert(a.edge.isValidT(a.edgeT));
                    }
                    // else colinear segment ends in middle of other face, do nothing
                }
                // ends in the middle of a's face
                if (b && !a) {
                    if (!b.colinear && b.edgeT != b.edge.aT && b.edgeT != b.edge.bT) {
                        mapPush(otherEdgePoints, b.edge.getCanon(), b);
                        assert(b.edge.isValidT(b.edgeT));
                    }
                    // else colinear segment ends in middle of other face, do nothing
                }
                if (a && b) {
                    assert(a.colinear || b.colinear || eq(a.t, b.t));
                    // if a or b is colinear the correct points will already have been added to the edge by handleNewEdge
                    // segment starts/ends on edge/edge intersection
                    function handleAB(a, b, face, face2, thisPlane, face2Plane, thisBrep, face2Brep, first, thisEdgePoints) {
                        if (!a.colinear && a.edgeT != a.edge.aT && a.edgeT != a.edge.bT) {
                            //if (!hasPair(a.edge.getCanon(), b.edge.getCanon())) {
                            addPair(a.edge.getCanon(), b.edge.getCanon());
                            // ends on a, on colinear segment b bT != a.edge.bT &&
                            // b can be colinear, so edgeT == aT is possible
                            if (a.p.like(b.edge.a) || a.p.like(b.edge.b)) {
                                const corner = a.p.like(b.edge.a) ? b.edge.a : b.edge.b;
                                // face2brep corner on edge
                                const sVEC1 = splitsVolumeEnclosingCone2(face2Brep, corner, a.edge.curve, a.edgeT, 1);
                                const sVEC2 = splitsVolumeEnclosingCone2(face2Brep, corner, a.edge.curve, a.edgeT, -1);
                                // if either of these return ALONG_EDGE_OR_PLANE, then the breps share a colinear edge
                                if (INSIDE == sVEC1 || INSIDE == sVEC2) {
                                    mapPush(thisEdgePoints, a.edge.getCanon(), a);
                                    assert(a.edge.isValidT(a.edgeT));
                                }
                            }
                            else {
                                // edge / edge center intersection
                                // todo: is this even necessary considering we add edges anyway? i think so...
                                // const testVector =
                                // a.edge.tangentAt(a.edgeT).rejectedFrom(b.edge.tangentAt(b.edge.curve.pointT(a.p)))
                                // assert(!testVector.likeO())
                                const sVEF1 = splitsVolumeEnclosingFacesP2(face2Brep, b.edge.getCanon(), a.p, a.edge.curve, a.edgeT, 1, thisPlane.normalP(a.p));
                                const sVEF2 = splitsVolumeEnclosingFacesP2(face2Brep, b.edge.getCanon(), a.p, a.edge.curve, a.edgeT, -1, thisPlane.normalP(a.p));
                                if (INSIDE == sVEF1 ||
                                    (first && COPLANAR_SAME == sVEF1) ||
                                    INSIDE == sVEF2 ||
                                    (first && COPLANAR_SAME == sVEF2)) {
                                    mapPush(thisEdgePoints, a.edge.getCanon(), a);
                                    assert(a.edge.isValidT(a.edgeT));
                                }
                            }
                            //}
                        }
                    }
                    handleAB(a, b, face, face2, surface, surface2, thisBrep, face2Brep, true, thisEdgePoints);
                    handleAB(b, a, face2, face, surface2, surface, face2Brep, thisBrep, false, otherEdgePoints);
                }
            }
            assertInst(Face, face2);
            const face = this;
            const surface = face.surface, surface2 = face2.surface;
            if (!this.getAABB().touchesAABBfuzzy(face2.getAABB())) {
                return;
            }
            if (surface.isCoplanarTo(surface2)) {
                return;
            }
            const isCurves = surface.isCurvesWithSurface(surface2);
            if (0 == isCurves.length) {
                return;
            }
            for (const isCurve of isCurves) {
                assert(surface.containsCurve(isCurve));
                assert(surface2.containsCurve(isCurve));
            }
            for (let isCurveIndex = 0; isCurveIndex < isCurves.length; isCurveIndex++) {
                // get intersections of newCurve with other edges of face and face2
                const isCurve = isCurves[isCurveIndex];
                const ps1 = face.edgeISPsWithSurface(isCurve, face2.surface);
                const ps2 = face2.edgeISPsWithSurface(isCurve, face.surface);
                // for non-endless curves, e.g. ellipses, the intersections of the faces can be non-zero, even if one of
                // the faces doesn't register any points on the curve. For example, if a cylinder is cut entirely by a
                // plane face (all its edges around the cylinder), then the face will contain the entire curve and
                // 'ps' for the plane face will be empty
                // TODO: behavior when curves touch face?
                // !! start in does depend on insideDir... TODO
                assertf(() => 0 == ps1.length ||
                    !eq0(ps1[0].insideDir.dot(isCurve.tangentAt(ps1[0].t))), () => ps1[0].insideDir.dot(isCurve.tangentAt(ps1[0].t)));
                assertf(() => 0 == ps2.length ||
                    !eq0(ps2[0].insideDir.dot(isCurve.tangentAt(ps2[0].t))), () => ps2[0].insideDir.dot(isCurve.tangentAt(ps2[0].t)));
                function startsInside(ps, face) {
                    if (0 == ps.length) {
                        return (isFinite(isCurve.tMin) &&
                            face.containsPoint2(isCurve.at(isCurve.tMin)) == PointVsFace.INSIDE);
                    }
                    else {
                        return ps[0].insideDir.dot(isCurve.tangentAt(ps[0].t)) < 0;
                    }
                }
                // they can't both be empty currently
                // they can't both start 'inside'
                let in1 = startsInside(ps1, face);
                let in2 = startsInside(ps2, face2);
                if ((0 == ps1.length && !in1) || (0 == ps2.length && !in2)) {
                    continue;
                }
                //assert(!in1 || !in2)
                let col1, col2;
                let i = 0, j = 0, last;
                let startP = in1 && in2 ? isCurve.at(isCurve.tMin) : undefined, startDir, startT = isCurve.tMin, startA, startB;
                while (i < ps1.length || j < ps2.length) {
                    assert(i <= ps1.length);
                    assert(j <= ps2.length);
                    const a = ps1[i], b = ps2[j];
                    assert(a || b);
                    if (j == ps2.length || (i < ps1.length && lt(a.t, b.t))) {
                        last = a;
                        in1 = !in1;
                        a.used = true;
                        col1 = a.colinear ? a : undefined;
                        i++;
                    }
                    else if (i == ps1.length || gt(a.t, b.t)) {
                        last = b;
                        b.used = true;
                        in2 = !in2;
                        col2 = b.colinear ? b : undefined;
                        j++;
                    }
                    else {
                        last = a;
                        a.used = true;
                        b.used = true;
                        in1 = !in1;
                        in2 = !in2;
                        //if (in1 == in2) {
                        col1 = a.colinear ? a : undefined;
                        col2 = b.colinear ? b : undefined;
                        //}
                        i++;
                        j++;
                    }
                    if (startP && !(in1 && in2)) {
                        // segment end
                        startDir = isCurve.tangentAt(startT);
                        if (eq(startT, last.t)) {
                            startP = undefined;
                            continue;
                        }
                        assert(lt(startT, last.t));
                        startT > last.t && (startDir = startDir.negated());
                        let endDir = isCurve.tangentAt(last.t);
                        startT > last.t && (endDir = endDir.negated());
                        const newEdge = createEdge(isCurve, startP, last.p, startT, last.t, undefined, startDir, endDir, "genseg" + getGlobalId());
                        startP = undefined;
                        if (handleNewEdge(newEdge, col1 && col1.edge, col2 && col2.edge)) {
                            handleEndPoint(startA || col1, startB || col2);
                            handleEndPoint((a && a.used && a) || col1, (b && b.used && b) || col2);
                        }
                    }
                    else if (in1 && in2) {
                        // new segment just started
                        startP = last.p;
                        startDir = last.insideDir;
                        startT = last.t;
                        startA = a && a.used ? a : undefined;
                        startB = b && b.used ? b : undefined;
                    }
                }
                if (in1 && in2 && startT !== isCurve.tMax) {
                    const endT = isCurve.tMax;
                    startDir = isCurve.tangentAt(startT);
                    startT > endT && (startDir = startDir.negated());
                    let endDir = isCurve.tangentAt(endT);
                    startT > endT && (endDir = endDir.negated());
                    const newEdge = createEdge(isCurve, startP, isCurve.at(endT), startT, endT, undefined, startDir, endDir, "genseg" + getGlobalId());
                    if (handleNewEdge(newEdge, col1 && col1.edge, col2 && col2.edge)) {
                        handleEndPoint(startA || col1, startB || col2);
                    }
                }
            }
            face.getAllEdges().forEach((edge) => {
                checkedPairs.add(new Pair(edge.getCanon(), face2));
            });
            face2.getAllEdges().forEach((edge) => {
                checkedPairs.add(new Pair(edge.getCanon(), face));
            });
        }
        edgeISPsWithSurface(isCurve, surface2) {
            const face = this;
            const surface = face.surface;
            const loops = face.holes.concat([face.contour]);
            const ps = [];
            for (const loop of loops) {
                const colinearEdges = loop.map((edge) => edge.curve.isColinearTo(isCurve));
                //const colinearSides = loop.map((edge, edgeIndex) => -1 != colinearEdges[edgeIndex]
                //            && -sign(isCurves[colinearEdges[edgeIndex]].tangentAt(edge.aT).dot(edge.aDir)))
                for (let edgeIndex = 0; edgeIndex < loop.length; edgeIndex++) {
                    const edge = loop[edgeIndex];
                    const nextEdgeIndex = (edgeIndex + 1) % loop.length, nextEdge = loop[nextEdgeIndex];
                    //console.log(edge.toSource()) {p:V3(2, -2.102, 0),
                    if (colinearEdges[edgeIndex]) {
                        if (isCurve.containsPoint(edge.a)) {
                            const prevEdgeIndex = (edgeIndex - 1 + loop.length) % loop.length, prevEdge = loop[prevEdgeIndex];
                            const curveAT = isCurve.pointT(edge.a);
                            const colinearOutA = edge.aDir.cross(surface.normalP(edge.a));
                            if (!colinearEdges[prevEdgeIndex] &&
                                dotCurve2(prevEdge.curve, prevEdge.bT, colinearOutA, -sign$1(prevEdge.deltaT())) > 0) {
                                ps.push({
                                    p: prevEdge.b,
                                    insideDir: edge.aDir.negated(),
                                    t: curveAT,
                                    edge: prevEdge,
                                    edgeT: prevEdge.bT,
                                    colinear: false,
                                });
                            }
                            ps.push({
                                p: edge.a,
                                insideDir: edge.aDir,
                                t: curveAT,
                                edge: edge,
                                edgeT: edge.aT,
                                colinear: true,
                            });
                        }
                        if (isCurve.containsPoint(edge.b)) {
                            const curveBT = isCurve.pointT(edge.b);
                            const colinearOutB = edge.bDir.cross(surface.normalP(edge.b));
                            if (!colinearEdges[nextEdgeIndex] &&
                                dotCurve2(nextEdge.curve, nextEdge.aT, colinearOutB, sign$1(nextEdge.deltaT())) > 0) {
                                ps.push({
                                    p: edge.b,
                                    insideDir: edge.bDir,
                                    t: curveBT,
                                    edge: nextEdge,
                                    edgeT: nextEdge.aT,
                                    colinear: false,
                                });
                            }
                            ps.push({
                                p: edge.b,
                                insideDir: edge.bDir.negated(),
                                t: curveBT,
                                edge: edge,
                                edgeT: edge.bT,
                                colinear: true,
                            });
                        }
                    }
                    else {
                        const edgeTs = edge.edgeISTsWithSurface(surface2);
                        for (const edgeT of edgeTs) {
                            const p = edge.curve.at(edgeT);
                            if (!isCurve.containsPoint(p))
                                continue;
                            const curveT = isCurve.pointT(p);
                            assert(!isNaN(curveT));
                            const insideDir = edge
                                .tangentAt(edgeT)
                                .cross(surface.normalP(p))
                                .negated();
                            const isTangent = isCurve.tangentAt(curveT);
                            //if(!eq0(insideDir.dot(isTangent))) {
                            // Edge.edgeISTsWithSurface returns snapped values, so comparison with == is ok:
                            if (edgeT == edge.bT) {
                                // endpoint lies on intersection line
                                if (!colinearEdges[nextEdgeIndex]) {
                                    if (!eq(curveT, isCurve.tMax)) {
                                        const pointsToInside = this.pointsToInside3(edge.b, isCurve, curveT, 1);
                                        assert(pointsToInside != PointVsFace.ON_EDGE);
                                        if (PointVsFace.INSIDE == pointsToInside) {
                                            ps.push({
                                                p: edge.b,
                                                insideDir: isTangent,
                                                t: curveT,
                                                edge: edge,
                                                edgeT: edge.bT,
                                                colinear: false,
                                            });
                                        }
                                    }
                                    if (!eq(curveT, isCurve.tMin)) {
                                        const pointsToInside = this.pointsToInside3(edge.b, isCurve, curveT, -1);
                                        assert(pointsToInside != PointVsFace.ON_EDGE);
                                        if (PointVsFace.INSIDE == pointsToInside) {
                                            ps.push({
                                                p: edge.b,
                                                insideDir: isTangent.negated(),
                                                t: curveT,
                                                edge: edge,
                                                edgeT: edge.bT,
                                                colinear: false,
                                            });
                                        }
                                    }
                                    //let thisSide = -normVector.dot(edge.bDir)
                                    //if (eq0(thisSide)) {
                                    //    // advanced test
                                    //    const dir = -sign(edge.deltaT())
                                    //    const iscd = isCurve.at(curveT).to(isCurve.at(curveT + dir * dirFactor *
                                    // eps)).dot(normVector) const ecd = edge.curve.at(edgeT).to(edge.curve.at(edgeT + dir
                                    // * eps)).dot(normVector) thisSide = sign(ecd - iscd) } let nextSide =
                                    // normVector.dot(nextEdge.aDir) if (eq0(nextSide)) { // advanced test const dirFactor
                                    // = sign(snap0(isTangent.dot(nextEdge.curve.tangentAt(nextEdge.aT)))) assert(dirFactor
                                    // !== 0) const dir = sign(nextEdge.deltaT()) const iscd =
                                    // isCurve.at(curveT).to(isCurve.at(curveT + dir * dirFactor * eps)).dot(normVector)
                                    // const ecd = nextEdge.curve.at(nextEdge.aT).to(nextEdge.curve.at(nextEdge.aT + dir *
                                    // eps)).dot(normVector) nextSide = sign(ecd - iscd) } if (nextSide < 0 || thisSide <
                                    // 0) { assert(!eq0(insideDir.dot(isTangent))) // next segment is not colinear and ends
                                    // on different side ps.push({ p: edge.b, insideDir: insideDir, t: curveT, edge: edge,
                                    // edgeT: edge.bT, colinear: false}) }
                                }
                            }
                            else if (edgeT != edge.aT) {
                                // edge crosses/touches an intersection curve, neither starts nor ends on it
                                if (eq0(insideDir.dot(isTangent))) {
                                    const dirFactor = sign$1(isTangent.dot(edge.curve.tangentAt(edgeT)));
                                    const eps = 1e-4;
                                    for (const dir of [-1, 1]) {
                                        if ((-1 == dir * dirFactor && edgeT == edge.minT) ||
                                            (1 == dir * dirFactor && edgeT == edge.maxT) ||
                                            (-1 == dir && curveT == isCurve.tMin) ||
                                            (1 == dir && curveT == isCurve.tMax))
                                            continue;
                                        const iscd = isCurve
                                            .at(curveT)
                                            .to(isCurve.at(curveT + dir * eps))
                                            .dot(insideDir);
                                        const ecd = edge.curve
                                            .at(edgeT)
                                            .to(edge.curve.at(edgeT + dir * dirFactor * eps))
                                            .dot(insideDir);
                                        if (iscd - ecd > 0) {
                                            ps.push({
                                                p,
                                                insideDir: isTangent.times(dir),
                                                t: curveT,
                                                edge: edge,
                                                edgeT: edgeT,
                                                colinear: false,
                                            });
                                        }
                                    }
                                }
                                else {
                                    ps.push({
                                        p: p,
                                        insideDir: insideDir,
                                        t: curveT,
                                        edge: edge,
                                        edgeT: edgeT,
                                        colinear: false,
                                    });
                                }
                            }
                            //} else {
                            //
                            //	const dirFactor = sign(isTangent.dot(edge.curve.tangentAt(edgeT)))
                            //	const eps = 1e-4
                            //	const normVector = surface2.normalP(p)
                            //	for (const dir of [-1, 1]) {
                            //		if (-1 == dir * dirFactor && edgeT == edge.minT ||
                            //			1 == dir * dirFactor && edgeT == edge.maxT ||
                            //			-1 == dir && curveT == isCurve.tMin ||
                            //			1 == dir && curveT == isCurve.tMax) continue
                            //		const iscd = isCurve.at(curveT).to(isCurve.at(curveT + dir * eps)).dot(normVector)
                            //		const ecd = edge.curve.at(edgeT).to(edge.curve.at(edgeT + dir * dirFactor *
                            // eps)).dot(normVector) if (iscd > ecd) { ps.push({p, insideDir: isTangent.times(dir *
                            // dirFactor), t: curveT, edge: edge, edgeT: edgeT, colinear: false}) } }
                            // curveVsSurface(isCurve, curveT, p, surface2) }
                        }
                    }
                }
            }
            // duplicate 't's are ok, as sometimes a segment needs to stop and start again
            // should be sorted so that back facing ones are first
            ps.sort((a, b) => a.t - b.t || a.insideDir.dot(isCurve.tangentAt(a.t)));
            return ps;
        }
        transform(m4) {
            const mirroring = m4.isMirroring();
            const newEdges = Edge.reversePath(this.contour.map((e) => e.transform(m4)), mirroring);
            const newHoles = this.holes.map((hole) => Edge.reversePath(hole.map((e) => e.transform(m4)), mirroring));
            return new this.constructor(this.surface.transform(m4), newEdges, newHoles, this.name, this.info);
        }
        transform4(m4) {
            const mirroring = m4.isMirroring();
            const newEdges = Edge.reversePath(this.contour.map((e) => e.transform4(m4)), mirroring);
            const newHoles = this.holes.map((hole) => Edge.reversePath(hole.map((e) => e.transform4(m4)), mirroring));
            return new this.constructor(this.surface.transform4(m4), newEdges, newHoles, this.name, this.info);
        }
        flipped() {
            const newEdges = this.contour.map((e) => e.flipped()).reverse();
            const newHoles = this.holes.map((hole) => hole.map((e) => e.flipped()).reverse());
            return new this.constructor(this.surface.flipped(), newEdges, newHoles, this.name, this.info);
        }
        toString() {
            return ("new " +
                this.constructor.name +
                "(" +
                this.surface +
                ", [" +
                this.contour.map((e) => "\n\t" + e).join() +
                "]" +
                this.holes.map((hole) => "\n\t\thole: " + hole.join()) +
                ")");
        }
        toSource() {
            return ("new " +
                this.constructor.name +
                "(" +
                this.surface.toSource() +
                ", [" +
                this.contour.map((e) => "\n\t" + e.toSource() + ",").join("") +
                "], [" +
                this.holes
                    .map((hole) => "[" + hole.map((e) => "\n\t" + e.toSource() + ",").join("") + "]")
                    .join(",") +
                "])");
        }
        equals(obj) {
            return (this == obj ||
                (Object.getPrototypeOf(this) == Object.getPrototypeOf(obj) &&
                    this.holes.length == obj.holes.length &&
                    Edge.loopsEqual(this.contour, obj.contour) &&
                    this.holes.every((hole) => obj.holes.some((hole2) => Edge.loopsEqual(hole, hole2)))));
        }
        hashCode() {
            function arrayHashCode(array) {
                let hashCode = 0;
                for (const val of array) {
                    hashCode = (hashCode * 31 + val) | 0;
                }
                return hashCode;
            }
            function loopHashCode(loop) {
                return arrayHashCode(loop.map((edge) => edge.hashCode()).sort(MINUS));
            }
            let hashCode = 0;
            hashCode =
                (hashCode * 31 +
                    arrayHashCode(this.holes.map((loop) => loopHashCode(loop)).sort(MINUS))) |
                    0;
            hashCode = (hashCode * 31 + loopHashCode(this.contour)) | 0;
            hashCode = (hashCode * 31 + this.surface.hashCode()) | 0;
            return hashCode;
        }
        likeFace(face2) {
            function loopsLike(a, b) {
                return (a.length == b.length &&
                    arrayRange(0, a.length, 1).some((offset) => a.every((edge, i) => edge.like(b[(offset + i) % a.length]))));
            }
            assertInst(Face, face2);
            return (this.surface.like(face2.surface) &&
                this.holes.length == face2.holes.length &&
                loopsLike(this.contour, face2.contour) &&
                this.holes.every((hole) => face2.holes.some((hole2) => loopsLike(hole, hole2))));
        }
        getAllEdges() {
            return this.allEdges;
        }
        addEdgeLines(mesh) {
            assert(false, "buggy, fix");
            const vertices = this.contour.flatMap((edge) => edge.getVerticesNo0()), mvl = mesh.vertices.length;
            for (let i = 0; i < vertices.length; i++) {
                mesh.vertices.push(vertices[i]);
                mesh.LINES.push(mvl + i, mvl + ((i + 1) % vertices.length));
            }
        }
        containsPoint(p) {
            assertVectors(p);
            return (this.surface.loopContainsPoint(this.contour, p) != PointVsFace.OUTSIDE &&
                !this.holes.some((hole) => this.surface.loopContainsPoint(hole, p) != PointVsFace.OUTSIDE));
        }
        containsPoint2(p) {
            assertVectors(p);
            const contourContainsPoint = this.surface.loopContainsPoint(this.contour, p);
            if (contourContainsPoint != PointVsFace.INSIDE)
                return contourContainsPoint;
            for (const hole of this.holes) {
                const loopContainsPoint = this.surface.loopContainsPoint(hole, p);
                if (loopContainsPoint != PointVsFace.OUTSIDE) {
                    return loopContainsPoint == PointVsFace.ON_EDGE
                        ? PointVsFace.ON_EDGE
                        : PointVsFace.OUTSIDE;
                }
            }
            return PointVsFace.INSIDE;
        }
        /**
         *
         * @param line
         * @returns t param of the line if there is an intersection, NaN otherwise
         */
        intersectsLine(line) {
            assertInst(L3, line);
            if (!this.getAABB().intersectsLine(line))
                return NaN;
            const containedIntersectionsTs = this.surface
                .isTsForLine(line)
                .filter((t) => this.containsPoint(line.at(t)));
            const nearestPointT = min$1(containedIntersectionsTs);
            return undefined != nearestPointT ? nearestPointT : NaN;
        }
        toMesh() {
            const mesh = new Mesh()
                .addIndexBuffer("TRIANGLES")
                .addIndexBuffer("LINES")
                .addVertexBuffer("normals", "ts_Normal");
            this.addToMesh(mesh);
            //mesh.compile()
            return mesh;
        }
        zDirVolume() {
            return this.surface.zDirVolume(this.getAllEdges());
        }
        calcArea() {
            return this.surface.calculateArea(this.getAllEdges());
        }
        getLoops() {
            return [this.contour, ...this.holes];
        }
        getAABB() {
            return (this.aabb ||
                (this.aabb = AABB.forAABBs(this.contour.map((e) => e.getAABB()))));
        }
        pointsToInside3(p, curve, curveT, dir) {
            const eps = 1e-6;
            const normal = this.surface.normalP(p);
            const curveTangent = curve.tangentAt(curveT).times(dir);
            const up = normal.cross(curveTangent);
            const ecd = curve
                .at(curveT)
                .to(curve.at(curveT + dir * eps))
                .dot(up);
            let minValue = Infinity, result, advanced = false;
            for (const edge of this.getAllEdges()) {
                const aEqP = edge.a.like(p), bEqP = edge.b.like(p);
                assert(aEqP == edge.a.like(p));
                assert(bEqP == edge.b.like(p));
                if (!aEqP && !bEqP)
                    continue;
                const edgeTangent = aEqP ? edge.aDir : edge.bDir.negated();
                const angle = curveTangent.angleRelativeNormal(edgeTangent, normal);
                if (eq0(angle)) {
                    if (curve.isColinearTo(edge.curve)) {
                        return PointVsFace.ON_EDGE;
                    }
                    const edgeT = aEqP ? edge.aT : edge.bT;
                    const edgeDir = (aEqP ? 1 : -1) * sign$1(edge.deltaT());
                    const iscd = edge.curve.diff(edgeT, edgeDir * eps).dot(up);
                    //const iscd = edge.curve.at(edgeT).to(curve.at(edgeT + edgeDir * eps)).dot(up)
                    const diff = iscd - ecd;
                    if (diff > 0 && (!advanced || diff < minValue)) {
                        advanced = true;
                        minValue = diff;
                        result = aEqP ? PointVsFace.OUTSIDE : PointVsFace.INSIDE;
                    }
                }
                else if (!advanced) {
                    const angle2 = (angle + TAU) % TAU;
                    if (angle2 < minValue) {
                        minValue = angle2;
                        result = aEqP ? PointVsFace.OUTSIDE : PointVsFace.INSIDE;
                    }
                }
            }
            if (result == undefined)
                throw new Error();
            return result;
        }
        pointsToInside2(p, dir) {
            return this.pointsToInside3(p, L3.anchorDirection(p, dir), 0, 1);
            //const normal = this.surface.normalP(p)
            //let minAngle = Infinity, inOut = false
            //function test(v, b) {
            //	const angle = (dir.angleRelativeNormal(v, normal) + TAU + NLA_PRECISION / 2) % TAU
            //	if (angle <= 2 * NLA_PRECISION) {
            //		return true
            //	}
            //	if (angle < minAngle) {
            //		minAngle = angle
            //		inOut = b
            //	}
            //}
            //for (const edge of this.getAllEdges()) {
            //	assert(edge.a.equals(p) || !edge.a.like(p))
            //	assert(edge.b.equals(p) || !edge.b.like(p))
            //	if (edge.a.equals(p) && test(edge.aDir, false)) return PointVsFace.ON_EDGE
            //	if (edge.b.equals(p) && test(edge.bDir.negated(), true)) return PointVsFace.ON_EDGE
            //}
            //return inOut ? PointVsFace.INSIDE : PointVsFace.OUTSIDE
        }
    }
    class PlaneFace extends Face {
        constructor(p, contour, holes, name, info) {
            assert(p instanceof P3 || p instanceof PlaneSurface);
            super(p instanceof P3 ? new PlaneSurface(p) : p, contour, holes, name, info);
        }
        static forVertices(planeSurface, vs, ...holeVss) {
            const _planeSurface = planeSurface instanceof P3 ? new PlaneSurface(planeSurface) : planeSurface;
            assert(isCCW(vs, _planeSurface.plane.normal1), "isCCW(vs, planeSurface.plane.normal1)");
            const edges = StraightEdge.chain(vs);
            holeVss.forEach((vs) => assert(doubleSignedArea(vs, _planeSurface.plane.normal1) >= 0, "doubleSignedArea(vs, planeSurface.plane.normal1) >= 0"));
            const holes = holeVss.map((hvs) => StraightEdge.chain(hvs));
            return new PlaneFace(planeSurface, edges, holes);
        }
        addToMesh(mesh) {
            const mvl = mesh.vertices.length;
            const normal = this.surface.plane.normal1;
            const vertices = this.contour.flatMap((edge) => edge.getVerticesNo0());
            for (let i = 0; i < vertices.length; i++) {
                mesh.LINES.push(mvl + i, mvl + ((i + 1) % vertices.length));
            }
            const holeStarts = [];
            this.holes.forEach((hole) => {
                holeStarts.push(vertices.length);
                vertices.push(...hole.flatMap((edge) => edge.getVerticesNo0()));
            });
            const triangles = triangulateVertices(normal, vertices, holeStarts).map((index) => index + mvl);
            Array.prototype.push.apply(mesh.vertices, vertices);
            Array.prototype.push.apply(mesh.TRIANGLES, triangles);
            Array.prototype.push.apply(mesh.normals, arrayFromFunction(vertices.length, () => normal));
        }
        intersectsLine(line) {
            assertInst(L3, line);
            const lambda = line.isTWithPlane(this.surface.plane);
            if (!Number.isFinite(lambda)) {
                return NaN;
            }
            const inside = this.containsPoint(line.at(lambda));
            return inside ? lambda : NaN;
        }
        //intersectPlaneFace(face2: PlaneFace,
        //                   thisBrep: BRep,
        //                   face2Brep: BRep,
        //                   faceMap: Map<Face, Edge[]>,
        //                   thisEdgePoints: CustomMap<Edge, { edge: Edge, edgeT: number, p: V3, passEdge?: Edge }[]>,
        //                   otherEdgePoints: CustomMap<Edge, { edge: Edge, edgeT: number, p: V3, passEdge?: Edge }[]>,
        //                   checkedPairs: CustomSet<Pair<Equalable, Equalable>>) {
        //	assertInst(CustomMap, thisEdgePoints, otherEdgePoints)
        //
        //	function hasPair(a: Equalable, b: Equalable) {
        //		return checkedPairs.has(new Pair(a, b))
        //	}
        //	function addPair(a: Equalable, b: Equalable) {
        //		return checkedPairs.add(new Pair(a, b))
        //	}
        //
        //	/**
        //	 * @param newEdge generated segment
        //	 * @param col1 if newEdge is colinear to an edge of this, the edge in question
        //	 * @param col2 same for face2
        //	 */
        //	function handleNewEdge(newEdge: StraightEdge, col1: Edge, col2: Edge) {
        //		if (!col1 && !col2) {
        //			mapPush(faceMap, face, newEdge)
        //			mapPush(faceMap, face2, newEdge.flipped())
        //			return true
        //		}
        //		function handleEdgeInFace(col1, col2, face, face2, thisBrep, face2Brep, coplanarSameIsInside: boolean,
        // has, add) { if (col1 && !col2) { if (hasPair(col1.getCanon(), face2)) return  //add(col1.getCanon(), face2)
        // const face2Plane = face2.surface.plane  // NB: a new edge is inserted even though it may be the same as an old
        // one // however it indicates that it intersects the other volume here, i.e. the old edge cannot // be counted as
        // 'inside' for purposes of reconstitution thisBrep.edgeFaces.get(col1.getCanon()).forEach(faceInfo => { //const
        // dot = snap0(face2Plane.normal1.dot(faceInfo.inside)) //if (dot == 0 ? !coplanarSameIsInside : dot < 0) { const
        // pointsInsideFace = fff(faceInfo, face2.surface) const edgeInside = pointsInsideFace == INSIDE ||
        // !coplanarSameIsInside && pointsInsideFace == COPLANAR_SAME const pushEdge =
        // (faceInfo.edge.aDir.like(newEdge.aDir)) ? newEdge : newEdge.flipped()
        // assert(faceInfo.edge.aDir.like(pushEdge.aDir)) edgeInside && mapPush(faceMap, faceInfo.face, pushEdge) })  const
        // newEdgeInside = face2Plane.normal1.cross(newEdge.aDir) const sVEF1 = splitsVolumeEnclosingFaces(thisBrep,
        // col1.getCanon(), newEdgeInside, face2Plane.normal1) let addNewEdge, addNewEdgeFlipped if (addNewEdge = sVEF1 ==
        // INSIDE || coplanarSameIsInside && sVEF1 == COPLANAR_SAME) { mapPush(faceMap, face2, newEdge) } const sVEF2 =
        // splitsVolumeEnclosingFaces(thisBrep, col1.getCanon(), newEdgeInside.negated(), face2Plane.normal1) if
        // (addNewEdgeFlipped = sVEF2 == INSIDE || coplanarSameIsInside && sVEF2 == COPLANAR_SAME) { mapPush(faceMap,
        // face2, newEdge.flipped()) } if (addNewEdge || addNewEdgeFlipped || sVEF1 == COPLANAR_SAME && sVEF2 == INSIDE ||
        // sVEF2 == COPLANAR_SAME && sVEF1 == INSIDE) { return true } } } const c1 = handleEdgeInFace(col1, col2, face,
        // face2, thisBrep, face2Brep, false, hasPair, addPair) const c2 = handleEdgeInFace(col2, col1, face2, face,
        // face2Brep, thisBrep, true, (a, b) => hasPair(b, a), (a, b) => addPair(b, a)) if (c1 || c2) return true  if (col1
        // && col2) { if (hasPair(col1.getCanon(), col2.getCanon())) return  addPair(col1.getCanon(), col2.getCanon())
        // function handleColinearEdgeFaces(col1, col2, thisBrep, face2Brep, coplanarSameIsInside: boolean, thisEdgePoints,
        // has, add) { // not entirely sure for what i had the dirInsides in? //const aDirNegatedInside =
        // (newEdge.a.like(col2.a) || newEdge.a.like(col2.b)) && splitsVolumeEnclosingCone(face2Brep, newEdge.a,
        // newEdge.aDir.negated()) == INSIDE //const bDirInside = (newEdge.b.like(col2.a) || newEdge.b.like(col2.b)) &&
        // splitsVolumeEnclosingCone(face2Brep, newEdge.b, newEdge.bDir) == INSIDE
        // thisBrep.edgeFaces.get(col1.getCanon()).forEach(faceInfo => { const sVEF = splitsVolumeEnclosingFaces(face2Brep,
        // col2.getCanon(), faceInfo.inside, faceInfo.normalAtCanonA) const edgeInside = sVEF == INSIDE ||
        // coplanarSameIsInside && sVEF == COPLANAR_SAME const pushEdge = (faceInfo.edge.aDir.like(newEdge.aDir)) ? newEdge
        // : newEdge.flipped() edgeInside && mapPush(faceMap, faceInfo.face, pushEdge) }) } handleColinearEdgeFaces(col1,
        // col2, thisBrep, face2Brep, true, thisEdgePoints, hasPair, addPair) handleColinearEdgeFaces(col2, col1,
        // face2Brep, thisBrep, false, otherEdgePoints, (a, b) => hasPair(b, a), (a, b) => addPair(b, a)) } }   // what
        // needs to be generated: new edges on face // points on edges where they are cut by faces so that sub edges will
        // be generated for loops // points on ends of edges where the edge will be an edge in the new volume where it goes
        // from A to B //         you don't want thos to be marked as 'inside', otherwise invalid faces will be added // if
        // a face cuts a corner, nothings needs to be done, as that alone does not limit what adjacent faces will be
        // function handleEndPoint(a: IntersectionPointInfo, b: IntersectionPointInfo, newEdge: Edge) { // ends in the
        // middle of b's face if (a && !b) { if (!a.colinear && a.edgeT != a.edge.aT && a.edgeT != a.edge.bT) {
        // mapPush(thisEdgePoints, a.edge.getCanon(), a) assert(a.edge.isValidT(a.edgeT)) } // else colinear segment ends
        // in middle of other face, do nothing } // ends in the middle of a's face if (b && !a) { if (!b.colinear &&
        // b.edgeT != b.edge.aT && b.edgeT != b.edge.bT) { mapPush(otherEdgePoints, b.edge.getCanon(), b)
        // assert(b.edge.isValidT(b.edgeT)) } // else colinear segment ends in middle of other face, do nothing } if (a &&
        // b) { // if a or b is colinear the correct points will already have been added to the edge by handleNewEdge //
        // segment starts/ends on edge/edge intersection function foo(a, b, face, face2, thisPlane, face2Plane, thisBrep,
        // face2Brep, first, thisEdgePoints) { if (!a.colinear && a.edgeT != a.edge.aT && a.edgeT != a.edge.bT) { if
        // (!hasPair(a.edge.getCanon(), b.edge.getCanon())) { addPair(a.edge.getCanon(), b.edge.getCanon()) // ends on a,
        // on colinear segment b bT != a.edge.bT && // b can be colinear, so edgeT == aT is possible if (a.p.like(b.edge.a)
        // || a.p.like(b.edge.b)) { const corner = a.p.like(b.edge.a) ? b.edge.a : b.edge.b // face2brep corner on edge
        // const sVEC1 = splitsVolumeEnclosingCone(face2Brep, corner, a.edge.aDir) const sVEC2 =
        // splitsVolumeEnclosingCone(face2Brep, corner, a.edge.aDir.negated()) // if either of these return
        // ALONG_EDGE_OR_PLANE, then the breps share a colinear edge  if (INSIDE == sVEC1 || INSIDE == sVEC2) {
        // mapPush(thisEdgePoints, a.edge.getCanon(), a) assert(a.edge.isValidT(a.edgeT)) } } else { // edge / edge center
        // intersection const aEdgeDir = a.edge.tangentAt(a.edgeT) const bEdgeDir = b.edge.tangentAt(b.edgeT) const
        // testVector = aEdgeDir.rejectedFrom(bEdgeDir) assert(!testVector.likeO()) const sVEF1 =
        // splitsVolumeEnclosingFaces(face2Brep, b.edge.getCanon()Vector, thisPlane.normal1) const sVEF2 =
        // splitsVolumeEnclosingFaces(face2Brep, b.edge.getCanon()Vector.negated(), thisPlane.normal1) if (INSIDE ==
        // sVEF1 || INSIDE == sVEF2) { mapPush(thisEdgePoints, a.edge.getCanon(), a) assert(a.edge.isValidT(a.edgeT)) } } }
        // } }  foo(a, b, face, face2, thisPlane, face2Plane, thisBrep, face2Brep, true, thisEdgePoints) foo(b, a, face2,
        // face, face2Plane, thisPlane, face2Brep, thisBrep, false, otherEdgePoints)  } }   assertInst(PlaneFace, face2)
        // const face: PlaneFace = this // get intersection const thisPlane = this.surface.plane, face2Plane =
        // face2.surface.plane if (thisPlane.isParallelToPlane(face2Plane)) { if (thisPlane.like(face2Plane)) { // normal1
        // same and same location in space // addLikeSurfaceFaces(likeSurfaceFaces, this, face2) } return } const isLine =
        // L3.fromPlanes(thisPlane, face2Plane) // get intersections of newCurve with other edges of face and face2 const
        // ps1 = planeFaceEdgeISPsWithPlane(face, isLine, face2Plane) const ps2 = planeFaceEdgeISPsWithPlane(face2, isLine,
        // thisPlane) if (ps1.length == 0 || ps2.length == 0) { // faces to not intersect return }  let col1:
        // IntersectionPointInfo, col2: IntersectionPointInfo let in1 = false, in2 = false let i = 0, j = 0, last let
        // startP, startDir, startT, startA, startB while (i < ps1.length || j < ps2.length) { assert(i <= ps1.length)
        // assert(j <= ps2.length) const a = ps1[i], b = ps2[j] assert(a || b) if (j == ps2.length || i < ps1.length &&
        // lt(a.t, b.t)) { last = a in1 = !in1 a.used = true in1 && (col1 = a.colinear && a) i++ } else if (i == ps1.length
        // || gt(a.t, b.t)) { last = b in2 = !in2 b.used = true in2 && (col2 = b.colinear && b) j++ } else { // TODO: this
        // will break if 3 points on the same t last = a in1 = !in1 in2 = !in2 //if (in1 == in2) { a.used = true b.used =
        // true in1 && (col1 = a.colinear && a) in2 && (col2 = b.colinear && b) //} i++ j++ } if (startP && !(in1 && in2))
        // { // segment end const newEdge = new StraightEdge(isLine, startP, last.p, startT, last.t, undefined, 'genseg' +
        // getGlobalId()) startP = undefined last.used = true if (handleNewEdge(newEdge, col1 && col1.edge, col2 &&
        // col2.edge)) { handleEndPoint(startA || col1, startB || col2, newEdge) handleEndPoint(a && a.used && a || col1, b
        // && b.used && b || col2, newEdge) } } else if (in1 && in2) { // new segment just started startP = last.p startDir
        // = last.insideDir startT = last.t startA = a && a.used && a startB = b && b.used && b } if (!in1 && a && last ==
        // a && a.colinear) { checkedPairs.add(new Pair(a.edge.getCanon(), face2)) } if (!in2 && b && (last == b || b.used)
        // && b.colinear) { checkedPairs.add(new Pair(b.edge.getCanon(), face)) } } }
        withHole(holeEdges) {
            return new PlaneFace(this.surface, this.contour, [holeEdges]);
        }
        pointsToInside(p, dir) {
            return this.containsPoint2(p.plus(dir.times(NLA_PRECISION * 8)));
        }
        edgeISPsWithPlane(isLine, plane2) {
            const face = this;
            assert(face.surface.plane.containsLine(isLine));
            assert(plane2.containsLine(isLine));
            const plane = face.surface.plane;
            const ps = [];
            const loops = [face.contour].concat(face.holes);
            loops.forEach((loop) => {
                const colinearEdges = loop.map((edge) => edge.colinearToLine(isLine) && -sign$1(edge.aDir.dot(isLine.dir1)));
                const isLineOut = isLine.dir1.cross(plane.normal1);
                loop.forEach((edge, edgeIndex, edges) => {
                    const nextEdgeIndex = (edgeIndex + 1) % edges.length, nextEdge = edges[nextEdgeIndex], colinearEdge = colinearEdges[edgeIndex];
                    //console.log(edge.toSource()) {p:V3(2, -2.102, 0),
                    if (colinearEdge) {
                        // edge colinear to intersection line
                        const curveAT = isLine.pointT(edge.a), curveBT = isLine.pointT(edge.b);
                        // add interval for colinear segment
                        ps.push({
                            p: edge.a,
                            insideDir: edge.aDir,
                            t: curveAT,
                            edge: edge,
                            edgeT: edge.aT,
                            colinear: true,
                        }, {
                            p: edge.b,
                            insideDir: edge.bDir.negated(),
                            t: curveBT,
                            edge: edge,
                            edgeT: edge.bT,
                            colinear: true,
                        });
                        // open next interval if necessary
                        const nextSide = colinearEdges[nextEdgeIndex] ||
                            dotCurve2(nextEdge.curve, nextEdge.aT, isLineOut, nextEdge.deltaTSign());
                        if (colinearEdge * nextSide < 0) {
                            // side changes
                            ps.push({
                                p: nextEdge.a,
                                insideDir: edge.bDir,
                                t: curveBT,
                                edge: nextEdge,
                                edgeT: nextEdge.aT,
                                colinear: false,
                            });
                        }
                    }
                    else {
                        // not necessarily a straight edge, so multiple intersections are possible
                        const edgeTs = edge.edgeISTsWithPlane(plane2);
                        assert(edgeTs.every((t) => plane2.containsPoint(edge.curve.at(t))), edgeTs);
                        for (const edgeT of edgeTs) {
                            if (edgeT == edge.bT) {
                                // endpoint lies on intersection line
                                const side = dotCurve2(edge.curve, edge.bT, isLineOut, -edge.deltaTSign());
                                const nextSide = colinearEdges[nextEdgeIndex] ||
                                    dotCurve2(nextEdge.curve, nextEdge.aT, isLineOut, nextEdge.deltaTSign());
                                if (side * nextSide < 0) {
                                    // next segment is not colinear and ends on different side
                                    ps.push({
                                        p: edge.b,
                                        insideDir: plane2.normal1.negated(),
                                        t: isLine.pointT(edge.b),
                                        edge: edge,
                                        edgeT: edge.bT,
                                        colinear: false,
                                    });
                                }
                            }
                            else if (edgeT != edge.aT) {
                                // edge crosses intersection line, neither starts nor ends on it
                                const p = edge.curve.at(edgeT);
                                assert(plane2.containsPoint(p), edge.toString(), p, edgeT, plane2.distanceToPoint(p));
                                assert(isLine.containsPoint(p), edge.toString(), p, edgeT, isLine.distanceToPoint(p));
                                const insideDir = plane2.normal1.negated();
                                ps.push({
                                    p: p,
                                    insideDir: insideDir,
                                    t: isLine.pointT(p),
                                    edge: edge,
                                    edgeT: edgeT,
                                    colinear: false,
                                });
                            }
                        }
                    }
                });
            });
            // duplicate 't's are ok, as sometimes a segment needs to stop and start again
            // should be sorted so that back facing ones are first
            ps.sort((a, b) => a.t - b.t || a.insideDir.dot(isLine.dir1));
            return ps;
        }
    }
    class RotationFace extends Face {
        constructor(rot, contour, holes, name, info) {
            super(rot, contour, holes, name, info);
        }
        static loopDoesNotCrossPlane(loop, seamPlane) {
            let side = 0;
            // returns true if d is on the other side as previous calls
            function checkSide(d) {
                if (side == 0) {
                    side = d;
                }
                else {
                    return !side || side * d < 0;
                }
                return false;
            }
            for (const edge of loop) {
                const ts = edge.edgeISTsWithPlane(seamPlane);
                if (ts.length == 0) {
                    if (!(edge.curve instanceof L3) &&
                        checkSide(seamPlane.distanceToPointSigned(edge.a)))
                        return false;
                }
                else {
                    for (const t of ts) {
                        // TODO: this part probably should be in a separate function
                        // check 'backwards' only if if aT != t
                        if (edge.aT != t) {
                            if (checkSide(dotCurve2(edge.curve, t, seamPlane.normal1, -edge.deltaTSign())))
                                return false;
                        }
                        if (edge.bT != t) {
                            if (checkSide(dotCurve2(edge.curve, t, seamPlane.normal1, edge.deltaTSign())))
                                return false;
                        }
                    }
                }
            }
            return true;
        }
        getAABB() {
            if (this.aabb)
                return this.aabb;
            this.aabb = AABB.forAABBs(this.contour.map((e) => e.getAABB()));
            this.aabb.addPoints(this.surface.getExtremePoints().filter((p) => this.containsPoint(p)));
            return this.aabb;
        }
        unrollLoop(edgeLoop) {
            const vs = [];
            const uvP = this.surface.uvPFunc();
            const verticesNo0s = edgeLoop.map((edge) => edge.getVerticesNo0());
            const startEdgeIndex = verticesNo0s.findIndex((edgeVertices) => !eq(uvP(edgeVertices[0]).x, Math.PI));
            assert(-1 != startEdgeIndex);
            // console.log(startEdgeIndex)
            for (let i = 0; i < edgeLoop.length; i++) {
                const edgeIndex = (i + startEdgeIndex) % edgeLoop.length;
                for (let j = 0; j < verticesNo0s[edgeIndex].length; j++) {
                    const p = verticesNo0s[edgeIndex][j];
                    const localP = uvP(p);
                    // console.log(hint, p.sce, localP.sce)
                    vs.push(localP);
                }
            }
            edgeLoop.forEach((edge) => {
                edge.getVerticesNo0().forEach((p) => {
                    vs.push(uvP(p));
                });
            });
            console.log("vs\n", vs.join("\n"), vs.length);
            return vs;
        }
        /**
         * f1 cos t + f2 sin t
         * tan(phi) = sin / cos
         *          = (f1x cos t + f2x sin t) / (f1y cos t + f2y sin t)
         *
         *          = (-f1x sin t + f2x cos t) / (-f1y sin t + f2y cos t)
         */
        unrollEllipsoidLoops(edgeLoops) {
            const verticesUV = [], vertices = [], loopStarts = [];
            const ellipsoid = this.surface;
            const ptpf = ellipsoid.uvPFunc();
            const testDegeneratePoint = ellipsoid instanceof EllipsoidSurface
                ? (nextStart) => nextStart.like(ellipsoid.center.plus(ellipsoid.f3)) ||
                    nextStart.like(ellipsoid.center.minus(ellipsoid.f3))
                : (nextStart) => nextStart.like(this.surface.center);
            for (const edgeLoop of edgeLoops) {
                loopStarts.push(verticesUV.length);
                // console.log(startEdgeIndex)
                for (let i = 0; i < edgeLoop.length; i++) {
                    const ipp = (i + 1) % edgeLoop.length;
                    const verticesNo0 = edgeLoop[i].getVerticesNo0();
                    vertices.push(...verticesNo0);
                    verticesUV.push(...verticesNo0.map((v) => ptpf(v)));
                    const nextStart = edgeLoop[ipp].a;
                    //console.log('BLAH', nextStart.str, ellipsoid.center.plus(ellipsoid.f3).str)
                    if (testDegeneratePoint(nextStart)) {
                        const bDirLC = ellipsoid.matrixInverse.transformVector(edgeLoop[i].bDir), aDirLC = ellipsoid.matrixInverse.transformVector(edgeLoop[ipp].aDir);
                        const inAngle = Math.atan2(-bDirLC.y, -bDirLC.x);
                        const outAngle = Math.atan2(aDirLC.y, aDirLC.x);
                        const stLast = verticesUV.pop();
                        verticesUV.push(new V3(inAngle, stLast.y, 0), new V3(outAngle, stLast.y, 0));
                        vertices.push(getLast(vertices));
                    }
                    verticesUV.forEach(({ u, v }) => {
                        assert(isFinite(u));
                        assert(isFinite(v));
                    });
                }
            }
            let normals;
            if (this.surface instanceof EllipsoidSurface) {
                normals = vertices.map((v) => ellipsoid.normalP(v));
            }
            else {
                const normalUV = ellipsoid.normalUVFunc();
                normals = verticesUV.map(({ u, v }) => normalUV(u, v));
            }
            assert(vertices.length == vertices.length);
            //console.log(verticesUV.map(v => v.str).join('\n'))
            return {
                verticesUV: verticesUV,
                vertices: vertices,
                normals: normals,
                loopStarts: loopStarts,
            };
        }
        unrollCylinderLoops(loops) {
            const vertexLoops = loops.map((loop) => loop.flatMap((edge) => edge.getVerticesNo0()));
            const surface = this.surface;
            const vertices = concatenated(vertexLoops);
            // this.unrollLoop(loop).map(v => new V3(v.x / uStep, v.y / vStep, 0)))
            const loopStarts = vertexLoops.reduce((arr, loop) => (arr.push(getLast(arr) + loop.length), arr), [0]);
            const uvPFunc = surface.uvPFunc();
            const verticesUV = vertices.map((v) => uvPFunc(v));
            const uvN = surface.normalUVFunc();
            const normals = verticesUV.map(({ u, v }) => uvN(u, v));
            return {
                verticesUV: verticesUV,
                vertices: vertices,
                normals: normals,
                loopStarts: loopStarts,
            };
        }
        /**
         * at(s, t) = new V3(s cos t, s sin t, t + )
         *
         * x = 0
         *
         * s cos t = 0
         * ==> s = 0 || cos t = 0
         * ==> L3.Z || V3(0, +-s, k * 2 pi)
         *
         * x = c
         * s cos t = c
         * ==> V3(c, c sin t / cos t = c tan t, t)
         * ==> V3(c, c t, arctan t)
         *
         *
         * x . n = w
         *      s cos t nx + s sin t ny + t nz = w
         *      s = (w - t nz) / (cos t nx + sub t ny)
         * ==> V3(
         *          cos t (w - t nz) / (cos t nx + sin t ny)
         *          sin t (w - t nz) / (cos t nx + sin t ny)
         *          t)
         *
         *  ==> V3(
         *          (w - z arctan t) / (x + t y)
         *          (w - z arctan t) / (y + x / t)
         *          arctan t)
         *
         *
         *
         */
        addToMesh(mesh, uStep = this.surface.uStep, vStep = this.surface.vStep) {
            assertf(() => uStep > 0 && vStep > 0, uStep, vStep, "Surface: " + this.surface);
            const triangles = [];
            const pMN = (m, n) => this.surface.pUVFunc()(m * uStep, n * vStep);
            const normalMN = (m, n) => this.surface.normalUVFunc()(m * uStep, n * vStep);
            const loops = this.getLoops();
            const { vertices, verticesUV, normals, loopStarts } = this.surface instanceof EllipsoidSurface ||
                this.surface instanceof ConicSurface
                ? this.unrollEllipsoidLoops(loops)
                : this.unrollCylinderLoops(loops);
            loopStarts.push(vertices.length);
            const verticesMN = verticesUV.map(({ u, v }) => new V3(u / uStep, v / vStep, 0));
            for (let vertexLoopIndex = 0; vertexLoopIndex < loops.length; vertexLoopIndex++) {
                const vertexLoopStart = loopStarts[vertexLoopIndex];
                const vertexLoopLength = loopStarts[vertexLoopIndex + 1] - vertexLoopStart;
                const base = mesh.vertices.length + loopStarts[vertexLoopIndex];
                for (let i = 0; i < vertexLoopLength; i++) {
                    mesh.LINES.push(base + i, base + ((i + 1) % vertexLoopLength));
                }
            }
            disableConsole();
            let minM = Infinity, maxM = -Infinity, minN = Infinity, maxN = -Infinity;
            //console.log('surface', this.surface.str)
            //console.log(verticesMN)
            //drPs.push(...verticesMN.map((v, i) => ({p: vertices[i], text: `${i} uv: ${v.toString(x => round10(x,
            // -4))}`})))
            verticesMN.forEach(([m, n]) => {
                assert(isFinite(m));
                assert(isFinite(n));
                minM = min$3(minM, m);
                maxM = max$3(maxM, m);
                minN = min$3(minN, n);
                maxN = max$3(maxN, n);
            });
            if (ParametricSurface.is(this.surface)) ;
            const mOffset = floor$1(minM + NLA_PRECISION), nOffset = floor$1(minN + NLA_PRECISION);
            const mRes = ceil(maxM - NLA_PRECISION) - mOffset, nRes = ceil(maxN - NLA_PRECISION) - nOffset;
            console.log(uStep, vStep, mRes, nRes);
            if (mRes == 1 && nRes == 1) {
                // triangulate this face as if it were a plane
                const polyTriangles = triangulateVertices(V3.Z, verticesMN, loopStarts.slice(1, 1 + this.holes.length));
                triangles.push(...polyTriangles);
            }
            else {
                const partss = new Array(mRes * nRes);
                function fixUpPart(part, baseM, baseN) {
                    assert(baseM < mRes && baseN < nRes, `${baseM}, ${baseN}, ${mRes}, ${nRes}`);
                    console.log("complete part", part, baseM, baseN);
                    //console.trace()
                    assert(part.length);
                    const cellM = baseM + mOffset, cellN = baseN + nOffset;
                    for (const index of part) {
                        assert(le(cellM, verticesMN[index].x) &&
                            le(verticesMN[index].x, cellM + 1), `${index} ${verticesMN[index].str} ${cellM} ${cellM}`);
                        assert(le(cellN, verticesMN[index].y) &&
                            le(verticesMN[index].y, cellN + 1));
                    }
                    const pos = baseN * mRes + baseM;
                    (partss[pos] || (partss[pos] = [])).push(part);
                    //const outline = partss[pos] || (partss[pos] = [minM + baseM * uStep, minN + baseN * vStep, minM +
                    // (baseM + 1) * uStep, minN + (baseN + 1) * vStep])
                }
                // 'some' instead of forEach so we can return out of the entire function if this.edges crosses no borders
                // and
                for (let vertexLoopIndex = 0; vertexLoopIndex < loops.length; vertexLoopIndex++) {
                    let part = undefined;
                    let firstPart = undefined;
                    let firstPartBaseM = -1;
                    let firstPartBaseN = -1;
                    let lastBaseM = -1, lastBaseN = -1;
                    let partCount = 0;
                    const vertexLoopStart = loopStarts[vertexLoopIndex];
                    const vertexLoopLength = loopStarts[vertexLoopIndex + 1] - vertexLoopStart;
                    for (let vlvi = 0; vlvi < vertexLoopLength; vlvi++) {
                        const vx0index = vertexLoopStart + vlvi, vx0 = verticesMN[vx0index];
                        const vx1index = vertexLoopStart + ((vlvi + 1) % vertexLoopLength), vx1 = verticesMN[vx1index];
                        //console.log('dask', vx0index, vx1index)
                        const vx01 = vx0.to(vx1);
                        assert(vx0);
                        const di = vx01.x, dj = vx01.y;
                        let vxIndex = vx0index, vx = vx0, currentT = 0;
                        let whileLimit = 400;
                        while (--whileLimit) {
                            // points which are on a grid line are assigned to the cell into which they are going (+
                            // NLA_PRECISION * sign(di)) if they are parallel to the gridline (eq0(di)), they belong the
                            // the cell for which they are a CCW boundary
                            const baseM = floor$1(vx.u + (!eq0(di) ? sign$1(di) : -sign$1(dj)) * NLA_PRECISION) -
                                mOffset;
                            const baseN = floor$1(vx.v + (!eq0(dj) ? sign$1(dj) : sign$1(di)) * NLA_PRECISION) -
                                nOffset;
                            assert(baseM < mRes && baseN < nRes, `${baseM}, ${baseN}, ${mRes}, ${nRes}`);
                            // figure out the next intersection with a gridline:
                            // iNext is the positive horizontal distance to the next vertical gridline
                            const iNext = ceil(sign$1(di) * vx.u + NLA_PRECISION) - sign$1(di) * vx.u;
                            const jNext = ceil(sign$1(dj) * vx.v + NLA_PRECISION) - sign$1(dj) * vx.v;
                            const iNextT = currentT + iNext / abs$2(di);
                            const jNextT = currentT + jNext / abs$2(dj);
                            //console.log(vxIndex, vx.str, 'vij', vx.u, vx.v, 'd', di, dj, 'ijNext', iNext, jNext, 'nextT',
                            // iNextT, jNextT)
                            if (lastBaseM != baseM || lastBaseN != baseN) {
                                if (part) {
                                    if (!firstPart) {
                                        firstPart = part;
                                        firstPartBaseM = lastBaseM;
                                        firstPartBaseN = lastBaseN;
                                    }
                                    else {
                                        partCount++;
                                        fixUpPart(part, lastBaseM, lastBaseN);
                                    }
                                }
                                part = [vxIndex];
                            }
                            lastBaseM = baseM;
                            lastBaseN = baseN;
                            currentT = min$3(iNextT, jNextT);
                            if (ge(currentT, 1)) {
                                //console.log('breaking ', vx1index)
                                part.push(vx1index);
                                break;
                            }
                            else {
                                const nextPoint = vx0.lerp(vx1, currentT);
                                const nextPointIndex = addVertex(nextPoint.x, nextPoint.y);
                                //console.log('pushing ', nextPointIndex)
                                part.push(nextPointIndex);
                                vx = nextPoint;
                                vxIndex = nextPointIndex;
                            }
                        }
                        assert(whileLimit, "whileLimit");
                    }
                    if (0 == partCount) {
                        // complete loop
                        assert(false, "found a hole, try increasing resolution");
                    }
                    // at this point, the firstPart hasn't been added, and the last part also hasn't been added
                    // either they belong to the same cell, or not
                    if (firstPartBaseM == lastBaseM && firstPartBaseN == lastBaseN) {
                        part.pop();
                        fixUpPart(part.concat(firstPart), lastBaseM, lastBaseN);
                    }
                    else {
                        fixUpPart(firstPart, firstPartBaseM, firstPartBaseN);
                        fixUpPart(part, lastBaseM, lastBaseN);
                    }
                    console.log("firstPart", firstPart);
                }
                console.log("calculated parts", partss);
                const fieldVertexIndices = new Array((mRes + 1) * (nRes + 1));
                function addVertex(m, n) {
                    verticesMN.push(new V3(m, n, 0));
                    normals.push(normalMN(m, n));
                    return vertices.push(pMN(m, n)) - 1;
                }
                function getGridVertexIndex(i, j) {
                    const index = j * (mRes + 1) + i;
                    return (fieldVertexIndices[index] ||
                        (fieldVertexIndices[index] = addVertex(i + mOffset, j + nOffset)));
                }
                for (let col = 0; col < mRes; col++) {
                    let inside = false;
                    for (let row = 0; row < nRes; row++) {
                        const pos = row * mRes + col;
                        const fieldU = mOffset + col, fieldV = nOffset + row;
                        const parts = partss[pos];
                        if (!parts) {
                            if (inside) {
                                pushQuad(triangles, false, getGridVertexIndex(col, row), getGridVertexIndex(col + 1, row), getGridVertexIndex(col, row + 1), getGridVertexIndex(col + 1, row + 1));
                            }
                        }
                        else {
                            // assemble the field with segments in in
                            function opos(index) {
                                const p = verticesMN[index], u1 = p.x - fieldU, v1 = p.y - fieldV;
                                assert(-NLA_PRECISION < u1 &&
                                    u1 < 1 + NLA_PRECISION &&
                                    -NLA_PRECISION < v1 &&
                                    v1 < 1 + NLA_PRECISION, "oob u1 v1 " +
                                    u1 +
                                    " " +
                                    v1 +
                                    " " +
                                    index +
                                    " " +
                                    p.str +
                                    "IF THIS FAILS check canonSeamU is correct");
                                return v1 < u1 ? u1 + v1 : 4 - u1 - v1;
                            }
                            while (parts.length) {
                                const outline = [];
                                const startPart = parts[0];
                                assert(startPart.length > 0);
                                let currentPart = startPart;
                                do {
                                    outline.push(...currentPart);
                                    const currentPartEndOpos = opos(getLast(currentPart));
                                    const nextPartIndex = indexWithMax(parts, (part) => -mod(opos(part[0]) - currentPartEndOpos, 4));
                                    const nextPart = bagRemoveIndex(parts, nextPartIndex);
                                    let currentOpos = currentPartEndOpos;
                                    const nextPartStartOpos = opos(nextPart[0]) > currentOpos
                                        ? opos(nextPart[0])
                                        : opos(nextPart[0]) + 4;
                                    let nextOpos = ceil(currentOpos + NLA_PRECISION);
                                    let flipping = eq0(((currentOpos + NLA_PRECISION) % 1) - NLA_PRECISION);
                                    //inside = inside != (!eq0(currentOpos % 1) && currentOpos % 2 < 1)
                                    while (lt(nextOpos, nextPartStartOpos)) {
                                        switch (nextOpos % 4) {
                                            case 0:
                                                outline.push(getGridVertexIndex(col, row));
                                                break;
                                            case 1:
                                                inside = inside != flipping;
                                                outline.push(getGridVertexIndex(col + 1, row));
                                                break;
                                            case 2:
                                                outline.push(getGridVertexIndex(col + 1, row + 1));
                                                break;
                                            case 3:
                                                inside = inside != flipping;
                                                outline.push(getGridVertexIndex(col, row + 1));
                                                break;
                                        }
                                        flipping = true;
                                        nextOpos++;
                                    }
                                    // if the next loop would have completed a top or bottom segment
                                    inside =
                                        inside !=
                                            (flipping &&
                                                nextOpos % 2 == 1 &&
                                                eq(nextOpos, nextPartStartOpos));
                                    currentOpos = nextOpos;
                                    currentPart = nextPart;
                                } while (currentPart != startPart);
                                // triangulate outline
                                if (outline.length == 3) {
                                    // its just a triangle
                                    triangles.push(...outline);
                                }
                                else {
                                    const polyTriangles = triangulateVertices(V3.Z, outline.map((i) => verticesMN[i]), []).map((i) => outline[i]);
                                    triangles.push(...polyTriangles);
                                }
                                //console.log('outline', col, row, outline)
                            }
                        }
                    }
                }
            }
            //console.log('trinagle', triangles.max(), vertices.length, triangles.length, triangles.toSource(),
            // triangles.map(col => vertices[col].$).toSource() ) assert(normals.every(n => n.hasLength(1)), normals.find(n
            // => !n.hasLength(1)).length() +' '+normals.findIndex(n => !n.hasLength(1)))
            Array.prototype.push.apply(mesh.TRIANGLES, triangles.map((index) => index + mesh.vertices.length));
            Array.prototype.push.apply(mesh.vertices, vertices);
            Array.prototype.push.apply(mesh.normals, normals);
            //this.addEdgeLines(mesh)
            enableConsole();
        }
        addToMesh2(mesh) {
            const zSplit = 8;
            const ribs = [];
            let minZ = Infinity, maxZ = -Infinity;
            //let cmp = (a, b) => a.value - b.value
            const f = this.surface.pUVFunc();
            const normalF = this.surface.normalUVFunc();
            const vertexLoops = this.holes
                .concat([this.contour])
                .map((loop) => this.unrollLoop(loop));
            vertexLoops.forEach((vertexLoop) => {
                vertexLoop.forEach(({ x: d, y: z }) => {
                    const index0 = binaryIndexOf(ribs, d, (a, b) => snap(a.value - b, 0));
                    if (index0 < 0) {
                        ribs.splice(-index0 - 1, 0, { value: d, left: [], right: [] });
                    }
                    minZ = min$3(minZ, z);
                    maxZ = max$3(maxZ, z);
                });
            });
            console.log("zzzs", minZ, maxZ, vertexLoops[0].toSource().replace(/\), /g, ",\n"));
            const correction = 1;
            vertexLoops.forEach((vertexLoop) => {
                vertexLoop.forEach((v0, i, vs) => {
                    let v1 = vs[(i + 1) % vs.length], dDiff = v1.x - v0.x;
                    //console.log(v0.sce, v1.sce)
                    if (eq0(dDiff)) {
                        return;
                    }
                    if (dDiff < 0) {
                        [v0, v1] = [v1, v0];
                        dDiff = -dDiff;
                    }
                    const index0 = binaryIndexOf(ribs, v0.x, (a, b) => snap(a.value - b, 0));
                    const index1 = binaryIndexOf(ribs, v1.x, (a, b) => snap(a.value - b, 0));
                    binaryInsert(ribs[index0].right, v0.y);
                    for (let j = (index0 + correction) % ribs.length; j != index1; j = (j + correction) % ribs.length) {
                        const x = ribs[j].value;
                        const part = (x - v0.x) / dDiff;
                        const interpolated = v1.y * part + v0.y * (1 - part);
                        binaryInsert(ribs[j].left, interpolated);
                        binaryInsert(ribs[j].right, interpolated);
                    }
                    binaryInsert(ribs[index1].left, v1.y);
                    // console.log(ribs.map(r=>r.toSource()).join('\n'))
                });
            });
            const vertices = [], triangles0 = [], normals = [];
            for (let i = 0; i < ribs.length; i++) {
                const ribLeft = ribs[i], ribRight = ribs[(i + 1) % ribs.length];
                assert(ribLeft.right.length == ribRight.left.length);
                for (let j = 0; j < ribLeft.right.length; j++) {
                    vertices.push(f(ribLeft.value, ribLeft.right[j]), f(ribRight.value, ribRight.left[j]));
                    normals.push(normalF(ribLeft.value, ribLeft.right[j]), normalF(ribRight.value, ribRight.left[j]));
                }
            }
            //console.log(ribs.map(r=>r.toSource()).join('\n'))
            const vss = vertices.length, detailVerticesStart = vss;
            const zInterval = maxZ - minZ, zStep = zInterval / zSplit;
            const detailZs = arrayFromFunction(zSplit - 1, (i) => minZ + (1 + i) * zStep);
            console.log("detailsZs", detailZs);
            for (let i = 0; i < ribs.length; i++) {
                const d = ribs[i].value;
                for (let j = 0; j < detailZs.length; j++) {
                    vertices.push(f(d, detailZs[j]));
                    normals.push(normalF(d, detailZs[j]));
                }
            }
            // console.log('detailVerticesStart', detailVerticesStart, 'vl', vertices.length, vertices.length -
            // detailVerticesStart, ribs.length) finally, fill in the ribs
            let vsStart = 0;
            const flipped2 = true;
            //for (var i = 0; i < 1; i++) {
            const end =  ribs.length - 1;
            for (let i = 0; i < end; i++) {
                const ipp = (i + 1) % ribs.length;
                let inside = false, colPos = 0;
                const ribLeft = ribs[i], ribRight = ribs[(i + 1) % ribs.length];
                for (let j = 0; j < detailZs.length + 1; j++) {
                    const detailZ = detailZs[j] || 100000;
                    if (!inside) {
                        if (ribLeft.right[colPos] < detailZ &&
                            ribRight.left[colPos] < detailZ) {
                            if (ribLeft.right[colPos + 1] < detailZ ||
                                ribRight.left[colPos + 1] < detailZ) {
                                pushQuad(triangles0, flipped2, vsStart + colPos * 2, vsStart + (colPos + 1) * 2, vsStart + colPos * 2 + 1, vsStart + (colPos + 1) * 2 + 1);
                                colPos += 2;
                                if (ribLeft.right[colPos] < detailZ ||
                                    ribRight.left[colPos] < detailZ) {
                                    j--;
                                }
                            }
                            else {
                                pushQuad(triangles0, flipped2, vsStart + colPos * 2, vsStart + colPos * 2 + 1, detailVerticesStart + i * detailZs.length + j, detailVerticesStart + ipp * detailZs.length + j);
                                inside = true;
                                colPos++;
                            }
                        }
                    }
                    else {
                        if (ribLeft.right[colPos] < detailZ ||
                            ribRight.left[colPos] < detailZ) {
                            pushQuad(triangles0, flipped2, detailVerticesStart + i * detailZs.length + j - 1, detailVerticesStart + ipp * detailZs.length + j - 1, vsStart + colPos * 2, vsStart + colPos * 2 + 1);
                            inside = false;
                            colPos++;
                            if (ribLeft.right[colPos] < detailZ ||
                                ribRight.left[colPos] < detailZ) {
                                j--;
                            }
                        }
                        else {
                            pushQuad(triangles0, flipped2, detailVerticesStart + i * detailZs.length + j, detailVerticesStart + i * detailZs.length + j - 1, detailVerticesStart + ipp * detailZs.length + j, detailVerticesStart + ipp * detailZs.length + j - 1);
                        }
                    }
                }
                vsStart += ribLeft.right.length * 2;
            }
            //console.log('trinagle', triangles0.max(), vertices.length, triangles0.length, triangles0.toSource(),
            // triangles0.map(i => vertices[i].$).toSource() )
            const triangles = triangles0.map((index) => index + mesh.vertices.length);
            //assert(normals.every(n => n.hasLength(1)), normals.find(n => !n.hasLength(1)).length() +'
            // '+normals.findIndex(n => !n.hasLength(1)))
            Array.prototype.push.apply(mesh.vertices, vertices);
            Array.prototype.push.apply(mesh.TRIANGLES, triangles);
            Array.prototype.push.apply(mesh.normals, normals);
            //this.addEdgeLines(mesh)
        }
    }

    var earcut_1 = earcut;
    var _default = earcut;

    function earcut(data, holeIndices, dim) {

        dim = dim || 2;

        var hasHoles = holeIndices && holeIndices.length,
            outerLen = hasHoles ? holeIndices[0] * dim : data.length,
            outerNode = linkedList(data, 0, outerLen, dim, true),
            triangles = [];

        if (!outerNode || outerNode.next === outerNode.prev) return triangles;

        var minX, minY, maxX, maxY, x, y, invSize;

        if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);

        // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
        if (data.length > 80 * dim) {
            minX = maxX = data[0];
            minY = maxY = data[1];

            for (var i = dim; i < outerLen; i += dim) {
                x = data[i];
                y = data[i + 1];
                if (x < minX) minX = x;
                if (y < minY) minY = y;
                if (x > maxX) maxX = x;
                if (y > maxY) maxY = y;
            }

            // minX, minY and invSize are later used to transform coords into integers for z-order calculation
            invSize = Math.max(maxX - minX, maxY - minY);
            invSize = invSize !== 0 ? 1 / invSize : 0;
        }

        earcutLinked(outerNode, triangles, dim, minX, minY, invSize);

        return triangles;
    }

    // create a circular doubly linked list from polygon points in the specified winding order
    function linkedList(data, start, end, dim, clockwise) {
        var i, last;

        if (clockwise === (signedArea(data, start, end, dim) > 0)) {
            for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
        } else {
            for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
        }

        if (last && equals$2(last, last.next)) {
            removeNode(last);
            last = last.next;
        }

        return last;
    }

    // eliminate colinear or duplicate points
    function filterPoints(start, end) {
        if (!start) return start;
        if (!end) end = start;

        var p = start,
            again;
        do {
            again = false;

            if (!p.steiner && (equals$2(p, p.next) || area(p.prev, p, p.next) === 0)) {
                removeNode(p);
                p = end = p.prev;
                if (p === p.next) break;
                again = true;

            } else {
                p = p.next;
            }
        } while (again || p !== end);

        return end;
    }

    // main ear slicing loop which triangulates a polygon (given as a linked list)
    function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
        if (!ear) return;

        // interlink polygon nodes in z-order
        if (!pass && invSize) indexCurve(ear, minX, minY, invSize);

        var stop = ear,
            prev, next;

        // iterate through ears, slicing them one by one
        while (ear.prev !== ear.next) {
            prev = ear.prev;
            next = ear.next;

            if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
                // cut off the triangle
                triangles.push(prev.i / dim);
                triangles.push(ear.i / dim);
                triangles.push(next.i / dim);

                removeNode(ear);

                // skipping the next vertex leads to less sliver triangles
                ear = next.next;
                stop = next.next;

                continue;
            }

            ear = next;

            // if we looped through the whole remaining polygon and can't find any more ears
            if (ear === stop) {
                // try filtering points and slicing again
                if (!pass) {
                    earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);

                // if this didn't work, try curing all small self-intersections locally
                } else if (pass === 1) {
                    ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
                    earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);

                // as a last resort, try splitting the remaining polygon into two
                } else if (pass === 2) {
                    splitEarcut(ear, triangles, dim, minX, minY, invSize);
                }

                break;
            }
        }
    }

    // check whether a polygon node forms a valid ear with adjacent nodes
    function isEar(ear) {
        var a = ear.prev,
            b = ear,
            c = ear.next;

        if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

        // now make sure we don't have other points inside the potential ear
        var p = ear.next.next;

        while (p !== ear.prev) {
            if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
                area(p.prev, p, p.next) >= 0) return false;
            p = p.next;
        }

        return true;
    }

    function isEarHashed(ear, minX, minY, invSize) {
        var a = ear.prev,
            b = ear,
            c = ear.next;

        if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

        // triangle bbox; min & max are calculated like this for speed
        var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),
            minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),
            maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),
            maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);

        // z-order range for the current triangle bbox;
        var minZ = zOrder(minTX, minTY, minX, minY, invSize),
            maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);

        var p = ear.prevZ,
            n = ear.nextZ;

        // look for points inside the triangle in both directions
        while (p && p.z >= minZ && n && n.z <= maxZ) {
            if (p !== ear.prev && p !== ear.next &&
                pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
                area(p.prev, p, p.next) >= 0) return false;
            p = p.prevZ;

            if (n !== ear.prev && n !== ear.next &&
                pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&
                area(n.prev, n, n.next) >= 0) return false;
            n = n.nextZ;
        }

        // look for remaining points in decreasing z-order
        while (p && p.z >= minZ) {
            if (p !== ear.prev && p !== ear.next &&
                pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
                area(p.prev, p, p.next) >= 0) return false;
            p = p.prevZ;
        }

        // look for remaining points in increasing z-order
        while (n && n.z <= maxZ) {
            if (n !== ear.prev && n !== ear.next &&
                pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&
                area(n.prev, n, n.next) >= 0) return false;
            n = n.nextZ;
        }

        return true;
    }

    // go through all polygon nodes and cure small local self-intersections
    function cureLocalIntersections(start, triangles, dim) {
        var p = start;
        do {
            var a = p.prev,
                b = p.next.next;

            if (!equals$2(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {

                triangles.push(a.i / dim);
                triangles.push(p.i / dim);
                triangles.push(b.i / dim);

                // remove two nodes involved
                removeNode(p);
                removeNode(p.next);

                p = start = b;
            }
            p = p.next;
        } while (p !== start);

        return filterPoints(p);
    }

    // try splitting polygon into two and triangulate them independently
    function splitEarcut(start, triangles, dim, minX, minY, invSize) {
        // look for a valid diagonal that divides the polygon into two
        var a = start;
        do {
            var b = a.next.next;
            while (b !== a.prev) {
                if (a.i !== b.i && isValidDiagonal(a, b)) {
                    // split the polygon in two by the diagonal
                    var c = splitPolygon(a, b);

                    // filter colinear points around the cuts
                    a = filterPoints(a, a.next);
                    c = filterPoints(c, c.next);

                    // run earcut on each half
                    earcutLinked(a, triangles, dim, minX, minY, invSize);
                    earcutLinked(c, triangles, dim, minX, minY, invSize);
                    return;
                }
                b = b.next;
            }
            a = a.next;
        } while (a !== start);
    }

    // link every hole into the outer loop, producing a single-ring polygon without holes
    function eliminateHoles(data, holeIndices, outerNode, dim) {
        var queue = [],
            i, len, start, end, list;

        for (i = 0, len = holeIndices.length; i < len; i++) {
            start = holeIndices[i] * dim;
            end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
            list = linkedList(data, start, end, dim, false);
            if (list === list.next) list.steiner = true;
            queue.push(getLeftmost(list));
        }

        queue.sort(compareX);

        // process holes from left to right
        for (i = 0; i < queue.length; i++) {
            eliminateHole(queue[i], outerNode);
            outerNode = filterPoints(outerNode, outerNode.next);
        }

        return outerNode;
    }

    function compareX(a, b) {
        return a.x - b.x;
    }

    // find a bridge between vertices that connects hole with an outer ring and and link it
    function eliminateHole(hole, outerNode) {
        outerNode = findHoleBridge(hole, outerNode);
        if (outerNode) {
            var b = splitPolygon(outerNode, hole);

            // filter collinear points around the cuts
            filterPoints(outerNode, outerNode.next);
            filterPoints(b, b.next);
        }
    }

    // David Eberly's algorithm for finding a bridge between hole and outer polygon
    function findHoleBridge(hole, outerNode) {
        var p = outerNode,
            hx = hole.x,
            hy = hole.y,
            qx = -Infinity,
            m;

        // find a segment intersected by a ray from the hole's leftmost point to the left;
        // segment's endpoint with lesser x will be potential connection point
        do {
            if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
                var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
                if (x <= hx && x > qx) {
                    qx = x;
                    if (x === hx) {
                        if (hy === p.y) return p;
                        if (hy === p.next.y) return p.next;
                    }
                    m = p.x < p.next.x ? p : p.next;
                }
            }
            p = p.next;
        } while (p !== outerNode);

        if (!m) return null;

        if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint

        // look for points inside the triangle of hole point, segment intersection and endpoint;
        // if there are no points found, we have a valid connection;
        // otherwise choose the point of the minimum angle with the ray as connection point

        var stop = m,
            mx = m.x,
            my = m.y,
            tanMin = Infinity,
            tan;

        p = m;

        do {
            if (hx >= p.x && p.x >= mx && hx !== p.x &&
                    pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {

                tan = Math.abs(hy - p.y) / (hx - p.x); // tangential

                if (locallyInside(p, hole) &&
                    (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {
                    m = p;
                    tanMin = tan;
                }
            }

            p = p.next;
        } while (p !== stop);

        return m;
    }

    // whether sector in vertex m contains sector in vertex p in the same coordinates
    function sectorContainsSector(m, p) {
        return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
    }

    // interlink polygon nodes in z-order
    function indexCurve(start, minX, minY, invSize) {
        var p = start;
        do {
            if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);
            p.prevZ = p.prev;
            p.nextZ = p.next;
            p = p.next;
        } while (p !== start);

        p.prevZ.nextZ = null;
        p.prevZ = null;

        sortLinked(p);
    }

    // Simon Tatham's linked list merge sort algorithm
    // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
    function sortLinked(list) {
        var i, p, q, e, tail, numMerges, pSize, qSize,
            inSize = 1;

        do {
            p = list;
            list = null;
            tail = null;
            numMerges = 0;

            while (p) {
                numMerges++;
                q = p;
                pSize = 0;
                for (i = 0; i < inSize; i++) {
                    pSize++;
                    q = q.nextZ;
                    if (!q) break;
                }
                qSize = inSize;

                while (pSize > 0 || (qSize > 0 && q)) {

                    if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                        e = p;
                        p = p.nextZ;
                        pSize--;
                    } else {
                        e = q;
                        q = q.nextZ;
                        qSize--;
                    }

                    if (tail) tail.nextZ = e;
                    else list = e;

                    e.prevZ = tail;
                    tail = e;
                }

                p = q;
            }

            tail.nextZ = null;
            inSize *= 2;

        } while (numMerges > 1);

        return list;
    }

    // z-order of a point given coords and inverse of the longer side of data bbox
    function zOrder(x, y, minX, minY, invSize) {
        // coords are transformed into non-negative 15-bit integer range
        x = 32767 * (x - minX) * invSize;
        y = 32767 * (y - minY) * invSize;

        x = (x | (x << 8)) & 0x00FF00FF;
        x = (x | (x << 4)) & 0x0F0F0F0F;
        x = (x | (x << 2)) & 0x33333333;
        x = (x | (x << 1)) & 0x55555555;

        y = (y | (y << 8)) & 0x00FF00FF;
        y = (y | (y << 4)) & 0x0F0F0F0F;
        y = (y | (y << 2)) & 0x33333333;
        y = (y | (y << 1)) & 0x55555555;

        return x | (y << 1);
    }

    // find the leftmost node of a polygon ring
    function getLeftmost(start) {
        var p = start,
            leftmost = start;
        do {
            if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;
            p = p.next;
        } while (p !== start);

        return leftmost;
    }

    // check if a point lies within a convex triangle
    function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
        return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&
               (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&
               (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
    }

    // check if a diagonal between two polygon nodes is valid (lies in polygon interior)
    function isValidDiagonal(a, b) {
        return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges
               (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible
                (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors
                equals$2(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case
    }

    // signed area of a triangle
    function area(p, q, r) {
        return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
    }

    // check if two points are equal
    function equals$2(p1, p2) {
        return p1.x === p2.x && p1.y === p2.y;
    }

    // check if two segments intersect
    function intersects(p1, q1, p2, q2) {
        var o1 = sign$2(area(p1, q1, p2));
        var o2 = sign$2(area(p1, q1, q2));
        var o3 = sign$2(area(p2, q2, p1));
        var o4 = sign$2(area(p2, q2, q1));

        if (o1 !== o2 && o3 !== o4) return true; // general case

        if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1
        if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1
        if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2
        if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2

        return false;
    }

    // for collinear points p, q, r, check if point q lies on segment pr
    function onSegment(p, q, r) {
        return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
    }

    function sign$2(num) {
        return num > 0 ? 1 : num < 0 ? -1 : 0;
    }

    // check if a polygon diagonal intersects any polygon segments
    function intersectsPolygon(a, b) {
        var p = a;
        do {
            if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
                    intersects(p, p.next, a, b)) return true;
            p = p.next;
        } while (p !== a);

        return false;
    }

    // check if a polygon diagonal is locally inside the polygon
    function locallyInside(a, b) {
        return area(a.prev, a, a.next) < 0 ?
            area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :
            area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
    }

    // check if the middle point of a polygon diagonal is inside the polygon
    function middleInside(a, b) {
        var p = a,
            inside = false,
            px = (a.x + b.x) / 2,
            py = (a.y + b.y) / 2;
        do {
            if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&
                    (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))
                inside = !inside;
            p = p.next;
        } while (p !== a);

        return inside;
    }

    // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
    // if one belongs to the outer ring and another to a hole, it merges it into a single ring
    function splitPolygon(a, b) {
        var a2 = new Node(a.i, a.x, a.y),
            b2 = new Node(b.i, b.x, b.y),
            an = a.next,
            bp = b.prev;

        a.next = b;
        b.prev = a;

        a2.next = an;
        an.prev = a2;

        b2.next = a2;
        a2.prev = b2;

        bp.next = b2;
        b2.prev = bp;

        return b2;
    }

    // create a node and optionally link it with previous one (in a circular doubly linked list)
    function insertNode(i, x, y, last) {
        var p = new Node(i, x, y);

        if (!last) {
            p.prev = p;
            p.next = p;

        } else {
            p.next = last.next;
            p.prev = last;
            last.next.prev = p;
            last.next = p;
        }
        return p;
    }

    function removeNode(p) {
        p.next.prev = p.prev;
        p.prev.next = p.next;

        if (p.prevZ) p.prevZ.nextZ = p.nextZ;
        if (p.nextZ) p.nextZ.prevZ = p.prevZ;
    }

    function Node(i, x, y) {
        // vertex index in coordinates array
        this.i = i;

        // vertex coordinates
        this.x = x;
        this.y = y;

        // previous and next vertex nodes in a polygon ring
        this.prev = null;
        this.next = null;

        // z-order curve value
        this.z = null;

        // previous and next nodes in z-order
        this.prevZ = null;
        this.nextZ = null;

        // indicates whether this is a steiner point
        this.steiner = false;
    }

    // return a percentage difference between the polygon area and its triangulation area;
    // used to verify correctness of triangulation
    earcut.deviation = function (data, holeIndices, dim, triangles) {
        var hasHoles = holeIndices && holeIndices.length;
        var outerLen = hasHoles ? holeIndices[0] * dim : data.length;

        var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
        if (hasHoles) {
            for (var i = 0, len = holeIndices.length; i < len; i++) {
                var start = holeIndices[i] * dim;
                var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
                polygonArea -= Math.abs(signedArea(data, start, end, dim));
            }
        }

        var trianglesArea = 0;
        for (i = 0; i < triangles.length; i += 3) {
            var a = triangles[i] * dim;
            var b = triangles[i + 1] * dim;
            var c = triangles[i + 2] * dim;
            trianglesArea += Math.abs(
                (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -
                (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
        }

        return polygonArea === 0 && trianglesArea === 0 ? 0 :
            Math.abs((trianglesArea - polygonArea) / polygonArea);
    };

    function signedArea(data, start, end, dim) {
        var sum = 0;
        for (var i = start, j = end - dim; i < end; i += dim) {
            sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
            j = i;
        }
        return sum;
    }

    // turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts
    earcut.flatten = function (data) {
        var dim = data[0][0].length,
            result = {vertices: [], holes: [], dimensions: dim},
            holeIndex = 0;

        for (var i = 0; i < data.length; i++) {
            for (var j = 0; j < data[i].length; j++) {
                for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);
            }
            if (i > 0) {
                holeIndex += data[i - 1].length;
                result.holes.push(holeIndex);
            }
        }
        return result;
    };
    earcut_1.default = _default;

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    /*
     * Author : Martin Donk
     * Website : http://www.nerdamer.com
     * Email : martin.r.donk@gmail.com
     * Source : https://github.com/jiggzson/nerdamer
     */

    var nerdamer_core = createCommonjsModule(function (module) {
    /* global trig, trigh, Infinity, define, arguments2Array, NaN */
    //externals ====================================================================
    /* BigInterger.js v1.6.40 https://github.com/peterolson/BigInteger.js/blob/master/LICENSE */
    //var nerdamerBigInt = typeof nerdamerBigInt !== 'undefined' ? nerdamerBigInt : require("big-integer");
    /* big.js v5.2.2 https://github.com/MikeMcl/big.js/LICENCE */
    //var nerdamerBigDecimal = typeof nerdamerBigDecimal !== 'undefined' ? nerdamerBigDecimal : require('big.js');

    var nerdamer = (function (imports) {

    //version ======================================================================
        var version = '1.1.6';

    //inits ========================================================================
        var _ = new Parser(); //nerdamer's parser

        //import bigInt
        var bigInt = imports.bigInt;
        var bigDec = imports.bigDec;
        //set the precision to js precision
        bigDec.set({
            precision: 250
        });

        var Groups = {};

        //container of pregenerated primes
        var PRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113
                    , 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,
            257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,
            401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557,
            563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,
            709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863,
            877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031,
            1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171,
            1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303,
            1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471,
            1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607,
            1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753,
            1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931,
            1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083];

    //Settings =====================================================================
        var CUSTOM_OPERATORS = {};

        var Settings = {
    		//Enables/Disables call peekers. False means callPeekers are disabled and true means callPeekers are enabled.
    		callPeekers: false,


            //the max number up to which to cache primes. Making this too high causes performance issues
            init_primes: 1000,

            exclude: [],
            //If you don't care about division by zero for example then this can be set to true.
            //Has some nasty side effects so choose carefully.
            suppress_errors: false,
            //the global used to invoke the libary to parse to a number. Normally cos(9) for example returns
            //cos(9) for convenience but parse to number will always try to return a number if set to true.
            PARSE2NUMBER: false,
            //this flag forces the a clone to be returned when add, subtract, etc... is called
            SAFE: false,
            //the symbol to use for imaginary symbols
            IMAGINARY: 'i',
            //the modules used to link numeric function holders
            FUNCTION_MODULES: [Math],
            //Allow certain characters
            ALLOW_CHARS: ['π'],
            //Allow nerdamer to convert multi-character variables
            USE_MULTICHARACTER_VARS: true,
            //Allow changing of power operator
            POWER_OPERATOR: '^',
            //The variable validation regex
            //VALIDATION_REGEX: /^[a-z_][a-z\d\_]*$/i
            VALIDATION_REGEX: /^[a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ∞][0-9a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]*$/i,
            //Aliases
            ALIASES: {
                'π': 'pi',
                '∞': 'Infinity'
            },
            POSITIVE_MULTIPLIERS: false,
            //Cached items
            CACHE: {},
            //Print out warnings or not
            SILENCE_WARNINGS: false,
            //Precision
            PRECISION: 80,
            //function mappings
            VECTOR: 'vector',
            PARENTHESIS: 'parens',
            SQRT: 'sqrt',
            ABS: 'abs',
            FACTORIAL: 'factorial',
            DOUBLEFACTORIAL: 'dfactorial',
            //reference pi and e
            LONG_PI: '3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214' +
                    '808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196',
            LONG_E: '2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466' +
                    '39193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901',
            PI: Math.PI,
            E: Math.E,
            LOG: 'log',
            LOG10: 'log10',
            LOG10_LATEX: 'log_{10}',
            MAX_EXP: 200000,
            //The number of scientific place to round to
            SCIENTIFIC_MAX_DECIMAL_PLACES: 14,
            //True if ints should not be converted to
            SCIENTIFIC_IGNORE_ZERO_EXPONENTS: true
        };

        (function () {
            Settings.CACHE.roots = {};
            var x = 40,
                    y = 40;
            for (var i = 2; i <= x; i++) {
                for (var j = 2; j <= y; j++) {
                    var nthpow = bigInt(i).pow(j);
                    Settings.CACHE.roots[nthpow + '-' + j] = i;
                }
            }
        })();

        //Add the groups. These have been reorganized as of v0.5.1 to make CP the highest group
        //The groups that help with organizing during parsing. Note that for FN is still a function even
        //when it's raised to a symbol, which typically results in an EX
        var N = Groups.N = 1, // A number
                P = Groups.P = 2, // A number with a rational power e.g. 2^(3/5).
                S = Groups.S = 3, // A single variable e.g. x.
                EX = Groups.EX = 4, // An exponential
                FN = Groups.FN = 5, // A function
                PL = Groups.PL = 6, // A symbol/expression having same name with different powers e.g. 1/x + x^2
                CB = Groups.CB = 7, // A symbol/expression composed of one or more variables through multiplication e.g. x*y
                CP = Groups.CP = 8; // A symbol/expression composed of one variable and any other symbol or number x+1 or x+y

        var CONST_HASH = Settings.CONST_HASH = '#';

        var PARENTHESIS = Settings.PARENTHESIS;

        var SQRT = Settings.SQRT;

        var ABS = Settings.ABS;

        var FACTORIAL = Settings.FACTORIAL;

        var DOUBLEFACTORIAL = Settings.DOUBLEFACTORIAL;

        //the storage container "memory" for parsed expressions
        var EXPRESSIONS = [];

        //variables
        var VARS = {};

        //the container used to store all the reserved functions
        var RESERVED = [];

        var WARNINGS = [];

        /**
         * Use this when errors are suppressible
         * @param {String} msg
         * @param {object} ErrorObj
         */
        var err = function (msg, ErrorObj) {
            if (!Settings.suppress_errors) {
                if (ErrorObj)
                    throw new ErrorObj(msg);
                else
                    throw new Error(msg);
            }
        };

    //Utils ========================================================================
        var customError = function (name) {
            var E = function (message) {
                this.name = name;
                this.message = message !== undefined ? message : '';
                var error = new Error(this.message);
                error.name = this.name;
                this.stack = error.stack;
            }; //create an empty error
            E.prototype = Object.create(Error.prototype);
            return E;
        };

        /**
         * Checks to see if value is one of nerdamer's reserved names
         * @param {String} value
         * @return boolean
         */
        var isReserved = function (value) {
            return RESERVED.indexOf(value) !== -1;
        };

        /**
         * Checks to see that all symbols in array are the same
         * @param {Symbol[]} arr
         * @returns {bool}
         */
        var allSame = function (arr) {
            var last = arr[0];
            for (var i = 1, l = arr.length; i < l; i++)
                if (!arr[i].equals(last))
                    return false;
            return true;
        };

        /**
         * Used to pass warnings or low severity errors about the library
         * @param msg
         */
        var warn = function (msg) {
            WARNINGS.push(msg);
            if (Settings.SHOW_WARNINGS && console && console.warn) {
                console.warn(msg);
            }
        };

        /**
         * Enforces rule: "must start with a letter or underscore and
         * can have any number of underscores, letters, and numbers thereafter."
         * @param name The name of the symbol being checked
         * @param {String} typ - The type of symbols that's being validated
         * @throws {Exception}  - Throws an exception on fail
         */
        var validateName = function (name, typ) {
            typ = typ || 'variable';
            if (Settings.ALLOW_CHARS.indexOf(name) !== -1)
                return;
            var regex = Settings.VALIDATION_REGEX;
            if (!(regex.test(name))) {
                throw new InvalidVariableNameError(name + ' is not a valid ' + typ + ' name');
            }
        };

        /**
         * Convert number from scientific format to decimal format
         * @param {Number} num
         */
        var scientificToDecimal = function (num) {
            var nsign = Math.sign(num);
            //remove the sign
            num = Math.abs(num);
            //if the number is in scientific notation remove it
            if (/\d+\.?\d*e[\+\-]*\d+/i.test(num)) {
                var zero = '0',
                        parts = String(num).toLowerCase().split('e'), //split into coeff and exponent
                        e = parts.pop(), //store the exponential part
                        l = Math.abs(e), //get the number of zeros
                        sign = e / l,
                        coeff_array = parts[0].split('.');
                if (sign === -1) {
                    l = l - coeff_array[0].length;
                    if (l < 0) {
                      num = coeff_array[0].slice(0, l) + '.' + coeff_array[0].slice(l) + (coeff_array.length === 2 ? coeff_array[1] : '');
                    }
                    else {
                      num = zero + '.' + new Array(l + 1).join(zero) + coeff_array.join('');
                    }
                }
                else {
                    var dec = coeff_array[1];
                    if (dec)
                        l = l - dec.length;
                    if (l < 0) {
                      num = coeff_array[0] + dec.slice(0, l) + '.' + dec.slice(l);
                    } else {
                      num = coeff_array.join('') + new Array(l + 1).join(zero);
                    }
                }
            }

            return nsign < 0 ? '-'+num : num;
        };
        /**
         * Checks if number is a prime number
         * @param {Number} n - the number to be checked
         */
        var isPrime = function (n) {
            var q = Math.floor(Math.sqrt(n));
            for (var i = 2; i <= q; i++) {
                if (n % i === 0)
                    return false;
            }
            return true;
        };

        /**
         * Checks if n is a number
         * @param {any} n
         */
        var isNumber = function(n) {
            return /^\d+\.?\d*$/.test(n);
        };

        /**
         * Checks to see if an array contains only numeric values
         * @param {Array} arr
         */
        var allNumeric = function(arr) {
            for(var i=0; i<arr.length; i++)
                if(!isNumber(arr[i]))
                    return false;
            return true;
        };
        /**
         * Checks to see if a number or Symbol is a fraction
         * @param {Number|Symbol} num
         * @returns {boolean}
         */
        var isFraction = function (num) {
            if (isSymbol(num))
                return isFraction(num.multiplier.toDecimal());
            return (num % 1 !== 0);
        };

        /**
         * Checks to see if the object provided is a Symbol
         * @param {Object} obj
         */
        var isSymbol = function (obj) {
            return (obj instanceof Symbol);
        };

        /**
         * Checks to see if the object provided is an Expression
         * @param {Object} obj
         */
        var isExpression = function (obj) {
            return (obj instanceof Expression);
        };

        /**
         * This method traverses the symbol structure and grabs all the variables in a symbol. The variable
         * names are then returned in alphabetical order.
         * @param {Symbol} obj
         * @param {Boolean} poly
         * @param {Object} vars - An object containing the variables. Do not pass this in as it generated
         * automatically. In the future this will be a Collector object.
         * @returns {String[]} - An array containing variable names
         */
        var variables = function (obj, poly, vars) {
            vars = vars || {
                c: [],
                add: function (value) {
                    if (this.c.indexOf(value) === -1 && isNaN(value))
                        this.c.push(value);
                }
            };

            if (isSymbol(obj)) {
                var group = obj.group,
                        prevgroup = obj.previousGroup;
                if (group === EX)
                    variables(obj.power, poly, vars);

                if (group === CP || group === CB || prevgroup === CP || prevgroup === CB) {
                    for (var x in obj.symbols) {
                        variables(obj.symbols[x], poly, vars);
                    }
                }
                else if (group === S || prevgroup === S) {
                    //very crude needs fixing. TODO
                    if (!(obj.value === 'e' || obj.value === 'pi' || obj.value === Settings.IMAGINARY))
                        vars.add(obj.value);
                }
                else if (group === PL || prevgroup === PL) {
                    variables(firstObject(obj.symbols), poly, vars);
                }
                else if (group === EX) {
                    if (!isNaN(obj.value))
                        vars.add(obj.value);
                    variables(obj.power, poly, vars);
                }
                else if (group === FN && !poly) {
                    for (var i = 0; i < obj.args.length; i++) {
                        variables(obj.args[i], poly, vars);
                    }
                }
            }

            return vars.c.sort();
        };

        /**
         * Returns the sum of an array
         * @param {Array} arr
         * @returns {Symbol}
         */
        var arraySum = function(arr) {
            var sum = new Symbol(0);
            arr.map(function(x) {
                sum = _.add(sum, x);
            });
            return sum;
        };

        /**
         * Separates out the variables into terms of variabls.
         * e.g. x+y+x*y+sqrt(2)+pi returns
         * {x: x, y: y, x y: x*y, constants: sqrt(2)+pi
         * @param {type} symbol
         * @param {type} o
         * @returns {undefined}
         * @throws {Error} for expontentials
         */
        var separate = function (symbol, o) {
            symbol = _.expand(symbol);
            o = o || {};
            var insert = function (key, sym) {
                if (!o[key])
                    o[key] = new Symbol(0);
                o[key] = _.add(o[key], sym.clone());
            };
            symbol.each(function (x) {
                if (x.isConstant('all')) {
                    insert('constants', x);
                }
                else if (x.group === S) {
                    insert(x.value, x);
                }
                else if (x.group === FN && (x.fname === ABS || x.fname === '')) {
                    separate(x.args[0]);
                }
                else if (x.group === EX || x.group === FN) {
                    throw new Error('Unable to separate. Term cannot be a function!');
                }
                else {
                    insert(variables(x).join(' '), x);
                }
            });

            return o;
        };

        /**
         * Fills holes in an array with zero symbol or generates one with n zeroes
         * @param {Array} arr
         * @param {Number} n
         */
        var fillHoles = function (arr, n) {
            n = n || arr.length;
            for (var i = 0; i < n; i++) {
                var sym = arr[i];
                if (!sym)
                    arr[i] = new Symbol(0);
            }
            return arr;
        };

        /**
         *
         * Checks to see if the object provided is a Vector
         * @param {Object} obj
         */
        var isVector = function (obj) {
            return (obj instanceof Vector);
        };

        /**
         * Checks to see if the object provided is a Matrix
         * @param {Object} obj
         */
        var isMatrix = function (obj) {
            return (obj instanceof Matrix);
        };

        var isSet = function(obj) {
            return (obj instanceof Set);
        };

        /**
         * Checks to see if a symbol is in group N
         * @param {Symbol} symbol
         */
        var isNumericSymbol = function (symbol) {
            return symbol.group === N || symbol.group === P;
        };

        /**
         * Checks to see if a symbol is a variable with no multiplier nor power
         * @param {Symbol} symbol
         */
        var isVariableSymbol = function (symbol) {
            return symbol.group === S && symbol.multiplier.equals(1) && symbol.power.equals(1);
        };

        /**
         * Checks to see if the object provided is an Array
         * @param {Object} arr
         */
        var isArray = function (arr) {
            return Array.isArray(arr);
        };

        /**
         * Checks to see if a number is an integer
         * @param {Number} num
         */
        var isInt = function (num) {
            return /^[-+]?\d+e?\+?\d*$/gim.test(num.toString());
        };

        /**
         * @param {Number|Symbol} obj
         * @returns {boolean}
         */
        var isNegative = function (obj) {
            if (isSymbol(obj)) {
                obj = obj.multiplier;
            }
            return obj.lessThan(0);
        };
        /**
         * Safely stringify object
         * @param o
         */
        var stringify = function(o) {
            if(!o)
                return o;
            return String(o);
        };

        /**
         * @param {String} str
         * @returns {String} - returns a formatted string surrounded by brackets
         */
        var inBrackets = function (str) {
            return '(' + str + ')';
        };

        /**
         * A helper function to replace parts of string
         * @param {String} str - The original string
         * @param {Integer} from - The starting index
         * @param {Integer} to - The ending index
         * @param {String} with_str - The replacement string
         * @returns {String} - A formatted string
         */
        var stringReplace = function (str, from, to, with_str) {
            return str.substr(0, from) + with_str + str.substr(to, str.length);
        };

        /**
         * the Parser uses this to check if it's allowed to convert the obj to type Symbol
         * @param {Object} obj
         * @returns {boolean}
         */
        var customType = function (obj) {
            return obj !== undefined && obj.custom;
        };

        /**
         * Checks to see if numbers are both negative or are both positive
         * @param {Number} a
         * @param {Number} b
         * @returns {boolean}
         */
        var sameSign = function (a, b) {
            return (a < 0) === (b < 0);
        };

        /**
         * A helper function to replace multiple occurences in a string. Takes multiple arguments
         * @example format('{0} nice, {0} sweet', 'something')
         * //returns 'something nice, something sweet'
         */
        var format = function () {
            var args = [].slice.call(arguments),
                    str = args.shift();
            var new_str = str.replace(/{(\d+)}/g, function (match, index) {
                var arg = args[index];
                return typeof arg === 'function' ? arg() : arg;
            });

            return new_str;
        };

        /**
         * Generates an array with values within a range. Multiplies by a step if provided
         * @param {Number} start
         * @param {Number} end
         * @param {Number} step
         */
        var range = function(start, end, step) {
            var arr = [];
            step = step || 1;
            for(var i=start; i<=end; i++)
                arr.push(i*step);
            return arr;
        };

        /**
         * Returns an array of all the keys in an array
         * @param {Object} obj
         * @returns {Array}
         */
        var keys = Object.keys;

        /**
         * Returns the first encountered item in an object. Items do not have a fixed order in objects
         * so only use if you need any first random or if there's only one item in the object
         * @param {Object} obj
         * @param {String} key Return this key as first object
         * @param {Boolean} both
         * @returns {*}
         */
        var firstObject = function (obj, key, both) {
            for (var x in obj)
                break;
            if (key)
                return x;
            if(both)
                return {
                    key: x,
                    obj: obj[x]
                };
            return obj[x];
        };

        /**
         * Substitutes out variables for two symbols, parses them to a number and them compares them numerically
         * @param {Symbol} sym1
         * @param {Symbol} sym2
         * @param {String[]} vars - an optional array of variables to use
         * @returns {bool}
         */
        var compare = function (sym1, sym2, vars) {
            var n = 5; //a random number between 1 and 5 is good enough
            var scope = {}; // scope object with random numbers generated using vars
            var comparison;
            for (var i = 0; i < vars.length; i++)
                scope[vars[i]] = new Symbol(Math.floor(Math.random() * n) + 1);
            block('PARSE2NUMBER', function () {
                comparison = _.parse(sym1, scope).equals(_.parse(sym2, scope));
            });
            return comparison;
        };

        /**
         * Is used to set a user defined function using the function assign operator
         * @param {String} name
         * @param {String[]} params_array
         * @param {String} body
         * @returns {Boolean}
         */
        var setFunction = function (name, params_array, body) {
            validateName(name);
            if (!isReserved(name)) {
                params_array = params_array || variables(_.parse(body));
                _.functions[name] = [_.mapped_function, params_array.length, {
                        name: name,
                        params: params_array,
                        body: body
                    }];
                return body;
            }
            return null;
        };

        /**
         * Returns the minimum number in an array
         * @param {Array} arr
         * @returns {Number}
         */
        var arrayMax = function (arr) {
            return Math.max.apply(undefined, arr);
        };

        /**
         * Returns the maximum number in an array
         * @param {Array} arr
         * @returns {Number}
         */
        var arrayMin = function (arr) {
            return Math.min.apply(undefined, arr);
        };

        /**
         * Clones array with clonable items
         * @param {Array} arr
         * @returns {Array}
         */
        var arrayClone = function (arr) {
            var new_array = [], l = arr.length;
            for (var i = 0; i < l; i++)
                new_array[i] = arr[i].clone();
            return new_array;
        };

        /**
         * Fills numbers between array values
         * @param {Numbers[]} arr
         * @param {Integer} slices
         */
        var arrayAddSlices = function(arr, slices) {
            slices = slices || 20;
            var retval = [];
            var c, delta, e;
            retval.push(arr[0]); //push the beginning
            for(var i=0; i<arr.length-1; i++) {
                c = arr[i];
                delta = arr[i+1]-c; //get the difference
                e = delta/slices; //chop it up in the desired number of slices
                for(var j=0; j<slices; j++) {
                    c += e; //add the mesh to the last slice
                    retval.push(c);
                }
            }

            return retval;
        };

         /**
         * Gets nth roots of a number
         * @param {Symbol} symbol
         * @returns {Vector}
         */
        var nroots = function(symbol) {
            var a, b;

            if(symbol.group === FN && symbol.fname === '') {
                a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());
                b = _.parse(symbol.power);
            }
            else if(symbol.group === P) {
                a = _.parse(symbol.value);
                b = _.parse(symbol.power);
            }

            if(a && b && (a.group === N) && b.group === N && a.multiplier.isNegative()) {
                var _roots = [];

                var parts = Symbol.toPolarFormArray(evaluate(symbol));
                var r = parts[0];

                //var r = _.parse(a).abs().toString();

                //https://en.wikipedia.org/wiki/De_Moivre%27s_formula
                var x = _.arg(a);
                var n = b.multiplier.den.toString();
                var p = b.multiplier.num.toString();

                var formula = '(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})';

                for(var i=0; i<n; i++) {
                    var t = evaluate(_.parse(format("(({0})+2*pi*({1}))/({2})", x, i, n))).multiplier.toDecimal();
                    _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));
                }
                return Vector.fromArray(_roots);
            }
            else if(symbol.isConstant(true, true)) {
                var sign = symbol.sign();
                var x = evaluate(symbol.abs());
                var root = _.sqrt(x);

                var _roots = [root.clone(), root.negate()];

                if(sign < 0)
                    _roots = _roots.map(function(x) {
                        return _.multiply(x, Symbol.imaginary());
                    });

            }
            else {
                _roots = [_.parse(symbol)];
            }

            return Vector.fromArray(_roots);
        };

        /**
         * Sorts and array given 2 parameters
         * @param {String} a
         * @param {String} b
         */
        var comboSort = function (a, b) {
            var l = a.length,
                    combined = []; //the linker
            for (var i = 0; i < a.length; i++) {
                combined.push([a[i], b[i]]); //create the map
            }

            combined.sort(function (x, y) {
                return x[0] - y[0];
            });

            var na = [], nb = [];

            for (i = 0; i < l; i++) {
                na.push(combined[i][0]);
                nb.push(combined[i][1]);
            }

            return [na, nb];
        };
        /**
         * TODO: Pick a more descriptive name and better description
         * Breaks a function down into it's parts wrt to a variable, mainly coefficients
         * Example a*x^2+b wrt x
         * @param {Symbol} fn
         * @param {String} wrt
         * @param {bool} as_obj
         */
        var decompose_fn = function (fn, wrt, as_obj) {
            wrt = String(wrt); //convert to string
            var ax, a, x, b;
            if (fn.group === CP) {
                var t = _.expand(fn.clone()).stripVar(wrt);
                ax = _.subtract(fn.clone(), t.clone());
                b = t;
            }
            else
                ax = fn.clone();
            a = ax.stripVar(wrt);
            x = _.divide(ax.clone(), a.clone());
            b = b || new Symbol(0);
            if (as_obj)
                return {
                    a: a,
                    x: x,
                    ax: ax,
                    b: b
                };
            return [a, x, ax, b];
        };
        /**
         * Rounds a number up to x decimal places
         * @param {Number} x
         * @param {Number} s
         */
        var nround = function (x, s) {
            if(isInt(x)) {
                if(x >= Number.MAX_VALUE)
                    return x.toString();
                return Number(x);
            }

            s = typeof s === 'undefined' ? 14 : s;
            return Math.round(x * Math.pow(10, s)) / Math.pow(10, s);
        };

        /**
         * Is used for u-substitution. Gets a suitable u for substitution. If for
         * instance a is used in the symbol then it keeps going down the line until
         * one is found that's not in use. If all letters are taken then it
         * starts appending numbers.
         * IMPORTANT! It assumes that the substitution will be undone
         * beore the user gets to interact with the object again.
         * @param {Symbol} symbol
         */
        var getU = function (symbol) {
            //start with u
            var u = 'u', //start with u
                    v = u, //init with u
                    c = 0, //postfix number
                    vars = variables(symbol);
            //make sure this variable isn't reserved and isn't in the variable list
            while (!(RESERVED.indexOf(v) === - 1 && vars.indexOf(v) === - 1))
                v = u + c++;
            //get an empty slot. It seems easier to just push but the
            //problem is that we may have some which are created by clearU
            for (var i = 0, l = RESERVED.length; i <= l; i++)
                //reserved cannot equals false or 0 so we can safely check for a falsy type
                if (!RESERVED[i]) {
                    RESERVED[i] = v; //reserve the variable
                    break;
                }
            return v;
        };

        /**
         * Clears the u variable so it's no longer reserved
         * @param {String} u
         */
        var clearU = function (u) {
            var indx = RESERVED.indexOf(u);
            if (indx !== -1)
                RESERVED[indx] = undefined;
        };

        /**
         * Loops through each item in object and calls function with item as param
         * @param {Object|Array} obj
         * @param {Function} fn
         */
        var each = function (obj, fn) {
            if (isArray(obj)) {
                var l = obj.length;
                for (var i = 0; i < l; i++)
                    fn.call(obj, i);
            }
            else {
                for (var x in obj)
                    if (obj.hasOwnProperty(x))
                        fn.call(obj, x);
            }
        };

        /**
         * Checks to see if a number is an even number
         * @param {Number} num
         * @returns {boolean}
         */
        var even = function (num) {
            return num % 2 === 0;
        };

        /**
         * Checks to see if a fraction is divisible by 2
         * @param {Number} num
         * @returns {boolean}
         */
        var evenFraction = function (num) {
            return 1 / (num % 1) % 2 === 0;
        };

        /**
         * Strips duplicates out of an array
         * @param {Array} arr
         */
        var arrayUnique = function (arr) {
            var l = arr.length, a = [];
            for (var i = 0; i < l; i++) {
                var item = arr[i];
                if (a.indexOf(item) === -1)
                    a.push(item);
            }
            return a;
        };

        /**
         * Removes duplicates from an array. Returns a new array
         * @param {Array} arr
         * @param {Function} condition
         */
        var removeDuplicates = function(arr, condition) {
            var conditionType = typeof condition;

            if(conditionType !== 'function' || conditionType === 'undefined') {
                condition = function(a, b) {
                    return a === b;
                };
            }

            var seen = [];

            while(arr.length) {
                var a = arr[0];
                //only one element left so we're done
                if(arr.length === 1) {
                    seen.push(a);
                    break;
                }
                var temp = [];
                seen.push(a); //we already scanned these
                for(var i=1; i<arr.length; i++) {
                    var b = arr[i];
                    //if the number is outside the specified tolerance
                    if(!condition(a, b))
                        temp.push(b);
                }
                //start over with the remainder
                arr = temp;
            }

            return seen;
        };

        /**
         * Reserves the names in an object so they cannot be used as function names
         * @param {Object} obj
         */
        var reserveNames = function (obj) {
            var add = function (item) {
                if (RESERVED.indexOf(item) === -1)
                    RESERVED.push(item);
            };

            if (typeof obj === 'string')
                add(obj);
            else {
                each(obj, function (x) {
                    add(x);
                });
            }
        };

        /**
         * Removes an item from either an array or an object. If the object is an array, the index must be
         * specified after the array. If it's an object then the key must be specified
         * @param {Object|Array} obj
         * @param {Integer} indexOrKey
         */
        var remove = function (obj, indexOrKey) {
            var result;
            if (isArray(obj)) {
                result = obj.splice(indexOrKey, 1)[0];
            }
            else {
                result = obj[indexOrKey];
                delete obj[indexOrKey];
            }
            return result;
        };

        /**
         * Creates a temporary block in which one of the global settings is temporarily modified while
         * the function is called. For instance if you want to parse directly to a number rather than have a symbolic
         * answer for a period you would set PARSE2NUMBER to true in the block.
         * @example block('PARSE2NUMBER', function(){//symbol being parsed to number}, true);
         * @param {String} setting - The setting being accessed
         * @param {Function} f
         * @param {boolean} opt - The value of the setting in the block
         * @param {String} obj - The obj of interest. Usually a Symbol but could be any object
         */
        var block = function (setting, f, opt, obj) {
            var current_setting = Settings[setting];
            Settings[setting] = opt === undefined ? true : !!opt;
            var retval = f.call(obj);
            Settings[setting] = current_setting;
            return retval;
        };

        /**
         * provide a mechanism for accessing functions directly. Not yet complete!!!
         * Some functions will return undefined. This can maybe just remove the
         * function object at some point when all functions are eventually
         * housed in the global function object. Returns ALL parser available
         * functions. Parser.functions may not contain all functions
         */
        var importFunctions = function () {
            var o = {};
            for (var x in _.functions)
                o[x] = _.functions[x][0];
            return o;
        };

        /**
         * Converts function arguments to an array. Now used by gcd and lcm in Algebra.js :)
         * @param {Array|object} obj
         */
        var arguments2Array = function (obj) {
            return [].slice.call(obj);
        };

        /**
         * Returns the coefficients of a symbol given a variable. Given ax^2+b^x+c, it divides
         * each nth term by x^n.
         * @param {Symbol} symbol
         * @param {Symbol} wrt
         */
        var getCoeffs = function (symbol, wrt, info) {
            var coeffs = [];
            //we loop through the symbols and stick them in their respective
            //containers e.g. y*x^2 goes to index 2
            symbol.each(function (term) {
                if (term.contains(wrt)) {
                    //we want only the coefficient which in this case will be everything but the variable
                    //e.g. a*b*x -> a*b if the variable to solve for is x
                    var coeff = term.stripVar(wrt),
                            x = _.divide(term.clone(), coeff.clone()),
                            p = x.power.toDecimal();
                }
                else {
                    coeff = term;
                    p = 0;
                }
                var e = coeffs[p];
                //if it exists just add it to it
                coeffs[p] = e ? _.add(e, coeff) : coeff;

            }, true);

            for (var i = 0; i < coeffs.length; i++)
                if (!coeffs[i])
                    coeffs[i] = new Symbol(0);
            //fill the holes
            return coeffs;
        };

        /**
         * As the name states. It forces evaluation of the expression
         * @param {Symbol} symbol
         * @param {Symbol} o
         */
        var evaluate = function (symbol, o) {
            return block('PARSE2NUMBER', function () {
                return _.parse(symbol, o);
            }, true);
        };

        /**
         * Converts an array to a vector. Consider moving this to Vector.fromArray
         * @param {String[]|String|Symbol|Number|Number[]} x
         */
        var convertToVector = function (x) {
            if (isArray(x)) {
                var vector = new Vector([]);
                for (var i = 0; i < x.length; i++)
                    vector.elements.push(convertToVector(x[i]));
                return vector;
            }
            //Ensure that a nerdamer ready object is returned
            if (!isSymbol(x))
                return _.parse(x);
            return x;
        };

        /**
         * Generates prime numbers up to a specified number
         * @param {Number} upto
         */
        var generatePrimes = function (upto) {
            //get the last prime in the array
            var last_prime = PRIMES[PRIMES.length - 1] || 2;
            //no need to check if we've already encountered the number. Just check the cache.
            for (var i = last_prime; i < upto; i++) {
                if (isPrime(i))
                    PRIMES.push(i);
            }
        };
        /**
         * Checks to see if all arguments are numbers
         * @param {object} args
         */
        var allNumbers = function (args) {
            for (var i = 0; i < args.length; i++)
                if (args[i].group !== N)
                    return false;
            return true;
        };
        /*
         * Checks if all arguments aren't just all number but if they
         * are constants as well e.g. pi, e.
         * @param {object} args
         */
        var allConstants = function (args) {
            for (var i = 0; i < args.length; i++) {
                if (args[i].isPi() || args[i].isE())
                    continue;
                if (!args[i].isConstant(true))
                    return false;
            }
            return true;
        };


    //Exceptions ===================================================================
        //Is thrown for division by zero
        var DivisionByZero = customError('DivisionByZero');
        // Is throw if an error occured during parsing
        var ParseError = customError('ParseError');
        // Is thrown if the expression results in undefined
        var UndefinedError = customError('UndefinedError');
        // Is throw if a function exceeds x amount of iterations
        var MaximumIterationsReached = customError('MaximumIterationsReached');
        // Is thrown if the parser receives an incorrect type
        var NerdamerTypeError = customError('NerdamerTypeError');
        // Is thrown if bracket parity is not correct
        var ParityError = customError('ParityError');
        // Is thrown if an unexpectd or incorrect operator is encountered
        var OperatorError = customError('OperatorError');
        // Is thrown if an index is out of range.
        var OutOfRangeError = customError('OutOfRangeError');
        // Is thrown if dimensions are incorrect. Mostly for matrices
        var DimensionError = customError('DimensionError');
        // Is thrown if variable name violates naming rule
        var InvalidVariableNameError = customError('InvalidVariableNameError');
        // Is thrown if the limits of the library are exceeded for a function
        // This can be that the function become unstable passed a value
        var ValueLimitExceededError = customError('ValueLimitExceededError');
        // Is throw if the value is an incorrect LH or RH value
        var NerdamerValueError = customError('NerdamerValueError');
        // Is throw if the value is an incorrect LH or RH value
        var SolveError = customError('SolveError');
        // Is thrown for an infinite loop
        var InfiniteLoopError = customError('InfiniteLoopError');
        
        var exceptions = {
            DivisionByZero: DivisionByZero,
            ParseError: ParseError,
            UndefinedError: UndefinedError,
            MaximumIterationsReached: MaximumIterationsReached,
            NerdamerTypeError: NerdamerTypeError,
            ParityError: ParityError,
            OperatorError: OperatorError,
            OutOfRangeError: OutOfRangeError,
            DimensionError: DimensionError,
            InvalidVariableNameError: InvalidVariableNameError,
            ValueLimitExceededError: ValueLimitExceededError,
            NerdamerValueError: NerdamerValueError,
            SolveError: SolveError,
            InfiniteLoopError: InfiniteLoopError
        };
    //Big ==========================================================================
        var Big = {
            cos: function (x) {
                return new Symbol(bigDec.cos(x.multiplier.toDecimal()));
            },
            sin: function (x) {
                return new Symbol(bigDec.sin(x.multiplier.toDecimal()));
            }
        };
    //Math2 ========================================================================
        //This object holds additional functions for nerdamer. Think of it as an extension of the Math object.
        //I really don't like touching objects which aren't mine hence the reason for Math2. The names of the
        //functions within are pretty self-explanatory.
        //NOTE: DO NOT USE INLINE COMMENTS WITH THE MATH2 OBJECT! THIS BREAK DURING COMPILATION OF BUILDFUNCTION.
        var Math2 = {
            csc: function (x) {
                return 1 / Math.sin(x);
            },
            sec: function (x) {
                return 1 / Math.cos(x);
            },
            cot: function (x) {
                return 1 / Math.tan(x);
            },
    		acsc: function(x) { return Math.asin(1/x); },
            asec: function(x) {
                return Math.acos(1/x);
            },
            acot: function(x) {
                return (Math.PI / 2) - Math.atan(x);
            },
            // https://gist.github.com/jiggzson/df0e9ae8b3b06ff3d8dc2aa062853bd8
            erf: function (x) {
                var t = 1 / (1 + 0.5 * Math.abs(x));
                var result = 1 - t * Math.exp(-x * x - 1.26551223 +
                        t * (1.00002368 +
                                t * (0.37409196 +
                                        t * (0.09678418 +
                                                t * (-0.18628806 +
                                                        t * (0.27886807 +
                                                                t * (-1.13520398 +
                                                                        t * (1.48851587 +
                                                                                t * (-0.82215223 +
                                                                                        t * (0.17087277)))))))))
                        );
                return x >= 0 ? result : -result;
            },
            diff: function(f) {
                var h = 0.001;

                var derivative = function(x) {
                    return (f(x + h) - f(x - h)) / (2 * h);
                };

                return derivative;
            },
            median: function (...values) {
                values.sort(function (a, b) {
                    return a - b;
                });

                var half = Math.floor(values.length / 2);

                if (values.length % 2)
                    return values[half];

                return (values[half - 1] + values[half]) / 2.0;
            },
            /*
             * Reverses continued fraction calculation
             * @param {obj} contd
             * @returns {Number}
             */
            fromContinued: function (contd) {
                var arr = contd.fractions.slice();
                var e = 1 / arr.pop();
                for (var i = 0, l = arr.length; i < l; i++) {
                    e = 1 / (arr.pop() + e);
                }
                return contd.sign * (contd.whole + e);
            },
            /*
             * Calculates continued fractions
             * @param {Number} n
             * @param {Number} x The number of places
             * @returns {Number}
             */
            continuedFraction: function (n, x) {
                x = x || 20;
                var sign = Math.sign(n); /*store the sign*/
                var absn = Math.abs(n); /*get the absolute value of the number*/
                var whole = Math.floor(absn); /*get the whole*/
                var ni = absn - whole; /*subtract the whole*/
                var c = 0; /*the counter to keep track of iterations*/
                var done = false;
                var epsilon = 1e-14;
                var max = 1e7;
                var e, w;
                var retval = {
                    whole: whole,
                    sign: sign,
                    fractions: []
                };
                /*start calculating*/
                while (!done && ni !== 0) {
                    /*invert and get the whole*/
                    e = 1 / ni;
                    w = Math.floor(e);
                    if (w > max) {
                        /*this signals that we may have already gone too far*/
                        var d = Math2.fromContinued(retval) - n;
                        if (d <= Number.EPSILON)
                            break;
                    }
                    /*add to result*/
                    retval.fractions.push(w);
                    /*move the ni to the decimal*/
                    ni = e - w;
                    /*ni should always be a decimal. If we have a whole number then we're in the rounding errors*/
                    if (ni <= epsilon || c >= x - 1)
                        done = true;
                    c++;
                }
                /*cleanup 1/(n+1/1) = 1/(n+1) so just move the last digit one over if it's one*/
                var idx = retval.fractions.length - 1;
                if (retval.fractions[idx] === 1) {
                    retval.fractions.pop();
                    /*increase the last one by one*/
                    retval.fractions[--idx]++;
                }
                return retval;
            },
            bigpow: function (n, p) {
                if (!(n instanceof Frac))
                    n = Frac.create(n);
                if (!(p instanceof Frac))
                    p = Frac.create(p);
                var retval = new Frac(0);
                if (p.isInteger()) {
                    retval.num = n.num.pow(p.toString());
                    retval.den = n.den.pow(p.toString());
                }
                else {
                    var num = Frac.create(Math.pow(n.num, p.num));
                    var den = Frac.create(Math.pow(n.den, p.num));

                    retval.num = Math2.nthroot(num, p.den.toString());
                    retval.den = Math2.nthroot(den, p.den);
                }
                return retval;
            },
            //http://stackoverflow.com/questions/15454183/how-to-make-a-function-that-computes-the-factorial-for-numbers-with-decimals
            gamma: function (z) {
                var g = 7;
                var C = [
                    0.99999999999980993,
                    676.5203681218851,
                    -1259.1392167224028,
                    771.32342877765313,
                    -176.61502916214059,
                    12.507343278686905,
                    -0.13857109526572012,
                    9.9843695780195716e-6,
                    1.5056327351493116e-7]
                        ;

                if (z < 0.5)
                    return Math.PI / (Math.sin(Math.PI * z) * Math2.gamma(1 - z));
                else {
                    z -= 1;

                    var x = C[0];
                    for (var i = 1; i < g + 2; i++)
                        x += C[i] / (z + i);

                    var t = z + g + 0.5;
                    return Math.sqrt(2 * Math.PI) * Math.pow(t, (z + 0.5)) * Math.exp(-t) * x;
                }
            },
            //factorial
            bigfactorial: function (x) {
                var retval = new bigInt(1);
                for (var i = 2; i <= x; i++)
                    retval = retval.times(i);
                return new Frac(retval);
            },
            //https://en.wikipedia.org/wiki/Logarithm#Calculation
            bigLog: function (x) {
                var CACHE = ["-253631954333118718762629409109262279926288908775918712466601196032/39970093576053625963957478139049824030906352922262642968060706375", "0", "24553090145869607172412918483124184864289170814122579923404694986469653261608528681589949629750677407356463601998534945057511664951799678336/35422621391945757431676178435630229283255250779216421054188228659061954317501699707236864189383591478024245495110561124597124995986978302375", "369017335340917140706044240090243368728616279239227943871048759140274862131699550043150713059889196223917527172547/335894053932612728969975338549993764554481173661218585876475837409922537622385232776657791604345125227005476864000", "24606853025626737903121303930100462245506322607985779603220820323211395607931699126390918477501325805513849611930008427268176602460462988972957593458726734897129954728102144/17750092415977639787139561330326170936321452137635322313122938207611787444311735251389066106937796085669460151963285086542745859461943369606018450213014148175716400146484375", "399073568781976806715759409052286641738926636328983929439450824555613704676637191564699164303012247386095942144825603522401740680808466858044/247958349743620302021733249049411604982786755454514947379317600613433680222511897950658049325685140346169718465773927872179874971908848116625", "1468102989495846944084741146947295378041808701256909016224309866143294556551407470861354311593351276612463858816796714569499021375899793849136855085849133702029337910502448189055357182595424959360/819363879309286303497217527375463120404739098260200279520788950777458900438307356738082930586032462601215802636320993648007907724899611296693997216938989854861043298494990214825163523387600982777", "5896704855274661767824574093605344871722790278354431422729640950821239030785642943033153793245906863203822369276271050164634206965056233097479117980782641839669/3030306850569309344013726745100070601277982132543905537366562638553198167007159067544789592089960911065181606283478843359856123992707598685058297067179343872000", "76631772943534985713873427262830314617912556928476573358548256872141516989538374761909611879922349479420014771499018155447198112155515453671128814488139633810493264352294560043912066253026059140653027326566801398784/36852092933388988649396042883218509607503204211148493545892849595498822817623842579026942621098851631842754395231561679671400197056377380063233740202370686144673585955581403046886083948450136247134308381940165804875", "3159076083816399509754948610929467278257473888282947311280653574634802580912280940686954763313882823327077171624015737719617373932318151594325834524000275847475866299387913048/1437757485694188822758304467756419845842037623148461107362957994816554782989250555362514354661961482939226272309026092009962414616417412938087494467254146002233028411865234375", "22266067259907364984531611601870291368272674573653403965630628996687370994139884833897773468149149664829922302484782423514167405397665098388400450149078982462318781750661005833037235183394221496186539779712428265837926417581952/9670030144664428565128962309657100138096047028794689249320859276197340398920725569428532293373676415359965773460364494998334259893079003125373872108770534788283842907318071170285038777091588292539102269617376180390982915567375", "14604654564989239958569331443385369522850975185358647132770022716433280072271007767111036877803328768910274400515590151934676819262085211828028638417329558229123989556376108454497813055/6090614019162516693013973409650613208227889078878781039105047015752493519149314227721984436973374032279421344818329285207124280297611253861173835238379831004010748379874393292231671808", "1901241885407696031217292877862925220917660047127261026827869027159993239567933534052663335498281439239753018507182016153657409777749792228538380379703411298411623469292891476969894084838876001545818141543890273256985768690847587711270930688/765116019778838839812655402103512685695769161212360553099732689795578904762091216998790589926057819838537805856579109910198553330075924857419395160755642371550113347465300208422126945265887065434116781678702741657275181694851670325469434625", "139459806786604751793737926146840623607010208216289543036026206208962059593900745886202214788747453279179283344350478734275973878932538430194363355795823581315329311220701640235653288975569812161436/54371368534412517053056101353618694718215711767266376573138772968257303578467926450212293233332401067673270853953399269852376592855992724934941173346260129257754416412476202526978443681584633116375", "1045669091124493070709683241190022970908640501171378776604126771144008324358233819560649021940145166254659028524319517244711645162132513416238958170819347361185944945680269442845829390112062101255500836072082817820950448463314034677353723256969344/396228259004446234921310936915931611736815598535963504660076315228798989932959459406702091180060429080345146735173591749448509810270759531977278642135591672189002006272326131885315743181289970885337574780897529347356567086535505950450897216796875", "9912919238915437302006264477931031611447467070103973106567538528951878797932559935860738745374437522819124347510590800370471910492338584284092534264608801221235029062881964101996762011296996851893455828946521/3660537472668264151218961634689665210933936249986285290553357254224360417386515311493310199319523687171757653216994741150377508234317025158302057758196429623723072084157928224798322861732880034847243894784000", "9263710175433181746575186369318246002919895649622127410824041370079225200282403368319370743363303164313395723904510539050157032684710468364067204876434546848634842333436957245275217583248805993142227630297924119330553308466662488683624783307023014909360640/3341177182697517248552428837661919299725031035849865632511882688786226888137634168024976033652753689210700218163621739078534353578510364301481093730054725078138658805025014615651043313990684347632166030359086885561104034510990826655289288319840595753002771", "5116082230713622171832327542439052727465114322479570603905499496221224653983960598946033081212909066917137546065542953865612718836914393275681318667667521726785633638189373998191090501201427906618075889744489190209584/1805752553736060443820406101277706970767657006346276183748749630179442318063568286372320188433843729960294965366346522303898609655762491623098453269916163621089005711823488749297418113474056676109581110715068124438875", "246569125619713282434448566970352231845414317018379160824176638351574938993535464763890962336882760882398479702237564384291290459961036068916857265499633061660562532011248501476114401629839742058389195725393702000011860799793778295606988057303225493814005789533570432/85307063020836305797178273029353623060860009152114361453434032434699636078115114412588719432277441055049132559782203988387794711585368296817222565434951256788867244687081233632650953850383220864394261763844194948389861147622944651546912394593164406926489862036343375", "133672026303452911046163998480860917119290576658330909785707604886881155606725822685088929236266583416708668502760907677019598002175122453170574729028452721476464728566191464897928696630979863154661704374206171469014225143/45398130975270785045482567762871405072140548998125471025451666500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "6041693953360002800224091673336562508913199995987479264605216252220579740134601435770085920869376641180763419907442721705887169884230643795126568815123647603047739799302562095542459344811429882053086550900803768964612193941424128649976704727183797495759082741166938351872/2016766992122395667828553277997478570503475626107286343497917705446132017125079612756035254750822860815515899557855166824523851779156336235294914777307802256439645525835223691751931866188957324792276149549076500784191791380803500156776088683900346065830066370370083309875", "705868391597244582764749229356331441978820024796066870551110486625729826111158236686696326058778874201639006234449557592353247542995871491078308187261304930042019640830629526023972693107193897009168955674240659026247094657679060/231848642748474339277532000336338632910990823562381469441716922006107433404523316252618490265927265734670539384485699132080062215196462178933963957679882342083893417545858074378754089719547920901917516016346211301054206383643383", "101832160604157943093944673541651013907278188571533075311673249923948856034633446617630054761681006062910980371900782781226979391765818325065031889334563981235894369036439929651260587335544056975715076598739977065390678221999918899003881778449092038750712969437519295878491018112/32944277910571666002449086492515464541550138004002141571670657643770713783329063548790202120805341989608877739811787937782240802963962520261844114327432160788193314874913687387269408387417806176202979244637915812905426565263196954203487934225589622864145960079736633434831996625", "10655703119271468913597640479490594180964700448340778168715956712130636958373270202484276402718566314881119559090842449610957974112230306343486091910217340665146602598568991520563987490686996746558858366002301982443029430290679385551/3398412687366638541233365137084722368200311117891192348532156645374786104142009695796409107380345795998400850838706661851176885183144928701608654514812261697598380070746520197171576610572921007069104300695592751543563472456384512000", "1903039332876763837419920240543738799531131775028971323439870868730321221615515008394327723508670975623498588291298064320786970626232668956372004004897872810230178526101184611242511193415796638694370503100219710864543168952682617801833318493436174387568067811938490953495819438108686336/598806534367503338307287246320963280558134937382149405305466709787179429317914803617527827862441615350396864359976273212272586892074799651088317544101755361439294687323233086696182687664637422796995789967075271448560870681210580691574924544896656175563265378514188341796398162841796875", "525573915563826130963525826191411949262846916750432019596028344808298471293378917508549164993368392834023782480702893643486699787870059946429810070222126260200026332874480239090370088123833491499400991181659445914352500247596757005142623368/163278727324937389095822405034435687776345799835442022795533783889356344755225815267819508608559076191292900367982490827396869405536484846115955581043091229202052407483776587687967125885665493681707461345895999542381476164157058393971431375", "9263815657177858787273494705338516861045771674838057329170239610953039987023429736752079544014780707408666628475997291124805562998227296677616204140605356257712022384368492575381355563976330347792504605666631512343447560301417325154003481040250148561839861837778597346623630046623751094400/2843321709948499955095590862256744532227698001408929142548057792217790532624003190447363578048562448168721539177458065482170148482375585867230123873178100117094533143052886527452665480614620123764036974180917207421482431983407742154634391264619615289225747664532332469783301704643254076601", "407959339726114455622180187758753007349209016396248763075759257357925636039752474207685682218422721827857994768023399625060206708378433960993946156803948655098667156937949174400873748557248801874735834957795040139401560494087476967548060208243867/123780218751812156744401121690996305978134694678934447237402511116731459214498784497436358160964198336874043702652746834763131444030185151143987331404604087778514863973633941401826334750268416015224906056576641018962863645043976537664227639296000", "2547676391598917379516698439971914695230548782904479778605691338364453606537643088857116141939170899135026552016969320061900926954008522781162186995856580955090548471448276736878300717869625651893741316530109438876067419826217901657017506157997588944233677467357220316084583383623602865379325184/764562034757392298786420374672266498815021229519853724850874576419885380830752931701831256959159800764672605004880389358601658343203513177084389490286723240185146570925957286083025676875197029662038213216541352875570101363668917766225709569356861275434470568767077844675593176178611021135573625", "186545352286463730559933346565311535598243666022232037054735807289501173444103692309735768703898330430135399033529355360391658728987379385732098960609744313878477967971557204207043802935782878745271859468248704012618254203101767841517569443555143252/55399179641621656233589820996143825959365789093262978988289445625153099592463372579496245442338653053662134699646413817866770218574795378644415019944304868289119443774932782235638737888469746745621382139263856603239588594078668393194675445556640625", "664884440164786473344854955309049113269357314957985265728106924238588705533437169796551912202931185746193155801905841712503407258166135075966280435780812714252670362202091663287095423712596462690753468682634261029392794173636943978404002804413009590005984736612421172979101972556772005594499779860608/195485517776407145286424460448995460754674039560651791192647586550615878988380153730602665795647187884543361218962125172808792176382956599256188706636727418572541254480798303566840010217729386905041217793614214518363859058348249961790104618910877813067510758225302884815410347238200133693756493703875", "2614957283934314904315471338485451166053664494383241929385424599389309215073267052860464009981063483440201193771607520572077231889699858482582363845275452280606276949653970992719332472370351170732899676316967244504534154616036371979031399425846100527685/761493664432749089312665480773496290658029971027686543404885407644062485746072719559288231362060149626237939029641098328278650939665665969011529293869562636656650999759724704272743235210867676873525147820749560155294022488994426729939894753293900972032", "124843380518493746761140367283007507854364503961156704095198010255465940085534099747297600085903814014415830785663764373057896014399822131175202342399536439284123918855893825207202244831315575594886675813256448846863723093240955901916229136393454605455444105444987028391748121054399538064686074523506176/36022228212051654395480210378626648518430280334458144892889271272122662467638331091863215146548048144675657239846337165813938424387499358852301016926312083940212100001220180762189978024821166744964908871443681332664798940660421469519997746775275873085770018269706847741064037876137315001228315806659875", "827992369063043155578730871896750570951766628472810506926098505028264552046829097082095665194000002802661600196840639204300804225352337632259980703832713031790922485730615305441309917696044954289187837653933158950774246017223571461858939407386087081525130831392/236805932823686534991153393869288530368011574665859226704279685567723830696754821658770176385138917722808377962346690757191122309876922069867472518117628639913077442806147910884267694879089753138429767401700283014143248445966474839193628309668702223994071394625", "17347276886878323736540051321582548724378497839789943634071026331001588645519865992773157565595886250230140452154269197770615097377486013097979087647774513500701793885978192218455687078883766086309728287172567466406449372659680040183273634701092561727514713494914793425407149186041796935055187281744386432/4919325621804683623339606849970832094714371903709195539440424738973575902329797546592497378000858196173718145883783709223158260700365224756081275272021856393735663399552166737690038832550853145831185979094979556715294990257315369124065787473707136464772247917156232366320267601622617803514003753662109375", "137984231830526866236186357461458917020538108058615632801298091031540729111527734872044790487396302545910108285921421417358113055522725197998483383380192391312304647004240060970929072498293210057120617332323445379424867965764749534125081131327565507524502163460761/38810445792642817561168950890315210470940006613819790543653745327778579787694809782601777514116858514049585074667085399925278459138508514838268321349069481334967221455722811414399738756151414906092225265355449011152267068726417045644222323488445626292574879744000", "746567120547823334914136339633766098626636643449144032626270358619125402826113269699709721071135471625588981126637674402048519990010499180844665151971356149292818375448504122545400227696621572263621729512461528550588108384619064912224884465737417596190735966915167530332762203074440688676123756162572829692160/208334337057923929636884170505570363171441147899816815785150954417598643614152856767186132467069365605496210036171429712485182162940460120834349006784956522600679357307849981862006710239311750261522832996877712350330290831638640913932265004107623954913155144975252743257846945609734368518424172846119306643431", "64649371728330695076928013661001819989330953381731372450140483779536126948957993261299287753791770622512248630224724990234903928056275080682537641377393210728546364176267034339221558641084730052304770498929958838997239635790469536857863963589118888238069738647239076/17903951498200212327802847425913723358452100686246224008745414214690047078122925247086521362329833307849817944645647750649290248110509395628305970523384831671737569872597295947593410067364379687588919135621621162007748635920864926867870502568935739725312687094047375", "2454918942158003099688922026016393688092399295166304634317616773083386087532869193458590448918958337530406410803840837646465522656670050113548208618655070231274778592766244282964463702354872753657766121825196898916725498553882689210280080206627916046484942827487726300822318764058084323314109595329304407466188383616/674880185931325925966586583820010578979699141814417326552629206140252348822939845006845669570885271576698771404162512001549922909048916000017837898649100825976232784446638776021483802989797501705685620612986771521390439936066527738682396560462899753657942715306792783283782238662155922082005591512296007820682995125", "74018558041066162916454010680594042518462756234254788158141115244349044958441521749277686851928706433556285971088455226217644009628399441967508838553345152310730562224910795446341601049647392069373970101491741830623078126344928804029524181578945586663110848142571149861/20204153620006780689923328634586091101021423979622170579036140596085566172775051595588438592742563923428900864000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "2127032036758045513335690185608563023954009095206088224487365541995326714285119384743928987635752931664240752323937321097955456543854943206092931247498833001499955456190701695430459583885125382086777607021670447795321669948733328973350279846928613949120929250312666393359442423066212311060931469017737106028339882830848/576612418511902928757340062840968526862381326698309578771238715462180282212422302261044980131594522407066369222998903808960617461164985318633518680304995784614308979881735537678182134128319596636920719106506829571072447362052319438091347699720147003209417806230149598345068078717948025207635448205253184540936478445125", "35289653975561083576641954928762116897061274899517309102784750384002335187117263273488751066569234386120759866204372398611196356888479036949053282301027789530999737306501029700128744408015642211359442183943916106790666114870974212159410284751571905275610921784716184508440/9503006066880728386808143045924119024212377150217533250562188228062174064693375135306438120385877320162710918716613546077156389583384656340709638430674364232343609717735574035535102953482366914421205216675248471695111720986346092738728929878538430662191272737183832556131", "102633551023964794485575491065909467125458972250222581133681080524371507544152979467328048718122409841060527545925136196267751819689935599599321090571687632103850847605493223603751038996548520557330016046032671961857623066292962260173840972332108111505971231021442896036760967107060309991355545554631003681544611731245475968/27459658121882266328752886605529964804078316737648012166874496015808620265471203512606463219297059547428855195782384236337998738233668399173746663289852416697917397644234441300570212555870401420579737973722145663287124151049692290432756231390864184491891697469874600345958989433125942336757049639797225309327019275689074625", "10034393558388390065766795008210457368713365491566387292163814915435906649268119060550511145023450790393353937124495488860451123302412204483570913557762460385297770427946219119911920640306914453207097103853766023934602534502476962159682750262143380527529536498215384467975023/2667919902603322771586358077760621955455470781865624844984169443739075976572061827709528710108877015489050369589117491611045518221354793418884447632063538994046714401229510497599783726376490260140723032102883617341970952663947646017489439179953454964374887388652792446976000", "248528145263843375390386172800048509380966183384567983242213959113927668429802237067505890436957693495616107089384741585283620097982859345081736730899912519273262934785992235852866637878831878448348444611412764161078458068549719800733237024285525816723480868704742804077255242682077291713092790250511567621735004237450946304/65676865669148624809340872151906045781446981664561196686217551358486802274698228825404698950974939545099727242259547145392352658637333562345477931951890984276718673618736565926663528625796412420753961231404680876558659735251469326707567479071881966875336951133475135427640218972722939427821842173216282390058040618896484375", "7805448718805635696495809414501206964843262114470109146341305656318015059743127114324245035489577134938579856003956861881125856595981500593426840968087618241785931128978516340812066502964561231235073012672356530509663384739132686548934288703179479011016719045530855033205271548/2050525178024039744126592505352202216905491833360272553169520915020715464206141942151086176509423406413311520838568324134077402841030113427309725873344806030836314500267104070131451720947531994814710189000076651895520222646974590481497382830325485174899169093049299764813276375", "3355325071293197839434119105039673324264765809771192815982246040415580387729382404624613875653005261578877047405365032178619450963731719777167015959920645055600439987161800547901539269321100559393048973255388860193948274255340335876890491746900991668165565729269698196233805991206691196045182214641935483083662356666996922240/876402579119117579582569839757462461050855174353108858954282915644790659429341853404829661899850841645529640454766173209897510988090318303454542547519850473808789222552969933222203420847859171250332350076509996295844203965564448154484566493395403967626596213792922784509892086361572955175655987334882030766001799867659814117", "218871061991045868372866381545267589365410350294028138778572466235486397478028823720846191998825628156716190463263492304639890659254282445466806224943413446008645087186307985343574807361972238230520975439736199291019544576443791916302825193643774360055545186783819367378492631806297/56849560726416896431557940314760680962653658127458002233782028041537121216487790008085876994020812492987733987414743604239935223783349870516284048368761617736127892160849065895223288023531930411718807065209903593668117085505482007061969339237404945180379460053180570404846043136000", "5008685108365226931582937964451700746853986170633433728409171904803795018146152804690759530990140552460596075588463394200510044617816085275660078502126507209302951286606953039953843685800941558212440519542602092919776366067720586295390886070120828199562643208637974347390938772070049344991272621102622931576339988103674070876518912/1293888539680354282541277646947380627241979967611883341823378331667976045287311988103163380651334828012840330710760757271860219584371109472132211215957402251594055009937397184768184517621978947384029376766290498101728971145633139541827544539988344772578184316843734267915665730981857376872622787627370859411909330227080697966353375", "15388340113525711660227566446101909585796746979396093776960989868457211684028149502578116456785221720682202816140911944661051001675127262774824593420825587319436537346311831003212424497488485098543512314062112948777572038731823948224734505930748371522309451168088057190162878224801232/3954220582960831691377435160890656173654063611768428458807273708040518769541211737927975894584024448193835165167801976423275767590502552964407494549049777006346189436817215329891530811451811864579644894987864267389290848598289794977382504890216219362031324635609053075313568115234375", "5099039333987561374222193551155323470675617979816941646196895589439391685938046865391119484510329634015275893520725135141878751153360264368353595348921951280561029028912953500944814771064409611917475818956659775131751121312316084465321917769679881052144364834485866477379437705913911371481828140817759401117780199246301705600020671104/1303503600297679371136943454060319958680553228879031326679449263682048703103464872914972900105569835004878963701599765030590097739639045890060548760692125546754294514068052902543220382104483822438283040090444827980927544440984823535260277595466339403795403200720622852069244768910603820007632395190204569927612348189089161551951106625", "4902837141334073026145827027361937996261324349722726869116185158777439337041263482852376194988371853413467559557923410949898048139830183335197992754748294810838187068126867611615800383834975563313220497573778480109264178673389149671194149749735833378557143135481387904961537942569904075/1247045310545991266291285730016853118981099516935251861146038369985109288084420528171217942065832292739130145780833406014673689119563698528225048800794718789218267628507713621235056538202070171596177775095071513194885568843375526804796016261173388452184505503341132236719484809714335744", "38114743522716832107917466438257616720476488812538316101658139632867788464381862291240727309611460187159930652186486096300862388591521625093237019662273764387591494074792574929490381910446287947994150655077877204446864004067956087975012773988833339521775463977233068498404144221045837190392670308437391686081418318624745039402145439223552/9647001083383999453668111809775451078976046488746916070976218645431946648087171586252172936600115032316383427265217993193444199863138429602138841976586190525451324093772097241349417938578878934577091671046050326087898259692917931230974174799815198493279413438192301437068820185757869608523761456160341754512329264442115351926967120404125", "573695055225225727008803730767518906490704995929177617646275646884555707960986625481944101622708415415988844740028718027554452662358957933526173824325955904005404113684003841990198157072540659184995738719040024647370869010473254071681533880576462368600901824622431045529064651675640055917092/144509482511118816399089096021290587489594541280398871255876563615464628718527634679330291741479135415168539765887291789615790513527330600394937614433502341116068305347468133950204152174094704092402978083370792135432486240914953928188835819767755172666693219213868545854371103120604946200875", "23876960329653589647925126180903391687666378233201794403339630995420215267415575142266707357255726330536094448314199602616026935251126469221925945960901748679919435908556550271504767784553484434363646489174587463466333864577705745452492395785557425904735048180164697040313528831173448025400634629163795223739061661461986923675833880378496/5986312408594306954013526197465608559068621248896320652512228238115589875514604632230098997609482248000888567135685167138762172475788060284232459813998201719590208742091697294562538265829954186149162974972471533202880368317237508987477069872431064075005305838801862900501819963793062041081601844759452202282545840716920793056488037109375", "58168289917567723171226992383559866214094157894992327555495441698028867727845766488121900626912848698952863438654895252811583144479300382761129433911280049009362667380001406579175563745824368613319103673817094498117944856004415812877213722455299491145649879676787079744410765053845551958756701/14517067289347903655500020160671113450349743650636953726251191692074385521975132268313263723831804150872238173602847065423463131917373356798750100313145228608894881457107689499956903046984443545789053438946050974567665049237414588435796381674590098629779384355275820782532479708807512981504000", "728621890568281859295409481422447012528302594365693410763821707074444799793690738137592101239862736313347273167450056625929591960610208335290882047413011571781161008296084630072829079783328937418641417642857196346026366370059522990813537731394823630207433267854616768658990289454635793326766697884798538576055949457122067828153655416688640/181030730759516991863708593747964787874073354051675597050399087612142539517308720603687322924426591889179726492403913356461908748733972707460063017057809060190437917851790767968877215795679844983288935075688219234885360839984681619084834228226744165610073685719017596630302462070188937998558312507638434329299017584329479516410907786681093", "86855946923438322218622470067224691860808273886184997065663554841573982963995340977083049132518812923329423480393306918856650577072525633920456721265953575424233701929892019410099166322511413146891121248381648145391642571638857576890568882512129960291171866772665863159474602604647289052079991768/21485753507365901947528588896402264670781310878547726104482740647554738151100954835784115119035980523529677083504495839730499664052882400915208251594384038810917282207449860876251558307288700200910747338758723324686939379138206117634546981163355060740270734146780942696291669461182599512320099625", "2158989152301022938148680102142188531448821359505188055264665167313418619665693092337665573150374231484840948447637297247277576415460889296724813940128955070240137590073233263168835678714131062764247434144994737610229909964847568491446606012581370840699582055341626266533733744293929658949697805855362114229666626620766245630122333733703618176/531794915405164005613733454597931482878479882704956110685223892325074211694837836221759995948610212818642789132749082430059593652854659130217225506942675608692701447738732031302987802196501895840510235161825501235133794449421919927396142470196961877376701957829921152848178076410141813926924749057304222282687697297216661687583257901415465125", "139432548574396829074586704387656697097760057897628994548358619815052936481650396157428747411173567801047221928593253479330480454469358220685854351236980383914223693722868233819483137401339800304943891968050399345430243790898955416907228948287367356990263740207046902209563417267686591994743547621/34201151688775214071963206765436083445901621442002061707492082843232231754829227303539041286301398668437202547003300396162741375435703188500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "11008517174872833286150985180322584448162884832099344969609291070844193524816852920942383850580217443209402836100467940651581092350600329145627967515818684442171571156446321228596914355704205623857871497315955269266498229823278800717909321269179839084452384509142712677235552103459737790674103994445173074670347080506698168482564009465276165824768/2689223396936080856855299215659204161946704205931885125148201643087176556822542895325191478283706585400237901215485150928036895428721912118467760766508162631903585126377676412573187912443878232521444786090510891599171741773242011017926658231638022943018461086517502584854390836347781674626615709751386455292026775663545470794167629144456268750125", "16108638074211260588800537540680707641986073914251424878121255234668558067988171568946079848860335948991834525552515669040163026131919804987340113244760738846884911038097907756220945883750502673899084880578229601870882631165510396775126850307838505063922101682333806284668762825609556049426829531780/3919363961344261777100658318137884299575193089462944554282218278496298610828757650104922583359642384253066896538203596057302203635134833545580869871333892935330950583664400555463557735723364497947986885146043017010159347046389604172186788902608216894094289769850517098027486468084407618748895626853", "34420755849180279597302103726180110022640946692592540634353734157479505420320000324260530767186132260970572450489530034440214259559325114511265075416512316229177952140217732655405289808326341696986755141965043719344169685611217958619102774617224847284122901023774956887687026904767714958090256282893003000752947427857703259704682455375442735857024/8342030311716679826889917494957593165464748884572298173556257652389845294530325764837124998293398445804458613956489096007564811101361266196542129764287084823604897187311540561857741285793447174119667215803837719660675298308873496219385226998078648428368061868944322478384684509466965129972030932418920415308276430355882329457342937549162000252625", "345888075261020004071220843714060353763382280664960929903544964118831237876694384053904571498830068831026644303797377762345709976595360421502594656308937649239978525713471393570536680412814805076323426256584504251728507416368609420882442293831684681071553766603478479006495757222912500012444787804577811/83505703731469734628961395063481893801938371516752417759131774530720075262459158384433785006689548434701904106312038822969658455364219435022841597243178757423598248565463985786213156556523685666430799283870548238467817226915680747412191245046634279766450629886904716776719219698922088211154187845632000", "1061717830619177527082296723099890392273896386613997004874669053445943252046748251883532634529759169500795452576392700472771365240996842610207274128102329096619028487369622001737128463631016494371635687841733644339636164570819431573829173533941056258744442930643735587780907310433371453992062647737259587563398111688659657406089003293576961475848704/255359631537215747979895955806995352799574790340218399351168178555478073997876110889483456972687438702262017800167048243754141722496276537685853311434069991222324039005160057724073156957530106623908696241268268096879569794431919729620178375212905203484165745866913773304319069321426245521467122472046370356725530914587807274074293673038482666015625", "274122944106300296738399632684955400761495830361663966466225652918683099779465438024846903286816813856490888796372134557295699980528187779624865098445756013563535339056233912394908544185885547842235097677765325396255649207317018754967666450708249125316192200151505568416495274671679500594656671785202496/65687592621976546250581560102201535533608158256953087745856906437400149205693427285162333502528793675585022025602144243543064185647792948495372442630333800126269123531636800213405254045262127593759539706750242430153456891792533267948231185296091297979933562727112487057234422009426868531651634706262125", "7842680480716516803148821198697967237136721860017131244266974996267074742248599085253569637183007740566941125452215834642683053334607896723447140851344501084122965014242091312411884985569341166545074688756440728922408743841592658677792796881188604773469108807869960161395759837407978596679911066586626885830991556090978327508459276025943279064965688960/1872528612245648675720382138045071131304652050696842872529163720558126655075937845539792108048310219395746259570506175902206215101518698490144716531697689534559827422735649881381597761684154409796315455445459537515308174919488497154409643876490472215352056502193150125644288086294418253309947229151074464928874881827227706992859640236086417889990541889", "5300824422251242070074569186825929119848111723012841627275830216301188228660779008353049603527567784119877706984722171178137272986345560485784907345500893648715341273841147320288851034078863843374665850852481747000237834238703248634174397792745914847774297223176674917912406659831206869442510948965571661/1261140476013707338477604677428573831791396352814802149994640617701773078174882455512668089072441176857892331468691160991310474734143842336092636848492066592397892638052212250229129355009939118431643425836944282456647571558383755315238500832868535816144280088644939696339160092963629012001958205063168000", "2220223718762215584659309059880106334425515875615107369399767892051551634000614327272260081056973863669004224981561870246078120862256383581012183852291444462730018546753183156982897386563561418424093883164027305254176874653780425452987066512563140531367766900610414277825262239199580925879453806414860409441845631158680721091621460775043562065815179617536/526383206607841251253861841374779803798480623722760367843070466043030228662340154304405180907941079883976168609082254331465595267209149963786388600028701073430773581228212441424400748220833542964971495005714483235359479470452593264280645360131482713147116366500300066771223383007216182988263355451923333319170174755334598973202740108032097242475554128875", "521891797109626296684891455959263713257353500867652268541535940159815152120871142196535233326890353914761242025931373491906127275561002910157909306979093246574207104081108188995072105948138299097848175016082947174156278439986705241571619793059501724269644447572323501261424770743329858038040685313621446524/123310256826873923765604825413207481739886340225713108649758575106598510022338480189649787216845041382860899099250547657534972156328080736149239332330143771138115695598493059325064119176038137294863053148618656356436332991079150723235214278848602671333076219529535123842212129829931654967367649078369140625", "66086044538329677372986118727999622900471937619891337714357792768200341519193500393739322894033303245376225584865369486696276607060432449792893028061817203932068085863800494054274423512956136695211796751845295921015953538329385253280866669403169919614982155350899648626481405781514434761541281229159396787287553493046927448595964103589100429722948913403008/15562137339474350565671240515273666798063901504051979980452491653975250630723677279081058884163396938548780856293034775459223871281049026140999055923743471466471830572672766633086347312178711643724485955576579988182546105048041649947277672869613992334541438784737993706482731696809943027528882927942967419447250586964258807454003775693567366165507144866375", "335377615394100148751647837967017467711612297170079949298328061159559939969228226474615711044891085626519877634842694983669611974807129333052471799687426665556738316626171408219730853872410792831871526174987402129691897433888027072807302411474690613948951673562473758814664346259109886876538510453475290967835/78715592752271462306588358880337347638000605031000575876214116610339827495261512281635361568951675037834544811575026718101166562072917855004822606752296233435017284127594847656529606648345533195437635894948829857913798336356647286032372695130461573940500785137424365840081503133157308796505622439791698116608", "20090879701618729602554170716780970848925039917987945471322994867171660307998603515745066411687983450400412739285577269751603921163835619296822801840348319742203974023505186187060251544248644338412667631232247108675504629538319425769464277309915502144443973397371136256151336255138506001292355330875114245901820438821732843540725116728866301271466614762497024/4700223519410528857298732096729483544820841497820611795617923063440946097326817340637303431283005509904481323205480729806879570430868897342398783028649633951362398196137429076844504529051072393709154483678349272930361110568616112723747726853614661953537957117231900032044221535502745676310313569997665352252492568100075191900969170979460298189170486601502625", "2904778979985524171206573028445379872240558084236464200857594814631031581387804621371822074061289363372523364167184697785570324832815972970658633551879143187709707164796663015180877412717910872234647704536817108676736661804878068078543241390828229923424191204586313620612539678930999769543756218765870513049986792/677408099044823641581658869221044375312077929976719183424865834811543737800956896926637625166844372424044003929341361734886232742770909683021563822987505236295727478159938135467975522336774471915167606673489722102077041330652185811196423400701795791669780695158730756241178262962515917389382302757366325768069625", "31270155809329751863885224732454397292230969002004953832354065319735530624996254695453061851449600345977646455072512400760539747054003851289540339425848681804190284451253462663731135337775088379954403740058084949675460445909826322297817535400604180338201322667139062500269285493417563095365899631360901732684124930296643108551710704785906431324876072470231424/7269578038000504017073007978844992319987411732848567116655821196644382777088703228960020894756722675887473977480537577509061256138261063926845643360849217556370868752909531088361229374467207196928745673402380473721018157327193509586295879051411183657185176812738231456253321187419224704301236205478184115996135940848503487199394612616742961108684539794921875", "432538822079707760382094121020421735679118830363764570640789368235407853152380328891350816400541189148550353337874309885334920995713154225799660601389784410911658967499100610376065640785585342035058364676314084595283850213942576431310823836792440218271879354669291052589804956435743500204185107215929849054782893113/100246574739326291035824954677502591279343311051719151327066341370995390423713403739043396503785261917771859220535505691760472395306543276314938287868734009582906895763073519374099272340577921671298878837400921045252035507925021904954445172372479744465666760762909731237634082051855588025732494461939980856983552000", "1914333673689206389116942789116917579088664511118582610293383428712902211612554212779880638065888518488492298586641997844141510832940409501694726851666478650414191249534733087933879981733561565249818572204932715347752949087800778646065986244657260832234479202201129845117955957242616947361016603702640821256099895469088229339240402478576285854783063612307200/442333801076281757298117784528962837115323835962460661601905131618341609371649347131724700192551574625400701487125984359494804828935577124602622582550626336986871791407398609915208114339012374456785705161994343348351473385887949809051796407340988735853810174589261300681030826392672282630613354461927208579993042968520650313621522933214063366558703422757071", "5704691626402072213006354545292364761246893919997531024861408248746241619817955824682639582830486790618668221530365426203424888737658778881721063941495350237419723855000515747725926735319471480027293210991869255971365522170749568996651406002311020883635577590045650037569906001924971041810547543163363976464780729932/1314240362076792592671773873754757443276256223533339004339330559325754574023619698171225777585408160438834449576526997055649849875516310105297894855264038450585295422343454458568152668980131977005808840141079502436391909349182185596381509091427752151860204235071122788499996991078935216686010888734471173124487937875", "451219364084386208718456142329444023337343409261545444643031014769484085278440612677813682892926852469540118625738238137458321112005189595703619178533263706811689687213128887082197330137502064260105387500552856851972124172206996205919556553246133218441769325133725631665593372188755090094541462474970525820334385058333756591222492801647110594428922046641945259392/103648250172203340865458115839764297558925693061798169434516001775068769911768281084188883278842546791612199025413573394167639925287068809631958006622842716869211374513136766899877504136929177267362862319748507372147243911522667591375015611312165464514308451222180272935398828092646393830572838772085366567154646425598388620105539619174837489536378605144891769625", "1591076564577634575701791393842535460875733974464805197283632670013516183281542903377750304419996681222758401497321278555686661981435637461350320471258386388843198706277657208526372100698700615835733712519332548607115875288787602084336341594576426630670911478276101702119972195558314357975365863803265163991961173/364433108410193393847203348728981296285742202617988970384277162225847256295865554341611171460436362780497179090329831885853324392923449579538286804729856000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "5307507148709435807261229345132535134848030343901300324623409721698217134932866488937772986386501538026693956121121771089740095760486362654754229904633476234090792827930433598453200536551779789049352131005222659995845427680686677324963223653949277037520711609343166926627713758990384011274777087968799793410506391884872456420041494598273703914689586637995139580794368/1212244290381524115082005575105703496583315188540177702780216570265159923654197746388568151706509243638302707511238539845531608313334248788980188054651601536067740709977678222790481348003085034888244447626347312094586389347535167903408519024105748523384932942441843118813819781347089702286481924493361058339731949844620763272778960860509570622673048786968660129650125", "3046577098843580578619955603029073328361298436129791931304665777036152915858575282362742008136721284817899542475666054101957899858138590963789072530710775790433466847100422875906866496318804986202089528198912098377828580031852152997907433335176267300286466072997014023120087988748396598176622765923059385876855303940720/693911859077752895978833241338902695755528613729508555938416419864772385336777924892434701804078893822446727762077537955240605927550548046309823051841326355655848406646248595628715185413852040295631448250459076043816328082561248420925930431777502622148019371383254316636979070731427737764160145097293260938978413488819", "155310926743873343426312607182060072939030765297630534544899230213054714482456829198485999782086944271490229412707980997432528653509945301574794242118433868747172279224118534460563400440670015323324602117517342201640016853927923976796453577048995243600967202462466681112804476672348206491490513419336308575442086511015101999847896197546900512764233674747415844045184/35278162986589659300679088538176070649273991865663041616088851923111175518405117391134863644540911005782372831496121355954470744169969774540892096320978686548284501139861783292226140413769665461494668479430833892857992401391262903582109993838728281915806394747833588629467613308837196269424421131934859079260185052081536487462257809987002198437182539441349474426375", "46729591025621874782758519074451728476386657576036360734358719976400940301493939192083339293779149127132651616972817165172116269307276487158069293114860391502484125554406945249728802484128756924044633825692779783425628292959170597009935305429239702926898931975023598456207165067568919757902764815108751735753431153581849/10585868084079030838651390738371141142245086465033459640458366146849314274285871375459898014414833295804139979016362796357043372316321872357817727821559232353993714062535883074661734509440994664726425399880995133711038483607773782532430879196405793694658185175583691180757783597895616920432527125993118171361116684288000", "3736372348124144720852190769710129461145889011598636925228657393934132828633132357232883470466940330848177425542748100211498184494252714616379450272611850068867816250209867530921278645286769418080018709947826876461419654782341309127709703626401211996255743831998918894661053669189312375159058718767082163156988766821194002596331826150321864927832618126580509732359424/844176851007504003627016945212023239308348428094023437269532743221937069345682900884618378849283002998220513307273333096775669556093005637615012750733216460458689282791632437851364674879152695438589692227159038555722539345972833161146108367329370564838671791241431125003401861887477969954740544092178721327724620450947646209914621007186497081420384347438812255859375", "1258774755828991281578968023382624723772927642002016270484090409043454336040857926581316994594109169123354553321469500848146015719851609220423736153365139804086413284787598253618361769125996755159571523632747129480387254164008968993734442164892486441152227433281625391753702577143985047832519062595123255569172968685060844/283659859661671181526547833415653453506477950678651675193210969173130116121017723360258249430884213011988678011357458727603413521688184521573094783291496368005697481333739504490647194454695504722542014845706216224432373442438242355188461951883454664693262684873988061018976711201351382163527093784753398257094429403691625", "84932063355292829988908961192574710493098897148701473172754949846455626381329456661808566365329266898990829247446356970454502007127269708487563279536825277374133681167235811080298134899629580318813382668399644553111080625918213250223197440426147821225593304993621451053135332451997633132772608233430131400186571793929377129211228689703376067763625568623535588709576320/19089978133324852910950469658566458037096027722326716800113107848115231563787455584278193954518442601810776347091253561956877155673550458955562102935555510392954425196165785410319126098393353878286400877305164869548380670204577544630353859009177051698096136470072137579698473017257397949994722015089768745013713383769765609613514021200888647472804720456494757423299627", "802638881530832431828249604040579750916118423833791608589560402449036920165704012070349537114920882938466635598602387718300074733476150548724726460209016834416094317724261857969955414000155807312852092720310159572547644569797512233899495300028159721348599816083166712365215075728968005941610056018023633235372936903015771583/179951197386119079732438617407921535065140503043429174394605652913879982486051627760652197484142547447000508189455126493868229565647284332735552462525598465192073558793335913005459266977086104359621022691931002488052727597513413492393525660272900161375677499228252863529934576881596384036401784035248649026076581302370304000", "25208742399375362881099811032135575360109715964024747212026245529087599633280142314962581193303683759605084995818253124445773115574470717199218828756449187055537877478033129862600982068782249943150019637186466260707552416433010545437321814115233841687700051830170191107127799355485920046505591193770164750886037885397478191534797655616745528343172318318678405576430544896/5637713398995569614196397857525646325234056219513202928587580534159596897880731043336790273040813044077153051260989730372846713618900145444802234629922717464041261370803598799826604841654608724727320798324006129524610666235998113655193642594744544226880944882342204407750193512869672849910003246504052298022468012594459974209940607450480609190841893267203392880360823875", "732332637178584560220688900268566130246820235956768724845747830959547501950765063982943061181526237061809052444110437930100210105274824607344902764184151030827266142225894655531497849161692760385938786736436977268616029862577293984376170905024712952813234949508186306774257035535805330366742322777611063402455261391021097128/163377988152179636922409938163005948596822656868040662831003991395905185823836089887990201522673196719628247106777881741843786365701135555917263285268753605514812568258179391272113405920369587922702002732667842511108732068683407168090725712401954314293193572654347237716691784386690948494003094992876867763698101043701171875", "22391374854299462107923583267570593886002658786775211597896252879708753450794332301142909715845151746786016535157797023153041007263258732991465037648536702217273897876864351559736449481285518249846264600935543582562018874574655740660800634883403597181876364712521253650744197321080655028374602772696770227741610874399454362583980465225235674816785988164157351243193265401728/4983275997188967758382167867656806681565521964135131710678447245984239733544941881418957694612909599261843693554043504855207170782744518943778096768859337980470219783210191765678908537645270392500777411134164918803949155037581108678968701961544979451081836872425574123683574475790997414488641534074873248802450108535183413970057319247033379016606809226547805269752123746375", "21252344995592269775107236774689012760750850598567799560343535731251766780016530978663079386453430272698006977668063208502408607227544322945446079708000304179073184745623740466334127867464883762843346619853325415963062181018736410570113171387891518398846617197097407612852037905687899800932343156979591740310928257766081697645/4718515378484509142377558412184183991357747235892194234377932213613746008373918923611236346330189287336493794499188640380975364991548794341177060325509698404571318037298112293926833877103554546466055612498927474225619680186119313129604319096374924037870803554153458104225741255753314955115645304948564151765516183663634546688", "76703085666560609319365659209445044957052359500745196718269665234646121134787807938680787341023203786904308047981099228357850016602203539979246579454229078497537148799349353250167621935384193502383187510928609818011142642954550330069991570983902841318203794113898871515702445720207144863877026526025447819537396146822201819435536435835285098485990260677737192230985069824/16989892821104122916312992616665764943723222199277412857053896319814438961475117951904867066845412639236790762432996309717924037467863024360211163971190006272168845197000304328480920483651558672879967350982199768255256753110375467976246339260326422891913564151453729285191351273342206198366624882195135056176502724912849575385576554208844814085228696838834665339811027625", "40153831166521391225489894857551838468150576827129133168972859441122728710165233865309084872159583787083130713473702296122465319276461991457173085312407612757280915853584698420083436946976844240063731333638150599017886937783470942007376523947840104246927580254612991191040951001539641947153847776050138532219595746056076776809812/8873576113581065493273519627544307418139908640325227196912114520903505426722086265723900326735989771660987609604507503750212298754414472822477243293638486047313990878348820573874809636084574108909615044524663712495422565151340037564156235745628465172219286664653343193162657374410926171153516871765680561505768223660055617934625", "200736374277835272485186523480177159453030082779872429648449412313247640312479214261681899286513818912991945046297334418102711629933437654377760028476767482162031641781499114859553677502002901248124750539270235098492377826240319766677856465093871367817683734079621359186477306173620331748496369122143019303740252461824523590096923561928354020960176605008889579578495073283712/44259440065125442964014453739391594153290923937737136823355312892557975399035370631521014554980129291582486968083228888083079118116286312583989433037097397252506140224404130371160608365777625538148303917306340620019882928744151294738308047800711028158277500317134537540772759486365658024194428796846364486187105343266398338060080611643110071184992193593643605709075927734375", "488459049325494693259159444507437983381645757291858092983371672334043029615965882574409808932509285079401239403272414271652617474184321852388397021836909585659327974611273820676128650810907598106588433939541654215766888212287311943387232664417347883717203611092450971786083806323404432266197250919880225892099146722474124874256523/107455855466267410923480140898552598306699341366032095904938430084768624148829473848763761936703072253841751966906142283640379336131083461646777390874405323298406517250231389493084918065243079819898691146841695350589992171102939046740169198394671965069747042621265775948217054519855346617967866614303497258042439052681849864192000", "8430374068596413768975326329313648683222744787097373111477788794692418932056901235174019333392845529821722488982447683794746518712070635063397464904489452840169472596494433874412726723065560358405027764015273789053064830528919091414531400589850704395887250756457780868677553068164933299802944396576360356896758745030955907258232257358056931680617626606715393885378887657377280/1850480358582748412767893656294669486390769246349349706200869446679212812264400876685764762211659843658541567071977813110496329850010288179702589501255367345935389050373021591572539260951149696801665953123597521983257852207280970577287472932167362521740230973547070264273850381896786822127290397075758780174083415923482640313277341120938690594859118603017930500014640169211239", "58273615882491925540881784328370957720539797010816130007322211512070634295154626813477498607761260613353633996451797686143131893884559909668805628269959901044961666535533876340116728982072626875010391195372759135469446048394835148654407846242721443845351855234347422256700864370273092971804207514736924787577569355949601385705517152/12763172138328432984573837529764902730448666594097466544652830703737195804747682450548488162227364538052585484418491914323658215406327363805353540266048943197822838925184942600367647278764952826664684839953902567694832690683467635727409976388280092262839126779730168889686628630302519063225007497707028600865624133968363921915016625", "2685278694947152969468407055109959900160804835228466214479525891103128459065131221736713585038130737099067040196326815283171857977706979990467444622550497565521863441617001097354649972660183038850033950647594754644997436624623325003537308428828750008305464174443210079059253920383411910911594636045517662796811001285984447671371943267419151220518726940455756833040934506414133888/586864816044968996825907488721678304211296267371936463272955488077666796280028127333229453342355554450708284934221461946991556216095213627059047984199091625921432110913096253352065238765240063555347292393427726758010888546427415276046238297382474708612526770055488323003698641493939145624184943388159614111350839555141202024991876221874110644879676602924730506882384603409121625", "27700345710264347957758638741952394530538598225904772664391173119594616680996031886665218221392453628824570256438960349220263575741495285780845399187013582169907518462437966962923592601721119258663490655013419675469864809004562272799012227293974254329929404036071055528766397079743200179924243479370594973626764330855493789112414191/6040997839051213541001279276287478343874107660287651711609067205111574718442229224212245187655300348484144001298428958025052162253854676210451657425437588244676589965820312500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "80160269787574270953020489212619791839643207793889009503234879683494928396231769167082355143564723274576166638869430572977442020236299319718643894871736539109822173538266278165276591962215927816541165548699380129014840956895931285215480350321259054359835472320394089646764361802445068798451796525897304221529850133401768027469126408090577121172238802281079916258951770135485696/17444957084936455555074876721808241311651668802091828589911310253709517226715880722948267977560381436307152342821304525073651379763144281678911047276389231713860392794975453518107055568765009486973017341479560154792340888780337029481646046233967923289468141293699236815196553819373828280398488966665994092877680860643266914861837639322607761804740256920429518434353839878280875", "2352816897072623416220002134476921108405735955266703519252095150412419264317091785317803024028565851487861978477208755211589867803009700996828082850796103789009194767813611798769297617674631277847910238088040257037678126316866517601388289837575778165301828137259948173292658462765645645868094197736382683775415645307647043205988394700/510973411316690313485681833991645423802776865720580280058344111363363091616558230182669376841383375321912553771027107891991318313938505988903735114191313214327683449514676737796942389784957658395806951715454372568523597420866050825822028817422805046287798054682484158011143949412956697442991898914560191411624040490122951328364833797", "6403295584873165688372907494046202150046769667837790834896334486679541887567517050446119511695248926941383207478170182650927368177009669717288184903306689332746127845953193587519575304974203099873732502605739219028995266139383163062837007982999189114810534856227848568800302527760100163350814120545587074865568436789021082619398126713943637898657861949091545516403987546145915409024/1387794272010111535893205703999712437783041553900341112488641528986385462810448493444968969845352401058333929711237978223214186693177251566069419805757440174840170213159651962686467523533938145629444468366235554597245713128812532716616087753947246800626006504878203666972651384731498770435755225220796872155249202960801768048854869001310722927230237083418017482134588865244642658875", "82993247683514419570466529457059660634483860665557779709153549045427987672829778520201315148149878525274005978368939092115193636113741972236218502664881450367443614971109677363668874484696543982239492409231870942414193419634675024621942196087473557914167832058111113476295926250739099284241826553737074679953551191767148712684157318697/17950946423927357725787689855263532224005643859095168852729513034456208872420513601894508438640531171097082516559962755244698695622824386001219435651555513795509616906355363573638916895074349491513539093024980575852693293474288638209680085037286354050958859425647536735341886663074581909148323105020337857959651624760873736590065664000", "584891611376763781852144397260140844977346305541197362434227194779766612939978629636198589818106137319267243431810481928639442343946346034433828599323416877248326356345631611148749005937144684862502198147087702668524450709118588741606955966569427636630159793409544653944608958808602551061186799401212712216156799273254257486955348236914237644151956226336750212957092204830385441792/126256710861549838395499078249922986417488985866522660521294610280820007499099176190820291214370699289977888813109514854178180265382471972583921477022411657285850911270389720508719377071949050253246021921916685716353393018411683757067093259101151481189635423399611625009617884983318141463140199839724797412514785751549277231259345923662499623640886881048572831787168979644775390625", "4743054867460856425399742072925732465660626340183690464743217147109403130730445842673866624947360862438925194786600531200056131309608642363389833474026007798643235346104937733349791667694862514383520689594596660275306247615314272223660862212527346572811422915223417783887717426641317921972456913534338708745549252254865615725859881457906376/1021840037832289788284691535543138164288462770384961802287250236519983887262771944174557087207566030730743075334169628971336358708580124427857321953981475719503574867471090607795242192417162791762511940848493176847925838738242153177311649130718886794249673254183907621449520415060660496225939963471753122766421338241291756892571824984344625", "3784664074155769467702999785016514468281913375341134899878893061325465790589101335015569840325786070795267055386681356241209412947116340524588831510768864231937929260236754881829005065056310226407358204278658699999612596866156294195316867934035877283950841910726224355461522065773816109849107487214275801829843762482082803559183694631856772777313673086715631547326400170962722842240/813783281473223559981291694175087508812520505931454895884442580280342455516154674683217348039336712901850738745276445107477919518905155156380620466135946654952837573797479076027688866326359448543065305071605591497778941561986579230698384305536224430794233462949056326864499827444363206162251104552740175503996670997705423888382328014210171324376593090187604268086334796245552762333", "1946671258536842642381655747294621776070051525209940130115769153666368932042152311477746728678182920842238801763565726086459485050237860693394471644023999467670017470376746609892484192072297938254898880354014176373253875722410186683852253828299669530022166361304397631667133689128358365296701757782382475692465977794960109690362462330857/417774039698408581013003883929127512062321623871486379101498968145670269174833505080260389860863417408848209525427705249526516766731427603641806256289098209429110794311660844125377702016056984573671024035213045475132134896835814746425864304907974005950155657789157496389234919107772201305672421982198984613601511388413381215220924416000", "328578487723377153600821813410631465225159589727320893988991729306688663770697528156625398176929288628930496338036815910669579019719633124832162035588583242320537435554101841406566009219059042888412893352417446437227440076869427577701706713564212185163005644118869496869980925214424591264870388237079776503547314587137721633918824664946974571838634860386893404364499977966899068777016064/70382695927096628347637455030970644630942872888311870124896575877585692281624151103204551947776906510366521972834357031777287506848887607457751667816514216907338309372900327919413372044625602555866294337672022362865161523684052940126509854895320132828009551012639156341878073682501185688461720664801829933689280752623773789373199210473995823367199793407048741191786377993390965297664875", "2617201476921368517857942326432090876874414269689140439151907982631768946799200744678055980827789859579196832718849393046147656447672531861353456343821196812881882023188898815179947651274131166835133965629115749368441605680383605331300030886676081418867305170012032824011912531673468215561506423833911621270680104083533917562622600478548/559567121085534865189976875600841717161617153776904752351231210970240323460800785728739412474960421770806162360125774000625035522428160837855944215417821324758873127567654244465281354654299068546570789547691342609793050301258532586131013585959164719533123826201937801986942606844854123769532447570107525081084531848318874835968017578125", "636225736038986537559880265988431731529837451289737542395494683393492040808565905376235074534207026537145408562785279823547657299565440309510931336394031904920056464959974743525662459433889398003683078967642651812081450227654478095420306880762753401111260630654049389197602389949892636943971690212484981672010398108426002137114819838399222096538921225458913266993881960732663394566024064/135776510176793971074115131648637508758953050390591773574951317807919051619690313331192027871176160424663811116849856489187562728496099757910540362703888937768555824513740118941387831822900198029266206334350448626733139136083404404120210893986654422850183837974770675600952078956326317698998103770833069712616832650406225828969036781514645731022616236082175582937900731419575337473384125", "266695771933124633677367149389643417608461366874310588884377151539325854547826373711099517873721616543570605935954334944030816383858485296542260152894035979141266909050267414072982042090341712035518685997484257326212454742816979806460287972757626105526907510197321350895873473656215941034605746494172316089636216915825022339855304925515685/56811706665210352283362623728191218698295056176625217939528332247537278605113496147630185544004654583441448319260578659922931798845493756189402805173037491645434052737405379674607517658118427614090338938517963215812444779184193933749520313676564187507594274551791388039139409235056119788261689087831209441779870873305232021728002651979776", "3511806683161697708497547617957719390189982761002154386881580160856792742952365159764830433511949678304281539875366378131195670004345568047690216126001067194904446295336734931691743477531830892015690816210752795806120303198745685394015161323982229908105397857791180342330098240702332072396030780386362735967021055250450666535422528637737695053315137238368787607412459874094164027214953984/746741569878639983491390741637813989978804202898438708743258000150996080386381281307609038830698579358879333079215327202911977568726258527646560497079622703052765164031089590965199628534477381843079892123440214378949632707668935001371616475282883095939750704292616758568964786737752325652839226013335092148777788733453702438432279149298482004122593243860829060557386699231448957232420125", "499543951252504651717279461487337168721376180441322735807713499521878076780205427598086756686061009718016175215146305489885835839673419698751530207404115002383180054704927695269921072232395828258826213554806570423602966743337801741633869267620843626804016742412046844770601322513184123515405692795346790813502805238635003099976693786012816/106032986203682550514602969462803214831559442358811656484036951559991322084935692953211120289352600484987931812632505499612220494311324679562152078883141464406938524087376964935494245010636163705698220308243980789514815579319533341929989455211613890905485981353837321342730307819060825125980500975023479813757024395422041501208805339176375", "8540849722242122835873311629952985285477986765819584558233324868363310302206006773828897816547299245727087876984857726652932481899766510637403577175623031467933486823994040576431755172220921921877192006685053572215922347418846423419683723609799729359551828522978186208983138345476801247634773975311405913274552616037005854836040162212761099347518242200807692224460514057530656658616850816/1809694575992816440924165741094996511361288430727981159314194000585536832192004274726651828760263522962868944612215633976203596150606503849595633388319338251977160257979846235995654357082321611719654136058257458753105122024859078420173515189641515736029725847315662215778251370398007468665986604529263071981040014321717598469319370651877296085250322599247141397427185438573360443115234375", "51377057693118720457387330519321684810411289582445982078756989158447711080414032055843805733348558621949380554029375294451303430269197115810494758213980833379214402452992657502777067850631862453239349835215260705131864911194740832694498014048717871429797341104227759557199716944554347879767916801106279081864127192611546757627038037780244683/10867246748205139797826516105458406878398263495890048637741584969144406206902037615496936724683237700974333817527350121106320991054058406504571347680049945745432432384570515723033245430148177097144850158758462968940525568041926860856763884474605057056550146491001458649244094211354153171337463406192651150028767064600270112838159624568832000", "2517199821548153657910904242290029026229621935918771922146425373057248090467388430999870036608278542449661971830076845113363443421757278612394167195431759807908413353743377586893872930828548256216510734912027450642648789925142482023713336937258932978503310551945630359646777080073329099268529064437120002567758664419443374110941824106727218341795100740316967386497091058915066147604481280/531524260324016969370728057738851340792702640911631807178654723224511108065633433027773388768889035083734041289308124943130099580765995149865288328550751289346866467755881013217287175392101334538392596956248952430438673292186779006015549928829953979591250274457658042926539541422697852390294886719770034058916886894408015624288115732154492554105512936468520265305162358665491880968652687", "937159485027553069020805864547349554547661693803137696125140510201297417077233061462068930061915381468160677500445535971818609631674361074587732183297775728389124966713749450996643183965795829780345678634356741756033039293590264355732129789110416943789326482663579413229893878422643110852069225671783017610387570935863228248464396615988222968188/197552642195166614912991396771845374656891854357948006221100585931656016640982345159207601253599235265353060942313995345483862152489766993442419668492877390774016299878943454249209917002169480134131612530977452579520564400124908392339263545911443803619972765231094502745980083350567509014991735227390978850048088378721210219321877150756855372125", "5119346675109082499980756672052066247676641510661024682574296075659671743397880591881419516307292610449161239233139088348510165442597278965718490070997173182184417648987611422446347235659085092530927312760229499083348217392125906851921500360553758600756698605047197529446594606336369425040236883171542367713951500007600355406492128741649090501989105696576697387613035366083536629358444229248/1077349190930018641197987339365056771667455373500846354778079878558146320193384166982231171317419356136237346389570422332278447217033773023556383420372685049620361481309067017697564760747047839930422553324681218253359586320952896352245366885171583221864112040038531116947187482413031483309534553461613717398523132176948321964066833901215878133594739833910960843185464241840039390204295097875", "58469980853327028628854378052548435225264353747414624620847476036979290604604988637469977624105451959796142112200285366199247075503424204044884512269071061176877225315884188402954249683107639777479663275428465242905314418930053869461904934138752031124685541853599407727446896558064252696813370692668496452783003306386669962110734257851955001481/12284458784412533668960387046583440199646081362484321078872891438551639470826582933879934711861551014258493898870867541349962531447724393381011633785884743889445407749238183080941846528000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "632694338036291086868292541736272151517212971647680989553388199374739841494700315711180961760384484042159533979873604395621016272772109619401112452105475906812313548587880899058905419220497456502543971131226430775692744506047039958551641270070996110661036371362526401525207493270590999387476275629412687473362310414634469788979236895300129227082421021999210841384596617452097273320509348159488/132710874087075221626157136110978536488168313127228703025408943153782802265472978945703742152954881438058373686972477195846162708986982742647038014147903817539418442869011995988024638278746664230046452545499722614320284478925059527086663455478374200352375121910000967044366831275681254530914306064535110528723482282501358749001657608122307686482720926189537227492041135055090784059994118192625", "2022422468242151190347511883185841333968390991430363660248687284021524206079162212007263606819387821055183192871951076644707111802972354128011904720586729919826758651167984507804867954970064938022106484656560866447290934136610214175516487579122328055482392137619829739560923807880779865442016530712986750711199998190148885726144596663143651240/423528009127070458603837580844559347493775236970253513203186912091140251858605354218715508091394564000304400858761758838182654201653901408046974668599216804223721114331085507752600832390227068985693006017591304916519540245902645712532993889000048992026931475754508248265356181099817467608863068068953756055334213584649136541490530849577363647", "150542201776735231618709653388506394887777837646651406023174643241783006776019388336318216053045300417086929061565868663031237502137150880313922488106751241006715449458736723129545400133450376339156062387859536289694727635468338235084533552501618659272047966040838509286942825414463511175531001410923014751124732748099355476332649458471135027773371541572374016038525336728276024676601778299264/31475618522527975728853391146702172347290819252268551219771201846701658848754300838383637247014705706066050673096278897933831272607774110183488615338021656923433335661890414740664480671162459271850877855521869741833030384682549648626038314686632195158507693321505500888988183270276134667071014075017317692121986144742473139078857816578133693776368882596780120407949076129685719314703426278875", "162664351499283182546788129866259011542529017155637405328005084357078048074065548349602626724265307733005745244338982661090506394708170105916177679714664432754153795772811389612700051002336719842784098507498286260450939289109123759859710248621544296008356071415713931721102824434964336667980062728653562369697289761913925215639430496443820411811651/33956433298509232632327667206936379248172049619640091186698677954874297837764235300806836350019565970550533206216590639008637925266405524715041372407701947953283803854153876844320283735281209725651036513491246238622967031979233265136280687995181375582844780830517825595245506321879177965868747546127685256867456319112247572348416655367667187712000", "27228583713734183629451808889147559240254570554044667607519238865891084165382075658707675405673276615039702916443152954157535195508033284355580742761569101934821088036084480297442018005972653124248838420021440899368869744141698556359295489470499243402799483082406238128875386939389123336303631993557844565927960009744780823166462314116039469622216263221278402673028225214534859076857413557466368/5675134787340359276387085910732530678163604187009567576895331134521132071092293139167824957253050637085885426100206370974479279292804959049999647539684766632278449357893560561608633329561385765035738071726214510832066885156767060324427330401967034889966727638276371320401053302413136551142103678412692111973028587922399670456670380189570979581674699102934733563330382821732200682163238525390625", "1340937726818688387636018677960518622106989311577445614347061615417831160296369500704524022869612973331444242000788110133157689786976834913297544087249593601420972111789552905846168933014570399562460789075871112224533723259660967481288525220689577290386781169316008987012566216235876842757183233207943071523447855623001920854571597886491163165150556/279054368814522483241446594911968519760869180429079780837994812436395792594449929617293503975169489945136244602350941695478861584261665582123038340824700224583170270427163469762789603657025958695551448477050958557681299495041994050951692916032501884523150972841782658389836059236040091605838583126400660344344601879969354053137568588338096589095875", "8910951660339249479517731530773509037034977353457185453617569046885132434552771722727442649095007828468878374139001808825741829728375370140505088133244952288239619141544661695065318568074863317054989982620944602245967155400712702259180443238473885690297281525960618905625084639870407113029712510345262279507055197024677292523214467306898573956604928730377318210588837126450942086527893437954864000/1851573255256476362977604759655284263358595254392797078730401113550522214182030016660458780180636930591149034499142464357511158868625309442843792189394292787657774627425816694628839987456477799348874853555586931850788645677998004186437300173080088839930384424797706381282430208961565555953254145002318893188197561315855286173276564036402546798318351229978103276843822345004757661005876638005274037", "84997663352987536417038496128111159210386455419431137931308301989414462311135708114322046234708053448098538629166672456703651524480738219822858469100454933583774404032968304328859365484249897913676382909050450855222567147661842184538302991526635974158862033287154321908483007506326807469239745851379559259262425675035790574846229470041596801343087041/17634687575122715507915388096857069366146981156897230620371714518707518105157483283253374797127075689236298114335734874553183291806268149747826050838089931351158483980735336772879045027213982661634865556129548356487722537193914986994283729746578044621115589195066212043187229606921062007047940293972381121200723292297716621231320254309060321476608000", "1648849257486312935416274009474520589799750757877252390543329851029437452988499485179026845292068377957697884739052491455807688429630524210823560524122596610276957537756142278585091315141096146341773982302888007751632401090642472506538817998043326415693840862261701364114923327286462650797963969289743571514890723145251583881752876340628073395708716735192690808352188867334842743895738955762067968/341580411902962140529547622267381834425264893226447658723654120920549166416114849731588552578626041597847002946105459812230979900480135423787717825697955152193526724029890829615845314765605770060975538542976523177976182401820926854406945392167140347444433885786340415437006775075196031433365827874254477351374236932624514469241634422312990555534789607377023339236417434574755566856489013828206625", "4899626659231633406569362199187192352933567344960498139854460545644210119722856870634652562532083546344965166340063297647520613455037240144734014575196764021102614748218834054157165781057405100578668000290493431869797883155764963238760612333048336953434663867580862692267574574465371615023999531030446250351305046572267686566999209229202587258144318592/1013522377571209303732207048597964555261512342860326827024786500686692475697570284120359840724596444209277948648863014479460188496587721578075151793081823795161404110811480269106846359964436993190293615381593756076515012514100289406862487971220020752628653845345780766244842386136740768474703009091552043945843632199999007070800871588289737701416015625", "362903847358088423032098939589019598036593525722040887883164115981767777873860799955715587436566233010543937498922435963385091400670303956612881974450548904906949032005878241638546734597308786514086678561900713741746905742866635779432216761799371793260025549698865319760786921444505323758235164807966277024031605673481480590193724980659448692487108892154809490199414370023696404259691299614147712/74959603173756091922435708504751461448318819548943586676159545028063979695880930926805574951275602951047845904770828900645717477098988124553474616764040938121171776556999069351772286262529729056288451037717198273521810585868307402693261479298923209587143468206907278220909447483738730657438961435587752873879244136801168836767273934997417156543866722171766794171623224855358640156858606843576125", "8521348154958613550574095745596657249924328336262127244827955886474742319277424381360677655239017583606851483318951440691757875270001283229585075137091617073509041644097526047127618954293881264113694362598157456878784814696577083997902588926421675843291157049153701100218784481406086810264243143337016042301806376864424632290226377881206765051896745/1757584673254145109614914862134217345456065873908262753169404848658913774363650863904627183104777337461445063704655164325930891269843669860409763569362863600932267319335889540453302785099532688264425988677082044905948179153286276609910158854349711054144968131934713419772852663860893241364433872853338630216232313607969790083448433666334742108176384", "1802461420562646993856730082999823508145602238125054717836501201545920604020389361370931345491160549787411668288359013059160331370751496329806488246135100776263777863399096485894306306621852596694700845918608199329091852956315870664531614358379176680326508877329862713333336188556181470928613423972314983964578645688876556351433429494008513812136152576866650152623510296911708111085518974142728903424/371238439252064016214448115231139360835481920731625321084601566992497057371416121407293286027832357816257507287295719261141426130159269433199862002841433235955835172774430690352481806933860390015899973299268361513643524088242973968537595085600335021120523852420135081643310663869327371821064862449426404044951571585406092523478861879148545678639697679215289523234342337347529225543852787599016265125", "88795280670112240977945082069219541902481768504536167808816453021962616596410396813316064685579412429940019071114917828928080181638058444302439626425155946562362550070187433083541414569447612195370911498321149367969974762244140788494955146280201020345849385865084095189982291190135293114489407801749533448443222584092575861096946605418438181411489276/18262596223069549313969288693970246663726147886364354584825624311486557881239003216971630599389642752648815377795018130449384513824927138566203714891090017787258920529990523519479383032564209629983810866231367438270859421572641494420831435563580050954867101292568399107965982704216434467243223964964535464624988344342084084237484262612100980519602625", "752911409358158070688133336918078236438086521781731735123294741731669530734909563155732092406099003582749182967246236657021875488130304108082404134004381196925042617909108654109138702993903561036987511410396567636331465803949049946947888490287210013788802287247422993384874670368649616782837096233384279817294778916419067404863458318451722971117669642134894906235066332205740872938406767767019265664/154635332883086377656813458754577288834216641577439356891585125701020579768315520324293435008561626926046988056302745604248220408154454267643222328696606367409715369481567213640103076112146615938180089303294709009813772509602954514391675152597458428326644988225555987883250642389550531163153338541870029415077982539614784206119074702022117790679351778993541426110436276530890609137713909149169921875", "15286089077439918584953144558775765002061832952090847117286473868694909713791678395221438112006475047633028543501632631679316850512797978594476229228325228403849089079675681042224057234415951253954044235099139983386056610384489202589484570852048157272551098909455253037561994944665563291526597323199530997923272894119350512727802414680772513760081360291/3135161418037836259442831302977219750614726139657718770206960776514822107155928800694375522572523712277389679035632531727155957120566617736817225541673148354829212969778664144907503411589126111888917929495106029890532891919001138770210977012708107496187227751496980000137223047079127096028939624830654227758737339725345681745847598157538483308068864000", "17723482381737693269787076798246423310802126092500438681864673375704464394105734049099094818738115345706100191580982712146882034618103161268453808819471603805345990162762722549964406042295355916458624836894291267553138041035528315839108252422478610879301656207772491548742981990469454529537049123948604931661837539943536878260665617524824604291547373872716194154198824107266275716083848262625068958720/3630091565725887087605600771358216927099748013831912080380983545872077197366172619225751217619097657405660172801849926220948413919823038425519006413005998509677472226729295278652284861834178791332630676772284971762683579047508016687969040658592436230062049051143001484384767836353233324570686249824980508520186643477313941054900197268584495128610811273834192099099592687485176400539748616360799518357", "39160514032490258389003214587901781721548011632821053230881239001436341012396166857515197251499460842954863342641015306304854226194551189224721257664420778416733889030680295206179109679627522113592373938602737416822981698362363553492610842201005420727750505681358595340127099855823746410663750133019743170700888375554918213182862789028531284364877435896/8009919337434786244380818390213546866794958389603666737562053423775386173149395943310276429895991903753441584557917565343673605019989336264748588735390182130334278887642569515202100870042209261561001627386525182096090194076839370589780431326097965428311786635366819094633651297179987340498215947144870164066409654464551017761658775207392803825996394875", "18188388167811476762477659006849121912679763597132233588170406666718758511478154418948855160838212151370453213943784067796172102916618102024199200086478021533171984254799008541948973652219533819511807681148179806051835318645591102296256347927018942348574774821478499092054497390790734798143983945096982240517058861467440217558586822663985584775920517755909444876443211404222400335500608733284461685888/3715278241795087610941547133490827711133909145414878217965273061493740719983191775105550559905283733134189195190321643965858771461560130864714477448011225816210219450040558581571206711791272284197614810026220745160693898421068168630870850392739817340370146186703867097982858560347971281142766235850971837330222970900661653800041795020382847588362774677568059355238174402415384788280852059532958121625", "46353430636874284402376008361176880938798775506236714098123916668545331718677407145199311191108199195405139575147933283523305343027297808443653460575141799729554209181454676876263582758919969948546918471128299522715691694855904535448703118221685887195383025133924852224568922999317583667985459047407473419196367812949579858081181660610155317911318937349/9455890179897829052705408931064120820559254220394152447502395298827357144081378513080398823188243663943177539817982481713456798757563952162598464929784370305696420245648035222083207596797327498500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "13607414211126412689435920170832779523235279308039712294681570127241403406455725064605210473923965685858012114332021572088551127762628892611459785625407107300355287623761046438724706918300976102581928643740596336865698485838431972050267114940079353996100620311097561405192365496385584164725035842307146351211183443267583872067352881387294766804298681841402861626441205037637282007810811602289501477350144/2772205947240095684743358245950494400934136973845543049938212403703005150954425087866758842625041409060217562878157900197951382737615822655863548356735553650755342108183641353142157728364469706919993519071329069805875834057743793434164720370026073143626055293058601124362130539040404491770346043977106988100969901297669523170508321703496903672333781306743488573086901583022550356345156457496396749797875", "23264350093315690507131500726914401771633259602904894387312742275462601574788485574913195967854009886824436237740789910851843045306673524324611130536719802717912615609109285261163220007241492964833933975789257681755002054890453747803418465119567389315754801791950553304034666399677630030683759466627797123971742061866928213780452325847848901682792886840980/4733430508316851445525799359992627142007028326865116523033957869609125212251136452396410236930025876982265915963089597825393317909648054808274488356887197933393799241941120691826916741647173843634076299630884655997401370400734954098249519111198509015387869462198674657171808841005212058822254513429836457539629035675822719720295352508916898476137111981397", "538960934807826161927564251064896730663918579817797131801326848839524373936888402762331254883505157846659830555799909822861853145306547699817986010353774500545305596630924815657016569444824389893996399550343022444937690798126189162954188680257730893424775303801562327757655350002001080811866451425665301674688928515041429654624970707803336800125648742168380676815769457467038849213225206824671025803392/109517448833211208909213522579666376007937648875042608355810687327424621469323788799169718267715808580775296460944943658428295481347915131091297305260674731651980547668762317138753250458639043477453950774629862540017034566407286963562574188172753764978963685535201028286359818524519980885827473904574840285411260037264057197155527809916623487144493019982419606308144576939532055057697567269576800542875", "24451481554350251656598350124163983489544445991992661049829014268366250968046589127810466483349378560701491445658725080497078590986743512397927747885285095846398852574219367580068049729894667374214861939897557930527646930793431512683750733092448862551580494245486308114129295467976874843852138144539250235632985676953662288536669286915983261820949386845806781/4962240683851186225340479316959605207278948397833849899236383273145853045488131674290332609876751222112917095096150531825255611911377071887145019702433883343849119017643117746273523770961304609989779231048095665388209125939879595509516490230961558353074751312876252070889983946768175488341370453053495319823381943793679003096504200440997908071027962806272000", "166591964685609920525429719961758335887941461052357297159523350448241484106515158310298216150030768812873781356326923214637847449893575074813991141092681107583183275003570804134461187213143832123628701876041315736048451374824101256980832991214945762266748755723551899001458245164317581617731332466039757786839492869211248064662857987111284518155462148044812626055842061283907063784492325693994911811072/33765943466859756347231737285768516240749714264564410814839966011490233598006227246396923594069488496368994857718734549787000213944990695920130591750377483911116845697231074543526982580529937081378303555262933800375576494067959129682770065443667091668104132884375840812635624862495548888467575848428463895756394050252457592540570490061561616914443009224917652440212112452400106121785938739776611328125", "142464729519206642943985715465196065680101634264787375740459792619754842396453535646509170066091478069799080172299369994438836484938378991283020978342879057271045033903518255546705211647900945143546293360496661466657600494787228476009216508124736254967761901224547269496682078470378676865981855568197705507111970901389105723589666709580851611656838285777566736/28839643075889294346635430272525349651555039807615358795334663734940126053968249608601725991946342449660829847322517564370606746964714098508298705743689729306507554363954348780144675937510900983622836770223945538844314468550644543502501484521561567788992156632892028591678742014134130878101553633195551605796158103033794695984958987367799607407626319024034625", "380457154857422076784416625436182734840012277442496600178664323821064977485271288502806124740204295811759917468598315932331219906040253463960961995849761235911145436552991677050565022181516596464968316292789048809559129516930574340710998611088996508613850407294743457197519091160170604426002924022923388338999324182261954685794522778833029950214443271526469607532589775916381786492089432407550224137344640/76922142291839859196033215395526448408989799722090330866256930898223012427332209054699494033511478050536463051459450844520020426942553107946282832072826069342120835351421637970462054707566481086202287686453371483126873188020538661871147778312986131920021929455276187425940666580158173676284545586944833678819622895550345083175685846944633982680908505900099388037050135210936852210263717185637166725605577", "79999800708369666670693340813609265988600461251844239982904928629083975986385235816587497657678297663151298709076884516168798694292862559083730259839524968813932151813233366175091317046758260934357096757322369138747731224414176608247605314668045838769433811781490030635374856042786947109101585097035794969502111354126773165391577217071956928171336060247633607/16154850265413610119312596299635391433380319311682208755390341659152160578366244774029302281068833963848811596545791104919556346810193385001196395489740571188884873246131813864782581356887110499639544662322008824704830818136660544673293865921754569356583698951612797219776290835161780326945625621758204931298948625885081325268123344406261740843197232316416000", "26517014004241498798848003208133111307300592620947908933072661812816683085261359696887064436611747292468717739609776825664344064024535028242737616786238200200498291226984541942836459188328346609549239724653950302145388877472274074665166631509490297630344351573245265440164082334092997307729007429218385933622623935704482371360985836659823269511115937443161532987660855490906546130131716829909388620539153152/5348257529530073524280989257577050878033239486885664777340947102417077875628238501791711336803418503616042922880218860266611595594400020206192599559925169589023339295256084579966533260861249529670141854632965231468533448709363477120437277477668173149958267956654411822360053335695956270719680086524322530514249891157439878407417971839744392044064720476417844056346174795601710447583861127956455406902139625", "71197348290771978405602732839537012310626009318133570890482364371056186523989330157966045289127980687764218363064941391483781008265266963537623770685390148810455244349859354857421474277963009857011653865476081389968122418691934354122230780300833008753686234433642072919923583176333668289998661499146617277981691372057042930131717336250309680764289256080895092/14342680993892886303954853579883363225921109635079605392320944523109187641283117181461662846411912306480691901515655220490850586434947504504317080144378185989596578890875561336496479576651516902048606328604696610314441229321219627021610788398730173161473456954861916116391687748151443335513249810808309201830214153565966339609616397865465842187404632568359375", "342401018754023891059352629509715357053454506037284788725127073168445189422181540408896452651232759821766616850264122591225331120588918865882061344322996688880669665450231982002597398732201789017495427566260651180470635467002453249479483900268320570004293679361696197905823690145326531180324429318916092471863347575533714871355651558610515931373080997536792242278529575700808878786732127630024064418468916608/68894647682461956089382461406499759613691148650738957016015844830333168307020284281532026442272618372290646283794122772122665531108484704223311663270836645399554940741928358317884620420886609705267248656765357348477857852684140561714900614303731786621656041881975328169543884661780531057279582784036689401206706069028229798913082362331334839997133771880514515972024899408556517159759907883793675672065360125", "190286571838805495686895463752492174798162827967490343625540320679760700551286395956241059969689020885714190883323266375067607282890063444652926151862650426323339187596278760962390404656342309737428214493422028545912504503974763216230927196187743439226243880933947417760147785405444976177822143722569696182520826218120595298059020305548681823408268556482981325/38242608291912408815838081993045123864617058390583394828737640036167893859507494091864963383596867701436244007905770284939991912884465101575490548813894148831966132970730263562113961685364216989999844961688441914455435934703797359360780356482629495214859917249465567846934284121032247250332634283689409883499295469118485912489058982596725212975311140618764288", "15345379701153714436938289567639102307887273898834051456693981514956329731572600026866162286097662958712922836383881840211072389867463987895894067288699955858337488812343674818565432780224654423872618380928462939482247900055572079914753652915184313685270722583926261499687728814560680092231526501970431280783177357735398580700300402036873780385926225005561766822479878280891130232036389707452005183370152749056/3080426623087819678602049171756961824196425548529619576972793653585089380165862889092832375934535464160425580449193072125955685099151500755278763306599307218302635233595329082702148677300945556130106197481236122437978375963261172524503625593066102601042060541617791008722569799735202779005407381267021641545644264334109052258081225159748043792288699674153722046659880085850980843460715080965607434114275256125", "36443601662144279337033484452272105547257065463167427418525882851507989449375452076227652634440476502702584889057376829320548464677623038648843251719168810701744338735202853412651160681259533015293997501525430222870696235141468274274064390273214484922080219643095978640300874086585386991338440415203863901714217818222666715642467237183267303214471854472286478344/7307237990148312451155090506264642657872224684879860008436735430879314349554023096366846856470375025555139219961666754780864835035902856314981482268319886395881809659368275720375576152008289949085453326722156553603358879420820012964006978808113307340321824660484441618487292138631579616351777191144073820686595597986548374588839763719082323114663844043046087375", "1575294930860663922843149113097927168024893739962464327016763741314068438447271326302129681931564068796631337571133444163024224071270063174829664848259482066723104251718808936762938249028582992557822551950212098797718627418782376027133576209718376784834456568694813577764300716139817031545408608110880973380162736536313173329973171844528083756524804574267826691156368696436273087171467254161930265910972517504/315498546654512047637461608750018349421492986465373840347519942494904200733840189483934245529561231604050629653992944140351106887747105945984325466452136415067807666316202346895657914393512001212656936450425268507235863153258769360296536050028695266363553141327896064944506216017933135251875087069031098099192325817395958019524956320840925176589616439477134480262100237057953933117460110224783420562744140625", "7692057599553133417225997786980128299372439542315125030077404519679450372805989755158000864378924877036225189784045171045139667691524763609840822628706422918926410377185494048355128046783294954373197082851501927410350313585640237550107070936498164597231431242858771457898152684298047446530220873884022213114819556822050178579707210264243087257050468000092842761/1538814487241112760739561704846381585063002784795057066438330325566843108114787083741788078680861495340026117682606689156065008672344707615420501964123121620401073675430690541617930520947170306763541251152854304975131871537939618684186766168376514664494488691311397307418298556185724993104760692216619178358268934740746932420562664234738576394742559349407744000", "15190836470550557926140012263310230378455340797095100474720776113765300081463960235506950799869073894127884189857505951314428810423734978025409205413789025720642609035117121385453856877706229778165533034683130064865256448444765902482146676668197546098809055341050873494446231793312407516463576380102073171090898973046611572020564659042146465345334273595086941562425006763960197801018796906114925005810069684480/3035556598829526968124942916297025416522606357010637652635799096498208643970273828496655227572100159414352020909846298817521082538898702393916708804775798552206401718323929157863173504795127180177622667376867235806208021329981136637175570409791442328468473111768140746895005561471574356889047981458002257872092408771959478275534098789982899056118498417649167444480913552548249005268380838457505944462494874581", "2923754549090941424546974281011770689534961442264350984393235983189168024079617848190236639328676436485460311093391982825027512234467853098757486086492333410753919927528867817406389678461354257841007722472106464785557179844602277350411593959136520732862935740433163383885526249897183805981219416420390137516812715245569037561966929572448247077578419534651990827044/583599691615378545100950777601104007812792435102945248411439102112424251478512952087517463400054567832353967731887062349496616445419782499817548928078665212077449420216892583997505908858360011413290038645573504472422610780073975450391707084016931661068694024023083417126286468909117254531307085545768412513447197205482285022417611018126886491416133665625891075125", "441922815213568908489589193556560586318864326425397702047965372289295962228254658331201274291697626694859414786292266008476137667843874780506886929181835469302142365772763129838217316953835831059616268288399119642314758261677639945004547833810080700127847214666763863338091523753898362699222880772298183760217731228628442782431573977490761665091005756534420789258276075174436091798475838370152192077494553263232/88113527373573049332749294663402406454524640221866407165839162576979477138694653404281889227416977618913249275712917582743426231744980461918772793673202077716234026090308791893409200158969108910565467273725064769890443408324386897017825489615600787634985397885230455168591240328585041836771921929567914891379235573982442311269392541694564675053636078990836491104116280492254795616055818375774141667319774630875", "91197133767962483852278456285591810579974783077874307589555559715577599604626819245000672929518645004771085106770784762994476973842713035791487204122653245797126906189270204029735872508462106527240320932458036231707311992868347221176460407003487373754014365881209649632547685657666691589606571865740595829983849941049450471212387808617247938941417000965198123059467/18163679611214677813643455199979098261849405189805364986036911945012016248297645596270602508015864371788974684317239728239847888960155365342460843559658233069613218442910226128113196984801126248862273503232000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "733396724434554481470656964167233690851279923085197144879644750437402627936723531635898542414136943003236478432848965516925891956615111678444586384493883113385335463639674699443808084827715994137410743992130712903997815471369201406683862985677774155704267039224546352414417632475628136460919900347977754644214725932476856018335195927604771408949980634142255497812566866795799230501026066145434755838336990365184/145912495644159810313026420025053989609942265686388630266226856650796088768164358961644113076809511566125145395699271530802891523741636707532676065833327082092521989958971154798465784847092870457944857590623097781956884297103961713362268264159015928554707158239398721416218953003215109202771651993622244788505649098445109438104466256408060944298437033058380804126574878377874459371251056800895394904459469832875", "167606423853658713615749101123336326908381619586838606922565378505211386185130407423587264776519589295420758009764678759213587906216543160801059029133457062067529468464636376639307690657945597847080706144898920305379653754920571797771178341550808041652360635584401789901525709166172283390177673009483341826911179861584213314395893323035527116283758445038413646757280/33310364848744488727470761889861069993071965180756187311178124887286133554324042422503263994717993129539448310743598138364172889305532401505890384806078790034557049074169245078416704866867380089103064821732673967120808611636618526737138435792818828990403374766228037003927569643972203993263329403469747342204808360947840103843317533210523853631711601450617095736473", "22466735478643771803624909352181817912387732117378538284107485621001246177152644141853604633676939694208131243081227668237716194316732125445041260568403752325416203858329469477774720998849334961751541191761521224644520742691981372782009394826739249604257098248751626957528543558542443122470657230835176462612530464044652140581367666271771882198747182114685116336512604038833327707163107207664705120728068987996560512/4460342260599110071819142535903990817893424192972341872394014748315090430999224107274777695306032783105944721337053156074851240201179902835353097683269298594190456286888326067932777720561181760369783486872666974623910515795208353605697065447942804414120030678603538761538385793829787734830129764152263691296719726909633580318897787729004972323599773548689272008712427926734258913271101899780538635213826239542884125", "1972862002066252798837977155272535342727415329632252213508267781390870646909686724955861608046325765650407340102472833428905279473185818898693854344138403744757857928883601637909604082588338869612221777263582365745419719805587946558326048087138197694016224613118304623864709183681172362693106460535117459192992832969130895829916210933710820035479169562970982784580861/391262854245936198649509275719624152305206807261382621390946060636032376057385723427601113233050260359684153963520782285097664628279596618521963444574543409076428660874564026651742234728997339844161514273669735686516761239076529088145208958938384732800586298943281728435207452253170935715239392534815683367114290676180839217919539381651841151674859715992309727232000", "25408691426286653276004556426513401767718328640048945917745783225459709487487356095164164652218100925888847689099153320777389381851598236046402124684511968385325107497047025485302333503075085562533472482645023963717347867696861885363417595298751490212495932766872748125111115039311507374363000062513977436921772096443948159289707996749061007112458126301618769295162649600673247799961118662602756889448152517364992/5033870770817104909025512331238419776407331281944565644457345507262881100618908405924951559853352841154730802006750688581603270849880756026262217651685813584900300357685874044482329601894134443542753690048962260914642678445058891387041919581376195543193199307524572671344323361282633828144708683536721118910549933336800461248338059209853766305058943888965279863852107507075916981165164543199352920055389404296875", "616565940481577765011174617619124841631603944267256178093555235591208387588894068005162766513720546626399308168923904625210748051788652328072241494243040185611373035059619136712559505023703153194815611268503291295059648269772663939137446253437248541496631852986499688052678961495116210133458596866684413931188348798244969797973846568160999564540652111599082181871436/122025682149627484528651507368051367620578469392233875493556828623437869650284356703295836998178256875766319508797903923638967073687991229708051285605187358616531926112736402511567721889845693991963610192161413692928378708223712791930113386840109729368772998347036090902364801014045328348830748307179590755723160142468563977011700764517880467116766150322736003147125", "979882056834583241477188686550561625289337025747787132773853690143359657519481397575561812727394470125172272246774578404543257210124412718725081536309818383310896102958167337333430555168671327992395916735022711297435263157670501117734412587691271084981140167017421900852550822579410636184333142944411060788723653596377015359036101170054828623669169047118551010102258802465554033173968468183492058271365801755986560/193732066620504775981759812703028757608600125742477178751189607602983198559778039141192492589734277739017909889924488699372940787977794555519474807920198944109549023547259912324279741006975129518191081373554817584214941629021088206977532599055014150433581544599721903881284581257812850697423350805715586436114842183295730680490110793225514602133304729484547181740290534056445482186430729398701311563285494964645419", "1138059441890428903336718712159907364975959482163004276901676063186939296217569849990951930955270849692775077813359573394435924934540269310629731801376134549169322946310756738187834128956671195358413024062230774111935109203207768898525882417078119314003162592087920755572050993355843681931139257303484526223461840939880759908449181135029327442039666513325916729112853/224777393704985303260433439401503507705148576727364388720387174977154204629336985298082893443205223017966145098064861566754244624732671470935725326043491911142467178027013112527668183783450932992534517827863293825061296257420183669383719043873666284378647952385401303733274771042385666436214517205678674213118374889121542369996042313879258622144464565403138392064000", "614262617634904509410555695398092190166323289787703954329113412647342230855826568873946233136303566178604275296873234926652080462259552775254755109931312516616838091852915397846984381183732773411263828600108443070778861986849272794442105107285234729077818614332155890946804257724112143631642663084660012362691100872465148864413343598067567142977134846266425075195546265101720326272502009234689388355365794889444257557504/121200854655310345878069155190734381476914416893031941761756379148622591310152793328910334357724762079139509813381997287954319983165971628429295803162563856219211627796200599196263868781937234015821367575512548522790158101892507996780675863234181700253545912643548466256938936835469646114659598727592390628209362096738343417775009361678599075671154405137663077798419897932404104579113056038271753988669813988076515476125", "106893445531995430131837569895703697604978445859412739331042151546083234373443601923983714252801103551874986033841637079479794895452077803182698291822629713500021995241940133037200268381793282318691568234728329378829301282121562652452936297422136961147432559766896143081059518238234777055931999714973999553456547746825617168005650221542417216291412324174772893635832/21070287546583154895102927029203125577385528350171457634203261197137238923923245382493868134869009844094435068284335909266152042903157700510534904847257436666980671067329084409346149729385625108233234542133838924281113454526471855573271066865534480974484196644173270141056470857666632902827625475719738076524047736123182255306429677688129231682978570461273193359375", "1112742798776748551928744983308584493817112400536084744850969025063360679785378789764875076529575583792571198510306186417773101346425704969671256564494135750783642910394213727189639661184379341961737135764570942961692159177189753139209638929302928699705042832922774012622017270172331722295881412111812933593370743210214549038212395941675257558442878012136484052827439007483777859391215222647499741572327725689840850048/219121905514652575155579185322367175400669386131891843382447432851122462422992147756333729893028362013318264155489537138133372703295804002840920402482110260590055749843170064921843460498824128274420925357547023876488939786863662801268798987685503391058250902634999352652063668663245829496836853509616873246554292796823779397317819134891873583857621623143253788854530146303641400986028503534408870194989478421253057625", "983995170259637497940121707857673268620603982844439610076334749792119502557380361624096960070148627663305171311646851566811683351232268240169848810658089698606409195744471343416197434926513684882439596141368794175162315633192028977211909698595778839497844847281262559899914504080092844816319298286511436690429175757804604673752838786852277255064434365401871903307643705/193579499709739777577893639665643417521924510242119561765932078835121983190401762561436208758210519231103767232899529457440602166918701550386152070813526760823513884391055054076485295945972185402977095815609448651316824455250005505410192101148149284756928250258632031981439345164037318129987999546683113483700660879431801728391911161900686707231543216283304182063038464", "30691013076836380319652884848585431917439358375118437035944950498156836885409110087616602043242747413728866747975631727566613593257623099549583001362246649928075859944695060947434885707102684568632559339383409378997568182445019183928058902445738702610436187907199482604867148445903921474846103586253320950728989228898324829144701782792767763794895137313050381112872972806712570559942583906619373159053654481250809168128/6031936190594376585238407905469035598668211679521553144958053099463931217856780171872253258738635531385711702176347575597387389685526098889278278029314982721284691198967204664771178761416891317672705719303088746953644978471289001577698554025410820041497108311270431130911021653860874238212040640737171103823631718483572464361276703378587106311153455557896527384426327053165214814954154328483257657424873929502112904625", "33633002641218571027682690377239300567277297301791434890431645909447040830457253186262970747405514897340315490970846553666201190386457221846694126637998462873786334837901001833771510353365825087187582807843940479192544772559118293851131234910638705258664901225494129023244916125545283621607920983287799648992632814461828998517949449887522866259724675318233522060729654796/6603800575190864815125307817934327053530311915572323544225173935830559756077637251538096164499112411672913910767032482188570876526606118068929913515497400397562722669603861813453418621246538114872330536044519242663538662076583511078523573320035084744399535581216815034837553165853576616422592790103728141443697362408727056813977234078214386771115586436985105038873998875", "9090550743395453237608373761422705922989356346696677314277463900103283296889488490217663400349361962695279888433677856471792856853109469433355422802663947305503479561493033851081993247556828544308258821557994512133708656174864544457143793106703578476914924328960109390350040954158797845288786321215010324565010420734044059968931558099077932776525974187717655105951506223649947806568984848883258144616897526257038550656/1783219994432430133950472014582130883873515063182143523712063859964133099770763874744121895885645346884371273930727450069430704145915261127061538288702855011220545530326588799412076879985026006593893648911637986337776174555198865379578424838210466703683642106934154603710587408512357351455891557594977191641529451749437270208258072920514602243985184744955476557012910446023911358037761232253615162335336208343505859375", "396226087129511787616470716244996965529391571019620342657409150252952330537366537352182763477820160355931003174946109480036915624974500187179367618457008802667089004678925595775249725629495848146669773574395699032785024522882892752987825063933573399691764866816284097232869198405981830106568826923407996367321353003569052419999880089180418759265274331299787468134974811/77651132902382550540201641628906752945078964002822585000619340261128555048628863996784740469908853602590877726845475670110127527874088625214912598995012971630852593597027649154487264595100300180591016581254965295280089902497540043916128232871685159131211213497239568483141031137909208031392464815187505714066235868748950184065923236670418822911614780061752905170944000", "1288523130900767412477856952035690867153496584747510253984686336382980221603917538996138294311274357713893956725672062832264871415025750136690143411884111580335458539824573239771267043414225271729141508235839982033182605445173050590151912297720800168687369852280323356691345317649445843078291369394324862039143247087442309135074453265658730028145500871559458519282433012494054724678302957276371418936282902434203225600/252284450515080370603949213084529993395050575951188044032908270470514999880554862449223347761507020354321422785760279154913310488296485989979706208254206974075438570521939826124860483842758137231373182496438568202110337751291106165654945352183167578675508602832478752400011567482434301614269579368882858973850914513870297071866544875650189106576672289734326492492059816669288907018095832842249738081022227281715919357", "559506782175368748187145067236900803925823792088293851453005882621173124590368101213652371965740365119375069053747415415684193092607523211636912074219215053809881814859129515591479780669511533619258835199715146655774919418434080807837587396115955105126806762961292429904380132116986984435528307613054828929294602185927322238461491059740342387266084431988727321711184308176/109446188216864405154936682374609448082436347600301765944233278303643744736544109262794383069197271409398615846380701459882784547857821831816863216080069944818453908760476475874319791512782445408136169878207358663250499628002971644430164185578966399908622640732411885568638054229180673755690889471388585521113862492432946110902070139679164884208988489955874131206343597375", "365842109776085256207829452385781129402656684569922320812625438296958174120084800064669048017227033185969596458778213306152397766619692644694641677223213185977626940193107608138827771259334379895020377700759789774994800008933137569543592829220611543060189849601828342989023692876182148818363689293009174358168826340010491728715549904988196347316703985894355217235339548078187164176255405596310602921647203428200269666176/71497266937783826306774367225149833789788300609530680399994804704196212252148324552193149332755057982662844988588678159610516634667597707204818296457616315484973288944637139939912166034691155272078609876888919170894915224022982785138928008133003473320018151370486895637936102520353951511525996197267572355782608352075229547764732602557133494648237258900273354364050662921889937355682486287799239363976556848320046933875", "59378684894605773397070783936113244261297966863668546282887298999811950599772732377979382620766180662159460666220894896896564357533604962977968843474062092083279165837424210591042655271577974272394203253875965589611493384384257117088518521598379301169916060951350650621757237206805037261878212424267780312614942173870651684587166691539909068452932891649554575072205080763/11593916877920131260484148322810317629326850763057953025674154928920977965095141485536566217873796019006709247938019404840440511433467040918770165456925609124166970862430104329357419669175323763143377917913760028500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "440706629842402075137926797732405268015915199334341565218443748798479563505125605478061664327658137598204192554352688830679475840386882350034150077506804799859586772904929402683276898098601814091430598259347980573084686932949502809068565420937301632494387691284902026088950093888426872222813857928092871267130505744095697172494119689779474840037266295586359244899477781345249657455186847452249040895151288114085352974933708544/85971876318334010542313048056773419567285701852816309711738644074302467763075671531248793080425349570584102078764464196653843973936119037322000695949209283327606280423406302517302874806092835694196353778161663338667091195199032831587897410329509487165187753418615356836636352319310103639079123698118997500068644500893282438137614420288839230827096109835206605385673197123994357393257304049093683934224826006704198171592304125", "13220371178312284248107863849287558696210741535280184003301555188086761767176560823174196915070378763091889333203635784037294769747641959860810039816533609140662043493962707445564057197150603226797446933532133956054671103942520142568674339411250001585991743608723150284270101326419464088290151483823061613403673956918458456165552482913079283537536214967294211244361353060/2576683013797055224377707713704899315377379548630511095136568220145808780162671473907260623503552385384482723173913562423316997528913651044277418227616447815609873991028073011738113927961824632868956802271260292075825561646156680740323686126811928372672670917332613490241615850953660246271541592056143611581223295045062157404996958100136358649109693659623847024011265147", "1538372578072246705266078247950089219881197139399081643650271348770110178217959856819170325400476655944115553238940541695152110949081675985299189913515975242840473616169775880272489805123124548256666658584129873597192213080038937409046114908719298170078476325423466734429870048697383304265342125425087105698152643145531760853127801123272389134514333752173173161562273487752064850461823726948588221913540799816489566883798912/299566102446745552813544808169323270315327122249327394279467999308669285416179486075255023523726449428151807672528368606071047812907935426406886253284580296349349558797128593446316786243666290649442956134448480598303527795996222703837663605600624271807461605295956674925277658331760000117761013381199880905748188151556184620779667670278558839116983636972680749836497346863752662521197700717702790359162307617024566689271625", "281696937222363685333688097915539146272117417024070728031063821781398985795813333650547982965341298894634762289669256129805545549280355643122501181852136332529515756074502902204877664395456278205770206019663082511098956468724829475220996427130295010430751942126263620206886404244432409164651524408198286831329682605959881993845189585640874220032515465014097345759490750307207/54806274927935495596891312029173862473687610099325998583092091915101265393157631244775387832621032230434007486602816972765210205596482942091518459849775458089575743699797096697542306049628939919466378189656065461708686421130956996965004776108499273871055615413566043083634090083096967567965373203683231171594922347812966905149873265654962896456451681332216735396249206784000", "228506238533410805238253122961471637501498406104430046727793420497895852412513560203475440156216063574654372726194215013407325207763369075250819386897086702757125418327084312933061738392406321003231853349865003322697360659712771167066453430309997639548320673279964210730701373707765051246595806673865646607841876463608039111252607452843372970797479959213447237540830563469297144446069689149549515457318899981763489792/44418759813188470246596822974281932219088697005123285598909329328419879212164564561558656547678211265529803086702843380128457744445765859393426675396393053094588240457569380155526179040891009717323059641035189017918495485630657360525410506453554255734005459614858972904374739673834145083512160883402151636664208253116362089211658645312778404886460203600762546810897889629330022309705583438699250109493732452392578125", "2396110297187570506257836426251930521245117960980667897194680897478996322590925380310917400763581787981992131769075961259393685331523600287377841990678117113566991100720996059187144934569703045966210306282348527729533806882408323961336166190162075154579344185244957673138372347997134388801085788353482276257401005734929059700346687783400772331280644647089520646562669857652648/465370154262863030800729180763091967573522779260407615567563274096037297593764955820626213827962697601334935773802201919483657310282236100250543992334865461800976838791035335861420892967699843608855185710753433852279737724446294443337363478679601049432404435672469098850676302728116369979460222148206944323730586138087862719386327396334468302608499235112520318322763857676375", "1188272888075247520453568790651819187486389546755745961952033150576243575862120569399808467067800830890874391487822723879717525264875722720416173276963170672622214121308038530968291758445510982186014289745026439477197148445087614813262170975056866881909056450023324743409114115141145340480846088869807540798073417035168139476153897066325127540609756310068558610112731607522096096821938163134080426356894899245575410494080/230586762395914863625709048789913840511134004337945700368117795195769576856434588144361459740833007125516905017415184787078710001969815416281381427387949263792200577791644278234661952852149216540491852757174842146376788280677956350901082838474705227642420261641783722891948710833898248566893322144435457967452449965772543077421407816225704952270697016152452032506898311260979594550143344971416786595888053149375287120733", "1072184299258468249004114536023934869518152618369895613271618698908405514630154819453979477077738526673716264830106745031385951736108376866253955319711026042389282009348594845497252059906901748860111986811345742998968284077119165082435598381810306691078037018432766116865792677955520465319184311529667642995217214507658693259694586107847099911341219913576038605872218680562047/207882129535607118520818565811162643811811563516006836924341123976848022970024793004700710992938987476728640943834012473687892481059618823520721737479364352887178017866425027953255856440099446112508663603319745066750522936408781591578321031173620445865113295407603090322283539974563690157418931060565698315406021569491751612761888641141446406531645379264720684248398299136000", "158094023904374464057702010126993231151433474361820266584020400101533651587072432728050776506672527718975042616651177034635188178967462982926261516748842073587981953038445977514446838733557926696939591069712397947055261777416704028506441173540338327591514650398349069348381309688677335132100441905603664282735310299686268721634369502296867409514777359935022301425165750780988231639828675424239931533849896744198012747670272/30626384366513923671063955469537776291182594080083494737341604579575446319190916924682809546024369330706012653799783122328775875399363759308193432327358837772825609356553955350401725689682838701996446404559005896479618311357573203081153855961484398360670837599853294627153740224543175497655414585918231215639906924313779933211774291565425360415684556655021031131349317390382320286092667852173815259422737956767922154798375", "12216278924286401897470540169822542417611356797676160128176706721343511598951866107858729405615631246003458062949723290192242594609994613705183460814797527214549142043573863947658832694800184691222426521703728394203722420336773310908687071670107794543022567943478843065246011544888390757810534211554666736239506503613750756246364621509359804902243487113673014588325806249988332/2364584127734680580481708368927921125934330000162935118371174269642831409084634375654239735054363928748162229294829526339927907778510530444646754603322373712788147193691037688552857183116332292048731726305451516954679277320777955342295564000586923227775208580772868590742136150431152495718132142742153643081187691849828217592954519485869135930755646768375299870967864990234375", "578939195017447864385837341975558679292903716580114421030538728778491606282153588930983966100514147976321305616196463174070345884292672842497715966933722088536619333912687108737657068701352918582656105418491672377271304970407730786932913490869797471081081431072836814581099271832696990064828717287258860166842791984158634684078346453202928137987930328826212011774670396356151265781053547412633310327737900786639842674288716416/111966291649651600701875186827360807558960817589719096407887999108024557254221008849510152469119211567152616745769256123968832250104006560061907741567034087109512483357851919402017950812795426393415409198268246337542639470834168040295134130657073201020340432236723824670803498949071870597039309004562024033656488150406105175401372709011082725359382691270659245312133919518760328422827067578306005644825927050994860723405473375", "8041514821545833865350873212853873042112343327573364523948780030849543753072688526717886590013028227714585965095216381829914996539132359247488639692828639170075726301411777307168737667077730792892326979446426349813642680537699905651125068091362135055902152994216233622733424128982011248923051410141033146604688083721413402395290842738021365861670415833356403364696759583009635/1553937833499559104910551811592138833189892464446761247731330672284191313590708439680460540329836344767557599746234213006493842842879398684745864919973051635127080738612248150108793397855113122368507483429209127035263504194847798809612278864438287815470711036548695032421148125849669175729331459149833945183228413961985381338162155596008680906676498435954178226973272371625984", "12059659399309169167301353842123191409306995788633965680414620302285606896146667751472818541537183787935352700725982053536032930866708413010971856856768384974849695774437178790890015242323873769697407411558706626105140596160049735605389301414460825674631122462760014451298494875244754354054447697502521388381253293175367558014453865905104467382184997528879171136492277222127399012368677604910497789360212571238146627048080568400384/2328494054002703067219004484782931471919751585969487160602269605916676223315055450845942763690581877771159615428854802721943114463834992106300185328876910271612375509166975628540839858771078495267566008071532876816826751069408153323840515037497664871689085370699991860738368371510578076683395101062439493831773194498579620513073693022191702398601471237166387045790480861932005012807234071429628725981935147069738988682858417182625", "683009426705008850682549700382901603742691705123356866338951397347368059105140826655486518416578697931244347554322654428162554903861783227680935341690740579867651545205562690172425016836559678937794312287639193745517811234257062356826622207475918293015140472942579713388671782202262396642735640315948612572908444501108579457520714632371056288874351015666995549139003946314085696/131769214246522869780429817236150406548549044658474416909806179734873399109656411633488099249198882165279745627038984487365589625562901914030850178330133080409420340227179447548044572594184601425691821617928130423410997853384425373999967759499571890326740433081063424903098252502791477854302204200941376983295622430177445507316706609802292121282957519571162158620971952084486375", "1418116259749091420309271913909337143756589314597557128553117870573928055109322864794169592355058370891251425125187770724828108988587888087023982451205475980371440423992838481547236638456717520835668859093413956339261802305597694403381021863258753441889536361061407579332570493634254542013337999844407181346815549594836374497512447969751514466481466717590255369810506813543577735080228718660747940956248427356785784199073569408/273368882980516556922532339653303822104510203916024760371844491705599093435133738774975538364241630079468712981056336655766117378160822393876348755370711942273876284944422610974149712212944211513462921649872232656449940987552227525504529710373144228818606127541937831103642415534318303187393593236209298242574677293352798419428712873685798636474667204083938875672934235816396371477146089168375198141802684403955936431884765625", "546411077581845999248238069684194831621691193366466972898628141511422317954477211865167402284211971296286346492698354214043840080181702652132835681239302798339667835439189275457116051279366194551632712819028177402221815140045210690908631767786711675029194359998826252332434573121740830827417293557234891406021102083555472155479148332697839972702631641910213821827820374586459319/105246945889799140338072754365901705544530661781295362563214285953881890233987516230568663143342952799036341701952267011236663118111226623815975847494372076420199418712941018288738590264475520229651370015377608638075866459684692488079223686296541020897904588347083045723167762682959422858996673894180805702299907478685374065593161226849447131100462022089783265346597553176576000", "2398330640958841474772606439916070050977544535580605737383995160447105736276950196885906408317628083110923322157113892928963237845914017845444295040924101784423382681801754191301860383927129006953354739240926643562987838836997453985855576402628166875869041032631651591871962852884189548538272285387092843044669499688035134181859376665409767886188304314888753894905317929877238322615838524354191263502347881033855441181420399360/461588070868590122892265681879734295007029130965626060552783760068897000195207878227714842617470320231527222074701444349530952699708435668339712860464533455345665068841333232359698449088497137068713309811942968433868609329301082001752617420002377892756821532220676085014874112083615054550278903960627185675459015343606391094523511117705747842645927349130302549554534056269331809016770715819934970200483161548527932617036185253", "6041015879424725383006424536130409209607854044642113747266098198777011981328765528361630516108680392500990580908509403483891763219659726090675140672989657743882183951954294745396417829943469201306594018454995862321821016087416840247422350906412007336103086620396467456181771583200365740253389107968122850063607085957109965406634738740996318415514360956028575560979203447735121436/1161752799109428422288020947061281540989708937450568100764830251908850596717606701047413407636907934320789870175907792017513896999208892282137299070761467096211814586909598705615312819596495636017728313513520193786266452836805291464826226833593878504804389728477191170027729963773716267868284479768397603444919008915279522376004326398403851684761808785381609370767169521034383625", "13240077436443988749179508462267267187169441948722358165090554769250505713747934643200804819418670147225695324432684266924694524337920816452346599774452681831320005286326986675907899608537972384924882996757503264622991355949039882526389342174307168805166215838138277557052303430492669193939212362638263582899713198716541723383138016564027766560215944409353427176135895982596327685665844815618402881202645610620284792793420780517248/2544223084468158291883698813309541801455311468982232546872485444308211415529998472787377800559884210837213042932180479090277285630234238711851480232520137856848809986631784843528381778520727465146661792797924458540957133423665746229799675650290296217658444899605236550972043549278128087645211909479009099766619355677984218929672461506691980442071860591767266913041147587815452007726513853820116629482732060593116624596368806566625", "1953999166296955830935495158735359200362904181792947794529339487489730042568305997099959302322956898299616194932283060554261566410988618045107398092345476532371402134206635235570281738377188438407703089325315446371127042537576093536896282955524842632708645655481028161471313608974238110718242273935956977555610147714316158486553633871312187084618154014921190595222799283957140353/375191165084882521037046014569185165885459082629136124177286500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"];
                if (CACHE[x]) {
                    return Frac.quick.apply(null, CACHE[x].split('/'));
                }
                x = new Frac(x);
                var n = 80;
                var retval = new Frac(0);
                var a = x.subtract(new Frac(1));
                var b = x.add(new Frac(1));
                for (var i = 0; i < n; i++) {
                    var t = new Frac(2 * i + 1);
                    var k = Math2.bigpow(a.divide(b), t);
                    var r = t.clone().invert().multiply(k);
                    retval = retval.add(r);

                }
                return retval.multiply(new Frac(2));
            },
            //the factorial function but using the big library instead
            factorial: function (x) {
                var is_int = x % 1 === 0;

                /*factorial for negative integers is complex infinity according to Wolfram Alpha*/
                if (is_int && x < 0)
                    return NaN;

                if(!is_int)
                    return Math2.gamma(x+1);

                var retval = 1;
                for (var i = 2; i <= x; i++)
                    retval = retval * i;
                return retval;
            },
            //double factorial
            //http://mathworld.wolfram.com/DoubleFactorial.html
            dfactorial: function (x) {
                if (isInt(x)) {
                    var even = x % 2 === 0;
                    /* If x = even then n = x/2 else n = (x-1)/2*/
                    var n = even ? x / 2 : (x + 1) / 2;
                    /*the return value*/
                    var r = new Frac(1);
                    /*start the loop*/
                    if (even)
                        for (var i = 1; i <= n; i++)
                            r = r.multiply(new Frac(2).multiply(new Frac(i)));
                    else
                        for (var i = 1; i <= n; i++)
                            r = r.multiply(new Frac(2).multiply(new Frac(i)).subtract(new Frac(1)));
                }
                else {
                    /*Not yet extended to bigNum*/
                    r = Math.pow(2, (1 + 2 * x - Math.cos(Math.PI * x)) / 4) * Math.pow(Math.PI, (Math.cos(Math.PI * x) - 1) / 4) * Math2.gamma(1 + x / 2);
                }

                /*done*/
                return r;
            },
            GCD: function () {
                var args = arrayUnique([].slice.call(arguments)
                        .map(function (x) {
                            return Math.abs(x);
                        })).sort(),
                        a = Math.abs(args.shift()),
                        n = args.length;

                while (n-- > 0) {
                    var b = Math.abs(args.shift());
                    while (true) {
                        a %= b;
                        if (a === 0) {
                            a = b;
                            break;
                        }
                        b %= a;
                        if (b === 0)
                            break;
                    }
                }
                return a;
            },
            QGCD: function () {
                var args = [].slice.call(arguments);
                var a = args[0];
                for (var i = 1; i < args.length; i++) {
                    var b = args[i];
                    var sign = a.isNegative() && b.isNegative() ? -1 : 1;
                    a = b.gcd(a);
                    if (sign < 0)
                        a.negate();
                }
                return a;
            },
            LCM: function (a, b) {
                return (a * b) / Math2.GCD(a, b);
            },
            //pow but with the handling of negative numbers
            //http://stackoverflow.com/questions/12810765/calculating-cubic-root-for-negative-number
            pow: function (b, e) {
                if (b < 0) {
                    if (Math.abs(e) < 1) {
                        /*nth root of a negative number is imaginary when n is even*/
                        if (1 / e % 2 === 0)
                            return NaN;
                        return -Math.pow(Math.abs(b), e);
                    }
                }
                return Math.pow(b, e);
            },
            factor: function (n) {
                n = Number(n);
                var sign = Math.sign(n); /*store the sign*/
                /*move the number to absolute value*/
                n = Math.abs(n);
                var ifactors = Math2.ifactor(n);
                var factors = new Symbol();
                factors.symbols = {};
                factors.group = CB;
                for (var x in ifactors) {
                    var factor = new Symbol(1);
                    factor.group = P; /*cheat a little*/
                    factor.value = x;
                    factor.power = new Symbol(ifactors[x]);
                    factors.symbols[x] = factor;
                }
                factors.updateHash();

                if(n === 1) {
                    factors = new Symbol(n);
                }

                /*put back the sign*/
                if(sign < 0)
                    factors.negate();

                return factors;
            },
            /**
             * Uses trial division
             * @param {Integer} n - the number being factored
             * @param {object} factors -  the factors object
             * @returns {object}
             */
            sfactor: function (n, factors) {
                factors = factors || {};
                var r = Math.floor(Math.sqrt(n));
                var lcprime = PRIMES[PRIMES.length - 1];
                /*a one-time cost... Hopefully ... And don't bother for more than a million*/
                /*takes too long*/
                if (r > lcprime && n < 1e6)
                    generatePrimes(r);
                var l = PRIMES.length;
                for (var i = 0; i < l; i++) {
                    var prime = PRIMES[i];
                    /*trial division*/
                    while (n % prime === 0) {
                        n = n / prime;
                        factors[prime] = (factors[prime] || 0) + 1;
                    }
                }
                if (n > 1)
                    factors[n] = 1;
                return factors;
            },
            /**
             * Pollard's rho
             * @param {Integer} n
             * @returns {object}
             */
            ifactor: function (n) {
                var input = new bigInt(n);
                
                n = String(n);

                if (n === '0')
                    return {'0': 1};
                n = new bigInt(n); /*convert to bigInt for safety*/
                var sign = n.sign ? -1 : 1;
                n = n.abs();
                var factors = {}; /*factor object being returned.*/
                if (n.lt('65536')) { /*less than 2^16 just use trial division*/
                    factors = Math2.sfactor(n, factors);
                }
                else {
                    var add = function (e) {
                        if (!e.isPrime()) {
                            factors = Math2.sfactor(e, factors);
                        }
                        else
                            factors[e] = (factors[e] || 0) + 1;
                    };

                    try {
                        //set a safety
                        var max = 1e3;
                        var safety = 0;

                        while (!n.abs().equals(1)) {
                            if (n.isPrime()) {
                                add(n);
                                break;
                            }
                            else {
                                function rho(c) {
                                    var xf = new bigInt(c),
                                            cz = 2,
                                            x = new bigInt(c),
                                            factor = new bigInt(1);

                                    while (factor.equals(1)) {
                                        for (var i = 0; i <= cz && factor.equals(1); i++) {
                                            //trigger the safety
                                            if(safety++ > max)
                                                throw new Error('stopping');

                                            x = x.pow(2).add(1).mod(n);
                                            factor = bigInt.gcd(x.minus(xf).abs(), n);
                                        }

                                        cz = cz * 2;
                                        xf = x;
                                    }
                                    if (factor.equals(n)) {
                                        return rho(c + 1);
                                    }
                                    return factor;
                                }
                                var factor = rho(2);
                                add(factor);
                                /*divide out the factor*/
                                n = n.divide(factor);
                            }
                        }
                    }
                    catch(e) {
                        //reset factors
                        factors = {};
                        add(input);
                    }

                }

                /*put the sign back*/
                if (sign === -1) {
                    var sm = arrayMin(keys(factors)); /*/get the smallest number*/
                    factors['-' + sm] = factors[sm];
                    delete factors[sm];
                }

                return factors;
            },
            //factors a number into rectangular box. If sides are primes that this will be
            //their prime factors. e.g. 21 -> (7)(3), 133 -> (7)(19)
            boxfactor: function (n, max) {
                max = max || 200; //stop after this number of iterations
                var c, r,
                        d = Math.floor((5 / 12) * n), //the divisor
                        i = 0, //number of iterations
                        safety = false;
                while (true) {
                    c = Math.floor(n / d);
                    r = n % d;
                    if (r === 0)
                        break; //we're done
                    if (safety)
                        return [n, 1];
                    d = Math.max(r, d - r);
                    i++;
                    safety = i > max;
                }
                return [c, d, i];
            },
            fib: function (n) {
                var sign = Math.sign(n);
                n = Math.abs(n);
                sign = even(n) ? sign : Math.abs(sign);
                var a = 0, b = 1, f = 1;
                for (var i = 2; i <= n; i++) {
                    f = a + b;
                    a = b;
                    b = f;
                }
                return f * sign;
            },
            mod: function (x, y) {
                return x % y;
            },
            //http://mathworld.wolfram.com/IntegerPart.html
            integer_part: function (x) {
                var sign = Math.sign(x);
                return sign * Math.floor(Math.abs(x));
            },
            simpson: function (f, a, b, step) {
                var get_value = function (f, x, side) {
                    var v = f(x);
                    var d = 0.000000000001;
                    if (isNaN(v)) {
                        v = f(side === 1 ? x + d : x - d);
                    }
                    return v;
                };

                step = step || 0.0001;
                //calculate the number of intervals
                var n = Math.abs(Math.floor((b - a) / step));
                //simpson's rule requires an even number of intervals. If it's not then add 1
                if (n % 2 !== 0)
                    n++;
                //get the interval size
                var dx = (b - a) / n;
                //get x0
                var retval = get_value(f, a, 1);

                //get the middle part 4x1+2x2+4x3 ...
                //but first set a flag to see if it's even or odd.
                //The first one is odd so we start there
                var even = false;
                //get x1
                var xi = a + dx;
                //the coefficient
                var c, k;
                //https://en.wikipedia.org/wiki/Simpson%27s_rule
                for (var i = 1; i < n; i++) {
                    c = even ? 2 : 4;
                    k = c * get_value(f, xi, 1);
                    retval += k;
                    //flip the even flag
                    even = !even;
                    //increment xi
                    xi += dx;
                }

                //add xn
                return (retval + get_value(f, xi, 2)) * (dx / 3);

            },
            /**
             * https://github.com/scijs/integrate-adaptive-simpson
             * @param {Function} f - the function being integrated
             * @param {Number} a - lower bound
             * @param {Number} b - upper bound
             * @param {Number} tol - step width
             * @param {Number} maxdepth
             * @returns {Number}
             */
            num_integrate: function (f, a, b, tol, maxdepth) {
                if (maxdepth < 0)
                    throw new Error('max depth cannot be negative');

                /* This algorithm adapted from pseudocode in:*/
                /* http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf*/
                function adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {
                    if (state.nanEncountered) {
                        return NaN;
                    }
                    var h, f1, f2, sl, sr, s2, m, V1, V2, err;
                    h = b - a;
                    f1 = f(a + h * 0.25);
                    f2 = f(b - h * 0.25);
                    /* Simple check for NaN:*/
                    if (isNaN(f1)) {
                        state.nanEncountered = true;
                        return;
                    }
                    /* Simple check for NaN:*/
                    if (isNaN(f2)) {
                        state.nanEncountered = true;
                        return;
                    }

                    sl = h * (fa + 4 * f1 + fm) / 12;
                    sr = h * (fm + 4 * f2 + fb) / 12;
                    s2 = sl + sr;
                    err = (s2 - V0) / 15;

                    if (state.maxDepthCount > 1000 * maxdepth) {
                        return;
                    }


                    if (depth > maxdepth) {
                        state.maxDepthCount++;
                        return s2 + err;
                    }
                    else if (Math.abs(err) < tol) {
                        return s2 + err;
                    }
                    else {
                        m = a + h * 0.5;
                        V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);
                        if (isNaN(V1)) {
                            state.nanEncountered = true;
                            return NaN;
                        }
                        V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);

                        if (isNaN(V2)) {
                            state.nanEncountered = true;
                            return NaN;
                        }

                        return V1 + V2;
                    }
                }

                function integrate(f, a, b, tol, maxdepth) {
                    var state = {
                        maxDepthCount: 0,
                        nanEncountered: false
                    };

                    if (tol === undefined) {
                        tol = 1e-9;
                    }
                    if (maxdepth === undefined) {
                        /*Issue #458 - This was lowered because of performance issues. */
                        /*This was suspected from before but is now confirmed with this issue*/
                        maxdepth = 45;
                    }

                    var fa = f(a);
                    var fm = f(0.5 * (a + b));
                    var fb = f(b);

                    var V0 = (fa + 4 * fm + fb) * (b - a) / 6;

                    var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);

                    if (state.maxDepthCount > 0) {
                        warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');
                    }

                    if (state.nanEncountered) {
                        throw new Error('Function does not converge over interval!');
                    }

                    return result;
                }
                var retval;

                try {
                    retval = integrate(f, a, b, tol, maxdepth);
                }
                catch (e) {
                    /*fallback to non-adaptive*/
                    return Math2.simpson(f, a, b);
                }
                return nround(retval, 12);
            },
            //https://en.wikipedia.org/wiki/Trigonometric_integral
            //CosineIntegral
            Ci: function (x) {
                var n = 20,
                        /*roughly Euler–Mascheroni*/
                        g = 0.5772156649015329,
                        sum = 0;
                for (var i = 1; i < n; i++) {
                    /*cache 2n*/
                    var n2 = 2 * i;
                    sum += (Math.pow(-1, i) * Math.pow(x, n2)) / (n2 * Math2.factorial(n2));
                }
                return Math.log(x) + g + sum;
            },
            /*SineIntegral*/
            Si: function (x) {
                var n = 20,
                        sum = 0;
                for (var i = 0; i < n; i++) {
                    var n2 = 2 * i;
                    sum += (Math.pow(-1, i) * Math.pow(x, n2 + 1)) / ((n2 + 1) * Math2.factorial(n2 + 1));
                }
                return sum;
            },
            /*ExponentialIntegral*/
            Ei: function (x) {
                if (Number(x) === 0)
                    return -Infinity;
                var n = 30,
                        g = 0.5772156649015328606, /*roughly Euler–Mascheroni*/
                        sum = 0;
                for (var i = 1; i < n; i++) {
                    sum += Math.pow(x, i) / (i * Math2.factorial(i));
                }
                return g + Math.abs(Math.log(x)) + sum;
            },
            /*Hyperbolic Sine Integral*/
            /*http://mathworld.wolfram.com/Shi.html*/
            Shi: function (x) {
                var n = 30,
                        sum = 0,
                        k, t;
                for (var i = 0; i < n; i++) {
                    k = 2 * i;
                    t = k + 1;
                    sum += Math.pow(x, t) / (t * t * Math2.factorial(k));
                }
                return sum;
            },
            /*the cosine integral function*/
            Chi: function (x) {
                var dx, g, f;
                dx = 0.001;
                g = 0.5772156649015328606;
                f = function (t) {
                    return (Math.cosh(t) - 1) / t;
                };
                return Math.log(x) + g + Math2.num_integrate(f, 0.002, x, dx);
            },
            /*the log integral*/
            Li: function (x) {
                return Math2.Ei(Math2.bigLog(x));
            },
            /*the gamma incomplete function*/
            gamma_incomplete: function (n, x) {
                var t = n - 1,
                        sum = 0,
                        x = x || 0;
                for (var i = 0; i < t; i++) {
                    sum += Math.pow(x, i) / Math2.factorial(i);
                }
                return Math2.factorial(t) * Math.exp(-x) * sum;
            },
            /*
             * Heaviside step function - Moved from Special.js (originally contributed by Brosnan Yuen)
             * Specification : http://mathworld.wolfram.com/HeavisideStepFunction.html
             * if x > 0 then 1
             * if x == 0 then 1/2
             * if x < 0 then 0
             */
            step: function (x) {
                if (x > 0)
                    return 1;
                if (x < 0)
                    return 0;
                return 0.5;
            },
            /*
             * Rectangle function - Moved from Special.js (originally contributed by Brosnan Yuen)
             * Specification : http://mathworld.wolfram.com/RectangleFunction.html
             * if |x| > 1/2 then 0
             * if |x| == 1/2 then 1/2
             * if |x| < 1/2 then 1
             */
            rect: function (x) {
                var x = Math.abs(x);
                if (x === 0.5)
                    return x;
                if (x > 0.5)
                    return 0;
                return 1;
            },
            /*
             * Sinc function - Moved from Special.js (originally contributed by Brosnan Yuen)
             * Specification : http://mathworld.wolfram.com/SincFunction.html
             * if x == 0 then 1
             * otherwise sin(x)/x
             */
            sinc: function (x) {
                if (x.equals(0))
                    return 1;
                return Math.sin(x) / x;
            },
            /*
             * Triangle function - Moved from Special.js (originally contributed by Brosnan Yuen)
             * Specification : http://mathworld.wolfram.com/TriangleFunction.html
             * if |x| >= 1 then 0
             * if |x| < then 1-|x|
             */
            tri: function (x) {
                x = Math.abs(x);
                if (x >= 1)
                    return 0;
                return 1 - x;
            },
            //https://en.wikipedia.org/wiki/Nth_root_algorithm
            nthroot: function (A, n) {
                /*make sure the input is of type Frac*/
                if (!(A instanceof Frac))
                    A = new Frac(A.toString());
                if (!(n instanceof Frac))
                    n = new Frac(n.toString());
                if (n.equals(1))
                    return A;
                /*begin algorithm*/
                var xk = A.divide(new Frac(2)); /*x0*/
                var e = new Frac(1e-15);
                var dk, dk0, d0;
                var a = n.clone().invert(),
                        b = n.subtract(new Frac(1));
                do {
                    var powb = Math2.bigpow(xk, b);
                    var dk_dec = a.multiply(A.divide(powb).subtract(xk)).toDecimal(25);
                    dk = Frac.create(dk_dec);
                    if (d0)
                        break;

                    xk = xk.add(dk);
                    /*check to see if there's no change from the last xk*/
                    var dk_dec = dk.toDecimal();
                    d0 = dk0 ? dk0 === dk_dec : false;
                    dk0 = dk_dec;
                }
                while (dk.abs().gte(e))

                return xk;
            },
            /*https://gist.github.com/jiggzson/0c5b33cbcd7b52b36132b1e96573285f*/
            /*Just the square root function but big :)*/
            sqrt: function (n) {
                if (!(n instanceof Frac))
                    n = new Frac(n);
                var xn, d, ld, same_delta;
                var c = 0; /*counter*/
                var done = false;
                var delta = new Frac(1e-20);
                xn = n.divide(new Frac(2));
                var safety = 1000;
                do {
                    /*break if we're not converging*/
                    if (c > safety)
                        throw new Error('Unable to calculate square root for ' + n);
                    xn = xn.add(n.divide(xn)).divide(new Frac(2));
                    xn = new Frac(xn.decimal(30));
                    /*get the difference from the true square*/
                    d = n.subtract(xn.multiply(xn));
                    /*if the square of the calculated number is close enough to the number*/
                    /*we're getting the square root or the last delta was the same as the new delta*/
                    /*then we're done*/
                    same_delta = ld ? ld.equals(d) : false;
                    if (d.clone().abs().lessThan(delta) || same_delta)
                        done = true;
                    /*store the calculated delta*/
                    ld = d;
                    c++; /*increase the counter*/
                }
                while (!done)

                return xn;
            }
        };
        //link the Math2 object to Settings.FUNCTION_MODULES
        Settings.FUNCTION_MODULES.push(Math2);
        reserveNames(Math2); //reserve the names in Math2


    //Polyfills ====================================================================
        //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/
        Math.sign = Math.sign || function (x) {
            x = +x; // convert to a number
            if (x === 0 || isNaN(x)) {
                return x;
            }
            return x > 0 ? 1 : -1;
        };

        Math.cosh = Math.cosh || function (x) {
            var y = Math.exp(x);
            return (y + 1 / y) / 2;
        };

        Math.sech = Math.sech || function (x) {
            return 1 / Math.cosh(x);
        };

        Math.csch = Math.csch || function (x) {
            return 1 / Math.sinh(x);
        };

        Math.coth = Math.coth || function (x) {
            return 1 / Math.tanh(x);
        };

        Math.sinh = Math.sinh || function (x) {
            var y = Math.exp(x);
            return (y - 1 / y) / 2;
        };

        Math.tanh = Math.tanh || function (x) {
            if (x === Infinity) {
                return 1;
            }
            else if (x === -Infinity) {
                return -1;
            }
            else {
                var y = Math.exp(2 * x);
                return (y - 1) / (y + 1);
            }
        };

        Math.asinh = Math.asinh || function (x) {
            if (x === -Infinity) {
                return x;
            }
            else {
                return Math.log(x + Math.sqrt(x * x + 1));
            }
        };

        Math.acosh = Math.acosh || function (x) {
            return Math.log(x + Math.sqrt(x * x - 1));
        };

        Math.atanh = Math.atanh || function (x) {
            return Math.log((1 + x) / (1 - x)) / 2;
        };

        Math.log10 = Math.log10 || function (x) {
            return Math.log(x) * Math.LOG10E;
        };

        Math.trunc = Math.trunc || function (x) {
            if (isNaN(x)) {
                return NaN;
            }
            if (x > 0) {
                return Math.floor(x);
            }
            return Math.ceil(x);
        };

    //Global functions =============================================================
        /**
         * This method will return a hash or a text representation of a Symbol, Matrix, or Vector.
         * If all else fails it *assumes* the object has a toString method and will call that.
         *
         * @param {Object} obj
         * @param {String} option get is as a hash
         * @param {int} useGroup
         * @returns {String}
         */
        function text(obj, option, useGroup, decp) {
            var asHash = option === 'hash',
                //whether to wrap numbers in brackets
                wrapCondition = undefined,
                opt = asHash ? undefined : option,
                asDecimal = opt === 'decimal' || opt === 'decimals';

            if(asDecimal && typeof decp === 'undefined')
                decp = 16;

            function toString(obj) {
                switch (option)
                {
                    case 'decimals':
                    case 'decimal':
                        wrapCondition = wrapCondition || function (str) {
                            return false;
                        };
                        return obj.valueOf();
                    case 'recurring':
                        wrapCondition = wrapCondition || function (str) {
                            return str.indexOf("'") !== -1;
                        };

                        var str = obj.toString();
                        //verify that the string is actually a fraction
                        var frac = /^-?\d+(?:\/\d+)?$/.exec(str);
                        if (frac.length === 0)
                            return str;

                        //split the fraction into the numerator and denominator
                        var parts = frac[0].split('/');
                        var negative = false;
                        var m = Number(parts[0]);
                        if (m < 0) {
                            m = -m;
                            negative = true;
                        }
                        var n = Number(parts[1]);
                        if (!n)
                            n = 1;

                        //https://softwareengineering.stackexchange.com/questions/192070/what-is-a-efficient-way-to-find-repeating-decimal#comment743574_192081
                        var quotient = Math.floor(m / n), c = 10 * (m - quotient * n);
                        quotient = quotient.toString() + ".";
                        while (c && c < n) {
                            c *= 10;
                            quotient += "0";
                        }
                        var digits = "", passed = [], i = 0;
                        while (true) {
                            if (typeof passed[c] !== 'undefined') {
                                var prefix = digits.slice(0, passed[c]),
                                        cycle = digits.slice(passed[c]),
                                        result = quotient + prefix + "'" + cycle + "'";
                                return (negative ? "-" : "") + result.replace("'0'", "").replace(/\.$/, "");
                            }
                            var q = Math.floor(c / n), r = c - q * n;
                            passed[c] = i;
                            digits += q.toString();
                            i += 1;
                            c = 10 * r;
                        }
                    case 'mixed':
                        wrapCondition = wrapCondition || function (str) {
                            return str.indexOf('/') !== -1;
                        };

                        var str = obj.toString();
                        //verify that the string is actually a fraction
                        var frac = /^-?\d+(?:\/\d+)?$/.exec(str);
                        if (frac.length === 0)
                            return str;

                        //split the fraction into the numerator and denominator
                        var parts = frac[0].split('/');
                        var numer = new bigInt(parts[0]);
                        var denom = new bigInt(parts[1]);
                        if (denom.equals(0))
                            denom = new bigInt(1);

                        //return the quotient plus the remainder
                        var divmod = numer.divmod(denom);
                        var quotient = divmod.quotient;
                        var remainder = divmod.remainder;
                        var operator = parts[0][0] === '-' || quotient.equals(0) || remainder.equals(0) ? '' : '+';
                        return (quotient.equals(0) ? '' : quotient.toString()) + operator + (remainder.equals(0) ? '' : (remainder.toString() + '/' + parts[1]));
                    case 'scientific':
                        wrapCondition = wrapCondition || function(str) {
                            return false;
                        };
                        return new Scientific(obj.valueOf()).toString(Settings.SCIENTIFIC_MAX_DECIMAL_PLACES);
                    default:
                        wrapCondition = wrapCondition || function (str) {
                            return str.indexOf('/') !== -1;
                        };

                        return obj.toString();
                }
            }

            //if the object is a symbol
            if (isSymbol(obj)) {
                var multiplier = '',
                        power = '',
                        sign = '',
                        group = obj.group || useGroup,
                        value = obj.value;

                //if the value is to be used as a hash then the power and multiplier need to be suppressed
                if (!asHash) {
                    //use asDecimal to get the object back as a decimal
                    var om = toString(obj.multiplier);
                    if (om == '-1' && String(obj.multiplier) === '-1') {
                        sign = '-';
                        om = '1';
                    }
                    //only add the multiplier if it's not 1
                    if (om != '1')
                        multiplier = om;
                    //use asDecimal to get the object back as a decimal
                    var p = obj.power ? toString(obj.power) : '';
                    //only add the multiplier
                    if (p != '1') {
                        //is it a symbol
                        if (isSymbol(p)) {
                            power = text(p, opt);
                        }
                        else {
                            power = p;
                        }
                    }
                }

                switch (group) {
                    case N:
                        multiplier = '';
                        //round if requested
                        var m = decp && asDecimal ? obj.multiplier.toDecimal(decp) : toString(obj.multiplier);
                        //if it's numerical then all we need is the multiplier
                        value = String(obj.multiplier) == '-1' ? '1' : m;
                        power = '';
                        break;
                    case PL:
                        value = obj.collectSymbols().map(function(x) {
                            var txt = text(x, opt, useGroup, decp);
                            if(txt == '0')
                                txt = '';
                            return txt;
                        }).sort().join('+').replace(/\+\-/g, '-');
                        break;
                    case CP:
                        value = obj.collectSymbols().map(function(x) {
                            var txt = text(x, opt, useGroup, decp);
                            if(txt == '0')
                                txt = '';
                            return txt;
                        }).sort().join('+').replace(/\+\-/g, '-');
                        break;
                    case CB:
                        value = obj.collectSymbols(function (symbol) {
                            var g = symbol.group;
                            //both groups will already be in brackets if their power is greater than 1
                            //so skip it.
                            if ((g === PL || g === CP) && (symbol.power.equals(1) && symbol.multiplier.equals(1))) {
                                return inBrackets(text(symbol, opt));
                            }
                            return text(symbol, opt);
                        }).join('*');
                        break;
                    case EX:
                        var pg = obj.previousGroup,
                                pwg = obj.power.group;

                        //PL are the exception. It's simpler to just collect and set the value
                        if (pg === PL)
                            value = obj.collectSymbols(text, opt).join('+').replace('+-', '-');
                        if (!(pg === N || pg === S || pg === FN) && !asHash) {
                            value = inBrackets(value);
                        }

                        if ((pwg === CP || pwg === CB || pwg === PL || obj.power.multiplier.toString() != '1') && power) {
                            power = inBrackets(power);
                        }
                        break;
                }

                if (group === FN) {
                    value = obj.fname + inBrackets(obj.args.map(function (symbol) {
                        return text(symbol, opt);
                    }).join(','));
                }
                //TODO: Needs to be more efficient. Maybe.
                if (group === FN && obj.fname in CUSTOM_OPERATORS) {
                    var a = text(obj.args[0]);
                    var b = text(obj.args[1]);
                    if (obj.args[0].isComposite()) //preserve the brackets
                        a = inBrackets(a);
                    if (obj.args[1].isComposite()) //preserve the brackets
                        b = inBrackets(b);
                    value = a + CUSTOM_OPERATORS[obj.fname] + b;
                }
                //wrap the power since / is less than ^
                //TODO: introduce method call isSimple
                if (power && group !== EX && wrapCondition(power)) {
                    power = inBrackets(power);
                }

                //the following groups are held together by plus or minus. They can be raised to a power or multiplied
                //by a multiplier and have to be in brackets to preserve the order of precedence
                if (((group === CP || group === PL) && (multiplier && multiplier != '1' || sign === '-'))
                        || ((group === CB || group === CP || group === PL) && (power && power != '1'))
                        || !asHash && group === P && value == -1
                        || obj.fname === PARENTHESIS) {

                    value = inBrackets(value);
                }

                if(decp && (option === 'decimal' || option === 'decimals' && multiplier)) {
                    multiplier = nround(multiplier, decp);
                }

                //add the sign back
                var c = sign + multiplier;

                if (multiplier && wrapCondition(multiplier))
                    c = inBrackets(c);

                if (power < 0)
                    power = inBrackets(power);

                //add the multiplication back
                if (multiplier)
                    c = c + '*';

                if (power)
                    power = Settings.POWER_OPERATOR + power;

                //this needs serious rethinking. Must fix
                if (group === EX && value.charAt(0) === '-')
                    value = inBrackets(value);

                var cv = c + value;

                if (obj.parens)
                    cv = inBrackets(cv);

                return cv + power;
            }
            else if (isVector(obj)) {
                var l = obj.elements.length,
                        c = [];
                for (var i = 0; i < l; i++)
                    c.push(obj.elements[i].text(option));
                return '[' + c.join(',') + ']';
            }
            else {
                try {
                    return obj.toString();
                }
                catch (e) {
                    return '';
                }
            }
        }
        /**
         * Calculates prime factors for a number. It first checks if the number
         * is a prime number. If it's not then it will calculate all the primes 
         * for that number.
         * @param {int} num
         * @returns {Array}
         */

        function primeFactors(num) {
            if (isPrime(num))
                return [num];
            var l = num, i = 1, factors = [],
                    epsilon = 2.2204460492503130808472633361816E-16;
            while (i < l) {
                var quotient = num / i;
                var whole = Math.floor(quotient);
                var remainder = quotient - whole;
                if (remainder <= epsilon && i > 1) {
                    // If the prime wasn't found but calculated then save it and
                    // add it as a factor.
                    if(isPrime(i)) {
                        if (PRIMES.indexOf(i) === -1) {
                            PRIMES.push(i);
                        }
                        factors.push(i);
                    }
                        
                    l = whole;
                }
                i++;
            }

            return factors.sort(function (a, b) {
                return a - b;
            });
        }
    //Expression ===================================================================
        /**
         * This is what nerdamer returns. It's sort of a wrapper around the symbol class and
         * provides the user with some useful functions. If you want to provide the user with extra
         * library functions then add them to this class's prototype.
         * @param {Symbol} symbol
         * @returns {Expression} wraps around the Symbol class
         */
        function Expression(symbol) {
            //we don't want arrays wrapped
            this.symbol = symbol;
        }
        /**
         * Returns stored expression at index. For first index use 1 not 0.
         * @param {bool} asType
         * @param {Integer} expression_number
         */
        Expression.getExpression = function (expression_number, asType) {
            if (expression_number === 'last' || !expression_number)
                expression_number = EXPRESSIONS.length;
            if (expression_number === 'first')
                expression_number = 1;
            var index = expression_number - 1,
                    expression = EXPRESSIONS[index],
                    retval = expression ? new Expression(expression) : expression;
            return retval;
        };
        Expression.prototype = {
            /**
             * Returns the text representation of the expression
             * @param {String} opt - option of formatting numbers
             * @param {Number} n The number of significant figures
             * @returns {String}
             */
            text: function (opt, n) {
                n = n || 19;
                opt = opt || 'decimals';
                if (this.symbol.text_)
                    return this.symbol.text_(opt);

                return text(this.symbol, opt, undefined, n);
            },
            /**
             * Returns the latex representation of the expression
             * @param {String} option - option for formatting numbers
             * @returns {String}
             */
            latex: function (option) {
                if (this.symbol.latex)
                    return this.symbol.latex(option);
                return LaTeX.latex(this.symbol, option);
            },
            valueOf: function () {
                return this.symbol.valueOf();
            },

            /**
             * Evaluates the expression and tries to reduce it to a number if possible.
             * If an argument is given in the form of %{integer} it will evaluate that expression.
             * Other than that it will just use it's own text and reparse
             * @returns {Expression}
             */
            evaluate: function () {

                var first_arg = arguments[0], expression, idx = 1;

                //Enable getting of expressions using the % so for example %1 should get the first expression
                if (typeof first_arg === 'string') {
                    expression = (first_arg.charAt(0) === '%') ? Expression.getExpression(first_arg.substr(1)).text() : first_arg;
                }
                else if (first_arg instanceof Expression || isSymbol(first_arg)) {
                    expression = first_arg.text();
                }
                else {
                    expression = this.symbol.text();
                    idx--;
                }

                var subs = arguments[idx] || {};

                var retval = new Expression(block('PARSE2NUMBER', function () {
                    return _.parse(expression, subs);
                }, true));

                return retval;
            },
            /**
             * Converts a symbol to a JS function. Pass in an array of variables to use that order instead of
             * the default alphabetical order
             * @param vars {Array}
             */
            buildFunction: function (vars) {
                return Build.build(this.symbol, vars);
            },
            /**
             * Checks to see if the expression is just a plain old number
             * @returns {boolean}
             */
            isNumber: function () {
                return isNumericSymbol(this.symbol);
            },
            /**
             * Checks to see if the expression is infinity
             * @returns {boolean}
             */
            isInfinity: function () {
                return Math.abs(this.symbol.multiplier) === Infinity;
            },
            /**
             * Returns all the variables in the expression
             * @returns {Array}
             */
            variables: function () {
                return variables(this.symbol);
            },

            toString: function () {
                try {
                    if (isArray(this.symbol))
                        return '[' + this.symbol.toString() + ']';
                    return this.symbol.toString();
                }
                catch (e) {
                    return '';
                }
            },
            //forces the symbol to be returned as a decimal
            toDecimal: function (prec) {
                Settings.precision = prec;
                var dec = text(this.symbol, 'decimals');
                Settings.precision = undefined;
                return dec;
            },
            //checks to see if the expression is a fraction
            isFraction: function () {
                return isFraction(this.symbol);
            },
            //checks to see if the symbol is a multivariate polynomial
            isPolynomial: function () {
                return this.symbol.isPoly();
            },
            //performs a substitution
            sub: function (symbol, for_symbol) {
                return new Expression(this.symbol.sub(_.parse(symbol), _.parse(for_symbol)));
            },
            operation: function (otype, symbol) {
                if (isExpression(symbol))
                    symbol = symbol.symbol;
                else if (!isSymbol(symbol))
                    symbol = _.parse(symbol);
                return new Expression(_[otype](this.symbol.clone(), symbol.clone()));
            },
            add: function (symbol) {
                return this.operation('add', symbol);
            },
            subtract: function (symbol) {
                return this.operation('subtract', symbol);
            },
            multiply: function (symbol) {
                return this.operation('multiply', symbol);
            },
            divide: function (symbol) {
                return this.operation('divide', symbol);
            },
            pow: function (symbol) {
                return this.operation('pow', symbol);
            },
            expand: function () {
                return new Expression(_.expand(this.symbol));
            },
            each: function (callback, i) {
                if (this.symbol.each)
                    this.symbol.each(callback, i);
                else if (isArray(this.symbol)) {
                    for (var i = 0; i < this.symbol.length; i++)
                        callback.call(this.symbol, this.symbol[i], i);
                }
                else
                    callback.call(this.symbol);
            },
            eq: function (value) {
                if (!isSymbol(value))
                    value = _.parse(value);
                try {
                    var d = _.subtract(this.symbol.clone(), value);
                    return d.equals(0);
                }
                catch (e) {
                    return false;
                }
            },
            lt: function (value) {
                if (!isSymbol(value))
                    value = _.parse(value);
                try {
                    var d = evaluate(_.subtract(this.symbol.clone(), value));
                    return d.lessThan(0);
                }
                catch (e) {
                    return false;
                }
            },
            gt: function (value) {
                if (!isSymbol(value))
                    value = _.parse(value);
                try {
                    var d = evaluate(_.subtract(this.symbol.clone(), value));
                    return d.greaterThan(0);
                }
                catch (e) {
                    return false;
                }
            },
            gte: function (value) {
                return this.gt(value) || this.eq(value);
            },
            lte: function (value) {
                return this.lt(value) || this.eq(value);
            },

            numerator: function () {
                return new Expression(this.symbol.getNum());
            },
            denominator: function () {
                return new Expression(this.symbol.getDenom());
            },
            hasFunction: function(f) {
                return this.symbol.containsFunction(f);
            },
            contains: function(variable) {
                return this.symbol.contains(variable);
            }
        };
        //Aliases
        Expression.prototype.toTeX = Expression.prototype.latex;

    //Scientific ===================================================================
        function Scientific(num) {
            if (!(this instanceof Scientific))
                return new Scientific(num);

            num = String(typeof num === 'undefined' ? 0 : num); //convert to a string

            //remove the sign
            if (num.startsWith('-')) {
                this.sign = -1;
                //remove the sign
                num = num.substr(1, num.length);
            } else {
                this.sign = 1;
            }

            if (Scientific.isScientific(num)) {
                this.fromScientific(num);
            } else {
                this.convert(num);
            }
            return this;
        }

        Scientific.prototype = {
            fromScientific: function (num) {
                var parts = String(num).toLowerCase().split('e');
                this.coeff = parts[0];
                this.exponent = parts[1];

                return this;
            },
            convert: function (num) {
                //get wholes and decimals
                var parts = num.split('.');
                //make zero go away
                var w = parts[0] || '';
                var d = parts[1] || '';
                //convert zero to blank strings
                w = Scientific.removeLeadingZeroes(w);
                d = Scientific.removeTrailingZeroes(d);
                //find the location of the decimal place which is right after the wholes
                var dot_location = w.length;
                //add them together so we can move the dot
                var n = w + d;
                //find the next number
                var zeroes = Scientific.leadingZeroes(n).length;
                //set the exponent
                this.exponent = dot_location - (zeroes + 1);
                //set the coeff but first remove leading zeroes
                var coeff = Scientific.removeLeadingZeroes(n);
                this.coeff = coeff.charAt(0) + '.' + (coeff.substr(1, coeff.length) || '0');

                return this;
            },
            round: function (num) {
                var n = this.copy();

                num = Number(num); //cast to number for safety
                //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}
                //we can round based on this
                if (num === 0)
                    n.coeff = n.coeff.charAt(0);
                else {
                    //get up to n-1 digits
                    var rounded = this.coeff.substring(0, num + 1);
                    //get the next two
                    var next_two = this.coeff.substring(num + 1, num + 3);
                    //the extra digit
                    var ed = next_two.charAt(0);

                    if (next_two.charAt(1) > 4)
                        ed++;

                    n.coeff = rounded + ed;
                }

                return n;
            },
            copy: function () {
                var n = new Scientific(0);
                n.coeff = this.coeff;
                n.exponent = this.exponent;
                n.sign = this.sign;
                return n;
            },
            toString: function (n) {
                var coeff = typeof n === 'undefined' ? this.coeff : Scientific.round(this.coeff, n);

                var c;
                if(this.exponent === 0 && Settings.SCIENTIFIC_IGNORE_INTS) {
                    c = this.coeff;
                }
                else  {
                    c = coeff + 'e' + this.exponent;
                }
                return (this.sign === -1 ? '-' : '') + c;
            }
        };

        Scientific.isScientific = function (num) {
            return /\d+\.?\d*e[\+\-]*\d+/i.test(num);
        };
        Scientific.leadingZeroes = function (num) {
            var match = num.match(/^(0*).*$/);
            return match ? match[1] : '';
        };
        Scientific.removeLeadingZeroes = function (num) {
            var match = num.match(/^0*(.*)$/);
            return match ? match[1] : '';
        };

        Scientific.removeTrailingZeroes = function (num) {
            var match = num.match(/0*$/);
            return match ? num.substring(0, num.length - match[0].length) : '';
        };
        Scientific.round = function (c, n) {
            var coeff = nround(c, n);
            var m = String(coeff).split('.').pop();
            var d = n - m.length;
            //if we're asking for more significant figures
            if (d > 0) {
                coeff = coeff + (new Array(d + 1).join(0));
            }
            return coeff;
        };

    //Scientific ===================================================================
        /*
         * Javascript has the toExponential method but this allows you to work with string and therefore any number of digits of your choosing
         * For example Scientific('464589498449496467924197545625247695464569568959124568489548454');
         */

        function Scientific(num) {
            if(!(this instanceof Scientific))
                return new Scientific(num);

            num = String(typeof num === 'undefined' ? 0 : num); //convert to a string

            //remove the sign
            if(num.startsWith('-')) {
                this.sign = -1;
                //remove the sign
                num = num.substr(1, num.length);
            }
            else {
                this.sign = 1;
            }

            if(Scientific.isScientific(num)) {
                this.fromScientific(num);
            }
            else {
                this.convert(num);
            }
            return this;
        }

        Scientific.prototype = {
            fromScientific: function(num) {
                var parts = String(num).toLowerCase().split('e');
                this.coeff = parts[0];
                this.exponent = parts[1];

                return this;
            },
            convert: function(num) {
                //get wholes and decimals
                var parts = num.split('.');
                //make zero go away
                var w = parts[0] || '';
                var d = parts[1] || '';
                //convert zero to blank strings
                w = Scientific.removeLeadingZeroes(w);
                d = Scientific.removeTrailingZeroes(d);
                //find the location of the decimal place which is right after the wholes
                var dot_location = w.length;
                //add them together so we can move the dot
                var n = w+d;
                //find the next number
                var zeroes = Scientific.leadingZeroes(n).length;
                //set the exponent
                this.exponent = dot_location-(zeroes+1);
                //set the coeff but first remove leading zeroes
                var coeff = Scientific.removeLeadingZeroes(n);
                this.coeff = coeff.charAt(0)+'.'+(coeff.substr(1, coeff.length) || '0');

                //the coeff decimal places
                var dec = this.coeff.split('.')[1] || ''; //if it's undefined or zero it's going to blank

                this.decp = dec === '0' ? 0 : dec.length;
                //decimals
                this.dec = d;
                //wholes
                this.wholes = w;

                return this;
            },
            round: function(num) {
                var n = this.copy();

                num = Number(num); //cast to number for safety
                //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}
                //we can round based on this
                if(num === 0)
                    n.coeff = n.coeff.charAt(0);
                else {
                    //get up to n-1 digits
                    var rounded = this.coeff.substring(0, num+1);
                    //get the next two
                    var next_two = this.coeff.substring(num+1, num+3);
                    //the extra digit
                    var ed = next_two.charAt(0);

                    if(next_two.charAt(1) > 4)
                        ed++;

                    n.coeff = rounded+ed;
                }

                return n;
            },
            copy: function() {
                var n = new Scientific(0);
                n.coeff = this.coeff;
                n.exponent = this.exponent;
                n.sign = this.sign;
                return n;
            },
            toString: function(n) {
                var retval;

                if(Settings.SCIENTIFIC_IGNORE_ZERO_EXPONENTS && this.exponent === 0 && this.decp < n) {
                    if(this.decp === 0)
                        retval = this.wholes;
                    else
                        retval = this.coeff;
                }
                else {
                    var coeff = typeof n === 'undefined' ? this.coeff : Scientific.round(this.coeff, Math.min(n, this.decp || 1));
                    retval = this.exponent === 0 ? coeff : coeff+'e'+this.exponent;
                }

                return (this.sign === -1 ? '-' : '' )+retval;
            }
        };

        Scientific.isScientific = function(num) {
            return /\d+\.?\d*e[\+\-]*\d+/i.test(num);
        };
        Scientific.leadingZeroes = function(num) {
            var match = num.match(/^(0*).*$/);
            return match ? match[1] : '';
        };
        Scientific.removeLeadingZeroes = function(num) {
          var match = num.match(/^0*(.*)$/);
          return match ? match[1] : '';
        };

        Scientific.removeTrailingZeroes = function(num) {
          var match = num.match(/0*$/);
          return match ? num.substring(0, num.length-match[0].length) : '';
        };


    //Frac =========================================================================
        function Frac(n) {
            if (n instanceof Frac)
                return n;
            if (n === undefined)
                return this;
            try {
                if (isInt(n)) {
                    try {
                        this.num = bigInt(n);
                        this.den = bigInt(1);
                    }
                    catch (e) {
                        return Frac.simple(n);
                    }
                }
                else {
                    var frac = Fraction.convert(n);
                    this.num = new bigInt(frac[0]);
                    this.den = new bigInt(frac[1]);
                }
            }
            catch (e) {
                return Frac.simple(n);
            }

        }
        //safe to use with negative numbers or other types
        Frac.create = function (n) {
            if (n instanceof Frac)
                return n;
            n = n.toString();
            var is_neg = n.charAt(0) === '-'; //check if it's negative
            if (is_neg)
                n = n.substr(1, n.length - 1); //remove the sign
            var frac = new Frac(n);
            //put the sign back
            if (is_neg)
                frac.negate();
            return frac;
        };
        Frac.isFrac = function (o) {
            return (o instanceof Frac);
        };
        Frac.quick = function (n, d) {
            var frac = new Frac();
            frac.num = new bigInt(n);
            frac.den = new bigInt(d);
            return frac;
        };
        Frac.simple = function (n) {
            var nstr = String(scientificToDecimal(n)),
                    m_dc = nstr.split('.'),
                    num = m_dc.join(''),
                    den = 1,
                    l = (m_dc[1] || '').length;
            for (var i = 0; i < l; i++)
                den += '0';
            var frac = Frac.quick(num, den);
            return frac.simplify();
        };
        Frac.prototype = {
            multiply: function (m) {
                if (this.isOne()) {
                    return m.clone();
                }
                if (m.isOne()) {
                    return this.clone();
                }

                var c = this.clone();
                c.num = c.num.multiply(m.num);
                c.den = c.den.multiply(m.den);

                return c.simplify();
            },
            divide: function (m) {
                if (m.equals(0))
                    throw new DivisionByZero('Division by zero not allowed!');
                return this.clone().multiply(m.clone().invert()).simplify();
            },
            subtract: function (m) {
                return this.clone().add(m.clone().neg());
            },
            neg: function () {
                this.num = this.num.multiply(-1);
                return this;
            },
            add: function (m) {
                var n1 = this.den, n2 = m.den, c = this.clone();
                var a = c.num, b = m.num;
                if (n1.equals(n2)) {
                    c.num = a.add(b);
                }
                else {
                    c.num = a.multiply(n2).add(b.multiply(n1));
                    c.den = n1.multiply(n2);
                }

                return c.simplify();
            },
            mod: function (m) {
                var a = this.clone(),
                        b = m.clone();
                //make their denominators even and return the mod of their numerators
                a.num = a.num.multiply(b.den);
                a.den = a.den.multiply(b.den);
                b.num = b.num.multiply(this.den);
                b.den = b.den.multiply(this.den);
                a.num = a.num.mod(b.num);
                return a.simplify();
            },
            simplify: function () {
                var gcd = bigInt.gcd(this.num, this.den);

                this.num = this.num.divide(gcd);
                this.den = this.den.divide(gcd);
                return this;
            },
            clone: function () {
                var m = new Frac();
                m.num = new bigInt(this.num);
                m.den = new bigInt(this.den);
                return m;
            },
            decimal: function (prec) {
                var sign = this.num.isNegative() ? '-' : '';
                if (this.num.equals(this.den)) {
                    return '1';
                }
                //go plus one for rounding
                prec = prec || Settings.PRECISION;
                prec++;
                var narr = [],
                        n = this.num.abs(),
                        d = this.den;
                for (var i = 0; i < prec; i++) {
                    var w = n.divide(d), //divide out whole
                            r = n.subtract(w.multiply(d)); //get remainder

                    narr.push(w);
                    if (r.equals(0))
                        break;
                    n = r.times(10); //shift one dec place
                }
                var whole = narr.shift();
                if (narr.length === 0) {
                    return sign + whole.toString();
                }

                if (i === prec) {
                    var lt = [];
                    //get the last two so we can round it
                    for (var i = 0; i < 2; i++)
                        lt.unshift(narr.pop());
                    //put the last digit back by rounding the last two
                    narr.push(Math.round(lt.join('.')));
                }

                var dec = whole.toString() + '.' + narr.join('');
                return sign + dec;
            },
            toDecimal: function (prec) {
                if (prec || Settings.PRECISION) {
                    return this.decimal(prec);
                }
                else
                    return this.num / this.den;
            },
            qcompare: function (n) {
                return [this.num.multiply(n.den), n.num.multiply(this.den)];
            },
            equals: function (n) {
                if (!isNaN(n))
                    n = new Frac(n);
                var q = this.qcompare(n);

                return q[0].equals(q[1]);
            },
            absEquals: function (n) {
                if (!isNaN(n))
                    n = new Frac(n);
                var q = this.qcompare(n);

                return q[0].abs().equals(q[1]);
            },
            //lazy check to be fixed. Sufficient for now but will cause future problems
            greaterThan: function (n) {
                if (!isNaN(n))
                    n = new Frac(n);
                var q = this.qcompare(n);

                return q[0].gt(q[1]);
            },
            gte: function (n) {
                return this.greaterThan(n) || this.equals(n);
            },
            lte: function (n) {
                return this.lessThan(n) || this.equals(n);
            },
            lessThan: function (n) {
                if (!isNaN(n))
                    n = new Frac(n);
                var q = this.qcompare(n);

                return q[0].lt(q[1]);
            },
            isInteger: function () {
                return this.den.equals(1);
            },
            negate: function () {
                this.num = this.num.multiply(-1);
                return this;
            },
            invert: function () {
                var t = this.den;
                //why invert 0/1? It'll become 1/0 and that's a lie.
                if (!this.num.equals(0)) {
                    var isnegative = this.num.isNegative();
                    this.den = this.num.abs();
                    this.num = t;
                    if (isnegative)
                        this.num = this.num.multiply(-1);
                }

                return this;
            },
            isOne: function () {
                return this.num.equals(1) && this.den.equals(1);
            },
            sign: function () {
                return this.num.isNegative() ? -1 : 1;
            },
            abs: function () {
                this.num = this.num.abs();
                return this;
            },
            gcd: function (f) {
                return Frac.quick(bigInt.gcd(f.num, this.num), bigInt.lcm(f.den, this.den));
            },
            toString: function () {
                return !this.den.equals(1) ? this.num.toString() + '/' + this.den.toString() : this.num.toString();
            },
            valueOf: function () {
    //            if(this.num == 24) throw new Error(999)
                if (Settings.USE_BIG)
                    return new bigDec(this.num.toString()).div(new bigDec(this.den.toString()));
                return this.num / this.den;
            },
            isNegative: function () {
                return this.toDecimal() < 0;
            }
        };

    //Symbol =======================================================================
        /**
         * All symbols e.g. x, y, z, etc or functions are wrapped in this class. All symbols have a multiplier and a group.
         * All symbols except for "numbers (group N)" have a power.
         * @class Primary data type for the Parser.
         * @param {String} obj
         * @returns {Symbol}
         */
        function Symbol(obj) {
            var isInfinity = obj === 'Infinity';
            //this enables the class to be instantiated without the new operator
            if (!(this instanceof Symbol)) {
                return new Symbol(obj);
            }
            //define numeric symbols
            if (/^(\-?\+?\d+)\.?\d*e?\-?\+?\d*/i.test(obj)) {
                this.group = N;
                this.value = CONST_HASH;
                this.multiplier = new Frac(obj);
            }
            //define symbolic symbols
            else {
                this.group = S;
                validateName(obj);
                this.value = obj;
                this.multiplier = new Frac(1);
                this.imaginary = obj === Settings.IMAGINARY;
                this.isInfinity = isInfinity;
            }

            //As of 6.0.0 we switched to infinite precision so all objects have a power
            //Although this is still redundant in constants, it simplifies the logic in
            //other parts so we'll keep it
            this.power = new Frac(1);

            // Added to silence the strict warning.
            return this;
        }
        /**
         * Returns vanilla imaginary symbol
         * @returns {Symbol}
         */
        Symbol.imaginary = function () {
            var s = new Symbol(Settings.IMAGINARY);
            s.imaginary = true;
            return s;
        };
        /**
         * Return nerdamer's representation of Infinity
         * @param {int} negative -1 to return negative infinity
         * @returns {Symbol}
         */
        Symbol.infinity = function (negative) {
            var v = new Symbol('Infinity');
            if (negative === -1)
                v.negate();
            return v;
        };
        Symbol.shell = function (group, value) {
            var symbol = new Symbol(value);
            symbol.group = group;
            symbol.symbols = {};
            symbol.length = 0;
            return symbol;
        };
        //sqrt(x) -> x^(1/2)
        Symbol.unwrapSQRT = function (symbol, all) {
            var p = symbol.power;
            if (symbol.fname === SQRT && (symbol.isLinear() || all)) {
                var t = symbol.args[0].clone();
                t.power = t.power.multiply(new Frac(1 / 2));
                t.multiplier = t.multiplier.multiply(symbol.multiplier);
                symbol = t;
                if (all)
                    symbol.power = p.multiply(new Frac(1 / 2));
            }

            return symbol;
        };
        Symbol.hyp = function (a, b) {
            a = a || new Symbol(0);
            b = b || new Symbol(0);
            return _.sqrt(_.add(_.pow(a.clone(), new Symbol(2)), _.pow(b.clone(), new Symbol(2))));
        };
        //converts to polar form array
        Symbol.toPolarFormArray = function (symbol) {
            var re, im, r, theta;
            re = symbol.realpart();
            im = symbol.imagpart();
            r = Symbol.hyp(re, im);
            theta = re.equals(0) ? _.parse('pi/2') : _.trig.atan(_.divide(im, re));
            return [r, theta];
        };
        //removes parentheses
        Symbol.unwrapPARENS = function (symbol) {
            if (symbol.fname === '') {
                var r = symbol.args[0];
                r.power = r.power.multiply(symbol.power);
                r.multiplier = r.multiplier.multiply(symbol.multiplier);
                if (symbol.fname === '')
                    return Symbol.unwrapPARENS(r);
                return r;
            }
            return symbol;
        };
        //quickly creates a Symbol
        Symbol.create = function (value, power) {
            power = power === undefined ? 1 : power;
            return _.parse('(' + value + ')^(' + power + ')');
        };
        Symbol.prototype = {
            /**
             * Gets nth root accounting for rounding errors
             * @param {Number} n
             * @return {Number}
             */
            getNth: function(n) {
                // First calculate the root
                var root = evaluate(_.pow(_.parse(this.multiplier), _.parse(n).invert()));
                // Round of any errors
                var rounded = _.parse(nround(root));
                // Reverse the root
                var e = evaluate(_.pow(rounded, _.parse(n)));
                // If the rounded root equals the original number then we're good 
                if(e.equals(_.parse(this.multiplier))) {
                    return rounded;
                }
                // Otherwise return the unrounded version
                return root;
            },
            /**
             * Checks if symbol is to the nth power
             * @returns {Boolean}
             */
            isToNth: function(n) {
                // Start by check in the multiplier for squareness
                // First get the root but round it because currently we still depend 
                var root = this.getNth(n);
                var nthMultiplier = isInt(root);
                var nthPower;
                
                if(this.group === CB) {
                    // Start by assuming that all will be square.
                    nthPower = true;
                    // All it takes is for one of the symbols to not have an even power
                    // e.g. x^n1*y^n2 requires that both n1 and n2 are even
                    this.each(function(x) {
                        var isNth = x.isToNth(n);

                        if(!isNth) {
                            nthPower = false;
                        }
                    });
                }
                else {
                    // Check if the power is divisible by n if it's not a number.
                    nthPower = this.group === N ? true : isInt(_.divide(_.parse(this.power), _.parse(n)));
                }
                            
                return nthMultiplier && nthPower;
            },
            /**
             * Checks if a symbol is square
             * @return {Boolean}
             */
            isSquare: function() {
                return this.isToNth(2);
            },
            /**
             * Checks if a symbol is cube
             * @return {Boolean}
             */
            isCube: function() {
                return this.isToNth(3);
            },
            /**
             * Checks if a symbol is a bare variable
             * @return {Boolean}
             */
            isSimple: function () {
                return this.power.equals(1) && this.multiplier.equals(1);
            },
            /**
             * Simplifies the power of the symbol
             * @returns {Symbol} a clone of the symbol
             */
            powSimp: function () {
                if (this.group === CB) {
                    var powers = [],
                            sign = this.multiplier.sign();
                    this.each(function (x) {
                        var p = x.power;
                        //why waste time if I can't do anything anyway
                        if (isSymbol(p) || p.equals(1))
                            return this.clone();
                        powers.push(p);
                    });
                    var min = new Frac(arrayMin(powers));

                    //handle the coefficient
                    //handle the multiplier
                    var sign = this.multiplier.sign(),
                            m = this.multiplier.clone().abs(),
                            mfactors = Math2.ifactor(m);
                    //if we have a multiplier of 6750 and a min of 2 then the factors are 5^3*5^3*2
                    //we can then reduce it to 2*3*5*(15)^2
                    var out_ = new Frac(1);
                    var in_ = new Frac(1);

                    for (var x in mfactors) {
                        var n = new Frac(mfactors[x]);
                        if (!n.lessThan(min)) {
                            n = n.divide(min).subtract(new Frac(1));
                            in_ = in_.multiply(new Frac(x)); //move the factor inside the bracket
                        }

                        out_ = out_.multiply(_.parse(inBrackets(x) + '^' + inBrackets(n)).multiplier);
                    }
                    var t = new Symbol(in_);
                    this.each(function (x) {
                        x = x.clone();
                        x.power = x.power.divide(min);
                        t = _.multiply(t, x);
                    });

                    var xt = _.symfunction(PARENTHESIS, [t]);
                    xt.power = min;
                    xt.multiplier = sign < 0 ? out_.negate() : out_;

                    return xt;
                }
                return this.clone();
            },
            /**
             * Checks to see if two functions are of equal value
             * @param {Symbol} symbol
             */
            equals: function (symbol) {
                if (!isSymbol(symbol))
                    symbol = new Symbol(symbol);
                return this.value === symbol.value && this.power.equals(symbol.power)
                        && this.multiplier.equals(symbol.multiplier)
                        && this.group === symbol.group;
            },
            abs: function() {
                var e = this.clone();
                e.multiplier.abs();
                return e;
            },
            // Greater than
            gt: function (symbol) {
                if (!isSymbol(symbol))
                    symbol = new Symbol(symbol);
                return this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);
            },
            // Greater than
            gte: function (symbol) {
                if (!isSymbol(symbol))
                    symbol = new Symbol(symbol);
                return this.equals(symbol) ||
                        this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);
            },
            // Less than
            lt: function (symbol) {
                if (!isSymbol(symbol))
                    symbol = new Symbol(symbol);
                return this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);
            },
            // Less than
            lte: function (symbol) {
                if (!isSymbol(symbol))
                    symbol = new Symbol(symbol);
                return this.equals(symbol) ||
                        this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);
            },
            /**
             * Because nerdamer doesn't group symbols by polynomials but
             * rather a custom grouping method, this has to be
             * reinserted in order to make use of most algorithms. This function
             * checks if the symbol meets the criteria of a polynomial.
             * @param {bool} multivariate
             * @returns {boolean}
             */
            isPoly: function (multivariate) {
                var g = this.group,
                        p = this.power;
                //the power must be a integer so fail if it's not
                if (!isInt(p) || p < 0)
                    return false;
                //constants and first orders
                if (g === N || g === S || this.isConstant(true))
                    return true;
                var vars = variables(this);
                if (g === CB && vars.length === 1) {
                    //the variable is assumed the only one that was found
                    var v = vars[0];
                    //if no variable then guess what!?!? We're done!!! We have a polynomial.
                    if (!v)
                        return true;
                    for (var x in this.symbols) {
                        var sym = this.symbols[x];
                        //sqrt(x)
                        if (sym.group === FN && !sym.args[0].isConstant())
                            return false;
                        if (!sym.contains(v) && !sym.isConstant(true))
                            return false;
                    }
                    return true;
                }
                //PL groups. These only fail if a power is not an int
                //this should handle cases such as x^2*t
                if (this.isComposite() || g === CB && multivariate) {
                    //fail if we're not checking for multivariate polynomials
                    if (!multivariate && vars.length > 1)
                        return false;
                    //loop though the symbols and check if they qualify
                    for (var x in this.symbols) {
                        //we've already the symbols if we're not checking for multivariates at this point
                        //so we check the sub-symbols
                        if (!this.symbols[x].isPoly(multivariate))
                            return false;
                    }
                    return true;
                }
                else
                    return false;

                /*
                 //all tests must have passed so we must be dealing with a polynomial
                 return true;
                 */
            },
            //removes the requested variable from the symbol and returns the remainder
            stripVar: function (x, exclude_x) {
                var retval;
                if ((this.group === PL || this.group === S) && this.value === x)
                    retval = new Symbol(exclude_x ? 0 : this.multiplier);
                else if (this.group === CB && this.isLinear()) {
                    retval = new Symbol(1);
                    this.each(function (s) {
                        if (!s.contains(x, true))
                            retval = _.multiply(retval, s.clone());
                    });
                    retval.multiplier = retval.multiplier.multiply(this.multiplier);
                }
                else if (this.group === CP && !this.isLinear()) {
                    retval = new Symbol(this.multiplier);
                }
                else if (this.group === CP && this.isLinear()) {
                    retval = new Symbol(0);
                    this.each(function (s) {
                        if (!s.contains(x)) {
                            var t = s.clone();
                            t.multiplier = t.multiplier.multiply(this.multiplier);
                            retval = _.add(retval, t);
                        }
                    });
                    //BIG TODO!!! It doesn't make much sense
                    if (retval.equals(0))
                        retval = new Symbol(this.multiplier);
                }
                else if (this.group === EX && this.power.contains(x, true)) {
                    retval = new Symbol(this.multiplier);
                }
                else if (this.group === FN && this.contains(x)) {
                    retval = new Symbol(this.multiplier);
                }
                else
                    //wth? This should technically be the multiplier.
                    //Unfortunately this method wasn't very well thought out :`(.
                    //should be: retval = new Symbol(this.multiplier);
                    //use: ((1+x^2)*sqrt(-1+x^2))^(-1) for correction.
                    //this will break a bunch of unit tests so be ready to for the long haul
                    retval = this.clone();


                return retval;
            },
            //returns symbol in array form with x as base e.g. a*x^2+b*x+c = [c, b, a].
            toArray: function (v, arr) {
                arr = arr || {
                    arr: [],
                    add: function (x, idx) {
                        var e = this.arr[idx];
                        this.arr[idx] = e ? _.add(e, x) : x;
                    }
                };
                var g = this.group;

                if (g === S && this.contains(v)) {
                    arr.add(new Symbol(this.multiplier), this.power);
                }
                else if (g === CB) {
                    var a = this.stripVar(v),
                            x = _.divide(this.clone(), a.clone());
                    var p = x.isConstant() ? 0 : x.power;
                    arr.add(a, p);
                }
                else if (g === PL && this.value === v) {
                    this.each(function (x, p) {
                        arr.add(x.stripVar(v), p);
                    });
                }
                else if (g === CP) {
                    //the logic: they'll be broken into symbols so e.g. (x^2+x)+1 or (a*x^2+b*x+c)
                    //each case is handled above
                    this.each(function (x) {
                        x.toArray(v, arr);
                    });
                }
                else if (this.contains(v)) {
                    throw new NerdamerTypeError('Cannot convert to array! Exiting');
                }
                else {
                    arr.add(this.clone(), 0); //it's just a constant wrt to v
                }
                //fill the holes
                arr = arr.arr; //keep only the array since we don't need the object anymore
                for (var i = 0; i < arr.length; i++)
                    if (!arr[i])
                        arr[i] = new Symbol(0);
                return arr;
            },
            //checks to see if a symbol contans a function
            hasFunc: function (v) {
                var fn_group = this.group === FN || this.group === EX;
                if (fn_group && !v || fn_group && this.contains(v))
                    return true;
                if (this.symbols) {
                    for (var x in this.symbols) {
                        if (this.symbols[x].hasFunc(v))
                            return true;
                    }
                }
                return false;
            },
            sub: function (a, b) {
                a = !isSymbol(a) ? _.parse(a) : a.clone();
                b = !isSymbol(b) ? _.parse(b) : b.clone();
                if (a.group === N || a.group === P)
                    err('Cannot substitute a number. Must be a variable');
                var same_pow = false,
                        a_is_unit_multiplier = a.multiplier.equals(1),
                        m = this.multiplier.clone(),
                        retval;
                /*
                 * In order to make the substitution the bases have to first match take
                 * (x+1)^x -> (x+1)=y || x^2 -> x=y^6
                 * In both cases the first condition is that the bases match so we begin there
                 * Either both are PL or both are not PL but we cannot have PL and a non-PL group match
                 */
                if (this.value === a.value && (this.group !== PL && a.group !== PL || this.group === PL && a.group === PL)) {
                    //we cleared the first hurdle but a subsitution may not be possible just yet
                    if (a_is_unit_multiplier || a.multiplier.equals(this.multiplier)) {
                        if (a.isLinear()) {
                            retval = b;
                        }
                        else if (a.power.equals(this.power)) {
                            retval = b;
                            same_pow = true;
                        }
                        if (a.multiplier.equals(this.multiplier))
                            m = new Frac(1);
                    }
                }
                //the next thing is to handle CB
                else if (this.group === CB || this.previousGroup === CB) {
                    retval = new Symbol(1);
                    this.each(function (x) {
                        var subbed = _.parse(x.sub(a, b)); //parse it again for safety
                        retval = _.multiply(retval, subbed);

                    });
                }
                else if (this.isComposite()) {                   
                    var symbol = this.clone();
                    
                    if (a.isComposite() && symbol.isComposite() && symbol.isLinear() && a.isLinear()) {
                        var find = function (stack, needle) {
                            for (var x in stack.symbols) {
                                var sym = stack.symbols[x];
                                //if the symbol equals the needle or it's within the sub-symbols we're done
                                if (sym.isComposite() && find(sym, needle) || sym.equals(needle))
                                    return true;
                            }
                            return false;
                        };
                        //go fish
                        for (var x in a.symbols) {
                            if (!find(symbol, a.symbols[x]))
                                return symbol.clone();
                        }
                        retval = _.add(_.subtract(symbol.clone(), a), b);
                    }
                    else {
                        retval = new Symbol(0);
                        symbol.each(function (x) {
                            retval = _.add(retval, x.sub(a, b));
                        });
                    }
                }
                else if (this.group === EX) {
                    // the parsed value could be a function so parse and sub
                    retval = _.parse(this.value).sub(a, b);
                }
                else if (this.group === FN) {
                    var nargs = [];
                    for (var i = 0; i < this.args.length; i++) {
                        var arg = this.args[i];
                        if (!isSymbol(arg))
                            arg = _.parse(arg);
                        nargs.push(arg.sub(a, b));
                    }
                    retval = _.symfunction(this.fname, nargs);
                }
                //if we did manage a substitution
                if (retval) {
                    if (!same_pow) {
                        //substitute the power
                        var p = this.group === EX ? this.power.sub(a, b) : _.parse(this.power);
                        //now raise the symbol to that power
                        retval = _.pow(retval, p);
                    }

                    //transfer the multiplier
                    retval.multiplier = retval.multiplier.multiply(m);
                    
                    //done
                    return retval;
                }
                //if all else fails
                return this.clone();
            },
            isMonomial: function () {
                if (this.group === S)
                    return true;
                if (this.group === CB) {
                    for (var x in this.symbols)
                        if (this.symbols[x].group !== S)
                            return false;
                }
                else
                    return false;
                return true;
            },
            isPi: function () {
                return this.group === S && this.value === 'pi';
            },
            sign: function () {
                return this.multiplier.sign();
            },
            isE: function () {
                return this.value === 'e';
            },
            isSQRT: function () {
                return this.fname === SQRT;
            },
            isConstant: function (check_all, check_symbols) {
                if(check_symbols && this.group === CB) {
                    for(var x in this.symbols) {
                        if(this.symbols[x].isConstant(true))
                            return true;
                    }
                }
                
                if(check_all === 'functions' && this.isComposite()) {
                    var isConstant = true;
                    
                    this.each(function(x) {
                        if(!x.isConstant(check_all, check_symbols)) {
                            isConstant = false;
                        }
                    }, true);
                    
                    return isConstant;
                }

                if (check_all === 'all' && (this.isPi() || this.isE())) {
                    return true;
                }

                if (check_all && this.group === FN) {
                    for (var i = 0; i < this.args.length; i++) {
                        if (!this.args[i].isConstant(check_all))
                            return false;
                    }
                    return true;
                }

                if(check_all)
                    return isNumericSymbol(this);
                return this.value === CONST_HASH;
            },
            //the symbols is imaginary if
            //1. n*i
            //2. a+b*i
            //3. a*i
            isImaginary: function () {
                if (this.imaginary)
                    return true;
                else if (this.symbols) {
                    for (var x in this.symbols)
                        if (this.symbols[x].isImaginary())
                            return true;
                }
                return false;
            },
            /**
             * Returns the real part of a symbol
             * @returns {Symbol}
             */
            realpart: function () {
                if (this.isConstant()) {
                    return this.clone();
                }
                else if (this.imaginary)
                    return new Symbol(0);
                else if (this.isComposite()) {
                    var retval = new Symbol(0);
                    this.each(function (x) {
                        retval = _.add(retval, x.realpart());
                    });
                    return retval;
                }
                else if (this.isImaginary())
                    return new Symbol(0);
                return this.clone();
            },
            /*
             * Return imaginary part of a symbol
             * @returns {Symbol}
             */
            imagpart: function () {
                if (this.group === S && this.isImaginary())
                    return new Symbol(this.multiplier);
                if (this.isComposite()) {
                    var retval = new Symbol(0);
                    this.each(function (x) {
                        retval = _.add(retval, x.imagpart());
                    });
                    return retval;
                }
                if (this.group === CB)
                    return this.stripVar(Settings.IMAGINARY);
                return new Symbol(0);
            },
            isInteger: function () {
                return this.isConstant() && this.multiplier.isInteger();
            },
            isLinear: function (wrt) {
                if (wrt) {
                    if (this.isConstant())
                        return true;
                    if (this.group === S) {
                        if (this.value === wrt)
                            return this.power.equals(1);
                        else
                            return true;
                    }

                    if (this.isComposite() && this.power.equals(1)) {
                        for (var x in this.symbols) {
                            if (!this.symbols[x].isLinear(wrt))
                                return false;
                        }
                        return true;
                    }

                    if (this.group === CB && this.symbols[wrt])
                        return this.symbols[wrt].isLinear(wrt);
                    return false;
                }
                else
                    return this.power.equals(1);
            },
            /**
             * Checks to see if a symbol has a function by a specified name or within a specified list
             * @param {String|String[]} names
             * @returns {Boolean}
             */
            containsFunction: function (names) {
                if (typeof names === 'string')
                    names = [names];
                if (this.group === FN && names.indexOf(this.fname) !== -1)
                    return true;
                if (this.symbols) {
                    for (var x in this.symbols) {
                        if (this.symbols[x].containsFunction(names))
                            return true;
                    }
                }
                return false;
            },
            multiplyPower: function (p2) {
                //leave out 1
                if (this.group === N && this.multiplier.equals(1))
                    return this;

                var p1 = this.power;

                if (this.group !== EX && p2.group === N) {
                    var p = p2.multiplier;
                    if (this.group === N && !p.isInteger()) {
                        this.convert(P);
                    }

                    this.power = p1.equals(1) ? p.clone() : p1.multiply(p);

                    if (this.group === P && isInt(this.power)) {
                        //bring it back to an N
                        this.value = Math.pow(this.value, this.power);
                        this.toLinear();
                        this.convert(N);
                    }
                }
                else {
                    if (this.group !== EX) {
                        p1 = new Symbol(p1);
                        this.convert(EX);
                    }
                    this.power = _.multiply(p1, p2);
                }

                return this;
            },
            setPower: function (p, retainSign) {
                //leave out 1
                if (this.group === N && this.multiplier.equals(1))
                    return this;
                if (this.group === EX && !isSymbol(p)) {
                    this.group = this.previousGroup;
                    delete this.previousGroup;
                    if (this.group === N) {
                        this.multiplier = new Frac(this.value);
                        this.value = CONST_HASH;
                    }
                    else
                        this.power = p;
                }
                else {
                    var isSymbolic = false;
                    if (isSymbol(p)) {
                        if (p.group === N) {
                            //p should be the multiplier instead
                            p = p.multiplier;

                        }
                        else {
                            isSymbolic = true;
                        }
                    }
                    var group = isSymbolic ? EX : P;
                    this.power = p;
                    if (this.group === N && group)
                        this.convert(group, retainSign);
                }

                return this;
            },
            /**
             * Checks to see if symbol is located in the denominator
             * @returns {boolean}
             */
            isInverse: function () {
                if (this.group === EX)
                    return (this.power.multiplier.lessThan(0));
                return this.power < 0;
            },
            /**
             * Make a duplicate of a symbol by copying a predefined list of items.
             * The name 'copy' would probably be a more appropriate name.
             * to a new symbol
             * @param {Symbol} c
             * @returns {Symbol}
             */
            clone: function (c) {
                var clone = c || new Symbol(0),
                        //list of properties excluding power as this may be a symbol and would also need to be a clone.
                        properties = [
                            'value', 'group', 'length', 'previousGroup', 'imaginary', 'fname', 'args', 'isInfinity', 'scientific'],
                        l = properties.length, i;
                if (this.symbols) {
                    clone.symbols = {};
                    for (var x in this.symbols) {
                        clone.symbols[x] = this.symbols[x].clone();
                    }
                }

                for (i = 0; i < l; i++) {
                    if (this[properties[i]] !== undefined) {
                        clone[properties[i]] = this[properties[i]];
                    }
                }

                clone.power = this.power.clone();
                clone.multiplier = this.multiplier.clone();
                //add back the flag to track if this symbol is a conversion symbol
                if (this.isConversion)
                    clone.isConversion = this.isConversion;

                if (this.isUnit)
                    clone.isUnit = this.isUnit;

                return clone;
            },
            /**
             * Converts a symbol multiplier to one.
             * @param {Boolean} keepSign Keep the multiplier as negative if the multiplier is negative and keepSign is true
             * @returns {Symbol}
             */
            toUnitMultiplier: function (keepSign) {
                this.multiplier.num = new bigInt(this.multiplier.num.isNegative() && keepSign ? -1 : 1);
                this.multiplier.den = new bigInt(1);
                return this;
            },
            /**
             * Converts a Symbol's power to one.
             * @returns {Symbol}
             */
            toLinear: function () {
                this.setPower(new Frac(1));
                return this;
            },
            /**
             * Iterates over all the sub-symbols. If no sub-symbols exist then it's called on itself
             * @param {Function} fn
             * @@param {Boolean} deep If true it will itterate over the sub-symbols their symbols as well
             */
            each: function (fn, deep) {
                if (!this.symbols) {
                    fn.call(this, this, this.value);
                }
                else {
                    for (var x in this.symbols) {
                        var sym = this.symbols[x];
                        if (sym.group === PL && deep) {
                            for (var y in sym.symbols) {
                                fn.call(x, sym.symbols[y], y);
                            }
                        }
                        else
                            fn.call(this, sym, x);
                    }
                }
            },
            /**
             * A numeric value to be returned for Javascript. It will try to
             * return a number as far a possible but in case of a pure symbolic
             * symbol it will just return its text representation
             * @returns {String|Number}
             */
            valueOf: function () {
                if (this.group === N)
                    return this.multiplier.valueOf();
                else if (this.power === 0) {
                    return 1;
                }
                else if (this.multiplier === 0) {
                    return 0;
                }
                else {
                    return text(this, 'decimals');
                }
            },
            /**
             * Checks to see if a symbols has a particular variable within it.
             * Pass in true as second argument to include the power of exponentials
             * which aren't check by default.
             * @example var s = _.parse('x+y+z'); s.contains('y');
             * //returns true
             * @param {any} variable
             * @param {boolean} all
             * @returns {boolean}
             */
            contains: function (variable, all) {
                //contains expects a string
                variable = String(variable);
                var g = this.group;
                if (this.value === variable)
                    return true;
                if (this.symbols) {
                    for (var x in this.symbols) {
                        if (this.symbols[x].contains(variable, all))
                            return true;
                    }
                }
                if (g === FN || this.previousGroup === FN) {
                    for (var i = 0; i < this.args.length; i++) {
                        if (this.args[i].contains(variable, all))
                            return true;
                    }
                }

                if (g === EX) {
                    //exit only if it does
                    if (all && this.power.contains(variable, all)) {
                        return true;
                    }
                    if (this.value === variable)
                        return true;

                }

                return this.value === variable;
            },
            /**
             * Negates a symbols
             * @returns {boolean}
             */
            negate: function () {
                this.multiplier.negate();
                if (this.group === CP || this.group === PL)
                    this.distributeMultiplier();
                return this;
            },
            /**
             * Inverts a symbol
             * @param {boolean} power_only
             * @param {boolean} all
             * @returns {boolean}
             */
            invert: function (power_only, all) {
                //invert the multiplier
                if (!power_only)
                    this.multiplier = this.multiplier.invert();
                //invert the rest
                if (isSymbol(this.power)) {
                    this.power.negate();
                }
                else if (this.group === CB && all) {
                    this.each(function (x) {
                        return x.invert();
                    });
                }
                else {
                    if (this.power && this.group !== N)
                        this.power.negate();
                }
                return this;
            },
            /**
             * Symbols of group CP or PL may have the multiplier being carried by
             * the top level symbol at any given time e.g. 2*(x+y+z). This is
             * convenient in many cases, however in some cases the multiplier needs
             * to be carried individually e.g. 2*x+2*y+2*z.
             * This method distributes the multiplier over the entire symbol
             * @param {boolean} all
             * @returns {Symbol}
             */
            distributeMultiplier: function (all) {
                var is_one = all ? this.power.absEquals(1) : this.power.equals(1);
                if (this.symbols && is_one && this.group !== CB && !this.multiplier.equals(1)) {
                    for (var x in this.symbols) {
                        var s = this.symbols[x];
                        s.multiplier = s.multiplier.multiply(this.multiplier);
                        s.distributeMultiplier();
                    }
                    this.toUnitMultiplier();
                }

                return this;
            },
            /**
             * This method expands the exponent over the entire symbol just like
             * distributeMultiplier
             * @returns {Symbol}
             */
            distributeExponent: function () {
                if (!this.power.equals(1)) {
                    var p = this.power;
                    for (var x in this.symbols) {
                        var s = this.symbols[x];
                        if (s.group === EX) {
                            s.power = _.multiply(s.power, new Symbol(p));
                        }
                        else {
                            this.symbols[x].power = this.symbols[x].power.multiply(p);
                        }
                    }
                    this.toLinear();
                }
                return this;
            },
            /**
             * This method will attempt to up-convert or down-convert one symbol
             * from one group to another. Not all symbols are convertible from one
             * group to another however. In that case the symbol will remain
             * unchanged.
             * @param {int} group
             * @param {string} imaginary
             */
            convert: function (group, imaginary) {
                if (group > FN) {
                    //make a clone of this symbol;
                    var cp = this.clone();

                    //attach a symbols object and upgrade the group
                    this.symbols = {};

                    if (group === CB) {
                        //symbol of group CB hold symbols bound together through multiplication
                        //because of commutativity this multiplier can technically be anywhere within the group
                        //to keep track of it however it's easier to always have the top level carry it
                        cp.toUnitMultiplier();
                    }
                    else {
                        //reset the symbol
                        this.toUnitMultiplier();
                    }

                    if (this.group === FN) {
                        cp.args = this.args;
                        delete this.args;
                        delete this.fname;
                    }

                    //the symbol may originate from the symbol i but this property no longer holds true
                    //after copying
                    if (this.isImgSymbol)
                        delete this.isImgSymbol;

                    this.toLinear();
                    //attach a clone of this symbol to the symbols object using its proper key
                    this.symbols[cp.keyForGroup(group)] = cp;
                    this.group = group;
                    //objects by default don't have a length property. However, in order to keep track of the number
                    //of sub-symbols we have to impliment our own.
                    this.length = 1;
                }
                else if (group === EX) {
                    //1^x is just one so check and make sure
                    if (!(this.group === N && this.multiplier.equals(1))) {
                        if (this.group !== EX)
                            this.previousGroup = this.group;
                        if (this.group === N) {
                            this.value = this.multiplier.num.toString();
                            this.toUnitMultiplier();
                        }
                        //update the hash to reflect the accurate hash
                        else
                            this.value = text(this, 'hash');

                        this.group = EX;
                    }
                }
                else if (group === N) {
                    var m = this.multiplier.toDecimal();
                    if (this.symbols)
                        this.symbols = undefined;
                    new Symbol(this.group === P ? m * Math.pow(this.value, this.power) : m).clone(this);
                }
                else if (group === P && this.group === N) {
                    this.value = imaginary ? this.multiplier.num.toString() : Math.abs(this.multiplier.num.toString());
                    this.toUnitMultiplier(!imaginary);
                    this.group = P;
                }
                return this;
            },
            /**
             * This method is one of the principal methods to make it all possible.
             * It performs cleanup and prep operations whenever a symbols is
             * inserted. If the symbols results in a 1 in a CB (multiplication)
             * group for instance it will remove the redundant symbol. Similarly
             * in a symbol of group PL or CP (symbols glued by multiplication) it
             * will remove any dangling zeroes from the symbol. It will also
             * up-convert or down-convert a symbol if it detects that it's
             * incorrectly grouped. It should be noted that this method is not
             * called directly but rather by the 'attach' method for addition groups
             * and the 'combine' method for multiplication groups.
             * @param {Symbol} symbol
             * @param {String} action
             */
            insert: function (symbol, action) {
                //this check can be removed but saves a lot of aggravation when trying to hunt down
                //a bug. If left, you will instantly know that the error can only be between 2 symbols.
                if (!isSymbol(symbol))
                    err('Object ' + symbol + ' is not of type Symbol!');
                if (this.symbols) {
                    var group = this.group;
                    if (group > FN) {
                        var key = symbol.keyForGroup(group);
                        var existing = key in this.symbols ? this.symbols[key] : false; //check if there's already a symbol there
                        if (action === 'add') {
                            var hash = key;
                            if (existing) {
                                //add them together using the parser
                                this.symbols[hash] = _.add(existing, symbol);
                                //if the addition resulted in a zero multiplier remove it
                                if (this.symbols[hash].multiplier.equals(0)) {
                                    delete this.symbols[hash];
                                    this.length--;

                                    if (this.length === 0) {
                                        this.convert(N);
                                        this.multiplier = new Frac(0);
                                    }
                                }
                            }
                            else {
                                this.symbols[key] = symbol;
                                this.length++;
                            }
                        }
                        else {
                            //check if this is of group P and unwrap before inserting
                            if (symbol.group === P && isInt(symbol.power)) {
                                symbol.convert(N);
                            }

                            //transfer the multiplier to the upper symbol but only if the symbol numeric
                            if (symbol.group !== EX) {
                                this.multiplier = this.multiplier.multiply(symbol.multiplier);
                                symbol.toUnitMultiplier();
                            }
                            else {
                                symbol.parens = symbol.multiplier.lessThan(0);
                                this.multiplier = this.multiplier.multiply(symbol.multiplier.clone().abs());
                                symbol.toUnitMultiplier(true);
                            }

                            if (existing) {
                                //remove because the symbol may have changed
                                symbol = _.multiply(remove(this.symbols, key), symbol);
                                if (symbol.isConstant()) {
                                    this.multiplier = this.multiplier.multiply(symbol.multiplier);
                                    symbol = new Symbol(1); //the dirty work gets done down the line when it detects 1
                                }

                                this.length--;
                                //clean up
                            }

                            //don't insert the symbol if it's 1
                            if (!symbol.isOne(true)) {
                                this.symbols[key] = symbol;
                                this.length++;
                            }
                            else if (symbol.multiplier.lessThan(0)) {
                                this.negate(); //put back the sign
                            }
                        }

                        //clean up
                        if (this.length === 0)
                            this.convert(N);
                        //update the hash
                        if (this.group === CP || this.group === CB) {
                            this.updateHash();
                        }
                    }
                }

                return this;
            },
            //the insert method for addition
            attach: function (symbol) {
                if (isArray(symbol)) {
                    for (var i = 0; i < symbol.length; i++)
                        this.insert(symbol[i], 'add');
                    return this;
                }
                return this.insert(symbol, 'add');
            },
            //the insert method for multiplication
            combine: function (symbol) {
                if (isArray(symbol)) {
                    for (var i = 0; i < symbol.length; i++)
                        this.insert(symbol[i], 'multiply');
                    return this;
                }
                return this.insert(symbol, 'multiply');
            },
            /**
             * This method should be called after any major "surgery" on a symbol.
             * It updates the hash of the symbol for example if the fname of a
             * function has changed it will update the hash of the symbol.
             */
            updateHash: function () {
                if (this.group === N)
                    return;

                if (this.group === FN) {
                    var contents = '',
                            args = this.args,
                            is_parens = this.fname === PARENTHESIS;
                    for (var i = 0; i < args.length; i++)
                        contents += (i === 0 ? '' : ',') + text(args[i]);
                    var fn_name = is_parens ? '' : this.fname;
                    this.value = fn_name + (is_parens ? contents : inBrackets(contents));
                }
                else if (!(this.group === S || this.group === PL)) {
                    this.value = text(this, 'hash');
                }
            },
            /**
             * this function defines how every group in stored within a group of
             * higher order think of it as the switchboard for the library. It
             * defines the hashes for symbols.
             * @param {int} group
             */
            keyForGroup: function (group) {
                var g = this.group;
                var key;

                if (g === N) {
                    key = this.value;
                }
                else if (g === S || g === P) {
                    if (group === PL)
                        key = this.power.toDecimal();
                    else
                        key = this.value;
                }
                else if (g === FN) {
                    if (group === PL)
                        key = this.power.toDecimal();
                    else
                        key = text(this, 'hash');
                }
                else if (g === PL) {
                    //if the order is reversed then we'll assume multiplication
                    //TODO: possible future dilemma
                    if (group === CB)
                        key = text(this, 'hash');
                    else if (group === CP) {
                        if (this.power.equals(1))
                            key = this.value;
                        else
                            key = inBrackets(text(this, 'hash')) + Settings.POWER_OPERATOR + this.power.toDecimal();
                    }
                    else if (group === PL)
                        key = this.power.toString();
                    else
                        key = this.value;
                    return key;
                }
                else if (g === CP) {
                    if (group === CP) {
                        key = text(this, 'hash');
                    }
                    if (group === PL)
                        key = this.power.toDecimal();
                    else
                        key = this.value;
                }
                else if (g === CB) {
                    if (group === PL)
                        key = this.power.toDecimal();
                    else
                        key = text(this, 'hash');
                }
                else if (g === EX) {
                    if (group === PL)
                        key = text(this.power);
                    else
                        key = text(this, 'hash');
                }

                return key;
            },
            /**
             * Symbols are typically stored in an object which works fine for most
             * cases but presents a problem when the order of the symbols makes
             * a difference. This function simply collects all the symbols and
             * returns them as an array. If a function is supplied then that
             * function is called on every symbol contained within the object.
             * @param {Function} fn
             * @param {Object} opt
             * @param {Function} sort_fn
             * @@param {Boolean} expand_symbol
             * @returns {Array}
             */
            collectSymbols: function (fn, opt, sort_fn, expand_symbol) {
                var collected = [];
                if (!this.symbols)
                    collected.push(this);
                else {
                    for (var x in this.symbols) {
                        var symbol = this.symbols[x];
                        if (expand_symbol && (symbol.group === PL || symbol.group === CP)) {
                            collected = collected.concat(symbol.collectSymbols());
                        }
                        else
                            collected.push(fn ? fn(symbol, opt) : symbol);
                    }
                }
                if (sort_fn === null)
                    sort_fn = undefined; //WTF Firefox? Seriously?

                return collected.sort(sort_fn);//sort hopefully gives us some sort of consistency
            },
            /**
             * Returns the latex representation of the symbol
             * @param {String} option
             * @returns {String}
             */
            latex: function (option) {
                return LaTeX.latex(this, option);
            },
            /**
             * Returns the text representation of a symbol
             * @param {String} option
             * @returns {String}
             */
            text: function (option) {
                return text(this, option);
            },
            /**
             * Checks if the function evaluates to 1. e.g. x^0 or 1 :)
             * @@param {bool} abs Compares the absolute value
             */
            isOne: function (abs) {
                var f = abs ? 'absEquals' : 'equals';
                if (this.group === N)
                    return this.multiplier[f](1);
                else
                    return this.power.equals(0);
            },
            isComposite: function () {
                var g = this.group,
                        pg = this.previousGroup;
                return g === CP || g === PL || pg === PL || pg === CP;
            },
            isCombination: function () {
                var g = this.group,
                        pg = this.previousGroup;
                return g === CB || pg === CB;
            },
            lessThan: function (n) {
                return this.multiplier.lessThan(n);
            },
            greaterThan: function (n) {
                return this.multiplier.greaterThan(n);
            },
            /**
             * Get's the denominator of the symbol if the symbol is of class CB (multiplication)
             * with other classes the symbol is either the denominator or not.
             * Take x^-1+x^-2. If the symbol was to be mixed such as x+x^-2 then the symbol doesn't have have an exclusive
             * denominator and has to be found by looking at the actual symbols themselves.
             */
            getDenom: function () {
                var retval, symbol;
                symbol = this.clone();
                //e.g. 1/(x*(x+1))
                if (this.group === CB && this.power.lessThan(0))
                    symbol = _.expand(symbol);

                //if the symbol already is the denominator... DONE!!!
                if (symbol.power.lessThan(0)) {
                    var d = _.parse(symbol.multiplier.den);
                    retval = symbol.toUnitMultiplier();
                    retval.power.negate();
                    retval = _.multiply(d, retval); //put back the coeff
                }
                else if (symbol.group === CB) {
                    retval = _.parse(symbol.multiplier.den);
                    for (var x in symbol.symbols)
                        if (symbol.symbols[x].power < 0)
                            retval = _.multiply(retval, symbol.symbols[x].clone().invert());
                }
                else
                    retval = _.parse(symbol.multiplier.den);
                return retval;
            },
            getNum: function () {
                var retval, symbol;
                symbol = this.clone();
                //e.g. 1/(x*(x+1))
                if (symbol.group === CB && symbol.power.lessThan(0))
                    symbol = _.expand(symbol);
                //if the symbol already is the denominator... DONE!!!
                if (symbol.power.greaterThan(0) && symbol.group !== CB) {
                    retval = _.multiply(_.parse(symbol.multiplier.num), symbol.toUnitMultiplier());
                }
                else if (symbol.group === CB) {
                    retval = _.parse(symbol.multiplier.num);
                    symbol.each(function (x) {
                        if (x.power > 0 || x.group === EX && x.power.multiplier > 0) {
                            retval = _.multiply(retval, x.clone());
                        }
                    });
                }
                else {
                    retval = _.parse(symbol.multiplier.num);
                }
                return retval;
            },
            toString: function () {
                return this.text();
            }
        };

    //Parser =======================================================================
        //Uses modified Shunting-yard algorithm. http://en.wikipedia.org/wiki/Shunting-yard_algorithm
        function Parser() {
            //Point to the local parser instead of the global one
            var _ = this;
            var bin = {};
            var preprocessors = {names: [], actions: []};

    //Parser.classes ===============================================================
            function Slice(upper, lower) {
                this.start = upper;
                this.end = lower;
            }
            Slice.prototype.isConstant = function () {
                return this.start.isConstant() && this.end.isConstant();
            };
            Slice.prototype.text = function () {
                return text(this.start) + ':' + text(this.end);
            };

            /**
             * Class used to collect arguments for functions
             * @returns {Parser.Collection}
             */
            function Collection() {
                this.elements = [];
            }
            Collection.prototype.append = function (e) {
                this.elements.push(e);
            };
            Collection.prototype.getItems = function () {
                return this.elements;
            };
            Collection.prototype.toString = function () {
                return _.pretty_print(this.elements);
            };
            Collection.create = function (e) {
                var collection = new Collection();
                if (e)
                    collection.append(e);
                return collection;
            };

            function Token(node, node_type, column) {
                this.type = node_type;
                this.value = node;
                if (column !== undefined)
                    this.column = column + 1;
                if (node_type === Token.OPERATOR) {
                    //copy everything over from the operator
                    var operator = operators[node];
                    for (var x in operator)
                        this[x] = operator[x];

                }
                else if (node_type === Token.FUNCTION) {
                    this.precedence = Token.MAX_PRECEDENCE; //leave enough roon
                    this.leftAssoc = false;
                }
            }
            Token.prototype.toString = function () {
                return this.value;
            };
            Token.prototype.toString = function () {
                if (this.is_prefix)
                    return '`' + this.value;
                return this.value;
            };
            //some constants
            Token.OPERATOR = 'OPERATOR';
            Token.VARIABLE_OR_LITERAL = 'VARIABLE_OR_LITERAL';
            Token.FUNCTION = 'FUNCTION';
            Token.UNIT = 'UNIT';
            Token.KEYWORD = 'KEYWORD';
            Token.MAX_PRECEDENCE = 999;
            //create link to classes
            this.classes = {
                Collection: Collection,
                Slice: Slice,
                Token: Token
            };
    //Parser.modules ===============================================================
            //object for functions which handle complex number
            var complex = {
                prec: undefined,
                cos: function (r, i) {
                    var re, im;
                    re = _.parse(Math.cos(r) * Math.cosh(i));
                    im = _.parse(Math.sin(r) * Math.sinh(i));
                    return _.subtract(re, _.multiply(im, Symbol.imaginary()));
                },
                sin: function (r, i) {
                    var re, im;
                    re = _.parse(Math.sin(r) * Math.cosh(i));
                    im = _.parse(Math.cos(r) * Math.sinh(i));
                    return _.subtract(re, _.multiply(im, Symbol.imaginary()));
                },
                tan: function (r, i) {
                    var re, im;
                    re = _.parse(Math.sin(2 * r) / (Math.cos(2 * r) + Math.cosh(2 * i)));
                    im = _.parse(Math.sinh(2 * i) / (Math.cos(2 * r) + Math.cosh(2 * i)));
                    return _.add(re, _.multiply(im, Symbol.imaginary()));
                },
                sec: function (r, i) {
                    var t = this.removeDen(this.cos(r, i));
                    return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));
                },
                csc: function (r, i) {
                    var t = this.removeDen(this.sin(r, i));
                    return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));
                },
                cot: function (r, i) {
                    var t = this.removeDen(this.tan(r, i));
                    return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));
                },
                acos: function (r, i) {
                    var symbol, sq, a, b, c;
                    symbol = this.fromArray([r, i]);
                    sq = _.expand(_.pow(symbol.clone(), new Symbol(2))); //z*z
                    a = _.multiply(sqrt(_.subtract(new Symbol(1), sq)), Symbol.imaginary());
                    b = _.expand(_.add(symbol.clone(), a));
                    c = log(b);
                    return _.expand(_.multiply(Symbol.imaginary().negate(), c));
                },
                asin: function (r, i) {
                    return _.subtract(_.parse('pi/2'), this.acos(r, i));
                },
                atan: function (r, i) {
                    var a, b, c, symbol;
                    symbol = complex.fromArray([r, i]);
                    a = _.expand(_.multiply(Symbol.imaginary(), symbol.clone()));
                    b = log(_.expand(_.subtract(new Symbol(1), a.clone())));
                    c = log(_.expand(_.add(new Symbol(1), a.clone())));
                    return _.expand(_.multiply(_.divide(Symbol.imaginary(), new Symbol(2)), _.subtract(b, c)));
                },
                asec: function (r, i) {
                    var d = this.removeDen([r, i]);
                    d[1].negate();
                    return this.acos.apply(this, d);
                },
                acsc: function (r, i) {
                    var d = this.removeDen([r, i]);
                    d[1].negate();
                    return this.asin.apply(this, d);
                },
                acot: function (r, i) {
                    var d = this.removeDen([r, i]);
                    d[1].negate();
                    return this.atan.apply(this, d);
                },
                //Hyperbolic trig
                cosh: function (r, i) {
                    var re, im;
                    re = _.parse(Math.cosh(r) * Math.cos(i));
                    im = _.parse(Math.sinh(r) * Math.sin(i));
                    return _.add(re, _.multiply(im, Symbol.imaginary()));
                },
                sinh: function (r, i) {
                    var re, im;
                    re = _.parse(Math.sinh(r) * Math.cos(i));
                    im = _.parse(Math.cosh(r) * Math.sin(i));
                    return _.add(re, _.multiply(im, Symbol.imaginary()));
                },
                tanh: function (r, i) {
                    var re, im;
                    re = _.parse(Math.sinh(2 * r) / (Math.cos(2 * i) + Math.cosh(2 * r)));
                    im = _.parse(Math.sin(2 * i) / (Math.cos(2 * i) + Math.cosh(2 * r)));
                    return _.subtract(re, _.multiply(im, Symbol.imaginary()));
                },
                sech: function (r, i) {
                    var t = this.removeDen(this.cosh(r, i));
                    return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));
                },
                csch: function (r, i) {
                    var t = this.removeDen(this.sinh(r, i));
                    return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));
                },
                coth: function (r, i) {
                    var t = this.removeDen(this.tanh(r, i));
                    return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));
                },
                acosh: function (r, i) {
                    var a, b, z;
                    z = this.fromArray([r, i]);
                    a = sqrt(_.add(z.clone(), new Symbol(1)));
                    b = sqrt(_.subtract(z.clone(), new Symbol(1)));
                    return _.expand(log(_.add(z, _.expand(_.multiply(a, b)))));
                },
                asinh: function (r, i) {
                    var a, z;
                    z = this.fromArray([r, i]);
                    a = sqrt(_.add(new Symbol(1), _.expand(_.pow(z.clone(), new Symbol(2)))));
                    return _.expand(log(_.add(z, a)));
                },
                atanh: function (r, i) {
                    var a, b, z;
                    z = this.fromArray([r, i]);
                    a = log(_.add(z.clone(), new Symbol(1)));
                    b = log(_.subtract(new Symbol(1), z));
                    return _.expand(_.divide(_.subtract(a, b), new Symbol(2)));
                },
                asech: function (r, i) {
                    var t = this.removeDen([r, i]);
                    t[1].negate();
                    return this.acosh.apply(this, t);
                },
                acsch: function (r, i) {
                    var t = this.removeDen([r, i]);
                    t[1].negate();
                    return this.asinh.apply(this, t);
                },
                acoth: function (r, i) {
                    var t = this.removeDen([r, i]);
                    t[1].negate();
                    return this.atanh.apply(this, t);
                },
                sqrt: function (symbol) {
                    var re, im, h, a, d;
                    re = symbol.realpart();
                    im = symbol.imagpart();
                    h = Symbol.hyp(re, im);
                    a = _.add(re.clone(), h);
                    d = sqrt(_.multiply(new Symbol(2), a.clone()));
                    return _.add(_.divide(a.clone(), d.clone()), _.multiply(_.divide(im, d), Symbol.imaginary()));
                },
                log: function (r, i) {
                    var re, im;
                    re = log(Symbol.hyp(r, i));
                    im = _.parse(Math.atan2(i, r));
                    return _.add(re, _.multiply(Symbol.imaginary(), im));
                },
                erf(symbol, n) {
                    //Do nothing for now. Revisit this in the future.
                    return _.symfunction('erf', [symbol]);
                },
                removeDen: function (symbol) {
                    var den, r, i, re, im;
                    if (isArray(symbol)) {
                        r = symbol[0];
                        i = symbol[1];
                    }
                    else {
                        r = symbol.realpart();
                        i = symbol.imagpart();
                    }

                    den = Math.pow(r, 2) + Math.pow(i, 2);
                    re = _.parse(r / den);
                    im = _.parse(i / den);
                    return [re, im];
                },
                fromArray: function (arr) {
                    return _.add(arr[0], _.multiply(Symbol.imaginary(), arr[1]));
                },
                evaluate: function (symbol, f) {
                    var re, im, sign;

                    sign = symbol.power.sign();
                    //remove it from under the denominator
                    symbol.power = symbol.power.abs();
                    //expand
                    if (symbol.power.greaterThan(1))
                        symbol = _.expand(symbol);
                    //remove the denominator
                    if (sign < 0) {
                        var d = this.removeDen(symbol);
                        re = d[0];
                        im = d[1];
                    }
                    else {
                        re = symbol.realpart();
                        im = symbol.imagpart();
                    }

                    if (re.isConstant('all') && im.isConstant('all'))
                        return this[f].call(this, re, im);
                    return _.symfunction(f, [symbol]);
                }
            };
            //object for functions which handle trig
            var trig = this.trig = {
                //container for trigonometric function
                cos: function (symbol) {
                    if (symbol.equals('pi') && symbol.multiplier.den.equals(2))
                        return new Symbol(0);

                    if (Settings.PARSE2NUMBER) {
                        if (symbol.equals(new Symbol(Settings.PI / 2)))
                            return new Symbol(0);
                        if (symbol.isConstant()) {
                            return new Symbol(Math.cos(symbol.valueOf()));
                        }
                        if (symbol.isImaginary()) {
                            return complex.evaluate(symbol, 'cos');
                        }
                    }
                    if (symbol.equals(0))
                        return new Symbol(1);

                    var retval,
                            c = false,
                            q = getQuadrant(symbol.multiplier.toDecimal()),
                            m = symbol.multiplier.abs();
                    symbol.multiplier = m;

                    if (symbol.isPi() && symbol.isLinear()) {
                        //return for 1 or -1 for multiples of pi
                        if (isInt(m)) {
                            retval = new Symbol(even(m) ? 1 : -1);
                        }
                        else {
                            var n = Number(m.num), d = Number(m.den);
                            if (d === 2)
                                retval = new Symbol(0);
                            else if (d === 3) {
                                retval = _.parse('1/2');
                                c = true;
                            }
                            else if (d === 4) {
                                retval = _.parse('1/sqrt(2)');
                                c = true;
                            }
                            else if (d === 6) {
                                retval = _.parse('sqrt(3)/2');
                                c = true;
                            }
                            else
                                retval = _.symfunction('cos', [symbol]);
                        }
                    }

                    if (c && (q === 2 || q === 3))
                        retval.negate();

                    if (!retval)
                        retval = _.symfunction('cos', [symbol]);

                    return retval;
                },
                sin: function (symbol) {
                    if (Settings.PARSE2NUMBER) {
                        if (symbol.isConstant()) {
                            return new Symbol(Math.sin(symbol.valueOf()));
                        }
                        if (symbol.isImaginary())
                            return complex.evaluate(symbol, 'sin');
                    }

                    if (symbol.equals(0))
                        return new Symbol(0);

                    var retval,
                            c = false,
                            q = getQuadrant(symbol.multiplier.toDecimal()),
                            sign = symbol.multiplier.sign(),
                            m = symbol.multiplier.abs();
                    symbol.multiplier = m;
                    if (symbol.equals('pi'))
                        retval = new Symbol(0);
                    else if (symbol.isPi() && symbol.isLinear()) {
                        //return for 0 for multiples of pi
                        if (isInt(m)) {
                            retval = new Symbol(0);
                        }
                        else {
                            var n = m.num, d = m.den;
                            if (d == 2) {
                                retval = new Symbol(1);
                                c = true;
                            }
                            else if (d == 3) {
                                retval = _.parse('sqrt(3)/2');
                                c = true;
                            }
                            else if (d == 4) {
                                retval = _.parse('1/sqrt(2)');
                                c = true;
                            }
                            else if (d == 6) {
                                retval = _.parse('1/2');
                                c = true;
                            }
                            else
                                retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));
                        }
                    }

                    if (!retval)
                        retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));

                    if (c && (q === 3 || q === 4))
                        retval.negate();

                    return retval;
                },
                tan: function (symbol) {
                    if (Settings.PARSE2NUMBER) {
                        if (symbol.isConstant())
                            return new Symbol(Math.tan(symbol.valueOf()));
                        if (symbol.isImaginary())
                            return complex.evaluate(symbol, 'tan');
                    }
                    var retval,
                            c = false,
                            q = getQuadrant(symbol.multiplier.toDecimal()),
                            m = symbol.multiplier;

                    symbol.multiplier = m;

                    if (symbol.isPi() && symbol.isLinear()) {
                        //return 0 for all multiples of pi
                        if (isInt(m)) {
                            retval = new Symbol(0);
                        }
                        else {
                            var n = m.num, d = m.den;
                            if (d == 2)
                                throw new UndefinedError('tan is undefined for ' + symbol.toString());
                            else if (d == 3) {
                                retval = _.parse('sqrt(3)');
                                c = true;
                            }
                            else if (d == 4) {
                                retval = new Symbol(1);
                                c = true;
                            }
                            else if (d == 6) {
                                retval = _.parse('1/sqrt(3)');
                                c = true;
                            }
                            else
                                retval = _.symfunction('tan', [symbol]);
                        }
                    }

                    if (!retval)
                        retval = _.symfunction('tan', [symbol]);

                    if (c && (q === 2 || q === 4))
                        retval.negate();

                    return retval;
                },
                sec: function (symbol) {
                    if (Settings.PARSE2NUMBER) {
                        if (symbol.isConstant())
                            return new Symbol(Math2.sec(symbol.valueOf()));
                        if (symbol.isImaginary())
                            return complex.evaluate(symbol, 'sec');
                        return _.parse(format('1/cos({0})', symbol));
                    }

                    var retval,
                            c = false,
                            q = getQuadrant(symbol.multiplier.toDecimal()),
                            m = symbol.multiplier.abs();
                    symbol.multiplier = m;

                    if (symbol.isPi() && symbol.isLinear()) {
                        //return for 1 or -1 for multiples of pi
                        if (isInt(m)) {
                            retval = new Symbol(even(m) ? 1 : -1);
                        }
                        else {
                            var n = m.num, d = m.den;
                            if (d == 2)
                                throw new UndefinedError('sec is undefined for ' + symbol.toString());
                            else if (d == 3) {
                                retval = new Symbol(2);
                                c = true;
                            }
                            else if (d == 4) {
                                retval = _.parse('sqrt(2)');
                                c = true;
                            }
                            else if (d == 6) {
                                retval = _.parse('2/sqrt(3)');
                                c = true;
                            }
                            else
                                retval = _.symfunction('sec', [symbol]);
                        }
                    }

                    if (c && (q === 2 || q === 3))
                        retval.negate();

                    if (!retval)
                        retval = _.symfunction('sec', [symbol]);

                    return retval;
                },
                csc: function(symbol) {
                    if(Settings.PARSE2NUMBER) {
                        if(symbol.isConstant())
                            return new Symbol(Math2.csc(symbol.valueOf()));
                        if(symbol.isImaginary())
                            return complex.evaluate(symbol, 'csc');
                        return _.parse(format('1/sin({0})', symbol));
                    }

                    var retval,
                        c = false,
                        q = getQuadrant(symbol.multiplier.toDecimal()),
                        sign = symbol.multiplier.sign(),
                        m = symbol.multiplier.abs();

                    symbol.multiplier = m;

                    if(symbol.isPi() && symbol.isLinear()) {
                        //return for 0 for multiples of pi
                        if(isInt(m)) {
                            throw new UndefinedError('csc is undefined for '+symbol.toString());
                        }
                        else {
                            var n = m.num, d = m.den;
                            if(d == 2) {
                                retval = new Symbol(1); c = true;
                            }
                            else if(d == 3) {
                                retval = _.parse('2/sqrt(3)'); c = true;
                            }
                            else if(d == 4) {
                                retval = _.parse('sqrt(2)'); c = true;
                            }
                            else if(d == 6) {
                                retval = new Symbol(2); c = true;
                            }
                            else
                                retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));
                        }
                    }

                    if(!retval) retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));

                    if(c && (q === 3 || q === 4)) retval.negate();

                    return retval;
                },
                cot: function (symbol) {
                    if (Settings.PARSE2NUMBER) {
                        if (symbol.isConstant())
                            return new Symbol(Math2.cot(symbol.valueOf()));
                        if (symbol.isImaginary())
                            return complex.evaluate(symbol, 'cot');
                        return _.parse(format('1/tan({0})', symbol));
                    }
                    var retval,
                            c = false,
                            q = getQuadrant(symbol.multiplier.toDecimal()),
                            m = symbol.multiplier;

                    symbol.multiplier = m;

                    if (symbol.isPi() && symbol.isLinear()) {
                        //return 0 for all multiples of pi
                        if (isInt(m)) {
                            throw new UndefinedError('cot is undefined for ' + symbol.toString());
                        }
                        else {
                            var n = m.num, d = m.den;
                            if (d == 2)
                                retval = new Symbol(0);
                            else if (d == 3) {
                                retval = _.parse('1/sqrt(3)');
                                c = true;
                            }
                            else if (d == 4) {
                                retval = new Symbol(1);
                                c = true;
                            }
                            else if (d == 6) {
                                retval = _.parse('sqrt(3)');
                                c = true;
                            }
                            else
                                retval = _.symfunction('cot', [symbol]);
                        }
                    }

                    if (!retval)
                        retval = _.symfunction('cot', [symbol]);

                    if (c && (q === 2 || q === 4))
                        retval.negate();

                    return retval;
                },
                acos: function (symbol) {
                    if (Settings.PARSE2NUMBER) {
                        if (symbol.isConstant())
                            return new Symbol(Math.acos(symbol.valueOf()));
                        if (symbol.isImaginary())
                            return complex.evaluate(symbol, 'acos');
                    }
                    return _.symfunction('acos', arguments);
                },
                asin: function (symbol) {
                    if (Settings.PARSE2NUMBER) {
                        if (symbol.isConstant())
                            return new Symbol(Math.asin(symbol.valueOf()));
                        if (symbol.isImaginary())
                            return complex.evaluate(symbol, 'asin');
                    }
                    return _.symfunction('asin', arguments);
                },
                atan: function (symbol) {
                    var retval;
                    if (symbol.equals(0))
                        retval = new Symbol(0);
                    else if (Settings.PARSE2NUMBER) {
                        if (symbol.isConstant())
                            return new Symbol(Math.atan(symbol.valueOf()));
                        if (symbol.isImaginary())
                            return complex.evaluate(symbol, 'atan');
                        return _.symfunction('atan', arguments);
                    }
                    else if (symbol.equals(-1))
                        retval = _.parse('-pi/4');
                    else
                        retval = _.symfunction('atan', arguments);
                    return retval;
                },
                asec: function (symbol) {
                    if (Settings.PARSE2NUMBER) {
                        if (symbol.isConstant())
                            return new Symbol(Math.acos(symbol.invert().valueOf()));
                        if (symbol.isImaginary())
                            return complex.evaluate(symbol, 'asec');
                    }
                    return _.symfunction('asec', arguments);
                },
                acsc: function (symbol) {
                    if (Settings.PARSE2NUMBER) {
                        if (symbol.isConstant())
                            return new Symbol(Math.asin(symbol.invert().valueOf()));
                        if (symbol.isImaginary())
                            return complex.evaluate(symbol, 'acsc');
                    }
                    return _.symfunction('acsc', arguments);
                },
                acot: function(symbol) {
                    if(Settings.PARSE2NUMBER) {
                        if(symbol.isConstant()) {
                            return new _.add(_.parse('pi/2'), trig.atan(symbol).negate());
                        }

                        if(symbol.isImaginary())
                            return complex.evaluate(symbol, 'acot');
                    }
                    return _.symfunction('acot', arguments);
                },
                atan2: function (a, b) {
                    if (a.equals(0) && b.equals(0))
                        throw new UndefinedError('atan2 is undefined for 0, 0');

                    if (Settings.PARSE2NUMBER && a.isConstant() && b.isConstant()) {
                        return new Symbol(Math.atan2(a, b));
                    }
                    return _.symfunction('atan2', arguments);
                }
            };
            //object for functions which handle hyperbolic trig
            var trigh = this.trigh = {
                //container for hyperbolic trig function
                cosh: function (symbol) {
                    var retval;
                    if (Settings.PARSE2NUMBER) {
                        if (symbol.isConstant())
                            return new Symbol(Math.cosh(symbol.valueOf()));
                        if (symbol.isImaginary()) {
                            return complex.evaluate(symbol, 'cosh');
                        }
                    }

                    return retval = _.symfunction('cosh', arguments);
                },
                sinh: function (symbol) {
                    var retval;
                    if (Settings.PARSE2NUMBER) {
                        if (symbol.isConstant())
                            return new Symbol(Math.sinh(symbol.valueOf()));
                        if (symbol.isImaginary()) {
                            return complex.evaluate(symbol, 'sinh');
                        }
                    }

                    return retval = _.symfunction('sinh', arguments);
                },
                tanh: function (symbol) {
                    var retval;
                    if (Settings.PARSE2NUMBER) {
                        if (symbol.isConstant())
                            return new Symbol(Math.tanh(symbol.valueOf()));
                        if (symbol.isImaginary()) {
                            return complex.evaluate(symbol, 'tanh');
                        }
                    }

                    return retval = _.symfunction('tanh', arguments);
                },
                sech: function (symbol) {
                    var retval;
                    if (Settings.PARSE2NUMBER) {
                        if (symbol.isConstant()) {
                            return new Symbol(Math.sech(symbol.valueOf()));
                        }
                        if (symbol.isImaginary()) {
                            return complex.evaluate(symbol, 'sech');
                        }
                        return _.parse(format('1/cosh({0})', symbol));
                    }

                    return retval = _.symfunction('sech', arguments);
                },
                csch: function (symbol) {
                    var retval;
                    if (Settings.PARSE2NUMBER) {
                        if (symbol.isConstant())
                            return new Symbol(Math.csch(symbol.valueOf()));
                        if (symbol.isImaginary()) {
                            return complex.evaluate(symbol, 'csch');
                        }
                        return _.parse(format('1/sinh({0})', symbol));
                    }

                    return retval = _.symfunction('csch', arguments);
                },
                coth: function (symbol) {
                    var retval;
                    if (Settings.PARSE2NUMBER) {
                        if (symbol.isConstant())
                            return new Symbol(Math.coth(symbol.valueOf()));
                        if (symbol.isImaginary()) {
                            return complex.evaluate(symbol, 'coth');
                        }
                        return _.parse(format('1/tanh({0})', symbol));
                    }

                    return retval = _.symfunction('coth', arguments);
                },
                acosh: function (symbol) {
                    var retval;
                    if (Settings.PARSE2NUMBER && symbol.isImaginary())
                        retval = complex.evaluate(symbol, 'acosh');
                    else if (Settings.PARSE2NUMBER)
                        retval = evaluate(_.parse(format(Settings.LOG+'(({0})+sqrt(({0})^2-1))', symbol.toString())));
                    else
                        retval = _.symfunction('acosh', arguments);
                    return retval;
                },
                asinh: function (symbol) {
                    var retval;
                    if (Settings.PARSE2NUMBER && symbol.isImaginary())
                        retval = complex.evaluate(symbol, 'asinh');
                    else if (Settings.PARSE2NUMBER)
                        retval = evaluate(_.parse(format(Settings.LOG+'(({0})+sqrt(({0})^2+1))', symbol.toString())));
                    else
                        retval = _.symfunction('asinh', arguments);
                    return retval;
                },
                atanh: function (symbol) {
                    var retval;
                    if (Settings.PARSE2NUMBER && symbol.isImaginary())
                        retval = complex.evaluate(symbol, 'atanh');
                    else if (Settings.PARSE2NUMBER) {
                        retval = evaluate(_.parse(format('(1/2)*'+Settings.LOG+'((1+({0}))/(1-({0})))', symbol.toString())));
                    }
                    else
                        retval = _.symfunction('atanh', arguments);
                    return retval;
                },
                asech: function (symbol) {
                    var retval;
                    if (Settings.PARSE2NUMBER && symbol.isImaginary())
                        retval = complex.evaluate(symbol, 'asech');
                    else if (Settings.PARSE2NUMBER)
                        retval = evaluate(log(_.add(symbol.clone().invert(), sqrt(_.subtract(_.pow(symbol, new Symbol(-2)), new Symbol(1))))));
                    else
                        retval = _.symfunction('asech', arguments);
                    return retval;
                },
                acsch: function (symbol) {
                    var retval;
                    if (Settings.PARSE2NUMBER && symbol.isImaginary())
                        retval = complex.evaluate(symbol, 'acsch');
                    else if (Settings.PARSE2NUMBER)
                        retval = evaluate(_.parse(format(Settings.LOG+'((1+sqrt(1+({0})^2))/({0}))', symbol.toString())));
                    else
                        retval = _.symfunction('acsch', arguments);
                    return retval;
                },
                acoth: function (symbol) {
                    var retval;
                    if (Settings.PARSE2NUMBER && symbol.isImaginary())
                        retval = complex.evaluate(symbol, 'acoth');
                    else if (Settings.PARSE2NUMBER) {
                        if (symbol.equals(1))
                            retval = Symbol.infinity();
                        else
                            retval = evaluate(
                                    _.divide(
                                            log(_.divide(_.add(symbol.clone(), new Symbol(1)), _.subtract(symbol.clone(), new Symbol(1)))),
                                            new Symbol(2)));
                    }
                    else
                        retval = _.symfunction('acoth', arguments);
                    return retval;
                }
            };
            //list of supported units
            this.units = {};
            //list all the supported operators
            var operators = {
                '\\': {
                    precedence: 8,
                    operator: '\\',
                    action: 'slash',
                    prefix: true,
                    postfix: false,
                    leftAssoc: true,
                    operation: function (e) {
                        return e; //bypass the slash
                    }
                },
                '!!': {
                    precedence: 7,
                    operator: '!!',
                    action: 'dfactorial',
                    prefix: false,
                    postfix: true,
                    leftAssoc: true,
                    operation: function (e) {
                        return _.symfunction(Settings.DOUBLEFACTORIAL, [e]); //wrap it in a factorial function
                    }
                },
                '!': {
                    precedence: 7,
                    operator: '!',
                    action: 'factorial',
                    prefix: false,
                    postfix: true,
                    leftAssoc: true,
                    operation: function (e) {
                        return factorial(e); //wrap it in a factorial function
                    }
                },
                '^': {
                    precedence: 6,
                    operator: '^',
                    action: 'pow',
                    prefix: false,
                    postfix: false,
                    leftAssoc: true
                },
                '**': {
                    precedence: 6,
                    operator: '**',
                    action: 'pow',
                    prefix: false,
                    postfix: false,
                    leftAssoc: true
                },
                '%': {
                    precedence: 4,
                    operator: '%',
                    action: 'percent',
                    prefix: false,
                    postfix: true,
                    leftAssoc: true,
                    overloaded: true,
                    overloadAction: 'mod',
    		overloadLeftAssoc: false,
                    operation: function (x) {
                        return _.divide(x, new Symbol(100));
                    }
                },
                '*': {
                    precedence: 4,
                    operator: '*',
                    action: 'multiply',
                    prefix: false,
                    postfix: false,
                    leftAssoc: false
                },
                '/': {
                    precedence: 4,
                    operator: '/',
                    action: 'divide',
                    prefix: false,
                    postfix: false,
                    leftAssoc: false
                },
                '+': {
                    precedence: 3,
                    operator: '+',
                    action: 'add',
                    prefix: true,
                    postfix: false,
                    leftAssoc: false,
                    operation: function (x) {
                        return x;
                    }
                },
                'plus': {
                    precedence: 3,
                    operator: 'plus',
                    action: 'add',
                    prefix: true,
                    postfix: false,
                    leftAssoc: false,
                    operation: function (x) {
                        return x;
                    }
                },
                '-': {
                    precedence: 3,
                    operator: '-',
                    action: 'subtract',
                    prefix: true,
                    postfix: false,
                    leftAssoc: false,
                    operation: function (x) {
                        return x.negate();
                    }
                },
                '=': {
                    precedence: 2,
                    operator: '=',
                    action: 'equals',
                    prefix: false,
                    postfix: false,
                    leftAssoc: false
                },
                '==': {
                    precedence: 1,
                    operator: '==',
                    action: 'eq',
                    prefix: false,
                    postfix: false,
                    leftAssoc: false
                },
                '<': {
                    precedence: 1,
                    operator: '<',
                    action: 'lt',
                    prefix: false,
                    postfix: false,
                    leftAssoc: false
                },
                '<=': {
                    precedence: 1,
                    operator: '<=',
                    action: 'lte',
                    prefix: false,
                    postfix: false,
                    leftAssoc: false
                },
                '>': {
                    precedence: 1,
                    operator: '>',
                    action: 'gt',
                    prefix: false,
                    postfix: false,
                    leftAssoc: false
                },
                '=>': {
                    precedence: 1,
                    operator: '=>',
                    action: 'gte',
                    prefix: false,
                    postfix: false,
                    leftAssoc: false
                },
                ',': {
                    precedence: 0,
                    operator: ',',
                    action: 'comma',
                    prefix: false,
                    postfix: false,
                    leftAssoc: false
                },
                ':': {
                    precedence: 0,
                    operator: ',',
                    action: 'assign',
                    prefix: false,
                    postfix: false,
                    leftAssoc: false,
                    vectorFn: 'slice'
                },
                ':=': {
                    precedence: 0,
                    operator: ',',
                    action: 'function_assign',
                    prefix: false,
                    postfix: false,
                    leftAssoc: true
                }
            };
            //brackets
            var brackets = {
                '(': {
                    type: 'round',
                    id: 1,
                    is_open: true,
                    is_close: false
                },
                ')': {
                    type: 'round',
                    id: 2,
                    is_open: false,
                    is_close: true
                },
                '[': {
                    type: 'square',
                    id: 3,
                    is_open: true,
                    is_close: false,
                    maps_to: 'vector'
                },
                ']': {
                    type: 'square',
                    id: 4,
                    is_open: false,
                    is_close: true
                },
                '{': {
                    type: 'curly',
                    id: 5,
                    is_open: true,
                    is_close: false,
                    maps_to: 'Set'
                },
                '}': {
                    type: 'curly',
                    id: 6,
                    is_open: false,
                    is_close: true
                }
            };
            // Supported functions.
            // Format: function_name: [mapped_function, number_of_parameters]
            var functions = this.functions = {
                'cos':                  [trig.cos, 1],
                'sin':                  [trig.sin, 1],
                'tan':                  [trig.tan, 1],
                'sec':                  [trig.sec, 1],
                'csc':                  [trig.csc, 1],
                'cot':                  [trig.cot, 1],
                'acos':                 [trig.acos, 1],
                'asin':                 [trig.asin, 1],
                'atan':                 [trig.atan, 1],
                'arccos':               [trig.acos, 1],
                'arcsin':               [trig.asin, 1],
                'arctan':               [trig.atan, 1],
                'asec':                 [trig.asec, 1],
                'acsc':                 [trig.acsc, 1],
                'acot':                 [trig.acot, 1],
                'atan2':                [trig.atan2, 2],
                'acoth':                [trigh.acoth, 1],
                'asech':                [trigh.asech, 1],
                'acsch':                [trigh.acsch, 1],
                'sinh':                 [trigh.sinh, 1],
                'cosh':                 [trigh.cosh, 1],
                'tanh':                 [trigh.tanh, 1],
                'asinh':                [trigh.asinh, 1],
                'sech':                 [trigh.sech, 1],
                'csch':                 [trigh.csch, 1],
                'coth':                 [trigh.coth, 1],
                'acosh':                [trigh.acosh, 1],
                'atanh':                [trigh.atanh, 1],
                'log10':                [, 1],
                'exp':                  [exp, 1],
                'radians':              [radians, 1],
                'degrees':              [degrees, 1],
                'min':                  [min, -1],
                'max':                  [max, -1],
                'erf':                  [, 1],
                'floor':                [, 1],
                'ceil':                 [, 1],
                'trunc':                [, 1],
                'Si':                   [, 1],
                'step':                 [, 1],
                'rect':                 [, 1],
                'sinc':                 [sinc, 1],
                'tri':                  [, 1],
                'sign':                 [sign, 1],
                'Ci':                   [, 1],
                'Ei':                   [, 1],
                'Shi':                  [, 1],
                'Chi':                  [, 1],
                'Li':                   [, 1],
                'fib':                  [, 1],
                'fact':                 [factorial, 1],
                'factorial':            [factorial, 1],
                'continued_fraction':   [continued_fraction, [1, 2]],
                'dfactorial':           [, 1],
                'gamma_incomplete':     [, [1, 2]],
                'round':                [round, [1, 2]],
                'scientific':           [scientific, [1, 2]],
                'mod':                  [mod, 2],
                'pfactor':              [pfactor, 1],
                'vector':               [vector, -1],
                'matrix':               [matrix, -1],
                'Set':                  [set, -1],
                'imatrix':              [imatrix, -1],
                'parens':               [parens, -1],
                'sqrt':                 [sqrt, 1],
                'cbrt':                 [cbrt, 1],
                'nthroot':              [nthroot, 2],
                'log':                  [log, [1, 2]],
                'expand':               [expand, 1],
                'abs':                  [abs, 1],
                'invert':               [invert, 1],
                'determinant':          [determinant, 1],
                'size':                 [size, 1],
                'transpose':            [transpose, 1],
                'dot':                  [dot, 2],
                'cross':                [cross, 2],
                'vecget':               [vecget, 2],
                'vecset':               [vecset, 3],
                'vectrim':              [vectrim, [1, 2]],
                'matget':               [matget, 3],
                'matset':               [matset, 4],
                'matgetrow':            [matgetrow, 2],
                'matsetrow':            [matsetrow, 3],
                'matgetcol':            [matgetcol, 2],
                'matsetcol':            [matsetcol, 3],
                'rationalize':          [rationalize, 1],
                'IF':                   [IF, 3],
                'is_in':                [is_in, 2],
                //imaginary support
                'realpart':             [realpart, 1],
                'imagpart':             [imagpart, 1],
                'conjugate':            [conjugate, 1],
                'arg':                  [arg, 1],
                'polarform':            [polarform, 1],
                'rectform':             [rectform, 1],
                'sort':                 [sort, [1, 2]],
                'integer_part':         [, 1],
                'union':                [union, 2],
                'contains':             [contains, 2],
                'intersection':         [intersection, 2],
                'difference':           [difference, 2],
                'intersects':           [intersects, 2],
                'is_subset':            [is_subset, 2],
                //system support
                'print':                [print, -1]
            };

            //error handler
            this.error = err;
            //this function is used to comb through the function modules and find a function given its name
            var findFunction = function (fname) {
                var fmodules = Settings.FUNCTION_MODULES,
                        l = fmodules.length;
                for (var i = 0; i < l; i++) {
                    var fmodule = fmodules[i];
                    if (fname in fmodule)
                        return fmodule[fname];
                }
                err('The function ' + fname + ' is undefined!');
            };

            /**
             * This method gives the ability to override operators with new methods.
             * @param {String} which
             * @param {Function} with_what
             */
            this.override = function (which, with_what) {
                if (!bin[which])
                    bin[which] = [];
                bin[which].push(this[which]);
                this[which] = with_what;
            };

            /**
             * Restores a previously overridden operator
             * @param {String} what
             */
            this.restore = function (what) {
                if (this[what])
                    this[what] = bin[what].pop();
            };

            /**
             * This method is supposed to behave similarly to the override method but it does not override
             * the existing function rather it only extends it
             * @param {String} what
             * @param {Function} with_what
             * @param {boolean} force_call
             */
            this.extend = function (what, with_what, force_call) {
                var _ = this,
                        extended = this[what];
                if (typeof extended === 'function' && typeof with_what === 'function') {
                    var f = this[what];
                    this[what] = function (a, b) {
                        if (isSymbol(a) && isSymbol(b) && !force_call)
                            return f.call(_, a, b);
                        else
                            return with_what.call(_, a, b, f);
                    };
                }
            };

            /**
             * Generates library's representation of a function. It's a fancy way of saying a symbol with
             * a few extras. The most important thing is that that it gives a fname and
             * an args property to the symbols in addition to changing its group to FN
             * @param {String} fn_name
             * @param {Array} params
             * @returns {Symbol}
             */
            this.symfunction = function (fn_name, params) {
                //call the proper function and return the result;
                var f = new Symbol(fn_name);
                f.group = FN;
                if (typeof params === 'object')
                    params = [].slice.call(params);//ensure an array
                f.args = params;
                f.fname = fn_name === PARENTHESIS ? '' : fn_name;
                f.updateHash();
                return f;
            };

            /**
             * An internal function call for the Parser. This will either trigger a real
             * function call if it can do so or just return a symbolic representation of the
             * function using symfunction.
             * @param {String} fn_name
             * @param {Array} args
             * @param {int} allowed_args
             * @returns {Symbol}
             */
            this.callfunction = function (fn_name, args, allowed_args) {
                var fn_settings = functions[fn_name];

                if (!fn_settings)
                    err('Nerdamer currently does not support the function ' + fn_name);

                var num_allowed_args = fn_settings[1] || allowed_args, //get the number of allowed arguments
                        fn = fn_settings[0], //get the mapped function
                        retval;
                //We want to be able to call apply on the arguments or create a symfunction. Both require
                //an array so make sure to wrap the argument in an array.
                if (!(args instanceof Array))
                    args = args !== undefined ? [args] : [];

                if (num_allowed_args !== -1) {
                    var is_array = isArray(num_allowed_args),
                            min_args = is_array ? num_allowed_args[0] : num_allowed_args,
                            max_args = is_array ? num_allowed_args[1] : num_allowed_args,
                            num_args = args.length;

                    var error_msg = fn_name + ' requires a {0} of {1} arguments. {2} provided!';

                    if (num_args < min_args)
                        err(format(error_msg, 'minimum', min_args, num_args));
                    if (num_args > max_args)
                        err(format(error_msg, 'maximum', max_args, num_args));
                }

                /*
                 * The following are very important to the how nerdamer constructs functions!
                 * Assumption 1 - if fn is undefined then handling of the function is purely numeric. This
                 *     enables us to reuse Math, Math2, ..., any function from Settings.FUNCTIONS_MODULES entry
                 * Assumption 2 - if fn is defined then that function takes care of EVERYTHING including symbolics
                 * Assumption 3 - if the user calls symbolics on a function that returns a numeric value then
                 *     they are expecting a symbolic output.
                 */
                //check if arguments are all numers
                var numericArgs = allNumbers(args);
                //Big number support. Check if Big number is requested and the arguments are all numeric and, not imaginary
                if (Settings.USE_BIG && numericArgs) {
                    retval = Big[fn_name].apply(undefined, args);
                }
                else {
                    if (!fn) {
                        //Remember assumption 1. No function defined so it MUST be numeric in nature
                        fn = findFunction(fn_name);
                        if (Settings.PARSE2NUMBER && numericArgs)
                            retval = bigConvert(fn.apply(fn, args));
                        else
                            retval = _.symfunction(fn_name, args);
                    }
                    else {
                        //Remember assumption 2. The function is defined so it MUST handle all aspects including numeric values
                        retval = fn.apply(fn_settings[2], args);
                    }
                }

                return retval;
            };
            /**
             * Build a regex based on the operators currently loaded. These operators are to be ignored when
             * substituting spaces for multiplication
             */
            this.operator_filter_regex = (function () {
                //we only want the operators which are singular since those are the ones
                //that nerdamer uses anyway
                var ostr = '^\\' + Object.keys(operators).filter(function (x) {
                    if (x.length === 1)
                        return x;
                }).join('\\');
                //create a regex which captures all spaces between characters except those
                //have an operator on one end
                return new RegExp('([' + ostr + '])\\s+([' + ostr + '])');
            })();

            /**
             * Replaces nerdamer.setOperator
             * @param {object} operator
             * @param {boolean} shift
             */
            this.setOperator = function (operator, action, shift) {
                var name = operator.operator; //take the name to be the symbol
                operators[name] = operator;
                if(action)
                    this[operator.action] = action;
                //make the parser aware of the operator
                _[name] = operator.operation;
                //make the action available to the parser if infix
                if (!operator.action &&!(operator.prefix || operator.postif)) {
                    operator.action = name;
                }
                //if this operator is exclusive then all successive operators should be shifted
                if (shift === 'over' || shift === 'under') {
                    var precedence = operator.precedence;

                    for (var x in operators) {
                        var o = operators[x];
                        var condition = shift === 'over' ? o.precedence >= precedence : o.precedence > precedence;
                        if (condition)
                            o.precedence++;
                    }
                }
            };

            /**
             * Gets an opererator by its symbol
             * @param {String} operator
             * @returns {Object}
             */
            this.getOperator = function(operator) {
                return operators[operator];
            };

            this.aliasOperator = function(o, n) {
                var t = {};
                var operator = operators[o];
                //copy everything over to the new operator
                for(var x in operator) {
                    t[x] = operator[x];
                }
                //update the symbol
                t.operator = n;

                this.setOperator(t);
            };

            /**
             * Returns the list of operators. Caution! Can break parser!
             * @returns {object}
             */
            this.getOperators = function () {
                //will replace this with some cloning action in the future
                return operators;
            };

            this.getBrackets = function () {
                return brackets;
            };
            /*
             * Preforms preprocessing on the string. Useful for making early modification before
             * sending to the parser
             * @param {String} e
             */
            var prepare_expression = function (e) {
                /*
                 * Since variables cannot start with a number, the assumption is made that when this occurs the
                 * user intents for this to be a coefficient. The multiplication symbol in then added. The same goes for
                 * a side-by-side close and open parenthesis
                 */
                e = String(e);
                //apply preprocessors
                for (var i = 0; i < preprocessors.actions.length; i++)
                    e = preprocessors.actions[i].call(this, e);

                /* //NO LONGER NEEDED SINCE IMPLIED MULTIPLICATION IS NOW HANDLED LATER IN TOKENIZER
                var match;
                //add support for spaces between variables
                while (true) {
                    match = _.operator_filter_regex.exec(e);
                    if (!match)
                        break;
                    try {
                        var a = match[1],
                                b = match[2];
                        validateName(a);
                        validateName(b);
                        e = e.replace(match[0], a + '*' + b);
                    }
                    catch (e) {
                        break;
                    }
                }
                */

                //e = e.split(' ').join('');//strip empty spaces
                //replace multiple spaces with one space
                e = e.replace(/\s+/g, ' ');

                //only even bother to check if the string contains e. This regex is painfully slow and might need a better solution. e.g. hangs on (0.06/3650))^(365)
                if(/e/gi.test(e)) {
                    e = e.replace(/\-*\d+\.*\d*e\+?\-?\d+/gi, function (x) {
                        return scientificToDecimal(x);
                    });
                }
                //replace scientific numbers

                //allow omission of multiplication after coefficients
                e = e.replace(/([\+\-\/\*]*[0-9]+)([a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]+[\+\-\/\*]*)/gi, function () {
                    var str = arguments[4],
                            group1 = arguments[1],
                            group2 = arguments[2],
                            start = arguments[3],
                            first = str.charAt(start),
                            before = '',
                            d = '*';
                    if (!first.match(/[\+\-\/\*]/))
                        before = str.charAt(start - 1);
                    if (before.match(/[a-z]/i))
                        d = '';
                    return group1 + d + group2;
                })
                .replace(/([a-z0-9_]+)/gi, function (match, a) {
                    if (Settings.USE_MULTICHARACTER_VARS === false && !(a in functions)) {
                        if (!isNaN(a))
                            return a;
                        return a.split('').join('*');
                    }
                    return a;
                })
                //allow omission of multiplication sign between brackets
                .replace(/\)\(/g, ')*(') || '0';
                //replace x(x+a) with x*(x+a)
                while (true) {
                    var e_org = e; //store the original
                    e = e.replace(/([a-z0-9_]+)(\()|(\))([a-z0-9]+)/gi, function (match, a, b, c, d) {
                        var g1 = a || c,
                                g2 = b || d;
                        if (g1 in functions) //create a passthrough for functions
                            return g1 + g2;
                        return g1 + '*' + g2;
                    });
                    //if the original equals the replace we're done
                    if (e_org === e)
                        break;
                }
                return e;
            };
            //delay setting of constants until Settings is ready
            this.initConstants = function () {
                this.CONSTANTS = {
                    E: new Symbol(Settings.E),
                    PI: new Symbol(Settings.PI)
                };
            };
            /*
             * Debugging method used to better visualize vector and arrays
             * @param {object} o
             * @returns {String}
             */
            this.pretty_print = function (o) {
                if (Array.isArray(o)) {
                    var s = o.map(x => _.pretty_print(x)).join(', ');
                    if (o.type === 'vector')
                        return 'vector<' + s + '>';
                    return '(' + s + ')';
                }
                return o.toString();
            };
            this.peekers = {
                pre_operator: [],
                post_operator: [],
                pre_function: [],
                post_function: []
            };

            this.callPeekers = function(name) {
    			if (Settings.callPeekers) {
    				var peekers = this.peekers[name];
    				//remove the first items and stringify
    				var args = arguments2Array(arguments).slice(1).map(stringify);
    				//call each one of the peekers
    				for(var i=0; i<peekers.length; i++) {
    					peekers[i].apply(null, args);
    				}
    			}
            };
            /*
             * Tokenizes the string
             * @param {String} e
             * @returns {Token[]}
             */
            this.tokenize = function (e) {
                //cast to String
                e = String(e);
                //remove multiple white spaces and spaces at beginning and end of string
                e = e.trim().replace(/\s+/g, ' ');
                //remove spaces before and after brackets
                for (var x in brackets) {
                    var regex = new RegExp(brackets[x].is_close ? '\\s+\\' + x : '\\' + x + '\\s+', 'g');
                    e = e.replace(regex, x);
                }

                var col = 0; //the column position
                var L = e.length; //expression length
                var lpos = 0; //marks beginning of next token
                var tokens = []; //the tokens container
                var scopes = [tokens]; //initiate with the tokens as the highest scope
                var target = scopes[0]; //the target to which the tokens are added. This can swing up or down
                var depth = 0;
                var open_brackets = [];
                var has_space = false; //marks if an open space character was found
                var SPACE = ' ';
                var EMPTY_STRING = '';
                var COMMA = ',';
                var MINUS = '-';
                var MULT = '*';
                //Possible source of bug. Review
                /*
                 //gets the next space
                 var next_space = function(from) {
                 for(var i=from; i<L; i++) {
                 if(e.charAt(i) === ' ')
                 return i;
                 }

                 return L; //assume the end of the string instead
                 };
                 */
                /**
                 * Adds a scope to tokens
                 * @param {String} scope_type
                 * @param {int} column
                 * @returns {undefined}
                 */
                var addScope = function (scope_type, column) {
                    var new_scope = []; //create a new scope
                    if (scope_type !== undefined) {
                        new_scope.type = scope_type;
                    }
                    new_scope.column = column; //mark the column of the scope
                    scopes.push(new_scope); //add it to the list of scopes
                    target.push(new_scope); //add it to the tokens list since now it's a scope
                    target = new_scope; //point to it
                    depth++; //go down one in scope
                };
                /**
                 * Goes up in scope by one
                 * @returns {undefined}
                 */
                var goUp = function () {
                    scopes.pop(); //remove the scope from the scopes stack
                    target = scopes[--depth]; //point the above scope
                };
                /**
                 * Extracts all the operators from the expression string starting at postion start_at
                 * @param {int} start_at
                 * @returns {String}
                 */
                var get_operator_str = function (start_at) {
                    start_at = start_at !== undefined ? start_at : col;
                    //mark the end of the operator as the start since we're just going
                    //to be walking along the string
                    var end = start_at + 1;
                    //just keep moving along
                    while (e.charAt(end++) in operators) {
                    }
                    //remember that we started at one position ahead. The beginning operator is what triggered
                    //this function to be called in the first place. String.CharAt is zero based so we now
                    //have to correct two places. The initial increment + the extra++ at the end of end during
                    //the last iteration.
                    return e.substring(start_at, end - 1);
                };
                /**
                 * Breaks operator up in to several different operators as defined in operators
                 * @param {String} operator_str
                 * @returns {String[]}
                 */
                var chunkify = function (operator_str) {
                    var start = col - operator_str.length; //start of operator
                    var _operators = [];
                    var operator = operator_str.charAt(0);
                    //grab the largest possible chunks but start at 2 since we already know
                    //that the first character is an operator

                    for (var i = 1, L = operator_str.length; i < L; i++) {
                        var ch = operator_str.charAt(i);
                        var o = operator + ch;
                        //since the operator now is undefined then the last operator
                        //was the largest possible combination.
                        if (!(o in operators)) {
                            _operators.push(new Token(operator, Token.OPERATOR, start + i));
                            operator = ch;
                        }
                        else
                            operator = o;//now the operator is the larger chunk
                    }
                    //add the last operator
                    _operators.push(new Token(operator, Token.OPERATOR, start + i));
                    return _operators;
                };

                /**
                 * Is used to add a token to the tokens array. Makes sure that no empty token is added
                 * @param {int} at
                 * @param {String} token
                 * @returns {undefined}
                 */
                var add_token = function (at, token) {
                    //grab the token if we're not supplied one
                    if (token === undefined)
                        token = e.substring(lpos, at);
                    //only add it if it's not an empty string
                    if (token in _.units)
                        target.push(new Token(token, Token.UNIT, lpos));
                    else if (token !== '')
                        target.push(new Token(token, Token.VARIABLE_OR_LITERAL, lpos));
                };
                /**
                 * Adds a function to the output
                 * @param {String} f
                 * @returns {undefined}
                 */
                var add_function = function (f) {
                    target.push(new Token(f, Token.FUNCTION, lpos));
                };
                /**
                 * Tokens are found between operators so this marks the location of where the last token was found
                 * @param {int} position
                 * @returns {undefined}
                 */
                var set_last_position = function (position) {
                    lpos = position + 1;
                };
                /**
                 * When a operator is found and added, especially a combo operator, then the column location
                 * has to be adjusted to the end of the operator
                 * @returns {undefined}
                 */
                var adjust_column_position = function () {
                    lpos = lpos + operator_str.length - 2;
                    col = lpos - 1;
                };
                for (; col < L; col++) {
                    var ch = e.charAt(col);
                    if (ch in operators) {
                        add_token(col);
                        //is the last token numeric?
                        var last_token_is_numeric = target[0] && isNumber(target[0]);
                        //is this character multiplication?
                        var is_multiplication = last_token_is_numeric && ch === MULT;
                        //if we're in a new scope then go up by one but if the space
                        //is right befor an operator then it makes no sense to go up in scope
                        //consider sin -x. The last position = current position at the minus sign
                        //this means that we're going for sin(x) -x which is wrong
                        //Ignore comma since comma is still part of the existing scope.
                        if (has_space && lpos < col && !(ch === COMMA || is_multiplication)) {
                            has_space = false;
                            goUp();
                        }
                        //mark the last position that a
                        set_last_position(col + 1);
                        var operator_str = get_operator_str(col);

                        adjust_column_position();
                        target.push.apply(target, chunkify(operator_str));
                    }
                    else if (ch in brackets) {
                        var bracket = brackets[ch];

                        if (bracket.is_open) {
                            //mark the bracket
                            open_brackets.push([bracket, lpos]);
                            var f = e.substring(lpos, col);
                            if (f in functions) {
                                add_function(f);
                            }
                            else if (f !== '') {
                                //assume multiplication
                                //TODO: Add the multiplication to stack
                                target.push(new Token(f, Token.VARIABLE_OR_LITERAL, lpos));
                            }
                            //go down one in scope
                            addScope(bracket.maps_to, col);
                        }
                        else if (bracket.is_close) {
                            //get the matching bracket
                            var pair = open_brackets.pop();
                            //throw errors accordingly
                            //missing open bracket
                            if (!pair)
                                throw new ParityError('Missing open bracket for bracket at: ' + (col + 1));
                            //incorrect pair
                            else if (pair[0].id !== bracket.id - 1)
                                throw new ParityError('Parity error');

                            add_token(col);
                            goUp();
                        }
                        set_last_position(col);
                    }
                    else if (ch === SPACE) {
                        var prev = e.substring(lpos, col); //look back
                        var nxt = e.charAt(col+1); //look forward
                        if (has_space) {

                            if (prev in operators) {
                                target.push(new Token(prev, Token.OPERATOR, col));
                            }
                            else {
                                add_token(undefined, prev);
                                //we're at the closing space
                                goUp(); //go up in scope if we're at a space

                                //assume multiplication if it's not an operator except for minus
                                var is_operator = nxt in operators;

                                if((is_operator && operators[nxt].value === MINUS) || !is_operator) {
                                    target.push(new Token(MULT, Token.OPERATOR, col));
                                }
                            }
                            has_space = false; //remove the space
                        }
                        else {
                            //we're at the closing space
                            //check if it's a function
                            var f = e.substring(lpos, col);

                            if (f in functions) {
                                //there's no need to go up in scope if the next character is an operator
                                has_space = true; //mark that a space was found
                                add_function(f);
                                addScope();
                            }
                            else if (f in operators) {
                                target.push(new Token(f, Token.OPERATOR, col));
                            }
                            else {
                                add_token(undefined, f);
                                //peek ahead to the next character
                                var nxt = e.charAt(col+1);

                                //If it's a number then add the multiplication operator to the stack but make sure that the next character
                                //is not an operator

                                if(prev !== EMPTY_STRING && nxt !== EMPTY_STRING && !(prev in operators) && !(nxt in operators))
                                    target.push(new Token(MULT, Token.OPERATOR, col));
                            }
                            //Possible source of bug. Review
                            /*
                             //space can mean multiplication so add the symbol if the is encountered
                             if(/\d+|\d+\.?\d*e[\+\-]*\d+/i.test(f)) {
                             var next = e.charAt(col+1);
                             var next_is_operator = next in operators;
                             var ns = next_space(col+1);
                             var next_word = e.substring(col+1, ns);
                             //the next can either be a prefix operator or no operator
                             if((next_is_operator && operators[next].prefix) || !(next_is_operator || next_word in operators))
                             target.push(new Token('*', Token.OPERATOR, col));
                             }
                             */
                        }
                        set_last_position(col); //mark this location
                    }
                }
                //check that all brackets were closed
                if (open_brackets.length) {
                    var b = open_brackets.pop();
                    throw new ParityError('Missing closed bracket for bracket at ' + (b[1] + 1));
                }
                //add the last token
                add_token(col);

                return tokens;
            };
            /*
             * Puts token array in Reverse Polish Notation
             * @param {Token[]} tokens
             * @returns {Token[]}
             */
            this.toRPN = function (tokens) {
                var fn = tokens.type;
                var l = tokens.length, i;
                var output = [];
                var stack = [];
                var prefixes = [];
                var collapse = function (target, destination) {
                    while (target.length)
                        destination.push(target.pop());
                };
                //mark all the prefixes and add them to the stack
                for (i = 0; i < l; i++) {
                    var token = tokens[i];
                    if (token.type !== Token.OPERATOR)
                        break;
                    if (!token.prefix)
                        throw new OperatorError('Not a prefix operator');
                    token.is_prefix = true;
                    stack.push(token);
                }
                //begin with remaining tokens
                for (; i < l; i++) {
                    var e = tokens[i];
                    if (e.type === Token.OPERATOR) {
                        var operator = e;

    		    //create the option for the operator being overloaded
                        if (operator.overloaded) {
                            var next = tokens[i + 1];
                            //if it's followed by a number or variable then we assume it's not a postfix operator
                            if (next && next.type === Token.VARIABLE_OR_LITERAL) {
                                operator.postfix = false;
                                //override the original function with the overload function
                                operator.action = operator.overloadAction;
    			    operator.leftAssoc = operator.overloadLeftAssoc;
                            }
                        }

                        //if the stack is not empty
                        while (stack.length) {
                            var last = stack[stack.length - 1];
                            //if (there is an operator at the top of the operator stack with greater precedence)
                            //or (the operator at the top of the operator stack has equal precedence and is left associative)) ~ wikipedia
                            //the !prefixes.length makes sure that the operator on stack isn't prematurely taken fromt he stack.
                            if (!(last.precedence > operator.precedence || !operator.leftAssoc && last.precedence === operator.precedence))
                                break;
                            output.push(stack.pop());
                        }

                        //change the behavior of the operator if it's a vector and we've been asked to do so
                        if ((fn === 'vector' || fn === 'set') && 'vectorFn' in operator)
                            operator.action = operator.vectorFn;


                        //if the operator is a postfix operator then we're ready to go since it belongs
                        //to the preceding token. However the output cannot be empty. It must have either
                        //an operator or a variable/literal
                        if (operator.postfix) {
                            var previous = tokens[i - 1];
                            if (!previous)
                                throw new OperatorError("Unexpected prefix operator '" + e.value + "'! at " + e.column);
                            else if (previous.type === Token.OPERATOR) {
                                //a postfix can only be followed by a postfix
                                if (!previous.postfix)
                                    throw new OperatorError("Unexpected prefix operator '" + previous.value + "'! at " + previous.column);
                            }
                        }
                        else {
                            //we must be at an infix so point the operator this
                            do {
                                //the first one is an infix operator all others have to be prefix operators so jump to the end
                                var next = tokens[i + 1]; //take a look ahead
                                var next_is_operator = next ? next.type === Token.OPERATOR : false; //check if it's an operator
                                if (next_is_operator) {
                                    //if it's not a prefix operator then it not in the right place
                                    if (!next.prefix) {
                                        throw new OperatorError('A prefix operator was expected at ' + next.column);
                                    }
                                    //mark it as a confirmed prefix
                                    next.is_prefix = true;
                                    //add it to the prefixes
                                    prefixes.push(next);
                                    i++;
                                }
                            }
                            while (next_is_operator)
                        }

                        //if it's a prefix it should be on a special stack called prefixes
                        //we do this to hold on to prefixes because of left associative operators.
                        //they belong to the variable/literal but if placed on either the stack
                        //or output there's no way of knowing this. I might be wrong so I welcome
                        //any discussion about this.

                        if (operator.is_prefix) //ADD ALL EXCEPTIONS FOR ADDING TO PREFIX STACK HERE. !!!
                            prefixes.push(operator);
                        else
                            stack.push(operator);
                        //move the prefixes to the stack
                        while (prefixes.length) {
                            if (operator.leftAssoc || !operator.leftAssoc && prefixes[prefixes.length - 1].precedence >= operator.precedence) //revisit for commas
                                stack.push(prefixes.pop());
                            else
                                break;
                        }
                    }
                    else if (e.type === Token.VARIABLE_OR_LITERAL) {
                        //move prefixes to stack at beginning of scope
                        if (output.length === 0)
                            collapse(prefixes, stack);
                        //done with token
                        output.push(e);
                        var last_on_stack = stack[stack.length - 1];
                        //then move all the prefixes to the output
                        if (!last_on_stack || !last_on_stack.leftAssoc)
                            collapse(prefixes, output);
                    }
                    else if (e.type === Token.FUNCTION) {
                        stack.push(e);
                    }
                    else if (e.type === Token.UNIT) {
                        //if it's a unit it belongs on the stack since it's tied to the previous token
                        output.push(e);
                    }
                    //if it's an additonal scope then put that into RPN form
                    if (Array.isArray(e)) {
                        output.push(this.toRPN(e));
                        if (e.type)
                            output.push(new Token(e.type, Token.FUNCTION, e.column)); //since it's hidden it needs no column

                    }
                }
                //collapse the remainder of the stack and prefixes to output
                collapse(stack, output);
                collapse(prefixes, output);

                return output;
            };
            /*
             * Parses the tokens
             * @param {Tokens[]} rpn
             * @param {object} substitutions
             * @returns {Symbol}
             */
            this.parseRPN = function (rpn, substitutions) {
                try {
                    //default substitutions
                    substitutions = substitutions || {};
                    //prepare the substitutions.
                    //we first parse them out as-is
                    for (var x in substitutions)
                        substitutions[x] = _.parse(substitutions[x], {});
                    //Although technically constants,
                    //pi and e are only available when evaluating the expression so add to the subs.
                    //Doing this avoids rounding errors
                    //link e and pi
                    if (Settings.PARSE2NUMBER) {
                        //use the value provided if the individual for some strange reason prefers this.
                        //one reason could be to sub e but not pi or vice versa
                        if (!('e' in substitutions))
                            substitutions.e = new Symbol(Settings.E);
                        if ((!('pi' in substitutions)))
                            substitutions.pi = new Symbol(Settings.PI);
                    }

                    var Q = [];
                    for (var i = 0, l = rpn.length; i < l; i++) {
                        var e = rpn[i];

                        //Arrays indicate a new scope so parse that out
                        if (Array.isArray(e)) {
                            e = this.parseRPN(e, substitutions);
                        }

                        if(e) {
                            if (e.type === Token.OPERATOR) {
                                if (e.is_prefix || e.postfix)
                                    //resolve the operation assocated with the prefix
                                    Q.push(e.operation(Q.pop()));
                                else {
                                    var b = Q.pop();
                                    var a = Q.pop();
                                    //Throw an error if the RH value is empty. This cannot be a postfix since we already checked
                                    if (typeof a === 'undefined')
                                        throw new OperatorError(e + ' is not a valid postfix operator at ' + e.column);

                                    var is_comma = e.action === 'comma';
                                    //convert Sets to Vectors on all operations at this point. Sets are only recognized functions or individually
                                    if(a instanceof Set && !is_comma)
                                        a = Vector.fromSet(a);

                                    if(b instanceof Set && !is_comma)
                                        b = Vector.fromSet(b);

                                    //call all the pre-operators
                                    this.callPeekers('pre_operator', a, b, e);

                                    var ans = _[e.action](a, b);

                                    //call all the pre-operators
                                    this.callPeekers('post_operator', ans, a, b, e);

                                    Q.push(ans);
                                }
                            }
                            else if (e.type === Token.FUNCTION) {
                                var args = Q.pop();
                                var parent = args.parent; //make a note of the parent
                                if (!(args instanceof Collection))
                                    args = Collection.create(args);
                                //the return value may be a vector. If it is then we check
                                //Q to see if there's another vector on the stack. If it is then
                                //we check if has elements. If it does then we know that we're dealing
                                //with an "getter" object and return the requested values

                                //call the function. This is the _.callfunction method in nerdamer
                                //call the function. This is the _.callfunction method in nerdamer
                                var fn_name = e.value;
                                var fn_args = args.getItems();

                                //call the pre-function peekers
                                this.callPeekers('pre_function', fn_name, fn_args);

                                var ret = _.callfunction(fn_name, fn_args);

                                //call the post-function peekers
                                this.callPeekers('post_function', ret, fn_name, fn_args);

                                var last = Q[Q.length - 1];
                                var next = rpn[i + 1];
                                var next_is_comma = next && next.type === Token.OPERATOR && next.value === ',';

                                if (!next_is_comma && ret instanceof Vector && last && last.elements && !(last instanceof Collection)) {
                                    //remove the item from the queue
                                    var item = Q.pop();

                                    var getter = ret.elements[0];
                                    //check if it's symbolic. If so put it back and add the item to the stack
                                    if (!getter.isConstant()) {
                                        item.getter = getter;
                                        Q.push(item);
                                        Q.push(ret);
                                    }
                                    else if (getter instanceof Slice) {
                                        //if it's a Slice return the slice
                                        Q.push(Vector.fromArray(item.elements.slice(getter.start, getter.end)));
                                    }
                                    else {
                                        var index = Number(getter);
                                        var il = item.elements.length;
                                        //support for negative indices
                                        if (index < 0)
                                            index = il + index;
                                        //it it's still out of bounds
                                        if (index < 0 || index >= il) //index should no longer be negative since it's been reset above
                                            //range error
                                            throw new OutOfRangeError('Index out of range ' + (e.column + 1));

                                        var element = item.elements[index];
                                        //cyclic but we need to mark this for future reference
                                        item.getter = index;
                                        element.parent = item;

                                        Q.push(element);
                                    }
                                }
                                else {
                                    //extend the parent reference
                                    if(parent)
                                        ret.parent = parent;
                                    Q.push(ret);
                                }

                            }
                            else {
                                var subbed;
                                var v = e.value;

                                if (v in Settings.ALIASES)
                                    e = _.parse(Settings.ALIASES[e]);
                                //wrap it in a symbol if need be
                                else if (e.type === Token.VARIABLE_OR_LITERAL)
                                    e = new Symbol(v);
                                else if (e.type === Token.UNIT) {
                                    e = new Symbol(v);
                                    e.isUnit = true;
                                }

                                //make substitutions
                                //Always constants first. This avoids the being overridden
                                if (v in _.CONSTANTS) {
                                    subbed = e;
                                    e = new Symbol(_.CONSTANTS[v]);
                                }
                                //next substitutions. This allows declared variable to be overridden
                                //check if the values match to avoid erasing the multiplier.
                                //Example:/e = 3*a. substutiting a for a will wipe out the multiplier.
                                else if (v in substitutions && v !== substitutions[v].value) {
                                    subbed = e;
                                    e = substitutions[v].clone();
                                }
                                //next declare variables
                                else if (v in VARS) {
                                    subbed = e;
                                    e = VARS[v].clone();
                                }
                                //make notation of what it was before
                                if (subbed)
                                    e.subbed = subbed;

                                Q.push(e);
                            }
                        }
                    }

                    return Q[0];
                }
                catch(error) {
                    throw new ParseError(error.message+': '+e.column);
                }
            };
            /**
             * This is the method that triggers the parsing of the string. It generates a parse tree but processes
             * it right away. The operator functions are called when their respective operators are reached. For instance
             * + with cause this.add to be called with the left and right hand values. It works by walking along each
             * character of the string and placing the operators on the stack and values on the output. When an operator
             * having a lower order than the last is reached then the stack is processed from the last operator on the
             * stack.
             * @param {String} token
             */

            function Node(token) {
                this.type = token.type;
                this.value = token.value;
                //the incoming token may already be a Node type
                this.left = token.left;
                this.right = token.right;
            }

            Node.prototype.toString = function () {
                var left = this.left ? this.left.toString() + '---' : '';
                var right = this.right ? '---' + this.right.toString() : '';
                return left + '(' + this.value + ')' + right;
            };

            Node.prototype.toHTML = function (depth, indent) {
                depth = depth || 0;
                indent = typeof indent === 'undefined' ? 4 : indent;
                var tab = function (n) {
                    return ' '.repeat(indent * n);
                };
                var html = '';
                var left = this.left ? tab(depth + 1) + '<li>\n' + this.left.toHTML(depth + 2, indent) + tab(depth + 1) + '</li> \n' : '';
                var right = this.right ? tab(depth + 1) + '<li>\n' + this.right.toHTML(depth + 2, indent) + tab(depth + 1) + '</li>\n' : '';
                var html = tab(depth) + '<div class="' + this.type.toLowerCase() + '"><span>' + this.value + '</span></div>' + tab(depth) + '\n';
                if (left || right) {
                    html += tab(depth) + '<ul>\n' + left + right + tab(depth) + '</ul>\n';
                }
                html += '';
                return html;
            };

            this.tree = function (tokens) {
                var Q = [];
                for (var i = 0; i < tokens.length; i++) {
                    var e = tokens[i];
                    //Arrays indicate a new scope so parse that out
                    if (Array.isArray(e)) {
                        e = this.tree(e);
                        //if it's a comma then it's just arguments
                        Q.push(e);
                        continue;
                    }
                    if (e.type === Token.OPERATOR) {
                        if (e.is_prefix || e.postfix) {
                            //prefixes go to the left, postfix to the right
                            var location = e.is_prefix ? 'left' : 'right';
                            var last = Q.pop();
                            e = new Node(e);
                            e[location] = last;
                            Q.push(e);
                        }
                        else {
                            e = new Node(e);
                            e.right = Q.pop();
                            e.left = Q.pop();
                            Q.push(e);
                        }
                    }
                    else if (e.type === Token.FUNCTION) {
                        e = new Node(e);
                        var args = Q.pop();
                        e.right = args;
                        if (e.value === 'object') {
                            //check if Q has a value
                            var last = Q[Q.length - 1];
                            if (last) {
                                while (last.right) {
                                    last = last.right;
                                }
                                last.right = e;
                                continue;
                            }
                        }

                        Q.push(e);
                    }
                    else {
                        Q.push(new Node(e));
                    }
                }

                return Q[0];
            };
            this.parse = function (e, substitutions) {
                e = prepare_expression(e);
                substitutions = substitutions || {};
                //three passes but easier to debug
                var tokens = this.tokenize(e);
                var rpn = this.toRPN(tokens);
                return this.parseRPN(rpn, substitutions);
            };
            /**
             * TODO: Switch to Parser.tokenize for this method
             * Reads a string into an array of Symbols and operators
             * @param {String} expression_string
             * @returns {Array}
             */
            this.toObject = function (expression_string) {
                var objectify = function (tokens) {
                    var output = [];
                    for (var i = 0, l = tokens.length; i < l; i++) {
                        var token = tokens[i];
                        var v = token.value;
                        if (token.type === Token.VARIABLE_OR_LITERAL) {
                            output.push(new Symbol(v));
                        }
                        else if (token.type === Token.FUNCTION) {
                            //jump ahead since the next object are the arguments
                            i++;
                            //create a symbolic function and stick it on output
                            var f = _.symfunction(v, objectify(tokens[i]));
                            f.isConversion = true;
                            output.push(f);
                        }
                        else if (token.type === Token.OPERATOR) {
                            output.push(v);
                        }
                        else {
                            output.push(objectify(token));
                        }
                    }

                    return output;
                };
                return objectify(_.tokenize(expression_string));
            };
            //helper method for toTeX
            var chunkAtCommas = function (arr) {
                var j, k = 0, chunks = [[]];
                for (var j = 0, l = arr.length; j < l; j++) {
                    if (arr[j] === ',') {
                        k++;
                        chunks[k] = [];
                    }
                    else {
                        chunks[k].push(arr[j]);
                    }
                }
                return chunks;
            };
            //helper method for toTeX
            var rem_brackets = function (str) {
                return str.replace(/^\\left\((.+)\\right\)$/g, function (str, a) {
                    if (a)
                        return a;
                    return str;
                });
            };
            /*
             * Convert expression or object to LaTeX
             * @param {String} expression_or_obj
             * @param {object} opt
             * @returns {String}
             */
            this.toTeX = function (expression_or_obj, opt) {
                opt = opt || {};
                var obj = typeof expression_or_obj === 'string' ? this.toObject(expression_or_obj) : expression_or_obj,
                        TeX = [],
                        cdot = typeof opt.cdot === 'undefined' ? '\\cdot' : opt.cdot; //set omit cdot to true by default

                if (isArray(obj)) {
                    var nobj = [], a, b;
                    //first handle ^
                    for (var i = 0; i < obj.length; i++) {
                        a = obj[i];

                        if (obj[i + 1] === '^') {
                            b = obj[i + 2];
                            nobj.push(LaTeX.braces(this.toTeX([a])) + '^' + LaTeX.braces(this.toTeX([b])));
                            i += 2;
                        }
                        else
                            nobj.push(a);
                    }
                    obj = nobj;
                }

                for (var i = 0, l = obj.length; i < l; i++) {
                    var e = obj[i];
                    //convert * to cdot
                    if (e === '*') {
                        e = cdot;
                    }

                    if (isSymbol(e)) {
                        if (e.group === FN) {
                            var fname = e.fname, f;

                            if (fname === SQRT)
                                f = '\\sqrt' + LaTeX.braces(this.toTeX(e.args));
                            else if (fname === ABS)
                                f = LaTeX.brackets(this.toTeX(e.args), 'abs');
                            else if (fname === PARENTHESIS)
                                f = LaTeX.brackets(this.toTeX(e.args), 'parens');
                            else if (fname === Settings.LOG10) {
                                f = '\\'+Settings.LOG10_LATEX+'\\left( ' + this.toTeX(e.args) + '\\right)';
                            }
                            else if (fname === 'integrate') {
                                /* Retrive [Expression, x] */
                                var chunks = chunkAtCommas(e.args);
                                /* Build TeX */
                                var expr = LaTeX.braces(this.toTeX(chunks[0])),
                                        dx = this.toTeX(chunks[1]);
                                f = '\\int ' + expr + '\\, d' + dx;
                            }
                            else if (fname === 'defint') {
                                var chunks = chunkAtCommas(e.args),
                                        expr = LaTeX.braces(this.toTeX(chunks[0])),
                                        dx = this.toTeX(chunks[3]),
                                        lb = this.toTeX(chunks[1]),
                                        ub = this.toTeX(chunks[2]);
                                f = '\\int\\limits_{' + lb + '}^{' + ub + '} ' + expr + '\\, d' + dx;

                            }
                            else if (fname === 'diff') {
                                var chunks = chunkAtCommas(e.args);
                                var dx = '', expr = LaTeX.braces(this.toTeX(chunks[0]));
                                /* Handle cases: one argument provided, we need to guess the variable, and assume n = 1 */
                                if (chunks.length === 1) {
                                    var vars = [];
                                    for (j = 0; j < chunks[0].length; j++) {
                                        if (chunks[0][j].group === 3) {
                                            vars.push(chunks[0][j].value);
                                        }
                                    }
                                    vars.sort();
                                    dx = vars.length > 0 ? ('\\frac{d}{d ' + vars[0] + '}') : '\\frac{d}{d x}';
                                }
                                /* If two arguments, we have expression and variable, we assume n = 1 */
                                else if (chunks.length === 2) {
                                    dx = '\\frac{d}{d ' + chunks[1] + '}';
                                }
                                /* If we have more than 2 arguments, we assume we've got everything */
                                else {
                                    dx = '\\frac{d^{' + chunks[2] + '}}{d ' + this.toTeX(chunks[1]) + '^{' + chunks[2] + '}}';
                                }

                                f = dx + '\\left(' + expr + '\\right)';

                            }
                            else if (fname === 'sum' || fname === 'product') {
                                // Split e.args into 4 parts based on locations of , symbols.
                                var argSplit = [[], [], [], []], j = 0, i;
                                for (i = 0; i < e.args.length; i++) {
                                    if (e.args[i] === ',') {
                                        j++;
                                        continue;
                                    }
                                    argSplit[j].push(e.args[i]);
                                }
                                // Then build TeX string.
                                f = (fname === 'sum' ? '\\sum_' : '\\prod_') + LaTeX.braces(this.toTeX(argSplit[1]) + ' = ' + this.toTeX(argSplit[2]));
                                f += '^' + LaTeX.braces(this.toTeX(argSplit[3])) + LaTeX.braces(this.toTeX(argSplit[0]));
                            }
                            else if (fname === 'limit') {
                                var args = chunkAtCommas(e.args).map(function (x) {
                                    if (Array.isArray(x))
                                        return _.toTeX(x.join(''));
                                    return _.toTeX(String(x));
                                });
                                f = '\\lim_' + LaTeX.braces(args[1] + '\\to ' + args[2]) + ' ' + LaTeX.braces(args[0]);
                            }
                            else if (fname === FACTORIAL || fname === DOUBLEFACTORIAL)
                                f = this.toTeX(e.args) + (fname === FACTORIAL ? '!' : '!!');
                            else {
                                f = LaTeX.latex(e);
                                //f = '\\mathrm'+LaTeX.braces(fname.replace(/_/g, '\\_')) + LaTeX.brackets(this.toTeX(e.args), 'parens');
                            }

                            TeX.push(f);
                        }
                        else
                            TeX.push(LaTeX.latex(e));
                    }
                    else if (isArray(e)) {
                        TeX.push(LaTeX.brackets(this.toTeX(e)));
                    }
                    else {
                        if (e === '/')
                            TeX.push(LaTeX.frac(rem_brackets(TeX.pop()), rem_brackets(this.toTeX([obj[++i]]))));
                        else
                            TeX.push(e);
                    }
                }

                return TeX.join(' ');
            };

    //Parser.functions ==============================================================
            /* Although parens is not a "real" function it is important in some cases when the
             * symbol must carry parenthesis. Once set you don't have to worry about it anymore
             * as the parser will get rid of it at the first opportunity
             */
            function parens(symbol) {
                if (Settings.PARSE2NUMBER) {
                    return symbol;
                }
                return _.symfunction('parens', [symbol]);
            }

            function abs(symbol) {

                //|-∞| = ∞
                if(symbol.isInfinity) {
                    return Symbol.infinity();
                }
                if (symbol.multiplier.lessThan(0))
                    symbol.multiplier.negate();

                if (symbol.isImaginary()) {
                    var re = symbol.realpart();
                    var im = symbol.imagpart();
                    if (re.isConstant() && im.isConstant())
                        return sqrt(_.add(_.pow(re, new Symbol(2)), _.pow(im, new Symbol(2))));
                }
                else if (isNumericSymbol(symbol) || even(symbol.power)) {
                    return symbol;
                }

                if (symbol.isComposite()) {
                    var ms = [];
                    symbol.each(function (x) {
                        ms.push(x.multiplier);
                    });
                    var gcd = Math2.QGCD.apply(null, ms);
                    if (gcd.lessThan(0)) {
                        symbol.multiplier = symbol.multiplier.multiply(new Frac(-1));
                        symbol.distributeMultiplier();
                    }
                }

                //convert |n*x| to n*|x|
                var m = _.parse(symbol.multiplier);
                symbol.toUnitMultiplier();

                return _.multiply(m, _.symfunction(ABS, [symbol]));
            }
            /**
             * The factorial function
             * @param {Symbol} symbol
             * @return {Symbol}
             */
            function factorial(symbol) {
                var retval;
                if (isVector(symbol)) {
                    var V = new Vector();
                    symbol.each(function (x, i) {
                        //i start at one.
                        V.set(i - 1, factorial(x));
                    });
                    return V;
                }
                if (isMatrix(symbol)) {
                    var M = new Matrix();
                    symbol.each(function (x, i, j) {
                        //i start at one.
                        M.set(i, j, factorial(x));
                    });
                    return M;
                }
                if (Settings.PARSE2NUMBER && symbol.isConstant()) {
                    if (isInt(symbol)) {
                        retval = Math2.bigfactorial(symbol);
                    }
                    else {
                        retval = Math2.gamma(symbol.multiplier.add(new Frac(1)).toDecimal());
                    }

                    retval = bigConvert(retval);
                    return retval;
                }
                else if (symbol.isConstant()) {
                    var den = symbol.getDenom();
                    if (den.equals(2)) {
                        var num = symbol.getNum();
                        var a, b, c, n;

                        if (!symbol.multiplier.isNegative()) {
                            n = _.add(num, new Symbol(1)).multiplier.divide(new Frac(2));
                            a = Math2.bigfactorial(new Frac(2).multiply(n));
                            b = _.pow(new Symbol(4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));
                        }
                        else {
                            n = _.subtract(num.negate(), new Symbol(1)).multiplier.divide(new Frac(2));
                            a = _.pow(new Symbol(-4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));
                            b = Math2.bigfactorial(new Frac(2).multiply(n));
                        }
                        c = a.divide(b);
                        return _.multiply(_.parse('sqrt(pi)'), new Symbol(c));
                    }
                }
                return _.symfunction(FACTORIAL, [symbol]);
            }
            /**
             * Returns the continued fraction of a number
             * @param {Symbol} symbol
             * @param {Symbol} n
             * @returns {Symbol}
             */
            function continued_fraction(symbol, n) {
                var _symbol = evaluate(symbol);
                if (_symbol.isConstant()) {
                    var cf = Math2.continuedFraction(_symbol, n);
                    //convert the fractions array to a new Vector
                    var fractions = Vector.fromArray(cf.fractions.map(function (x) {
                        return new Symbol(x);
                    }));
                    return Vector.fromArray([new Symbol(cf.sign), new Symbol(cf.whole), fractions]);
                }
                return _.symfunction('continued_fraction', arguments);
            }
            /**
             * The mod function
             * @param {Symbol} symbol1
             * @param {Symbol} symbol2
             * @returns {Symbol}
             */
            function mod(symbol1, symbol2) {
                if (symbol1.isConstant() && symbol2.isConstant()) {
                    var retval = new Symbol(1);
                    retval.multiplier = retval.multiplier.multiply(symbol1.multiplier.mod(symbol2.multiplier));
                    return retval;
                }
                //try to see if division has remainder of zero
                var r = _.divide(symbol1.clone(), symbol2.clone());
                if (isInt(r))
                    return new Symbol(0);
                return _.symfunction('mod', [symbol1, symbol2]);
            }
            /**
             * A branghing function
             * @param {Boolean} condition
             * @param {Symbol} a
             * @param {Symbol} b
             * @returns {Symbol}
             */
            function IF(condition, a, b) {
                if (typeof condition !== 'boolean')
                    if (isNumericSymbol(condition))
                        condition = !!Number(condition);
                if (condition)
                    return a;
                return b;
            }
            /**
             *
             * @param {Matrix|Vector|Set|Collection} obj
             * @param {Symbol} item
             * @returns {Boolean}
             */
            function is_in(obj, item) {
                if(isMatrix(obj)) {
                    for(var i=0, l=obj.rows(); i<l; i++) {
                        for(var j=0, l2=obj.cols(); j<l2; j++) {
                            var element = obj.elements[i][j];
                            if(element.equals(item))
                                return new Symbol(1);
                        }
                    }
                }
                else if(obj.elements) {
                    for(var i=0, l=obj.elements.length; i<l; i++) {
                        if(obj.elements[i].equals(item))
                            return new Symbol(1);
                    }
                }

                return new Symbol(0);
            }

            /**
             * A symbolic extension for sinc
             * @param {Symbol} symbol
             * @returns {Symbol}
             */
            function sinc(symbol) {
                if (Settings.PARSE2NUMBER) {
                    if (symbol.isConstant()) {
                        return new Symbol(Math2.sinc(symbol));
                    }
                    return _.parse(format('sin({0})/({0})', symbol));
                }
                return _.symfunction('sinc', [symbol]);
            }

            /**
             * A symbolic extension for exp. This will auto-convert all instances of exp(x) to e^x.
             * Thanks @ Happypig375
             * @param {Symbol} symbol
             * @returns {Symbol}
             */
            function exp(symbol) {
                return _.parse(format('e^({0})', symbol));
            }

            /**
             * Converts value degrees to radians
             * @param {Symbol} symbol
             * @returns {Symbol}
             */
            function radians(symbol) {
                return _.parse(format('({0})*pi/180', symbol));
            }

            /**
             * Converts value from radians to degrees
             * @param {Symbol} symbol
             * @returns {Symbol}
             */
            function degrees(symbol) {
                return _.parse(format('({0})*180/pi', symbol));
            }

            /**
             * Rationalizes a symbol
             * @param {Symbol} symbol
             * @returns {Symbol}
             */
            function rationalize(symbol) {
                if(symbol.isComposite()) {
                    var retval = new Symbol(0);
                    var num, den, retnum, retden, a, b, n, d;
                    symbol.each(function(x) {
                        num = x.getNum();
                        den = x.getDenom();
                        retnum = retval.getNum();
                        retden = retval.getDenom();
                        a = _.multiply(den, retnum);
                        b = _.multiply(num, retden);
                        n = _.expand(_.add(a, b));
                        d = _.multiply(retden, den);
                        retval = _.divide(n, d);
                    }, true);

                    return retval;
                }
                return symbol;
            }

            /**
             * The square root function
             * @param {Symbol} symbol
             * @returns {Symbol}
             */
            function sqrt(symbol) {
                if(!isSymbol(symbol)) {
                    symbol = _.parse(symbol);
                }
                
                if (symbol.fname === '' && symbol.power.equals(1))
                    symbol = symbol.args[0];

                var is_negative = symbol.multiplier.sign() < 0;

                if (Settings.PARSE2NUMBER) {
                    if (symbol.isConstant() && !is_negative) {
                        return new Symbol(Math.sqrt(symbol.multiplier.toDecimal()));
                    }
                    else if (symbol.isImaginary()) {
                        return complex.sqrt(symbol);
                    }
                    else if(symbol.group === S) {
                        return _.symfunction('sqrt', [symbol]);
                    }
                }

                var img, retval,
                        isConstant = symbol.isConstant();

                if (symbol.group === CB && symbol.isLinear()) {
                    var m = sqrt(Symbol(symbol.multiplier));
                    for (var s in symbol.symbols) {
                        var x = symbol.symbols[s];
                        m = _.multiply(m, sqrt(x));
                    }

                    retval = m;
                }
                //if the symbol is already sqrt then it's that symbol^(1/4) and we can unwrap it
                else if (symbol.fname === SQRT) {
                    var s = symbol.args[0];
                    var ms = symbol.multiplier;
                    s.setPower(symbol.power.multiply(new Frac(0.25)));
                    retval = s;
                    //grab the multiplier
                    if (!ms.equals(1))
                        retval = _.multiply(sqrt(_.parse(ms)), retval);
                }
                //if the symbol is a fraction then we don't keep can unwrap it. For instance
                //no need to keep sqrt(x^(1/3))
                else if (!symbol.power.isInteger()) {
                    symbol.setPower(symbol.power.multiply(new Frac(0.5)));
                    retval = symbol;
                }
                else if(symbol.multiplier < 0 && symbol.group === S) {
                    var a = _.parse(symbol.multiplier).negate();
                    var b = _.parse(symbol).toUnitMultiplier().negate();
                    retval = _.multiply(_.symfunction(Settings.SQRT, [b]), sqrt(a));
                }
                else {

                    //Related to issue #401. Since sqrt(a)*sqrt(b^-1) relates in issues, we'll change the form
                    //to sqrt(a)*sqrt(b)^1 for better simplification
                    //the sign of the power
                    var sign = symbol.power.sign();
                    //remove the sign
                    symbol.power = symbol.power.abs();

                    //if the symbols is imagary then we place in the imaginary part. We'll return it
                    //as a product
                    if (isConstant && symbol.multiplier.lessThan(0)) {
                        img = Symbol.imaginary();
                        symbol.multiplier = symbol.multiplier.abs();
                    }

                    var q = symbol.multiplier.toDecimal(),
                            qa = Math.abs(q),
                            t = Math.sqrt(qa);

                    var m;
                    //it's a perfect square so take the square
                    if (isInt(t)) {
                        m = new Symbol(t);
                    }
                    else if (isInt(q)) {
                        var factors = Math2.ifactor(q);
                        var tw = 1;
                        for (var x in factors) {
                            var n = factors[x],
                                    nn = (n - (n % 2)); //get out the whole numbers
                            if (nn) { //if there is a whole number ...
                                var w = Math.pow(x, nn);
                                tw *= Math.pow(x, nn / 2); //add to total wholes
                                q /= w; //reduce the number by the wholes
                            }
                        }
                        m = _.multiply(_.symfunction(SQRT, [new Symbol(q)]), new Symbol(tw));
                    }
                    else {
                        //reduce the numerator and denominator using prime factorization
                        var c = [new Symbol(symbol.multiplier.num), new Symbol(symbol.multiplier.den)];
                        var r = [new Symbol(1), new Symbol(1)];
                        var sq = [new Symbol(1), new Symbol(1)];
                        for (var i = 0; i < 2; i++) {
                            var n = c[i];
                            //get the prime factors and loop through each.
                            pfactor(n).each(function (x) {
                                x = Symbol.unwrapPARENS(x);
                                var b = x.clone().toLinear();
                                var p = Number(x.power);
                                //We'll consider it safe to use the native Number since 2^1000 is already a pretty huge number
                                var rem = p % 2; //get the remainder. This will be 1 if 3 since sqrt(n^2) = n where n is positive
                                var w = (p - rem) / 2; //get the whole numbers of n/2
                                r[i] = _.multiply(r[i], _.pow(b, new Symbol(w)));
                                sq[i] = _.multiply(sq[i], sqrt(_.pow(b, new Symbol(rem))));
                            });
                        }
                        m = _.divide(_.multiply(r[0], sq[0]), _.multiply(r[1], sq[1]));
                    }


                    //strip the multiplier since we already took the sqrt
                    symbol = symbol.toUnitMultiplier(true);
                    //if the symbol is one just return one and not the sqrt function
                    if (symbol.isOne()) {
                        retval = symbol;
                    }
                    else if (even(symbol.power.toString())) {
                        //just raise it to the 1/2
                        retval = _.pow(symbol.clone(), new Symbol(0.5));
                    }
                    else {
                        retval = _.symfunction(SQRT, [symbol]);
                    }

                    //put back the sign that was removed earlier
                    if (sign < 0)
                        retval.power.negate();

                    if (m)
                        retval = _.multiply(m, retval);

                    if (img)
                        retval = _.multiply(img, retval);
                }

                if (is_negative && Settings.PARSE2NUMBER)
                    return _.parse(retval);
                
                return retval;
            }

            /**
             * The cube root function
             * @param {Symbol} symbol
             * @returns {Symbol}
             */
            function cbrt(symbol) {
                if(!symbol.isConstant(true)) {
                    var retval;

                    var n = symbol.power/3;
                    //take the cube root of the multplier
                    var m = _.pow(_.parse(symbol.multiplier), new Symbol(1/3));
                    //strip the multiplier
                    var sym = symbol.toUnitMultiplier();

                    //simplify the power
                    if(isInt(n)) {
                        retval = _.pow(sym.toLinear(), _.parse(n));
                    }
                    else {
                        if(sym.group === CB) {
                            retval = new Symbol(1);
                            sym.each(function(x) {
                                retval = _.multiply(retval, cbrt(x));
                            });
                        }
                        else {
                            retval = _.symfunction('cbrt', [sym]);
                        }
                    }

                    return _.multiply(m, retval);
                }
                return nthroot(symbol, new Symbol(3));
            }

            function scientific(symbol, sigfigs) {
                //Just set the flag and keep it moving. Symbol.toString will deal with how to
                //display this
                symbol.scientific = sigfigs || 10;
                return symbol;
            }

            /**
             *
             * @param {Symbol} num - the number being raised
             * @param {Symbol} p - the exponent
             * @param {type} prec - the precision wanted
             * @param {bool} asbig - true if a bigDecimal is wanted
             * @returns {Symbol}
             */
            function nthroot(num, p, prec, asbig) {
                //clone p and convert to a number if possible
                p = evaluate(_.parse(p));

                //cannot calculate if p = 0. nthroot(0, 0) => 0^(1/0) => undefined
                if(p.equals(0)) {
                    throw new UndefinedError('Unable to calculate nthroots of zero');
                }

                //Stop computation if it negative and even since we have an imaginary result
                if(num < 0 && even(p))
                    throw new Error('Cannot calculate nthroot of negative number for even powers');

                //return non numeric values unevaluated
                if(!num.isConstant(true)) {
                    return _.symfunction('nthroot', arguments);
                }

                //evaluate numeric values
                if(num.group !== N) {
                    num = evaluate(num);
                }

                //default is to return a big value
                if (typeof asbig === 'undefined')
                    asbig = true;

                prec = prec || 25;

                var sign = num.sign();
                var retval;
                var ans;

                if(sign < 0) {
                    num = abs(num); //remove the sign
                }

                if (isInt(num) && p.isConstant()) {

                    if (num < 18446744073709551616) {
                        //2^64
                        ans = Frac.create(Math.pow(num, 1 / p));
                    }
                    else {
                        ans = Math2.nthroot(num, p);
                    }

                    var retval;
                    if (asbig) {
                        retval =  new Symbol(ans);
                    }
                    retval = new Symbol(ans.toDecimal(prec));

                    return _.multiply(new Symbol(sign), retval);
                }
            }

            function pfactor(symbol) {
                //Fix issue #458 | nerdamer("sqrt(1-(3.3333333550520926e-7)^2)").evaluate().text()
                //More Big Number issues >:(
                if (symbol.greaterThan(9.999999999998891e+41) || symbol.equals(-1))
                    return symbol;
                //Fix issue #298
                if (symbol.equals(Math.PI))
                    return new Symbol(Math.PI);
                //evaluate the symbol to merge constants
                symbol = evaluate(symbol.clone());

                if (symbol.isConstant()) {
                    var retval = new Symbol(1);
                    var m = symbol.toString();
                    if (isInt(m)) {
                        var factors = Math2.ifactor(m);
                        for (var factor in factors) {
                            var p = factors[factor];
                            retval = _.multiply(retval, _.symfunction('parens', [new Symbol(factor).setPower(new Frac(p))]));
                        }
                    }
                    else {
                        var n = pfactor(new Symbol(symbol.multiplier.num));
                        var d = pfactor(new Symbol(symbol.multiplier.den));
                        retval = _.multiply(_.symfunction('parens', [n]), _.symfunction('parens', [d]).invert());
                    }
                }
                else
                    retval = _.symfunction('pfactor', arguments);
                return retval;
            }

            /**
             * Get's the real part of a complex number. Return number if real
             * @param {Symbol} symbol
             * @returns {Symbol}
             */
            function realpart(symbol) {
                return symbol.realpart();
            }

            /**
             * Get's the imaginary part of a complex number
             * @param {Symbol} symbol
             * @returns {Symbol}
             */
            function imagpart(symbol) {
                return symbol.imagpart();
            }

            /**
             * Computes the conjugate of a complex number
             * @param {Symbol} symbol
             * @returns {Symbol}
             */
            function conjugate(symbol) {
                var re = symbol.realpart();
                var im = symbol.imagpart();
                return _.add(re, _.multiply(im.negate(), Symbol.imaginary()));
            }

            /**
             * Returns the arugment of a complex number
             * @param {Symbol} symbol
             * @returns {Symbol}
             */
            function arg(symbol) {
                var re = symbol.realpart();
                var im = symbol.imagpart();
                if (re.isConstant() && im.isConstant())
                    return new Symbol(Math.atan2(im, re));
                return _.symfunction('atan2', [im, re]);
            }

            /**
             * Returns the arugment of a complex number
             * @param {Symbol} symbol
             * @returns {Symbol}
             */
            function arg(symbol) {
                var re = symbol.realpart();
                var im = symbol.imagpart();
                if (re.isConstant() && im.isConstant()) {
                    if(im.equals(0) && re.equals(-1)) {
                        return _.parse('pi');
                    }
                    else if(im.equals(1) && re.equals(0)) {
                        return _.parse('pi/2');
                    }
                    else if(im.equals(1) && re.equals(1)) {
                        return _.parse('pi/4');
                    }
                    return new Symbol(Math.atan2(im, re));
                }
                return _.symfunction('atan2', [im, re]);
            }

            /**
             * Returns the polarform of a complex number
             * @param {Symbol} symbol
             * @returns {Symbol}
             */
            function polarform(symbol) {
                var p, r, e, theta;
                p = Symbol.toPolarFormArray(symbol);
                theta = p[1];
                r = p[0];
                e = _.parse(format('e^({0}*({1}))', Settings.IMAGINARY, theta));
                return _.multiply(r, e);
            }

            /**
             * Returns the rectangular form of a complex number. Does not work for symbolic coefficients
             * @param {Symbol} symbol
             * @returns {Symbol}
             */
            function rectform(symbol) {
                //TODO: e^((i*pi)/4)
                var original = symbol.clone();
                try {
                    var f, p, q, s, h, d, n;
                    f = decompose_fn(symbol, 'e', true);
                    p = _.divide(f.x.power, Symbol.imaginary());
                    q = evaluate(trig.tan(p));
                    s = _.pow(f.a, new Symbol(2));
                    d = q.getDenom(true);
                    n = q.getNum();
                    h = Symbol.hyp(n, d);
                    //check
                    if (h.equals(f.a)) {
                        return _.add(d, _.multiply(Symbol.imaginary(), n));
                    }
                    else {
                        return original;
                    }
                }
                catch (e) {
                    return original;
                }
            }

            function symMinMax(f, args) {
                args.map(function (x) {
                    x.numVal = evaluate(x).multiplier;
                });
                var l, a, b;
                while (true) {
                    l = args.length;
                    if (l < 2)
                        return args[0];
                    a = args.pop();
                    b = args[l - 2];
                    if (f === 'min' ? a.numVal < b.numVal : a.numVal > b.numVal) {
                        args.pop();
                        args.push(a);
                    }
                }
            }

            /**
             * Returns maximum of a set of numbers
             * @returns {Symbol}
             */
            function max() {
                var args = [].slice.call(arguments);
                if (allSame(args))
                    return args[0];
                if (allNumbers(args))
                    return new Symbol(Math.max.apply(null, args));
                if (Settings.SYMBOLIC_MIN_MAX && allConstants(args))
                    return symMinMax('max', args);
                return _.symfunction('max', args);
            }

            /**
             * Returns minimum of a set of numbers
             * @returns {Symbol}
             */
            function min() {
                var args = [].slice.call(arguments);
                if (allSame(args))
                    return args[0];
                if (allNumbers(args))
                    return new Symbol(Math.min.apply(null, args));
                if (Settings.SYMBOLIC_MIN_MAX && allConstants(args))
                    return symMinMax('min', args);
                return _.symfunction('min', args);
            }

            /**
             * Returns the sign of a number
             * @param {Symbol} x
             * @returns {Symbol}
             */
            function sign(x) {
                if (x.isConstant(true))
                    return new Symbol(Math.sign(evaluate(x)));
                return _.symfunction('sign', arguments);
            }

            function sort(symbol, opt) {
                opt = opt ? opt.toString() : 'asc';
                var getval = function (e) {
                    if (e.group === N)
                        return e.multiplier;
                    if (e.group === FN) {
                        if (e.fname === '')
                            return getval(e.args[0]);
                        return e.fname;
                    }
                    if (e.group === S)
                        return e.power;

                    return e.value;
                };
                var symbols = isVector(symbol) ? symbol.elements : symbol.collectSymbols();
                return new Vector(symbols.sort(function (a, b) {
                    var aval = getval(a),
                            bval = getval(b);
                    if (opt === 'desc')
                        return bval - aval;
                    return aval - bval;
                }));
            }

            /**
             * The log function
             * @param {Symbol} symbol
             * @param {Symbol} base
             * @returns {Symbol}
             */
            function log(symbol, base) {
                
                if(symbol.equals(1)) {
                    return new Symbol(0);
                }

                var retval;
                
                if (symbol.fname === SQRT && symbol.multiplier.equals(1)) {
                    retval = _.divide(log(symbol.args[0]), new Symbol(2));
                    
                    if(symbol.power.sign() < 0) {
                        retval.negate();
                    }
                    
                    // Exit early
                    return retval;
                }

                //log(0) is undefined so complain
                if (symbol.equals(0)) {
                    throw new UndefinedError(Settings.LOG+'(0) is undefined!');
                }

                //deal with imaginary values
                if (symbol.isImaginary()) {
                    return complex.evaluate(symbol, Settings.LOG);
                }

                if (symbol.isConstant() && typeof base !== 'undefined' && base.isConstant()) {
                    var log_sym = Math.log(symbol);
                    var log_base = Math.log(base);
                    retval = new Symbol(log_sym / log_base);
                }
                else if (symbol.group === EX && symbol.power.multiplier.lessThan(0) || symbol.power.toString() === '-1') {
                    symbol.power.negate();
                    //move the negative outside but keep the positive inside :)
                    retval = log(symbol).negate();
                }
                else if (symbol.value === 'e' && symbol.multiplier.equals(1)) { 
                    var p = symbol.power;
                    retval = isSymbol(p) ? p : new Symbol(p);
                }
                else if (symbol.group === FN && symbol.fname === 'exp') {
                    var s = symbol.args[0];
                    if (symbol.multiplier.equals(1))
                        retval = _.multiply(s, new Symbol(symbol.power));
                    else
                        retval = _.symfunction(Settings.LOG, [symbol]);
                }
                else if (Settings.PARSE2NUMBER && isNumericSymbol(symbol)) {
                    var img_part;
                    if (symbol.multiplier.lessThan(0)) {
                        symbol.negate();
                        img_part = _.multiply(new Symbol(Math.PI), new Symbol('i'));
                    }
                    retval = new Symbol(Math.log(symbol.multiplier.toDecimal()));
                    if (img_part)
                        retval = _.add(retval, img_part);
                }
                else {
                    var s;
                    if (!symbol.power.equals(1) && !symbol.contains('e')) {
                        s = symbol.group === EX ? symbol.power : new Symbol(symbol.power);
                        symbol.toLinear();
                    }
                    //log(a,a) = 1 since the base is allowed to be changed.
                    //This was pointed out by Happypig375 in issue #280
                    if (arguments.length > 1 && allSame(arguments)) {
                        retval = new Symbol(1);
                    }
                    else {
                        retval = _.symfunction(Settings.LOG, arguments);
                    }

                    if (s)
                        retval = _.multiply(s, retval);
                }
      
                return retval;
            }

            /**
             * Round a number up to s decimal places
             * @param {Number} x
             * @param {int} s - the number of decimal places
             * @returns {undefined}
             */
            function round(x, s) {
                var sIsConstant = s && s.isConstant() || typeof s === 'undefined';
                if (x.isConstant() && sIsConstant) {
                    var v, e, exp, retval;
                    v = x;
                    //round the coefficient of then number but not the actual decimal value
                    //we know this because a negative number was passed
                    if (s && s.lessThan(0)) {
                        s = abs(s);
                        //convert the number to exponential form
                        e = Number(x).toExponential().toString().split('e');
                        //point v to the coefficient of then number
                        v = e[0];
                        //set the expontent
                        exp = e[1];
                    }
                    //round the number to the requested precision
                    retval = new Symbol(nround(v, Number(s || 0)));
                    //if there's a exponent then put it back
                    return _.multiply(retval, _.pow(new Symbol(10), new Symbol(exp || 0)))
                }


                return _.symfunction('round', arguments);
            }

            /**
             * Gets the quadrant of the trig function
             * @param {Frac} m
             * @returns {Int}
             */
            function getQuadrant(m) {
                var v = m % 2, quadrant;

                if (v < 0)
                    v = 2 + v; //put it in terms of pi

                if (v >= 0 && v <= 0.5)
                    quadrant = 1;
                else if (v > 0.5 && v <= 1)
                    quadrant = 2;
                else if (v > 1 && v <= 1.5)
                    quadrant = 3;
                else
                    quadrant = 4;
                return quadrant;
            }

            /*
             * Serves as a bridge between numbers and bigNumbers
             * @param {Frac|Number} n
             * @returns {Symbol}
             */
            function bigConvert(n) {
                if (!isFinite(n)) {
                    var sign = Math.sign(n);
                    var r = new Symbol(String(Math.abs(n)));
                    r.multiplier = r.multiplier.multiply(new Frac(sign));
                    return r;
                }
                if (isSymbol(n))
                    return n;
                if (typeof n === 'number') {
                    try {
                        n = Frac.simple(n);
                    }
                    catch (e) {
                        n = new Frac(n);
                    }
                }

                var symbol = new Symbol(0);
                symbol.multiplier = n;
                return symbol;
            }

            function clean(symbol) {
                // handle functions with numeric values
                // handle denominator within denominator
                // handle trig simplifications
                var g = symbol.group, retval;
                //Now let's get to work
                if (g === CP) {
                    var num = symbol.getNum(),
                            den = symbol.getDenom() || new Symbol(1),
                            p = Number(symbol.power),
                            factor = new Symbol(1);
                    if (Math.abs(p) === 1) {
                        den.each(function (x) {
                            if (x.group === CB) {
                                factor = _.multiply(factor, clean(x.getDenom()));
                            }
                            else if (x.power.lessThan(0)) {
                                factor = _.multiply(factor, clean(x.clone().toUnitMultiplier()));
                            }
                        });

                        var new_den = new Symbol(0);
                        //now divide out the factor and add to new den
                        den.each(function (x) {
                            new_den = _.add(_.divide(x, factor.clone()), new_den);
                        });

                        factor.invert(); //invert so it can be added to the top
                        var new_num;
                        if (num.isComposite()) {
                            new_num = new Symbol(0);
                            num.each(function (x) {
                                new_num = _.add(_.multiply(clean(x), factor.clone()), new_num);
                            });
                        }
                        else
                            new_num = _.multiply(factor, num);

                        retval = _.divide(new_num, new_den);
                    }
                }
                else if (g === CB) {
                    retval = new Symbol(1);
                    symbol.each(function (x) {
                        retval = _.multiply(retval, _.clean(x));
                    });
                }
                else if (g === FN) {
                    if (symbol.args.length === 1 && symbol.args[0].isConstant())
                        retval = block('PARSE2NUMBER', function () {
                            return _.parse(symbol);
                        }, true);
                }

                if (!retval)
                    retval = symbol;

                return retval;
            }

            /**
             * Expands a symbol
             * @param symbol
             */
            function expand(symbol) {
                //deal with parenthesis
                if (symbol.group === FN && symbol.fname === '') {
                    return _.expand(symbol.args[0]);
                }

                //TODO - some test need to be verified in order to implement this
                /*
                 if(symbol.group === FN) {
                 symbol.args[0] = _.expand(symbol.args[0]);
                 symbol.updateHash();
                 return symbol;
                 }
                 */

                if (!symbol.symbols)
                    return symbol; //nothing to do

                var original = symbol.clone();
                try {

                    if (!symbol.symbols)
                        return symbol;

                    //expand all the symbols
                    for (var s in symbol.symbols) {
                        var x = symbol.symbols[s];
                        symbol.symbols[s] = expand(x);
                    }

                    symbol = _.parse(symbol);

                    var p = symbol.power,
                            m = symbol.multiplier.clone(),
                            pn = Number(p);
                    if (isInt(pn) && pn > 0 && symbol.isComposite()) {
                        var f = new Symbol(0);
                        //we loop through the f and make sure that it's fully expanded
                        for (var x in symbol.symbols) {
                            var sym = symbol.symbols[x];
                            if (sym.power.greaterThan(1))
                                sym = _.expand(sym);
                            f = _.add(f, sym);
                        }

                        //assume (a+b)^3 = (a+b)(a+b)(a+b) = (b^2+2*a*b+a^2)(a+b)
                        //we have n=p-1=2 iterations where p=3 in this case
                        var n = pn - 1;
                        //Initiate with the first term. Remember that we have p-1 iterations because
                        //the first iteration is equal to P where p is the polynomial
                        var result = f.clone(); //initiate this as the first term
                        //the first loop is the top iterator and remains untouched. No sub-symbols
                        //from this symbol are allowed to be touched
                        for (var i = 0; i < n; i++) {
                            var t = new Symbol(0);
                            for (var x in f.symbols) {
                                var a = f.symbols[x];
                                //we now loop through the
                                for (var y in result.symbols) {
                                    var b = _.multiply(a.clone(), result.symbols[y]);
                                    //the result must always be a composite. If not expand
                                    if (b.group === CB)
                                        b = _.expand(b);
                                    t = _.add(t, b);
                                }
                            }
                            ;
                            result = t;
                        }

                        //put back the multiplier
                        if (!m.equals(1)) {
                            for (var s in result.symbols) {
                                var x = result.symbols[s];
                                x.multiplier = x.multiplier.multiply(m);
                                if (x.isComposite())
                                    x.distributeMultiplier();
                                symbol.symbols[s] = x;
                            }
                        }

                        return result;
                    }
                    else if (symbol.group === CB) {
                        //check if the symbol has composites
                        var hascomposites = false,
                                sp = symbol.power.clone(),
                                sign = symbol.power.sign();

                        for (var x in symbol.symbols) {
                            var sub = symbol.symbols[x];
                            if (sub.isComposite()) {
                                hascomposites = true;
                                break;
                            }

                            if (isSymbol(sub.power) || isSymbol(sp)) {
                                sub.power = _.multiply(sub.power, Symbol(sp));
                                sub.group = EX;
                            }
                            else
                                sub.power = sub.power.multiply(sp);
                        }

                        symbol.toLinear();

                        //I'm going to be super lazy here and take the easy way out. TODO: do this without re-parsing
                        symbol = _.parse(symbol.text());

                        if (!hascomposites)
                            return symbol; //nothing to do here

                        var result = new Symbol(0);
                        var composites = [],
                                non_composites = new Symbol(symbol.multiplier);

                        //sort them out
                        for (var s in symbol.symbols) {
                            var x = symbol.symbols[s];

                            if (x.group === EX)
                                continue;
                            if (x.isComposite()) {
                                var p = x.power, isDenom = false;
                                ;
                                if (isInt(p)) {
                                    if (p < 0) {
                                        x.power.negate();
                                        isDenom = true;
                                    }
                                }

                                if (isDenom) {
                                    x.power.negate();
                                    non_composites = _.multiply(non_composites, x);
                                }
                                else
                                    composites.push(x);
                            }
                            else
                                non_composites = _.multiply(non_composites, x);
                        }

                        //grab the first symbol since we'll loop over that one to begin
                        result = composites.pop();

                        while (composites.length) {
                            var s = composites.pop();
                            var t = new Symbol(0);
                            result.each(function (x) {
                                s.each(function (y) {
                                    var prod = _.multiply(x.clone(), y.clone());
                                    t = _.add(t, prod);
                                });
                            });

                            result = t;
                        }

                        var finalResult = new Symbol(0);
                        //put back the multiplier
                        result.each(function (x) {
                            finalResult = _.add(finalResult, expand(_.multiply(non_composites, x)));
                        });
                        //expand the power
                        finalResult.power = finalResult.power.multiply(sp.abs());

                        symbol = _.expand(finalResult);

                        if (sign < 0)
                            symbol.invert();
                    }
                }
                catch (e) {
                    return original;
                }

                return symbol;
            }

            /**
             * Returns an identity matrix of nxn
             * @param {Number} n
             * @returns {Matrix}
             */
            function imatrix(n) {
                return Matrix.identity(n);
            }

            /**
             * Retrieves and item from a vector
             * @param {Vector} vector
             * @param {Number} index
             * @returns {Vector|Symbol}
             */
            function vecget(vector, index) {
                if (index.isConstant() && isInt(index))
                    return vector.elements[index];
                return _.symfunction('vecget', arguments);
            }

            /**
             * Removes duplicates from a vector
             * @param {Vector} vector
             * @param {Number} tolerance
             * @returns {Vector}
             */
            function vectrim(vector, tolerance) {
                tolerance = typeof tolerance === 'undefined' ? 1e-14 : tolerance;

                vector = vector.clone();

                tolerance = Number(tolerance);
                //place algebraic solutions first
                vector.elements.sort(function(a, b) {
                    return b.group - a.group;
                });
                //depending on the start point we may have duplicates so we need to clean those up a bit.
                //start by creating an object with the solution and the numeric value. This way we don't destroy algebraic values
                vector.elements = removeDuplicates(vector.elements, function(a, b) {
                    var diff = Number(_.subtract(evaluate(a), evaluate(b)).abs());
                    return diff <= tolerance;
                });

                return vector;
            }

            /**
             * Set a value for a vector at a given index
             * @param {Vector} vector
             * @param {Number} index
             * @param {Symbol} value
             * @returns {Vector}
             */
            function vecset(vector, index, value) {
                if (!index.isConstant)
                    return _.symfunction('vecset', arguments);
                vector.elements[index] = value;
                return vector;
            }

            function matget(matrix, i, j) {
                if (i.isConstant() && j.isConstant())
                    return matrix.elements[i][j];
                return _.symfunction('matget', arguments);
            }

            function matgetrow(matrix, i) {
                if (i.isConstant())
                    return new Matrix(matrix.elements[i]);
                return _.symfunction('matgetrow', arguments);
            }

            function matsetrow(matrix, i, x) {
                //handle symbolics
                if (!i.isConstant())
                    return _.symfunction('matsetrow', arguments);
                if (matrix.elements[i].length !== x.elements.length)
                    throw new DimensionError('Matrix row must match row dimensions!');
                var M = matrix.clone();
                M.elements[i] = x.clone().elements;
                return M;
            }

            function matgetcol(matrix, col_index) {
                //handle symbolics
                if (!col_index.isConstant())
                    return _.symfunction('matgetcol', arguments);
                col_index = Number(col_index);
                var M = Matrix.fromArray([]);
                matrix.each(function (x, i, j) {
                    if (j === col_index) {
                        M.elements.push([x.clone()]);
                    }
                });
                return M;
            }

            function matsetcol(matrix, j, col) {
                //handle symbolics
                if (!j.isConstant())
                    return _.symfunction('matsetcol', arguments);
                j = Number(j);
                if (matrix.rows() !== col.elements.length)
                    throw new DimensionError('Matrix columns must match number of columns!');
                col.each(function (x, i) {
                    matrix.set(i - 1, j, x.elements[0].clone());
                });
                return matrix;
            }


            function matset(matrix, i, j, value) {
                matrix.elements[i][j] = value;
                return matrix;
            }

            //the constructor for vectors
            function vector() {
                return new Vector([].slice.call(arguments));
            }

            //the constructor for matrices
            function matrix() {
                return Matrix.fromArray(arguments);
            }

            //the constructor for sets
            function set() {
                return Set.fromArray(arguments);
            }

            function determinant(symbol) {
                if (isMatrix(symbol)) {
                    return symbol.determinant();
                }
                return symbol;
            }

            function size(symbol) {
                var retval;
                if (isMatrix(symbol))
                    retval = [new Symbol(symbol.cols()), new Symbol(symbol.rows())];
                else if(isVector(symbol) || isSet(symbol))
                    retval = new Symbol(symbol.elements.length);
                else
                    err('size expects a matrix or a vector');
                return retval;
            }

            function dot(vec1, vec2) {
                if (isVector(vec1) && isVector(vec2))
                    return vec1.dot(vec2);
                err('function dot expects 2 vectors');
            }

            function cross(vec1, vec2) {
                if (isVector(vec1) && isVector(vec2))
                    return vec1.cross(vec2);
                err('function cross expects 2 vectors');
            }

            function transpose(mat) {
                if (isMatrix(mat))
                    return mat.transpose();
                err('function transpose expects a matrix');
            }

            function invert(mat) {
                if (isMatrix(mat))
                    return mat.invert();
                err('invert expects a matrix');
            }

            //basic set functions
            function union(set1, set2) {
                return set1.union(set2);
            }

            function intersection(set1, set2) {
                return set1.intersection(set2);
            }

            function contains(set1, e) {
                return set1.contains(e);
            }

            function difference(set1, set2) {
                return set1.difference(set2);
            }

            function intersects(set1, set2) {
                return new Symbol(Number(set1.intersects(set2)));
            }

            function is_subset(set1, set2) {
                return new Symbol(Number(set1.is_subset(set2)));
            }

            function print() {
                arguments2Array(arguments).map(function(x) {
                    console.log(x.toString());
                });
            }

            function testSQRT(symbol) {
                //wrap the symbol in sqrt. This eliminates one more check down the line.
                if (!isSymbol(symbol.power) && symbol.power.absEquals(0.5)) {
                    var sign = symbol.power.sign();
                    //don't devide the power directly. Notice the use of toString. This makes it possible
                    //to use a bigNumber library in the future
                    var retval = sqrt(symbol.group === P ? new Symbol(symbol.value) : symbol.toLinear());
                    //place back the sign of the power
                    if (sign < 0)
                        retval.invert();
                    return retval;
                }
                return symbol;
            }

            //try to reduce a symbol by pulling its power
            function testPow(symbol) {
                if (symbol.group === P) {
                    var v = symbol.value;

                    var fct = primeFactors(v)[0];
                    
                    //safety
                    if(!fct) {
                        warn('Unable to compute prime factors. This should not happen. Please review and report.');
                        return symbol;
                    }

                    var n = new Frac(Math.log(v) / Math.log(fct)),
                        p = n.multiply(symbol.power);

                    //we don't want a more complex number than before
                    if (p.den > symbol.power.den)
                        return symbol;

                    if (isInt(p))
                        symbol = Symbol(Math.pow(fct, p));
                    else
                        symbol = new Symbol(fct).setPower(p);
                }

                return symbol;
            }

            //Link the functions to the parse so they're available outside of the library.
            //This is strictly for convenience and may be deprecated.
            this.expand = expand;
            this.round = round;
            this.clean = clean;
            this.sqrt = sqrt;
            this.cbrt = cbrt;
            this.abs = abs;
            this.log = log;
            this.rationalize = rationalize;
            this.nthroot = nthroot;
            this.arg = arg;
            this.conjugate = conjugate;
            this.imagpart = imagpart;
            this.realpart = realpart;

            //TODO:
            //Utilize the function below instead of the linked function
            this.getFunction = function(name) {
                return functions[name][0];
            };

    //Parser.methods ===============================================================
            this.addPreprocessor = function (name, action, order, shift_cells) {
                var names = preprocessors.names;
                var actions = preprocessors.actions;
                if ((typeof action !== 'function')) //the person probably forgot to specify a name
                    throw new PreprocessorError('Incorrect parameters. Function expected!');
                if (!order) {
                    names.push(name);
                    actions.push(action);
                }
                else {
                    if (shift_cells) {
                        names.splice(order, 0, name);
                        actions.splice(order, 0, action);
                    }
                    else {
                        names[order] = name;
                        actions[order] = action;
                    }
                }
            };

            this.getPreprocessors = function () {
                var preprocessors = {};
                for (var i = 0, l = preprocessors.names.length; i < l; i++) {
                    var name = preprocessors.names[i];
                    preprocessors[name] = {
                        order: i,
                        action: preprocessors.actions[i]
                    };
                }
                return preprocessors;
            };

            this.removePreprocessor = function (name, shift_cells) {
                var i = preprocessors.names.indexOf(name);
                if (shift_cells) {
                    remove(preprocessors.names, i);
                    remove(preprocessors.actions, i);
                }
                else {
                    preprocessors.names[i] = undefined;
                    preprocessors.actions[i] = undefined;
                }
            };

            //The loader for functions which are not part of Math2
            this.mapped_function = function () {
                var subs = {},
                        params = this.params;
                for (var i = 0; i < params.length; i++)
                    subs[params[i]] = arguments[i];

                return _.parse(this.body, subs);
            };
            /**
             * Adds two symbols
             * @param {Symbol} a
             * @param {Symbol} b
             * @returns {Symbol}
             */
            this.add = function (a, b) {
                var aIsSymbol = isSymbol(a),
                        bIsSymbol = isSymbol(b);
                //we're dealing with two symbols
                if (aIsSymbol && bIsSymbol) {
                    //forward the adding of symbols with units to the Unit module
                    if (a.unit || b.unit) {
                        return _.Unit.add(a, b);
                    }
                    //handle Infinity
                    //https://www.encyclopediaofmath.org/index.php/Infinity
                    if (a.isInfinity || b.isInfinity) {
                        var aneg = a.multiplier.lessThan(0),
                                bneg = b.multiplier.lessThan(0);

                        if (a.isInfinity && b.isInfinity && aneg !== bneg) {
                            throw new UndefinedError('(' + a + ')+(' + b + ') is not defined!');
                        }

                        var inf = Symbol.infinity();
                        if (bneg)
                            inf.negate();
                        return inf;
                    }

                    if (a.isComposite() && a.isLinear() && b.isComposite() && b.isLinear()) {
                        a.distributeMultiplier();
                        b.distributeMultiplier();
                    }
                    //no need to waste time on zeroes
                    if (a.multiplier.equals(0))
                        return b;
                    if (b.multiplier.equals(0))
                        return a;

                    if (a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {
                        var result = new Symbol(a.multiplier.add(b.multiplier).toDecimal(Settings.PRECISION));
                        return result;
                    }

                    var g1 = a.group,
                            g2 = b.group,
                            ap = a.power.toString(),
                            bp = b.power.toString();

                    //always keep the greater group on the left.
                    if (g1 < g2 || (g1 === g2 && ap > bp && bp > 0)) {
                        return this.add(b, a);
                    }

                    /*note to self: Please don't forget about this dilemma ever again. In this model PL and CB goes crazy
                     * because it doesn't know which one to prioritize. */
                    //correction to PL dilemma
                    if (g1 === CB && g2 === PL && a.value === b.value) {
                        //swap
                        var t = a;
                        a = b;
                        b = t;
                        g1 = a.group;
                        g2 = b.group;
                        ap = a.power.toString();
                        bp = b.power.toString();
                    }

                    var powEQ = ap === bp,
                            v1 = a.value,
                            v2 = b.value,
                            aIsComposite = a.isComposite(),
                            bIsComposite = b.isComposite(),
                            h1, h2, result;

                    if (aIsComposite)
                        h1 = text(a, 'hash');
                    if (bIsComposite)
                        h2 = text(b, 'hash');

                    if (g1 === CP && g2 === CP && b.isLinear() && !a.isLinear() && h1 !== h2) {
                        return this.add(b, a);
                    }

                    //PL & PL should compare hashes and not values e.g. compare x+x^2 with x+x^3 and not x with x
                    if (g1 === PL && g2 === PL) {
                        v1 = h1;
                        v2 = h2;
                    }

                    var PN = g1 === P && g2 === N,
                            PNEQ = a.value === b.multiplier.toString(),
                            valEQ = (v1 === v2 || h1 === h2 && h1 !== undefined || (PN && PNEQ));

                    //equal values, equal powers
                    if (valEQ && powEQ && g1 === g2) {
                        //make sure to convert N to something P can work with
                        if (PN)
                            b = b.convert(P);//CL

                        //handle PL
                        if (g1 === PL && (g2 === S || g2 === P)) {
                            a.distributeMultiplier();
                            result = a.attach(b);
                        }
                        else {
                            result = a;//CL
                            if (a.multiplier.isOne() && b.multiplier.isOne() && g1 === CP && a.isLinear() && b.isLinear()) {
                                for (var s in b.symbols) {
                                    var x = b.symbols[s];
                                    result.attach(x);
                                }
                            }
                            else
                                result.multiplier = result.multiplier.add(b.multiplier);
                        }
                    }
                    //equal values uneven powers
                    else if (valEQ && g1 !== PL) {
                        //break the tie for e.g. (x+1)+((x+1)^2+(x+1)^3)
                        if (g1 === CP && g2 === PL) {
                            b.insert(a);
                            result = b;
                        }
                        else {
                            result = Symbol.shell(PL).attach([a, b]);
                            //update the hash
                            result.value = g1 === PL ? h1 : v1;
                        }
                    }
                    else if (aIsComposite && a.isLinear()) {
                        var canIterate = g1 === g2,
                                bothPL = g1 === PL && g2 === PL;

                        //we can only iterate group PL if they values match
                        if (bothPL)
                            canIterate = a.value === b.value;
                        //distribute the multiplier over the entire symbol
                        a.distributeMultiplier();

                        if (b.isComposite() && b.isLinear() && canIterate) {
                            b.distributeMultiplier();
                            //CL
                            for (var s in b.symbols) {
                                var x = b.symbols[s];
                                a.attach(x);
                            }
                            result = a;
                        }
                        //handle cases like 2*(x+x^2)^2+2*(x+x^2)^3+4*(x+x^2)^2
                        else if (bothPL && a.value !== h2 || g1 === PL && !valEQ) {
                            result = Symbol.shell(CP).attach([a, b]);
                            result.updateHash();

                        }
                        else {
                            result = a.attach(b);
                        }
                    }
                    else {
                        if (g1 === FN && a.fname === SQRT && g2 !== EX && b.power.equals(0.5)) {
                            var m = b.multiplier.clone();
                            b = sqrt(b.toUnitMultiplier().toLinear());
                            b.multiplier = m;
                        }
                        //fix for issue #3 and #159
                        if (a.length === 2 && b.length === 2 && even(a.power) && even(b.power)) {
                            result = _.add(expand(a), expand(b));
                        }
                        else {
                            result = Symbol.shell(CP).attach([a, b]);
                            result.updateHash();
                        }
                    }

                    if (result.multiplier.equals(0))
                        result = new Symbol(0);

                    //make sure to remove unnecessary wraps
                    if (result.length === 1) {
                        var m = result.multiplier;
                        result = firstObject(result.symbols);
                        result.multiplier = result.multiplier.multiply(m);
                    }

                    return result;
                }
                else {
                    //keep symbols to the right
                    if (bIsSymbol && !aIsSymbol) {
                        var t = a;
                        a = b;
                        b = t; //swap
                        t = bIsSymbol;
                        bIsSymbol = aIsSymbol;
                        aIsSymbol = t;
                    }

                    var bIsMatrix = isMatrix(b);

                    if (aIsSymbol && bIsMatrix) {
                        var M = new Matrix();
                        b.eachElement(function (e, i, j) {
                            M.set(i, j, _.add(a.clone(), e));
                        });

                        b = M;
                    }
                    else {
                        if (isMatrix(a) && bIsMatrix) {
                            b = a.add(b);
                        }
                        else if (aIsSymbol && isVector(b)) {
                            b.each(function (x, i) {
                                i--;
                                b.elements[i] = _.add(a.clone(), b.elements[i]);
                            });
                        }
                        else {
                            if (isVector(a) && isVector(b)) {
                                b.each(function (x, i) {
                                    i--;
                                    b.elements[i] = _.add(a.elements[i], b.elements[i]);
                                });
                            }
                            else if (isVector(a) && isMatrix(b)) {
                                //try to convert a to a matrix
                                return _.add(b, a);
                            }
                            else if (isMatrix(a) && isVector(b)) {
                                if (b.elements.length === a.rows()) {
                                    var M = new Matrix(), l = a.cols();
                                    b.each(function (e, i) {
                                        var row = [];
                                        for (var j = 0; j < l; j++) {
                                            row.push(_.add(a.elements[i - 1][j].clone(), e.clone()));
                                        }
                                        M.elements.push(row);
                                    });
                                    return M;
                                }
                                else
                                    err('Dimensions must match!');
                            }
                        }
                    }
                    return b;
                }

            };
            /**
             * Gets called when the parser finds the - operator. Not the prefix operator. See this.add
             * @param {Symbol} a
             * @param {Symbol} b
             * @returns {Symbol}
             */
            this.subtract = function (a, b) {
                var aIsSymbol = aIsSymbol = isSymbol(a),
                        bIsSymbol = isSymbol(b);

                if (aIsSymbol && bIsSymbol) {
                    if (a.unit || b.unit) {
                        return _.Unit.subtract(a, b);
                    }
                    return this.add(a, b.negate());
                }
                else {
                    if (bIsSymbol && isVector(a)) {
                        b = a.map(function (x) {
                            return _.subtract(x, b.clone());
                        });
                    }
                    else if (aIsSymbol && isVector(b)) {
                        b = b.map(function (x) {
                            return _.subtract(a.clone(), x);
                        });
                    }
                    else if (isVector(a) && isVector(b)) {
                        if (a.dimensions() === b.dimensions())
                            b = a.subtract(b);
                        else
                            _.error('Unable to subtract vectors. Dimensions do not match.');
                    }
                    else if (isMatrix(a) && isVector(b)) {
                        if (b.elements.length === a.rows()) {
                            var M = new Matrix(), l = a.cols();
                            b.each(function (e, i) {
                                var row = [];
                                for (var j = 0; j < l; j++) {
                                    row.push(_.subtract(a.elements[i - 1][j].clone(), e.clone()));
                                }
                                M.elements.push(row);
                            });
                            return M;
                        }
                        else
                            err('Dimensions must match!');
                    }
                    else if (isVector(a) && isMatrix(b)) {
                        var M = b.clone().negate();
                        return _.add(M, a);
                    }
                    else if (isMatrix(a) && isMatrix(b)) {
                        b = a.subtract(b);
                    }
                    else if(isMatrix(a) && bIsSymbol) {
                        var M = new Matrix();
                        a.each(function(x, i, j) {
                            M.set(i, j, _.subtract(x, b.clone()));
                        });
                        b = M;
                    }
                    else if(aIsSymbol && isMatrix(b)) {
                        var M = new Matrix();
                        b.each(function(x, i, j) {
                            M.set(i, j, _.subtract(a.clone(), x));
                        });
                        b = M;
                    }
                    return b;
                }
            };
            /**
             * Gets called when the parser finds the * operator. See this.add
             * @param {Symbol} a
             * @param {Symbol} b
             * @returns {Symbol}
             */
            this.multiply = function (a, b) {
                var aIsSymbol = isSymbol(a),
                        bIsSymbol = isSymbol(b);
                //we're dealing with function assignment here
                if (aIsSymbol && b instanceof Collection) {
                    b.elements.push(a);
                    return b;
                }
                if (aIsSymbol && bIsSymbol) {
                    //if it has a unit then add it and return it right away.
                    if (b.isUnit) {
                        var result = a.clone();
                        a.unit = b;
                        return result;
                    }
                    //if it has units then just forward that problem to the unit module
                    if (a.unit || b.unit) {
                        return _.Unit.multiply(a, b);
                    }

                    //handle Infinty
                    if (a.isInfinity || b.isInfinity) {
                        if (a.equals(0) || b.equals(0))
                            throw new UndefinedError(a + '*' + b + ' is undefined!');
                        //x/infinity
                        if (b.power.lessThan(0)) {
                            if (!a.isInfinity) {
                                return new Symbol(0);
                            }
                            else {
                                throw new UndefinedError('Infinity/Infinity is not defined!');
                            }
                        }

                        var sign = a.multiplier.multiply(b.multiplier).sign(),
                                inf = Symbol.infinity();
                        if (a.isConstant() || b.isConstant() || (a.isInfinity && b.isInfinity)) {
                            if (sign < 0)
                                inf.negate();

                            return inf;
                        }
                    }
                    //the quickies
                    if (a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {
                        var t = new bigDec(a.multiplier.toDecimal()).times(new bigDec(b.multiplier.toDecimal())).toFixed();
                        var retval = new Symbol(t);
                        return retval;
                    }

                    //don't waste time
                    if (a.isOne()) {
                        return b.clone();
                    }
                    if (b.isOne()) {
                        return a.clone();
                    }

                    if (a.multiplier.equals(0) || b.multiplier.equals(0))
                        return new Symbol(0);

                    if (b.group > a.group && !(b.group === CP))
                        return this.multiply(b, a);
                    //correction for PL/CB dilemma
                    if (a.group === CB && b.group === PL && a.value === b.value) {
                        var t = a;
                        a = b;
                        b = t;//swap
                    }

                    var g1 = a.group,
                            g2 = b.group,
                            bnum = b.multiplier.num,
                            bden = b.multiplier.den;

                    if (g1 === FN && a.fname === SQRT && !b.isConstant() && a.args[0].value === b.value && !a.args[0].multiplier.lessThan(0)) {
                        //unwrap sqrt
                        var a_pow = a.power;
                        var a_multiplier = _.parse(a.multiplier);
                        a = _.multiply(a_multiplier, a.args[0].clone());
                        a.setPower(new Frac(0.5).multiply(a_pow));
                        g1 = a.group;
                    }
                    //simplify n/sqrt(n). Being very specific
                    else if(g1 === FN && a.fname === SQRT && a.multiplier.equals(1) && a.power.equals(-1) && b.isConstant() && a.args[0].equals(b)) {
                        a = _.symfunction(SQRT,[b.clone()]);
                        b = new Symbol(1);
                    }
                    var v1 = a.value,
                            v2 = b.value,
                            sign = new Frac(a.sign()),
                            //since P is just a morphed version of N we need to see if they relate
                            ONN = (g1 === P && g2 === N && b.multiplier.equals(a.value)),
                            //don't multiply the multiplier of b since that's equal to the value of a
                            m = ONN ? new Frac(1).multiply(a.multiplier).abs() : a.multiplier.multiply(b.multiplier).abs(),
                            result = a.clone().toUnitMultiplier();
                    b = b.clone().toUnitMultiplier(true);

                    //further simplification of sqrt
                    if (g1 === FN && g2 === FN) {
                        var u = a.args[0].clone();
                        var v = b.args[0].clone();
                        if (a.fname === SQRT && b.fname === SQRT && a.isLinear() && b.isLinear()) {

                            var q = _.divide(u, v).invert();
                            if (q.gt(1) && isInt(q)) {
                                //b contains a factor a which can be moved to a
                                result = _.multiply(a.args[0].clone(), sqrt(q.clone()));
                                b = new Symbol(1);
                            }
                        }
                        //simplify factorial but only if
                        //1 - It's division so b will have a negative power
                        //2 - We're not dealing with factorials of numbers
                        else if (a.fname === FACTORIAL && b.fname === FACTORIAL && !u.isConstant() && !v.isConstant() && b.power < 0) {
                            //assume that n = positive
                            var d = _.subtract(u.clone(), v.clone());

                            //if it's not numeric then we don't know if we can simplify so just return
                            if(d.isConstant()) {

                                //there will never be a case where d == 0 since this will already have
                                //been handled at the beginning of this function
                                t = new Symbol(1);
                                if(d < 0) {
                                    //If d is negative then the numerator is larger so expand that
                                    for(var i=0, n = Math.abs(d); i<=n; i++) {
                                        var s = _.add(u.clone(), new Symbol(i));
                                        t = _.multiply(t, s);
                                    }

                                    result = _.multiply(_.pow(u, new Symbol(a.power)), _.pow(t, new Symbol(b.power)));

                                    b = new Symbol(1);
                                }
                                else {
                                    //Otherwise the denominator is larger so expand that
                                    for(var i=0, n = Math.abs(d); i<=n; i++) {
                                        var s = _.add(v.clone(), new Symbol(i));
                                        t = _.multiply(t, s);
                                    }

                                    result = _.multiply(_.pow(t, new Symbol(a.power)), _.pow(v, new Symbol(b.power)));

                                    b = new Symbol(1);
                                }
                            }
                        }
                    }


                    //if both are PL then their hashes have to match
                    if (v1 === v2 && g1 === PL && g1 === g2) {
                        v1 = a.text('hash');
                        v2 = b.text('hash');
                    }

                    //same issue with (x^2+1)^x*(x^2+1)
                    //EX needs an exception when multiplying because it needs to recognize
                    //that (x+x^2)^x has the same hash as (x+x^2). The latter is kept as x
                    if (g2 === EX && b.previousGroup === PL && g1 === PL) {
                        v1 = text(a, 'hash', EX);
                    }

                    if ((v1 === v2 || ONN) && !(g1 === PL && (g2 === S || g2 === P || g2 === FN)) && !(g1 === PL && g2 === CB)) {
                        var p1 = a.power,
                                p2 = b.power,
                                isSymbolP1 = isSymbol(p1),
                                isSymbolP2 = isSymbol(p2),
                                toEX = (isSymbolP1 || isSymbolP2);
                        //TODO: this needs cleaning up
                        if (g1 === PL && g2 !== PL && b.previousGroup !== PL && p1.equals(1)) {
                            result = new Symbol(0);
                            a.each(function (x) {
                                result = _.add(result, _.multiply(x, b.clone()));
                            }, true);
                        }
                        else {
                            //add the powers
                            result.power = toEX ? _.add(
                                    !(isSymbol(p1)) ? new Symbol(p1) : p1,
                                    !(isSymbol(p2)) ? new Symbol(p2) : p2
                                    ) : (g1 === N /*don't add powers for N*/ ? p1 : p1.add(p2));

                            //eliminate zero power values and convert them to numbers
                            if (result.power.equals(0))
                                result = result.convert(N);

                            //properly convert to EX
                            if (toEX)
                                result.convert(EX);

                            //take care of imaginaries
                            if (a.imaginary && b.imaginary) {
                                var isEven = even(result.power % 2);
                                if (isEven) {
                                    result = new Symbol(1);
                                    m.negate();
                                }
                            }

                            //cleanup: this causes the LaTeX generator to get confused as to how to render the symbol
                            if (result.group !== EX && result.previousGroup)
                                result.previousGroup = undefined;
                            //the sign for b is floating around. Remember we are assuming that the odd variable will carry
                            //the sign but this isn't true if they're equals symbols
                            result.multiplier = result.multiplier.multiply(b.multiplier);
                        }
                    }
                    else if (g1 === CB && a.isLinear()) {
                        if (g2 === CB)
                            b.distributeExponent();
                        if (g2 === CB && b.isLinear()) {
                            for (var s in b.symbols) {
                                var x = b.symbols[s];
                                result = result.combine(x);
                            }
                            result.multiplier = result.multiplier.multiply(b.multiplier);
                        }
                        else {
                            result.combine(b);
                        }
                    }
                    else {
                        //the multiplier was already handled so nothing left to do
                        if (g1 !== N) {
                            if (g1 === CB) {
                                result.distributeExponent();
                                result.combine(b);
                            }
                            else if (!b.isOne()) {
                                var bm = b.multiplier.clone();
                                b.toUnitMultiplier();
                                result = Symbol.shell(CB).combine([result, b]);
                                //transfer the multiplier to the outside
                                result.multiplier = result.multiplier.multiply(bm);
                            }
                        }
                        else {
                            result = b.clone().toUnitMultiplier();
                        }
                    }

                    if (result.group === P) {
                        var logV = Math.log(result.value),
                                n1 = Math.log(bnum) / logV,
                                n2 = Math.log(bden) / logV,
                                ndiv = m.num / bnum,
                                ddiv = m.den / bden;
                        //we don't want to divide by zero no do we? Strange things happen.
                        if (n1 !== 0 && isInt(n1) && isInt(ndiv)) {
                            result.power = result.power.add(new Frac(n1));
                            m.num /= bnum; //BigInt? Keep that in mind for the future.
                        }
                        if (n2 !== 0 && isInt(n2) && isInt(ddiv)) {
                            result.power = result.power.subtract(new Frac(n2));
                            m.den /= bden; //BigInt? Keep that in mind for the future.
                        }
                    }

                    //unpack CB if length is only one
                    if (result.length === 1) {
                        var t = result.multiplier;
                        //transfer the multiplier
                        result = firstObject(result.symbols);
                        result.multiplier = result.multiplier.multiply(t);
                    }

                    //reduce square root
                    var ps = result.power.toString();
                    if (even(ps) && result.fname === SQRT) {
                        //grab the sign of the symbol
                        sign = sign * result.sign();
                        var p = result.power;
                        result = result.args[0];
                        result = _.multiply(new Symbol(m), _.pow(result, new Symbol(p.divide(new Frac(2)))));
                        //flip it back to the correct sign
                        if (sign < 0)
                            result.negate();
                    }
                    else {
                        result.multiplier = result.multiplier.multiply(m).multiply(sign);
                        if (result.group === CP && result.isImaginary())
                            result.distributeMultiplier();
                    }

                    //back convert group P to a simpler group N if possible
                    if (result.group === P && isInt(result.power.toDecimal()))
                        result = result.convert(N);

                    return result;
                }
                else {
                    //****** Matrices & Vector *****//
                    if (bIsSymbol && !aIsSymbol) { //keep symbols to the right
                        t = a;
                        a = b;
                        b = t; //swap
                        t = bIsSymbol;
                        bIsSymbol = aIsSymbol;
                        aIsSymbol = t;
                    }

                    var isMatrixB = isMatrix(b), isMatrixA = isMatrix(a);
                    if (aIsSymbol && isMatrixB) {
                        var M = new Matrix();
                        b.eachElement(function (e, i, j) {
                            M.set(i, j, _.multiply(a.clone(), e));
                        });

                        b = M;
                    }
                    else {
                        if (isMatrixA && isMatrixB) {
                            b = a.multiply(b);
                        }
                        else if (aIsSymbol && isVector(b)) {
                            b.each(function (x, i) {
                                i--;
                                b.elements[i] = _.multiply(a.clone(), b.elements[i]);
                            });
                        }
                        else {
                            if (isVector(a) && isVector(b)) {
                                b.each(function (x, i) {
                                    i--;
                                    b.elements[i] = _.multiply(a.elements[i], b.elements[i]);
                                });
                            }
                            else if (isVector(a) && isMatrix(b)) {
                                //try to convert a to a matrix
                                return this.multiply(b, a);
                            }
                            else if (isMatrix(a) && isVector(b)) {
                                if (b.elements.length === a.rows()) {
                                    var M = new Matrix(), l = a.cols();
                                    b.each(function (e, i) {
                                        var row = [];
                                        for (var j = 0; j < l; j++) {
                                            row.push(_.multiply(a.elements[i - 1][j].clone(), e.clone()));
                                        }
                                        M.elements.push(row);
                                    });
                                    return M;
                                }
                                else
                                    err('Dimensions must match!');
                            }
                        }
                    }

                    return b;
                }
            };
            /**
             * Gets called when the parser finds the / operator. See this.add
             * @param {Symbol} a
             * @param {Symbol} b
             * @returns {Symbol}
             */
            this.divide = function (a, b) {
                var aIsSymbol = isSymbol(a),
                        bIsSymbol = isSymbol(b);

                if (aIsSymbol && bIsSymbol) {
                    //forward to Unit division
                    if (a.unit || b.unit) {
                        return _.Unit.divide(a, b);
                    }
                    var result;
                    if (b.equals(0))
                        throw new DivisionByZero('Division by zero not allowed!');

                    if (a.isConstant() && b.isConstant()) {
                        result = a.clone();
                        result.multiplier = result.multiplier.divide(b.multiplier);
                    }
                    else {
                        b.invert();
                        result = _.multiply(a, b);
                    }
                    return result;
                }
                else {
                    //******* Vectors & Matrices *********//
                    var isVectorA = isVector(a), isVectorB = isVector(b);
                    if (aIsSymbol && isVectorB) {
                        b = b.map(function (x) {
                            return _.divide(a.clone(), x);
                        });
                    }
                    else if (isVectorA && bIsSymbol) {
                        b = a.map(function (x) {
                            return _.divide(x, b.clone());
                        });
                    }
                    else if (isVectorA && isVectorB) {
                        if (a.dimensions() === b.dimensions()) {
                            b = b.map(function (x, i) {
                                return _.divide(a.elements[--i], x);
                            });
                        }
                        else
                            _.error('Cannot divide vectors. Dimensions do not match!');
                    }
                    else {
                        var isMatrixA = isMatrix(a), isMatrixB = isMatrix(b);
                        if (isMatrixA && bIsSymbol) {
                            var M = new Matrix();
                            a.eachElement(function (x, i, j) {
                                M.set(i, j, _.divide(x, b.clone()));
                            });
                            b = M;
                        }
                        else if(aIsSymbol && isMatrixB) {
                            var M = new Matrix();
                            b.eachElement(function (x, i, j) {
                                M.set(i, j, _.divide(a.clone(), x));
                            });
                            b = M;
                        }
                        else if (isMatrixA && isMatrixB) {
                            var M = new Matrix();
                            if (a.rows() === b.rows() && a.cols() === b.cols()) {
                                a.eachElement(function (x, i, j) {
                                    M.set(i, j, _.divide(x, b.elements[i][j]));
                                });
                                b = M;
                            }
                            else {
                                _.error('Dimensions do not match!');
                            }
                        }
                        else if (isMatrixA && isVectorB) {
                            if (a.cols() === b.dimensions()) {
                                var M = new Matrix();
                                a.eachElement(function (x, i, j) {
                                    M.set(i, j, _.divide(x, b.elements[i].clone()));
                                });
                                b = M;
                            }
                            else {
                                _.error('Unable to divide matrix by vector.');
                            }
                        }
                    }
                    return b;
                }
            };
            /**
             * Gets called when the parser finds the ^ operator. See this.add
             * @param {Symbol} a
             * @param {Symbol} b
             * @returns {Symbol}
             */
            this.pow = function (a, b) {
                var aIsSymbol = isSymbol(a),
                        bIsSymbol = isSymbol(b);
                if (aIsSymbol && bIsSymbol) {
                    //it has units then it's the Unit module's problem
                    if (a.unit || b.unit) {
                        return _.Unit.pow(a, b);
                    }
                    // Handle infinity
                    if (a.isInfinity || b.isInfinity) {
                        if (a.isInfinity && b.isInfinity)
                            throw new UndefinedError('(' + a + ')^(' + b + ') is undefined!');

                        if (a.isConstant() && b.isInfinity) {
                            if (a.equals(0)) {
                                if (b.lessThan(0))
                                    throw new UndefinedError('0^Infinity is undefined!');
                                return new Symbol(0);
                            }
                            if (a.equals(1))
                                throw new UndefinedError('1^' + b.toString() + ' is undefined!');
                            //a^-oo
                            if (b.lessThan(0))
                                return new Symbol(0);
                            //a^oo
                            if (!a.lessThan(0))
                                return Symbol.infinity();
                        }

                        if (a.isInfinity && b.isConstant()) {
                            if (b.equals(0))
                                throw new UndefinedError(a + '^0 is undefined!');
                            if (b.lessThan(0))
                                return new Symbol(0);
                            return _.multiply(Symbol.infinity(), _.pow(new Symbol(a.sign()), b.clone()));
                        }
                    }

                    var aIsZero = a.equals(0);
                    var bIsZero = b.equals(0);
                    if (aIsZero && bIsZero)
                        throw new UndefinedError('0^0 is undefined!');
                    
                    // Return 0 right away if possible
                    if (aIsZero && b.isConstant() && b.multiplier.greaterThan(0))
                        return new Symbol(0);

                    if (bIsZero)
                        return new Symbol(1);

                    var bIsConstant = b.isConstant(),
                            aIsConstant = a.isConstant(),
                            bIsInt = b.isInteger(),
                            m = a.multiplier,
                            result = a.clone();
                    
                    // 0^0, 1/0, etc. Complain.
                    if (aIsConstant && bIsConstant && a.equals(0) && b.lessThan(0))
                        throw new UndefinedError('Division by zero is not allowed!');

                    // Compute imaginary numbers right away
                    if (Settings.PARSE2NUMBER && aIsConstant && bIsConstant && a.sign() < 0 && evenFraction(b)) {
                        var k, re, im;
                        k = Math.PI * b;
                        re = new Symbol(Math.cos(k));
                        im = _.multiply(Symbol.imaginary(), new Symbol(Math.sin(k)));
                        return _.add(re, im);
                    }

                    // Imaginary number under negative nthroot or to the n
                    if (Settings.PARSE2NUMBER && a.isImaginary() && bIsConstant && isInt(b) && !b.lessThan(0)) {
                        var re, im, r, theta, nre, nim;
                        re = a.realpart();
                        im = a.imagpart();
                        if (re.isConstant('all') && im.isConstant('all')) {
                            theta = new Symbol(Math.atan2(im, re) * b);
                            r = _.pow(Symbol.hyp(re, im), b);
                            nre = _.multiply(r.clone(), _.trig.cos(theta.clone()));
                            nim = _.multiply(r, _.trig.sin(theta));
                            return _.add(nre, _.multiply(Symbol.imaginary(), nim));
                        }
                    }

                    // Take care of the symbolic part
                    result.toUnitMultiplier();
                    //simpifly sqrt
                    if (result.group === FN && result.fname === SQRT && !bIsConstant) {
                        var s = result.args[0];
                        s.multiplyPower(new Symbol(0.5));
                        s.multiplier.multiply(result.multiplier);
                        s.multiplyPower(b);
                        result = s;
                    }
                    else {
                        var sign = m.sign();
                        //handle cases such as (-a^3)^(1/4)
                        if (evenFraction(b) && sign < 0) {
                            // Swaperoo
                            // First put the sign back on the symbol
                            result.negate();
                            // Wrap it in brackets
                            result = _.symfunction(PARENTHESIS, [result]);
                            // Move the sign back the exterior and let nerdamer handle the rest
                            result.negate();
                        }

                        result.multiplyPower(b);
                    }

                    if (aIsConstant && bIsConstant && Settings.PARSE2NUMBER) {
                            var c;
                            //remove the sign
                            if (sign < 0) {
                                a.negate();
                                if (b.multiplier.den.equals(2))
                                    //we know that the numerator has to be odd and therefore it's i
                                    c = new Symbol(Settings.IMAGINARY);
                                else if (isInt(b.multiplier)) {
                                    if (even(b.multiplier))
                                        c = new Symbol(1);
                                    else
                                        c = new Symbol(-1);
                                }
                                else if (!even(b.multiplier.den)) {
                                    c = new Symbol(Math.pow(sign, b.multiplier.num));
                                }
                                else {
                                    c = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());
                                }
                            }

                            result = new Symbol(Math.pow(a.multiplier.toDecimal(), b.multiplier.toDecimal()));

                            //result = new Symbol(Math2.bigpow(a.multiplier, b.multiplier));
                            //put the back sign
                            if (c)
                                result = _.multiply(result, c);
                    }
                    else if (bIsInt && !m.equals(1)) {
                        var abs_b = b.abs();
                        // Provide fall back to JS until big number implementation is improved
                        if(abs_b.gt(Settings.MAX_EXP)) {
                            if(b.sign() < 0)
                                return new Symbol(0);
                            return Symbol.infinity();
                        }
                        else {
                            var p = b.multiplier.toDecimal();
                            var sgn = Math.sign(p);
                            p = Math.abs(p);
                            var multiplier = new Frac(1);
                            multiplier.num = m.num.pow(p);
                            multiplier.den = m.den.pow(p);
                            if (sgn < 0)
                                multiplier.invert();
                            //multiplying is justified since after mulltiplyPower if it was of group P it will now be of group N
                            result.multiplier = result.multiplier.multiply(multiplier);
                        }
                    }
                    else {
                        var sign = a.sign();
                        if (b.isConstant() && a.isConstant() && !b.multiplier.den.equals(1) && sign < 0) {
                            //we know the sign is negative so if the denominator for b == 2 then it's i
                            if (b.multiplier.den.equals(2)) {
                                var i = new Symbol(Settings.IMAGINARY);
                                a.negate();//remove the sign
                                //if the power is negative then i is negative
                                if (b.lessThan(0)) {
                                    i.negate();
                                    b.negate();//remove the sign from the power
                                }
                                //pull the power normally and put back the imaginary
                                result = _.multiply(_.pow(a, b), i);
                            }
                            else {
                                var aa = a.clone();
                                aa.multiplier.negate();
                                result = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());
                                var _a = _.pow(new Symbol(aa.multiplier.num), b.clone());
                                var _b = _.pow(new Symbol(aa.multiplier.den), b.clone());
                                var r = _.divide(_a, _b);
                                result = _.multiply(result, r);
                            }
                        }
                        else if (Settings.PARSE2NUMBER && b.isImaginary()) {
                            //4^(i + 2) = e^(- (2 - 4 i) π n + (2 + i) log(4))
                            var re, im, aa, a1, b1, c1;
                            aa = a.clone().toLinear();
                            re = b.realpart();
                            im = b.imagpart();
                            a1 = _.pow(aa.clone(), re);
                            b1 = trig.cos(_.multiply(im.clone(), log(aa.clone())));
                            c1 = _.multiply(trig.sin(_.multiply(im, log(aa))), Symbol.imaginary());
                            result = _.multiply(a1, _.add(b1, c1));
                            result = _.expand(_.parse(result));
                        }
                        else {
                            //b is a symbol
                            var neg_num = a.group === N && sign < 0,
                                    num = testSQRT(new Symbol(neg_num ? m.num : Math.abs(m.num)).setPower(b.clone())),
                                    den = testSQRT(new Symbol(m.den).setPower(b.clone()).invert());

                            //eliminate imaginary if possible
                            if (a.imaginary) {
                                if (bIsInt) {
                                    var s, p, n;
                                    s = Math.sign(b);
                                    p = abs(b);
                                    n = p % 4;
                                    result = new Symbol(even(n) ? -1 : Settings.IMAGINARY);
                                    if (n === 0 || s < 0 && (n === 1) || s > 0 && (n === 3)) {
                                        result.negate();
                                    }
                                }
                                else {
                                    //assume i = sqrt(-1) -> (-1)^(1/2)
                                    var nr = b.multiplier.multiply(Frac.quick(1, 2)),
                                            //the denominator denotes the power so raise to it. It will turn positive it round
                                            tn = Math.pow(-1, nr.num);
                                    result = even(nr.den) ? new Symbol(-1).setPower(nr, true) : new Symbol(tn);
                                }
                            }
                            //ensure that the sign is carried by the symbol and not the multiplier
                            //this enables us to check down the line if the multiplier can indeed be transferred
                            if (sign < 0 && !neg_num)
                                result.negate();

                            //retain the absolute value
                            if (bIsConstant && a.group !== EX) {
                                var evenr = even(b.multiplier.den),
                                        evenp = even(a.power),
                                        n = result.power.toDecimal(),
                                        evennp = even(n);
                                if (evenr && evenp && !evennp) {
                                    if (n === 1)
                                        result = _.symfunction(ABS, [result]);
                                    else if (!isInt(n)) {
                                        var p = result.power;
                                        result = _.symfunction(ABS, [result.toLinear()]).setPower(p);
                                    }
                                    else {
                                        result = _.multiply(_.symfunction(ABS, [result.clone().toLinear()]),
                                                result.clone().setPower(new Frac(n - 1)));
                                    }
                                    //quick workaround. Revisit
                                    if (Settings.POSITIVE_MULTIPLIERS && result.fname === ABS)
                                        result = result.args[0];
                                }
                            }
                            //multiply out sqrt
                            if(b.equals(2) && result.group === CB) {
                                var _result = new Symbol(1);
                                result.each(function(sym) {
                                    _result = _.multiply(_result, _.pow(sym, b));
                                });
                                result = _result;
                            }
                        }
                    }

                    result = testSQRT(result);

                    // Don't multiply until we've tested the remaining symbol
                    if (num && den)
                        result = _.multiply(result, testPow(_.multiply(num, den)));

                    // Reduce square root
                    if (result.fname === SQRT) {
                        var isEX = result.group === EX;
                        var t = isEX ? result.power.multiplier.toString() : result.power.toString();
                        if (even(t)) {
                            var pt = isEX ? _.divide(result.power, new Symbol(2)) : new Symbol(result.power.divide(new Frac(2))),
                                    m = result.multiplier;
                            result = _.pow(result.args[0], pt);
                            result.multiplier = result.multiplier.multiply(m);
                        }
                    }
                    // Detect Euler's identity
                    else if (!Settings.IGNORE_E && result.isE() && result.group === EX && result.power.contains('pi')
                            && result.power.contains(Settings.IMAGINARY)) {
                        var theta = b.stripVar(Settings.IMAGINARY);
                        result = _.add(trig.cos(theta), _.multiply(Symbol.imaginary(), trig.sin(theta)));
                    }

                    return result;
                }
                else {
                    if (isVector(a) && bIsSymbol) {
                        a = a.map(function (x) {
                            return _.pow(x, b.clone());
                        });
                    }
                    else if (isMatrix(a) && bIsSymbol) {
                        var M = new Matrix();
                        a.eachElement(function (x, i, j) {
                            M.set(i, j, _.pow(x, b.clone()));
                        });
                        a = M;
                    }
                    else if(aIsSymbol && isMatrix(b)) {
                        var M = new Matrix();
                        b.eachElement(function (x, i, j) {
                            M.set(i, j, _.pow(a.clone(), x));
                        });
                        a = M;
                    }
                    return a;
                }
            };
            // Gets called when the parser finds the , operator.
            // Commas return a Collector object which is roughly an array
            this.comma = function (a, b) {
                if (!(a instanceof Collection))
                    a = Collection.create(a);
                a.append(b);
                return a;
            };
            // Link to modulus
            this.mod = function (a, b) {
                return mod(a, b);
            };
            // Used to slice elements from arrays
            this.slice = function (a, b) {
                return new Slice(a, b);
            };
            // The equality setter
            this.equals = function (a, b) {
                // Equality can only be set for group S so complain it's not
                if (a.group !== S && !a.isLinear())
                    err('Cannot set equality for ' + a.toString());
                VARS[a.value] = b.clone();
                return b;
            };
            // Percent
            this.percent = function (a) {
                return _.divide(a, new Symbol(100));
            };
            // Set variable
            this.assign = function (a, b) {
                if (a instanceof Collection && b instanceof Collection) {
                    a.elements.map(function (x, i) {
                        return _.assign(x, b.elements[i]);
                    });
                    return Vector.fromArray(b.elements);
                }
                if(a.parent) {
                    // It's referring to the parent instead. The current item can be discarded
                    var e = a.parent;
                    e.elements[e.getter] = b;
                    delete e.getter;
                    return e;
                }

                if (a.group !== S)
                    throw new NerdamerValueError('Cannot complete operation. Incorrect LH value for ' + a);
                VARS[a.value] = b;
                return b;
            };
            this.function_assign = function (a, b) {
                var f = a.elements.pop();
                return setFunction(f, a.elements, b);
            };
            // Function to quickly convert bools to Symbols
            var bool2Symbol = function (x) {
                return new Symbol(x === true ? 1 : 0);
            };
            //check for equality
            this.eq = function (a, b) {
                return bool2Symbol(a.equals(b));
            };
            //checks for greater than
            this.gt = function (a, b) {
                return bool2Symbol(a.gt(b));
            };
            //checks for greater than equal
            this.gte = function (a, b) {
                return bool2Symbol(a.gte(b));
            };
            //checks for less than
            this.lt = function (a, b) {
                return bool2Symbol(a.lt(b));
            };
            //checks for less than equal
            this.lte = function (a, b) {
                return bool2Symbol(a.lte(b));
            };
            // wraps the factorial
            this.factorial = function (a) {
                return this.symfunction(FACTORIAL, [a]);
            };
            // wraps the double factorial
            this.dfactorial = function (a) {
                return this.symfunction(DOUBLEFACTORIAL, [a]);
            };
        }

        /* "STATIC" */
        // converts a number to a fraction.
        var Fraction = {
            /**
             * Converts a decimal to a fraction
             * @param {number} value
             * @param {object} opts
             * @returns {Array} - an array containing the denominator and the numerator
             */
            convert: function (value, opts) {
                var frac;
                if (value === 0) {
                    frac = [0, 1];
                }
                else {
                    if (value < 1e-6 || value > 1e20) {
                        var qc = this.quickConversion(Number(value));
                        if (qc[1] <= 1e20) {
                            var abs = Math.abs(value);
                            var sign = value / abs;
                            frac = this.fullConversion(abs.toFixed((qc[1] + '').length - 1));
                            frac[0] = frac[0] * sign;
                        }
                        else {
                            frac = qc;
                        }
                    }
                    else {
                        frac = this.fullConversion(value);
                    }
                }
                return frac;
            },
            /**
             * If the fraction is too small or too large this gets called instead of fullConversion method
             * @param {number} dec
             * @returns {Array} - an array containing the denominator and the numerator
             */
            quickConversion: function (dec) {
                var x = (dec.toExponential() + '').split('e');
                var d = x[0].split('.')[1];// get the number of places after the decimal
                var l = (d ? d.length : 0)-parseInt(x[1]); // maybe the coefficient is an integer;
                // call Math.round to avoid rounding error
                return [Math.round(Math.pow(10, l) * x[0]), Math.pow(10, Math.abs(x[1]) + l)];
            },
            /**
             * Returns a good approximation of a fraction. This method gets called by convert
             * http://mathforum.org/library/drmath/view/61772.html
             * Decimal To Fraction Conversion - A Simpler Version
             * Dr Peterson
             * @param {number} dec
             * @returns {Array} - an array containing the denominator and the numerator
             */
            fullConversion: function (dec) {
                var done = false;
                // you can adjust the epsilon to a larger number if you don't need very high precision
                var n1 = 0, d1 = 1, n2 = 1, d2 = 0, n = 0, q = dec, epsilon = 1e-16;
                while (!done) {
                    n++;
                    if (n > 10000) {
                        done = true;
                    }
                    var a = Math.floor(q);
                    var num = n1 + a * n2;
                    var den = d1 + a * d2;
                    var e = (q - a);
                    if (e < epsilon) {
                        done = true;
                    }
                    q = 1 / e;
                    n1 = n2;
                    d1 = d2;
                    n2 = num;
                    d2 = den;
                    if (Math.abs(num / den - dec) < epsilon || n > 30) {
                        done = true;
                    }
                }
                return [num, den];
            }
        };
        //Depends on Fraction

        //The latex generator
        var LaTeX = {
            parser: (function () {
                // create a parser and strip it from everything except the items that you need
                var keep = ['classes', 'setOperator', 'getOperators', 'getBrackets', 'tokenize', 'toRPN', 'tree', 'units'];
                var parser = new Parser();
                for (var x in parser) {
                    if (keep.indexOf(x) === -1)
                        delete parser[x];
                }
                // declare the operators
                parser.setOperator({
                    precedence: 8,
                    operator: '\\',
                    action: 'slash',
                    prefix: true,
                    postfix: false,
                    leftAssoc: true,
                    operation: function (e) {
                        return e; // bypass the slash
                    }
                });
                parser.setOperator({
                    precedence: 8,
                    operator: '\\,',
                    action: 'slash_comma',
                    prefix: true,
                    postfix: false,
                    leftAssoc: true,
                    operation: function (e) {
                        return e; // bypass the slash
                    }
                });
                // have braces not map to anything. We want them to be return as-is
                var brackets = parser.getBrackets();
                brackets['{'].maps_to = undefined;
                return parser;
            })(),
            space: '~',
            dot: ' \\cdot ',
            // grab a list of supported functions but remove the excluded ones found in exclFN

            latex: function (symbol, option) {
                // it might be an array
                if (symbol.clone) {
                    symbol = symbol.clone(); // leave original as-is
                }
                if (symbol instanceof _.classes.Collection)
                    symbol = symbol.elements;

                if (isArray(symbol)) {
                    var LaTeXArray = [];
                    for (var i = 0; i < symbol.length; i++) {
                        var sym = symbol[i];
                        //This way I can generate LaTeX on an array of strings.
                        if (!isSymbol(sym))
                            sym = _.parse(sym);
                        LaTeXArray.push(this.latex(sym, option));
                    }
                    return this.brackets(LaTeXArray.join(', '), 'square');
                }

                else if (isMatrix(symbol)) {
                    var TeX = '\\begin{pmatrix}\n';
                    for (var i = 0; i < symbol.elements.length; i++) {
                        var rowTeX = [],
                                e = symbol.elements[i];
                        for (var j = 0; j < e.length; j++) {
                            rowTeX.push(this.latex(e[j], option));
                        }
                        TeX += rowTeX.join(' & ');
                        if (i < symbol.elements.length - 1) {
                            TeX += '\\\\\n';
                        }
                    }
                    TeX += '\\end{pmatrix}';
                    return TeX;
                }

                else if (isVector(symbol)) {
                    var TeX = '\\left[';
                    for (var i = 0; i < symbol.elements.length; i++) {
                        TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\,' : '');
                    }
                    TeX += '\\right]';
                    return TeX;
                }

                else if(isSet(symbol)) {
                    var TeX = '\\{';
                    for (var i = 0; i < symbol.elements.length; i++) {
                        TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\,' : '');
                    }
                    TeX += '\\}';
                    return TeX;
                }

                symbol = symbol.clone();
                var decimal = (option === 'decimal' || option === 'decimals'),
                        power = symbol.power,
                        invert = isNegative(power),
                        negative = symbol.multiplier.lessThan(0);

                if (symbol.group === P && decimal) {
                    return String(symbol.multiplier.toDecimal() * Math.pow(symbol.value, symbol.power.toDecimal()));
                }
                else {
                    symbol.multiplier = symbol.multiplier.abs();

                    // if the user wants the result in decimal format then return it as such by placing it at the top part
                    var m_array;

                    if (decimal) {
                        var m = String(symbol.multiplier.toDecimal());
                        // if(String(m) === '1' && !decimal) m = '';
                        m_array = [m, ''];
                    }
                    else {
                        m_array = [symbol.multiplier.num, symbol.multiplier.den];
                    }
                    // get the value as a two part array
                    var v_array = this.value(symbol, invert, option, negative),
                            p;
                    // make it all positive since we know whether to push the power to the numerator or denominator already.
                    if (invert)
                        power.negate();
                    // the power is simple since it requires no additional formatting. We can get it to a
                    // string right away. pass in true to neglect unit powers
                    if (decimal) {
                        p = isSymbol(power) ? LaTeX.latex(power, option) : String(power.toDecimal());
                        if (String(p) === '1')
                            p = '';
                    }
                    // get the latex representation
                    else if (isSymbol(power))
                        p = this.latex(power, option);
                    // get it as a fraction
                    else
                        p = this.formatFrac(power, true);
                    // use this array to specify if the power is getting attached to the top or the bottom
                    var p_array = ['', ''],
                            // stick it to the top or the bottom. If it's negative then the power gets placed on the bottom
                            index = invert ? 1 : 0;
                    p_array[index] = p;

                    // special case group P and decimal
                    var retval = (negative ? '-' : '') + this.set(m_array, v_array, p_array, symbol.group === CB);

                    return retval.replace(/\+\-/gi, '-');
                }

            },
            // greek mapping
            greek: {
                alpha: '\\alpha',
                beta: '\\beta',
                gamma: '\\gamma',
                delta: '\\delta',
                epsilon: '\\epsilon',
                zeta: '\\zeta',
                eta: '\\eta',
                theta: '\\theta',
                iota: '\\iota',
                kappa: '\\kappa',
                lambda: '\\lambda',
                mu: '\\mu',
                nu: '\\nu',
                xi: '\\xi',
                omnikron: '\\omnikron',
                pi: '\\pi',
                rho: '\\rho',
                sigma: '\\sigma',
                tau: '\\tau',
                upsilon: '\\upsilon',
                phi: '\\phi',
                chi: '\\chi',
                psi: '\\psi',
                omega: '\\omega',
                Gamma: '\\Gamma',
                Delta: '\\Delta',
                Epsilon: '\\Epsilon',
                Theta: '\\Theta',
                Lambda: '\\Lambda',
                Xi: '\\Xi',
                Pi: '\\Pi',
                Sigma: '\\Sigma',
                Phi: '\\Phi',
                Psi: '\\Psi',
                Omega: '\\Omega'
            },
            symbols: {
                arccos: '\\arccos',
                cos: '\\cos',
                csc: '\\csc',
                exp: '\\exp',
                ker: '\\ker',
                limsup: '\\limsup',
                min: '\\min',
                sinh: '\\sinh',
                arcsin: '\\arcsin',
                cosh: '\\cosh',
                deg: '\\deg',
                gcd: '\\gcd',
                lg: '\\lg',
                ln: '\\ln',
                Pr: '\\Pr',
                sqrt: '\\sqrt',
                sup: '\\sup',
                arctan: '\\arctan',
                cot: '\\cot',
                det: '\\det',
                hom: '\\hom',
                lim: '\\lim',
                log: '\\log',
                LN:  '\\LN',
                sec: '\\sec',
                tan: '\\tan',
                arg: '\\arg',
                coth: '\\coth',
                dim: '\\dim',
                inf: '\\inf',
                liminf: '\\liminf',
                max: '\\max',
                sin: '\\sin',
                tanh: '\\tanh'
            },
            // get the raw value of the symbol as an array
            value: function (symbol, inverted, option, negative) {
                var group = symbol.group,
                        previousGroup = symbol.previousGroup,
                        v = ['', ''],
                        index = inverted ? 1 : 0;
                /*if(group === N) // do nothing since we want to return top & bottom blank; */
                if (symbol.isInfinity) {
                    v[index] = '\\infty';
                }
                else if (group === S || group === P || previousGroup === S || previousGroup === P || previousGroup === N) {
                    var value = symbol.value;
                    if (value.replace)
                        value = value.replace(/(.+)_$/, '$1\\_');
                    // split it so we can check for instances of alpha as well as alpha_b
                    var t_varray = String(value).split('_');
                    var greek = this.greek[t_varray[0]];
                    if (greek) {
                        t_varray[0] = greek;
                        value = t_varray.join('_');
                    }
                    var symbol = this.symbols[t_varray[0]];
                    if (symbol) {
                        t_varray[0] = symbol;
                        value = t_varray.join('_');
                    }
                    v[index] = value;
                }
                else if (group === FN || previousGroup === FN) {
                    var name,
                            input = [],
                            fname = symbol.fname;
                    // collect the arguments
                    for (var i = 0; i < symbol.args.length; i++) {
                        var arg = symbol.args[i], item;
                        if (typeof arg === 'string')
                            item = arg;
                        else {
                            item = this.latex(arg, option);
                        }
                        input.push(item);
                    }

                    if (fname === SQRT) {
                        v[index] = '\\sqrt' + this.braces(input.join(','));
                    }
                    else if (fname === ABS) {
                        v[index] = this.brackets(input.join(','), 'abs');
                    }
                    else if (fname === PARENTHESIS) {
                        v[index] = this.brackets(input.join(','), 'parens');
                    }
                    else if (fname === 'limit') {
                        v[index] = ' \\lim\\limits_{' + input[1] + ' \\to ' + input[2] + '} ' + input[0];
                    }
                    else if (fname === 'integrate') {
                        v[index] = '\\int' + this.braces(input[0]) + this.braces('d' + input[1]);
                    }
                    else if (fname === 'defint') {
                        v[index] = '\\int\\limits_' + this.braces(input[1]) + '^' + this.braces(input[2]) + ' ' + input[0] + ' d' + input[3];
                    }
                    else if (fname === FACTORIAL || fname === DOUBLEFACTORIAL) {
                        var arg = symbol.args[0];
                        if (arg.power.equals(1) && (arg.isComposite() || arg.isCombination())) {
                            input[0] = this.brackets(input[0]);
                        }
                        v[index] = input[0] + (fname === FACTORIAL ? '!' : '!!');
                    }
                    else if (fname === 'floor') {
                        v[index] = '\\left \\lfloor' + this.braces(input[0]) + '\\right \\rfloor';
                    }
                    else if (fname === 'ceil') {
                        v[index] = '\\left \\lceil' + this.braces(input[0]) + '\\right \\rceil';
                    }
                    // capture log(a, b)
                    else if (fname === Settings.LOG && input.length > 1) {
                        v[index] = '\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(input[1]) + this.brackets(input[0]);
                    }
                    // capture log(a, b)
                    else if (fname === Settings.LOG10) {
                        v[index] = '\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(10) + this.brackets(input[0]);
                    }
                    else if (fname === 'sum') {
                        var a = input[0],
                                b = input[1],
                                c = input[2],
                                d = input[3];
                        v[index] = '\\sum\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';
                    }
                    else if (fname === 'product') {
                        var a = input[0],
                                b = input[1],
                                c = input[2],
                                d = input[3];
                        v[index] = '\\prod\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';
                    }
                    else if (fname === 'nthroot') {
                        v[index] = '\\sqrt[' + input[1] + ']' + this.braces(input[0]);
                    }
                    else if (fname === 'mod') {
                        v[index] = input[0] + ' \\bmod ' + input[1];
                    }
                    else if (fname === 'realpart') {
                        v[index] = '\\operatorname{Re}' + this.brackets(input[0]);
                    }
                    else if (fname === 'imagpart') {
                        v[index] = '\\operatorname{Im}' + this.brackets(input[0]);
                    }
                    else {
                        var name = fname !== '' ? '\\mathrm' + this.braces(fname.replace(/_/g, '\\_')) : '';
                        if (symbol.isConversion)
                            v[index] = name + this.brackets(input.join(''), 'parens');
                        else
                            v[index] = name + this.brackets(input.join(','), 'parens');
                    }
                }
                else if (symbol.isComposite()) {
                    var collected = symbol.collectSymbols().sort(
                            group === CP || previousGroup === CP ?
                            function (a, b) {
                                return b.group - a.group;
                            } :
                            function (a, b) {
                                var x = isSymbol(a.power) ? -1 : a.power;
                                var y = isSymbol(b.power) ? -1 : b.power;
                                return y - x;
                            }
                    ),
                            symbols = [],
                            l = collected.length;
                    for (var i = 0; i < l; i++) {
                        symbols.push(LaTeX.latex(collected[i], option));
                    }
                    var value = symbols.join('+');

                    v[index] = !(symbol.isLinear() && symbol.multiplier.equals(1)) || negative ? this.brackets(value, 'parens') : value;
                }
                else if (group === CB || previousGroup === EX || previousGroup === CB) {
                    if (group === CB)
                        symbol.distributeExponent();
                    // This almost feels a little like cheating but I need to know if I should be wrapping the symbol
                    // in brackets or not. We'll do this by checking the value of the numerator and then comparing it
                    // to whether the symbol value is "simple" or not.
                    var denominator = [],
                            numerator = [];
                    // Generate a profile
                    var den_map = [], num_map = [], num_c = 0, den_c = 0;
                    var setBrackets = function (container, map, counter) {
                        if (counter > 1 && map.length > 0) {
                            var l = map.length;
                            for (var i = 0; i < l; i++) {
                                var idx = map[i], item = container[idx];
                                if (!(/^\\left\(.+\\right\)\^\{.+\}$/g.test(item) || /^\\left\(.+\\right\)$/g.test(item))) {
                                    container[idx] = LaTeX.brackets(item, 'parens');
                                }
                            }
                        }
                        return container;
                    };

                    // Generate latex for each of them
                    symbol.each(function (x) {
                        var isDenom = isNegative(x.power),
                                laTex;

                        if (isDenom) {
                            laTex = LaTeX.latex(x.invert(), option);
                            den_c++;
                            if (x.isComposite()) {
                                if (symbol.multiplier.den != 1 && Math.abs(x.power) == 1)
                                    laTex = LaTeX.brackets(laTex, 'parens');
                                den_map.push(denominator.length); // make a note of where the composite was found
                            }

                            denominator.push(laTex);
                        }
                        else {
                            laTex = LaTeX.latex(x, option);
                            num_c++;
                            if (x.isComposite()) {
                                if (symbol.multiplier.num != 1 && Math.abs(x.power) == 1)
                                    laTex = LaTeX.brackets(laTex, 'parens');
                                num_map.push(numerator.length);   // make a note of where the composite was found
                            }
                            numerator.push(laTex);
                        }
                    });

                    // Apply brackets
                    setBrackets(numerator, num_map, num_c);
                    v[0] = numerator.join(this.dot); // collapse the numerator into one string

                    setBrackets(denominator, den_map, den_c);
                    v[1] = denominator.join(this.dot);
                }

                return v;
            },
            set: function (m, v, p, combine_power) {
                var isBracketed = function (v) {
                    return /^\\left\(.+\\right\)$/.test(v);
                };
                // format the power if it exists
                if (p)
                    p = this.formatP(p);
                // group CB will have to be wrapped since the power applies to both it's numerator and denominator
                if (combine_power) {
                    // POSSIBLE BUG: If powers for group CB format wrong, investigate this since I might have overlooked something
                    // the assumption is that in every case the denonimator should be empty when dealing with CB. I can't think
                    // of a case where this isn't true
                    var tp = p[0];
                    p[0] = ''; // temporarily make p blank
                }

                // merge v and p. Not that v MUST be first since the order matters
                v = this.merge(v, p);
                var mn = m[0], md = m[1], vn = v[0], vd = v[1];
                // filters
                // if the top has a variable but the numerator is one drop it
                if (vn && Number(mn) === 1)
                    mn = '';
                // if denominator is 1 drop it always
                if (Number(md) === 1)
                    md = '';
                // prepare the top portion but check that it's not already bracketed. If it is then leave out the cdot
                var top = this.join(mn, vn, !isBracketed(vn) ? this.dot : '');

                // prepare the bottom portion but check that it's not already bracketed. If it is then leave out the cdot
                var bottom = this.join(md, vd, !isBracketed(vd) ? this.dot : '');
                // format the power if it exists
                // make it a fraction if both top and bottom exists
                if (top && bottom) {
                    var frac = this.frac(top, bottom);
                    if (combine_power && tp)
                        frac = this.brackets(frac) + tp;
                    return frac;
                }
                // otherwise only the top exists so return that
                else
                    return top;
            },
            merge: function (a, b) {
                var r = [];
                for (var i = 0; i < 2; i++)
                    r[i] = a[i] + b[i];
                return r;
            },
            // joins together two strings if both exist
            join: function (n, d, glue) {
                if (!n && !d)
                    return '';
                if (n && !d)
                    return n;
                if (d && !n)
                    return d;
                return n + glue + d;
            },
            formatP: function (p_array) {
                for (var i = 0; i < 2; i++) {
                    var p = p_array[i];
                    if (p)
                        p_array[i] = '^' + this.braces(p);
                }
                return p_array;
            },
            /**
             * formats the fractions accordingly.
             * @param {Frac} f
             * @param {bool} is_pow
             */
            formatFrac: function (f, is_pow) {
                var n = f.num.toString(),
                        d = f.den.toString();
                // no need to have x^1
                if (is_pow && n === '1' && d === '1')
                    return '';
                // no need to have x/1
                if (d === '1')
                    return n;
                return this.frac(n, d);
            },
            frac: function (n, d) {
                return '\\frac' + this.braces(n) + this.braces(d);
            },
            braces: function (e) {
                return '{' + e + '}';
            },
            brackets: function (e, typ) {
                typ = typ || 'parens';
                var bracketTypes = {
                    parens: ['(', ')'],
                    square: ['[', ']'],
                    brace: ['{', '}'],
                    abs: ['|', '|'],
                    angle: ['\\langle', '\\rangle']
                };
                var bracket = bracketTypes[typ];
                return '\\left' + bracket[0] + e + '\\right' + bracket[1];
            },
            /**
             * Removes extreneous tokens
             * @param {Tokens[]} tokens
             * @returns {Tokens[]}
             */
            filterTokens: function (tokens) {
                var filtered = [];
                // the items that need to be disposed
                var d = ['\\', 'left', 'right', 'big', 'Big', 'large', 'Large'];
                for (var i = 0, l = tokens.length; i < l; i++) {
                    var token = tokens[i];
                    if (isArray(token))
                        filtered.push(LaTeX.filterTokens(token));
                    else if (d.indexOf(token.value) === -1)
                        filtered.push(token);
                }
                return filtered;
            },
            /*
             * Parses tokens from LaTeX string. Does not do any error checking
             * @param {Tokens[]} rpn
             * @returns {String}
             */
            parse: function (raw_tokens) {
                var i, l;
                var retval = '';
                var tokens = this.filterTokens(raw_tokens);
                var replace = {
                    'cdot': '',
                    'times': '',
                    'infty': 'Infinity'
                };
                // get the next token
                var next = function () {
                    return tokens[++i];
                };
                var parse_next = function () {
                    return LaTeX.parse(next());
                };
                var get = function (token) {
                    if (token in replace)
                        return replace[token];
                    return token;
                };

                // start parsing the tokens
                for (i = 0, l = tokens.length; i < l; i++) {
                    var token = tokens[i];
                    // fractions
                    if (token.value === 'frac') {
                        // parse and wrap it in brackets
                        var n = parse_next();
                        var d = parse_next();
                        retval += n + '/' + d;
                    }
                    else if (token.value in LaTeX.symbols) {
                        retval += token.value + parse_next();
                    }
                    else if (token.value === 'int') {
                        var f = parse_next();
                        // skip the comma
                        i++;
                        // get the variable of integration
                        var dx = next().value;
                        dx = get(dx.substring(1, dx.length));
                        retval += 'integrate' + inBrackets(f + ',' + dx);
                    }
                    else if (token.value === 'mathrm') {
                        var f = tokens[++i][0].value;
                        retval += f + parse_next();
                    }
                    // sum and product
                    else if (token.value === 'sum_' || token.value === 'prod_') {
                        var fn = token.value === 'sum_' ? 'sum' : 'product';
                        var nxt = next();
                        i++; // skip the caret
                        var end = parse_next();
                        var f = parse_next();
                        retval += fn + inBrackets([f, get(nxt[0]), get(nxt[2]), get(end)].join(','));
                    }
                    else if (token.value === 'lim_') {
                        var nxt = next();
                        retval += 'limit' + inBrackets([parse_next(), get(nxt[0]), get(nxt[2])].join(','));
                    }
                    else {
                        if(Array.isArray(token)) {
                            retval += get(LaTeX.parse(token));
                        }
                        else
                            retval += get(token.value.toString());
                    }
                }
                return inBrackets(retval);
            }
        };
    //Vector =======================================================================
        function Vector(v) {
            if (isVector(v))
                this.elements = v.items.slice(0);
            else if (isArray(v))
                this.elements = v.slice(0);
            else
                this.elements = [].slice.call(arguments);
        }
        /*
         * Generates a pre-filled array
         * @param {type} n
         * @param {type} val
         * @returns {unresolved}
         */
        Vector.arrayPrefill = function (n, val) {
            var a = [];
            val = val || 0;
            for (var i = 0; i < n; i++)
                a[i] = val;
            return a;
        };
        /**
         * Generate a vector from and array
         * @param {type} a
         * @returns {unresolved}
         */
        Vector.fromArray = function (a) {
            var v = new Vector();
            v.elements = a;
            return v;
        };

        /**
         * Convert a Set to a Vector
         * @param {Set} set
         * @returns {Vector}
         */
        Vector.fromSet = function(set) {
            return Vector.fromArray(set.elements);
        };

        //Ported from Sylvester.js
        Vector.prototype = {
            custom: true,
            // Returns element i of the vector
            e: function (i) {
                return (i < 1 || i > this.elements.length) ? null : this.elements[i - 1];
            },

            set: function (i, val) {
                if (!isSymbol(val))
                    val = new Symbol(val);
                this.elements[i] = val;
            },

            // Returns the number of elements the vector has
            dimensions: function () {
                return this.elements.length;
            },

            // Returns the modulus ('length') of the vector
            modulus: function () {
                return block('SAFE', function () {
                    return _.pow((this.dot(this.clone())), new Symbol(0.5));
                }, undefined, this);
            },

            // Returns true iff the vector is equal to the argument
            eql: function (vector) {
                var n = this.elements.length;
                var V = vector.elements || vector;
                if (n !== V.length) {
                    return false;
                }
                do {
                    if (Math.abs(_.subtract(this.elements[n - 1], V[n - 1]).valueOf()) > PRECISION) {
                        return false;
                    }
                }
                while (--n);
                return true;
            },

            // Returns a clone of the vector
            clone: function () {
                var V = new Vector(),
                        l = this.elements.length;
                for (var i = 0; i < l; i++) {
                    //Rule: all items within the vector must have a clone method.
                    V.elements.push(this.elements[i].clone());
                }
                if (this.getter) {
                    V.getter = this.getter.clone();
                }
                return V;
            },

            // Maps the vector to another vector according to the given function
            map: function (fn) {
                var elements = [];
                this.each(function (x, i) {
                    elements.push(fn(x, i));
                });

                return new Vector(elements);
            },

            // Calls the iterator for each element of the vector in turn
            each: function (fn) {
                var n = this.elements.length, k = n, i;
                do {
                    i = k - n;
                    fn(this.elements[i], i + 1);
                }
                while (--n);
            },

            // Returns a new vector created by normalizing the receiver
            toUnitVector: function () {
                return block('SAFE', function () {
                    var r = this.modulus();
                    if (r.valueOf() === 0) {
                        return this.clone();
                    }
                    return this.map(function (x) {
                        return _.divide(x, r);
                    });
                }, undefined, this);
            },

            // Returns the angle between the vector and the argument (also a vector)
            angleFrom: function (vector) {
                return block('SAFE', function () {
                    var V = vector.elements || vector;
                    var n = this.elements.length;
                    if (n !== V.length) {
                        return null;
                    }
                    var dot = new Symbol(0), mod1 = new Symbol(0), mod2 = new Symbol(0);
                    // Work things out in parallel to save time
                    this.each(function (x, i) {
                        dot = _.add(dot, _.multiply(x, V[i - 1]));
                        mod1 = _.add(mod1, _.multiply(x, x));// will not conflict in safe block
                        mod2 = _.add(mod2, _.multiply(V[i - 1], V[i - 1]));// will not conflict in safe block
                    });
                    mod1 = _.pow(mod1, new Symbol(0.5));
                    mod2 = _.pow(mod2, new Symbol(0.5));
                    var product = _.multiply(mod1, mod2);
                    if (product.valueOf() === 0) {
                        return null;
                    }
                    var theta = _.divide(dot, product);
                    var theta_val = theta.valueOf();
                    if (theta_val < -1) {
                        theta = -1;
                    }
                    if (theta_val > 1) {
                        theta = 1;
                    }
                    return new Symbol(Math.acos(theta));
                }, undefined, this);
            },

            // Returns true iff the vector is parallel to the argument
            isParallelTo: function (vector) {
                var angle = this.angleFrom(vector).valueOf();
                return (angle === null) ? null : (angle <= PRECISION);
            },

            // Returns true iff the vector is antiparallel to the argument
            isAntiparallelTo: function (vector) {
                var angle = this.angleFrom(vector).valueOf();
                return (angle === null) ? null : (Math.abs(angle - Math.PI) <= PRECISION);
            },

            // Returns true iff the vector is perpendicular to the argument
            isPerpendicularTo: function (vector) {
                var dot = this.dot(vector);
                return (dot === null) ? null : (Math.abs(dot) <= PRECISION);
            },

            // Returns the result of adding the argument to the vector
            add: function (vector) {
                return block('SAFE', function () {
                    var V = vector.elements || vector;
                    if (this.elements.length !== V.length) {
                        return null;
                    }
                    return this.map(function (x, i) {
                        return _.add(x, V[i - 1]);
                    });
                }, undefined, this);
            },

            // Returns the result of subtracting the argument from the vector
            subtract: function (vector) {
                return block('SAFE', function () {
                    var V = vector.elements || vector;
                    if (this.elements.length !== V.length) {
                        return null;
                    }
                    return this.map(function (x, i) {
                        return _.subtract(x, V[i - 1]);
                    });
                }, undefined, this);
            },

            // Returns the result of multiplying the elements of the vector by the argument
            multiply: function (k) {
                return this.map(function (x) {
                    return x.clone() * k.clone();
                });
            },

            x: function (k) {
                return this.multiply(k);
            },

            // Returns the scalar product of the vector with the argument
            // Both vectors must have equal dimensionality
            dot: function (vector) {
                return block('SAFE', function () {
                    var V = vector.elements || vector;
                    var product = new Symbol(0), n = this.elements.length;
                    if (n !== V.length) {
                        return null;
                    }
                    do {
                        product = _.add(product, _.multiply(this.elements[n - 1], V[n - 1]));
                    }
                    while (--n);
                    return product;
                }, undefined, this);
            },

            // Returns the vector product of the vector with the argument
            // Both vectors must have dimensionality 3
            cross: function (vector) {
                var B = vector.elements || vector;
                if (this.elements.length !== 3 || B.length !== 3) {
                    return null;
                }
                var A = this.elements;
                return block('SAFE', function () {
                    return new Vector([
                        _.subtract(_.multiply(A[1], B[2]), _.multiply(A[2], B[1])),
                        _.subtract(_.multiply(A[2], B[0]), _.multiply(A[0], B[2])),
                        _.subtract(_.multiply(A[0], B[1]), _.multiply(A[1], B[0]))
                    ]);
                }, undefined, this);
            },

            // Returns the (absolute) largest element of the vector
            max: function () {
                var m = 0, n = this.elements.length, k = n, i;
                do {
                    i = k - n;
                    if (Math.abs(this.elements[i].valueOf()) > Math.abs(m.valueOf())) {
                        m = this.elements[i];
                    }
                }
                while (--n);
                return m;
            },
            magnitude: function() {
                var magnitude = new Symbol(0);
                this.each(function(e) {
                    magnitude = _.add(magnitude, _.pow(e, new Symbol(2)));
                });
                return _.sqrt(magnitude);
            },
            // Returns the index of the first match found
            indexOf: function (x) {
                var index = null, n = this.elements.length, k = n, i;
                do {
                    i = k - n;
                    if (index === null && this.elements[i].valueOf() === x.valueOf()) {
                        index = i + 1;
                    }
                }
                while (--n);
                return index;
            },
            text: function (x) {
                return text(this);
            },
            toString: function () {
                return this.text();
            },
            latex: function (option) {
                var tex = [];
                for (var i = 0; i < this.elements.length; i++) {
                    tex.push(LaTeX.latex.call(LaTeX, this.elements[i], option));
                }
                return '[' + tex.join(', ') + ']';
            }
        };

    //Matrix =======================================================================
        function Matrix() {
            var m = arguments,
                    l = m.length, i, el = [];
            if (isMatrix(m)) { // if it's a matrix then make a clone
                for (i = 0; i < l; i++) {
                    el.push(m[i].slice(0));
                }
            }
            else {
                var row, lw, rl;
                for (i = 0; i < l; i++) {
                    row = m[i];
                    if (isVector(row))
                        row = row.elements;
                    if (!isArray(row))
                        row = [row];
                    rl = row.length;
                    if (lw && lw !== rl)
                        err('Unable to create Matrix. Row dimensions do not match!');
                    el.push(row);
                    lw = rl;
                }
            }
            this.elements = el;
        }
        Matrix.identity = function (n) {
            var m = new Matrix();
            for (var i = 0; i < n; i++) {
                m.elements.push([]);
                for (var j = 0; j < n; j++) {
                    m.set(i, j, i === j ? new Symbol(1) : new Symbol(0));
                }
            }
            return m;
        };
        Matrix.fromArray = function (arr) {
            function F(args) {
                return Matrix.apply(this, args);
            }
            F.prototype = Matrix.prototype;

            return new F(arr);
        };
        Matrix.zeroMatrix = function (rows, cols) {
            var m = new Matrix();
            for (var i = 0; i < rows; i++) {
                m.elements.push(Vector.arrayPrefill(cols, new Symbol(0)));
            }
            return m;
        };
        Matrix.prototype = {
            // needs be true to let the parser know not to try to cast it to a symbol
            custom: true,
            get: function (row, column) {
                if (!this.elements[row])
                    return undefined;
                return this.elements[row][column];
            },
            map: function(f, raw_values) {
                var M = new Matrix();
                this.each(function(e, i, j) {
                    M.set( i, j, f.call(M, e), raw_values);
                });
                return M;
            },
            set: function (row, column, value, raw) {
                if (!this.elements[row])
                    this.elements[row] = [];
                this.elements[row][column] = raw ? value : (isSymbol(value) ? value : new Symbol(value));
            },
            cols: function () {
                return this.elements[0].length;
            },
            rows: function () {
                return this.elements.length;
            },
            row: function (n) {
                if (!n || n > this.cols())
                    return [];
                return this.elements[n - 1];
            },
            col: function (n) {
                var nr = this.rows(),
                        col = [];
                if (n > this.cols() || !n)
                    return col;
                for (var i = 0; i < nr; i++) {
                    col.push(this.elements[i][n - 1]);
                }
                return col;
            },
            eachElement: function (fn) {
                var nr = this.rows(),
                        nc = this.cols(), i, j;
                for (i = 0; i < nr; i++) {
                    for (j = 0; j < nc; j++) {
                        fn.call(this, this.elements[i][j], i, j);
                    }
                }
            },
            // ported from Sylvester.js
            determinant: function () {
                if (!this.isSquare()) {
                    return null;
                }
                var M = this.toRightTriangular();
                var det = M.elements[0][0], n = M.elements.length - 1, k = n, i;
                do {
                    i = k - n + 1;
                    det = _.multiply(det, M.elements[i][i]);
                }
                while (--n);
                return det;
            },
            isSquare: function () {
                return this.elements.length === this.elements[0].length;
            },
            isSingular: function () {
                return this.isSquare() && this.determinant() === 0;
            },
            augment: function (m) {
                var r = this.rows(), rr = m.rows();
                if (r !== rr)
                    err("Cannot augment matrix. Rows don't match.");
                for (var i = 0; i < r; i++) {
                    this.elements[i] = this.elements[i].concat(m.elements[i]);
                }

                return this;
            },
            clone: function () {
                var r = this.rows(), c = this.cols(),
                        m = new Matrix();
                for (var i = 0; i < r; i++) {
                    m.elements[i] = [];
                    for (var j = 0; j < c; j++) {
                        var symbol = this.elements[i][j];
                        m.elements[i][j] = isSymbol(symbol) ? symbol.clone() : symbol;
                    }
                }
                return m;
            },
            // ported from Sylvester.js
            invert: function () {
                if (!this.isSquare())
                    err('Matrix is not square!');
                return block('SAFE', function () {
                    var ni = this.elements.length, ki = ni, i, j;
                    var imatrix = Matrix.identity(ni);
                    var M = this.augment(imatrix).toRightTriangular();
                    var np, kp = M.elements[0].length, p, els, divisor;
                    var inverse_elements = [], new_element;
                    // Matrix is non-singular so there will be no zeros on the diagonal
                    // Cycle through rows from last to first
                    do {
                        i = ni - 1;
                        // First, normalise diagonal elements to 1
                        els = [];
                        np = kp;
                        inverse_elements[i] = [];
                        divisor = M.elements[i][i];
                        do {
                            p = kp - np;
                            new_element = _.divide(M.elements[i][p], divisor.clone());
                            els.push(new_element);
                            // Shuffle of the current row of the right hand side into the results
                            // array as it will not be modified by later runs through this loop
                            if (p >= ki) {
                                inverse_elements[i].push(new_element);
                            }
                        }
                        while (--np);
                        M.elements[i] = els;
                        // Then, subtract this row from those above it to
                        // give the identity matrix on the left hand side
                        for (j = 0; j < i; j++) {
                            els = [];
                            np = kp;
                            do {
                                p = kp - np;
                                els.push(_.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), M.elements[j][i].clone())));
                            }
                            while (--np);
                            M.elements[j] = els;
                        }
                    }
                    while (--ni);
                    return Matrix.fromArray(inverse_elements);
                }, undefined, this);
            },
            // ported from Sylvester.js
            toRightTriangular: function () {
                return block('SAFE', function () {
                    var M = this.clone(), els, fel, nel,
                            n = this.elements.length, k = n, i, np, kp = this.elements[0].length, p;
                    do {
                        i = k - n;
                        fel = M.elements[i][i];
                        if (fel.valueOf() === 0) {
                            for (var j = i + 1; j < k; j++) {
                                nel = M.elements[j][i];
                                if (nel && nel.valueOf() !== 0) {
                                    els = [];
                                    np = kp;
                                    do {
                                        p = kp - np;
                                        els.push(_.add(M.elements[i][p].clone(), M.elements[j][p].clone()));
                                    }
                                    while (--np);
                                    M.elements[i] = els;
                                    break;
                                }
                            }
                        }
                        var fel = M.elements[i][i];
                        if (fel.valueOf() !== 0) {
                            for (j = i + 1; j < k; j++) {
                                var multiplier = _.divide(M.elements[j][i].clone(), M.elements[i][i].clone());
                                els = [];
                                np = kp;
                                do {
                                    p = kp - np;
                                    // Elements with column numbers up to an including the number
                                    // of the row that we're subtracting can safely be set straight to
                                    // zero, since that's the point of this routine and it avoids having
                                    // to loop over and correct rounding errors later
                                    els.push(p <= i ? new Symbol(0) :
                                            _.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), multiplier.clone())));
                                }
                                while (--np);
                                M.elements[j] = els;
                            }
                        }
                    }
                    while (--n);

                    return M;
                }, undefined, this);
            },
            transpose: function () {
                var rows = this.elements.length, cols = this.elements[0].length;
                var M = new Matrix(), ni = cols, i, nj, j;

                do {
                    i = cols - ni;
                    M.elements[i] = [];
                    nj = rows;
                    do {
                        j = rows - nj;
                        M.elements[i][j] = this.elements[j][i].clone();
                    }
                    while (--nj);
                }
                while (--ni);
                return M;
            },
            // Returns true if the matrix can multiply the argument from the left
            canMultiplyFromLeft: function (matrix) {
                var l = isMatrix(matrix) ? matrix.elements.length : matrix.length;
                // this.columns should equal matrix.rows
                return (this.elements[0].length === l);
            },
            sameSize: function (matrix) {
                return this.rows() === matrix.rows() && this.cols() === matrix.cols();
            },
            multiply: function (matrix) {
                return block('SAFE', function () {
                    var M = matrix.elements || matrix;
                    if (!this.canMultiplyFromLeft(M)) {
                        if (this.sameSize(matrix)) {
                            var MM = new Matrix();
                            var rows = this.rows();
                            for (var i = 0; i < rows; i++) {
                                var e = _.multiply(new Vector(this.elements[i]), new Vector(matrix.elements[i]));
                                MM.elements[i] = e.elements;
                            }
                            return MM;
                        }
                        return null;
                    }
                    var ni = this.elements.length, ki = ni, i, nj, kj = M[0].length, j;
                    var cols = this.elements[0].length, elements = [], sum, nc, c;
                    do {
                        i = ki - ni;
                        elements[i] = [];
                        nj = kj;
                        do {
                            j = kj - nj;
                            sum = new Symbol(0);
                            nc = cols;
                            do {
                                c = cols - nc;
                                sum = _.add(sum, _.multiply(this.elements[i][c], M[c][j]));
                            }
                            while (--nc);
                            elements[i][j] = sum;
                        }
                        while (--nj);
                    }
                    while (--ni);
                    return Matrix.fromArray(elements);
                }, undefined, this);
            },
            add: function (matrix, callback) {
                var M = new Matrix();
                if (this.sameSize(matrix)) {
                    this.eachElement(function (e, i, j) {
                        var result = _.add(e.clone(), matrix.elements[i][j].clone());
                        if(callback) {
                            result = callback.call(M, result, e, matrix.elements[i][j]);
                        }
                        M.set(i, j, result);
                    });
                }
                return M;
            },
            subtract: function (matrix, callback) {
                var M = new Matrix();
                if (this.sameSize(matrix)) {
                    this.eachElement(function (e, i, j) {
                        var result = _.subtract(e.clone(), matrix.elements[i][j].clone());
                        if(callback) {
                            result = callback.call(M, result, e, matrix.elements[i][j]);
                        }
                        M.set(i, j, result);
                    });
                }
                return M;
            },
            negate: function () {
                this.each(function (e) {
                    return e.negate();
                });
                return this;
            },
            toVector: function () {
                if (this.rows() === 1 || this.cols() === 1) {
                    var v = new Vector();
                    v.elements = this.elements;
                    return v;
                }
                return this;
            },
            toString: function (newline, to_decimal) {
                var l = this.rows(),
                        s = [];
                for (var i = 0; i < l; i++) {
                    s.push('[' + this.elements[i].map(function (x) {
                        var v = to_decimal ? x.multiplier.toDecimal() : x.toString();
                        return x !== undefined ? v : '';
                    }).join(',') + ']');
                }
                return 'matrix' + inBrackets(s.join(','));
            },
            text: function () {
                return 'matrix(' + this.elements.toString('') + ')';
            },
            latex: function (option) {
                var cols = this.cols(), elements = this.elements;
                return format('\\begin{vmatrix}{0}\\end{vmatrix}', function () {
                    var tex = [];
                    for (var row in elements) {
                        var row_tex = [];
                        for (var i = 0; i < cols; i++) {
                            row_tex.push(LaTeX.latex.call(LaTeX, elements[row][i], option));
                        }
                        tex.push(row_tex.join(' & '));
                    }
                    return tex.join(' \\cr ');
                });
            }
        };
        // aliases
        Matrix.prototype.each = Matrix.prototype.eachElement;


        function Set(set) {
            this.elements = [];
            // if the first object isn't an array, convert it to one.
            if(!isVector(set))
                set = Vector.fromArray(arguments);

            if(set) {
                var elements = set.elements;
                for(var i=0, l=elements.length; i<l; i++) {
                    this.add(elements[i]);
                }
            }
        }

        Set.fromArray = function (arr) {
            function F(args) {
                return Set.apply(this, args);
            }
            F.prototype = Set.prototype;

            return new F(arr);
        };

        Set.prototype = {
            add: function(x) {
                if(!this.contains(x))
                    this.elements.push(x.clone());
            },
            contains: function(x) {
                for(var i=0; i<this.elements.length; i++) {
                    var e = this.elements[i];
                    if(x.equals(e))
                        return true;
                }
                return false;
            },
            each: function(f) {
                var elements = this.elements;
                var set = new Set();
                for(var i=0, l=elements.length; i<l; i++) {
                    var e = elements[i];
                    f.call(this, e, set, i);
                }
                return set;
            },
            clone: function() {
                var set = new Set();
                this.each(function(e) {
                    set.add(e.clone());
                });
                return set;
            },
            union: function(set) {
                var _union = this.clone();
                set.each(function(e) {
                    _union.add(e);
                });

                return _union;
            },
            difference: function(set) {
                var diff = this.clone();
                set.each(function(e) {
                    diff.remove(e);
                });
                return diff;
            },
            remove: function(element) {
                for(var i=0, l=this.elements.length; i<l; i++) {
                    var e = this.elements[i];
                    if(e.equals(element)) {
                        remove(this.elements, i);
                        return true;
                    }
                }
                return false;
            },
            intersection: function(set) {
                var _intersection = new Set();
                var A = this;
                set.each(function(e) {
                    if(A.contains(e)) {
                        _intersection.add(e);
                    }            });

                return _intersection;
            },
            intersects: function(set) {
                return this.intersection(set).elements.length > 0;
            },
            is_subset: function(set) {
                var elements = set.elements;
                for(var i=0, l=elements.length; i<l; i++) {
                    if(!this.contains(elements[i])) {
                        return false;
                    }
                }
                return true;
            },
            toString: function() {
                return '{'+this.elements.join(',')+'}';
            }
        };

    //build ========================================================================
        var Build = {
            dependencies: {
                _rename: {
                    'Math2.factorial': 'factorial'
                },
                factorial: {
                    'Math2.gamma': Math2.gamma
                },
                gamma_incomplete: {
                    'Math2.factorial': Math2.factorial
                },
                Li: {
                    'Math2.Ei': Math2.Ei,
                    'Math2.bigLog': Math2.bigLog,
                    'Frac': Frac
                },
                Ci: {
                    'Math2.factorial': Math2.factorial
                },
                Ei: {
                    'Math2.factorial': Math2.factorial
                },
                Si: {
                    'Math2.factorial': Math2.factorial
                },
                Shi: {
                    'Math2.factorial': Math2.factorial
                },
                Chi: {
                    'isInt': isInt,
                    'nround': nround,
                    'Math2.num_integrate': Math2.num_integrate
                },
                factor: {
                    'Math2.ifactor': Math2.ifactor,
                    'Symbol': Symbol
                },
                num_integrate: {
                    'Math2.simpson': Math2.simpson,
                    'nround': nround
                },
                fib: {
                    'even': even
                }
            },
            /* Some functions need to be made numeric safe. Build checks if there's a
             * reformat option and calls that instead when compiling the function string.
             */
            reformat: {
                // this simply extends the build function
                diff: function(symbol, deps) {
                    var f = 'var f = '+Build.build(symbol.args[0].toString())+';';
                    deps[1] += 'var diff = '+Math2.diff.toString()+';';
                    deps[1] += f;

                    return ['diff(f)('+symbol.args[1].toString()+')', deps];
                }
            },
            getProperName: function(f) {
                var map = {
                    continued_fraction: 'continuedFraction'
                };
                return map[f] || f;
            },
            // assumes that dependences are at max 2 levels
            compileDependencies: function(f, deps) {
                // grab the predefined dependiences
                var dependencies = Build.dependencies[f];

                // the dependency string
                var dep_string = deps && deps[1] ? deps[1] : '';

                // the functions to be replaced
                var replacements = deps && deps[0] ? deps[0] : {};

                // loop through them and add them to the list
                for(var x in dependencies) {
                    if(typeof dependencies[x] === 'object')
                        continue; // skip object
                    var components = x.split('.'); //Math.f becomes f
                    // if the function isn't part of an object then reference the function itself
                    dep_string += 'var '+(components.length > 1 ? components[1] : components[0])+'='+dependencies[x]+';';
                    replacements[x] = components.pop();
                }

                return [replacements, dep_string];
            },
            getArgsDeps: function(symbol, dependencies) {
                var args = symbol.args;
                for(var i=0; i<args.length; i++) {
                    symbol.args[i].each(function(x) {
                        if(x.group === FN)
                            dependencies = Build.compileDependencies(x.fname, dependencies);
                    });
                }
                return dependencies;
            },
            build: function (symbol, arg_array) {
                symbol = block('PARSE2NUMBER', function () {
                    return _.parse(symbol);
                }, true);
                var args = variables(symbol);
                var supplements = [];
                var dependencies = [];
                var ftext = function (symbol, xports) {
                    //Fix for #545 - Parentheses confuse build.
                    if(symbol.fname === '') {
                        symbol = Symbol.unwrapPARENS(symbol);
                    }
                    xports = xports || [];
                    var c = [],
                            group = symbol.group,
                            prefix = '';

                    var ftext_complex = function (group) {
                        var d = group === CB ? '*' : '+',
                                cc = [];

                        for (var x in symbol.symbols) {
                            var sym = symbol.symbols[x],
                                    ft = ftext(sym, xports)[0];
                            // wrap it in brackets if it's group PL or CP
                            if (sym.isComposite())
                                ft = inBrackets(ft);
                            cc.push(ft);
                        }
                        var retval = cc.join(d);
                        retval = retval && !symbol.multiplier.equals(1) ? inBrackets(retval) : retval;
                        return retval;
                    },
                    ftext_function = function (bn) {
                        var retval;
                        if (bn in Math)
                            retval = 'Math.' + bn;
                        else {
                            bn = Build.getProperName(bn);
                            if (supplements.indexOf(bn) === -1) { // make sure you're not adding the function twice
                                //Math2 functions aren't part of the standard javascript
                                //Math library and must be exported.
                                xports.push('var ' + bn + ' = ' + Math2[bn].toString() + '; ');
                                supplements.push(bn);
                            }
                            retval = bn;
                        }
                        retval = retval + inBrackets(symbol.args.map(function (x) {
                            return ftext(x, xports)[0];
                        }).join(','));

                        return retval;
                    };

                    // the multiplier
                    if (group === N)
                        c.push(symbol.multiplier.toDecimal());
                    else if (symbol.multiplier.equals(-1))
                        prefix = '-';
                    else if (!symbol.multiplier.equals(1))
                        c.push(symbol.multiplier.toDecimal());
                    // the value
                    var value;

                    if (group === S || group === P)
                        value = symbol.value;
                    else if (group === FN) {
                        dependencies = Build.compileDependencies(symbol.fname, dependencies);
                        dependencies = Build.getArgsDeps(symbol, dependencies);
                        if(Build.reformat[symbol.fname]) {
                            var components = Build.reformat[symbol.fname](symbol, dependencies);
                            dependencies = components[1];
                            value = components[0];
                        }
                        else {
                            value =  ftext_function(symbol.fname);
                        }

                    }
                    else if (group === EX) {
                        var pg = symbol.previousGroup;
                        if (pg === N || pg === S)
                            value = symbol.value;
                        else if (pg === FN) {
                            value = ftext_function(symbol.fname);
                            dependencies = Build.compileDependencies(symbol.fname, dependencies);
                            dependencies = Build.getArgsDeps(symbol, dependencies);
                        }
                        else
                            value = ftext_complex(symbol.previousGroup);
                    }
                    else {
                        value = ftext_complex(symbol.group);
                    }

                    if (symbol.group !== N && !symbol.power.equals(1)) {
                        var pow = ftext(_.parse(symbol.power));
                        xports.push(pow[1]);
                        value = 'Math.pow' + inBrackets(value + ',' + pow[0]);
                    }

                    if (value)
                        c.push(prefix + value);

                    return [c.join('*'), xports.join('').replace(/\n+\s+/g, ' ')];
                };
                if (arg_array) {
                    for (var i = 0; i < args.length; i++) {
                        var arg = args[i];
                        if (arg_array.indexOf(arg) === -1)
                            err(arg + ' not found in argument array');
                    }
                    args = arg_array;
                }

                var f_array = ftext(symbol);

                // make all the substitutions;
                for(var x in dependencies[0]) {
                    var alias = dependencies[0][x];
                    f_array[1] = f_array[1].replace(x, alias);
                    dependencies[1] = dependencies[1].replace(x, alias);
                }

                var f = new Function(args, (dependencies[1] || '') + f_array[1] + ' return ' + f_array[0] + ';');

                return f;
            }
        };


    //finalize =====================================================================
        /* FINALIZE */
        (function () {
            reserveNames(_.CONSTANTS);
            reserveNames(_.functions);
            _.initConstants();
            //bug fix for error but needs to be revisited
            if (!_.error)
                _.error = err;

            //Store the log and log10 functions
            Settings.LOG_FNS = {
                log: _.functions['log'],
                log10: _.functions['log10']
            };

        })();

        /* END FINALIZE */

    //Core =========================================================================
        var Utils = {
            allSame: allSame,
            allNumeric: allNumeric,
            arguments2Array: arguments2Array,
            arrayAddSlices: arrayAddSlices,
            arrayClone: arrayClone,
            arrayMax: arrayMax,
            arrayMin: arrayMin,
            arrayUnique: arrayUnique,
            arraySum: arraySum,
            block: block,
            build: Build.build,
            clearU: clearU,
            comboSort: comboSort,
            compare: compare,
            convertToVector: convertToVector,
            customError: customError,
            customType: customType,
            decompose_fn: decompose_fn,
            each: each,
            evaluate: evaluate,
            even: even,
            evenFraction: evenFraction,
            fillHoles: fillHoles,
            firstObject: firstObject,
            format: format,
            generatePrimes: generatePrimes,
            getCoeffs: getCoeffs,
            getU: getU,
            importFunctions: importFunctions,
            inBrackets: inBrackets,
            isArray: isArray,
            isExpression: isExpression,
            isFraction: isFraction,
            isInt: isInt,
            isMatrix: isMatrix,
            isNegative: isNegative,
            isNumericSymbol: isNumericSymbol,
            isPrime: isPrime,
            isReserved: isReserved,
            isSymbol: isSymbol,
            isVariableSymbol: isVariableSymbol,
            isVector: isVector,
            keys: keys,
            nroots: nroots,
            remove: remove,
            reserveNames: reserveNames,
            range: range,
            round: nround,
            sameSign: sameSign,
            scientificToDecimal: scientificToDecimal,
            separate: separate,
            stringReplace: stringReplace,
            text: text,
            validateName: validateName,
            variables: variables,
            warn: warn
        };

        //This contains all the parts of nerdamer and enables nerdamer's internal functions
        //to be used.
        var C = {
            groups: Groups,
            Symbol: Symbol,
            Expression: Expression,
            Frac: Frac,
            Vector: Vector,
            Matrix: Matrix,
            Parser: Parser,
            Fraction: Fraction,
            Math2: Math2,
            LaTeX: LaTeX,
            Utils: Utils,
            PARSER: _,
            PARENTHESIS: PARENTHESIS,
            Settings: Settings,
            err: err,
            bigInt: bigInt,
            bigDec: bigDec,
            exceptions: exceptions
        };

    //libExports ===================================================================
        /**
         *
         * @param {String} expression the expression to be evaluated
         * @param {Object} subs the object containing the variable values
         * @param {Integer} location a specific location in the equation list to
         * insert the evaluated expression
         * @param {String} option additional options
         * @returns {Expression}
         */
        var libExports = function (expression, subs, option, location) {
            //is the user declaring a function?
            var fndec = /^([a-z_][a-z\d\_]*)\(([a-z_,\s]*)\):=(.+)$/gi.exec(expression);
            if (fndec)
                return nerdamer.setFunction(fndec[1], fndec[2].split(','), fndec[3]);

            //var variable, fn, args;
            //convert any expression passed in to a string
            if (expression instanceof Expression)
                expression = expression.toString();

            var multi_options = isArray(option),
                    expand = 'expand',
                    numer = multi_options ? option.indexOf('numer') !== -1 : option === 'numer';
            if ((multi_options ? option.indexOf(expand) !== -1 : option === expand)) {
                expression = format('{0}({1})', expand, expression);
            }
            var e = block('PARSE2NUMBER', function () {
                return _.parse(expression, subs);
            }, numer || Settings.PARSE2NUMBER);

            if (location) {
                EXPRESSIONS[location - 1] = e;
            }
            else {
                EXPRESSIONS.push(e);
            }

            /*
             if(variable) libExports.setVar(variable, e);
             if(fn) libExports.setFunction(fn, args, e);
             */

            return new Expression(e);
        };
        /**
         * Converts expression into rpn form
         * @param {String} expression
         * @returns {Token[]}
         */
        libExports.rpn = function (expression) {
            return _.tokenize(_.toRPN(expression));
        };

        /**
         * Generates LaTeX from expression string
         * @param {String} e
         * @param {object} opt
         * @returns {String}
         */
        libExports.convertToLaTeX = function (e, opt) {
            return _.toTeX(e, opt);
        };

        /**
         * Converts latex to text - Very very very basic at the moment
         * @param {String} e
         * @returns {String}
         */
        libExports.convertFromLaTeX = function (e) {
            var txt = LaTeX.parse(_.tokenize(e));
            return new Expression(_.parse(txt));
        };

        /**
         * Get the version of nerdamer or a loaded add-on
         * @param {String} add_on - The add-on being checked
         * @returns {String} returns the version of nerdamer
         */
        libExports.version = function (add_on) {
            if (add_on) {
                try {
                    return C[add_on].version;
                }
                catch (e) {
                    return "No module named " + add_on + " found!";
                }
            }
            return version;
        };

        /**
         * Get nerdamer generated warnings
         * @returns {String[]}
         */
        libExports.getWarnings = function () {
            return WARNINGS;
        };

        /**
         *
         * @param {String} constant The name of the constant to be set
         * @param {mixed} value The value of the constant
         * @returns {Object} Returns the nerdamer object
         */
        libExports.setConstant = function (constant, value) {
            validateName(constant);
            if (!isReserved(constant)) {
                //fix for issue #127
                if (value === 'delete' || value === '') {
                    delete _.CONSTANTS[constant];
                }
                else {
                    if (isNaN(value))
                        throw new NerdamerTypeError('Constant must be a number!');
                    _.CONSTANTS[constant] = value;
                }
            }
            return this;
        };

        /**
         * Returns the value of a previously set constant
         * @param {type} constant
         * @returns {String}
         */
        libExports.getConstant = function (constant) {
            return String(_.constant[constant]);
        };

        /**
         *
         * @param {String} name The name of the function
         * @param {Array} params_array A list containing the parameter name of the functions
         * @param {String} body The body of the function
         * @returns {Boolean} returns true if succeeded and falls on fail
         * @example nerdamer.setFunction('f',['x'], 'x^2+2');
         */
        libExports.setFunction = setFunction;

        /**
         *
         * @returns {C} Exports the nerdamer core functions and objects
         */
        libExports.getCore = function () {
            return C;
        };

        libExports.getExpression = libExports.getEquation = Expression.getExpression;

        /**
         *
         * @param {Boolean} asArray The returned names are returned as an array if this is set to true;
         * @returns {String|Array}
         */
        libExports.reserved = function (asArray) {
            if (asArray) {
                return RESERVED;
            }
            return RESERVED.join(', ');
        };

        /**
         *
         * @param {Integer} equation_number the number of the equation to clear.
         * If 'all' is supplied then all equations are cleared
         * @param {Boolean} keep_EXPRESSIONS_fixed use true if you don't want to keep EXPRESSIONS length fixed
         * @returns {Object} Returns the nerdamer object
         */
        libExports.clear = function (equation_number, keep_EXPRESSIONS_fixed) {
            if (equation_number === 'all') {
                EXPRESSIONS = [];
            }
            else if (equation_number === 'last') {
                EXPRESSIONS.pop();
            }
            else if (equation_number === 'first') {
                EXPRESSIONS.shift();
            }
            else {
                var index = !equation_number ? EXPRESSIONS.length : equation_number - 1;
                keep_EXPRESSIONS_fixed === true ? EXPRESSIONS[index] = undefined : remove(EXPRESSIONS, index);
            }
            return this;
        };

        /**
         * Alias for nerdamer.clear('all')
         */
        libExports.flush = function () {
            this.clear('all');
            return this;
        };

        /**
         *
         * @param {Boolean} asObject
         * @param {Boolean} asLaTeX
         * @param {String|String[]} option
         * @returns {Array}
         */
        libExports.expressions = function (asObject, asLaTeX, option) {
            var result = asObject ? {} : [];
            for (var i = 0; i < EXPRESSIONS.length; i++) {
                var eq = asLaTeX ? LaTeX.latex(EXPRESSIONS[i], option) : text(EXPRESSIONS[i], option);
                asObject ? result[i + 1] = eq : result.push(eq);
            }
            return result;
        };

        //the method for registering modules
        libExports.register = function (obj) {
            var core = this.getCore();

            if (isArray(obj)) {
                for (var i = 0; i < obj.length; i++) {
                    if (obj)
                        this.register(obj[i]);
                }
            }
            else if (obj && Settings.exclude.indexOf(obj.name) === -1) {
                //make sure all the dependencies are available
                if (obj.dependencies) {
                    for (var i = 0; i < obj.dependencies.length; i++)
                        if (!core[obj.dependencies[i]])
                            throw new Error(format('{0} requires {1} to be loaded!', obj.name, obj.dependencies[i]));
                }
                //if no parent object is provided then the function does not have an address and cannot be called directly
                var parent_obj = obj.parent,
                        fn = obj.build.call(core); //call constructor to get function
                if (parent_obj) {
                    if (!core[parent_obj])
                        core[obj.parent] = {};

                    var ref_obj = parent_obj === 'nerdamer' ? this : core[parent_obj];
                    //attach the function to the core
                    ref_obj[obj.name] = fn;
                }
                if (obj.visible)
                    _.functions[obj.name] = [fn, obj.numargs]; //make the function available

            }
        };

        /**
         * @param {String} name variable name
         * @returns {boolean} validates if the profided string is a valid variable name
         */
        libExports.validateName = validateName;

        /**
         * @param {String} varname variable name
         * @returns {boolean} validates if the profided string is a valid variable name
         */
        libExports.validVarName = function (varname) {
            try {
                validateName(varname);
                return RESERVED.indexOf(varname) === -1;
            }
            catch (e) {
                return false;
            }
        };

        /**
         *
         * @returns {Array} Array of functions currently supported by nerdamer
         */
        libExports.supported = function () {
            return keys(_.functions);
        };

        /**
         *
         * @returns {Number} The number equations/expressions currently loaded
         */
        libExports.numEquations = libExports.numExpressions = function () {
            return EXPRESSIONS.length;
        };
        /* END EXPORTS */

        /**
         *
         * @param {String} v variable to be set
         * @param {String} val value of variable. This can be a variable expression or number
         * @returns {Object} Returns the nerdamer object
         */
        libExports.setVar = function (v, val) {
            validateName(v);
            //check if it's not already a constant
            if (v in _.CONSTANTS)
                err('Cannot set value for constant ' + v);
            if (val === 'delete' || val === '')
                delete VARS[v];
            else {
                VARS[v] = isSymbol(val) ? val : _.parse(val);
            }
            return this;
        };

        /**
         * Returns the value of a set variable
         * @param {type} v
         * @returns {varies}
         */
        libExports.getVar = function (v) {
            return VARS[v];
        };
        /**
         * Clear the variables from the VARS object
         * @returns {Object} Returns the nerdamer object
         */
        libExports.clearVars = function () {
            VARS = {};
            return this;
        };

        /**
         *
         * @param {Function} loader
         * @returns {nerdamer}
         */
        libExports.load = function (loader) {
            loader.call(this);
            return this;
        };

        /**
         * @param {String} output - output format. Can be 'object' (just returns the VARS object), 'text' or 'latex'. Default: 'text'
         * @param {String|String[]} option
         * @returns {Object} Returns an object with the variables
         */
        libExports.getVars = function (output, option) {
            output = output || 'text';
            var variables = {};
            if (output === 'object')
                variables = VARS;
            else {
                for (var v in VARS) {
                    if (output === 'latex') {
                        variables[v] = VARS[v].latex(option);
                    }
                    else if (output === 'text') {
                        variables[v] = VARS[v].text(option);
                    }
                }
            }
            return variables;
        };

        /**
         * Set the value of a setting
         * @param {String} setting The setting to be changed
         * @param {boolean} value
         */
        libExports.set = function (setting, value) {
            //current options:
            //PARSE2NUMBER, suppress_errors
            if (typeof setting === 'object')
                for (var x in setting) {
                    libExports.set(x, setting[x]);
                }

            var disallowed = ['SAFE'];
            if (disallowed.indexOf(setting) !== -1)
                err('Cannot modify setting: ' + setting);

            if (setting === 'PRECISION')
                bigDec.set({precision: value});
            else if(setting === 'USE_LN' && value === true) {
                //set log as LN
                Settings.LOG = 'LN';
                //set log10 as log
                Settings.LOG10 = 'log';
                //point the functions in the right direction
                _.functions['log'] = Settings.LOG_FNS.log10; //log is now log10
                //the log10 function must be explicitly set
                _.functions['log'][0] = function(x) {
                    if(x.isConstant())
                        return new Symbol(Math.log10(x));
                    return _.symfunction(Settings.LOG10, [x]);
                };
                _.functions['LN'] = Settings.LOG_FNS.log; //LN is now log

                //remove log10
                delete _.functions['log10'];
            }
            else
                Settings[setting] = value;
        };

        /**
         * Get the value of a setting
         * @param {type} setting
         * @returns {undefined}
         */
        libExports.get = function (setting) {
            return Settings[setting];
        };

        /**
         * This functions makes internal functions available externally
         * @param {bool} override Override the functions when calling api if it exists
         */
        libExports.api = function (override) {
            //Map internal functions to external ones
            var linker = function (fname) {
                return function () {
                    var args = [].slice.call(arguments);
                    for (var i = 0; i < args.length; i++)
                        args[i] = _.parse(args[i]);
                    return new Expression(block('PARSE2NUMBER', function () {
                        return _.callfunction(fname, args);
                    }));
                };
            };
            //perform the mapping
            for (var x in _.functions)
                if (!(x in libExports) || override)
                    libExports[x] = linker(x);
        };

        libExports.replaceFunction = function (name, fn, num_args) {
            var existing = _.functions[name];
            var new_num_args = typeof num_args === 'undefined' ? existing[1] : num_args;
            _.functions[name] = [fn.call(undefined, existing[0], C), new_num_args];
        };

        libExports.setOperator = function (operator, shift) {
            _.setOperator(operator, shift);
        };

        libExports.getOperator = function(operator) {
            return _.getOperator(operator);
        };

        libExports.aliasOperator = function(operator, withOperator) {
            _.aliasOperator(operator, withOperator);
        };

        libExports.tree = function (expression) {
            return _.tree(_.toRPN(_.tokenize(expression)));
        };

        libExports.htmlTree = function (expression, indent) {
            var tree = this.tree(expression);

            return '<div class="tree">\n' +
                    '    <ul>\n' +
                    '        <li>\n' +
                    tree.toHTML(3, indent) + '\n' +
                    '        </li>\n' +
                    '    </ul>\n' +
                    '</div>';
        };

        libExports.addPeeker = function(name, f) {
            if(_.peekers[name])
                _.peekers[name].push(f);
        };

        libExports.removePeeker = function(name, f) {
            remove(_.peekers[name], f);
        };

        libExports.parse = function(e) {
            return String(e).split(';').map(function(x) {
                return _.parse(x);
            });
        };

        libExports.api();

        return libExports; //Done
    //imports ======================================================================
    })({
        //https://github.com/peterolson/BigInteger.js
        bigInt: (function(){
            var bigInt=function(undefined$1){var BASE=1e7,LOG_BASE=7,MAX_INT=9007199254740992,MAX_INT_ARR=smallToArray(MAX_INT),LOG_MAX_INT=Math.log(MAX_INT);function Integer(v,radix){if(typeof v==="undefined")return Integer[0];if(typeof radix!=="undefined")return +radix===10?parseValue(v):parseBase(v,radix);return parseValue(v)}function BigInteger(value,sign){this.value=value;this.sign=sign;this.isSmall=false;}BigInteger.prototype=Object.create(Integer.prototype);function SmallInteger(value){this.value=value;this.sign=value<0;this.isSmall=true;}SmallInteger.prototype=Object.create(Integer.prototype);function isPrecise(n){return -MAX_INT<n&&n<MAX_INT}function smallToArray(n){if(n<1e7)return [n];if(n<1e14)return [n%1e7,Math.floor(n/1e7)];return [n%1e7,Math.floor(n/1e7)%1e7,Math.floor(n/1e14)]}function arrayToSmall(arr){trim(arr);var length=arr.length;if(length<4&&compareAbs(arr,MAX_INT_ARR)<0){switch(length){case 0:return 0;case 1:return arr[0];case 2:return arr[0]+arr[1]*BASE;default:return arr[0]+(arr[1]+arr[2]*BASE)*BASE}}return arr}function trim(v){var i=v.length;while(v[--i]===0);v.length=i+1;}function createArray(length){var x=new Array(length);var i=-1;while(++i<length){x[i]=0;}return x}function truncate(n){if(n>0)return Math.floor(n);return Math.ceil(n)}function add(a,b){var l_a=a.length,l_b=b.length,r=new Array(l_a),carry=0,base=BASE,sum,i;for(i=0;i<l_b;i++){sum=a[i]+b[i]+carry;carry=sum>=base?1:0;r[i]=sum-carry*base;}while(i<l_a){sum=a[i]+carry;carry=sum===base?1:0;r[i++]=sum-carry*base;}if(carry>0)r.push(carry);return r}function addAny(a,b){if(a.length>=b.length)return add(a,b);return add(b,a)}function addSmall(a,carry){var l=a.length,r=new Array(l),base=BASE,sum,i;for(i=0;i<l;i++){sum=a[i]-base+carry;carry=Math.floor(sum/base);r[i]=sum-carry*base;carry+=1;}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base);}return r}BigInteger.prototype.add=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.subtract(n.negate())}var a=this.value,b=n.value;if(n.isSmall){return new BigInteger(addSmall(a,Math.abs(b)),this.sign)}return new BigInteger(addAny(a,b),this.sign)};BigInteger.prototype.plus=BigInteger.prototype.add;SmallInteger.prototype.add=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.subtract(n.negate())}var b=n.value;if(n.isSmall){if(isPrecise(a+b))return new SmallInteger(a+b);b=smallToArray(Math.abs(b));}return new BigInteger(addSmall(b,Math.abs(a)),a<0)};SmallInteger.prototype.plus=SmallInteger.prototype.add;function subtract(a,b){var a_l=a.length,b_l=b.length,r=new Array(a_l),borrow=0,base=BASE,i,difference;for(i=0;i<b_l;i++){difference=a[i]-borrow-b[i];if(difference<0){difference+=base;borrow=1;}else borrow=0;r[i]=difference;}for(i=b_l;i<a_l;i++){difference=a[i]-borrow;if(difference<0)difference+=base;else {r[i++]=difference;break}r[i]=difference;}for(;i<a_l;i++){r[i]=a[i];}trim(r);return r}function subtractAny(a,b,sign){var value;if(compareAbs(a,b)>=0){value=subtract(a,b);}else {value=subtract(b,a);sign=!sign;}value=arrayToSmall(value);if(typeof value==="number"){if(sign)value=-value;return new SmallInteger(value)}return new BigInteger(value,sign)}function subtractSmall(a,b,sign){var l=a.length,r=new Array(l),carry=-b,base=BASE,i,difference;for(i=0;i<l;i++){difference=a[i]+carry;carry=Math.floor(difference/base);difference%=base;r[i]=difference<0?difference+base:difference;}r=arrayToSmall(r);if(typeof r==="number"){if(sign)r=-r;return new SmallInteger(r)}return new BigInteger(r,sign)}BigInteger.prototype.subtract=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.add(n.negate())}var a=this.value,b=n.value;if(n.isSmall)return subtractSmall(a,Math.abs(b),this.sign);return subtractAny(a,b,this.sign)};BigInteger.prototype.minus=BigInteger.prototype.subtract;SmallInteger.prototype.subtract=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.add(n.negate())}var b=n.value;if(n.isSmall){return new SmallInteger(a-b)}return subtractSmall(b,Math.abs(a),a>=0)};SmallInteger.prototype.minus=SmallInteger.prototype.subtract;BigInteger.prototype.negate=function(){return new BigInteger(this.value,!this.sign)};SmallInteger.prototype.negate=function(){var sign=this.sign;var small=new SmallInteger(-this.value);small.sign=!sign;return small};BigInteger.prototype.abs=function(){return new BigInteger(this.value,false)};SmallInteger.prototype.abs=function(){return new SmallInteger(Math.abs(this.value))};function multiplyLong(a,b){var a_l=a.length,b_l=b.length,l=a_l+b_l,r=createArray(l),base=BASE,product,carry,i,a_i,b_j;for(i=0;i<a_l;++i){a_i=a[i];for(var j=0;j<b_l;++j){b_j=b[j];product=a_i*b_j+r[i+j];carry=Math.floor(product/base);r[i+j]=product-carry*base;r[i+j+1]+=carry;}}trim(r);return r}function multiplySmall(a,b){var l=a.length,r=new Array(l),base=BASE,carry=0,product,i;for(i=0;i<l;i++){product=a[i]*b+carry;carry=Math.floor(product/base);r[i]=product-carry*base;}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base);}return r}function shiftLeft(x,n){var r=[];while(n-- >0)r.push(0);return r.concat(x)}function multiplyKaratsuba(x,y){var n=Math.max(x.length,y.length);if(n<=30)return multiplyLong(x,y);n=Math.ceil(n/2);var b=x.slice(n),a=x.slice(0,n),d=y.slice(n),c=y.slice(0,n);var ac=multiplyKaratsuba(a,c),bd=multiplyKaratsuba(b,d),abcd=multiplyKaratsuba(addAny(a,b),addAny(c,d));var product=addAny(addAny(ac,shiftLeft(subtract(subtract(abcd,ac),bd),n)),shiftLeft(bd,2*n));trim(product);return product}function useKaratsuba(l1,l2){return -.012*l1-.012*l2+15e-6*l1*l2>0}BigInteger.prototype.multiply=function(v){var n=parseValue(v),a=this.value,b=n.value,sign=this.sign!==n.sign,abs;if(n.isSmall){if(b===0)return Integer[0];if(b===1)return this;if(b===-1)return this.negate();abs=Math.abs(b);if(abs<BASE){return new BigInteger(multiplySmall(a,abs),sign)}b=smallToArray(abs);}if(useKaratsuba(a.length,b.length))return new BigInteger(multiplyKaratsuba(a,b),sign);return new BigInteger(multiplyLong(a,b),sign)};BigInteger.prototype.times=BigInteger.prototype.multiply;function multiplySmallAndArray(a,b,sign){if(a<BASE){return new BigInteger(multiplySmall(b,a),sign)}return new BigInteger(multiplyLong(b,smallToArray(a)),sign)}SmallInteger.prototype._multiplyBySmall=function(a){if(isPrecise(a.value*this.value)){return new SmallInteger(a.value*this.value)}return multiplySmallAndArray(Math.abs(a.value),smallToArray(Math.abs(this.value)),this.sign!==a.sign)};BigInteger.prototype._multiplyBySmall=function(a){if(a.value===0)return Integer[0];if(a.value===1)return this;if(a.value===-1)return this.negate();return multiplySmallAndArray(Math.abs(a.value),this.value,this.sign!==a.sign)};SmallInteger.prototype.multiply=function(v){return parseValue(v)._multiplyBySmall(this)};SmallInteger.prototype.times=SmallInteger.prototype.multiply;function square(a){var l=a.length,r=createArray(l+l),base=BASE,product,carry,i,a_i,a_j;for(i=0;i<l;i++){a_i=a[i];carry=0-a_i*a_i;for(var j=i;j<l;j++){a_j=a[j];product=2*(a_i*a_j)+r[i+j]+carry;carry=Math.floor(product/base);r[i+j]=product-carry*base;}r[i+l]=carry;}trim(r);return r}BigInteger.prototype.square=function(){return new BigInteger(square(this.value),false)};SmallInteger.prototype.square=function(){var value=this.value*this.value;if(isPrecise(value))return new SmallInteger(value);return new BigInteger(square(smallToArray(Math.abs(this.value))),false)};function divMod1(a,b){var a_l=a.length,b_l=b.length,base=BASE,result=createArray(b.length),divisorMostSignificantDigit=b[b_l-1],lambda=Math.ceil(base/(2*divisorMostSignificantDigit)),remainder=multiplySmall(a,lambda),divisor=multiplySmall(b,lambda),quotientDigit,shift,carry,borrow,i,l,q;if(remainder.length<=a_l)remainder.push(0);divisor.push(0);divisorMostSignificantDigit=divisor[b_l-1];for(shift=a_l-b_l;shift>=0;shift--){quotientDigit=base-1;if(remainder[shift+b_l]!==divisorMostSignificantDigit){quotientDigit=Math.floor((remainder[shift+b_l]*base+remainder[shift+b_l-1])/divisorMostSignificantDigit);}carry=0;borrow=0;l=divisor.length;for(i=0;i<l;i++){carry+=quotientDigit*divisor[i];q=Math.floor(carry/base);borrow+=remainder[shift+i]-(carry-q*base);carry=q;if(borrow<0){remainder[shift+i]=borrow+base;borrow=-1;}else {remainder[shift+i]=borrow;borrow=0;}}while(borrow!==0){quotientDigit-=1;carry=0;for(i=0;i<l;i++){carry+=remainder[shift+i]-base+divisor[i];if(carry<0){remainder[shift+i]=carry+base;carry=0;}else {remainder[shift+i]=carry;carry=1;}}borrow+=carry;}result[shift]=quotientDigit;}remainder=divModSmall(remainder,lambda)[0];return [arrayToSmall(result),arrayToSmall(remainder)]}function divMod2(a,b){var a_l=a.length,b_l=b.length,result=[],part=[],base=BASE,guess,xlen,highx,highy,check;while(a_l){part.unshift(a[--a_l]);trim(part);if(compareAbs(part,b)<0){result.push(0);continue}xlen=part.length;highx=part[xlen-1]*base+part[xlen-2];highy=b[b_l-1]*base+b[b_l-2];if(xlen>b_l){highx=(highx+1)*base;}guess=Math.ceil(highx/highy);do{check=multiplySmall(b,guess);if(compareAbs(check,part)<=0)break;guess--;}while(guess);result.push(guess);part=subtract(part,check);}result.reverse();return [arrayToSmall(result),arrayToSmall(part)]}function divModSmall(value,lambda){var length=value.length,quotient=createArray(length),base=BASE,i,q,remainder,divisor;remainder=0;for(i=length-1;i>=0;--i){divisor=remainder*base+value[i];q=truncate(divisor/lambda);remainder=divisor-q*lambda;quotient[i]=q|0;}return [quotient,remainder|0]}function divModAny(self,v){var value,n=parseValue(v);var a=self.value,b=n.value;var quotient;if(b===0)throw new Error("Cannot divide by zero");if(self.isSmall){if(n.isSmall){return [new SmallInteger(truncate(a/b)),new SmallInteger(a%b)]}return [Integer[0],self]}if(n.isSmall){if(b===1)return [self,Integer[0]];if(b==-1)return [self.negate(),Integer[0]];var abs=Math.abs(b);if(abs<BASE){value=divModSmall(a,abs);quotient=arrayToSmall(value[0]);var remainder=value[1];if(self.sign)remainder=-remainder;if(typeof quotient==="number"){if(self.sign!==n.sign)quotient=-quotient;return [new SmallInteger(quotient),new SmallInteger(remainder)]}return [new BigInteger(quotient,self.sign!==n.sign),new SmallInteger(remainder)]}b=smallToArray(abs);}var comparison=compareAbs(a,b);if(comparison===-1)return [Integer[0],self];if(comparison===0)return [Integer[self.sign===n.sign?1:-1],Integer[0]];if(a.length+b.length<=200)value=divMod1(a,b);else value=divMod2(a,b);quotient=value[0];var qSign=self.sign!==n.sign,mod=value[1],mSign=self.sign;if(typeof quotient==="number"){if(qSign)quotient=-quotient;quotient=new SmallInteger(quotient);}else quotient=new BigInteger(quotient,qSign);if(typeof mod==="number"){if(mSign)mod=-mod;mod=new SmallInteger(mod);}else mod=new BigInteger(mod,mSign);return [quotient,mod]}BigInteger.prototype.divmod=function(v){var result=divModAny(this,v);return {quotient:result[0],remainder:result[1]}};SmallInteger.prototype.divmod=BigInteger.prototype.divmod;BigInteger.prototype.divide=function(v){return divModAny(this,v)[0]};SmallInteger.prototype.over=SmallInteger.prototype.divide=BigInteger.prototype.over=BigInteger.prototype.divide;BigInteger.prototype.mod=function(v){return divModAny(this,v)[1]};SmallInteger.prototype.remainder=SmallInteger.prototype.mod=BigInteger.prototype.remainder=BigInteger.prototype.mod;BigInteger.prototype.pow=function(v){var n=parseValue(v),a=this.value,b=n.value,value,x,y;if(b===0)return Integer[1];if(a===0)return Integer[0];if(a===1)return Integer[1];if(a===-1)return n.isEven()?Integer[1]:Integer[-1];if(n.sign){return Integer[0]}if(!n.isSmall)throw new Error("The exponent "+n.toString()+" is too large.");if(this.isSmall){if(isPrecise(value=Math.pow(a,b)))return new SmallInteger(truncate(value))}x=this;y=Integer[1];while(true){if(b&1===1){y=y.times(x);--b;}if(b===0)break;b/=2;x=x.square();}return y};SmallInteger.prototype.pow=BigInteger.prototype.pow;BigInteger.prototype.modPow=function(exp,mod){exp=parseValue(exp);mod=parseValue(mod);if(mod.isZero())throw new Error("Cannot take modPow with modulus 0");var r=Integer[1],base=this.mod(mod);while(exp.isPositive()){if(base.isZero())return Integer[0];if(exp.isOdd())r=r.multiply(base).mod(mod);exp=exp.divide(2);base=base.square().mod(mod);}return r};SmallInteger.prototype.modPow=BigInteger.prototype.modPow;function compareAbs(a,b){if(a.length!==b.length){return a.length>b.length?1:-1}for(var i=a.length-1;i>=0;i--){if(a[i]!==b[i])return a[i]>b[i]?1:-1}return 0}BigInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall)return 1;return compareAbs(a,b)};SmallInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=Math.abs(this.value),b=n.value;if(n.isSmall){b=Math.abs(b);return a===b?0:a>b?1:-1}return -1};BigInteger.prototype.compare=function(v){if(v===Infinity){return -1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(this.sign!==n.sign){return n.sign?1:-1}if(n.isSmall){return this.sign?-1:1}return compareAbs(a,b)*(this.sign?-1:1)};BigInteger.prototype.compareTo=BigInteger.prototype.compare;SmallInteger.prototype.compare=function(v){if(v===Infinity){return -1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall){return a==b?0:a>b?1:-1}if(a<0!==n.sign){return a<0?-1:1}return a<0?1:-1};SmallInteger.prototype.compareTo=SmallInteger.prototype.compare;BigInteger.prototype.equals=function(v){return this.compare(v)===0};SmallInteger.prototype.eq=SmallInteger.prototype.equals=BigInteger.prototype.eq=BigInteger.prototype.equals;BigInteger.prototype.notEquals=function(v){return this.compare(v)!==0};SmallInteger.prototype.neq=SmallInteger.prototype.notEquals=BigInteger.prototype.neq=BigInteger.prototype.notEquals;BigInteger.prototype.greater=function(v){return this.compare(v)>0};SmallInteger.prototype.gt=SmallInteger.prototype.greater=BigInteger.prototype.gt=BigInteger.prototype.greater;BigInteger.prototype.lesser=function(v){return this.compare(v)<0};SmallInteger.prototype.lt=SmallInteger.prototype.lesser=BigInteger.prototype.lt=BigInteger.prototype.lesser;BigInteger.prototype.greaterOrEquals=function(v){return this.compare(v)>=0};SmallInteger.prototype.geq=SmallInteger.prototype.greaterOrEquals=BigInteger.prototype.geq=BigInteger.prototype.greaterOrEquals;BigInteger.prototype.lesserOrEquals=function(v){return this.compare(v)<=0};SmallInteger.prototype.leq=SmallInteger.prototype.lesserOrEquals=BigInteger.prototype.leq=BigInteger.prototype.lesserOrEquals;BigInteger.prototype.isEven=function(){return (this.value[0]&1)===0};SmallInteger.prototype.isEven=function(){return (this.value&1)===0};BigInteger.prototype.isOdd=function(){return (this.value[0]&1)===1};SmallInteger.prototype.isOdd=function(){return (this.value&1)===1};BigInteger.prototype.isPositive=function(){return !this.sign};SmallInteger.prototype.isPositive=function(){return this.value>0};BigInteger.prototype.isNegative=function(){return this.sign};SmallInteger.prototype.isNegative=function(){return this.value<0};BigInteger.prototype.isUnit=function(){return false};SmallInteger.prototype.isUnit=function(){return Math.abs(this.value)===1};BigInteger.prototype.isZero=function(){return false};SmallInteger.prototype.isZero=function(){return this.value===0};BigInteger.prototype.isDivisibleBy=function(v){var n=parseValue(v);var value=n.value;if(value===0)return false;if(value===1)return true;if(value===2)return this.isEven();return this.mod(n).equals(Integer[0])};SmallInteger.prototype.isDivisibleBy=BigInteger.prototype.isDivisibleBy;function isBasicPrime(v){var n=v.abs();if(n.isUnit())return false;if(n.equals(2)||n.equals(3)||n.equals(5))return true;if(n.isEven()||n.isDivisibleBy(3)||n.isDivisibleBy(5))return false;if(n.lesser(49))return true}function millerRabinTest(n,a){var nPrev=n.prev(),b=nPrev,r=0,d,i,x;while(b.isEven())b=b.divide(2),r++;next:for(i=0;i<a.length;i++){if(n.lesser(a[i]))continue;x=bigInt(a[i]).modPow(b,n);if(x.equals(Integer[1])||x.equals(nPrev))continue;for(d=r-1;d!=0;d--){x=x.square().mod(n);if(x.isUnit())return false;if(x.equals(nPrev))continue next}return false}return true}BigInteger.prototype.isPrime=function(strict){var isPrime=isBasicPrime(this);if(isPrime!==undefined$1)return isPrime;var n=this.abs();var bits=n.bitLength();if(bits<=64)return millerRabinTest(n,[2,325,9375,28178,450775,9780504,1795265022]);var logN=Math.log(2)*bits;var t=Math.ceil(strict===true?2*Math.pow(logN,2):logN);for(var a=[],i=0;i<t;i++){a.push(bigInt(i+2));}return millerRabinTest(n,a)};SmallInteger.prototype.isPrime=BigInteger.prototype.isPrime;BigInteger.prototype.isProbablePrime=function(iterations){var isPrime=isBasicPrime(this);if(isPrime!==undefined$1)return isPrime;var n=this.abs();var t=iterations===undefined$1?5:iterations;for(var a=[],i=0;i<t;i++){a.push(bigInt.randBetween(2,n.minus(2)));}return millerRabinTest(n,a)};SmallInteger.prototype.isProbablePrime=BigInteger.prototype.isProbablePrime;BigInteger.prototype.modInv=function(n){var t=bigInt.zero,newT=bigInt.one,r=parseValue(n),newR=this.abs(),q,lastT,lastR;while(!newR.equals(bigInt.zero)){q=r.divide(newR);lastT=t;lastR=r;t=newT;r=newR;newT=lastT.subtract(q.multiply(newT));newR=lastR.subtract(q.multiply(newR));}if(!r.equals(1))throw new Error(this.toString()+" and "+n.toString()+" are not co-prime");if(t.compare(0)===-1){t=t.add(n);}if(this.isNegative()){return t.negate()}return t};SmallInteger.prototype.modInv=BigInteger.prototype.modInv;BigInteger.prototype.next=function(){var value=this.value;if(this.sign){return subtractSmall(value,1,this.sign)}return new BigInteger(addSmall(value,1),this.sign)};SmallInteger.prototype.next=function(){var value=this.value;if(value+1<MAX_INT)return new SmallInteger(value+1);return new BigInteger(MAX_INT_ARR,false)};BigInteger.prototype.prev=function(){var value=this.value;if(this.sign){return new BigInteger(addSmall(value,1),true)}return subtractSmall(value,1,this.sign)};SmallInteger.prototype.prev=function(){var value=this.value;if(value-1>-MAX_INT)return new SmallInteger(value-1);return new BigInteger(MAX_INT_ARR,true)};var powersOfTwo=[1];while(2*powersOfTwo[powersOfTwo.length-1]<=BASE)powersOfTwo.push(2*powersOfTwo[powersOfTwo.length-1]);var powers2Length=powersOfTwo.length,highestPower2=powersOfTwo[powers2Length-1];function shift_isSmall(n){return (typeof n==="number"||typeof n==="string")&&+Math.abs(n)<=BASE||n instanceof BigInteger&&n.value.length<=1}BigInteger.prototype.shiftLeft=function(n){if(!shift_isSmall(n)){throw new Error(String(n)+" is too large for shifting.")}n=+n;if(n<0)return this.shiftRight(-n);var result=this;if(result.isZero())return result;while(n>=powers2Length){result=result.multiply(highestPower2);n-=powers2Length-1;}return result.multiply(powersOfTwo[n])};SmallInteger.prototype.shiftLeft=BigInteger.prototype.shiftLeft;BigInteger.prototype.shiftRight=function(n){var remQuo;if(!shift_isSmall(n)){throw new Error(String(n)+" is too large for shifting.")}n=+n;if(n<0)return this.shiftLeft(-n);var result=this;while(n>=powers2Length){if(result.isZero()||result.isNegative()&&result.isUnit())return result;remQuo=divModAny(result,highestPower2);result=remQuo[1].isNegative()?remQuo[0].prev():remQuo[0];n-=powers2Length-1;}remQuo=divModAny(result,powersOfTwo[n]);return remQuo[1].isNegative()?remQuo[0].prev():remQuo[0]};SmallInteger.prototype.shiftRight=BigInteger.prototype.shiftRight;function bitwise(x,y,fn){y=parseValue(y);var xSign=x.isNegative(),ySign=y.isNegative();var xRem=xSign?x.not():x,yRem=ySign?y.not():y;var xDigit=0,yDigit=0;var xDivMod=null,yDivMod=null;var result=[];while(!xRem.isZero()||!yRem.isZero()){xDivMod=divModAny(xRem,highestPower2);xDigit=xDivMod[1].toJSNumber();if(xSign){xDigit=highestPower2-1-xDigit;}yDivMod=divModAny(yRem,highestPower2);yDigit=yDivMod[1].toJSNumber();if(ySign){yDigit=highestPower2-1-yDigit;}xRem=xDivMod[0];yRem=yDivMod[0];result.push(fn(xDigit,yDigit));}var sum=fn(xSign?1:0,ySign?1:0)!==0?bigInt(-1):bigInt(0);for(var i=result.length-1;i>=0;i-=1){sum=sum.multiply(highestPower2).add(bigInt(result[i]));}return sum}BigInteger.prototype.not=function(){return this.negate().prev()};SmallInteger.prototype.not=BigInteger.prototype.not;BigInteger.prototype.and=function(n){return bitwise(this,n,function(a,b){return a&b})};SmallInteger.prototype.and=BigInteger.prototype.and;BigInteger.prototype.or=function(n){return bitwise(this,n,function(a,b){return a|b})};SmallInteger.prototype.or=BigInteger.prototype.or;BigInteger.prototype.xor=function(n){return bitwise(this,n,function(a,b){return a^b})};SmallInteger.prototype.xor=BigInteger.prototype.xor;var LOBMASK_I=1<<30,LOBMASK_BI=(BASE&-BASE)*(BASE&-BASE)|LOBMASK_I;function roughLOB(n){var v=n.value,x=typeof v==="number"?v|LOBMASK_I:v[0]+v[1]*BASE|LOBMASK_BI;return x&-x}function integerLogarithm(value,base){if(base.compareTo(value)<=0){var tmp=integerLogarithm(value,base.square(base));var p=tmp.p;var e=tmp.e;var t=p.multiply(base);return t.compareTo(value)<=0?{p:t,e:e*2+1}:{p:p,e:e*2}}return {p:bigInt(1),e:0}}BigInteger.prototype.bitLength=function(){var n=this;if(n.compareTo(bigInt(0))<0){n=n.negate().subtract(bigInt(1));}if(n.compareTo(bigInt(0))===0){return bigInt(0)}return bigInt(integerLogarithm(n,bigInt(2)).e).add(bigInt(1))};SmallInteger.prototype.bitLength=BigInteger.prototype.bitLength;function max(a,b){a=parseValue(a);b=parseValue(b);return a.greater(b)?a:b}function min(a,b){a=parseValue(a);b=parseValue(b);return a.lesser(b)?a:b}function gcd(a,b){a=parseValue(a).abs();b=parseValue(b).abs();if(a.equals(b))return a;if(a.isZero())return b;if(b.isZero())return a;var c=Integer[1],d,t;while(a.isEven()&&b.isEven()){d=Math.min(roughLOB(a),roughLOB(b));a=a.divide(d);b=b.divide(d);c=c.multiply(d);}while(a.isEven()){a=a.divide(roughLOB(a));}do{while(b.isEven()){b=b.divide(roughLOB(b));}if(a.greater(b)){t=b;b=a;a=t;}b=b.subtract(a);}while(!b.isZero());return c.isUnit()?a:a.multiply(c)}function lcm(a,b){a=parseValue(a).abs();b=parseValue(b).abs();return a.divide(gcd(a,b)).multiply(b)}function randBetween(a,b){a=parseValue(a);b=parseValue(b);var low=min(a,b),high=max(a,b);var range=high.subtract(low).add(1);if(range.isSmall)return low.add(Math.floor(Math.random()*range));var length=range.value.length-1;var result=[],restricted=true;for(var i=length;i>=0;i--){var top=restricted?range.value[i]:BASE;var digit=truncate(Math.random()*top);result.unshift(digit);if(digit<top)restricted=false;}result=arrayToSmall(result);return low.add(typeof result==="number"?new SmallInteger(result):new BigInteger(result,false))}var parseBase=function(text,base){var length=text.length;var i;var absBase=Math.abs(base);for(var i=0;i<length;i++){var c=text[i].toLowerCase();if(c==="-")continue;if(/[a-z0-9]/.test(c)){if(/[0-9]/.test(c)&&+c>=absBase){if(c==="1"&&absBase===1)continue;throw new Error(c+" is not a valid digit in base "+base+".")}else if(c.charCodeAt(0)-87>=absBase){throw new Error(c+" is not a valid digit in base "+base+".")}}}if(2<=base&&base<=36){if(length<=LOG_MAX_INT/Math.log(base)){var result=parseInt(text,base);if(isNaN(result)){throw new Error(c+" is not a valid digit in base "+base+".")}return new SmallInteger(parseInt(text,base))}}base=parseValue(base);var digits=[];var isNegative=text[0]==="-";for(i=isNegative?1:0;i<text.length;i++){var c=text[i].toLowerCase(),charCode=c.charCodeAt(0);if(48<=charCode&&charCode<=57)digits.push(parseValue(c));else if(97<=charCode&&charCode<=122)digits.push(parseValue(c.charCodeAt(0)-87));else if(c==="<"){var start=i;do{i++;}while(text[i]!==">");digits.push(parseValue(text.slice(start+1,i)));}else throw new Error(c+" is not a valid character")}return parseBaseFromArray(digits,base,isNegative)};function parseBaseFromArray(digits,base,isNegative){var val=Integer[0],pow=Integer[1],i;for(i=digits.length-1;i>=0;i--){val=val.add(digits[i].times(pow));pow=pow.times(base);}return isNegative?val.negate():val}function stringify(digit){if(digit<=35){return "0123456789abcdefghijklmnopqrstuvwxyz".charAt(digit)}return "<"+digit+">"}function toBase(n,base){base=bigInt(base);if(base.isZero()){if(n.isZero())return {value:[0],isNegative:false};throw new Error("Cannot convert nonzero numbers to base 0.")}if(base.equals(-1)){if(n.isZero())return {value:[0],isNegative:false};if(n.isNegative())return {value:[].concat.apply([],Array.apply(null,Array(-n)).map(Array.prototype.valueOf,[1,0])),isNegative:false};var arr=Array.apply(null,Array(+n-1)).map(Array.prototype.valueOf,[0,1]);arr.unshift([1]);return {value:[].concat.apply([],arr),isNegative:false}}var neg=false;if(n.isNegative()&&base.isPositive()){neg=true;n=n.abs();}if(base.equals(1)){if(n.isZero())return {value:[0],isNegative:false};return {value:Array.apply(null,Array(+n)).map(Number.prototype.valueOf,1),isNegative:neg}}var out=[];var left=n,divmod;while(left.isNegative()||left.compareAbs(base)>=0){divmod=left.divmod(base);left=divmod.quotient;var digit=divmod.remainder;if(digit.isNegative()){digit=base.minus(digit).abs();left=left.next();}out.push(digit.toJSNumber());}out.push(left.toJSNumber());return {value:out.reverse(),isNegative:neg}}function toBaseString(n,base){var arr=toBase(n,base);return (arr.isNegative?"-":"")+arr.value.map(stringify).join("")}BigInteger.prototype.toArray=function(radix){return toBase(this,radix)};SmallInteger.prototype.toArray=function(radix){return toBase(this,radix)};BigInteger.prototype.toString=function(radix){if(radix===undefined$1)radix=10;if(radix!==10)return toBaseString(this,radix);var v=this.value,l=v.length,str=String(v[--l]),zeros="0000000",digit;while(--l>=0){digit=String(v[l]);str+=zeros.slice(digit.length)+digit;}var sign=this.sign?"-":"";return sign+str};SmallInteger.prototype.toString=function(radix){if(radix===undefined$1)radix=10;if(radix!=10)return toBaseString(this,radix);return String(this.value)};BigInteger.prototype.toJSON=SmallInteger.prototype.toJSON=function(){return this.toString()};BigInteger.prototype.valueOf=function(){return parseInt(this.toString(),10)};BigInteger.prototype.toJSNumber=BigInteger.prototype.valueOf;SmallInteger.prototype.valueOf=function(){return this.value};SmallInteger.prototype.toJSNumber=SmallInteger.prototype.valueOf;function parseStringValue(v){if(isPrecise(+v)){var x=+v;if(x===truncate(x))return new SmallInteger(x);throw new Error("Invalid integer: "+v)}var sign=v[0]==="-";if(sign)v=v.slice(1);var split=v.split(/e/i);if(split.length>2)throw new Error("Invalid integer: "+split.join("e"));if(split.length===2){var exp=split[1];if(exp[0]==="+")exp=exp.slice(1);exp=+exp;if(exp!==truncate(exp)||!isPrecise(exp))throw new Error("Invalid integer: "+exp+" is not a valid exponent.");var text=split[0];var decimalPlace=text.indexOf(".");if(decimalPlace>=0){exp-=text.length-decimalPlace-1;text=text.slice(0,decimalPlace)+text.slice(decimalPlace+1);}if(exp<0)throw new Error("Cannot include negative exponent part for integers");text+=new Array(exp+1).join("0");v=text;}var isValid=/^([0-9][0-9]*)$/.test(v);if(!isValid)throw new Error("Invalid integer: "+v);var r=[],max=v.length,l=LOG_BASE,min=max-l;while(max>0){r.push(+v.slice(min,max));min-=l;if(min<0)min=0;max-=l;}trim(r);return new BigInteger(r,sign)}function parseNumberValue(v){if(isPrecise(v)){if(v!==truncate(v))throw new Error(v+" is not an integer.");return new SmallInteger(v)}return parseStringValue(v.toString())}function parseValue(v){if(typeof v==="number"){return parseNumberValue(v)}if(typeof v==="string"){return parseStringValue(v)}return v}for(var i=0;i<1e3;i++){Integer[i]=new SmallInteger(i);if(i>0)Integer[-i]=new SmallInteger(-i);}Integer.one=Integer[1];Integer.zero=Integer[0];Integer.minusOne=Integer[-1];Integer.max=max;Integer.min=min;Integer.gcd=gcd;Integer.lcm=lcm;Integer.isInstance=function(x){return x instanceof BigInteger||x instanceof SmallInteger};Integer.randBetween=randBetween;Integer.fromArray=function(digits,base,isNegative){return parseBaseFromArray(digits.map(parseValue),parseValue(base||10),isNegative)};return Integer}();if(module.hasOwnProperty("exports")){module.exports=bigInt;}        return bigInt;
        })(),
        /* big.js v5.2.2 https://github.com/MikeMcl/big.js/LICENCE */
        bigDec: function(n){var e,i,t,r=9e15,s=1e9,o="0123456789abcdef",u="2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058",c="3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789",f={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-r,maxE:r,crypto:!1},h=!0,a="[DecimalError] ",d=a+"Invalid argument: ",l=a+"Precision limit exceeded",p=a+"crypto unavailable",g=Math.floor,w=Math.pow,m=/^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,v=/^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,N=/^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,b=/^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,E=1e7,x=7,M=u.length-1,y=c.length-1,q={name:"[object Decimal]"};function O(n){var e,i,t,r=n.length-1,s="",o=n[0];if(r>0){for(s+=o,e=1;e<r;e++)t=n[e]+"",(i=x-t.length)&&(s+=S(i)),s+=t;o=n[e],(i=x-(t=o+"").length)&&(s+=S(i));}else if(0===o)return "0";for(;o%10==0;)o/=10;return s+o}function F(n,e,i){if(n!==~~n||n<e||n>i)throw Error(d+n)}function A(n,e,i,t){var r,s,o,u;for(s=n[0];s>=10;s/=10)--e;return --e<0?(e+=x,r=0):(r=Math.ceil((e+1)/x),e%=x),s=w(10,x-e),u=n[r]%s|0,null==t?e<3?(0==e?u=u/100|0:1==e&&(u=u/10|0),o=i<4&&99999==u||i>3&&49999==u||5e4==u||0==u):o=(i<4&&u+1==s||i>3&&u+1==s/2)&&(n[r+1]/s/100|0)==w(10,e-2)-1||(u==s/2||0==u)&&0==(n[r+1]/s/100|0):e<4?(0==e?u=u/1e3|0:1==e?u=u/100|0:2==e&&(u=u/10|0),o=(t||i<4)&&9999==u||!t&&i>3&&4999==u):o=((t||i<4)&&u+1==s||!t&&i>3&&u+1==s/2)&&(n[r+1]/s/1e3|0)==w(10,e-3)-1,o}function D(n,e,i){for(var t,r,s=[0],u=0,c=n.length;u<c;){for(r=s.length;r--;)s[r]*=e;for(s[0]+=o.indexOf(n.charAt(u++)),t=0;t<s.length;t++)s[t]>i-1&&(void 0===s[t+1]&&(s[t+1]=0),s[t+1]+=s[t]/i|0,s[t]%=i);}return s.reverse()}q.absoluteValue=q.abs=function(){var n=new this.constructor(this);return n.s<0&&(n.s=1),P(n)},q.ceil=function(){return P(new this.constructor(this),this.e+1,2)},q.comparedTo=q.cmp=function(n){var e,i,t,r,s=this,o=s.d,u=(n=new s.constructor(n)).d,c=s.s,f=n.s;if(!o||!u)return c&&f?c!==f?c:o===u?0:!o^c<0?1:-1:NaN;if(!o[0]||!u[0])return o[0]?c:u[0]?-f:0;if(c!==f)return c;if(s.e!==n.e)return s.e>n.e^c<0?1:-1;for(e=0,i=(t=o.length)<(r=u.length)?t:r;e<i;++e)if(o[e]!==u[e])return o[e]>u[e]^c<0?1:-1;return t===r?0:t>r^c<0?1:-1},q.cosine=q.cos=function(){var n,e,i=this,r=i.constructor;return i.d?i.d[0]?(n=r.precision,e=r.rounding,r.precision=n+Math.max(i.e,i.sd())+x,r.rounding=1,i=function(n,e){var i,t,r=e.d.length;r<32?(i=Math.ceil(r/3),t=Math.pow(4,-i).toString()):(i=16,t="2.3283064365386962890625e-10");n.precision+=i,e=W(n,1,e.times(t),new n(1));for(var s=i;s--;){var o=e.times(e);e=o.times(o).minus(o).times(8).plus(1);}return n.precision-=i,e}(r,J(r,i)),r.precision=n,r.rounding=e,P(2==t||3==t?i.neg():i,n,e,!0)):new r(1):new r(NaN)},q.cubeRoot=q.cbrt=function(){var n,e,i,t,r,s,o,u,c,f,a=this,d=a.constructor;if(!a.isFinite()||a.isZero())return new d(a);for(h=!1,(s=a.s*Math.pow(a.s*a,1/3))&&Math.abs(s)!=1/0?t=new d(s.toString()):(i=O(a.d),(s=((n=a.e)-i.length+1)%3)&&(i+=1==s||-2==s?"0":"00"),s=Math.pow(i,1/3),n=g((n+1)/3)-(n%3==(n<0?-1:2)),(t=new d(i=s==1/0?"5e"+n:(i=s.toExponential()).slice(0,i.indexOf("e")+1)+n)).s=a.s),o=(n=d.precision)+3;;)if(f=(c=(u=t).times(u).times(u)).plus(a),t=Z(f.plus(a).times(u),f.plus(c),o+2,1),O(u.d).slice(0,o)===(i=O(t.d)).slice(0,o)){if("9999"!=(i=i.slice(o-3,o+1))&&(r||"4999"!=i)){+i&&(+i.slice(1)||"5"!=i.charAt(0))||(P(t,n+1,1),e=!t.times(t).times(t).eq(a));break}if(!r&&(P(u,n+1,0),u.times(u).times(u).eq(a))){t=u;break}o+=4,r=1;}return h=!0,P(t,n,d.rounding,e)},q.decimalPlaces=q.dp=function(){var n,e=this.d,i=NaN;if(e){if(i=((n=e.length-1)-g(this.e/x))*x,n=e[n])for(;n%10==0;n/=10)i--;i<0&&(i=0);}return i},q.dividedBy=q.div=function(n){return Z(this,new this.constructor(n))},q.dividedToIntegerBy=q.divToInt=function(n){var e=this.constructor;return P(Z(this,new e(n),0,1,1),e.precision,e.rounding)},q.equals=q.eq=function(n){return 0===this.cmp(n)},q.floor=function(){return P(new this.constructor(this),this.e+1,3)},q.greaterThan=q.gt=function(n){return this.cmp(n)>0},q.greaterThanOrEqualTo=q.gte=function(n){var e=this.cmp(n);return 1==e||0===e},q.hyperbolicCosine=q.cosh=function(){var n,e,i,t,r,s=this,o=s.constructor,u=new o(1);if(!s.isFinite())return new o(s.s?1/0:NaN);if(s.isZero())return u;i=o.precision,t=o.rounding,o.precision=i+Math.max(s.e,s.sd())+4,o.rounding=1,(r=s.d.length)<32?(n=Math.ceil(r/3),e=Math.pow(4,-n).toString()):(n=16,e="2.3283064365386962890625e-10"),s=W(o,1,s.times(e),new o(1),!0);for(var c,f=n,h=new o(8);f--;)c=s.times(s),s=u.minus(c.times(h.minus(c.times(h))));return P(s,o.precision=i,o.rounding=t,!0)},q.hyperbolicSine=q.sinh=function(){var n,e,i,t,r=this,s=r.constructor;if(!r.isFinite()||r.isZero())return new s(r);if(e=s.precision,i=s.rounding,s.precision=e+Math.max(r.e,r.sd())+4,s.rounding=1,(t=r.d.length)<3)r=W(s,2,r,r,!0);else {n=(n=1.4*Math.sqrt(t))>16?16:0|n,r=W(s,2,r=r.times(Math.pow(5,-n)),r,!0);for(var o,u=new s(5),c=new s(16),f=new s(20);n--;)o=r.times(r),r=r.times(u.plus(o.times(c.times(o).plus(f))));}return s.precision=e,s.rounding=i,P(r,e,i,!0)},q.hyperbolicTangent=q.tanh=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+7,t.rounding=1,Z(i.sinh(),i.cosh(),t.precision=n,t.rounding=e)):new t(i.s)},q.inverseCosine=q.acos=function(){var n,e=this,i=e.constructor,t=e.abs().cmp(1),r=i.precision,s=i.rounding;return -1!==t?0===t?e.isNeg()?_(i,r,s):new i(0):new i(NaN):e.isZero()?_(i,r+4,s).times(.5):(i.precision=r+6,i.rounding=1,e=e.asin(),n=_(i,r+4,s).times(.5),i.precision=r,i.rounding=s,n.minus(e))},q.inverseHyperbolicCosine=q.acosh=function(){var n,e,i=this,t=i.constructor;return i.lte(1)?new t(i.eq(1)?0:NaN):i.isFinite()?(n=t.precision,e=t.rounding,t.precision=n+Math.max(Math.abs(i.e),i.sd())+4,t.rounding=1,h=!1,i=i.times(i).minus(1).sqrt().plus(i),h=!0,t.precision=n,t.rounding=e,i.ln()):new t(i)},q.inverseHyperbolicSine=q.asinh=function(){var n,e,i=this,t=i.constructor;return !i.isFinite()||i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+2*Math.max(Math.abs(i.e),i.sd())+6,t.rounding=1,h=!1,i=i.times(i).plus(1).sqrt().plus(i),h=!0,t.precision=n,t.rounding=e,i.ln())},q.inverseHyperbolicTangent=q.atanh=function(){var n,e,i,t,r=this,s=r.constructor;return r.isFinite()?r.e>=0?new s(r.abs().eq(1)?r.s/0:r.isZero()?r:NaN):(n=s.precision,e=s.rounding,t=r.sd(),Math.max(t,n)<2*-r.e-1?P(new s(r),n,e,!0):(s.precision=i=t-r.e,r=Z(r.plus(1),new s(1).minus(r),i+n,1),s.precision=n+4,s.rounding=1,r=r.ln(),s.precision=n,s.rounding=e,r.times(.5))):new s(NaN)},q.inverseSine=q.asin=function(){var n,e,i,t,r=this,s=r.constructor;return r.isZero()?new s(r):(e=r.abs().cmp(1),i=s.precision,t=s.rounding,-1!==e?0===e?((n=_(s,i+4,t).times(.5)).s=r.s,n):new s(NaN):(s.precision=i+6,s.rounding=1,r=r.div(new s(1).minus(r.times(r)).sqrt().plus(1)).atan(),s.precision=i,s.rounding=t,r.times(2)))},q.inverseTangent=q.atan=function(){var n,e,i,t,r,s,o,u,c,f=this,a=f.constructor,d=a.precision,l=a.rounding;if(f.isFinite()){if(f.isZero())return new a(f);if(f.abs().eq(1)&&d+4<=y)return (o=_(a,d+4,l).times(.25)).s=f.s,o}else {if(!f.s)return new a(NaN);if(d+4<=y)return (o=_(a,d+4,l).times(.5)).s=f.s,o}for(a.precision=u=d+10,a.rounding=1,n=i=Math.min(28,u/x+2|0);n;--n)f=f.div(f.times(f).plus(1).sqrt().plus(1));for(h=!1,e=Math.ceil(u/x),t=1,c=f.times(f),o=new a(f),r=f;-1!==n;)if(r=r.times(c),s=o.minus(r.div(t+=2)),r=r.times(c),void 0!==(o=s.plus(r.div(t+=2))).d[e])for(n=e;o.d[n]===s.d[n]&&n--;);return i&&(o=o.times(2<<i-1)),h=!0,P(o,a.precision=d,a.rounding=l,!0)},q.isFinite=function(){return !!this.d},q.isInteger=q.isInt=function(){return !!this.d&&g(this.e/x)>this.d.length-2},q.isNaN=function(){return !this.s},q.isNegative=q.isNeg=function(){return this.s<0},q.isPositive=q.isPos=function(){return this.s>0},q.isZero=function(){return !!this.d&&0===this.d[0]},q.lessThan=q.lt=function(n){return this.cmp(n)<0},q.lessThanOrEqualTo=q.lte=function(n){return this.cmp(n)<1},q.logarithm=q.log=function(n){var e,i,t,r,s,o,u,c,f=this.constructor,a=f.precision,d=f.rounding;if(null==n)n=new f(10),e=!0;else {if(i=(n=new f(n)).d,n.s<0||!i||!i[0]||n.eq(1))return new f(NaN);e=n.eq(10);}if(i=this.d,this.s<0||!i||!i[0]||this.eq(1))return new f(i&&!i[0]?-1/0:1!=this.s?NaN:i?0:1/0);if(e)if(i.length>1)s=!0;else {for(r=i[0];r%10==0;)r/=10;s=1!==r;}if(h=!1,o=B(this,u=a+5),t=e?U(f,u+10):B(n,u),A((c=Z(o,t,u,1)).d,r=a,d))do{if(o=B(this,u+=10),t=e?U(f,u+10):B(n,u),c=Z(o,t,u,1),!s){+O(c.d).slice(r+1,r+15)+1==1e14&&(c=P(c,a+1,0));break}}while(A(c.d,r+=10,d));return h=!0,P(c,a,d)},q.minus=q.sub=function(n){var e,i,t,r,s,o,u,c,f,a,d,l,p=this,w=p.constructor;if(n=new w(n),!p.d||!n.d)return p.s&&n.s?p.d?n.s=-n.s:n=new w(n.d||p.s!==n.s?p:NaN):n=new w(NaN),n;if(p.s!=n.s)return n.s=-n.s,p.plus(n);if(f=p.d,l=n.d,u=w.precision,c=w.rounding,!f[0]||!l[0]){if(l[0])n.s=-n.s;else {if(!f[0])return new w(3===c?-0:0);n=new w(p);}return h?P(n,u,c):n}if(i=g(n.e/x),a=g(p.e/x),f=f.slice(),s=a-i){for((d=s<0)?(e=f,s=-s,o=l.length):(e=l,i=a,o=f.length),s>(t=Math.max(Math.ceil(u/x),o)+2)&&(s=t,e.length=1),e.reverse(),t=s;t--;)e.push(0);e.reverse();}else {for((d=(t=f.length)<(o=l.length))&&(o=t),t=0;t<o;t++)if(f[t]!=l[t]){d=f[t]<l[t];break}s=0;}for(d&&(e=f,f=l,l=e,n.s=-n.s),o=f.length,t=l.length-o;t>0;--t)f[o++]=0;for(t=l.length;t>s;){if(f[--t]<l[t]){for(r=t;r&&0===f[--r];)f[r]=E-1;--f[r],f[t]+=E;}f[t]-=l[t];}for(;0===f[--o];)f.pop();for(;0===f[0];f.shift())--i;return f[0]?(n.d=f,n.e=L(f,i),h?P(n,u,c):n):new w(3===c?-0:0)},q.modulo=q.mod=function(n){var e,i=this,t=i.constructor;return n=new t(n),!i.d||!n.s||n.d&&!n.d[0]?new t(NaN):!n.d||i.d&&!i.d[0]?P(new t(i),t.precision,t.rounding):(h=!1,9==t.modulo?(e=Z(i,n.abs(),0,3,1)).s*=n.s:e=Z(i,n,0,t.modulo,1),e=e.times(n),h=!0,i.minus(e))},q.naturalExponential=q.exp=function(){return H(this)},q.naturalLogarithm=q.ln=function(){return B(this)},q.negated=q.neg=function(){var n=new this.constructor(this);return n.s=-n.s,P(n)},q.plus=q.add=function(n){var e,i,t,r,s,o,u,c,f,a,d=this,l=d.constructor;if(n=new l(n),!d.d||!n.d)return d.s&&n.s?d.d||(n=new l(n.d||d.s===n.s?d:NaN)):n=new l(NaN),n;if(d.s!=n.s)return n.s=-n.s,d.minus(n);if(f=d.d,a=n.d,u=l.precision,c=l.rounding,!f[0]||!a[0])return a[0]||(n=new l(d)),h?P(n,u,c):n;if(s=g(d.e/x),t=g(n.e/x),f=f.slice(),r=s-t){for(r<0?(i=f,r=-r,o=a.length):(i=a,t=s,o=f.length),r>(o=(s=Math.ceil(u/x))>o?s+1:o+1)&&(r=o,i.length=1),i.reverse();r--;)i.push(0);i.reverse();}for((o=f.length)-(r=a.length)<0&&(r=o,i=a,a=f,f=i),e=0;r;)e=(f[--r]=f[r]+a[r]+e)/E|0,f[r]%=E;for(e&&(f.unshift(e),++t),o=f.length;0==f[--o];)f.pop();return n.d=f,n.e=L(f,t),h?P(n,u,c):n},q.precision=q.sd=function(n){var e,i=this;if(void 0!==n&&n!==!!n&&1!==n&&0!==n)throw Error(d+n);return i.d?(e=k(i.d),n&&i.e+1>e&&(e=i.e+1)):e=NaN,e},q.round=function(){var n=this,e=n.constructor;return P(new e(n),n.e+1,e.rounding)},q.sine=q.sin=function(){var n,e,i=this,r=i.constructor;return i.isFinite()?i.isZero()?new r(i):(n=r.precision,e=r.rounding,r.precision=n+Math.max(i.e,i.sd())+x,r.rounding=1,i=function(n,e){var i,t=e.d.length;if(t<3)return W(n,2,e,e);i=(i=1.4*Math.sqrt(t))>16?16:0|i,e=e.times(Math.pow(5,-i)),e=W(n,2,e,e);for(var r,s=new n(5),o=new n(16),u=new n(20);i--;)r=e.times(e),e=e.times(s.plus(r.times(o.times(r).minus(u))));return e}(r,J(r,i)),r.precision=n,r.rounding=e,P(t>2?i.neg():i,n,e,!0)):new r(NaN)},q.squareRoot=q.sqrt=function(){var n,e,i,t,r,s,o=this,u=o.d,c=o.e,f=o.s,a=o.constructor;if(1!==f||!u||!u[0])return new a(!f||f<0&&(!u||u[0])?NaN:u?o:1/0);for(h=!1,0==(f=Math.sqrt(+o))||f==1/0?(((e=O(u)).length+c)%2==0&&(e+="0"),f=Math.sqrt(e),c=g((c+1)/2)-(c<0||c%2),t=new a(e=f==1/0?"1e"+c:(e=f.toExponential()).slice(0,e.indexOf("e")+1)+c)):t=new a(f.toString()),i=(c=a.precision)+3;;)if(t=(s=t).plus(Z(o,s,i+2,1)).times(.5),O(s.d).slice(0,i)===(e=O(t.d)).slice(0,i)){if("9999"!=(e=e.slice(i-3,i+1))&&(r||"4999"!=e)){+e&&(+e.slice(1)||"5"!=e.charAt(0))||(P(t,c+1,1),n=!t.times(t).eq(o));break}if(!r&&(P(s,c+1,0),s.times(s).eq(o))){t=s;break}i+=4,r=1;}return h=!0,P(t,c,a.rounding,n)},q.tangent=q.tan=function(){var n,e,i=this,r=i.constructor;return i.isFinite()?i.isZero()?new r(i):(n=r.precision,e=r.rounding,r.precision=n+10,r.rounding=1,(i=i.sin()).s=1,i=Z(i,new r(1).minus(i.times(i)).sqrt(),n+10,0),r.precision=n,r.rounding=e,P(2==t||4==t?i.neg():i,n,e,!0)):new r(NaN)},q.times=q.mul=function(n){var e,i,t,r,s,o,u,c,f,a=this,d=a.constructor,l=a.d,p=(n=new d(n)).d;if(n.s*=a.s,!(l&&l[0]&&p&&p[0]))return new d(!n.s||l&&!l[0]&&!p||p&&!p[0]&&!l?NaN:l&&p?0*n.s:n.s/0);for(i=g(a.e/x)+g(n.e/x),(c=l.length)<(f=p.length)&&(s=l,l=p,p=s,o=c,c=f,f=o),s=[],t=o=c+f;t--;)s.push(0);for(t=f;--t>=0;){for(e=0,r=c+t;r>t;)u=s[r]+p[t]*l[r-t-1]+e,s[r--]=u%E|0,e=u/E|0;s[r]=(s[r]+e)%E|0;}for(;!s[--o];)s.pop();return e?++i:s.shift(),n.d=s,n.e=L(s,i),h?P(n,d.precision,d.rounding):n},q.toBinary=function(n,e){return z(this,2,n,e)},q.toDecimalPlaces=q.toDP=function(n,e){var i=this,t=i.constructor;return i=new t(i),void 0===n?i:(F(n,0,s),void 0===e?e=t.rounding:F(e,0,8),P(i,n+i.e+1,e))},q.toExponential=function(n,e){var i,t=this,r=t.constructor;return void 0===n?i=R(t,!0):(F(n,0,s),void 0===e?e=r.rounding:F(e,0,8),i=R(t=P(new r(t),n+1,e),!0,n+1)),t.isNeg()&&!t.isZero()?"-"+i:i},q.toFixed=function(n,e){var i,t,r=this,o=r.constructor;return void 0===n?i=R(r):(F(n,0,s),void 0===e?e=o.rounding:F(e,0,8),i=R(t=P(new o(r),n+r.e+1,e),!1,n+t.e+1)),r.isNeg()&&!r.isZero()?"-"+i:i},q.toFraction=function(n){var e,i,t,r,s,o,u,c,f,a,l,p,g=this,m=g.d,v=g.constructor;if(!m)return new v(g);if(f=i=new v(1),t=c=new v(0),o=(s=(e=new v(t)).e=k(m)-g.e-1)%x,e.d[0]=w(10,o<0?x+o:o),null==n)n=s>0?e:f;else {if(!(u=new v(n)).isInt()||u.lt(f))throw Error(d+u);n=u.gt(e)?s>0?e:f:u;}for(h=!1,u=new v(O(m)),a=v.precision,v.precision=s=m.length*x*2;l=Z(u,e,0,1,1),1!=(r=i.plus(l.times(t))).cmp(n);)i=t,t=r,r=f,f=c.plus(l.times(r)),c=r,r=e,e=u.minus(l.times(r)),u=r;return r=Z(n.minus(i),t,0,1,1),c=c.plus(r.times(f)),i=i.plus(r.times(t)),c.s=f.s=g.s,p=Z(f,t,s,1).minus(g).abs().cmp(Z(c,i,s,1).minus(g).abs())<1?[f,t]:[c,i],v.precision=a,h=!0,p},q.toHexadecimal=q.toHex=function(n,e){return z(this,16,n,e)},q.toNearest=function(n,e){var i=this,t=i.constructor;if(i=new t(i),null==n){if(!i.d)return i;n=new t(1),e=t.rounding;}else {if(n=new t(n),void 0===e?e=t.rounding:F(e,0,8),!i.d)return n.s?i:n;if(!n.d)return n.s&&(n.s=i.s),n}return n.d[0]?(h=!1,i=Z(i,n,0,e,1).times(n),h=!0,P(i)):(n.s=i.s,i=n),i},q.toNumber=function(){return +this},q.toOctal=function(n,e){return z(this,8,n,e)},q.toPower=q.pow=function(n){var e,i,t,r,s,o,u=this,c=u.constructor,f=+(n=new c(n));if(!(u.d&&n.d&&u.d[0]&&n.d[0]))return new c(w(+u,f));if((u=new c(u)).eq(1))return u;if(t=c.precision,s=c.rounding,n.eq(1))return P(u,t,s);if((e=g(n.e/x))>=n.d.length-1&&(i=f<0?-f:f)<=9007199254740991)return r=T(c,u,i,t),n.s<0?new c(1).div(r):P(r,t,s);if((o=u.s)<0){if(e<n.d.length-1)return new c(NaN);if(0==(1&n.d[e])&&(o=1),0==u.e&&1==u.d[0]&&1==u.d.length)return u.s=o,u}return (e=0!=(i=w(+u,f))&&isFinite(i)?new c(i+"").e:g(f*(Math.log("0."+O(u.d))/Math.LN10+u.e+1)))>c.maxE+1||e<c.minE-1?new c(e>0?o/0:0):(h=!1,c.rounding=u.s=1,i=Math.min(12,(e+"").length),(r=H(n.times(B(u,t+i)),t)).d&&A((r=P(r,t+5,1)).d,t,s)&&(e=t+10,+O((r=P(H(n.times(B(u,e+i)),e),e+5,1)).d).slice(t+1,t+15)+1==1e14&&(r=P(r,t+1,0))),r.s=o,h=!0,c.rounding=s,P(r,t,s))},q.toPrecision=function(n,e){var i,t=this,r=t.constructor;return void 0===n?i=R(t,t.e<=r.toExpNeg||t.e>=r.toExpPos):(F(n,1,s),void 0===e?e=r.rounding:F(e,0,8),i=R(t=P(new r(t),n,e),n<=t.e||t.e<=r.toExpNeg,n)),t.isNeg()&&!t.isZero()?"-"+i:i},q.toSignificantDigits=q.toSD=function(n,e){var i=this.constructor;return void 0===n?(n=i.precision,e=i.rounding):(F(n,1,s),void 0===e?e=i.rounding:F(e,0,8)),P(new i(this),n,e)},q.toString=function(){var n=this,e=n.constructor,i=R(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()&&!n.isZero()?"-"+i:i},q.truncated=q.trunc=function(){return P(new this.constructor(this),this.e+1,1)},q.valueOf=q.toJSON=function(){var n=this,e=n.constructor,i=R(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()?"-"+i:i};var Z=function(){function n(n,e,i){var t,r=0,s=n.length;for(n=n.slice();s--;)t=n[s]*e+r,n[s]=t%i|0,r=t/i|0;return r&&n.unshift(r),n}function e(n,e,i,t){var r,s;if(i!=t)s=i>t?1:-1;else for(r=s=0;r<i;r++)if(n[r]!=e[r]){s=n[r]>e[r]?1:-1;break}return s}function t(n,e,i,t){for(var r=0;i--;)n[i]-=r,r=n[i]<e[i]?1:0,n[i]=r*t+n[i]-e[i];for(;!n[0]&&n.length>1;)n.shift();}return function(r,s,o,u,c,f){var h,a,d,l,p,w,m,v,N,b,M,y,q,O,F,A,D,Z,R,L,U=r.constructor,_=r.s==s.s?1:-1,k=r.d,S=s.d;if(!(k&&k[0]&&S&&S[0]))return new U(r.s&&s.s&&(k?!S||k[0]!=S[0]:S)?k&&0==k[0]||!S?0*_:_/0:NaN);for(f?(p=1,a=r.e-s.e):(f=E,p=x,a=g(r.e/p)-g(s.e/p)),R=S.length,D=k.length,b=(N=new U(_)).d=[],d=0;S[d]==(k[d]||0);d++);if(S[d]>(k[d]||0)&&a--,null==o?(O=o=U.precision,u=U.rounding):O=c?o+(r.e-s.e)+1:o,O<0)b.push(1),w=!0;else {if(O=O/p+2|0,d=0,1==R){for(l=0,S=S[0],O++;(d<D||l)&&O--;d++)F=l*f+(k[d]||0),b[d]=F/S|0,l=F%S|0;w=l||d<D;}else {for((l=f/(S[0]+1)|0)>1&&(S=n(S,l,f),k=n(k,l,f),R=S.length,D=k.length),A=R,y=(M=k.slice(0,R)).length;y<R;)M[y++]=0;(L=S.slice()).unshift(0),Z=S[0],S[1]>=f/2&&++Z;do{l=0,(h=e(S,M,R,y))<0?(q=M[0],R!=y&&(q=q*f+(M[1]||0)),(l=q/Z|0)>1?(l>=f&&(l=f-1),1==(h=e(m=n(S,l,f),M,v=m.length,y=M.length))&&(l--,t(m,R<v?L:S,v,f))):(0==l&&(h=l=1),m=S.slice()),(v=m.length)<y&&m.unshift(0),t(M,m,y,f),-1==h&&(h=e(S,M,R,y=M.length))<1&&(l++,t(M,R<y?L:S,y,f)),y=M.length):0===h&&(l++,M=[0]),b[d++]=l,h&&M[0]?M[y++]=k[A]||0:(M=[k[A]],y=1);}while((A++<D||void 0!==M[0])&&O--);w=void 0!==M[0];}b[0]||b.shift();}if(1==p)N.e=a,i=w;else {for(d=1,l=b[0];l>=10;l/=10)d++;N.e=d+a*p-1,P(N,c?o+N.e+1:o,u,w);}return N}}();function P(n,e,i,t){var r,s,o,u,c,f,a,d,l,p=n.constructor;n:if(null!=e){if(!(d=n.d))return n;for(r=1,u=d[0];u>=10;u/=10)r++;if((s=e-r)<0)s+=x,o=e,c=(a=d[l=0])/w(10,r-o-1)%10|0;else if((l=Math.ceil((s+1)/x))>=(u=d.length)){if(!t)break n;for(;u++<=l;)d.push(0);a=c=0,r=1,o=(s%=x)-x+1;}else {for(a=u=d[l],r=1;u>=10;u/=10)r++;c=(o=(s%=x)-x+r)<0?0:a/w(10,r-o-1)%10|0;}if(t=t||e<0||void 0!==d[l+1]||(o<0?a:a%w(10,r-o-1)),f=i<4?(c||t)&&(0==i||i==(n.s<0?3:2)):c>5||5==c&&(4==i||t||6==i&&(s>0?o>0?a/w(10,r-o):0:d[l-1])%10&1||i==(n.s<0?8:7)),e<1||!d[0])return d.length=0,f?(e-=n.e+1,d[0]=w(10,(x-e%x)%x),n.e=-e||0):d[0]=n.e=0,n;if(0==s?(d.length=l,u=1,l--):(d.length=l+1,u=w(10,x-s),d[l]=o>0?(a/w(10,r-o)%w(10,o)|0)*u:0),f)for(;;){if(0==l){for(s=1,o=d[0];o>=10;o/=10)s++;for(o=d[0]+=u,u=1;o>=10;o/=10)u++;s!=u&&(n.e++,d[0]==E&&(d[0]=1));break}if(d[l]+=u,d[l]!=E)break;d[l--]=0,u=1;}for(s=d.length;0===d[--s];)d.pop();}return h&&(n.e>p.maxE?(n.d=null,n.e=NaN):n.e<p.minE&&(n.e=0,n.d=[0])),n}function R(n,e,i){if(!n.isFinite())return V(n);var t,r=n.e,s=O(n.d),o=s.length;return e?(i&&(t=i-o)>0?s=s.charAt(0)+"."+s.slice(1)+S(t):o>1&&(s=s.charAt(0)+"."+s.slice(1)),s=s+(n.e<0?"e":"e+")+n.e):r<0?(s="0."+S(-r-1)+s,i&&(t=i-o)>0&&(s+=S(t))):r>=o?(s+=S(r+1-o),i&&(t=i-r-1)>0&&(s=s+"."+S(t))):((t=r+1)<o&&(s=s.slice(0,t)+"."+s.slice(t)),i&&(t=i-o)>0&&(r+1===o&&(s+="."),s+=S(t))),s}function L(n,e){var i=n[0];for(e*=x;i>=10;i/=10)e++;return e}function U(n,e,i){if(e>M)throw h=!0,i&&(n.precision=i),Error(l);return P(new n(u),e,1,!0)}function _(n,e,i){if(e>y)throw Error(l);return P(new n(c),e,i,!0)}function k(n){var e=n.length-1,i=e*x+1;if(e=n[e]){for(;e%10==0;e/=10)i--;for(e=n[0];e>=10;e/=10)i++;}return i}function S(n){for(var e="";n--;)e+="0";return e}function T(n,e,i,t){var r,s=new n(1),o=Math.ceil(t/x+4);for(h=!1;;){if(i%2&&G((s=s.times(e)).d,o)&&(r=!0),0===(i=g(i/2))){i=s.d.length-1,r&&0===s.d[i]&&++s.d[i];break}G((e=e.times(e)).d,o);}return h=!0,s}function I(n){return 1&n.d[n.d.length-1]}function C(n,e,i){for(var t,r=new n(e[0]),s=0;++s<e.length;){if(!(t=new n(e[s])).s){r=t;break}r[i](t)&&(r=t);}return r}function H(n,e){var i,t,r,s,o,u,c,f=0,a=0,d=0,l=n.constructor,p=l.rounding,g=l.precision;if(!n.d||!n.d[0]||n.e>17)return new l(n.d?n.d[0]?n.s<0?0:1/0:1:n.s?n.s<0?0:n:NaN);for(null==e?(h=!1,c=g):c=e,u=new l(.03125);n.e>-2;)n=n.times(u),d+=5;for(c+=t=Math.log(w(2,d))/Math.LN10*2+5|0,i=s=o=new l(1),l.precision=c;;){if(s=P(s.times(n),c,1),i=i.times(++a),O((u=o.plus(Z(s,i,c,1))).d).slice(0,c)===O(o.d).slice(0,c)){for(r=d;r--;)o=P(o.times(o),c,1);if(null!=e)return l.precision=g,o;if(!(f<3&&A(o.d,c-t,p,f)))return P(o,l.precision=g,p,h=!0);l.precision=c+=10,i=s=u=new l(1),a=0,f++;}o=u;}}function B(n,e){var i,t,r,s,o,u,c,f,a,d,l,p=1,g=n,w=g.d,m=g.constructor,v=m.rounding,N=m.precision;if(g.s<0||!w||!w[0]||!g.e&&1==w[0]&&1==w.length)return new m(w&&!w[0]?-1/0:1!=g.s?NaN:w?0:g);if(null==e?(h=!1,a=N):a=e,m.precision=a+=10,t=(i=O(w)).charAt(0),!(Math.abs(s=g.e)<15e14))return f=U(m,a+2,N).times(s+""),g=B(new m(t+"."+i.slice(1)),a-10).plus(f),m.precision=N,null==e?P(g,N,v,h=!0):g;for(;t<7&&1!=t||1==t&&i.charAt(1)>3;)t=(i=O((g=g.times(n)).d)).charAt(0),p++;for(s=g.e,t>1?(g=new m("0."+i),s++):g=new m(t+"."+i.slice(1)),d=g,c=o=g=Z(g.minus(1),g.plus(1),a,1),l=P(g.times(g),a,1),r=3;;){if(o=P(o.times(l),a,1),O((f=c.plus(Z(o,new m(r),a,1))).d).slice(0,a)===O(c.d).slice(0,a)){if(c=c.times(2),0!==s&&(c=c.plus(U(m,a+2,N).times(s+""))),c=Z(c,new m(p),a,1),null!=e)return m.precision=N,c;if(!A(c.d,a-10,v,u))return P(c,m.precision=N,v,h=!0);m.precision=a+=10,f=o=g=Z(d.minus(1),d.plus(1),a,1),l=P(g.times(g),a,1),r=u=1;}c=f,r+=2;}}function V(n){return String(n.s*n.s/0)}function j(n,e){var i,t,r;for((i=e.indexOf("."))>-1&&(e=e.replace(".","")),(t=e.search(/e/i))>0?(i<0&&(i=t),i+=+e.slice(t+1),e=e.substring(0,t)):i<0&&(i=e.length),t=0;48===e.charCodeAt(t);t++);for(r=e.length;48===e.charCodeAt(r-1);--r);if(e=e.slice(t,r)){if(r-=t,n.e=i=i-t-1,n.d=[],t=(i+1)%x,i<0&&(t+=x),t<r){for(t&&n.d.push(+e.slice(0,t)),r-=x;t<r;)n.d.push(+e.slice(t,t+=x));e=e.slice(t),t=x-e.length;}else t-=r;for(;t--;)e+="0";n.d.push(+e),h&&(n.e>n.constructor.maxE?(n.d=null,n.e=NaN):n.e<n.constructor.minE&&(n.e=0,n.d=[0]));}else n.e=0,n.d=[0];return n}function $(n,i){var t,r,s,o,u,c,f,a,l;if("Infinity"===i||"NaN"===i)return +i||(n.s=NaN),n.e=NaN,n.d=null,n;if(v.test(i))t=16,i=i.toLowerCase();else if(m.test(i))t=2;else {if(!N.test(i))throw Error(d+i);t=8;}for((o=i.search(/p/i))>0?(f=+i.slice(o+1),i=i.substring(2,o)):i=i.slice(2),u=(o=i.indexOf("."))>=0,r=n.constructor,u&&(o=(c=(i=i.replace(".","")).length)-o,s=T(r,new r(t),o,2*o)),o=l=(a=D(i,t,E)).length-1;0===a[o];--o)a.pop();return o<0?new r(0*n.s):(n.e=L(a,l),n.d=a,h=!1,u&&(n=Z(n,s,4*c)),f&&(n=n.times(Math.abs(f)<54?Math.pow(2,f):e.pow(2,f))),h=!0,n)}function W(n,e,i,t,r){var s,o,u,c,f=n.precision,a=Math.ceil(f/x);for(h=!1,c=i.times(i),u=new n(t);;){if(o=Z(u.times(c),new n(e++*e++),f,1),u=r?t.plus(o):t.minus(o),t=Z(o.times(c),new n(e++*e++),f,1),void 0!==(o=u.plus(t)).d[a]){for(s=a;o.d[s]===u.d[s]&&s--;);if(-1==s)break}s=u,u=t,t=o,o=s,0;}return h=!0,o.d.length=a+1,o}function J(n,e){var i,r=e.s<0,s=_(n,n.precision,1),o=s.times(.5);if((e=e.abs()).lte(o))return t=r?4:1,e;if((i=e.divToInt(s)).isZero())t=r?3:2;else {if((e=e.minus(i.times(s))).lte(o))return t=I(i)?r?2:3:r?4:1,e;t=I(i)?r?1:4:r?3:2;}return e.minus(s).abs()}function z(n,e,t,r){var u,c,f,h,a,d,l,p,g,w=n.constructor,m=void 0!==t;if(m?(F(t,1,s),void 0===r?r=w.rounding:F(r,0,8)):(t=w.precision,r=w.rounding),n.isFinite()){for(m?(u=2,16==e?t=4*t-3:8==e&&(t=3*t-2)):u=e,(f=(l=R(n)).indexOf("."))>=0&&(l=l.replace(".",""),(g=new w(1)).e=l.length-f,g.d=D(R(g),10,u),g.e=g.d.length),c=a=(p=D(l,10,u)).length;0==p[--a];)p.pop();if(p[0]){if(f<0?c--:((n=new w(n)).d=p,n.e=c,p=(n=Z(n,g,t,r,0,u)).d,c=n.e,d=i),f=p[t],h=u/2,d=d||void 0!==p[t+1],d=r<4?(void 0!==f||d)&&(0===r||r===(n.s<0?3:2)):f>h||f===h&&(4===r||d||6===r&&1&p[t-1]||r===(n.s<0?8:7)),p.length=t,d)for(;++p[--t]>u-1;)p[t]=0,t||(++c,p.unshift(1));for(a=p.length;!p[a-1];--a);for(f=0,l="";f<a;f++)l+=o.charAt(p[f]);if(m){if(a>1)if(16==e||8==e){for(f=16==e?4:3,--a;a%f;a++)l+="0";for(a=(p=D(l,u,e)).length;!p[a-1];--a);for(f=1,l="1.";f<a;f++)l+=o.charAt(p[f]);}else l=l.charAt(0)+"."+l.slice(1);l=l+(c<0?"p":"p+")+c;}else if(c<0){for(;++c;)l="0"+l;l="0."+l;}else if(++c>a)for(c-=a;c--;)l+="0";else c<a&&(l=l.slice(0,c)+"."+l.slice(c));}else l=m?"0p+0":"0";l=(16==e?"0x":2==e?"0b":8==e?"0o":"")+l;}else l=V(n);return n.s<0?"-"+l:l}function G(n,e){if(n.length>e)return n.length=e,!0}function K(n){return new this(n).abs()}function Q(n){return new this(n).acos()}function X(n){return new this(n).acosh()}function Y(n,e){return new this(n).plus(e)}function nn(n){return new this(n).asin()}function en(n){return new this(n).asinh()}function tn(n){return new this(n).atan()}function rn(n){return new this(n).atanh()}function sn(n,e){n=new this(n),e=new this(e);var i,t=this.precision,r=this.rounding,s=t+4;return n.s&&e.s?n.d||e.d?!e.d||n.isZero()?(i=e.s<0?_(this,t,r):new this(0)).s=n.s:!n.d||e.isZero()?(i=_(this,s,1).times(.5)).s=n.s:e.s<0?(this.precision=s,this.rounding=1,i=this.atan(Z(n,e,s,1)),e=_(this,s,1),this.precision=t,this.rounding=r,i=n.s<0?i.minus(e):i.plus(e)):i=this.atan(Z(n,e,s,1)):(i=_(this,s,1).times(e.s>0?.25:.75)).s=n.s:i=new this(NaN),i}function on(n){return new this(n).cbrt()}function un(n){return P(n=new this(n),n.e+1,2)}function cn(n){if(!n||"object"!=typeof n)throw Error(a+"Object expected");var e,i,t,o=!0===n.defaults,u=["precision",1,s,"rounding",0,8,"toExpNeg",-r,0,"toExpPos",0,r,"maxE",0,r,"minE",-r,0,"modulo",0,9];for(e=0;e<u.length;e+=3)if(i=u[e],o&&(this[i]=f[i]),void 0!==(t=n[i])){if(!(g(t)===t&&t>=u[e+1]&&t<=u[e+2]))throw Error(d+i+": "+t);this[i]=t;}if(i="crypto",o&&(this[i]=f[i]),void 0!==(t=n[i])){if(!0!==t&&!1!==t&&0!==t&&1!==t)throw Error(d+i+": "+t);if(t){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw Error(p);this[i]=!0;}else this[i]=!1;}return this}function fn(n){return new this(n).cos()}function hn(n){return new this(n).cosh()}function an(n,e){return new this(n).div(e)}function dn(n){return new this(n).exp()}function ln(n){return P(n=new this(n),n.e+1,3)}function pn(){var n,e,i=new this(0);for(h=!1,n=0;n<arguments.length;)if((e=new this(arguments[n++])).d)i.d&&(i=i.plus(e.times(e)));else {if(e.s)return h=!0,new this(1/0);i=e;}return h=!0,i.sqrt()}function gn(n){return n instanceof e||n&&"[object Decimal]"===n.name||!1}function wn(n){return new this(n).ln()}function mn(n,e){return new this(n).log(e)}function vn(n){return new this(n).log(2)}function Nn(n){return new this(n).log(10)}function bn(){return C(this,arguments,"lt")}function En(){return C(this,arguments,"gt")}function xn(n,e){return new this(n).mod(e)}function Mn(n,e){return new this(n).mul(e)}function yn(n,e){return new this(n).pow(e)}function qn(n){var e,i,t,r,o=0,u=new this(1),c=[];if(void 0===n?n=this.precision:F(n,1,s),t=Math.ceil(n/x),this.crypto)if(crypto.getRandomValues)for(e=crypto.getRandomValues(new Uint32Array(t));o<t;)(r=e[o])>=429e7?e[o]=crypto.getRandomValues(new Uint32Array(1))[0]:c[o++]=r%1e7;else {if(!crypto.randomBytes)throw Error(p);for(e=crypto.randomBytes(t*=4);o<t;)(r=e[o]+(e[o+1]<<8)+(e[o+2]<<16)+((127&e[o+3])<<24))>=214e7?crypto.randomBytes(4).copy(e,o):(c.push(r%1e7),o+=4);o=t/4;}else for(;o<t;)c[o++]=1e7*Math.random()|0;for(t=c[--o],n%=x,t&&n&&(r=w(10,x-n),c[o]=(t/r|0)*r);0===c[o];o--)c.pop();if(o<0)i=0,c=[0];else {for(i=-1;0===c[0];i-=x)c.shift();for(t=1,r=c[0];r>=10;r/=10)t++;t<x&&(i-=x-t);}return u.e=i,u.d=c,u}function On(n){return P(n=new this(n),n.e+1,this.rounding)}function Fn(n){return (n=new this(n)).d?n.d[0]?n.s:0*n.s:n.s||NaN}function An(n){return new this(n).sin()}function Dn(n){return new this(n).sinh()}function Zn(n){return new this(n).sqrt()}function Pn(n,e){return new this(n).sub(e)}function Rn(n){return new this(n).tan()}function Ln(n){return new this(n).tanh()}function Un(n){return P(n=new this(n),n.e+1,1)}return (e=function n(e){var i,t,r;function s(n){var e,i,t,r=this;if(!(r instanceof s))return new s(n);if(r.constructor=s,n instanceof s)return r.s=n.s,void(h?!n.d||n.e>s.maxE?(r.e=NaN,r.d=null):n.e<s.minE?(r.e=0,r.d=[0]):(r.e=n.e,r.d=n.d.slice()):(r.e=n.e,r.d=n.d?n.d.slice():n.d));if("number"==(t=typeof n)){if(0===n)return r.s=1/n<0?-1:1,r.e=0,void(r.d=[0]);if(n<0?(n=-n,r.s=-1):r.s=1,n===~~n&&n<1e7){for(e=0,i=n;i>=10;i/=10)e++;return void(h?e>s.maxE?(r.e=NaN,r.d=null):e<s.minE?(r.e=0,r.d=[0]):(r.e=e,r.d=[n]):(r.e=e,r.d=[n]))}return 0*n!=0?(n||(r.s=NaN),r.e=NaN,void(r.d=null)):j(r,n.toString())}if("string"!==t)throw Error(d+n);return 45===n.charCodeAt(0)?(n=n.slice(1),r.s=-1):r.s=1,b.test(n)?j(r,n):$(r,n)}if(s.prototype=q,s.ROUND_UP=0,s.ROUND_DOWN=1,s.ROUND_CEIL=2,s.ROUND_FLOOR=3,s.ROUND_HALF_UP=4,s.ROUND_HALF_DOWN=5,s.ROUND_HALF_EVEN=6,s.ROUND_HALF_CEIL=7,s.ROUND_HALF_FLOOR=8,s.EUCLID=9,s.config=s.set=cn,s.clone=n,s.isDecimal=gn,s.abs=K,s.acos=Q,s.acosh=X,s.add=Y,s.asin=nn,s.asinh=en,s.atan=tn,s.atanh=rn,s.atan2=sn,s.cbrt=on,s.ceil=un,s.cos=fn,s.cosh=hn,s.div=an,s.exp=dn,s.floor=ln,s.hypot=pn,s.ln=wn,s.log=mn,s.log10=Nn,s.log2=vn,s.max=bn,s.min=En,s.mod=xn,s.mul=Mn,s.pow=yn,s.random=qn,s.round=On,s.sign=Fn,s.sin=An,s.sinh=Dn,s.sqrt=Zn,s.sub=Pn,s.tan=Rn,s.tanh=Ln,s.trunc=Un,void 0===e&&(e={}),e&&!0!==e.defaults)for(r=["precision","rounding","toExpNeg","toExpPos","maxE","minE","modulo","crypto"],i=0;i<r.length;)e.hasOwnProperty(t=r[i++])||(e[t]=this[t]);return s.config(e),s}(f)).default=e.Decimal=e,u=new e(u),c=new e(c),e}()
    //    bigDec: require('decimal.js')
    });

    {
        module.exports = nerdamer;
    }});

    const EPS = 1e-5;
    let globalId = 0;
    function getGlobalId() {
        return globalId++;
    }
    function addLikeSurfaceFaces(likeSurfaceFaces, face1, face2) {
        // There cannot be two subgroups which will later be connected, as the "graph" of like surface faces is fully
        // connected
        for (let i = 0; i < likeSurfaceFaces.length; i++) {
            const faceGroup = likeSurfaceFaces[i];
            let foundFace1 = false, foundFace2 = false;
            for (let j = 0; j < faceGroup.length; j++) {
                const face = faceGroup[j];
                if (face == face1) {
                    foundFace1 = true;
                }
                if (face == face2) {
                    foundFace2 = true;
                }
            }
            if (foundFace1 != foundFace2) {
                faceGroup.push(foundFace1 ? face2 : face1);
                return;
            }
            else if (foundFace1) {
                // found both
                return;
            }
        }
        // nothing found, add a new group
        likeSurfaceFaces.push([face1, face2]);
    }
    function assembleFaceFromLooseEdges(edges, surface, originalFace) {
        const visited = new Set();
        function nextStart() {
            return edges.find((edge) => !visited.has(edge));
        }
        const loops = [];
        let startEdge, currentEdge = undefined;
        while ((startEdge = nextStart())) {
            currentEdge = startEdge;
            const loop = [];
            let total = 0;
            do {
                visited.add(currentEdge);
                loop.push(currentEdge);
                const possibleEdges = edges.filter((edge) => currentEdge.b.like(edge.a));
                const normalAtCurrentB = surface.normalP(currentEdge.b);
                const nextEdgeIndex = indexWithMax(possibleEdges, (edge) => currentEdge.bDir.angleRelativeNormal(edge.aDir, normalAtCurrentB));
                currentEdge = possibleEdges[nextEdgeIndex];
            } while (startEdge != currentEdge && total++ < 200);
            assert(total != 201);
            loops.push(loop);
        }
        const assembledFaces = BRep.assembleFacesFromLoops(loops, surface, originalFace);
        assertf(() => 1 == assembledFaces.length);
        return assembledFaces[0];
    }
    /**
     * ## Markdown header
     * ![foo](screenshots/Capture.PNG)
     * {@link ../screenshots/Capture.PNG}
     * find the next edge with the MAXIMUM angle
     */
    function calcNextEdgeIndex(currentEdge, possibleEdges, faceNormalAtCurrentB) {
        let maxValue = -20, advanced = false, result = Number.MAX_SAFE_INTEGER;
        const normVector = currentEdge.bDir.cross(faceNormalAtCurrentB);
        const eps = 1e-4;
        const dir = sign$1(currentEdge.deltaT());
        const ecd = currentEdge.curve.diff(currentEdge.bT, -dir * eps).dot(normVector);
        for (let i = possibleEdges.length; i--;) {
            const edge = possibleEdges[i];
            const angle1 = currentEdge.bDir
                .negated()
                .angleRelativeNormal(edge.aDir, faceNormalAtCurrentB);
            const angle = ((angle1 + TAU + NLA_PRECISION) % TAU) - NLA_PRECISION;
            if (eq0(angle)) {
                // do advanced analysis
                if (currentEdge.curve.isColinearTo(edge.curve)) {
                    continue;
                }
                const edgeDir = sign$1(edge.deltaT());
                const iscd = edge.curve.diff(edge.aT, edgeDir * eps).dot(normVector);
                const diff = iscd - ecd;
                // if diff > 0, the angle is actually ~= 0
                if (diff < 0 && (!advanced || diff > maxValue)) {
                    advanced = true;
                    maxValue = diff;
                    result = i;
                }
            }
            else if (!advanced) {
                if (gt(angle, maxValue)) {
                    maxValue = angle;
                    result = i;
                }
            }
        }
        return result == Number.MAX_SAFE_INTEGER ? 0 : result;
    }
    class BRep extends Transformable {
        constructor(faces, infiniteVolume, generator, vertexNames) {
            super();
            this.faces = faces;
            assertInst(Face, ...faces);
            this.infiniteVolume = infiniteVolume;
            assert(!this.infiniteVolume || true === this.infiniteVolume);
            this.generator = generator;
            this.vertexNames = vertexNames;
            this.edgeFaces = undefined;
            //this.assertSanity()
        }
        static loop1ContainsLoop2(loop1, ccw1, loop2, ccw2, surface) {
            for (const edge of loop2) {
                const loop1ContainsPoint = surface.loopContainsPoint(loop1, edge.a);
                if (PointVsFace.ON_EDGE != loop1ContainsPoint)
                    return PointVsFace.INSIDE == loop1ContainsPoint;
            }
            for (const edge of loop2) {
                const edgePoint = edge.curve.at(edge.aT * 0.2 + edge.bT * 0.8);
                const loop1ContainsPoint = surface.loopContainsPoint(loop1, edgePoint);
                if (PointVsFace.ON_EDGE != loop1ContainsPoint)
                    return PointVsFace.INSIDE == loop1ContainsPoint;
            }
            if (ccw1 != ccw2) {
                return ccw2;
            }
            throw new Error(loop1.sce + loop2.sce);
        }
        static assembleFacesFromLoops(loops, surface, originalFace, infoFactory) {
            function placeRecursively(newLoopInfo, loopInfos) {
                if (loopInfos.length == 0) {
                    loopInfos.push(newLoopInfo);
                }
                else {
                    const subLoopInfo = loopInfos.find((loopInfo) => BRep.loop1ContainsLoop2(loopInfo.loop, loopInfo.ccw, newLoopInfo.loop, newLoopInfo.ccw, surface));
                    if (subLoopInfo) {
                        placeRecursively(newLoopInfo, subLoopInfo.subloops);
                    }
                    else {
                        // newLoopInfo isnt contained by any other subLoopInfo
                        for (let i = loopInfos.length; --i >= 0;) {
                            const subLoopInfo = loopInfos[i];
                            //console.log("cheving subLoopInfo", surface.loopContainsPoint(newLoopInfo.edges,
                            // subLoopInfo.edges[0].a))
                            if (BRep.loop1ContainsLoop2(newLoopInfo.loop, newLoopInfo.ccw, subLoopInfo.loop, subLoopInfo.ccw, surface)) {
                                newLoopInfo.subloops.push(subLoopInfo);
                                loopInfos.splice(i, 1); // remove it
                            }
                        }
                        loopInfos.push(newLoopInfo);
                    }
                }
            }
            function newFacesRecursive(loopInfo) {
                // CW loops can be top level, if they are holes in the original face not contained in the new face
                if (loopInfo.ccw) {
                    if (loopInfo.subloops.every((sl) => !sl.ccw)) {
                        const holes = loopInfo.subloops.map((sl) => sl.loop);
                        const info = infoFactory &&
                            infoFactory.newSubFace(originalFace, surface, loopInfo.loop, holes);
                        const newFace = new originalFace.constructor(surface, loopInfo.loop, holes, "genface" + getGlobalId(), info);
                        newFaces.push(newFace);
                        loopInfo.subloops.forEach((sl) => sl.subloops.forEach((slsl) => slsl.ccw && newFacesRecursive(slsl)));
                    }
                    else {
                        loopInfo.subloops.forEach((sl) => sl.ccw && newFacesRecursive(sl));
                    }
                }
            }
            const newFaces = [];
            const topLevelLoops = [];
            loops.forEach((loop) => placeRecursively({
                loop: loop,
                ccw: surface.edgeLoopCCW(loop),
                subloops: [],
            }, topLevelLoops));
            topLevelLoops.forEach((tll) => newFacesRecursive(tll));
            return newFaces;
        }
        /**
         * Create a [BRep] by concatenating the faces of other BReps. Only use this if certain that the faces of the BReps do not intersect.
         * Otherwise, use [BRep.plus].
         * @param bReps
         * @param generator
         */
        static join(bReps, generator) {
            return new BRep(bReps.flatMap((b2) => b2.faces), false, generator);
        }
        containsPoint(p, forceInsideOutside = false) {
            const dirs = [
                V(-0.3920414696448526, -0.12936136783391444, -0.9108068525164064),
                V(0.6520650903544943, -0.07151288645511984, -0.7547827667692488),
                V(0.9433494201061395, -0.2402757256238473, -0.22882186797013926),
                V(0.13678704228501923, -0.04480387361087783, 0.9895867410047372),
                V(0.0662057922721913, -0.5865836917435423, 0.8071780259955845),
                V(-0.7322576567870621, -0.12953393611526787, 0.6685953061989045),
                V(0.6579719127258273, -0.012300218400456116, 0.7529420075219719),
                V(-0.5576497966736425, 0.8006695748324647, 0.2189861552871446),
            ];
            dirLoop: for (const dir of dirs) {
                const testLine = new L3(p, dir);
                let inside = this.infiniteVolume;
                for (const face of this.faces) {
                    assert(!face.surface.containsCurve(testLine));
                    const ists = face.surface.isTsForLine(testLine);
                    for (const t of ists) {
                        const p = testLine.at(t);
                        const pvf = face.containsPoint2(p);
                        //assert(pvf != PointVsFace.ON_EDGE)
                        !forceInsideOutside && assert(!eq0(t));
                        if (t > 0) {
                            if (pvf == PointVsFace.ON_EDGE) {
                                continue dirLoop;
                            }
                            if (pvf == PointVsFace.INSIDE) {
                                inside = !inside;
                            }
                        }
                    }
                }
                return inside;
            }
            return false;
        }
        withMergedFaces() {
            const likeSurfaceFaces = [];
            for (let i = 0; i < this.faces.length; i++) {
                let addedToGroup = false;
                for (let j = 0; j < i; j++) {
                    if (this.faces[i].surface.isCoplanarTo(this.faces[j].surface)) {
                        const faceGroup = likeSurfaceFaces.find((faceGroup) => faceGroup.includes(this.faces[j]));
                        if (faceGroup) {
                            faceGroup.push(this.faces[i]);
                            addedToGroup = true;
                        }
                    }
                }
                !addedToGroup && likeSurfaceFaces.push([this.faces[i]]);
            }
            console.log("likeSurfaceFaces", likeSurfaceFaces);
            if (likeSurfaceFaces.every((group) => group.length == 1))
                return this;
            const newFaces = [];
            let total = 0;
            for (const faceGroup of likeSurfaceFaces) {
                console.log(faceGroup);
                if (faceGroup.length == 1) {
                    newFaces.push(faceGroup[0]);
                }
                else {
                    const allEdges = faceGroup.flatMap((face) => face.getAllEdges());
                    for (let i = allEdges.length; i-- > 0;) {
                        for (let j = 0; j < i; j++) {
                            console.log("blugh", total);
                            assert(i >= 0 && j >= 0 && total++ < 500, i + " " + j + " " + total);
                            if (allEdges[i].isCoEdge(allEdges[j])) {
                                // remove both
                                allEdges.splice(i, 1);
                                allEdges.splice(j, 1);
                                i--;
                                break;
                            }
                        }
                    }
                    const newFace = assembleFaceFromLooseEdges(allEdges, faceGroup[0].surface, faceGroup[0]);
                    newFaces.push(newFace);
                }
            }
            return new BRep(newFaces, this.infiniteVolume, this.generator && this.generator + ".withMergedFaces()", this.vertexNames);
        }
        calculateVolume() {
            return sum(this.faces.map((face) => face.zDirVolume().volume));
        }
        toMesh() {
            const mesh = new Mesh()
                .addVertexBuffer("normals", "ts_Normal")
                .addIndexBuffer("TRIANGLES")
                .addIndexBuffer("LINES");
            mesh.faceIndexes = new Map();
            for (const face of this.faces) {
                const triangleStart = mesh.TRIANGLES.length;
                face.addToMesh(mesh);
                mesh.faceIndexes.set(face, {
                    start: triangleStart,
                    count: mesh.TRIANGLES.length - triangleStart,
                });
            }
            //this.buildAdjacencies()
            //for (const edge of this.edgeFaces.keys()) {
            //
            //}
            return mesh;
        }
        minus(other, infoFactory) {
            const generator = this.generator &&
                other.generator &&
                this.generator + ".minus(" + other.generator + ")";
            return this.intersection(other.flipped(), true, true, generator, infoFactory);
        }
        plus(other, infoFactory) {
            const generator = this.generator &&
                other.generator &&
                this.generator + ".plus(" + other.generator + ")";
            return this.flipped()
                .intersection(other.flipped(), true, true, generator, infoFactory)
                .flipped();
        }
        and(other, infoFactory) {
            const generator = this.generator &&
                other.generator &&
                this.generator + ".and(" + other.generator + ")";
            return this.intersection(other, true, true, generator, infoFactory);
        }
        xor(other, infoFactory) {
            const generator = this.generator &&
                other.generator &&
                this.generator + ".xor(" + other.generator + ")";
            return new BRep(this.minus(other, infoFactory).faces.concat(other.minus(this, infoFactory).faces), this.infiniteVolume != other.infiniteVolume, generator);
        }
        equals(obj) {
            return (this.faces.length == obj.faces.length &&
                this.faces.every((face) => obj.faces.some((face2) => face.equals(face2))));
        }
        like(brep) {
            return (this.faces.length == brep.faces.length &&
                this.faces.every((face) => brep.faces.some((face2) => face.likeFace(face2))));
        }
        //reconstituteCoplanarFaces(likeSurfacePlanes, edgeLooseSegments, faceMap, newFaces) {
        //    likeSurfacePlanes.forEach(faceGroup => {
        //        // calculate total contours
        //        let surface = faceGroup[0].surface, bag = []
        //        faceGroup.forEach(face => {
        //            Array.prototype.push.apply(bag, faceMap(face))
        //            face.getAllEdges().forEach(edge => {
        //                let edgeSubSegments
        //                if (edgeSubSegments = edgeLooseSegments.get(edge)) {
        //                    Array.prototype.push.apply(bag, edgeSubSegments)
        //                } else {
        //                    bag.push(edge)
        //                }
        //            })
        //        })
        //        let currentEdge, loops = []
        //        while (currentEdge = bag.find(edge => !edge.visited)) {
        //            let path = []
        //            do {
        //                currentEdge.visited = true
        //                path.push(currentEdge)
        //                let possibleNextEdges = bag.filter(edge => currentEdge.b.like(edge.a))
        //                // lowest angle, i.e. the right-most next edge
        //                let nextEdgeIndex = possibleNextEdges.indexWithMax((edge, index) =>
        // -currentEdge.bDir.angleRelativeNormal(edge.aDir, surface.normalP(currentEdge.b))) currentEdge =
        // possibleNextEdges[nextEdgeIndex] } while (!currentEdge.visited) let startIndex = path.find(currentEdge) if (-1
        // != startIndex) { loops.push(path.slice(startIndex)) } } }) }
        toString() {
            return `new BRep([\n${this.faces.join(",\n").replace(/^/gm, "\t")}], ${this.infiniteVolume})`;
        }
        getConstructorParameters() {
            return [this.faces, this.infiniteVolume];
        }
        toSource(useGenerator = true) {
            return ((useGenerator && this.generator) ||
                `new BRep([\n${this.faces.map(SCE).join(",\n").replace(/^/gm, "\t")}], ${this.infiniteVolume})`);
        }
        /**
         * Rightmost next segment doesn't work, as the correct next segment isn't obvious from the current corner
         * alone.
         * (at least, not without extensive pre-analysis on the face edges, which shouldn't be necessary, as the
         * correct new faces are defined by the new edges already.) Leftmost edge should work. Holes which touch the
         * edge of the face will be added to the face contour.
         *
         * New segments will always be part left-er than existing ones, so no special check is required.
         *
         */
        reconstituteFaces(oldFaces, edgeSubEdges, faceMap, newFaces, infoFactory) {
            const oldFaceStatuses = new Map();
            // reconstitute faces
            const insideEdges = [];
            for (const face of oldFaces) {
                const usableOldEdges = face
                    .getAllEdges()
                    .filter((edge) => !edgeSubEdges.get(edge));
                const subEdges = concatenated(mapFilter(face.getAllEdges(), (edge) => edgeSubEdges.get(edge)));
                const newEdges = faceMap.get(face) || [];
                if (newEdges.length || subEdges.length) {
                    oldFaceStatuses.set(face, "partial");
                    const loops = [];
                    // new edges are definitely part of a resulting loop
                    // old edges (both contour and holes) can either be part of a new loop, in which case they will already
                    // have been visited when starting a loop search with a new edge, OR they can be stranded, OR they can
                    // remain in their old loop
                    function getNextStart() {
                        return (newEdges.find((edge) => !visitedEdges.has(edge)) ||
                            subEdges.find((edge) => !visitedEdges.has(edge)) ||
                            usableOldEdges.find((edge) => !visitedEdges.has(edge)));
                    }
                    const visitedEdges = new Set();
                    // search for a loop:
                    let currentEdge;
                    while ((currentEdge = getNextStart())) {
                        const startEdge = currentEdge, edges = [];
                        let i = 0;
                        // wether only new edges are used (can include looseSegments)
                        do {
                            visitedEdges.add(currentEdge);
                            edges.push(currentEdge);
                            // find next edge
                            const possibleOldEdges = usableOldEdges.filter((edge) => currentEdge.b.like(edge.a));
                            const possibleSubEdges = subEdges.filter((edge) => currentEdge.b.like(edge.a));
                            const possibleNewEdges = newEdges.filter((edge) => currentEdge.b.like(edge.a));
                            const possibleEdges = possibleOldEdges.concat(possibleSubEdges, possibleNewEdges);
                            if (0 == possibleEdges.length)
                                break;
                            assert(0 < possibleEdges.length, () => face.sce);
                            const faceNormalAtCurrentB = face.surface.normalP(currentEdge.b);
                            const nextEdgeIndex = calcNextEdgeIndex(currentEdge, possibleEdges, faceNormalAtCurrentB);
                            currentEdge = possibleEdges[nextEdgeIndex];
                            if (visitedEdges.has(currentEdge)) {
                                break;
                            }
                            assert(currentEdge);
                            assert(currentEdge != startEdge);
                        } while (++i < 400);
                        if (400 == i) {
                            assert(false, "too many");
                        }
                        // check if we found a loop
                        if (edges.length > 1 && currentEdge == startEdge) {
                            loops.push(edges);
                        }
                    }
                    const faceNewFaces = BRep.assembleFacesFromLoops(loops, face.surface, face, infoFactory);
                    newFaces.push(...faceNewFaces);
                    const faceNewFacesEdges = faceNewFaces.flatMap((face) => face.getAllEdges());
                    insideEdges.push(...usableOldEdges.filter((edge) => faceNewFacesEdges.includes(edge)));
                }
            }
            while (insideEdges.length != 0) {
                const insideEdge = insideEdges.pop();
                const adjacentFaces = this.edgeFaces.get(insideEdge.getCanon());
                adjacentFaces.forEach((info) => {
                    if (!oldFaceStatuses.has(info.face)) {
                        oldFaceStatuses.set(info.face, "inside");
                        insideEdges.push.apply(insideEdges, info.face.getAllEdges());
                    }
                });
            }
            newFaces.push(...oldFaces.filter((face) => oldFaceStatuses.get(face) == "inside"));
        }
        static getLooseEdgeSegments(edgePointInfoss, edgeFaces) {
            const result = new JavaMap();
            // if there are no point info, the original edge will be kept, so we should return nothing
            // otherwise, something will be returned, even if it a new edge identical to the base edge
            for (const [canonEdge, pointInfos] of edgePointInfoss) {
                if (0 == pointInfos.length)
                    continue;
                const allFaces = edgeFaces.get(canonEdge);
                pointInfos.sort((a, b) => snap0(a.edgeT - b.edgeT) || +!!undefined);
                let startP = canonEdge.a, startDir = canonEdge.aDir, startT = canonEdge.aT, startInfo;
                function addNewEdge(startInfo, endInfo, newEdge) {
                    for (let i = 0; i < allFaces.length; i++) {
                        const faceInfo = allFaces[i];
                        mapPush(result, !faceInfo.reversed ? canonEdge : canonEdge.flipped(), !faceInfo.reversed ? newEdge : newEdge.flipped());
                    }
                }
                for (let i = 0; i < pointInfos.length; i++) {
                    const info = pointInfos[i];
                    const pDir = canonEdge.tangentAt(info.edgeT);
                    if (!eq(info.edgeT, startT)) {
                        const newEdge = createEdge(canonEdge.curve, startP, info.p, startT, info.edgeT, undefined, startDir, pDir, "looseSegment" + getGlobalId());
                        addNewEdge(startInfo, info, newEdge);
                    }
                    startP = info.p;
                    startT = info.edgeT;
                    startInfo = info;
                    startDir = pDir;
                }
                if (startInfo && !eq(startT, canonEdge.bT)) {
                    const newEdge = createEdge(canonEdge.curve, startP, canonEdge.b, startT, canonEdge.bT, undefined, startDir, canonEdge.bDir, "looseSegment" + getGlobalId());
                    addNewEdge(startInfo, undefined, newEdge);
                }
            }
            return result;
        }
        getIntersectionEdges(brep2) {
            const faceMap = new Map(), thisEdgePoints = new JavaMap(), otherEdgePoints = new JavaMap();
            const checkedPairs = new JavaSet();
            this.faces.forEach((face) => {
                //console.log('face', face.toString())
                brep2.faces.forEach((face2) => {
                    //console.log('face2', face2.toString())
                    face.intersectFace(face2, this, brep2, faceMap, thisEdgePoints, otherEdgePoints, checkedPairs);
                });
            });
            return concatenated(Array.from(faceMap.values()));
        }
        shellCount() {
            const foundFaces = new Set();
            let face, result = 0;
            while ((face = this.faces.find((face) => !foundFaces.has(face)))) {
                result++;
                const stack = [face];
                while ((face = stack.pop())) {
                    // @ts-ignore
                    for (const edge of face.getAllEdges()) {
                        // @ts-ignore
                        for (const { face: face2 } of this.edgeFaces.get(edge.getCanon())) {
                            if (face !== face2 && !foundFaces.has(face2)) {
                                foundFaces.add(face2);
                                stack.push(face2);
                            }
                        }
                    }
                }
            }
            return result;
        }
        getAABB() {
            return AABB.forAABBs(this.faces.map((face) => face.getAABB()));
        }
        assertSanity() {
            // const allFaceEdges = this.faces.flatMap(face => face.getAllEdges())
            // for (const { i, j } of combinations(allFaceEdges.length)) {
            // const a = allFaceEdges[i],
            // 	b = allFaceEdges[j]
            // assert(i == j || !a.isCoEdge(b) || a == b || a.flippedOf == b, 'coedges not linked properly', a, b)
            // assert(
            // 	i == j ||
            // 		!a.curve.isColinearTo(b.curve) ||
            // 		(a.curve.equals(b.curve) && a.isCoEdge(b)) ||
            // 		!a.overlaps(b),
            // 	'colinear edges overlap',
            // 	a,
            // 	b,
            // )
            // }
            this.buildAdjacencies();
            for (const [canonEdge, edgeFaceInfos] of this.edgeFaces) {
                // TODO handle curved faces
                assert(edgeFaceInfos.length % 2 == 0, () => canonEdge + edgeFaceInfos.sce);
            }
        }
        //intersection3(other: BRep, buildThis: boolean, buildOther: boolean, name?: string): BRep {
        //    this.assertSanity()
        //    other.assertSanity()
        //    this.buildAdjacencies()
        //    other.buildAdjacencies()
        //
        //    // edge / edge
        //    for (const [edge1, edge1Faces] of this.edgeFaces) {
        //        for (const [edge2, edge2Faces] of other.edgeFaces) {
        //            const curve1 = edge1.curve, curve2 = edge2.curve
        //            if (curve1.isColinearTo(curve2)) {
        //                if (edge1.overlaps(edge2)) {
        //                    // faces have a common edge
        //                    const aT = curve1.pointT(edge2.a), bT = curve1.pointT(edge2.a)
        //                    const minT = min(aT, bT), maxT = max(aT, bT)
        //                    const commonEdge = createEdge(curve1, min(edge1.minT, minT), min(edge1.maxT, maxT), )
        //                }
        //            } else if (x = curve1.isInfosWithCurve(edge2.curve)) {
        //                // edges intersect in a point
        //            }
        //        }
        //    }
        //
        //    // point / edge
        //    function pointEdge(b1, b2, has, add) {
        //        for (const v1 of this.vertFaces.keys()) {
        //            for (const edge2 of other.edgeFaces.keys()) {
        //                if (edge2.curve.containsPoint(v1)) {
        //                    const edge2T = edge2.curve.pointT(v1)
        //                    if (eq(edge2.aT, edge2T) || eq(edge2.bT, edge2T)) {
        //                        add(v1, eq(edge2.aT, edge2T) ? edge2.a : edge2.b)
        //                    }
        //                }
        //            }
        //        }
        //    }
        //    const pairs: CustomSet<[Equalable, Equalable]> = new CustomSet<[Equalable, Equalable]>()
        //    pointEdge(this, other, (a, b) => pairs.has([a, b]), (a, b) => pairs.add([a, b]))
        //    pointEdge(other, this, (b, a) => pairs.has([a, b]), (b, a) => pairs.add([a, b]))
        //
        //
        //    // point / point
        //    for (const v1 of this.vertFaces.keys()) {
        //        for (const v2 of other.vertFaces.keys()) {
        //            if (v1.like(v2)) {
        //
        //            }
        //        }
        //    }
        //
        //    for (const face1 of this.faces) {
        //        for (const face2 of other.faces) {
        //            face1.intersectFace(face2)
        //        }
        //    }
        //
        //}
        buildAdjacencies() {
            if (this.edgeFaces)
                return this;
            this.edgeFaces = new JavaMap();
            for (const face of this.faces) {
                for (const edge of face.getAllEdges()) {
                    const canon = edge.getCanon();
                    const normalAtCanonA = face.surface.normalP(canon.a);
                    const inside = normalAtCanonA.cross(canon == edge ? edge.aDir : edge.bDir);
                    mapPush(this.edgeFaces, canon, {
                        face: face,
                        edge: edge,
                        normalAtCanonA: normalAtCanonA,
                        reversed: canon != edge,
                        inside: inside,
                        angle: 0,
                    });
                }
            }
            for (const [canonEdge, edgeFaceInfos] of this.edgeFaces) {
                // TODO handle curved faces
                //assert(edgeFaceInfos.length % 2 == 0, () => canonEdge + edgeFaceInfos.sce)
                const faceInfo0 = edgeFaceInfos.find((faceInfo) => faceInfo.reversed);
                if (!faceInfo0) {
                    console.warn("invalid brep");
                    continue;
                }
                edgeFaceInfos.forEach((faceInfo) => {
                    if (faceInfo != faceInfo0) {
                        faceInfo.angle = faceInfo0.inside.angleRelativeNormal(faceInfo.inside, canonEdge.aDir.unit());
                        if (faceInfo.angle < 0)
                            faceInfo.angle += 2 * Math.PI;
                    }
                });
                edgeFaceInfos.sort((a, b) => snap(a.angle - b.angle, 0)); // TODO  || assertNever()
            }
            return this;
        }
        /**
         * Cases for volumes A and B
         *
         *          1.  Volumes do not touch.
         *          2.  face/face Face surfaces intersect each other.
         *              implies edges going through faces.
         *              e.g. box(5, 5, 5) - box(5, 5, 5).translate(1, 1, 1)
         *          3.  face/edge Edge of A lies in a face of B
         *              implies vertices of A lying in face of B
         *              e.g. box(5, 5, 5) - box(3, 3, 3).rotateZ([0, 1, 2] * PI / 2).translate(0, 1, 1)
         *          4.  edge/edge Two edges are colinear.
         *              implies vertex of A lying in edge of B
         *           5.  vertex/edge Vertex of A lies on edge of B (but no edge/edge)
         *          6.  vertex/vertex with/without edge/edge, edge/face and face/face intersections
         *          7.  vertex lies in face
         *
         *
         *
         */
        intersection(other, buildThis, buildOther, generator, infoFactory) {
            this.assertSanity();
            other.assertSanity();
            this.buildAdjacencies();
            other.buildAdjacencies();
            const faceMap = new Map();
            const thisEdgePoints = new JavaMap(), otherEdgePoints = new JavaMap();
            const checkedPairs = new JavaSet();
            for (const thisFace of this.faces) {
                for (const otherFace of other.faces) {
                    thisFace.intersectFace(otherFace, this, other, faceMap, thisEdgePoints, otherEdgePoints, checkedPairs);
                }
            }
            for (const edge of thisEdgePoints.keys()) {
                assert(this.edgeFaces.get(edge));
            }
            for (const edge of otherEdgePoints.keys()) {
                assert(other.edgeFaces.get(edge));
            }
            const newFaces = [];
            if (0 == faceMap.size &&
                0 == thisEdgePoints.size &&
                0 == otherEdgePoints.size) {
                const thisInOther = other.containsPoint(this.faces[0].contour[0].a, true) !==
                    other.infiniteVolume;
                const otherInThis = !thisInOther &&
                    this.containsPoint(other.faces[0].contour[0].a) !== this.infiniteVolume;
                if (thisInOther || otherInThis) {
                    const [inside, outside] = thisInOther ? [this, other] : [other, this];
                    if (inside.infiniteVolume) {
                        if (outside.infiniteVolume) {
                            return outside;
                        }
                        else {
                            return BRep.join([inside, outside]);
                        }
                    }
                    else {
                        if (outside.infiniteVolume) {
                            return BRep.EMPTY;
                        }
                        else {
                            return inside;
                        }
                    }
                }
                else {
                    if (this.infiniteVolume) {
                        if (other.infiniteVolume) {
                            return BRep.join([this, other]);
                        }
                    }
                    else {
                        if (other.infiniteVolume) {
                            return this;
                        }
                        else {
                            return BRep.EMPTY;
                        }
                    }
                }
                return BRep.EMPTY;
            }
            else {
                if (buildThis) {
                    const edgeLooseSegments = BRep.getLooseEdgeSegments(thisEdgePoints, this.edgeFaces);
                    // @ts-ignore
                    const els = this.faces.map((face) => [
                        face,
                        Array.from(edgeLooseSegments.entries()).flatMap(([edge, subs]) => face.getAllEdges().some((e) => e.equals(edge)) ? subs : []),
                    ]);
                    this.reconstituteFaces(this.faces, edgeLooseSegments, faceMap, newFaces, infoFactory);
                }
                if (buildOther) {
                    const edgeLooseSegments = BRep.getLooseEdgeSegments(otherEdgePoints, other.edgeFaces);
                    // @ts-ignore
                    const els = other.faces.map((face) => [
                        face,
                        Array.from(edgeLooseSegments.entries()).flatMap(([edge, subs]) => face.getAllEdges().some((e) => e.equals(edge)) ? subs : []),
                    ]);
                    other.reconstituteFaces(other.faces, edgeLooseSegments, faceMap, newFaces, infoFactory);
                }
            }
            //buildCoplanar && this.reconstituteCoplanarFaces(likeSurfaceFaces, edgeLooseSegments, faceMap, newFaces,
            // this.infiniteVolume, other.infiniteVolume)
            const result = new BRep(newFaces, this.infiniteVolume && other.infiniteVolume, generator);
            //result.buildAdjacencies()
            return result;
        }
        transform(m4, desc) {
            let vertexNames;
            if (this.vertexNames) {
                vertexNames = new Map();
                this.vertexNames.forEach((name, vertex) => vertexNames.set(m4.transformPoint(vertex), name + desc));
            }
            return new BRep(this.faces.map((f) => f.transform(m4)), this.infiniteVolume, this.generator && desc && this.generator + desc, // if desc isn't set, the generator will be invalid
            vertexNames);
        }
        transform4(m4, desc) {
            let vertexNames;
            if (this.vertexNames) {
                vertexNames = new Map();
                this.vertexNames.forEach((name, vertex) => vertexNames.set(m4.transformPoint(vertex), name + desc));
            }
            return new BRep(this.faces.map((f) => f.transform4(m4)), this.infiniteVolume, this.generator && desc && this.generator + desc, // if desc isn't set, the generator will be invalid
            vertexNames);
        }
        flipped() {
            return new BRep(this.faces.map((f) => f.flipped()), !this.infiniteVolume, this.generator && this.generator + ".flipped()", this.vertexNames);
        }
    }
    BRep.EMPTY = new BRep([], false, "BRep.EMPTY", new Map()).buildAdjacencies();
    BRep.R3 = new BRep([], true, "BRep.R3", new Map()).buildAdjacencies();
    function dotCurve(v, cDir, cDDT) {
        let dot = v.dot(cDir);
        if (eq0(dot)) {
            dot = v.dot(cDDT);
        }
        assert(!eq0(dot));
        return dot;
    }
    function dotCurve2(curve, t, normal, sign) {
        assert(sign == 1 || sign == -1, sign);
        const tangentDot = curve.tangentAt(t).dot(normal);
        // if tangentDot != 0 the curve simply crosses the plane
        if (!eq0(tangentDot)) {
            return sign * tangentDot;
        }
        if (curve.ddt) {
            const ddtDot = curve.ddt(t).dot(normal);
            // tangentDot == 0 ==> critical point at t, if ddtDot != 0, then it is a turning point, otherwise we can't be sure
            // and must do a numeric test
            if (!eq0(ddtDot)) {
                return ddtDot;
            }
        }
        const numericDot = curve
            .at(t)
            .to(curve.at(t + sign * 4 * NLA_PRECISION))
            .dot(normal);
        assert(!(curve instanceof L3));
        return numericDot;
    }
    const INSIDE = 0, OUTSIDE = 1, COPLANAR_SAME = 2, COPLANAR_OPPOSITE = 3, ALONG_EDGE_OR_PLANE = 4;
    /**
     *
     * @param brep BREP to check
     * @param edge edge to check
     * @param dirAtEdgeA the direction vector to check
     * @param faceNormal If dirAtEdgeA doesn't split a volume, but is along a face, the returned value depends on
     *     wether that faces normal1 points in the same direction as faceNormal
     * @returns INSIDE, OUTSIDE, COPLANAR_SAME or COPLANAR_OPPOSITE
     */
    //function splitsVolumeEnclosingFaces(brep: BRep, edge: Edge, dirAtEdgeA: V3, faceNormal: V3): int {
    //    assert(arguments.length == 4)
    //    //assert(p.equals(edge.a))
    //    const ab1 = edge.aDir.unit()
    //    const relFaces = facesWithEdge(edge, brep.faces) as any[]
    //    relFaces.forEach(faceInfo => {
    //        faceInfo.normalAtEdgeA = faceInfo.face.surface.normalP(edge.a)
    //        faceInfo.edgeDirAtEdgeA = !faceInfo.reversed
    //            ? faceInfo.edge.aDir
    //            : faceInfo.edge.bDir
    //        faceInfo.outsideVector = faceInfo.edgeDirAtEdgeA.cross(faceInfo.normalAtEdgeA)
    //        faceInfo.angle = (dirAtEdgeA.angleRelativeNormal(faceInfo.outsideVector.negated(), ab1) + 2 * Math.PI +
    // NLA_PRECISION / 2) % (2 * Math.PI) }) assert(relFaces.length != 0, edge.toSource()) relFaces.sort((a, b) => a.angle
    // - b.angle) // assert(relFaces.length % 2 == 0, edge.toSource()) // even number of touching faces  if
    // (eq0(relFaces[0].angle)) { //assert(false) todo const coplanarSame = relFaces[0].normalAtEdgeA.dot(faceNormal) > 0;
    // return coplanarSame ? COPLANAR_SAME : COPLANAR_OPPOSITE } else { return !relFaces[0].reversed ? INSIDE : OUTSIDE } }
    function splitsVolumeEnclosingFaces(brep, canonEdge, dirAtEdgeA, faceNormal) {
        assert(arguments.length == 4);
        assert(canonEdge == canonEdge.getCanon());
        //assert(p.equals(canonEdge.a))
        const edgeFaceInfos = brep.edgeFaces.get(canonEdge);
        assertf(() => edgeFaceInfos.length % 2 == 0);
        assertf(() => brep.edgeFaces);
        const faceInfo0 = edgeFaceInfos[0];
        const aDir1 = canonEdge.aDir.unit();
        const angleToCanon = ((faceInfo0.inside.angleRelativeNormal(dirAtEdgeA, aDir1) +
            2 * Math.PI +
            NLA_PRECISION) %
            (2 * Math.PI)) -
            NLA_PRECISION;
        const nearestFaceInfoIndex = edgeFaceInfos.findIndex((faceInfo) => lt(angleToCanon, faceInfo.angle));
        const nearestFaceInfo = edgeFaceInfos[nearestFaceInfoIndex == -1
            ? edgeFaceInfos.length - 1
            : nearestFaceInfoIndex - 1];
        if (eq(nearestFaceInfo.angle, angleToCanon)) {
            //assert(false) todo
            const coplanarSame = nearestFaceInfo.normalAtCanonA.dot(faceNormal) > 0;
            return coplanarSame ? COPLANAR_SAME : COPLANAR_OPPOSITE;
        }
        else {
            return nearestFaceInfo.reversed ? INSIDE : OUTSIDE;
        }
    }
    function splitsVolumeEnclosingFacesP(brep, canonEdge, p, pInside, pFaceNormal) {
        assert(arguments.length == 5);
        assert(canonEdge == canonEdge.getCanon());
        //assert(p.equals(canonEdge.a))
        assertf(() => brep.edgeFaces);
        const edgeFaceInfos = brep.edgeFaces.get(canonEdge);
        assertf(() => edgeFaceInfos.length % 2 == 0);
        const pDir1 = canonEdge.tangentAt(canonEdge.curve.pointT(p)).unit();
        const faceInfoAngleFromPInsideNeg = (faceInfo) => {
            const faceInfoPDir = faceInfo.edge.getCanon() == faceInfo.edge ? pDir1 : pDir1.negated();
            const faceInfoInsideAtP = faceInfo.face.surface
                .normalP(p)
                .cross(faceInfoPDir);
            const faceInfoAngleAtP = pInside.angleRelativeNormal(faceInfoInsideAtP, pDir1);
            return -(((faceInfoAngleAtP + TAU + NLA_PRECISION) % TAU) - NLA_PRECISION);
        };
        const nearestFaceInfo = withMax$1(edgeFaceInfos, faceInfoAngleFromPInsideNeg);
        if (eq0(faceInfoAngleFromPInsideNeg(nearestFaceInfo))) {
            //assert(false) todo
            const coplanarSame = nearestFaceInfo.face.surface.normalP(p).dot(pFaceNormal) > 0;
            return coplanarSame ? COPLANAR_SAME : COPLANAR_OPPOSITE;
        }
        else {
            return nearestFaceInfo.reversed ? OUTSIDE : INSIDE;
        }
    }
    function splitsVolumeEnclosingFacesP2(brep, canonEdge, p, testCurve, curveT, dir, faceNormal) {
        assert(canonEdge == canonEdge.getCanon());
        //assert(p.equals(canonEdge.a))
        assertf(() => brep.edgeFaces);
        const edgeFaceInfos = brep.edgeFaces.get(canonEdge);
        assertf(() => edgeFaceInfos.length % 2 == 0);
        const pDir1 = canonEdge.tangentAt(canonEdge.curve.pointT(p)).unit();
        let pInside = testCurve.tangentAt(curveT).times(dir);
        if (pInside.isParallelTo(pDir1)) {
            pInside = testCurve
                .diff(curveT, (1e-4 * dir) / testCurve.tangentAt(curveT).length())
                .rejectedFrom(pDir1);
            pInside = pInside.div(pInside.length());
        }
        let minValue = 20, advanced = false, result = OUTSIDE;
        for (const faceInfo of edgeFaceInfos) {
            const faceInfoPDir = faceInfo.edge.getCanon() == faceInfo.edge ? pDir1 : pDir1.negated();
            const faceInfoInsideAtP = faceInfo.face.surface
                .normalP(p)
                .cross(faceInfoPDir);
            const faceInfoAngleAtP = pInside.angleRelativeNormal(faceInfoInsideAtP, pDir1);
            const angle = ((faceInfoAngleAtP + TAU + NLA_PRECISION) % TAU) - NLA_PRECISION;
            if (eq0(angle)) {
                // do advanced analysis
                const normVector = faceInfo.face.surface.normalP(p);
                if (faceInfo.face.surface.containsCurve(testCurve)) {
                    const coplanarSame = normVector.dot(faceNormal) > 0;
                    return coplanarSame ? COPLANAR_SAME : COPLANAR_OPPOSITE;
                }
                const testPlane = P3.normalOnAnchor(pDir1, p);
                const isCurve = faceInfo.face.surface.isCurvesWithPlane(testPlane)[0];
                const isCurvePT = isCurve.pointT(p);
                const dirFactor = sign$1(isCurve.tangentAt(isCurvePT).dot(pInside));
                const eps = 1e-4;
                const iscd = isCurve
                    .at(isCurvePT)
                    .to(isCurve.at(isCurvePT + dir * dirFactor * eps))
                    .dot(normVector);
                const ecd = testCurve
                    .at(curveT)
                    .to(testCurve.at(curveT + dir * eps))
                    .dot(normVector);
                const diff = (iscd - ecd) * (faceInfo.reversed ? -1 : 1);
                if (diff > 0 && (!advanced || diff < minValue)) {
                    advanced = true;
                    minValue = diff;
                    result = faceInfo.reversed ? OUTSIDE : INSIDE;
                }
            }
            else if (!advanced) {
                if (angle < minValue) {
                    minValue = angle;
                    result = faceInfo.reversed ? OUTSIDE : INSIDE;
                }
            }
        }
        return result;
    }
    function splitsVolumeEnclosingCone(brep, p, dir) {
        const testPlane = P3.forAnchorAndPlaneVectors(p, dir, dir.getPerpendicular());
        const rays = [];
        for (let k = 0; k < brep.faces.length; k++) {
            const planeFace = brep.faces[k];
            assertf(() => planeFace instanceof PlaneFace);
            if (planeFace.getAllEdges().some((edge) => edge.a.like(p))) {
                if (testPlane.isParallelToPlane(planeFace.surface.plane)) {
                    if (planeFace.pointsToInside(p, dir) != PointVsFace.OUTSIDE) {
                        return ALONG_EDGE_OR_PLANE;
                    }
                }
                else {
                    const isLine = L3.fromPlanes(testPlane, planeFace.surface.plane);
                    const ps = planeFace.edgeISPsWithPlane(isLine, testPlane);
                    let i = 0;
                    while (i < ps.length) {
                        const a = ps[i++], b = ps[i++];
                        const out = a.p.like(p);
                        if (out || b.p.like(p)) {
                            const dir2 = out ? isLine.dir1 : isLine.dir1.negated();
                            const angle = (dir.angleRelativeNormal(dir2, testPlane.normal1) +
                                2 * Math.PI +
                                NLA_PRECISION / 2) %
                                (2 * Math.PI);
                            rays.push({ angle: angle, out: out });
                        }
                    }
                }
            }
        }
        rays.sort((a, b) => a.angle - b.angle);
        //console.log("testPlane"Plane.toSource(), "rays", rays.toSource())
        if (eq0(rays[0].angle)) {
            return ALONG_EDGE_OR_PLANE;
        }
        else {
            return rays[0].out ? OUTSIDE : INSIDE;
        }
    }
    function splitsVolumeEnclosingCone2(brep, p, curve, curveT, fb) {
        assert(curve.containsPoint(p));
        const pFaces = brep.faces.filter((face) => face.getAllEdges().some((edge) => edge.a.like(p)));
        for (let k = 0; k < pFaces.length; k++) {
            const face = pFaces[k];
            if (face.surface.containsCurve(curve)) {
                //assert(false)
                if (face.pointsToInside3(p, curve, curveT, fb) != PointVsFace.OUTSIDE) {
                    return ALONG_EDGE_OR_PLANE;
                }
            }
        }
        const EPS = 1e-6;
        return brep.containsPoint(curve.at(curveT + fb * EPS), true)
            ? INSIDE
            : OUTSIDE;
    }
    function fff(info, surface) {
        const canonA = info.edge.reversed ? info.edge.b : info.edge.a;
        const surfaceNormalAtCanonA = surface.normalP(canonA);
        const dot = snap0(info.inside.dot(surfaceNormalAtCanonA));
        if (0 !== dot) {
            return 0 < dot ? OUTSIDE : INSIDE;
        }
        if (surface.isCoplanarTo(info.face.surface)) {
            return 0 < info.normalAtCanonA.dot(surfaceNormalAtCanonA)
                ? COPLANAR_SAME
                : COPLANAR_OPPOSITE;
        }
        throw new Error();
    }
    function triangulateVertices(normal, vertices, holeStarts) {
        const absMaxDim = normal.maxAbsDim(), factor = sign$1(normal.e(absMaxDim));
        const contour = new Float64Array(vertices.length * 2);
        let i = vertices.length;
        /*
           var [coord0, coord1] = [['y', 'z'], ['z', 'x'], ['x', 'y']][maxAbsDim]
           while (i--) {
           contour[i * 2    ] = vertices[i][coord0] * factor
           contour[i * 2 + 1] = vertices[i][coord1]
           }
           */
        while (i--) {
            // unroll disambiguation instead of accessing elements by string name ([coord0] etc)
            // as it confuses google closure
            switch (absMaxDim) {
                case 0:
                    contour[i * 2] = vertices[i].y * factor;
                    contour[i * 2 + 1] = vertices[i].z;
                    break;
                case 1:
                    contour[i * 2] = vertices[i].z * factor;
                    contour[i * 2 + 1] = vertices[i].x;
                    break;
                case 2:
                    contour[i * 2] = vertices[i].x * factor;
                    contour[i * 2 + 1] = vertices[i].y;
                    break;
            }
        }
        return earcut_1(contour, holeStarts);
    }
    /**
     * Solves a quadratic system of equations of the form
     *      a * x + b * y = c
     *      x² + y² = 1
     * This can be understood as the intersection of the unit circle with a line.
     *      => y = (c - a x) / b
     *      => x² + (c - a x)² / b² = 1
     *      => x² b² + c² - 2 c a x + a² x² = b²
     *      => (a² + b²) x² - 2 a c x + (c² - b²) = 0
     *
     * a * b + (b -c) * (b + c)
     */
    function intersectionUnitCircleLine(a, b, c) {
        assertNumbers(a, b, c);
        // TODO: disambiguate on a < b
        const term = sqrt$1(a * a + b * b - c * c);
        return {
            x1: (a * c + b * term) / (a * a + b * b),
            x2: (a * c - b * term) / (a * a + b * b),
            y1: (b * c - a * term) / (a * a + b * b),
            y2: (b * c + a * term) / (a * a + b * b),
        };
    }
    function intersectionUnitCircleLine2(a, b, c) {
        assertNumbers(a, b, c);
        // TODO: disambiguate on a < b
        // cf. pqFormula
        const termSqr = snap0(a * a + b * b - c * c);
        if (termSqr < 0) {
            return [];
        }
        else if (termSqr == 0) {
            return [[(a * c) / (a * a + b * b), (b * c) / (a * a + b * b)]];
        }
        else {
            const term = sqrt$1(termSqr);
            return [
                [
                    (a * c + b * term) / (a * a + b * b),
                    (b * c - a * term) / (a * a + b * b),
                ],
                [
                    (a * c - b * term) / (a * a + b * b),
                    (b * c + a * term) / (a * a + b * b),
                ],
            ];
        }
    }
    function intersectionCircleLine(a, b, c, r) {
        assertNumbers(a, b, c, r);
        const term = sqrt$1(r * r * (a * a + b * b) - c * c);
        return {
            x1: (a * c + b * term) / (a * a + b * b),
            x2: (a * c - b * term) / (a * a + b * b),
            y1: (b * c - a * term) / (a * a + b * b),
            y2: (b * c + a * term) / (a * a + b * b),
        };
    }
    /**
     * Solves a quadratic system of equations of the form
     *      a * x + b * y = c
     *      x^2 - y^2 = 1
     * This can be understood as the intersection of the unit hyperbola with a line.
     *
     * @returns with x1 >= x2 and y1 <= y2
     * a * b + (b -c) * (b + c)
     */
    function intersectionUnitHyperbolaLine(a, b, c) {
        assertNumbers(a, b, c);
        const aa = a * a, bb = b * b, cc = c * c;
        // TODO: disambiguate on a < b
        //var xTerm = sqrt(4*cc*aa-4*(bb-aa)*(-cc-bb))
        const xTerm = 2 * sqrt$1(bb * cc + bb * bb - aa * bb);
        const yTerm = sqrt$1(4 * cc * bb - 4 * (bb - aa) * (cc - aa));
        return {
            x1: (-2 * a * c + xTerm) / 2 / (bb - aa),
            x2: (-2 * a * c - xTerm) / 2 / (bb - aa),
            y1: (2 * b * c - yTerm) / 2 / (bb - aa),
            y2: (2 * b * c + yTerm) / 2 / (bb - aa),
        };
    }
    function curvePointPP(ps1, ps2, startPoint, dontCheck) {
        const EPS = NLA_PRECISION / 4;
        //if (!dontCheck) {
        //    const p = curvePointPP(ps1, ps2, startPoint, true).p
        //    if (!ps1.containsPoint(p)) {
        //        console.log("foo, startPoint was " + startPoint.sce)
        //        ps1.containsPoint(p)
        //    }
        //}
        let Q = startPoint;
        let st1 = ps1.pointFoot(Q);
        let st2 = ps2.pointFoot(Q);
        let a, b, aNormal, bNormal, abNormalsCross;
        //console.log("curvePointPP, startPoint was " + startPoint.sce)
        //console.log(Q.sce+ ',')
        let i = 16;
        do {
            a = ps1.pUV(st1.x, st1.y);
            b = ps2.pUV(st2.x, st2.y);
            if (eq0(a.distanceTo(b), EPS))
                break;
            // drPs.push({p:a,text:'a'+j+' '+i})
            // drPs.push({p:b,text:'b'+j+' '+i})
            aNormal = ps1.normalUV(st1.x, st1.y);
            bNormal = ps2.normalUV(st2.x, st2.y);
            // next Q is the intersection of the planes
            // (x - a) * aNormal,
            // (x - b) * bNormal and
            // (x - Q) * (aNormal X bNormal)
            abNormalsCross = aNormal.cross(bNormal);
            // drVs.push({anchor: Q, dir: aNormal})
            // drVs.push({anchor: Q, dir: bNormal})
            Q = V3.add(bNormal.cross(abNormalsCross).times(a.dot(aNormal)), abNormalsCross.cross(aNormal).times(b.dot(bNormal)), abNormalsCross.times(abNormalsCross.dot(Q))).div(abNormalsCross.squared());
            //console.log(Q.sce+ ',')
            // feet of Q on ps1 and ps2 (closest points)
            st1 = ps1.pointFoot(Q, st1.x, st1.y);
            st2 = ps2.pointFoot(Q, st2.x, st2.y);
        } while (--i);
        //assert(ps1.containsPoint(Q), Q, ps1)
        //assert(ps2.containsPoint(Q))
        if (!eq0(a.distanceTo(b), EPS)) {
            return undefined;
        }
        return { p: Q, st1: st1, st2: st2 };
    }
    /**
     * Follow the intersection curve of two parametric surfaces starting from a given point.
     * @param {ParametricSurface} ps1
     * @param {ParametricSurface} ps2
     * @param {number} s1Step
     * @param {number} t1Step
     * @param {number} s2Step
     * @param {number} t2Step
     * @param {number} curveStepSize
     * @return {Curve[]}
     */
    function followAlgorithmPP(ps1, ps2, startPoint, curveStepSize, bounds1 = uvInAABB2.bind(undefined, ps1), bounds2 = uvInAABB2.bind(undefined, ps2)) {
        const points = [];
        const tangents = [];
        const st1s = [];
        const st2s = [];
        let Q = startPoint;
        let st1 = ps1.uvP(Q);
        let st2 = ps2.uvP(Q);
        assert(ps1.pUV(st1.x, st1.y).like(Q));
        assert(st1.like(ps1.pointFoot(Q, st1.x, st1.y)));
        assert(ps2.pUV(st2.x, st2.y).like(Q));
        assert(st2.like(ps2.pointFoot(Q, st2.x, st2.y)));
        for (let i = 0; i < 1000; i++) {
            ({ p: Q, st1, st2 } = curvePointPP(ps1, ps2, Q));
            assert(ps1.containsPoint(Q), Q, ps1);
            assert(ps2.containsPoint(Q));
            const aNormal = ps1.normalUV(st1.x, st1.y);
            const bNormal = ps2.normalUV(st2.x, st2.y);
            const tangent = aNormal.cross(bNormal).toLength(curveStepSize);
            tangents.push(tangent);
            points.push(Q);
            st1s.push(st1);
            st2s.push(st2);
            if (i > 4) {
                if (!bounds1(st1.x, st1.y) || !bounds2(st2.x, st2.y)) {
                    break;
                }
            }
            Q = Q.plus(tangent);
        }
        return { points, tangents, st1s, st2s };
    }
    /**
     * Iteratively calculate points on an implicit 2D curve.
     * @param ic The curve in question.
     * @param startP The point at which to start.
     * @param stepLength The step the algorithm takes. Will be the approximate distance between points.
     * @param bounds Bounds function.
     * @param endP End point. If undefined, algorithm will continue until out of bounds or back at start point.
     * @param startTangent TODO Ignore this.
     * @returns Calculated points and tangents. points[0] and tangents[0] will be startP and startTangent.
     */
    function followAlgorithm2d(ic, startP, stepLength = 0.5, bounds, validUV, endP, startTangent) {
        assertNumbers(stepLength, ic(0, 0));
        assertVectors(startP);
        if (!startTangent) {
            startTangent = new V3(-ic.y(startP.x, startP.y), ic.x(startP.x, startP.y), 0).toLength(stepLength);
        }
        assertVectors(startTangent);
        const points = [];
        const tangents = [];
        assert(eq0(ic(startP.x, startP.y), 0.01), "isZero(implicitCurve(startPoint.x, startPoint.y))", ic(startP.x, startP.y));
        let i = 0, p = startP, tangent = startTangent, fullLoop = false;
        do {
            points.push(p);
            tangents.push(tangent);
            const searchStart = p.plus(tangent);
            assert(searchStart);
            const newP = curvePointMF(ic, searchStart);
            const dfpdx = ic.x(newP.x, newP.y), dfpdy = ic.y(newP.x, newP.y);
            const newTangent = new V3(-dfpdy, dfpdx, 0).toLength(stepLength);
            //const reversedDir = p.minus(prevp).dot(tangent) < 0
            assert(!p.equals(newP));
            // check if we passed a singularity
            if (tangent.dot(newTangent) < 0) {
                const singularity = newtonIterate2d(ic.x, ic.y, p.x, p.y);
                if (eq0(ic(singularity.x, singularity.y)) &&
                    singularity.distanceTo(p) < abs$2(stepLength)) {
                    // end on this point
                    points.push(singularity);
                    tangents.push(p.to(singularity));
                    break;
                }
                else {
                    throw new Error();
                }
            }
            // check for endP
            if (endP && p.equals(endP)) {
                break;
            }
            // check if loop
            if (fullLoop) {
                if (p.distanceTo(startP) > abs$2(stepLength)) {
                    points.pop();
                    tangents.pop();
                    assert(getLast(points).distanceTo(startP) <= abs$2(stepLength));
                    break;
                }
            }
            else {
                if (i > 4 && p.distanceTo(startP) <= abs$2(stepLength)) {
                    fullLoop = true;
                }
            }
            // check if out of bounds
            if (i > 1 && !uvInAABB2(bounds, p.x, p.y)) {
                const endP = figureOutBorderPoint(bounds, p, ic);
                points.pop();
                tangents.pop();
                if (getLast(points).distanceTo(endP) < abs$2(stepLength) / 2) {
                    points.pop();
                    tangents.pop();
                }
                const endTangent = new V3(-ic.y(endP.x, endP.y), ic.x(endP.x, endP.y), 0).toLength(stepLength);
                points.push(endP);
                tangents.push(endTangent);
                break;
            }
            if (i > 4 && !validUV(p.x, p.y)) {
                break;
            }
            assert(eq0(ic(newP.x, newP.y), NLA_PRECISION * 2), p, newP, searchStart, ic(newP.x, newP.y));
            tangent = newTangent;
            p = newP;
        } while (++i < 1000);
        assert(i < 1000);
        //assert(points.length > 6)
        return { points, tangents };
    }
    /**
     * Given a point p just outside the bounds, figure out the nearby intersection of the bounds with the ic.
     * @param bounds
     * @param p
     * @param ic
     */
    function figureOutBorderPoint(bounds, p, ic) {
        if (p.x < bounds.uMin || bounds.uMax < p.x) {
            const u = bounds.uMax < p.x ? bounds.uMax : bounds.uMin;
            const v = newtonIterateWithDerivative((t) => ic(u, t), p.y, 4, (t) => ic.y(u, t));
            if (uvInAABB2(bounds, u, v)) {
                return new V3(u, v, 0);
            }
        }
        if (p.y < bounds.vMin || bounds.vMax < p.y) {
            const v = bounds.vMax < p.y ? bounds.vMax : bounds.vMin;
            const u = newtonIterateWithDerivative((s) => ic(s, v), p.x, 4, (s) => ic.x(s, v));
            assert(uvInAABB2(bounds, u, v));
            return new V3(u, v, 0);
        }
        throw new Error(p + " " + bounds);
    }
    function followAlgorithm2dAdjustable(ic, start, stepLength = 0.5, bounds, endp = start) {
        assertNumbers(stepLength, ic(0, 0));
        assertVectors(start);
        //assert (!startDir || startDir instanceof V3)
        const points = [];
        const tangents = [];
        assert(eq0(ic(start.x, start.y), 0.01), "isZero(implicitCurve(startPoint.x, startPoint.y))");
        let p = start, prevp = p;
        let i = 0;
        do {
            const dfpdx = ic.x(p.x, p.y), dfpdy = ic.y(p.x, p.y);
            const dfpdxx = ic.xx(p.x, p.y), dfpdyy = ic.yy(p.x, p.y), dfpdxy = ic.xy(p.x, p.y);
            const c2factor = abs$2((Math.pow(dfpdy, 2) * dfpdxx - 2 * dfpdx * dfpdy * dfpdxy + Math.pow(dfpdx, 2) * dfpdyy) /
                Math.pow((Math.pow(dfpdx, 2) + Math.pow(dfpdy, 2)), 2));
            const c2 = new V3(dfpdx, dfpdy, 0).times(c2factor);
            const s = 1 / 16 / c2.length();
            const tangent = new V3(-dfpdy, dfpdx, 0).unit();
            const newPStart = p.plus(tangent.times(s).plus(c2.times(Math.pow(s, 2) / 2)));
            points.push(p);
            tangents.push(tangent);
            prevp = p;
            const newP = curvePointMF(ic, newPStart);
            if (newP.equals(p)) {
                assertNever();
            }
            console.log(p.to(newP).length());
            p = newP;
            assert(eq0(ic(p.x, p.y)));
        } while (i++ < 1000 &&
            (i < 4 || prevp.distanceTo(endp) > stepLength) &&
            bounds(p.x, p.y));
        assert(i != 1000);
        //assert(bounds(p.x, p.y))
        const end = i < 4 || prevp.distanceTo(endp) > stepLength ? p : endp;
        const endTangent = new V3(-ic.y(end.x, end.y), ic.x(end.x, end.y), 0).toLength(stepLength);
        points.push(end);
        tangents.push(endTangent);
        //assert(points.length > 6)
        // TODO gleichmäßige Verteilung der Punkte
        return { points, tangents };
    }
    // both curves must be in the same s-t coordinates for this to make sense
    function intersectionICurveICurve(iCurve1, startParams1, endParams1, startDir, stepLength, iCurve2) {
        assertNumbers(stepLength, iCurve1(0, 0), iCurve2(0, 0));
        assertVectors(startParams1, endParams1);
        assert(!startDir || startDir instanceof V3);
        const vertices = [];
        assert(eq0(iCurve1(startParams1.x, startParams1.y)));
        stepLength = stepLength || 0.5;
        const eps = 1e-5;
        let p = startParams1, prevp = p; // startDir ? p.minus(startDir) : p
        let i = 0;
        while (i++ < 1000 && (i < 4 || p.distanceTo(endParams1) > 1.1 * stepLength)) {
            const fp = iCurve1(p.x, p.y);
            const dfpdx = (iCurve1(p.x + eps, p.y) - fp) / eps, dfpdy = (iCurve1(p.x, p.y + eps) - fp) / eps;
            let tangent = new V3(-dfpdy, dfpdx, 0).toLength(stepLength);
            if (p.minus(prevp).dot(tangent) < 0)
                tangent = tangent.negated();
            prevp = p;
            p = curvePointMF(iCurve1, p.plus(tangent));
            vertices.push(p);
        }
        // TODO gleichmäßige Verteilung der Punkte
        return vertices;
    }
    function intersectionICurveICurve2(iCurve1, loopPoints1, iCurve2) {
        let p = loopPoints1[0], val = iCurve2(p.x, p.y), lastVal;
        const iss = [];
        for (let i = 0; i < loopPoints1.length; i++) {
            lastVal = val;
            p = loopPoints1[i];
            val = iCurve2(p.x, p.y);
            if (val * lastVal <= 0) {
                // TODO < ?
                iss.push(newtonIterate2d(iCurve1, iCurve2, p.x, p.y));
            }
        }
        return iss;
    }
    // export function intersectionPCurveISurface(
    // 	parametricCurve: Curve,
    // 	searchStart: number,
    // 	searchEnd: number,
    // 	searchStep: number,
    // 	implicitSurface: ImplicitSurface,
    // ) {
    // 	assertNumbers(searchStart, searchEnd, searchStep)
    // 	const iss = []
    // 	let val = implicitSurface(parametricCurve(searchStart)),
    // 		lastVal
    // 	for (let t = searchStart + searchStep; t <= searchEnd; t += searchStep) {
    // 		lastVal = val
    // 		val = implicitSurface(parametricCurve(t))
    // 		if (val * lastVal <= 0) {
    // 			iss.push(newtonIterate1d(t => implicitSurface(parametricCurve(t)), t))
    // 		}
    // 	}
    // 	return iss
    // }
    function cassini(a, c) {
        return (x, y) => (x * x + y * y) * (x * x + y * y) -
            2 * c * c * (x * x - y * y) -
            (Math.pow(a, 4) - Math.pow(c, 4));
    }
    var MathFunctionR2R;
    (function (MathFunctionR2R) {
        function forNerdamer(expression, args = ["x", "y"]) {
            const ndf = nerdamer_core(expression);
            const ndfs = nerdamer_core.diff(ndf, args[0]);
            const ndft = nerdamer_core.diff(ndf, args[1]);
            const f = ndf.buildFunction(args);
            f.x = ndfs.buildFunction(args);
            f.y = ndft.buildFunction(args);
            f.xx = nerdamer_core.diff(ndfs, args[0]).buildFunction(args);
            f.xy = nerdamer_core.diff(ndfs, args[1]).buildFunction(args);
            f.yy = nerdamer_core.diff(ndft, args[1]).buildFunction(args);
            return f;
        }
        MathFunctionR2R.forNerdamer = forNerdamer;
        function nerdamerToR2_R(expression, args = ["x", "y"]) {
            return expression.buildFunction(args);
        }
        MathFunctionR2R.nerdamerToR2_R = nerdamerToR2_R;
        function forFFxFy(f, fx, fy) {
            f.x = fx;
            f.y = fy;
            return f;
        }
        MathFunctionR2R.forFFxFy = forFFxFy;
    })(MathFunctionR2R || (MathFunctionR2R = {}));
    const cas2 = cassini(0.9, 1.02);
    function arrayLerp(lerp, arr, t) {
        if (0 === t % 1)
            return arr[t];
        return lerp(arr[Math.floor(t)], arr[Math.ceil(t)], t % 1);
    }

    function doNotSerialize(target, key) {
        const map = target.__SERIALIZATION_BLACKLIST || (target.__SERIALIZATION_BLACKLIST = {});
        map[key] = "no";
    }
    class ClassSerializer {
        constructor() {
            this.CLASS_NAMES = new Map();
            this.NAME_CLASSES = new Map();
            this.addClass("Object", Object);
        }
        addClass(name, clazz) {
            if (this.NAME_CLASSES.has(name)) {
                throw new Error(name);
            }
            this.NAME_CLASSES.set(name, clazz);
            this.CLASS_NAMES.set(clazz, name);
            return this;
        }
        addNamespace(namespace, namespaceName) {
            Object.keys(namespace).forEach((symbol) => {
                const o = namespace[symbol];
                if ("function" == typeof o && o.name) {
                    this.addClass((namespaceName ? namespaceName + "." : "") + symbol, o);
                }
            });
            return this;
        }
        setUpdater(f) {
            this.updater = f;
            return this;
        }
        serialize(v) {
            return JSON.stringify(this.serializeObj(v));
        }
        serializeObj(v) {
            const gatherList = (v) => {
                //console.log(path.toString())
                if (undefined !== v &&
                    v.hasOwnProperty("constructor") &&
                    this.CLASS_NAMES.has(v.constructor)) ;
                else if (Array.isArray(v)) {
                    if (visited.has(v)) {
                        if (!listMap.has(v)) {
                            listMap.set(v, resultList.length);
                            resultList.push(v);
                        }
                    }
                    else {
                        visited.add(v);
                        for (let i = 0; i < v.length; i++) {
                            gatherList(v[i]);
                        }
                    }
                }
                else if (undefined !== v && "object" == typeof v) {
                    if (visited.has(v)) {
                        if (!listMap.has(v)) {
                            listMap.set(v, resultList.length);
                            resultList.push(v);
                        }
                    }
                    else {
                        assert(!v.__noxTarget || !visited.has(v.__noxTarget));
                        assert(!v.__noxProxy || !visited.has(v.__noxProxy));
                        visited.add(v);
                        if (!v.getConstructorParameters) {
                            for (const key of Object.keys(v).sort()) {
                                if (key == "__noxProxy" || key == "__noxTarget")
                                    continue;
                                if (!v.__SERIALIZATION_BLACKLIST ||
                                    !v.__SERIALIZATION_BLACKLIST[key]) {
                                    gatherList(v[key]);
                                }
                            }
                        }
                        gatherList(Object.getPrototypeOf(v));
                    }
                }
            };
            const transform = (v, allowLinks, first) => {
                if ("string" == typeof v ||
                    "number" == typeof v ||
                    "boolean" == typeof v ||
                    null === v) {
                    return v;
                }
                if ("undefined" == typeof v) {
                    return { "#REF": -1 };
                }
                if (v.hasOwnProperty("constructor") &&
                    this.CLASS_NAMES.has(v.constructor)) {
                    return { "#REF": this.CLASS_NAMES.get(v.constructor) };
                }
                let index;
                if (allowLinks && !first && undefined !== (index = listMap.get(v))) {
                    return { "#REF": index };
                }
                if (Array.isArray(v)) {
                    return v.map((x) => transform(x, allowLinks));
                }
                //if (mobx && mobx.isObservableArray(v)) {
                //	const result = {'#PROTO': 'ObservableArray'} as any
                //	v.forEach((val, i) => result[i] = transform(val))
                //	return result
                //}
                if ("object" == typeof v) {
                    if (v.getConstructorParameters) {
                        return {
                            "#CONSTRUCTOR": this.CLASS_NAMES.get(v.constructor),
                            "#ARGS": transform(v.getConstructorParameters(), false),
                        };
                    }
                    const result = {};
                    if (Object.prototype !== Object.getPrototypeOf(v)) {
                        result["#PROTO"] = transform(Object.getPrototypeOf(v), allowLinks);
                    }
                    for (const key of Object.keys(v)) {
                        if (key == "__noxProxy" || key == "__noxTarget")
                            continue;
                        if (!v.__SERIALIZATION_BLACKLIST ||
                            !v.__SERIALIZATION_BLACKLIST[key]) {
                            result[key] = transform(v[key], allowLinks);
                        }
                    }
                    return result;
                }
                throw new Error("?" + typeof v + v.toString());
            };
            const visited = new Set();
            const listMap = new Map();
            let resultList = [];
            listMap.set(v, 0);
            resultList.push(v);
            gatherList(v);
            resultList = resultList.map((v) => transform(v, true, true));
            return resultList;
        }
        unserialize(string) {
            let depth = 0;
            const fixObject = (v, onReady) => {
                depth++;
                if (depth > 100)
                    throw new Error();
                if (v && v.constructor === Array) {
                    onReady(v);
                    for (let i = 0; i < v.length; i++) {
                        fixObject(v[i], (x) => (v[i] = x));
                    }
                }
                else if ("object" == typeof v && undefined != v) {
                    if ("#CONSTRUCTOR" in v) {
                        const protoName = v["#CONSTRUCTOR"];
                        const proto = this.NAME_CLASSES.get(protoName);
                        assert(proto, protoName + " Missing ");
                        let args = undefined;
                        fixObject(v["#ARGS"], (x) => (args = x));
                        onReady(new proto(...args));
                    }
                    else if ("#REF" in v) {
                        const ref = v["#REF"];
                        if ("string" == typeof ref) {
                            onReady(this.NAME_CLASSES.get(ref).prototype);
                        }
                        else if ("number" == typeof ref) {
                            if (-1 == ref) {
                                onReady(undefined);
                            }
                            else if (fixedObjects[ref]) {
                                onReady(fixedObjects[ref]);
                            }
                            else {
                                fixObject(tree[ref], (x) => onReady((fixedObjects[ref] = x)));
                            }
                        }
                    }
                    else {
                        let result;
                        if ("#PROTO" in v) {
                            fixObject(v["#PROTO"], (x) => {
                                result = Object.create(x);
                                onReady(result);
                            });
                        }
                        else {
                            onReady((result = v));
                        }
                        const keys = Object.keys(v);
                        for (let i = 0; i < keys.length; i++) {
                            //if ('name' == keys[i]) console.log(result)
                            if ("#PROTO" != keys[i]) {
                                fixObject(v[keys[i]], (x) => (result[keys[i]] = x));
                                //Object.defineProperty(result, keys[i], {
                                //	value: fixObjects(v[keys[i]]),
                                //	enumerable: true,
                                //	writable: true,
                                //	configurable: true
                                //})
                            }
                        }
                        Object.defineProperty(result, "loadID", {
                            value: getGlobalId(),
                            enumerable: false,
                            writable: false,
                        });
                        this.updater && this.updater(result);
                    }
                }
                else {
                    onReady(v);
                }
                depth--;
            };
            // const linkReferences = (v: any) => {
            // 	if (v && v.constructor === Array) {
            // 		for (let i = 0; i < v.length; i++) {
            // 			v[i] = linkReferences(v[i])
            // 		}
            // 		return v
            // 	} else if ('object' == typeof v && undefined != v) {
            // 		if ('#REF' in v) {
            // 			return tree[v['#REF']]
            // 		} else {
            // 			const keys = Object.keys(v)
            // 			for (let i = 0; i < keys.length; i++) {
            // 				v[keys[i]] = linkReferences(v[keys[i]])
            // 			}
            // 			return v
            // 		}
            // 	} else {
            // 		return v
            // 	}
            // }
            const tree = JSON.parse(string);
            // console.log(tree)
            const fixedObjects = new Array(tree.length);
            fixObject({ "#REF": 0 }, () => { });
            // console.log(tree)
            // linkReferences(tree)
            // console.log(tree)
            return fixedObjects[0];
        }
    }

    const fragmentShaderLighting = `
	precision highp float;
	uniform vec4 color;
	uniform vec3 camPos;
	varying vec3 normal;
	varying vec4 vPosition;
	void main() {
		vec3 normal1 = normalize(normal);
		vec3 lightPos = vec3(1000, 2000, 4000);
		vec3 lightDir = normalize(vPosition.xyz - lightPos);
        vec3 reflectionDirection = reflect(lightDir, normal1);
        vec3 eyeDirection = normalize(camPos.xyz-vPosition.xyz);
        float uMaterialShininess = 256.0;
		float specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), uMaterialShininess);
		float lightIntensity = 0.6 + 0.2 * max(0.0, -dot(lightDir, normal1)) + 0.2*specularLightWeighting;
		gl_FragColor = vec4(vec3(color) * lightIntensity, 1);
	}
`;
    const vertexShaderLighting = `
	uniform mat4 ts_ModelViewProjectionMatrix;
	uniform mat4 ts_ModelViewMatrix;
	attribute vec4 ts_Vertex;
	uniform mat3 ts_NormalMatrix;
	attribute vec3 ts_Normal;
	uniform vec4 color;
	varying vec3 normal;
	varying vec4 vPosition;
	void main() {
		gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;
        vPosition = ts_ModelViewMatrix * ts_Vertex;
		normal = normalize(ts_NormalMatrix * ts_Normal);
	}
`;
    const vertexShaderWaves = `
	uniform mat4 ts_ModelViewProjectionMatrix;
	uniform mat4 ts_ModelViewMatrix;
	attribute vec4 ts_Vertex;
	uniform mat3 ts_NormalMatrix;
	attribute vec3 ts_Normal;
	uniform vec4 color;
	varying vec3 normal;
	varying vec4 vPosition;
	void main() {
		normal = normalize(ts_NormalMatrix * ts_Normal);
		float offset = mod  (((ts_Vertex.x + ts_Vertex.y + ts_Vertex.z) * 31.0), 20.0) - 10.0;
		vec4 modPos = ts_Vertex + vec4(normal * offset, 0);
		gl_Position = ts_ModelViewProjectionMatrix * modPos;
        vPosition = ts_ModelViewMatrix * modPos;
	}
`;
    const vertexShaderBasic = `
	uniform mat4 ts_ModelViewProjectionMatrix;
	attribute vec4 ts_Vertex;
	void main() {
		gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;
	}
`;
    const vertexShaderColor = `
	uniform mat4 ts_ModelViewProjectionMatrix;
	attribute vec4 ts_Vertex;
	attribute vec4 ts_Color;
	varying vec4 fragColor;
	void main() {
		gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;
		fragColor = ts_Color;
	}
`;
    const vertexShaderArc = `
	uniform mat4 ts_ModelViewProjectionMatrix;
	attribute vec4 ts_Vertex;
	uniform float step, offset;
	uniform float radius, width;
	void main() {
		float r = radius;
		float t = offset + ts_Vertex.x * step;
		float pRadius = r - ts_Vertex.y * width;
		vec4 p = vec4(pRadius * cos(t), pRadius * sin(t), 0, 1);
		gl_Position = ts_ModelViewProjectionMatrix * p;
}
`;
    const vertexShaderConic3d = `
	uniform mat4 ts_ModelViewProjectionMatrix;
	attribute vec4 ts_Vertex;
	uniform float startT, endT, scale;
	uniform vec3 center, f1, f2;
	uniform int mode;
	float sinh(float x) { return (exp(x) - exp(-x)) / 2.0; }
	float cosh(float x) { return (exp(x) + exp(-x)) / 2.0; }
	void main() {
		float t = startT + ts_Vertex.x * (endT - startT);

		vec3 normal = normalize(cross(f1, f2));

		vec3 p, tangent;
		if (0 == mode) { // ellipse
			p = center + f1 * cos(t) + f2 * sin(t);
			tangent = f1 * -sin(t) + f2 * cos(t);
		}
		if (1 == mode) { // parabola
			p = center + f1 * t + f2 * t * t;
			tangent = f1 + 2.0 * f2 * t;
		}
		if (2 == mode) { // hyperbola
			p = center + f1 * cosh(t) + f2 * sinh(t);
			tangent = f1 * sinh(t) + f2 * cosh(t);
		}
		vec3 outDir = normalize(cross(normal, tangent));
		vec3 p2 = p + scale * (outDir * ts_Vertex.y + normal * ts_Vertex.z);
		gl_Position = ts_ModelViewProjectionMatrix * vec4(p2, 1);
	}
`;
    const vertexShaderNURBS = `#version 300 es
	uniform mat4 ts_ModelViewProjectionMatrix;
	in vec4 ts_Vertex;
	uniform float startT, endT, scale;
	uniform vec4 points[32];
	uniform int pointCount, degree;
	uniform float knots[40];
	uniform vec3 normal;
	const int MIN_DEGREE = 1;
	const int MAX_DEGREE = 6;
	
	int tInterval(float t) {
		for (int s = degree; s < 40 - 1 - degree; s++) {
			if (t >= knots[s] && t <= knots[s + 1]) {
				return s;
			}
		}
	}
	
	vec4 stepp(int k, int i, vec4 dkMinus1iMinus1, vec4 dkMinus1i) {
	    return dkMinus1i - dkMinus1iMinus1 * float(k) / (knots[i + degree - k] - knots[i - 1]);
	}
	
	void main() {
		// ts_Vertex.x is in [0, 1]
		float t = startT + ts_Vertex.x * (endT - startT);
		
		int s = tInterval(t);
		
		vec4 v[MAX_DEGREE + 1];
		for (int i = 0; i < degree + 1; i++) {
		    v[i] = points[s - degree + i];
		}
		
		vec4 pTangent4, ddt4 = vec4(0, 0, 1, 0);
		for (int level = 0; level < degree; level++) {
			if (level == degree - 2) {
				// see https://www.globalspec.com/reference/61012/203279/10-8-derivatives
				vec4 a = v[degree];
				vec4 b = v[degree - 1];
				vec4 c = v[degree - 2];
				ddt4 = stepp(degree, s + 1, stepp(degree - 1, s + 1, a, b), stepp(degree - 1, s, b, c));
			}
			if (level == degree - 1) {
				vec4 a = v[degree];
				vec4 b = v[degree - 1];
				pTangent4 = (b - a) * (float(degree) / (knots[s] - knots[s + 1]));
			}
			for (int i = degree; i > level; i--) {
				float alpha = (t - knots[i + s - degree]) / (knots[i + s - level] - knots[i + s - degree]);

				// interpolate each component
                v[i] = (1.0 - alpha) * v[i - 1] + alpha * v[i];
			}
		}
		
		vec4 p4 = v[degree];
		
		vec3 p = p4.xyz / p4.w;
		vec3 pTangent = ((pTangent4.xyz * p4.w) - (p4.xyz * pTangent4.w)) / (p4.w * p4.w);
		vec3 ddt = (
		    p4.xyz * (-p4.w * ddt4.w + 2.0 * pow(pTangent4.w, 2.0))
		    + pTangent4.xyz * (-2.0 * p4.w * pTangent4.w) 
		    + ddt4.xyz * pow(p4.w, 2.0)
        ) / pow(p4.w, 3.0);
		
		vec3 outDir = normalize(cross(ddt, pTangent));
		vec3 correctNormal = normalize(cross(pTangent, outDir));
		vec3 p2 = p + scale * (outDir * ts_Vertex.y + correctNormal * ts_Vertex.z);
		gl_Position = ts_ModelViewProjectionMatrix * vec4(p2, 1);
    }
`;
    const vertexShaderBezier = `
    // calculates a bezier curve using ts_Vertex.x as the (t) parameter of the curve
	uniform mat4 ts_ModelViewProjectionMatrix;
	attribute vec4 ts_Vertex;
	uniform float width, startT, endT;
	uniform vec3 p0, p1, p2, p3;
	void main() {
		// ts_Vertex.x is in [0, 1]
		float t = startT + ts_Vertex.x * (endT - startT), s = 1.0 - t;
		float c0 = s * s * s, c1 = 3.0 * s * s * t, c2 = 3.0 * s * t * t, c3 = t * t * t;
		vec3 pPos = p0 * c0 + p1 * c1 + p2 * c2 + p3 * c3;
		float c01 = 3.0 * s * s, c12 = 6.0 * s * t, c23 = 3.0 * t * t;
		vec3 pTangent = (p1 - p0) * c01 + (p2 - p1) * c12 + (p3 - p2) * c23;
		vec3 pNormal = normalize(vec3(pTangent.y, -pTangent.x, 0));
		vec4 p = vec4(pPos - ts_Vertex.y * width * pNormal, 1);
		gl_Position = ts_ModelViewProjectionMatrix * p;
	}
`;
    const vertexShaderBezier3d = `
    precision highp float;
    // calculates a bezier curve using ts_Vertex.x as the (t) parameter of the curve
	uniform float scale, startT, endT;
	uniform vec3 ps[4];
	uniform vec3 p0, p1, p2, p3, normal;
	uniform mat4 ts_ModelViewProjectionMatrix;
	attribute vec4 ts_Vertex;
	void main() {
		// ts_Vertex.y is in [0, 1]
		vec3 p5 = ps[0];
		float t = startT * (1.0 - ts_Vertex.x) + endT * ts_Vertex.x, s = 1.0 - t;
		float c0 = s * s * s, 
		      c1 = 3.0 * s * s * t, 
		      c2 = 3.0 * s * t * t, c3 = t * t * t;
		vec3 p = (p0 * c0 + p1 * c1) + (p2 * c2 + p3 * c3);
		float c01 = 3.0 * s * s, 
		      c12 = 6.0 * s * t, 
		      c23 = 3.0 * t * t;
		vec3 pTangent = (p1 - p0) * c01 + (p2 - p1) * c12 + (p3 - p2) * c23;
		vec3 outDir = normalize(cross(normal, pTangent));
		vec3 correctNormal = normalize(cross(pTangent, outDir));
		vec3 p2 = p + scale * (outDir * ts_Vertex.y + correctNormal * ts_Vertex.z);
		gl_Position = ts_ModelViewProjectionMatrix * vec4(p2, 1);
	}
`;
    const vertexShaderGeneric = `
	uniform float scale;
	uniform mat4 ts_ModelViewProjectionMatrix;
	attribute vec4 ts_Vertex;
	uniform mat3 ts_NormalMatrix;
	attribute vec3 ts_Normal;
	void main() {
		vec3 normal = normalize(ts_NormalMatrix * ts_Normal);
		vec4 vertexPos = ts_Vertex + vec4(normal * scale, 0);
		gl_Position = ts_ModelViewProjectionMatrix * vertexPos;
	}
`;
    const vertexShaderRing = `
	#define M_PI 3.1415926535897932384626433832795
	uniform float step;
	uniform float innerRadius, outerRadius;
	attribute float index;
	uniform mat4 ts_ModelViewProjectionMatrix;
	attribute vec4 ts_Vertex;
	void main() {
		gl_Position = ts_ModelViewProjectionMatrix * vec4(index, index, index, 1);
		float id = atan(ts_Vertex.x, ts_Vertex.y) / M_PI  * 32.0;
		float radius = mod(id, 2.0) < 1.0 ? outerRadius : innerRadius;
		gl_Position = ts_ModelViewProjectionMatrix * vec4(radius * cos(index * step), radius * sin(index * step), 0, 1);
	}
`;
    const fragmentShaderColor = `
	precision highp float;
	uniform vec4 color;
	void main() {
		gl_FragColor = color;
	}
`;
    const fragmentShaderColor3 = `#version 300 es
	precision highp float;
	uniform vec4 color;
	out vec4 fragColor;
	void main() {
		fragColor = color;
	}
`;
    const fragmentShaderVaryingColor = `
	precision highp float;
	varying vec4 fragColor;
	void main() {
		gl_FragColor = fragColor;
	}
`;
    const fragmentShaderColorHighlight = `
	precision highp float;
	uniform vec4 color;
	void main() {
		float diagonal = (gl_FragCoord.x + 2.0 * gl_FragCoord.y);
		if (mod(diagonal, 50.0) > 40.0) { // mod(diagonal, 2.0) > 1.0
			discard;
			//gl_FragColor = color + vec4(0.2,0.2,0.2,0);
		} else {
			gl_FragColor = color - vec4(0.2,0.2,0.2,0);
		}
	}
`;
    const vertexShaderTexture = `
	varying vec2 texturePos;
	attribute vec4 ts_Vertex;
	uniform mat4 ts_ModelViewProjectionMatrix;
	void main() {
		texturePos = ts_Vertex.xy;
		gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;
	}
`;
    const fragmentShaderTextureColor = `
	precision highp float;
	varying vec2 texturePos;
	uniform vec4 color;
	uniform sampler2D texture;
	void main() {
		gl_FragColor = texture2D(texture, texturePos) * color;
	}
`;

    function parseGetParams(str) {
        const result = {};
        str.split("&").forEach(function (item) {
            const splitIndex = item.indexOf("=");
            if (-1 == splitIndex) {
                result[item] = item;
            }
            else {
                result[item.substr(0, splitIndex)] = decodeURI(item.substr(splitIndex + 1));
            }
        });
        return result;
    }
    const COLORS = {
        RD_FILL: color("#9EDBF9"),
        RD_STROKE: color("#77B0E0"),
        TS_FILL: color("#D19FE3"),
        TS_STROKE: color("#A76BC2"),
        PP_FILL: color("#F3B6CF"),
        PP_STROKE: color("#EB81B4"),
    };
    class BREPGLContext {
        constructor(gl) {
            this.cachedMeshes = new WeakMap();
            this.shaders = initShaders(gl);
            initMeshes((this.meshes = {}), gl);
        }
        static create(gl) {
            addOwnProperties(gl, BREPGLContext.prototype);
            addOwnProperties(gl, new BREPGLContext(gl));
            return gl;
        }
        drawPoint(p, color = GL_COLOR_BLACK, size = 5) {
            this.pushMatrix();
            this.translate(p);
            this.scale(size / 2, size / 2, size / 2);
            this.shaders.singleColor
                .uniforms({ color: color })
                .draw(this.meshes.sphere1);
            this.popMatrix();
        }
        drawEdge(edge, color = GL_COLOR_BLACK, width = 2) {
            CURVE_PAINTERS[edge.curve.constructor.name](this, edge.curve, color, edge.minT, edge.maxT, width);
        }
        drawCurve(curve, color = GL_COLOR_BLACK, width = 2, tStart, tEnd) {
            CURVE_PAINTERS[curve.constructor.name](this, curve, color, tStart, tEnd, width);
        }
        drawVector(vector, anchor, color = GL_COLOR_BLACK, size = 1) {
            if (vector.likeO())
                return;
            this.pushMatrix();
            const headLength = size * 4;
            if (headLength > vector.length())
                return;
            const vT = vector.getPerpendicular().unit();
            this.multMatrix(M4.forSys(vector.unit(), vT, vector.cross(vT).unit(), anchor));
            this.scale(vector.length() - headLength, size / 2, size / 2);
            this.shaders.singleColor
                .uniforms({
                color: color,
            })
                .draw(this.meshes.vectorShaft);
            this.scale(1 / (vector.length() - headLength), 1, 1);
            this.translate(vector.length() - headLength, 0, 0);
            this.scale(headLength / 2, 1, 1);
            this.shaders.singleColor.draw(this.meshes.vectorHead);
            this.popMatrix();
        }
        drawVectors(drVs, size = undefined) {
            this.drawVector(V3.X, V3.O, color("red").gl(), size);
            this.drawVector(V3.Y, V3.O, color("green").gl(), size);
            this.drawVector(V3.Z, V3.O, color("blue").gl(), size);
            drVs.forEach((vi) => this.drawVector(vi.v, vi.anchor, vi.color, size));
        }
        drawPlane(customPlane, color, dotted = false) {
            this.pushMatrix();
            this.multMatrix(M4.forSys(customPlane.right, customPlane.up, customPlane.normal1, customPlane.anchor));
            this.translate(customPlane.uMin, customPlane.vMin, 0);
            this.scale(customPlane.uMax - customPlane.uMin, customPlane.vMax - customPlane.vMin, 1);
            const mesh = dotted
                ? this.meshes.xyDottedLinePlane
                : this.meshes.xyLinePlane;
            this.shaders.singleColor.uniforms({ color: color }).draw(mesh, this.LINES);
            this.popMatrix();
        }
        drawBox(m4, color) {
            this.pushMatrix();
            this.multMatrix(m4.m[15] >= 0 ? m4 : m4.mulScalar(-1));
            if (color) {
                this.shaders.singleColor
                    .uniforms({ color: color })
                    .draw(this.meshes.cube, this.LINES);
            }
            else {
                this.shaders.multiColor.draw(this.meshes.cube, this.LINES);
            }
            this.popMatrix();
        }
    }
    function conicPainter(mode, gl, ellipse, color, startT, endT, width = 2) {
        gl.shaders.ellipse3d
            .uniforms({
            f1: ellipse.f1,
            f2: ellipse.f2,
            center: ellipse.center,
            color: color,
            startT: startT,
            endT: endT,
            scale: width,
            mode: mode,
        })
            .draw(gl.meshes.pipe);
    }
    const CURVE_PAINTERS = {
        [EllipseCurve.name]: conicPainter.bind(undefined, 0),
        [ParabolaCurve.name]: conicPainter.bind(undefined, 1),
        [HyperbolaCurve.name]: conicPainter.bind(undefined, 2),
        [ImplicitCurve.name](gl, curve, color, startT, endT, width = 2) {
            let mesh = gl.cachedMeshes.get(curve);
            const RES = 4;
            if (!mesh) {
                mesh = new Mesh()
                    .addIndexBuffer("TRIANGLES")
                    .addVertexBuffer("normals", "ts_Normal");
                curve.addToMesh(mesh, RES);
                mesh.compile();
                gl.cachedMeshes.set(curve, mesh);
            }
            const startIndex = ceil(startT);
            const endIndex = floor$1(endT);
            if (startIndex <= endIndex) {
                const indexFactor = 2 * // no of triangles per face
                    RES * // no of faces
                    3; // no of indexes per triangle
                gl.shaders.generic3d
                    .uniforms({
                    color: color,
                    scale: width,
                })
                    .draw(mesh, gl.TRIANGLES, startIndex * indexFactor, (floor$1(endT) - startIndex) * indexFactor);
                if (startT % 1 !== 0) {
                    const p = curve.at(startT);
                    gl.pushMatrix();
                    const m = M4.forSys(p.to(curve.points[startIndex]), mesh.normals[startIndex * RES].toLength(width), mesh.normals[startIndex * RES + 1].toLength(width), p);
                    gl.multMatrix(m);
                    gl.shaders.singleColor
                        .uniforms({ color: color })
                        .draw(gl.meshes.pipeSegmentForICurve);
                    console.log(gl.meshes.pipeSegmentForICurve);
                    gl.popMatrix();
                }
                if (endT % 1 !== 0) {
                    const p = curve.at(endT);
                    gl.pushMatrix();
                    const m = M4.forSys(curve.points[endIndex].to(p), mesh.normals[endIndex * RES].toLength(width), mesh.normals[endIndex * RES + 1].toLength(width), curve.points[endIndex]);
                    gl.multMatrix(m);
                    gl.shaders.singleColor
                        .uniforms({ color: color })
                        .draw(gl.meshes.pipeSegmentForICurve);
                    gl.popMatrix();
                }
            }
            else {
                const p1 = curve.at(startT);
                const p2 = curve.at(endT);
                gl.pushMatrix();
                const v0 = p1.to(p2), v1 = v0.getPerpendicular().toLength(width), v2 = v0.cross(v1).toLength(width);
                const m = M4.forSys(v0, v1, v2, p1);
                gl.multMatrix(m);
                gl.shaders.singleColor
                    .uniforms({ color: color })
                    .draw(gl.meshes.pipeSegmentForICurve);
                gl.popMatrix();
            }
        },
        [BezierCurve.name](gl, curve, color, startT, endT, width = 2, normal = V3.Z) {
            gl.shaders.bezier3d
                .uniforms({
                p0: curve.p0,
                p1: curve.p1,
                p2: curve.p2,
                p3: curve.p3,
                color: color,
                startT: startT,
                endT: endT,
                scale: width,
                normal: normal,
            })
                .draw(gl.meshes.pipe);
        },
        [NURBS.name](gl, curve, color, startT, endT, width = 2, normal = V3.Z) {
            gl.shaders.nurbs
                .uniforms({
                "points[0]": Vector.pack(curve.points),
                degree: curve.degree,
                "knots[0]": curve.knots,
                color: color,
                startT: startT,
                endT: endT,
                scale: width,
                normal: normal,
            })
                .draw(gl.meshes.pipe);
        },
        [L3.name](gl, curve, color, startT, endT, width = 2, normal = V3.Z) {
            gl.pushMatrix();
            const a = curve.at(startT), b = curve.at(endT);
            const ab = b.minus(a), abT = ab.getPerpendicular().unit();
            const m = M4.forSys(ab, abT, ab.cross(abT).unit(), a);
            gl.multMatrix(m);
            gl.scale(1, width, width);
            gl.shaders.singleColor
                .uniforms({
                color: color,
            })
                .draw(gl.meshes.pipe);
            gl.popMatrix();
        },
    };
    CURVE_PAINTERS[PICurve.name] = CURVE_PAINTERS[ImplicitCurve.name];
    CURVE_PAINTERS[PPCurve.name] = CURVE_PAINTERS[ImplicitCurve.name];
    function initMeshes(_meshes, _gl) {
        _gl.makeCurrent();
        _meshes.cube = (() => {
            const cube = B2T.box().toMesh().addVertexBuffer("colors", "ts_Color");
            cube.colors = cube.vertices.map((p) => [p.x, p.y, p.z, 1].map((x) => x * 0.9));
            cube.compile();
            return cube;
        })();
        _meshes.sphere1 = Mesh.sphere(2);
        _meshes.segment = Mesh.plane({ startY: -0.5, height: 1, detailX: 128 });
        _meshes.text = Mesh.plane();
        _meshes.vector = Mesh.rotation([V3.O, V(0, 0.05, 0), V(0.8, 0.05), V(0.8, 0.1), V(1, 0)], L3.X, TAU, 16, true);
        _meshes.vectorShaft = Mesh.rotation([V3.O, V3.Y, V3.XY], L3.X, TAU, 8, true);
        _meshes.vectorHead = Mesh.rotation([V3.Y, V(0, 2, 0), V(2, 0, 0)], L3.X, TAU, 8, true);
        _meshes.pipe = Mesh.rotation(arrayFromFunction(512, (i, l) => new V3(i / (l - 1), -0.5, 0)), L3.X, TAU, 8, true);
        _meshes.xyLinePlane = Mesh.plane();
        _meshes.xyDottedLinePlane = makeDottedLinePlane();
        _meshes.pipeSegmentForICurve = Mesh.offsetVertices(M4.rotateY(90 * DEG).transformedPoints(arrayFromFunction(4, (i) => V3.polar(1, (TAU * i) / 4))), V3.X, true);
    }
    function initShaders(_gl) {
        _gl.makeCurrent();
        return {
            singleColor: Shader.create(vertexShaderBasic, fragmentShaderColor),
            multiColor: Shader.create(vertexShaderColor, fragmentShaderVaryingColor),
            singleColorHighlight: Shader.create(vertexShaderBasic, fragmentShaderColorHighlight),
            textureColor: Shader.create(vertexShaderTexture, fragmentShaderTextureColor),
            arc: Shader.create(vertexShaderRing, fragmentShaderColor),
            arc2: Shader.create(vertexShaderArc, fragmentShaderColor),
            ellipse3d: Shader.create(vertexShaderConic3d, fragmentShaderColor),
            generic3d: Shader.create(vertexShaderGeneric, fragmentShaderColor),
            bezier3d: Shader.create(vertexShaderBezier3d, fragmentShaderColor),
            nurbs: Shader.create(vertexShaderNURBS, fragmentShaderColor3),
            bezier: Shader.create(vertexShaderBezier, fragmentShaderColor),
            lighting: Shader.create(vertexShaderLighting, fragmentShaderLighting),
            waves: Shader.create(vertexShaderWaves, fragmentShaderLighting),
        };
    }
    function makeDottedLinePlane(count = 128) {
        const mesh = new Mesh().addIndexBuffer("LINES");
        const OXvertices = arrayFromFunction(count, (i) => new V3(i / count, 0, 0));
        mesh.vertices.push(...OXvertices);
        mesh.vertices.push(...M4.forSys(V3.Y, V3.O, V3.O, V3.X).transformedPoints(OXvertices));
        mesh.vertices.push(...M4.forSys(V3.X.negated(), V3.O, V3.O, new V3(1, 1, 0)).transformedPoints(OXvertices));
        mesh.vertices.push(...M4.forSys(V3.Y.negated(), V3.O, V3.O, V3.Y).transformedPoints(OXvertices));
        mesh.LINES = arrayFromFunction(count * 4, (i) => i - (i >= count * 2 ? 1 : 0));
        mesh.compile();
        return mesh;
    }
    function initNavigationEvents(_gl, eye, paintScreen) {
        const canvas = _gl.canvas;
        let lastPos = V3.O;
        //_gl.onmousedown.push((e) => {
        //	e.preventDefault()
        //	e.stopPropagation()
        //})
        //_gl.onmouseup.push((e) => {
        //	e.preventDefault()
        //	e.stopPropagation()
        //})
        canvas.addEventListener("mousemove", (e) => {
            const pagePos = V(e.pageX, e.pageY);
            const delta = lastPos.to(pagePos);
            //noinspection JSBitwiseOperatorUsage
            if (e.buttons & 4) {
                // pan
                const moveCamera = V((-delta.x * 2) / _gl.canvas.width, (delta.y * 2) / _gl.canvas.height);
                const inverseProjectionMatrix = _gl.projectionMatrix.inversed();
                const worldMoveCamera = inverseProjectionMatrix.transformVector(moveCamera);
                eye.pos = eye.pos.plus(worldMoveCamera);
                eye.focus = eye.focus.plus(worldMoveCamera);
                setupCamera(eye, _gl);
                paintScreen();
            }
            // scene rotation
            //noinspection JSBitwiseOperatorUsage
            if (e.buttons & 2) {
                const rotateLR = (-delta.x / 6.0) * DEG;
                const rotateUD = (-delta.y / 6.0) * DEG;
                // rotate
                let matrix = M4.rotateLine(eye.focus, eye.up, rotateLR);
                //let horizontalRotationAxis = focus.minus(pos).cross(up)
                const horizontalRotationAxis = eye.up.cross(eye.pos.minus(eye.focus));
                matrix = matrix.times(M4.rotateLine(eye.focus, horizontalRotationAxis, rotateUD));
                eye.pos = matrix.transformPoint(eye.pos);
                eye.up = matrix.transformVector(eye.up);
                setupCamera(eye, _gl);
                paintScreen();
            }
            lastPos = pagePos;
        });
        canvas.addEventListener("wheel", (e) => {
            // zoom
            const wheelY = -sign$1(e.deltaY) * 2;
            // console.log(e.deltaY, e.deltaX)
            eye.zoomFactor *= pow(0.9, -wheelY);
            const mouseCoordsOnCanvas = getPosOnTarget(e);
            const mousePosFrustrum = V((mouseCoordsOnCanvas.x * 2) / _gl.canvas.offsetWidth - 1, (-mouseCoordsOnCanvas.y * 2) / _gl.canvas.offsetHeight + 1, 0);
            const moveCamera = mousePosFrustrum.times(1 - 1 / pow(0.9, -wheelY));
            const inverseProjectionMatrix = _gl.projectionMatrix.inversed();
            const worldMoveCamera = inverseProjectionMatrix.transformVector(moveCamera);
            //console.log("moveCamera", moveCamera)
            //console.log("worldMoveCamera", worldMoveCamera)
            eye.pos = eye.pos.plus(worldMoveCamera);
            eye.focus = eye.focus.plus(worldMoveCamera);
            // tilt
            const mousePosWC = inverseProjectionMatrix.transformPoint(mousePosFrustrum);
            const tiltMatrix = M4.rotateLine(mousePosWC, eye.pos.to(eye.focus), -sign$1(e.deltaX) * 10 * DEG);
            eye.up = tiltMatrix.transformVector(eye.up);
            eye.pos = tiltMatrix.transformPoint(eye.pos);
            eye.focus = tiltMatrix.transformPoint(eye.focus);
            setupCamera(eye, _gl);
            paintScreen();
            e.preventDefault();
        });
    }
    /**
     * Transforms position on the screen into a line in world coordinates.
     */
    function getMouseLine(pos, _gl) {
        const ndc1 = V((pos.x * 2) / _gl.canvas.width - 1, (-pos.y * 2) / _gl.canvas.height + 1, 0);
        const ndc2 = V((pos.x * 2) / _gl.canvas.width - 1, (-pos.y * 2) / _gl.canvas.height + 1, 1);
        //console.log(ndc)
        const inverseProjectionMatrix = _gl.projectionMatrix.inversed();
        const s = inverseProjectionMatrix.transformPoint(ndc1);
        const dir = inverseProjectionMatrix.transformPoint(ndc2).minus(s);
        return L3.anchorDirection(s, dir);
    }
    function getPosOnTarget(e) {
        const target = e.target;
        const targetRect = target.getBoundingClientRect();
        const mouseCoordsOnElement = {
            x: e.clientX - targetRect.left,
            y: e.clientY - targetRect.top,
        };
        return mouseCoordsOnElement;
    }
    function setupCamera(_eye, _gl, suppressEvents = false) {
        const { pos, focus, up, zoomFactor } = _eye;
        //console.log("pos", pos.$, "focus", focus.$, "up", up.$)
        _gl.matrixMode(_gl.PROJECTION);
        _gl.loadIdentity();
        //_gl.perspective(70, _gl.canvas.width / _gl.canvas.height, 0.1, 1000);
        const lr = _gl.canvas.width / 2 / zoomFactor;
        const bt = _gl.canvas.height / 2 / zoomFactor;
        _gl.ortho(-lr, lr, -bt, bt, -1e4, 1e4);
        _gl.lookAt(pos, focus, up);
        _gl.matrixMode(_gl.MODELVIEW);
        !suppressEvents && cameraChangeListeners.forEach((l) => l(_eye));
    }
    const cameraChangeListeners = [];
    const SHADERS_TYPE_VAR = false ;
    // let shaders: typeof SHADERS_TYPE_VAR
    // declare let a: BRep, b: BRep, c: BRep, d: BRep, edges: Edge[] = [], hovering: any,
    // 	, normallines: boolean = false, b2s: BRep[] = []
    // const

    class Quaternion {
        constructor(s, x, y, z) {
            this.s = s;
            this.x = x;
            this.y = y;
            this.z = z;
        }
        static axis(axis, rotation) {
            assertf(() => axis.hasLength(1));
            return new Quaternion(cos$2(rotation / 2), sin$2(rotation / 2) * axis.x, sin$2(rotation / 2) * axis.y, sin$2(rotation / 2) * axis.z);
        }
        static of(s, x, y, z) {
            return new Quaternion(s, x, y, z);
        }
        plus(q) {
            return new Quaternion(this.s + q.s, this.x + q.x, this.y + q.y, this.z + q.z);
        }
        times(q) {
            return "number" == typeof q
                ? new Quaternion(q * this.s, q * this.x, q * this.y, q * this.z)
                : new Quaternion(this.s * q.s - (this.x * q.x + this.y * q.y + this.z * q.z), this.y * q.z - this.z * q.y + this.s * q.x + q.s * this.x, this.z * q.x - this.x * q.z + this.s * q.y + q.s * this.y, this.x * q.y - this.y * q.x + this.s * q.z + q.s * this.z);
        }
        conjugated() {
            return new Quaternion(this.s, -this.x, -this.y, -this.z);
        }
        length() {
            return Math.hypot(this.s, this.x, this.y, this.z);
        }
        norm() {
            return Math.pow(this.s, 2) + Math.pow(this.x, 2) + (Math.pow(this.y, 2) + Math.pow(this.z, 2));
        }
        unit() {
            const l = this.length();
            return new Quaternion(this.s / l, this.x / l, this.y / l, this.z / l);
        }
        inverse() {
            return this.conjugated().times(1 / this.norm());
        }
        toM4() {
            assertf(() => eq(1, this.length()));
            const { s, x, y, z } = this;
            // prettier-ignore
            return new M4([
                1 - 2 * (y * y + z * z), 2 * (x * y - z * s), 2 * (x * z + y * s), 0,
                2 * (x * y + z * s), 1 - 2 * (x * x + z * z), 2 * (y * z - x * s), 0,
                2 * (x * z - y * s), 2 * (y * z + x * s), 1 - 2 * (x * x + y * y), 0,
                0, 0, 0, 1,
            ]);
        }
        static fromRotation(m4) {
            const sqrtTracePlus1 = Math.sqrt(m4.trace() + 1);
            const f = 1 / (2 * sqrtTracePlus1);
            return new Quaternion(sqrtTracePlus1 / 2, f * (m4.e(2, 1) - m4.e(1, 2)), f * (m4.e(0, 2) - m4.e(2, 0)), f * (m4.e(1, 0) - m4.e(0, 1)));
        }
        rotatePoint(p) {
            const v = this.times(Quaternion.of(1, p.x, p.y, p.z)).times(this.conjugated());
            return new V3(v.x, v.y, v.z);
        }
        like(q, precision) {
            return (eq(this.s, q.s, precision) &&
                eq(this.x, q.x, precision) &&
                eq(this.y, q.y, precision) &&
                eq(this.z, q.z, precision));
        }
        equals(q) {
            return (this == q ||
                (q instanceof Quaternion &&
                    this.s == q.s &&
                    this.x == q.x &&
                    this.y == q.y &&
                    this.z == q.z));
        }
        hashCode() {
            let hashCode = 0;
            hashCode = (hashCode * 31 + floatHashCode(this.s)) | 0;
            hashCode = (hashCode * 31 + floatHashCode(this.x)) | 0;
            hashCode = (hashCode * 31 + floatHashCode(this.y)) | 0;
            hashCode = (hashCode * 31 + floatHashCode(this.z)) | 0;
            return hashCode;
        }
        slerp(b, f) {
            assertf(() => eq(1, this.length()));
            assertf(() => eq(1, b.length()));
            const a = this;
            let dot = a.s * b.s + a.x * b.x + a.y * b.y + a.z * b.z;
            if (dot < 0) {
                dot = -dot;
                b = b.times(-1);
                console.log("dot < 0");
            }
            const DOT_THRESHOLD = 0.9995;
            if (dot > DOT_THRESHOLD) {
                // If the inputs are too close for comfort, linearly interpolate
                // and normalize the result.
                return a
                    .times(1 - f)
                    .plus(b.times(f))
                    .unit();
            }
            // Since dot is in range [0, DOT_THRESHOLD], acos is safe
            const theta0 = acos(dot); // theta_0 = angle between input vectors
            const theta = theta0 * f; // theta = angle between v0 and result
            const s0 = cos$2(theta) - (dot * sin$2(theta)) / sin$2(theta0); // == sin(theta_0 - theta) / sin(theta_0)
            const s1 = sin$2(theta) / sin$2(theta0);
            console.log(s0, s1, a.times(s0), b.times(s1));
            return a.times(s0).plus(b.times(s1));
        }
        toArray() {
            return [this.s, this.x, this.y, this.z];
        }
    }
    Quaternion.O = new Quaternion(1, 0, 0, 0);

    class ImplicitSurface extends Surface {
        static is(obj) {
            return obj.implicitFunction && obj.didp;
        }
    }

    var brepts = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ImplicitSurface: ImplicitSurface,
        Curve: Curve,
        breakDownPPCurves: breakDownPPCurves,
        AABB2: AABB2,
        uvInAABB2: uvInAABB2,
        curvePoint: curvePoint,
        curvePointMF: curvePointMF,
        XiEtaCurve: XiEtaCurve,
        parabola4Projection: parabola4Projection,
        ImplicitCurve: ImplicitCurve,
        surfaceIsICurveIsInfosWithLine: surfaceIsICurveIsInfosWithLine,
        BezierCurve: BezierCurve,
        HyperbolaCurve: HyperbolaCurve,
        L3: L3,
        PICurve: PICurve,
        PPCurve: PPCurve,
        ParabolaCurve: ParabolaCurve,
        EllipseCurve: EllipseCurve,
        NURBS: NURBS,
        P3: P3,
        Surface: Surface,
        get PointVsFace () { return PointVsFace; },
        ParametricSurface: ParametricSurface,
        ConicSurface: ConicSurface,
        ProjectedCurveSurface: ProjectedCurveSurface,
        RotatedCurveSurface: RotatedCurveSurface,
        getExtremePointsHelper: getExtremePointsHelper,
        CylinderSurface: CylinderSurface,
        EllipsoidSurface: EllipsoidSurface,
        PlaneSurface: PlaneSurface,
        PointProjectedSurface: PointProjectedSurface,
        NURBSSurface: NURBSSurface,
        ZDirVolumeVisitor: ZDirVolumeVisitor,
        glqV3: glqV3,
        glqArray: glqArray,
        CalculateAreaVisitor: CalculateAreaVisitor,
        projectCurve: projectCurve,
        projectPointCurve: projectPointCurve,
        rotateCurve: rotateCurve,
        get B2T () { return B2T; },
        CustomPlane: CustomPlane,
        Edge: Edge,
        StraightEdge: StraightEdge,
        PCurveEdge: PCurveEdge,
        edgePathFromSVG: edgePathFromSVG,
        edgeRect: edgeRect,
        edgeNgon: edgeNgon,
        edgeStar: edgeStar,
        createEdge: createEdge,
        edgeForCurveAndTs: edgeForCurveAndTs,
        reuleaux: reuleaux,
        round: round$2,
        arbitraryCorner: arbitraryCorner,
        FaceInfoFactory: FaceInfoFactory,
        Face: Face,
        PlaneFace: PlaneFace,
        RotationFace: RotationFace,
        EPS: EPS,
        getGlobalId: getGlobalId,
        addLikeSurfaceFaces: addLikeSurfaceFaces,
        assembleFaceFromLooseEdges: assembleFaceFromLooseEdges,
        calcNextEdgeIndex: calcNextEdgeIndex,
        BRep: BRep,
        dotCurve: dotCurve,
        dotCurve2: dotCurve2,
        INSIDE: INSIDE,
        OUTSIDE: OUTSIDE,
        COPLANAR_SAME: COPLANAR_SAME,
        COPLANAR_OPPOSITE: COPLANAR_OPPOSITE,
        ALONG_EDGE_OR_PLANE: ALONG_EDGE_OR_PLANE,
        splitsVolumeEnclosingFaces: splitsVolumeEnclosingFaces,
        splitsVolumeEnclosingFacesP: splitsVolumeEnclosingFacesP,
        splitsVolumeEnclosingFacesP2: splitsVolumeEnclosingFacesP2,
        splitsVolumeEnclosingCone: splitsVolumeEnclosingCone,
        splitsVolumeEnclosingCone2: splitsVolumeEnclosingCone2,
        fff: fff,
        triangulateVertices: triangulateVertices,
        intersectionUnitCircleLine: intersectionUnitCircleLine,
        intersectionUnitCircleLine2: intersectionUnitCircleLine2,
        intersectionCircleLine: intersectionCircleLine,
        intersectionUnitHyperbolaLine: intersectionUnitHyperbolaLine,
        curvePointPP: curvePointPP,
        followAlgorithmPP: followAlgorithmPP,
        followAlgorithm2d: followAlgorithm2d,
        followAlgorithm2dAdjustable: followAlgorithm2dAdjustable,
        intersectionICurveICurve: intersectionICurveICurve,
        intersectionICurveICurve2: intersectionICurveICurve2,
        cassini: cassini,
        get MathFunctionR2R () { return MathFunctionR2R; },
        cas2: cas2,
        arrayLerp: arrayLerp,
        doNotSerialize: doNotSerialize,
        ClassSerializer: ClassSerializer,
        parseGetParams: parseGetParams,
        COLORS: COLORS,
        BREPGLContext: BREPGLContext,
        CURVE_PAINTERS: CURVE_PAINTERS,
        initMeshes: initMeshes,
        initShaders: initShaders,
        initNavigationEvents: initNavigationEvents,
        getMouseLine: getMouseLine,
        getPosOnTarget: getPosOnTarget,
        setupCamera: setupCamera,
        cameraChangeListeners: cameraChangeListeners,
        SHADERS_TYPE_VAR: SHADERS_TYPE_VAR,
        Quaternion: Quaternion
    });

    const eye = { pos: V(1000, 1000, 1000), focus: V3.O, up: V3.Z, zoomFactor: 1 };
    const bReps = [];
    const edgeViewerColors = ["darkorange", "darkgreen", "cyan"].map((c) => css(c).gl());
    let bRepMeshes = [];
    //bMesh: Mesh & {faceIndexes?: Map<Face, {start: int, count: int}>},
    //cMesh: Mesh & {faceIndexes?: Map<Face, {start: int, count: int}>},
    let edgesMesh;
    let faceMesh;
    let meshes = [];
    let hovering;
    const edgeDebugPoints = [];
    const edgeDebugLines = [];
    const addMissing = (to, from) => Object.keys(from).forEach((key) => "Buffer" != key && !to[key] && (to[key] = from[key]));
    // tslint:disable-next-line:class-name
    class RenderObjects {
        constructor() {
            this.a = undefined;
            this.b = undefined;
            this.c = undefined;
            this.d = undefined;
            this.face = [];
            this.edges = [];
            this.wireframe = false;
            this.normallines = false;
            this.i = undefined;
            this.hjk = undefined;
            this.drPs = [];
            this.drVs = [];
            this.drLines = [];
            this.mesh = [];
            this.boxes = [];
            this.paintMeshNormals = false;
            this.paintWireframe = false;
            this.paintCurveDebug = false;
            this.planes = [];
        }
    }
    const renderObjectKeys = Object.keys(new RenderObjects());
    addMissing(window, ts3dutils);
    addMissing(window, tsgl);
    addMissing(window, brepts);
    addMissing(window, new RenderObjects());
    const arrayLiteralType = (x) => x;
    const g = window;
    function objectAssignConcatArray(a, b) {
        for (const key of Object.keys(b)) {
            if (Array.isArray(g[key]) && Array.isArray(b[key])) {
                a[key].push(...b[key]);
            }
            else if (undefined !== b[key]) {
                a[key] = b[key];
            }
        }
        return a;
    }
    function initBRep() {
        eye.pos = V(1, 2, 101);
        eye.focus = V(0, 1, 0);
        eye.up = V(0, 1, 0);
        eye.zoomFactor = 8;
        const htmlContext = INIT_HTML();
        const hash = window.location.search.substr(1) || window.location.hash.substr(1) || "";
        const command = decodeURIComponent(hash);
        console.log(command);
        const hashContext = new Function(`let ${renderObjectKeys.join(",")};${command};return{${renderObjectKeys.join(",")}}`)();
        // hashContext last, so i value in hash wins
        objectAssignConcatArray(g, htmlContext);
        objectAssignConcatArray(g, hashContext);
        console.log(htmlContext);
        Object.assign(eye, g.i);
        // let gets: any = {a, b, c, d, mesh, edges, points, vectors}
        // g.hjk && Object.assign(g, HJK())
        arrayLiteralType(["a", "b", "c", "d"]).forEach((k) => {
            const bRep = g[k];
            if (bRep) {
                bReps.push(bRep);
            }
        });
        bRepMeshes = bReps.map((bRep) => bRep.toMesh());
        bRepMeshes.forEach((mesh) => {
            mesh.computeWireframeFromFlatTriangles("wireframe");
            mesh.computeNormalLines(0.1, "normallines");
            mesh.compile();
        });
        if (g.mesh) {
            console.log("mesh/es from GET", bRepMeshes);
            meshes = g.mesh instanceof Array ? g.mesh : [g.mesh];
            meshes.forEach((mesh) => {
                mesh.computeWireframeFromFlatTriangles("wireframe");
                mesh.computeNormalLines(0.1, "normallines");
                mesh.compile();
            });
        }
        if (g.edges) {
            console.log("edges from GET");
            edgesMesh = new Mesh()
                .addIndexBuffer("TRIANGLES")
                .addVertexBuffer("normals", "ts_Normal")
                .addVertexBuffer("curve1", "curve1")
                .addVertexBuffer("curve1colors", "curve1colors");
            g.edges.forEach((edge, edgeIndex) => {
                const points = edge.points();
                for (let i = 0; i < points.length - 1; i++) {
                    const color = edgeViewerColors[(edgeIndex + (i % 2)) % edgeViewerColors.length];
                    // const tangent = edge.tangentAt(i)
                    // dMesh.curve1.push(points[i], points[i].plus(tangent.toLength(1)))
                    edgesMesh.curve1.push(points[i], points[i + 1]);
                    edgesMesh.curve1colors.push(color, color);
                }
                edge.curve instanceof PICurve &&
                    edge.curve.addToMesh(edgesMesh, 8, 0.02, 2);
                if (edge.curve.debugInfo) {
                    const { points, lines } = edge.curve.debugInfo();
                    points && edgeDebugPoints.push(...points);
                    lines && edgeDebugLines.push(...lines);
                }
            });
            //dMesh.computeWireframeFromFlatTriangles()
            edgesMesh.compile();
        }
        if (g.face) {
            if (undefined === g.face.length) {
                g.face = [g.face];
            }
            faceMesh = new Mesh()
                .addIndexBuffer("TRIANGLES")
                .addIndexBuffer("LINES")
                .addVertexBuffer("tangents", "tangents")
                .addVertexBuffer("normals", "ts_Normal");
            for (const face of g.face) {
                face.addToMesh(faceMesh);
                for (const edge of face.allEdges) {
                    const ts = edge.curve.calcSegmentTs(edge.aT, edge.bT, edge.reversed, true);
                    for (const t of ts) {
                        const p = edge.curve.at(t);
                        faceMesh.tangents.push(p, p.plus(edge.tangentAt(t)));
                    }
                }
            }
            faceMesh.compile();
        }
        g.drPs.push();
    }
    const brepMeshColors = [
        scale(["#ff297f", "#6636FF"]),
        scale(["#ffe93a", "#ff6e35"]),
        scale(["#1eff33", "#4960ff"]),
        scale(["#31fff8", "#2dff2a"]),
    ].map((scale) => scale.mode("lab").colors(20, "color"));
    const brepMeshColorssGL = brepMeshColors.map((cs) => cs.map((c) => c.gl()));
    const meshColorsGL = scale("GnBu").colors(16, "gl");
    function viewerPaint(time, gl) {
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        gl.loadIdentity();
        //setupCamera(eye, gl)
        gl.drawVectors(g.drVs, 4 / eye.zoomFactor);
        g.drPs.forEach((info) => gl.drawPoint(info instanceof V3 ? info : info.p, info instanceof V3 || !info.color
            ? css("#cc0000").gl()
            : css(info.color).gl(), 6 / eye.zoomFactor));
        drawPlanes.forEach((plane) => gl.drawPlane(plane, plane.color, hovering == plane));
        g.planes.forEach((plane) => gl.drawPlane(plane, plane.color, hovering == plane));
        g.boxes.forEach((m4) => gl.drawBox(m4));
        gl.shaders.lighting.uniforms({ camPos: eye.pos });
        for (let i = 0; i < bRepMeshes.length; i++) {
            const mesh = bRepMeshes[i];
            gl.pushMatrix();
            //gl.translate(30, 0, 0)
            gl.projectionMatrix.m[11] -= 1 / (1 << 20); // prevent Z-fighting
            g.paintWireframe &&
                mesh.indexBuffers.wireframe &&
                gl.shaders.singleColor
                    .uniforms({ color: COLORS.TS_STROKE.gl() })
                    .drawBuffers(mesh.vertexBuffers, mesh.indexBuffers.wireframe, gl.LINES);
            g.paintMeshNormals &&
                mesh.indexBuffers.normallines &&
                gl.shaders.singleColor
                    .uniforms({ color: COLORS.TS_STROKE.gl() })
                    .drawBuffers(mesh.vertexBuffers, mesh.indexBuffers.normallines, gl.LINES);
            gl.shaders.singleColor
                .uniforms({ color: COLORS.TS_STROKE.gl() })
                .drawBuffers(mesh.vertexBuffers, mesh.indexBuffers.LINES, gl.LINES);
            gl.projectionMatrix.m[11] += 1 / (1 << 20);
            let faceIndex = bReps[i].faces.length;
            while (faceIndex--) {
                const face = bReps[i].faces[faceIndex];
                const faceTriangleIndexes = mesh.faceIndexes.get(face);
                gl.shaders.lighting
                    .uniforms({
                    color: hovering == face
                        ? emod(emod(brepMeshColors, i), faceIndex).darker(2).gl()
                        : emod(emod(brepMeshColorssGL, i), faceIndex),
                })
                    .draw(mesh, gl.TRIANGLES, faceTriangleIndexes.start, faceTriangleIndexes.count);
            }
            gl.popMatrix();
        }
        if (faceMesh) {
            gl.shaders.singleColor
                .uniforms({ color: css("red").gl() })
                .drawBuffers({ ts_Vertex: faceMesh.vertexBuffers.tangents }, undefined, gl.LINES);
            gl.shaders.lighting
                .uniforms({
                color: css("red").gl(),
                camPos: eye.pos,
            })
                .draw(faceMesh);
        }
        for (let i = 0; i < meshes.length; i++) {
            const mesh = meshes[i];
            gl.pushMatrix();
            gl.projectionMatrix.m[11] -= 1 / (1 << 20); // prevent Z-fighting
            g.paintWireframe &&
                mesh.indexBuffers.wireframe &&
                gl.shaders.singleColor
                    .uniforms({ color: COLORS.TS_STROKE.gl() })
                    .drawBuffers(mesh.vertexBuffers, mesh.indexBuffers.wireframe, gl.LINES);
            g.paintMeshNormals &&
                mesh.indexBuffers.normallines &&
                gl.shaders.singleColor
                    .uniforms({ color: COLORS.TS_STROKE.gl() })
                    .drawBuffers(mesh.vertexBuffers, mesh.indexBuffers.normallines, gl.LINES);
            gl.projectionMatrix.m[11] += 1 / (1 << 20);
            mesh.TRIANGLES &&
                gl.shaders.lighting
                    .uniforms({
                    color: emod(meshColorsGL, i),
                    camPos: eye.pos,
                })
                    .draw(mesh);
            gl.popMatrix();
        }
        if (hovering instanceof Edge) {
            gl.projectionMatrix.m[11] -= 1 / (1 << 20); // prevent Z-fighting
            gl.drawEdge(hovering, GL_COLOR_BLACK, 2 / eye.zoomFactor);
            gl.projectionMatrix.m[11] += 1 / (1 << 20);
        }
        g.edges.forEach((e, i) => gl.drawEdge(e, emod(edgeViewerColors, i), 3 / eye.zoomFactor));
        if (g.paintCurveDebug) {
            gl.begin(gl.LINES);
            gl.color("red");
            edgeDebugLines.forEach((x) => gl.vertex(x));
            gl.end();
            edgeDebugPoints.forEach((p) => gl.drawPoint(p, css("red").gl(), 6 / eye.zoomFactor));
        }
        if (0 !== g.drLines.length) {
            gl.begin(gl.LINES);
            g.drLines.forEach((x) => {
                gl.color(x.color || "red");
                gl.vertex(x);
            });
            gl.end();
        }
    }
    //var sketchPlane = new CustomPlane(V3.X, V3(1, 0, -1).unit(), V3.Y, -500, 500, -500, 500, 0xff00ff);
    const drawPlanes = [
        new CustomPlane(V3.O, V3.Y, V3.Z, "planeYZ", color(0xff0000).gl()),
        new CustomPlane(V3.O, V3.X, V3.Z, "planeZX", color(0x00ff00).gl()),
        new CustomPlane(V3.O, V3.X, V3.Y, "planeXY", color(0x0000ff).gl()),
    ];
    let paintScreen;
    function viewerMain() {
        return __awaiter(this, void 0, void 0, function* () {
            const meshNormalsCheckbox = document.getElementById("paint-mesh-normals");
            meshNormalsCheckbox.onclick = (e) => {
                g.paintMeshNormals = !g.paintMeshNormals;
                paintScreen();
            };
            const wireframeCheckbox = document.getElementById("paint-wireframe");
            wireframeCheckbox.onclick = (e) => {
                g.paintWireframe = !g.paintWireframe;
                paintScreen();
            };
            const paintDebugCheckbox = document.getElementById("paint-curvedebug");
            paintDebugCheckbox.onclick = (e) => {
                g.paintCurveDebug = !g.paintCurveDebug;
                paintScreen();
            };
            paintScreen = () => requestAnimationFrame((t) => viewerPaint(t, gl));
            // B2T.defaultFont = await B2T.loadFont(BREPTS_ROOT + '/fonts/FiraSansMedium.woff')
            window.onerror = function (errorMsg, url, lineNumber, column, errorObj) {
                console.log(errorMsg, url, lineNumber, column, errorObj);
            };
            window.onpopstate = function (e) {
                const hash = window.location.search.substr(1) || window.location.hash.substr(1) || "";
                const command = decodeURIComponent(hash);
                const hashContext = new Function(`let ${renderObjectKeys.join(",")};${command};return{${renderObjectKeys.join(",")}}`)();
                Object.assign(eye, hashContext.i);
                setupCamera(eye, gl, true);
                paintScreen();
            };
            const gl = BREPGLContext.create(TSGLContext.create({
                canvas: document.getElementById("testcanvas"),
            }));
            gl.fullscreen();
            gl.canvas.oncontextmenu = () => false;
            setupCamera(eye, gl);
            //gl.cullFace(gl.FRONT_AND_BACK);
            gl.clearColor(1.0, 1.0, 1.0, 0.0);
            gl.enable(gl.BLEND);
            gl.enable(gl.DEPTH_TEST);
            gl.enable(gl.CULL_FACE);
            gl.depthFunc(gl.LEQUAL);
            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA); // TODO ?!
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            gl.loadIdentity();
            gl.scale(10, 10, 10);
            gl.loadIdentity();
            window.gl = gl;
            initNavigationEvents(gl, eye, paintScreen);
            cameraChangeListeners.push(debounce_1(function (eye) {
                const round = (x) => round10(x, -3);
                const roundedEye = {
                    pos: eye.pos.map(round),
                    focus: eye.focus.map(round),
                    up: eye.up.map(round),
                    zoomFactor: round(eye.zoomFactor),
                };
                const iSource = "i=" + roundedEye.toSource().replace(/[\n\r\s]+|^\(|\)$/g, "");
                const hash = window.location.hash.substr(1) || iSource;
                const result = hash.match(/i=\{[^}]*\}/)
                    ? hash.replace(/i=\{[^}]*\}/, iSource)
                    : hash + ";" + iSource;
                window.history.pushState(undefined, "", "#" + result);
            }, 500));
            // initInfoEvents(paintScreen, g l)
            //initToolTips() // hide tooltip on mouseover
            //initPointInfoEvents()
            initBRep();
            setupCamera(eye, gl);
            paintScreen();
        });
    }
    function alignX(dir) {
        eye.pos = eye.focus.plus(V(100 * dir, 0, 0));
        eye.up = V3.Z;
        setupCamera(eye, window.gl);
        paintScreen();
    }
    function alignY(dir) {
        eye.pos = eye.focus.plus(V(0, 100 * dir, 0));
        eye.up = V3.Z;
        setupCamera(eye, window.gl);
        paintScreen();
    }
    function alignZ(dir) {
        eye.pos = eye.focus.plus(V(0, 0, 100 * dir));
        eye.up = eye.pos.cross(V3.X).unit();
        setupCamera(eye, window.gl);
        paintScreen();
    }
    function rot(angleInDeg) {
        eye.up = M4.rotateLine(eye.pos, eye.pos.to(eye.focus), angleInDeg * DEG).transformVector(eye.up);
        setupCamera(eye, window.gl);
        paintScreen();
    }

    exports.RenderObjects = RenderObjects;
    exports.alignX = alignX;
    exports.alignY = alignY;
    exports.alignZ = alignZ;
    exports.rot = rot;
    exports.viewerMain = viewerMain;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

}({}, javasetmap_ts));
//# sourceMappingURL=viewer.js.map
