var demo = (function (exports,hljs) {
    'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
                t[p[i]] = s[p[i]];
        return t;
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function unwrapExports (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x.default : x;
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var chroma = createCommonjsModule(function (module, exports) {
    /**
     * @license
     *
     * chroma.js - JavaScript library for color conversions
     * 
     * Copyright (c) 2011-2017, Gregor Aisch
     * All rights reserved.
     * 
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are met:
     * 
     * 1. Redistributions of source code must retain the above copyright notice, this
     *    list of conditions and the following disclaimer.
     * 
     * 2. Redistributions in binary form must reproduce the above copyright notice,
     *    this list of conditions and the following disclaimer in the documentation
     *    and/or other materials provided with the distribution.
     * 
     * 3. The name Gregor Aisch may not be used to endorse or promote products
     *    derived from this software without specific prior written permission.
     * 
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
     * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
     * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
     * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
     * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     *
     */

    (function() {
      var Color, DEG2RAD, LAB_CONSTANTS, PI, PITHIRD, RAD2DEG, TWOPI, _average_lrgb, _guess_formats, _guess_formats_sorted, _input, _interpolators, abs, atan2, bezier, blend, blend_f, brewer, burn, chroma, clip_rgb, cmyk2rgb, colors, cos, css2rgb, darken, dodge, each, floor, hcg2rgb, hex2rgb, hsi2rgb, hsl2css, hsl2rgb, hsv2rgb, interpolate, interpolate_hsx, interpolate_lab, interpolate_lrgb, interpolate_num, interpolate_rgb, lab2lch, lab2rgb, lab_xyz, lch2lab, lch2rgb, lighten, limit, log, luminance_x, m, max, multiply, normal, num2rgb, overlay, pow, rgb2cmyk, rgb2css, rgb2hcg, rgb2hex, rgb2hsi, rgb2hsl, rgb2hsv, rgb2lab, rgb2lch, rgb2luminance, rgb2num, rgb2temperature, rgb2xyz, rgb_xyz, rnd, root, round, screen, sin, sqrt, temperature2rgb, type, unpack, w3cx11, xyz_lab, xyz_rgb,
        slice = [].slice;

      type = (function() {

        /*
        for browser-safe type checking+
        ported from jQuery's $.type
         */
        var classToType, len, name, o, ref;
        classToType = {};
        ref = "Boolean Number String Function Array Date RegExp Undefined Null".split(" ");
        for (o = 0, len = ref.length; o < len; o++) {
          name = ref[o];
          classToType["[object " + name + "]"] = name.toLowerCase();
        }
        return function(obj) {
          var strType;
          strType = Object.prototype.toString.call(obj);
          return classToType[strType] || "object";
        };
      })();

      limit = function(x, min, max) {
        if (min == null) {
          min = 0;
        }
        if (max == null) {
          max = 1;
        }
        if (x < min) {
          x = min;
        }
        if (x > max) {
          x = max;
        }
        return x;
      };

      unpack = function(args) {
        if (args.length >= 3) {
          return Array.prototype.slice.call(args);
        } else {
          return args[0];
        }
      };

      clip_rgb = function(rgb) {
        var i, o;
        rgb._clipped = false;
        rgb._unclipped = rgb.slice(0);
        for (i = o = 0; o < 3; i = ++o) {
          if (i < 3) {
            if (rgb[i] < 0 || rgb[i] > 255) {
              rgb._clipped = true;
            }
            if (rgb[i] < 0) {
              rgb[i] = 0;
            }
            if (rgb[i] > 255) {
              rgb[i] = 255;
            }
          } else if (i === 3) {
            if (rgb[i] < 0) {
              rgb[i] = 0;
            }
            if (rgb[i] > 1) {
              rgb[i] = 1;
            }
          }
        }
        if (!rgb._clipped) {
          delete rgb._unclipped;
        }
        return rgb;
      };

      PI = Math.PI, round = Math.round, cos = Math.cos, floor = Math.floor, pow = Math.pow, log = Math.log, sin = Math.sin, sqrt = Math.sqrt, atan2 = Math.atan2, max = Math.max, abs = Math.abs;

      TWOPI = PI * 2;

      PITHIRD = PI / 3;

      DEG2RAD = PI / 180;

      RAD2DEG = 180 / PI;

      chroma = function() {
        if (arguments[0] instanceof Color) {
          return arguments[0];
        }
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(Color, arguments, function(){});
      };

      chroma["default"] = chroma;

      _interpolators = [];

      if ((module !== null) && (module.exports != null)) {
        module.exports = chroma;
      }

      {
        root = exports !== null ? exports : this;
        root.chroma = chroma;
      }

      chroma.version = '1.4.0';

      _input = {};

      _guess_formats = [];

      _guess_formats_sorted = false;

      Color = (function() {
        function Color() {
          var arg, args, chk, len, len1, me, mode, o, w;
          me = this;
          args = [];
          for (o = 0, len = arguments.length; o < len; o++) {
            arg = arguments[o];
            if (arg != null) {
              args.push(arg);
            }
          }
          if (args.length > 1) {
            mode = args[args.length - 1];
          }
          if (_input[mode] != null) {
            me._rgb = clip_rgb(_input[mode](unpack(args.slice(0, -1))));
          } else {
            if (!_guess_formats_sorted) {
              _guess_formats = _guess_formats.sort(function(a, b) {
                return b.p - a.p;
              });
              _guess_formats_sorted = true;
            }
            for (w = 0, len1 = _guess_formats.length; w < len1; w++) {
              chk = _guess_formats[w];
              mode = chk.test.apply(chk, args);
              if (mode) {
                break;
              }
            }
            if (mode) {
              me._rgb = clip_rgb(_input[mode].apply(_input, args));
            }
          }
          if (me._rgb == null) {
            console.warn('unknown format: ' + args);
          }
          if (me._rgb == null) {
            me._rgb = [0, 0, 0];
          }
          if (me._rgb.length === 3) {
            me._rgb.push(1);
          }
        }

        Color.prototype.toString = function() {
          return this.hex();
        };

        return Color;

      })();

      chroma._input = _input;


      /**
      	ColorBrewer colors for chroma.js
      
      	Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The 
      	Pennsylvania State University.
      
      	Licensed under the Apache License, Version 2.0 (the "License"); 
      	you may not use this file except in compliance with the License.
      	You may obtain a copy of the License at	
      	http://www.apache.org/licenses/LICENSE-2.0
      
      	Unless required by applicable law or agreed to in writing, software distributed
      	under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
      	CONDITIONS OF ANY KIND, either express or implied. See the License for the
      	specific language governing permissions and limitations under the License.
      
          @preserve
       */

      chroma.brewer = brewer = {
        OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],
        PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],
        BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],
        Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],
        BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],
        YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],
        YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],
        Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],
        RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],
        Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],
        YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],
        Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],
        GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],
        Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],
        YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],
        PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],
        Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],
        PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],
        Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],
        Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],
        RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],
        RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],
        PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],
        PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],
        RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],
        BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],
        RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],
        PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],
        Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],
        Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],
        Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],
        Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],
        Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],
        Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],
        Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],
        Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2']
      };

      (function() {
        var key, results;
        results = [];
        for (key in brewer) {
          results.push(brewer[key.toLowerCase()] = brewer[key]);
        }
        return results;
      })();


      /**
      	X11 color names
      
      	http://www.w3.org/TR/css3-color/#svg-color
       */

      w3cx11 = {
        aliceblue: '#f0f8ff',
        antiquewhite: '#faebd7',
        aqua: '#00ffff',
        aquamarine: '#7fffd4',
        azure: '#f0ffff',
        beige: '#f5f5dc',
        bisque: '#ffe4c4',
        black: '#000000',
        blanchedalmond: '#ffebcd',
        blue: '#0000ff',
        blueviolet: '#8a2be2',
        brown: '#a52a2a',
        burlywood: '#deb887',
        cadetblue: '#5f9ea0',
        chartreuse: '#7fff00',
        chocolate: '#d2691e',
        coral: '#ff7f50',
        cornflower: '#6495ed',
        cornflowerblue: '#6495ed',
        cornsilk: '#fff8dc',
        crimson: '#dc143c',
        cyan: '#00ffff',
        darkblue: '#00008b',
        darkcyan: '#008b8b',
        darkgoldenrod: '#b8860b',
        darkgray: '#a9a9a9',
        darkgreen: '#006400',
        darkgrey: '#a9a9a9',
        darkkhaki: '#bdb76b',
        darkmagenta: '#8b008b',
        darkolivegreen: '#556b2f',
        darkorange: '#ff8c00',
        darkorchid: '#9932cc',
        darkred: '#8b0000',
        darksalmon: '#e9967a',
        darkseagreen: '#8fbc8f',
        darkslateblue: '#483d8b',
        darkslategray: '#2f4f4f',
        darkslategrey: '#2f4f4f',
        darkturquoise: '#00ced1',
        darkviolet: '#9400d3',
        deeppink: '#ff1493',
        deepskyblue: '#00bfff',
        dimgray: '#696969',
        dimgrey: '#696969',
        dodgerblue: '#1e90ff',
        firebrick: '#b22222',
        floralwhite: '#fffaf0',
        forestgreen: '#228b22',
        fuchsia: '#ff00ff',
        gainsboro: '#dcdcdc',
        ghostwhite: '#f8f8ff',
        gold: '#ffd700',
        goldenrod: '#daa520',
        gray: '#808080',
        green: '#008000',
        greenyellow: '#adff2f',
        grey: '#808080',
        honeydew: '#f0fff0',
        hotpink: '#ff69b4',
        indianred: '#cd5c5c',
        indigo: '#4b0082',
        ivory: '#fffff0',
        khaki: '#f0e68c',
        laserlemon: '#ffff54',
        lavender: '#e6e6fa',
        lavenderblush: '#fff0f5',
        lawngreen: '#7cfc00',
        lemonchiffon: '#fffacd',
        lightblue: '#add8e6',
        lightcoral: '#f08080',
        lightcyan: '#e0ffff',
        lightgoldenrod: '#fafad2',
        lightgoldenrodyellow: '#fafad2',
        lightgray: '#d3d3d3',
        lightgreen: '#90ee90',
        lightgrey: '#d3d3d3',
        lightpink: '#ffb6c1',
        lightsalmon: '#ffa07a',
        lightseagreen: '#20b2aa',
        lightskyblue: '#87cefa',
        lightslategray: '#778899',
        lightslategrey: '#778899',
        lightsteelblue: '#b0c4de',
        lightyellow: '#ffffe0',
        lime: '#00ff00',
        limegreen: '#32cd32',
        linen: '#faf0e6',
        magenta: '#ff00ff',
        maroon: '#800000',
        maroon2: '#7f0000',
        maroon3: '#b03060',
        mediumaquamarine: '#66cdaa',
        mediumblue: '#0000cd',
        mediumorchid: '#ba55d3',
        mediumpurple: '#9370db',
        mediumseagreen: '#3cb371',
        mediumslateblue: '#7b68ee',
        mediumspringgreen: '#00fa9a',
        mediumturquoise: '#48d1cc',
        mediumvioletred: '#c71585',
        midnightblue: '#191970',
        mintcream: '#f5fffa',
        mistyrose: '#ffe4e1',
        moccasin: '#ffe4b5',
        navajowhite: '#ffdead',
        navy: '#000080',
        oldlace: '#fdf5e6',
        olive: '#808000',
        olivedrab: '#6b8e23',
        orange: '#ffa500',
        orangered: '#ff4500',
        orchid: '#da70d6',
        palegoldenrod: '#eee8aa',
        palegreen: '#98fb98',
        paleturquoise: '#afeeee',
        palevioletred: '#db7093',
        papayawhip: '#ffefd5',
        peachpuff: '#ffdab9',
        peru: '#cd853f',
        pink: '#ffc0cb',
        plum: '#dda0dd',
        powderblue: '#b0e0e6',
        purple: '#800080',
        purple2: '#7f007f',
        purple3: '#a020f0',
        rebeccapurple: '#663399',
        red: '#ff0000',
        rosybrown: '#bc8f8f',
        royalblue: '#4169e1',
        saddlebrown: '#8b4513',
        salmon: '#fa8072',
        sandybrown: '#f4a460',
        seagreen: '#2e8b57',
        seashell: '#fff5ee',
        sienna: '#a0522d',
        silver: '#c0c0c0',
        skyblue: '#87ceeb',
        slateblue: '#6a5acd',
        slategray: '#708090',
        slategrey: '#708090',
        snow: '#fffafa',
        springgreen: '#00ff7f',
        steelblue: '#4682b4',
        tan: '#d2b48c',
        teal: '#008080',
        thistle: '#d8bfd8',
        tomato: '#ff6347',
        turquoise: '#40e0d0',
        violet: '#ee82ee',
        wheat: '#f5deb3',
        white: '#ffffff',
        whitesmoke: '#f5f5f5',
        yellow: '#ffff00',
        yellowgreen: '#9acd32'
      };

      chroma.colors = colors = w3cx11;

      lab2rgb = function() {
        var a, args, b, g, l, r, x, y, z;
        args = unpack(arguments);
        l = args[0], a = args[1], b = args[2];
        y = (l + 16) / 116;
        x = isNaN(a) ? y : y + a / 500;
        z = isNaN(b) ? y : y - b / 200;
        y = LAB_CONSTANTS.Yn * lab_xyz(y);
        x = LAB_CONSTANTS.Xn * lab_xyz(x);
        z = LAB_CONSTANTS.Zn * lab_xyz(z);
        r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);
        g = xyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z);
        b = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);
        return [r, g, b, args.length > 3 ? args[3] : 1];
      };

      xyz_rgb = function(r) {
        return 255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow(r, 1 / 2.4) - 0.055);
      };

      lab_xyz = function(t) {
        if (t > LAB_CONSTANTS.t1) {
          return t * t * t;
        } else {
          return LAB_CONSTANTS.t2 * (t - LAB_CONSTANTS.t0);
        }
      };

      LAB_CONSTANTS = {
        Kn: 18,
        Xn: 0.950470,
        Yn: 1,
        Zn: 1.088830,
        t0: 0.137931034,
        t1: 0.206896552,
        t2: 0.12841855,
        t3: 0.008856452
      };

      rgb2lab = function() {
        var b, g, r, ref, ref1, x, y, z;
        ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
        ref1 = rgb2xyz(r, g, b), x = ref1[0], y = ref1[1], z = ref1[2];
        return [116 * y - 16, 500 * (x - y), 200 * (y - z)];
      };

      rgb_xyz = function(r) {
        if ((r /= 255) <= 0.04045) {
          return r / 12.92;
        } else {
          return pow((r + 0.055) / 1.055, 2.4);
        }
      };

      xyz_lab = function(t) {
        if (t > LAB_CONSTANTS.t3) {
          return pow(t, 1 / 3);
        } else {
          return t / LAB_CONSTANTS.t2 + LAB_CONSTANTS.t0;
        }
      };

      rgb2xyz = function() {
        var b, g, r, ref, x, y, z;
        ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
        r = rgb_xyz(r);
        g = rgb_xyz(g);
        b = rgb_xyz(b);
        x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / LAB_CONSTANTS.Xn);
        y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / LAB_CONSTANTS.Yn);
        z = xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / LAB_CONSTANTS.Zn);
        return [x, y, z];
      };

      chroma.lab = function() {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(Color, slice.call(arguments).concat(['lab']), function(){});
      };

      _input.lab = lab2rgb;

      Color.prototype.lab = function() {
        return rgb2lab(this._rgb);
      };

      bezier = function(colors) {
        var I, I0, I1, c, lab0, lab1, lab2, lab3, ref, ref1, ref2;
        colors = (function() {
          var len, o, results;
          results = [];
          for (o = 0, len = colors.length; o < len; o++) {
            c = colors[o];
            results.push(chroma(c));
          }
          return results;
        })();
        if (colors.length === 2) {
          ref = (function() {
            var len, o, results;
            results = [];
            for (o = 0, len = colors.length; o < len; o++) {
              c = colors[o];
              results.push(c.lab());
            }
            return results;
          })(), lab0 = ref[0], lab1 = ref[1];
          I = function(t) {
            var i, lab;
            lab = (function() {
              var o, results;
              results = [];
              for (i = o = 0; o <= 2; i = ++o) {
                results.push(lab0[i] + t * (lab1[i] - lab0[i]));
              }
              return results;
            })();
            return chroma.lab.apply(chroma, lab);
          };
        } else if (colors.length === 3) {
          ref1 = (function() {
            var len, o, results;
            results = [];
            for (o = 0, len = colors.length; o < len; o++) {
              c = colors[o];
              results.push(c.lab());
            }
            return results;
          })(), lab0 = ref1[0], lab1 = ref1[1], lab2 = ref1[2];
          I = function(t) {
            var i, lab;
            lab = (function() {
              var o, results;
              results = [];
              for (i = o = 0; o <= 2; i = ++o) {
                results.push((1 - t) * (1 - t) * lab0[i] + 2 * (1 - t) * t * lab1[i] + t * t * lab2[i]);
              }
              return results;
            })();
            return chroma.lab.apply(chroma, lab);
          };
        } else if (colors.length === 4) {
          ref2 = (function() {
            var len, o, results;
            results = [];
            for (o = 0, len = colors.length; o < len; o++) {
              c = colors[o];
              results.push(c.lab());
            }
            return results;
          })(), lab0 = ref2[0], lab1 = ref2[1], lab2 = ref2[2], lab3 = ref2[3];
          I = function(t) {
            var i, lab;
            lab = (function() {
              var o, results;
              results = [];
              for (i = o = 0; o <= 2; i = ++o) {
                results.push((1 - t) * (1 - t) * (1 - t) * lab0[i] + 3 * (1 - t) * (1 - t) * t * lab1[i] + 3 * (1 - t) * t * t * lab2[i] + t * t * t * lab3[i]);
              }
              return results;
            })();
            return chroma.lab.apply(chroma, lab);
          };
        } else if (colors.length === 5) {
          I0 = bezier(colors.slice(0, 3));
          I1 = bezier(colors.slice(2, 5));
          I = function(t) {
            if (t < 0.5) {
              return I0(t * 2);
            } else {
              return I1((t - 0.5) * 2);
            }
          };
        }
        return I;
      };

      chroma.bezier = function(colors) {
        var f;
        f = bezier(colors);
        f.scale = function() {
          return chroma.scale(f);
        };
        return f;
      };

      chroma.cubehelix = function(start, rotations, hue, gamma, lightness) {
        var dh, dl, f;
        if (start == null) {
          start = 300;
        }
        if (rotations == null) {
          rotations = -1.5;
        }
        if (hue == null) {
          hue = 1;
        }
        if (gamma == null) {
          gamma = 1;
        }
        if (lightness == null) {
          lightness = [0, 1];
        }
        dh = 0;
        if (type(lightness) === 'array') {
          dl = lightness[1] - lightness[0];
        } else {
          dl = 0;
          lightness = [lightness, lightness];
        }
        f = function(fract) {
          var a, amp, b, cos_a, g, h, l, r, sin_a;
          a = TWOPI * ((start + 120) / 360 + rotations * fract);
          l = pow(lightness[0] + dl * fract, gamma);
          h = dh !== 0 ? hue[0] + fract * dh : hue;
          amp = h * l * (1 - l) / 2;
          cos_a = cos(a);
          sin_a = sin(a);
          r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);
          g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);
          b = l + amp * (+1.97294 * cos_a);
          return chroma(clip_rgb([r * 255, g * 255, b * 255, 1]));
        };
        f.start = function(s) {
          if (s == null) {
            return start;
          }
          start = s;
          return f;
        };
        f.rotations = function(r) {
          if (r == null) {
            return rotations;
          }
          rotations = r;
          return f;
        };
        f.gamma = function(g) {
          if (g == null) {
            return gamma;
          }
          gamma = g;
          return f;
        };
        f.hue = function(h) {
          if (h == null) {
            return hue;
          }
          hue = h;
          if (type(hue) === 'array') {
            dh = hue[1] - hue[0];
            if (dh === 0) {
              hue = hue[1];
            }
          } else {
            dh = 0;
          }
          return f;
        };
        f.lightness = function(h) {
          if (h == null) {
            return lightness;
          }
          if (type(h) === 'array') {
            lightness = h;
            dl = h[1] - h[0];
          } else {
            lightness = [h, h];
            dl = 0;
          }
          return f;
        };
        f.scale = function() {
          return chroma.scale(f);
        };
        f.hue(hue);
        return f;
      };

      chroma.random = function() {
        var code, digits, i, o;
        digits = '0123456789abcdef';
        code = '#';
        for (i = o = 0; o < 6; i = ++o) {
          code += digits.charAt(floor(Math.random() * 16));
        }
        return new Color(code);
      };

      _interpolators = [];

      interpolate = function(col1, col2, f, m) {
        var interpol, len, o, res;
        if (f == null) {
          f = 0.5;
        }
        if (m == null) {
          m = 'rgb';
        }

        /*
        interpolates between colors
        f = 0 --> me
        f = 1 --> col
         */
        if (type(col1) !== 'object') {
          col1 = chroma(col1);
        }
        if (type(col2) !== 'object') {
          col2 = chroma(col2);
        }
        for (o = 0, len = _interpolators.length; o < len; o++) {
          interpol = _interpolators[o];
          if (m === interpol[0]) {
            res = interpol[1](col1, col2, f, m);
            break;
          }
        }
        if (res == null) {
          throw "color mode " + m + " is not supported";
        }
        return res.alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));
      };

      chroma.interpolate = interpolate;

      Color.prototype.interpolate = function(col2, f, m) {
        return interpolate(this, col2, f, m);
      };

      chroma.mix = interpolate;

      Color.prototype.mix = Color.prototype.interpolate;

      _input.rgb = function() {
        var k, ref, results, v;
        ref = unpack(arguments);
        results = [];
        for (k in ref) {
          v = ref[k];
          results.push(v);
        }
        return results;
      };

      chroma.rgb = function() {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(Color, slice.call(arguments).concat(['rgb']), function(){});
      };

      Color.prototype.rgb = function(round) {
        if (round == null) {
          round = true;
        }
        if (round) {
          return this._rgb.map(Math.round).slice(0, 3);
        } else {
          return this._rgb.slice(0, 3);
        }
      };

      Color.prototype.rgba = function(round) {
        if (round == null) {
          round = true;
        }
        if (!round) {
          return this._rgb.slice(0);
        }
        return [Math.round(this._rgb[0]), Math.round(this._rgb[1]), Math.round(this._rgb[2]), this._rgb[3]];
      };

      _guess_formats.push({
        p: 3,
        test: function(n) {
          var a;
          a = unpack(arguments);
          if (type(a) === 'array' && a.length === 3) {
            return 'rgb';
          }
          if (a.length === 4 && type(a[3]) === "number" && a[3] >= 0 && a[3] <= 1) {
            return 'rgb';
          }
        }
      });

      _input.lrgb = _input.rgb;

      interpolate_lrgb = function(col1, col2, f, m) {
        var xyz0, xyz1;
        xyz0 = col1._rgb;
        xyz1 = col2._rgb;
        return new Color(sqrt(pow(xyz0[0], 2) * (1 - f) + pow(xyz1[0], 2) * f), sqrt(pow(xyz0[1], 2) * (1 - f) + pow(xyz1[1], 2) * f), sqrt(pow(xyz0[2], 2) * (1 - f) + pow(xyz1[2], 2) * f), m);
      };

      _average_lrgb = function(colors) {
        var col, f, len, o, rgb, xyz;
        f = 1 / colors.length;
        xyz = [0, 0, 0, 0];
        for (o = 0, len = colors.length; o < len; o++) {
          col = colors[o];
          rgb = col._rgb;
          xyz[0] += pow(rgb[0], 2) * f;
          xyz[1] += pow(rgb[1], 2) * f;
          xyz[2] += pow(rgb[2], 2) * f;
          xyz[3] += rgb[3] * f;
        }
        xyz[0] = sqrt(xyz[0]);
        xyz[1] = sqrt(xyz[1]);
        xyz[2] = sqrt(xyz[2]);
        if (xyz[3] > 1) {
          xyz[3] = 1;
        }
        return new Color(clip_rgb(xyz));
      };

      _interpolators.push(['lrgb', interpolate_lrgb]);

      chroma.average = function(colors, mode) {
        var A, alpha, c, cnt, dx, dy, first, i, l, len, o, xyz, xyz2;
        if (mode == null) {
          mode = 'rgb';
        }
        l = colors.length;
        colors = colors.map(function(c) {
          return chroma(c);
        });
        first = colors.splice(0, 1)[0];
        if (mode === 'lrgb') {
          return _average_lrgb(colors);
        }
        xyz = first.get(mode);
        cnt = [];
        dx = 0;
        dy = 0;
        for (i in xyz) {
          xyz[i] = xyz[i] || 0;
          cnt.push(isNaN(xyz[i]) ? 0 : 1);
          if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {
            A = xyz[i] / 180 * PI;
            dx += cos(A);
            dy += sin(A);
          }
        }
        alpha = first.alpha();
        for (o = 0, len = colors.length; o < len; o++) {
          c = colors[o];
          xyz2 = c.get(mode);
          alpha += c.alpha();
          for (i in xyz) {
            if (!isNaN(xyz2[i])) {
              cnt[i] += 1;
              if (mode.charAt(i) === 'h') {
                A = xyz2[i] / 180 * PI;
                dx += cos(A);
                dy += sin(A);
              } else {
                xyz[i] += xyz2[i];
              }
            }
          }
        }
        for (i in xyz) {
          if (mode.charAt(i) === 'h') {
            A = atan2(dy / cnt[i], dx / cnt[i]) / PI * 180;
            while (A < 0) {
              A += 360;
            }
            while (A >= 360) {
              A -= 360;
            }
            xyz[i] = A;
          } else {
            xyz[i] = xyz[i] / cnt[i];
          }
        }
        return chroma(xyz, mode).alpha(alpha / l);
      };

      hex2rgb = function(hex) {
        var a, b, g, r, rgb, u;
        if (hex.match(/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)) {
          if (hex.length === 4 || hex.length === 7) {
            hex = hex.substr(1);
          }
          if (hex.length === 3) {
            hex = hex.split("");
            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
          }
          u = parseInt(hex, 16);
          r = u >> 16;
          g = u >> 8 & 0xFF;
          b = u & 0xFF;
          return [r, g, b, 1];
        }
        if (hex.match(/^#?([A-Fa-f0-9]{8})$/)) {
          if (hex.length === 9) {
            hex = hex.substr(1);
          }
          u = parseInt(hex, 16);
          r = u >> 24 & 0xFF;
          g = u >> 16 & 0xFF;
          b = u >> 8 & 0xFF;
          a = round((u & 0xFF) / 0xFF * 100) / 100;
          return [r, g, b, a];
        }
        if ((_input.css != null) && (rgb = _input.css(hex))) {
          return rgb;
        }
        throw "unknown color: " + hex;
      };

      rgb2hex = function(channels, mode) {
        var a, b, g, hxa, r, str, u;
        if (mode == null) {
          mode = 'auto';
        }
        r = channels[0], g = channels[1], b = channels[2], a = channels[3];
        if (mode === 'auto') {
          mode = a < 1 ? 'rgba' : 'rgb';
        }
        r = Math.round(r);
        g = Math.round(g);
        b = Math.round(b);
        u = r << 16 | g << 8 | b;
        str = "000000" + u.toString(16);
        str = str.substr(str.length - 6);
        hxa = '0' + round(a * 255).toString(16);
        hxa = hxa.substr(hxa.length - 2);
        return "#" + (function() {
          switch (mode.toLowerCase()) {
            case 'rgba':
              return str + hxa;
            case 'argb':
              return hxa + str;
            default:
              return str;
          }
        })();
      };

      _input.hex = function(h) {
        return hex2rgb(h);
      };

      chroma.hex = function() {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(Color, slice.call(arguments).concat(['hex']), function(){});
      };

      Color.prototype.hex = function(mode) {
        if (mode == null) {
          mode = 'auto';
        }
        return rgb2hex(this._rgb, mode);
      };

      _guess_formats.push({
        p: 4,
        test: function(n) {
          if (arguments.length === 1 && type(n) === "string") {
            return 'hex';
          }
        }
      });

      hsl2rgb = function() {
        var args, b, c, g, h, i, l, o, r, ref, s, t1, t2, t3;
        args = unpack(arguments);
        h = args[0], s = args[1], l = args[2];
        if (s === 0) {
          r = g = b = l * 255;
        } else {
          t3 = [0, 0, 0];
          c = [0, 0, 0];
          t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;
          t1 = 2 * l - t2;
          h /= 360;
          t3[0] = h + 1 / 3;
          t3[1] = h;
          t3[2] = h - 1 / 3;
          for (i = o = 0; o <= 2; i = ++o) {
            if (t3[i] < 0) {
              t3[i] += 1;
            }
            if (t3[i] > 1) {
              t3[i] -= 1;
            }
            if (6 * t3[i] < 1) {
              c[i] = t1 + (t2 - t1) * 6 * t3[i];
            } else if (2 * t3[i] < 1) {
              c[i] = t2;
            } else if (3 * t3[i] < 2) {
              c[i] = t1 + (t2 - t1) * ((2 / 3) - t3[i]) * 6;
            } else {
              c[i] = t1;
            }
          }
          ref = [round(c[0] * 255), round(c[1] * 255), round(c[2] * 255)], r = ref[0], g = ref[1], b = ref[2];
        }
        if (args.length > 3) {
          return [r, g, b, args[3]];
        } else {
          return [r, g, b];
        }
      };

      rgb2hsl = function(r, g, b) {
        var h, l, min, ref, s;
        if (r !== void 0 && r.length >= 3) {
          ref = r, r = ref[0], g = ref[1], b = ref[2];
        }
        r /= 255;
        g /= 255;
        b /= 255;
        min = Math.min(r, g, b);
        max = Math.max(r, g, b);
        l = (max + min) / 2;
        if (max === min) {
          s = 0;
          h = Number.NaN;
        } else {
          s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);
        }
        if (r === max) {
          h = (g - b) / (max - min);
        } else if (g === max) {
          h = 2 + (b - r) / (max - min);
        } else if (b === max) {
          h = 4 + (r - g) / (max - min);
        }
        h *= 60;
        if (h < 0) {
          h += 360;
        }
        return [h, s, l];
      };

      chroma.hsl = function() {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(Color, slice.call(arguments).concat(['hsl']), function(){});
      };

      _input.hsl = hsl2rgb;

      Color.prototype.hsl = function() {
        return rgb2hsl(this._rgb);
      };

      hsv2rgb = function() {
        var args, b, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, s, t, v;
        args = unpack(arguments);
        h = args[0], s = args[1], v = args[2];
        v *= 255;
        if (s === 0) {
          r = g = b = v;
        } else {
          if (h === 360) {
            h = 0;
          }
          if (h > 360) {
            h -= 360;
          }
          if (h < 0) {
            h += 360;
          }
          h /= 60;
          i = floor(h);
          f = h - i;
          p = v * (1 - s);
          q = v * (1 - s * f);
          t = v * (1 - s * (1 - f));
          switch (i) {
            case 0:
              ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];
              break;
            case 1:
              ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];
              break;
            case 2:
              ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];
              break;
            case 3:
              ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];
              break;
            case 4:
              ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];
              break;
            case 5:
              ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];
          }
        }
        return [r, g, b, args.length > 3 ? args[3] : 1];
      };

      rgb2hsv = function() {
        var b, delta, g, h, min, r, ref, s, v;
        ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
        min = Math.min(r, g, b);
        max = Math.max(r, g, b);
        delta = max - min;
        v = max / 255.0;
        if (max === 0) {
          h = Number.NaN;
          s = 0;
        } else {
          s = delta / max;
          if (r === max) {
            h = (g - b) / delta;
          }
          if (g === max) {
            h = 2 + (b - r) / delta;
          }
          if (b === max) {
            h = 4 + (r - g) / delta;
          }
          h *= 60;
          if (h < 0) {
            h += 360;
          }
        }
        return [h, s, v];
      };

      chroma.hsv = function() {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(Color, slice.call(arguments).concat(['hsv']), function(){});
      };

      _input.hsv = hsv2rgb;

      Color.prototype.hsv = function() {
        return rgb2hsv(this._rgb);
      };

      num2rgb = function(num) {
        var b, g, r;
        if (type(num) === "number" && num >= 0 && num <= 0xFFFFFF) {
          r = num >> 16;
          g = (num >> 8) & 0xFF;
          b = num & 0xFF;
          return [r, g, b, 1];
        }
        console.warn("unknown num color: " + num);
        return [0, 0, 0, 1];
      };

      rgb2num = function() {
        var b, g, r, ref;
        ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
        return (r << 16) + (g << 8) + b;
      };

      chroma.num = function(num) {
        return new Color(num, 'num');
      };

      Color.prototype.num = function(mode) {
        if (mode == null) {
          mode = 'rgb';
        }
        return rgb2num(this._rgb, mode);
      };

      _input.num = num2rgb;

      _guess_formats.push({
        p: 1,
        test: function(n) {
          if (arguments.length === 1 && type(n) === "number" && n >= 0 && n <= 0xFFFFFF) {
            return 'num';
          }
        }
      });

      hcg2rgb = function() {
        var _c, _g, args, b, c, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, t, v;
        args = unpack(arguments);
        h = args[0], c = args[1], _g = args[2];
        c = c / 100;
        g = g / 100 * 255;
        _c = c * 255;
        if (c === 0) {
          r = g = b = _g;
        } else {
          if (h === 360) {
            h = 0;
          }
          if (h > 360) {
            h -= 360;
          }
          if (h < 0) {
            h += 360;
          }
          h /= 60;
          i = floor(h);
          f = h - i;
          p = _g * (1 - c);
          q = p + _c * (1 - f);
          t = p + _c * f;
          v = p + _c;
          switch (i) {
            case 0:
              ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];
              break;
            case 1:
              ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];
              break;
            case 2:
              ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];
              break;
            case 3:
              ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];
              break;
            case 4:
              ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];
              break;
            case 5:
              ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];
          }
        }
        return [r, g, b, args.length > 3 ? args[3] : 1];
      };

      rgb2hcg = function() {
        var _g, b, c, delta, g, h, min, r, ref;
        ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
        min = Math.min(r, g, b);
        max = Math.max(r, g, b);
        delta = max - min;
        c = delta * 100 / 255;
        _g = min / (255 - delta) * 100;
        if (delta === 0) {
          h = Number.NaN;
        } else {
          if (r === max) {
            h = (g - b) / delta;
          }
          if (g === max) {
            h = 2 + (b - r) / delta;
          }
          if (b === max) {
            h = 4 + (r - g) / delta;
          }
          h *= 60;
          if (h < 0) {
            h += 360;
          }
        }
        return [h, c, _g];
      };

      chroma.hcg = function() {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(Color, slice.call(arguments).concat(['hcg']), function(){});
      };

      _input.hcg = hcg2rgb;

      Color.prototype.hcg = function() {
        return rgb2hcg(this._rgb);
      };

      css2rgb = function(css) {
        var aa, ab, hsl, i, m, o, rgb, w;
        css = css.toLowerCase();
        if ((chroma.colors != null) && chroma.colors[css]) {
          return hex2rgb(chroma.colors[css]);
        }
        if (m = css.match(/rgb\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*\)/)) {
          rgb = m.slice(1, 4);
          for (i = o = 0; o <= 2; i = ++o) {
            rgb[i] = +rgb[i];
          }
          rgb[3] = 1;
        } else if (m = css.match(/rgba\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*,\s*([01]|[01]?\.\d+)\)/)) {
          rgb = m.slice(1, 5);
          for (i = w = 0; w <= 3; i = ++w) {
            rgb[i] = +rgb[i];
          }
        } else if (m = css.match(/rgb\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
          rgb = m.slice(1, 4);
          for (i = aa = 0; aa <= 2; i = ++aa) {
            rgb[i] = round(rgb[i] * 2.55);
          }
          rgb[3] = 1;
        } else if (m = css.match(/rgba\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
          rgb = m.slice(1, 5);
          for (i = ab = 0; ab <= 2; i = ++ab) {
            rgb[i] = round(rgb[i] * 2.55);
          }
          rgb[3] = +rgb[3];
        } else if (m = css.match(/hsl\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
          hsl = m.slice(1, 4);
          hsl[1] *= 0.01;
          hsl[2] *= 0.01;
          rgb = hsl2rgb(hsl);
          rgb[3] = 1;
        } else if (m = css.match(/hsla\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
          hsl = m.slice(1, 4);
          hsl[1] *= 0.01;
          hsl[2] *= 0.01;
          rgb = hsl2rgb(hsl);
          rgb[3] = +m[4];
        }
        return rgb;
      };

      rgb2css = function(rgba) {
        var mode;
        mode = rgba[3] < 1 ? 'rgba' : 'rgb';
        if (mode === 'rgb') {
          return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ')';
        } else if (mode === 'rgba') {
          return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ',' + rgba[3] + ')';
        }
      };

      rnd = function(a) {
        return round(a * 100) / 100;
      };

      hsl2css = function(hsl, alpha) {
        var mode;
        mode = alpha < 1 ? 'hsla' : 'hsl';
        hsl[0] = rnd(hsl[0] || 0);
        hsl[1] = rnd(hsl[1] * 100) + '%';
        hsl[2] = rnd(hsl[2] * 100) + '%';
        if (mode === 'hsla') {
          hsl[3] = alpha;
        }
        return mode + '(' + hsl.join(',') + ')';
      };

      _input.css = function(h) {
        return css2rgb(h);
      };

      chroma.css = function() {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(Color, slice.call(arguments).concat(['css']), function(){});
      };

      Color.prototype.css = function(mode) {
        if (mode == null) {
          mode = 'rgb';
        }
        if (mode.slice(0, 3) === 'rgb') {
          return rgb2css(this._rgb);
        } else if (mode.slice(0, 3) === 'hsl') {
          return hsl2css(this.hsl(), this.alpha());
        }
      };

      _input.named = function(name) {
        return hex2rgb(w3cx11[name]);
      };

      _guess_formats.push({
        p: 5,
        test: function(n) {
          if (arguments.length === 1 && (w3cx11[n] != null)) {
            return 'named';
          }
        }
      });

      Color.prototype.name = function(n) {
        var h, k;
        if (arguments.length) {
          if (w3cx11[n]) {
            this._rgb = hex2rgb(w3cx11[n]);
          }
          this._rgb[3] = 1;
        }
        h = this.hex('rgb');
        for (k in w3cx11) {
          if (h === w3cx11[k]) {
            return k;
          }
        }
        return h;
      };

      lch2lab = function() {

        /*
        Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.
        These formulas were invented by David Dalrymple to obtain maximum contrast without going
        out of gamut if the parameters are in the range 0-1.
        
        A saturation multiplier was added by Gregor Aisch
         */
        var c, h, l, ref;
        ref = unpack(arguments), l = ref[0], c = ref[1], h = ref[2];
        h = h * DEG2RAD;
        return [l, cos(h) * c, sin(h) * c];
      };

      lch2rgb = function() {
        var L, a, args, b, c, g, h, l, r, ref, ref1;
        args = unpack(arguments);
        l = args[0], c = args[1], h = args[2];
        ref = lch2lab(l, c, h), L = ref[0], a = ref[1], b = ref[2];
        ref1 = lab2rgb(L, a, b), r = ref1[0], g = ref1[1], b = ref1[2];
        return [r, g, b, args.length > 3 ? args[3] : 1];
      };

      lab2lch = function() {
        var a, b, c, h, l, ref;
        ref = unpack(arguments), l = ref[0], a = ref[1], b = ref[2];
        c = sqrt(a * a + b * b);
        h = (atan2(b, a) * RAD2DEG + 360) % 360;
        if (round(c * 10000) === 0) {
          h = Number.NaN;
        }
        return [l, c, h];
      };

      rgb2lch = function() {
        var a, b, g, l, r, ref, ref1;
        ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
        ref1 = rgb2lab(r, g, b), l = ref1[0], a = ref1[1], b = ref1[2];
        return lab2lch(l, a, b);
      };

      chroma.lch = function() {
        var args;
        args = unpack(arguments);
        return new Color(args, 'lch');
      };

      chroma.hcl = function() {
        var args;
        args = unpack(arguments);
        return new Color(args, 'hcl');
      };

      _input.lch = lch2rgb;

      _input.hcl = function() {
        var c, h, l, ref;
        ref = unpack(arguments), h = ref[0], c = ref[1], l = ref[2];
        return lch2rgb([l, c, h]);
      };

      Color.prototype.lch = function() {
        return rgb2lch(this._rgb);
      };

      Color.prototype.hcl = function() {
        return rgb2lch(this._rgb).reverse();
      };

      rgb2cmyk = function(mode) {
        var b, c, f, g, k, m, r, ref, y;
        if (mode == null) {
          mode = 'rgb';
        }
        ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
        r = r / 255;
        g = g / 255;
        b = b / 255;
        k = 1 - Math.max(r, Math.max(g, b));
        f = k < 1 ? 1 / (1 - k) : 0;
        c = (1 - r - k) * f;
        m = (1 - g - k) * f;
        y = (1 - b - k) * f;
        return [c, m, y, k];
      };

      cmyk2rgb = function() {
        var alpha, args, b, c, g, k, m, r, y;
        args = unpack(arguments);
        c = args[0], m = args[1], y = args[2], k = args[3];
        alpha = args.length > 4 ? args[4] : 1;
        if (k === 1) {
          return [0, 0, 0, alpha];
        }
        r = c >= 1 ? 0 : 255 * (1 - c) * (1 - k);
        g = m >= 1 ? 0 : 255 * (1 - m) * (1 - k);
        b = y >= 1 ? 0 : 255 * (1 - y) * (1 - k);
        return [r, g, b, alpha];
      };

      _input.cmyk = function() {
        return cmyk2rgb(unpack(arguments));
      };

      chroma.cmyk = function() {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(Color, slice.call(arguments).concat(['cmyk']), function(){});
      };

      Color.prototype.cmyk = function() {
        return rgb2cmyk(this._rgb);
      };

      _input.gl = function() {
        var i, k, o, rgb, v;
        rgb = (function() {
          var ref, results;
          ref = unpack(arguments);
          results = [];
          for (k in ref) {
            v = ref[k];
            results.push(v);
          }
          return results;
        }).apply(this, arguments);
        for (i = o = 0; o <= 2; i = ++o) {
          rgb[i] *= 255;
        }
        return rgb;
      };

      chroma.gl = function() {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(Color, slice.call(arguments).concat(['gl']), function(){});
      };

      Color.prototype.gl = function() {
        var rgb;
        rgb = this._rgb;
        return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, rgb[3]];
      };

      rgb2luminance = function(r, g, b) {
        var ref;
        ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
        r = luminance_x(r);
        g = luminance_x(g);
        b = luminance_x(b);
        return 0.2126 * r + 0.7152 * g + 0.0722 * b;
      };

      luminance_x = function(x) {
        x /= 255;
        if (x <= 0.03928) {
          return x / 12.92;
        } else {
          return pow((x + 0.055) / 1.055, 2.4);
        }
      };

      interpolate_rgb = function(col1, col2, f, m) {
        var xyz0, xyz1;
        xyz0 = col1._rgb;
        xyz1 = col2._rgb;
        return new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);
      };

      _interpolators.push(['rgb', interpolate_rgb]);

      Color.prototype.luminance = function(lum, mode) {
        var cur_lum, eps, max_iter, rgba, test;
        if (mode == null) {
          mode = 'rgb';
        }
        if (!arguments.length) {
          return rgb2luminance(this._rgb);
        }
        rgba = this._rgb;
        if (lum === 0) {
          rgba = [0, 0, 0, this._rgb[3]];
        } else if (lum === 1) {
          rgba = [255, 255, 255, this[3]];
        } else {
          cur_lum = rgb2luminance(this._rgb);
          eps = 1e-7;
          max_iter = 20;
          test = function(l, h) {
            var lm, m;
            m = l.interpolate(h, 0.5, mode);
            lm = m.luminance();
            if (Math.abs(lum - lm) < eps || !max_iter--) {
              return m;
            }
            if (lm > lum) {
              return test(l, m);
            }
            return test(m, h);
          };
          if (cur_lum > lum) {
            rgba = test(chroma('black'), this).rgba();
          } else {
            rgba = test(this, chroma('white')).rgba();
          }
        }
        return chroma(rgba).alpha(this.alpha());
      };

      temperature2rgb = function(kelvin) {
        var b, g, r, temp;
        temp = kelvin / 100;
        if (temp < 66) {
          r = 255;
          g = -155.25485562709179 - 0.44596950469579133 * (g = temp - 2) + 104.49216199393888 * log(g);
          b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp - 10) + 115.67994401066147 * log(b);
        } else {
          r = 351.97690566805693 + 0.114206453784165 * (r = temp - 55) - 40.25366309332127 * log(r);
          g = 325.4494125711974 + 0.07943456536662342 * (g = temp - 50) - 28.0852963507957 * log(g);
          b = 255;
        }
        return [r, g, b];
      };

      rgb2temperature = function() {
        var b, eps, g, maxTemp, minTemp, r, ref, rgb, temp;
        ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
        minTemp = 1000;
        maxTemp = 40000;
        eps = 0.4;
        while (maxTemp - minTemp > eps) {
          temp = (maxTemp + minTemp) * 0.5;
          rgb = temperature2rgb(temp);
          if ((rgb[2] / rgb[0]) >= (b / r)) {
            maxTemp = temp;
          } else {
            minTemp = temp;
          }
        }
        return round(temp);
      };

      chroma.temperature = chroma.kelvin = function() {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(Color, slice.call(arguments).concat(['temperature']), function(){});
      };

      _input.temperature = _input.kelvin = _input.K = temperature2rgb;

      Color.prototype.temperature = function() {
        return rgb2temperature(this._rgb);
      };

      Color.prototype.kelvin = Color.prototype.temperature;

      chroma.contrast = function(a, b) {
        var l1, l2, ref, ref1;
        if ((ref = type(a)) === 'string' || ref === 'number') {
          a = new Color(a);
        }
        if ((ref1 = type(b)) === 'string' || ref1 === 'number') {
          b = new Color(b);
        }
        l1 = a.luminance();
        l2 = b.luminance();
        if (l1 > l2) {
          return (l1 + 0.05) / (l2 + 0.05);
        } else {
          return (l2 + 0.05) / (l1 + 0.05);
        }
      };

      chroma.distance = function(a, b, mode) {
        var d, i, l1, l2, ref, ref1, sum_sq;
        if (mode == null) {
          mode = 'lab';
        }
        if ((ref = type(a)) === 'string' || ref === 'number') {
          a = new Color(a);
        }
        if ((ref1 = type(b)) === 'string' || ref1 === 'number') {
          b = new Color(b);
        }
        l1 = a.get(mode);
        l2 = b.get(mode);
        sum_sq = 0;
        for (i in l1) {
          d = (l1[i] || 0) - (l2[i] || 0);
          sum_sq += d * d;
        }
        return Math.sqrt(sum_sq);
      };

      chroma.deltaE = function(a, b, L, C) {
        var L1, L2, a1, a2, b1, b2, c1, c2, c4, dH2, delA, delB, delC, delL, f, h1, ref, ref1, ref2, ref3, sc, sh, sl, t, v1, v2, v3;
        if (L == null) {
          L = 1;
        }
        if (C == null) {
          C = 1;
        }
        if ((ref = type(a)) === 'string' || ref === 'number') {
          a = new Color(a);
        }
        if ((ref1 = type(b)) === 'string' || ref1 === 'number') {
          b = new Color(b);
        }
        ref2 = a.lab(), L1 = ref2[0], a1 = ref2[1], b1 = ref2[2];
        ref3 = b.lab(), L2 = ref3[0], a2 = ref3[1], b2 = ref3[2];
        c1 = sqrt(a1 * a1 + b1 * b1);
        c2 = sqrt(a2 * a2 + b2 * b2);
        sl = L1 < 16.0 ? 0.511 : (0.040975 * L1) / (1.0 + 0.01765 * L1);
        sc = (0.0638 * c1) / (1.0 + 0.0131 * c1) + 0.638;
        h1 = c1 < 0.000001 ? 0.0 : (atan2(b1, a1) * 180.0) / PI;
        while (h1 < 0) {
          h1 += 360;
        }
        while (h1 >= 360) {
          h1 -= 360;
        }
        t = (h1 >= 164.0) && (h1 <= 345.0) ? 0.56 + abs(0.2 * cos((PI * (h1 + 168.0)) / 180.0)) : 0.36 + abs(0.4 * cos((PI * (h1 + 35.0)) / 180.0));
        c4 = c1 * c1 * c1 * c1;
        f = sqrt(c4 / (c4 + 1900.0));
        sh = sc * (f * t + 1.0 - f);
        delL = L1 - L2;
        delC = c1 - c2;
        delA = a1 - a2;
        delB = b1 - b2;
        dH2 = delA * delA + delB * delB - delC * delC;
        v1 = delL / (L * sl);
        v2 = delC / (C * sc);
        v3 = sh;
        return sqrt(v1 * v1 + v2 * v2 + (dH2 / (v3 * v3)));
      };

      Color.prototype.get = function(modechan) {
        var channel, i, me, mode, ref, src;
        me = this;
        ref = modechan.split('.'), mode = ref[0], channel = ref[1];
        src = me[mode]();
        if (channel) {
          i = mode.indexOf(channel);
          if (i > -1) {
            return src[i];
          } else {
            return console.warn('unknown channel ' + channel + ' in mode ' + mode);
          }
        } else {
          return src;
        }
      };

      Color.prototype.set = function(modechan, value) {
        var channel, i, me, mode, ref, src;
        me = this;
        ref = modechan.split('.'), mode = ref[0], channel = ref[1];
        if (channel) {
          src = me[mode]();
          i = mode.indexOf(channel);
          if (i > -1) {
            if (type(value) === 'string') {
              switch (value.charAt(0)) {
                case '+':
                  src[i] += +value;
                  break;
                case '-':
                  src[i] += +value;
                  break;
                case '*':
                  src[i] *= +(value.substr(1));
                  break;
                case '/':
                  src[i] /= +(value.substr(1));
                  break;
                default:
                  src[i] = +value;
              }
            } else {
              src[i] = value;
            }
          } else {
            console.warn('unknown channel ' + channel + ' in mode ' + mode);
          }
        } else {
          src = value;
        }
        return chroma(src, mode).alpha(me.alpha());
      };

      Color.prototype.clipped = function() {
        return this._rgb._clipped || false;
      };

      Color.prototype.alpha = function(a) {
        if (arguments.length) {
          return chroma.rgb([this._rgb[0], this._rgb[1], this._rgb[2], a]);
        }
        return this._rgb[3];
      };

      Color.prototype.darken = function(amount) {
        var lab, me;
        if (amount == null) {
          amount = 1;
        }
        me = this;
        lab = me.lab();
        lab[0] -= LAB_CONSTANTS.Kn * amount;
        return chroma.lab(lab).alpha(me.alpha());
      };

      Color.prototype.brighten = function(amount) {
        if (amount == null) {
          amount = 1;
        }
        return this.darken(-amount);
      };

      Color.prototype.darker = Color.prototype.darken;

      Color.prototype.brighter = Color.prototype.brighten;

      Color.prototype.saturate = function(amount) {
        var lch, me;
        if (amount == null) {
          amount = 1;
        }
        me = this;
        lch = me.lch();
        lch[1] += amount * LAB_CONSTANTS.Kn;
        if (lch[1] < 0) {
          lch[1] = 0;
        }
        return chroma.lch(lch).alpha(me.alpha());
      };

      Color.prototype.desaturate = function(amount) {
        if (amount == null) {
          amount = 1;
        }
        return this.saturate(-amount);
      };

      Color.prototype.premultiply = function() {
        var a, rgb;
        rgb = this.rgb();
        a = this.alpha();
        return chroma(rgb[0] * a, rgb[1] * a, rgb[2] * a, a);
      };

      blend = function(bottom, top, mode) {
        if (!blend[mode]) {
          throw 'unknown blend mode ' + mode;
        }
        return blend[mode](bottom, top);
      };

      blend_f = function(f) {
        return function(bottom, top) {
          var c0, c1;
          c0 = chroma(top).rgb();
          c1 = chroma(bottom).rgb();
          return chroma(f(c0, c1), 'rgb');
        };
      };

      each = function(f) {
        return function(c0, c1) {
          var i, o, out;
          out = [];
          for (i = o = 0; o <= 3; i = ++o) {
            out[i] = f(c0[i], c1[i]);
          }
          return out;
        };
      };

      normal = function(a, b) {
        return a;
      };

      multiply = function(a, b) {
        return a * b / 255;
      };

      darken = function(a, b) {
        if (a > b) {
          return b;
        } else {
          return a;
        }
      };

      lighten = function(a, b) {
        if (a > b) {
          return a;
        } else {
          return b;
        }
      };

      screen = function(a, b) {
        return 255 * (1 - (1 - a / 255) * (1 - b / 255));
      };

      overlay = function(a, b) {
        if (b < 128) {
          return 2 * a * b / 255;
        } else {
          return 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));
        }
      };

      burn = function(a, b) {
        return 255 * (1 - (1 - b / 255) / (a / 255));
      };

      dodge = function(a, b) {
        if (a === 255) {
          return 255;
        }
        a = 255 * (b / 255) / (1 - a / 255);
        if (a > 255) {
          return 255;
        } else {
          return a;
        }
      };

      blend.normal = blend_f(each(normal));

      blend.multiply = blend_f(each(multiply));

      blend.screen = blend_f(each(screen));

      blend.overlay = blend_f(each(overlay));

      blend.darken = blend_f(each(darken));

      blend.lighten = blend_f(each(lighten));

      blend.dodge = blend_f(each(dodge));

      blend.burn = blend_f(each(burn));

      chroma.blend = blend;

      chroma.analyze = function(data) {
        var len, o, r, val;
        r = {
          min: Number.MAX_VALUE,
          max: Number.MAX_VALUE * -1,
          sum: 0,
          values: [],
          count: 0
        };
        for (o = 0, len = data.length; o < len; o++) {
          val = data[o];
          if ((val != null) && !isNaN(val)) {
            r.values.push(val);
            r.sum += val;
            if (val < r.min) {
              r.min = val;
            }
            if (val > r.max) {
              r.max = val;
            }
            r.count += 1;
          }
        }
        r.domain = [r.min, r.max];
        r.limits = function(mode, num) {
          return chroma.limits(r, mode, num);
        };
        return r;
      };

      chroma.scale = function(colors, positions) {
        var _classes, _colorCache, _colors, _correctLightness, _domain, _gamma, _max, _min, _mode, _nacol, _out, _padding, _pos, _spread, _useCache, f, getClass, getColor, resetCache, setColors, tmap;
        _mode = 'rgb';
        _nacol = chroma('#ccc');
        _spread = 0;
        _domain = [0, 1];
        _pos = [];
        _padding = [0, 0];
        _classes = false;
        _colors = [];
        _out = false;
        _min = 0;
        _max = 1;
        _correctLightness = false;
        _colorCache = {};
        _useCache = true;
        _gamma = 1;
        setColors = function(colors) {
          var c, col, o, ref, ref1, w;
          if (colors == null) {
            colors = ['#fff', '#000'];
          }
          if ((colors != null) && type(colors) === 'string' && (chroma.brewer != null)) {
            colors = chroma.brewer[colors] || chroma.brewer[colors.toLowerCase()] || colors;
          }
          if (type(colors) === 'array') {
            if (colors.length === 1) {
              colors = [colors[0], colors[0]];
            }
            colors = colors.slice(0);
            for (c = o = 0, ref = colors.length - 1; 0 <= ref ? o <= ref : o >= ref; c = 0 <= ref ? ++o : --o) {
              col = colors[c];
              if (type(col) === "string") {
                colors[c] = chroma(col);
              }
            }
            _pos.length = 0;
            for (c = w = 0, ref1 = colors.length - 1; 0 <= ref1 ? w <= ref1 : w >= ref1; c = 0 <= ref1 ? ++w : --w) {
              _pos.push(c / (colors.length - 1));
            }
          }
          resetCache();
          return _colors = colors;
        };
        getClass = function(value) {
          var i, n;
          if (_classes != null) {
            n = _classes.length - 1;
            i = 0;
            while (i < n && value >= _classes[i]) {
              i++;
            }
            return i - 1;
          }
          return 0;
        };
        tmap = function(t) {
          return t;
        };
        getColor = function(val, bypassMap) {
          var c, col, i, k, o, p, ref, t;
          if (bypassMap == null) {
            bypassMap = false;
          }
          if (isNaN(val)) {
            return _nacol;
          }
          if (!bypassMap) {
            if (_classes && _classes.length > 2) {
              c = getClass(val);
              t = c / (_classes.length - 2);
            } else if (_max !== _min) {
              t = (val - _min) / (_max - _min);
            } else {
              t = 1;
            }
          } else {
            t = val;
          }
          if (!bypassMap) {
            t = tmap(t);
          }
          if (_gamma !== 1) {
            t = pow(t, _gamma);
          }
          t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));
          t = Math.min(1, Math.max(0, t));
          k = Math.floor(t * 10000);
          if (_useCache && _colorCache[k]) {
            col = _colorCache[k];
          } else {
            if (type(_colors) === 'array') {
              for (i = o = 0, ref = _pos.length - 1; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {
                p = _pos[i];
                if (t <= p) {
                  col = _colors[i];
                  break;
                }
                if (t >= p && i === _pos.length - 1) {
                  col = _colors[i];
                  break;
                }
                if (t > p && t < _pos[i + 1]) {
                  t = (t - p) / (_pos[i + 1] - p);
                  col = chroma.interpolate(_colors[i], _colors[i + 1], t, _mode);
                  break;
                }
              }
            } else if (type(_colors) === 'function') {
              col = _colors(t);
            }
            if (_useCache) {
              _colorCache[k] = col;
            }
          }
          return col;
        };
        resetCache = function() {
          return _colorCache = {};
        };
        setColors(colors);
        f = function(v) {
          var c;
          c = chroma(getColor(v));
          if (_out && c[_out]) {
            return c[_out]();
          } else {
            return c;
          }
        };
        f.classes = function(classes) {
          var d;
          if (classes != null) {
            if (type(classes) === 'array') {
              _classes = classes;
              _domain = [classes[0], classes[classes.length - 1]];
            } else {
              d = chroma.analyze(_domain);
              if (classes === 0) {
                _classes = [d.min, d.max];
              } else {
                _classes = chroma.limits(d, 'e', classes);
              }
            }
            return f;
          }
          return _classes;
        };
        f.domain = function(domain) {
          var c, d, k, len, o, ref, w;
          if (!arguments.length) {
            return _domain;
          }
          _min = domain[0];
          _max = domain[domain.length - 1];
          _pos = [];
          k = _colors.length;
          if (domain.length === k && _min !== _max) {
            for (o = 0, len = domain.length; o < len; o++) {
              d = domain[o];
              _pos.push((d - _min) / (_max - _min));
            }
          } else {
            for (c = w = 0, ref = k - 1; 0 <= ref ? w <= ref : w >= ref; c = 0 <= ref ? ++w : --w) {
              _pos.push(c / (k - 1));
            }
          }
          _domain = [_min, _max];
          return f;
        };
        f.mode = function(_m) {
          if (!arguments.length) {
            return _mode;
          }
          _mode = _m;
          resetCache();
          return f;
        };
        f.range = function(colors, _pos) {
          setColors(colors, _pos);
          return f;
        };
        f.out = function(_o) {
          _out = _o;
          return f;
        };
        f.spread = function(val) {
          if (!arguments.length) {
            return _spread;
          }
          _spread = val;
          return f;
        };
        f.correctLightness = function(v) {
          if (v == null) {
            v = true;
          }
          _correctLightness = v;
          resetCache();
          if (_correctLightness) {
            tmap = function(t) {
              var L0, L1, L_actual, L_diff, L_ideal, max_iter, pol, t0, t1;
              L0 = getColor(0, true).lab()[0];
              L1 = getColor(1, true).lab()[0];
              pol = L0 > L1;
              L_actual = getColor(t, true).lab()[0];
              L_ideal = L0 + (L1 - L0) * t;
              L_diff = L_actual - L_ideal;
              t0 = 0;
              t1 = 1;
              max_iter = 20;
              while (Math.abs(L_diff) > 1e-2 && max_iter-- > 0) {
                (function() {
                  if (pol) {
                    L_diff *= -1;
                  }
                  if (L_diff < 0) {
                    t0 = t;
                    t += (t1 - t) * 0.5;
                  } else {
                    t1 = t;
                    t += (t0 - t) * 0.5;
                  }
                  L_actual = getColor(t, true).lab()[0];
                  return L_diff = L_actual - L_ideal;
                })();
              }
              return t;
            };
          } else {
            tmap = function(t) {
              return t;
            };
          }
          return f;
        };
        f.padding = function(p) {
          if (p != null) {
            if (type(p) === 'number') {
              p = [p, p];
            }
            _padding = p;
            return f;
          } else {
            return _padding;
          }
        };
        f.colors = function(numColors, out) {
          var dd, dm, i, ref, result, results, samples, w;
          if (arguments.length < 2) {
            out = 'hex';
          }
          result = [];
          if (arguments.length === 0) {
            result = _colors.slice(0);
          } else if (numColors === 1) {
            result = [f(0.5)];
          } else if (numColors > 1) {
            dm = _domain[0];
            dd = _domain[1] - dm;
            result = (function() {
              results = [];
              for (var o = 0; 0 <= numColors ? o < numColors : o > numColors; 0 <= numColors ? o++ : o--){ results.push(o); }
              return results;
            }).apply(this).map(function(i) {
              return f(dm + i / (numColors - 1) * dd);
            });
          } else {
            colors = [];
            samples = [];
            if (_classes && _classes.length > 2) {
              for (i = w = 1, ref = _classes.length; 1 <= ref ? w < ref : w > ref; i = 1 <= ref ? ++w : --w) {
                samples.push((_classes[i - 1] + _classes[i]) * 0.5);
              }
            } else {
              samples = _domain;
            }
            result = samples.map(function(v) {
              return f(v);
            });
          }
          if (chroma[out]) {
            result = result.map(function(c) {
              return c[out]();
            });
          }
          return result;
        };
        f.cache = function(c) {
          if (c != null) {
            _useCache = c;
            return f;
          } else {
            return _useCache;
          }
        };
        f.gamma = function(g) {
          if (g != null) {
            _gamma = g;
            return f;
          } else {
            return _gamma;
          }
        };
        return f;
      };

      if (chroma.scales == null) {
        chroma.scales = {};
      }

      chroma.scales.cool = function() {
        return chroma.scale([chroma.hsl(180, 1, .9), chroma.hsl(250, .7, .4)]);
      };

      chroma.scales.hot = function() {
        return chroma.scale(['#000', '#f00', '#ff0', '#fff'], [0, .25, .75, 1]).mode('rgb');
      };

      chroma.analyze = function(data, key, filter) {
        var add, k, len, o, r, val, visit;
        r = {
          min: Number.MAX_VALUE,
          max: Number.MAX_VALUE * -1,
          sum: 0,
          values: [],
          count: 0
        };
        if (filter == null) {
          filter = function() {
            return true;
          };
        }
        add = function(val) {
          if ((val != null) && !isNaN(val)) {
            r.values.push(val);
            r.sum += val;
            if (val < r.min) {
              r.min = val;
            }
            if (val > r.max) {
              r.max = val;
            }
            r.count += 1;
          }
        };
        visit = function(val, k) {
          if (filter(val, k)) {
            if ((key != null) && type(key) === 'function') {
              return add(key(val));
            } else if ((key != null) && type(key) === 'string' || type(key) === 'number') {
              return add(val[key]);
            } else {
              return add(val);
            }
          }
        };
        if (type(data) === 'array') {
          for (o = 0, len = data.length; o < len; o++) {
            val = data[o];
            visit(val);
          }
        } else {
          for (k in data) {
            val = data[k];
            visit(val, k);
          }
        }
        r.domain = [r.min, r.max];
        r.limits = function(mode, num) {
          return chroma.limits(r, mode, num);
        };
        return r;
      };

      chroma.limits = function(data, mode, num) {
        var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, assignments, best, centroids, cluster, clusterSizes, dist, i, j, kClusters, limits, max_log, min, min_log, mindist, n, nb_iters, newCentroids, o, p, pb, pr, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, repeat, sum, tmpKMeansBreaks, v, value, values, w;
        if (mode == null) {
          mode = 'equal';
        }
        if (num == null) {
          num = 7;
        }
        if (type(data) === 'array') {
          data = chroma.analyze(data);
        }
        min = data.min;
        max = data.max;
        sum = data.sum;
        values = data.values.sort(function(a, b) {
          return a - b;
        });
        if (num === 1) {
          return [min, max];
        }
        limits = [];
        if (mode.substr(0, 1) === 'c') {
          limits.push(min);
          limits.push(max);
        }
        if (mode.substr(0, 1) === 'e') {
          limits.push(min);
          for (i = o = 1, ref = num - 1; 1 <= ref ? o <= ref : o >= ref; i = 1 <= ref ? ++o : --o) {
            limits.push(min + (i / num) * (max - min));
          }
          limits.push(max);
        } else if (mode.substr(0, 1) === 'l') {
          if (min <= 0) {
            throw 'Logarithmic scales are only possible for values > 0';
          }
          min_log = Math.LOG10E * log(min);
          max_log = Math.LOG10E * log(max);
          limits.push(min);
          for (i = w = 1, ref1 = num - 1; 1 <= ref1 ? w <= ref1 : w >= ref1; i = 1 <= ref1 ? ++w : --w) {
            limits.push(pow(10, min_log + (i / num) * (max_log - min_log)));
          }
          limits.push(max);
        } else if (mode.substr(0, 1) === 'q') {
          limits.push(min);
          for (i = aa = 1, ref2 = num - 1; 1 <= ref2 ? aa <= ref2 : aa >= ref2; i = 1 <= ref2 ? ++aa : --aa) {
            p = (values.length - 1) * i / num;
            pb = floor(p);
            if (pb === p) {
              limits.push(values[pb]);
            } else {
              pr = p - pb;
              limits.push(values[pb] * (1 - pr) + values[pb + 1] * pr);
            }
          }
          limits.push(max);
        } else if (mode.substr(0, 1) === 'k') {

          /*
          implementation based on
          http://code.google.com/p/figue/source/browse/trunk/figue.js#336
          simplified for 1-d input values
           */
          n = values.length;
          assignments = new Array(n);
          clusterSizes = new Array(num);
          repeat = true;
          nb_iters = 0;
          centroids = null;
          centroids = [];
          centroids.push(min);
          for (i = ab = 1, ref3 = num - 1; 1 <= ref3 ? ab <= ref3 : ab >= ref3; i = 1 <= ref3 ? ++ab : --ab) {
            centroids.push(min + (i / num) * (max - min));
          }
          centroids.push(max);
          while (repeat) {
            for (j = ac = 0, ref4 = num - 1; 0 <= ref4 ? ac <= ref4 : ac >= ref4; j = 0 <= ref4 ? ++ac : --ac) {
              clusterSizes[j] = 0;
            }
            for (i = ad = 0, ref5 = n - 1; 0 <= ref5 ? ad <= ref5 : ad >= ref5; i = 0 <= ref5 ? ++ad : --ad) {
              value = values[i];
              mindist = Number.MAX_VALUE;
              for (j = ae = 0, ref6 = num - 1; 0 <= ref6 ? ae <= ref6 : ae >= ref6; j = 0 <= ref6 ? ++ae : --ae) {
                dist = abs(centroids[j] - value);
                if (dist < mindist) {
                  mindist = dist;
                  best = j;
                }
              }
              clusterSizes[best]++;
              assignments[i] = best;
            }
            newCentroids = new Array(num);
            for (j = af = 0, ref7 = num - 1; 0 <= ref7 ? af <= ref7 : af >= ref7; j = 0 <= ref7 ? ++af : --af) {
              newCentroids[j] = null;
            }
            for (i = ag = 0, ref8 = n - 1; 0 <= ref8 ? ag <= ref8 : ag >= ref8; i = 0 <= ref8 ? ++ag : --ag) {
              cluster = assignments[i];
              if (newCentroids[cluster] === null) {
                newCentroids[cluster] = values[i];
              } else {
                newCentroids[cluster] += values[i];
              }
            }
            for (j = ah = 0, ref9 = num - 1; 0 <= ref9 ? ah <= ref9 : ah >= ref9; j = 0 <= ref9 ? ++ah : --ah) {
              newCentroids[j] *= 1 / clusterSizes[j];
            }
            repeat = false;
            for (j = ai = 0, ref10 = num - 1; 0 <= ref10 ? ai <= ref10 : ai >= ref10; j = 0 <= ref10 ? ++ai : --ai) {
              if (newCentroids[j] !== centroids[i]) {
                repeat = true;
                break;
              }
            }
            centroids = newCentroids;
            nb_iters++;
            if (nb_iters > 200) {
              repeat = false;
            }
          }
          kClusters = {};
          for (j = aj = 0, ref11 = num - 1; 0 <= ref11 ? aj <= ref11 : aj >= ref11; j = 0 <= ref11 ? ++aj : --aj) {
            kClusters[j] = [];
          }
          for (i = ak = 0, ref12 = n - 1; 0 <= ref12 ? ak <= ref12 : ak >= ref12; i = 0 <= ref12 ? ++ak : --ak) {
            cluster = assignments[i];
            kClusters[cluster].push(values[i]);
          }
          tmpKMeansBreaks = [];
          for (j = al = 0, ref13 = num - 1; 0 <= ref13 ? al <= ref13 : al >= ref13; j = 0 <= ref13 ? ++al : --al) {
            tmpKMeansBreaks.push(kClusters[j][0]);
            tmpKMeansBreaks.push(kClusters[j][kClusters[j].length - 1]);
          }
          tmpKMeansBreaks = tmpKMeansBreaks.sort(function(a, b) {
            return a - b;
          });
          limits.push(tmpKMeansBreaks[0]);
          for (i = am = 1, ref14 = tmpKMeansBreaks.length - 1; am <= ref14; i = am += 2) {
            v = tmpKMeansBreaks[i];
            if (!isNaN(v) && limits.indexOf(v) === -1) {
              limits.push(v);
            }
          }
        }
        return limits;
      };

      hsi2rgb = function(h, s, i) {

        /*
        borrowed from here:
        http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp
         */
        var args, b, g, r;
        args = unpack(arguments);
        h = args[0], s = args[1], i = args[2];
        if (isNaN(h)) {
          h = 0;
        }
        h /= 360;
        if (h < 1 / 3) {
          b = (1 - s) / 3;
          r = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
          g = 1 - (b + r);
        } else if (h < 2 / 3) {
          h -= 1 / 3;
          r = (1 - s) / 3;
          g = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
          b = 1 - (r + g);
        } else {
          h -= 2 / 3;
          g = (1 - s) / 3;
          b = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
          r = 1 - (g + b);
        }
        r = limit(i * r * 3);
        g = limit(i * g * 3);
        b = limit(i * b * 3);
        return [r * 255, g * 255, b * 255, args.length > 3 ? args[3] : 1];
      };

      rgb2hsi = function() {

        /*
        borrowed from here:
        http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp
         */
        var b, g, h, i, min, r, ref, s;
        ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
        TWOPI = Math.PI * 2;
        r /= 255;
        g /= 255;
        b /= 255;
        min = Math.min(r, g, b);
        i = (r + g + b) / 3;
        s = 1 - min / i;
        if (s === 0) {
          h = 0;
        } else {
          h = ((r - g) + (r - b)) / 2;
          h /= Math.sqrt((r - g) * (r - g) + (r - b) * (g - b));
          h = Math.acos(h);
          if (b > g) {
            h = TWOPI - h;
          }
          h /= TWOPI;
        }
        return [h * 360, s, i];
      };

      chroma.hsi = function() {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(Color, slice.call(arguments).concat(['hsi']), function(){});
      };

      _input.hsi = hsi2rgb;

      Color.prototype.hsi = function() {
        return rgb2hsi(this._rgb);
      };

      interpolate_hsx = function(col1, col2, f, m) {
        var dh, hue, hue0, hue1, lbv, lbv0, lbv1, res, sat, sat0, sat1, xyz0, xyz1;
        if (m === 'hsl') {
          xyz0 = col1.hsl();
          xyz1 = col2.hsl();
        } else if (m === 'hsv') {
          xyz0 = col1.hsv();
          xyz1 = col2.hsv();
        } else if (m === 'hcg') {
          xyz0 = col1.hcg();
          xyz1 = col2.hcg();
        } else if (m === 'hsi') {
          xyz0 = col1.hsi();
          xyz1 = col2.hsi();
        } else if (m === 'lch' || m === 'hcl') {
          m = 'hcl';
          xyz0 = col1.hcl();
          xyz1 = col2.hcl();
        }
        if (m.substr(0, 1) === 'h') {
          hue0 = xyz0[0], sat0 = xyz0[1], lbv0 = xyz0[2];
          hue1 = xyz1[0], sat1 = xyz1[1], lbv1 = xyz1[2];
        }
        if (!isNaN(hue0) && !isNaN(hue1)) {
          if (hue1 > hue0 && hue1 - hue0 > 180) {
            dh = hue1 - (hue0 + 360);
          } else if (hue1 < hue0 && hue0 - hue1 > 180) {
            dh = hue1 + 360 - hue0;
          } else {
            dh = hue1 - hue0;
          }
          hue = hue0 + f * dh;
        } else if (!isNaN(hue0)) {
          hue = hue0;
          if ((lbv1 === 1 || lbv1 === 0) && m !== 'hsv') {
            sat = sat0;
          }
        } else if (!isNaN(hue1)) {
          hue = hue1;
          if ((lbv0 === 1 || lbv0 === 0) && m !== 'hsv') {
            sat = sat1;
          }
        } else {
          hue = Number.NaN;
        }
        if (sat == null) {
          sat = sat0 + f * (sat1 - sat0);
        }
        lbv = lbv0 + f * (lbv1 - lbv0);
        return res = chroma[m](hue, sat, lbv);
      };

      _interpolators = _interpolators.concat((function() {
        var len, o, ref, results;
        ref = ['hsv', 'hsl', 'hsi', 'hcl', 'lch', 'hcg'];
        results = [];
        for (o = 0, len = ref.length; o < len; o++) {
          m = ref[o];
          results.push([m, interpolate_hsx]);
        }
        return results;
      })());

      interpolate_num = function(col1, col2, f, m) {
        var n1, n2;
        n1 = col1.num();
        n2 = col2.num();
        return chroma.num(n1 + (n2 - n1) * f, 'num');
      };

      _interpolators.push(['num', interpolate_num]);

      interpolate_lab = function(col1, col2, f, m) {
        var res, xyz0, xyz1;
        xyz0 = col1.lab();
        xyz1 = col2.lab();
        return res = new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);
      };

      _interpolators.push(['lab', interpolate_lab]);

    }).call(commonjsGlobal);
    });

    var classnames = createCommonjsModule(function (module) {
    /*!
      Copyright (c) 2017 Jed Watson.
      Licensed under the MIT License (MIT), see
      http://jedwatson.github.io/classnames
    */
    /* global define */

    (function () {

    	var hasOwn = {}.hasOwnProperty;

    	function classNames () {
    		var classes = [];

    		for (var i = 0; i < arguments.length; i++) {
    			var arg = arguments[i];
    			if (!arg) continue;

    			var argType = typeof arg;

    			if (argType === 'string' || argType === 'number') {
    				classes.push(arg);
    			} else if (Array.isArray(arg) && arg.length) {
    				var inner = classNames.apply(null, arg);
    				if (inner) {
    					classes.push(inner);
    				}
    			} else if (argType === 'object') {
    				for (var key in arg) {
    					if (hasOwn.call(arg, key) && arg[key]) {
    						classes.push(key);
    					}
    				}
    			}
    		}

    		return classes.join(' ');
    	}

    	if (module.exports) {
    		classNames.default = classNames;
    		module.exports = classNames;
    	} else {
    		window.classNames = classNames;
    	}
    }());
    });

    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */
    /* eslint-disable no-unused-vars */
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;

    function toObject(val) {
    	if (val === null || val === undefined) {
    		throw new TypeError('Object.assign cannot be called with null or undefined');
    	}

    	return Object(val);
    }

    function shouldUseNative() {
    	try {
    		if (!Object.assign) {
    			return false;
    		}

    		// Detect buggy property enumeration order in older V8 versions.

    		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
    		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
    		test1[5] = 'de';
    		if (Object.getOwnPropertyNames(test1)[0] === '5') {
    			return false;
    		}

    		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
    		var test2 = {};
    		for (var i = 0; i < 10; i++) {
    			test2['_' + String.fromCharCode(i)] = i;
    		}
    		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
    			return test2[n];
    		});
    		if (order2.join('') !== '0123456789') {
    			return false;
    		}

    		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
    		var test3 = {};
    		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
    			test3[letter] = letter;
    		});
    		if (Object.keys(Object.assign({}, test3)).join('') !==
    				'abcdefghijklmnopqrst') {
    			return false;
    		}

    		return true;
    	} catch (err) {
    		// We don't expect any of the above to throw, but better to be safe.
    		return false;
    	}
    }

    var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
    	var from;
    	var to = toObject(target);
    	var symbols;

    	for (var s = 1; s < arguments.length; s++) {
    		from = Object(arguments[s]);

    		for (var key in from) {
    			if (hasOwnProperty.call(from, key)) {
    				to[key] = from[key];
    			}
    		}

    		if (getOwnPropertySymbols) {
    			symbols = getOwnPropertySymbols(from);
    			for (var i = 0; i < symbols.length; i++) {
    				if (propIsEnumerable.call(from, symbols[i])) {
    					to[symbols[i]] = from[symbols[i]];
    				}
    			}
    		}
    	}

    	return to;
    };

    function aa(a,b,e,c,d,g,h,f){if(!a){a=void 0;if(void 0===b)a=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[e,c,d,g,h,f],m=0;a=Error(b.replace(/%s/g,function(){return l[m++]}));a.name="Invariant Violation";}a.framesToPop=1;throw a;}}
    function D(a){for(var b=arguments.length-1,e="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=0;c<b;c++)e+="&args[]="+encodeURIComponent(arguments[c+1]);aa(!1,"Minified React error #"+a+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e);}var E={isMounted:function(){return !1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},F={};
    function G(a,b,e){this.props=a;this.context=b;this.refs=F;this.updater=e||E;}G.prototype.isReactComponent={};G.prototype.setState=function(a,b){"object"!==typeof a&&"function"!==typeof a&&null!=a?D("85"):void 0;this.updater.enqueueSetState(this,a,b,"setState");};G.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate");};function H(){}H.prototype=G.prototype;function I(a,b,e){this.props=a;this.context=b;this.refs=F;this.updater=e||E;}var J=I.prototype=new H;
    J.constructor=I;objectAssign(J,G.prototype);J.isPureReactComponent=!0;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

    var ReactPropTypesSecret_1 = ReactPropTypesSecret;

    var printWarning = function() {};

    {
      var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
      var loggedTypeFailures = {};

      printWarning = function(text) {
        var message = 'Warning: ' + text;
        if (typeof console !== 'undefined') {
          console.error(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };
    }

    /**
     * Assert that the values match with the type specs.
     * Error messages are memorized and will only be shown once.
     *
     * @param {object} typeSpecs Map of name to a ReactPropType
     * @param {object} values Runtime values that need to be type-checked
     * @param {string} location e.g. "prop", "context", "child context"
     * @param {string} componentName Name of the component for error messages.
     * @param {?Function} getStack Returns the component stack.
     * @private
     */
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      {
        for (var typeSpecName in typeSpecs) {
          if (typeSpecs.hasOwnProperty(typeSpecName)) {
            var error;
            // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
              // This is intentionally an invariant that gets caught. It's the same
              // behavior as without this statement except with a better message.
              if (typeof typeSpecs[typeSpecName] !== 'function') {
                var err = Error(
                  (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
                  'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
                );
                err.name = 'Invariant Violation';
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || 'React class') + ': type specification of ' +
                location + ' `' + typeSpecName + '` is invalid; the type checker ' +
                'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
                'You may have forgotten to pass an argument to the type checker ' +
                'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
                'shape all require an argument).'
              );

            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              // Only monitor this failure once because there tends to be a lot of the
              // same error.
              loggedTypeFailures[error.message] = true;

              var stack = getStack ? getStack() : '';

              printWarning(
                'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
              );
            }
          }
        }
      }
    }

    var checkPropTypes_1 = checkPropTypes;

    var react_development = createCommonjsModule(function (module) {



    {
      (function() {

    var _assign = objectAssign;
    var checkPropTypes = checkPropTypes_1;

    // TODO: this is special because it gets imported during build.

    var ReactVersion = '16.6.3';

    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;

    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;

    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';

    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== 'object') {
        return null;
      }
      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }
      return null;
    }

    /**
     * Use invariant() to assert state which your program assumes to be true.
     *
     * Provide sprintf-style format (only %s is supported) and arguments
     * to provide information about what broke and what you were
     * expecting.
     *
     * The invariant message will be stripped in production, but the invariant
     * will remain to ensure logic does not differ in production.
     */

    var validateFormat = function () {};

    {
      validateFormat = function (format) {
        if (format === undefined) {
          throw new Error('invariant requires an error message argument');
        }
      };
    }

    function invariant(condition, format, a, b, c, d, e, f) {
      validateFormat(format);

      if (!condition) {
        var error = void 0;
        if (format === undefined) {
          error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(format.replace(/%s/g, function () {
            return args[argIndex++];
          }));
          error.name = 'Invariant Violation';
        }

        error.framesToPop = 1; // we don't care about invariant's own frame
        throw error;
      }
    }

    // Relying on the `invariant()` implementation lets us
    // preserve the format and params in the www builds.

    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var lowPriorityWarning = function () {};

    {
      var printWarning = function (format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });
        if (typeof console !== 'undefined') {
          console.warn(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning = function (condition, format) {
        if (format === undefined) {
          throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
        }
        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }

    var lowPriorityWarning$1 = lowPriorityWarning;

    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var warningWithoutStack = function () {};

    {
      warningWithoutStack = function (condition, format) {
        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        if (format === undefined) {
          throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
        }
        if (args.length > 8) {
          // Check before the condition to catch violations early.
          throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
        }
        if (condition) {
          return;
        }
        if (typeof console !== 'undefined') {
          var argsWithFormat = args.map(function (item) {
            return '' + item;
          });
          argsWithFormat.unshift('Warning: ' + format);

          // We intentionally don't use spread (or .apply) directly because it
          // breaks IE9: https://github.com/facebook/react/issues/13610
          Function.prototype.apply.call(console.error, console, argsWithFormat);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          var argIndex = 0;
          var message = 'Warning: ' + format.replace(/%s/g, function () {
            return args[argIndex++];
          });
          throw new Error(message);
        } catch (x) {}
      };
    }

    var warningWithoutStack$1 = warningWithoutStack;

    var didWarnStateUpdateForUnmountedComponent = {};

    function warnNoop(publicInstance, callerName) {
      {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + '.' + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
          return;
        }
        warningWithoutStack$1(false, "Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
      }
    }

    /**
     * This is the abstract API for an update queue.
     */
    var ReactNoopUpdateQueue = {
      /**
       * Checks whether or not this composite component is mounted.
       * @param {ReactClass} publicInstance The instance we want to test.
       * @return {boolean} True if mounted, false otherwise.
       * @protected
       * @final
       */
      isMounted: function (publicInstance) {
        return false;
      },

      /**
       * Forces an update. This should only be invoked when it is known with
       * certainty that we are **not** in a DOM transaction.
       *
       * You may want to call this when you know that some deeper aspect of the
       * component's state has changed but `setState` was not called.
       *
       * This will not invoke `shouldComponentUpdate`, but it will invoke
       * `componentWillUpdate` and `componentDidUpdate`.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueForceUpdate: function (publicInstance, callback, callerName) {
        warnNoop(publicInstance, 'forceUpdate');
      },

      /**
       * Replaces all of the state. Always use this or `setState` to mutate state.
       * You should treat `this.state` as immutable.
       *
       * There is no guarantee that `this.state` will be immediately updated, so
       * accessing `this.state` after calling this method may return the old value.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} completeState Next state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
        warnNoop(publicInstance, 'replaceState');
      },

      /**
       * Sets a subset of the state. This only exists because _pendingState is
       * internal. This provides a merging strategy that is not available to deep
       * properties which is confusing. TODO: Expose pendingState or don't use it
       * during the merge.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} partialState Next partial state to be merged with state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} Name of the calling function in the public API.
       * @internal
       */
      enqueueSetState: function (publicInstance, partialState, callback, callerName) {
        warnNoop(publicInstance, 'setState');
      }
    };

    var emptyObject = {};
    {
      Object.freeze(emptyObject);
    }

    /**
     * Base class helpers for the updating state of a component.
     */
    function Component(props, context, updater) {
      this.props = props;
      this.context = context;
      // If a component has string refs, we will assign a different object later.
      this.refs = emptyObject;
      // We initialize the default updater but the real one gets injected by the
      // renderer.
      this.updater = updater || ReactNoopUpdateQueue;
    }

    Component.prototype.isReactComponent = {};

    /**
     * Sets a subset of the state. Always use this to mutate
     * state. You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * There is no guarantee that calls to `setState` will run synchronously,
     * as they may eventually be batched together.  You can provide an optional
     * callback that will be executed when the call to setState is actually
     * completed.
     *
     * When a function is provided to setState, it will be called at some point in
     * the future (not synchronously). It will be called with the up to date
     * component arguments (state, props, context). These values can be different
     * from this.* because your function may be called after receiveProps but before
     * shouldComponentUpdate, and this new state, props, and context will not yet be
     * assigned to this.
     *
     * @param {object|function} partialState Next partial state or function to
     *        produce next partial state to be merged with current state.
     * @param {?function} callback Called after state is updated.
     * @final
     * @protected
     */
    Component.prototype.setState = function (partialState, callback) {
      !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
      this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };

    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {?function} callback Called after update is complete.
     * @final
     * @protected
     */
    Component.prototype.forceUpdate = function (callback) {
      this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };

    /**
     * Deprecated APIs. These APIs used to exist on classic React classes but since
     * we would like to deprecate them, we're not going to move them over to this
     * modern base class. Instead, we define a getter that warns if it's accessed.
     */
    {
      var deprecatedAPIs = {
        isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
        replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
      };
      var defineDeprecationWarning = function (methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
          get: function () {
            lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
            return undefined;
          }
        });
      };
      for (var fnName in deprecatedAPIs) {
        if (deprecatedAPIs.hasOwnProperty(fnName)) {
          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
        }
      }
    }

    function ComponentDummy() {}
    ComponentDummy.prototype = Component.prototype;

    /**
     * Convenience component with default shallow equality check for sCU.
     */
    function PureComponent(props, context, updater) {
      this.props = props;
      this.context = context;
      // If a component has string refs, we will assign a different object later.
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }

    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent;
    // Avoid an extra prototype jump for these methods.
    _assign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;

    // an immutable object with a single mutable value
    function createRef() {
      var refObject = {
        current: null
      };
      {
        Object.seal(refObject);
      }
      return refObject;
    }

    /**
     * Keeps track of the current owner.
     *
     * The current owner is the component who should own any components that are
     * currently being constructed.
     */
    var ReactCurrentOwner = {
      /**
       * @internal
       * @type {ReactComponent}
       */
      current: null,
      currentDispatcher: null
    };

    var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

    var describeComponentFrame = function (name, source, ownerName) {
      var sourceInfo = '';
      if (source) {
        var path = source.fileName;
        var fileName = path.replace(BEFORE_SLASH_RE, '');
        {
          // In DEV, include code for a common special case:
          // prefer "folder/index.js" instead of just "index.js".
          if (/^index\./.test(fileName)) {
            var match = path.match(BEFORE_SLASH_RE);
            if (match) {
              var pathBeforeSlash = match[1];
              if (pathBeforeSlash) {
                var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                fileName = folderName + '/' + fileName;
              }
            }
          }
        }
        sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
      } else if (ownerName) {
        sourceInfo = ' (created by ' + ownerName + ')';
      }
      return '\n    in ' + (name || 'Unknown') + sourceInfo;
    };

    var Resolved = 1;


    function refineResolvedLazyComponent(lazyComponent) {
      return lazyComponent._status === Resolved ? lazyComponent._result : null;
    }

    function getWrappedName(outerType, innerType, wrapperName) {
      var functionName = innerType.displayName || innerType.name || '';
      return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
    }

    function getComponentName(type) {
      if (type == null) {
        // Host root, text node or just invalid type.
        return null;
      }
      {
        if (typeof type.tag === 'number') {
          warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }
      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }
      if (typeof type === 'string') {
        return type;
      }
      switch (type) {
        case REACT_CONCURRENT_MODE_TYPE:
          return 'ConcurrentMode';
        case REACT_FRAGMENT_TYPE:
          return 'Fragment';
        case REACT_PORTAL_TYPE:
          return 'Portal';
        case REACT_PROFILER_TYPE:
          return 'Profiler';
        case REACT_STRICT_MODE_TYPE:
          return 'StrictMode';
        case REACT_SUSPENSE_TYPE:
          return 'Suspense';
      }
      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return 'Context.Consumer';
          case REACT_PROVIDER_TYPE:
            return 'Context.Provider';
          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, 'ForwardRef');
          case REACT_MEMO_TYPE:
            return getComponentName(type.type);
          case REACT_LAZY_TYPE:
            {
              var thenable = type;
              var resolvedThenable = refineResolvedLazyComponent(thenable);
              if (resolvedThenable) {
                return getComponentName(resolvedThenable);
              }
            }
        }
      }
      return null;
    }

    var ReactDebugCurrentFrame = {};

    var currentlyValidatingElement = null;

    function setCurrentlyValidatingElement(element) {
      {
        currentlyValidatingElement = element;
      }
    }

    {
      // Stack implementation injected by the current renderer.
      ReactDebugCurrentFrame.getCurrentStack = null;

      ReactDebugCurrentFrame.getStackAddendum = function () {
        var stack = '';

        // Add an extra top frame while an element is being validated
        if (currentlyValidatingElement) {
          var name = getComponentName(currentlyValidatingElement.type);
          var owner = currentlyValidatingElement._owner;
          stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
        }

        // Delegate to the injected renderer-specific implementation
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        if (impl) {
          stack += impl() || '';
        }

        return stack;
      };
    }

    var ReactSharedInternals = {
      ReactCurrentOwner: ReactCurrentOwner,
      // Used by renderers to avoid bundling object-assign twice in UMD bundles:
      assign: _assign
    };

    {
      _assign(ReactSharedInternals, {
        // These should not be included in production.
        ReactDebugCurrentFrame: ReactDebugCurrentFrame,
        // Shim for React DOM 16.0.0 which still destructured (but not used) this.
        // TODO: remove in React 17.0.
        ReactComponentTreeHook: {}
      });
    }

    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var warning = warningWithoutStack$1;

    {
      warning = function (condition, format) {
        if (condition) {
          return;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        // eslint-disable-next-line react-internal/warning-and-invariant-args

        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
      };
    }

    var warning$1 = warning;

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    var RESERVED_PROPS = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };

    var specialPropKeyWarningShown = void 0;
    var specialPropRefWarningShown = void 0;

    function hasValidRef(config) {
      {
        if (hasOwnProperty.call(config, 'ref')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.ref !== undefined;
    }

    function hasValidKey(config) {
      {
        if (hasOwnProperty.call(config, 'key')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.key !== undefined;
    }

    function defineKeyPropWarningGetter(props, displayName) {
      var warnAboutAccessingKey = function () {
        if (!specialPropKeyWarningShown) {
          specialPropKeyWarningShown = true;
          warningWithoutStack$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
        }
      };
      warnAboutAccessingKey.isReactWarning = true;
      Object.defineProperty(props, 'key', {
        get: warnAboutAccessingKey,
        configurable: true
      });
    }

    function defineRefPropWarningGetter(props, displayName) {
      var warnAboutAccessingRef = function () {
        if (!specialPropRefWarningShown) {
          specialPropRefWarningShown = true;
          warningWithoutStack$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
        }
      };
      warnAboutAccessingRef.isReactWarning = true;
      Object.defineProperty(props, 'ref', {
        get: warnAboutAccessingRef,
        configurable: true
      });
    }

    /**
     * Factory method to create a new React element. This no longer adheres to
     * the class pattern, so do not use new to call it. Also, no instanceof check
     * will work. Instead test $$typeof field against Symbol.for('react.element') to check
     * if something is a React Element.
     *
     * @param {*} type
     * @param {*} key
     * @param {string|object} ref
     * @param {*} self A *temporary* helper to detect places where `this` is
     * different from the `owner` when React.createElement is called, so that we
     * can warn. We want to get rid of owner and replace string `ref`s with arrow
     * functions, and as long as `this` and owner are the same, there will be no
     * change in behavior.
     * @param {*} source An annotation object (added by a transpiler or otherwise)
     * indicating filename, line number, and/or other information.
     * @param {*} owner
     * @param {*} props
     * @internal
     */
    var ReactElement = function (type, key, ref, self, source, owner, props) {
      var element = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: REACT_ELEMENT_TYPE,

        // Built-in properties that belong on the element
        type: type,
        key: key,
        ref: ref,
        props: props,

        // Record the component responsible for creating this element.
        _owner: owner
      };

      {
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {};

        // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        });
        // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self
        });
        // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });
        if (Object.freeze) {
          Object.freeze(element.props);
          Object.freeze(element);
        }
      }

      return element;
    };

    /**
     * Create and return a new ReactElement of the given type.
     * See https://reactjs.org/docs/react-api.html#createelement
     */
    function createElement(type, config, children) {
      var propName = void 0;

      // Reserved names are extracted
      var props = {};

      var key = null;
      var ref = null;
      var self = null;
      var source = null;

      if (config != null) {
        if (hasValidRef(config)) {
          ref = config.ref;
        }
        if (hasValidKey(config)) {
          key = '' + config.key;
        }

        self = config.__self === undefined ? null : config.__self;
        source = config.__source === undefined ? null : config.__source;
        // Remaining properties are added to a new props object
        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        }
      }

      // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.
      var childrenLength = arguments.length - 2;
      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);
        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }
        {
          if (Object.freeze) {
            Object.freeze(childArray);
          }
        }
        props.children = childArray;
      }

      // Resolve default props
      if (type && type.defaultProps) {
        var defaultProps = type.defaultProps;
        for (propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }
      }
      {
        if (key || ref) {
          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
          if (key) {
            defineKeyPropWarningGetter(props, displayName);
          }
          if (ref) {
            defineRefPropWarningGetter(props, displayName);
          }
        }
      }
      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }

    /**
     * Return a function that produces ReactElements of a given type.
     * See https://reactjs.org/docs/react-api.html#createfactory
     */


    function cloneAndReplaceKey(oldElement, newKey) {
      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

      return newElement;
    }

    /**
     * Clone and return a new ReactElement using element as the starting point.
     * See https://reactjs.org/docs/react-api.html#cloneelement
     */
    function cloneElement(element, config, children) {
      !!(element === null || element === undefined) ? invariant(false, 'React.cloneElement(...): The argument must be a React element, but you passed %s.', element) : void 0;

      var propName = void 0;

      // Original props are copied
      var props = _assign({}, element.props);

      // Reserved names are extracted
      var key = element.key;
      var ref = element.ref;
      // Self is preserved since the owner is preserved.
      var self = element._self;
      // Source is preserved since cloneElement is unlikely to be targeted by a
      // transpiler, and the original source is probably a better indicator of the
      // true owner.
      var source = element._source;

      // Owner will be preserved, unless ref is overridden
      var owner = element._owner;

      if (config != null) {
        if (hasValidRef(config)) {
          // Silently steal the ref from the parent.
          ref = config.ref;
          owner = ReactCurrentOwner.current;
        }
        if (hasValidKey(config)) {
          key = '' + config.key;
        }

        // Remaining properties override existing props
        var defaultProps = void 0;
        if (element.type && element.type.defaultProps) {
          defaultProps = element.type.defaultProps;
        }
        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            if (config[propName] === undefined && defaultProps !== undefined) {
              // Resolve default props
              props[propName] = defaultProps[propName];
            } else {
              props[propName] = config[propName];
            }
          }
        }
      }

      // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.
      var childrenLength = arguments.length - 2;
      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);
        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }
        props.children = childArray;
      }

      return ReactElement(element.type, key, ref, self, source, owner, props);
    }

    /**
     * Verifies the object is a ReactElement.
     * See https://reactjs.org/docs/react-api.html#isvalidelement
     * @param {?object} object
     * @return {boolean} True if `object` is a ReactElement.
     * @final
     */
    function isValidElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }

    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';

    /**
     * Escape and wrap key so it is safe to use as a reactid
     *
     * @param {string} key to be escaped.
     * @return {string} the escaped key.
     */
    function escape(key) {
      var escapeRegex = /[=:]/g;
      var escaperLookup = {
        '=': '=0',
        ':': '=2'
      };
      var escapedString = ('' + key).replace(escapeRegex, function (match) {
        return escaperLookup[match];
      });

      return '$' + escapedString;
    }

    /**
     * TODO: Test that a single child and an array with one item have the same key
     * pattern.
     */

    var didWarnAboutMaps = false;

    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
      return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
    }

    var POOL_SIZE = 10;
    var traverseContextPool = [];
    function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
      if (traverseContextPool.length) {
        var traverseContext = traverseContextPool.pop();
        traverseContext.result = mapResult;
        traverseContext.keyPrefix = keyPrefix;
        traverseContext.func = mapFunction;
        traverseContext.context = mapContext;
        traverseContext.count = 0;
        return traverseContext;
      } else {
        return {
          result: mapResult,
          keyPrefix: keyPrefix,
          func: mapFunction,
          context: mapContext,
          count: 0
        };
      }
    }

    function releaseTraverseContext(traverseContext) {
      traverseContext.result = null;
      traverseContext.keyPrefix = null;
      traverseContext.func = null;
      traverseContext.context = null;
      traverseContext.count = 0;
      if (traverseContextPool.length < POOL_SIZE) {
        traverseContextPool.push(traverseContext);
      }
    }

    /**
     * @param {?*} children Children tree container.
     * @param {!string} nameSoFar Name of the key path so far.
     * @param {!function} callback Callback to invoke with each child found.
     * @param {?*} traverseContext Used to pass information throughout the traversal
     * process.
     * @return {!number} The number of children in this subtree.
     */
    function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
      var type = typeof children;

      if (type === 'undefined' || type === 'boolean') {
        // All of the above are perceived as null.
        children = null;
      }

      var invokeCallback = false;

      if (children === null) {
        invokeCallback = true;
      } else {
        switch (type) {
          case 'string':
          case 'number':
            invokeCallback = true;
            break;
          case 'object':
            switch (children.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                invokeCallback = true;
            }
        }
      }

      if (invokeCallback) {
        callback(traverseContext, children,
        // If it's the only child, treat the name as if it was wrapped in an array
        // so that it's consistent if the number of children grows.
        nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
        return 1;
      }

      var child = void 0;
      var nextName = void 0;
      var subtreeCount = 0; // Count of children found in the current subtree.
      var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          child = children[i];
          nextName = nextNamePrefix + getComponentKey(child, i);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        var iteratorFn = getIteratorFn(children);
        if (typeof iteratorFn === 'function') {
          {
            // Warn about using Maps as children
            if (iteratorFn === children.entries) {
              !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
              didWarnAboutMaps = true;
            }
          }

          var iterator = iteratorFn.call(children);
          var step = void 0;
          var ii = 0;
          while (!(step = iterator.next()).done) {
            child = step.value;
            nextName = nextNamePrefix + getComponentKey(child, ii++);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        } else if (type === 'object') {
          var addendum = '';
          {
            addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
          }
          var childrenString = '' + children;
          invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
        }
      }

      return subtreeCount;
    }

    /**
     * Traverses children that are typically specified as `props.children`, but
     * might also be specified through attributes:
     *
     * - `traverseAllChildren(this.props.children, ...)`
     * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
     *
     * The `traverseContext` is an optional argument that is passed through the
     * entire traversal. It can be used to store accumulations or anything else that
     * the callback might find relevant.
     *
     * @param {?*} children Children tree object.
     * @param {!function} callback To invoke upon traversing each child.
     * @param {?*} traverseContext Context for traversal.
     * @return {!number} The number of children in this subtree.
     */
    function traverseAllChildren(children, callback, traverseContext) {
      if (children == null) {
        return 0;
      }

      return traverseAllChildrenImpl(children, '', callback, traverseContext);
    }

    /**
     * Generate a key string that identifies a component within a set.
     *
     * @param {*} component A component that could contain a manual key.
     * @param {number} index Index that is used if a manual key is not provided.
     * @return {string}
     */
    function getComponentKey(component, index) {
      // Do some typechecking here since we call this blindly. We want to ensure
      // that we don't block potential future ES APIs.
      if (typeof component === 'object' && component !== null && component.key != null) {
        // Explicit key
        return escape(component.key);
      }
      // Implicit key determined by the index in the set
      return index.toString(36);
    }

    function forEachSingleChild(bookKeeping, child, name) {
      var func = bookKeeping.func,
          context = bookKeeping.context;

      func.call(context, child, bookKeeping.count++);
    }

    /**
     * Iterates through children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
     *
     * The provided forEachFunc(child, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} forEachFunc
     * @param {*} forEachContext Context for forEachContext.
     */
    function forEachChildren(children, forEachFunc, forEachContext) {
      if (children == null) {
        return children;
      }
      var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
      traverseAllChildren(children, forEachSingleChild, traverseContext);
      releaseTraverseContext(traverseContext);
    }

    function mapSingleChildIntoContext(bookKeeping, child, childKey) {
      var result = bookKeeping.result,
          keyPrefix = bookKeeping.keyPrefix,
          func = bookKeeping.func,
          context = bookKeeping.context;


      var mappedChild = func.call(context, child, bookKeeping.count++);
      if (Array.isArray(mappedChild)) {
        mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
          return c;
        });
      } else if (mappedChild != null) {
        if (isValidElement(mappedChild)) {
          mappedChild = cloneAndReplaceKey(mappedChild,
          // Keep both the (mapped) and old keys if they differ, just as
          // traverseAllChildren used to do for objects as children
          keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
        }
        result.push(mappedChild);
      }
    }

    function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
      var escapedPrefix = '';
      if (prefix != null) {
        escapedPrefix = escapeUserProvidedKey(prefix) + '/';
      }
      var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
      traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
      releaseTraverseContext(traverseContext);
    }

    /**
     * Maps children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenmap
     *
     * The provided mapFunction(child, key, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} func The map function.
     * @param {*} context Context for mapFunction.
     * @return {object} Object containing the ordered map of results.
     */
    function mapChildren(children, func, context) {
      if (children == null) {
        return children;
      }
      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, func, context);
      return result;
    }

    /**
     * Count the number of children that are typically specified as
     * `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrencount
     *
     * @param {?*} children Children tree container.
     * @return {number} The number of children.
     */
    function countChildren(children) {
      return traverseAllChildren(children, function () {
        return null;
      }, null);
    }

    /**
     * Flatten a children object (typically specified as `props.children`) and
     * return an array with appropriately re-keyed children.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
     */
    function toArray(children) {
      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
        return child;
      });
      return result;
    }

    /**
     * Returns the first child in a collection of children and verifies that there
     * is only one child in the collection.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenonly
     *
     * The current implementation of this function assumes that a single child gets
     * passed without a wrapper, but the purpose of this helper function is to
     * abstract away the particular structure of children.
     *
     * @param {?object} children Child collection structure.
     * @return {ReactElement} The first and only `ReactElement` contained in the
     * structure.
     */
    function onlyChild(children) {
      !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
      return children;
    }

    function createContext(defaultValue, calculateChangedBits) {
      if (calculateChangedBits === undefined) {
        calculateChangedBits = null;
      } else {
        {
          !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warningWithoutStack$1(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;
        }
      }

      var context = {
        $$typeof: REACT_CONTEXT_TYPE,
        _calculateChangedBits: calculateChangedBits,
        // As a workaround to support multiple concurrent renderers, we categorize
        // some renderers as primary and others as secondary. We only expect
        // there to be two concurrent renderers at most: React Native (primary) and
        // Fabric (secondary); React DOM (primary) and React ART (secondary).
        // Secondary renderers store their context values on separate fields.
        _currentValue: defaultValue,
        _currentValue2: defaultValue,
        // Used to track how many concurrent renderers this context currently
        // supports within in a single renderer. Such as parallel server rendering.
        _threadCount: 0,
        // These are circular
        Provider: null,
        Consumer: null
      };

      context.Provider = {
        $$typeof: REACT_PROVIDER_TYPE,
        _context: context
      };

      var hasWarnedAboutUsingNestedContextConsumers = false;
      var hasWarnedAboutUsingConsumerProvider = false;

      {
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
          $$typeof: REACT_CONTEXT_TYPE,
          _context: context,
          _calculateChangedBits: context._calculateChangedBits
        };
        // $FlowFixMe: Flow complains about not setting a value, which is intentional here
        Object.defineProperties(Consumer, {
          Provider: {
            get: function () {
              if (!hasWarnedAboutUsingConsumerProvider) {
                hasWarnedAboutUsingConsumerProvider = true;
                warning$1(false, 'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
              }
              return context.Provider;
            },
            set: function (_Provider) {
              context.Provider = _Provider;
            }
          },
          _currentValue: {
            get: function () {
              return context._currentValue;
            },
            set: function (_currentValue) {
              context._currentValue = _currentValue;
            }
          },
          _currentValue2: {
            get: function () {
              return context._currentValue2;
            },
            set: function (_currentValue2) {
              context._currentValue2 = _currentValue2;
            }
          },
          _threadCount: {
            get: function () {
              return context._threadCount;
            },
            set: function (_threadCount) {
              context._threadCount = _threadCount;
            }
          },
          Consumer: {
            get: function () {
              if (!hasWarnedAboutUsingNestedContextConsumers) {
                hasWarnedAboutUsingNestedContextConsumers = true;
                warning$1(false, 'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
              }
              return context.Consumer;
            }
          }
        });
        // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
        context.Consumer = Consumer;
      }

      {
        context._currentRenderer = null;
        context._currentRenderer2 = null;
      }

      return context;
    }

    function lazy(ctor) {
      return {
        $$typeof: REACT_LAZY_TYPE,
        _ctor: ctor,
        // React uses these fields to store the result.
        _status: -1,
        _result: null
      };
    }

    function forwardRef(render) {
      {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
          warningWithoutStack$1(false, 'forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
        } else if (typeof render !== 'function') {
          warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        } else {
          !(
          // Do not warn for 0 arguments because it could be due to usage of the 'arguments' object
          render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.') : void 0;
        }

        if (render != null) {
          !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;
        }
      }

      return {
        $$typeof: REACT_FORWARD_REF_TYPE,
        render: render
      };
    }

    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' ||
      // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
    }

    function memo(type, compare) {
      {
        if (!isValidElementType(type)) {
          warningWithoutStack$1(false, 'memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
        }
      }
      return {
        $$typeof: REACT_MEMO_TYPE,
        type: type,
        compare: compare === undefined ? null : compare
      };
    }

    /**
     * ReactElementValidator provides a wrapper around a element factory
     * which validates the props passed to the element. This is intended to be
     * used only in DEV and could be replaced by a static type checker for languages
     * that support it.
     */

    var propTypesMisspellWarningShown = void 0;

    {
      propTypesMisspellWarningShown = false;
    }

    function getDeclarationErrorAddendum() {
      if (ReactCurrentOwner.current) {
        var name = getComponentName(ReactCurrentOwner.current.type);
        if (name) {
          return '\n\nCheck the render method of `' + name + '`.';
        }
      }
      return '';
    }

    function getSourceInfoErrorAddendum(elementProps) {
      if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
        var source = elementProps.__source;
        var fileName = source.fileName.replace(/^.*[\\\/]/, '');
        var lineNumber = source.lineNumber;
        return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
      }
      return '';
    }

    /**
     * Warn if there's no key explicitly set on dynamic arrays of children or
     * object keys are not valid. This allows us to keep track of children between
     * updates.
     */
    var ownerHasKeyUseWarning = {};

    function getCurrentComponentErrorInfo(parentType) {
      var info = getDeclarationErrorAddendum();

      if (!info) {
        var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
        if (parentName) {
          info = '\n\nCheck the top-level render call using <' + parentName + '>.';
        }
      }
      return info;
    }

    /**
     * Warn if the element doesn't have an explicit key assigned to it.
     * This element is in an array. The array could grow and shrink or be
     * reordered. All children that haven't already been validated are required to
     * have a "key" property assigned to it. Error statuses are cached so a warning
     * will only be shown once.
     *
     * @internal
     * @param {ReactElement} element Element that requires a key.
     * @param {*} parentType element's parent's type.
     */
    function validateExplicitKey(element, parentType) {
      if (!element._store || element._store.validated || element.key != null) {
        return;
      }
      element._store.validated = true;

      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
        return;
      }
      ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

      // Usually the current owner is the offender, but if it accepts children as a
      // property, it may be the creator of the child that's responsible for
      // assigning it a key.
      var childOwner = '';
      if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
        // Give the component that originally created this child.
        childOwner = ' It was passed a child from ' + getComponentName(element._owner.type) + '.';
      }

      setCurrentlyValidatingElement(element);
      {
        warning$1(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
      }
      setCurrentlyValidatingElement(null);
    }

    /**
     * Ensure that every element either is passed in a static location, in an
     * array with an explicit keys property defined, or in an object literal
     * with valid key property.
     *
     * @internal
     * @param {ReactNode} node Statically passed child of any type.
     * @param {*} parentType node's parent's type.
     */
    function validateChildKeys(node, parentType) {
      if (typeof node !== 'object') {
        return;
      }
      if (Array.isArray(node)) {
        for (var i = 0; i < node.length; i++) {
          var child = node[i];
          if (isValidElement(child)) {
            validateExplicitKey(child, parentType);
          }
        }
      } else if (isValidElement(node)) {
        // This element was passed in a valid location.
        if (node._store) {
          node._store.validated = true;
        }
      } else if (node) {
        var iteratorFn = getIteratorFn(node);
        if (typeof iteratorFn === 'function') {
          // Entry iterators used to provide implicit keys,
          // but now we print a separate warning for them later.
          if (iteratorFn !== node.entries) {
            var iterator = iteratorFn.call(node);
            var step = void 0;
            while (!(step = iterator.next()).done) {
              if (isValidElement(step.value)) {
                validateExplicitKey(step.value, parentType);
              }
            }
          }
        }
      }
    }

    /**
     * Given an element, validate that its props follow the propTypes definition,
     * provided by the type.
     *
     * @param {ReactElement} element
     */
    function validatePropTypes(element) {
      var type = element.type;
      var name = void 0,
          propTypes = void 0;
      if (typeof type === 'function') {
        // Class or function component
        name = type.displayName || type.name;
        propTypes = type.propTypes;
      } else if (typeof type === 'object' && type !== null && type.$$typeof === REACT_FORWARD_REF_TYPE) {
        // ForwardRef
        var functionName = type.render.displayName || type.render.name || '';
        name = type.displayName || (functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef');
        propTypes = type.propTypes;
      } else {
        return;
      }
      if (propTypes) {
        setCurrentlyValidatingElement(element);
        checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
        setCurrentlyValidatingElement(null);
      } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
        propTypesMisspellWarningShown = true;
        warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
      }
      if (typeof type.getDefaultProps === 'function') {
        !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
      }
    }

    /**
     * Given a fragment, validate that it can only be provided with fragment props
     * @param {ReactElement} fragment
     */
    function validateFragmentProps(fragment) {
      setCurrentlyValidatingElement(fragment);

      var keys = Object.keys(fragment.props);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (key !== 'children' && key !== 'key') {
          warning$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
          break;
        }
      }

      if (fragment.ref !== null) {
        warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');
      }

      setCurrentlyValidatingElement(null);
    }

    function createElementWithValidation(type, props, children) {
      var validType = isValidElementType(type);

      // We warn in this case but don't throw. We expect the element creation to
      // succeed and there will likely be errors in render.
      if (!validType) {
        var info = '';
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
        }

        var sourceInfo = getSourceInfoErrorAddendum(props);
        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        var typeString = void 0;
        if (type === null) {
          typeString = 'null';
        } else if (Array.isArray(type)) {
          typeString = 'array';
        } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
          typeString = '<' + (getComponentName(type.type) || 'Unknown') + ' />';
          info = ' Did you accidentally export a JSX literal instead of a component?';
        } else {
          typeString = typeof type;
        }

        warning$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
      }

      var element = createElement.apply(this, arguments);

      // The result can be nullish if a mock or a custom function is used.
      // TODO: Drop this when these are no longer allowed as the type argument.
      if (element == null) {
        return element;
      }

      // Skip key warning if the type isn't valid since our key validation logic
      // doesn't expect a non-string/function type and can throw confusing errors.
      // We don't want exception behavior to differ between dev and prod.
      // (Rendering will throw with a helpful message and as soon as the type is
      // fixed, the key warnings will appear.)
      if (validType) {
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], type);
        }
      }

      if (type === REACT_FRAGMENT_TYPE) {
        validateFragmentProps(element);
      } else {
        validatePropTypes(element);
      }

      return element;
    }

    function createFactoryWithValidation(type) {
      var validatedFactory = createElementWithValidation.bind(null, type);
      validatedFactory.type = type;
      // Legacy hook: remove it
      {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }

      return validatedFactory;
    }

    function cloneElementWithValidation(element, props, children) {
      var newElement = cloneElement.apply(this, arguments);
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], newElement.type);
      }
      validatePropTypes(newElement);
      return newElement;
    }

    var React = {
      Children: {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
      },

      createRef: createRef,
      Component: Component,
      PureComponent: PureComponent,

      createContext: createContext,
      forwardRef: forwardRef,
      lazy: lazy,
      memo: memo,

      Fragment: REACT_FRAGMENT_TYPE,
      StrictMode: REACT_STRICT_MODE_TYPE,
      Suspense: REACT_SUSPENSE_TYPE,

      createElement: createElementWithValidation,
      cloneElement: cloneElementWithValidation,
      createFactory: createFactoryWithValidation,
      isValidElement: isValidElement,

      version: ReactVersion,

      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals
    };

    {
      React.unstable_ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      React.unstable_Profiler = REACT_PROFILER_TYPE;
    }



    var React$2 = Object.freeze({
    	default: React
    });

    var React$3 = ( React$2 && React ) || React$2;

    // TODO: decide on the top-level export form.
    // This is hacky but makes it work with both Rollup and Jest.
    var react = React$3.default || React$3;

    module.exports = react;
      })();
    }
    });

    var react = createCommonjsModule(function (module) {

    {
      module.exports = react_development;
    }
    });
    var react_1 = react.Component;

    var scheduler_production_min = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports,"__esModule",{value:!0});var d=null,f=!1,h=3,k=-1,l=-1,m=!1,n=!1;function p(){if(!m){var a=d.expirationTime;n?q():n=!0;r(t,a);}}
    function u(){var a=d,b=d.next;if(d===b)d=null;else{var c=d.previous;d=c.next=b;b.previous=c;}a.next=a.previous=null;c=a.callback;b=a.expirationTime;a=a.priorityLevel;var e=h,Q=l;h=a;l=b;try{var g=c();}finally{h=e,l=Q;}if("function"===typeof g)if(g={callback:g,priorityLevel:a,expirationTime:b,next:null,previous:null},null===d)d=g.next=g.previous=g;else{c=null;a=d;do{if(a.expirationTime>=b){c=a;break}a=a.next;}while(a!==d);null===c?c=d:c===d&&(d=g,p());b=c.previous;b.next=c.previous=g;g.next=c;g.previous=
    b;}}function v(){if(-1===k&&null!==d&&1===d.priorityLevel){m=!0;try{do u();while(null!==d&&1===d.priorityLevel)}finally{m=!1,null!==d?p():n=!1;}}}function t(a){m=!0;var b=f;f=a;try{if(a)for(;null!==d;){var c=exports.unstable_now();if(d.expirationTime<=c){do u();while(null!==d&&d.expirationTime<=c)}else break}else if(null!==d){do u();while(null!==d&&!w())}}finally{m=!1,f=b,null!==d?p():n=!1,v();}}
    var x=Date,y="function"===typeof setTimeout?setTimeout:void 0,z="function"===typeof clearTimeout?clearTimeout:void 0,A="function"===typeof requestAnimationFrame?requestAnimationFrame:void 0,B="function"===typeof cancelAnimationFrame?cancelAnimationFrame:void 0,C,D;function E(a){C=A(function(b){z(D);a(b);});D=y(function(){B(C);a(exports.unstable_now());},100);}
    if("object"===typeof performance&&"function"===typeof performance.now){var F=performance;exports.unstable_now=function(){return F.now()};}else exports.unstable_now=function(){return x.now()};var r,q,w;
    if("undefined"!==typeof window&&window._schedMock){var G=window._schedMock;r=G[0];q=G[1];w=G[2];}else if("undefined"===typeof window||"function"!==typeof window.addEventListener){var H=null,I=-1,J=function(a,b){if(null!==H){var c=H;H=null;try{I=b,c(a);}finally{I=-1;}}};r=function(a,b){-1!==I?setTimeout(r,0,a,b):(H=a,setTimeout(J,b,!0,b),setTimeout(J,1073741823,!1,1073741823));};q=function(){H=null;};w=function(){return !1};exports.unstable_now=function(){return -1===I?0:I};}else{"undefined"!==typeof console&&
    ("function"!==typeof A&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!==typeof B&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var K=null,L=!1,M=-1,N=!1,O=!1,P=0,R=33,S=33;w=function(){return P<=exports.unstable_now()};var T="__reactIdleCallback$"+Math.random().toString(36).slice(2);
    window.addEventListener("message",function(a){if(a.source===window&&a.data===T){L=!1;a=K;var b=M;K=null;M=-1;var c=exports.unstable_now(),e=!1;if(0>=P-c)if(-1!==b&&b<=c)e=!0;else{N||(N=!0,E(U));K=a;M=b;return}if(null!==a){O=!0;try{a(e);}finally{O=!1;}}}},!1);var U=function(a){if(null!==K){E(U);var b=a-P+S;b<S&&R<S?(8>b&&(b=8),S=b<R?R:b):R=b;P=a+S;L||(L=!0,window.postMessage(T,"*"));}else N=!1;};r=function(a,b){K=a;M=b;O||0>b?window.postMessage(T,"*"):N||(N=!0,E(U));};q=function(){K=null;L=!1;M=-1;};}
    exports.unstable_ImmediatePriority=1;exports.unstable_UserBlockingPriority=2;exports.unstable_NormalPriority=3;exports.unstable_IdlePriority=5;exports.unstable_LowPriority=4;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3;}var c=h,e=k;h=a;k=exports.unstable_now();try{return b()}finally{h=c,k=e,v();}};
    exports.unstable_scheduleCallback=function(a,b){var c=-1!==k?k:exports.unstable_now();if("object"===typeof b&&null!==b&&"number"===typeof b.timeout)b=c+b.timeout;else switch(h){case 1:b=c+-1;break;case 2:b=c+250;break;case 5:b=c+1073741823;break;case 4:b=c+1E4;break;default:b=c+5E3;}a={callback:a,priorityLevel:h,expirationTime:b,next:null,previous:null};if(null===d)d=a.next=a.previous=a,p();else{c=null;var e=d;do{if(e.expirationTime>b){c=e;break}e=e.next;}while(e!==d);null===c?c=d:c===d&&(d=a,p());
    b=c.previous;b.next=c.previous=a;a.next=c;a.previous=b;}return a};exports.unstable_cancelCallback=function(a){var b=a.next;if(null!==b){if(b===a)d=null;else{a===d&&(d=b);var c=a.previous;c.next=b;b.previous=c;}a.next=a.previous=null;}};exports.unstable_wrapCallback=function(a){var b=h;return function(){var c=h,e=k;h=b;k=exports.unstable_now();try{return a.apply(this,arguments)}finally{h=c,k=e,v();}}};exports.unstable_getCurrentPriorityLevel=function(){return h};
    exports.unstable_shouldYield=function(){return !f&&(null!==d&&d.expirationTime<l||w())};
    });

    unwrapExports(scheduler_production_min);
    var scheduler_production_min_1 = scheduler_production_min.unstable_now;
    var scheduler_production_min_2 = scheduler_production_min.unstable_ImmediatePriority;
    var scheduler_production_min_3 = scheduler_production_min.unstable_UserBlockingPriority;
    var scheduler_production_min_4 = scheduler_production_min.unstable_NormalPriority;
    var scheduler_production_min_5 = scheduler_production_min.unstable_IdlePriority;
    var scheduler_production_min_6 = scheduler_production_min.unstable_LowPriority;
    var scheduler_production_min_7 = scheduler_production_min.unstable_runWithPriority;
    var scheduler_production_min_8 = scheduler_production_min.unstable_scheduleCallback;
    var scheduler_production_min_9 = scheduler_production_min.unstable_cancelCallback;
    var scheduler_production_min_10 = scheduler_production_min.unstable_wrapCallback;
    var scheduler_production_min_11 = scheduler_production_min.unstable_getCurrentPriorityLevel;
    var scheduler_production_min_12 = scheduler_production_min.unstable_shouldYield;

    var scheduler_development = createCommonjsModule(function (module, exports) {



    {
      (function() {

    Object.defineProperty(exports, '__esModule', { value: true });

    /* eslint-disable no-var */

    // TODO: Use symbols?
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5;

    // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823;

    // Times out immediately
    var IMMEDIATE_PRIORITY_TIMEOUT = -1;
    // Eventually times out
    var USER_BLOCKING_PRIORITY = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000;
    // Never times out
    var IDLE_PRIORITY = maxSigned31BitInt;

    // Callbacks are stored as a circular, doubly linked list.
    var firstCallbackNode = null;

    var currentDidTimeout = false;
    var currentPriorityLevel = NormalPriority;
    var currentEventStartTime = -1;
    var currentExpirationTime = -1;

    // This is set when a callback is being executed, to prevent re-entrancy.
    var isExecutingCallback = false;

    var isHostCallbackScheduled = false;

    var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

    function ensureHostCallbackIsScheduled() {
      if (isExecutingCallback) {
        // Don't schedule work yet; wait until the next time we yield.
        return;
      }
      // Schedule the host callback using the earliest expiration in the list.
      var expirationTime = firstCallbackNode.expirationTime;
      if (!isHostCallbackScheduled) {
        isHostCallbackScheduled = true;
      } else {
        // Cancel the existing host callback.
        cancelHostCallback();
      }
      requestHostCallback(flushWork, expirationTime);
    }

    function flushFirstCallback() {
      var flushedNode = firstCallbackNode;

      // Remove the node from the list before calling the callback. That way the
      // list is in a consistent state even if the callback throws.
      var next = firstCallbackNode.next;
      if (firstCallbackNode === next) {
        // This is the last callback in the list.
        firstCallbackNode = null;
        next = null;
      } else {
        var lastCallbackNode = firstCallbackNode.previous;
        firstCallbackNode = lastCallbackNode.next = next;
        next.previous = lastCallbackNode;
      }

      flushedNode.next = flushedNode.previous = null;

      // Now it's safe to call the callback.
      var callback = flushedNode.callback;
      var expirationTime = flushedNode.expirationTime;
      var priorityLevel = flushedNode.priorityLevel;
      var previousPriorityLevel = currentPriorityLevel;
      var previousExpirationTime = currentExpirationTime;
      currentPriorityLevel = priorityLevel;
      currentExpirationTime = expirationTime;
      var continuationCallback;
      try {
        continuationCallback = callback();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
        currentExpirationTime = previousExpirationTime;
      }

      // A callback may return a continuation. The continuation should be scheduled
      // with the same priority and expiration as the just-finished callback.
      if (typeof continuationCallback === 'function') {
        var continuationNode = {
          callback: continuationCallback,
          priorityLevel: priorityLevel,
          expirationTime: expirationTime,
          next: null,
          previous: null
        };

        // Insert the new callback into the list, sorted by its expiration. This is
        // almost the same as the code in `scheduleCallback`, except the callback
        // is inserted into the list *before* callbacks of equal expiration instead
        // of after.
        if (firstCallbackNode === null) {
          // This is the first callback in the list.
          firstCallbackNode = continuationNode.next = continuationNode.previous = continuationNode;
        } else {
          var nextAfterContinuation = null;
          var node = firstCallbackNode;
          do {
            if (node.expirationTime >= expirationTime) {
              // This callback expires at or after the continuation. We will insert
              // the continuation *before* this callback.
              nextAfterContinuation = node;
              break;
            }
            node = node.next;
          } while (node !== firstCallbackNode);

          if (nextAfterContinuation === null) {
            // No equal or lower priority callback was found, which means the new
            // callback is the lowest priority callback in the list.
            nextAfterContinuation = firstCallbackNode;
          } else if (nextAfterContinuation === firstCallbackNode) {
            // The new callback is the highest priority callback in the list.
            firstCallbackNode = continuationNode;
            ensureHostCallbackIsScheduled();
          }

          var previous = nextAfterContinuation.previous;
          previous.next = nextAfterContinuation.previous = continuationNode;
          continuationNode.next = nextAfterContinuation;
          continuationNode.previous = previous;
        }
      }
    }

    function flushImmediateWork() {
      if (
      // Confirm we've exited the outer most event handler
      currentEventStartTime === -1 && firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority) {
        isExecutingCallback = true;
        try {
          do {
            flushFirstCallback();
          } while (
          // Keep flushing until there are no more immediate callbacks
          firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority);
        } finally {
          isExecutingCallback = false;
          if (firstCallbackNode !== null) {
            // There's still work remaining. Request another callback.
            ensureHostCallbackIsScheduled();
          } else {
            isHostCallbackScheduled = false;
          }
        }
      }
    }

    function flushWork(didTimeout) {
      isExecutingCallback = true;
      var previousDidTimeout = currentDidTimeout;
      currentDidTimeout = didTimeout;
      try {
        if (didTimeout) {
          // Flush all the expired callbacks without yielding.
          while (firstCallbackNode !== null) {
            // Read the current time. Flush all the callbacks that expire at or
            // earlier than that time. Then read the current time again and repeat.
            // This optimizes for as few performance.now calls as possible.
            var currentTime = exports.unstable_now();
            if (firstCallbackNode.expirationTime <= currentTime) {
              do {
                flushFirstCallback();
              } while (firstCallbackNode !== null && firstCallbackNode.expirationTime <= currentTime);
              continue;
            }
            break;
          }
        } else {
          // Keep flushing callbacks until we run out of time in the frame.
          if (firstCallbackNode !== null) {
            do {
              flushFirstCallback();
            } while (firstCallbackNode !== null && !shouldYieldToHost());
          }
        }
      } finally {
        isExecutingCallback = false;
        currentDidTimeout = previousDidTimeout;
        if (firstCallbackNode !== null) {
          // There's still work remaining. Request another callback.
          ensureHostCallbackIsScheduled();
        } else {
          isHostCallbackScheduled = false;
        }
        // Before exiting, flush all the immediate work that was scheduled.
        flushImmediateWork();
      }
    }

    function unstable_runWithPriority(priorityLevel, eventHandler) {
      switch (priorityLevel) {
        case ImmediatePriority:
        case UserBlockingPriority:
        case NormalPriority:
        case LowPriority:
        case IdlePriority:
          break;
        default:
          priorityLevel = NormalPriority;
      }

      var previousPriorityLevel = currentPriorityLevel;
      var previousEventStartTime = currentEventStartTime;
      currentPriorityLevel = priorityLevel;
      currentEventStartTime = exports.unstable_now();

      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
        currentEventStartTime = previousEventStartTime;

        // Before exiting, flush all the immediate work that was scheduled.
        flushImmediateWork();
      }
    }

    function unstable_wrapCallback(callback) {
      var parentPriorityLevel = currentPriorityLevel;
      return function () {
        // This is a fork of runWithPriority, inlined for performance.
        var previousPriorityLevel = currentPriorityLevel;
        var previousEventStartTime = currentEventStartTime;
        currentPriorityLevel = parentPriorityLevel;
        currentEventStartTime = exports.unstable_now();

        try {
          return callback.apply(this, arguments);
        } finally {
          currentPriorityLevel = previousPriorityLevel;
          currentEventStartTime = previousEventStartTime;
          flushImmediateWork();
        }
      };
    }

    function unstable_scheduleCallback(callback, deprecated_options) {
      var startTime = currentEventStartTime !== -1 ? currentEventStartTime : exports.unstable_now();

      var expirationTime;
      if (typeof deprecated_options === 'object' && deprecated_options !== null && typeof deprecated_options.timeout === 'number') {
        // FIXME: Remove this branch once we lift expiration times out of React.
        expirationTime = startTime + deprecated_options.timeout;
      } else {
        switch (currentPriorityLevel) {
          case ImmediatePriority:
            expirationTime = startTime + IMMEDIATE_PRIORITY_TIMEOUT;
            break;
          case UserBlockingPriority:
            expirationTime = startTime + USER_BLOCKING_PRIORITY;
            break;
          case IdlePriority:
            expirationTime = startTime + IDLE_PRIORITY;
            break;
          case LowPriority:
            expirationTime = startTime + LOW_PRIORITY_TIMEOUT;
            break;
          case NormalPriority:
          default:
            expirationTime = startTime + NORMAL_PRIORITY_TIMEOUT;
        }
      }

      var newNode = {
        callback: callback,
        priorityLevel: currentPriorityLevel,
        expirationTime: expirationTime,
        next: null,
        previous: null
      };

      // Insert the new callback into the list, ordered first by expiration, then
      // by insertion. So the new callback is inserted any other callback with
      // equal expiration.
      if (firstCallbackNode === null) {
        // This is the first callback in the list.
        firstCallbackNode = newNode.next = newNode.previous = newNode;
        ensureHostCallbackIsScheduled();
      } else {
        var next = null;
        var node = firstCallbackNode;
        do {
          if (node.expirationTime > expirationTime) {
            // The new callback expires before this one.
            next = node;
            break;
          }
          node = node.next;
        } while (node !== firstCallbackNode);

        if (next === null) {
          // No callback with a later expiration was found, which means the new
          // callback has the latest expiration in the list.
          next = firstCallbackNode;
        } else if (next === firstCallbackNode) {
          // The new callback has the earliest expiration in the entire list.
          firstCallbackNode = newNode;
          ensureHostCallbackIsScheduled();
        }

        var previous = next.previous;
        previous.next = next.previous = newNode;
        newNode.next = next;
        newNode.previous = previous;
      }

      return newNode;
    }

    function unstable_cancelCallback(callbackNode) {
      var next = callbackNode.next;
      if (next === null) {
        // Already cancelled.
        return;
      }

      if (next === callbackNode) {
        // This is the only scheduled callback. Clear the list.
        firstCallbackNode = null;
      } else {
        // Remove the callback from its position in the list.
        if (callbackNode === firstCallbackNode) {
          firstCallbackNode = next;
        }
        var previous = callbackNode.previous;
        previous.next = next;
        next.previous = previous;
      }

      callbackNode.next = callbackNode.previous = null;
    }

    function unstable_getCurrentPriorityLevel() {
      return currentPriorityLevel;
    }

    function unstable_shouldYield() {
      return !currentDidTimeout && (firstCallbackNode !== null && firstCallbackNode.expirationTime < currentExpirationTime || shouldYieldToHost());
    }

    // The remaining code is essentially a polyfill for requestIdleCallback. It
    // works by scheduling a requestAnimationFrame, storing the time for the start
    // of the frame, then scheduling a postMessage which gets scheduled after paint.
    // Within the postMessage handler do as much work as possible until time + frame
    // rate. By separating the idle call into a separate event tick we ensure that
    // layout, paint and other browser work is counted against the available time.
    // The frame rate is dynamically adjusted.

    // We capture a local reference to any global, in case it gets polyfilled after
    // this module is initially evaluated. We want to be using a
    // consistent implementation.
    var localDate = Date;

    // This initialization code may run even on server environments if a component
    // just imports ReactDOM (e.g. for findDOMNode). Some environments might not
    // have setTimeout or clearTimeout. However, we always expect them to be defined
    // on the client. https://github.com/facebook/react/pull/13088
    var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;

    // We don't expect either of these to necessarily be defined, but we will error
    // later if they are missing on the client.
    var localRequestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;
    var localCancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : undefined;

    // requestAnimationFrame does not run when the tab is in the background. If
    // we're backgrounded we prefer for that work to happen so that the page
    // continues to load in the background. So we also schedule a 'setTimeout' as
    // a fallback.
    // TODO: Need a better heuristic for backgrounded work.
    var ANIMATION_FRAME_TIMEOUT = 100;
    var rAFID;
    var rAFTimeoutID;
    var requestAnimationFrameWithTimeout = function (callback) {
      // schedule rAF and also a setTimeout
      rAFID = localRequestAnimationFrame(function (timestamp) {
        // cancel the setTimeout
        localClearTimeout(rAFTimeoutID);
        callback(timestamp);
      });
      rAFTimeoutID = localSetTimeout(function () {
        // cancel the requestAnimationFrame
        localCancelAnimationFrame(rAFID);
        callback(exports.unstable_now());
      }, ANIMATION_FRAME_TIMEOUT);
    };

    if (hasNativePerformanceNow) {
      var Performance = performance;
      exports.unstable_now = function () {
        return Performance.now();
      };
    } else {
      exports.unstable_now = function () {
        return localDate.now();
      };
    }

    var requestHostCallback;
    var cancelHostCallback;
    var shouldYieldToHost;

    if (typeof window !== 'undefined' && window._schedMock) {
      // Dynamic injection, only for testing purposes.
      var impl = window._schedMock;
      requestHostCallback = impl[0];
      cancelHostCallback = impl[1];
      shouldYieldToHost = impl[2];
    } else if (
    // If Scheduler runs in a non-DOM environment, it falls back to a naive
    // implementation using setTimeout.
    typeof window === 'undefined' ||
    // "addEventListener" might not be available on the window object
    // if this is a mocked "window" object. So we need to validate that too.
    typeof window.addEventListener !== 'function') {
      var _callback = null;
      var _currentTime = -1;
      var _flushCallback = function (didTimeout, ms) {
        if (_callback !== null) {
          var cb = _callback;
          _callback = null;
          try {
            _currentTime = ms;
            cb(didTimeout);
          } finally {
            _currentTime = -1;
          }
        }
      };
      requestHostCallback = function (cb, ms) {
        if (_currentTime !== -1) {
          // Protect against re-entrancy.
          setTimeout(requestHostCallback, 0, cb, ms);
        } else {
          _callback = cb;
          setTimeout(_flushCallback, ms, true, ms);
          setTimeout(_flushCallback, maxSigned31BitInt, false, maxSigned31BitInt);
        }
      };
      cancelHostCallback = function () {
        _callback = null;
      };
      shouldYieldToHost = function () {
        return false;
      };
      exports.unstable_now = function () {
        return _currentTime === -1 ? 0 : _currentTime;
      };
    } else {
      if (typeof console !== 'undefined') {
        // TODO: Remove fb.me link
        if (typeof localRequestAnimationFrame !== 'function') {
          console.error("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
        }
        if (typeof localCancelAnimationFrame !== 'function') {
          console.error("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
        }
      }

      var scheduledHostCallback = null;
      var isMessageEventScheduled = false;
      var timeoutTime = -1;

      var isAnimationFrameScheduled = false;

      var isFlushingHostCallback = false;

      var frameDeadline = 0;
      // We start out assuming that we run at 30fps but then the heuristic tracking
      // will adjust this value to a faster fps if we get more frequent animation
      // frames.
      var previousFrameTime = 33;
      var activeFrameTime = 33;

      shouldYieldToHost = function () {
        return frameDeadline <= exports.unstable_now();
      };

      // We use the postMessage trick to defer idle work until after the repaint.
      var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);
      var idleTick = function (event) {
        if (event.source !== window || event.data !== messageKey) {
          return;
        }

        isMessageEventScheduled = false;

        var prevScheduledCallback = scheduledHostCallback;
        var prevTimeoutTime = timeoutTime;
        scheduledHostCallback = null;
        timeoutTime = -1;

        var currentTime = exports.unstable_now();

        var didTimeout = false;
        if (frameDeadline - currentTime <= 0) {
          // There's no time left in this idle period. Check if the callback has
          // a timeout and whether it's been exceeded.
          if (prevTimeoutTime !== -1 && prevTimeoutTime <= currentTime) {
            // Exceeded the timeout. Invoke the callback even though there's no
            // time left.
            didTimeout = true;
          } else {
            // No timeout.
            if (!isAnimationFrameScheduled) {
              // Schedule another animation callback so we retry later.
              isAnimationFrameScheduled = true;
              requestAnimationFrameWithTimeout(animationTick);
            }
            // Exit without invoking the callback.
            scheduledHostCallback = prevScheduledCallback;
            timeoutTime = prevTimeoutTime;
            return;
          }
        }

        if (prevScheduledCallback !== null) {
          isFlushingHostCallback = true;
          try {
            prevScheduledCallback(didTimeout);
          } finally {
            isFlushingHostCallback = false;
          }
        }
      };
      // Assumes that we have addEventListener in this environment. Might need
      // something better for old IE.
      window.addEventListener('message', idleTick, false);

      var animationTick = function (rafTime) {
        if (scheduledHostCallback !== null) {
          // Eagerly schedule the next animation callback at the beginning of the
          // frame. If the scheduler queue is not empty at the end of the frame, it
          // will continue flushing inside that callback. If the queue *is* empty,
          // then it will exit immediately. Posting the callback at the start of the
          // frame ensures it's fired within the earliest possible frame. If we
          // waited until the end of the frame to post the callback, we risk the
          // browser skipping a frame and not firing the callback until the frame
          // after that.
          requestAnimationFrameWithTimeout(animationTick);
        } else {
          // No pending work. Exit.
          isAnimationFrameScheduled = false;
          return;
        }

        var nextFrameTime = rafTime - frameDeadline + activeFrameTime;
        if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
          if (nextFrameTime < 8) {
            // Defensive coding. We don't support higher frame rates than 120hz.
            // If the calculated frame time gets lower than 8, it is probably a bug.
            nextFrameTime = 8;
          }
          // If one frame goes long, then the next one can be short to catch up.
          // If two frames are short in a row, then that's an indication that we
          // actually have a higher frame rate than what we're currently optimizing.
          // We adjust our heuristic dynamically accordingly. For example, if we're
          // running on 120hz display or 90hz VR display.
          // Take the max of the two in case one of them was an anomaly due to
          // missed frame deadlines.
          activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
        } else {
          previousFrameTime = nextFrameTime;
        }
        frameDeadline = rafTime + activeFrameTime;
        if (!isMessageEventScheduled) {
          isMessageEventScheduled = true;
          window.postMessage(messageKey, '*');
        }
      };

      requestHostCallback = function (callback, absoluteTimeout) {
        scheduledHostCallback = callback;
        timeoutTime = absoluteTimeout;
        if (isFlushingHostCallback || absoluteTimeout < 0) {
          // Don't wait for the next frame. Continue working ASAP, in a new event.
          window.postMessage(messageKey, '*');
        } else if (!isAnimationFrameScheduled) {
          // If rAF didn't already schedule one, we need to schedule a frame.
          // TODO: If this rAF doesn't materialize because the browser throttles, we
          // might want to still have setTimeout trigger rIC as a backup to ensure
          // that we keep performing work.
          isAnimationFrameScheduled = true;
          requestAnimationFrameWithTimeout(animationTick);
        }
      };

      cancelHostCallback = function () {
        scheduledHostCallback = null;
        isMessageEventScheduled = false;
        timeoutTime = -1;
      };
    }

    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_wrapCallback = unstable_wrapCallback;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_shouldYield = unstable_shouldYield;
      })();
    }
    });

    unwrapExports(scheduler_development);
    var scheduler_development_1 = scheduler_development.unstable_now;
    var scheduler_development_2 = scheduler_development.unstable_ImmediatePriority;
    var scheduler_development_3 = scheduler_development.unstable_UserBlockingPriority;
    var scheduler_development_4 = scheduler_development.unstable_NormalPriority;
    var scheduler_development_5 = scheduler_development.unstable_IdlePriority;
    var scheduler_development_6 = scheduler_development.unstable_LowPriority;
    var scheduler_development_7 = scheduler_development.unstable_runWithPriority;
    var scheduler_development_8 = scheduler_development.unstable_scheduleCallback;
    var scheduler_development_9 = scheduler_development.unstable_cancelCallback;
    var scheduler_development_10 = scheduler_development.unstable_wrapCallback;
    var scheduler_development_11 = scheduler_development.unstable_getCurrentPriorityLevel;
    var scheduler_development_12 = scheduler_development.unstable_shouldYield;

    var scheduler = createCommonjsModule(function (module) {

    {
      module.exports = scheduler_development;
    }
    });

    function ca$1(a,b,c,d,e,f,g,h){if(!a){a=void 0;if(void 0===b)a=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var k=[c,d,e,f,g,h],l=0;a=Error(b.replace(/%s/g,function(){return k[l++]}));a.name="Invariant Violation";}a.framesToPop=1;throw a;}}
    function t$1(a){for(var b=arguments.length-1,c="https://reactjs.org/docs/error-decoder.html?invariant="+a,d=0;d<b;d++)c+="&args[]="+encodeURIComponent(arguments[d+1]);ca$1(!1,"Minified React error #"+a+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",c);}react?void 0:t$1("227");function da$1(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l);}catch(m){this.onError(m);}}
    var ea=!1,fa=null,ha=!1,ia=null,ja={onError:function(a){ea=!0;fa=a;}};function ka(a,b,c,d,e,f,g,h,k){ea=!1;fa=null;da$1.apply(ja,arguments);}function la(a,b,c,d,e,f,g,h,k){ka.apply(this,arguments);if(ea){if(ea){var l=fa;ea=!1;fa=null;}else t$1("198"),l=void 0;ha||(ha=!0,ia=l);}}var ma=null,na={};
    function oa(){if(ma)for(var a in na){var b=na[a],c=ma.indexOf(a);-1<c?void 0:t$1("96",a);if(!pa[c]){b.extractEvents?void 0:t$1("97",a);pa[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],g=b,h=d;qa.hasOwnProperty(h)?t$1("99",h):void 0;qa[h]=f;var k=f.phasedRegistrationNames;if(k){for(e in k)k.hasOwnProperty(e)&&ra(k[e],g,h);e=!0;}else f.registrationName?(ra(f.registrationName,g,h),e=!0):e=!1;e?void 0:t$1("98",d,a);}}}}
    function ra(a,b,c){sa[a]?t$1("100",a):void 0;sa[a]=b;ta[a]=b.eventTypes[c].dependencies;}var pa=[],qa={},sa={},ta={},ua=null,va=null,wa=null;function xa(a,b,c){var d=a.type||"unknown-event";a.currentTarget=wa(c);la(d,b,void 0,a);a.currentTarget=null;}function ya(a,b){null==b?t$1("30"):void 0;if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}
    function za(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a);}var Aa=null;function Ba(a){if(a){var b=a._dispatchListeners,c=a._dispatchInstances;if(Array.isArray(b))for(var d=0;d<b.length&&!a.isPropagationStopped();d++)xa(a,b[d],c[d]);else b&&xa(a,b,c);a._dispatchListeners=null;a._dispatchInstances=null;a.isPersistent()||a.constructor.release(a);}}
    var Ca={injectEventPluginOrder:function(a){ma?t$1("101"):void 0;ma=Array.prototype.slice.call(a);oa();},injectEventPluginsByName:function(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];na.hasOwnProperty(c)&&na[c]===d||(na[c]?t$1("102",c):void 0,na[c]=d,b=!0);}b&&oa();}};
    function Da(a,b){var c=a.stateNode;if(!c)return null;var d=ua(c);if(!d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1;}if(a)return null;c&&"function"!==typeof c?t$1("231",b,typeof c):void 0;
    return c}function Ea(a){null!==a&&(Aa=ya(Aa,a));a=Aa;Aa=null;if(a&&(za(a,Ba),Aa?t$1("95"):void 0,ha))throw a=ia,ha=!1,ia=null,a;}var Fa=Math.random().toString(36).slice(2),Ga="__reactInternalInstance$"+Fa,Ha="__reactEventHandlers$"+Fa;function Ia(a){if(a[Ga])return a[Ga];for(;!a[Ga];)if(a.parentNode)a=a.parentNode;else return null;a=a[Ga];return 5===a.tag||6===a.tag?a:null}function Ja(a){a=a[Ga];return !a||5!==a.tag&&6!==a.tag?null:a}
    function Ka(a){if(5===a.tag||6===a.tag)return a.stateNode;t$1("33");}function La(a){return a[Ha]||null}function Ma(a){do a=a.return;while(a&&5!==a.tag);return a?a:null}function Na(a,b,c){if(b=Da(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=ya(c._dispatchListeners,b),c._dispatchInstances=ya(c._dispatchInstances,a);}
    function Oa(a){if(a&&a.dispatchConfig.phasedRegistrationNames){for(var b=a._targetInst,c=[];b;)c.push(b),b=Ma(b);for(b=c.length;0<b--;)Na(c[b],"captured",a);for(b=0;b<c.length;b++)Na(c[b],"bubbled",a);}}function Pa(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=Da(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=ya(c._dispatchListeners,b),c._dispatchInstances=ya(c._dispatchInstances,a));}function Ra(a){za(a,Oa);}var Sa=!("undefined"===typeof window||!window.document||!window.document.createElement);function Ta(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var Ua={animationend:Ta("Animation","AnimationEnd"),animationiteration:Ta("Animation","AnimationIteration"),animationstart:Ta("Animation","AnimationStart"),transitionend:Ta("Transition","TransitionEnd")},Va={},Wa={};
    Sa&&(Wa=document.createElement("div").style,"AnimationEvent"in window||(delete Ua.animationend.animation,delete Ua.animationiteration.animation,delete Ua.animationstart.animation),"TransitionEvent"in window||delete Ua.transitionend.transition);function Xa(a){if(Va[a])return Va[a];if(!Ua[a])return a;var b=Ua[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Wa)return Va[a]=b[c];return a}
    var Ya=Xa("animationend"),Za=Xa("animationiteration"),$a=Xa("animationstart"),ab=Xa("transitionend"),bb="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),cb=null,eb=null,fb=null;
    function gb(){if(fb)return fb;var a,b=eb,c=b.length,d,e="value"in cb?cb.value:cb.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return fb=e.slice(a,1<d?1-d:void 0)}function hb(){return !0}function ib(){return !1}
    function A$1(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):"target"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?hb:ib;this.isPropagationStopped=ib;return this}
    objectAssign(A$1.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=hb);},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=hb);},persist:function(){this.isPersistent=hb;},isPersistent:ib,destructor:function(){var a=this.constructor.Interface,
    b;for(b in a)this[b]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null;this.isPropagationStopped=this.isDefaultPrevented=ib;this._dispatchInstances=this._dispatchListeners=null;}});A$1.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};
    A$1.extend=function(a){function b(){}function c(){return d.apply(this,arguments)}var d=this;b.prototype=d.prototype;var e=new b;objectAssign(e,c.prototype);c.prototype=e;c.prototype.constructor=c;c.Interface=objectAssign({},d.Interface,a);c.extend=d.extend;jb(c);return c};jb(A$1);function kb(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}function lb(a){a instanceof this?void 0:t$1("279");a.destructor();10>this.eventPool.length&&this.eventPool.push(a);}
    function jb(a){a.eventPool=[];a.getPooled=kb;a.release=lb;}var mb=A$1.extend({data:null}),nb=A$1.extend({data:null}),ob=[9,13,27,32],pb=Sa&&"CompositionEvent"in window,qb=null;Sa&&"documentMode"in document&&(qb=document.documentMode);
    var rb=Sa&&"TextEvent"in window&&!qb,sb=Sa&&(!pb||qb&&8<qb&&11>=qb),tb=String.fromCharCode(32),ub={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",
    captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},vb=!1;
    function wb(a,b){switch(a){case "keyup":return -1!==ob.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "blur":return !0;default:return !1}}function xb(a){a=a.detail;return "object"===typeof a&&"data"in a?a.data:null}var yb=!1;function zb(a,b){switch(a){case "compositionend":return xb(b);case "keypress":if(32!==b.which)return null;vb=!0;return tb;case "textInput":return a=b.data,a===tb&&vb?null:a;default:return null}}
    function Ab(a,b){if(yb)return "compositionend"===a||!pb&&wb(a,b)?(a=gb(),fb=eb=cb=null,yb=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return sb&&"ko"!==b.locale?null:b.data;default:return null}}
    var Bb={eventTypes:ub,extractEvents:function(a,b,c,d){var e=void 0;var f=void 0;if(pb)b:{switch(a){case "compositionstart":e=ub.compositionStart;break b;case "compositionend":e=ub.compositionEnd;break b;case "compositionupdate":e=ub.compositionUpdate;break b}e=void 0;}else yb?wb(a,c)&&(e=ub.compositionEnd):"keydown"===a&&229===c.keyCode&&(e=ub.compositionStart);e?(sb&&"ko"!==c.locale&&(yb||e!==ub.compositionStart?e===ub.compositionEnd&&yb&&(f=gb()):(cb=d,eb="value"in cb?cb.value:cb.textContent,yb=
    !0)),e=mb.getPooled(e,b,c,d),f?e.data=f:(f=xb(c),null!==f&&(e.data=f)),Ra(e),f=e):f=null;(a=rb?zb(a,c):Ab(a,c))?(b=nb.getPooled(ub.beforeInput,b,c,d),b.data=a,Ra(b)):b=null;return null===f?b:null===b?f:[f,b]}},Cb=null,Db=null,Eb=null;function Hb(a){if(a=va(a)){"function"!==typeof Cb?t$1("280"):void 0;var b=ua(a.stateNode);Cb(a.stateNode,a.type,b);}}function Ib(a){Db?Eb?Eb.push(a):Eb=[a]:Db=a;}function Jb(){if(Db){var a=Db,b=Eb;Eb=Db=null;Hb(a);if(b)for(a=0;a<b.length;a++)Hb(b[a]);}}
    function Kb(a,b){return a(b)}function Lb(a,b,c){return a(b,c)}function Mb(){}var Nb=!1;function Ob(a,b){if(Nb)return a(b);Nb=!0;try{return Kb(a,b)}finally{if(Nb=!1,null!==Db||null!==Eb)Mb(),Jb();}}var Pb={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Qb(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return "input"===b?!!Pb[a.type]:"textarea"===b?!0:!1}
    function Rb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}function Sb(a){if(!Sa)return !1;a="on"+a;var b=a in document;b||(b=document.createElement("div"),b.setAttribute(a,"return;"),b="function"===typeof b[a]);return b}function Tb(a){var b=a.type;return (a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
    function Ub(a){var b=Tb(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a);}});Object.defineProperty(a,b,{enumerable:c.enumerable});return {getValue:function(){return d},setValue:function(a){d=""+a;},stopTracking:function(){a._valueTracker=
    null;delete a[b];}}}}function Vb(a){a._valueTracker||(a._valueTracker=Ub(a));}function Wb(a){if(!a)return !1;var b=a._valueTracker;if(!b)return !0;var c=b.getValue();var d="";a&&(d=Tb(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}
    var Xb=react.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Yb=/^(.*)[\\\/]/,D$1="function"===typeof Symbol&&Symbol.for,Zb=D$1?Symbol.for("react.element"):60103,$b=D$1?Symbol.for("react.portal"):60106,ac=D$1?Symbol.for("react.fragment"):60107,bc=D$1?Symbol.for("react.strict_mode"):60108,cc=D$1?Symbol.for("react.profiler"):60114,dc=D$1?Symbol.for("react.provider"):60109,ec=D$1?Symbol.for("react.context"):60110,fc=D$1?Symbol.for("react.concurrent_mode"):60111,gc=D$1?Symbol.for("react.forward_ref"):60112,hc=D$1?Symbol.for("react.suspense"):
    60113,ic=D$1?Symbol.for("react.memo"):60115,jc=D$1?Symbol.for("react.lazy"):60116,kc="function"===typeof Symbol&&Symbol.iterator;function lc(a){if(null===a||"object"!==typeof a)return null;a=kc&&a[kc]||a["@@iterator"];return "function"===typeof a?a:null}
    function mc(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case fc:return "ConcurrentMode";case ac:return "Fragment";case $b:return "Portal";case cc:return "Profiler";case bc:return "StrictMode";case hc:return "Suspense"}if("object"===typeof a)switch(a.$$typeof){case ec:return "Context.Consumer";case dc:return "Context.Provider";case gc:var b=a.render;b=b.displayName||b.name||"";return a.displayName||(""!==b?"ForwardRef("+b+
    ")":"ForwardRef");case ic:return mc(a.type);case jc:if(a=1===a._status?a._result:null)return mc(a)}return null}function nc(a){var b="";do{a:switch(a.tag){case 2:case 16:case 0:case 1:case 5:case 8:case 13:var c=a._debugOwner,d=a._debugSource,e=mc(a.type);var f=null;c&&(f=mc(c.type));c=e;e="";d?e=" (at "+d.fileName.replace(Yb,"")+":"+d.lineNumber+")":f&&(e=" (created by "+f+")");f="\n    in "+(c||"Unknown")+e;break a;default:f="";}b+=f;a=a.return;}while(a);return b}
    var oc=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,pc=Object.prototype.hasOwnProperty,qc={},rc={};
    function sc(a){if(pc.call(rc,a))return !0;if(pc.call(qc,a))return !1;if(oc.test(a))return rc[a]=!0;qc[a]=!0;return !1}function tc(a,b,c,d){if(null!==c&&0===c.type)return !1;switch(typeof b){case "function":case "symbol":return !0;case "boolean":if(d)return !1;if(null!==c)return !c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return "data-"!==a&&"aria-"!==a;default:return !1}}
    function uc(a,b,c,d){if(null===b||"undefined"===typeof b||tc(a,b,c,d))return !0;if(d)return !1;if(null!==c)switch(c.type){case 3:return !b;case 4:return !1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return !1}function E$1(a,b,c,d,e){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;}var F$1={};
    "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){F$1[a]=new E$1(a,0,!1,a,null);});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];F$1[b]=new E$1(b,1,!1,a[1],null);});["contentEditable","draggable","spellCheck","value"].forEach(function(a){F$1[a]=new E$1(a,2,!1,a.toLowerCase(),null);});
    ["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){F$1[a]=new E$1(a,2,!1,a,null);});"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){F$1[a]=new E$1(a,3,!1,a.toLowerCase(),null);});["checked","multiple","muted","selected"].forEach(function(a){F$1[a]=new E$1(a,3,!0,a,null);});
    ["capture","download"].forEach(function(a){F$1[a]=new E$1(a,4,!1,a,null);});["cols","rows","size","span"].forEach(function(a){F$1[a]=new E$1(a,6,!1,a,null);});["rowSpan","start"].forEach(function(a){F$1[a]=new E$1(a,5,!1,a.toLowerCase(),null);});var vc=/[\-:]([a-z])/g;function xc(a){return a[1].toUpperCase()}
    "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(vc,
    xc);F$1[b]=new E$1(b,1,!1,a,null);});"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(vc,xc);F$1[b]=new E$1(b,1,!1,a,"http://www.w3.org/1999/xlink");});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(vc,xc);F$1[b]=new E$1(b,1,!1,a,"http://www.w3.org/XML/1998/namespace");});F$1.tabIndex=new E$1("tabIndex",1,!1,"tabindex",null);
    function yc(a,b,c,d){var e=F$1.hasOwnProperty(b)?F$1[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(uc(b,c,e,d)&&(c=null),d||null===e?sc(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))));}
    function zc(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;default:return ""}}function Ac(a,b){var c=b.checked;return objectAssign({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}
    function Bc(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=zc(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value};}function Cc(a,b){b=b.checked;null!=b&&yc(a,"checked",b,!1);}
    function Dc(a,b){Cc(a,b);var c=zc(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c;}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?Ec(a,b.type,c):b.hasOwnProperty("defaultValue")&&Ec(a,b.type,zc(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked);}
    function Fc(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b;}c=a.name;""!==c&&(a.name="");a.defaultChecked=!a.defaultChecked;a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c);}
    function Ec(a,b,c){if("number"!==b||a.ownerDocument.activeElement!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c);}var Gc={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Hc(a,b,c){a=A$1.getPooled(Gc.change,a,b,c);a.type="change";Ib(c);Ra(a);return a}var Jc=null,Kc=null;function Lc(a){Ea(a);}
    function Mc(a){var b=Ka(a);if(Wb(b))return a}function Nc(a,b){if("change"===a)return b}var Oc=!1;Sa&&(Oc=Sb("input")&&(!document.documentMode||9<document.documentMode));function Pc(){Jc&&(Jc.detachEvent("onpropertychange",Qc),Kc=Jc=null);}function Qc(a){"value"===a.propertyName&&Mc(Kc)&&(a=Hc(Kc,a,Rb(a)),Ob(Lc,a));}function Rc(a,b,c){"focus"===a?(Pc(),Jc=b,Kc=c,Jc.attachEvent("onpropertychange",Qc)):"blur"===a&&Pc();}function Sc(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return Mc(Kc)}
    function Tc(a,b){if("click"===a)return Mc(b)}function Uc(a,b){if("input"===a||"change"===a)return Mc(b)}
    var Vc={eventTypes:Gc,_isInputEventSupported:Oc,extractEvents:function(a,b,c,d){var e=b?Ka(b):window,f=void 0,g=void 0,h=e.nodeName&&e.nodeName.toLowerCase();"select"===h||"input"===h&&"file"===e.type?f=Nc:Qb(e)?Oc?f=Uc:(f=Sc,g=Rc):(h=e.nodeName)&&"input"===h.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)&&(f=Tc);if(f&&(f=f(a,b)))return Hc(f,c,d);g&&g(a,e,b);"blur"===a&&(a=e._wrapperState)&&a.controlled&&"number"===e.type&&Ec(e,"number",e.value);}},Wc=A$1.extend({view:null,detail:null}),Xc={Alt:"altKey",
    Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Yc(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Xc[a])?!!b[a]:!1}function Zc(){return Yc}
    var $c=0,ad=0,bd=!1,cd=!1,dd=Wc.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Zc,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)},movementX:function(a){if("movementX"in a)return a.movementX;var b=$c;$c=a.screenX;return bd?"mousemove"===a.type?a.screenX-b:0:(bd=!0,0)},movementY:function(a){if("movementY"in a)return a.movementY;
    var b=ad;ad=a.screenY;return cd?"mousemove"===a.type?a.screenY-b:0:(cd=!0,0)}}),ed=dd.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),fd={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",
    dependencies:["pointerout","pointerover"]}},gd={eventTypes:fd,extractEvents:function(a,b,c,d){var e="mouseover"===a||"pointerover"===a,f="mouseout"===a||"pointerout"===a;if(e&&(c.relatedTarget||c.fromElement)||!f&&!e)return null;e=d.window===d?d:(e=d.ownerDocument)?e.defaultView||e.parentWindow:window;f?(f=b,b=(b=c.relatedTarget||c.toElement)?Ia(b):null):f=null;if(f===b)return null;var g=void 0,h=void 0,k=void 0,l=void 0;if("mouseout"===a||"mouseover"===a)g=dd,h=fd.mouseLeave,k=fd.mouseEnter,l="mouse";
    else if("pointerout"===a||"pointerover"===a)g=ed,h=fd.pointerLeave,k=fd.pointerEnter,l="pointer";var m=null==f?e:Ka(f);e=null==b?e:Ka(b);a=g.getPooled(h,f,c,d);a.type=l+"leave";a.target=m;a.relatedTarget=e;c=g.getPooled(k,b,c,d);c.type=l+"enter";c.target=e;c.relatedTarget=m;d=b;if(f&&d)a:{b=f;e=d;l=0;for(g=b;g;g=Ma(g))l++;g=0;for(k=e;k;k=Ma(k))g++;for(;0<l-g;)b=Ma(b),l--;for(;0<g-l;)e=Ma(e),g--;for(;l--;){if(b===e||b===e.alternate)break a;b=Ma(b);e=Ma(e);}b=null;}else b=null;e=b;for(b=[];f&&f!==e;){l=
    f.alternate;if(null!==l&&l===e)break;b.push(f);f=Ma(f);}for(f=[];d&&d!==e;){l=d.alternate;if(null!==l&&l===e)break;f.push(d);d=Ma(d);}for(d=0;d<b.length;d++)Pa(b[d],"bubbled",a);for(d=f.length;0<d--;)Pa(f[d],"captured",c);return [a,c]}},hd=Object.prototype.hasOwnProperty;function id(a,b){return a===b?0!==a||0!==b||1/a===1/b:a!==a&&b!==b}
    function jd(a,b){if(id(a,b))return !0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return !1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return !1;for(d=0;d<c.length;d++)if(!hd.call(b,c[d])||!id(a[c[d]],b[c[d]]))return !1;return !0}function kd(a){var b=a;if(a.alternate)for(;b.return;)b=b.return;else{if(0!==(b.effectTag&2))return 1;for(;b.return;)if(b=b.return,0!==(b.effectTag&2))return 1}return 3===b.tag?2:3}function ld(a){2!==kd(a)?t$1("188"):void 0;}
    function md(a){var b=a.alternate;if(!b)return b=kd(a),3===b?t$1("188"):void 0,1===b?null:a;for(var c=a,d=b;;){var e=c.return,f=e?e.alternate:null;if(!e||!f)break;if(e.child===f.child){for(var g=e.child;g;){if(g===c)return ld(e),a;if(g===d)return ld(e),b;g=g.sibling;}t$1("188");}if(c.return!==d.return)c=e,d=f;else{g=!1;for(var h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling;}if(!g){for(h=f.child;h;){if(h===c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling;}g?
    void 0:t$1("189");}}c.alternate!==d?t$1("190"):void 0;}3!==c.tag?t$1("188"):void 0;return c.stateNode.current===c?a:b}function nd(a){a=md(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return;}b.sibling.return=b.return;b=b.sibling;}}return null}
    var od=A$1.extend({animationName:null,elapsedTime:null,pseudoElement:null}),pd=A$1.extend({clipboardData:function(a){return "clipboardData"in a?a.clipboardData:window.clipboardData}}),qd=Wc.extend({relatedTarget:null});function rd(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}
    var sd={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},td={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",
    116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ud=Wc.extend({key:function(a){if(a.key){var b=sd[a.key]||a.key;if("Unidentified"!==b)return b}return "keypress"===a.type?(a=rd(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?td[a.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Zc,charCode:function(a){return "keypress"===
    a.type?rd(a):0},keyCode:function(a){return "keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return "keypress"===a.type?rd(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),vd=dd.extend({dataTransfer:null}),wd=Wc.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Zc}),xd=A$1.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),yd=dd.extend({deltaX:function(a){return "deltaX"in a?a.deltaX:"wheelDeltaX"in
    a?-a.wheelDeltaX:0},deltaY:function(a){return "deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null}),zd=[["abort","abort"],[Ya,"animationEnd"],[Za,"animationIteration"],[$a,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],
    ["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],
    ["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ab,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],Ad={},Bd={};function Cd(a,b){var c=a[0];a=a[1];var d="on"+(a[0].toUpperCase()+a.slice(1));b={phasedRegistrationNames:{bubbled:d,captured:d+"Capture"},dependencies:[c],isInteractive:b};Ad[a]=b;Bd[c]=b;}
    [["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],
    ["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(a){Cd(a,!0);});zd.forEach(function(a){Cd(a,!1);});
    var Dd={eventTypes:Ad,isInteractiveTopLevelEventType:function(a){a=Bd[a];return void 0!==a&&!0===a.isInteractive},extractEvents:function(a,b,c,d){var e=Bd[a];if(!e)return null;switch(a){case "keypress":if(0===rd(c))return null;case "keydown":case "keyup":a=ud;break;case "blur":case "focus":a=qd;break;case "click":if(2===c.button)return null;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":a=dd;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":a=
    vd;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":a=wd;break;case Ya:case Za:case $a:a=od;break;case ab:a=xd;break;case "scroll":a=Wc;break;case "wheel":a=yd;break;case "copy":case "cut":case "paste":a=pd;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":a=ed;break;default:a=A$1;}b=a.getPooled(e,b,c,d);Ra(b);return b}},Ed=Dd.isInteractiveTopLevelEventType,
    Fd=[];function Gd(a){var b=a.targetInst,c=b;do{if(!c){a.ancestors.push(c);break}var d;for(d=c;d.return;)d=d.return;d=3!==d.tag?null:d.stateNode.containerInfo;if(!d)break;a.ancestors.push(c);c=Ia(d);}while(c);for(c=0;c<a.ancestors.length;c++){b=a.ancestors[c];var e=Rb(a.nativeEvent);d=a.topLevelType;for(var f=a.nativeEvent,g=null,h=0;h<pa.length;h++){var k=pa[h];k&&(k=k.extractEvents(d,b,f,e))&&(g=ya(g,k));}Ea(g);}}var Hd=!0;
    function G$1(a,b){if(!b)return null;var c=(Ed(a)?Id:Jd).bind(null,a);b.addEventListener(a,c,!1);}function Kd(a,b){if(!b)return null;var c=(Ed(a)?Id:Jd).bind(null,a);b.addEventListener(a,c,!0);}function Id(a,b){Lb(Jd,a,b);}
    function Jd(a,b){if(Hd){var c=Rb(b);c=Ia(c);null===c||"number"!==typeof c.tag||2===kd(c)||(c=null);if(Fd.length){var d=Fd.pop();d.topLevelType=a;d.nativeEvent=b;d.targetInst=c;a=d;}else a={topLevelType:a,nativeEvent:b,targetInst:c,ancestors:[]};try{Ob(Gd,a);}finally{a.topLevelType=null,a.nativeEvent=null,a.targetInst=null,a.ancestors.length=0,10>Fd.length&&Fd.push(a);}}}var Ld={},Md=0,Nd="_reactListenersID"+(""+Math.random()).slice(2);
    function Od(a){Object.prototype.hasOwnProperty.call(a,Nd)||(a[Nd]=Md++,Ld[a[Nd]]={});return Ld[a[Nd]]}function Pd(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}function Qd(a){for(;a&&a.firstChild;)a=a.firstChild;return a}
    function Rd(a,b){var c=Qd(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return {node:c,offset:b-a};a=d;}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode;}c=void 0;}c=Qd(c);}}function Sd(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Sd(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}
    function Td(){for(var a=window,b=Pd();b instanceof a.HTMLIFrameElement;){try{a=b.contentDocument.defaultView;}catch(c){break}b=Pd(a.document);}return b}function Ud(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}
    var Vd=Sa&&"documentMode"in document&&11>=document.documentMode,Wd={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Xd=null,Yd=null,Zd=null,$d=!1;
    function ae(a,b){var c=b.window===b?b.document:9===b.nodeType?b:b.ownerDocument;if($d||null==Xd||Xd!==Pd(c))return null;c=Xd;"selectionStart"in c&&Ud(c)?c={start:c.selectionStart,end:c.selectionEnd}:(c=(c.ownerDocument&&c.ownerDocument.defaultView||window).getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset});return Zd&&jd(Zd,c)?null:(Zd=c,a=A$1.getPooled(Wd.select,Yd,a,b),a.type="select",a.target=Xd,Ra(a),a)}
    var be={eventTypes:Wd,extractEvents:function(a,b,c,d){var e=d.window===d?d.document:9===d.nodeType?d:d.ownerDocument,f;if(!(f=!e)){a:{e=Od(e);f=ta.onSelect;for(var g=0;g<f.length;g++){var h=f[g];if(!e.hasOwnProperty(h)||!e[h]){e=!1;break a}}e=!0;}f=!e;}if(f)return null;e=b?Ka(b):window;switch(a){case "focus":if(Qb(e)||"true"===e.contentEditable)Xd=e,Yd=b,Zd=null;break;case "blur":Zd=Yd=Xd=null;break;case "mousedown":$d=!0;break;case "contextmenu":case "mouseup":case "dragend":return $d=!1,ae(c,d);case "selectionchange":if(Vd)break;
    case "keydown":case "keyup":return ae(c,d)}return null}};Ca.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));ua=La;va=Ja;wa=Ka;Ca.injectEventPluginsByName({SimpleEventPlugin:Dd,EnterLeaveEventPlugin:gd,ChangeEventPlugin:Vc,SelectEventPlugin:be,BeforeInputEventPlugin:Bb});function de(a){var b="";react.Children.forEach(a,function(a){null!=a&&(b+=a);});return b}
    function ee(a,b){a=objectAssign({children:void 0},b);if(b=de(b.children))a.children=b;return a}function fe(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0);}else{c=""+zc(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e]);}null!==b&&(b.selected=!0);}}
    function ge(a,b){null!=b.dangerouslySetInnerHTML?t$1("91"):void 0;return objectAssign({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function he(a,b){var c=b.value;null==c&&(c=b.defaultValue,b=b.children,null!=b&&(null!=c?t$1("92"):void 0,Array.isArray(b)&&(1>=b.length?void 0:t$1("93"),b=b[0]),c=b),null==c&&(c=""));a._wrapperState={initialValue:zc(c)};}
    function ie(a,b){var c=zc(b.value),d=zc(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d);}function je(a){var b=a.textContent;b===a._wrapperState.initialValue&&(a.value=b);}var ke={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};
    function le(a){switch(a){case "svg":return "http://www.w3.org/2000/svg";case "math":return "http://www.w3.org/1998/Math/MathML";default:return "http://www.w3.org/1999/xhtml"}}function me(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?le(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
    var ne=void 0,oe=function(a){return "undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)});}:a}(function(a,b){if(a.namespaceURI!==ke.svg||"innerHTML"in a)a.innerHTML=b;else{ne=ne||document.createElement("div");ne.innerHTML="<svg>"+b+"</svg>";for(b=ne.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild);}});
    function pe(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b;}
    var qe={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,
    floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},re=["Webkit","ms","Moz","O"];Object.keys(qe).forEach(function(a){re.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);qe[b]=qe[a];});});function se(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||qe.hasOwnProperty(a)&&qe[a]?(""+b).trim():b+"px"}
    function te(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=se(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e;}}var ue=objectAssign({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
    function ve(a,b){b&&(ue[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML?t$1("137",a,""):void 0),null!=b.dangerouslySetInnerHTML&&(null!=b.children?t$1("60"):void 0,"object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML?void 0:t$1("61")),null!=b.style&&"object"!==typeof b.style?t$1("62",""):void 0);}
    function we(a,b){if(-1===a.indexOf("-"))return "string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return !1;default:return !0}}
    function xe(a,b){a=9===a.nodeType||11===a.nodeType?a:a.ownerDocument;var c=Od(a);b=ta[b];for(var d=0;d<b.length;d++){var e=b[d];if(!c.hasOwnProperty(e)||!c[e]){switch(e){case "scroll":Kd("scroll",a);break;case "focus":case "blur":Kd("focus",a);Kd("blur",a);c.blur=!0;c.focus=!0;break;case "cancel":case "close":Sb(e)&&Kd(e,a);break;case "invalid":case "submit":case "reset":break;default:-1===bb.indexOf(e)&&G$1(e,a);}c[e]=!0;}}}function ye(){}var ze=null,Ae=null;
    function Be(a,b){switch(a){case "button":case "input":case "select":case "textarea":return !!b.autoFocus}return !1}function Ce(a,b){return "textarea"===a||"option"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}var De="function"===typeof setTimeout?setTimeout:void 0,Ee="function"===typeof clearTimeout?clearTimeout:void 0;
    function Fe(a){for(a=a.nextSibling;a&&1!==a.nodeType&&3!==a.nodeType;)a=a.nextSibling;return a}function Ge(a){for(a=a.firstChild;a&&1!==a.nodeType&&3!==a.nodeType;)a=a.nextSibling;return a}var He=[],Ie=-1;function H$1(a){0>Ie||(a.current=He[Ie],He[Ie]=null,Ie--);}function I$1(a,b){Ie++;He[Ie]=a.current;a.current=b;}var Je={},J$1={current:Je},K$1={current:!1},Ke=Je;
    function Le(a,b){var c=a.type.contextTypes;if(!c)return Je;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function L$1(a){a=a.childContextTypes;return null!==a&&void 0!==a}function Me(a){H$1(K$1,a);H$1(J$1,a);}function Ne(a){H$1(K$1,a);H$1(J$1,a);}
    function Oe(a,b,c){J$1.current!==Je?t$1("168"):void 0;I$1(J$1,b,a);I$1(K$1,c,a);}function Pe(a,b,c){var d=a.stateNode;a=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)e in a?void 0:t$1("108",mc(b)||"Unknown",e);return objectAssign({},c,d)}function Qe(a){var b=a.stateNode;b=b&&b.__reactInternalMemoizedMergedChildContext||Je;Ke=J$1.current;I$1(J$1,b,a);I$1(K$1,K$1.current,a);return !0}
    function Re(a,b,c){var d=a.stateNode;d?void 0:t$1("169");c?(b=Pe(a,b,Ke),d.__reactInternalMemoizedMergedChildContext=b,H$1(K$1,a),H$1(J$1,a),I$1(J$1,b,a)):H$1(K$1,a);I$1(K$1,c,a);}var Se=null,Te=null;function Ue(a){return function(b){try{return a(b)}catch(c){}}}
    function Ve(a){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return !1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)return !0;try{var c=b.inject(a);Se=Ue(function(a){return b.onCommitFiberRoot(c,a)});Te=Ue(function(a){return b.onCommitFiberUnmount(c,a)});}catch(d){}return !0}
    function We(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.firstContextDependency=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.effectTag=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childExpirationTime=this.expirationTime=0;this.alternate=null;}function M$1(a,b,c,d){return new We(a,b,c,d)}
    function Xe(a){a=a.prototype;return !(!a||!a.isReactComponent)}function Ye(a){if("function"===typeof a)return Xe(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===gc)return 11;if(a===ic)return 14}return 2}
    function Ze(a,b){var c=a.alternate;null===c?(c=M$1(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.effectTag=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childExpirationTime=a.childExpirationTime;c.expirationTime=a.expirationTime;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;c.firstContextDependency=a.firstContextDependency;c.sibling=a.sibling;
    c.index=a.index;c.ref=a.ref;return c}
    function $e(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)Xe(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ac:return af(c.children,e,f,b);case fc:return bf(c,e|3,f,b);case bc:return bf(c,e|2,f,b);case cc:return a=M$1(12,c,b,e|4),a.elementType=cc,a.type=cc,a.expirationTime=f,a;case hc:return a=M$1(13,c,b,e),a.elementType=hc,a.type=hc,a.expirationTime=f,a;default:if("object"===typeof a&&null!==a)switch(a.$$typeof){case dc:g=10;break a;case ec:g=9;break a;case gc:g=11;break a;case ic:g=
    14;break a;case jc:g=16;d=null;break a}t$1("130",null==a?a:typeof a,"");}b=M$1(g,c,b,e);b.elementType=a;b.type=d;b.expirationTime=f;return b}function af(a,b,c,d){a=M$1(7,a,d,b);a.expirationTime=c;return a}function bf(a,b,c,d){a=M$1(8,a,d,b);b=0===(b&1)?bc:fc;a.elementType=b;a.type=b;a.expirationTime=c;return a}function cf(a,b,c){a=M$1(6,a,null,b);a.expirationTime=c;return a}
    function df(a,b,c){b=M$1(4,null!==a.children?a.children:[],a.key,b);b.expirationTime=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}function ef(a,b){a.didError=!1;var c=a.earliestPendingTime;0===c?a.earliestPendingTime=a.latestPendingTime=b:c<b?a.earliestPendingTime=b:a.latestPendingTime>b&&(a.latestPendingTime=b);ff(b,a);}
    function gf(a,b){a.didError=!1;var c=a.latestPingedTime;0!==c&&c>=b&&(a.latestPingedTime=0);c=a.earliestPendingTime;var d=a.latestPendingTime;c===b?a.earliestPendingTime=d===b?a.latestPendingTime=0:d:d===b&&(a.latestPendingTime=c);c=a.earliestSuspendedTime;d=a.latestSuspendedTime;0===c?a.earliestSuspendedTime=a.latestSuspendedTime=b:c<b?a.earliestSuspendedTime=b:d>b&&(a.latestSuspendedTime=b);ff(b,a);}
    function hf(a,b){var c=a.earliestPendingTime;a=a.earliestSuspendedTime;c>b&&(b=c);a>b&&(b=a);return b}function ff(a,b){var c=b.earliestSuspendedTime,d=b.latestSuspendedTime,e=b.earliestPendingTime,f=b.latestPingedTime;e=0!==e?e:f;0===e&&(0===a||d<a)&&(e=d);a=e;0!==a&&c>a&&(a=c);b.nextExpirationTimeToWorkOn=e;b.expirationTime=a;}var jf=!1;
    function kf(a){return {baseState:a,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function lf(a){return {baseState:a.baseState,firstUpdate:a.firstUpdate,lastUpdate:a.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}
    function mf(a){return {expirationTime:a,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function nf(a,b){null===a.lastUpdate?a.firstUpdate=a.lastUpdate=b:(a.lastUpdate.next=b,a.lastUpdate=b);}
    function of(a,b){var c=a.alternate;if(null===c){var d=a.updateQueue;var e=null;null===d&&(d=a.updateQueue=kf(a.memoizedState));}else d=a.updateQueue,e=c.updateQueue,null===d?null===e?(d=a.updateQueue=kf(a.memoizedState),e=c.updateQueue=kf(c.memoizedState)):d=a.updateQueue=lf(e):null===e&&(e=c.updateQueue=lf(d));null===e||d===e?nf(d,b):null===d.lastUpdate||null===e.lastUpdate?(nf(d,b),nf(e,b)):(nf(d,b),e.lastUpdate=b);}
    function pf(a,b){var c=a.updateQueue;c=null===c?a.updateQueue=kf(a.memoizedState):qf(a,c);null===c.lastCapturedUpdate?c.firstCapturedUpdate=c.lastCapturedUpdate=b:(c.lastCapturedUpdate.next=b,c.lastCapturedUpdate=b);}function qf(a,b){var c=a.alternate;null!==c&&b===c.updateQueue&&(b=a.updateQueue=lf(b));return b}
    function rf(a,b,c,d,e,f){switch(c.tag){case 1:return a=c.payload,"function"===typeof a?a.call(f,d,e):a;case 3:a.effectTag=a.effectTag&-2049|64;case 0:a=c.payload;e="function"===typeof a?a.call(f,d,e):a;if(null===e||void 0===e)break;return objectAssign({},d,e);case 2:jf=!0;}return d}
    function sf(a,b,c,d,e){jf=!1;b=qf(a,b);for(var f=b.baseState,g=null,h=0,k=b.firstUpdate,l=f;null!==k;){var m=k.expirationTime;m<e?(null===g&&(g=k,f=l),h<m&&(h=m)):(l=rf(a,b,k,l,c,d),null!==k.callback&&(a.effectTag|=32,k.nextEffect=null,null===b.lastEffect?b.firstEffect=b.lastEffect=k:(b.lastEffect.nextEffect=k,b.lastEffect=k)));k=k.next;}m=null;for(k=b.firstCapturedUpdate;null!==k;){var q=k.expirationTime;q<e?(null===m&&(m=k,null===g&&(f=l)),h<q&&(h=q)):(l=rf(a,b,k,l,c,d),null!==k.callback&&(a.effectTag|=
    32,k.nextEffect=null,null===b.lastCapturedEffect?b.firstCapturedEffect=b.lastCapturedEffect=k:(b.lastCapturedEffect.nextEffect=k,b.lastCapturedEffect=k)));k=k.next;}null===g&&(b.lastUpdate=null);null===m?b.lastCapturedUpdate=null:a.effectTag|=32;null===g&&null===m&&(f=l);b.baseState=f;b.firstUpdate=g;b.firstCapturedUpdate=m;a.expirationTime=h;a.memoizedState=l;}
    function tf(a,b,c){null!==b.firstCapturedUpdate&&(null!==b.lastUpdate&&(b.lastUpdate.next=b.firstCapturedUpdate,b.lastUpdate=b.lastCapturedUpdate),b.firstCapturedUpdate=b.lastCapturedUpdate=null);uf(b.firstEffect,c);b.firstEffect=b.lastEffect=null;uf(b.firstCapturedEffect,c);b.firstCapturedEffect=b.lastCapturedEffect=null;}function uf(a,b){for(;null!==a;){var c=a.callback;if(null!==c){a.callback=null;var d=b;"function"!==typeof c?t$1("191",c):void 0;c.call(d);}a=a.nextEffect;}}
    function vf(a,b){return {value:a,source:b,stack:nc(b)}}var wf={current:null},xf=null,yf=null,zf=null;function Af(a,b){var c=a.type._context;I$1(wf,c._currentValue,a);c._currentValue=b;}function Bf(a){var b=wf.current;H$1(wf,a);a.type._context._currentValue=b;}function Cf(a){xf=a;zf=yf=null;a.firstContextDependency=null;}
    function Df(a,b){if(zf!==a&&!1!==b&&0!==b){if("number"!==typeof b||1073741823===b)zf=a,b=1073741823;b={context:a,observedBits:b,next:null};null===yf?(null===xf?t$1("293"):void 0,xf.firstContextDependency=yf=b):yf=yf.next=b;}return a._currentValue}var Ef={},N$1={current:Ef},Ff={current:Ef},Gf={current:Ef};function Hf(a){a===Ef?t$1("174"):void 0;return a}
    function If(a,b){I$1(Gf,b,a);I$1(Ff,a,a);I$1(N$1,Ef,a);var c=b.nodeType;switch(c){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:me(null,"");break;default:c=8===c?b.parentNode:b,b=c.namespaceURI||null,c=c.tagName,b=me(b,c);}H$1(N$1,a);I$1(N$1,b,a);}function Jf(a){H$1(N$1,a);H$1(Ff,a);H$1(Gf,a);}function Kf(a){Hf(Gf.current);var b=Hf(N$1.current);var c=me(b,a.type);b!==c&&(I$1(Ff,a,a),I$1(N$1,c,a));}function Lf(a){Ff.current===a&&(H$1(N$1,a),H$1(Ff,a));}
    function O$1(a,b){if(a&&a.defaultProps){b=objectAssign({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);}return b}function Mf(a){var b=a._result;switch(a._status){case 1:return b;case 2:throw b;case 0:throw b;default:throw a._status=0,b=a._ctor,b=b(),b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b);},function(b){0===a._status&&(a._status=2,a._result=b);}),a._result=b,b;}}var Nf=Xb.ReactCurrentOwner,Of=(new react.Component).refs;
    function Pf(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:objectAssign({},b,c);a.memoizedState=c;d=a.updateQueue;null!==d&&0===a.expirationTime&&(d.baseState=c);}
    var Uf={isMounted:function(a){return (a=a._reactInternalFiber)?2===kd(a):!1},enqueueSetState:function(a,b,c){a=a._reactInternalFiber;var d=Qf();d=Rf(d,a);var e=mf(d);e.payload=b;void 0!==c&&null!==c&&(e.callback=c);of(a,e);Tf(a,d);},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=Qf();d=Rf(d,a);var e=mf(d);e.tag=1;e.payload=b;void 0!==c&&null!==c&&(e.callback=c);of(a,e);Tf(a,d);},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=Qf();c=Rf(c,a);var d=mf(c);d.tag=
    2;void 0!==b&&null!==b&&(d.callback=b);of(a,d);Tf(a,c);}};function Vf(a,b,c,d,e,f,g){a=a.stateNode;return "function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!jd(c,d)||!jd(e,f):!0}
    function Wf(a,b,c){var d=!1,e=Je;var f=b.contextType;"object"===typeof f&&null!==f?f=Nf.currentDispatcher.readContext(f):(e=L$1(b)?Ke:J$1.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Le(a,e):Je);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Uf;a.stateNode=b;b._reactInternalFiber=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
    function Xf(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Uf.enqueueReplaceState(b,b.state,null);}
    function Yf(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=Of;var f=b.contextType;"object"===typeof f&&null!==f?e.context=Nf.currentDispatcher.readContext(f):(f=L$1(b)?Ke:J$1.current,e.context=Le(a,f));f=a.updateQueue;null!==f&&(sf(a,f,c,e,d),e.state=a.memoizedState);f=b.getDerivedStateFromProps;"function"===typeof f&&(Pf(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&
    "function"!==typeof e.componentWillMount||(b=e.state,"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Uf.enqueueReplaceState(e,e.state,null),f=a.updateQueue,null!==f&&(sf(a,f,c,e,d),e.state=a.memoizedState));"function"===typeof e.componentDidMount&&(a.effectTag|=4);}var Zf=Array.isArray;
    function $f(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;var d=void 0;c&&(1!==c.tag?t$1("289"):void 0,d=c.stateNode);d?void 0:t$1("147",a);var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Of&&(b=d.refs={});null===a?delete b[e]:b[e]=a;};b._stringRef=e;return b}"string"!==typeof a?t$1("284"):void 0;c._owner?void 0:t$1("290",a);}return a}
    function ag(a,b){"textarea"!==a.type&&t$1("31","[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b,"");}
    function bg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.effectTag=8;}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b,c){a=Ze(a,b,c);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.effectTag=
    2,c):d;b.effectTag=2;return c}function g(b){a&&null===b.alternate&&(b.effectTag=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=cf(c,a.mode,d),b.return=a,b;b=e(b,c,d);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props,d),d.ref=$f(a,b,c),d.return=a,d;d=$e(c.type,c.key,c.props,null,a.mode,d);d.ref=$f(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==
    c.implementation)return b=df(c,a.mode,d),b.return=a,b;b=e(b,c.children||[],d);b.return=a;return b}function m(a,b,c,d,g){if(null===b||7!==b.tag)return b=af(c,a.mode,d,g),b.return=a,b;b=e(b,c,d);b.return=a;return b}function q(a,b,c){if("string"===typeof b||"number"===typeof b)return b=cf(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case Zb:return c=$e(b.type,b.key,b.props,null,a.mode,c),c.ref=$f(a,null,b),c.return=a,c;case $b:return b=df(b,a.mode,c),b.return=a,b}if(Zf(b)||
    lc(b))return b=af(b,a.mode,c,null),b.return=a,b;ag(a,b);}return null}function x(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case Zb:return c.key===e?c.type===ac?m(a,b,c.props.children,d,e):k(a,b,c,d):null;case $b:return c.key===e?l(a,b,c,d):null}if(Zf(c)||lc(c))return null!==e?null:m(a,b,c,d,null);ag(a,c);}return null}function z(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=
    a.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case Zb:return a=a.get(null===d.key?c:d.key)||null,d.type===ac?m(b,a,d.props.children,e,d.key):k(b,a,d,e);case $b:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Zf(d)||lc(d))return a=a.get(c)||null,m(b,a,d,e,null);ag(b,d);}return null}function B(e,g,h,k){for(var l=null,r=null,m=g,u=g=0,p=null;null!==m&&u<h.length;u++){m.index>u?(p=m,m=null):p=m.sibling;var v=x(e,m,h[u],k);if(null===v){null===m&&(m=p);break}a&&
    m&&null===v.alternate&&b(e,m);g=f(v,g,u);null===r?l=v:r.sibling=v;r=v;m=p;}if(u===h.length)return c(e,m),l;if(null===m){for(;u<h.length;u++)if(m=q(e,h[u],k))g=f(m,g,u),null===r?l=m:r.sibling=m,r=m;return l}for(m=d(e,m);u<h.length;u++)if(p=z(m,e,u,h[u],k))a&&null!==p.alternate&&m.delete(null===p.key?u:p.key),g=f(p,g,u),null===r?l=p:r.sibling=p,r=p;a&&m.forEach(function(a){return b(e,a)});return l}function Q(e,g,h,k){var l=lc(h);"function"!==typeof l?t$1("150"):void 0;h=l.call(h);null==h?t$1("151"):void 0;
    for(var m=l=null,r=g,u=g=0,p=null,v=h.next();null!==r&&!v.done;u++,v=h.next()){r.index>u?(p=r,r=null):p=r.sibling;var y=x(e,r,v.value,k);if(null===y){r||(r=p);break}a&&r&&null===y.alternate&&b(e,r);g=f(y,g,u);null===m?l=y:m.sibling=y;m=y;r=p;}if(v.done)return c(e,r),l;if(null===r){for(;!v.done;u++,v=h.next())v=q(e,v.value,k),null!==v&&(g=f(v,g,u),null===m?l=v:m.sibling=v,m=v);return l}for(r=d(e,r);!v.done;u++,v=h.next())v=z(r,e,u,v.value,k),null!==v&&(a&&null!==v.alternate&&r.delete(null===v.key?u:
    v.key),g=f(v,g,u),null===m?l=v:m.sibling=v,m=v);a&&r.forEach(function(a){return b(e,a)});return l}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===ac&&null===f.key;k&&(f=f.props.children);var l="object"===typeof f&&null!==f;if(l)switch(f.$$typeof){case Zb:a:{l=f.key;for(k=d;null!==k;){if(k.key===l)if(7===k.tag?f.type===ac:k.elementType===f.type){c(a,k.sibling);d=e(k,f.type===ac?f.props.children:f.props,h);d.ref=$f(a,k,f);d.return=a;a=d;break a}else{c(a,k);break}else b(a,k);k=
    k.sibling;}f.type===ac?(d=af(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=$e(f.type,f.key,f.props,null,a.mode,h),h.ref=$f(a,d,f),h.return=a,a=h);}return g(a);case $b:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[],h);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling;}d=df(f,a.mode,h);d.return=a;a=d;}return g(a)}if("string"===typeof f||"number"===typeof f)return f=
    ""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f,h),d.return=a,a=d):(c(a,d),d=cf(f,a.mode,h),d.return=a,a=d),g(a);if(Zf(f))return B(a,d,f,h);if(lc(f))return Q(a,d,f,h);l&&ag(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 1:case 0:h=a.type,t$1("152",h.displayName||h.name||"Component");}return c(a,d)}}var cg=bg(!0),dg=bg(!1),eg=null,fg=null,gg=!1;
    function hg(a,b){var c=M$1(5,null,null,0);c.elementType="DELETED";c.type="DELETED";c.stateNode=b;c.return=a;c.effectTag=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c;}function ig(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;default:return !1}}
    function jg(a){if(gg){var b=fg;if(b){var c=b;if(!ig(a,b)){b=Fe(c);if(!b||!ig(a,b)){a.effectTag|=2;gg=!1;eg=a;return}hg(eg,c);}eg=a;fg=Ge(b);}else a.effectTag|=2,gg=!1,eg=a;}}function kg(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag;)a=a.return;eg=a;}function lg(a){if(a!==eg)return !1;if(!gg)return kg(a),gg=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==b&&!Ce(b,a.memoizedProps))for(b=fg;b;)hg(a,b),b=Fe(b);kg(a);fg=eg?Fe(a.stateNode):null;return !0}function mg(){fg=eg=null;gg=!1;}var ng=Xb.ReactCurrentOwner;
    function P$1(a,b,c,d){b.child=null===a?dg(b,null,c,d):cg(b,a.child,c,d);}function og(a,b,c,d,e){c=c.render;var f=b.ref;Cf(b,e);d=c(d,f);b.effectTag|=1;P$1(a,b,d,e);return b.child}
    function pg(a,b,c,d,e,f){if(null===a){var g=c.type;if("function"===typeof g&&!Xe(g)&&void 0===g.defaultProps&&null===c.compare)return b.tag=15,b.type=g,qg(a,b,g,d,e,f);a=$e(c.type,null,d,null,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(e<f&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:jd,c(e,d)&&a.ref===b.ref))return rg(a,b,f);b.effectTag|=1;a=Ze(g,d,f);a.ref=b.ref;a.return=b;return b.child=a}
    function qg(a,b,c,d,e,f){return null!==a&&e<f&&jd(a.memoizedProps,d)&&a.ref===b.ref?rg(a,b,f):sg(a,b,c,d,f)}function tg(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.effectTag|=128;}function sg(a,b,c,d,e){var f=L$1(c)?Ke:J$1.current;f=Le(b,f);Cf(b,e);c=c(d,f);b.effectTag|=1;P$1(a,b,c,e);return b.child}
    function ug(a,b,c,d,e){if(L$1(c)){var f=!0;Qe(b);}else f=!1;Cf(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),Wf(b,c,d,e),Yf(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=Nf.currentDispatcher.readContext(l):(l=L$1(c)?Ke:J$1.current,l=Le(b,l));var m=c.getDerivedStateFromProps,q="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate;q||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&
    "function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Xf(b,g,d,l);jf=!1;var x=b.memoizedState;k=g.state=x;var z=b.updateQueue;null!==z&&(sf(b,z,d,g,e),k=b.memoizedState);h!==d||x!==k||K$1.current||jf?("function"===typeof m&&(Pf(b,c,m,d),k=b.memoizedState),(h=jf||Vf(b,c,h,d,x,k,l))?(q||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&
    g.UNSAFE_componentWillMount()),"function"===typeof g.componentDidMount&&(b.effectTag|=4)):("function"===typeof g.componentDidMount&&(b.effectTag|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.effectTag|=4),d=!1);}else g=b.stateNode,h=b.memoizedProps,g.props=b.type===b.elementType?h:O$1(b.type,h),k=g.context,l=c.contextType,"object"===typeof l&&null!==l?l=Nf.currentDispatcher.readContext(l):(l=L$1(c)?Ke:J$1.current,l=Le(b,l)),m=c.getDerivedStateFromProps,
    (q="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate)||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Xf(b,g,d,l),jf=!1,k=b.memoizedState,x=g.state=k,z=b.updateQueue,null!==z&&(sf(b,z,d,g,e),x=b.memoizedState),h!==d||k!==x||K$1.current||jf?("function"===typeof m&&(Pf(b,c,m,d),x=b.memoizedState),(m=jf||Vf(b,c,h,d,k,x,l))?(q||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||
    ("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,x,l),"function"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,x,l)),"function"===typeof g.componentDidUpdate&&(b.effectTag|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.effectTag|=256)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),b.memoizedProps=
    d,b.memoizedState=x),g.props=d,g.state=x,g.context=l,d=m):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),d=!1);return vg(a,b,c,d,f,e)}
    function vg(a,b,c,d,e,f){tg(a,b);var g=0!==(b.effectTag&64);if(!d&&!g)return e&&Re(b,c,!1),rg(a,b,f);d=b.stateNode;ng.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.effectTag|=1;null!==a&&g?(b.child=cg(b,a.child,null,f),b.child=cg(b,null,h,f)):P$1(a,b,h,f);b.memoizedState=d.state;e&&Re(b,c,!0);return b.child}function wg(a){var b=a.stateNode;b.pendingContext?Oe(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Oe(a,b.context,!1);If(a,b.containerInfo);}
    function xg(a,b,c){var d=b.mode,e=b.pendingProps,f=b.memoizedState;if(0===(b.effectTag&64)){f=null;var g=!1;}else f={timedOutAt:null!==f?f.timedOutAt:0},g=!0,b.effectTag&=-65;null===a?g?(g=e.fallback,e=af(null,d,0,null),0===(b.mode&1)&&(e.child=null!==b.memoizedState?b.child.child:b.child),d=af(g,d,c,null),e.sibling=d,c=e,c.return=d.return=b):c=d=dg(b,null,e.children,c):null!==a.memoizedState?(d=a.child,a=d.sibling,g?(c=e.fallback,e=Ze(d,d.pendingProps,0),0===(b.mode&1)&&(g=null!==b.memoizedState?
    b.child.child:b.child,g!==d.child&&(e.child=g)),d=e.sibling=Ze(a,c,a.expirationTime),c=e,e.childExpirationTime=0,c.return=d.return=b):c=d=cg(b,d.child,e.children,c)):(a=a.child,g?(g=e.fallback,e=af(null,d,0,null),e.child=a,0===(b.mode&1)&&(e.child=null!==b.memoizedState?b.child.child:b.child),d=e.sibling=af(g,d,c,null),d.effectTag|=2,c=e,e.childExpirationTime=0,c.return=d.return=b):d=c=cg(b,a,e.children,c));b.memoizedState=f;b.child=c;return d}
    function rg(a,b,c){null!==a&&(b.firstContextDependency=a.firstContextDependency);if(b.childExpirationTime<c)return null;null!==a&&b.child!==a.child?t$1("153"):void 0;if(null!==b.child){a=b.child;c=Ze(a,a.pendingProps,a.expirationTime);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Ze(a,a.pendingProps,a.expirationTime),c.return=b;c.sibling=null;}return b.child}
    function yg(a,b,c){var d=b.expirationTime;if(null!==a&&a.memoizedProps===b.pendingProps&&!K$1.current&&d<c){switch(b.tag){case 3:wg(b);mg();break;case 5:Kf(b);break;case 1:L$1(b.type)&&Qe(b);break;case 4:If(b,b.stateNode.containerInfo);break;case 10:Af(b,b.memoizedProps.value);break;case 13:if(null!==b.memoizedState){d=b.child.childExpirationTime;if(0!==d&&d>=c)return xg(a,b,c);b=rg(a,b,c);return null!==b?b.sibling:null}}return rg(a,b,c)}b.expirationTime=0;switch(b.tag){case 2:d=b.elementType;null!==
    a&&(a.alternate=null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;var e=Le(b,J$1.current);Cf(b,c);e=d(a,e);b.effectTag|=1;if("object"===typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof){b.tag=1;if(L$1(d)){var f=!0;Qe(b);}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;var g=d.getDerivedStateFromProps;"function"===typeof g&&Pf(b,d,g,a);e.updater=Uf;b.stateNode=e;e._reactInternalFiber=b;Yf(b,d,a,c);b=vg(null,b,d,!0,f,c);}else b.tag=0,P$1(null,b,e,c),b=b.child;
    return b;case 16:e=b.elementType;null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2);f=b.pendingProps;a=Mf(e);b.type=a;e=b.tag=Ye(a);f=O$1(a,f);g=void 0;switch(e){case 0:g=sg(null,b,a,f,c);break;case 1:g=ug(null,b,a,f,c);break;case 11:g=og(null,b,a,f,c);break;case 14:g=pg(null,b,a,O$1(a.type,f),d,c);break;default:t$1("283",a);}return g;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:O$1(d,e),sg(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:O$1(d,e),ug(a,b,d,
    e,c);case 3:wg(b);d=b.updateQueue;null===d?t$1("282"):void 0;e=b.memoizedState;e=null!==e?e.element:null;sf(b,d,b.pendingProps,null,c);d=b.memoizedState.element;if(d===e)mg(),b=rg(a,b,c);else{e=b.stateNode;if(e=(null===a||null===a.child)&&e.hydrate)fg=Ge(b.stateNode.containerInfo),eg=b,e=gg=!0;e?(b.effectTag|=2,b.child=dg(b,null,d,c)):(P$1(a,b,d,c),mg());b=b.child;}return b;case 5:return Kf(b),null===a&&jg(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,Ce(d,e)?g=null:null!==
    f&&Ce(d,f)&&(b.effectTag|=16),tg(a,b),1!==c&&b.mode&1&&e.hidden?(b.expirationTime=1,b=null):(P$1(a,b,g,c),b=b.child),b;case 6:return null===a&&jg(b),null;case 13:return xg(a,b,c);case 4:return If(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=cg(b,null,d,c):P$1(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:O$1(d,e),og(a,b,d,e,c);case 7:return P$1(a,b,b.pendingProps,c),b.child;case 8:return P$1(a,b,b.pendingProps.children,c),b.child;case 12:return P$1(a,b,b.pendingProps.children,
    c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;Af(b,f);if(null!==g){var h=g.value;f=h===f&&(0!==h||1/h===1/f)||h!==h&&f!==f?0:("function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0;if(0===f){if(g.children===e.children&&!K$1.current){b=rg(a,b,c);break a}}else for(g=b.child,null!==g&&(g.return=b);null!==g;){h=g.firstContextDependency;if(null!==h){do{if(h.context===d&&0!==(h.observedBits&f)){if(1===g.tag){var k=mf(c);k.tag=2;of(g,k);}g.expirationTime<
    c&&(g.expirationTime=c);k=g.alternate;null!==k&&k.expirationTime<c&&(k.expirationTime=c);for(var l=g.return;null!==l;){k=l.alternate;if(l.childExpirationTime<c)l.childExpirationTime=c,null!==k&&k.childExpirationTime<c&&(k.childExpirationTime=c);else if(null!==k&&k.childExpirationTime<c)k.childExpirationTime=c;else break;l=l.return;}}k=g.child;h=h.next;}while(null!==h)}else k=10===g.tag?g.type===b.type?null:g.child:g.child;if(null!==k)k.return=g;else for(k=g;null!==k;){if(k===b){k=null;break}g=k.sibling;
    if(null!==g){g.return=k.return;k=g;break}k=k.return;}g=k;}}P$1(a,b,e.children,c);b=b.child;}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,Cf(b,c),e=Df(e,f.unstable_observedBits),d=d(e),b.effectTag|=1,P$1(a,b,d,c),b.child;case 14:return e=b.type,f=O$1(e.type,b.pendingProps),pg(a,b,e,f,d,c);case 15:return qg(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:O$1(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),b.tag=1,L$1(d)?(a=!0,Qe(b)):
    a=!1,Cf(b,c),Wf(b,d,e,c),Yf(b,d,e,c),vg(null,b,d,!0,a,c);default:t$1("156");}}function zg(a){a.effectTag|=4;}var Ag=void 0,Bg=void 0,Fg=void 0,Gg=void 0;Ag=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;}c.sibling.return=c.return;c=c.sibling;}};Bg=function(){};
    Fg=function(a,b,c,d,e){var f=a.memoizedProps;if(f!==d){var g=b.stateNode;Hf(N$1.current);a=null;switch(c){case "input":f=Ac(g,f);d=Ac(g,d);a=[];break;case "option":f=ee(g,f);d=ee(g,d);a=[];break;case "select":f=objectAssign({},f,{value:void 0});d=objectAssign({},d,{value:void 0});a=[];break;case "textarea":f=ge(g,f);d=ge(g,d);a=[];break;default:"function"!==typeof f.onClick&&"function"===typeof d.onClick&&(g.onclick=ye);}ve(c,d);g=c=void 0;var h=null;for(c in f)if(!d.hasOwnProperty(c)&&f.hasOwnProperty(c)&&null!=f[c])if("style"===
    c){var k=f[c];for(g in k)k.hasOwnProperty(g)&&(h||(h={}),h[g]="");}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(sa.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in d){var l=d[c];k=null!=f?f[c]:void 0;if(d.hasOwnProperty(c)&&l!==k&&(null!=l||null!=k))if("style"===c)if(k){for(g in k)!k.hasOwnProperty(g)||l&&l.hasOwnProperty(g)||(h||(h={}),h[g]="");for(g in l)l.hasOwnProperty(g)&&k[g]!==l[g]&&(h||
    (h={}),h[g]=l[g]);}else h||(a||(a=[]),a.push(c,h)),h=l;else"dangerouslySetInnerHTML"===c?(l=l?l.__html:void 0,k=k?k.__html:void 0,null!=l&&k!==l&&(a=a||[]).push(c,""+l)):"children"===c?k===l||"string"!==typeof l&&"number"!==typeof l||(a=a||[]).push(c,""+l):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(sa.hasOwnProperty(c)?(null!=l&&xe(e,c),a||k===l||(a=[])):(a=a||[]).push(c,l));}h&&(a=a||[]).push("style",h);e=a;(b.updateQueue=e)&&zg(b);}};Gg=function(a,b,c,d){c!==d&&zg(b);};
    function Hg(a,b){var c=b.source,d=b.stack;null===d&&null!==c&&(d=nc(c));null!==c&&mc(c.type);b=b.value;null!==a&&1===a.tag&&mc(a.type);try{console.error(b);}catch(e){setTimeout(function(){throw e;});}}function Ig(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null);}catch(c){Jg(a,c);}else b.current=null;}
    function Kg(a){"function"===typeof Te&&Te(a);switch(a.tag){case 0:case 11:case 14:case 15:var b=a.updateQueue;if(null!==b&&(b=b.lastEffect,null!==b)){var c=b=b.next;do{var d=c.destroy;if(null!==d){var e=a;try{d();}catch(f){Jg(e,f);}}c=c.next;}while(c!==b)}break;case 1:Ig(a);b=a.stateNode;if("function"===typeof b.componentWillUnmount)try{b.props=a.memoizedProps,b.state=a.memoizedState,b.componentWillUnmount();}catch(f){Jg(a,f);}break;case 5:Ig(a);break;case 4:Lg(a);}}
    function Mg(a){return 5===a.tag||3===a.tag||4===a.tag}
    function Ng(a){a:{for(var b=a.return;null!==b;){if(Mg(b)){var c=b;break a}b=b.return;}t$1("160");c=void 0;}var d=b=void 0;switch(c.tag){case 5:b=c.stateNode;d=!1;break;case 3:b=c.stateNode.containerInfo;d=!0;break;case 4:b=c.stateNode.containerInfo;d=!0;break;default:t$1("161");}c.effectTag&16&&(pe(b,""),c.effectTag&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||Mg(c.return)){c=null;break a}c=c.return;}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag;){if(c.effectTag&2)continue b;
    if(null===c.child||4===c.tag)continue b;else c.child.return=c,c=c.child;}if(!(c.effectTag&2)){c=c.stateNode;break a}}for(var e=a;;){if(5===e.tag||6===e.tag)if(c)if(d){var f=b,g=e.stateNode,h=c;8===f.nodeType?f.parentNode.insertBefore(g,h):f.insertBefore(g,h);}else b.insertBefore(e.stateNode,c);else d?(g=b,h=e.stateNode,8===g.nodeType?(f=g.parentNode,f.insertBefore(h,g)):(f=g,f.appendChild(h)),g=g._reactRootContainer,null!==g&&void 0!==g||null!==f.onclick||(f.onclick=ye)):b.appendChild(e.stateNode);
    else if(4!==e.tag&&null!==e.child){e.child.return=e;e=e.child;continue}if(e===a)break;for(;null===e.sibling;){if(null===e.return||e.return===a)return;e=e.return;}e.sibling.return=e.return;e=e.sibling;}}
    function Lg(a){for(var b=a,c=!1,d=void 0,e=void 0;;){if(!c){c=b.return;a:for(;;){null===c?t$1("160"):void 0;switch(c.tag){case 5:d=c.stateNode;e=!1;break a;case 3:d=c.stateNode.containerInfo;e=!0;break a;case 4:d=c.stateNode.containerInfo;e=!0;break a}c=c.return;}c=!0;}if(5===b.tag||6===b.tag){a:for(var f=b,g=f;;)if(Kg(g),null!==g.child&&4!==g.tag)g.child.return=g,g=g.child;else{if(g===f)break;for(;null===g.sibling;){if(null===g.return||g.return===f)break a;g=g.return;}g.sibling.return=g.return;g=g.sibling;}e?
    (f=d,g=b.stateNode,8===f.nodeType?f.parentNode.removeChild(g):f.removeChild(g)):d.removeChild(b.stateNode);}else if(4===b.tag?(d=b.stateNode.containerInfo,e=!0):Kg(b),null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return;b=b.return;4===b.tag&&(c=!1);}b.sibling.return=b.return;b=b.sibling;}}
    function Og(a,b){switch(b.tag){case 0:case 11:case 14:case 15:break;case 1:break;case 5:var c=b.stateNode;if(null!=c){var d=b.memoizedProps,e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[Ha]=d;"input"===a&&"radio"===d.type&&null!=d.name&&Cc(c,d);we(a,e);b=we(a,d);for(e=0;e<f.length;e+=2){var g=f[e],h=f[e+1];"style"===g?te(c,h):"dangerouslySetInnerHTML"===g?oe(c,h):"children"===g?pe(c,h):yc(c,g,h,b);}switch(a){case "input":Dc(c,d);break;case "textarea":ie(c,
    d);break;case "select":b=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,a=d.value,null!=a?fe(c,!!d.multiple,a,!1):b!==!!d.multiple&&(null!=d.defaultValue?fe(c,!!d.multiple,d.defaultValue,!0):fe(c,!!d.multiple,d.multiple?[]:"",!1));}}}break;case 6:null===b.stateNode?t$1("162"):void 0;b.stateNode.nodeValue=b.memoizedProps;break;case 3:break;case 12:break;case 13:c=b.memoizedState;a=b;null===c?d=!1:(d=!0,a=b.child,0===c.timedOutAt&&(c.timedOutAt=Qf()));if(null!==a)a:for(b=c=a;;){if(5===
    b.tag)a=b.stateNode,d?a.style.display="none":(a=b.stateNode,f=b.memoizedProps.style,f=void 0!==f&&null!==f&&f.hasOwnProperty("display")?f.display:null,a.style.display=se("display",f));else if(6===b.tag)b.stateNode.nodeValue=d?"":b.memoizedProps;else if(13===b.tag&&null!==b.memoizedState){a=b.child.sibling;a.return=b;b=a;continue}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===c)break a;for(;null===b.sibling;){if(null===b.return||b.return===c)break a;b=b.return;}b.sibling.return=
    b.return;b=b.sibling;}break;case 17:break;default:t$1("163");}}function Pg(a,b,c){c=mf(c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Qg(d);Hg(a,b);};return c}
    function Rg(a,b,c){c=mf(c);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){return d(e)};}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){"function"!==typeof d&&(null===Sg?Sg=new Set([this]):Sg.add(this));var c=b.value,e=b.stack;Hg(a,b);this.componentDidCatch(c,{componentStack:null!==e?e:""});});return c}
    function Tg(a){switch(a.tag){case 1:L$1(a.type)&&Me(a);var b=a.effectTag;return b&2048?(a.effectTag=b&-2049|64,a):null;case 3:return Jf(a),Ne(a),b=a.effectTag,0!==(b&64)?t$1("285"):void 0,a.effectTag=b&-2049|64,a;case 5:return Lf(a),null;case 13:return b=a.effectTag,b&2048?(a.effectTag=b&-2049|64,a):null;case 4:return Jf(a),null;case 10:return Bf(a),null;default:return null}}
    var Ug={readContext:Df},Vg=Xb.ReactCurrentOwner,Xg=0,Yg=!1,R$1=null,S$1=null,T$1=0,Zg=-1,$g=!1,U$1=null,ah=!1,Sg=null;function dh(){if(null!==R$1)for(var a=R$1.return;null!==a;){var b=a;switch(b.tag){case 1:var c=b.type.childContextTypes;null!==c&&void 0!==c&&Me(b);break;case 3:Jf(b);Ne(b);break;case 5:Lf(b);break;case 4:Jf(b);break;case 10:Bf(b);}a=a.return;}S$1=null;T$1=0;Zg=-1;$g=!1;R$1=null;}function eh(a){for(;;){var b=a.alternate,c=a.return,d=a.sibling;if(0===(a.effectTag&1024)){R$1=a;a:{var e=b;b=a;var f=T$1;var g=b.pendingProps;switch(b.tag){case 2:break;case 16:break;case 15:case 0:break;case 1:L$1(b.type)&&Me(b);break;case 3:Jf(b);Ne(b);g=b.stateNode;g.pendingContext&&(g.context=g.pendingContext,g.pendingContext=null);if(null===e||null===e.child)lg(b),b.effectTag&=-3;Bg(b);break;case 5:Lf(b);var h=Hf(Gf.current);f=b.type;if(null!==e&&null!=b.stateNode)Fg(e,b,f,g,h),e.ref!==b.ref&&(b.effectTag|=
    128);else if(g){var k=Hf(N$1.current);if(lg(b)){g=b;e=g.stateNode;var l=g.type,m=g.memoizedProps,q=h;e[Ga]=g;e[Ha]=m;f=void 0;h=l;switch(h){case "iframe":case "object":G$1("load",e);break;case "video":case "audio":for(l=0;l<bb.length;l++)G$1(bb[l],e);break;case "source":G$1("error",e);break;case "img":case "image":case "link":G$1("error",e);G$1("load",e);break;case "form":G$1("reset",e);G$1("submit",e);break;case "details":G$1("toggle",e);break;case "input":Bc(e,m);G$1("invalid",e);xe(q,"onChange");break;case "select":e._wrapperState=
    {wasMultiple:!!m.multiple};G$1("invalid",e);xe(q,"onChange");break;case "textarea":he(e,m),G$1("invalid",e),xe(q,"onChange");}ve(h,m);l=null;for(f in m)m.hasOwnProperty(f)&&(k=m[f],"children"===f?"string"===typeof k?e.textContent!==k&&(l=["children",k]):"number"===typeof k&&e.textContent!==""+k&&(l=["children",""+k]):sa.hasOwnProperty(f)&&null!=k&&xe(q,f));switch(h){case "input":Vb(e);Fc(e,m,!0);break;case "textarea":Vb(e);je(e,m);break;case "select":case "option":break;default:"function"===typeof m.onClick&&
    (e.onclick=ye);}f=l;g.updateQueue=f;g=null!==f?!0:!1;g&&zg(b);}else{m=b;e=f;q=g;l=9===h.nodeType?h:h.ownerDocument;k===ke.html&&(k=le(e));k===ke.html?"script"===e?(e=l.createElement("div"),e.innerHTML="<script>\x3c/script>",l=e.removeChild(e.firstChild)):"string"===typeof q.is?l=l.createElement(e,{is:q.is}):(l=l.createElement(e),"select"===e&&q.multiple&&(l.multiple=!0)):l=l.createElementNS(k,e);e=l;e[Ga]=m;e[Ha]=g;Ag(e,b,!1,!1);q=e;l=f;m=g;var x=h,z=we(l,m);switch(l){case "iframe":case "object":G$1("load",
    q);h=m;break;case "video":case "audio":for(h=0;h<bb.length;h++)G$1(bb[h],q);h=m;break;case "source":G$1("error",q);h=m;break;case "img":case "image":case "link":G$1("error",q);G$1("load",q);h=m;break;case "form":G$1("reset",q);G$1("submit",q);h=m;break;case "details":G$1("toggle",q);h=m;break;case "input":Bc(q,m);h=Ac(q,m);G$1("invalid",q);xe(x,"onChange");break;case "option":h=ee(q,m);break;case "select":q._wrapperState={wasMultiple:!!m.multiple};h=objectAssign({},m,{value:void 0});G$1("invalid",q);xe(x,"onChange");break;case "textarea":he(q,
    m);h=ge(q,m);G$1("invalid",q);xe(x,"onChange");break;default:h=m;}ve(l,h);k=void 0;var B=l,Q=q,v=h;for(k in v)if(v.hasOwnProperty(k)){var r=v[k];"style"===k?te(Q,r):"dangerouslySetInnerHTML"===k?(r=r?r.__html:void 0,null!=r&&oe(Q,r)):"children"===k?"string"===typeof r?("textarea"!==B||""!==r)&&pe(Q,r):"number"===typeof r&&pe(Q,""+r):"suppressContentEditableWarning"!==k&&"suppressHydrationWarning"!==k&&"autoFocus"!==k&&(sa.hasOwnProperty(k)?null!=r&&xe(x,k):null!=r&&yc(Q,k,r,z));}switch(l){case "input":Vb(q);
    Fc(q,m,!1);break;case "textarea":Vb(q);je(q,m);break;case "option":null!=m.value&&q.setAttribute("value",""+zc(m.value));break;case "select":h=q;h.multiple=!!m.multiple;q=m.value;null!=q?fe(h,!!m.multiple,q,!1):null!=m.defaultValue&&fe(h,!!m.multiple,m.defaultValue,!0);break;default:"function"===typeof h.onClick&&(q.onclick=ye);}(g=Be(f,g))&&zg(b);b.stateNode=e;}null!==b.ref&&(b.effectTag|=128);}else null===b.stateNode?t$1("166"):void 0;break;case 6:e&&null!=b.stateNode?Gg(e,b,e.memoizedProps,g):("string"!==
    typeof g&&(null===b.stateNode?t$1("166"):void 0),e=Hf(Gf.current),Hf(N$1.current),lg(b)?(g=b,f=g.stateNode,e=g.memoizedProps,f[Ga]=g,(g=f.nodeValue!==e)&&zg(b)):(f=b,g=(9===e.nodeType?e:e.ownerDocument).createTextNode(g),g[Ga]=b,f.stateNode=g));break;case 11:break;case 13:g=b.memoizedState;if(0!==(b.effectTag&64)){b.expirationTime=f;R$1=b;break a}g=null!==g;f=null!==e&&null!==e.memoizedState;null!==e&&!g&&f&&(e=e.child.sibling,null!==e&&(h=b.firstEffect,null!==h?(b.firstEffect=e,e.nextEffect=h):(b.firstEffect=
    b.lastEffect=e,e.nextEffect=null),e.effectTag=8));if(g!==f||0===(b.effectTag&1)&&g)b.effectTag|=4;break;case 7:break;case 8:break;case 12:break;case 4:Jf(b);Bg(b);break;case 10:Bf(b);break;case 9:break;case 14:break;case 17:L$1(b.type)&&Me(b);break;default:t$1("156");}R$1=null;}b=a;if(1===T$1||1!==b.childExpirationTime){g=0;for(f=b.child;null!==f;)e=f.expirationTime,h=f.childExpirationTime,e>g&&(g=e),h>g&&(g=h),f=f.sibling;b.childExpirationTime=g;}if(null!==R$1)return R$1;null!==c&&0===(c.effectTag&1024)&&(null===
    c.firstEffect&&(c.firstEffect=a.firstEffect),null!==a.lastEffect&&(null!==c.lastEffect&&(c.lastEffect.nextEffect=a.firstEffect),c.lastEffect=a.lastEffect),1<a.effectTag&&(null!==c.lastEffect?c.lastEffect.nextEffect=a:c.firstEffect=a,c.lastEffect=a));}else{a=Tg(a,T$1);if(null!==a)return a.effectTag&=1023,a;null!==c&&(c.firstEffect=c.lastEffect=null,c.effectTag|=1024);}if(null!==d)return d;if(null!==c)a=c;else break}return null}
    function fh(a){var b=yg(a.alternate,a,T$1);a.memoizedProps=a.pendingProps;null===b&&(b=eh(a));Vg.current=null;return b}
    function gh(a,b){Yg?t$1("243"):void 0;Yg=!0;Vg.currentDispatcher=Ug;var c=a.nextExpirationTimeToWorkOn;if(c!==T$1||a!==S$1||null===R$1)dh(),S$1=a,T$1=c,R$1=Ze(S$1.current,null,T$1),a.pendingCommitExpirationTime=0;var d=!1;do{try{if(b)for(;null!==R$1&&!hh();)R$1=fh(R$1);else for(;null!==R$1;)R$1=fh(R$1);}catch(B){if(zf=yf=xf=null,null===R$1)d=!0,Qg(B);else{null===R$1?t$1("271"):void 0;var e=R$1,f=e.return;if(null===f)d=!0,Qg(B);else{a:{var g=a,h=f,k=e,l=B;f=T$1;k.effectTag|=1024;k.firstEffect=k.lastEffect=null;if(null!==l&&"object"===
    typeof l&&"function"===typeof l.then){var m=l;l=h;var q=-1,x=-1;do{if(13===l.tag){var z=l.alternate;if(null!==z&&(z=z.memoizedState,null!==z)){x=10*(1073741822-z.timedOutAt);break}z=l.pendingProps.maxDuration;if("number"===typeof z)if(0>=z)q=0;else if(-1===q||z<q)q=z;}l=l.return;}while(null!==l);l=h;do{if(z=13===l.tag)z=void 0===l.memoizedProps.fallback?!1:null===l.memoizedState;if(z){h=ih.bind(null,g,l,k,0===(l.mode&1)?1073741823:f);m.then(h,h);if(0===(l.mode&1)){l.effectTag|=64;k.effectTag&=-1957;
    1===k.tag&&null===k.alternate&&(k.tag=17);k.expirationTime=f;break a}-1===q?g=1073741823:(-1===x&&(x=10*(1073741822-hf(g,f))-5E3),g=x+q);0<=g&&Zg<g&&(Zg=g);l.effectTag|=2048;l.expirationTime=f;break a}l=l.return;}while(null!==l);l=Error((mc(k.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+nc(k));}$g=!0;l=vf(l,k);g=h;do{switch(g.tag){case 3:k=
    l;g.effectTag|=2048;g.expirationTime=f;f=Pg(g,k,f);pf(g,f);break a;case 1:if(k=l,h=g.type,m=g.stateNode,0===(g.effectTag&64)&&("function"===typeof h.getDerivedStateFromError||null!==m&&"function"===typeof m.componentDidCatch&&(null===Sg||!Sg.has(m)))){g.effectTag|=2048;g.expirationTime=f;f=Rg(g,k,f);pf(g,f);break a}}g=g.return;}while(null!==g)}R$1=eh(e);continue}}}break}while(1);Yg=!1;zf=yf=xf=Vg.currentDispatcher=null;if(d)S$1=null,a.finishedWork=null;else if(null!==R$1)a.finishedWork=null;else{d=a.current.alternate;
    null===d?t$1("281"):void 0;S$1=null;if($g){e=a.latestPendingTime;f=a.latestSuspendedTime;g=a.latestPingedTime;if(0!==e&&e<c||0!==f&&f<c||0!==g&&g<c){gf(a,c);jh(a,d,c,a.expirationTime,-1);return}if(!a.didError&&b){a.didError=!0;c=a.nextExpirationTimeToWorkOn=c;b=a.expirationTime=1073741823;jh(a,d,c,b,-1);return}}b&&-1!==Zg?(gf(a,c),b=10*(1073741822-hf(a,c)),b<Zg&&(Zg=b),b=10*(1073741822-Qf()),b=Zg-b,jh(a,d,c,a.expirationTime,0>b?0:b)):(a.pendingCommitExpirationTime=c,a.finishedWork=d);}}
    function Jg(a,b){for(var c=a.return;null!==c;){switch(c.tag){case 1:var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===Sg||!Sg.has(d))){a=vf(b,a);a=Rg(c,a,1073741823);of(c,a);Tf(c,1073741823);return}break;case 3:a=vf(b,a);a=Pg(c,a,1073741823);of(c,a);Tf(c,1073741823);return}c=c.return;}3===a.tag&&(c=vf(b,a),c=Pg(a,c,1073741823),of(a,c),Tf(a,1073741823));}
    function Rf(a,b){0!==Xg?a=Xg:Yg?a=ah?1073741823:T$1:b.mode&1?(a=kh?1073741822-10*(((1073741822-a+15)/10|0)+1):1073741822-25*(((1073741822-a+500)/25|0)+1),null!==S$1&&a===T$1&&--a):a=1073741823;kh&&(0===lh||a<lh)&&(lh=a);return a}
    function ih(a,b,c,d){var e=a.earliestSuspendedTime;var f=a.latestSuspendedTime;if(0!==e&&d<=e&&d>=f){f=e=d;a.didError=!1;var g=a.latestPingedTime;if(0===g||g>f)a.latestPingedTime=f;ff(f,a);}else e=Qf(),e=Rf(e,b),ef(a,e);0!==(b.mode&1)&&a===S$1&&T$1===d&&(S$1=null);mh(b,e);0===(b.mode&1)&&(mh(c,e),1===c.tag&&null!==c.stateNode&&(b=mf(e),b.tag=2,of(c,b)));c=a.expirationTime;0!==c&&nh(a,c);}
    function mh(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);var d=a.return,e=null;if(null===d&&3===a.tag)e=a.stateNode;else for(;null!==d;){c=d.alternate;d.childExpirationTime<b&&(d.childExpirationTime=b);null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);if(null===d.return&&3===d.tag){e=d.stateNode;break}d=d.return;}return e}
    function Tf(a,b){a=mh(a,b);null!==a&&(!Yg&&0!==T$1&&b>T$1&&dh(),ef(a,b),Yg&&!ah&&S$1===a||nh(a,a.expirationTime),oh>ph&&(oh=0,t$1("185")));}var rh=null,V$1=null,sh=0,th=void 0,W$1=!1,uh=null,X$1=0,lh=0,vh=!1,wh=null,Z$1=!1,xh=!1,kh=!1,yh=null,zh=scheduler.unstable_now(),Ah=1073741822-(zh/10|0),Bh=Ah,ph=50,oh=0,Ch=null;function Dh(){Ah=1073741822-((scheduler.unstable_now()-zh)/10|0);}
    function Eh(a,b){if(0!==sh){if(b<sh)return;null!==th&&scheduler.unstable_cancelCallback(th);}sh=b;a=scheduler.unstable_now()-zh;th=scheduler.unstable_scheduleCallback(Fh,{timeout:10*(1073741822-b)-a});}function jh(a,b,c,d,e){a.expirationTime=d;0!==e||hh()?0<e&&(a.timeoutHandle=De(Gh.bind(null,a,b,c),e)):(a.pendingCommitExpirationTime=c,a.finishedWork=b);}function Gh(a,b,c){a.pendingCommitExpirationTime=c;a.finishedWork=b;Dh();Bh=Ah;Hh(a,c);}function Qf(){if(W$1)return Bh;Ih();if(0===X$1||1===X$1)Dh(),Bh=Ah;return Bh}
    function nh(a,b){null===a.nextScheduledRoot?(a.expirationTime=b,null===V$1?(rh=V$1=a,a.nextScheduledRoot=a):(V$1=V$1.nextScheduledRoot=a,V$1.nextScheduledRoot=rh)):b>a.expirationTime&&(a.expirationTime=b);W$1||(Z$1?xh&&(uh=a,X$1=1073741823,Jh(a,1073741823,!1)):1073741823===b?Kh(1073741823,!1):Eh(a,b));}
    function Ih(){var a=0,b=null;if(null!==V$1)for(var c=V$1,d=rh;null!==d;){var e=d.expirationTime;if(0===e){null===c||null===V$1?t$1("244"):void 0;if(d===d.nextScheduledRoot){rh=V$1=d.nextScheduledRoot=null;break}else if(d===rh)rh=e=d.nextScheduledRoot,V$1.nextScheduledRoot=e,d.nextScheduledRoot=null;else if(d===V$1){V$1=c;V$1.nextScheduledRoot=rh;d.nextScheduledRoot=null;break}else c.nextScheduledRoot=d.nextScheduledRoot,d.nextScheduledRoot=null;d=c.nextScheduledRoot;}else{e>a&&(a=e,b=d);if(d===V$1)break;if(1073741823===
    a)break;c=d;d=d.nextScheduledRoot;}}uh=b;X$1=a;}var Lh=!1;function hh(){return Lh?!0:scheduler.unstable_shouldYield()?Lh=!0:!1}function Fh(){try{if(!hh()&&null!==rh){Dh();var a=rh;do{var b=a.expirationTime;0!==b&&Ah<=b&&(a.nextExpirationTimeToWorkOn=Ah);a=a.nextScheduledRoot;}while(a!==rh)}Kh(0,!0);}finally{Lh=!1;}}
    function Kh(a,b){Ih();if(b)for(Dh(),Bh=Ah;null!==uh&&0!==X$1&&a<=X$1&&!(Lh&&Ah>X$1);)Jh(uh,X$1,Ah>X$1),Ih(),Dh(),Bh=Ah;else for(;null!==uh&&0!==X$1&&a<=X$1;)Jh(uh,X$1,!1),Ih();b&&(sh=0,th=null);0!==X$1&&Eh(uh,X$1);oh=0;Ch=null;if(null!==yh)for(a=yh,yh=null,b=0;b<a.length;b++){var c=a[b];try{c._onComplete();}catch(d){vh||(vh=!0,wh=d);}}if(vh)throw a=wh,wh=null,vh=!1,a;}function Hh(a,b){W$1?t$1("253"):void 0;uh=a;X$1=b;Jh(a,b,!1);Kh(1073741823,!1);}
    function Jh(a,b,c){W$1?t$1("245"):void 0;W$1=!0;if(c){var d=a.finishedWork;null!==d?Mh(a,d,b):(a.finishedWork=null,d=a.timeoutHandle,-1!==d&&(a.timeoutHandle=-1,Ee(d)),gh(a,c),d=a.finishedWork,null!==d&&(hh()?a.finishedWork=d:Mh(a,d,b)));}else d=a.finishedWork,null!==d?Mh(a,d,b):(a.finishedWork=null,d=a.timeoutHandle,-1!==d&&(a.timeoutHandle=-1,Ee(d)),gh(a,c),d=a.finishedWork,null!==d&&Mh(a,d,b));W$1=!1;}
    function Mh(a,b,c){var d=a.firstBatch;if(null!==d&&d._expirationTime>=c&&(null===yh?yh=[d]:yh.push(d),d._defer)){a.finishedWork=b;a.expirationTime=0;return}a.finishedWork=null;a===Ch?oh++:(Ch=a,oh=0);ah=Yg=!0;a.current===b?t$1("177"):void 0;c=a.pendingCommitExpirationTime;0===c?t$1("261"):void 0;a.pendingCommitExpirationTime=0;d=b.expirationTime;var e=b.childExpirationTime;d=e>d?e:d;a.didError=!1;0===d?(a.earliestPendingTime=0,a.latestPendingTime=0,a.earliestSuspendedTime=0,a.latestSuspendedTime=0,a.latestPingedTime=
    0):(e=a.latestPendingTime,0!==e&&(e>d?a.earliestPendingTime=a.latestPendingTime=0:a.earliestPendingTime>d&&(a.earliestPendingTime=a.latestPendingTime)),e=a.earliestSuspendedTime,0===e?ef(a,d):d<a.latestSuspendedTime?(a.earliestSuspendedTime=0,a.latestSuspendedTime=0,a.latestPingedTime=0,ef(a,d)):d>e&&ef(a,d));ff(0,a);Vg.current=null;1<b.effectTag?null!==b.lastEffect?(b.lastEffect.nextEffect=b,d=b.firstEffect):d=b:d=b.firstEffect;ze=Hd;e=Td();if(Ud(e)){if("selectionStart"in e)var f={start:e.selectionStart,
    end:e.selectionEnd};else a:{f=(f=e.ownerDocument)&&f.defaultView||window;var g=f.getSelection&&f.getSelection();if(g&&0!==g.rangeCount){f=g.anchorNode;var h=g.anchorOffset,k=g.focusNode;g=g.focusOffset;try{f.nodeType,k.nodeType;}catch(db){f=null;break a}var l=0,m=-1,q=-1,x=0,z=0,B=e,Q=null;b:for(;;){for(var v;;){B!==f||0!==h&&3!==B.nodeType||(m=l+h);B!==k||0!==g&&3!==B.nodeType||(q=l+g);3===B.nodeType&&(l+=B.nodeValue.length);if(null===(v=B.firstChild))break;Q=B;B=v;}for(;;){if(B===e)break b;Q===f&&
    ++x===h&&(m=l);Q===k&&++z===g&&(q=l);if(null!==(v=B.nextSibling))break;B=Q;Q=B.parentNode;}B=v;}f=-1===m||-1===q?null:{start:m,end:q};}else f=null;}f=f||{start:0,end:0};}else f=null;Ae={focusedElem:e,selectionRange:f};Hd=!1;for(U$1=d;null!==U$1;){e=!1;f=void 0;try{for(;null!==U$1;){if(U$1.effectTag&256)a:{var r=U$1.alternate;h=U$1;switch(h.tag){case 0:case 11:case 15:break a;case 1:if(h.effectTag&256&&null!==r){var u=r.memoizedProps,y=r.memoizedState,Y=h.stateNode,Th=Y.getSnapshotBeforeUpdate(h.elementType===h.type?
    u:O$1(h.type,u),y);Y.__reactInternalSnapshotBeforeUpdate=Th;}break a;case 3:case 5:case 6:case 4:case 17:break a;default:t$1("163");}}U$1=U$1.nextEffect;}}catch(db){e=!0,f=db;}e&&(null===U$1?t$1("178"):void 0,Jg(U$1,f),null!==U$1&&(U$1=U$1.nextEffect));}for(U$1=d;null!==U$1;){r=!1;u=void 0;try{for(;null!==U$1;){var w=U$1.effectTag;w&16&&pe(U$1.stateNode,"");if(w&128){var C=U$1.alternate;if(null!==C){var p=C.ref;null!==p&&("function"===typeof p?p(null):p.current=null);}}switch(w&14){case 2:Ng(U$1);U$1.effectTag&=-3;break;case 6:Ng(U$1);U$1.effectTag&=
    -3;Og(U$1.alternate,U$1);break;case 4:Og(U$1.alternate,U$1);break;case 8:y=U$1,Lg(y),y.return=null,y.child=null,y.alternate&&(y.alternate.child=null,y.alternate.return=null);}U$1=U$1.nextEffect;}}catch(db){r=!0,u=db;}r&&(null===U$1?t$1("178"):void 0,Jg(U$1,u),null!==U$1&&(U$1=U$1.nextEffect));}p=Ae;C=Td();w=p.focusedElem;u=p.selectionRange;if(C!==w&&w&&w.ownerDocument&&Sd(w.ownerDocument.documentElement,w)){null!==u&&Ud(w)&&(C=u.start,p=u.end,void 0===p&&(p=C),"selectionStart"in w?(w.selectionStart=C,w.selectionEnd=Math.min(p,
    w.value.length)):(p=(C=w.ownerDocument||document)&&C.defaultView||window,p.getSelection&&(p=p.getSelection(),y=w.textContent.length,r=Math.min(u.start,y),u=void 0===u.end?r:Math.min(u.end,y),!p.extend&&r>u&&(y=u,u=r,r=y),y=Rd(w,r),Y=Rd(w,u),y&&Y&&(1!==p.rangeCount||p.anchorNode!==y.node||p.anchorOffset!==y.offset||p.focusNode!==Y.node||p.focusOffset!==Y.offset)&&(C=C.createRange(),C.setStart(y.node,y.offset),p.removeAllRanges(),r>u?(p.addRange(C),p.extend(Y.node,Y.offset)):(C.setEnd(Y.node,Y.offset),
    p.addRange(C))))));C=[];for(p=w;p=p.parentNode;)1===p.nodeType&&C.push({element:p,left:p.scrollLeft,top:p.scrollTop});"function"===typeof w.focus&&w.focus();for(w=0;w<C.length;w++)p=C[w],p.element.scrollLeft=p.left,p.element.scrollTop=p.top;}Ae=null;Hd=!!ze;ze=null;a.current=b;for(U$1=d;null!==U$1;){d=!1;w=void 0;try{for(C=c;null!==U$1;){var Fb=U$1.effectTag;if(Fb&36){var Gb=U$1.alternate;p=U$1;r=C;switch(p.tag){case 0:case 11:case 15:break;case 1:var wc=p.stateNode;if(p.effectTag&4)if(null===Gb)wc.componentDidMount();
    else{var ci=p.elementType===p.type?Gb.memoizedProps:O$1(p.type,Gb.memoizedProps);wc.componentDidUpdate(ci,Gb.memoizedState,wc.__reactInternalSnapshotBeforeUpdate);}var Cg=p.updateQueue;null!==Cg&&tf(p,Cg,wc,r);break;case 3:var Dg=p.updateQueue;if(null!==Dg){u=null;if(null!==p.child)switch(p.child.tag){case 5:u=p.child.stateNode;break;case 1:u=p.child.stateNode;}tf(p,Dg,u,r);}break;case 5:var di=p.stateNode;null===Gb&&p.effectTag&4&&Be(p.type,p.memoizedProps)&&di.focus();break;case 6:break;case 4:break;
    case 12:break;case 13:break;case 17:break;default:t$1("163");}}if(Fb&128){var Ic=U$1.ref;if(null!==Ic){var Eg=U$1.stateNode;switch(U$1.tag){case 5:var ce=Eg;break;default:ce=Eg;}"function"===typeof Ic?Ic(ce):Ic.current=ce;}}U$1=U$1.nextEffect;}}catch(db){d=!0,w=db;}d&&(null===U$1?t$1("178"):void 0,Jg(U$1,w),null!==U$1&&(U$1=U$1.nextEffect));}Yg=ah=!1;"function"===typeof Se&&Se(b.stateNode);Fb=b.expirationTime;b=b.childExpirationTime;b=b>Fb?b:Fb;0===b&&(Sg=null);a.expirationTime=b;a.finishedWork=null;}
    function Qg(a){null===uh?t$1("246"):void 0;uh.expirationTime=0;vh||(vh=!0,wh=a);}function Nh(a,b){var c=Z$1;Z$1=!0;try{return a(b)}finally{(Z$1=c)||W$1||Kh(1073741823,!1);}}function Ph(a,b,c){if(kh)return a(b,c);Z$1||W$1||0===lh||(Kh(lh,!1),lh=0);var d=kh,e=Z$1;Z$1=kh=!0;try{return a(b,c)}finally{kh=d,(Z$1=e)||W$1||Kh(1073741823,!1);}}
    Cb=function(a,b,c){switch(b){case "input":Dc(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=La(d);e?void 0:t$1("90");Wb(d);Dc(d,e);}}}break;case "textarea":ie(a,c);break;case "select":b=c.value,null!=b&&fe(a,!!c.multiple,b,!1);}};
    Kb=Nh;Lb=Ph;Mb=function(){W$1||0===lh||(Kh(lh,!1),lh=0);};
    (function(a){var b=a.findFiberByHostInstance;return Ve(objectAssign({},a,{findHostInstanceByFiber:function(a){a=nd(a);return null===a?null:a.stateNode},findFiberByHostInstance:function(a){return b?b(a):null}}))})({findFiberByHostInstance:Ia,bundleType:0,version:"16.6.3",rendererPackageName:"react-dom"});

    var schedulerTracing_production_min = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports,"__esModule",{value:!0});var b=0;exports.__interactionsRef=null;exports.__subscriberRef=null;exports.unstable_clear=function(a){return a()};exports.unstable_getCurrent=function(){return null};exports.unstable_getThreadID=function(){return ++b};exports.unstable_trace=function(a,d,c){return c()};exports.unstable_wrap=function(a){return a};exports.unstable_subscribe=function(){};exports.unstable_unsubscribe=function(){};
    });

    unwrapExports(schedulerTracing_production_min);
    var schedulerTracing_production_min_1 = schedulerTracing_production_min.__interactionsRef;
    var schedulerTracing_production_min_2 = schedulerTracing_production_min.__subscriberRef;
    var schedulerTracing_production_min_3 = schedulerTracing_production_min.unstable_clear;
    var schedulerTracing_production_min_4 = schedulerTracing_production_min.unstable_getCurrent;
    var schedulerTracing_production_min_5 = schedulerTracing_production_min.unstable_getThreadID;
    var schedulerTracing_production_min_6 = schedulerTracing_production_min.unstable_trace;
    var schedulerTracing_production_min_7 = schedulerTracing_production_min.unstable_wrap;
    var schedulerTracing_production_min_8 = schedulerTracing_production_min.unstable_subscribe;
    var schedulerTracing_production_min_9 = schedulerTracing_production_min.unstable_unsubscribe;

    var schedulerTracing_development = createCommonjsModule(function (module, exports) {



    {
      (function() {

    Object.defineProperty(exports, '__esModule', { value: true });

    // Only used in www builds.


    // Only used in www builds.


    // React Fire: prevent the value and checked attributes from syncing
    // with their related DOM properties


    // These APIs will no longer be "unstable" in the upcoming 16.7 release,
    // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.

    var DEFAULT_THREAD_ID = 0;

    // Counters used to generate unique IDs.
    var interactionIDCounter = 0;
    var threadIDCounter = 0;

    // Set of currently traced interactions.
    // Interactions "stack"–
    // Meaning that newly traced interactions are appended to the previously active set.
    // When an interaction goes out of scope, the previous set (if any) is restored.
    exports.__interactionsRef = null;

    // Listener(s) to notify when interactions begin and end.
    exports.__subscriberRef = null;

    {
      exports.__interactionsRef = {
        current: new Set()
      };
      exports.__subscriberRef = {
        current: null
      };
    }

    function unstable_clear(callback) {

      var prevInteractions = exports.__interactionsRef.current;
      exports.__interactionsRef.current = new Set();

      try {
        return callback();
      } finally {
        exports.__interactionsRef.current = prevInteractions;
      }
    }

    function unstable_getCurrent() {
      {
        return exports.__interactionsRef.current;
      }
    }

    function unstable_getThreadID() {
      return ++threadIDCounter;
    }

    function unstable_trace(name, timestamp, callback) {
      var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

      var interaction = {
        __count: 1,
        id: interactionIDCounter++,
        name: name,
        timestamp: timestamp
      };

      var prevInteractions = exports.__interactionsRef.current;

      // Traced interactions should stack/accumulate.
      // To do that, clone the current interactions.
      // The previous set will be restored upon completion.
      var interactions = new Set(prevInteractions);
      interactions.add(interaction);
      exports.__interactionsRef.current = interactions;

      var subscriber = exports.__subscriberRef.current;
      var returnValue = void 0;

      try {
        if (subscriber !== null) {
          subscriber.onInteractionTraced(interaction);
        }
      } finally {
        try {
          if (subscriber !== null) {
            subscriber.onWorkStarted(interactions, threadID);
          }
        } finally {
          try {
            returnValue = callback();
          } finally {
            exports.__interactionsRef.current = prevInteractions;

            try {
              if (subscriber !== null) {
                subscriber.onWorkStopped(interactions, threadID);
              }
            } finally {
              interaction.__count--;

              // If no async work was scheduled for this interaction,
              // Notify subscribers that it's completed.
              if (subscriber !== null && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            }
          }
        }
      }

      return returnValue;
    }

    function unstable_wrap(callback) {
      var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

      var wrappedInteractions = exports.__interactionsRef.current;

      var subscriber = exports.__subscriberRef.current;
      if (subscriber !== null) {
        subscriber.onWorkScheduled(wrappedInteractions, threadID);
      }

      // Update the pending async work count for the current interactions.
      // Update after calling subscribers in case of error.
      wrappedInteractions.forEach(function (interaction) {
        interaction.__count++;
      });

      var hasRun = false;

      function wrapped() {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = wrappedInteractions;

        subscriber = exports.__subscriberRef.current;

        try {
          var returnValue = void 0;

          try {
            if (subscriber !== null) {
              subscriber.onWorkStarted(wrappedInteractions, threadID);
            }
          } finally {
            try {
              returnValue = callback.apply(undefined, arguments);
            } finally {
              exports.__interactionsRef.current = prevInteractions;

              if (subscriber !== null) {
                subscriber.onWorkStopped(wrappedInteractions, threadID);
              }
            }
          }

          return returnValue;
        } finally {
          if (!hasRun) {
            // We only expect a wrapped function to be executed once,
            // But in the event that it's executed more than once–
            // Only decrement the outstanding interaction counts once.
            hasRun = true;

            // Update pending async counts for all wrapped interactions.
            // If this was the last scheduled async work for any of them,
            // Mark them as completed.
            wrappedInteractions.forEach(function (interaction) {
              interaction.__count--;

              if (subscriber !== null && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            });
          }
        }
      }

      wrapped.cancel = function cancel() {
        subscriber = exports.__subscriberRef.current;

        try {
          if (subscriber !== null) {
            subscriber.onWorkCanceled(wrappedInteractions, threadID);
          }
        } finally {
          // Update pending async counts for all wrapped interactions.
          // If this was the last scheduled async work for any of them,
          // Mark them as completed.
          wrappedInteractions.forEach(function (interaction) {
            interaction.__count--;

            if (subscriber && interaction.__count === 0) {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            }
          });
        }
      };

      return wrapped;
    }

    var subscribers = null;
    {
      subscribers = new Set();
    }

    function unstable_subscribe(subscriber) {
      {
        subscribers.add(subscriber);

        if (subscribers.size === 1) {
          exports.__subscriberRef.current = {
            onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
            onInteractionTraced: onInteractionTraced,
            onWorkCanceled: onWorkCanceled,
            onWorkScheduled: onWorkScheduled,
            onWorkStarted: onWorkStarted,
            onWorkStopped: onWorkStopped
          };
        }
      }
    }

    function unstable_unsubscribe(subscriber) {
      {
        subscribers.delete(subscriber);

        if (subscribers.size === 0) {
          exports.__subscriberRef.current = null;
        }
      }
    }

    function onInteractionTraced(interaction) {
      var didCatchError = false;
      var caughtError = null;

      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onInteractionTraced(interaction);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onInteractionScheduledWorkCompleted(interaction) {
      var didCatchError = false;
      var caughtError = null;

      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onInteractionScheduledWorkCompleted(interaction);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkScheduled(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;

      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkScheduled(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkStarted(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;

      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkStarted(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkStopped(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;

      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkStopped(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkCanceled(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;

      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkCanceled(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    exports.unstable_clear = unstable_clear;
    exports.unstable_getCurrent = unstable_getCurrent;
    exports.unstable_getThreadID = unstable_getThreadID;
    exports.unstable_trace = unstable_trace;
    exports.unstable_wrap = unstable_wrap;
    exports.unstable_subscribe = unstable_subscribe;
    exports.unstable_unsubscribe = unstable_unsubscribe;
      })();
    }
    });

    unwrapExports(schedulerTracing_development);
    var schedulerTracing_development_1 = schedulerTracing_development.__interactionsRef;
    var schedulerTracing_development_2 = schedulerTracing_development.__subscriberRef;
    var schedulerTracing_development_3 = schedulerTracing_development.unstable_clear;
    var schedulerTracing_development_4 = schedulerTracing_development.unstable_getCurrent;
    var schedulerTracing_development_5 = schedulerTracing_development.unstable_getThreadID;
    var schedulerTracing_development_6 = schedulerTracing_development.unstable_trace;
    var schedulerTracing_development_7 = schedulerTracing_development.unstable_wrap;
    var schedulerTracing_development_8 = schedulerTracing_development.unstable_subscribe;
    var schedulerTracing_development_9 = schedulerTracing_development.unstable_unsubscribe;

    var tracing = createCommonjsModule(function (module) {

    {
      module.exports = schedulerTracing_development;
    }
    });

    var reactDom_development = createCommonjsModule(function (module) {



    {
      (function() {

    var React = react;
    var _assign = objectAssign;
    var checkPropTypes = checkPropTypes_1;
    var scheduler$$1 = scheduler;
    var tracing$$1 = tracing;

    /**
     * Use invariant() to assert state which your program assumes to be true.
     *
     * Provide sprintf-style format (only %s is supported) and arguments
     * to provide information about what broke and what you were
     * expecting.
     *
     * The invariant message will be stripped in production, but the invariant
     * will remain to ensure logic does not differ in production.
     */

    var validateFormat = function () {};

    {
      validateFormat = function (format) {
        if (format === undefined) {
          throw new Error('invariant requires an error message argument');
        }
      };
    }

    function invariant(condition, format, a, b, c, d, e, f) {
      validateFormat(format);

      if (!condition) {
        var error = void 0;
        if (format === undefined) {
          error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(format.replace(/%s/g, function () {
            return args[argIndex++];
          }));
          error.name = 'Invariant Violation';
        }

        error.framesToPop = 1; // we don't care about invariant's own frame
        throw error;
      }
    }

    // Relying on the `invariant()` implementation lets us
    // preserve the format and params in the www builds.

    !React ? invariant(false, 'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.') : void 0;

    var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
      var funcArgs = Array.prototype.slice.call(arguments, 3);
      try {
        func.apply(context, funcArgs);
      } catch (error) {
        this.onError(error);
      }
    };

    {
      // In DEV mode, we swap out invokeGuardedCallback for a special version
      // that plays more nicely with the browser's DevTools. The idea is to preserve
      // "Pause on exceptions" behavior. Because React wraps all user-provided
      // functions in invokeGuardedCallback, and the production version of
      // invokeGuardedCallback uses a try-catch, all user exceptions are treated
      // like caught exceptions, and the DevTools won't pause unless the developer
      // takes the extra step of enabling pause on caught exceptions. This is
      // untintuitive, though, because even though React has caught the error, from
      // the developer's perspective, the error is uncaught.
      //
      // To preserve the expected "Pause on exceptions" behavior, we don't use a
      // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
      // DOM node, and call the user-provided callback from inside an event handler
      // for that fake event. If the callback throws, the error is "captured" using
      // a global event handler. But because the error happens in a different
      // event loop context, it does not interrupt the normal program flow.
      // Effectively, this gives us try-catch behavior without actually using
      // try-catch. Neat!

      // Check that the browser supports the APIs we need to implement our special
      // DEV version of invokeGuardedCallback
      if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
        var fakeNode = document.createElement('react');

        var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
          // If document doesn't exist we know for sure we will crash in this method
          // when we call document.createEvent(). However this can cause confusing
          // errors: https://github.com/facebookincubator/create-react-app/issues/3482
          // So we preemptively throw with a better message instead.
          !(typeof document !== 'undefined') ? invariant(false, 'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.') : void 0;
          var evt = document.createEvent('Event');

          // Keeps track of whether the user-provided callback threw an error. We
          // set this to true at the beginning, then set it to false right after
          // calling the function. If the function errors, `didError` will never be
          // set to false. This strategy works even if the browser is flaky and
          // fails to call our global error handler, because it doesn't rely on
          // the error event at all.
          var didError = true;

          // Keeps track of the value of window.event so that we can reset it
          // during the callback to let user code access window.event in the
          // browsers that support it.
          var windowEvent = window.event;

          // Keeps track of the descriptor of window.event to restore it after event
          // dispatching: https://github.com/facebook/react/issues/13688
          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');

          // Create an event handler for our fake event. We will synchronously
          // dispatch our fake event using `dispatchEvent`. Inside the handler, we
          // call the user-provided callback.
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          function callCallback() {
            // We immediately remove the callback from event listeners so that
            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
            // nested call would trigger the fake event handlers of any call higher
            // in the stack.
            fakeNode.removeEventListener(evtType, callCallback, false);

            // We check for window.hasOwnProperty('event') to prevent the
            // window.event assignment in both IE <= 10 as they throw an error
            // "Member not found" in strict mode, and in Firefox which does not
            // support window.event.
            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
              window.event = windowEvent;
            }

            func.apply(context, funcArgs);
            didError = false;
          }

          // Create a global error event handler. We use this to capture the value
          // that was thrown. It's possible that this error handler will fire more
          // than once; for example, if non-React code also calls `dispatchEvent`
          // and a handler for that event throws. We should be resilient to most of
          // those cases. Even if our error event handler fires more than once, the
          // last error event is always used. If the callback actually does error,
          // we know that the last error event is the correct one, because it's not
          // possible for anything else to have happened in between our callback
          // erroring and the code that follows the `dispatchEvent` call below. If
          // the callback doesn't error, but the error event was fired, we know to
          // ignore it because `didError` will be false, as described above.
          var error = void 0;
          // Use this to track whether the error event is ever called.
          var didSetError = false;
          var isCrossOriginError = false;

          function handleWindowError(event) {
            error = event.error;
            didSetError = true;
            if (error === null && event.colno === 0 && event.lineno === 0) {
              isCrossOriginError = true;
            }
            if (event.defaultPrevented) {
              // Some other error handler has prevented default.
              // Browsers silence the error report if this happens.
              // We'll remember this to later decide whether to log it or not.
              if (error != null && typeof error === 'object') {
                try {
                  error._suppressLogging = true;
                } catch (inner) {
                  // Ignore.
                }
              }
            }
          }

          // Create a fake event type.
          var evtType = 'react-' + (name ? name : 'invokeguardedcallback');

          // Attach our event handlers
          window.addEventListener('error', handleWindowError);
          fakeNode.addEventListener(evtType, callCallback, false);

          // Synchronously dispatch our fake event. If the user-provided function
          // errors, it will trigger our global error handler.
          evt.initEvent(evtType, false, false);
          fakeNode.dispatchEvent(evt);

          if (windowEventDescriptor) {
            Object.defineProperty(window, 'event', windowEventDescriptor);
          }

          if (didError) {
            if (!didSetError) {
              // The callback errored, but the error event never fired.
              error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
            } else if (isCrossOriginError) {
              error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
            }
            this.onError(error);
          }

          // Remove our event listeners
          window.removeEventListener('error', handleWindowError);
        };

        invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
      }
    }

    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

    // Used by Fiber to simulate a try-catch.
    var hasError = false;
    var caughtError = null;

    // Used by event system to capture/rethrow the first error.
    var hasRethrowError = false;
    var rethrowError = null;

    var reporter = {
      onError: function (error) {
        hasError = true;
        caughtError = error;
      }
    };

    /**
     * Call a function while guarding against errors that happens within it.
     * Returns an error if it throws, otherwise null.
     *
     * In production, this is implemented using a try-catch. The reason we don't
     * use a try-catch directly is so that we can swap out a different
     * implementation in DEV mode.
     *
     * @param {String} name of the guard to use for logging or debugging
     * @param {Function} func The function to invoke
     * @param {*} context The context to use when calling the function
     * @param {...*} args Arguments for function
     */
    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
      hasError = false;
      caughtError = null;
      invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }

    /**
     * Same as invokeGuardedCallback, but instead of returning an error, it stores
     * it in a global so it can be rethrown by `rethrowCaughtError` later.
     * TODO: See if caughtError and rethrowError can be unified.
     *
     * @param {String} name of the guard to use for logging or debugging
     * @param {Function} func The function to invoke
     * @param {*} context The context to use when calling the function
     * @param {...*} args Arguments for function
     */
    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
      invokeGuardedCallback.apply(this, arguments);
      if (hasError) {
        var error = clearCaughtError();
        if (!hasRethrowError) {
          hasRethrowError = true;
          rethrowError = error;
        }
      }
    }

    /**
     * During execution of guarded functions we will capture the first error which
     * we will rethrow to be handled by the top level error handler.
     */
    function rethrowCaughtError() {
      if (hasRethrowError) {
        var error = rethrowError;
        hasRethrowError = false;
        rethrowError = null;
        throw error;
      }
    }

    function hasCaughtError() {
      return hasError;
    }

    function clearCaughtError() {
      if (hasError) {
        var error = caughtError;
        hasError = false;
        caughtError = null;
        return error;
      } else {
        invariant(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');
      }
    }

    /**
     * Injectable ordering of event plugins.
     */
    var eventPluginOrder = null;

    /**
     * Injectable mapping from names to event plugin modules.
     */
    var namesToPlugins = {};

    /**
     * Recomputes the plugin list using the injected plugins and plugin ordering.
     *
     * @private
     */
    function recomputePluginOrdering() {
      if (!eventPluginOrder) {
        // Wait until an `eventPluginOrder` is injected.
        return;
      }
      for (var pluginName in namesToPlugins) {
        var pluginModule = namesToPlugins[pluginName];
        var pluginIndex = eventPluginOrder.indexOf(pluginName);
        !(pluginIndex > -1) ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;
        if (plugins[pluginIndex]) {
          continue;
        }
        !pluginModule.extractEvents ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;
        plugins[pluginIndex] = pluginModule;
        var publishedEvents = pluginModule.eventTypes;
        for (var eventName in publishedEvents) {
          !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;
        }
      }
    }

    /**
     * Publishes an event so that it can be dispatched by the supplied plugin.
     *
     * @param {object} dispatchConfig Dispatch configuration for the event.
     * @param {object} PluginModule Plugin publishing the event.
     * @return {boolean} True if the event was successfully published.
     * @private
     */
    function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
      !!eventNameDispatchConfigs.hasOwnProperty(eventName) ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : void 0;
      eventNameDispatchConfigs[eventName] = dispatchConfig;

      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
      if (phasedRegistrationNames) {
        for (var phaseName in phasedRegistrationNames) {
          if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
            var phasedRegistrationName = phasedRegistrationNames[phaseName];
            publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
          }
        }
        return true;
      } else if (dispatchConfig.registrationName) {
        publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
        return true;
      }
      return false;
    }

    /**
     * Publishes a registration name that is used to identify dispatched events.
     *
     * @param {string} registrationName Registration name to add.
     * @param {object} PluginModule Plugin publishing the event.
     * @private
     */
    function publishRegistrationName(registrationName, pluginModule, eventName) {
      !!registrationNameModules[registrationName] ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : void 0;
      registrationNameModules[registrationName] = pluginModule;
      registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

      {
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;

        if (registrationName === 'onDoubleClick') {
          possibleRegistrationNames.ondblclick = registrationName;
        }
      }
    }

    /**
     * Registers plugins so that they can extract and dispatch events.
     *
     * @see {EventPluginHub}
     */

    /**
     * Ordered list of injected plugins.
     */
    var plugins = [];

    /**
     * Mapping from event name to dispatch config
     */
    var eventNameDispatchConfigs = {};

    /**
     * Mapping from registration name to plugin module
     */
    var registrationNameModules = {};

    /**
     * Mapping from registration name to event name
     */
    var registrationNameDependencies = {};

    /**
     * Mapping from lowercase registration names to the properly cased version,
     * used to warn in the case of missing event handlers. Available
     * only in true.
     * @type {Object}
     */
    var possibleRegistrationNames = {};
    // Trust the developer to only use possibleRegistrationNames in true

    /**
     * Injects an ordering of plugins (by plugin name). This allows the ordering
     * to be decoupled from injection of the actual plugins so that ordering is
     * always deterministic regardless of packaging, on-the-fly injection, etc.
     *
     * @param {array} InjectedEventPluginOrder
     * @internal
     * @see {EventPluginHub.injection.injectEventPluginOrder}
     */
    function injectEventPluginOrder(injectedEventPluginOrder) {
      !!eventPluginOrder ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : void 0;
      // Clone the ordering so it cannot be dynamically mutated.
      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
      recomputePluginOrdering();
    }

    /**
     * Injects plugins to be used by `EventPluginHub`. The plugin names must be
     * in the ordering injected by `injectEventPluginOrder`.
     *
     * Plugins can be injected as part of page initialization or on-the-fly.
     *
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     * @internal
     * @see {EventPluginHub.injection.injectEventPluginsByName}
     */
    function injectEventPluginsByName(injectedNamesToPlugins) {
      var isOrderingDirty = false;
      for (var pluginName in injectedNamesToPlugins) {
        if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          continue;
        }
        var pluginModule = injectedNamesToPlugins[pluginName];
        if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
          !!namesToPlugins[pluginName] ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : void 0;
          namesToPlugins[pluginName] = pluginModule;
          isOrderingDirty = true;
        }
      }
      if (isOrderingDirty) {
        recomputePluginOrdering();
      }
    }

    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var warningWithoutStack = function () {};

    {
      warningWithoutStack = function (condition, format) {
        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        if (format === undefined) {
          throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
        }
        if (args.length > 8) {
          // Check before the condition to catch violations early.
          throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
        }
        if (condition) {
          return;
        }
        if (typeof console !== 'undefined') {
          var argsWithFormat = args.map(function (item) {
            return '' + item;
          });
          argsWithFormat.unshift('Warning: ' + format);

          // We intentionally don't use spread (or .apply) directly because it
          // breaks IE9: https://github.com/facebook/react/issues/13610
          Function.prototype.apply.call(console.error, console, argsWithFormat);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          var argIndex = 0;
          var message = 'Warning: ' + format.replace(/%s/g, function () {
            return args[argIndex++];
          });
          throw new Error(message);
        } catch (x) {}
      };
    }

    var warningWithoutStack$1 = warningWithoutStack;

    var getFiberCurrentPropsFromNode = null;
    var getInstanceFromNode = null;
    var getNodeFromInstance = null;

    function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
      getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
      getInstanceFromNode = getInstanceFromNodeImpl;
      getNodeFromInstance = getNodeFromInstanceImpl;
      {
        !(getNodeFromInstance && getInstanceFromNode) ? warningWithoutStack$1(false, 'EventPluginUtils.setComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
      }
    }

    var validateEventDispatches = void 0;
    {
      validateEventDispatches = function (event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;

        var listenersIsArr = Array.isArray(dispatchListeners);
        var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

        var instancesIsArr = Array.isArray(dispatchInstances);
        var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

        !(instancesIsArr === listenersIsArr && instancesLen === listenersLen) ? warningWithoutStack$1(false, 'EventPluginUtils: Invalid `event`.') : void 0;
      };
    }

    /**
     * Dispatch the event to the listener.
     * @param {SyntheticEvent} event SyntheticEvent to handle
     * @param {function} listener Application-level callback
     * @param {*} inst Internal component instance
     */
    function executeDispatch(event, listener, inst) {
      var type = event.type || 'unknown-event';
      event.currentTarget = getNodeFromInstance(inst);
      invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
      event.currentTarget = null;
    }

    /**
     * Standard/simple iteration through an event's collected dispatches.
     */
    function executeDispatchesInOrder(event) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchInstances = event._dispatchInstances;
      {
        validateEventDispatches(event);
      }
      if (Array.isArray(dispatchListeners)) {
        for (var i = 0; i < dispatchListeners.length; i++) {
          if (event.isPropagationStopped()) {
            break;
          }
          // Listeners and Instances are two parallel arrays that are always in sync.
          executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
        }
      } else if (dispatchListeners) {
        executeDispatch(event, dispatchListeners, dispatchInstances);
      }
      event._dispatchListeners = null;
      event._dispatchInstances = null;
    }

    /**
     * @see executeDispatchesInOrderStopAtTrueImpl
     */


    /**
     * Execution of a "direct" dispatch - there must be at most one dispatch
     * accumulated on the event or it is considered an error. It doesn't really make
     * sense for an event with multiple dispatches (bubbled) to keep track of the
     * return values at each dispatch execution, but it does tend to make sense when
     * dealing with "direct" dispatches.
     *
     * @return {*} The return value of executing the single dispatch.
     */


    /**
     * @param {SyntheticEvent} event
     * @return {boolean} True iff number of dispatches accumulated is greater than 0.
     */

    /**
     * Accumulates items that must not be null or undefined into the first one. This
     * is used to conserve memory by avoiding array allocations, and thus sacrifices
     * API cleanness. Since `current` can be null before being passed in and not
     * null after this function, make sure to assign it back to `current`:
     *
     * `a = accumulateInto(a, b);`
     *
     * This API should be sparingly used. Try `accumulate` for something cleaner.
     *
     * @return {*|array<*>} An accumulation of items.
     */

    function accumulateInto(current, next) {
      !(next != null) ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : void 0;

      if (current == null) {
        return next;
      }

      // Both are not empty. Warning: Never call x.concat(y) when you are not
      // certain that x is an Array (x could be a string with concat method).
      if (Array.isArray(current)) {
        if (Array.isArray(next)) {
          current.push.apply(current, next);
          return current;
        }
        current.push(next);
        return current;
      }

      if (Array.isArray(next)) {
        // A bit too dangerous to mutate `next`.
        return [current].concat(next);
      }

      return [current, next];
    }

    /**
     * @param {array} arr an "accumulation" of items which is either an Array or
     * a single item. Useful when paired with the `accumulate` module. This is a
     * simple utility that allows us to reason about a collection of items, but
     * handling the case when there is exactly one item (and we do not need to
     * allocate an array).
     * @param {function} cb Callback invoked with each element or a collection.
     * @param {?} [scope] Scope used as `this` in a callback.
     */
    function forEachAccumulated(arr, cb, scope) {
      if (Array.isArray(arr)) {
        arr.forEach(cb, scope);
      } else if (arr) {
        cb.call(scope, arr);
      }
    }

    /**
     * Internal queue of events that have accumulated their dispatches and are
     * waiting to have their dispatches executed.
     */
    var eventQueue = null;

    /**
     * Dispatches an event and releases it back into the pool, unless persistent.
     *
     * @param {?object} event Synthetic event to be dispatched.
     * @private
     */
    var executeDispatchesAndRelease = function (event) {
      if (event) {
        executeDispatchesInOrder(event);

        if (!event.isPersistent()) {
          event.constructor.release(event);
        }
      }
    };
    var executeDispatchesAndReleaseTopLevel = function (e) {
      return executeDispatchesAndRelease(e);
    };

    function isInteractive(tag) {
      return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
    }

    function shouldPreventMouseEvent(name, type, props) {
      switch (name) {
        case 'onClick':
        case 'onClickCapture':
        case 'onDoubleClick':
        case 'onDoubleClickCapture':
        case 'onMouseDown':
        case 'onMouseDownCapture':
        case 'onMouseMove':
        case 'onMouseMoveCapture':
        case 'onMouseUp':
        case 'onMouseUpCapture':
          return !!(props.disabled && isInteractive(type));
        default:
          return false;
      }
    }

    /**
     * This is a unified interface for event plugins to be installed and configured.
     *
     * Event plugins can implement the following properties:
     *
     *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
     *     Required. When a top-level event is fired, this method is expected to
     *     extract synthetic events that will in turn be queued and dispatched.
     *
     *   `eventTypes` {object}
     *     Optional, plugins that fire events must publish a mapping of registration
     *     names that are used to register listeners. Values of this mapping must
     *     be objects that contain `registrationName` or `phasedRegistrationNames`.
     *
     *   `executeDispatch` {function(object, function, string)}
     *     Optional, allows plugins to override how an event gets dispatched. By
     *     default, the listener is simply invoked.
     *
     * Each plugin that is injected into `EventsPluginHub` is immediately operable.
     *
     * @public
     */

    /**
     * Methods for injecting dependencies.
     */
    var injection = {
      /**
       * @param {array} InjectedEventPluginOrder
       * @public
       */
      injectEventPluginOrder: injectEventPluginOrder,

      /**
       * @param {object} injectedNamesToPlugins Map from names to plugin modules.
       */
      injectEventPluginsByName: injectEventPluginsByName
    };

    /**
     * @param {object} inst The instance, which is the source of events.
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @return {?function} The stored callback.
     */
    function getListener(inst, registrationName) {
      var listener = void 0;

      // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
      // live here; needs to be moved to a better place soon
      var stateNode = inst.stateNode;
      if (!stateNode) {
        // Work in progress (ex: onload events in incremental mode).
        return null;
      }
      var props = getFiberCurrentPropsFromNode(stateNode);
      if (!props) {
        // Work in progress.
        return null;
      }
      listener = props[registrationName];
      if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
        return null;
      }
      !(!listener || typeof listener === 'function') ? invariant(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener) : void 0;
      return listener;
    }

    /**
     * Allows registered plugins an opportunity to extract events from top-level
     * native browser events.
     *
     * @return {*} An accumulation of synthetic events.
     * @internal
     */
    function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var events = null;
      for (var i = 0; i < plugins.length; i++) {
        // Not every plugin in the ordering may be loaded at runtime.
        var possiblePlugin = plugins[i];
        if (possiblePlugin) {
          var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
          if (extractedEvents) {
            events = accumulateInto(events, extractedEvents);
          }
        }
      }
      return events;
    }

    function runEventsInBatch(events) {
      if (events !== null) {
        eventQueue = accumulateInto(eventQueue, events);
      }

      // Set `eventQueue` to null before processing it so that we can tell if more
      // events get enqueued while processing.
      var processingEventQueue = eventQueue;
      eventQueue = null;

      if (!processingEventQueue) {
        return;
      }

      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
      !!eventQueue ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : void 0;
      // This would be a good time to rethrow if any of the event handlers threw.
      rethrowCaughtError();
    }

    function runExtractedEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
      runEventsInBatch(events);
    }

    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2; // Before we know whether it is function or class
    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;

    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = '__reactInternalInstance$' + randomKey;
    var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;

    function precacheFiberNode(hostInst, node) {
      node[internalInstanceKey] = hostInst;
    }

    /**
     * Given a DOM node, return the closest ReactDOMComponent or
     * ReactDOMTextComponent instance ancestor.
     */
    function getClosestInstanceFromNode(node) {
      if (node[internalInstanceKey]) {
        return node[internalInstanceKey];
      }

      while (!node[internalInstanceKey]) {
        if (node.parentNode) {
          node = node.parentNode;
        } else {
          // Top of the tree. This node must not be part of a React tree (or is
          // unmounted, potentially).
          return null;
        }
      }

      var inst = node[internalInstanceKey];
      if (inst.tag === HostComponent || inst.tag === HostText) {
        // In Fiber, this will always be the deepest root.
        return inst;
      }

      return null;
    }

    /**
     * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
     * instance, or null if the node was not rendered by this React.
     */
    function getInstanceFromNode$1(node) {
      var inst = node[internalInstanceKey];
      if (inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) {
          return inst;
        } else {
          return null;
        }
      }
      return null;
    }

    /**
     * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
     * DOM node.
     */
    function getNodeFromInstance$1(inst) {
      if (inst.tag === HostComponent || inst.tag === HostText) {
        // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
      }

      // Without this first invariant, passing a non-DOM-component triggers the next
      // invariant for a missing parent, which is super confusing.
      invariant(false, 'getNodeFromInstance: Invalid argument.');
    }

    function getFiberCurrentPropsFromNode$1(node) {
      return node[internalEventHandlersKey] || null;
    }

    function updateFiberProps(node, props) {
      node[internalEventHandlersKey] = props;
    }

    function getParent(inst) {
      do {
        inst = inst.return;
        // TODO: If this is a HostRoot we might want to bail out.
        // That is depending on if we want nested subtrees (layers) to bubble
        // events to their parent. We could also go through parentNode on the
        // host node but that wouldn't work for React Native and doesn't let us
        // do the portal feature.
      } while (inst && inst.tag !== HostComponent);
      if (inst) {
        return inst;
      }
      return null;
    }

    /**
     * Return the lowest common ancestor of A and B, or null if they are in
     * different trees.
     */
    function getLowestCommonAncestor(instA, instB) {
      var depthA = 0;
      for (var tempA = instA; tempA; tempA = getParent(tempA)) {
        depthA++;
      }
      var depthB = 0;
      for (var tempB = instB; tempB; tempB = getParent(tempB)) {
        depthB++;
      }

      // If A is deeper, crawl up.
      while (depthA - depthB > 0) {
        instA = getParent(instA);
        depthA--;
      }

      // If B is deeper, crawl up.
      while (depthB - depthA > 0) {
        instB = getParent(instB);
        depthB--;
      }

      // Walk in lockstep until we find a match.
      var depth = depthA;
      while (depth--) {
        if (instA === instB || instA === instB.alternate) {
          return instA;
        }
        instA = getParent(instA);
        instB = getParent(instB);
      }
      return null;
    }

    /**
     * Return if A is an ancestor of B.
     */


    /**
     * Return the parent instance of the passed-in instance.
     */


    /**
     * Simulates the traversal of a two-phase, capture/bubble event dispatch.
     */
    function traverseTwoPhase(inst, fn, arg) {
      var path = [];
      while (inst) {
        path.push(inst);
        inst = getParent(inst);
      }
      var i = void 0;
      for (i = path.length; i-- > 0;) {
        fn(path[i], 'captured', arg);
      }
      for (i = 0; i < path.length; i++) {
        fn(path[i], 'bubbled', arg);
      }
    }

    /**
     * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
     * should would receive a `mouseEnter` or `mouseLeave` event.
     *
     * Does not invoke the callback on the nearest common ancestor because nothing
     * "entered" or "left" that element.
     */
    function traverseEnterLeave(from, to, fn, argFrom, argTo) {
      var common = from && to ? getLowestCommonAncestor(from, to) : null;
      var pathFrom = [];
      while (true) {
        if (!from) {
          break;
        }
        if (from === common) {
          break;
        }
        var alternate = from.alternate;
        if (alternate !== null && alternate === common) {
          break;
        }
        pathFrom.push(from);
        from = getParent(from);
      }
      var pathTo = [];
      while (true) {
        if (!to) {
          break;
        }
        if (to === common) {
          break;
        }
        var _alternate = to.alternate;
        if (_alternate !== null && _alternate === common) {
          break;
        }
        pathTo.push(to);
        to = getParent(to);
      }
      for (var i = 0; i < pathFrom.length; i++) {
        fn(pathFrom[i], 'bubbled', argFrom);
      }
      for (var _i = pathTo.length; _i-- > 0;) {
        fn(pathTo[_i], 'captured', argTo);
      }
    }

    /**
     * Some event types have a notion of different registration names for different
     * "phases" of propagation. This finds listeners by a given phase.
     */
    function listenerAtPhase(inst, event, propagationPhase) {
      var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
      return getListener(inst, registrationName);
    }

    /**
     * A small set of propagation patterns, each of which will accept a small amount
     * of information, and generate a set of "dispatch ready event objects" - which
     * are sets of events that have already been annotated with a set of dispatched
     * listener functions/ids. The API is designed this way to discourage these
     * propagation strategies from actually executing the dispatches, since we
     * always want to collect the entire set of dispatches before executing even a
     * single one.
     */

    /**
     * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
     * here, allows us to not have to bind or create functions for each event.
     * Mutating the event's members allows us to not have to create a wrapping
     * "dispatch" object that pairs the event with the listener.
     */
    function accumulateDirectionalDispatches(inst, phase, event) {
      {
        !inst ? warningWithoutStack$1(false, 'Dispatching inst must not be null') : void 0;
      }
      var listener = listenerAtPhase(inst, event, phase);
      if (listener) {
        event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
        event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
      }
    }

    /**
     * Collect dispatches (must be entirely collected before dispatching - see unit
     * tests). Lazily allocate the array to conserve memory.  We must loop through
     * each event and perform the traversal for each one. We cannot perform a
     * single traversal for the entire collection of events because each event may
     * have a different target.
     */
    function accumulateTwoPhaseDispatchesSingle(event) {
      if (event && event.dispatchConfig.phasedRegistrationNames) {
        traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
      }
    }

    /**
     * Accumulates without regard to direction, does not look for phased
     * registration names. Same as `accumulateDirectDispatchesSingle` but without
     * requiring that the `dispatchMarker` be the same as the dispatched ID.
     */
    function accumulateDispatches(inst, ignoredDirection, event) {
      if (inst && event && event.dispatchConfig.registrationName) {
        var registrationName = event.dispatchConfig.registrationName;
        var listener = getListener(inst, registrationName);
        if (listener) {
          event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
          event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
        }
      }
    }

    /**
     * Accumulates dispatches on an `SyntheticEvent`, but only for the
     * `dispatchMarker`.
     * @param {SyntheticEvent} event
     */
    function accumulateDirectDispatchesSingle(event) {
      if (event && event.dispatchConfig.registrationName) {
        accumulateDispatches(event._targetInst, null, event);
      }
    }

    function accumulateTwoPhaseDispatches(events) {
      forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
    }



    function accumulateEnterLeaveDispatches(leave, enter, from, to) {
      traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
    }

    function accumulateDirectDispatches(events) {
      forEachAccumulated(events, accumulateDirectDispatchesSingle);
    }

    var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

    // Do not uses the below two methods directly!
    // Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
    // (It is the only module that is allowed to access these methods.)

    function unsafeCastStringToDOMTopLevelType(topLevelType) {
      return topLevelType;
    }

    function unsafeCastDOMTopLevelTypeToString(topLevelType) {
      return topLevelType;
    }

    /**
     * Generate a mapping of standard vendor prefixes using the defined style property and event name.
     *
     * @param {string} styleProp
     * @param {string} eventName
     * @returns {object}
     */
    function makePrefixMap(styleProp, eventName) {
      var prefixes = {};

      prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
      prefixes['Webkit' + styleProp] = 'webkit' + eventName;
      prefixes['Moz' + styleProp] = 'moz' + eventName;

      return prefixes;
    }

    /**
     * A list of event names to a configurable list of vendor prefixes.
     */
    var vendorPrefixes = {
      animationend: makePrefixMap('Animation', 'AnimationEnd'),
      animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
      animationstart: makePrefixMap('Animation', 'AnimationStart'),
      transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };

    /**
     * Event names that have already been detected and prefixed (if applicable).
     */
    var prefixedEventNames = {};

    /**
     * Element to check for prefixes on.
     */
    var style = {};

    /**
     * Bootstrap if a DOM exists.
     */
    if (canUseDOM) {
      style = document.createElement('div').style;

      // On some platforms, in particular some releases of Android 4.x,
      // the un-prefixed "animation" and "transition" properties are defined on the
      // style object but the events that fire will still be prefixed, so we need
      // to check if the un-prefixed events are usable, and if not remove them from the map.
      if (!('AnimationEvent' in window)) {
        delete vendorPrefixes.animationend.animation;
        delete vendorPrefixes.animationiteration.animation;
        delete vendorPrefixes.animationstart.animation;
      }

      // Same as above
      if (!('TransitionEvent' in window)) {
        delete vendorPrefixes.transitionend.transition;
      }
    }

    /**
     * Attempts to determine the correct vendor prefixed event name.
     *
     * @param {string} eventName
     * @returns {string}
     */
    function getVendorPrefixedEventName(eventName) {
      if (prefixedEventNames[eventName]) {
        return prefixedEventNames[eventName];
      } else if (!vendorPrefixes[eventName]) {
        return eventName;
      }

      var prefixMap = vendorPrefixes[eventName];

      for (var styleProp in prefixMap) {
        if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
          return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
      }

      return eventName;
    }

    /**
     * To identify top level events in ReactDOM, we use constants defined by this
     * module. This is the only module that uses the unsafe* methods to express
     * that the constants actually correspond to the browser event names. This lets
     * us save some bundle size by avoiding a top level type -> event name map.
     * The rest of ReactDOM code should import top level types from this file.
     */
    var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
    var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
    var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
    var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
    var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
    var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
    var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
    var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
    var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
    var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
    var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
    var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
    var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
    var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
    var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
    var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
    var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
    var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
    var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
    var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
    var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
    var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
    var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
    var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
    var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
    var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
    var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
    var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
    var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
    var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
    var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
    var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
    var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
    var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
    var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
    var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
    var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
    var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
    var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
    var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
    var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
    var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
    var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
    var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
    var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
    var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
    var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
    var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
    var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
    var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
    var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
    var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
    var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
    var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
    var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');


    var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
    var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
    var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
    var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
    var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
    var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
    var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
    var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
    var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
    var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
    var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
    var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
    var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
    var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
    var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
    var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
    var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
    var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
    var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
    var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
    var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
    var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
    var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
    var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
    var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel');

    // List of events that need to be individually attached to media elements.
    // Note that events in this list will *not* be listened to at the top level
    // unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.
    var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];

    function getRawEventName(topLevelType) {
      return unsafeCastDOMTopLevelTypeToString(topLevelType);
    }

    /**
     * These variables store information about text content of a target node,
     * allowing comparison of content before and after a given event.
     *
     * Identify the node where selection currently begins, then observe
     * both its text content and its current position in the DOM. Since the
     * browser may natively replace the target node during composition, we can
     * use its position to find its replacement.
     *
     *
     */

    var root = null;
    var startText = null;
    var fallbackText = null;

    function initialize(nativeEventTarget) {
      root = nativeEventTarget;
      startText = getText();
      return true;
    }

    function reset() {
      root = null;
      startText = null;
      fallbackText = null;
    }

    function getData() {
      if (fallbackText) {
        return fallbackText;
      }

      var start = void 0;
      var startValue = startText;
      var startLength = startValue.length;
      var end = void 0;
      var endValue = getText();
      var endLength = endValue.length;

      for (start = 0; start < startLength; start++) {
        if (startValue[start] !== endValue[start]) {
          break;
        }
      }

      var minEnd = startLength - start;
      for (end = 1; end <= minEnd; end++) {
        if (startValue[startLength - end] !== endValue[endLength - end]) {
          break;
        }
      }

      var sliceTail = end > 1 ? 1 - end : undefined;
      fallbackText = endValue.slice(start, sliceTail);
      return fallbackText;
    }

    function getText() {
      if ('value' in root) {
        return root.value;
      }
      return root.textContent;
    }

    /* eslint valid-typeof: 0 */

    var EVENT_POOL_SIZE = 10;

    /**
     * @interface Event
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var EventInterface = {
      type: null,
      target: null,
      // currentTarget is set when dispatching; no use in copying it here
      currentTarget: function () {
        return null;
      },
      eventPhase: null,
      bubbles: null,
      cancelable: null,
      timeStamp: function (event) {
        return event.timeStamp || Date.now();
      },
      defaultPrevented: null,
      isTrusted: null
    };

    function functionThatReturnsTrue() {
      return true;
    }

    function functionThatReturnsFalse() {
      return false;
    }

    /**
     * Synthetic events are dispatched by event plugins, typically in response to a
     * top-level event delegation handler.
     *
     * These systems should generally use pooling to reduce the frequency of garbage
     * collection. The system should check `isPersistent` to determine whether the
     * event should be released into the pool after being dispatched. Users that
     * need a persisted event should invoke `persist`.
     *
     * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
     * normalizing browser quirks. Subclasses do not necessarily have to implement a
     * DOM interface; custom application-specific events can also subclass this.
     *
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {*} targetInst Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @param {DOMEventTarget} nativeEventTarget Target node.
     */
    function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
      {
        // these have a getter/setter for warnings
        delete this.nativeEvent;
        delete this.preventDefault;
        delete this.stopPropagation;
        delete this.isDefaultPrevented;
        delete this.isPropagationStopped;
      }

      this.dispatchConfig = dispatchConfig;
      this._targetInst = targetInst;
      this.nativeEvent = nativeEvent;

      var Interface = this.constructor.Interface;
      for (var propName in Interface) {
        if (!Interface.hasOwnProperty(propName)) {
          continue;
        }
        {
          delete this[propName]; // this has a getter/setter for warnings
        }
        var normalize = Interface[propName];
        if (normalize) {
          this[propName] = normalize(nativeEvent);
        } else {
          if (propName === 'target') {
            this.target = nativeEventTarget;
          } else {
            this[propName] = nativeEvent[propName];
          }
        }
      }

      var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
      if (defaultPrevented) {
        this.isDefaultPrevented = functionThatReturnsTrue;
      } else {
        this.isDefaultPrevented = functionThatReturnsFalse;
      }
      this.isPropagationStopped = functionThatReturnsFalse;
      return this;
    }

    _assign(SyntheticEvent.prototype, {
      preventDefault: function () {
        this.defaultPrevented = true;
        var event = this.nativeEvent;
        if (!event) {
          return;
        }

        if (event.preventDefault) {
          event.preventDefault();
        } else if (typeof event.returnValue !== 'unknown') {
          event.returnValue = false;
        }
        this.isDefaultPrevented = functionThatReturnsTrue;
      },

      stopPropagation: function () {
        var event = this.nativeEvent;
        if (!event) {
          return;
        }

        if (event.stopPropagation) {
          event.stopPropagation();
        } else if (typeof event.cancelBubble !== 'unknown') {
          // The ChangeEventPlugin registers a "propertychange" event for
          // IE. This event does not support bubbling or cancelling, and
          // any references to cancelBubble throw "Member not found".  A
          // typeof check of "unknown" circumvents this issue (and is also
          // IE specific).
          event.cancelBubble = true;
        }

        this.isPropagationStopped = functionThatReturnsTrue;
      },

      /**
       * We release all dispatched `SyntheticEvent`s after each event loop, adding
       * them back into the pool. This allows a way to hold onto a reference that
       * won't be added back into the pool.
       */
      persist: function () {
        this.isPersistent = functionThatReturnsTrue;
      },

      /**
       * Checks if this event should be released back into the pool.
       *
       * @return {boolean} True if this should not be released, false otherwise.
       */
      isPersistent: functionThatReturnsFalse,

      /**
       * `PooledClass` looks for `destructor` on each instance it releases.
       */
      destructor: function () {
        var Interface = this.constructor.Interface;
        for (var propName in Interface) {
          {
            Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
          }
        }
        this.dispatchConfig = null;
        this._targetInst = null;
        this.nativeEvent = null;
        this.isDefaultPrevented = functionThatReturnsFalse;
        this.isPropagationStopped = functionThatReturnsFalse;
        this._dispatchListeners = null;
        this._dispatchInstances = null;
        {
          Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
          Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
          Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
          Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () {}));
          Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () {}));
        }
      }
    });

    SyntheticEvent.Interface = EventInterface;

    /**
     * Helper to reduce boilerplate when creating subclasses.
     */
    SyntheticEvent.extend = function (Interface) {
      var Super = this;

      var E = function () {};
      E.prototype = Super.prototype;
      var prototype = new E();

      function Class() {
        return Super.apply(this, arguments);
      }
      _assign(prototype, Class.prototype);
      Class.prototype = prototype;
      Class.prototype.constructor = Class;

      Class.Interface = _assign({}, Super.Interface, Interface);
      Class.extend = Super.extend;
      addEventPoolingTo(Class);

      return Class;
    };

    addEventPoolingTo(SyntheticEvent);

    /**
     * Helper to nullify syntheticEvent instance properties when destructing
     *
     * @param {String} propName
     * @param {?object} getVal
     * @return {object} defineProperty object
     */
    function getPooledWarningPropertyDefinition(propName, getVal) {
      var isFunction = typeof getVal === 'function';
      return {
        configurable: true,
        set: set,
        get: get
      };

      function set(val) {
        var action = isFunction ? 'setting the method' : 'setting the property';
        warn(action, 'This is effectively a no-op');
        return val;
      }

      function get() {
        var action = isFunction ? 'accessing the method' : 'accessing the property';
        var result = isFunction ? 'This is a no-op function' : 'This is set to null';
        warn(action, result);
        return getVal;
      }

      function warn(action, result) {
        warningWithoutStack$1(false, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result);
      }
    }

    function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
      var EventConstructor = this;
      if (EventConstructor.eventPool.length) {
        var instance = EventConstructor.eventPool.pop();
        EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
        return instance;
      }
      return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
    }

    function releasePooledEvent(event) {
      var EventConstructor = this;
      !(event instanceof EventConstructor) ? invariant(false, 'Trying to release an event instance into a pool of a different type.') : void 0;
      event.destructor();
      if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
        EventConstructor.eventPool.push(event);
      }
    }

    function addEventPoolingTo(EventConstructor) {
      EventConstructor.eventPool = [];
      EventConstructor.getPooled = getPooledEvent;
      EventConstructor.release = releasePooledEvent;
    }

    /**
     * @interface Event
     * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
     */
    var SyntheticCompositionEvent = SyntheticEvent.extend({
      data: null
    });

    /**
     * @interface Event
     * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
     *      /#events-inputevents
     */
    var SyntheticInputEvent = SyntheticEvent.extend({
      data: null
    });

    var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
    var START_KEYCODE = 229;

    var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;

    var documentMode = null;
    if (canUseDOM && 'documentMode' in document) {
      documentMode = document.documentMode;
    }

    // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.
    var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode;

    // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

    // Events and their corresponding property names.
    var eventTypes = {
      beforeInput: {
        phasedRegistrationNames: {
          bubbled: 'onBeforeInput',
          captured: 'onBeforeInputCapture'
        },
        dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
      },
      compositionEnd: {
        phasedRegistrationNames: {
          bubbled: 'onCompositionEnd',
          captured: 'onCompositionEndCapture'
        },
        dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
      },
      compositionStart: {
        phasedRegistrationNames: {
          bubbled: 'onCompositionStart',
          captured: 'onCompositionStartCapture'
        },
        dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
      },
      compositionUpdate: {
        phasedRegistrationNames: {
          bubbled: 'onCompositionUpdate',
          captured: 'onCompositionUpdateCapture'
        },
        dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
      }
    };

    // Track whether we've ever handled a keypress on the space key.
    var hasSpaceKeypress = false;

    /**
     * Return whether a native keypress event is assumed to be a command.
     * This is required because Firefox fires `keypress` events for key commands
     * (cut, copy, select-all, etc.) even though no character is inserted.
     */
    function isKeypressCommand(nativeEvent) {
      return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
      // ctrlKey && altKey is equivalent to AltGr, and is not a command.
      !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }

    /**
     * Translate native top level events into event types.
     *
     * @param {string} topLevelType
     * @return {object}
     */
    function getCompositionEventType(topLevelType) {
      switch (topLevelType) {
        case TOP_COMPOSITION_START:
          return eventTypes.compositionStart;
        case TOP_COMPOSITION_END:
          return eventTypes.compositionEnd;
        case TOP_COMPOSITION_UPDATE:
          return eventTypes.compositionUpdate;
      }
    }

    /**
     * Does our fallback best-guess model think this event signifies that
     * composition has begun?
     *
     * @param {string} topLevelType
     * @param {object} nativeEvent
     * @return {boolean}
     */
    function isFallbackCompositionStart(topLevelType, nativeEvent) {
      return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
    }

    /**
     * Does our fallback mode think that this event is the end of composition?
     *
     * @param {string} topLevelType
     * @param {object} nativeEvent
     * @return {boolean}
     */
    function isFallbackCompositionEnd(topLevelType, nativeEvent) {
      switch (topLevelType) {
        case TOP_KEY_UP:
          // Command keys insert or clear IME input.
          return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
        case TOP_KEY_DOWN:
          // Expect IME keyCode on each keydown. If we get any other
          // code we must have exited earlier.
          return nativeEvent.keyCode !== START_KEYCODE;
        case TOP_KEY_PRESS:
        case TOP_MOUSE_DOWN:
        case TOP_BLUR:
          // Events are not possible without cancelling IME.
          return true;
        default:
          return false;
      }
    }

    /**
     * Google Input Tools provides composition data via a CustomEvent,
     * with the `data` property populated in the `detail` object. If this
     * is available on the event object, use it. If not, this is a plain
     * composition event and we have nothing special to extract.
     *
     * @param {object} nativeEvent
     * @return {?string}
     */
    function getDataFromCustomEvent(nativeEvent) {
      var detail = nativeEvent.detail;
      if (typeof detail === 'object' && 'data' in detail) {
        return detail.data;
      }
      return null;
    }

    /**
     * Check if a composition event was triggered by Korean IME.
     * Our fallback mode does not work well with IE's Korean IME,
     * so just use native composition events when Korean IME is used.
     * Although CompositionEvent.locale property is deprecated,
     * it is available in IE, where our fallback mode is enabled.
     *
     * @param {object} nativeEvent
     * @return {boolean}
     */
    function isUsingKoreanIME(nativeEvent) {
      return nativeEvent.locale === 'ko';
    }

    // Track the current IME composition status, if any.
    var isComposing = false;

    /**
     * @return {?object} A SyntheticCompositionEvent.
     */
    function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var eventType = void 0;
      var fallbackData = void 0;

      if (canUseCompositionEvent) {
        eventType = getCompositionEventType(topLevelType);
      } else if (!isComposing) {
        if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
          eventType = eventTypes.compositionStart;
        }
      } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionEnd;
      }

      if (!eventType) {
        return null;
      }

      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
        // The current composition is stored statically and must not be
        // overwritten while composition continues.
        if (!isComposing && eventType === eventTypes.compositionStart) {
          isComposing = initialize(nativeEventTarget);
        } else if (eventType === eventTypes.compositionEnd) {
          if (isComposing) {
            fallbackData = getData();
          }
        }
      }

      var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

      if (fallbackData) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = fallbackData;
      } else {
        var customData = getDataFromCustomEvent(nativeEvent);
        if (customData !== null) {
          event.data = customData;
        }
      }

      accumulateTwoPhaseDispatches(event);
      return event;
    }

    /**
     * @param {TopLevelType} topLevelType Number from `TopLevelType`.
     * @param {object} nativeEvent Native browser event.
     * @return {?string} The string corresponding to this `beforeInput` event.
     */
    function getNativeBeforeInputChars(topLevelType, nativeEvent) {
      switch (topLevelType) {
        case TOP_COMPOSITION_END:
          return getDataFromCustomEvent(nativeEvent);
        case TOP_KEY_PRESS:
          /**
           * If native `textInput` events are available, our goal is to make
           * use of them. However, there is a special case: the spacebar key.
           * In Webkit, preventing default on a spacebar `textInput` event
           * cancels character insertion, but it *also* causes the browser
           * to fall back to its default spacebar behavior of scrolling the
           * page.
           *
           * Tracking at:
           * https://code.google.com/p/chromium/issues/detail?id=355103
           *
           * To avoid this issue, use the keypress event as if no `textInput`
           * event is available.
           */
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return null;
          }

          hasSpaceKeypress = true;
          return SPACEBAR_CHAR;

        case TOP_TEXT_INPUT:
          // Record the characters to be added to the DOM.
          var chars = nativeEvent.data;

          // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately. Android Chrome
          // doesn't give us keycodes, so we need to ignore it.
          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return null;
          }

          return chars;

        default:
          // For other native event types, do nothing.
          return null;
      }
    }

    /**
     * For browsers that do not provide the `textInput` event, extract the
     * appropriate string to use for SyntheticInputEvent.
     *
     * @param {number} topLevelType Number from `TopLevelEventTypes`.
     * @param {object} nativeEvent Native browser event.
     * @return {?string} The fallback string for this `beforeInput` event.
     */
    function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
      // If we are currently composing (IME) and using a fallback to do so,
      // try to extract the composed characters from the fallback object.
      // If composition event is available, we extract a string only at
      // compositionevent, otherwise extract it at fallback events.
      if (isComposing) {
        if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
          var chars = getData();
          reset();
          isComposing = false;
          return chars;
        }
        return null;
      }

      switch (topLevelType) {
        case TOP_PASTE:
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          return null;
        case TOP_KEY_PRESS:
          /**
           * As of v27, Firefox may fire keypress events even when no character
           * will be inserted. A few possibilities:
           *
           * - `which` is `0`. Arrow keys, Esc key, etc.
           *
           * - `which` is the pressed key code, but no char is available.
           *   Ex: 'AltGr + d` in Polish. There is no modified character for
           *   this key combination and no character is inserted into the
           *   document, but FF fires the keypress for char code `100` anyway.
           *   No `input` event will occur.
           *
           * - `which` is the pressed key code, but a command combination is
           *   being used. Ex: `Cmd+C`. No character is inserted, and no
           *   `input` event will occur.
           */
          if (!isKeypressCommand(nativeEvent)) {
            // IE fires the `keypress` event when a user types an emoji via
            // Touch keyboard of Windows.  In such a case, the `char` property
            // holds an emoji character like `\uD83D\uDE0A`.  Because its length
            // is 2, the property `which` does not represent an emoji correctly.
            // In such a case, we directly return the `char` property instead of
            // using `which`.
            if (nativeEvent.char && nativeEvent.char.length > 1) {
              return nativeEvent.char;
            } else if (nativeEvent.which) {
              return String.fromCharCode(nativeEvent.which);
            }
          }
          return null;
        case TOP_COMPOSITION_END:
          return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
        default:
          return null;
      }
    }

    /**
     * Extract a SyntheticInputEvent for `beforeInput`, based on either native
     * `textInput` or fallback behavior.
     *
     * @return {?object} A SyntheticInputEvent.
     */
    function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var chars = void 0;

      if (canUseTextInputEvent) {
        chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
      } else {
        chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
      }

      // If no characters are being inserted, no BeforeInput event should
      // be fired.
      if (!chars) {
        return null;
      }

      var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

      event.data = chars;
      accumulateTwoPhaseDispatches(event);
      return event;
    }

    /**
     * Create an `onBeforeInput` event to match
     * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
     *
     * This event plugin is based on the native `textInput` event
     * available in Chrome, Safari, Opera, and IE. This event fires after
     * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
     *
     * `beforeInput` is spec'd but not implemented in any browsers, and
     * the `input` event does not provide any useful information about what has
     * actually been added, contrary to the spec. Thus, `textInput` is the best
     * available event to identify the characters that have actually been inserted
     * into the target node.
     *
     * This plugin is also responsible for emitting `composition` events, thus
     * allowing us to share composition fallback code for both `beforeInput` and
     * `composition` event types.
     */
    var BeforeInputEventPlugin = {
      eventTypes: eventTypes,

      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

        var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

        if (composition === null) {
          return beforeInput;
        }

        if (beforeInput === null) {
          return composition;
        }

        return [composition, beforeInput];
      }
    };

    // Use to restore controlled state after a change event has fired.

    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;

    function restoreStateOfTarget(target) {
      // We perform this translation at the end of the event loop so that we
      // always receive the correct fiber here
      var internalInstance = getInstanceFromNode(target);
      if (!internalInstance) {
        // Unmounted
        return;
      }
      !(typeof restoreImpl === 'function') ? invariant(false, 'setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
      restoreImpl(internalInstance.stateNode, internalInstance.type, props);
    }

    function setRestoreImplementation(impl) {
      restoreImpl = impl;
    }

    function enqueueStateRestore(target) {
      if (restoreTarget) {
        if (restoreQueue) {
          restoreQueue.push(target);
        } else {
          restoreQueue = [target];
        }
      } else {
        restoreTarget = target;
      }
    }

    function needsStateRestore() {
      return restoreTarget !== null || restoreQueue !== null;
    }

    function restoreStateIfNeeded() {
      if (!restoreTarget) {
        return;
      }
      var target = restoreTarget;
      var queuedTargets = restoreQueue;
      restoreTarget = null;
      restoreQueue = null;

      restoreStateOfTarget(target);
      if (queuedTargets) {
        for (var i = 0; i < queuedTargets.length; i++) {
          restoreStateOfTarget(queuedTargets[i]);
        }
      }
    }

    // Used as a way to call batchedUpdates when we don't have a reference to
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.

    // Defaults
    var _batchedUpdatesImpl = function (fn, bookkeeping) {
      return fn(bookkeeping);
    };
    var _interactiveUpdatesImpl = function (fn, a, b) {
      return fn(a, b);
    };
    var _flushInteractiveUpdatesImpl = function () {};

    var isBatching = false;
    function batchedUpdates(fn, bookkeeping) {
      if (isBatching) {
        // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(bookkeeping);
      }
      isBatching = true;
      try {
        return _batchedUpdatesImpl(fn, bookkeeping);
      } finally {
        // Here we wait until all updates have propagated, which is important
        // when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        // Then we restore state of any controlled component.
        isBatching = false;
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
          // If a controlled event was fired, we may need to restore the state of
          // the DOM node back to the controlled value. This is necessary when React
          // bails out of the update without touching the DOM.
          _flushInteractiveUpdatesImpl();
          restoreStateIfNeeded();
        }
      }
    }

    function interactiveUpdates(fn, a, b) {
      return _interactiveUpdatesImpl(fn, a, b);
    }



    function setBatchingImplementation(batchedUpdatesImpl, interactiveUpdatesImpl, flushInteractiveUpdatesImpl) {
      _batchedUpdatesImpl = batchedUpdatesImpl;
      _interactiveUpdatesImpl = interactiveUpdatesImpl;
      _flushInteractiveUpdatesImpl = flushInteractiveUpdatesImpl;
    }

    /**
     * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
     */
    var supportedInputTypes = {
      color: true,
      date: true,
      datetime: true,
      'datetime-local': true,
      email: true,
      month: true,
      number: true,
      password: true,
      range: true,
      search: true,
      tel: true,
      text: true,
      time: true,
      url: true,
      week: true
    };

    function isTextInputElement(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

      if (nodeName === 'input') {
        return !!supportedInputTypes[elem.type];
      }

      if (nodeName === 'textarea') {
        return true;
      }

      return false;
    }

    /**
     * HTML nodeType values that represent the type of the node
     */

    var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;

    /**
     * Gets the target node from a native browser event by accounting for
     * inconsistencies in browser DOM APIs.
     *
     * @param {object} nativeEvent Native browser event.
     * @return {DOMEventTarget} Target node.
     */
    function getEventTarget(nativeEvent) {
      // Fallback to nativeEvent.srcElement for IE9
      // https://github.com/facebook/react/issues/12506
      var target = nativeEvent.target || nativeEvent.srcElement || window;

      // Normalize SVG <use> element events #4963
      if (target.correspondingUseElement) {
        target = target.correspondingUseElement;
      }

      // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
      // @see http://www.quirksmode.org/js/events_properties.html
      return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }

    /**
     * Checks if an event is supported in the current execution environment.
     *
     * NOTE: This will not work correctly for non-generic events such as `change`,
     * `reset`, `load`, `error`, and `select`.
     *
     * Borrows from Modernizr.
     *
     * @param {string} eventNameSuffix Event name, e.g. "click".
     * @return {boolean} True if the event is supported.
     * @internal
     * @license Modernizr 3.0.0pre (Custom Build) | MIT
     */
    function isEventSupported(eventNameSuffix) {
      if (!canUseDOM) {
        return false;
      }

      var eventName = 'on' + eventNameSuffix;
      var isSupported = eventName in document;

      if (!isSupported) {
        var element = document.createElement('div');
        element.setAttribute(eventName, 'return;');
        isSupported = typeof element[eventName] === 'function';
      }

      return isSupported;
    }

    function isCheckable(elem) {
      var type = elem.type;
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
    }

    function getTracker(node) {
      return node._valueTracker;
    }

    function detachTracker(node) {
      node._valueTracker = null;
    }

    function getValueFromNode(node) {
      var value = '';
      if (!node) {
        return value;
      }

      if (isCheckable(node)) {
        value = node.checked ? 'true' : 'false';
      } else {
        value = node.value;
      }

      return value;
    }

    function trackValueOnNode(node) {
      var valueField = isCheckable(node) ? 'checked' : 'value';
      var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

      var currentValue = '' + node[valueField];

      // if someone has already defined a value or Safari, then bail
      // and don't track value will cause over reporting of changes,
      // but it's better then a hard failure
      // (needed for certain tests that spyOn input values and Safari)
      if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
        return;
      }
      var get = descriptor.get,
          set = descriptor.set;

      Object.defineProperty(node, valueField, {
        configurable: true,
        get: function () {
          return get.call(this);
        },
        set: function (value) {
          currentValue = '' + value;
          set.call(this, value);
        }
      });
      // We could've passed this the first time
      // but it triggers a bug in IE11 and Edge 14/15.
      // Calling defineProperty() again should be equivalent.
      // https://github.com/facebook/react/issues/11768
      Object.defineProperty(node, valueField, {
        enumerable: descriptor.enumerable
      });

      var tracker = {
        getValue: function () {
          return currentValue;
        },
        setValue: function (value) {
          currentValue = '' + value;
        },
        stopTracking: function () {
          detachTracker(node);
          delete node[valueField];
        }
      };
      return tracker;
    }

    function track(node) {
      if (getTracker(node)) {
        return;
      }

      // TODO: Once it's just Fiber we can move this to node._wrapperState
      node._valueTracker = trackValueOnNode(node);
    }

    function updateValueIfChanged(node) {
      if (!node) {
        return false;
      }

      var tracker = getTracker(node);
      // if there is no tracker at this point it's unlikely
      // that trying again will succeed
      if (!tracker) {
        return true;
      }

      var lastValue = tracker.getValue();
      var nextValue = getValueFromNode(node);
      if (nextValue !== lastValue) {
        tracker.setValue(nextValue);
        return true;
      }
      return false;
    }

    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

    var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

    var describeComponentFrame = function (name, source, ownerName) {
      var sourceInfo = '';
      if (source) {
        var path = source.fileName;
        var fileName = path.replace(BEFORE_SLASH_RE, '');
        {
          // In DEV, include code for a common special case:
          // prefer "folder/index.js" instead of just "index.js".
          if (/^index\./.test(fileName)) {
            var match = path.match(BEFORE_SLASH_RE);
            if (match) {
              var pathBeforeSlash = match[1];
              if (pathBeforeSlash) {
                var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                fileName = folderName + '/' + fileName;
              }
            }
          }
        }
        sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
      } else if (ownerName) {
        sourceInfo = ' (created by ' + ownerName + ')';
      }
      return '\n    in ' + (name || 'Unknown') + sourceInfo;
    };

    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;

    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;

    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';

    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== 'object') {
        return null;
      }
      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }
      return null;
    }

    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;

    function refineResolvedLazyComponent(lazyComponent) {
      return lazyComponent._status === Resolved ? lazyComponent._result : null;
    }

    function getWrappedName(outerType, innerType, wrapperName) {
      var functionName = innerType.displayName || innerType.name || '';
      return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
    }

    function getComponentName(type) {
      if (type == null) {
        // Host root, text node or just invalid type.
        return null;
      }
      {
        if (typeof type.tag === 'number') {
          warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }
      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }
      if (typeof type === 'string') {
        return type;
      }
      switch (type) {
        case REACT_CONCURRENT_MODE_TYPE:
          return 'ConcurrentMode';
        case REACT_FRAGMENT_TYPE:
          return 'Fragment';
        case REACT_PORTAL_TYPE:
          return 'Portal';
        case REACT_PROFILER_TYPE:
          return 'Profiler';
        case REACT_STRICT_MODE_TYPE:
          return 'StrictMode';
        case REACT_SUSPENSE_TYPE:
          return 'Suspense';
      }
      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return 'Context.Consumer';
          case REACT_PROVIDER_TYPE:
            return 'Context.Provider';
          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, 'ForwardRef');
          case REACT_MEMO_TYPE:
            return getComponentName(type.type);
          case REACT_LAZY_TYPE:
            {
              var thenable = type;
              var resolvedThenable = refineResolvedLazyComponent(thenable);
              if (resolvedThenable) {
                return getComponentName(resolvedThenable);
              }
            }
        }
      }
      return null;
    }

    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

    function describeFiber(fiber) {
      switch (fiber.tag) {
        case IndeterminateComponent:
        case LazyComponent:
        case FunctionComponent:
        case ClassComponent:
        case HostComponent:
        case Mode:
        case SuspenseComponent:
          var owner = fiber._debugOwner;
          var source = fiber._debugSource;
          var name = getComponentName(fiber.type);
          var ownerName = null;
          if (owner) {
            ownerName = getComponentName(owner.type);
          }
          return describeComponentFrame(name, source, ownerName);
        default:
          return '';
      }
    }

    function getStackByFiberInDevAndProd(workInProgress) {
      var info = '';
      var node = workInProgress;
      do {
        info += describeFiber(node);
        node = node.return;
      } while (node);
      return info;
    }

    var current = null;
    var phase = null;

    function getCurrentFiberOwnerNameInDevOrNull() {
      {
        if (current === null) {
          return null;
        }
        var owner = current._debugOwner;
        if (owner !== null && typeof owner !== 'undefined') {
          return getComponentName(owner.type);
        }
      }
      return null;
    }

    function getCurrentFiberStackInDev() {
      {
        if (current === null) {
          return '';
        }
        // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.
        return getStackByFiberInDevAndProd(current);
      }
      return '';
    }

    function resetCurrentFiber() {
      {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        phase = null;
      }
    }

    function setCurrentFiber(fiber) {
      {
        ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
        current = fiber;
        phase = null;
      }
    }

    function setCurrentPhase(lifeCyclePhase) {
      {
        phase = lifeCyclePhase;
      }
    }

    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var warning = warningWithoutStack$1;

    {
      warning = function (condition, format) {
        if (condition) {
          return;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        // eslint-disable-next-line react-internal/warning-and-invariant-args

        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
      };
    }

    var warning$1 = warning;

    // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.
    var RESERVED = 0;

    // A simple string attribute.
    // Attributes that aren't in the whitelist are presumed to have this type.
    var STRING = 1;

    // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.
    var BOOLEANISH_STRING = 2;

    // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    var BOOLEAN = 3;

    // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.
    var OVERLOADED_BOOLEAN = 4;

    // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.
    var NUMERIC = 5;

    // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.
    var POSITIVE_NUMERIC = 6;

    /* eslint-disable max-len */
    var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
    /* eslint-enable max-len */
    var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';


    var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');

    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var illegalAttributeNameCache = {};
    var validatedAttributeNameCache = {};

    function isAttributeNameSafe(attributeName) {
      if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
        return true;
      }
      if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
        return false;
      }
      if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
        validatedAttributeNameCache[attributeName] = true;
        return true;
      }
      illegalAttributeNameCache[attributeName] = true;
      {
        warning$1(false, 'Invalid attribute name: `%s`', attributeName);
      }
      return false;
    }

    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null) {
        return propertyInfo.type === RESERVED;
      }
      if (isCustomComponentTag) {
        return false;
      }
      if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
        return true;
      }
      return false;
    }

    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null && propertyInfo.type === RESERVED) {
        return false;
      }
      switch (typeof value) {
        case 'function':
        // $FlowIssue symbol is perfectly valid here
        case 'symbol':
          // eslint-disable-line
          return true;
        case 'boolean':
          {
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              return !propertyInfo.acceptsBooleans;
            } else {
              var prefix = name.toLowerCase().slice(0, 5);
              return prefix !== 'data-' && prefix !== 'aria-';
            }
          }
        default:
          return false;
      }
    }

    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
      if (value === null || typeof value === 'undefined') {
        return true;
      }
      if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
        return true;
      }
      if (isCustomComponentTag) {
        return false;
      }
      if (propertyInfo !== null) {
        switch (propertyInfo.type) {
          case BOOLEAN:
            return !value;
          case OVERLOADED_BOOLEAN:
            return value === false;
          case NUMERIC:
            return isNaN(value);
          case POSITIVE_NUMERIC:
            return isNaN(value) || value < 1;
        }
      }
      return false;
    }

    function getPropertyInfo(name) {
      return properties.hasOwnProperty(name) ? properties[name] : null;
    }

    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace) {
      this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
      this.attributeName = attributeName;
      this.attributeNamespace = attributeNamespace;
      this.mustUseProperty = mustUseProperty;
      this.propertyName = name;
      this.type = type;
    }

    // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.
    var properties = {};

    // These props are reserved by React. They shouldn't be written to the DOM.
    ['children', 'dangerouslySetInnerHTML',
    // TODO: This prevents the assignment of defaultValue to regular
    // elements (not just inputs). Now that ReactDOMInput assigns to the
    // defaultValue property -- do we need this?
    'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    );

    // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.
    [['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
      var name = _ref[0],
          attributeName = _ref[1];

      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, // attributeName
      null);
    } // attributeNamespace
    );

    // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    ['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
      name.toLowerCase(), // attributeName
      null);
    } // attributeNamespace
    );

    // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.
    ['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    );

    // These are HTML boolean attributes.
    ['allowFullScreen', 'async',
    // Note: there is a special case that prevents it from being written to the DOM
    // on the client side because the browsers are inconsistent. Instead we call focus().
    'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless',
    // Microdata
    'itemScope'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
      name.toLowerCase(), // attributeName
      null);
    } // attributeNamespace
    );

    // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.
    ['checked',
    // Note: `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`. We have special logic for handling this.
    'multiple', 'muted', 'selected'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    );

    // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.
    ['capture', 'download'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    );

    // These are HTML attributes that must be positive numbers.
    ['cols', 'rows', 'size', 'span'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    );

    // These are HTML attributes that must be numbers.
    ['rowSpan', 'start'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
      name.toLowerCase(), // attributeName
      null);
    } // attributeNamespace
    );

    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function (token) {
      return token[1].toUpperCase();
    };

    // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML whitelist.
    // Some of these attributes can be hard to find. This list was created by
    // scrapping the MDN documentation.
    ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height'].forEach(function (attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, null);
    } // attributeNamespace
    );

    // String SVG attributes with the xlink namespace.
    ['xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'].forEach(function (attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, 'http://www.w3.org/1999/xlink');
    });

    // String SVG attributes with the xml namespace.
    ['xml:base', 'xml:lang', 'xml:space'].forEach(function (attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, 'http://www.w3.org/XML/1998/namespace');
    });

    // Special case: this attribute exists both in HTML and SVG.
    // Its "tabindex" attribute name is case-sensitive in SVG so we can't just use
    // its React `tabIndex` name, like we do for attributes that exist only in HTML.
    properties.tabIndex = new PropertyInfoRecord('tabIndex', STRING, false, // mustUseProperty
    'tabindex', // attributeName
    null);

    /**
     * Get the value for a property on a node. Only used in DEV for SSR validation.
     * The "expected" argument is used as a hint of what the expected value is.
     * Some properties have multiple equivalent values.
     */
    function getValueForProperty(node, name, expected, propertyInfo) {
      {
        if (propertyInfo.mustUseProperty) {
          var propertyName = propertyInfo.propertyName;

          return node[propertyName];
        } else {
          var attributeName = propertyInfo.attributeName;

          var stringValue = null;

          if (propertyInfo.type === OVERLOADED_BOOLEAN) {
            if (node.hasAttribute(attributeName)) {
              var value = node.getAttribute(attributeName);
              if (value === '') {
                return true;
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return value;
              }
              if (value === '' + expected) {
                return expected;
              }
              return value;
            }
          } else if (node.hasAttribute(attributeName)) {
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              // We had an attribute but shouldn't have had one, so read it
              // for the error message.
              return node.getAttribute(attributeName);
            }
            if (propertyInfo.type === BOOLEAN) {
              // If this was a boolean, it doesn't matter what the value is
              // the fact that we have it is the same as the expected.
              return expected;
            }
            // Even if this property uses a namespace we use getAttribute
            // because we assume its namespaced name is the same as our config.
            // To use getAttributeNS we need the local name which we don't have
            // in our config atm.
            stringValue = node.getAttribute(attributeName);
          }

          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return stringValue === null ? expected : stringValue;
          } else if (stringValue === '' + expected) {
            return expected;
          } else {
            return stringValue;
          }
        }
      }
    }

    /**
     * Get the value for a attribute on a node. Only used in DEV for SSR validation.
     * The third argument is used as a hint of what the expected value is. Some
     * attributes have multiple equivalent values.
     */
    function getValueForAttribute(node, name, expected) {
      {
        if (!isAttributeNameSafe(name)) {
          return;
        }
        if (!node.hasAttribute(name)) {
          return expected === undefined ? undefined : null;
        }
        var value = node.getAttribute(name);
        if (value === '' + expected) {
          return expected;
        }
        return value;
      }
    }

    /**
     * Sets the value for a property on a node.
     *
     * @param {DOMElement} node
     * @param {string} name
     * @param {*} value
     */
    function setValueForProperty(node, name, value, isCustomComponentTag) {
      var propertyInfo = getPropertyInfo(name);
      if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
        return;
      }
      if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
        value = null;
      }
      // If the prop isn't in the special list, treat it as a simple attribute.
      if (isCustomComponentTag || propertyInfo === null) {
        if (isAttributeNameSafe(name)) {
          var _attributeName = name;
          if (value === null) {
            node.removeAttribute(_attributeName);
          } else {
            node.setAttribute(_attributeName, '' + value);
          }
        }
        return;
      }
      var mustUseProperty = propertyInfo.mustUseProperty;

      if (mustUseProperty) {
        var propertyName = propertyInfo.propertyName;

        if (value === null) {
          var type = propertyInfo.type;

          node[propertyName] = type === BOOLEAN ? false : '';
        } else {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propertyName] = value;
        }
        return;
      }
      // The rest are treated as attributes with special cases.
      var attributeName = propertyInfo.attributeName,
          attributeNamespace = propertyInfo.attributeNamespace;

      if (value === null) {
        node.removeAttribute(attributeName);
      } else {
        var _type = propertyInfo.type;

        var attributeValue = void 0;
        if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
          attributeValue = '';
        } else {
          // `setAttribute` with objects becomes only `[object]` in IE8/9,
          // ('' + value) makes it output the correct toString()-value.
          attributeValue = '' + value;
        }
        if (attributeNamespace) {
          node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
        } else {
          node.setAttribute(attributeName, attributeValue);
        }
      }
    }

    // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.
    function toString(value) {
      return '' + value;
    }

    function getToStringValue(value) {
      switch (typeof value) {
        case 'boolean':
        case 'number':
        case 'object':
        case 'string':
        case 'undefined':
          return value;
        default:
          // function, symbol are assigned as empty strings
          return '';
      }
    }

    var ReactDebugCurrentFrame$1 = null;

    var ReactControlledValuePropTypes = {
      checkPropTypes: null
    };

    {
      ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

      var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
      };

      var propTypes = {
        value: function (props, propName, componentName) {
          if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null) {
            return null;
          }
          return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
        },
        checked: function (props, propName, componentName) {
          if (props.onChange || props.readOnly || props.disabled || props[propName] == null) {
            return null;
          }
          return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
        }
      };

      /**
       * Provide a linked `value` attribute for controlled forms. You should not use
       * this outside of the ReactDOM controlled form components.
       */
      ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {
        checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$1.getStackAddendum);
      };
    }

    // TODO: direct imports like some-package/src/* are bad. Fix me.
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;

    function isControlled(props) {
      var usesChecked = props.type === 'checkbox' || props.type === 'radio';
      return usesChecked ? props.checked != null : props.value != null;
    }

    /**
     * Implements an <input> host component that allows setting these optional
     * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
     *
     * If `checked` or `value` are not supplied (or null/undefined), user actions
     * that affect the checked state or value will trigger updates to the element.
     *
     * If they are supplied (and not null/undefined), the rendered element will not
     * trigger updates to the element. Instead, the props must change in order for
     * the rendered element to be updated.
     *
     * The rendered element will be initialized as unchecked (or `defaultChecked`)
     * with an empty value (or `defaultValue`).
     *
     * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
     */

    function getHostProps(element, props) {
      var node = element;
      var checked = props.checked;

      var hostProps = _assign({}, props, {
        defaultChecked: undefined,
        defaultValue: undefined,
        value: undefined,
        checked: checked != null ? checked : node._wrapperState.initialChecked
      });

      return hostProps;
    }

    function initWrapperState(element, props) {
      {
        ReactControlledValuePropTypes.checkPropTypes('input', props);

        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
          warning$1(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
          didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
          warning$1(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
          didWarnValueDefaultValue = true;
        }
      }

      var node = element;
      var defaultValue = props.defaultValue == null ? '' : props.defaultValue;

      node._wrapperState = {
        initialChecked: props.checked != null ? props.checked : props.defaultChecked,
        initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
        controlled: isControlled(props)
      };
    }

    function updateChecked(element, props) {
      var node = element;
      var checked = props.checked;
      if (checked != null) {
        setValueForProperty(node, 'checked', checked, false);
      }
    }

    function updateWrapper(element, props) {
      var node = element;
      {
        var _controlled = isControlled(props);

        if (!node._wrapperState.controlled && _controlled && !didWarnUncontrolledToControlled) {
          warning$1(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
          didWarnUncontrolledToControlled = true;
        }
        if (node._wrapperState.controlled && !_controlled && !didWarnControlledToUncontrolled) {
          warning$1(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
          didWarnControlledToUncontrolled = true;
        }
      }

      updateChecked(element, props);

      var value = getToStringValue(props.value);
      var type = props.type;

      if (value != null) {
        if (type === 'number') {
          if (value === 0 && node.value === '' ||
          // We explicitly want to coerce to number here if possible.
          // eslint-disable-next-line
          node.value != value) {
            node.value = toString(value);
          }
        } else if (node.value !== toString(value)) {
          node.value = toString(value);
        }
      } else if (type === 'submit' || type === 'reset') {
        // Submit/reset inputs need the attribute removed completely to avoid
        // blank-text buttons.
        node.removeAttribute('value');
        return;
      }

      {
        // When syncing the value attribute, the value comes from a cascade of
        // properties:
        //  1. The value React property
        //  2. The defaultValue React property
        //  3. Otherwise there should be no change
        if (props.hasOwnProperty('value')) {
          setDefaultValue(node, props.type, value);
        } else if (props.hasOwnProperty('defaultValue')) {
          setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        }
      }

      {
        // When syncing the checked attribute, it only changes when it needs
        // to be removed, such as transitioning from a checkbox into a text input
        if (props.checked == null && props.defaultChecked != null) {
          node.defaultChecked = !!props.defaultChecked;
        }
      }
    }

    function postMountWrapper(element, props, isHydrating) {
      var node = element;

      // Do not assign value if it is already set. This prevents user text input
      // from being lost during SSR hydration.
      if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
        var type = props.type;
        var isButton = type === 'submit' || type === 'reset';

        // Avoid setting value attribute on submit/reset inputs as it overrides the
        // default value provided by the browser. See: #12872
        if (isButton && (props.value === undefined || props.value === null)) {
          return;
        }

        var _initialValue = toString(node._wrapperState.initialValue);

        // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.
        if (!isHydrating) {
          {
            // When syncing the value attribute, the value property should use
            // the wrapperState._initialValue property. This uses:
            //
            //   1. The value React property when present
            //   2. The defaultValue React property when present
            //   3. An empty string
            if (_initialValue !== node.value) {
              node.value = _initialValue;
            }
          }
        }

        {
          // Otherwise, the value attribute is synchronized to the property,
          // so we assign defaultValue to the same thing as the value property
          // assignment step above.
          node.defaultValue = _initialValue;
        }
      }

      // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
      // this is needed to work around a chrome bug where setting defaultChecked
      // will sometimes influence the value of checked (even after detachment).
      // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
      // We need to temporarily unset name to avoid disrupting radio button groups.
      var name = node.name;
      if (name !== '') {
        node.name = '';
      }

      {
        // When syncing the checked attribute, both the checked property and
        // attribute are assigned at the same time using defaultChecked. This uses:
        //
        //   1. The checked React property when present
        //   2. The defaultChecked React property when present
        //   3. Otherwise, false
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
      }

      if (name !== '') {
        node.name = name;
      }
    }

    function restoreControlledState(element, props) {
      var node = element;
      updateWrapper(node, props);
      updateNamedCousins(node, props);
    }

    function updateNamedCousins(rootNode, props) {
      var name = props.name;
      if (props.type === 'radio' && name != null) {
        var queryRoot = rootNode;

        while (queryRoot.parentNode) {
          queryRoot = queryRoot.parentNode;
        }

        // If `rootNode.form` was non-null, then we could try `form.elements`,
        // but that sometimes behaves strangely in IE8. We could also try using
        // `form.getElementsByName`, but that will only return direct children
        // and won't include inputs that use the HTML5 `form=` attribute. Since
        // the input might not even be in a form. It might not even be in the
        // document. Let's just use the local `querySelectorAll` to ensure we don't
        // miss anything.
        var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

        for (var i = 0; i < group.length; i++) {
          var otherNode = group[i];
          if (otherNode === rootNode || otherNode.form !== rootNode.form) {
            continue;
          }
          // This will throw if radio buttons rendered by different copies of React
          // and the same name are rendered into the same form (same as #1939).
          // That's probably okay; we don't support it just as we don't support
          // mixing React radio buttons with non-React ones.
          var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
          !otherProps ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : void 0;

          // We need update the tracked value on the named cousin since the value
          // was changed but the input saw no event or value set
          updateValueIfChanged(otherNode);

          // If this is a controlled radio button group, forcing the input that
          // was previously checked to update will cause it to be come re-checked
          // as appropriate.
          updateWrapper(otherNode, otherProps);
        }
      }
    }

    // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    //
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    //
    // https://github.com/facebook/react/issues/7253
    function setDefaultValue(node, type, value) {
      if (
      // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
      type !== 'number' || node.ownerDocument.activeElement !== node) {
        if (value == null) {
          node.defaultValue = toString(node._wrapperState.initialValue);
        } else if (node.defaultValue !== toString(value)) {
          node.defaultValue = toString(value);
        }
      }
    }

    var eventTypes$1 = {
      change: {
        phasedRegistrationNames: {
          bubbled: 'onChange',
          captured: 'onChangeCapture'
        },
        dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
      }
    };

    function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
      var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
      event.type = 'change';
      // Flag this event loop as needing state restore.
      enqueueStateRestore(target);
      accumulateTwoPhaseDispatches(event);
      return event;
    }
    /**
     * For IE shims
     */
    var activeElement = null;
    var activeElementInst = null;

    /**
     * SECTION: handle `change` event
     */
    function shouldUseChangeEvent(elem) {
      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }

    function manualDispatchChangeEvent(nativeEvent) {
      var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));

      // If change and propertychange bubbled, we'd just bind to it like all the
      // other events and have it go through ReactBrowserEventEmitter. Since it
      // doesn't, we manually listen for the events and so we have to enqueue and
      // process the abstract event manually.
      //
      // Batching is necessary here in order to ensure that all event handlers run
      // before the next rerender (including event handlers attached to ancestor
      // elements instead of directly on the input). Without this, controlled
      // components don't work properly in conjunction with event bubbling because
      // the component is rerendered and the value reverted before all the event
      // handlers can run. See https://github.com/facebook/react/issues/708.
      batchedUpdates(runEventInBatch, event);
    }

    function runEventInBatch(event) {
      runEventsInBatch(event);
    }

    function getInstIfValueChanged(targetInst) {
      var targetNode = getNodeFromInstance$1(targetInst);
      if (updateValueIfChanged(targetNode)) {
        return targetInst;
      }
    }

    function getTargetInstForChangeEvent(topLevelType, targetInst) {
      if (topLevelType === TOP_CHANGE) {
        return targetInst;
      }
    }

    /**
     * SECTION: handle `input` event
     */
    var isInputEventSupported = false;
    if (canUseDOM) {
      // IE9 claims to support the input event but fails to trigger it when
      // deleting text, so we ignore its input events.
      isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
    }

    /**
     * (For IE <=9) Starts tracking propertychange events on the passed-in element
     * and override the value property so that we can distinguish user events from
     * value changes in JS.
     */
    function startWatchingForValueChange(target, targetInst) {
      activeElement = target;
      activeElementInst = targetInst;
      activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }

    /**
     * (For IE <=9) Removes the event listeners from the currently-tracked element,
     * if any exists.
     */
    function stopWatchingForValueChange() {
      if (!activeElement) {
        return;
      }
      activeElement.detachEvent('onpropertychange', handlePropertyChange);
      activeElement = null;
      activeElementInst = null;
    }

    /**
     * (For IE <=9) Handles a propertychange event, sending a `change` event if
     * the value of the active element has changed.
     */
    function handlePropertyChange(nativeEvent) {
      if (nativeEvent.propertyName !== 'value') {
        return;
      }
      if (getInstIfValueChanged(activeElementInst)) {
        manualDispatchChangeEvent(nativeEvent);
      }
    }

    function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
      if (topLevelType === TOP_FOCUS) {
        // In IE9, propertychange fires for most input events but is buggy and
        // doesn't fire when text is deleted, but conveniently, selectionchange
        // appears to fire in all of the remaining cases so we catch those and
        // forward the event if the value has changed
        // In either case, we don't want to call the event handler if the value
        // is changed from JS so we redefine a setter for `.value` that updates
        // our activeElementValue variable, allowing us to ignore those changes
        //
        // stopWatching() should be a noop here but we call it just in case we
        // missed a blur event somehow.
        stopWatchingForValueChange();
        startWatchingForValueChange(target, targetInst);
      } else if (topLevelType === TOP_BLUR) {
        stopWatchingForValueChange();
      }
    }

    // For IE8 and IE9.
    function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
      if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
        // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
      }
    }

    /**
     * SECTION: handle `click` event
     */
    function shouldUseClickEvent(elem) {
      // Use the `click` event to detect changes to checkbox and radio inputs.
      // This approach works across all browsers, whereas `change` does not fire
      // until `blur` in IE8.
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }

    function getTargetInstForClickEvent(topLevelType, targetInst) {
      if (topLevelType === TOP_CLICK) {
        return getInstIfValueChanged(targetInst);
      }
    }

    function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
      if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
        return getInstIfValueChanged(targetInst);
      }
    }

    function handleControlledInputBlur(node) {
      var state = node._wrapperState;

      if (!state || !state.controlled || node.type !== 'number') {
        return;
      }

      {
        // If controlled, assign the value attribute to the current value on blur
        setDefaultValue(node, 'number', node.value);
      }
    }

    /**
     * This plugin creates an `onChange` event that normalizes change events
     * across form elements. This event fires at a time when it's possible to
     * change the element's value without seeing a flicker.
     *
     * Supported elements are:
     * - input (see `isTextInputElement`)
     * - textarea
     * - select
     */
    var ChangeEventPlugin = {
      eventTypes: eventTypes$1,

      _isInputEventSupported: isInputEventSupported,

      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

        var getTargetInstFunc = void 0,
            handleEventFunc = void 0;
        if (shouldUseChangeEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForChangeEvent;
        } else if (isTextInputElement(targetNode)) {
          if (isInputEventSupported) {
            getTargetInstFunc = getTargetInstForInputOrChangeEvent;
          } else {
            getTargetInstFunc = getTargetInstForInputEventPolyfill;
            handleEventFunc = handleEventsForInputEventPolyfill;
          }
        } else if (shouldUseClickEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForClickEvent;
        }

        if (getTargetInstFunc) {
          var inst = getTargetInstFunc(topLevelType, targetInst);
          if (inst) {
            var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
            return event;
          }
        }

        if (handleEventFunc) {
          handleEventFunc(topLevelType, targetNode, targetInst);
        }

        // When blurring, set the value attribute for number inputs
        if (topLevelType === TOP_BLUR) {
          handleControlledInputBlur(targetNode);
        }
      }
    };

    /**
     * Module that is injectable into `EventPluginHub`, that specifies a
     * deterministic ordering of `EventPlugin`s. A convenient way to reason about
     * plugins, without having to package every one of them. This is better than
     * having plugins be ordered in the same order that they are injected because
     * that ordering would be influenced by the packaging order.
     * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
     * preventing default on events is convenient in `SimpleEventPlugin` handlers.
     */
    var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

    var SyntheticUIEvent = SyntheticEvent.extend({
      view: null,
      detail: null
    });

    var modifierKeyToProp = {
      Alt: 'altKey',
      Control: 'ctrlKey',
      Meta: 'metaKey',
      Shift: 'shiftKey'
    };

    // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
    // getModifierState. If getModifierState is not supported, we map it to a set of
    // modifier keys exposed by the event. In this case, Lock-keys are not supported.
    /**
     * Translation from modifier key to the associated property in the event.
     * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
     */

    function modifierStateGetter(keyArg) {
      var syntheticEvent = this;
      var nativeEvent = syntheticEvent.nativeEvent;
      if (nativeEvent.getModifierState) {
        return nativeEvent.getModifierState(keyArg);
      }
      var keyProp = modifierKeyToProp[keyArg];
      return keyProp ? !!nativeEvent[keyProp] : false;
    }

    function getEventModifierState(nativeEvent) {
      return modifierStateGetter;
    }

    var previousScreenX = 0;
    var previousScreenY = 0;
    // Use flags to signal movementX/Y has already been set
    var isMovementXSet = false;
    var isMovementYSet = false;

    /**
     * @interface MouseEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var SyntheticMouseEvent = SyntheticUIEvent.extend({
      screenX: null,
      screenY: null,
      clientX: null,
      clientY: null,
      pageX: null,
      pageY: null,
      ctrlKey: null,
      shiftKey: null,
      altKey: null,
      metaKey: null,
      getModifierState: getEventModifierState,
      button: null,
      buttons: null,
      relatedTarget: function (event) {
        return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
      },
      movementX: function (event) {
        if ('movementX' in event) {
          return event.movementX;
        }

        var screenX = previousScreenX;
        previousScreenX = event.screenX;

        if (!isMovementXSet) {
          isMovementXSet = true;
          return 0;
        }

        return event.type === 'mousemove' ? event.screenX - screenX : 0;
      },
      movementY: function (event) {
        if ('movementY' in event) {
          return event.movementY;
        }

        var screenY = previousScreenY;
        previousScreenY = event.screenY;

        if (!isMovementYSet) {
          isMovementYSet = true;
          return 0;
        }

        return event.type === 'mousemove' ? event.screenY - screenY : 0;
      }
    });

    /**
     * @interface PointerEvent
     * @see http://www.w3.org/TR/pointerevents/
     */
    var SyntheticPointerEvent = SyntheticMouseEvent.extend({
      pointerId: null,
      width: null,
      height: null,
      pressure: null,
      tangentialPressure: null,
      tiltX: null,
      tiltY: null,
      twist: null,
      pointerType: null,
      isPrimary: null
    });

    var eventTypes$2 = {
      mouseEnter: {
        registrationName: 'onMouseEnter',
        dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
      },
      mouseLeave: {
        registrationName: 'onMouseLeave',
        dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
      },
      pointerEnter: {
        registrationName: 'onPointerEnter',
        dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
      },
      pointerLeave: {
        registrationName: 'onPointerLeave',
        dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
      }
    };

    var EnterLeaveEventPlugin = {
      eventTypes: eventTypes$2,

      /**
       * For almost every interaction we care about, there will be both a top-level
       * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
       * we do not extract duplicate events. However, moving the mouse into the
       * browser from outside will not fire a `mouseout` event. In this case, we use
       * the `mouseover` top-level event.
       */
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
        var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;

        if (isOverEvent && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
          return null;
        }

        if (!isOutEvent && !isOverEvent) {
          // Must not be a mouse or pointer in or out - ignoring.
          return null;
        }

        var win = void 0;
        if (nativeEventTarget.window === nativeEventTarget) {
          // `nativeEventTarget` is probably a window object.
          win = nativeEventTarget;
        } else {
          // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
          var doc = nativeEventTarget.ownerDocument;
          if (doc) {
            win = doc.defaultView || doc.parentWindow;
          } else {
            win = window;
          }
        }

        var from = void 0;
        var to = void 0;
        if (isOutEvent) {
          from = targetInst;
          var related = nativeEvent.relatedTarget || nativeEvent.toElement;
          to = related ? getClosestInstanceFromNode(related) : null;
        } else {
          // Moving to a node from outside the window.
          from = null;
          to = targetInst;
        }

        if (from === to) {
          // Nothing pertains to our managed components.
          return null;
        }

        var eventInterface = void 0,
            leaveEventType = void 0,
            enterEventType = void 0,
            eventTypePrefix = void 0;

        if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
          eventInterface = SyntheticMouseEvent;
          leaveEventType = eventTypes$2.mouseLeave;
          enterEventType = eventTypes$2.mouseEnter;
          eventTypePrefix = 'mouse';
        } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
          eventInterface = SyntheticPointerEvent;
          leaveEventType = eventTypes$2.pointerLeave;
          enterEventType = eventTypes$2.pointerEnter;
          eventTypePrefix = 'pointer';
        }

        var fromNode = from == null ? win : getNodeFromInstance$1(from);
        var toNode = to == null ? win : getNodeFromInstance$1(to);

        var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
        leave.type = eventTypePrefix + 'leave';
        leave.target = fromNode;
        leave.relatedTarget = toNode;

        var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
        enter.type = eventTypePrefix + 'enter';
        enter.target = toNode;
        enter.relatedTarget = fromNode;

        accumulateEnterLeaveDispatches(leave, enter, from, to);

        return [leave, enter];
      }
    };

    /*eslint-disable no-self-compare */

    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

    /**
     * inlined Object.is polyfill to avoid requiring consumers ship their own
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
     */
    function is(x, y) {
      // SameValue algorithm
      if (x === y) {
        // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        // Added the nonzero y check to make Flow happy, but it is redundant
        return x !== 0 || y !== 0 || 1 / x === 1 / y;
      } else {
        // Step 6.a: NaN == NaN
        return x !== x && y !== y;
      }
    }

    /**
     * Performs equality by iterating through keys on an object and returning false
     * when any key has values which are not strictly equal between the arguments.
     * Returns true when the values of all keys are strictly equal.
     */
    function shallowEqual(objA, objB) {
      if (is(objA, objB)) {
        return true;
      }

      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
        return false;
      }

      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);

      if (keysA.length !== keysB.length) {
        return false;
      }

      // Test for A's keys different from B.
      for (var i = 0; i < keysA.length; i++) {
        if (!hasOwnProperty$1.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
          return false;
        }
      }

      return true;
    }

    /**
     * `ReactInstanceMap` maintains a mapping from a public facing stateful
     * instance (key) and the internal representation (value). This allows public
     * methods to accept the user facing instance as an argument and map them back
     * to internal methods.
     *
     * Note that this module is currently shared and assumed to be stateless.
     * If this becomes an actual Map, that will break.
     */

    /**
     * This API should be called `delete` but we'd have to make sure to always
     * transform these to strings for IE support. When this transform is fully
     * supported we can rename it.
     */


    function get(key) {
      return key._reactInternalFiber;
    }

    function has(key) {
      return key._reactInternalFiber !== undefined;
    }

    function set(key, value) {
      key._reactInternalFiber = value;
    }

    // Don't change these two values. They're used by React Dev Tools.
    var NoEffect = /*              */0;
    var PerformedWork = /*         */1;

    // You can change the rest (and add more).
    var Placement = /*             */2;
    var Update = /*                */4;
    var PlacementAndUpdate = /*    */6;
    var Deletion = /*              */8;
    var ContentReset = /*          */16;
    var Callback = /*              */32;
    var DidCapture = /*            */64;
    var Ref = /*                   */128;
    var Snapshot = /*              */256;

    // Passive & Update & Callback & Ref & Snapshot
    var LifecycleEffectMask = /*   */932;

    // Union of all host effects
    var HostEffectMask = /*        */1023;

    var Incomplete = /*            */1024;
    var ShouldCapture = /*         */2048;

    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;

    var MOUNTING = 1;
    var MOUNTED = 2;
    var UNMOUNTED = 3;

    function isFiberMountedImpl(fiber) {
      var node = fiber;
      if (!fiber.alternate) {
        // If there is no alternate, this might be a new tree that isn't inserted
        // yet. If it is, then it will have a pending insertion effect on it.
        if ((node.effectTag & Placement) !== NoEffect) {
          return MOUNTING;
        }
        while (node.return) {
          node = node.return;
          if ((node.effectTag & Placement) !== NoEffect) {
            return MOUNTING;
          }
        }
      } else {
        while (node.return) {
          node = node.return;
        }
      }
      if (node.tag === HostRoot) {
        // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return MOUNTED;
      }
      // If we didn't hit the root, that means that we're in an disconnected tree
      // that has been unmounted.
      return UNMOUNTED;
    }

    function isFiberMounted(fiber) {
      return isFiberMountedImpl(fiber) === MOUNTED;
    }

    function isMounted(component) {
      {
        var owner = ReactCurrentOwner$1.current;
        if (owner !== null && owner.tag === ClassComponent) {
          var ownerFiber = owner;
          var instance = ownerFiber.stateNode;
          !instance._warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component') : void 0;
          instance._warnedAboutRefsInRender = true;
        }
      }

      var fiber = get(component);
      if (!fiber) {
        return false;
      }
      return isFiberMountedImpl(fiber) === MOUNTED;
    }

    function assertIsMounted(fiber) {
      !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
    }

    function findCurrentFiberUsingSlowPath(fiber) {
      var alternate = fiber.alternate;
      if (!alternate) {
        // If there is no alternate, then we only need to check if it is mounted.
        var state = isFiberMountedImpl(fiber);
        !(state !== UNMOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
        if (state === MOUNTING) {
          return null;
        }
        return fiber;
      }
      // If we have two possible branches, we'll walk backwards up to the root
      // to see what path the root points to. On the way we may hit one of the
      // special cases and we'll deal with them.
      var a = fiber;
      var b = alternate;
      while (true) {
        var parentA = a.return;
        var parentB = parentA ? parentA.alternate : null;
        if (!parentA || !parentB) {
          // We're at the root.
          break;
        }

        // If both copies of the parent fiber point to the same child, we can
        // assume that the child is current. This happens when we bailout on low
        // priority: the bailed out fiber's child reuses the current child.
        if (parentA.child === parentB.child) {
          var child = parentA.child;
          while (child) {
            if (child === a) {
              // We've determined that A is the current branch.
              assertIsMounted(parentA);
              return fiber;
            }
            if (child === b) {
              // We've determined that B is the current branch.
              assertIsMounted(parentA);
              return alternate;
            }
            child = child.sibling;
          }
          // We should never have an alternate for any mounting node. So the only
          // way this could possibly happen is if this was unmounted, if at all.
          invariant(false, 'Unable to find node on an unmounted component.');
        }

        if (a.return !== b.return) {
          // The return pointer of A and the return pointer of B point to different
          // fibers. We assume that return pointers never criss-cross, so A must
          // belong to the child set of A.return, and B must belong to the child
          // set of B.return.
          a = parentA;
          b = parentB;
        } else {
          // The return pointers point to the same fiber. We'll have to use the
          // default, slow path: scan the child sets of each parent alternate to see
          // which child belongs to which set.
          //
          // Search parent A's child set
          var didFindChild = false;
          var _child = parentA.child;
          while (_child) {
            if (_child === a) {
              didFindChild = true;
              a = parentA;
              b = parentB;
              break;
            }
            if (_child === b) {
              didFindChild = true;
              b = parentA;
              a = parentB;
              break;
            }
            _child = _child.sibling;
          }
          if (!didFindChild) {
            // Search parent B's child set
            _child = parentB.child;
            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentB;
                b = parentA;
                break;
              }
              if (_child === b) {
                didFindChild = true;
                b = parentB;
                a = parentA;
                break;
              }
              _child = _child.sibling;
            }
            !didFindChild ? invariant(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.') : void 0;
          }
        }

        !(a.alternate === b) ? invariant(false, 'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      }
      // If the root is not a host container, we're in a disconnected tree. I.e.
      // unmounted.
      !(a.tag === HostRoot) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
      if (a.stateNode.current === a) {
        // We've determined that A is the current branch.
        return fiber;
      }
      // Otherwise B has to be current branch.
      return alternate;
    }

    function findCurrentHostFiber(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);
      if (!currentParent) {
        return null;
      }

      // Next we'll drill down this component to find the first HostComponent/Text.
      var node = currentParent;
      while (true) {
        if (node.tag === HostComponent || node.tag === HostText) {
          return node;
        } else if (node.child) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === currentParent) {
          return null;
        }
        while (!node.sibling) {
          if (!node.return || node.return === currentParent) {
            return null;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
      // Flow needs the return null here, but ESLint complains about it.
      // eslint-disable-next-line no-unreachable
      return null;
    }

    function findCurrentHostFiberWithNoPortals(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);
      if (!currentParent) {
        return null;
      }

      // Next we'll drill down this component to find the first HostComponent/Text.
      var node = currentParent;
      while (true) {
        if (node.tag === HostComponent || node.tag === HostText) {
          return node;
        } else if (node.child && node.tag !== HostPortal) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === currentParent) {
          return null;
        }
        while (!node.sibling) {
          if (!node.return || node.return === currentParent) {
            return null;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
      // Flow needs the return null here, but ESLint complains about it.
      // eslint-disable-next-line no-unreachable
      return null;
    }

    function addEventBubbleListener(element, eventType, listener) {
      element.addEventListener(eventType, listener, false);
    }

    function addEventCaptureListener(element, eventType, listener) {
      element.addEventListener(eventType, listener, true);
    }

    /**
     * @interface Event
     * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
     * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
     */
    var SyntheticAnimationEvent = SyntheticEvent.extend({
      animationName: null,
      elapsedTime: null,
      pseudoElement: null
    });

    /**
     * @interface Event
     * @see http://www.w3.org/TR/clipboard-apis/
     */
    var SyntheticClipboardEvent = SyntheticEvent.extend({
      clipboardData: function (event) {
        return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
      }
    });

    /**
     * @interface FocusEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var SyntheticFocusEvent = SyntheticUIEvent.extend({
      relatedTarget: null
    });

    /**
     * `charCode` represents the actual "character code" and is safe to use with
     * `String.fromCharCode`. As such, only keys that correspond to printable
     * characters produce a valid `charCode`, the only exception to this is Enter.
     * The Tab-key is considered non-printable and does not have a `charCode`,
     * presumably because it does not produce a tab-character in browsers.
     *
     * @param {object} nativeEvent Native browser event.
     * @return {number} Normalized `charCode` property.
     */
    function getEventCharCode(nativeEvent) {
      var charCode = void 0;
      var keyCode = nativeEvent.keyCode;

      if ('charCode' in nativeEvent) {
        charCode = nativeEvent.charCode;

        // FF does not set `charCode` for the Enter-key, check against `keyCode`.
        if (charCode === 0 && keyCode === 13) {
          charCode = 13;
        }
      } else {
        // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
      }

      // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
      // report Enter as charCode 10 when ctrl is pressed.
      if (charCode === 10) {
        charCode = 13;
      }

      // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
      // Must not discard the (non-)printable Enter-key.
      if (charCode >= 32 || charCode === 13) {
        return charCode;
      }

      return 0;
    }

    /**
     * Normalization of deprecated HTML5 `key` values
     * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
     */
    var normalizeKey = {
      Esc: 'Escape',
      Spacebar: ' ',
      Left: 'ArrowLeft',
      Up: 'ArrowUp',
      Right: 'ArrowRight',
      Down: 'ArrowDown',
      Del: 'Delete',
      Win: 'OS',
      Menu: 'ContextMenu',
      Apps: 'ContextMenu',
      Scroll: 'ScrollLock',
      MozPrintableKey: 'Unidentified'
    };

    /**
     * Translation from legacy `keyCode` to HTML5 `key`
     * Only special keys supported, all others depend on keyboard layout or browser
     * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
     */
    var translateToKey = {
      '8': 'Backspace',
      '9': 'Tab',
      '12': 'Clear',
      '13': 'Enter',
      '16': 'Shift',
      '17': 'Control',
      '18': 'Alt',
      '19': 'Pause',
      '20': 'CapsLock',
      '27': 'Escape',
      '32': ' ',
      '33': 'PageUp',
      '34': 'PageDown',
      '35': 'End',
      '36': 'Home',
      '37': 'ArrowLeft',
      '38': 'ArrowUp',
      '39': 'ArrowRight',
      '40': 'ArrowDown',
      '45': 'Insert',
      '46': 'Delete',
      '112': 'F1',
      '113': 'F2',
      '114': 'F3',
      '115': 'F4',
      '116': 'F5',
      '117': 'F6',
      '118': 'F7',
      '119': 'F8',
      '120': 'F9',
      '121': 'F10',
      '122': 'F11',
      '123': 'F12',
      '144': 'NumLock',
      '145': 'ScrollLock',
      '224': 'Meta'
    };

    /**
     * @param {object} nativeEvent Native browser event.
     * @return {string} Normalized `key` property.
     */
    function getEventKey(nativeEvent) {
      if (nativeEvent.key) {
        // Normalize inconsistent values reported by browsers due to
        // implementations of a working draft specification.

        // FireFox implements `key` but returns `MozPrintableKey` for all
        // printable characters (normalized to `Unidentified`), ignore it.
        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
        if (key !== 'Unidentified') {
          return key;
        }
      }

      // Browser does not implement `key`, polyfill as much of it as we can.
      if (nativeEvent.type === 'keypress') {
        var charCode = getEventCharCode(nativeEvent);

        // The enter-key is technically both printable and non-printable and can
        // thus be captured by `keypress`, no other non-printable key should.
        return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
      }
      if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
        // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
      }
      return '';
    }

    /**
     * @interface KeyboardEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
      key: getEventKey,
      location: null,
      ctrlKey: null,
      shiftKey: null,
      altKey: null,
      metaKey: null,
      repeat: null,
      locale: null,
      getModifierState: getEventModifierState,
      // Legacy Interface
      charCode: function (event) {
        // `charCode` is the result of a KeyPress event and represents the value of
        // the actual printable character.

        // KeyPress is deprecated, but its replacement is not yet final and not
        // implemented in any major browser. Only KeyPress has charCode.
        if (event.type === 'keypress') {
          return getEventCharCode(event);
        }
        return 0;
      },
      keyCode: function (event) {
        // `keyCode` is the result of a KeyDown/Up event and represents the value of
        // physical keyboard key.

        // The actual meaning of the value depends on the users' keyboard layout
        // which cannot be detected. Assuming that it is a US keyboard layout
        // provides a surprisingly accurate mapping for US and European users.
        // Due to this, it is left to the user to implement at this time.
        if (event.type === 'keydown' || event.type === 'keyup') {
          return event.keyCode;
        }
        return 0;
      },
      which: function (event) {
        // `which` is an alias for either `keyCode` or `charCode` depending on the
        // type of the event.
        if (event.type === 'keypress') {
          return getEventCharCode(event);
        }
        if (event.type === 'keydown' || event.type === 'keyup') {
          return event.keyCode;
        }
        return 0;
      }
    });

    /**
     * @interface DragEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var SyntheticDragEvent = SyntheticMouseEvent.extend({
      dataTransfer: null
    });

    /**
     * @interface TouchEvent
     * @see http://www.w3.org/TR/touch-events/
     */
    var SyntheticTouchEvent = SyntheticUIEvent.extend({
      touches: null,
      targetTouches: null,
      changedTouches: null,
      altKey: null,
      metaKey: null,
      ctrlKey: null,
      shiftKey: null,
      getModifierState: getEventModifierState
    });

    /**
     * @interface Event
     * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
     * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
     */
    var SyntheticTransitionEvent = SyntheticEvent.extend({
      propertyName: null,
      elapsedTime: null,
      pseudoElement: null
    });

    /**
     * @interface WheelEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var SyntheticWheelEvent = SyntheticMouseEvent.extend({
      deltaX: function (event) {
        return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
        'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
      },
      deltaY: function (event) {
        return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
        'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
        'wheelDelta' in event ? -event.wheelDelta : 0;
      },

      deltaZ: null,

      // Browsers without "deltaMode" is reporting in raw wheel delta where one
      // notch on the scroll is always +/- 120, roughly equivalent to pixels.
      // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
      // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
      deltaMode: null
    });

    /**
     * Turns
     * ['abort', ...]
     * into
     * eventTypes = {
     *   'abort': {
     *     phasedRegistrationNames: {
     *       bubbled: 'onAbort',
     *       captured: 'onAbortCapture',
     *     },
     *     dependencies: [TOP_ABORT],
     *   },
     *   ...
     * };
     * topLevelEventsToDispatchConfig = new Map([
     *   [TOP_ABORT, { sameConfig }],
     * ]);
     */

    var interactiveEventTypeNames = [[TOP_BLUR, 'blur'], [TOP_CANCEL, 'cancel'], [TOP_CLICK, 'click'], [TOP_CLOSE, 'close'], [TOP_CONTEXT_MENU, 'contextMenu'], [TOP_COPY, 'copy'], [TOP_CUT, 'cut'], [TOP_AUX_CLICK, 'auxClick'], [TOP_DOUBLE_CLICK, 'doubleClick'], [TOP_DRAG_END, 'dragEnd'], [TOP_DRAG_START, 'dragStart'], [TOP_DROP, 'drop'], [TOP_FOCUS, 'focus'], [TOP_INPUT, 'input'], [TOP_INVALID, 'invalid'], [TOP_KEY_DOWN, 'keyDown'], [TOP_KEY_PRESS, 'keyPress'], [TOP_KEY_UP, 'keyUp'], [TOP_MOUSE_DOWN, 'mouseDown'], [TOP_MOUSE_UP, 'mouseUp'], [TOP_PASTE, 'paste'], [TOP_PAUSE, 'pause'], [TOP_PLAY, 'play'], [TOP_POINTER_CANCEL, 'pointerCancel'], [TOP_POINTER_DOWN, 'pointerDown'], [TOP_POINTER_UP, 'pointerUp'], [TOP_RATE_CHANGE, 'rateChange'], [TOP_RESET, 'reset'], [TOP_SEEKED, 'seeked'], [TOP_SUBMIT, 'submit'], [TOP_TOUCH_CANCEL, 'touchCancel'], [TOP_TOUCH_END, 'touchEnd'], [TOP_TOUCH_START, 'touchStart'], [TOP_VOLUME_CHANGE, 'volumeChange']];
    var nonInteractiveEventTypeNames = [[TOP_ABORT, 'abort'], [TOP_ANIMATION_END, 'animationEnd'], [TOP_ANIMATION_ITERATION, 'animationIteration'], [TOP_ANIMATION_START, 'animationStart'], [TOP_CAN_PLAY, 'canPlay'], [TOP_CAN_PLAY_THROUGH, 'canPlayThrough'], [TOP_DRAG, 'drag'], [TOP_DRAG_ENTER, 'dragEnter'], [TOP_DRAG_EXIT, 'dragExit'], [TOP_DRAG_LEAVE, 'dragLeave'], [TOP_DRAG_OVER, 'dragOver'], [TOP_DURATION_CHANGE, 'durationChange'], [TOP_EMPTIED, 'emptied'], [TOP_ENCRYPTED, 'encrypted'], [TOP_ENDED, 'ended'], [TOP_ERROR, 'error'], [TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture'], [TOP_LOAD, 'load'], [TOP_LOADED_DATA, 'loadedData'], [TOP_LOADED_METADATA, 'loadedMetadata'], [TOP_LOAD_START, 'loadStart'], [TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture'], [TOP_MOUSE_MOVE, 'mouseMove'], [TOP_MOUSE_OUT, 'mouseOut'], [TOP_MOUSE_OVER, 'mouseOver'], [TOP_PLAYING, 'playing'], [TOP_POINTER_MOVE, 'pointerMove'], [TOP_POINTER_OUT, 'pointerOut'], [TOP_POINTER_OVER, 'pointerOver'], [TOP_PROGRESS, 'progress'], [TOP_SCROLL, 'scroll'], [TOP_SEEKING, 'seeking'], [TOP_STALLED, 'stalled'], [TOP_SUSPEND, 'suspend'], [TOP_TIME_UPDATE, 'timeUpdate'], [TOP_TOGGLE, 'toggle'], [TOP_TOUCH_MOVE, 'touchMove'], [TOP_TRANSITION_END, 'transitionEnd'], [TOP_WAITING, 'waiting'], [TOP_WHEEL, 'wheel']];

    var eventTypes$4 = {};
    var topLevelEventsToDispatchConfig = {};

    function addEventTypeNameToConfig(_ref, isInteractive) {
      var topEvent = _ref[0],
          event = _ref[1];

      var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
      var onEvent = 'on' + capitalizedEvent;

      var type = {
        phasedRegistrationNames: {
          bubbled: onEvent,
          captured: onEvent + 'Capture'
        },
        dependencies: [topEvent],
        isInteractive: isInteractive
      };
      eventTypes$4[event] = type;
      topLevelEventsToDispatchConfig[topEvent] = type;
    }

    interactiveEventTypeNames.forEach(function (eventTuple) {
      addEventTypeNameToConfig(eventTuple, true);
    });
    nonInteractiveEventTypeNames.forEach(function (eventTuple) {
      addEventTypeNameToConfig(eventTuple, false);
    });

    // Only used in DEV for exhaustiveness validation.
    var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];

    var SimpleEventPlugin = {
      eventTypes: eventTypes$4,

      isInteractiveTopLevelEventType: function (topLevelType) {
        var config = topLevelEventsToDispatchConfig[topLevelType];
        return config !== undefined && config.isInteractive === true;
      },


      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
        if (!dispatchConfig) {
          return null;
        }
        var EventConstructor = void 0;
        switch (topLevelType) {
          case TOP_KEY_PRESS:
            // Firefox creates a keypress event for function keys too. This removes
            // the unwanted keypress events. Enter is however both printable and
            // non-printable. One would expect Tab to be as well (but it isn't).
            if (getEventCharCode(nativeEvent) === 0) {
              return null;
            }
          /* falls through */
          case TOP_KEY_DOWN:
          case TOP_KEY_UP:
            EventConstructor = SyntheticKeyboardEvent;
            break;
          case TOP_BLUR:
          case TOP_FOCUS:
            EventConstructor = SyntheticFocusEvent;
            break;
          case TOP_CLICK:
            // Firefox creates a click event on right mouse clicks. This removes the
            // unwanted click events.
            if (nativeEvent.button === 2) {
              return null;
            }
          /* falls through */
          case TOP_AUX_CLICK:
          case TOP_DOUBLE_CLICK:
          case TOP_MOUSE_DOWN:
          case TOP_MOUSE_MOVE:
          case TOP_MOUSE_UP:
          // TODO: Disabled elements should not respond to mouse events
          /* falls through */
          case TOP_MOUSE_OUT:
          case TOP_MOUSE_OVER:
          case TOP_CONTEXT_MENU:
            EventConstructor = SyntheticMouseEvent;
            break;
          case TOP_DRAG:
          case TOP_DRAG_END:
          case TOP_DRAG_ENTER:
          case TOP_DRAG_EXIT:
          case TOP_DRAG_LEAVE:
          case TOP_DRAG_OVER:
          case TOP_DRAG_START:
          case TOP_DROP:
            EventConstructor = SyntheticDragEvent;
            break;
          case TOP_TOUCH_CANCEL:
          case TOP_TOUCH_END:
          case TOP_TOUCH_MOVE:
          case TOP_TOUCH_START:
            EventConstructor = SyntheticTouchEvent;
            break;
          case TOP_ANIMATION_END:
          case TOP_ANIMATION_ITERATION:
          case TOP_ANIMATION_START:
            EventConstructor = SyntheticAnimationEvent;
            break;
          case TOP_TRANSITION_END:
            EventConstructor = SyntheticTransitionEvent;
            break;
          case TOP_SCROLL:
            EventConstructor = SyntheticUIEvent;
            break;
          case TOP_WHEEL:
            EventConstructor = SyntheticWheelEvent;
            break;
          case TOP_COPY:
          case TOP_CUT:
          case TOP_PASTE:
            EventConstructor = SyntheticClipboardEvent;
            break;
          case TOP_GOT_POINTER_CAPTURE:
          case TOP_LOST_POINTER_CAPTURE:
          case TOP_POINTER_CANCEL:
          case TOP_POINTER_DOWN:
          case TOP_POINTER_MOVE:
          case TOP_POINTER_OUT:
          case TOP_POINTER_OVER:
          case TOP_POINTER_UP:
            EventConstructor = SyntheticPointerEvent;
            break;
          default:
            {
              if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
                warningWithoutStack$1(false, 'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
              }
            }
            // HTML Events
            // @see http://www.w3.org/TR/html5/index.html#events-0
            EventConstructor = SyntheticEvent;
            break;
        }
        var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
        accumulateTwoPhaseDispatches(event);
        return event;
      }
    };

    var isInteractiveTopLevelEventType = SimpleEventPlugin.isInteractiveTopLevelEventType;


    var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
    var callbackBookkeepingPool = [];

    /**
     * Find the deepest React component completely containing the root of the
     * passed-in instance (for use when entire React trees are nested within each
     * other). If React trees are not nested, returns null.
     */
    function findRootContainerNode(inst) {
      // TODO: It may be a good idea to cache this to prevent unnecessary DOM
      // traversal, but caching is difficult to do correctly without using a
      // mutation observer to listen for all DOM changes.
      while (inst.return) {
        inst = inst.return;
      }
      if (inst.tag !== HostRoot) {
        // This can happen if we're in a detached tree.
        return null;
      }
      return inst.stateNode.containerInfo;
    }

    // Used to store ancestor hierarchy in top level callback
    function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {
      if (callbackBookkeepingPool.length) {
        var instance = callbackBookkeepingPool.pop();
        instance.topLevelType = topLevelType;
        instance.nativeEvent = nativeEvent;
        instance.targetInst = targetInst;
        return instance;
      }
      return {
        topLevelType: topLevelType,
        nativeEvent: nativeEvent,
        targetInst: targetInst,
        ancestors: []
      };
    }

    function releaseTopLevelCallbackBookKeeping(instance) {
      instance.topLevelType = null;
      instance.nativeEvent = null;
      instance.targetInst = null;
      instance.ancestors.length = 0;
      if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
        callbackBookkeepingPool.push(instance);
      }
    }

    function handleTopLevel(bookKeeping) {
      var targetInst = bookKeeping.targetInst;

      // Loop through the hierarchy, in case there's any nested components.
      // It's important that we build the array of ancestors before calling any
      // event handlers, because event handlers can modify the DOM, leading to
      // inconsistencies with ReactMount's node cache. See #1105.
      var ancestor = targetInst;
      do {
        if (!ancestor) {
          bookKeeping.ancestors.push(ancestor);
          break;
        }
        var root = findRootContainerNode(ancestor);
        if (!root) {
          break;
        }
        bookKeeping.ancestors.push(ancestor);
        ancestor = getClosestInstanceFromNode(root);
      } while (ancestor);

      for (var i = 0; i < bookKeeping.ancestors.length; i++) {
        targetInst = bookKeeping.ancestors[i];
        runExtractedEventsInBatch(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
      }
    }

    // TODO: can we stop exporting these?
    var _enabled = true;

    function setEnabled(enabled) {
      _enabled = !!enabled;
    }

    function isEnabled() {
      return _enabled;
    }

    /**
     * Traps top-level events by using event bubbling.
     *
     * @param {number} topLevelType Number from `TopLevelEventTypes`.
     * @param {object} element Element on which to attach listener.
     * @return {?object} An object with a remove function which will forcefully
     *                  remove the listener.
     * @internal
     */
    function trapBubbledEvent(topLevelType, element) {
      if (!element) {
        return null;
      }
      var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;

      addEventBubbleListener(element, getRawEventName(topLevelType),
      // Check if interactive and wrap in interactiveUpdates
      dispatch.bind(null, topLevelType));
    }

    /**
     * Traps a top-level event by using event capturing.
     *
     * @param {number} topLevelType Number from `TopLevelEventTypes`.
     * @param {object} element Element on which to attach listener.
     * @return {?object} An object with a remove function which will forcefully
     *                  remove the listener.
     * @internal
     */
    function trapCapturedEvent(topLevelType, element) {
      if (!element) {
        return null;
      }
      var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;

      addEventCaptureListener(element, getRawEventName(topLevelType),
      // Check if interactive and wrap in interactiveUpdates
      dispatch.bind(null, topLevelType));
    }

    function dispatchInteractiveEvent(topLevelType, nativeEvent) {
      interactiveUpdates(dispatchEvent, topLevelType, nativeEvent);
    }

    function dispatchEvent(topLevelType, nativeEvent) {
      if (!_enabled) {
        return;
      }

      var nativeEventTarget = getEventTarget(nativeEvent);
      var targetInst = getClosestInstanceFromNode(nativeEventTarget);
      if (targetInst !== null && typeof targetInst.tag === 'number' && !isFiberMounted(targetInst)) {
        // If we get an event (ex: img onload) before committing that
        // component's mount, ignore it for now (that is, treat it as if it was an
        // event on a non-React tree). We might also consider queueing events and
        // dispatching them after the mount.
        targetInst = null;
      }

      var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);

      try {
        // Event queue being processed in the same cycle allows
        // `preventDefault`.
        batchedUpdates(handleTopLevel, bookKeeping);
      } finally {
        releaseTopLevelCallbackBookKeeping(bookKeeping);
      }
    }

    /**
     * Summary of `ReactBrowserEventEmitter` event handling:
     *
     *  - Top-level delegation is used to trap most native browser events. This
     *    may only occur in the main thread and is the responsibility of
     *    ReactDOMEventListener, which is injected and can therefore support
     *    pluggable event sources. This is the only work that occurs in the main
     *    thread.
     *
     *  - We normalize and de-duplicate events to account for browser quirks. This
     *    may be done in the worker thread.
     *
     *  - Forward these native events (with the associated top-level type used to
     *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
     *    to extract any synthetic events.
     *
     *  - The `EventPluginHub` will then process each event by annotating them with
     *    "dispatches", a sequence of listeners and IDs that care about that event.
     *
     *  - The `EventPluginHub` then dispatches the events.
     *
     * Overview of React and the event system:
     *
     * +------------+    .
     * |    DOM     |    .
     * +------------+    .
     *       |           .
     *       v           .
     * +------------+    .
     * | ReactEvent |    .
     * |  Listener  |    .
     * +------------+    .                         +-----------+
     *       |           .               +--------+|SimpleEvent|
     *       |           .               |         |Plugin     |
     * +-----|------+    .               v         +-----------+
     * |     |      |    .    +--------------+                    +------------+
     * |     +-----------.--->|EventPluginHub|                    |    Event   |
     * |            |    .    |              |     +-----------+  | Propagators|
     * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
     * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
     * |            |    .    |              |     +-----------+  |  utilities |
     * |     +-----------.--->|              |                    +------------+
     * |     |      |    .    +--------------+
     * +-----|------+    .                ^        +-----------+
     *       |           .                |        |Enter/Leave|
     *       +           .                +-------+|Plugin     |
     * +-------------+   .                         +-----------+
     * | application |   .
     * |-------------|   .
     * |             |   .
     * |             |   .
     * +-------------+   .
     *                   .
     *    React Core     .  General Purpose Event Plugin System
     */

    var alreadyListeningTo = {};
    var reactTopListenersCounter = 0;

    /**
     * To ensure no conflicts with other potential React instances on the page
     */
    var topListenersIDKey = '_reactListenersID' + ('' + Math.random()).slice(2);

    function getListeningForDocument(mountAt) {
      // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
      // directly.
      if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
        mountAt[topListenersIDKey] = reactTopListenersCounter++;
        alreadyListeningTo[mountAt[topListenersIDKey]] = {};
      }
      return alreadyListeningTo[mountAt[topListenersIDKey]];
    }

    /**
     * We listen for bubbled touch events on the document object.
     *
     * Firefox v8.01 (and possibly others) exhibited strange behavior when
     * mounting `onmousemove` events at some node that was not the document
     * element. The symptoms were that if your mouse is not moving over something
     * contained within that mount point (for example on the background) the
     * top-level listeners for `onmousemove` won't be called. However, if you
     * register the `mousemove` on the document object, then it will of course
     * catch all `mousemove`s. This along with iOS quirks, justifies restricting
     * top-level listeners to the document object only, at least for these
     * movement types of events and possibly all events.
     *
     * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
     *
     * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
     * they bubble to document.
     *
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @param {object} mountAt Container where to mount the listener
     */
    function listenTo(registrationName, mountAt) {
      var isListening = getListeningForDocument(mountAt);
      var dependencies = registrationNameDependencies[registrationName];

      for (var i = 0; i < dependencies.length; i++) {
        var dependency = dependencies[i];
        if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
          switch (dependency) {
            case TOP_SCROLL:
              trapCapturedEvent(TOP_SCROLL, mountAt);
              break;
            case TOP_FOCUS:
            case TOP_BLUR:
              trapCapturedEvent(TOP_FOCUS, mountAt);
              trapCapturedEvent(TOP_BLUR, mountAt);
              // We set the flag for a single dependency later in this function,
              // but this ensures we mark both as attached rather than just one.
              isListening[TOP_BLUR] = true;
              isListening[TOP_FOCUS] = true;
              break;
            case TOP_CANCEL:
            case TOP_CLOSE:
              if (isEventSupported(getRawEventName(dependency))) {
                trapCapturedEvent(dependency, mountAt);
              }
              break;
            case TOP_INVALID:
            case TOP_SUBMIT:
            case TOP_RESET:
              // We listen to them on the target DOM elements.
              // Some of them bubble so we don't want them to fire twice.
              break;
            default:
              // By default, listen on the top level to all non-media events.
              // Media events don't bubble so adding the listener wouldn't do anything.
              var isMediaEvent = mediaEventTypes.indexOf(dependency) !== -1;
              if (!isMediaEvent) {
                trapBubbledEvent(dependency, mountAt);
              }
              break;
          }
          isListening[dependency] = true;
        }
      }
    }

    function isListeningToAllDependencies(registrationName, mountAt) {
      var isListening = getListeningForDocument(mountAt);
      var dependencies = registrationNameDependencies[registrationName];
      for (var i = 0; i < dependencies.length; i++) {
        var dependency = dependencies[i];
        if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
          return false;
        }
      }
      return true;
    }

    function getActiveElement(doc) {
      doc = doc || (typeof document !== 'undefined' ? document : undefined);
      if (typeof doc === 'undefined') {
        return null;
      }
      try {
        return doc.activeElement || doc.body;
      } catch (e) {
        return doc.body;
      }
    }

    /**
     * Given any node return the first leaf node without children.
     *
     * @param {DOMElement|DOMTextNode} node
     * @return {DOMElement|DOMTextNode}
     */
    function getLeafNode(node) {
      while (node && node.firstChild) {
        node = node.firstChild;
      }
      return node;
    }

    /**
     * Get the next sibling within a container. This will walk up the
     * DOM if a node's siblings have been exhausted.
     *
     * @param {DOMElement|DOMTextNode} node
     * @return {?DOMElement|DOMTextNode}
     */
    function getSiblingNode(node) {
      while (node) {
        if (node.nextSibling) {
          return node.nextSibling;
        }
        node = node.parentNode;
      }
    }

    /**
     * Get object describing the nodes which contain characters at offset.
     *
     * @param {DOMElement|DOMTextNode} root
     * @param {number} offset
     * @return {?object}
     */
    function getNodeForCharacterOffset(root, offset) {
      var node = getLeafNode(root);
      var nodeStart = 0;
      var nodeEnd = 0;

      while (node) {
        if (node.nodeType === TEXT_NODE) {
          nodeEnd = nodeStart + node.textContent.length;

          if (nodeStart <= offset && nodeEnd >= offset) {
            return {
              node: node,
              offset: offset - nodeStart
            };
          }

          nodeStart = nodeEnd;
        }

        node = getLeafNode(getSiblingNode(node));
      }
    }

    /**
     * @param {DOMElement} outerNode
     * @return {?object}
     */
    function getOffsets(outerNode) {
      var ownerDocument = outerNode.ownerDocument;

      var win = ownerDocument && ownerDocument.defaultView || window;
      var selection = win.getSelection && win.getSelection();

      if (!selection || selection.rangeCount === 0) {
        return null;
      }

      var anchorNode = selection.anchorNode,
          anchorOffset = selection.anchorOffset,
          focusNode = selection.focusNode,
          focusOffset = selection.focusOffset;

      // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
      // up/down buttons on an <input type="number">. Anonymous divs do not seem to
      // expose properties, triggering a "Permission denied error" if any of its
      // properties are accessed. The only seemingly possible way to avoid erroring
      // is to access a property that typically works for non-anonymous divs and
      // catch any error that may otherwise arise. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

      try {
        /* eslint-disable no-unused-expressions */
        anchorNode.nodeType;
        focusNode.nodeType;
        /* eslint-enable no-unused-expressions */
      } catch (e) {
        return null;
      }

      return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }

    /**
     * Returns {start, end} where `start` is the character/codepoint index of
     * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
     * `end` is the index of (focusNode, focusOffset).
     *
     * Returns null if you pass in garbage input but we should probably just crash.
     *
     * Exported only for testing.
     */
    function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
      var length = 0;
      var start = -1;
      var end = -1;
      var indexWithinAnchor = 0;
      var indexWithinFocus = 0;
      var node = outerNode;
      var parentNode = null;

      outer: while (true) {
        var next = null;

        while (true) {
          if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
            start = length + anchorOffset;
          }
          if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
            end = length + focusOffset;
          }

          if (node.nodeType === TEXT_NODE) {
            length += node.nodeValue.length;
          }

          if ((next = node.firstChild) === null) {
            break;
          }
          // Moving from `node` to its first child `next`.
          parentNode = node;
          node = next;
        }

        while (true) {
          if (node === outerNode) {
            // If `outerNode` has children, this is always the second time visiting
            // it. If it has no children, this is still the first loop, and the only
            // valid selection is anchorNode and focusNode both equal to this node
            // and both offsets 0, in which case we will have handled above.
            break outer;
          }
          if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
            start = length;
          }
          if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
            end = length;
          }
          if ((next = node.nextSibling) !== null) {
            break;
          }
          node = parentNode;
          parentNode = node.parentNode;
        }

        // Moving from `node` to its next sibling `next`.
        node = next;
      }

      if (start === -1 || end === -1) {
        // This should never happen. (Would happen if the anchor/focus nodes aren't
        // actually inside the passed-in node.)
        return null;
      }

      return {
        start: start,
        end: end
      };
    }

    /**
     * In modern non-IE browsers, we can support both forward and backward
     * selections.
     *
     * Note: IE10+ supports the Selection object, but it does not support
     * the `extend` method, which means that even in modern IE, it's not possible
     * to programmatically create a backward selection. Thus, for all IE
     * versions, we use the old IE API to create our selections.
     *
     * @param {DOMElement|DOMTextNode} node
     * @param {object} offsets
     */
    function setOffsets(node, offsets) {
      var doc = node.ownerDocument || document;
      var win = doc && doc.defaultView || window;

      // Edge fails with "Object expected" in some scenarios.
      // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
      // fails when pasting 100+ items)
      if (!win.getSelection) {
        return;
      }

      var selection = win.getSelection();
      var length = node.textContent.length;
      var start = Math.min(offsets.start, length);
      var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

      // IE 11 uses modern selection, but doesn't support the extend method.
      // Flip backward selections, so we can set with a single range.
      if (!selection.extend && start > end) {
        var temp = end;
        end = start;
        start = temp;
      }

      var startMarker = getNodeForCharacterOffset(node, start);
      var endMarker = getNodeForCharacterOffset(node, end);

      if (startMarker && endMarker) {
        if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
          return;
        }
        var range = doc.createRange();
        range.setStart(startMarker.node, startMarker.offset);
        selection.removeAllRanges();

        if (start > end) {
          selection.addRange(range);
          selection.extend(endMarker.node, endMarker.offset);
        } else {
          range.setEnd(endMarker.node, endMarker.offset);
          selection.addRange(range);
        }
      }
    }

    function isTextNode(node) {
      return node && node.nodeType === TEXT_NODE;
    }

    function containsNode(outerNode, innerNode) {
      if (!outerNode || !innerNode) {
        return false;
      } else if (outerNode === innerNode) {
        return true;
      } else if (isTextNode(outerNode)) {
        return false;
      } else if (isTextNode(innerNode)) {
        return containsNode(outerNode, innerNode.parentNode);
      } else if ('contains' in outerNode) {
        return outerNode.contains(innerNode);
      } else if (outerNode.compareDocumentPosition) {
        return !!(outerNode.compareDocumentPosition(innerNode) & 16);
      } else {
        return false;
      }
    }

    function isInDocument(node) {
      return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }

    function getActiveElementDeep() {
      var win = window;
      var element = getActiveElement();
      while (element instanceof win.HTMLIFrameElement) {
        // Accessing the contentDocument of a HTMLIframeElement can cause the browser
        // to throw, e.g. if it has a cross-origin src attribute
        try {
          win = element.contentDocument.defaultView;
        } catch (e) {
          return element;
        }
        element = getActiveElement(win.document);
      }
      return element;
    }

    /**
     * @ReactInputSelection: React input selection module. Based on Selection.js,
     * but modified to be suitable for react and has a couple of bug fixes (doesn't
     * assume buttons have range selections allowed).
     * Input selection module for React.
     */

    /**
     * @hasSelectionCapabilities: we get the element types that support selection
     * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
     * and `selectionEnd` rows.
     */
    function hasSelectionCapabilities(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
    }

    function getSelectionInformation() {
      var focusedElem = getActiveElementDeep();
      return {
        focusedElem: focusedElem,
        selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection$1(focusedElem) : null
      };
    }

    /**
     * @restoreSelection: If any selection information was potentially lost,
     * restore it. This is useful when performing operations that could remove dom
     * nodes and place them back in, resulting in focus being lost.
     */
    function restoreSelection(priorSelectionInformation) {
      var curFocusedElem = getActiveElementDeep();
      var priorFocusedElem = priorSelectionInformation.focusedElem;
      var priorSelectionRange = priorSelectionInformation.selectionRange;
      if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
        if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
          setSelection(priorFocusedElem, priorSelectionRange);
        }

        // Focusing a node can change the scroll position, which is undesirable
        var ancestors = [];
        var ancestor = priorFocusedElem;
        while (ancestor = ancestor.parentNode) {
          if (ancestor.nodeType === ELEMENT_NODE) {
            ancestors.push({
              element: ancestor,
              left: ancestor.scrollLeft,
              top: ancestor.scrollTop
            });
          }
        }

        if (typeof priorFocusedElem.focus === 'function') {
          priorFocusedElem.focus();
        }

        for (var i = 0; i < ancestors.length; i++) {
          var info = ancestors[i];
          info.element.scrollLeft = info.left;
          info.element.scrollTop = info.top;
        }
      }
    }

    /**
     * @getSelection: Gets the selection bounds of a focused textarea, input or
     * contentEditable node.
     * -@input: Look up selection bounds of this input
     * -@return {start: selectionStart, end: selectionEnd}
     */
    function getSelection$1(input) {
      var selection = void 0;

      if ('selectionStart' in input) {
        // Modern browser with input or textarea.
        selection = {
          start: input.selectionStart,
          end: input.selectionEnd
        };
      } else {
        // Content editable or old IE textarea.
        selection = getOffsets(input);
      }

      return selection || { start: 0, end: 0 };
    }

    /**
     * @setSelection: Sets the selection bounds of a textarea or input and focuses
     * the input.
     * -@input     Set selection bounds of this input or textarea
     * -@offsets   Object of same form that is returned from get*
     */
    function setSelection(input, offsets) {
      var start = offsets.start,
          end = offsets.end;

      if (end === undefined) {
        end = start;
      }

      if ('selectionStart' in input) {
        input.selectionStart = start;
        input.selectionEnd = Math.min(end, input.value.length);
      } else {
        setOffsets(input, offsets);
      }
    }

    var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;

    var eventTypes$3 = {
      select: {
        phasedRegistrationNames: {
          bubbled: 'onSelect',
          captured: 'onSelectCapture'
        },
        dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
      }
    };

    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;

    /**
     * Get an object which is a unique representation of the current selection.
     *
     * The return value will not be consistent across nodes or browsers, but
     * two identical selections on the same node will return identical objects.
     *
     * @param {DOMElement} node
     * @return {object}
     */
    function getSelection(node) {
      if ('selectionStart' in node && hasSelectionCapabilities(node)) {
        return {
          start: node.selectionStart,
          end: node.selectionEnd
        };
      } else {
        var win = node.ownerDocument && node.ownerDocument.defaultView || window;
        var selection = win.getSelection();
        return {
          anchorNode: selection.anchorNode,
          anchorOffset: selection.anchorOffset,
          focusNode: selection.focusNode,
          focusOffset: selection.focusOffset
        };
      }
    }

    /**
     * Get document associated with the event target.
     *
     * @param {object} nativeEventTarget
     * @return {Document}
     */
    function getEventTargetDocument(eventTarget) {
      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }

    /**
     * Poll selection to see whether it's changed.
     *
     * @param {object} nativeEvent
     * @param {object} nativeEventTarget
     * @return {?SyntheticEvent}
     */
    function constructSelectEvent(nativeEvent, nativeEventTarget) {
      // Ensure we have the right element, and that the user is not dragging a
      // selection (this matches native `select` event behavior). In HTML5, select
      // fires only on input and textarea thus if there's no focused element we
      // won't dispatch.
      var doc = getEventTargetDocument(nativeEventTarget);

      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
        return null;
      }

      // Only fire when selection has actually changed.
      var currentSelection = getSelection(activeElement$1);
      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
        lastSelection = currentSelection;

        var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);

        syntheticEvent.type = 'select';
        syntheticEvent.target = activeElement$1;

        accumulateTwoPhaseDispatches(syntheticEvent);

        return syntheticEvent;
      }

      return null;
    }

    /**
     * This plugin creates an `onSelect` event that normalizes select events
     * across form elements.
     *
     * Supported elements are:
     * - input (see `isTextInputElement`)
     * - textarea
     * - contentEditable
     *
     * This differs from native browser implementations in the following ways:
     * - Fires on contentEditable fields as well as inputs.
     * - Fires for collapsed selection.
     * - Fires after user input.
     */
    var SelectEventPlugin = {
      eventTypes: eventTypes$3,

      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var doc = getEventTargetDocument(nativeEventTarget);
        // Track whether all listeners exists for this plugin. If none exist, we do
        // not extract events. See #3639.
        if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
          return null;
        }

        var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

        switch (topLevelType) {
          // Track the input node that has focus.
          case TOP_FOCUS:
            if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
              activeElement$1 = targetNode;
              activeElementInst$1 = targetInst;
              lastSelection = null;
            }
            break;
          case TOP_BLUR:
            activeElement$1 = null;
            activeElementInst$1 = null;
            lastSelection = null;
            break;
          // Don't fire the event while the user is dragging. This matches the
          // semantics of the native select event.
          case TOP_MOUSE_DOWN:
            mouseDown = true;
            break;
          case TOP_CONTEXT_MENU:
          case TOP_MOUSE_UP:
          case TOP_DRAG_END:
            mouseDown = false;
            return constructSelectEvent(nativeEvent, nativeEventTarget);
          // Chrome and IE fire non-standard event when selection is changed (and
          // sometimes when it hasn't). IE's event fires out of order with respect
          // to key and input events on deletion, so we discard it.
          //
          // Firefox doesn't support selectionchange, so check selection status
          // after each key entry. The selection changes after keydown and before
          // keyup, but we check on keydown as well in the case of holding down a
          // key, when multiple keydown events are fired but only one keyup is.
          // This is also our approach for IE handling, for the reason above.
          case TOP_SELECTION_CHANGE:
            if (skipSelectionChangeEvent) {
              break;
            }
          // falls through
          case TOP_KEY_DOWN:
          case TOP_KEY_UP:
            return constructSelectEvent(nativeEvent, nativeEventTarget);
        }

        return null;
      }
    };

    /**
     * Inject modules for resolving DOM hierarchy and plugin ordering.
     */
    injection.injectEventPluginOrder(DOMEventPluginOrder);
    setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);

    /**
     * Some important event plugins included by default (without having to require
     * them).
     */
    injection.injectEventPluginsByName({
      SimpleEventPlugin: SimpleEventPlugin,
      EnterLeaveEventPlugin: EnterLeaveEventPlugin,
      ChangeEventPlugin: ChangeEventPlugin,
      SelectEventPlugin: SelectEventPlugin,
      BeforeInputEventPlugin: BeforeInputEventPlugin
    });

    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;

    function flattenChildren(children) {
      var content = '';

      // Flatten children. We'll warn if they are invalid
      // during validateProps() which runs for hydration too.
      // Note that this would throw on non-element objects.
      // Elements are stringified (which is normally irrelevant
      // but matters for <fbt>).
      React.Children.forEach(children, function (child) {
        if (child == null) {
          return;
        }
        content += child;
        // Note: we don't warn about invalid children here.
        // Instead, this is done separately below so that
        // it happens during the hydration codepath too.
      });

      return content;
    }

    /**
     * Implements an <option> host component that warns when `selected` is set.
     */

    function validateProps(element, props) {
      {
        // This mirrors the codepath above, but runs for hydration too.
        // Warn about invalid children here so that client and hydration are consistent.
        // TODO: this seems like it could cause a DEV-only throw for hydration
        // if children contains a non-element object. We should try to avoid that.
        if (typeof props.children === 'object' && props.children !== null) {
          React.Children.forEach(props.children, function (child) {
            if (child == null) {
              return;
            }
            if (typeof child === 'string' || typeof child === 'number') {
              return;
            }
            if (typeof child.type !== 'string') {
              return;
            }
            if (!didWarnInvalidChild) {
              didWarnInvalidChild = true;
              warning$1(false, 'Only strings and numbers are supported as <option> children.');
            }
          });
        }

        // TODO: Remove support for `selected` in <option>.
        if (props.selected != null && !didWarnSelectedSetOnOption) {
          warning$1(false, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
          didWarnSelectedSetOnOption = true;
        }
      }
    }

    function postMountWrapper$1(element, props) {
      // value="" should make a value attribute (#6219)
      if (props.value != null) {
        element.setAttribute('value', toString(getToStringValue(props.value)));
      }
    }

    function getHostProps$1(element, props) {
      var hostProps = _assign({ children: undefined }, props);
      var content = flattenChildren(props.children);

      if (content) {
        hostProps.children = content;
      }

      return hostProps;
    }

    // TODO: direct imports like some-package/src/* are bad. Fix me.
    var didWarnValueDefaultValue$1 = void 0;

    {
      didWarnValueDefaultValue$1 = false;
    }

    function getDeclarationErrorAddendum() {
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();
      if (ownerName) {
        return '\n\nCheck the render method of `' + ownerName + '`.';
      }
      return '';
    }

    var valuePropNames = ['value', 'defaultValue'];

    /**
     * Validation function for `value` and `defaultValue`.
     */
    function checkSelectPropTypes(props) {
      ReactControlledValuePropTypes.checkPropTypes('select', props);

      for (var i = 0; i < valuePropNames.length; i++) {
        var propName = valuePropNames[i];
        if (props[propName] == null) {
          continue;
        }
        var isArray = Array.isArray(props[propName]);
        if (props.multiple && !isArray) {
          warning$1(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
        } else if (!props.multiple && isArray) {
          warning$1(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
        }
      }
    }

    function updateOptions(node, multiple, propValue, setDefaultSelected) {
      var options = node.options;

      if (multiple) {
        var selectedValues = propValue;
        var selectedValue = {};
        for (var i = 0; i < selectedValues.length; i++) {
          // Prefix to avoid chaos with special keys.
          selectedValue['$' + selectedValues[i]] = true;
        }
        for (var _i = 0; _i < options.length; _i++) {
          var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
          if (options[_i].selected !== selected) {
            options[_i].selected = selected;
          }
          if (selected && setDefaultSelected) {
            options[_i].defaultSelected = true;
          }
        }
      } else {
        // Do not set `select.value` as exact behavior isn't consistent across all
        // browsers for all cases.
        var _selectedValue = toString(getToStringValue(propValue));
        var defaultSelected = null;
        for (var _i2 = 0; _i2 < options.length; _i2++) {
          if (options[_i2].value === _selectedValue) {
            options[_i2].selected = true;
            if (setDefaultSelected) {
              options[_i2].defaultSelected = true;
            }
            return;
          }
          if (defaultSelected === null && !options[_i2].disabled) {
            defaultSelected = options[_i2];
          }
        }
        if (defaultSelected !== null) {
          defaultSelected.selected = true;
        }
      }
    }

    /**
     * Implements a <select> host component that allows optionally setting the
     * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
     * stringable. If `multiple` is true, the prop must be an array of stringables.
     *
     * If `value` is not supplied (or null/undefined), user actions that change the
     * selected option will trigger updates to the rendered options.
     *
     * If it is supplied (and not null/undefined), the rendered options will not
     * update in response to user actions. Instead, the `value` prop must change in
     * order for the rendered options to update.
     *
     * If `defaultValue` is provided, any options with the supplied values will be
     * selected.
     */

    function getHostProps$2(element, props) {
      return _assign({}, props, {
        value: undefined
      });
    }

    function initWrapperState$1(element, props) {
      var node = element;
      {
        checkSelectPropTypes(props);
      }

      node._wrapperState = {
        wasMultiple: !!props.multiple
      };

      {
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
          warning$1(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
          didWarnValueDefaultValue$1 = true;
        }
      }
    }

    function postMountWrapper$2(element, props) {
      var node = element;
      node.multiple = !!props.multiple;
      var value = props.value;
      if (value != null) {
        updateOptions(node, !!props.multiple, value, false);
      } else if (props.defaultValue != null) {
        updateOptions(node, !!props.multiple, props.defaultValue, true);
      }
    }

    function postUpdateWrapper(element, props) {
      var node = element;
      var wasMultiple = node._wrapperState.wasMultiple;
      node._wrapperState.wasMultiple = !!props.multiple;

      var value = props.value;
      if (value != null) {
        updateOptions(node, !!props.multiple, value, false);
      } else if (wasMultiple !== !!props.multiple) {
        // For simplicity, reapply `defaultValue` if `multiple` is toggled.
        if (props.defaultValue != null) {
          updateOptions(node, !!props.multiple, props.defaultValue, true);
        } else {
          // Revert the select back to its default unselected state.
          updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
        }
      }
    }

    function restoreControlledState$2(element, props) {
      var node = element;
      var value = props.value;

      if (value != null) {
        updateOptions(node, !!props.multiple, value, false);
      }
    }

    var didWarnValDefaultVal = false;

    /**
     * Implements a <textarea> host component that allows setting `value`, and
     * `defaultValue`. This differs from the traditional DOM API because value is
     * usually set as PCDATA children.
     *
     * If `value` is not supplied (or null/undefined), user actions that affect the
     * value will trigger updates to the element.
     *
     * If `value` is supplied (and not null/undefined), the rendered element will
     * not trigger updates to the element. Instead, the `value` prop must change in
     * order for the rendered element to be updated.
     *
     * The rendered element will be initialized with an empty value, the prop
     * `defaultValue` if specified, or the children content (deprecated).
     */

    function getHostProps$3(element, props) {
      var node = element;
      !(props.dangerouslySetInnerHTML == null) ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : void 0;

      // Always set children to the same thing. In IE9, the selection range will
      // get reset if `textContent` is mutated.  We could add a check in setTextContent
      // to only set the value if/when the value differs from the node value (which would
      // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
      // solution. The value can be a boolean or object so that's why it's forced
      // to be a string.
      var hostProps = _assign({}, props, {
        value: undefined,
        defaultValue: undefined,
        children: toString(node._wrapperState.initialValue)
      });

      return hostProps;
    }

    function initWrapperState$2(element, props) {
      var node = element;
      {
        ReactControlledValuePropTypes.checkPropTypes('textarea', props);
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
          warning$1(false, '%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
          didWarnValDefaultVal = true;
        }
      }

      var initialValue = props.value;

      // Only bother fetching default value if we're going to use it
      if (initialValue == null) {
        var defaultValue = props.defaultValue;
        // TODO (yungsters): Remove support for children content in <textarea>.
        var children = props.children;
        if (children != null) {
          {
            warning$1(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
          }
          !(defaultValue == null) ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : void 0;
          if (Array.isArray(children)) {
            !(children.length <= 1) ? invariant(false, '<textarea> can only have at most one child.') : void 0;
            children = children[0];
          }

          defaultValue = children;
        }
        if (defaultValue == null) {
          defaultValue = '';
        }
        initialValue = defaultValue;
      }

      node._wrapperState = {
        initialValue: getToStringValue(initialValue)
      };
    }

    function updateWrapper$1(element, props) {
      var node = element;
      var value = getToStringValue(props.value);
      var defaultValue = getToStringValue(props.defaultValue);
      if (value != null) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        var newValue = toString(value);
        // To avoid side effects (such as losing text selection), only set value if changed
        if (newValue !== node.value) {
          node.value = newValue;
        }
        if (props.defaultValue == null && node.defaultValue !== newValue) {
          node.defaultValue = newValue;
        }
      }
      if (defaultValue != null) {
        node.defaultValue = toString(defaultValue);
      }
    }

    function postMountWrapper$3(element, props) {
      var node = element;
      // This is in postMount because we need access to the DOM node, which is not
      // available until after the component has mounted.
      var textContent = node.textContent;

      // Only set node.value if textContent is equal to the expected
      // initial value. In IE10/IE11 there is a bug where the placeholder attribute
      // will populate textContent as well.
      // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
      if (textContent === node._wrapperState.initialValue) {
        node.value = textContent;
      }
    }

    function restoreControlledState$3(element, props) {
      // DOM component is still mounted; update
      updateWrapper$1(element, props);
    }

    var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';

    var Namespaces = {
      html: HTML_NAMESPACE$1,
      mathml: MATH_NAMESPACE,
      svg: SVG_NAMESPACE
    };

    // Assumes there is no parent namespace.
    function getIntrinsicNamespace(type) {
      switch (type) {
        case 'svg':
          return SVG_NAMESPACE;
        case 'math':
          return MATH_NAMESPACE;
        default:
          return HTML_NAMESPACE$1;
      }
    }

    function getChildNamespace(parentNamespace, type) {
      if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {
        // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
      }
      if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
        // We're leaving SVG.
        return HTML_NAMESPACE$1;
      }
      // By default, pass namespace below.
      return parentNamespace;
    }

    /* globals MSApp */

    /**
     * Create a function which has 'unsafe' privileges (required by windows8 apps)
     */
    var createMicrosoftUnsafeLocalFunction = function (func) {
      if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
        return function (arg0, arg1, arg2, arg3) {
          MSApp.execUnsafeLocalFunction(function () {
            return func(arg0, arg1, arg2, arg3);
          });
        };
      } else {
        return func;
      }
    };

    // SVG temp container for IE lacking innerHTML
    var reusableSVGContainer = void 0;

    /**
     * Set the innerHTML property of a node
     *
     * @param {DOMElement} node
     * @param {string} html
     * @internal
     */
    var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
      // IE does not have innerHTML for SVG nodes, so instead we inject the
      // new markup in a temp node and then move the child nodes across into
      // the target node

      if (node.namespaceURI === Namespaces.svg && !('innerHTML' in node)) {
        reusableSVGContainer = reusableSVGContainer || document.createElement('div');
        reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
        var svgNode = reusableSVGContainer.firstChild;
        while (node.firstChild) {
          node.removeChild(node.firstChild);
        }
        while (svgNode.firstChild) {
          node.appendChild(svgNode.firstChild);
        }
      } else {
        node.innerHTML = html;
      }
    });

    /**
     * Set the textContent property of a node. For text updates, it's faster
     * to set the `nodeValue` of the Text node directly instead of using
     * `.textContent` which will remove the existing node and create a new one.
     *
     * @param {DOMElement} node
     * @param {string} text
     * @internal
     */
    var setTextContent = function (node, text) {
      if (text) {
        var firstChild = node.firstChild;

        if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
          firstChild.nodeValue = text;
          return;
        }
      }
      node.textContent = text;
    };

    /**
     * CSS properties which accept numbers but are not in units of "px".
     */
    var isUnitlessNumber = {
      animationIterationCount: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,

      // SVG-related properties
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    };

    /**
     * @param {string} prefix vendor-specific prefix, eg: Webkit
     * @param {string} key style name, eg: transitionDuration
     * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
     * WebkitTransitionDuration
     */
    function prefixKey(prefix, key) {
      return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }

    /**
     * Support style names that may come passed in prefixed by adding permutations
     * of vendor prefixes.
     */
    var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

    // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.
    Object.keys(isUnitlessNumber).forEach(function (prop) {
      prefixes.forEach(function (prefix) {
        isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
      });
    });

    /**
     * Convert a value into the proper css writable value. The style name `name`
     * should be logical (no hyphens), as specified
     * in `CSSProperty.isUnitlessNumber`.
     *
     * @param {string} name CSS property name such as `topMargin`.
     * @param {*} value CSS property value such as `10px`.
     * @return {string} Normalized style value with dimensions applied.
     */
    function dangerousStyleValue(name, value, isCustomProperty) {
      // Note that we've removed escapeTextForBrowser() calls here since the
      // whole string will be escaped when the attribute is injected into
      // the markup. If you provide unsafe user data here they can inject
      // arbitrary CSS which may be problematic (I couldn't repro this):
      // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
      // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
      // This is not an XSS hole but instead a potential CSS injection issue
      // which has lead to a greater discussion about how we're going to
      // trust URLs moving forward. See #2115901

      var isEmpty = value == null || typeof value === 'boolean' || value === '';
      if (isEmpty) {
        return '';
      }

      if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
        return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
      }

      return ('' + value).trim();
    }

    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;

    /**
     * Hyphenates a camelcased CSS property name, for example:
     *
     *   > hyphenateStyleName('backgroundColor')
     *   < "background-color"
     *   > hyphenateStyleName('MozTransition')
     *   < "-moz-transition"
     *   > hyphenateStyleName('msTransition')
     *   < "-ms-transition"
     *
     * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
     * is converted to `-ms-`.
     */
    function hyphenateStyleName(name) {
      return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }

    var warnValidStyle = function () {};

    {
      // 'msTransform' is correct, but the other prefixes should be capitalized
      var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
      var msPattern$1 = /^-ms-/;
      var hyphenPattern = /-(.)/g;

      // style values shouldn't contain a semicolon
      var badStyleValueWithSemicolonPattern = /;\s*$/;

      var warnedStyleNames = {};
      var warnedStyleValues = {};
      var warnedForNaNValue = false;
      var warnedForInfinityValue = false;

      var camelize = function (string) {
        return string.replace(hyphenPattern, function (_, character) {
          return character.toUpperCase();
        });
      };

      var warnHyphenatedStyleName = function (name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }

        warnedStyleNames[name] = true;
        warning$1(false, 'Unsupported style property %s. Did you mean %s?', name,
        // As Andi Smith suggests
        // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
        // is converted to lowercase `ms`.
        camelize(name.replace(msPattern$1, 'ms-')));
      };

      var warnBadVendoredStyleName = function (name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }

        warnedStyleNames[name] = true;
        warning$1(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
      };

      var warnStyleValueWithSemicolon = function (name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
          return;
        }

        warnedStyleValues[value] = true;
        warning$1(false, "Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
      };

      var warnStyleValueIsNaN = function (name, value) {
        if (warnedForNaNValue) {
          return;
        }

        warnedForNaNValue = true;
        warning$1(false, '`NaN` is an invalid value for the `%s` css style property.', name);
      };

      var warnStyleValueIsInfinity = function (name, value) {
        if (warnedForInfinityValue) {
          return;
        }

        warnedForInfinityValue = true;
        warning$1(false, '`Infinity` is an invalid value for the `%s` css style property.', name);
      };

      warnValidStyle = function (name, value) {
        if (name.indexOf('-') > -1) {
          warnHyphenatedStyleName(name);
        } else if (badVendoredStyleNamePattern.test(name)) {
          warnBadVendoredStyleName(name);
        } else if (badStyleValueWithSemicolonPattern.test(value)) {
          warnStyleValueWithSemicolon(name, value);
        }

        if (typeof value === 'number') {
          if (isNaN(value)) {
            warnStyleValueIsNaN(name, value);
          } else if (!isFinite(value)) {
            warnStyleValueIsInfinity(name, value);
          }
        }
      };
    }

    var warnValidStyle$1 = warnValidStyle;

    /**
     * Operations for dealing with CSS properties.
     */

    /**
     * This creates a string that is expected to be equivalent to the style
     * attribute generated by server-side rendering. It by-passes warnings and
     * security checks so it's not safe to use this value for anything other than
     * comparison. It is only used in DEV for SSR validation.
     */
    function createDangerousStringForStyles(styles) {
      {
        var serialized = '';
        var delimiter = '';
        for (var styleName in styles) {
          if (!styles.hasOwnProperty(styleName)) {
            continue;
          }
          var styleValue = styles[styleName];
          if (styleValue != null) {
            var isCustomProperty = styleName.indexOf('--') === 0;
            serialized += delimiter + hyphenateStyleName(styleName) + ':';
            serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);

            delimiter = ';';
          }
        }
        return serialized || null;
      }
    }

    /**
     * Sets the value for multiple styles on a node.  If a value is specified as
     * '' (empty string), the corresponding style property will be unset.
     *
     * @param {DOMElement} node
     * @param {object} styles
     */
    function setValueForStyles(node, styles) {
      var style = node.style;
      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }
        var isCustomProperty = styleName.indexOf('--') === 0;
        {
          if (!isCustomProperty) {
            warnValidStyle$1(styleName, styles[styleName]);
          }
        }
        var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
        if (styleName === 'float') {
          styleName = 'cssFloat';
        }
        if (isCustomProperty) {
          style.setProperty(styleName, styleValue);
        } else {
          style[styleName] = styleValue;
        }
      }
    }

    // For HTML, certain tags should omit their close tag. We keep a whitelist for
    // those special-case tags.

    var omittedCloseTags = {
      area: true,
      base: true,
      br: true,
      col: true,
      embed: true,
      hr: true,
      img: true,
      input: true,
      keygen: true,
      link: true,
      meta: true,
      param: true,
      source: true,
      track: true,
      wbr: true
      // NOTE: menuitem's close tag should be omitted, but that causes problems.
    };

    // For HTML, certain tags cannot have children. This has the same purpose as
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.

    var voidElementTags = _assign({
      menuitem: true
    }, omittedCloseTags);

    // TODO: We can remove this if we add invariantWithStack()
    // or add stack by default to invariants where possible.
    var HTML$1 = '__html';

    var ReactDebugCurrentFrame$2 = null;
    {
      ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
    }

    function assertValidProps(tag, props) {
      if (!props) {
        return;
      }
      // Note the use of `==` which checks for null or undefined.
      if (voidElementTags[tag]) {
        !(props.children == null && props.dangerouslySetInnerHTML == null) ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', tag, ReactDebugCurrentFrame$2.getStackAddendum()) : void 0;
      }
      if (props.dangerouslySetInnerHTML != null) {
        !(props.children == null) ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : void 0;
        !(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML) ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : void 0;
      }
      {
        !(props.suppressContentEditableWarning || !props.contentEditable || props.children == null) ? warning$1(false, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
      }
      !(props.style == null || typeof props.style === 'object') ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', ReactDebugCurrentFrame$2.getStackAddendum()) : void 0;
    }

    function isCustomComponent(tagName, props) {
      if (tagName.indexOf('-') === -1) {
        return typeof props.is === 'string';
      }
      switch (tagName) {
        // These are reserved SVG and MathML elements.
        // We don't mind this whitelist too much because we expect it to never grow.
        // The alternative is to track the namespace in a few places which is convoluted.
        // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
        case 'annotation-xml':
        case 'color-profile':
        case 'font-face':
        case 'font-face-src':
        case 'font-face-uri':
        case 'font-face-format':
        case 'font-face-name':
        case 'missing-glyph':
          return false;
        default:
          return true;
      }
    }

    // When adding attributes to the HTML or SVG whitelist, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.
    var possibleStandardNames = {
      // HTML
      accept: 'accept',
      acceptcharset: 'acceptCharset',
      'accept-charset': 'acceptCharset',
      accesskey: 'accessKey',
      action: 'action',
      allowfullscreen: 'allowFullScreen',
      alt: 'alt',
      as: 'as',
      async: 'async',
      autocapitalize: 'autoCapitalize',
      autocomplete: 'autoComplete',
      autocorrect: 'autoCorrect',
      autofocus: 'autoFocus',
      autoplay: 'autoPlay',
      autosave: 'autoSave',
      capture: 'capture',
      cellpadding: 'cellPadding',
      cellspacing: 'cellSpacing',
      challenge: 'challenge',
      charset: 'charSet',
      checked: 'checked',
      children: 'children',
      cite: 'cite',
      class: 'className',
      classid: 'classID',
      classname: 'className',
      cols: 'cols',
      colspan: 'colSpan',
      content: 'content',
      contenteditable: 'contentEditable',
      contextmenu: 'contextMenu',
      controls: 'controls',
      controlslist: 'controlsList',
      coords: 'coords',
      crossorigin: 'crossOrigin',
      dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
      data: 'data',
      datetime: 'dateTime',
      default: 'default',
      defaultchecked: 'defaultChecked',
      defaultvalue: 'defaultValue',
      defer: 'defer',
      dir: 'dir',
      disabled: 'disabled',
      download: 'download',
      draggable: 'draggable',
      enctype: 'encType',
      for: 'htmlFor',
      form: 'form',
      formmethod: 'formMethod',
      formaction: 'formAction',
      formenctype: 'formEncType',
      formnovalidate: 'formNoValidate',
      formtarget: 'formTarget',
      frameborder: 'frameBorder',
      headers: 'headers',
      height: 'height',
      hidden: 'hidden',
      high: 'high',
      href: 'href',
      hreflang: 'hrefLang',
      htmlfor: 'htmlFor',
      httpequiv: 'httpEquiv',
      'http-equiv': 'httpEquiv',
      icon: 'icon',
      id: 'id',
      innerhtml: 'innerHTML',
      inputmode: 'inputMode',
      integrity: 'integrity',
      is: 'is',
      itemid: 'itemID',
      itemprop: 'itemProp',
      itemref: 'itemRef',
      itemscope: 'itemScope',
      itemtype: 'itemType',
      keyparams: 'keyParams',
      keytype: 'keyType',
      kind: 'kind',
      label: 'label',
      lang: 'lang',
      list: 'list',
      loop: 'loop',
      low: 'low',
      manifest: 'manifest',
      marginwidth: 'marginWidth',
      marginheight: 'marginHeight',
      max: 'max',
      maxlength: 'maxLength',
      media: 'media',
      mediagroup: 'mediaGroup',
      method: 'method',
      min: 'min',
      minlength: 'minLength',
      multiple: 'multiple',
      muted: 'muted',
      name: 'name',
      nomodule: 'noModule',
      nonce: 'nonce',
      novalidate: 'noValidate',
      open: 'open',
      optimum: 'optimum',
      pattern: 'pattern',
      placeholder: 'placeholder',
      playsinline: 'playsInline',
      poster: 'poster',
      preload: 'preload',
      profile: 'profile',
      radiogroup: 'radioGroup',
      readonly: 'readOnly',
      referrerpolicy: 'referrerPolicy',
      rel: 'rel',
      required: 'required',
      reversed: 'reversed',
      role: 'role',
      rows: 'rows',
      rowspan: 'rowSpan',
      sandbox: 'sandbox',
      scope: 'scope',
      scoped: 'scoped',
      scrolling: 'scrolling',
      seamless: 'seamless',
      selected: 'selected',
      shape: 'shape',
      size: 'size',
      sizes: 'sizes',
      span: 'span',
      spellcheck: 'spellCheck',
      src: 'src',
      srcdoc: 'srcDoc',
      srclang: 'srcLang',
      srcset: 'srcSet',
      start: 'start',
      step: 'step',
      style: 'style',
      summary: 'summary',
      tabindex: 'tabIndex',
      target: 'target',
      title: 'title',
      type: 'type',
      usemap: 'useMap',
      value: 'value',
      width: 'width',
      wmode: 'wmode',
      wrap: 'wrap',

      // SVG
      about: 'about',
      accentheight: 'accentHeight',
      'accent-height': 'accentHeight',
      accumulate: 'accumulate',
      additive: 'additive',
      alignmentbaseline: 'alignmentBaseline',
      'alignment-baseline': 'alignmentBaseline',
      allowreorder: 'allowReorder',
      alphabetic: 'alphabetic',
      amplitude: 'amplitude',
      arabicform: 'arabicForm',
      'arabic-form': 'arabicForm',
      ascent: 'ascent',
      attributename: 'attributeName',
      attributetype: 'attributeType',
      autoreverse: 'autoReverse',
      azimuth: 'azimuth',
      basefrequency: 'baseFrequency',
      baselineshift: 'baselineShift',
      'baseline-shift': 'baselineShift',
      baseprofile: 'baseProfile',
      bbox: 'bbox',
      begin: 'begin',
      bias: 'bias',
      by: 'by',
      calcmode: 'calcMode',
      capheight: 'capHeight',
      'cap-height': 'capHeight',
      clip: 'clip',
      clippath: 'clipPath',
      'clip-path': 'clipPath',
      clippathunits: 'clipPathUnits',
      cliprule: 'clipRule',
      'clip-rule': 'clipRule',
      color: 'color',
      colorinterpolation: 'colorInterpolation',
      'color-interpolation': 'colorInterpolation',
      colorinterpolationfilters: 'colorInterpolationFilters',
      'color-interpolation-filters': 'colorInterpolationFilters',
      colorprofile: 'colorProfile',
      'color-profile': 'colorProfile',
      colorrendering: 'colorRendering',
      'color-rendering': 'colorRendering',
      contentscripttype: 'contentScriptType',
      contentstyletype: 'contentStyleType',
      cursor: 'cursor',
      cx: 'cx',
      cy: 'cy',
      d: 'd',
      datatype: 'datatype',
      decelerate: 'decelerate',
      descent: 'descent',
      diffuseconstant: 'diffuseConstant',
      direction: 'direction',
      display: 'display',
      divisor: 'divisor',
      dominantbaseline: 'dominantBaseline',
      'dominant-baseline': 'dominantBaseline',
      dur: 'dur',
      dx: 'dx',
      dy: 'dy',
      edgemode: 'edgeMode',
      elevation: 'elevation',
      enablebackground: 'enableBackground',
      'enable-background': 'enableBackground',
      end: 'end',
      exponent: 'exponent',
      externalresourcesrequired: 'externalResourcesRequired',
      fill: 'fill',
      fillopacity: 'fillOpacity',
      'fill-opacity': 'fillOpacity',
      fillrule: 'fillRule',
      'fill-rule': 'fillRule',
      filter: 'filter',
      filterres: 'filterRes',
      filterunits: 'filterUnits',
      floodopacity: 'floodOpacity',
      'flood-opacity': 'floodOpacity',
      floodcolor: 'floodColor',
      'flood-color': 'floodColor',
      focusable: 'focusable',
      fontfamily: 'fontFamily',
      'font-family': 'fontFamily',
      fontsize: 'fontSize',
      'font-size': 'fontSize',
      fontsizeadjust: 'fontSizeAdjust',
      'font-size-adjust': 'fontSizeAdjust',
      fontstretch: 'fontStretch',
      'font-stretch': 'fontStretch',
      fontstyle: 'fontStyle',
      'font-style': 'fontStyle',
      fontvariant: 'fontVariant',
      'font-variant': 'fontVariant',
      fontweight: 'fontWeight',
      'font-weight': 'fontWeight',
      format: 'format',
      from: 'from',
      fx: 'fx',
      fy: 'fy',
      g1: 'g1',
      g2: 'g2',
      glyphname: 'glyphName',
      'glyph-name': 'glyphName',
      glyphorientationhorizontal: 'glyphOrientationHorizontal',
      'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
      glyphorientationvertical: 'glyphOrientationVertical',
      'glyph-orientation-vertical': 'glyphOrientationVertical',
      glyphref: 'glyphRef',
      gradienttransform: 'gradientTransform',
      gradientunits: 'gradientUnits',
      hanging: 'hanging',
      horizadvx: 'horizAdvX',
      'horiz-adv-x': 'horizAdvX',
      horizoriginx: 'horizOriginX',
      'horiz-origin-x': 'horizOriginX',
      ideographic: 'ideographic',
      imagerendering: 'imageRendering',
      'image-rendering': 'imageRendering',
      in2: 'in2',
      in: 'in',
      inlist: 'inlist',
      intercept: 'intercept',
      k1: 'k1',
      k2: 'k2',
      k3: 'k3',
      k4: 'k4',
      k: 'k',
      kernelmatrix: 'kernelMatrix',
      kernelunitlength: 'kernelUnitLength',
      kerning: 'kerning',
      keypoints: 'keyPoints',
      keysplines: 'keySplines',
      keytimes: 'keyTimes',
      lengthadjust: 'lengthAdjust',
      letterspacing: 'letterSpacing',
      'letter-spacing': 'letterSpacing',
      lightingcolor: 'lightingColor',
      'lighting-color': 'lightingColor',
      limitingconeangle: 'limitingConeAngle',
      local: 'local',
      markerend: 'markerEnd',
      'marker-end': 'markerEnd',
      markerheight: 'markerHeight',
      markermid: 'markerMid',
      'marker-mid': 'markerMid',
      markerstart: 'markerStart',
      'marker-start': 'markerStart',
      markerunits: 'markerUnits',
      markerwidth: 'markerWidth',
      mask: 'mask',
      maskcontentunits: 'maskContentUnits',
      maskunits: 'maskUnits',
      mathematical: 'mathematical',
      mode: 'mode',
      numoctaves: 'numOctaves',
      offset: 'offset',
      opacity: 'opacity',
      operator: 'operator',
      order: 'order',
      orient: 'orient',
      orientation: 'orientation',
      origin: 'origin',
      overflow: 'overflow',
      overlineposition: 'overlinePosition',
      'overline-position': 'overlinePosition',
      overlinethickness: 'overlineThickness',
      'overline-thickness': 'overlineThickness',
      paintorder: 'paintOrder',
      'paint-order': 'paintOrder',
      panose1: 'panose1',
      'panose-1': 'panose1',
      pathlength: 'pathLength',
      patterncontentunits: 'patternContentUnits',
      patterntransform: 'patternTransform',
      patternunits: 'patternUnits',
      pointerevents: 'pointerEvents',
      'pointer-events': 'pointerEvents',
      points: 'points',
      pointsatx: 'pointsAtX',
      pointsaty: 'pointsAtY',
      pointsatz: 'pointsAtZ',
      prefix: 'prefix',
      preservealpha: 'preserveAlpha',
      preserveaspectratio: 'preserveAspectRatio',
      primitiveunits: 'primitiveUnits',
      property: 'property',
      r: 'r',
      radius: 'radius',
      refx: 'refX',
      refy: 'refY',
      renderingintent: 'renderingIntent',
      'rendering-intent': 'renderingIntent',
      repeatcount: 'repeatCount',
      repeatdur: 'repeatDur',
      requiredextensions: 'requiredExtensions',
      requiredfeatures: 'requiredFeatures',
      resource: 'resource',
      restart: 'restart',
      result: 'result',
      results: 'results',
      rotate: 'rotate',
      rx: 'rx',
      ry: 'ry',
      scale: 'scale',
      security: 'security',
      seed: 'seed',
      shaperendering: 'shapeRendering',
      'shape-rendering': 'shapeRendering',
      slope: 'slope',
      spacing: 'spacing',
      specularconstant: 'specularConstant',
      specularexponent: 'specularExponent',
      speed: 'speed',
      spreadmethod: 'spreadMethod',
      startoffset: 'startOffset',
      stddeviation: 'stdDeviation',
      stemh: 'stemh',
      stemv: 'stemv',
      stitchtiles: 'stitchTiles',
      stopcolor: 'stopColor',
      'stop-color': 'stopColor',
      stopopacity: 'stopOpacity',
      'stop-opacity': 'stopOpacity',
      strikethroughposition: 'strikethroughPosition',
      'strikethrough-position': 'strikethroughPosition',
      strikethroughthickness: 'strikethroughThickness',
      'strikethrough-thickness': 'strikethroughThickness',
      string: 'string',
      stroke: 'stroke',
      strokedasharray: 'strokeDasharray',
      'stroke-dasharray': 'strokeDasharray',
      strokedashoffset: 'strokeDashoffset',
      'stroke-dashoffset': 'strokeDashoffset',
      strokelinecap: 'strokeLinecap',
      'stroke-linecap': 'strokeLinecap',
      strokelinejoin: 'strokeLinejoin',
      'stroke-linejoin': 'strokeLinejoin',
      strokemiterlimit: 'strokeMiterlimit',
      'stroke-miterlimit': 'strokeMiterlimit',
      strokewidth: 'strokeWidth',
      'stroke-width': 'strokeWidth',
      strokeopacity: 'strokeOpacity',
      'stroke-opacity': 'strokeOpacity',
      suppresscontenteditablewarning: 'suppressContentEditableWarning',
      suppresshydrationwarning: 'suppressHydrationWarning',
      surfacescale: 'surfaceScale',
      systemlanguage: 'systemLanguage',
      tablevalues: 'tableValues',
      targetx: 'targetX',
      targety: 'targetY',
      textanchor: 'textAnchor',
      'text-anchor': 'textAnchor',
      textdecoration: 'textDecoration',
      'text-decoration': 'textDecoration',
      textlength: 'textLength',
      textrendering: 'textRendering',
      'text-rendering': 'textRendering',
      to: 'to',
      transform: 'transform',
      typeof: 'typeof',
      u1: 'u1',
      u2: 'u2',
      underlineposition: 'underlinePosition',
      'underline-position': 'underlinePosition',
      underlinethickness: 'underlineThickness',
      'underline-thickness': 'underlineThickness',
      unicode: 'unicode',
      unicodebidi: 'unicodeBidi',
      'unicode-bidi': 'unicodeBidi',
      unicoderange: 'unicodeRange',
      'unicode-range': 'unicodeRange',
      unitsperem: 'unitsPerEm',
      'units-per-em': 'unitsPerEm',
      unselectable: 'unselectable',
      valphabetic: 'vAlphabetic',
      'v-alphabetic': 'vAlphabetic',
      values: 'values',
      vectoreffect: 'vectorEffect',
      'vector-effect': 'vectorEffect',
      version: 'version',
      vertadvy: 'vertAdvY',
      'vert-adv-y': 'vertAdvY',
      vertoriginx: 'vertOriginX',
      'vert-origin-x': 'vertOriginX',
      vertoriginy: 'vertOriginY',
      'vert-origin-y': 'vertOriginY',
      vhanging: 'vHanging',
      'v-hanging': 'vHanging',
      videographic: 'vIdeographic',
      'v-ideographic': 'vIdeographic',
      viewbox: 'viewBox',
      viewtarget: 'viewTarget',
      visibility: 'visibility',
      vmathematical: 'vMathematical',
      'v-mathematical': 'vMathematical',
      vocab: 'vocab',
      widths: 'widths',
      wordspacing: 'wordSpacing',
      'word-spacing': 'wordSpacing',
      writingmode: 'writingMode',
      'writing-mode': 'writingMode',
      x1: 'x1',
      x2: 'x2',
      x: 'x',
      xchannelselector: 'xChannelSelector',
      xheight: 'xHeight',
      'x-height': 'xHeight',
      xlinkactuate: 'xlinkActuate',
      'xlink:actuate': 'xlinkActuate',
      xlinkarcrole: 'xlinkArcrole',
      'xlink:arcrole': 'xlinkArcrole',
      xlinkhref: 'xlinkHref',
      'xlink:href': 'xlinkHref',
      xlinkrole: 'xlinkRole',
      'xlink:role': 'xlinkRole',
      xlinkshow: 'xlinkShow',
      'xlink:show': 'xlinkShow',
      xlinktitle: 'xlinkTitle',
      'xlink:title': 'xlinkTitle',
      xlinktype: 'xlinkType',
      'xlink:type': 'xlinkType',
      xmlbase: 'xmlBase',
      'xml:base': 'xmlBase',
      xmllang: 'xmlLang',
      'xml:lang': 'xmlLang',
      xmlns: 'xmlns',
      'xml:space': 'xmlSpace',
      xmlnsxlink: 'xmlnsXlink',
      'xmlns:xlink': 'xmlnsXlink',
      xmlspace: 'xmlSpace',
      y1: 'y1',
      y2: 'y2',
      y: 'y',
      ychannelselector: 'yChannelSelector',
      z: 'z',
      zoomandpan: 'zoomAndPan'
    };

    var ariaProperties = {
      'aria-current': 0, // state
      'aria-details': 0,
      'aria-disabled': 0, // state
      'aria-hidden': 0, // state
      'aria-invalid': 0, // state
      'aria-keyshortcuts': 0,
      'aria-label': 0,
      'aria-roledescription': 0,
      // Widget Attributes
      'aria-autocomplete': 0,
      'aria-checked': 0,
      'aria-expanded': 0,
      'aria-haspopup': 0,
      'aria-level': 0,
      'aria-modal': 0,
      'aria-multiline': 0,
      'aria-multiselectable': 0,
      'aria-orientation': 0,
      'aria-placeholder': 0,
      'aria-pressed': 0,
      'aria-readonly': 0,
      'aria-required': 0,
      'aria-selected': 0,
      'aria-sort': 0,
      'aria-valuemax': 0,
      'aria-valuemin': 0,
      'aria-valuenow': 0,
      'aria-valuetext': 0,
      // Live Region Attributes
      'aria-atomic': 0,
      'aria-busy': 0,
      'aria-live': 0,
      'aria-relevant': 0,
      // Drag-and-Drop Attributes
      'aria-dropeffect': 0,
      'aria-grabbed': 0,
      // Relationship Attributes
      'aria-activedescendant': 0,
      'aria-colcount': 0,
      'aria-colindex': 0,
      'aria-colspan': 0,
      'aria-controls': 0,
      'aria-describedby': 0,
      'aria-errormessage': 0,
      'aria-flowto': 0,
      'aria-labelledby': 0,
      'aria-owns': 0,
      'aria-posinset': 0,
      'aria-rowcount': 0,
      'aria-rowindex': 0,
      'aria-rowspan': 0,
      'aria-setsize': 0
    };

    var warnedProperties = {};
    var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

    var hasOwnProperty$2 = Object.prototype.hasOwnProperty;

    function validateProperty(tagName, name) {
      if (hasOwnProperty$2.call(warnedProperties, name) && warnedProperties[name]) {
        return true;
      }

      if (rARIACamel.test(name)) {
        var ariaName = 'aria-' + name.slice(4).toLowerCase();
        var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;

        // If this is an aria-* attribute, but is not listed in the known DOM
        // DOM properties, then it is an invalid aria-* attribute.
        if (correctName == null) {
          warning$1(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
          warnedProperties[name] = true;
          return true;
        }
        // aria-* attributes should be lowercase; suggest the lowercase version.
        if (name !== correctName) {
          warning$1(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
          warnedProperties[name] = true;
          return true;
        }
      }

      if (rARIA.test(name)) {
        var lowerCasedName = name.toLowerCase();
        var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;

        // If this is an aria-* attribute, but is not listed in the known DOM
        // DOM properties, then it is an invalid aria-* attribute.
        if (standardName == null) {
          warnedProperties[name] = true;
          return false;
        }
        // aria-* attributes should be lowercase; suggest the lowercase version.
        if (name !== standardName) {
          warning$1(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
          warnedProperties[name] = true;
          return true;
        }
      }

      return true;
    }

    function warnInvalidARIAProps(type, props) {
      var invalidProps = [];

      for (var key in props) {
        var isValid = validateProperty(type, key);
        if (!isValid) {
          invalidProps.push(key);
        }
      }

      var unknownPropString = invalidProps.map(function (prop) {
        return '`' + prop + '`';
      }).join(', ');

      if (invalidProps.length === 1) {
        warning$1(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
      } else if (invalidProps.length > 1) {
        warning$1(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
      }
    }

    function validateProperties(type, props) {
      if (isCustomComponent(type, props)) {
        return;
      }
      warnInvalidARIAProps(type, props);
    }

    var didWarnValueNull = false;

    function validateProperties$1(type, props) {
      if (type !== 'input' && type !== 'textarea' && type !== 'select') {
        return;
      }

      if (props != null && props.value === null && !didWarnValueNull) {
        didWarnValueNull = true;
        if (type === 'select' && props.multiple) {
          warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
        } else {
          warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
        }
      }
    }

    var validateProperty$1 = function () {};

    {
      var warnedProperties$1 = {};
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      var EVENT_NAME_REGEX = /^on./;
      var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
      var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
      var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

      validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
        if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
          return true;
        }

        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
          warning$1(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
          warnedProperties$1[name] = true;
          return true;
        }

        // We can't rely on the event system being injected on the server.
        if (canUseEventSystem) {
          if (registrationNameModules.hasOwnProperty(name)) {
            return true;
          }
          var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
          if (registrationName != null) {
            warning$1(false, 'Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
            warnedProperties$1[name] = true;
            return true;
          }
          if (EVENT_NAME_REGEX.test(name)) {
            warning$1(false, 'Unknown event handler property `%s`. It will be ignored.', name);
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (EVENT_NAME_REGEX.test(name)) {
          // If no event plugins have been injected, we are in a server environment.
          // So we can't tell if the event name is correct for sure, but we can filter
          // out known bad ones like `onclick`. We can't suggest a specific replacement though.
          if (INVALID_EVENT_NAME_REGEX.test(name)) {
            warning$1(false, 'Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
          }
          warnedProperties$1[name] = true;
          return true;
        }

        // Let the ARIA attribute hook validate ARIA attributes
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
          return true;
        }

        if (lowerCasedName === 'innerhtml') {
          warning$1(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
          warnedProperties$1[name] = true;
          return true;
        }

        if (lowerCasedName === 'aria') {
          warning$1(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
          warnedProperties$1[name] = true;
          return true;
        }

        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
          warning$1(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);
          warnedProperties$1[name] = true;
          return true;
        }

        if (typeof value === 'number' && isNaN(value)) {
          warning$1(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);
          warnedProperties$1[name] = true;
          return true;
        }

        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;

        // Known attributes should match the casing specified in the property config.
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          var standardName = possibleStandardNames[lowerCasedName];
          if (standardName !== name) {
            warning$1(false, 'Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (!isReserved && name !== lowerCasedName) {
          // Unknown attributes should have lowercase casing since that's how they
          // will be cased anyway with server rendering.
          warning$1(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);
          warnedProperties$1[name] = true;
          return true;
        }

        if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
          if (value) {
            warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
          } else {
            warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
          }
          warnedProperties$1[name] = true;
          return true;
        }

        // Now that we've validated casing, do not validate
        // data types for reserved props
        if (isReserved) {
          return true;
        }

        // Warn when a known attribute is a bad type
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
          warnedProperties$1[name] = true;
          return false;
        }

        // Warn when passing the strings 'false' or 'true' into a boolean prop
        if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
          warning$1(false, 'Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
          warnedProperties$1[name] = true;
          return true;
        }

        return true;
      };
    }

    var warnUnknownProperties = function (type, props, canUseEventSystem) {
      var unknownProps = [];
      for (var key in props) {
        var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);
        if (!isValid) {
          unknownProps.push(key);
        }
      }

      var unknownPropString = unknownProps.map(function (prop) {
        return '`' + prop + '`';
      }).join(', ');
      if (unknownProps.length === 1) {
        warning$1(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
      } else if (unknownProps.length > 1) {
        warning$1(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
      }
    };

    function validateProperties$2(type, props, canUseEventSystem) {
      if (isCustomComponent(type, props)) {
        return;
      }
      warnUnknownProperties(type, props, canUseEventSystem);
    }

    // TODO: direct imports like some-package/src/* are bad. Fix me.
    var didWarnInvalidHydration = false;
    var didWarnShadyDOM = false;

    var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
    var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
    var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
    var AUTOFOCUS = 'autoFocus';
    var CHILDREN = 'children';
    var STYLE$1 = 'style';
    var HTML = '__html';

    var HTML_NAMESPACE = Namespaces.html;


    var warnedUnknownTags = void 0;
    var suppressHydrationWarning = void 0;

    var validatePropertiesInDevelopment = void 0;
    var warnForTextDifference = void 0;
    var warnForPropDifference = void 0;
    var warnForExtraAttributes = void 0;
    var warnForInvalidEventListener = void 0;
    var canDiffStyleForHydrationWarning = void 0;

    var normalizeMarkupForTextOrAttribute = void 0;
    var normalizeHTML = void 0;

    {
      warnedUnknownTags = {
        // Chrome is the only major browser not shipping <time>. But as of July
        // 2017 it intends to ship it due to widespread usage. We intentionally
        // *don't* warn for <time> even if it's unrecognized by Chrome because
        // it soon will be, and many apps have been using it anyway.
        time: true,
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
      };

      validatePropertiesInDevelopment = function (type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, /* canUseEventSystem */true);
      };

      // IE 11 parses & normalizes the style attribute as opposed to other
      // browsers. It adds spaces and sorts the properties in some
      // non-alphabetical order. Handling that would require sorting CSS
      // properties in the client & server versions or applying
      // `expectedStyle` to a temporary DOM node to read its `style` attribute
      // normalized. Since it only affects IE, we're skipping style warnings
      // in that browser completely in favor of doing all that work.
      // See https://github.com/facebook/react/issues/11807
      canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;

      // HTML parsing normalizes CR and CRLF to LF.
      // It also can turn \u0000 into \uFFFD inside attributes.
      // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
      // If we have a mismatch, it might be caused by that.
      // We will still patch up in this case but not fire the warning.
      var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
      var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

      normalizeMarkupForTextOrAttribute = function (markup) {
        var markupString = typeof markup === 'string' ? markup : '' + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
      };

      warnForTextDifference = function (serverText, clientText) {
        if (didWarnInvalidHydration) {
          return;
        }
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) {
          return;
        }
        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
      };

      warnForPropDifference = function (propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) {
          return;
        }
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) {
          return;
        }
        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
      };

      warnForExtraAttributes = function (attributeNames) {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function (name) {
          names.push(name);
        });
        warningWithoutStack$1(false, 'Extra attributes from the server: %s', names);
      };

      warnForInvalidEventListener = function (registrationName, listener) {
        if (listener === false) {
          warning$1(false, 'Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
        } else {
          warning$1(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
        }
      };

      // Parse the HTML and read it back to normalize the HTML string so that it
      // can be used for comparison.
      normalizeHTML = function (parent, html) {
        // We could have created a separate document here to avoid
        // re-initializing custom elements if they exist. But this breaks
        // how <noscript> is being handled. So we use the same document.
        // See the discussion in https://github.com/facebook/react/pull/11157.
        var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
      };
    }

    function ensureListeningTo(rootContainerElement, registrationName) {
      var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
      var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
      listenTo(registrationName, doc);
    }

    function getOwnerDocumentFromRootContainer(rootContainerElement) {
      return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }

    function noop() {}

    function trapClickOnNonInteractiveElement(node) {
      // Mobile Safari does not fire properly bubble click events on
      // non-interactive elements, which means delegated click listeners do not
      // fire. The workaround for this bug involves attaching an empty click
      // listener on the target node.
      // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
      // Just set it using the onclick property so that we don't have to manage any
      // bookkeeping for it. Not sure if we need to clear it when the listener is
      // removed.
      // TODO: Only do this for the relevant Safaris maybe?
      node.onclick = noop;
    }

    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
      for (var propKey in nextProps) {
        if (!nextProps.hasOwnProperty(propKey)) {
          continue;
        }
        var nextProp = nextProps[propKey];
        if (propKey === STYLE$1) {
          {
            if (nextProp) {
              // Freeze the next style object so that we can assume it won't be
              // mutated. We have already warned for this in the past.
              Object.freeze(nextProp);
            }
          }
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          setValueForStyles(domElement, nextProp);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML] : undefined;
          if (nextHtml != null) {
            setInnerHTML(domElement, nextHtml);
          }
        } else if (propKey === CHILDREN) {
          if (typeof nextProp === 'string') {
            // Avoid setting initial textContent when the text is empty. In IE11 setting
            // textContent on a <textarea> will cause the placeholder to not
            // show within the <textarea> until it has been focused and blurred again.
            // https://github.com/facebook/react/issues/6731#issuecomment-254874553
            var canSetTextContent = tag !== 'textarea' || nextProp !== '';
            if (canSetTextContent) {
              setTextContent(domElement, nextProp);
            }
          } else if (typeof nextProp === 'number') {
            setTextContent(domElement, '' + nextProp);
          }
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (typeof nextProp !== 'function') {
              warnForInvalidEventListener(propKey, nextProp);
            }
            ensureListeningTo(rootContainerElement, propKey);
          }
        } else if (nextProp != null) {
          setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
      }
    }

    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
      // TODO: Handle wasCustomComponentTag
      for (var i = 0; i < updatePayload.length; i += 2) {
        var propKey = updatePayload[i];
        var propValue = updatePayload[i + 1];
        if (propKey === STYLE$1) {
          setValueForStyles(domElement, propValue);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          setInnerHTML(domElement, propValue);
        } else if (propKey === CHILDREN) {
          setTextContent(domElement, propValue);
        } else {
          setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
      }
    }

    function createElement(type, props, rootContainerElement, parentNamespace) {
      var isCustomComponentTag = void 0;

      // We create tags in the namespace of their parent container, except HTML
      // tags get no namespace.
      var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
      var domElement = void 0;
      var namespaceURI = parentNamespace;
      if (namespaceURI === HTML_NAMESPACE) {
        namespaceURI = getIntrinsicNamespace(type);
      }
      if (namespaceURI === HTML_NAMESPACE) {
        {
          isCustomComponentTag = isCustomComponent(type, props);
          // Should this check be gated by parent namespace? Not sure we want to
          // allow <SVG> or <mATH>.
          !(isCustomComponentTag || type === type.toLowerCase()) ? warning$1(false, '<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type) : void 0;
        }

        if (type === 'script') {
          // Create the script via .innerHTML so its "parser-inserted" flag is
          // set to true and it does not execute
          var div = ownerDocument.createElement('div');
          div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
          // This is guaranteed to yield a script element.
          var firstChild = div.firstChild;
          domElement = div.removeChild(firstChild);
        } else if (typeof props.is === 'string') {
          // $FlowIssue `createElement` should be updated for Web Components
          domElement = ownerDocument.createElement(type, { is: props.is });
        } else {
          // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
          // See discussion in https://github.com/facebook/react/pull/6896
          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
          domElement = ownerDocument.createElement(type);
          // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple`
          // attribute on `select`s needs to be added before `option`s are inserted. This prevents
          // a bug where the `select` does not scroll to the correct option because singular
          // `select` elements automatically pick the first item.
          // See https://github.com/facebook/react/issues/13222
          if (type === 'select' && props.multiple) {
            var node = domElement;
            node.multiple = true;
          }
        }
      } else {
        domElement = ownerDocument.createElementNS(namespaceURI, type);
      }

      {
        if (namespaceURI === HTML_NAMESPACE) {
          if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
            warnedUnknownTags[type] = true;
            warning$1(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
          }
        }
      }

      return domElement;
    }

    function createTextNode(text, rootContainerElement) {
      return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }

    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
      var isCustomComponentTag = isCustomComponent(tag, rawProps);
      {
        validatePropertiesInDevelopment(tag, rawProps);
        if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
          warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
          didWarnShadyDOM = true;
        }
      }

      // TODO: Make sure that we check isMounted before firing any of these events.
      var props = void 0;
      switch (tag) {
        case 'iframe':
        case 'object':
          trapBubbledEvent(TOP_LOAD, domElement);
          props = rawProps;
          break;
        case 'video':
        case 'audio':
          // Create listener for each media event
          for (var i = 0; i < mediaEventTypes.length; i++) {
            trapBubbledEvent(mediaEventTypes[i], domElement);
          }
          props = rawProps;
          break;
        case 'source':
          trapBubbledEvent(TOP_ERROR, domElement);
          props = rawProps;
          break;
        case 'img':
        case 'image':
        case 'link':
          trapBubbledEvent(TOP_ERROR, domElement);
          trapBubbledEvent(TOP_LOAD, domElement);
          props = rawProps;
          break;
        case 'form':
          trapBubbledEvent(TOP_RESET, domElement);
          trapBubbledEvent(TOP_SUBMIT, domElement);
          props = rawProps;
          break;
        case 'details':
          trapBubbledEvent(TOP_TOGGLE, domElement);
          props = rawProps;
          break;
        case 'input':
          initWrapperState(domElement, rawProps);
          props = getHostProps(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement);
          // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.
          ensureListeningTo(rootContainerElement, 'onChange');
          break;
        case 'option':
          validateProps(domElement, rawProps);
          props = getHostProps$1(domElement, rawProps);
          break;
        case 'select':
          initWrapperState$1(domElement, rawProps);
          props = getHostProps$2(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement);
          // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.
          ensureListeningTo(rootContainerElement, 'onChange');
          break;
        case 'textarea':
          initWrapperState$2(domElement, rawProps);
          props = getHostProps$3(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement);
          // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.
          ensureListeningTo(rootContainerElement, 'onChange');
          break;
        default:
          props = rawProps;
      }

      assertValidProps(tag, props);

      setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

      switch (tag) {
        case 'input':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper(domElement, rawProps, false);
          break;
        case 'textarea':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper$3(domElement, rawProps);
          break;
        case 'option':
          postMountWrapper$1(domElement, rawProps);
          break;
        case 'select':
          postMountWrapper$2(domElement, rawProps);
          break;
        default:
          if (typeof props.onClick === 'function') {
            // TODO: This cast may not be sound for SVG, MathML or custom elements.
            trapClickOnNonInteractiveElement(domElement);
          }
          break;
      }
    }

    // Calculate the diff between the two objects.
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
      {
        validatePropertiesInDevelopment(tag, nextRawProps);
      }

      var updatePayload = null;

      var lastProps = void 0;
      var nextProps = void 0;
      switch (tag) {
        case 'input':
          lastProps = getHostProps(domElement, lastRawProps);
          nextProps = getHostProps(domElement, nextRawProps);
          updatePayload = [];
          break;
        case 'option':
          lastProps = getHostProps$1(domElement, lastRawProps);
          nextProps = getHostProps$1(domElement, nextRawProps);
          updatePayload = [];
          break;
        case 'select':
          lastProps = getHostProps$2(domElement, lastRawProps);
          nextProps = getHostProps$2(domElement, nextRawProps);
          updatePayload = [];
          break;
        case 'textarea':
          lastProps = getHostProps$3(domElement, lastRawProps);
          nextProps = getHostProps$3(domElement, nextRawProps);
          updatePayload = [];
          break;
        default:
          lastProps = lastRawProps;
          nextProps = nextRawProps;
          if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
            // TODO: This cast may not be sound for SVG, MathML or custom elements.
            trapClickOnNonInteractiveElement(domElement);
          }
          break;
      }

      assertValidProps(tag, nextProps);

      var propKey = void 0;
      var styleName = void 0;
      var styleUpdates = null;
      for (propKey in lastProps) {
        if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
          continue;
        }
        if (propKey === STYLE$1) {
          var lastStyle = lastProps[propKey];
          for (styleName in lastStyle) {
            if (lastStyle.hasOwnProperty(styleName)) {
              if (!styleUpdates) {
                styleUpdates = {};
              }
              styleUpdates[styleName] = '';
            }
          }
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
          // This is a special case. If any listener updates we need to ensure
          // that the "current" fiber pointer gets updated so we need a commit
          // to update this element.
          if (!updatePayload) {
            updatePayload = [];
          }
        } else {
          // For all other deleted properties we add it to the queue. We use
          // the whitelist in the commit phase instead.
          (updatePayload = updatePayload || []).push(propKey, null);
        }
      }
      for (propKey in nextProps) {
        var nextProp = nextProps[propKey];
        var lastProp = lastProps != null ? lastProps[propKey] : undefined;
        if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
          continue;
        }
        if (propKey === STYLE$1) {
          {
            if (nextProp) {
              // Freeze the next style object so that we can assume it won't be
              // mutated. We have already warned for this in the past.
              Object.freeze(nextProp);
            }
          }
          if (lastProp) {
            // Unset styles on `lastProp` but not on `nextProp`.
            for (styleName in lastProp) {
              if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = '';
              }
            }
            // Update styles that changed since `lastProp`.
            for (styleName in nextProp) {
              if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = nextProp[styleName];
              }
            }
          } else {
            // Relies on `updateStylesByID` not mutating `styleUpdates`.
            if (!styleUpdates) {
              if (!updatePayload) {
                updatePayload = [];
              }
              updatePayload.push(propKey, styleUpdates);
            }
            styleUpdates = nextProp;
          }
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML] : undefined;
          var lastHtml = lastProp ? lastProp[HTML] : undefined;
          if (nextHtml != null) {
            if (lastHtml !== nextHtml) {
              (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);
            }
          }
        } else if (propKey === CHILDREN) {
          if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
            (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
          }
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            // We eagerly listen to this even though we haven't committed yet.
            if (typeof nextProp !== 'function') {
              warnForInvalidEventListener(propKey, nextProp);
            }
            ensureListeningTo(rootContainerElement, propKey);
          }
          if (!updatePayload && lastProp !== nextProp) {
            // This is a special case. If any listener updates we need to ensure
            // that the "current" props pointer gets updated so we need a commit
            // to update this element.
            updatePayload = [];
          }
        } else {
          // For any other property we always add it to the queue and then we
          // filter it out using the whitelist during the commit.
          (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
      }
      if (styleUpdates) {
        (updatePayload = updatePayload || []).push(STYLE$1, styleUpdates);
      }
      return updatePayload;
    }

    // Apply the diff.
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
      // Update checked *before* name.
      // In the middle of an update, it is possible to have multiple checked.
      // When a checked radio tries to change name, browser makes another radio's checked false.
      if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
        updateChecked(domElement, nextRawProps);
      }

      var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
      var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
      // Apply the diff.
      updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);

      // TODO: Ensure that an update gets scheduled if any of the special props
      // changed.
      switch (tag) {
        case 'input':
          // Update the wrapper around inputs *after* updating props. This has to
          // happen after `updateDOMProperties`. Otherwise HTML5 input validations
          // raise warnings and prevent the new value from being assigned.
          updateWrapper(domElement, nextRawProps);
          break;
        case 'textarea':
          updateWrapper$1(domElement, nextRawProps);
          break;
        case 'select':
          // <select> value update needs to occur after <option> children
          // reconciliation
          postUpdateWrapper(domElement, nextRawProps);
          break;
      }
    }

    function getPossibleStandardName(propName) {
      {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          return null;
        }
        return possibleStandardNames[lowerCasedName] || null;
      }
      return null;
    }

    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
      var isCustomComponentTag = void 0;
      var extraAttributeNames = void 0;

      {
        suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
          warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
          didWarnShadyDOM = true;
        }
      }

      // TODO: Make sure that we check isMounted before firing any of these events.
      switch (tag) {
        case 'iframe':
        case 'object':
          trapBubbledEvent(TOP_LOAD, domElement);
          break;
        case 'video':
        case 'audio':
          // Create listener for each media event
          for (var i = 0; i < mediaEventTypes.length; i++) {
            trapBubbledEvent(mediaEventTypes[i], domElement);
          }
          break;
        case 'source':
          trapBubbledEvent(TOP_ERROR, domElement);
          break;
        case 'img':
        case 'image':
        case 'link':
          trapBubbledEvent(TOP_ERROR, domElement);
          trapBubbledEvent(TOP_LOAD, domElement);
          break;
        case 'form':
          trapBubbledEvent(TOP_RESET, domElement);
          trapBubbledEvent(TOP_SUBMIT, domElement);
          break;
        case 'details':
          trapBubbledEvent(TOP_TOGGLE, domElement);
          break;
        case 'input':
          initWrapperState(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement);
          // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.
          ensureListeningTo(rootContainerElement, 'onChange');
          break;
        case 'option':
          validateProps(domElement, rawProps);
          break;
        case 'select':
          initWrapperState$1(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement);
          // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.
          ensureListeningTo(rootContainerElement, 'onChange');
          break;
        case 'textarea':
          initWrapperState$2(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement);
          // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.
          ensureListeningTo(rootContainerElement, 'onChange');
          break;
      }

      assertValidProps(tag, rawProps);

      {
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;
        for (var _i = 0; _i < attributes.length; _i++) {
          var name = attributes[_i].name.toLowerCase();
          switch (name) {
            // Built-in SSR attribute is whitelisted
            case 'data-reactroot':
              break;
            // Controlled attributes are not validated
            // TODO: Only ignore them on controlled tags.
            case 'value':
              break;
            case 'checked':
              break;
            case 'selected':
              break;
            default:
              // Intentionally use the original name.
              // See discussion in https://github.com/facebook/react/pull/10676.
              extraAttributeNames.add(attributes[_i].name);
          }
        }
      }

      var updatePayload = null;
      for (var propKey in rawProps) {
        if (!rawProps.hasOwnProperty(propKey)) {
          continue;
        }
        var nextProp = rawProps[propKey];
        if (propKey === CHILDREN) {
          // For text content children we compare against textContent. This
          // might match additional HTML that is hidden when we read it using
          // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
          // satisfies our requirement. Our requirement is not to produce perfect
          // HTML and attributes. Ideally we should preserve structure but it's
          // ok not to if the visible content is still enough to indicate what
          // even listeners these nodes might be wired up to.
          // TODO: Warn if there is more than a single textNode as a child.
          // TODO: Should we use domElement.firstChild.nodeValue to compare?
          if (typeof nextProp === 'string') {
            if (domElement.textContent !== nextProp) {
              if (!suppressHydrationWarning) {
                warnForTextDifference(domElement.textContent, nextProp);
              }
              updatePayload = [CHILDREN, nextProp];
            }
          } else if (typeof nextProp === 'number') {
            if (domElement.textContent !== '' + nextProp) {
              if (!suppressHydrationWarning) {
                warnForTextDifference(domElement.textContent, nextProp);
              }
              updatePayload = [CHILDREN, '' + nextProp];
            }
          }
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (typeof nextProp !== 'function') {
              warnForInvalidEventListener(propKey, nextProp);
            }
            ensureListeningTo(rootContainerElement, propKey);
          }
        } else if (typeof isCustomComponentTag === 'boolean') {
          // Validate that the properties correspond to their expected values.
          var serverValue = void 0;
          var propertyInfo = getPropertyInfo(propKey);
          if (suppressHydrationWarning) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1 ||
          // Controlled attributes are not validated
          // TODO: Only ignore them on controlled tags.
          propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var serverHTML = domElement.innerHTML;
            var nextHtml = nextProp ? nextProp[HTML] : undefined;
            var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');
            if (expectedHTML !== serverHTML) {
              warnForPropDifference(propKey, serverHTML, expectedHTML);
            }
          } else if (propKey === STYLE$1) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey);

            if (canDiffStyleForHydrationWarning) {
              var expectedStyle = createDangerousStringForStyles(nextProp);
              serverValue = domElement.getAttribute('style');
              if (expectedStyle !== serverValue) {
                warnForPropDifference(propKey, serverValue, expectedStyle);
              }
            }
          } else if (isCustomComponentTag) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey.toLowerCase());
            serverValue = getValueForAttribute(domElement, propKey, nextProp);

            if (nextProp !== serverValue) {
              warnForPropDifference(propKey, serverValue, nextProp);
            }
          } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
            var isMismatchDueToBadCasing = false;
            if (propertyInfo !== null) {
              // $FlowFixMe - Should be inferred as not undefined.
              extraAttributeNames.delete(propertyInfo.attributeName);
              serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
            } else {
              var ownNamespace = parentNamespace;
              if (ownNamespace === HTML_NAMESPACE) {
                ownNamespace = getIntrinsicNamespace(tag);
              }
              if (ownNamespace === HTML_NAMESPACE) {
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.delete(propKey.toLowerCase());
              } else {
                var standardName = getPossibleStandardName(propKey);
                if (standardName !== null && standardName !== propKey) {
                  // If an SVG prop is supplied with bad casing, it will
                  // be successfully parsed from HTML, but will produce a mismatch
                  // (and would be incorrectly rendered on the client).
                  // However, we already warn about bad casing elsewhere.
                  // So we'll skip the misleading extra mismatch warning in this case.
                  isMismatchDueToBadCasing = true;
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.delete(standardName);
                }
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.delete(propKey);
              }
              serverValue = getValueForAttribute(domElement, propKey, nextProp);
            }

            if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
              warnForPropDifference(propKey, serverValue, nextProp);
            }
          }
        }
      }

      {
        // $FlowFixMe - Should be inferred as not undefined.
        if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
          // $FlowFixMe - Should be inferred as not undefined.
          warnForExtraAttributes(extraAttributeNames);
        }
      }

      switch (tag) {
        case 'input':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper(domElement, rawProps, true);
          break;
        case 'textarea':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper$3(domElement, rawProps);
          break;
        case 'select':
        case 'option':
          // For input and textarea we current always set the value property at
          // post mount to force it to diverge from attributes. However, for
          // option and select we don't quite do the same thing and select
          // is not resilient to the DOM state changing so we don't do that here.
          // TODO: Consider not doing this for input and textarea.
          break;
        default:
          if (typeof rawProps.onClick === 'function') {
            // TODO: This cast may not be sound for SVG, MathML or custom elements.
            trapClickOnNonInteractiveElement(domElement);
          }
          break;
      }

      return updatePayload;
    }

    function diffHydratedText(textNode, text) {
      var isDifferent = textNode.nodeValue !== text;
      return isDifferent;
    }

    function warnForUnmatchedText(textNode, text) {
      {
        warnForTextDifference(textNode.nodeValue, text);
      }
    }

    function warnForDeletedHydratableElement(parentNode, child) {
      {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
      }
    }

    function warnForDeletedHydratableText(parentNode, child) {
      {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
      }
    }

    function warnForInsertedHydratedElement(parentNode, tag, props) {
      {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
      }
    }

    function warnForInsertedHydratedText(parentNode, text) {
      {
        if (text === '') {
          // We expect to insert empty text nodes since they're not represented in
          // the HTML.
          // TODO: Remove this special case if we can just avoid inserting empty
          // text nodes.
          return;
        }
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
      }
    }

    function restoreControlledState$1(domElement, tag, props) {
      switch (tag) {
        case 'input':
          restoreControlledState(domElement, props);
          return;
        case 'textarea':
          restoreControlledState$3(domElement, props);
          return;
        case 'select':
          restoreControlledState$2(domElement, props);
          return;
      }
    }

    // TODO: direct imports like some-package/src/* are bad. Fix me.
    var validateDOMNesting = function () {};
    var updatedAncestorInfo = function () {};

    {
      // This validation code was written based on the HTML5 parsing spec:
      // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
      //
      // Note: this does not catch all invalid nesting, nor does it try to (as it's
      // not clear what practical benefit doing so provides); instead, we warn only
      // for cases where the parser will give a parse tree differing from what React
      // intended. For example, <b><div></div></b> is invalid but we don't warn
      // because it still parses correctly; we do warn for other cases like nested
      // <p> tags where the beginning of the second element implicitly closes the
      // first, causing a confusing mess.

      // https://html.spec.whatwg.org/multipage/syntax.html#special
      var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

      // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
      var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

      // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
      // TODO: Distinguish by namespace here -- for <title>, including it here
      // errs on the side of fewer warnings
      'foreignObject', 'desc', 'title'];

      // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
      var buttonScopeTags = inScopeTags.concat(['button']);

      // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
      var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

      var emptyAncestorInfo = {
        current: null,

        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,

        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
      };

      updatedAncestorInfo = function (oldInfo, tag) {
        var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
        var info = { tag: tag };

        if (inScopeTags.indexOf(tag) !== -1) {
          ancestorInfo.aTagInScope = null;
          ancestorInfo.buttonTagInScope = null;
          ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) {
          ancestorInfo.pTagInButtonScope = null;
        }

        // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
          ancestorInfo.listItemTagAutoclosing = null;
          ancestorInfo.dlItemTagAutoclosing = null;
        }

        ancestorInfo.current = info;

        if (tag === 'form') {
          ancestorInfo.formTag = info;
        }
        if (tag === 'a') {
          ancestorInfo.aTagInScope = info;
        }
        if (tag === 'button') {
          ancestorInfo.buttonTagInScope = info;
        }
        if (tag === 'nobr') {
          ancestorInfo.nobrTagInScope = info;
        }
        if (tag === 'p') {
          ancestorInfo.pTagInButtonScope = info;
        }
        if (tag === 'li') {
          ancestorInfo.listItemTagAutoclosing = info;
        }
        if (tag === 'dd' || tag === 'dt') {
          ancestorInfo.dlItemTagAutoclosing = info;
        }

        return ancestorInfo;
      };

      /**
       * Returns whether
       */
      var isTagValidWithParent = function (tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch (parentTag) {
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
          case 'select':
            return tag === 'option' || tag === 'optgroup' || tag === '#text';
          case 'optgroup':
            return tag === 'option' || tag === '#text';
          // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
          // but
          case 'option':
            return tag === '#text';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
          // No special behavior since these rules fall back to "in body" mode for
          // all except special table nodes which cause bad parsing behavior anyway.

          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
          case 'tr':
            return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
          case 'tbody':
          case 'thead':
          case 'tfoot':
            return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
          case 'colgroup':
            return tag === 'col' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
          case 'table':
            return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
          case 'head':
            return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
          case 'html':
            return tag === 'head' || tag === 'body';
          case '#document':
            return tag === 'html';
        }

        // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        switch (tag) {
          case 'h1':
          case 'h2':
          case 'h3':
          case 'h4':
          case 'h5':
          case 'h6':
            return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

          case 'rp':
          case 'rt':
            return impliedEndTags.indexOf(parentTag) === -1;

          case 'body':
          case 'caption':
          case 'col':
          case 'colgroup':
          case 'frame':
          case 'head':
          case 'html':
          case 'tbody':
          case 'td':
          case 'tfoot':
          case 'th':
          case 'thead':
          case 'tr':
            // These tags are only valid with a few parents that have special child
            // parsing rules -- if we're down here, then none of those matched and
            // so we allow it only if we don't know what the parent is, as all other
            // cases are invalid.
            return parentTag == null;
        }

        return true;
      };

      /**
       * Returns whether
       */
      var findInvalidAncestorForTag = function (tag, ancestorInfo) {
        switch (tag) {
          case 'address':
          case 'article':
          case 'aside':
          case 'blockquote':
          case 'center':
          case 'details':
          case 'dialog':
          case 'dir':
          case 'div':
          case 'dl':
          case 'fieldset':
          case 'figcaption':
          case 'figure':
          case 'footer':
          case 'header':
          case 'hgroup':
          case 'main':
          case 'menu':
          case 'nav':
          case 'ol':
          case 'p':
          case 'section':
          case 'summary':
          case 'ul':
          case 'pre':
          case 'listing':
          case 'table':
          case 'hr':
          case 'xmp':
          case 'h1':
          case 'h2':
          case 'h3':
          case 'h4':
          case 'h5':
          case 'h6':
            return ancestorInfo.pTagInButtonScope;

          case 'form':
            return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

          case 'li':
            return ancestorInfo.listItemTagAutoclosing;

          case 'dd':
          case 'dt':
            return ancestorInfo.dlItemTagAutoclosing;

          case 'button':
            return ancestorInfo.buttonTagInScope;

          case 'a':
            // Spec says something about storing a list of markers, but it sounds
            // equivalent to this check.
            return ancestorInfo.aTagInScope;

          case 'nobr':
            return ancestorInfo.nobrTagInScope;
        }

        return null;
      };

      var didWarn = {};

      validateDOMNesting = function (childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;

        if (childText != null) {
          !(childTag == null) ? warningWithoutStack$1(false, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
          childTag = '#text';
        }

        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) {
          return;
        }

        var ancestorTag = invalidParentOrAncestor.tag;
        var addendum = getCurrentFiberStackInDev();

        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;
        if (didWarn[warnKey]) {
          return;
        }
        didWarn[warnKey] = true;

        var tagDisplayName = childTag;
        var whitespaceInfo = '';
        if (childTag === '#text') {
          if (/\S/.test(childText)) {
            tagDisplayName = 'Text nodes';
          } else {
            tagDisplayName = 'Whitespace text nodes';
            whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
          }
        } else {
          tagDisplayName = '<' + childTag + '>';
        }

        if (invalidParent) {
          var info = '';
          if (ancestorTag === 'table' && childTag === 'tr') {
            info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
          }
          warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
        } else {
          warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);
        }
      };
    }

    var SUPPRESS_HYDRATION_WARNING = void 0;
    {
      SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
    }

    var STYLE = 'style';

    var eventsEnabled = null;
    var selectionInformation = null;

    function shouldAutoFocusHostComponent(type, props) {
      switch (type) {
        case 'button':
        case 'input':
        case 'select':
        case 'textarea':
          return !!props.autoFocus;
      }
      return false;
    }

    function getRootHostContext(rootContainerInstance) {
      var type = void 0;
      var namespace = void 0;
      var nodeType = rootContainerInstance.nodeType;
      switch (nodeType) {
        case DOCUMENT_NODE:
        case DOCUMENT_FRAGMENT_NODE:
          {
            type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
            var root = rootContainerInstance.documentElement;
            namespace = root ? root.namespaceURI : getChildNamespace(null, '');
            break;
          }
        default:
          {
            var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
            var ownNamespace = container.namespaceURI || null;
            type = container.tagName;
            namespace = getChildNamespace(ownNamespace, type);
            break;
          }
      }
      {
        var validatedTag = type.toLowerCase();
        var _ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return { namespace: namespace, ancestorInfo: _ancestorInfo };
      }
      return namespace;
    }

    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
      {
        var parentHostContextDev = parentHostContext;
        var _namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return { namespace: _namespace, ancestorInfo: _ancestorInfo2 };
      }
      var parentNamespace = parentHostContext;
      return getChildNamespace(parentNamespace, type);
    }

    function getPublicInstance(instance) {
      return instance;
    }

    function prepareForCommit(containerInfo) {
      eventsEnabled = isEnabled();
      selectionInformation = getSelectionInformation();
      setEnabled(false);
    }

    function resetAfterCommit(containerInfo) {
      restoreSelection(selectionInformation);
      selectionInformation = null;
      setEnabled(eventsEnabled);
      eventsEnabled = null;
    }

    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      var parentNamespace = void 0;
      {
        // TODO: take namespace into account when validating.
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === 'string' || typeof props.children === 'number') {
          var string = '' + props.children;
          var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
          validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
      }
      var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
      precacheFiberNode(internalInstanceHandle, domElement);
      updateFiberProps(domElement, props);
      return domElement;
    }

    function appendInitialChild(parentInstance, child) {
      parentInstance.appendChild(child);
    }

    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
      setInitialProperties(domElement, type, props, rootContainerInstance);
      return shouldAutoFocusHostComponent(type, props);
    }

    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
      {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
          var string = '' + newProps.children;
          var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
          validateDOMNesting(null, string, ownAncestorInfo);
        }
      }
      return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
    }

    function shouldSetTextContent(type, props) {
      return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }

    function shouldDeprioritizeSubtree(type, props) {
      return !!props.hidden;
    }

    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
      {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
      }
      var textNode = createTextNode(text, rootContainerInstance);
      precacheFiberNode(internalInstanceHandle, textNode);
      return textNode;
    }
    // This initialization code may run even on server environments
    // if a component just imports ReactDOM (e.g. for findDOMNode).
    // Some environments might not have setTimeout or clearTimeout.
    var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
    var noTimeout = -1;

    function commitMount(domElement, type, newProps, internalInstanceHandle) {
      // Despite the naming that might imply otherwise, this method only
      // fires if there is an `Update` effect scheduled during mounting.
      // This happens if `finalizeInitialChildren` returns `true` (which it
      // does to implement the `autoFocus` attribute on the client). But
      // there are also other cases when this might happen (such as patching
      // up text content during hydration mismatch). So we'll check this again.
      if (shouldAutoFocusHostComponent(type, newProps)) {
        domElement.focus();
      }
    }

    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
      // Update the props handle so that we know which props are the ones with
      // with current event handlers.
      updateFiberProps(domElement, newProps);
      // Apply the diff to the DOM node.
      updateProperties(domElement, updatePayload, type, oldProps, newProps);
    }

    function resetTextContent(domElement) {
      setTextContent(domElement, '');
    }

    function commitTextUpdate(textInstance, oldText, newText) {
      textInstance.nodeValue = newText;
    }

    function appendChild(parentInstance, child) {
      parentInstance.appendChild(child);
    }

    function appendChildToContainer(container, child) {
      var parentNode = void 0;
      if (container.nodeType === COMMENT_NODE) {
        parentNode = container.parentNode;
        parentNode.insertBefore(child, container);
      } else {
        parentNode = container;
        parentNode.appendChild(child);
      }
      // This container might be used for a portal.
      // If something inside a portal is clicked, that click should bubble
      // through the React tree. However, on Mobile Safari the click would
      // never bubble through the *DOM* tree unless an ancestor with onclick
      // event exists. So we wouldn't see it and dispatch it.
      // This is why we ensure that non React root containers have inline onclick
      // defined.
      // https://github.com/facebook/react/issues/11918
      var reactRootContainer = container._reactRootContainer;
      if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(parentNode);
      }
    }

    function insertBefore(parentInstance, child, beforeChild) {
      parentInstance.insertBefore(child, beforeChild);
    }

    function insertInContainerBefore(container, child, beforeChild) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.insertBefore(child, beforeChild);
      } else {
        container.insertBefore(child, beforeChild);
      }
    }

    function removeChild(parentInstance, child) {
      parentInstance.removeChild(child);
    }

    function removeChildFromContainer(container, child) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.removeChild(child);
      } else {
        container.removeChild(child);
      }
    }

    function hideInstance(instance) {
      // TODO: Does this work for all element types? What about MathML? Should we
      // pass host context to this method?
      instance = instance;
      instance.style.display = 'none';
    }

    function hideTextInstance(textInstance) {
      textInstance.nodeValue = '';
    }

    function unhideInstance(instance, props) {
      instance = instance;
      var styleProp = props[STYLE];
      var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
      instance.style.display = dangerousStyleValue('display', display);
    }

    function unhideTextInstance(textInstance, text) {
      textInstance.nodeValue = text;
    }

    function canHydrateInstance(instance, type, props) {
      if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
        return null;
      }
      // This has now been refined to an element node.
      return instance;
    }

    function canHydrateTextInstance(instance, text) {
      if (text === '' || instance.nodeType !== TEXT_NODE) {
        // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
      }
      // This has now been refined to a text node.
      return instance;
    }

    function getNextHydratableSibling(instance) {
      var node = instance.nextSibling;
      // Skip non-hydratable nodes.
      while (node && node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE) {
        node = node.nextSibling;
      }
      return node;
    }

    function getFirstHydratableChild(parentInstance) {
      var next = parentInstance.firstChild;
      // Skip non-hydratable nodes.
      while (next && next.nodeType !== ELEMENT_NODE && next.nodeType !== TEXT_NODE) {
        next = next.nextSibling;
      }
      return next;
    }

    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, instance);
      // TODO: Possibly defer this until the commit phase where all the events
      // get attached.
      updateFiberProps(instance, props);
      var parentNamespace = void 0;
      {
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
      }
      return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
    }

    function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, textInstance);
      return diffHydratedText(textInstance, text);
    }

    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
      {
        warnForUnmatchedText(textInstance, text);
      }
    }

    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
      if (parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        warnForUnmatchedText(textInstance, text);
      }
    }

    function didNotHydrateContainerInstance(parentContainer, instance) {
      {
        if (instance.nodeType === ELEMENT_NODE) {
          warnForDeletedHydratableElement(parentContainer, instance);
        } else {
          warnForDeletedHydratableText(parentContainer, instance);
        }
      }
    }

    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
      if (parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        if (instance.nodeType === ELEMENT_NODE) {
          warnForDeletedHydratableElement(parentInstance, instance);
        } else {
          warnForDeletedHydratableText(parentInstance, instance);
        }
      }
    }

    function didNotFindHydratableContainerInstance(parentContainer, type, props) {
      {
        warnForInsertedHydratedElement(parentContainer, type, props);
      }
    }

    function didNotFindHydratableContainerTextInstance(parentContainer, text) {
      {
        warnForInsertedHydratedText(parentContainer, text);
      }
    }

    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
      if (parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        warnForInsertedHydratedElement(parentInstance, type, props);
      }
    }

    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
      if (parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        warnForInsertedHydratedText(parentInstance, text);
      }
    }

    // Prefix measurements so that it's possible to filter them.
    // Longer prefixes are hard to read in DevTools.
    var reactEmoji = '\u269B';
    var warningEmoji = '\u26D4';
    var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

    // Keep track of current fiber so that we know the path to unwind on pause.
    // TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?
    var currentFiber = null;
    // If we're in the middle of user code, which fiber and method is it?
    // Reusing `currentFiber` would be confusing for this because user code fiber
    // can change during commit phase too, but we don't need to unwind it (since
    // lifecycles in the commit phase don't resemble a tree).
    var currentPhase = null;
    var currentPhaseFiber = null;
    // Did lifecycle hook schedule an update? This is often a performance problem,
    // so we will keep track of it, and include it in the report.
    // Track commits caused by cascading updates.
    var isCommitting = false;
    var hasScheduledUpdateInCurrentCommit = false;
    var hasScheduledUpdateInCurrentPhase = false;
    var commitCountInCurrentWorkLoop = 0;
    var effectCountInCurrentCommit = 0;
    var isWaitingForCallback = false;
    // During commits, we only show a measurement once per method name
    // to avoid stretch the commit phase with measurement overhead.
    var labelsInCurrentCommit = new Set();

    var formatMarkName = function (markName) {
      return reactEmoji + ' ' + markName;
    };

    var formatLabel = function (label, warning) {
      var prefix = warning ? warningEmoji + ' ' : reactEmoji + ' ';
      var suffix = warning ? ' Warning: ' + warning : '';
      return '' + prefix + label + suffix;
    };

    var beginMark = function (markName) {
      performance.mark(formatMarkName(markName));
    };

    var clearMark = function (markName) {
      performance.clearMarks(formatMarkName(markName));
    };

    var endMark = function (label, markName, warning) {
      var formattedMarkName = formatMarkName(markName);
      var formattedLabel = formatLabel(label, warning);
      try {
        performance.measure(formattedLabel, formattedMarkName);
      } catch (err) {}
      // If previous mark was missing for some reason, this will throw.
      // This could only happen if React crashed in an unexpected place earlier.
      // Don't pile on with more errors.

      // Clear marks immediately to avoid growing buffer.
      performance.clearMarks(formattedMarkName);
      performance.clearMeasures(formattedLabel);
    };

    var getFiberMarkName = function (label, debugID) {
      return label + ' (#' + debugID + ')';
    };

    var getFiberLabel = function (componentName, isMounted, phase) {
      if (phase === null) {
        // These are composite component total time measurements.
        return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';
      } else {
        // Composite component methods.
        return componentName + '.' + phase;
      }
    };

    var beginFiberMark = function (fiber, phase) {
      var componentName = getComponentName(fiber.type) || 'Unknown';
      var debugID = fiber._debugID;
      var isMounted = fiber.alternate !== null;
      var label = getFiberLabel(componentName, isMounted, phase);

      if (isCommitting && labelsInCurrentCommit.has(label)) {
        // During the commit phase, we don't show duplicate labels because
        // there is a fixed overhead for every measurement, and we don't
        // want to stretch the commit phase beyond necessary.
        return false;
      }
      labelsInCurrentCommit.add(label);

      var markName = getFiberMarkName(label, debugID);
      beginMark(markName);
      return true;
    };

    var clearFiberMark = function (fiber, phase) {
      var componentName = getComponentName(fiber.type) || 'Unknown';
      var debugID = fiber._debugID;
      var isMounted = fiber.alternate !== null;
      var label = getFiberLabel(componentName, isMounted, phase);
      var markName = getFiberMarkName(label, debugID);
      clearMark(markName);
    };

    var endFiberMark = function (fiber, phase, warning) {
      var componentName = getComponentName(fiber.type) || 'Unknown';
      var debugID = fiber._debugID;
      var isMounted = fiber.alternate !== null;
      var label = getFiberLabel(componentName, isMounted, phase);
      var markName = getFiberMarkName(label, debugID);
      endMark(label, markName, warning);
    };

    var shouldIgnoreFiber = function (fiber) {
      // Host components should be skipped in the timeline.
      // We could check typeof fiber.type, but does this work with RN?
      switch (fiber.tag) {
        case HostRoot:
        case HostComponent:
        case HostText:
        case HostPortal:
        case Fragment:
        case ContextProvider:
        case ContextConsumer:
        case Mode:
          return true;
        default:
          return false;
      }
    };

    var clearPendingPhaseMeasurement = function () {
      if (currentPhase !== null && currentPhaseFiber !== null) {
        clearFiberMark(currentPhaseFiber, currentPhase);
      }
      currentPhaseFiber = null;
      currentPhase = null;
      hasScheduledUpdateInCurrentPhase = false;
    };

    var pauseTimers = function () {
      // Stops all currently active measurements so that they can be resumed
      // if we continue in a later deferred loop from the same unit of work.
      var fiber = currentFiber;
      while (fiber) {
        if (fiber._debugIsCurrentlyTiming) {
          endFiberMark(fiber, null, null);
        }
        fiber = fiber.return;
      }
    };

    var resumeTimersRecursively = function (fiber) {
      if (fiber.return !== null) {
        resumeTimersRecursively(fiber.return);
      }
      if (fiber._debugIsCurrentlyTiming) {
        beginFiberMark(fiber, null);
      }
    };

    var resumeTimers = function () {
      // Resumes all measurements that were active during the last deferred loop.
      if (currentFiber !== null) {
        resumeTimersRecursively(currentFiber);
      }
    };

    function recordEffect() {
      {
        effectCountInCurrentCommit++;
      }
    }

    function recordScheduleUpdate() {
      {
        if (isCommitting) {
          hasScheduledUpdateInCurrentCommit = true;
        }
        if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
          hasScheduledUpdateInCurrentPhase = true;
        }
      }
    }

    function startRequestCallbackTimer() {
      {
        if (supportsUserTiming && !isWaitingForCallback) {
          isWaitingForCallback = true;
          beginMark('(Waiting for async callback...)');
        }
      }
    }

    function stopRequestCallbackTimer(didExpire, expirationTime) {
      {
        if (supportsUserTiming) {
          isWaitingForCallback = false;
          var warning = didExpire ? 'React was blocked by main thread' : null;
          endMark('(Waiting for async callback... will force flush in ' + expirationTime + ' ms)', '(Waiting for async callback...)', warning);
        }
      }
    }

    function startWorkTimer(fiber) {
      {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        }
        // If we pause, this is the fiber to unwind from.
        currentFiber = fiber;
        if (!beginFiberMark(fiber, null)) {
          return;
        }
        fiber._debugIsCurrentlyTiming = true;
      }
    }

    function cancelWorkTimer(fiber) {
      {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        }
        // Remember we shouldn't complete measurement for this fiber.
        // Otherwise flamechart will be deep even for small updates.
        fiber._debugIsCurrentlyTiming = false;
        clearFiberMark(fiber, null);
      }
    }

    function stopWorkTimer(fiber) {
      {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        }
        // If we pause, its parent is the fiber to unwind from.
        currentFiber = fiber.return;
        if (!fiber._debugIsCurrentlyTiming) {
          return;
        }
        fiber._debugIsCurrentlyTiming = false;
        endFiberMark(fiber, null, null);
      }
    }

    function stopFailedWorkTimer(fiber) {
      {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        }
        // If we pause, its parent is the fiber to unwind from.
        currentFiber = fiber.return;
        if (!fiber._debugIsCurrentlyTiming) {
          return;
        }
        fiber._debugIsCurrentlyTiming = false;
        var warning = fiber.tag === SuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
        endFiberMark(fiber, null, warning);
      }
    }

    function startPhaseTimer(fiber, phase) {
      {
        if (!supportsUserTiming) {
          return;
        }
        clearPendingPhaseMeasurement();
        if (!beginFiberMark(fiber, phase)) {
          return;
        }
        currentPhaseFiber = fiber;
        currentPhase = phase;
      }
    }

    function stopPhaseTimer() {
      {
        if (!supportsUserTiming) {
          return;
        }
        if (currentPhase !== null && currentPhaseFiber !== null) {
          var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
          endFiberMark(currentPhaseFiber, currentPhase, warning);
        }
        currentPhase = null;
        currentPhaseFiber = null;
      }
    }

    function startWorkLoopTimer(nextUnitOfWork) {
      {
        currentFiber = nextUnitOfWork;
        if (!supportsUserTiming) {
          return;
        }
        commitCountInCurrentWorkLoop = 0;
        // This is top level call.
        // Any other measurements are performed within.
        beginMark('(React Tree Reconciliation)');
        // Resume any measurements that were in progress during the last loop.
        resumeTimers();
      }
    }

    function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
      {
        if (!supportsUserTiming) {
          return;
        }
        var warning = null;
        if (interruptedBy !== null) {
          if (interruptedBy.tag === HostRoot) {
            warning = 'A top-level update interrupted the previous render';
          } else {
            var componentName = getComponentName(interruptedBy.type) || 'Unknown';
            warning = 'An update to ' + componentName + ' interrupted the previous render';
          }
        } else if (commitCountInCurrentWorkLoop > 1) {
          warning = 'There were cascading updates';
        }
        commitCountInCurrentWorkLoop = 0;
        var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)';
        // Pause any measurements until the next loop.
        pauseTimers();
        endMark(label, '(React Tree Reconciliation)', warning);
      }
    }

    function startCommitTimer() {
      {
        if (!supportsUserTiming) {
          return;
        }
        isCommitting = true;
        hasScheduledUpdateInCurrentCommit = false;
        labelsInCurrentCommit.clear();
        beginMark('(Committing Changes)');
      }
    }

    function stopCommitTimer() {
      {
        if (!supportsUserTiming) {
          return;
        }

        var warning = null;
        if (hasScheduledUpdateInCurrentCommit) {
          warning = 'Lifecycle hook scheduled a cascading update';
        } else if (commitCountInCurrentWorkLoop > 0) {
          warning = 'Caused by a cascading update in earlier commit';
        }
        hasScheduledUpdateInCurrentCommit = false;
        commitCountInCurrentWorkLoop++;
        isCommitting = false;
        labelsInCurrentCommit.clear();

        endMark('(Committing Changes)', '(Committing Changes)', warning);
      }
    }

    function startCommitSnapshotEffectsTimer() {
      {
        if (!supportsUserTiming) {
          return;
        }
        effectCountInCurrentCommit = 0;
        beginMark('(Committing Snapshot Effects)');
      }
    }

    function stopCommitSnapshotEffectsTimer() {
      {
        if (!supportsUserTiming) {
          return;
        }
        var count = effectCountInCurrentCommit;
        effectCountInCurrentCommit = 0;
        endMark('(Committing Snapshot Effects: ' + count + ' Total)', '(Committing Snapshot Effects)', null);
      }
    }

    function startCommitHostEffectsTimer() {
      {
        if (!supportsUserTiming) {
          return;
        }
        effectCountInCurrentCommit = 0;
        beginMark('(Committing Host Effects)');
      }
    }

    function stopCommitHostEffectsTimer() {
      {
        if (!supportsUserTiming) {
          return;
        }
        var count = effectCountInCurrentCommit;
        effectCountInCurrentCommit = 0;
        endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);
      }
    }

    function startCommitLifeCyclesTimer() {
      {
        if (!supportsUserTiming) {
          return;
        }
        effectCountInCurrentCommit = 0;
        beginMark('(Calling Lifecycle Methods)');
      }
    }

    function stopCommitLifeCyclesTimer() {
      {
        if (!supportsUserTiming) {
          return;
        }
        var count = effectCountInCurrentCommit;
        effectCountInCurrentCommit = 0;
        endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);
      }
    }

    var valueStack = [];

    var fiberStack = void 0;

    {
      fiberStack = [];
    }

    var index = -1;

    function createCursor(defaultValue) {
      return {
        current: defaultValue
      };
    }

    function pop(cursor, fiber) {
      if (index < 0) {
        {
          warningWithoutStack$1(false, 'Unexpected pop.');
        }
        return;
      }

      {
        if (fiber !== fiberStack[index]) {
          warningWithoutStack$1(false, 'Unexpected Fiber popped.');
        }
      }

      cursor.current = valueStack[index];

      valueStack[index] = null;

      {
        fiberStack[index] = null;
      }

      index--;
    }

    function push(cursor, value, fiber) {
      index++;

      valueStack[index] = cursor.current;

      {
        fiberStack[index] = fiber;
      }

      cursor.current = value;
    }

    function checkThatStackIsEmpty() {
      {
        if (index !== -1) {
          warningWithoutStack$1(false, 'Expected an empty stack. Something was not reset properly.');
        }
      }
    }

    function resetStackAfterFatalErrorInDev() {
      {
        index = -1;
        valueStack.length = 0;
        fiberStack.length = 0;
      }
    }

    var warnedAboutMissingGetChildContext = void 0;

    {
      warnedAboutMissingGetChildContext = {};
    }

    var emptyContextObject = {};
    {
      Object.freeze(emptyContextObject);
    }

    // A cursor to the current merged context object on the stack.
    var contextStackCursor = createCursor(emptyContextObject);
    // A cursor to a boolean indicating whether the context has changed.
    var didPerformWorkStackCursor = createCursor(false);
    // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.
    var previousContext = emptyContextObject;

    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
      if (didPushOwnContextIfProvider && isContextProvider(Component)) {
        // If the fiber is a context provider itself, when we read its context
        // we may have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
      }
      return contextStackCursor.current;
    }

    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
      var instance = workInProgress.stateNode;
      instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
      instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }

    function getMaskedContext(workInProgress, unmaskedContext) {
      var type = workInProgress.type;
      var contextTypes = type.contextTypes;
      if (!contextTypes) {
        return emptyContextObject;
      }

      // Avoid recreating masked context unless unmasked context has changed.
      // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
      // This may trigger infinite loops if componentWillReceiveProps calls setState.
      var instance = workInProgress.stateNode;
      if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
        return instance.__reactInternalMemoizedMaskedChildContext;
      }

      var context = {};
      for (var key in contextTypes) {
        context[key] = unmaskedContext[key];
      }

      {
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
      }

      // Cache unmasked context so we can avoid recreating masked context unless necessary.
      // Context is created before the class component is instantiated so check for instance.
      if (instance) {
        cacheContext(workInProgress, unmaskedContext, context);
      }

      return context;
    }

    function hasContextChanged() {
      return didPerformWorkStackCursor.current;
    }

    function isContextProvider(type) {
      var childContextTypes = type.childContextTypes;
      return childContextTypes !== null && childContextTypes !== undefined;
    }

    function popContext(fiber) {
      pop(didPerformWorkStackCursor, fiber);
      pop(contextStackCursor, fiber);
    }

    function popTopLevelContextObject(fiber) {
      pop(didPerformWorkStackCursor, fiber);
      pop(contextStackCursor, fiber);
    }

    function pushTopLevelContextObject(fiber, context, didChange) {
      !(contextStackCursor.current === emptyContextObject) ? invariant(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.') : void 0;

      push(contextStackCursor, context, fiber);
      push(didPerformWorkStackCursor, didChange, fiber);
    }

    function processChildContext(fiber, type, parentContext) {
      var instance = fiber.stateNode;
      var childContextTypes = type.childContextTypes;

      // TODO (bvaughn) Replace this behavior with an invariant() in the future.
      // It has only been added in Fiber to match the (unintentional) behavior in Stack.
      if (typeof instance.getChildContext !== 'function') {
        {
          var componentName = getComponentName(type) || 'Unknown';

          if (!warnedAboutMissingGetChildContext[componentName]) {
            warnedAboutMissingGetChildContext[componentName] = true;
            warningWithoutStack$1(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
          }
        }
        return parentContext;
      }

      var childContext = void 0;
      {
        setCurrentPhase('getChildContext');
      }
      startPhaseTimer(fiber, 'getChildContext');
      childContext = instance.getChildContext();
      stopPhaseTimer();
      {
        setCurrentPhase(null);
      }
      for (var contextKey in childContext) {
        !(contextKey in childContextTypes) ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(type) || 'Unknown', contextKey) : void 0;
      }
      {
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(childContextTypes, childContext, 'child context', name,
        // In practice, there is one case in which we won't get a stack. It's when
        // somebody calls unstable_renderSubtreeIntoContainer() and we process
        // context from the parent component instance. The stack will be missing
        // because it's outside of the reconciliation, and so the pointer has not
        // been set. This is rare and doesn't matter. We'll also remove that API.
        getCurrentFiberStackInDev);
      }

      return _assign({}, parentContext, childContext);
    }

    function pushContextProvider(workInProgress) {
      var instance = workInProgress.stateNode;
      // We push the context as early as possible to ensure stack integrity.
      // If the instance does not exist yet, we will push null at first,
      // and replace it on the stack later when invalidating the context.
      var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;

      // Remember the parent context so we can merge with it later.
      // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
      previousContext = contextStackCursor.current;
      push(contextStackCursor, memoizedMergedChildContext, workInProgress);
      push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);

      return true;
    }

    function invalidateContextProvider(workInProgress, type, didChange) {
      var instance = workInProgress.stateNode;
      !instance ? invariant(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.') : void 0;

      if (didChange) {
        // Merge parent and own context.
        // Skip this if we're not updating due to sCU.
        // This avoids unnecessarily recomputing memoized values.
        var mergedContext = processChildContext(workInProgress, type, previousContext);
        instance.__reactInternalMemoizedMergedChildContext = mergedContext;

        // Replace the old (or empty) context with the new one.
        // It is important to unwind the context in the reverse order.
        pop(didPerformWorkStackCursor, workInProgress);
        pop(contextStackCursor, workInProgress);
        // Now push the new context and mark that it has changed.
        push(contextStackCursor, mergedContext, workInProgress);
        push(didPerformWorkStackCursor, didChange, workInProgress);
      } else {
        pop(didPerformWorkStackCursor, workInProgress);
        push(didPerformWorkStackCursor, didChange, workInProgress);
      }
    }

    function findCurrentUnmaskedContext(fiber) {
      // Currently this is only used with renderSubtreeIntoContainer; not sure if it
      // makes sense elsewhere
      !(isFiberMounted(fiber) && fiber.tag === ClassComponent) ? invariant(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.') : void 0;

      var node = fiber;
      do {
        switch (node.tag) {
          case HostRoot:
            return node.stateNode.context;
          case ClassComponent:
            {
              var Component = node.type;
              if (isContextProvider(Component)) {
                return node.stateNode.__reactInternalMemoizedMergedChildContext;
              }
              break;
            }
        }
        node = node.return;
      } while (node !== null);
      invariant(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.');
    }

    var onCommitFiberRoot = null;
    var onCommitFiberUnmount = null;
    var hasLoggedError = false;

    function catchErrors(fn) {
      return function (arg) {
        try {
          return fn(arg);
        } catch (err) {
          if (!hasLoggedError) {
            hasLoggedError = true;
            warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
          }
        }
      };
    }

    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';

    function injectInternals(internals) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        // No DevTools
        return false;
      }
      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (hook.isDisabled) {
        // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
      }
      if (!hook.supportsFiber) {
        {
          warningWithoutStack$1(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
        }
        // DevTools exists, even though it doesn't support Fiber.
        return true;
      }
      try {
        var rendererID = hook.inject(internals);
        // We have successfully injected, so now it is safe to set up hooks.
        onCommitFiberRoot = catchErrors(function (root) {
          return hook.onCommitFiberRoot(rendererID, root);
        });
        onCommitFiberUnmount = catchErrors(function (fiber) {
          return hook.onCommitFiberUnmount(rendererID, fiber);
        });
      } catch (err) {
        // Catch all errors because it is unsafe to throw during initialization.
        {
          warningWithoutStack$1(false, 'React DevTools encountered an error: %s.', err);
        }
      }
      // DevTools exists
      return true;
    }

    function onCommitRoot(root) {
      if (typeof onCommitFiberRoot === 'function') {
        onCommitFiberRoot(root);
      }
    }

    function onCommitUnmount(fiber) {
      if (typeof onCommitFiberUnmount === 'function') {
        onCommitFiberUnmount(fiber);
      }
    }

    // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823;

    var NoWork = 0;
    var Never = 1;
    var Sync = maxSigned31BitInt;

    var UNIT_SIZE = 10;
    var MAGIC_NUMBER_OFFSET = maxSigned31BitInt - 1;

    // 1 unit of expiration time represents 10ms.
    function msToExpirationTime(ms) {
      // Always add an offset so that we don't clash with the magic number for NoWork.
      return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
    }

    function expirationTimeToMs(expirationTime) {
      return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
    }

    function ceiling(num, precision) {
      return ((num / precision | 0) + 1) * precision;
    }

    function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
      return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
    }

    var LOW_PRIORITY_EXPIRATION = 5000;
    var LOW_PRIORITY_BATCH_SIZE = 250;

    function computeAsyncExpiration(currentTime) {
      return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
    }

    // We intentionally set a higher expiration time for interactive updates in
    // dev than in production.
    //
    // If the main thread is being blocked so long that you hit the expiration,
    // it's a problem that could be solved with better scheduling.
    //
    // People will be more likely to notice this and fix it with the long
    // expiration time in development.
    //
    // In production we opt for better UX at the risk of masking scheduling
    // problems, by expiring fast.
    var HIGH_PRIORITY_EXPIRATION = 500;
    var HIGH_PRIORITY_BATCH_SIZE = 100;

    function computeInteractiveExpiration(currentTime) {
      return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
    }

    var NoContext = 0;
    var ConcurrentMode = 1;
    var StrictMode = 2;
    var ProfileMode = 4;

    var hasBadMapPolyfill = void 0;

    {
      hasBadMapPolyfill = false;
      try {
        var nonExtensibleObject = Object.preventExtensions({});
        var testMap = new Map([[nonExtensibleObject, null]]);
        var testSet = new Set([nonExtensibleObject]);
        // This is necessary for Rollup to not consider these unused.
        // https://github.com/rollup/rollup/issues/1771
        // TODO: we can remove these if Rollup fixes the bug.
        testMap.set(0, 0);
        testSet.add(0);
      } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
      }
    }

    // A Fiber is work on a Component that needs to be done or was done. There can
    // be more than one per component.


    var debugCounter = void 0;

    {
      debugCounter = 1;
    }

    function FiberNode(tag, pendingProps, key, mode) {
      // Instance
      this.tag = tag;
      this.key = key;
      this.elementType = null;
      this.type = null;
      this.stateNode = null;

      // Fiber
      this.return = null;
      this.child = null;
      this.sibling = null;
      this.index = 0;

      this.ref = null;

      this.pendingProps = pendingProps;
      this.memoizedProps = null;
      this.updateQueue = null;
      this.memoizedState = null;
      this.firstContextDependency = null;

      this.mode = mode;

      // Effects
      this.effectTag = NoEffect;
      this.nextEffect = null;

      this.firstEffect = null;
      this.lastEffect = null;

      this.expirationTime = NoWork;
      this.childExpirationTime = NoWork;

      this.alternate = null;

      {
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
      }

      {
        this._debugID = debugCounter++;
        this._debugSource = null;
        this._debugOwner = null;
        this._debugIsCurrentlyTiming = false;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
          Object.preventExtensions(this);
        }
      }
    }

    // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.
    var createFiber = function (tag, pendingProps, key, mode) {
      // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
      return new FiberNode(tag, pendingProps, key, mode);
    };

    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }

    function isSimpleFunctionComponent(type) {
      return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
    }

    function resolveLazyComponentTag(Component) {
      if (typeof Component === 'function') {
        return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
      } else if (Component !== undefined && Component !== null) {
        var $$typeof = Component.$$typeof;
        if ($$typeof === REACT_FORWARD_REF_TYPE) {
          return ForwardRef;
        }
        if ($$typeof === REACT_MEMO_TYPE) {
          return MemoComponent;
        }
      }
      return IndeterminateComponent;
    }

    // This is used to create an alternate fiber to do work on.
    function createWorkInProgress(current, pendingProps, expirationTime) {
      var workInProgress = current.alternate;
      if (workInProgress === null) {
        // We use a double buffering pooling technique because we know that we'll
        // only ever need at most two versions of a tree. We pool the "other" unused
        // node that we're free to reuse. This is lazily created to avoid allocating
        // extra objects for things that are never updated. It also allow us to
        // reclaim the extra memory if needed.
        workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
        workInProgress.elementType = current.elementType;
        workInProgress.type = current.type;
        workInProgress.stateNode = current.stateNode;

        {
          // DEV-only fields
          workInProgress._debugID = current._debugID;
          workInProgress._debugSource = current._debugSource;
          workInProgress._debugOwner = current._debugOwner;
        }

        workInProgress.alternate = current;
        current.alternate = workInProgress;
      } else {
        workInProgress.pendingProps = pendingProps;

        // We already have an alternate.
        // Reset the effect tag.
        workInProgress.effectTag = NoEffect;

        // The effect list is no longer valid.
        workInProgress.nextEffect = null;
        workInProgress.firstEffect = null;
        workInProgress.lastEffect = null;

        {
          // We intentionally reset, rather than copy, actualDuration & actualStartTime.
          // This prevents time from endlessly accumulating in new commits.
          // This has the downside of resetting values for different priority renders,
          // But works for yielding (the common case) and should support resuming.
          workInProgress.actualDuration = 0;
          workInProgress.actualStartTime = -1;
        }
      }

      workInProgress.childExpirationTime = current.childExpirationTime;
      workInProgress.expirationTime = current.expirationTime;

      workInProgress.child = current.child;
      workInProgress.memoizedProps = current.memoizedProps;
      workInProgress.memoizedState = current.memoizedState;
      workInProgress.updateQueue = current.updateQueue;
      workInProgress.firstContextDependency = current.firstContextDependency;

      // These will be overridden during the parent's reconciliation
      workInProgress.sibling = current.sibling;
      workInProgress.index = current.index;
      workInProgress.ref = current.ref;

      {
        workInProgress.selfBaseDuration = current.selfBaseDuration;
        workInProgress.treeBaseDuration = current.treeBaseDuration;
      }

      return workInProgress;
    }

    function createHostRootFiber(isConcurrent) {
      var mode = isConcurrent ? ConcurrentMode | StrictMode : NoContext;

      if (isDevToolsPresent) {
        // Always collect profile timings when DevTools are present.
        // This enables DevTools to start capturing timing at any point–
        // Without some nodes in the tree having empty base times.
        mode |= ProfileMode;
      }

      return createFiber(HostRoot, null, null, mode);
    }

    function createFiberFromTypeAndProps(type, // React$ElementType
    key, pendingProps, owner, mode, expirationTime) {
      var fiber = void 0;

      var fiberTag = IndeterminateComponent;
      // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
      var resolvedType = type;
      if (typeof type === 'function') {
        if (shouldConstruct(type)) {
          fiberTag = ClassComponent;
        }
      } else if (typeof type === 'string') {
        fiberTag = HostComponent;
      } else {
        getTag: switch (type) {
          case REACT_FRAGMENT_TYPE:
            return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);
          case REACT_CONCURRENT_MODE_TYPE:
            return createFiberFromMode(pendingProps, mode | ConcurrentMode | StrictMode, expirationTime, key);
          case REACT_STRICT_MODE_TYPE:
            return createFiberFromMode(pendingProps, mode | StrictMode, expirationTime, key);
          case REACT_PROFILER_TYPE:
            return createFiberFromProfiler(pendingProps, mode, expirationTime, key);
          case REACT_SUSPENSE_TYPE:
            return createFiberFromSuspense(pendingProps, mode, expirationTime, key);
          default:
            {
              if (typeof type === 'object' && type !== null) {
                switch (type.$$typeof) {
                  case REACT_PROVIDER_TYPE:
                    fiberTag = ContextProvider;
                    break getTag;
                  case REACT_CONTEXT_TYPE:
                    // This is a consumer
                    fiberTag = ContextConsumer;
                    break getTag;
                  case REACT_FORWARD_REF_TYPE:
                    fiberTag = ForwardRef;
                    break getTag;
                  case REACT_MEMO_TYPE:
                    fiberTag = MemoComponent;
                    break getTag;
                  case REACT_LAZY_TYPE:
                    fiberTag = LazyComponent;
                    resolvedType = null;
                    break getTag;
                }
              }
              var info = '';
              {
                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                  info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
                }
                var ownerName = owner ? getComponentName(owner.type) : null;
                if (ownerName) {
                  info += '\n\nCheck the render method of `' + ownerName + '`.';
                }
              }
              invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);
            }
        }
      }

      fiber = createFiber(fiberTag, pendingProps, key, mode);
      fiber.elementType = type;
      fiber.type = resolvedType;
      fiber.expirationTime = expirationTime;

      return fiber;
    }

    function createFiberFromElement(element, mode, expirationTime) {
      var owner = null;
      {
        owner = element._owner;
      }
      var type = element.type;
      var key = element.key;
      var pendingProps = element.props;
      var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);
      {
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
      }
      return fiber;
    }

    function createFiberFromFragment(elements, mode, expirationTime, key) {
      var fiber = createFiber(Fragment, elements, key, mode);
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
      {
        if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
          warningWithoutStack$1(false, 'Profiler must specify an "id" string and "onRender" function as props');
        }
      }

      var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
      // TODO: The Profiler fiber shouldn't have a type. It has a tag.
      fiber.elementType = REACT_PROFILER_TYPE;
      fiber.type = REACT_PROFILER_TYPE;
      fiber.expirationTime = expirationTime;

      return fiber;
    }

    function createFiberFromMode(pendingProps, mode, expirationTime, key) {
      var fiber = createFiber(Mode, pendingProps, key, mode);

      // TODO: The Mode fiber shouldn't have a type. It has a tag.
      var type = (mode & ConcurrentMode) === NoContext ? REACT_STRICT_MODE_TYPE : REACT_CONCURRENT_MODE_TYPE;
      fiber.elementType = type;
      fiber.type = type;

      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
      var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);

      // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
      var type = REACT_SUSPENSE_TYPE;
      fiber.elementType = type;
      fiber.type = type;

      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromText(content, mode, expirationTime) {
      var fiber = createFiber(HostText, content, null, mode);
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromHostInstanceForDeletion() {
      var fiber = createFiber(HostComponent, null, null, NoContext);
      // TODO: These should not need a type.
      fiber.elementType = 'DELETED';
      fiber.type = 'DELETED';
      return fiber;
    }

    function createFiberFromPortal(portal, mode, expirationTime) {
      var pendingProps = portal.children !== null ? portal.children : [];
      var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
      fiber.expirationTime = expirationTime;
      fiber.stateNode = {
        containerInfo: portal.containerInfo,
        pendingChildren: null, // Used by persistent updates
        implementation: portal.implementation
      };
      return fiber;
    }

    // Used for stashing WIP properties to replay failed work in DEV.
    function assignFiberPropertiesInDEV(target, source) {
      if (target === null) {
        // This Fiber's initial properties will always be overwritten.
        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
        target = createFiber(IndeterminateComponent, null, null, NoContext);
      }

      // This is intentionally written as a list of all properties.
      // We tried to use Object.assign() instead but this is called in
      // the hottest path, and Object.assign() was too slow:
      // https://github.com/facebook/react/issues/12502
      // This code is DEV-only so size is not a concern.

      target.tag = source.tag;
      target.key = source.key;
      target.elementType = source.elementType;
      target.type = source.type;
      target.stateNode = source.stateNode;
      target.return = source.return;
      target.child = source.child;
      target.sibling = source.sibling;
      target.index = source.index;
      target.ref = source.ref;
      target.pendingProps = source.pendingProps;
      target.memoizedProps = source.memoizedProps;
      target.updateQueue = source.updateQueue;
      target.memoizedState = source.memoizedState;
      target.firstContextDependency = source.firstContextDependency;
      target.mode = source.mode;
      target.effectTag = source.effectTag;
      target.nextEffect = source.nextEffect;
      target.firstEffect = source.firstEffect;
      target.lastEffect = source.lastEffect;
      target.expirationTime = source.expirationTime;
      target.childExpirationTime = source.childExpirationTime;
      target.alternate = source.alternate;
      {
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
      }
      target._debugID = source._debugID;
      target._debugSource = source._debugSource;
      target._debugOwner = source._debugOwner;
      target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
      return target;
    }

    // TODO: This should be lifted into the renderer.


    // The following attributes are only used by interaction tracing builds.
    // They enable interactions to be associated with their async work,
    // And expose interaction metadata to the React DevTools Profiler plugin.
    // Note that these attributes are only defined when the enableSchedulerTracing flag is enabled.


    // Exported FiberRoot type includes all properties,
    // To avoid requiring potentially error-prone :any casts throughout the project.
    // Profiling properties are only safe to access in profiling builds (when enableSchedulerTracing is true).
    // The types are defined separately within this file to ensure they stay in sync.
    // (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)


    function createFiberRoot(containerInfo, isConcurrent, hydrate) {
      // Cyclic construction. This cheats the type system right now because
      // stateNode is any.
      var uninitializedFiber = createHostRootFiber(isConcurrent);

      var root = void 0;
      {
        root = {
          current: uninitializedFiber,
          containerInfo: containerInfo,
          pendingChildren: null,

          earliestPendingTime: NoWork,
          latestPendingTime: NoWork,
          earliestSuspendedTime: NoWork,
          latestSuspendedTime: NoWork,
          latestPingedTime: NoWork,

          didError: false,

          pendingCommitExpirationTime: NoWork,
          finishedWork: null,
          timeoutHandle: noTimeout,
          context: null,
          pendingContext: null,
          hydrate: hydrate,
          nextExpirationTimeToWorkOn: NoWork,
          expirationTime: NoWork,
          firstBatch: null,
          nextScheduledRoot: null,

          interactionThreadID: tracing$$1.unstable_getThreadID(),
          memoizedInteractions: new Set(),
          pendingInteractionMap: new Map()
        };
      }

      uninitializedFiber.stateNode = root;

      // The reason for the way the Flow types are structured in this file,
      // Is to avoid needing :any casts everywhere interaction tracing fields are used.
      // Unfortunately that requires an :any cast for non-interaction tracing capable builds.
      // $FlowFixMe Remove this :any cast and replace it with something better.
      return root;
    }

    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var lowPriorityWarning = function () {};

    {
      var printWarning = function (format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });
        if (typeof console !== 'undefined') {
          console.warn(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning = function (condition, format) {
        if (format === undefined) {
          throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
        }
        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }

    var lowPriorityWarning$1 = lowPriorityWarning;

    var ReactStrictModeWarnings = {
      discardPendingWarnings: function () {},
      flushPendingDeprecationWarnings: function () {},
      flushPendingUnsafeLifecycleWarnings: function () {},
      recordDeprecationWarnings: function (fiber, instance) {},
      recordUnsafeLifecycleWarnings: function (fiber, instance) {},
      recordLegacyContextWarning: function (fiber, instance) {},
      flushLegacyContextWarning: function () {}
    };

    {
      var LIFECYCLE_SUGGESTIONS = {
        UNSAFE_componentWillMount: 'componentDidMount',
        UNSAFE_componentWillReceiveProps: 'static getDerivedStateFromProps',
        UNSAFE_componentWillUpdate: 'componentDidUpdate'
      };

      var pendingComponentWillMountWarnings = [];
      var pendingComponentWillReceivePropsWarnings = [];
      var pendingComponentWillUpdateWarnings = [];
      var pendingUnsafeLifecycleWarnings = new Map();
      var pendingLegacyContextWarning = new Map();

      // Tracks components we have already warned about.
      var didWarnAboutDeprecatedLifecycles = new Set();
      var didWarnAboutUnsafeLifecycles = new Set();
      var didWarnAboutLegacyContext = new Set();

      var setToSortedString = function (set) {
        var array = [];
        set.forEach(function (value) {
          array.push(value);
        });
        return array.sort().join(', ');
      };

      ReactStrictModeWarnings.discardPendingWarnings = function () {
        pendingComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUnsafeLifecycleWarnings = new Map();
        pendingLegacyContextWarning = new Map();
      };

      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
        pendingUnsafeLifecycleWarnings.forEach(function (lifecycleWarningsMap, strictRoot) {
          var lifecyclesWarningMesages = [];

          Object.keys(lifecycleWarningsMap).forEach(function (lifecycle) {
            var lifecycleWarnings = lifecycleWarningsMap[lifecycle];
            if (lifecycleWarnings.length > 0) {
              var componentNames = new Set();
              lifecycleWarnings.forEach(function (fiber) {
                componentNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });

              var formatted = lifecycle.replace('UNSAFE_', '');
              var suggestion = LIFECYCLE_SUGGESTIONS[lifecycle];
              var sortedComponentNames = setToSortedString(componentNames);

              lifecyclesWarningMesages.push(formatted + ': Please update the following components to use ' + (suggestion + ' instead: ' + sortedComponentNames));
            }
          });

          if (lifecyclesWarningMesages.length > 0) {
            var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);

            warningWithoutStack$1(false, 'Unsafe lifecycle methods were found within a strict-mode tree:%s' + '\n\n%s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, lifecyclesWarningMesages.join('\n\n'));
          }
        });

        pendingUnsafeLifecycleWarnings = new Map();
      };

      var findStrictRoot = function (fiber) {
        var maybeStrictRoot = null;

        var node = fiber;
        while (node !== null) {
          if (node.mode & StrictMode) {
            maybeStrictRoot = node;
          }
          node = node.return;
        }

        return maybeStrictRoot;
      };

      ReactStrictModeWarnings.flushPendingDeprecationWarnings = function () {
        if (pendingComponentWillMountWarnings.length > 0) {
          var uniqueNames = new Set();
          pendingComponentWillMountWarnings.forEach(function (fiber) {
            uniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutDeprecatedLifecycles.add(fiber.type);
          });

          var sortedNames = setToSortedString(uniqueNames);

          lowPriorityWarning$1(false, 'componentWillMount is deprecated and will be removed in the next major version. ' + 'Use componentDidMount instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillMount.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', sortedNames);

          pendingComponentWillMountWarnings = [];
        }

        if (pendingComponentWillReceivePropsWarnings.length > 0) {
          var _uniqueNames = new Set();
          pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
            _uniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutDeprecatedLifecycles.add(fiber.type);
          });

          var _sortedNames = setToSortedString(_uniqueNames);

          lowPriorityWarning$1(false, 'componentWillReceiveProps is deprecated and will be removed in the next major version. ' + 'Use static getDerivedStateFromProps instead.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames);

          pendingComponentWillReceivePropsWarnings = [];
        }

        if (pendingComponentWillUpdateWarnings.length > 0) {
          var _uniqueNames2 = new Set();
          pendingComponentWillUpdateWarnings.forEach(function (fiber) {
            _uniqueNames2.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutDeprecatedLifecycles.add(fiber.type);
          });

          var _sortedNames2 = setToSortedString(_uniqueNames2);

          lowPriorityWarning$1(false, 'componentWillUpdate is deprecated and will be removed in the next major version. ' + 'Use componentDidUpdate instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillUpdate.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames2);

          pendingComponentWillUpdateWarnings = [];
        }
      };

      ReactStrictModeWarnings.recordDeprecationWarnings = function (fiber, instance) {
        // Dedup strategy: Warn once per component.
        if (didWarnAboutDeprecatedLifecycles.has(fiber.type)) {
          return;
        }

        // Don't warn about react-lifecycles-compat polyfilled components.
        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
          pendingComponentWillMountWarnings.push(fiber);
        }
        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
          pendingComponentWillReceivePropsWarnings.push(fiber);
        }
        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
          pendingComponentWillUpdateWarnings.push(fiber);
        }
      };

      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
          warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
          return;
        }

        // Dedup strategy: Warn once per component.
        // This is difficult to track any other way since component names
        // are often vague and are likely to collide between 3rd party libraries.
        // An expand property is probably okay to use here since it's DEV-only,
        // and will only be set in the event of serious warnings.
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
          return;
        }

        var warningsForRoot = void 0;
        if (!pendingUnsafeLifecycleWarnings.has(strictRoot)) {
          warningsForRoot = {
            UNSAFE_componentWillMount: [],
            UNSAFE_componentWillReceiveProps: [],
            UNSAFE_componentWillUpdate: []
          };

          pendingUnsafeLifecycleWarnings.set(strictRoot, warningsForRoot);
        } else {
          warningsForRoot = pendingUnsafeLifecycleWarnings.get(strictRoot);
        }

        var unsafeLifecycles = [];
        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillMount === 'function') {
          unsafeLifecycles.push('UNSAFE_componentWillMount');
        }
        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
          unsafeLifecycles.push('UNSAFE_componentWillReceiveProps');
        }
        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillUpdate === 'function') {
          unsafeLifecycles.push('UNSAFE_componentWillUpdate');
        }

        if (unsafeLifecycles.length > 0) {
          unsafeLifecycles.forEach(function (lifecycle) {
            warningsForRoot[lifecycle].push(fiber);
          });
        }
      };

      ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
          warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
          return;
        }

        // Dedup strategy: Warn once per component.
        if (didWarnAboutLegacyContext.has(fiber.type)) {
          return;
        }

        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
          if (warningsForRoot === undefined) {
            warningsForRoot = [];
            pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
          }
          warningsForRoot.push(fiber);
        }
      };

      ReactStrictModeWarnings.flushLegacyContextWarning = function () {
        pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
          var uniqueNames = new Set();
          fiberArray.forEach(function (fiber) {
            uniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutLegacyContext.add(fiber.type);
          });

          var sortedNames = setToSortedString(uniqueNames);
          var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);

          warningWithoutStack$1(false, 'Legacy context API has been detected within a strict-mode tree: %s' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, sortedNames);
        });
      };
    }

    // TODO: Offscreen updates should never suspend. However, a promise that
    // suspended inside an offscreen subtree should be able to ping at the priority
    // of the outer render.

    function markPendingPriorityLevel(root, expirationTime) {
      // If there's a gap between completing a failed root and retrying it,
      // additional updates may be scheduled. Clear `didError`, in case the update
      // is sufficient to fix the error.
      root.didError = false;

      // Update the latest and earliest pending times
      var earliestPendingTime = root.earliestPendingTime;
      if (earliestPendingTime === NoWork) {
        // No other pending updates.
        root.earliestPendingTime = root.latestPendingTime = expirationTime;
      } else {
        if (earliestPendingTime < expirationTime) {
          // This is the earliest pending update.
          root.earliestPendingTime = expirationTime;
        } else {
          var latestPendingTime = root.latestPendingTime;
          if (latestPendingTime > expirationTime) {
            // This is the latest pending update
            root.latestPendingTime = expirationTime;
          }
        }
      }
      findNextExpirationTimeToWorkOn(expirationTime, root);
    }

    function markCommittedPriorityLevels(root, earliestRemainingTime) {
      root.didError = false;

      if (earliestRemainingTime === NoWork) {
        // Fast path. There's no remaining work. Clear everything.
        root.earliestPendingTime = NoWork;
        root.latestPendingTime = NoWork;
        root.earliestSuspendedTime = NoWork;
        root.latestSuspendedTime = NoWork;
        root.latestPingedTime = NoWork;
        findNextExpirationTimeToWorkOn(NoWork, root);
        return;
      }

      // Let's see if the previous latest known pending level was just flushed.
      var latestPendingTime = root.latestPendingTime;
      if (latestPendingTime !== NoWork) {
        if (latestPendingTime > earliestRemainingTime) {
          // We've flushed all the known pending levels.
          root.earliestPendingTime = root.latestPendingTime = NoWork;
        } else {
          var earliestPendingTime = root.earliestPendingTime;
          if (earliestPendingTime > earliestRemainingTime) {
            // We've flushed the earliest known pending level. Set this to the
            // latest pending time.
            root.earliestPendingTime = root.latestPendingTime;
          }
        }
      }

      // Now let's handle the earliest remaining level in the whole tree. We need to
      // decide whether to treat it as a pending level or as suspended. Check
      // it falls within the range of known suspended levels.

      var earliestSuspendedTime = root.earliestSuspendedTime;
      if (earliestSuspendedTime === NoWork) {
        // There's no suspended work. Treat the earliest remaining level as a
        // pending level.
        markPendingPriorityLevel(root, earliestRemainingTime);
        findNextExpirationTimeToWorkOn(NoWork, root);
        return;
      }

      var latestSuspendedTime = root.latestSuspendedTime;
      if (earliestRemainingTime < latestSuspendedTime) {
        // The earliest remaining level is later than all the suspended work. That
        // means we've flushed all the suspended work.
        root.earliestSuspendedTime = NoWork;
        root.latestSuspendedTime = NoWork;
        root.latestPingedTime = NoWork;

        // There's no suspended work. Treat the earliest remaining level as a
        // pending level.
        markPendingPriorityLevel(root, earliestRemainingTime);
        findNextExpirationTimeToWorkOn(NoWork, root);
        return;
      }

      if (earliestRemainingTime > earliestSuspendedTime) {
        // The earliest remaining time is earlier than all the suspended work.
        // Treat it as a pending update.
        markPendingPriorityLevel(root, earliestRemainingTime);
        findNextExpirationTimeToWorkOn(NoWork, root);
        return;
      }

      // The earliest remaining time falls within the range of known suspended
      // levels. We should treat this as suspended work.
      findNextExpirationTimeToWorkOn(NoWork, root);
    }

    function hasLowerPriorityWork(root, erroredExpirationTime) {
      var latestPendingTime = root.latestPendingTime;
      var latestSuspendedTime = root.latestSuspendedTime;
      var latestPingedTime = root.latestPingedTime;
      return latestPendingTime !== NoWork && latestPendingTime < erroredExpirationTime || latestSuspendedTime !== NoWork && latestSuspendedTime < erroredExpirationTime || latestPingedTime !== NoWork && latestPingedTime < erroredExpirationTime;
    }

    function isPriorityLevelSuspended(root, expirationTime) {
      var earliestSuspendedTime = root.earliestSuspendedTime;
      var latestSuspendedTime = root.latestSuspendedTime;
      return earliestSuspendedTime !== NoWork && expirationTime <= earliestSuspendedTime && expirationTime >= latestSuspendedTime;
    }

    function markSuspendedPriorityLevel(root, suspendedTime) {
      root.didError = false;
      clearPing(root, suspendedTime);

      // First, check the known pending levels and update them if needed.
      var earliestPendingTime = root.earliestPendingTime;
      var latestPendingTime = root.latestPendingTime;
      if (earliestPendingTime === suspendedTime) {
        if (latestPendingTime === suspendedTime) {
          // Both known pending levels were suspended. Clear them.
          root.earliestPendingTime = root.latestPendingTime = NoWork;
        } else {
          // The earliest pending level was suspended. Clear by setting it to the
          // latest pending level.
          root.earliestPendingTime = latestPendingTime;
        }
      } else if (latestPendingTime === suspendedTime) {
        // The latest pending level was suspended. Clear by setting it to the
        // latest pending level.
        root.latestPendingTime = earliestPendingTime;
      }

      // Finally, update the known suspended levels.
      var earliestSuspendedTime = root.earliestSuspendedTime;
      var latestSuspendedTime = root.latestSuspendedTime;
      if (earliestSuspendedTime === NoWork) {
        // No other suspended levels.
        root.earliestSuspendedTime = root.latestSuspendedTime = suspendedTime;
      } else {
        if (earliestSuspendedTime < suspendedTime) {
          // This is the earliest suspended level.
          root.earliestSuspendedTime = suspendedTime;
        } else if (latestSuspendedTime > suspendedTime) {
          // This is the latest suspended level
          root.latestSuspendedTime = suspendedTime;
        }
      }

      findNextExpirationTimeToWorkOn(suspendedTime, root);
    }

    function markPingedPriorityLevel(root, pingedTime) {
      root.didError = false;

      // TODO: When we add back resuming, we need to ensure the progressed work
      // is thrown out and not reused during the restarted render. One way to
      // invalidate the progressed work is to restart at expirationTime + 1.
      var latestPingedTime = root.latestPingedTime;
      if (latestPingedTime === NoWork || latestPingedTime > pingedTime) {
        root.latestPingedTime = pingedTime;
      }
      findNextExpirationTimeToWorkOn(pingedTime, root);
    }

    function clearPing(root, completedTime) {
      // TODO: Track whether the root was pinged during the render phase. If so,
      // we need to make sure we don't lose track of it.
      var latestPingedTime = root.latestPingedTime;
      if (latestPingedTime !== NoWork && latestPingedTime >= completedTime) {
        root.latestPingedTime = NoWork;
      }
    }

    function findEarliestOutstandingPriorityLevel(root, renderExpirationTime) {
      var earliestExpirationTime = renderExpirationTime;

      var earliestPendingTime = root.earliestPendingTime;
      var earliestSuspendedTime = root.earliestSuspendedTime;
      if (earliestPendingTime > earliestExpirationTime) {
        earliestExpirationTime = earliestPendingTime;
      }
      if (earliestSuspendedTime > earliestExpirationTime) {
        earliestExpirationTime = earliestSuspendedTime;
      }
      return earliestExpirationTime;
    }

    function didExpireAtExpirationTime(root, currentTime) {
      var expirationTime = root.expirationTime;
      if (expirationTime !== NoWork && currentTime <= expirationTime) {
        // The root has expired. Flush all work up to the current time.
        root.nextExpirationTimeToWorkOn = currentTime;
      }
    }

    function findNextExpirationTimeToWorkOn(completedExpirationTime, root) {
      var earliestSuspendedTime = root.earliestSuspendedTime;
      var latestSuspendedTime = root.latestSuspendedTime;
      var earliestPendingTime = root.earliestPendingTime;
      var latestPingedTime = root.latestPingedTime;

      // Work on the earliest pending time. Failing that, work on the latest
      // pinged time.
      var nextExpirationTimeToWorkOn = earliestPendingTime !== NoWork ? earliestPendingTime : latestPingedTime;

      // If there is no pending or pinged work, check if there's suspended work
      // that's lower priority than what we just completed.
      if (nextExpirationTimeToWorkOn === NoWork && (completedExpirationTime === NoWork || latestSuspendedTime < completedExpirationTime)) {
        // The lowest priority suspended work is the work most likely to be
        // committed next. Let's start rendering it again, so that if it times out,
        // it's ready to commit.
        nextExpirationTimeToWorkOn = latestSuspendedTime;
      }

      var expirationTime = nextExpirationTimeToWorkOn;
      if (expirationTime !== NoWork && earliestSuspendedTime > expirationTime) {
        // Expire using the earliest known expiration time.
        expirationTime = earliestSuspendedTime;
      }

      root.nextExpirationTimeToWorkOn = nextExpirationTimeToWorkOn;
      root.expirationTime = expirationTime;
    }

    // UpdateQueue is a linked list of prioritized updates.
    //
    // Like fibers, update queues come in pairs: a current queue, which represents
    // the visible state of the screen, and a work-in-progress queue, which is
    // can be mutated and processed asynchronously before it is committed — a form
    // of double buffering. If a work-in-progress render is discarded before
    // finishing, we create a new work-in-progress by cloning the current queue.
    //
    // Both queues share a persistent, singly-linked list structure. To schedule an
    // update, we append it to the end of both queues. Each queue maintains a
    // pointer to first update in the persistent list that hasn't been processed.
    // The work-in-progress pointer always has a position equal to or greater than
    // the current queue, since we always work on that one. The current queue's
    // pointer is only updated during the commit phase, when we swap in the
    // work-in-progress.
    //
    // For example:
    //
    //   Current pointer:           A - B - C - D - E - F
    //   Work-in-progress pointer:              D - E - F
    //                                          ^
    //                                          The work-in-progress queue has
    //                                          processed more updates than current.
    //
    // The reason we append to both queues is because otherwise we might drop
    // updates without ever processing them. For example, if we only add updates to
    // the work-in-progress queue, some updates could be lost whenever a work-in
    // -progress render restarts by cloning from current. Similarly, if we only add
    // updates to the current queue, the updates will be lost whenever an already
    // in-progress queue commits and swaps with the current queue. However, by
    // adding to both queues, we guarantee that the update will be part of the next
    // work-in-progress. (And because the work-in-progress queue becomes the
    // current queue once it commits, there's no danger of applying the same
    // update twice.)
    //
    // Prioritization
    // --------------
    //
    // Updates are not sorted by priority, but by insertion; new updates are always
    // appended to the end of the list.
    //
    // The priority is still important, though. When processing the update queue
    // during the render phase, only the updates with sufficient priority are
    // included in the result. If we skip an update because it has insufficient
    // priority, it remains in the queue to be processed later, during a lower
    // priority render. Crucially, all updates subsequent to a skipped update also
    // remain in the queue *regardless of their priority*. That means high priority
    // updates are sometimes processed twice, at two separate priorities. We also
    // keep track of a base state, that represents the state before the first
    // update in the queue is applied.
    //
    // For example:
    //
    //   Given a base state of '', and the following queue of updates
    //
    //     A1 - B2 - C1 - D2
    //
    //   where the number indicates the priority, and the update is applied to the
    //   previous state by appending a letter, React will process these updates as
    //   two separate renders, one per distinct priority level:
    //
    //   First render, at priority 1:
    //     Base state: ''
    //     Updates: [A1, C1]
    //     Result state: 'AC'
    //
    //   Second render, at priority 2:
    //     Base state: 'A'            <-  The base state does not include C1,
    //                                    because B2 was skipped.
    //     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
    //     Result state: 'ABCD'
    //
    // Because we process updates in insertion order, and rebase high priority
    // updates when preceding updates are skipped, the final result is deterministic
    // regardless of priority. Intermediate state may vary according to system
    // resources, but the final state is always the same.

    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3;

    // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.
    var hasForceUpdate = false;

    var didWarnUpdateInsideUpdate = void 0;
    var currentlyProcessingQueue = void 0;
    var resetCurrentlyProcessingQueue = void 0;
    {
      didWarnUpdateInsideUpdate = false;
      currentlyProcessingQueue = null;
      resetCurrentlyProcessingQueue = function () {
        currentlyProcessingQueue = null;
      };
    }

    function createUpdateQueue(baseState) {
      var queue = {
        baseState: baseState,
        firstUpdate: null,
        lastUpdate: null,
        firstCapturedUpdate: null,
        lastCapturedUpdate: null,
        firstEffect: null,
        lastEffect: null,
        firstCapturedEffect: null,
        lastCapturedEffect: null
      };
      return queue;
    }

    function cloneUpdateQueue(currentQueue) {
      var queue = {
        baseState: currentQueue.baseState,
        firstUpdate: currentQueue.firstUpdate,
        lastUpdate: currentQueue.lastUpdate,

        // TODO: With resuming, if we bail out and resuse the child tree, we should
        // keep these effects.
        firstCapturedUpdate: null,
        lastCapturedUpdate: null,

        firstEffect: null,
        lastEffect: null,

        firstCapturedEffect: null,
        lastCapturedEffect: null
      };
      return queue;
    }

    function createUpdate(expirationTime) {
      return {
        expirationTime: expirationTime,

        tag: UpdateState,
        payload: null,
        callback: null,

        next: null,
        nextEffect: null
      };
    }

    function appendUpdateToQueue(queue, update) {
      // Append the update to the end of the list.
      if (queue.lastUpdate === null) {
        // Queue is empty
        queue.firstUpdate = queue.lastUpdate = update;
      } else {
        queue.lastUpdate.next = update;
        queue.lastUpdate = update;
      }
    }

    function enqueueUpdate(fiber, update) {
      // Update queues are created lazily.
      var alternate = fiber.alternate;
      var queue1 = void 0;
      var queue2 = void 0;
      if (alternate === null) {
        // There's only one fiber.
        queue1 = fiber.updateQueue;
        queue2 = null;
        if (queue1 === null) {
          queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
        }
      } else {
        // There are two owners.
        queue1 = fiber.updateQueue;
        queue2 = alternate.updateQueue;
        if (queue1 === null) {
          if (queue2 === null) {
            // Neither fiber has an update queue. Create new ones.
            queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
            queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);
          } else {
            // Only one fiber has an update queue. Clone to create a new one.
            queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
          }
        } else {
          if (queue2 === null) {
            // Only one fiber has an update queue. Clone to create a new one.
            queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
          }
        }
      }
      if (queue2 === null || queue1 === queue2) {
        // There's only a single queue.
        appendUpdateToQueue(queue1, update);
      } else {
        // There are two queues. We need to append the update to both queues,
        // while accounting for the persistent structure of the list — we don't
        // want the same update to be added multiple times.
        if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
          // One of the queues is not empty. We must add the update to both queues.
          appendUpdateToQueue(queue1, update);
          appendUpdateToQueue(queue2, update);
        } else {
          // Both queues are non-empty. The last update is the same in both lists,
          // because of structural sharing. So, only append to one of the lists.
          appendUpdateToQueue(queue1, update);
          // But we still need to update the `lastUpdate` pointer of queue2.
          queue2.lastUpdate = update;
        }
      }

      {
        if (fiber.tag === ClassComponent && (currentlyProcessingQueue === queue1 || queue2 !== null && currentlyProcessingQueue === queue2) && !didWarnUpdateInsideUpdate) {
          warningWithoutStack$1(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
          didWarnUpdateInsideUpdate = true;
        }
      }
    }

    function enqueueCapturedUpdate(workInProgress, update) {
      // Captured updates go into a separate list, and only on the work-in-
      // progress queue.
      var workInProgressQueue = workInProgress.updateQueue;
      if (workInProgressQueue === null) {
        workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState);
      } else {
        // TODO: I put this here rather than createWorkInProgress so that we don't
        // clone the queue unnecessarily. There's probably a better way to
        // structure this.
        workInProgressQueue = ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
      }

      // Append the update to the end of the list.
      if (workInProgressQueue.lastCapturedUpdate === null) {
        // This is the first render phase update
        workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
      } else {
        workInProgressQueue.lastCapturedUpdate.next = update;
        workInProgressQueue.lastCapturedUpdate = update;
      }
    }

    function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
      var current = workInProgress.alternate;
      if (current !== null) {
        // If the work-in-progress queue is equal to the current queue,
        // we need to clone it first.
        if (queue === current.updateQueue) {
          queue = workInProgress.updateQueue = cloneUpdateQueue(queue);
        }
      }
      return queue;
    }

    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
      switch (update.tag) {
        case ReplaceState:
          {
            var _payload = update.payload;
            if (typeof _payload === 'function') {
              // Updater function
              {
                if (workInProgress.mode & StrictMode) {
                  _payload.call(instance, prevState, nextProps);
                }
              }
              return _payload.call(instance, prevState, nextProps);
            }
            // State object
            return _payload;
          }
        case CaptureUpdate:
          {
            workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
          }
        // Intentional fallthrough
        case UpdateState:
          {
            var _payload2 = update.payload;
            var partialState = void 0;
            if (typeof _payload2 === 'function') {
              // Updater function
              {
                if (workInProgress.mode & StrictMode) {
                  _payload2.call(instance, prevState, nextProps);
                }
              }
              partialState = _payload2.call(instance, prevState, nextProps);
            } else {
              // Partial state object
              partialState = _payload2;
            }
            if (partialState === null || partialState === undefined) {
              // Null and undefined are treated as no-ops.
              return prevState;
            }
            // Merge the partial state and the previous state.
            return _assign({}, prevState, partialState);
          }
        case ForceUpdate:
          {
            hasForceUpdate = true;
            return prevState;
          }
      }
      return prevState;
    }

    function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
      hasForceUpdate = false;

      queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);

      {
        currentlyProcessingQueue = queue;
      }

      // These values may change as we process the queue.
      var newBaseState = queue.baseState;
      var newFirstUpdate = null;
      var newExpirationTime = NoWork;

      // Iterate through the list of updates to compute the result.
      var update = queue.firstUpdate;
      var resultState = newBaseState;
      while (update !== null) {
        var updateExpirationTime = update.expirationTime;
        if (updateExpirationTime < renderExpirationTime) {
          // This update does not have sufficient priority. Skip it.
          if (newFirstUpdate === null) {
            // This is the first skipped update. It will be the first update in
            // the new list.
            newFirstUpdate = update;
            // Since this is the first update that was skipped, the current result
            // is the new base state.
            newBaseState = resultState;
          }
          // Since this update will remain in the list, update the remaining
          // expiration time.
          if (newExpirationTime < updateExpirationTime) {
            newExpirationTime = updateExpirationTime;
          }
        } else {
          // This update does have sufficient priority. Process it and compute
          // a new result.
          resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
          var _callback = update.callback;
          if (_callback !== null) {
            workInProgress.effectTag |= Callback;
            // Set this to null, in case it was mutated during an aborted render.
            update.nextEffect = null;
            if (queue.lastEffect === null) {
              queue.firstEffect = queue.lastEffect = update;
            } else {
              queue.lastEffect.nextEffect = update;
              queue.lastEffect = update;
            }
          }
        }
        // Continue to the next update.
        update = update.next;
      }

      // Separately, iterate though the list of captured updates.
      var newFirstCapturedUpdate = null;
      update = queue.firstCapturedUpdate;
      while (update !== null) {
        var _updateExpirationTime = update.expirationTime;
        if (_updateExpirationTime < renderExpirationTime) {
          // This update does not have sufficient priority. Skip it.
          if (newFirstCapturedUpdate === null) {
            // This is the first skipped captured update. It will be the first
            // update in the new list.
            newFirstCapturedUpdate = update;
            // If this is the first update that was skipped, the current result is
            // the new base state.
            if (newFirstUpdate === null) {
              newBaseState = resultState;
            }
          }
          // Since this update will remain in the list, update the remaining
          // expiration time.
          if (newExpirationTime < _updateExpirationTime) {
            newExpirationTime = _updateExpirationTime;
          }
        } else {
          // This update does have sufficient priority. Process it and compute
          // a new result.
          resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
          var _callback2 = update.callback;
          if (_callback2 !== null) {
            workInProgress.effectTag |= Callback;
            // Set this to null, in case it was mutated during an aborted render.
            update.nextEffect = null;
            if (queue.lastCapturedEffect === null) {
              queue.firstCapturedEffect = queue.lastCapturedEffect = update;
            } else {
              queue.lastCapturedEffect.nextEffect = update;
              queue.lastCapturedEffect = update;
            }
          }
        }
        update = update.next;
      }

      if (newFirstUpdate === null) {
        queue.lastUpdate = null;
      }
      if (newFirstCapturedUpdate === null) {
        queue.lastCapturedUpdate = null;
      } else {
        workInProgress.effectTag |= Callback;
      }
      if (newFirstUpdate === null && newFirstCapturedUpdate === null) {
        // We processed every update, without skipping. That means the new base
        // state is the same as the result state.
        newBaseState = resultState;
      }

      queue.baseState = newBaseState;
      queue.firstUpdate = newFirstUpdate;
      queue.firstCapturedUpdate = newFirstCapturedUpdate;

      // Set the remaining expiration time to be whatever is remaining in the queue.
      // This should be fine because the only two other things that contribute to
      // expiration time are props and context. We're already in the middle of the
      // begin phase by the time we start processing the queue, so we've already
      // dealt with the props. Context in components that specify
      // shouldComponentUpdate is tricky; but we'll have to account for
      // that regardless.
      workInProgress.expirationTime = newExpirationTime;
      workInProgress.memoizedState = resultState;

      {
        currentlyProcessingQueue = null;
      }
    }

    function callCallback(callback, context) {
      !(typeof callback === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', callback) : void 0;
      callback.call(context);
    }

    function resetHasForceUpdateBeforeProcessing() {
      hasForceUpdate = false;
    }

    function checkHasForceUpdateAfterProcessing() {
      return hasForceUpdate;
    }

    function commitUpdateQueue(finishedWork, finishedQueue, instance, renderExpirationTime) {
      // If the finished render included captured updates, and there are still
      // lower priority updates left over, we need to keep the captured updates
      // in the queue so that they are rebased and not dropped once we process the
      // queue again at the lower priority.
      if (finishedQueue.firstCapturedUpdate !== null) {
        // Join the captured update list to the end of the normal list.
        if (finishedQueue.lastUpdate !== null) {
          finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;
          finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
        }
        // Clear the list of captured updates.
        finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
      }

      // Commit the effects
      commitUpdateEffects(finishedQueue.firstEffect, instance);
      finishedQueue.firstEffect = finishedQueue.lastEffect = null;

      commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
      finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
    }

    function commitUpdateEffects(effect, instance) {
      while (effect !== null) {
        var _callback3 = effect.callback;
        if (_callback3 !== null) {
          effect.callback = null;
          callCallback(_callback3, instance);
        }
        effect = effect.nextEffect;
      }
    }

    function createCapturedValue(value, source) {
      // If the value is an error, call this function immediately after it is thrown
      // so the stack is accurate.
      return {
        value: value,
        source: source,
        stack: getStackByFiberInDevAndProd(source)
      };
    }

    var valueCursor = createCursor(null);

    var rendererSigil = void 0;
    {
      // Use this to detect multiple renderers using the same context
      rendererSigil = {};
    }

    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastContextWithAllBitsObserved = null;

    function resetContextDependences() {
      // This is called right before React yields execution, to ensure `readContext`
      // cannot be called outside the render phase.
      currentlyRenderingFiber = null;
      lastContextDependency = null;
      lastContextWithAllBitsObserved = null;
    }

    function pushProvider(providerFiber, nextValue) {
      var context = providerFiber.type._context;

      {
        push(valueCursor, context._currentValue, providerFiber);

        context._currentValue = nextValue;
        {
          !(context._currentRenderer === undefined || context._currentRenderer === null || context._currentRenderer === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
          context._currentRenderer = rendererSigil;
        }
      }
    }

    function popProvider(providerFiber) {
      var currentValue = valueCursor.current;

      pop(valueCursor, providerFiber);

      var context = providerFiber.type._context;
      {
        context._currentValue = currentValue;
      }
    }

    function calculateChangedBits(context, newValue, oldValue) {
      // Use Object.is to compare the new context value to the old value. Inlined
      // Object.is polyfill.
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
      if (oldValue === newValue && (oldValue !== 0 || 1 / oldValue === 1 / newValue) || oldValue !== oldValue && newValue !== newValue // eslint-disable-line no-self-compare
      ) {
          // No change
          return 0;
        } else {
        var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : maxSigned31BitInt;

        {
          !((changedBits & maxSigned31BitInt) === changedBits) ? warning$1(false, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits) : void 0;
        }
        return changedBits | 0;
      }
    }

    function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
      var fiber = workInProgress.child;
      if (fiber !== null) {
        // Set the return pointer of the child to the work-in-progress fiber.
        fiber.return = workInProgress;
      }
      while (fiber !== null) {
        var nextFiber = void 0;

        // Visit this fiber.
        var dependency = fiber.firstContextDependency;
        if (dependency !== null) {
          do {
            // Check if the context matches.
            if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
              // Match! Schedule an update on this fiber.

              if (fiber.tag === ClassComponent) {
                // Schedule a force update on the work-in-progress.
                var update = createUpdate(renderExpirationTime);
                update.tag = ForceUpdate;
                // TODO: Because we don't have a work-in-progress, this will add the
                // update to the current fiber, too, which means it will persist even if
                // this render is thrown away. Since it's a race condition, not sure it's
                // worth fixing.
                enqueueUpdate(fiber, update);
              }

              if (fiber.expirationTime < renderExpirationTime) {
                fiber.expirationTime = renderExpirationTime;
              }
              var alternate = fiber.alternate;
              if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
                alternate.expirationTime = renderExpirationTime;
              }
              // Update the child expiration time of all the ancestors, including
              // the alternates.
              var node = fiber.return;
              while (node !== null) {
                alternate = node.alternate;
                if (node.childExpirationTime < renderExpirationTime) {
                  node.childExpirationTime = renderExpirationTime;
                  if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
                    alternate.childExpirationTime = renderExpirationTime;
                  }
                } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
                  alternate.childExpirationTime = renderExpirationTime;
                } else {
                  // Neither alternate was updated, which means the rest of the
                  // ancestor path already has sufficient priority.
                  break;
                }
                node = node.return;
              }
            }
            nextFiber = fiber.child;
            dependency = dependency.next;
          } while (dependency !== null);
        } else if (fiber.tag === ContextProvider) {
          // Don't scan deeper if this is a matching provider
          nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
        } else {
          // Traverse down.
          nextFiber = fiber.child;
        }

        if (nextFiber !== null) {
          // Set the return pointer of the child to the work-in-progress fiber.
          nextFiber.return = fiber;
        } else {
          // No child. Traverse to next sibling.
          nextFiber = fiber;
          while (nextFiber !== null) {
            if (nextFiber === workInProgress) {
              // We're back to the root of this subtree. Exit.
              nextFiber = null;
              break;
            }
            var sibling = nextFiber.sibling;
            if (sibling !== null) {
              // Set the return pointer of the sibling to the work-in-progress fiber.
              sibling.return = nextFiber.return;
              nextFiber = sibling;
              break;
            }
            // No more siblings. Traverse up.
            nextFiber = nextFiber.return;
          }
        }
        fiber = nextFiber;
      }
    }

    function prepareToReadContext(workInProgress, renderExpirationTime) {
      currentlyRenderingFiber = workInProgress;
      lastContextDependency = null;
      lastContextWithAllBitsObserved = null;

      // Reset the work-in-progress list
      workInProgress.firstContextDependency = null;
    }

    function readContext(context, observedBits) {
      if (lastContextWithAllBitsObserved === context) ; else if (observedBits === false || observedBits === 0) ; else {
        var resolvedObservedBits = void 0; // Avoid deopting on observable arguments or heterogeneous types.
        if (typeof observedBits !== 'number' || observedBits === maxSigned31BitInt) {
          // Observe all updates.
          lastContextWithAllBitsObserved = context;
          resolvedObservedBits = maxSigned31BitInt;
        } else {
          resolvedObservedBits = observedBits;
        }

        var contextItem = {
          context: context,
          observedBits: resolvedObservedBits,
          next: null
        };

        if (lastContextDependency === null) {
          !(currentlyRenderingFiber !== null) ? invariant(false, 'Context can only be read while React is rendering, e.g. inside the render method or getDerivedStateFromProps.') : void 0;
          // This is the first dependency in the list
          currentlyRenderingFiber.firstContextDependency = lastContextDependency = contextItem;
        } else {
          // Append a new context item.
          lastContextDependency = lastContextDependency.next = contextItem;
        }
      }
      return context._currentValue;
    }

    var NoEffect$1 = /*             */0;
    var UnmountSnapshot = /*      */2;
    var UnmountMutation = /*      */4;
    var MountMutation = /*        */8;
    var UnmountLayout = /*        */16;
    var MountLayout = /*          */32;
    // The work-in-progress fiber. I've named it differently to distinguish it from
    // the work-in-progress hook.
    var currentlyRenderingFiber$1 = null;

    // Hooks are stored as a linked list on the fiber's memoizedState field. The
    // current hook list is the list that belongs to the current fiber. The
    // work-in-progress hook list is a new list that will be added to the
    // work-in-progress fiber.
    var firstCurrentHook = null;
    var currentHook = null;
    var firstWorkInProgressHook = null;

    var remainingExpirationTime = NoWork;
    var componentUpdateQueue = null;
    // Whether an update was scheduled during the currently executing render pass.
    var didScheduleRenderPhaseUpdate = false;

    function prepareToUseHooks(current, workInProgress, nextRenderExpirationTime) {
      {
        return;
      }
      currentlyRenderingFiber$1 = workInProgress;
      firstCurrentHook = current !== null ? current.memoizedState : null;

      // The following should have already been reset
      // currentHook = null;
      // workInProgressHook = null;

      // remainingExpirationTime = NoWork;
      // componentUpdateQueue = null;

      // isReRender = false;
      // didScheduleRenderPhaseUpdate = false;
      // renderPhaseUpdates = null;
      // numberOfReRenders = 0;
    }

    function finishHooks(Component, props, children, refOrContext) {
      {
        return children;
      }

      // This must be called after every function component to prevent hooks from
      // being used in classes.

      while (didScheduleRenderPhaseUpdate) {
        // Updates were scheduled during the render phase. They are stored in
        // the `renderPhaseUpdates` map. Call the component again, reusing the
        // work-in-progress hooks and applying the additional updates on top. Keep
        // restarting until no more updates are scheduled.
        didScheduleRenderPhaseUpdate = false;

        // Start over from the beginning of the list
        currentHook = null;
        componentUpdateQueue = null;

        children = Component(props, refOrContext);
      }

      var renderedWork = currentlyRenderingFiber$1;

      renderedWork.memoizedState = firstWorkInProgressHook;
      renderedWork.expirationTime = remainingExpirationTime;
      renderedWork.updateQueue = componentUpdateQueue;

      var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
      currentlyRenderingFiber$1 = null;

      firstCurrentHook = null;
      currentHook = null;
      firstWorkInProgressHook = null;

      remainingExpirationTime = NoWork;
      componentUpdateQueue = null;

      // Always set during createWorkInProgress
      // isReRender = false;

      // These were reset above
      // didScheduleRenderPhaseUpdate = false;
      // renderPhaseUpdates = null;
      // numberOfReRenders = 0;

      !!didRenderTooFewHooks ? invariant(false, 'Rendered fewer hooks than expected. This may be caused by an accidental early return statement.') : void 0;

      return children;
    }

    function resetHooks() {
      {
        return;
      }
      currentlyRenderingFiber$1 = null;

      firstCurrentHook = null;
      currentHook = null;
      firstWorkInProgressHook = null;

      remainingExpirationTime = NoWork;
      componentUpdateQueue = null;

      // Always set during createWorkInProgress
      // isReRender = false;

      didScheduleRenderPhaseUpdate = false;
    }

    var NO_CONTEXT = {};

    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);

    function requiredContext(c) {
      !(c !== NO_CONTEXT) ? invariant(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      return c;
    }

    function getRootHostContainer() {
      var rootInstance = requiredContext(rootInstanceStackCursor.current);
      return rootInstance;
    }

    function pushHostContainer(fiber, nextRootInstance) {
      // Push current root instance onto the stack;
      // This allows us to reset root when portals are popped.
      push(rootInstanceStackCursor, nextRootInstance, fiber);
      // Track the context and the Fiber that provided it.
      // This enables us to pop only Fibers that provide unique contexts.
      push(contextFiberStackCursor, fiber, fiber);

      // Finally, we need to push the host context to the stack.
      // However, we can't just call getRootHostContext() and push it because
      // we'd have a different number of entries on the stack depending on
      // whether getRootHostContext() throws somewhere in renderer code or not.
      // So we push an empty value first. This lets us safely unwind on errors.
      push(contextStackCursor$1, NO_CONTEXT, fiber);
      var nextRootContext = getRootHostContext(nextRootInstance);
      // Now that we know this function doesn't throw, replace it.
      pop(contextStackCursor$1, fiber);
      push(contextStackCursor$1, nextRootContext, fiber);
    }

    function popHostContainer(fiber) {
      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
      pop(rootInstanceStackCursor, fiber);
    }

    function getHostContext() {
      var context = requiredContext(contextStackCursor$1.current);
      return context;
    }

    function pushHostContext(fiber) {
      var rootInstance = requiredContext(rootInstanceStackCursor.current);
      var context = requiredContext(contextStackCursor$1.current);
      var nextContext = getChildHostContext(context, fiber.type, rootInstance);

      // Don't push this Fiber's context unless it's unique.
      if (context === nextContext) {
        return;
      }

      // Track the context and the Fiber that provided it.
      // This enables us to pop only Fibers that provide unique contexts.
      push(contextFiberStackCursor, fiber, fiber);
      push(contextStackCursor$1, nextContext, fiber);
    }

    function popHostContext(fiber) {
      // Do not pop unless this Fiber provided the current context.
      // pushHostContext() only pushes Fibers that provide unique contexts.
      if (contextFiberStackCursor.current !== fiber) {
        return;
      }

      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
    }

    var commitTime = 0;
    var profilerStartTime = -1;

    function getCommitTime() {
      return commitTime;
    }

    function recordCommitTime() {
      commitTime = scheduler$$1.unstable_now();
    }

    function startProfilerTimer(fiber) {

      profilerStartTime = scheduler$$1.unstable_now();

      if (fiber.actualStartTime < 0) {
        fiber.actualStartTime = scheduler$$1.unstable_now();
      }
    }

    function stopProfilerTimerIfRunning(fiber) {
      profilerStartTime = -1;
    }

    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

      if (profilerStartTime >= 0) {
        var elapsedTime = scheduler$$1.unstable_now() - profilerStartTime;
        fiber.actualDuration += elapsedTime;
        if (overrideBaseTime) {
          fiber.selfBaseDuration = elapsedTime;
        }
        profilerStartTime = -1;
      }
    }

    function resolveDefaultProps(Component, baseProps) {
      if (Component && Component.defaultProps) {
        // Resolve default props. Taken from ReactElement
        var props = _assign({}, baseProps);
        var defaultProps = Component.defaultProps;
        for (var propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }
        return props;
      }
      return baseProps;
    }

    function readLazyComponentType(lazyComponent) {
      var status = lazyComponent._status;
      var result = lazyComponent._result;
      switch (status) {
        case Resolved:
          {
            var Component = result;
            return Component;
          }
        case Rejected:
          {
            var error = result;
            throw error;
          }
        case Pending:
          {
            var thenable = result;
            throw thenable;
          }
        default:
          {
            lazyComponent._status = Pending;
            var ctor = lazyComponent._ctor;
            var _thenable = ctor();
            _thenable.then(function (moduleObject) {
              if (lazyComponent._status === Pending) {
                var defaultExport = moduleObject.default;
                {
                  if (defaultExport === undefined) {
                    warning$1(false, 'lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + "const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                  }
                }
                lazyComponent._status = Resolved;
                lazyComponent._result = defaultExport;
              }
            }, function (error) {
              if (lazyComponent._status === Pending) {
                lazyComponent._status = Rejected;
                lazyComponent._result = error;
              }
            });
            lazyComponent._result = _thenable;
            throw _thenable;
          }
      }
    }

    var ReactCurrentOwner$4 = ReactSharedInternals.ReactCurrentOwner;

    function readContext$1(contextType) {
      var dispatcher = ReactCurrentOwner$4.currentDispatcher;
      return dispatcher.readContext(contextType);
    }

    var fakeInternalInstance = {};
    var isArray$1 = Array.isArray;

    // React.Component uses a shared frozen object by default.
    // We'll use it to determine whether we need to initialize legacy refs.
    var emptyRefsObject = new React.Component().refs;

    var didWarnAboutStateAssignmentForComponent = void 0;
    var didWarnAboutUninitializedState = void 0;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = void 0;
    var didWarnAboutLegacyLifecyclesAndDerivedState = void 0;
    var didWarnAboutUndefinedDerivedState = void 0;
    var warnOnUndefinedDerivedState = void 0;
    var warnOnInvalidCallback$1 = void 0;
    var didWarnAboutDirectlyAssigningPropsToState = void 0;
    var didWarnAboutContextTypeAndContextTypes = void 0;
    var didWarnAboutInvalidateContextType = void 0;

    {
      didWarnAboutStateAssignmentForComponent = new Set();
      didWarnAboutUninitializedState = new Set();
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
      didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
      didWarnAboutDirectlyAssigningPropsToState = new Set();
      didWarnAboutUndefinedDerivedState = new Set();
      didWarnAboutContextTypeAndContextTypes = new Set();
      didWarnAboutInvalidateContextType = new Set();

      var didWarnOnInvalidCallback = new Set();

      warnOnInvalidCallback$1 = function (callback, callerName) {
        if (callback === null || typeof callback === 'function') {
          return;
        }
        var key = callerName + '_' + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
          didWarnOnInvalidCallback.add(key);
          warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
        }
      };

      warnOnUndefinedDerivedState = function (type, partialState) {
        if (partialState === undefined) {
          var componentName = getComponentName(type) || 'Component';
          if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
            didWarnAboutUndefinedDerivedState.add(componentName);
            warningWithoutStack$1(false, '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
          }
        }
      };

      // This is so gross but it's at least non-critical and can be removed if
      // it causes problems. This is meant to give a nicer error message for
      // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
      // ...)) which otherwise throws a "_processChildContext is not a function"
      // exception.
      Object.defineProperty(fakeInternalInstance, '_processChildContext', {
        enumerable: false,
        value: function () {
          invariant(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');
        }
      });
      Object.freeze(fakeInternalInstance);
    }

    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
      var prevState = workInProgress.memoizedState;

      {
        if (workInProgress.mode & StrictMode) {
          // Invoke the function an extra time to help detect side-effects.
          getDerivedStateFromProps(nextProps, prevState);
        }
      }

      var partialState = getDerivedStateFromProps(nextProps, prevState);

      {
        warnOnUndefinedDerivedState(ctor, partialState);
      }
      // Merge the partial state and the previous state.
      var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
      workInProgress.memoizedState = memoizedState;

      // Once the update queue is empty, persist the derived state onto the
      // base state.
      var updateQueue = workInProgress.updateQueue;
      if (updateQueue !== null && workInProgress.expirationTime === NoWork) {
        updateQueue.baseState = memoizedState;
      }
    }

    var classComponentUpdater = {
      isMounted: isMounted,
      enqueueSetState: function (inst, payload, callback) {
        var fiber = get(inst);
        var currentTime = requestCurrentTime();
        var expirationTime = computeExpirationForFiber(currentTime, fiber);

        var update = createUpdate(expirationTime);
        update.payload = payload;
        if (callback !== undefined && callback !== null) {
          {
            warnOnInvalidCallback$1(callback, 'setState');
          }
          update.callback = callback;
        }

        flushPassiveEffects();
        enqueueUpdate(fiber, update);
        scheduleWork(fiber, expirationTime);
      },
      enqueueReplaceState: function (inst, payload, callback) {
        var fiber = get(inst);
        var currentTime = requestCurrentTime();
        var expirationTime = computeExpirationForFiber(currentTime, fiber);

        var update = createUpdate(expirationTime);
        update.tag = ReplaceState;
        update.payload = payload;

        if (callback !== undefined && callback !== null) {
          {
            warnOnInvalidCallback$1(callback, 'replaceState');
          }
          update.callback = callback;
        }

        flushPassiveEffects();
        enqueueUpdate(fiber, update);
        scheduleWork(fiber, expirationTime);
      },
      enqueueForceUpdate: function (inst, callback) {
        var fiber = get(inst);
        var currentTime = requestCurrentTime();
        var expirationTime = computeExpirationForFiber(currentTime, fiber);

        var update = createUpdate(expirationTime);
        update.tag = ForceUpdate;

        if (callback !== undefined && callback !== null) {
          {
            warnOnInvalidCallback$1(callback, 'forceUpdate');
          }
          update.callback = callback;
        }

        flushPassiveEffects();
        enqueueUpdate(fiber, update);
        scheduleWork(fiber, expirationTime);
      }
    };

    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
      var instance = workInProgress.stateNode;
      if (typeof instance.shouldComponentUpdate === 'function') {
        startPhaseTimer(workInProgress, 'shouldComponentUpdate');
        var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
        stopPhaseTimer();

        {
          !(shouldUpdate !== undefined) ? warningWithoutStack$1(false, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component') : void 0;
        }

        return shouldUpdate;
      }

      if (ctor.prototype && ctor.prototype.isPureReactComponent) {
        return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
      }

      return true;
    }

    function checkClassInstance(workInProgress, ctor, newProps) {
      var instance = workInProgress.stateNode;
      {
        var name = getComponentName(ctor) || 'Component';
        var renderPresent = instance.render;

        if (!renderPresent) {
          if (ctor.prototype && typeof ctor.prototype.render === 'function') {
            warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
          } else {
            warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
          }
        }

        var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
        !noGetInitialStateOnES6 ? warningWithoutStack$1(false, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name) : void 0;
        var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
        !noGetDefaultPropsOnES6 ? warningWithoutStack$1(false, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name) : void 0;
        var noInstancePropTypes = !instance.propTypes;
        !noInstancePropTypes ? warningWithoutStack$1(false, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name) : void 0;
        var noInstanceContextType = !instance.contextType;
        !noInstanceContextType ? warningWithoutStack$1(false, 'contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name) : void 0;
        var noInstanceContextTypes = !instance.contextTypes;
        !noInstanceContextTypes ? warningWithoutStack$1(false, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name) : void 0;

        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
          didWarnAboutContextTypeAndContextTypes.add(ctor);
          warningWithoutStack$1(false, '%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
        }

        var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
        !noComponentShouldUpdate ? warningWithoutStack$1(false, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name) : void 0;
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
          warningWithoutStack$1(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
        }
        var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
        !noComponentDidUnmount ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name) : void 0;
        var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
        !noComponentDidReceiveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name) : void 0;
        var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
        !noComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name) : void 0;
        var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== 'function';
        !noUnsafeComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name) : void 0;
        var hasMutatedProps = instance.props !== newProps;
        !(instance.props === undefined || !hasMutatedProps) ? warningWithoutStack$1(false, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name) : void 0;
        var noInstanceDefaultProps = !instance.defaultProps;
        !noInstanceDefaultProps ? warningWithoutStack$1(false, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name) : void 0;

        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
          warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
        }

        var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== 'function';
        !noInstanceGetDerivedStateFromProps ? warningWithoutStack$1(false, '%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
        var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromError !== 'function';
        !noInstanceGetDerivedStateFromCatch ? warningWithoutStack$1(false, '%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
        var noStaticGetSnapshotBeforeUpdate = typeof ctor.getSnapshotBeforeUpdate !== 'function';
        !noStaticGetSnapshotBeforeUpdate ? warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name) : void 0;
        var _state = instance.state;
        if (_state && (typeof _state !== 'object' || isArray$1(_state))) {
          warningWithoutStack$1(false, '%s.state: must be set to an object or null', name);
        }
        if (typeof instance.getChildContext === 'function') {
          !(typeof ctor.childContextTypes === 'object') ? warningWithoutStack$1(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name) : void 0;
        }
      }
    }

    function adoptClassInstance(workInProgress, instance) {
      instance.updater = classComponentUpdater;
      workInProgress.stateNode = instance;
      // The instance needs access to the fiber so that it can schedule updates
      set(instance, workInProgress);
      {
        instance._reactInternalInstance = fakeInternalInstance;
      }
    }

    function constructClassInstance(workInProgress, ctor, props, renderExpirationTime) {
      var isLegacyContextConsumer = false;
      var unmaskedContext = emptyContextObject;
      var context = null;
      var contextType = ctor.contextType;
      if (typeof contextType === 'object' && contextType !== null) {
        {
          if (contextType.$$typeof !== REACT_CONTEXT_TYPE && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            warningWithoutStack$1(false, '%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext(). ' + 'Did you accidentally pass the Context.Provider instead?', getComponentName(ctor) || 'Component');
          }
        }

        context = readContext$1(contextType);
      } else {
        unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        var contextTypes = ctor.contextTypes;
        isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
        context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
      }

      // Instantiate twice to help detect side-effects.
      {
        if (workInProgress.mode & StrictMode) {
          new ctor(props, context); // eslint-disable-line no-new
        }
      }

      var instance = new ctor(props, context);
      var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
      adoptClassInstance(workInProgress, instance);

      {
        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
          var componentName = getComponentName(ctor) || 'Component';
          if (!didWarnAboutUninitializedState.has(componentName)) {
            didWarnAboutUninitializedState.add(componentName);
            warningWithoutStack$1(false, '`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
          }
        }

        // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Warn about these lifecycles if they are present.
        // Don't warn about react-lifecycles-compat polyfilled methods though.
        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
          var foundWillMountName = null;
          var foundWillReceivePropsName = null;
          var foundWillUpdateName = null;
          if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            foundWillMountName = 'componentWillMount';
          } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
            foundWillMountName = 'UNSAFE_componentWillMount';
          }
          if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            foundWillReceivePropsName = 'componentWillReceiveProps';
          } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
            foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
          }
          if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
            foundWillUpdateName = 'componentWillUpdate';
          } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
            foundWillUpdateName = 'UNSAFE_componentWillUpdate';
          }
          if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
            var _componentName = getComponentName(ctor) || 'Component';
            var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
            if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
              didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
              warningWithoutStack$1(false, 'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-async-component-lifecycle-hooks', _componentName, newApiName, foundWillMountName !== null ? '\n  ' + foundWillMountName : '', foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '', foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '');
            }
          }
        }
      }

      // Cache unmasked context so we can avoid recreating masked context unless necessary.
      // ReactFiberContext usually updates this cache but can't for newly-created instances.
      if (isLegacyContextConsumer) {
        cacheContext(workInProgress, unmaskedContext, context);
      }

      return instance;
    }

    function callComponentWillMount(workInProgress, instance) {
      startPhaseTimer(workInProgress, 'componentWillMount');
      var oldState = instance.state;

      if (typeof instance.componentWillMount === 'function') {
        instance.componentWillMount();
      }
      if (typeof instance.UNSAFE_componentWillMount === 'function') {
        instance.UNSAFE_componentWillMount();
      }

      stopPhaseTimer();

      if (oldState !== instance.state) {
        {
          warningWithoutStack$1(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
        }
        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
      }
    }

    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
      var oldState = instance.state;
      startPhaseTimer(workInProgress, 'componentWillReceiveProps');
      if (typeof instance.componentWillReceiveProps === 'function') {
        instance.componentWillReceiveProps(newProps, nextContext);
      }
      if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
      }
      stopPhaseTimer();

      if (instance.state !== oldState) {
        {
          var componentName = getComponentName(workInProgress.type) || 'Component';
          if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
            didWarnAboutStateAssignmentForComponent.add(componentName);
            warningWithoutStack$1(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
          }
        }
        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
      }
    }

    // Invokes the mount life-cycles on a previously never rendered instance.
    function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
      {
        checkClassInstance(workInProgress, ctor, newProps);
      }

      var instance = workInProgress.stateNode;
      instance.props = newProps;
      instance.state = workInProgress.memoizedState;
      instance.refs = emptyRefsObject;

      var contextType = ctor.contextType;
      if (typeof contextType === 'object' && contextType !== null) {
        instance.context = readContext$1(contextType);
      } else {
        var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        instance.context = getMaskedContext(workInProgress, unmaskedContext);
      }

      {
        if (instance.state === newProps) {
          var componentName = getComponentName(ctor) || 'Component';
          if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
            didWarnAboutDirectlyAssigningPropsToState.add(componentName);
            warningWithoutStack$1(false, '%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
          }
        }

        if (workInProgress.mode & StrictMode) {
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);

          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        }
      }

      var updateQueue = workInProgress.updateQueue;
      if (updateQueue !== null) {
        processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
        instance.state = workInProgress.memoizedState;
      }

      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      if (typeof getDerivedStateFromProps === 'function') {
        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
        instance.state = workInProgress.memoizedState;
      }

      // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.
      if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
        callComponentWillMount(workInProgress, instance);
        // If we had additional state updates during this life-cycle, let's
        // process them now.
        updateQueue = workInProgress.updateQueue;
        if (updateQueue !== null) {
          processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
          instance.state = workInProgress.memoizedState;
        }
      }

      if (typeof instance.componentDidMount === 'function') {
        workInProgress.effectTag |= Update;
      }
    }

    function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
      var instance = workInProgress.stateNode;

      var oldProps = workInProgress.memoizedProps;
      instance.props = oldProps;

      var oldContext = instance.context;
      var contextType = ctor.contextType;
      var nextContext = void 0;
      if (typeof contextType === 'object' && contextType !== null) {
        nextContext = readContext$1(contextType);
      } else {
        var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
      }

      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';

      // Note: During these life-cycles, instance.props/instance.state are what
      // ever the previously attempted to render - not the "current". However,
      // during componentDidUpdate we pass the "current" props.

      // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.
      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
        if (oldProps !== newProps || oldContext !== nextContext) {
          callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
      }

      resetHasForceUpdateBeforeProcessing();

      var oldState = workInProgress.memoizedState;
      var newState = instance.state = oldState;
      var updateQueue = workInProgress.updateQueue;
      if (updateQueue !== null) {
        processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
        newState = workInProgress.memoizedState;
      }
      if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidMount === 'function') {
          workInProgress.effectTag |= Update;
        }
        return false;
      }

      if (typeof getDerivedStateFromProps === 'function') {
        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
        newState = workInProgress.memoizedState;
      }

      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

      if (shouldUpdate) {
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
          startPhaseTimer(workInProgress, 'componentWillMount');
          if (typeof instance.componentWillMount === 'function') {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === 'function') {
            instance.UNSAFE_componentWillMount();
          }
          stopPhaseTimer();
        }
        if (typeof instance.componentDidMount === 'function') {
          workInProgress.effectTag |= Update;
        }
      } else {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidMount === 'function') {
          workInProgress.effectTag |= Update;
        }

        // If shouldComponentUpdate returned false, we should still update the
        // memoized state to indicate that this work can be reused.
        workInProgress.memoizedProps = newProps;
        workInProgress.memoizedState = newState;
      }

      // Update the existing instance's state, props, and context pointers even
      // if shouldComponentUpdate returns false.
      instance.props = newProps;
      instance.state = newState;
      instance.context = nextContext;

      return shouldUpdate;
    }

    // Invokes the update life-cycles and returns false if it shouldn't rerender.
    function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
      var instance = workInProgress.stateNode;

      var oldProps = workInProgress.memoizedProps;
      instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);

      var oldContext = instance.context;
      var contextType = ctor.contextType;
      var nextContext = void 0;
      if (typeof contextType === 'object' && contextType !== null) {
        nextContext = readContext$1(contextType);
      } else {
        var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
      }

      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';

      // Note: During these life-cycles, instance.props/instance.state are what
      // ever the previously attempted to render - not the "current". However,
      // during componentDidUpdate we pass the "current" props.

      // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.
      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
        if (oldProps !== newProps || oldContext !== nextContext) {
          callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
      }

      resetHasForceUpdateBeforeProcessing();

      var oldState = workInProgress.memoizedState;
      var newState = instance.state = oldState;
      var updateQueue = workInProgress.updateQueue;
      if (updateQueue !== null) {
        processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
        newState = workInProgress.memoizedState;
      }

      if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidUpdate === 'function') {
          if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.effectTag |= Update;
          }
        }
        if (typeof instance.getSnapshotBeforeUpdate === 'function') {
          if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.effectTag |= Snapshot;
          }
        }
        return false;
      }

      if (typeof getDerivedStateFromProps === 'function') {
        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
        newState = workInProgress.memoizedState;
      }

      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

      if (shouldUpdate) {
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
          startPhaseTimer(workInProgress, 'componentWillUpdate');
          if (typeof instance.componentWillUpdate === 'function') {
            instance.componentWillUpdate(newProps, newState, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
            instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
          }
          stopPhaseTimer();
        }
        if (typeof instance.componentDidUpdate === 'function') {
          workInProgress.effectTag |= Update;
        }
        if (typeof instance.getSnapshotBeforeUpdate === 'function') {
          workInProgress.effectTag |= Snapshot;
        }
      } else {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidUpdate === 'function') {
          if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.effectTag |= Update;
          }
        }
        if (typeof instance.getSnapshotBeforeUpdate === 'function') {
          if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.effectTag |= Snapshot;
          }
        }

        // If shouldComponentUpdate returned false, we should still update the
        // memoized props/state to indicate that this work can be reused.
        workInProgress.memoizedProps = newProps;
        workInProgress.memoizedState = newState;
      }

      // Update the existing instance's state, props, and context pointers even
      // if shouldComponentUpdate returns false.
      instance.props = newProps;
      instance.state = newState;
      instance.context = nextContext;

      return shouldUpdate;
    }

    var didWarnAboutMaps = void 0;
    var didWarnAboutGenerators = void 0;
    var didWarnAboutStringRefInStrictMode = void 0;
    var ownerHasKeyUseWarning = void 0;
    var ownerHasFunctionTypeWarning = void 0;
    var warnForMissingKey = function (child) {};

    {
      didWarnAboutMaps = false;
      didWarnAboutGenerators = false;
      didWarnAboutStringRefInStrictMode = {};

      /**
       * Warn if there's no key explicitly set on dynamic arrays of children or
       * object keys are not valid. This allows us to keep track of children between
       * updates.
       */
      ownerHasKeyUseWarning = {};
      ownerHasFunctionTypeWarning = {};

      warnForMissingKey = function (child) {
        if (child === null || typeof child !== 'object') {
          return;
        }
        if (!child._store || child._store.validated || child.key != null) {
          return;
        }
        !(typeof child._store === 'object') ? invariant(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        child._store.validated = true;

        var currentComponentErrorInfo = 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

        warning$1(false, 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
      };
    }

    var isArray = Array.isArray;

    function coerceRef(returnFiber, current$$1, element) {
      var mixedRef = element.ref;
      if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
        {
          if (returnFiber.mode & StrictMode) {
            var componentName = getComponentName(returnFiber.type) || 'Component';
            if (!didWarnAboutStringRefInStrictMode[componentName]) {
              warningWithoutStack$1(false, 'A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using createRef() instead.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-string-ref', mixedRef, getStackByFiberInDevAndProd(returnFiber));
              didWarnAboutStringRefInStrictMode[componentName] = true;
            }
          }
        }

        if (element._owner) {
          var owner = element._owner;
          var inst = void 0;
          if (owner) {
            var ownerFiber = owner;
            !(ownerFiber.tag === ClassComponent) ? invariant(false, 'Function components cannot have refs.') : void 0;
            inst = ownerFiber.stateNode;
          }
          !inst ? invariant(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef) : void 0;
          var stringRef = '' + mixedRef;
          // Check if previous string ref matches new string ref
          if (current$$1 !== null && current$$1.ref !== null && typeof current$$1.ref === 'function' && current$$1.ref._stringRef === stringRef) {
            return current$$1.ref;
          }
          var ref = function (value) {
            var refs = inst.refs;
            if (refs === emptyRefsObject) {
              // This is a lazy pooled frozen object, so we need to initialize.
              refs = inst.refs = {};
            }
            if (value === null) {
              delete refs[stringRef];
            } else {
              refs[stringRef] = value;
            }
          };
          ref._stringRef = stringRef;
          return ref;
        } else {
          !(typeof mixedRef === 'string') ? invariant(false, 'Expected ref to be a function, a string, an object returned by React.createRef(), or null.') : void 0;
          !element._owner ? invariant(false, 'Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component\'s render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.', mixedRef) : void 0;
        }
      }
      return mixedRef;
    }

    function throwOnInvalidObjectType(returnFiber, newChild) {
      if (returnFiber.type !== 'textarea') {
        var addendum = '';
        {
          addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
        }
        invariant(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);
      }
    }

    function warnOnFunctionType() {
      var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();

      if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
        return;
      }
      ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;

      warning$1(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
    }

    // This wrapper function exists because I expect to clone the code in each path
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.
    function ChildReconciler(shouldTrackSideEffects) {
      function deleteChild(returnFiber, childToDelete) {
        if (!shouldTrackSideEffects) {
          // Noop.
          return;
        }
        // Deletions are added in reversed order so we add it to the front.
        // At this point, the return fiber's effect list is empty except for
        // deletions, so we can just append the deletion to the list. The remaining
        // effects aren't added until the complete phase. Once we implement
        // resuming, this may not be true.
        var last = returnFiber.lastEffect;
        if (last !== null) {
          last.nextEffect = childToDelete;
          returnFiber.lastEffect = childToDelete;
        } else {
          returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        }
        childToDelete.nextEffect = null;
        childToDelete.effectTag = Deletion;
      }

      function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) {
          // Noop.
          return null;
        }

        // TODO: For the shouldClone case, this could be micro-optimized a bit by
        // assuming that after the first child we've already added everything.
        var childToDelete = currentFirstChild;
        while (childToDelete !== null) {
          deleteChild(returnFiber, childToDelete);
          childToDelete = childToDelete.sibling;
        }
        return null;
      }

      function mapRemainingChildren(returnFiber, currentFirstChild) {
        // Add the remaining children to a temporary map so that we can find them by
        // keys quickly. Implicit (null) keys get added to this set with their index
        var existingChildren = new Map();

        var existingChild = currentFirstChild;
        while (existingChild !== null) {
          if (existingChild.key !== null) {
            existingChildren.set(existingChild.key, existingChild);
          } else {
            existingChildren.set(existingChild.index, existingChild);
          }
          existingChild = existingChild.sibling;
        }
        return existingChildren;
      }

      function useFiber(fiber, pendingProps, expirationTime) {
        // We currently set sibling to null and index to 0 here because it is easy
        // to forget to do before returning it. E.g. for the single child case.
        var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
        clone.index = 0;
        clone.sibling = null;
        return clone;
      }

      function placeChild(newFiber, lastPlacedIndex, newIndex) {
        newFiber.index = newIndex;
        if (!shouldTrackSideEffects) {
          // Noop.
          return lastPlacedIndex;
        }
        var current$$1 = newFiber.alternate;
        if (current$$1 !== null) {
          var oldIndex = current$$1.index;
          if (oldIndex < lastPlacedIndex) {
            // This is a move.
            newFiber.effectTag = Placement;
            return lastPlacedIndex;
          } else {
            // This item can stay in place.
            return oldIndex;
          }
        } else {
          // This is an insertion.
          newFiber.effectTag = Placement;
          return lastPlacedIndex;
        }
      }

      function placeSingleChild(newFiber) {
        // This is simpler for the single child case. We only need to do a
        // placement for inserting new children.
        if (shouldTrackSideEffects && newFiber.alternate === null) {
          newFiber.effectTag = Placement;
        }
        return newFiber;
      }

      function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
        if (current$$1 === null || current$$1.tag !== HostText) {
          // Insert
          var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
          created.return = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current$$1, textContent, expirationTime);
          existing.return = returnFiber;
          return existing;
        }
      }

      function updateElement(returnFiber, current$$1, element, expirationTime) {
        if (current$$1 !== null && current$$1.elementType === element.type) {
          // Move based on index
          var existing = useFiber(current$$1, element.props, expirationTime);
          existing.ref = coerceRef(returnFiber, current$$1, element);
          existing.return = returnFiber;
          {
            existing._debugSource = element._source;
            existing._debugOwner = element._owner;
          }
          return existing;
        } else {
          // Insert
          var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
          created.ref = coerceRef(returnFiber, current$$1, element);
          created.return = returnFiber;
          return created;
        }
      }

      function updatePortal(returnFiber, current$$1, portal, expirationTime) {
        if (current$$1 === null || current$$1.tag !== HostPortal || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) {
          // Insert
          var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
          created.return = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current$$1, portal.children || [], expirationTime);
          existing.return = returnFiber;
          return existing;
        }
      }

      function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
        if (current$$1 === null || current$$1.tag !== Fragment) {
          // Insert
          var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
          created.return = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current$$1, fragment, expirationTime);
          existing.return = returnFiber;
          return existing;
        }
      }

      function createChild(returnFiber, newChild, expirationTime) {
        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes don't have keys. If the previous node is implicitly keyed
          // we can continue to replace it without aborting even if it is not a text
          // node.
          var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
          created.return = returnFiber;
          return created;
        }

        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);
                _created.ref = coerceRef(returnFiber, null, newChild);
                _created.return = returnFiber;
                return _created;
              }
            case REACT_PORTAL_TYPE:
              {
                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
                _created2.return = returnFiber;
                return _created2;
              }
          }

          if (isArray(newChild) || getIteratorFn(newChild)) {
            var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);
            _created3.return = returnFiber;
            return _created3;
          }

          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }

        return null;
      }

      function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
        // Update the fiber if the keys match, otherwise return null.

        var key = oldFiber !== null ? oldFiber.key : null;

        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes don't have keys. If the previous node is implicitly keyed
          // we can continue to replace it without aborting even if it is not a text
          // node.
          if (key !== null) {
            return null;
          }
          return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
        }

        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                if (newChild.key === key) {
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                  }
                  return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                } else {
                  return null;
                }
              }
            case REACT_PORTAL_TYPE:
              {
                if (newChild.key === key) {
                  return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                } else {
                  return null;
                }
              }
          }

          if (isArray(newChild) || getIteratorFn(newChild)) {
            if (key !== null) {
              return null;
            }

            return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
          }

          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }

        return null;
      }

      function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes don't have keys, so we neither have to check the old nor
          // new node for the key. If both are text nodes, they match.
          var matchedFiber = existingChildren.get(newIdx) || null;
          return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
        }

        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                if (newChild.type === REACT_FRAGMENT_TYPE) {
                  return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                }
                return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
              }
            case REACT_PORTAL_TYPE:
              {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
              }
          }

          if (isArray(newChild) || getIteratorFn(newChild)) {
            var _matchedFiber3 = existingChildren.get(newIdx) || null;
            return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
          }

          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }

        return null;
      }

      /**
       * Warns if there is a duplicate or missing key
       */
      function warnOnInvalidKey(child, knownKeys) {
        {
          if (typeof child !== 'object' || child === null) {
            return knownKeys;
          }
          switch (child.$$typeof) {
            case REACT_ELEMENT_TYPE:
            case REACT_PORTAL_TYPE:
              warnForMissingKey(child);
              var key = child.key;
              if (typeof key !== 'string') {
                break;
              }
              if (knownKeys === null) {
                knownKeys = new Set();
                knownKeys.add(key);
                break;
              }
              if (!knownKeys.has(key)) {
                knownKeys.add(key);
                break;
              }
              warning$1(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);
              break;
            default:
              break;
          }
        }
        return knownKeys;
      }

      function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
        // This algorithm can't optimize by searching from boths ends since we
        // don't have backpointers on fibers. I'm trying to see how far we can get
        // with that model. If it ends up not being worth the tradeoffs, we can
        // add it later.

        // Even with a two ended optimization, we'd want to optimize for the case
        // where there are few changes and brute force the comparison instead of
        // going for the Map. It'd like to explore hitting that path first in
        // forward-only mode and only go for the Map once we notice that we need
        // lots of look ahead. This doesn't handle reversal as well as two ended
        // search but that's unusual. Besides, for the two ended optimization to
        // work on Iterables, we'd need to copy the whole set.

        // In this first iteration, we'll just live with hitting the bad case
        // (adding everything to a Map) in for every insert/move.

        // If you change this code, also update reconcileChildrenIterator() which
        // uses the same algorithm.

        {
          // First, validate keys.
          var knownKeys = null;
          for (var i = 0; i < newChildren.length; i++) {
            var child = newChildren[i];
            knownKeys = warnOnInvalidKey(child, knownKeys);
          }
        }

        var resultingFirstChild = null;
        var previousNewFiber = null;

        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;
        for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }
          var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
          if (newFiber === null) {
            // TODO: This breaks on empty slots like null children. That's
            // unfortunate because it triggers the slow path all the time. We need
            // a better way to communicate whether this was a miss or null,
            // boolean, undefined, etc.
            if (oldFiber === null) {
              oldFiber = nextOldFiber;
            }
            break;
          }
          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              // We matched the slot, but we didn't reuse the existing fiber, so we
              // need to delete the existing child.
              deleteChild(returnFiber, oldFiber);
            }
          }
          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
          if (previousNewFiber === null) {
            // TODO: Move out of the loop. This only happens for the first run.
            resultingFirstChild = newFiber;
          } else {
            // TODO: Defer siblings if we're not at the right index for this slot.
            // I.e. if we had null values before, then we want to defer this
            // for each null value. However, we also don't want to call updateSlot
            // with the previous one.
            previousNewFiber.sibling = newFiber;
          }
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }

        if (newIdx === newChildren.length) {
          // We've reached the end of the new children. We can delete the rest.
          deleteRemainingChildren(returnFiber, oldFiber);
          return resultingFirstChild;
        }

        if (oldFiber === null) {
          // If we don't have any more existing children we can choose a fast path
          // since the rest will all be insertions.
          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
            if (!_newFiber) {
              continue;
            }
            lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              // TODO: Move out of the loop. This only happens for the first run.
              resultingFirstChild = _newFiber;
            } else {
              previousNewFiber.sibling = _newFiber;
            }
            previousNewFiber = _newFiber;
          }
          return resultingFirstChild;
        }

        // Add all children to a key map for quick lookups.
        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

        // Keep scanning and use the map to restore deleted items as moves.
        for (; newIdx < newChildren.length; newIdx++) {
          var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
          if (_newFiber2) {
            if (shouldTrackSideEffects) {
              if (_newFiber2.alternate !== null) {
                // The new fiber is a work in progress, but if there exists a
                // current, that means that we reused the fiber. We need to delete
                // it from the child list so that we don't add it to the deletion
                // list.
                existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
              }
            }
            lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber2;
            } else {
              previousNewFiber.sibling = _newFiber2;
            }
            previousNewFiber = _newFiber2;
          }
        }

        if (shouldTrackSideEffects) {
          // Any existing children that weren't consumed above were deleted. We need
          // to add them to the deletion list.
          existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        }

        return resultingFirstChild;
      }

      function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
        // This is the same implementation as reconcileChildrenArray(),
        // but using the iterator instead.

        var iteratorFn = getIteratorFn(newChildrenIterable);
        !(typeof iteratorFn === 'function') ? invariant(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.') : void 0;

        {
          // We don't support rendering Generators because it's a mutation.
          // See https://github.com/facebook/react/issues/12995
          if (typeof Symbol === 'function' &&
          // $FlowFixMe Flow doesn't know about toStringTag
          newChildrenIterable[Symbol.toStringTag] === 'Generator') {
            !didWarnAboutGenerators ? warning$1(false, 'Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.') : void 0;
            didWarnAboutGenerators = true;
          }

          // Warn about using Maps as children
          if (newChildrenIterable.entries === iteratorFn) {
            !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
            didWarnAboutMaps = true;
          }

          // First, validate keys.
          // We'll get a different iterator later for the main pass.
          var _newChildren = iteratorFn.call(newChildrenIterable);
          if (_newChildren) {
            var knownKeys = null;
            var _step = _newChildren.next();
            for (; !_step.done; _step = _newChildren.next()) {
              var child = _step.value;
              knownKeys = warnOnInvalidKey(child, knownKeys);
            }
          }
        }

        var newChildren = iteratorFn.call(newChildrenIterable);
        !(newChildren != null) ? invariant(false, 'An iterable object provided no iterator.') : void 0;

        var resultingFirstChild = null;
        var previousNewFiber = null;

        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;

        var step = newChildren.next();
        for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }
          var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
          if (newFiber === null) {
            // TODO: This breaks on empty slots like null children. That's
            // unfortunate because it triggers the slow path all the time. We need
            // a better way to communicate whether this was a miss or null,
            // boolean, undefined, etc.
            if (!oldFiber) {
              oldFiber = nextOldFiber;
            }
            break;
          }
          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              // We matched the slot, but we didn't reuse the existing fiber, so we
              // need to delete the existing child.
              deleteChild(returnFiber, oldFiber);
            }
          }
          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
          if (previousNewFiber === null) {
            // TODO: Move out of the loop. This only happens for the first run.
            resultingFirstChild = newFiber;
          } else {
            // TODO: Defer siblings if we're not at the right index for this slot.
            // I.e. if we had null values before, then we want to defer this
            // for each null value. However, we also don't want to call updateSlot
            // with the previous one.
            previousNewFiber.sibling = newFiber;
          }
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }

        if (step.done) {
          // We've reached the end of the new children. We can delete the rest.
          deleteRemainingChildren(returnFiber, oldFiber);
          return resultingFirstChild;
        }

        if (oldFiber === null) {
          // If we don't have any more existing children we can choose a fast path
          // since the rest will all be insertions.
          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
            if (_newFiber3 === null) {
              continue;
            }
            lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              // TODO: Move out of the loop. This only happens for the first run.
              resultingFirstChild = _newFiber3;
            } else {
              previousNewFiber.sibling = _newFiber3;
            }
            previousNewFiber = _newFiber3;
          }
          return resultingFirstChild;
        }

        // Add all children to a key map for quick lookups.
        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

        // Keep scanning and use the map to restore deleted items as moves.
        for (; !step.done; newIdx++, step = newChildren.next()) {
          var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
          if (_newFiber4 !== null) {
            if (shouldTrackSideEffects) {
              if (_newFiber4.alternate !== null) {
                // The new fiber is a work in progress, but if there exists a
                // current, that means that we reused the fiber. We need to delete
                // it from the child list so that we don't add it to the deletion
                // list.
                existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
              }
            }
            lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber4;
            } else {
              previousNewFiber.sibling = _newFiber4;
            }
            previousNewFiber = _newFiber4;
          }
        }

        if (shouldTrackSideEffects) {
          // Any existing children that weren't consumed above were deleted. We need
          // to add them to the deletion list.
          existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        }

        return resultingFirstChild;
      }

      function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
        // There's no need to check for keys on text nodes since we don't have a
        // way to define them.
        if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
          // We already have an existing node so let's just update it and delete
          // the rest.
          deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
          var existing = useFiber(currentFirstChild, textContent, expirationTime);
          existing.return = returnFiber;
          return existing;
        }
        // The existing first child is not a text node so we need to create one
        // and delete the existing ones.
        deleteRemainingChildren(returnFiber, currentFirstChild);
        var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
        created.return = returnFiber;
        return created;
      }

      function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
        var key = element.key;
        var child = currentFirstChild;
        while (child !== null) {
          // TODO: If key === null and child.key === null, then this only applies to
          // the first item in the list.
          if (child.key === key) {
            if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.elementType === element.type) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
              existing.ref = coerceRef(returnFiber, child, element);
              existing.return = returnFiber;
              {
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
              }
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          } else {
            deleteChild(returnFiber, child);
          }
          child = child.sibling;
        }

        if (element.type === REACT_FRAGMENT_TYPE) {
          var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
          created.return = returnFiber;
          return created;
        } else {
          var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
          _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
          _created4.return = returnFiber;
          return _created4;
        }
      }

      function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
        var key = portal.key;
        var child = currentFirstChild;
        while (child !== null) {
          // TODO: If key === null and child.key === null, then this only applies to
          // the first item in the list.
          if (child.key === key) {
            if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, portal.children || [], expirationTime);
              existing.return = returnFiber;
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          } else {
            deleteChild(returnFiber, child);
          }
          child = child.sibling;
        }

        var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
        created.return = returnFiber;
        return created;
      }

      // This API will tag the children with the side-effect of the reconciliation
      // itself. They will be added to the side-effect list as we pass through the
      // children and the parent.
      function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
        // This function is not recursive.
        // If the top level item is an array, we treat it as a set of children,
        // not as a fragment. Nested arrays on the other hand will be treated as
        // fragment nodes. Recursion happens at the normal flow.

        // Handle top level unkeyed fragments as if they were arrays.
        // This leads to an ambiguity between <>{[...]}</> and <>...</>.
        // We treat the ambiguous cases above the same.
        var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
        if (isUnkeyedTopLevelFragment) {
          newChild = newChild.props.children;
        }

        // Handle object types
        var isObject = typeof newChild === 'object' && newChild !== null;

        if (isObject) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));
            case REACT_PORTAL_TYPE:
              return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
          }
        }

        if (typeof newChild === 'string' || typeof newChild === 'number') {
          return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
        }

        if (isArray(newChild)) {
          return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
        }

        if (getIteratorFn(newChild)) {
          return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
        }

        if (isObject) {
          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }
        if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
          // If the new child is undefined, and the return fiber is a composite
          // component, throw an error. If Fiber return types are disabled,
          // we already threw above.
          switch (returnFiber.tag) {
            case ClassComponent:
              {
                {
                  var instance = returnFiber.stateNode;
                  if (instance.render._isMockFunction) {
                    // We allow auto-mocks to proceed as if they're returning null.
                    break;
                  }
                }
              }
            // Intentionally fall through to the next case, which handles both
            // functions and classes
            // eslint-disable-next-lined no-fallthrough
            case FunctionComponent:
              {
                var Component = returnFiber.type;
                invariant(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');
              }
          }
        }

        // Remaining cases are all treated as empty.
        return deleteRemainingChildren(returnFiber, currentFirstChild);
      }

      return reconcileChildFibers;
    }

    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);

    function cloneChildFibers(current$$1, workInProgress) {
      !(current$$1 === null || workInProgress.child === current$$1.child) ? invariant(false, 'Resuming work not yet implemented.') : void 0;

      if (workInProgress.child === null) {
        return;
      }

      var currentChild = workInProgress.child;
      var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
      workInProgress.child = newChild;

      newChild.return = workInProgress;
      while (currentChild.sibling !== null) {
        currentChild = currentChild.sibling;
        newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
        newChild.return = workInProgress;
      }
      newChild.sibling = null;
    }

    // The deepest Fiber on the stack involved in a hydration context.
    // This may have been an insertion or a hydration.
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false;

    function enterHydrationState(fiber) {

      var parentInstance = fiber.stateNode.containerInfo;
      nextHydratableInstance = getFirstHydratableChild(parentInstance);
      hydrationParentFiber = fiber;
      isHydrating = true;
      return true;
    }

    function deleteHydratableInstance(returnFiber, instance) {
      {
        switch (returnFiber.tag) {
          case HostRoot:
            didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
            break;
          case HostComponent:
            didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
            break;
        }
      }

      var childToDelete = createFiberFromHostInstanceForDeletion();
      childToDelete.stateNode = instance;
      childToDelete.return = returnFiber;
      childToDelete.effectTag = Deletion;

      // This might seem like it belongs on progressedFirstDeletion. However,
      // these children are not part of the reconciliation list of children.
      // Even if we abort and rereconcile the children, that will try to hydrate
      // again and the nodes are still in the host tree so these will be
      // recreated.
      if (returnFiber.lastEffect !== null) {
        returnFiber.lastEffect.nextEffect = childToDelete;
        returnFiber.lastEffect = childToDelete;
      } else {
        returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
      }
    }

    function insertNonHydratedInstance(returnFiber, fiber) {
      fiber.effectTag |= Placement;
      {
        switch (returnFiber.tag) {
          case HostRoot:
            {
              var parentContainer = returnFiber.stateNode.containerInfo;
              switch (fiber.tag) {
                case HostComponent:
                  var type = fiber.type;
                  var props = fiber.pendingProps;
                  didNotFindHydratableContainerInstance(parentContainer, type, props);
                  break;
                case HostText:
                  var text = fiber.pendingProps;
                  didNotFindHydratableContainerTextInstance(parentContainer, text);
                  break;
              }
              break;
            }
          case HostComponent:
            {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              switch (fiber.tag) {
                case HostComponent:
                  var _type = fiber.type;
                  var _props = fiber.pendingProps;
                  didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
                  break;
                case HostText:
                  var _text = fiber.pendingProps;
                  didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                  break;
              }
              break;
            }
          default:
            return;
        }
      }
    }

    function tryHydrate(fiber, nextInstance) {
      switch (fiber.tag) {
        case HostComponent:
          {
            var type = fiber.type;
            var props = fiber.pendingProps;
            var instance = canHydrateInstance(nextInstance, type, props);
            if (instance !== null) {
              fiber.stateNode = instance;
              return true;
            }
            return false;
          }
        case HostText:
          {
            var text = fiber.pendingProps;
            var textInstance = canHydrateTextInstance(nextInstance, text);
            if (textInstance !== null) {
              fiber.stateNode = textInstance;
              return true;
            }
            return false;
          }
        default:
          return false;
      }
    }

    function tryToClaimNextHydratableInstance(fiber) {
      if (!isHydrating) {
        return;
      }
      var nextInstance = nextHydratableInstance;
      if (!nextInstance) {
        // Nothing to hydrate. Make it an insertion.
        insertNonHydratedInstance(hydrationParentFiber, fiber);
        isHydrating = false;
        hydrationParentFiber = fiber;
        return;
      }
      var firstAttemptedInstance = nextInstance;
      if (!tryHydrate(fiber, nextInstance)) {
        // If we can't hydrate this instance let's try the next one.
        // We use this as a heuristic. It's based on intuition and not data so it
        // might be flawed or unnecessary.
        nextInstance = getNextHydratableSibling(firstAttemptedInstance);
        if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
          // Nothing to hydrate. Make it an insertion.
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        }
        // We matched the next one, we'll now assume that the first one was
        // superfluous and we'll delete it. Since we can't eagerly delete it
        // we'll have to schedule a deletion. To do that, this node needs a dummy
        // fiber associated with it.
        deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
      }
      hydrationParentFiber = fiber;
      nextHydratableInstance = getFirstHydratableChild(nextInstance);
    }

    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {

      var instance = fiber.stateNode;
      var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
      // TODO: Type this specific to this type of component.
      fiber.updateQueue = updatePayload;
      // If the update payload indicates that there is a change or if there
      // is a new ref we mark this as an update.
      if (updatePayload !== null) {
        return true;
      }
      return false;
    }

    function prepareToHydrateHostTextInstance(fiber) {

      var textInstance = fiber.stateNode;
      var textContent = fiber.memoizedProps;
      var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
      {
        if (shouldUpdate) {
          // We assume that prepareToHydrateHostTextInstance is called in a context where the
          // hydration parent is the parent host component of this host text.
          var returnFiber = hydrationParentFiber;
          if (returnFiber !== null) {
            switch (returnFiber.tag) {
              case HostRoot:
                {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                  break;
                }
              case HostComponent:
                {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                  break;
                }
            }
          }
        }
      }
      return shouldUpdate;
    }

    function popToNextHostParent(fiber) {
      var parent = fiber.return;
      while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot) {
        parent = parent.return;
      }
      hydrationParentFiber = parent;
    }

    function popHydrationState(fiber) {
      if (fiber !== hydrationParentFiber) {
        // We're deeper than the current hydration context, inside an inserted
        // tree.
        return false;
      }
      if (!isHydrating) {
        // If we're not currently hydrating but we're in a hydration context, then
        // we were an insertion and now need to pop up reenter hydration of our
        // siblings.
        popToNextHostParent(fiber);
        isHydrating = true;
        return false;
      }

      var type = fiber.type;

      // If we have any remaining hydratable nodes, we need to delete them now.
      // We only do this deeper than head and body since they tend to have random
      // other nodes in them. We also ignore components with pure text content in
      // side of them.
      // TODO: Better heuristic.
      if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
        var nextInstance = nextHydratableInstance;
        while (nextInstance) {
          deleteHydratableInstance(fiber, nextInstance);
          nextInstance = getNextHydratableSibling(nextInstance);
        }
      }

      popToNextHostParent(fiber);
      nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
      return true;
    }

    function resetHydrationState() {

      hydrationParentFiber = null;
      nextHydratableInstance = null;
      isHydrating = false;
    }

    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;

    var didWarnAboutBadClass = void 0;
    var didWarnAboutContextTypeOnFunctionComponent = void 0;
    var didWarnAboutGetDerivedStateOnFunctionComponent = void 0;
    var didWarnAboutFunctionRefs = void 0;

    {
      didWarnAboutBadClass = {};
      didWarnAboutContextTypeOnFunctionComponent = {};
      didWarnAboutGetDerivedStateOnFunctionComponent = {};
      didWarnAboutFunctionRefs = {};
    }

    function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
      if (current$$1 === null) {
        // If this is a fresh new component that hasn't been rendered yet, we
        // won't update its child set by applying minimal side-effects. Instead,
        // we will add them all to the child before it gets rendered. That means
        // we can optimize this reconciliation pass by not tracking side-effects.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      } else {
        // If the current child is the same as the work in progress, it means that
        // we haven't yet started any work on these children. Therefore, we use
        // the clone algorithm to create a copy of all the current children.

        // If we had any progressed work already, that is invalid at this point so
        // let's throw it out.
        workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
      }
    }

    function forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime) {
      // This function is fork of reconcileChildren. It's used in cases where we
      // want to reconcile without matching against the existing set. This has the
      // effect of all current children being unmounted; even if the type and key
      // are the same, the old child is unmounted and a new child is created.
      //
      // To do this, we're going to go through the reconcile algorithm twice. In
      // the first pass, we schedule a deletion for all the current children by
      // passing null.
      workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime);
      // In the second pass, we mount the new children. The trick here is that we
      // pass null in place of where we usually pass the current child set. This has
      // the effect of remounting all children regardless of whether their their
      // identity matches.
      workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    }

    function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
      var render = Component.render;
      var ref = workInProgress.ref;

      // The rest is a fork of updateFunctionComponent
      var nextChildren = void 0;
      prepareToReadContext(workInProgress, renderExpirationTime);
      prepareToUseHooks(current$$1, workInProgress, renderExpirationTime);
      {
        ReactCurrentOwner$3.current = workInProgress;
        setCurrentPhase('render');
        nextChildren = render(nextProps, ref);
        setCurrentPhase(null);
      }
      nextChildren = finishHooks(render, nextProps, nextChildren, ref);

      // React DevTools reads this flag.
      workInProgress.effectTag |= PerformedWork;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
      if (current$$1 === null) {
        var type = Component.type;
        if (isSimpleFunctionComponent(type) && Component.compare === null) {
          // If this is a plain function component without default props,
          // and with only the default shallow comparison, we upgrade it
          // to a SimpleMemoComponent to allow fast path updates.
          workInProgress.tag = SimpleMemoComponent;
          workInProgress.type = type;
          return updateSimpleMemoComponent(current$$1, workInProgress, type, nextProps, updateExpirationTime, renderExpirationTime);
        }
        var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
        child.ref = workInProgress.ref;
        child.return = workInProgress;
        workInProgress.child = child;
        return child;
      }
      var currentChild = current$$1.child; // This is always exactly one child
      if (updateExpirationTime < renderExpirationTime) {
        // This will be the props with resolved defaultProps,
        // unlike current.memoizedProps which will be the unresolved ones.
        var prevProps = currentChild.memoizedProps;
        // Default to shallow comparison
        var compare = Component.compare;
        compare = compare !== null ? compare : shallowEqual;
        if (compare(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
      }
      // React DevTools reads this flag.
      workInProgress.effectTag |= PerformedWork;
      var newChild = createWorkInProgress(currentChild, nextProps, renderExpirationTime);
      newChild.ref = workInProgress.ref;
      newChild.return = workInProgress;
      workInProgress.child = newChild;
      return newChild;
    }

    function updateSimpleMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
      if (current$$1 !== null && updateExpirationTime < renderExpirationTime) {
        var prevProps = current$$1.memoizedProps;
        if (shallowEqual(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
      }
      return updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
    }

    function updateFragment(current$$1, workInProgress, renderExpirationTime) {
      var nextChildren = workInProgress.pendingProps;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateMode(current$$1, workInProgress, renderExpirationTime) {
      var nextChildren = workInProgress.pendingProps.children;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateProfiler(current$$1, workInProgress, renderExpirationTime) {
      {
        workInProgress.effectTag |= Update;
      }
      var nextProps = workInProgress.pendingProps;
      var nextChildren = nextProps.children;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function markRef(current$$1, workInProgress) {
      var ref = workInProgress.ref;
      if (current$$1 === null && ref !== null || current$$1 !== null && current$$1.ref !== ref) {
        // Schedule a Ref effect
        workInProgress.effectTag |= Ref;
      }
    }

    function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
      var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
      var context = getMaskedContext(workInProgress, unmaskedContext);

      var nextChildren = void 0;
      prepareToReadContext(workInProgress, renderExpirationTime);
      prepareToUseHooks(current$$1, workInProgress, renderExpirationTime);
      {
        ReactCurrentOwner$3.current = workInProgress;
        setCurrentPhase('render');
        nextChildren = Component(nextProps, context);
        setCurrentPhase(null);
      }
      nextChildren = finishHooks(Component, nextProps, nextChildren, context);

      // React DevTools reads this flag.
      workInProgress.effectTag |= PerformedWork;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
      // Push context providers early to prevent context stack mismatches.
      // During mounting we don't know the child context yet as the instance doesn't exist.
      // We will invalidate the child context in finishClassComponent() right after rendering.
      var hasContext = void 0;
      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress);
      } else {
        hasContext = false;
      }
      prepareToReadContext(workInProgress, renderExpirationTime);

      var instance = workInProgress.stateNode;
      var shouldUpdate = void 0;
      if (instance === null) {
        if (current$$1 !== null) {
          // An class component without an instance only mounts if it suspended
          // inside a non- concurrent tree, in an inconsistent state. We want to
          // tree it like a new mount, even though an empty version of it already
          // committed. Disconnect the alternate pointers.
          current$$1.alternate = null;
          workInProgress.alternate = null;
          // Since this is conceptually a new fiber, schedule a Placement effect
          workInProgress.effectTag |= Placement;
        }
        // In the initial pass we might need to construct the instance.
        constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
        mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
        shouldUpdate = true;
      } else if (current$$1 === null) {
        // In a resume, we'll already have an instance we can reuse.
        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
      } else {
        shouldUpdate = updateClassInstance(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
      }
      return finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);
    }

    function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
      // Refs should update even if shouldComponentUpdate returns false
      markRef(current$$1, workInProgress);

      var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

      if (!shouldUpdate && !didCaptureError) {
        // Context providers should defer to sCU for rendering
        if (hasContext) {
          invalidateContextProvider(workInProgress, Component, false);
        }

        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      }

      var instance = workInProgress.stateNode;

      // Rerender
      ReactCurrentOwner$3.current = workInProgress;
      var nextChildren = void 0;
      if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
        // If we captured an error, but getDerivedStateFrom catch is not defined,
        // unmount all the children. componentDidCatch will schedule an update to
        // re-render a fallback. This is temporary until we migrate everyone to
        // the new API.
        // TODO: Warn in a future release.
        nextChildren = null;

        {
          stopProfilerTimerIfRunning(workInProgress);
        }
      } else {
        {
          setCurrentPhase('render');
          nextChildren = instance.render();
          if (workInProgress.mode & StrictMode) {
            instance.render();
          }
          setCurrentPhase(null);
        }
      }

      // React DevTools reads this flag.
      workInProgress.effectTag |= PerformedWork;
      if (current$$1 !== null && didCaptureError) {
        // If we're recovering from an error, reconcile without reusing any of
        // the existing children. Conceptually, the normal children and the children
        // that are shown on error are two different sets, so we shouldn't reuse
        // normal children even if their identities match.
        forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime);
      } else {
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      }

      // Memoize state using the values we just used to render.
      // TODO: Restructure so we never read values from the instance.
      workInProgress.memoizedState = instance.state;

      // The context might have changed so we need to recalculate it.
      if (hasContext) {
        invalidateContextProvider(workInProgress, Component, true);
      }

      return workInProgress.child;
    }

    function pushHostRootContext(workInProgress) {
      var root = workInProgress.stateNode;
      if (root.pendingContext) {
        pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
      } else if (root.context) {
        // Should always be set
        pushTopLevelContextObject(workInProgress, root.context, false);
      }
      pushHostContainer(workInProgress, root.containerInfo);
    }

    function updateHostRoot(current$$1, workInProgress, renderExpirationTime) {
      pushHostRootContext(workInProgress);
      var updateQueue = workInProgress.updateQueue;
      !(updateQueue !== null) ? invariant(false, 'If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      var nextProps = workInProgress.pendingProps;
      var prevState = workInProgress.memoizedState;
      var prevChildren = prevState !== null ? prevState.element : null;
      processUpdateQueue(workInProgress, updateQueue, nextProps, null, renderExpirationTime);
      var nextState = workInProgress.memoizedState;
      // Caution: React DevTools currently depends on this property
      // being called "element".
      var nextChildren = nextState.element;
      if (nextChildren === prevChildren) {
        // If the state is the same as before, that's a bailout because we had
        // no work that expires at this time.
        resetHydrationState();
        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      }
      var root = workInProgress.stateNode;
      if ((current$$1 === null || current$$1.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
        // If we don't have any current children this might be the first pass.
        // We always try to hydrate. If this isn't a hydration pass there won't
        // be any children to hydrate which is effectively the same thing as
        // not hydrating.

        // This is a bit of a hack. We track the host root as a placement to
        // know that we're currently in a mounting state. That way isMounted
        // works as expected. We must reset this before committing.
        // TODO: Delete this when we delete isMounted and findDOMNode.
        workInProgress.effectTag |= Placement;

        // Ensure that children mount into this root without tracking
        // side-effects. This ensures that we don't store Placement effects on
        // nodes that will be hydrated.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      } else {
        // Otherwise reset hydration state in case we aborted and resumed another
        // root.
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
        resetHydrationState();
      }
      return workInProgress.child;
    }

    function updateHostComponent(current$$1, workInProgress, renderExpirationTime) {
      pushHostContext(workInProgress);

      if (current$$1 === null) {
        tryToClaimNextHydratableInstance(workInProgress);
      }

      var type = workInProgress.type;
      var nextProps = workInProgress.pendingProps;
      var prevProps = current$$1 !== null ? current$$1.memoizedProps : null;

      var nextChildren = nextProps.children;
      var isDirectTextChild = shouldSetTextContent(type, nextProps);

      if (isDirectTextChild) {
        // We special case a direct text child of a host node. This is a common
        // case. We won't handle it as a reified child. We will instead handle
        // this in the host environment that also have access to this prop. That
        // avoids allocating another HostText fiber and traversing it.
        nextChildren = null;
      } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
        // If we're switching from a direct text child to a normal child, or to
        // empty, we need to schedule the text content to be reset.
        workInProgress.effectTag |= ContentReset;
      }

      markRef(current$$1, workInProgress);

      // Check the host config to see if the children are offscreen/hidden.
      if (renderExpirationTime !== Never && workInProgress.mode & ConcurrentMode && shouldDeprioritizeSubtree(type, nextProps)) {
        // Schedule this fiber to re-render at offscreen priority. Then bailout.
        workInProgress.expirationTime = Never;
        return null;
      }

      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateHostText(current$$1, workInProgress) {
      if (current$$1 === null) {
        tryToClaimNextHydratableInstance(workInProgress);
      }
      // Nothing to do here. This is terminal. We'll do the completion step
      // immediately after.
      return null;
    }

    function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
      if (_current !== null) {
        // An lazy component only mounts if it suspended inside a non-
        // concurrent tree, in an inconsistent state. We want to treat it like
        // a new mount, even though an empty version of it already committed.
        // Disconnect the alternate pointers.
        _current.alternate = null;
        workInProgress.alternate = null;
        // Since this is conceptually a new fiber, schedule a Placement effect
        workInProgress.effectTag |= Placement;
      }

      var props = workInProgress.pendingProps;
      // We can't start a User Timing measurement with correct label yet.
      // Cancel and resume right after we know the tag.
      cancelWorkTimer(workInProgress);
      var Component = readLazyComponentType(elementType);
      // Store the unwrapped component in the type.
      workInProgress.type = Component;
      var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
      startWorkTimer(workInProgress);
      var resolvedProps = resolveDefaultProps(Component, props);
      var child = void 0;
      switch (resolvedTag) {
        case FunctionComponent:
          {
            child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
            break;
          }
        case ClassComponent:
          {
            child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
            break;
          }
        case ForwardRef:
          {
            child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
            break;
          }
        case MemoComponent:
          {
            child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
            updateExpirationTime, renderExpirationTime);
            break;
          }
        default:
          {
            // This message intentionally doesn't mention ForwardRef or MemoComponent
            // because the fact that it's a separate type of work is an
            // implementation detail.
            invariant(false, 'Element type is invalid. Received a promise that resolves to: %s. Promise elements must resolve to a class or function.', Component);
          }
      }
      return child;
    }

    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
      if (_current !== null) {
        // An incomplete component only mounts if it suspended inside a non-
        // concurrent tree, in an inconsistent state. We want to treat it like
        // a new mount, even though an empty version of it already committed.
        // Disconnect the alternate pointers.
        _current.alternate = null;
        workInProgress.alternate = null;
        // Since this is conceptually a new fiber, schedule a Placement effect
        workInProgress.effectTag |= Placement;
      }

      // Promote the fiber to a class and try rendering again.
      workInProgress.tag = ClassComponent;

      // The rest of this function is a fork of `updateClassComponent`

      // Push context providers early to prevent context stack mismatches.
      // During mounting we don't know the child context yet as the instance doesn't exist.
      // We will invalidate the child context in finishClassComponent() right after rendering.
      var hasContext = void 0;
      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress);
      } else {
        hasContext = false;
      }
      prepareToReadContext(workInProgress, renderExpirationTime);

      constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
      mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);

      return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
    }

    function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
      if (_current !== null) {
        // An indeterminate component only mounts if it suspended inside a non-
        // concurrent tree, in an inconsistent state. We want to treat it like
        // a new mount, even though an empty version of it already committed.
        // Disconnect the alternate pointers.
        _current.alternate = null;
        workInProgress.alternate = null;
        // Since this is conceptually a new fiber, schedule a Placement effect
        workInProgress.effectTag |= Placement;
      }

      var props = workInProgress.pendingProps;
      var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
      var context = getMaskedContext(workInProgress, unmaskedContext);

      prepareToReadContext(workInProgress, renderExpirationTime);
      prepareToUseHooks(null, workInProgress, renderExpirationTime);

      var value = void 0;

      {
        if (Component.prototype && typeof Component.prototype.render === 'function') {
          var componentName = getComponentName(Component) || 'Unknown';

          if (!didWarnAboutBadClass[componentName]) {
            warningWithoutStack$1(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
            didWarnAboutBadClass[componentName] = true;
          }
        }

        if (workInProgress.mode & StrictMode) {
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        }

        ReactCurrentOwner$3.current = workInProgress;
        value = Component(props, context);
      }
      // React DevTools reads this flag.
      workInProgress.effectTag |= PerformedWork;

      if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
        // Proceed under the assumption that this is a class instance
        workInProgress.tag = ClassComponent;

        // Throw out any hooks that were used.
        resetHooks();

        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext = false;
        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress);
        } else {
          hasContext = false;
        }

        workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;

        var getDerivedStateFromProps = Component.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === 'function') {
          applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
        }

        adoptClassInstance(workInProgress, value);
        mountClassInstance(workInProgress, Component, props, renderExpirationTime);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
      } else {
        // Proceed under the assumption that this is a function component
        workInProgress.tag = FunctionComponent;
        value = finishHooks(Component, props, value, context);
        {
          if (Component) {
            !!Component.childContextTypes ? warningWithoutStack$1(false, '%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component') : void 0;
          }
          if (workInProgress.ref !== null) {
            var info = '';
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              info += '\n\nCheck the render method of `' + ownerName + '`.';
            }

            var warningKey = ownerName || workInProgress._debugID || '';
            var debugSource = workInProgress._debugSource;
            if (debugSource) {
              warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
            }
            if (!didWarnAboutFunctionRefs[warningKey]) {
              didWarnAboutFunctionRefs[warningKey] = true;
              warning$1(false, 'Function components cannot be given refs. ' + 'Attempts to access this ref will fail.%s', info);
            }
          }

          if (typeof Component.getDerivedStateFromProps === 'function') {
            var _componentName = getComponentName(Component) || 'Unknown';

            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName]) {
              warningWithoutStack$1(false, '%s: Function components do not support getDerivedStateFromProps.', _componentName);
              didWarnAboutGetDerivedStateOnFunctionComponent[_componentName] = true;
            }
          }

          if (typeof Component.contextType === 'object' && Component.contextType !== null) {
            var _componentName2 = getComponentName(Component) || 'Unknown';

            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName2]) {
              warningWithoutStack$1(false, '%s: Function components do not support contextType.', _componentName2);
              didWarnAboutContextTypeOnFunctionComponent[_componentName2] = true;
            }
          }
        }
        reconcileChildren(null, workInProgress, value, renderExpirationTime);
        return workInProgress.child;
      }
    }

    function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
      var mode = workInProgress.mode;
      var nextProps = workInProgress.pendingProps;

      // We should attempt to render the primary children unless this boundary
      // already suspended during this render (`alreadyCaptured` is true).
      var nextState = workInProgress.memoizedState;

      var nextDidTimeout = void 0;
      if ((workInProgress.effectTag & DidCapture) === NoEffect) {
        // This is the first attempt.
        nextState = null;
        nextDidTimeout = false;
      } else {
        // Something in this boundary's subtree already suspended. Switch to
        // rendering the fallback children.
        nextState = {
          timedOutAt: nextState !== null ? nextState.timedOutAt : NoWork
        };
        nextDidTimeout = true;
        workInProgress.effectTag &= ~DidCapture;
      }

      // This next part is a bit confusing. If the children timeout, we switch to
      // showing the fallback children in place of the "primary" children.
      // However, we don't want to delete the primary children because then their
      // state will be lost (both the React state and the host state, e.g.
      // uncontrolled form inputs). Instead we keep them mounted and hide them.
      // Both the fallback children AND the primary children are rendered at the
      // same time. Once the primary children are un-suspended, we can delete
      // the fallback children — don't need to preserve their state.
      //
      // The two sets of children are siblings in the host environment, but
      // semantically, for purposes of reconciliation, they are two separate sets.
      // So we store them using two fragment fibers.
      //
      // However, we want to avoid allocating extra fibers for every placeholder.
      // They're only necessary when the children time out, because that's the
      // only time when both sets are mounted.
      //
      // So, the extra fragment fibers are only used if the children time out.
      // Otherwise, we render the primary children directly. This requires some
      // custom reconciliation logic to preserve the state of the primary
      // children. It's essentially a very basic form of re-parenting.

      // `child` points to the child fiber. In the normal case, this is the first
      // fiber of the primary children set. In the timed-out case, it's a
      // a fragment fiber containing the primary children.
      var child = void 0;
      // `next` points to the next fiber React should render. In the normal case,
      // it's the same as `child`: the first fiber of the primary children set.
      // In the timed-out case, it's a fragment fiber containing the *fallback*
      // children -- we skip over the primary children entirely.
      var next = void 0;
      if (current$$1 === null) {
        // This is the initial mount. This branch is pretty simple because there's
        // no previous state that needs to be preserved.
        if (nextDidTimeout) {
          // Mount separate fragments for primary and fallback children.
          var nextFallbackChildren = nextProps.fallback;
          var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);

          if ((workInProgress.mode & ConcurrentMode) === NoContext) {
            // Outside of concurrent mode, we commit the effects from the
            var progressedState = workInProgress.memoizedState;
            var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
            primaryChildFragment.child = progressedPrimaryChild;
          }

          var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
          primaryChildFragment.sibling = fallbackChildFragment;
          child = primaryChildFragment;
          // Skip the primary children, and continue working on the
          // fallback children.
          next = fallbackChildFragment;
          child.return = next.return = workInProgress;
        } else {
          // Mount the primary children without an intermediate fragment fiber.
          var nextPrimaryChildren = nextProps.children;
          child = next = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
        }
      } else {
        // This is an update. This branch is more complicated because we need to
        // ensure the state of the primary children is preserved.
        var prevState = current$$1.memoizedState;
        var prevDidTimeout = prevState !== null;
        if (prevDidTimeout) {
          // The current tree already timed out. That means each child set is
          var currentPrimaryChildFragment = current$$1.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          if (nextDidTimeout) {
            // Still timed out. Reuse the current primary children by cloning
            // its fragment. We're going to skip over these entirely.
            var _nextFallbackChildren = nextProps.fallback;
            var _primaryChildFragment = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps, NoWork);

            if ((workInProgress.mode & ConcurrentMode) === NoContext) {
              // Outside of concurrent mode, we commit the effects from the
              var _progressedState = workInProgress.memoizedState;
              var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;
              if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
                _primaryChildFragment.child = _progressedPrimaryChild;
              }
            }

            // Because primaryChildFragment is a new fiber that we're inserting as the
            // parent of a new tree, we need to set its treeBaseDuration.
            if (workInProgress.mode & ProfileMode) {
              // treeBaseDuration is the sum of all the child tree base durations.
              var treeBaseDuration = 0;
              var hiddenChild = _primaryChildFragment.child;
              while (hiddenChild !== null) {
                treeBaseDuration += hiddenChild.treeBaseDuration;
                hiddenChild = hiddenChild.sibling;
              }
              _primaryChildFragment.treeBaseDuration = treeBaseDuration;
            }

            // Clone the fallback child fragment, too. These we'll continue
            // working on.
            var _fallbackChildFragment = _primaryChildFragment.sibling = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren, currentFallbackChildFragment.expirationTime);
            child = _primaryChildFragment;
            _primaryChildFragment.childExpirationTime = NoWork;
            // Skip the primary children, and continue working on the
            // fallback children.
            next = _fallbackChildFragment;
            child.return = next.return = workInProgress;
          } else {
            // No longer suspended. Switch back to showing the primary children,
            // and remove the intermediate fragment fiber.
            var _nextPrimaryChildren = nextProps.children;
            var currentPrimaryChild = currentPrimaryChildFragment.child;
            var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime);

            // If this render doesn't suspend, we need to delete the fallback
            // children. Wait until the complete phase, after we've confirmed the
            // fallback is no longer needed.
            // TODO: Would it be better to store the fallback fragment on
            // the stateNode?

            // Continue rendering the children, like we normally do.
            child = next = primaryChild;
          }
        } else {
          // The current tree has not already timed out. That means the primary
          // children are not wrapped in a fragment fiber.
          var _currentPrimaryChild = current$$1.child;
          if (nextDidTimeout) {
            // Timed out. Wrap the children in a fragment fiber to keep them
            // separate from the fallback children.
            var _nextFallbackChildren2 = nextProps.fallback;
            var _primaryChildFragment2 = createFiberFromFragment(
            // It shouldn't matter what the pending props are because we aren't
            // going to render this fragment.
            null, mode, NoWork, null);
            _primaryChildFragment2.child = _currentPrimaryChild;

            // Even though we're creating a new fiber, there are no new children,
            // because we're reusing an already mounted tree. So we don't need to
            // schedule a placement.
            // primaryChildFragment.effectTag |= Placement;

            if ((workInProgress.mode & ConcurrentMode) === NoContext) {
              // Outside of concurrent mode, we commit the effects from the
              var _progressedState2 = workInProgress.memoizedState;
              var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;
              _primaryChildFragment2.child = _progressedPrimaryChild2;
            }

            // Because primaryChildFragment is a new fiber that we're inserting as the
            // parent of a new tree, we need to set its treeBaseDuration.
            if (workInProgress.mode & ProfileMode) {
              // treeBaseDuration is the sum of all the child tree base durations.
              var _treeBaseDuration = 0;
              var _hiddenChild = _primaryChildFragment2.child;
              while (_hiddenChild !== null) {
                _treeBaseDuration += _hiddenChild.treeBaseDuration;
                _hiddenChild = _hiddenChild.sibling;
              }
              _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
            }

            // Create a fragment from the fallback children, too.
            var _fallbackChildFragment2 = _primaryChildFragment2.sibling = createFiberFromFragment(_nextFallbackChildren2, mode, renderExpirationTime, null);
            _fallbackChildFragment2.effectTag |= Placement;
            child = _primaryChildFragment2;
            _primaryChildFragment2.childExpirationTime = NoWork;
            // Skip the primary children, and continue working on the
            // fallback children.
            next = _fallbackChildFragment2;
            child.return = next.return = workInProgress;
          } else {
            // Still haven't timed out.  Continue rendering the children, like we
            // normally do.
            var _nextPrimaryChildren2 = nextProps.children;
            next = child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
          }
        }
      }

      workInProgress.memoizedState = nextState;
      workInProgress.child = child;
      return next;
    }

    function updatePortalComponent(current$$1, workInProgress, renderExpirationTime) {
      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
      var nextChildren = workInProgress.pendingProps;
      if (current$$1 === null) {
        // Portals are special because we don't append the children during mount
        // but at commit. Therefore we need to track insertions which the normal
        // flow doesn't do during mount. This doesn't happen at the root because
        // the root always starts with a "current" with a null child.
        // TODO: Consider unifying this with how the root works.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      } else {
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      }
      return workInProgress.child;
    }

    function updateContextProvider(current$$1, workInProgress, renderExpirationTime) {
      var providerType = workInProgress.type;
      var context = providerType._context;

      var newProps = workInProgress.pendingProps;
      var oldProps = workInProgress.memoizedProps;

      var newValue = newProps.value;

      {
        var providerPropTypes = workInProgress.type.propTypes;

        if (providerPropTypes) {
          checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
        }
      }

      pushProvider(workInProgress, newValue);

      if (oldProps !== null) {
        var oldValue = oldProps.value;
        var changedBits = calculateChangedBits(context, newValue, oldValue);
        if (changedBits === 0) {
          // No change. Bailout early if children are the same.
          if (oldProps.children === newProps.children && !hasContextChanged()) {
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
          }
        } else {
          // The context value changed. Search for matching consumers and schedule
          // them to update.
          propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
        }
      }

      var newChildren = newProps.children;
      reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
      return workInProgress.child;
    }

    var hasWarnedAboutUsingContextAsConsumer = false;

    function updateContextConsumer(current$$1, workInProgress, renderExpirationTime) {
      var context = workInProgress.type;
      // The logic below for Context differs depending on PROD or DEV mode. In
      // DEV mode, we create a separate object for Context.Consumer that acts
      // like a proxy to Context. This proxy object adds unnecessary code in PROD
      // so we use the old behaviour (Context.Consumer references Context) to
      // reduce size and overhead. The separate object references context via
      // a property called "_context", which also gives us the ability to check
      // in DEV mode if this property exists or not and warn if it does not.
      {
        if (context._context === undefined) {
          // This may be because it's a Context (rather than a Consumer).
          // Or it may be because it's older React where they're the same thing.
          // We only want to warn if we're sure it's a new React.
          if (context !== context.Consumer) {
            if (!hasWarnedAboutUsingContextAsConsumer) {
              hasWarnedAboutUsingContextAsConsumer = true;
              warning$1(false, 'Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
            }
          }
        } else {
          context = context._context;
        }
      }
      var newProps = workInProgress.pendingProps;
      var render = newProps.children;

      {
        !(typeof render === 'function') ? warningWithoutStack$1(false, 'A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.') : void 0;
      }

      prepareToReadContext(workInProgress, renderExpirationTime);
      var newValue = readContext(context, newProps.unstable_observedBits);
      var newChildren = void 0;
      {
        ReactCurrentOwner$3.current = workInProgress;
        setCurrentPhase('render');
        newChildren = render(newValue);
        setCurrentPhase(null);
      }

      // React DevTools reads this flag.
      workInProgress.effectTag |= PerformedWork;
      reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
      cancelWorkTimer(workInProgress);

      if (current$$1 !== null) {
        // Reuse previous context list
        workInProgress.firstContextDependency = current$$1.firstContextDependency;
      }

      {
        // Don't update "base" render times for bailouts.
        stopProfilerTimerIfRunning(workInProgress);
      }

      // Check if the children have any pending work.
      var childExpirationTime = workInProgress.childExpirationTime;
      if (childExpirationTime < renderExpirationTime) {
        // The children don't have any work either. We can skip them.
        // TODO: Once we add back resuming, we should check if the children are
        // a work-in-progress set. If so, we need to transfer their effects.
        return null;
      } else {
        // This fiber doesn't have work, but its subtree does. Clone the child
        // fibers and continue.
        cloneChildFibers(current$$1, workInProgress);
        return workInProgress.child;
      }
    }

    function beginWork(current$$1, workInProgress, renderExpirationTime) {
      var updateExpirationTime = workInProgress.expirationTime;

      if (current$$1 !== null) {
        var oldProps = current$$1.memoizedProps;
        var newProps = workInProgress.pendingProps;
        if (oldProps === newProps && !hasContextChanged() && updateExpirationTime < renderExpirationTime) {
          // This fiber does not have any pending work. Bailout without entering
          // the begin phase. There's still some bookkeeping we that needs to be done
          // in this optimized path, mostly pushing stuff onto the stack.
          switch (workInProgress.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress);
              resetHydrationState();
              break;
            case HostComponent:
              pushHostContext(workInProgress);
              break;
            case ClassComponent:
              {
                var Component = workInProgress.type;
                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress);
                }
                break;
              }
            case HostPortal:
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              break;
            case ContextProvider:
              {
                var newValue = workInProgress.memoizedProps.value;
                pushProvider(workInProgress, newValue);
                break;
              }
            case Profiler:
              {
                workInProgress.effectTag |= Update;
              }
              break;
            case SuspenseComponent:
              {
                var state = workInProgress.memoizedState;
                var didTimeout = state !== null;
                if (didTimeout) {
                  // If this boundary is currently timed out, we need to decide
                  // whether to retry the primary children, or to skip over it and
                  // go straight to the fallback. Check the priority of the primary
                  var primaryChildFragment = workInProgress.child;
                  var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;
                  if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
                    // The primary children have pending work. Use the normal path
                    // to attempt to render the primary children again.
                    return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
                  } else {
                    // The primary children do not have pending work with sufficient
                    // priority. Bailout.
                    var child = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
                    if (child !== null) {
                      // The fallback children have pending work. Skip over the
                      // primary children and work on the fallback.
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                }
                break;
              }
          }
          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
      }

      // Before entering the begin phase, clear the expiration time.
      workInProgress.expirationTime = NoWork;

      switch (workInProgress.tag) {
        case IndeterminateComponent:
          {
            var elementType = workInProgress.elementType;
            return mountIndeterminateComponent(current$$1, workInProgress, elementType, renderExpirationTime);
          }
        case LazyComponent:
          {
            var _elementType = workInProgress.elementType;
            return mountLazyComponent(current$$1, workInProgress, _elementType, updateExpirationTime, renderExpirationTime);
          }
        case FunctionComponent:
          {
            var _Component = workInProgress.type;
            var unresolvedProps = workInProgress.pendingProps;
            var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
            return updateFunctionComponent(current$$1, workInProgress, _Component, resolvedProps, renderExpirationTime);
          }
        case ClassComponent:
          {
            var _Component2 = workInProgress.type;
            var _unresolvedProps = workInProgress.pendingProps;
            var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
            return updateClassComponent(current$$1, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
          }
        case HostRoot:
          return updateHostRoot(current$$1, workInProgress, renderExpirationTime);
        case HostComponent:
          return updateHostComponent(current$$1, workInProgress, renderExpirationTime);
        case HostText:
          return updateHostText(current$$1, workInProgress);
        case SuspenseComponent:
          return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
        case HostPortal:
          return updatePortalComponent(current$$1, workInProgress, renderExpirationTime);
        case ForwardRef:
          {
            var type = workInProgress.type;
            var _unresolvedProps2 = workInProgress.pendingProps;
            var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
            return updateForwardRef(current$$1, workInProgress, type, _resolvedProps2, renderExpirationTime);
          }
        case Fragment:
          return updateFragment(current$$1, workInProgress, renderExpirationTime);
        case Mode:
          return updateMode(current$$1, workInProgress, renderExpirationTime);
        case Profiler:
          return updateProfiler(current$$1, workInProgress, renderExpirationTime);
        case ContextProvider:
          return updateContextProvider(current$$1, workInProgress, renderExpirationTime);
        case ContextConsumer:
          return updateContextConsumer(current$$1, workInProgress, renderExpirationTime);
        case MemoComponent:
          {
            var _type = workInProgress.type;
            var _unresolvedProps3 = workInProgress.pendingProps;
            var _resolvedProps3 = resolveDefaultProps(_type.type, _unresolvedProps3);
            return updateMemoComponent(current$$1, workInProgress, _type, _resolvedProps3, updateExpirationTime, renderExpirationTime);
          }
        case SimpleMemoComponent:
          {
            return updateSimpleMemoComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
          }
        case IncompleteClassComponent:
          {
            var _Component3 = workInProgress.type;
            var _unresolvedProps4 = workInProgress.pendingProps;
            var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
            return mountIncompleteClassComponent(current$$1, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
          }
        default:
          invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
      }
    }

    function markUpdate(workInProgress) {
      // Tag the fiber with an update effect. This turns a Placement into
      // a PlacementAndUpdate.
      workInProgress.effectTag |= Update;
    }

    function markRef$1(workInProgress) {
      workInProgress.effectTag |= Ref;
    }

    var appendAllChildren = void 0;
    var updateHostContainer = void 0;
    var updateHostComponent$1 = void 0;
    var updateHostText$1 = void 0;
    {
      // Mutation mode

      appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;
        while (node !== null) {
          if (node.tag === HostComponent || node.tag === HostText) {
            appendInitialChild(parent, node.stateNode);
          } else if (node.tag === HostPortal) ; else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === workInProgress) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress) {
              return;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      };

      updateHostContainer = function (workInProgress) {
        // Noop
      };
      updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
        // If we have an alternate, that means this is an update and we need to
        // schedule a side-effect to do the updates.
        var oldProps = current.memoizedProps;
        if (oldProps === newProps) {
          // In mutation mode, this is sufficient for a bailout because
          // we won't touch this node even if children changed.
          return;
        }

        // If we get updated because one of our children updated, we don't
        // have newProps so we'll have to reuse them.
        // TODO: Split the update API as separate for the props vs. children.
        // Even better would be if children weren't special cased at all tho.
        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext();
        // TODO: Experiencing an error where oldProps is null. Suggests a host
        // component is hitting the resume path. Figure out why. Possibly
        // related to `hidden`.
        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
        // TODO: Type this specific to this type of component.
        workInProgress.updateQueue = updatePayload;
        // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.
        if (updatePayload) {
          markUpdate(workInProgress);
        }
      };
      updateHostText$1 = function (current, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) {
          markUpdate(workInProgress);
        }
      };
    }

    function completeWork(current, workInProgress, renderExpirationTime) {
      var newProps = workInProgress.pendingProps;

      switch (workInProgress.tag) {
        case IndeterminateComponent:
          break;
        case LazyComponent:
          break;
        case SimpleMemoComponent:
        case FunctionComponent:
          break;
        case ClassComponent:
          {
            var Component = workInProgress.type;
            if (isContextProvider(Component)) {
              popContext(workInProgress);
            }
            break;
          }
        case HostRoot:
          {
            popHostContainer(workInProgress);
            popTopLevelContextObject(workInProgress);
            var fiberRoot = workInProgress.stateNode;
            if (fiberRoot.pendingContext) {
              fiberRoot.context = fiberRoot.pendingContext;
              fiberRoot.pendingContext = null;
            }
            if (current === null || current.child === null) {
              // If we hydrated, pop so that we can delete any remaining children
              // that weren't hydrated.
              popHydrationState(workInProgress);
              // This resets the hacky state to fix isMounted before committing.
              // TODO: Delete this when we delete isMounted and findDOMNode.
              workInProgress.effectTag &= ~Placement;
            }
            updateHostContainer(workInProgress);
            break;
          }
        case HostComponent:
          {
            popHostContext(workInProgress);
            var rootContainerInstance = getRootHostContainer();
            var type = workInProgress.type;
            if (current !== null && workInProgress.stateNode != null) {
              updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

              if (current.ref !== workInProgress.ref) {
                markRef$1(workInProgress);
              }
            } else {
              if (!newProps) {
                !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                // This can happen when we abort work.
                break;
              }

              var currentHostContext = getHostContext();
              // TODO: Move createInstance to beginWork and keep it on a context
              // "stack" as the parent. Then append children as we go in beginWork
              // or completeWork depending on we want to add then top->down or
              // bottom->up. Top->down is faster in IE11.
              var wasHydrated = popHydrationState(workInProgress);
              if (wasHydrated) {
                // TODO: Move this and createInstance step into the beginPhase
                // to consolidate.
                if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
                  // If changes to the hydrated node needs to be applied at the
                  // commit-phase we mark this as such.
                  markUpdate(workInProgress);
                }
              } else {
                var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);

                appendAllChildren(instance, workInProgress, false, false);

                // Certain renderers require commit-time effects for initial mount.
                // (eg DOM renderer supports auto-focus for certain elements).
                // Make sure such renderers get scheduled for later work.
                if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {
                  markUpdate(workInProgress);
                }
                workInProgress.stateNode = instance;
              }

              if (workInProgress.ref !== null) {
                // If there is a ref on a host node we need to schedule a callback
                markRef$1(workInProgress);
              }
            }
            break;
          }
        case HostText:
          {
            var newText = newProps;
            if (current && workInProgress.stateNode != null) {
              var oldText = current.memoizedProps;
              // If we have an alternate, that means this is an update and we need
              // to schedule a side-effect to do the updates.
              updateHostText$1(current, workInProgress, oldText, newText);
            } else {
              if (typeof newText !== 'string') {
                !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                // This can happen when we abort work.
              }
              var _rootContainerInstance = getRootHostContainer();
              var _currentHostContext = getHostContext();
              var _wasHydrated = popHydrationState(workInProgress);
              if (_wasHydrated) {
                if (prepareToHydrateHostTextInstance(workInProgress)) {
                  markUpdate(workInProgress);
                }
              } else {
                workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
              }
            }
            break;
          }
        case ForwardRef:
          break;
        case SuspenseComponent:
          {
            var nextState = workInProgress.memoizedState;
            if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
              // Something suspended. Re-render with the fallback children.
              workInProgress.expirationTime = renderExpirationTime;
              // Do not reset the effect list.
              return workInProgress;
            }

            var nextDidTimeout = nextState !== null;
            var prevDidTimeout = current !== null && current.memoizedState !== null;

            if (current !== null && !nextDidTimeout && prevDidTimeout) {
              // We just switched from the fallback to the normal children. Delete
              // the fallback.
              // TODO: Would it be better to store the fallback fragment on
              var currentFallbackChild = current.child.sibling;
              if (currentFallbackChild !== null) {
                // Deletions go at the beginning of the return fiber's effect list
                var first = workInProgress.firstEffect;
                if (first !== null) {
                  workInProgress.firstEffect = currentFallbackChild;
                  currentFallbackChild.nextEffect = first;
                } else {
                  workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
                  currentFallbackChild.nextEffect = null;
                }
                currentFallbackChild.effectTag = Deletion;
              }
            }

            // The children either timed out after previously being visible, or
            // were restored after previously being hidden. Schedule an effect
            // to update their visiblity.
            if (
            //
            nextDidTimeout !== prevDidTimeout ||
            // Outside concurrent mode, the primary children commit in an
            // inconsistent state, even if they are hidden. So if they are hidden,
            // we need to schedule an effect to re-hide them, just in case.
            (workInProgress.effectTag & ConcurrentMode) === NoContext && nextDidTimeout) {
              workInProgress.effectTag |= Update;
            }
            break;
          }
        case Fragment:
          break;
        case Mode:
          break;
        case Profiler:
          break;
        case HostPortal:
          popHostContainer(workInProgress);
          updateHostContainer(workInProgress);
          break;
        case ContextProvider:
          // Pop provider fiber
          popProvider(workInProgress);
          break;
        case ContextConsumer:
          break;
        case MemoComponent:
          break;
        case IncompleteClassComponent:
          {
            // Same as class component case. I put it down here so that the tags are
            // sequential to ensure this switch is compiled to a jump table.
            var _Component = workInProgress.type;
            if (isContextProvider(_Component)) {
              popContext(workInProgress);
            }
            break;
          }
        default:
          invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
      }

      return null;
    }

    function shouldCaptureSuspense(current, workInProgress) {
      // In order to capture, the Suspense component must have a fallback prop.
      if (workInProgress.memoizedProps.fallback === undefined) {
        return false;
      }
      // If it was the primary children that just suspended, capture and render the
      // fallback. Otherwise, don't capture and bubble to the next boundary.
      var nextState = workInProgress.memoizedState;
      return nextState === null;
    }

    function logCapturedError(capturedError) {

      var error = capturedError.error;
      {
        var componentName = capturedError.componentName,
            componentStack = capturedError.componentStack,
            errorBoundaryName = capturedError.errorBoundaryName,
            errorBoundaryFound = capturedError.errorBoundaryFound,
            willRetry = capturedError.willRetry;

        // Browsers support silencing uncaught errors by calling
        // `preventDefault()` in window `error` handler.
        // We record this information as an expando on the error.

        if (error != null && error._suppressLogging) {
          if (errorBoundaryFound && willRetry) {
            // The error is recoverable and was silenced.
            // Ignore it and don't print the stack addendum.
            // This is handy for testing error boundaries without noise.
            return;
          }
          // The error is fatal. Since the silencing might have
          // been accidental, we'll surface it anyway.
          // However, the browser would have silenced the original error
          // so we'll print it first, and then print the stack addendum.
          console.error(error);
          // For a more detailed description of this block, see:
          // https://github.com/facebook/react/pull/13384
        }

        var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';

        var errorBoundaryMessage = void 0;
        // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.
        if (errorBoundaryFound && errorBoundaryName) {
          if (willRetry) {
            errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');
          } else {
            errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';
          }
        } else {
          errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
        }
        var combinedMessage = '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage);

        // In development, we provide our own message with just the component stack.
        // We don't include the original error message and JS stack because the browser
        // has already printed it. Even if the application swallows the error, it is still
        // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
        console.error(combinedMessage);
      }
    }

    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    {
      didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    }

    function logError(boundary, errorInfo) {
      var source = errorInfo.source;
      var stack = errorInfo.stack;
      if (stack === null && source !== null) {
        stack = getStackByFiberInDevAndProd(source);
      }

      var capturedError = {
        componentName: source !== null ? getComponentName(source.type) : null,
        componentStack: stack !== null ? stack : '',
        error: errorInfo.value,
        errorBoundary: null,
        errorBoundaryName: null,
        errorBoundaryFound: false,
        willRetry: false
      };

      if (boundary !== null && boundary.tag === ClassComponent) {
        capturedError.errorBoundary = boundary.stateNode;
        capturedError.errorBoundaryName = getComponentName(boundary.type);
        capturedError.errorBoundaryFound = true;
        capturedError.willRetry = true;
      }

      try {
        logCapturedError(capturedError);
      } catch (e) {
        // This method must not throw, or React internal state will get messed up.
        // If console.error is overridden, or logCapturedError() shows a dialog that throws,
        // we want to report this error outside of the normal stack as a last resort.
        // https://github.com/facebook/react/issues/13188
        setTimeout(function () {
          throw e;
        });
      }
    }

    var callComponentWillUnmountWithTimer = function (current$$1, instance) {
      startPhaseTimer(current$$1, 'componentWillUnmount');
      instance.props = current$$1.memoizedProps;
      instance.state = current$$1.memoizedState;
      instance.componentWillUnmount();
      stopPhaseTimer();
    };

    // Capture errors so they don't interrupt unmounting.
    function safelyCallComponentWillUnmount(current$$1, instance) {
      {
        invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current$$1, instance);
        if (hasCaughtError()) {
          var unmountError = clearCaughtError();
          captureCommitPhaseError(current$$1, unmountError);
        }
      }
    }

    function safelyDetachRef(current$$1) {
      var ref = current$$1.ref;
      if (ref !== null) {
        if (typeof ref === 'function') {
          {
            invokeGuardedCallback(null, ref, null, null);
            if (hasCaughtError()) {
              var refError = clearCaughtError();
              captureCommitPhaseError(current$$1, refError);
            }
          }
        } else {
          ref.current = null;
        }
      }
    }

    function safelyCallDestroy(current$$1, destroy) {
      {
        invokeGuardedCallback(null, destroy, null);
        if (hasCaughtError()) {
          var error = clearCaughtError();
          captureCommitPhaseError(current$$1, error);
        }
      }
    }

    function commitBeforeMutationLifeCycles(current$$1, finishedWork) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
          {
            commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork);
            return;
          }
        case ClassComponent:
          {
            if (finishedWork.effectTag & Snapshot) {
              if (current$$1 !== null) {
                var prevProps = current$$1.memoizedProps;
                var prevState = current$$1.memoizedState;
                startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
                var instance = finishedWork.stateNode;
                // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.
                {
                  if (finishedWork.type === finishedWork.elementType) {
                    !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected instance props to match memoized props before ' + 'getSnapshotBeforeUpdate. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;
                    !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected instance state to match memoized state before ' + 'getSnapshotBeforeUpdate. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;
                  }
                }
                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                  if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                    didWarnSet.add(finishedWork.type);
                    warningWithoutStack$1(false, '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
                  }
                }
                instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                stopPhaseTimer();
              }
            }
            return;
          }
        case HostRoot:
        case HostComponent:
        case HostText:
        case HostPortal:
        case IncompleteClassComponent:
          // Nothing to do for these component types
          return;
        default:
          {
            invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
          }
      }
    }

    function commitHookEffectList(unmountTag, mountTag, finishedWork) {
      {
        return;
      }
      var updateQueue = finishedWork.updateQueue;
      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
      if (lastEffect !== null) {
        var firstEffect = lastEffect.next;
        var effect = firstEffect;
        do {
          if ((effect.tag & unmountTag) !== NoEffect$1) {
            // Unmount
            var destroy = effect.destroy;
            effect.destroy = null;
            if (destroy !== null) {
              destroy();
            }
          }
          if ((effect.tag & mountTag) !== NoEffect$1) {
            // Mount
            var create = effect.create;
            var _destroy = create();
            if (typeof _destroy !== 'function') {
              {
                if (_destroy !== null && _destroy !== undefined) {
                  warningWithoutStack$1(false, 'useEffect function must return a cleanup function or ' + 'nothing.%s%s', typeof _destroy.then === 'function' ? ' Promises and useEffect(async () => ...) are not ' + 'supported, but you can call an async function inside an ' + 'effect.' : '', getStackByFiberInDevAndProd(finishedWork));
                }
              }
              _destroy = null;
            }
            effect.destroy = _destroy;
          }
          effect = effect.next;
        } while (effect !== firstEffect);
      }
    }

    function commitLifeCycles(finishedRoot, current$$1, finishedWork, committedExpirationTime) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
          {
            commitHookEffectList(UnmountLayout, MountLayout, finishedWork);
            break;
          }
        case ClassComponent:
          {
            var instance = finishedWork.stateNode;
            if (finishedWork.effectTag & Update) {
              if (current$$1 === null) {
                startPhaseTimer(finishedWork, 'componentDidMount');
                // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.
                {
                  if (finishedWork.type === finishedWork.elementType) {
                    !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected instance props to match memoized props before ' + 'componentDidMount. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;
                    !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected instance state to match memoized state before ' + 'componentDidMount. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;
                  }
                }
                instance.componentDidMount();
                stopPhaseTimer();
              } else {
                var prevProps = finishedWork.elementType === finishedWork.type ? current$$1.memoizedProps : resolveDefaultProps(finishedWork.type, current$$1.memoizedProps);
                var prevState = current$$1.memoizedState;
                startPhaseTimer(finishedWork, 'componentDidUpdate');
                // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.
                {
                  if (finishedWork.type === finishedWork.elementType) {
                    !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected instance props to match memoized props before ' + 'componentDidUpdate. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;
                    !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected instance state to match memoized state before ' + 'componentDidUpdate. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;
                  }
                }
                instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                stopPhaseTimer();
              }
            }
            var updateQueue = finishedWork.updateQueue;
            if (updateQueue !== null) {
              {
                if (finishedWork.type === finishedWork.elementType) {
                  !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected instance props to match memoized props before ' + 'processing the update queue. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;
                  !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected instance state to match memoized state before ' + 'processing the update queue. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;
                }
              }
              // We could update instance props and state here,
              // but instead we rely on them being set during last render.
              // TODO: revisit this when we implement resuming.
              commitUpdateQueue(finishedWork, updateQueue, instance, committedExpirationTime);
            }
            return;
          }
        case HostRoot:
          {
            var _updateQueue = finishedWork.updateQueue;
            if (_updateQueue !== null) {
              var _instance = null;
              if (finishedWork.child !== null) {
                switch (finishedWork.child.tag) {
                  case HostComponent:
                    _instance = getPublicInstance(finishedWork.child.stateNode);
                    break;
                  case ClassComponent:
                    _instance = finishedWork.child.stateNode;
                    break;
                }
              }
              commitUpdateQueue(finishedWork, _updateQueue, _instance, committedExpirationTime);
            }
            return;
          }
        case HostComponent:
          {
            var _instance2 = finishedWork.stateNode;

            // Renderers may schedule work to be done after host components are mounted
            // (eg DOM renderer may schedule auto-focus for inputs and form controls).
            // These effects should only be committed when components are first mounted,
            // aka when there is no current/alternate.
            if (current$$1 === null && finishedWork.effectTag & Update) {
              var type = finishedWork.type;
              var props = finishedWork.memoizedProps;
              commitMount(_instance2, type, props, finishedWork);
            }

            return;
          }
        case HostText:
          {
            // We have no life-cycles associated with text.
            return;
          }
        case HostPortal:
          {
            // We have no life-cycles associated with portals.
            return;
          }
        case Profiler:
          {
            {
              var onRender = finishedWork.memoizedProps.onRender;

              {
                onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
              }
            }
            return;
          }
        case SuspenseComponent:
          break;
        case IncompleteClassComponent:
          break;
        default:
          {
            invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
          }
      }
    }

    function hideOrUnhideAllChildren(finishedWork, isHidden) {
      {
        // We only have the top Fiber that was inserted but we need recurse down its
        var node = finishedWork;
        while (true) {
          if (node.tag === HostComponent) {
            var instance = node.stateNode;
            if (isHidden) {
              hideInstance(instance);
            } else {
              unhideInstance(node.stateNode, node.memoizedProps);
            }
          } else if (node.tag === HostText) {
            var _instance3 = node.stateNode;
            if (isHidden) {
              hideTextInstance(_instance3);
            } else {
              unhideTextInstance(_instance3, node.memoizedProps);
            }
          } else if (node.tag === SuspenseComponent && node.memoizedState !== null) {
            // Found a nested Suspense component that timed out. Skip over the
            var fallbackChildFragment = node.child.sibling;
            fallbackChildFragment.return = node;
            node = fallbackChildFragment;
            continue;
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === finishedWork) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === finishedWork) {
              return;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
    }

    function commitAttachRef(finishedWork) {
      var ref = finishedWork.ref;
      if (ref !== null) {
        var instance = finishedWork.stateNode;
        var instanceToUse = void 0;
        switch (finishedWork.tag) {
          case HostComponent:
            instanceToUse = getPublicInstance(instance);
            break;
          default:
            instanceToUse = instance;
        }
        if (typeof ref === 'function') {
          ref(instanceToUse);
        } else {
          {
            if (!ref.hasOwnProperty('current')) {
              warningWithoutStack$1(false, 'Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
            }
          }

          ref.current = instanceToUse;
        }
      }
    }

    function commitDetachRef(current$$1) {
      var currentRef = current$$1.ref;
      if (currentRef !== null) {
        if (typeof currentRef === 'function') {
          currentRef(null);
        } else {
          currentRef.current = null;
        }
      }
    }

    // User-originating errors (lifecycles and refs) should not interrupt
    // deletion, so don't let them throw. Host-originating errors should
    // interrupt deletion, so it's okay
    function commitUnmount(current$$1) {
      onCommitUnmount(current$$1);

      switch (current$$1.tag) {
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent:
          {
            var updateQueue = current$$1.updateQueue;
            if (updateQueue !== null) {
              var lastEffect = updateQueue.lastEffect;
              if (lastEffect !== null) {
                var firstEffect = lastEffect.next;
                var effect = firstEffect;
                do {
                  var destroy = effect.destroy;
                  if (destroy !== null) {
                    safelyCallDestroy(current$$1, destroy);
                  }
                  effect = effect.next;
                } while (effect !== firstEffect);
              }
            }
            break;
          }
        case ClassComponent:
          {
            safelyDetachRef(current$$1);
            var instance = current$$1.stateNode;
            if (typeof instance.componentWillUnmount === 'function') {
              safelyCallComponentWillUnmount(current$$1, instance);
            }
            return;
          }
        case HostComponent:
          {
            safelyDetachRef(current$$1);
            return;
          }
        case HostPortal:
          {
            // TODO: this is recursive.
            // We are also not using this parent because
            // the portal will get pushed immediately.
            {
              unmountHostComponents(current$$1);
            }
            return;
          }
      }
    }

    function commitNestedUnmounts(root) {
      // While we're inside a removed host node we don't want to call
      // removeChild on the inner nodes because they're removed by the top
      // call anyway. We also want to call componentWillUnmount on all
      // composites before this host node is removed from the tree. Therefore
      var node = root;
      while (true) {
        commitUnmount(node);
        // Visit children because they may contain more composite or host nodes.
        // Skip portals because commitUnmount() currently visits them recursively.
        if (node.child !== null && (
        // If we use mutation we drill down into portals using commitUnmount above.
        // If we don't use mutation we drill down into portals here instead.
        node.tag !== HostPortal)) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === root) {
          return;
        }
        while (node.sibling === null) {
          if (node.return === null || node.return === root) {
            return;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    function detachFiber(current$$1) {
      // Cut off the return pointers to disconnect it from the tree. Ideally, we
      // should clear the child pointer of the parent alternate to let this
      // get GC:ed but we don't know which for sure which parent is the current
      // one so we'll settle for GC:ing the subtree of this child. This child
      // itself will be GC:ed when the parent updates the next time.
      current$$1.return = null;
      current$$1.child = null;
      if (current$$1.alternate) {
        current$$1.alternate.child = null;
        current$$1.alternate.return = null;
      }
    }

    function getHostParentFiber(fiber) {
      var parent = fiber.return;
      while (parent !== null) {
        if (isHostParent(parent)) {
          return parent;
        }
        parent = parent.return;
      }
      invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
    }

    function isHostParent(fiber) {
      return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }

    function getHostSibling(fiber) {
      // We're going to search forward into the tree until we find a sibling host
      // node. Unfortunately, if multiple insertions are done in a row we have to
      // search past them. This leads to exponential search for the next sibling.
      var node = fiber;
      siblings: while (true) {
        // If we didn't find anything, let's try the next sibling.
        while (node.sibling === null) {
          if (node.return === null || isHostParent(node.return)) {
            // If we pop out of the root or hit the parent the fiber we are the
            // last sibling.
            return null;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
        while (node.tag !== HostComponent && node.tag !== HostText) {
          // If it is not host node and, we might have a host node inside it.
          // Try to search down until we find one.
          if (node.effectTag & Placement) {
            // If we don't have a child, try the siblings instead.
            continue siblings;
          }
          // If we don't have a child, try the siblings instead.
          // We also skip portals because they are not part of this host tree.
          if (node.child === null || node.tag === HostPortal) {
            continue siblings;
          } else {
            node.child.return = node;
            node = node.child;
          }
        }
        // Check if this host node is stable or about to be placed.
        if (!(node.effectTag & Placement)) {
          // Found it!
          return node.stateNode;
        }
      }
    }

    function commitPlacement(finishedWork) {

      // Recursively insert all host nodes into the parent.
      var parentFiber = getHostParentFiber(finishedWork);

      // Note: these two variables *must* always be updated together.
      var parent = void 0;
      var isContainer = void 0;

      switch (parentFiber.tag) {
        case HostComponent:
          parent = parentFiber.stateNode;
          isContainer = false;
          break;
        case HostRoot:
          parent = parentFiber.stateNode.containerInfo;
          isContainer = true;
          break;
        case HostPortal:
          parent = parentFiber.stateNode.containerInfo;
          isContainer = true;
          break;
        default:
          invariant(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');
      }
      if (parentFiber.effectTag & ContentReset) {
        // Reset the text content of the parent before doing any insertions
        resetTextContent(parent);
        // Clear ContentReset from the effect tag
        parentFiber.effectTag &= ~ContentReset;
      }

      var before = getHostSibling(finishedWork);
      // We only have the top Fiber that was inserted but we need recurse down its
      // children to find all the terminal nodes.
      var node = finishedWork;
      while (true) {
        if (node.tag === HostComponent || node.tag === HostText) {
          if (before) {
            if (isContainer) {
              insertInContainerBefore(parent, node.stateNode, before);
            } else {
              insertBefore(parent, node.stateNode, before);
            }
          } else {
            if (isContainer) {
              appendChildToContainer(parent, node.stateNode);
            } else {
              appendChild(parent, node.stateNode);
            }
          }
        } else if (node.tag === HostPortal) ; else if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === finishedWork) {
          return;
        }
        while (node.sibling === null) {
          if (node.return === null || node.return === finishedWork) {
            return;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    function unmountHostComponents(current$$1) {
      // We only have the top Fiber that was deleted but we need recurse down its
      var node = current$$1;

      // Each iteration, currentParent is populated with node's host parent if not
      // currentParentIsValid.
      var currentParentIsValid = false;

      // Note: these two variables *must* always be updated together.
      var currentParent = void 0;
      var currentParentIsContainer = void 0;

      while (true) {
        if (!currentParentIsValid) {
          var parent = node.return;
          findParent: while (true) {
            !(parent !== null) ? invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            switch (parent.tag) {
              case HostComponent:
                currentParent = parent.stateNode;
                currentParentIsContainer = false;
                break findParent;
              case HostRoot:
                currentParent = parent.stateNode.containerInfo;
                currentParentIsContainer = true;
                break findParent;
              case HostPortal:
                currentParent = parent.stateNode.containerInfo;
                currentParentIsContainer = true;
                break findParent;
            }
            parent = parent.return;
          }
          currentParentIsValid = true;
        }

        if (node.tag === HostComponent || node.tag === HostText) {
          commitNestedUnmounts(node);
          // After all the children have unmounted, it is now safe to remove the
          // node from the tree.
          if (currentParentIsContainer) {
            removeChildFromContainer(currentParent, node.stateNode);
          } else {
            removeChild(currentParent, node.stateNode);
          }
          // Don't visit children because we already visited them.
        } else if (node.tag === HostPortal) {
          // When we go into a portal, it becomes the parent to remove from.
          // We will reassign it back when we pop the portal on the way up.
          currentParent = node.stateNode.containerInfo;
          currentParentIsContainer = true;
          // Visit children because portals might contain host components.
          if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
        } else {
          commitUnmount(node);
          // Visit children because we may find more host components below.
          if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
        }
        if (node === current$$1) {
          return;
        }
        while (node.sibling === null) {
          if (node.return === null || node.return === current$$1) {
            return;
          }
          node = node.return;
          if (node.tag === HostPortal) {
            // When we go out of the portal, we need to restore the parent.
            // Since we don't keep a stack of them, we will search for it.
            currentParentIsValid = false;
          }
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    function commitDeletion(current$$1) {
      {
        // Recursively delete all host nodes from the parent.
        // Detach refs and call componentWillUnmount() on the whole subtree.
        unmountHostComponents(current$$1);
      }
      detachFiber(current$$1);
    }

    function commitWork(current$$1, finishedWork) {

      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent:
          {
            commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
            return;
          }
        case ClassComponent:
          {
            return;
          }
        case HostComponent:
          {
            var instance = finishedWork.stateNode;
            if (instance != null) {
              // Commit the work prepared earlier.
              var newProps = finishedWork.memoizedProps;
              // For hydration we reuse the update path but we treat the oldProps
              // as the newProps. The updatePayload will contain the real change in
              // this case.
              var oldProps = current$$1 !== null ? current$$1.memoizedProps : newProps;
              var type = finishedWork.type;
              // TODO: Type the updateQueue to be specific to host components.
              var updatePayload = finishedWork.updateQueue;
              finishedWork.updateQueue = null;
              if (updatePayload !== null) {
                commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
              }
            }
            return;
          }
        case HostText:
          {
            !(finishedWork.stateNode !== null) ? invariant(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            var textInstance = finishedWork.stateNode;
            var newText = finishedWork.memoizedProps;
            // For hydration we reuse the update path but we treat the oldProps
            // as the newProps. The updatePayload will contain the real change in
            // this case.
            var oldText = current$$1 !== null ? current$$1.memoizedProps : newText;
            commitTextUpdate(textInstance, oldText, newText);
            return;
          }
        case HostRoot:
          {
            return;
          }
        case Profiler:
          {
            return;
          }
        case SuspenseComponent:
          {
            var newState = finishedWork.memoizedState;

            var newDidTimeout = void 0;
            var primaryChildParent = finishedWork;
            if (newState === null) {
              newDidTimeout = false;
            } else {
              newDidTimeout = true;
              primaryChildParent = finishedWork.child;
              if (newState.timedOutAt === NoWork) {
                // If the children had not already timed out, record the time.
                // This is used to compute the elapsed time during subsequent
                // attempts to render the children.
                newState.timedOutAt = requestCurrentTime();
              }
            }

            if (primaryChildParent !== null) {
              hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
            }
            return;
          }
        case IncompleteClassComponent:
          {
            return;
          }
        default:
          {
            invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
          }
      }
    }

    function commitResetTextContent(current$$1) {
      resetTextContent(current$$1.stateNode);
    }

    function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
      var update = createUpdate(expirationTime);
      // Unmount the root by rendering null.
      update.tag = CaptureUpdate;
      // Caution: React DevTools currently depends on this property
      // being called "element".
      update.payload = { element: null };
      var error = errorInfo.value;
      update.callback = function () {
        onUncaughtError(error);
        logError(fiber, errorInfo);
      };
      return update;
    }

    function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
      var update = createUpdate(expirationTime);
      update.tag = CaptureUpdate;
      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
      if (typeof getDerivedStateFromError === 'function') {
        var error = errorInfo.value;
        update.payload = function () {
          return getDerivedStateFromError(error);
        };
      }

      var inst = fiber.stateNode;
      if (inst !== null && typeof inst.componentDidCatch === 'function') {
        update.callback = function callback() {
          if (typeof getDerivedStateFromError !== 'function') {
            // To preserve the preexisting retry behavior of error boundaries,
            // we keep track of which ones already failed during this batch.
            // This gets reset before we yield back to the browser.
            // TODO: Warn in strict mode if getDerivedStateFromError is
            // not defined.
            markLegacyErrorBoundaryAsFailed(this);
          }
          var error = errorInfo.value;
          var stack = errorInfo.stack;
          logError(fiber, errorInfo);
          this.componentDidCatch(error, {
            componentStack: stack !== null ? stack : ''
          });
          {
            if (typeof getDerivedStateFromError !== 'function') {
              // If componentDidCatch is the only error boundary method defined,
              // then it needs to call setState to recover from errors.
              // If no state update is scheduled then the boundary will swallow the error.
              !(fiber.expirationTime === Sync) ? warningWithoutStack$1(false, '%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown') : void 0;
            }
          }
        };
      }
      return update;
    }

    function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
      // The source fiber did not complete.
      sourceFiber.effectTag |= Incomplete;
      // Its effect list is no longer valid.
      sourceFiber.firstEffect = sourceFiber.lastEffect = null;

      if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
        // This is a thenable.
        var thenable = value;

        // Find the earliest timeout threshold of all the placeholders in the
        // ancestor path. We could avoid this traversal by storing the thresholds on
        // the stack, but we choose not to because we only hit this path if we're
        // IO-bound (i.e. if something suspends). Whereas the stack is used even in
        // the non-IO- bound case.
        var _workInProgress = returnFiber;
        var earliestTimeoutMs = -1;
        var startTimeMs = -1;
        do {
          if (_workInProgress.tag === SuspenseComponent) {
            var current$$1 = _workInProgress.alternate;
            if (current$$1 !== null) {
              var currentState = current$$1.memoizedState;
              if (currentState !== null) {
                // Reached a boundary that already timed out. Do not search
                // any further.
                var timedOutAt = currentState.timedOutAt;
                startTimeMs = expirationTimeToMs(timedOutAt);
                // Do not search any further.
                break;
              }
            }
            var timeoutPropMs = _workInProgress.pendingProps.maxDuration;
            if (typeof timeoutPropMs === 'number') {
              if (timeoutPropMs <= 0) {
                earliestTimeoutMs = 0;
              } else if (earliestTimeoutMs === -1 || timeoutPropMs < earliestTimeoutMs) {
                earliestTimeoutMs = timeoutPropMs;
              }
            }
          }
          _workInProgress = _workInProgress.return;
        } while (_workInProgress !== null);

        // Schedule the nearest Suspense to re-render the timed out view.
        _workInProgress = returnFiber;
        do {
          if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress.alternate, _workInProgress)) {
            // Found the nearest boundary.

            // If the boundary is not in concurrent mode, we should not suspend, and
            // likewise, when the promise resolves, we should ping synchronously.
            var pingTime = (_workInProgress.mode & ConcurrentMode) === NoEffect ? Sync : renderExpirationTime;

            // Attach a listener to the promise to "ping" the root and retry.
            var onResolveOrReject = retrySuspendedRoot.bind(null, root, _workInProgress, sourceFiber, pingTime);
            {
              onResolveOrReject = tracing$$1.unstable_wrap(onResolveOrReject);
            }
            thenable.then(onResolveOrReject, onResolveOrReject);

            // If the boundary is outside of concurrent mode, we should *not*
            // suspend the commit. Pretend as if the suspended component rendered
            // null and keep rendering. In the commit phase, we'll schedule a
            // subsequent synchronous update to re-render the Suspense.
            //
            // Note: It doesn't matter whether the component that suspended was
            // inside a concurrent mode tree. If the Suspense is outside of it, we
            // should *not* suspend the commit.
            if ((_workInProgress.mode & ConcurrentMode) === NoEffect) {
              _workInProgress.effectTag |= DidCapture;

              // We're going to commit this fiber even though it didn't complete.
              // But we shouldn't call any lifecycle methods or callbacks. Remove
              // all lifecycle effect tags.
              sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);

              if (sourceFiber.tag === ClassComponent) {
                var _current = sourceFiber.alternate;
                if (_current === null) {
                  // This is a new mount. Change the tag so it's not mistaken for a
                  // completed class component. For example, we should not call
                  // componentWillUnmount if it is deleted.
                  sourceFiber.tag = IncompleteClassComponent;
                }
              }

              // The source fiber did not complete. Mark it with the current
              // render priority to indicate that it still has pending work.
              sourceFiber.expirationTime = renderExpirationTime;

              // Exit without suspending.
              return;
            }

            // Confirmed that the boundary is in a concurrent mode tree. Continue
            // with the normal suspend path.

            var absoluteTimeoutMs = void 0;
            if (earliestTimeoutMs === -1) {
              // If no explicit threshold is given, default to an abitrarily large
              // value. The actual size doesn't matter because the threshold for the
              // whole tree will be clamped to the expiration time.
              absoluteTimeoutMs = maxSigned31BitInt;
            } else {
              if (startTimeMs === -1) {
                // This suspend happened outside of any already timed-out
                // placeholders. We don't know exactly when the update was
                // scheduled, but we can infer an approximate start time from the
                // expiration time. First, find the earliest uncommitted expiration
                // time in the tree, including work that is suspended. Then subtract
                // the offset used to compute an async update's expiration time.
                // This will cause high priority (interactive) work to expire
                // earlier than necessary, but we can account for this by adjusting
                // for the Just Noticeable Difference.
                var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, renderExpirationTime);
                var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);
                startTimeMs = earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
              }
              absoluteTimeoutMs = startTimeMs + earliestTimeoutMs;
            }

            // Mark the earliest timeout in the suspended fiber's ancestor path.
            // After completing the root, we'll take the largest of all the
            // suspended fiber's timeouts and use it to compute a timeout for the
            // whole tree.
            renderDidSuspend(root, absoluteTimeoutMs, renderExpirationTime);

            _workInProgress.effectTag |= ShouldCapture;
            _workInProgress.expirationTime = renderExpirationTime;
            return;
          }
          // This boundary already captured during this render. Continue to the next
          // boundary.
          _workInProgress = _workInProgress.return;
        } while (_workInProgress !== null);
        // No boundary was found. Fallthrough to error mode.
        // TODO: Use invariant so the message is stripped in prod?
        value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
      }

      // We didn't find a boundary that could handle this type of exception. Start
      // over and traverse parent path again, this time treating the exception
      // as an error.
      renderDidError();
      value = createCapturedValue(value, sourceFiber);
      var workInProgress = returnFiber;
      do {
        switch (workInProgress.tag) {
          case HostRoot:
            {
              var _errorInfo = value;
              workInProgress.effectTag |= ShouldCapture;
              workInProgress.expirationTime = renderExpirationTime;
              var update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);
              enqueueCapturedUpdate(workInProgress, update);
              return;
            }
          case ClassComponent:
            // Capture and retry
            var errorInfo = value;
            var ctor = workInProgress.type;
            var instance = workInProgress.stateNode;
            if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
              workInProgress.effectTag |= ShouldCapture;
              workInProgress.expirationTime = renderExpirationTime;
              // Schedule the error boundary to re-render using updated state
              var _update = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);
              enqueueCapturedUpdate(workInProgress, _update);
              return;
            }
            break;
          default:
            break;
        }
        workInProgress = workInProgress.return;
      } while (workInProgress !== null);
    }

    function unwindWork(workInProgress, renderExpirationTime) {
      switch (workInProgress.tag) {
        case ClassComponent:
          {
            var Component = workInProgress.type;
            if (isContextProvider(Component)) {
              popContext(workInProgress);
            }
            var effectTag = workInProgress.effectTag;
            if (effectTag & ShouldCapture) {
              workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
              return workInProgress;
            }
            return null;
          }
        case HostRoot:
          {
            popHostContainer(workInProgress);
            popTopLevelContextObject(workInProgress);
            var _effectTag = workInProgress.effectTag;
            !((_effectTag & DidCapture) === NoEffect) ? invariant(false, 'The root failed to unmount after an error. This is likely a bug in React. Please file an issue.') : void 0;
            workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
            return workInProgress;
          }
        case HostComponent:
          {
            popHostContext(workInProgress);
            return null;
          }
        case SuspenseComponent:
          {
            var _effectTag2 = workInProgress.effectTag;
            if (_effectTag2 & ShouldCapture) {
              workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
              // Captured a suspense effect. Re-render the boundary.
              return workInProgress;
            }
            return null;
          }
        case HostPortal:
          popHostContainer(workInProgress);
          return null;
        case ContextProvider:
          popProvider(workInProgress);
          return null;
        default:
          return null;
      }
    }

    function unwindInterruptedWork(interruptedWork) {
      switch (interruptedWork.tag) {
        case ClassComponent:
          {
            var childContextTypes = interruptedWork.type.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== undefined) {
              popContext(interruptedWork);
            }
            break;
          }
        case HostRoot:
          {
            popHostContainer(interruptedWork);
            popTopLevelContextObject(interruptedWork);
            break;
          }
        case HostComponent:
          {
            popHostContext(interruptedWork);
            break;
          }
        case HostPortal:
          popHostContainer(interruptedWork);
          break;
        case ContextProvider:
          popProvider(interruptedWork);
          break;
        default:
          break;
      }
    }
    var DispatcherWithoutHooks = {
      readContext: readContext
    };

    var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;


    var didWarnAboutStateTransition = void 0;
    var didWarnSetStateChildContext = void 0;
    var warnAboutUpdateOnUnmounted = void 0;
    var warnAboutInvalidUpdates = void 0;

    {
      // Provide explicit error message when production+profiling bundle of e.g. react-dom
      // is used with production (non-profiling) bundle of scheduler/tracing
      !(tracing$$1.__interactionsRef != null && tracing$$1.__interactionsRef.current != null) ? invariant(false, 'It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling') : void 0;
    }

    {
      didWarnAboutStateTransition = false;
      didWarnSetStateChildContext = false;
      var didWarnStateUpdateForUnmountedComponent = {};

      warnAboutUpdateOnUnmounted = function (fiber, isClass) {
        // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForUnmountedComponent[componentName]) {
          return;
        }
        warningWithoutStack$1(false, "Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.%s', isClass ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
        didWarnStateUpdateForUnmountedComponent[componentName] = true;
      };

      warnAboutInvalidUpdates = function (instance) {
        switch (phase) {
          case 'getChildContext':
            if (didWarnSetStateChildContext) {
              return;
            }
            warningWithoutStack$1(false, 'setState(...): Cannot call setState() inside getChildContext()');
            didWarnSetStateChildContext = true;
            break;
          case 'render':
            if (didWarnAboutStateTransition) {
              return;
            }
            warningWithoutStack$1(false, 'Cannot update during an existing state transition (such as within ' + '`render`). Render methods should be a pure function of props and state.');
            didWarnAboutStateTransition = true;
            break;
        }
      };
    }

    // Used to ensure computeUniqueAsyncExpiration is monotonically decreasing.
    var lastUniqueAsyncExpiration = Sync - 1;

    // Represents the expiration time that incoming updates should use. (If this
    // is NoWork, use the default strategy: async updates in async mode, sync
    // updates in sync mode.)
    var expirationContext = NoWork;

    var isWorking = false;

    // The next work in progress fiber that we're currently working on.
    var nextUnitOfWork = null;
    var nextRoot = null;
    // The time at which we're currently rendering work.
    var nextRenderExpirationTime = NoWork;
    var nextLatestAbsoluteTimeoutMs = -1;
    var nextRenderDidError = false;

    // The next fiber with an effect that we're currently committing.
    var nextEffect = null;

    var isCommitting$1 = false;
    var passiveEffectCallbackHandle = null;
    var passiveEffectCallback = null;

    var legacyErrorBoundariesThatAlreadyFailed = null;

    // Used for performance tracking.
    var interruptedBy = null;

    var stashedWorkInProgressProperties = void 0;
    var replayUnitOfWork = void 0;
    var mayReplayFailedUnitOfWork = void 0;
    var isReplayingFailedUnitOfWork = void 0;
    var originalReplayError = void 0;
    var rethrowOriginalError = void 0;
    {
      stashedWorkInProgressProperties = null;
      mayReplayFailedUnitOfWork = true;
      isReplayingFailedUnitOfWork = false;
      originalReplayError = null;
      replayUnitOfWork = function (failedUnitOfWork, thrownValue, isYieldy) {
        if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
          // Don't replay promises. Treat everything else like an error.
          // TODO: Need to figure out a different strategy if/when we add
          // support for catching other types.
          return;
        }

        // Restore the original state of the work-in-progress
        if (stashedWorkInProgressProperties === null) {
          // This should never happen. Don't throw because this code is DEV-only.
          warningWithoutStack$1(false, 'Could not replay rendering after an error. This is likely a bug in React. ' + 'Please file an issue.');
          return;
        }
        assignFiberPropertiesInDEV(failedUnitOfWork, stashedWorkInProgressProperties);

        switch (failedUnitOfWork.tag) {
          case HostRoot:
            popHostContainer(failedUnitOfWork);
            popTopLevelContextObject(failedUnitOfWork);
            break;
          case HostComponent:
            popHostContext(failedUnitOfWork);
            break;
          case ClassComponent:
            {
              var Component = failedUnitOfWork.type;
              if (isContextProvider(Component)) {
                popContext(failedUnitOfWork);
              }
              break;
            }
          case HostPortal:
            popHostContainer(failedUnitOfWork);
            break;
          case ContextProvider:
            popProvider(failedUnitOfWork);
            break;
        }
        // Replay the begin phase.
        isReplayingFailedUnitOfWork = true;
        originalReplayError = thrownValue;
        invokeGuardedCallback(null, workLoop, null, isYieldy);
        isReplayingFailedUnitOfWork = false;
        originalReplayError = null;
        if (hasCaughtError()) {
          var replayError = clearCaughtError();
          if (replayError != null && thrownValue != null) {
            try {
              // Reading the expando property is intentionally
              // inside `try` because it might be a getter or Proxy.
              if (replayError._suppressLogging) {
                // Also suppress logging for the original error.
                thrownValue._suppressLogging = true;
              }
            } catch (inner) {
              // Ignore.
            }
          }
        } else {
          // If the begin phase did not fail the second time, set this pointer
          // back to the original value.
          nextUnitOfWork = failedUnitOfWork;
        }
      };
      rethrowOriginalError = function () {
        throw originalReplayError;
      };
    }

    function resetStack() {
      if (nextUnitOfWork !== null) {
        var interruptedWork = nextUnitOfWork.return;
        while (interruptedWork !== null) {
          unwindInterruptedWork(interruptedWork);
          interruptedWork = interruptedWork.return;
        }
      }

      {
        ReactStrictModeWarnings.discardPendingWarnings();
        checkThatStackIsEmpty();
      }

      nextRoot = null;
      nextRenderExpirationTime = NoWork;
      nextLatestAbsoluteTimeoutMs = -1;
      nextRenderDidError = false;
      nextUnitOfWork = null;
    }

    function commitAllHostEffects() {
      while (nextEffect !== null) {
        {
          setCurrentFiber(nextEffect);
        }
        recordEffect();

        var effectTag = nextEffect.effectTag;

        if (effectTag & ContentReset) {
          commitResetTextContent(nextEffect);
        }

        if (effectTag & Ref) {
          var current$$1 = nextEffect.alternate;
          if (current$$1 !== null) {
            commitDetachRef(current$$1);
          }
        }

        // The following switch statement is only concerned about placement,
        // updates, and deletions. To avoid needing to add a case for every
        // possible bitmap value, we remove the secondary effects from the
        // effect tag and switch on that value.
        var primaryEffectTag = effectTag & (Placement | Update | Deletion);
        switch (primaryEffectTag) {
          case Placement:
            {
              commitPlacement(nextEffect);
              // Clear the "placement" from effect tag so that we know that this is inserted, before
              // any life-cycles like componentDidMount gets called.
              // TODO: findDOMNode doesn't rely on this any more but isMounted
              // does and isMounted is deprecated anyway so we should be able
              // to kill this.
              nextEffect.effectTag &= ~Placement;
              break;
            }
          case PlacementAndUpdate:
            {
              // Placement
              commitPlacement(nextEffect);
              // Clear the "placement" from effect tag so that we know that this is inserted, before
              // any life-cycles like componentDidMount gets called.
              nextEffect.effectTag &= ~Placement;

              // Update
              var _current = nextEffect.alternate;
              commitWork(_current, nextEffect);
              break;
            }
          case Update:
            {
              var _current2 = nextEffect.alternate;
              commitWork(_current2, nextEffect);
              break;
            }
          case Deletion:
            {
              commitDeletion(nextEffect);
              break;
            }
        }
        nextEffect = nextEffect.nextEffect;
      }

      {
        resetCurrentFiber();
      }
    }

    function commitBeforeMutationLifecycles() {
      while (nextEffect !== null) {
        {
          setCurrentFiber(nextEffect);
        }

        var effectTag = nextEffect.effectTag;
        if (effectTag & Snapshot) {
          recordEffect();
          var current$$1 = nextEffect.alternate;
          commitBeforeMutationLifeCycles(current$$1, nextEffect);
        }

        nextEffect = nextEffect.nextEffect;
      }

      {
        resetCurrentFiber();
      }
    }

    function commitAllLifeCycles(finishedRoot, committedExpirationTime) {
      {
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
        ReactStrictModeWarnings.flushLegacyContextWarning();
      }
      while (nextEffect !== null) {
        var effectTag = nextEffect.effectTag;

        if (effectTag & (Update | Callback)) {
          recordEffect();
          var current$$1 = nextEffect.alternate;
          commitLifeCycles(finishedRoot, current$$1, nextEffect, committedExpirationTime);
        }

        if (effectTag & Ref) {
          recordEffect();
          commitAttachRef(nextEffect);
        }

        nextEffect = nextEffect.nextEffect;
      }
    }

    function isAlreadyFailedLegacyErrorBoundary(instance) {
      return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }

    function markLegacyErrorBoundaryAsFailed(instance) {
      if (legacyErrorBoundariesThatAlreadyFailed === null) {
        legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
      } else {
        legacyErrorBoundariesThatAlreadyFailed.add(instance);
      }
    }

    function flushPassiveEffects() {
      if (passiveEffectCallback !== null) {
        scheduler$$1.unstable_cancelCallback(passiveEffectCallbackHandle);
        // We call the scheduled callback instead of commitPassiveEffects directly
        // to ensure tracing works correctly.
        passiveEffectCallback();
      }
    }

    function commitRoot(root, finishedWork) {
      isWorking = true;
      isCommitting$1 = true;
      startCommitTimer();

      !(root.current !== finishedWork) ? invariant(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      var committedExpirationTime = root.pendingCommitExpirationTime;
      !(committedExpirationTime !== NoWork) ? invariant(false, 'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      root.pendingCommitExpirationTime = NoWork;

      // Update the pending priority levels to account for the work that we are
      // about to commit. This needs to happen before calling the lifecycles, since
      // they may schedule additional updates.
      var updateExpirationTimeBeforeCommit = finishedWork.expirationTime;
      var childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;
      var earliestRemainingTimeBeforeCommit = childExpirationTimeBeforeCommit > updateExpirationTimeBeforeCommit ? childExpirationTimeBeforeCommit : updateExpirationTimeBeforeCommit;
      markCommittedPriorityLevels(root, earliestRemainingTimeBeforeCommit);

      var prevInteractions = null;
      {
        // Restore any pending interactions at this point,
        // So that cascading work triggered during the render phase will be accounted for.
        prevInteractions = tracing$$1.__interactionsRef.current;
        tracing$$1.__interactionsRef.current = root.memoizedInteractions;
      }

      // Reset this to null before calling lifecycles
      ReactCurrentOwner$2.current = null;

      var firstEffect = void 0;
      if (finishedWork.effectTag > PerformedWork) {
        // A fiber's effect list consists only of its children, not itself. So if
        // the root has an effect, we need to add it to the end of the list. The
        // resulting list is the set that would belong to the root's parent, if
        // it had one; that is, all the effects in the tree including the root.
        if (finishedWork.lastEffect !== null) {
          finishedWork.lastEffect.nextEffect = finishedWork;
          firstEffect = finishedWork.firstEffect;
        } else {
          firstEffect = finishedWork;
        }
      } else {
        // There is no effect on the root.
        firstEffect = finishedWork.firstEffect;
      }

      prepareForCommit(root.containerInfo);

      // Invoke instances of getSnapshotBeforeUpdate before mutation.
      nextEffect = firstEffect;
      startCommitSnapshotEffectsTimer();
      while (nextEffect !== null) {
        var didError = false;
        var error = void 0;
        {
          invokeGuardedCallback(null, commitBeforeMutationLifecycles, null);
          if (hasCaughtError()) {
            didError = true;
            error = clearCaughtError();
          }
        }
        if (didError) {
          !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          captureCommitPhaseError(nextEffect, error);
          // Clean-up
          if (nextEffect !== null) {
            nextEffect = nextEffect.nextEffect;
          }
        }
      }
      stopCommitSnapshotEffectsTimer();

      {
        // Mark the current commit time to be shared by all Profilers in this batch.
        // This enables them to be grouped later.
        recordCommitTime();
      }

      // Commit all the side-effects within a tree. We'll do this in two passes.
      // The first pass performs all the host insertions, updates, deletions and
      // ref unmounts.
      nextEffect = firstEffect;
      startCommitHostEffectsTimer();
      while (nextEffect !== null) {
        var _didError = false;
        var _error = void 0;
        {
          invokeGuardedCallback(null, commitAllHostEffects, null);
          if (hasCaughtError()) {
            _didError = true;
            _error = clearCaughtError();
          }
        }
        if (_didError) {
          !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          captureCommitPhaseError(nextEffect, _error);
          // Clean-up
          if (nextEffect !== null) {
            nextEffect = nextEffect.nextEffect;
          }
        }
      }
      stopCommitHostEffectsTimer();

      resetAfterCommit(root.containerInfo);

      // The work-in-progress tree is now the current tree. This must come after
      // the first pass of the commit phase, so that the previous tree is still
      // current during componentWillUnmount, but before the second pass, so that
      // the finished work is current during componentDidMount/Update.
      root.current = finishedWork;

      // In the second pass we'll perform all life-cycles and ref callbacks.
      // Life-cycles happen as a separate pass so that all placements, updates,
      // and deletions in the entire tree have already been invoked.
      // This pass also triggers any renderer-specific initial effects.
      nextEffect = firstEffect;
      startCommitLifeCyclesTimer();
      while (nextEffect !== null) {
        var _didError2 = false;
        var _error2 = void 0;
        {
          invokeGuardedCallback(null, commitAllLifeCycles, null, root, committedExpirationTime);
          if (hasCaughtError()) {
            _didError2 = true;
            _error2 = clearCaughtError();
          }
        }
        if (_didError2) {
          !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          captureCommitPhaseError(nextEffect, _error2);
          if (nextEffect !== null) {
            nextEffect = nextEffect.nextEffect;
          }
        }
      }

      isCommitting$1 = false;
      isWorking = false;
      stopCommitLifeCyclesTimer();
      stopCommitTimer();
      onCommitRoot(finishedWork.stateNode);

      var updateExpirationTimeAfterCommit = finishedWork.expirationTime;
      var childExpirationTimeAfterCommit = finishedWork.childExpirationTime;
      var earliestRemainingTimeAfterCommit = childExpirationTimeAfterCommit > updateExpirationTimeAfterCommit ? childExpirationTimeAfterCommit : updateExpirationTimeAfterCommit;
      if (earliestRemainingTimeAfterCommit === NoWork) {
        // If there's no remaining work, we can clear the set of already failed
        // error boundaries.
        legacyErrorBoundariesThatAlreadyFailed = null;
      }
      onCommit(root, earliestRemainingTimeAfterCommit);

      {
        tracing$$1.__interactionsRef.current = prevInteractions;

        var subscriber = void 0;

        try {
          subscriber = tracing$$1.__subscriberRef.current;
          if (subscriber !== null && root.memoizedInteractions.size > 0) {
            var threadID = computeThreadID(committedExpirationTime, root.interactionThreadID);
            subscriber.onWorkStopped(root.memoizedInteractions, threadID);
          }
        } catch (error) {
          // It's not safe for commitRoot() to throw.
          // Store the error for now and we'll re-throw in finishRendering().
          if (!hasUnhandledError) {
            hasUnhandledError = true;
            unhandledError = error;
          }
        } finally {
          // Clear completed interactions from the pending Map.
          // Unless the render was suspended or cascading work was scheduled,
          // In which case– leave pending interactions until the subsequent render.
          var pendingInteractionMap = root.pendingInteractionMap;
          pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
            // Only decrement the pending interaction count if we're done.
            // If there's still work at the current priority,
            // That indicates that we are waiting for suspense data.
            if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
              pendingInteractionMap.delete(scheduledExpirationTime);

              scheduledInteractions.forEach(function (interaction) {
                interaction.__count--;

                if (subscriber !== null && interaction.__count === 0) {
                  try {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  } catch (error) {
                    // It's not safe for commitRoot() to throw.
                    // Store the error for now and we'll re-throw in finishRendering().
                    if (!hasUnhandledError) {
                      hasUnhandledError = true;
                      unhandledError = error;
                    }
                  }
                }
              });
            }
          });
        }
      }
    }

    function resetChildExpirationTime(workInProgress, renderTime) {
      if (renderTime !== Never && workInProgress.childExpirationTime === Never) {
        // The children of this component are hidden. Don't bubble their
        // expiration times.
        return;
      }

      var newChildExpirationTime = NoWork;

      // Bubble up the earliest expiration time.
      if (workInProgress.mode & ProfileMode) {
        // We're in profiling mode.
        // Let's use this same traversal to update the render durations.
        var actualDuration = workInProgress.actualDuration;
        var treeBaseDuration = workInProgress.selfBaseDuration;

        // When a fiber is cloned, its actualDuration is reset to 0.
        // This value will only be updated if work is done on the fiber (i.e. it doesn't bailout).
        // When work is done, it should bubble to the parent's actualDuration.
        // If the fiber has not been cloned though, (meaning no work was done),
        // Then this value will reflect the amount of time spent working on a previous render.
        // In that case it should not bubble.
        // We determine whether it was cloned by comparing the child pointer.
        var shouldBubbleActualDurations = workInProgress.alternate === null || workInProgress.child !== workInProgress.alternate.child;

        var child = workInProgress.child;
        while (child !== null) {
          var childUpdateExpirationTime = child.expirationTime;
          var childChildExpirationTime = child.childExpirationTime;
          if (childUpdateExpirationTime > newChildExpirationTime) {
            newChildExpirationTime = childUpdateExpirationTime;
          }
          if (childChildExpirationTime > newChildExpirationTime) {
            newChildExpirationTime = childChildExpirationTime;
          }
          if (shouldBubbleActualDurations) {
            actualDuration += child.actualDuration;
          }
          treeBaseDuration += child.treeBaseDuration;
          child = child.sibling;
        }
        workInProgress.actualDuration = actualDuration;
        workInProgress.treeBaseDuration = treeBaseDuration;
      } else {
        var _child = workInProgress.child;
        while (_child !== null) {
          var _childUpdateExpirationTime = _child.expirationTime;
          var _childChildExpirationTime = _child.childExpirationTime;
          if (_childUpdateExpirationTime > newChildExpirationTime) {
            newChildExpirationTime = _childUpdateExpirationTime;
          }
          if (_childChildExpirationTime > newChildExpirationTime) {
            newChildExpirationTime = _childChildExpirationTime;
          }
          _child = _child.sibling;
        }
      }

      workInProgress.childExpirationTime = newChildExpirationTime;
    }

    function completeUnitOfWork(workInProgress) {
      // Attempt to complete the current unit of work, then move to the
      // next sibling. If there are no more siblings, return to the
      // parent fiber.
      while (true) {
        // The current, flushed, state of this fiber is the alternate.
        // Ideally nothing should rely on this, but relying on it here
        // means that we don't need an additional field on the work in
        // progress.
        var current$$1 = workInProgress.alternate;
        {
          setCurrentFiber(workInProgress);
        }

        var returnFiber = workInProgress.return;
        var siblingFiber = workInProgress.sibling;

        if ((workInProgress.effectTag & Incomplete) === NoEffect) {
          {
            // Don't replay if it fails during completion phase.
            mayReplayFailedUnitOfWork = false;
          }
          // This fiber completed.
          // Remember we're completing this unit so we can find a boundary if it fails.
          nextUnitOfWork = workInProgress;
          {
            if (workInProgress.mode & ProfileMode) {
              startProfilerTimer(workInProgress);
            }
            nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);
            if (workInProgress.mode & ProfileMode) {
              // Update render duration assuming we didn't error.
              stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
            }
          }
          {
            // We're out of completion phase so replaying is fine now.
            mayReplayFailedUnitOfWork = true;
          }
          stopWorkTimer(workInProgress);
          resetChildExpirationTime(workInProgress, nextRenderExpirationTime);
          {
            resetCurrentFiber();
          }

          if (nextUnitOfWork !== null) {
            // Completing this fiber spawned new work. Work on that next.
            return nextUnitOfWork;
          }

          if (returnFiber !== null &&
          // Do not append effects to parents if a sibling failed to complete
          (returnFiber.effectTag & Incomplete) === NoEffect) {
            // Append all the effects of the subtree and this fiber onto the effect
            // list of the parent. The completion order of the children affects the
            // side-effect order.
            if (returnFiber.firstEffect === null) {
              returnFiber.firstEffect = workInProgress.firstEffect;
            }
            if (workInProgress.lastEffect !== null) {
              if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
              }
              returnFiber.lastEffect = workInProgress.lastEffect;
            }

            // If this fiber had side-effects, we append it AFTER the children's
            // side-effects. We can perform certain side-effects earlier if
            // needed, by doing multiple passes over the effect list. We don't want
            // to schedule our own side-effect on our own list because if end up
            // reusing children we'll schedule this effect onto itself since we're
            // at the end.
            var effectTag = workInProgress.effectTag;
            // Skip both NoWork and PerformedWork tags when creating the effect list.
            // PerformedWork effect is read by React DevTools but shouldn't be committed.
            if (effectTag > PerformedWork) {
              if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = workInProgress;
              } else {
                returnFiber.firstEffect = workInProgress;
              }
              returnFiber.lastEffect = workInProgress;
            }
          }

          if (siblingFiber !== null) {
            // If there is more work to do in this returnFiber, do that next.
            return siblingFiber;
          } else if (returnFiber !== null) {
            // If there's no more work in this returnFiber. Complete the returnFiber.
            workInProgress = returnFiber;
            continue;
          } else {
            // We've reached the root.
            return null;
          }
        } else {
          if (workInProgress.mode & ProfileMode) {
            // Record the render duration for the fiber that errored.
            stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);

            // Include the time spent working on failed children before continuing.
            var actualDuration = workInProgress.actualDuration;
            var child = workInProgress.child;
            while (child !== null) {
              actualDuration += child.actualDuration;
              child = child.sibling;
            }
            workInProgress.actualDuration = actualDuration;
          }

          // This fiber did not complete because something threw. Pop values off
          // the stack without entering the complete phase. If this is a boundary,
          // capture values if possible.
          var next = unwindWork(workInProgress, nextRenderExpirationTime);
          // Because this fiber did not complete, don't reset its expiration time.
          if (workInProgress.effectTag & DidCapture) {
            // Restarting an error boundary
            stopFailedWorkTimer(workInProgress);
          } else {
            stopWorkTimer(workInProgress);
          }

          {
            resetCurrentFiber();
          }

          if (next !== null) {
            stopWorkTimer(workInProgress);

            // If completing this work spawned new work, do that next. We'll come
            // back here again.
            // Since we're restarting, remove anything that is not a host effect
            // from the effect tag.
            next.effectTag &= HostEffectMask;
            return next;
          }

          if (returnFiber !== null) {
            // Mark the parent fiber as incomplete and clear its effect list.
            returnFiber.firstEffect = returnFiber.lastEffect = null;
            returnFiber.effectTag |= Incomplete;
          }

          if (siblingFiber !== null) {
            // If there is more work to do in this returnFiber, do that next.
            return siblingFiber;
          } else if (returnFiber !== null) {
            // If there's no more work in this returnFiber. Complete the returnFiber.
            workInProgress = returnFiber;
            continue;
          } else {
            return null;
          }
        }
      }

      // Without this explicit null return Flow complains of invalid return type
      // TODO Remove the above while(true) loop
      // eslint-disable-next-line no-unreachable
      return null;
    }

    function performUnitOfWork(workInProgress) {
      // The current, flushed, state of this fiber is the alternate.
      // Ideally nothing should rely on this, but relying on it here
      // means that we don't need an additional field on the work in
      // progress.
      var current$$1 = workInProgress.alternate;

      // See if beginning this work spawns more work.
      startWorkTimer(workInProgress);
      {
        setCurrentFiber(workInProgress);
      }

      {
        stashedWorkInProgressProperties = assignFiberPropertiesInDEV(stashedWorkInProgressProperties, workInProgress);
      }

      var next = void 0;
      {
        if (workInProgress.mode & ProfileMode) {
          startProfilerTimer(workInProgress);
        }

        next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);
        workInProgress.memoizedProps = workInProgress.pendingProps;

        if (workInProgress.mode & ProfileMode) {
          // Record the render duration assuming we didn't bailout (or error).
          stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
        }
      }

      {
        resetCurrentFiber();
        if (isReplayingFailedUnitOfWork) {
          // Currently replaying a failed unit of work. This should be unreachable,
          // because the render phase is meant to be idempotent, and it should
          // have thrown again. Since it didn't, rethrow the original error, so
          // React's internal stack is not misaligned.
          rethrowOriginalError();
        }
      }

      if (next === null) {
        // If this doesn't spawn new work, complete the current work.
        next = completeUnitOfWork(workInProgress);
      }

      ReactCurrentOwner$2.current = null;

      return next;
    }

    function workLoop(isYieldy) {
      if (!isYieldy) {
        // Flush work without yielding
        while (nextUnitOfWork !== null) {
          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        }
      } else {
        // Flush asynchronous work until there's a higher priority event
        while (nextUnitOfWork !== null && !shouldYieldToRenderer()) {
          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        }
      }
    }

    function renderRoot(root, isYieldy) {
      !!isWorking ? invariant(false, 'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;

      flushPassiveEffects();

      isWorking = true;
      {
        ReactCurrentOwner$2.currentDispatcher = DispatcherWithoutHooks;
      }

      var expirationTime = root.nextExpirationTimeToWorkOn;

      // Check if we're starting from a fresh stack, or if we're resuming from
      // previously yielded work.
      if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || nextUnitOfWork === null) {
        // Reset the stack and start working from the root.
        resetStack();
        nextRoot = root;
        nextRenderExpirationTime = expirationTime;
        nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime);
        root.pendingCommitExpirationTime = NoWork;

        {
          // Determine which interactions this batch of work currently includes,
          // So that we can accurately attribute time spent working on it,
          var interactions = new Set();
          root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
            if (scheduledExpirationTime >= expirationTime) {
              scheduledInteractions.forEach(function (interaction) {
                return interactions.add(interaction);
              });
            }
          });

          // Store the current set of interactions on the FiberRoot for a few reasons:
          // We can re-use it in hot functions like renderRoot() without having to recalculate it.
          // We will also use it in commitWork() to pass to any Profiler onRender() hooks.
          // This also provides DevTools with a way to access it when the onCommitRoot() hook is called.
          root.memoizedInteractions = interactions;

          if (interactions.size > 0) {
            var subscriber = tracing$$1.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(expirationTime, root.interactionThreadID);
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error) {
                // Work thrown by an interaction tracing subscriber should be rethrown,
                // But only once it's safe (to avoid leaveing the scheduler in an invalid state).
                // Store the error for now and we'll re-throw in finishRendering().
                if (!hasUnhandledError) {
                  hasUnhandledError = true;
                  unhandledError = error;
                }
              }
            }
          }
        }
      }

      var prevInteractions = null;
      {
        // We're about to start new traced work.
        // Restore pending interactions so cascading work triggered during the render phase will be accounted for.
        prevInteractions = tracing$$1.__interactionsRef.current;
        tracing$$1.__interactionsRef.current = root.memoizedInteractions;
      }

      var didFatal = false;

      startWorkLoopTimer(nextUnitOfWork);

      do {
        try {
          workLoop(isYieldy);
        } catch (thrownValue) {
          resetContextDependences();
          resetHooks();

          // Reset in case completion throws.
          // This is only used in DEV and when replaying is on.
          var mayReplay = void 0;
          {
            mayReplay = mayReplayFailedUnitOfWork;
            mayReplayFailedUnitOfWork = true;
          }

          if (nextUnitOfWork === null) {
            // This is a fatal error.
            didFatal = true;
            onUncaughtError(thrownValue);
          } else {
            if (nextUnitOfWork.mode & ProfileMode) {
              // Record the time spent rendering before an error was thrown.
              // This avoids inaccurate Profiler durations in the case of a suspended render.
              stopProfilerTimerIfRunningAndRecordDelta(nextUnitOfWork, true);
            }

            {
              // Reset global debug state
              // We assume this is defined in DEV
              resetCurrentlyProcessingQueue();
            }

            {
              if (mayReplay) {
                var failedUnitOfWork = nextUnitOfWork;
                replayUnitOfWork(failedUnitOfWork, thrownValue, isYieldy);
              }
            }

            // TODO: we already know this isn't true in some cases.
            // At least this shows a nicer error message until we figure out the cause.
            // https://github.com/facebook/react/issues/12449#issuecomment-386727431
            !(nextUnitOfWork !== null) ? invariant(false, 'Failed to replay rendering after an error. This is likely caused by a bug in React. Please file an issue with a reproducing case to help us find it.') : void 0;

            var sourceFiber = nextUnitOfWork;
            var returnFiber = sourceFiber.return;
            if (returnFiber === null) {
              // This is the root. The root could capture its own errors. However,
              // we don't know if it errors before or after we pushed the host
              // context. This information is needed to avoid a stack mismatch.
              // Because we're not sure, treat this as a fatal error. We could track
              // which phase it fails in, but doesn't seem worth it. At least
              // for now.
              didFatal = true;
              onUncaughtError(thrownValue);
            } else {
              throwException(root, returnFiber, sourceFiber, thrownValue, nextRenderExpirationTime);
              nextUnitOfWork = completeUnitOfWork(sourceFiber);
              continue;
            }
          }
        }
        break;
      } while (true);

      {
        // Traced work is done for now; restore the previous interactions.
        tracing$$1.__interactionsRef.current = prevInteractions;
      }

      // We're done performing work. Time to clean up.
      isWorking = false;
      ReactCurrentOwner$2.currentDispatcher = null;
      resetContextDependences();
      resetHooks();

      // Yield back to main thread.
      if (didFatal) {
        var _didCompleteRoot = false;
        stopWorkLoopTimer(interruptedBy, _didCompleteRoot);
        interruptedBy = null;
        // There was a fatal error.
        {
          resetStackAfterFatalErrorInDev();
        }
        // `nextRoot` points to the in-progress root. A non-null value indicates
        // that we're in the middle of an async render. Set it to null to indicate
        // there's no more work to be done in the current batch.
        nextRoot = null;
        onFatal(root);
        return;
      }

      if (nextUnitOfWork !== null) {
        // There's still remaining async work in this tree, but we ran out of time
        // in the current frame. Yield back to the renderer. Unless we're
        // interrupted by a higher priority update, we'll continue later from where
        // we left off.
        var _didCompleteRoot2 = false;
        stopWorkLoopTimer(interruptedBy, _didCompleteRoot2);
        interruptedBy = null;
        onYield(root);
        return;
      }

      // We completed the whole tree.
      var didCompleteRoot = true;
      stopWorkLoopTimer(interruptedBy, didCompleteRoot);
      var rootWorkInProgress = root.current.alternate;
      !(rootWorkInProgress !== null) ? invariant(false, 'Finished root should have a work-in-progress. This error is likely caused by a bug in React. Please file an issue.') : void 0;

      // `nextRoot` points to the in-progress root. A non-null value indicates
      // that we're in the middle of an async render. Set it to null to indicate
      // there's no more work to be done in the current batch.
      nextRoot = null;
      interruptedBy = null;

      if (nextRenderDidError) {
        // There was an error
        if (hasLowerPriorityWork(root, expirationTime)) {
          // There's lower priority work. If so, it may have the effect of fixing
          // the exception that was just thrown. Exit without committing. This is
          // similar to a suspend, but without a timeout because we're not waiting
          // for a promise to resolve. React will restart at the lower
          // priority level.
          markSuspendedPriorityLevel(root, expirationTime);
          var suspendedExpirationTime = expirationTime;
          var rootExpirationTime = root.expirationTime;
          onSuspend(root, rootWorkInProgress, suspendedExpirationTime, rootExpirationTime, -1 // Indicates no timeout
          );
          return;
        } else if (
        // There's no lower priority work, but we're rendering asynchronously.
        // Synchronsouly attempt to render the same level one more time. This is
        // similar to a suspend, but without a timeout because we're not waiting
        // for a promise to resolve.
        !root.didError && isYieldy) {
          root.didError = true;
          var _suspendedExpirationTime = root.nextExpirationTimeToWorkOn = expirationTime;
          var _rootExpirationTime = root.expirationTime = Sync;
          onSuspend(root, rootWorkInProgress, _suspendedExpirationTime, _rootExpirationTime, -1 // Indicates no timeout
          );
          return;
        }
      }

      if (isYieldy && nextLatestAbsoluteTimeoutMs !== -1) {
        // The tree was suspended.
        var _suspendedExpirationTime2 = expirationTime;
        markSuspendedPriorityLevel(root, _suspendedExpirationTime2);

        // Find the earliest uncommitted expiration time in the tree, including
        // work that is suspended. The timeout threshold cannot be longer than
        // the overall expiration.
        var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, expirationTime);
        var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);
        if (earliestExpirationTimeMs < nextLatestAbsoluteTimeoutMs) {
          nextLatestAbsoluteTimeoutMs = earliestExpirationTimeMs;
        }

        // Subtract the current time from the absolute timeout to get the number
        // of milliseconds until the timeout. In other words, convert an absolute
        // timestamp to a relative time. This is the value that is passed
        // to `setTimeout`.
        var currentTimeMs = expirationTimeToMs(requestCurrentTime());
        var msUntilTimeout = nextLatestAbsoluteTimeoutMs - currentTimeMs;
        msUntilTimeout = msUntilTimeout < 0 ? 0 : msUntilTimeout;

        // TODO: Account for the Just Noticeable Difference

        var _rootExpirationTime2 = root.expirationTime;
        onSuspend(root, rootWorkInProgress, _suspendedExpirationTime2, _rootExpirationTime2, msUntilTimeout);
        return;
      }

      // Ready to commit.
      onComplete(root, rootWorkInProgress, expirationTime);
    }

    function captureCommitPhaseError(sourceFiber, value) {
      var expirationTime = Sync;
      var fiber = sourceFiber.return;
      while (fiber !== null) {
        switch (fiber.tag) {
          case ClassComponent:
            var ctor = fiber.type;
            var instance = fiber.stateNode;
            if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
              var errorInfo = createCapturedValue(value, sourceFiber);
              var update = createClassErrorUpdate(fiber, errorInfo, expirationTime);
              enqueueUpdate(fiber, update);
              scheduleWork(fiber, expirationTime);
              return;
            }
            break;
          case HostRoot:
            {
              var _errorInfo = createCapturedValue(value, sourceFiber);
              var _update = createRootErrorUpdate(fiber, _errorInfo, expirationTime);
              enqueueUpdate(fiber, _update);
              scheduleWork(fiber, expirationTime);
              return;
            }
        }
        fiber = fiber.return;
      }

      if (sourceFiber.tag === HostRoot) {
        // Error was thrown at the root. There is no parent, so the root
        // itself should capture it.
        var rootFiber = sourceFiber;
        var _errorInfo2 = createCapturedValue(value, rootFiber);
        var _update2 = createRootErrorUpdate(rootFiber, _errorInfo2, expirationTime);
        enqueueUpdate(rootFiber, _update2);
        scheduleWork(rootFiber, expirationTime);
      }
    }

    function computeThreadID(expirationTime, interactionThreadID) {
      // Interaction threads are unique per root and expiration time.
      return expirationTime * 1000 + interactionThreadID;
    }

    // Creates a unique async expiration time.
    function computeUniqueAsyncExpiration() {
      var currentTime = requestCurrentTime();
      var result = computeAsyncExpiration(currentTime);
      if (result >= lastUniqueAsyncExpiration) {
        // Since we assume the current time monotonically increases, we only hit
        // this branch when computeUniqueAsyncExpiration is fired multiple times
        // within a 200ms window (or whatever the async bucket size is).
        result = lastUniqueAsyncExpiration - 1;
      }
      lastUniqueAsyncExpiration = result;
      return lastUniqueAsyncExpiration;
    }

    function computeExpirationForFiber(currentTime, fiber) {
      var expirationTime = void 0;
      if (expirationContext !== NoWork) {
        // An explicit expiration context was set;
        expirationTime = expirationContext;
      } else if (isWorking) {
        if (isCommitting$1) {
          // Updates that occur during the commit phase should have sync priority
          // by default.
          expirationTime = Sync;
        } else {
          // Updates during the render phase should expire at the same time as
          // the work that is being rendered.
          expirationTime = nextRenderExpirationTime;
        }
      } else {
        // No explicit expiration context was set, and we're not currently
        // performing work. Calculate a new expiration time.
        if (fiber.mode & ConcurrentMode) {
          if (isBatchingInteractiveUpdates) {
            // This is an interactive update
            expirationTime = computeInteractiveExpiration(currentTime);
          } else {
            // This is an async update
            expirationTime = computeAsyncExpiration(currentTime);
          }
          // If we're in the middle of rendering a tree, do not update at the same
          // expiration time that is already rendering.
          if (nextRoot !== null && expirationTime === nextRenderExpirationTime) {
            expirationTime -= 1;
          }
        } else {
          // This is a sync update
          expirationTime = Sync;
        }
      }
      if (isBatchingInteractiveUpdates) {
        // This is an interactive update. Keep track of the lowest pending
        // interactive expiration time. This allows us to synchronously flush
        // all interactive updates when needed.
        if (lowestPriorityPendingInteractiveExpirationTime === NoWork || expirationTime < lowestPriorityPendingInteractiveExpirationTime) {
          lowestPriorityPendingInteractiveExpirationTime = expirationTime;
        }
      }
      return expirationTime;
    }

    function renderDidSuspend(root, absoluteTimeoutMs, suspendedTime) {
      // Schedule the timeout.
      if (absoluteTimeoutMs >= 0 && nextLatestAbsoluteTimeoutMs < absoluteTimeoutMs) {
        nextLatestAbsoluteTimeoutMs = absoluteTimeoutMs;
      }
    }

    function renderDidError() {
      nextRenderDidError = true;
    }

    function retrySuspendedRoot(root, boundaryFiber, sourceFiber, suspendedTime) {
      var retryTime = void 0;

      if (isPriorityLevelSuspended(root, suspendedTime)) {
        // Ping at the original level
        retryTime = suspendedTime;

        markPingedPriorityLevel(root, retryTime);
      } else {
        // Suspense already timed out. Compute a new expiration time
        var currentTime = requestCurrentTime();
        retryTime = computeExpirationForFiber(currentTime, boundaryFiber);
        markPendingPriorityLevel(root, retryTime);
      }

      // TODO: If the suspense fiber has already rendered the primary children
      // without suspending (that is, all of the promises have already resolved),
      // we should not trigger another update here. One case this happens is when
      // we are in sync mode and a single promise is thrown both on initial render
      // and on update; we attach two .then(retrySuspendedRoot) callbacks and each
      // one performs Sync work, rerendering the Suspense.

      if ((boundaryFiber.mode & ConcurrentMode) !== NoContext) {
        if (root === nextRoot && nextRenderExpirationTime === suspendedTime) {
          // Received a ping at the same priority level at which we're currently
          // rendering. Restart from the root.
          nextRoot = null;
        }
      }

      scheduleWorkToRoot(boundaryFiber, retryTime);
      if ((boundaryFiber.mode & ConcurrentMode) === NoContext) {
        // Outside of concurrent mode, we must schedule an update on the source
        // fiber, too, since it already committed in an inconsistent state and
        // therefore does not have any pending work.
        scheduleWorkToRoot(sourceFiber, retryTime);
        var sourceTag = sourceFiber.tag;
        if (sourceTag === ClassComponent && sourceFiber.stateNode !== null) {
          // When we try rendering again, we should not reuse the current fiber,
          // since it's known to be in an inconsistent state. Use a force updte to
          // prevent a bail out.
          var update = createUpdate(retryTime);
          update.tag = ForceUpdate;
          enqueueUpdate(sourceFiber, update);
        }
      }

      var rootExpirationTime = root.expirationTime;
      if (rootExpirationTime !== NoWork) {
        requestWork(root, rootExpirationTime);
      }
    }

    function scheduleWorkToRoot(fiber, expirationTime) {
      recordScheduleUpdate();

      {
        if (fiber.tag === ClassComponent) {
          var instance = fiber.stateNode;
          warnAboutInvalidUpdates(instance);
        }
      }

      // Update the source fiber's expiration time
      if (fiber.expirationTime < expirationTime) {
        fiber.expirationTime = expirationTime;
      }
      var alternate = fiber.alternate;
      if (alternate !== null && alternate.expirationTime < expirationTime) {
        alternate.expirationTime = expirationTime;
      }
      // Walk the parent path to the root and update the child expiration time.
      var node = fiber.return;
      var root = null;
      if (node === null && fiber.tag === HostRoot) {
        root = fiber.stateNode;
      } else {
        while (node !== null) {
          alternate = node.alternate;
          if (node.childExpirationTime < expirationTime) {
            node.childExpirationTime = expirationTime;
            if (alternate !== null && alternate.childExpirationTime < expirationTime) {
              alternate.childExpirationTime = expirationTime;
            }
          } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
            alternate.childExpirationTime = expirationTime;
          }
          if (node.return === null && node.tag === HostRoot) {
            root = node.stateNode;
            break;
          }
          node = node.return;
        }
      }

      {
        if (root !== null) {
          var interactions = tracing$$1.__interactionsRef.current;
          if (interactions.size > 0) {
            var pendingInteractionMap = root.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(expirationTime);
            if (pendingInteractions != null) {
              interactions.forEach(function (interaction) {
                if (!pendingInteractions.has(interaction)) {
                  // Update the pending async work count for previously unscheduled interaction.
                  interaction.__count++;
                }

                pendingInteractions.add(interaction);
              });
            } else {
              pendingInteractionMap.set(expirationTime, new Set(interactions));

              // Update the pending async work count for the current interactions.
              interactions.forEach(function (interaction) {
                interaction.__count++;
              });
            }

            var subscriber = tracing$$1.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(expirationTime, root.interactionThreadID);
              subscriber.onWorkScheduled(interactions, threadID);
            }
          }
        }
      }
      return root;
    }

    function scheduleWork(fiber, expirationTime) {
      var root = scheduleWorkToRoot(fiber, expirationTime);
      if (root === null) {
        {
          switch (fiber.tag) {
            case ClassComponent:
              warnAboutUpdateOnUnmounted(fiber, true);
              break;
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
              warnAboutUpdateOnUnmounted(fiber, false);
              break;
          }
        }
        return;
      }

      if (!isWorking && nextRenderExpirationTime !== NoWork && expirationTime > nextRenderExpirationTime) {
        // This is an interruption. (Used for performance tracking.)
        interruptedBy = fiber;
        resetStack();
      }
      markPendingPriorityLevel(root, expirationTime);
      if (
      // If we're in the render phase, we don't need to schedule this root
      // for an update, because we'll do it before we exit...
      !isWorking || isCommitting$1 ||
      // ...unless this is a different root than the one we're rendering.
      nextRoot !== root) {
        var rootExpirationTime = root.expirationTime;
        requestWork(root, rootExpirationTime);
      }
      if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
        // Reset this back to zero so subsequent updates don't throw.
        nestedUpdateCount = 0;
        invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');
      }
    }

    function syncUpdates(fn, a, b, c, d) {
      var previousExpirationContext = expirationContext;
      expirationContext = Sync;
      try {
        return fn(a, b, c, d);
      } finally {
        expirationContext = previousExpirationContext;
      }
    }

    // TODO: Everything below this is written as if it has been lifted to the
    // renderers. I'll do this in a follow-up.

    // Linked-list of roots
    var firstScheduledRoot = null;
    var lastScheduledRoot = null;

    var callbackExpirationTime = NoWork;
    var callbackID = void 0;
    var isRendering = false;
    var nextFlushedRoot = null;
    var nextFlushedExpirationTime = NoWork;
    var lowestPriorityPendingInteractiveExpirationTime = NoWork;
    var hasUnhandledError = false;
    var unhandledError = null;

    var isBatchingUpdates = false;
    var isUnbatchingUpdates = false;
    var isBatchingInteractiveUpdates = false;

    var completedBatches = null;

    var originalStartTimeMs = scheduler$$1.unstable_now();
    var currentRendererTime = msToExpirationTime(originalStartTimeMs);
    var currentSchedulerTime = currentRendererTime;

    // Use these to prevent an infinite loop of nested updates
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var lastCommittedRootDuringThisBatch = null;

    function recomputeCurrentRendererTime() {
      var currentTimeMs = scheduler$$1.unstable_now() - originalStartTimeMs;
      currentRendererTime = msToExpirationTime(currentTimeMs);
    }

    function scheduleCallbackWithExpirationTime(root, expirationTime) {
      if (callbackExpirationTime !== NoWork) {
        // A callback is already scheduled. Check its expiration time (timeout).
        if (expirationTime < callbackExpirationTime) {
          // Existing callback has sufficient timeout. Exit.
          return;
        } else {
          if (callbackID !== null) {
            // Existing callback has insufficient timeout. Cancel and schedule a
            // new one.
            scheduler$$1.unstable_cancelCallback(callbackID);
          }
        }
        // The request callback timer is already running. Don't start a new one.
      } else {
        startRequestCallbackTimer();
      }

      callbackExpirationTime = expirationTime;
      var currentMs = scheduler$$1.unstable_now() - originalStartTimeMs;
      var expirationTimeMs = expirationTimeToMs(expirationTime);
      var timeout = expirationTimeMs - currentMs;
      callbackID = scheduler$$1.unstable_scheduleCallback(performAsyncWork, { timeout: timeout });
    }

    // For every call to renderRoot, one of onFatal, onComplete, onSuspend, and
    // onYield is called upon exiting. We use these in lieu of returning a tuple.
    // I've also chosen not to inline them into renderRoot because these will
    // eventually be lifted into the renderer.
    function onFatal(root) {
      root.finishedWork = null;
    }

    function onComplete(root, finishedWork, expirationTime) {
      root.pendingCommitExpirationTime = expirationTime;
      root.finishedWork = finishedWork;
    }

    function onSuspend(root, finishedWork, suspendedExpirationTime, rootExpirationTime, msUntilTimeout) {
      root.expirationTime = rootExpirationTime;
      if (msUntilTimeout === 0 && !shouldYieldToRenderer()) {
        // Don't wait an additional tick. Commit the tree immediately.
        root.pendingCommitExpirationTime = suspendedExpirationTime;
        root.finishedWork = finishedWork;
      } else if (msUntilTimeout > 0) {
        // Wait `msUntilTimeout` milliseconds before committing.
        root.timeoutHandle = scheduleTimeout(onTimeout.bind(null, root, finishedWork, suspendedExpirationTime), msUntilTimeout);
      }
    }

    function onYield(root) {
      root.finishedWork = null;
    }

    function onTimeout(root, finishedWork, suspendedExpirationTime) {
      // The root timed out. Commit it.
      root.pendingCommitExpirationTime = suspendedExpirationTime;
      root.finishedWork = finishedWork;
      // Read the current time before entering the commit phase. We can be
      // certain this won't cause tearing related to batching of event updates
      // because we're at the top of a timer event.
      recomputeCurrentRendererTime();
      currentSchedulerTime = currentRendererTime;
      flushRoot(root, suspendedExpirationTime);
    }

    function onCommit(root, expirationTime) {
      root.expirationTime = expirationTime;
      root.finishedWork = null;
    }

    function requestCurrentTime() {
      // requestCurrentTime is called by the scheduler to compute an expiration
      // time.
      //
      // Expiration times are computed by adding to the current time (the start
      // time). However, if two updates are scheduled within the same event, we
      // should treat their start times as simultaneous, even if the actual clock
      // time has advanced between the first and second call.

      // In other words, because expiration times determine how updates are batched,
      // we want all updates of like priority that occur within the same event to
      // receive the same expiration time. Otherwise we get tearing.
      //
      // We keep track of two separate times: the current "renderer" time and the
      // current "scheduler" time. The renderer time can be updated whenever; it
      // only exists to minimize the calls performance.now.
      //
      // But the scheduler time can only be updated if there's no pending work, or
      // if we know for certain that we're not in the middle of an event.

      if (isRendering) {
        // We're already rendering. Return the most recently read time.
        return currentSchedulerTime;
      }
      // Check if there's pending work.
      findHighestPriorityRoot();
      if (nextFlushedExpirationTime === NoWork || nextFlushedExpirationTime === Never) {
        // If there's no pending work, or if the pending work is offscreen, we can
        // read the current time without risk of tearing.
        recomputeCurrentRendererTime();
        currentSchedulerTime = currentRendererTime;
        return currentSchedulerTime;
      }
      // There's already pending work. We might be in the middle of a browser
      // event. If we were to read the current time, it could cause multiple updates
      // within the same event to receive different expiration times, leading to
      // tearing. Return the last read time. During the next idle callback, the
      // time will be updated.
      return currentSchedulerTime;
    }

    // requestWork is called by the scheduler whenever a root receives an update.
    // It's up to the renderer to call renderRoot at some point in the future.
    function requestWork(root, expirationTime) {
      addRootToSchedule(root, expirationTime);
      if (isRendering) {
        // Prevent reentrancy. Remaining work will be scheduled at the end of
        // the currently rendering batch.
        return;
      }

      if (isBatchingUpdates) {
        // Flush work at the end of the batch.
        if (isUnbatchingUpdates) {
          // ...unless we're inside unbatchedUpdates, in which case we should
          // flush it now.
          nextFlushedRoot = root;
          nextFlushedExpirationTime = Sync;
          performWorkOnRoot(root, Sync, false);
        }
        return;
      }

      // TODO: Get rid of Sync and use current time?
      if (expirationTime === Sync) {
        performSyncWork();
      } else {
        scheduleCallbackWithExpirationTime(root, expirationTime);
      }
    }

    function addRootToSchedule(root, expirationTime) {
      // Add the root to the schedule.
      // Check if this root is already part of the schedule.
      if (root.nextScheduledRoot === null) {
        // This root is not already scheduled. Add it.
        root.expirationTime = expirationTime;
        if (lastScheduledRoot === null) {
          firstScheduledRoot = lastScheduledRoot = root;
          root.nextScheduledRoot = root;
        } else {
          lastScheduledRoot.nextScheduledRoot = root;
          lastScheduledRoot = root;
          lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
        }
      } else {
        // This root is already scheduled, but its priority may have increased.
        var remainingExpirationTime = root.expirationTime;
        if (expirationTime > remainingExpirationTime) {
          // Update the priority.
          root.expirationTime = expirationTime;
        }
      }
    }

    function findHighestPriorityRoot() {
      var highestPriorityWork = NoWork;
      var highestPriorityRoot = null;
      if (lastScheduledRoot !== null) {
        var previousScheduledRoot = lastScheduledRoot;
        var root = firstScheduledRoot;
        while (root !== null) {
          var remainingExpirationTime = root.expirationTime;
          if (remainingExpirationTime === NoWork) {
            // This root no longer has work. Remove it from the scheduler.

            // TODO: This check is redudant, but Flow is confused by the branch
            // below where we set lastScheduledRoot to null, even though we break
            // from the loop right after.
            !(previousScheduledRoot !== null && lastScheduledRoot !== null) ? invariant(false, 'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            if (root === root.nextScheduledRoot) {
              // This is the only root in the list.
              root.nextScheduledRoot = null;
              firstScheduledRoot = lastScheduledRoot = null;
              break;
            } else if (root === firstScheduledRoot) {
              // This is the first root in the list.
              var next = root.nextScheduledRoot;
              firstScheduledRoot = next;
              lastScheduledRoot.nextScheduledRoot = next;
              root.nextScheduledRoot = null;
            } else if (root === lastScheduledRoot) {
              // This is the last root in the list.
              lastScheduledRoot = previousScheduledRoot;
              lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
              root.nextScheduledRoot = null;
              break;
            } else {
              previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
              root.nextScheduledRoot = null;
            }
            root = previousScheduledRoot.nextScheduledRoot;
          } else {
            if (remainingExpirationTime > highestPriorityWork) {
              // Update the priority, if it's higher
              highestPriorityWork = remainingExpirationTime;
              highestPriorityRoot = root;
            }
            if (root === lastScheduledRoot) {
              break;
            }
            if (highestPriorityWork === Sync) {
              // Sync is highest priority by definition so
              // we can stop searching.
              break;
            }
            previousScheduledRoot = root;
            root = root.nextScheduledRoot;
          }
        }
      }

      nextFlushedRoot = highestPriorityRoot;
      nextFlushedExpirationTime = highestPriorityWork;
    }

    // TODO: This wrapper exists because many of the older tests (the ones that use
    // flushDeferredPri) rely on the number of times `shouldYield` is called. We
    // should get rid of it.
    var didYield = false;
    function shouldYieldToRenderer() {
      if (didYield) {
        return true;
      }
      if (scheduler$$1.unstable_shouldYield()) {
        didYield = true;
        return true;
      }
      return false;
    }

    function performAsyncWork() {
      try {
        if (!shouldYieldToRenderer()) {
          // The callback timed out. That means at least one update has expired.
          // Iterate through the root schedule. If they contain expired work, set
          // the next render expiration time to the current time. This has the effect
          // of flushing all expired work in a single batch, instead of flushing each
          // level one at a time.
          if (firstScheduledRoot !== null) {
            recomputeCurrentRendererTime();
            var root = firstScheduledRoot;
            do {
              didExpireAtExpirationTime(root, currentRendererTime);
              // The root schedule is circular, so this is never null.
              root = root.nextScheduledRoot;
            } while (root !== firstScheduledRoot);
          }
        }
        performWork(NoWork, true);
      } finally {
        didYield = false;
      }
    }

    function performSyncWork() {
      performWork(Sync, false);
    }

    function performWork(minExpirationTime, isYieldy) {
      // Keep working on roots until there's no more work, or until there's a higher
      // priority event.
      findHighestPriorityRoot();

      if (isYieldy) {
        recomputeCurrentRendererTime();
        currentSchedulerTime = currentRendererTime;

        {
          var didExpire = nextFlushedExpirationTime > currentRendererTime;
          var timeout = expirationTimeToMs(nextFlushedExpirationTime);
          stopRequestCallbackTimer(didExpire, timeout);
        }

        while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && minExpirationTime <= nextFlushedExpirationTime && !(didYield && currentRendererTime > nextFlushedExpirationTime)) {
          performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, currentRendererTime > nextFlushedExpirationTime);
          findHighestPriorityRoot();
          recomputeCurrentRendererTime();
          currentSchedulerTime = currentRendererTime;
        }
      } else {
        while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && minExpirationTime <= nextFlushedExpirationTime) {
          performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, false);
          findHighestPriorityRoot();
        }
      }

      // We're done flushing work. Either we ran out of time in this callback,
      // or there's no more work left with sufficient priority.

      // If we're inside a callback, set this to false since we just completed it.
      if (isYieldy) {
        callbackExpirationTime = NoWork;
        callbackID = null;
      }
      // If there's work left over, schedule a new callback.
      if (nextFlushedExpirationTime !== NoWork) {
        scheduleCallbackWithExpirationTime(nextFlushedRoot, nextFlushedExpirationTime);
      }

      // Clean-up.
      finishRendering();
    }

    function flushRoot(root, expirationTime) {
      !!isRendering ? invariant(false, 'work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.') : void 0;
      // Perform work on root as if the given expiration time is the current time.
      // This has the effect of synchronously flushing all work up to and
      // including the given time.
      nextFlushedRoot = root;
      nextFlushedExpirationTime = expirationTime;
      performWorkOnRoot(root, expirationTime, false);
      // Flush any sync work that was scheduled by lifecycles
      performSyncWork();
    }

    function finishRendering() {
      nestedUpdateCount = 0;
      lastCommittedRootDuringThisBatch = null;

      if (completedBatches !== null) {
        var batches = completedBatches;
        completedBatches = null;
        for (var i = 0; i < batches.length; i++) {
          var batch = batches[i];
          try {
            batch._onComplete();
          } catch (error) {
            if (!hasUnhandledError) {
              hasUnhandledError = true;
              unhandledError = error;
            }
          }
        }
      }

      if (hasUnhandledError) {
        var error = unhandledError;
        unhandledError = null;
        hasUnhandledError = false;
        throw error;
      }
    }

    function performWorkOnRoot(root, expirationTime, isYieldy) {
      !!isRendering ? invariant(false, 'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;

      isRendering = true;

      // Check if this is async work or sync/expired work.
      if (!isYieldy) {
        // Flush work without yielding.
        // TODO: Non-yieldy work does not necessarily imply expired work. A renderer
        // may want to perform some work without yielding, but also without
        // requiring the root to complete (by triggering placeholders).

        var finishedWork = root.finishedWork;
        if (finishedWork !== null) {
          // This root is already complete. We can commit it.
          completeRoot(root, finishedWork, expirationTime);
        } else {
          root.finishedWork = null;
          // If this root previously suspended, clear its existing timeout, since
          // we're about to try rendering again.
          var timeoutHandle = root.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root.timeoutHandle = noTimeout;
            // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
            cancelTimeout(timeoutHandle);
          }
          renderRoot(root, isYieldy);
          finishedWork = root.finishedWork;
          if (finishedWork !== null) {
            // We've completed the root. Commit it.
            completeRoot(root, finishedWork, expirationTime);
          }
        }
      } else {
        // Flush async work.
        var _finishedWork = root.finishedWork;
        if (_finishedWork !== null) {
          // This root is already complete. We can commit it.
          completeRoot(root, _finishedWork, expirationTime);
        } else {
          root.finishedWork = null;
          // If this root previously suspended, clear its existing timeout, since
          // we're about to try rendering again.
          var _timeoutHandle = root.timeoutHandle;
          if (_timeoutHandle !== noTimeout) {
            root.timeoutHandle = noTimeout;
            // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
            cancelTimeout(_timeoutHandle);
          }
          renderRoot(root, isYieldy);
          _finishedWork = root.finishedWork;
          if (_finishedWork !== null) {
            // We've completed the root. Check the if we should yield one more time
            // before committing.
            if (!shouldYieldToRenderer()) {
              // Still time left. Commit the root.
              completeRoot(root, _finishedWork, expirationTime);
            } else {
              // There's no time left. Mark this root as complete. We'll come
              // back and commit it later.
              root.finishedWork = _finishedWork;
            }
          }
        }
      }

      isRendering = false;
    }

    function completeRoot(root, finishedWork, expirationTime) {
      // Check if there's a batch that matches this expiration time.
      var firstBatch = root.firstBatch;
      if (firstBatch !== null && firstBatch._expirationTime >= expirationTime) {
        if (completedBatches === null) {
          completedBatches = [firstBatch];
        } else {
          completedBatches.push(firstBatch);
        }
        if (firstBatch._defer) {
          // This root is blocked from committing by a batch. Unschedule it until
          // we receive another update.
          root.finishedWork = finishedWork;
          root.expirationTime = NoWork;
          return;
        }
      }

      // Commit the root.
      root.finishedWork = null;

      // Check if this is a nested update (a sync update scheduled during the
      // commit phase).
      if (root === lastCommittedRootDuringThisBatch) {
        // If the next root is the same as the previous root, this is a nested
        // update. To prevent an infinite loop, increment the nested update count.
        nestedUpdateCount++;
      } else {
        // Reset whenever we switch roots.
        lastCommittedRootDuringThisBatch = root;
        nestedUpdateCount = 0;
      }
      commitRoot(root, finishedWork);
    }

    function onUncaughtError(error) {
      !(nextFlushedRoot !== null) ? invariant(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      // Unschedule this root so we don't work on it again until there's
      // another update.
      nextFlushedRoot.expirationTime = NoWork;
      if (!hasUnhandledError) {
        hasUnhandledError = true;
        unhandledError = error;
      }
    }

    // TODO: Batching should be implemented at the renderer level, not inside
    // the reconciler.
    function batchedUpdates$1(fn, a) {
      var previousIsBatchingUpdates = isBatchingUpdates;
      isBatchingUpdates = true;
      try {
        return fn(a);
      } finally {
        isBatchingUpdates = previousIsBatchingUpdates;
        if (!isBatchingUpdates && !isRendering) {
          performSyncWork();
        }
      }
    }

    // TODO: Batching should be implemented at the renderer level, not inside
    // the reconciler.
    function unbatchedUpdates(fn, a) {
      if (isBatchingUpdates && !isUnbatchingUpdates) {
        isUnbatchingUpdates = true;
        try {
          return fn(a);
        } finally {
          isUnbatchingUpdates = false;
        }
      }
      return fn(a);
    }

    // TODO: Batching should be implemented at the renderer level, not within
    // the reconciler.
    function flushSync(fn, a) {
      !!isRendering ? invariant(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.') : void 0;
      var previousIsBatchingUpdates = isBatchingUpdates;
      isBatchingUpdates = true;
      try {
        return syncUpdates(fn, a);
      } finally {
        isBatchingUpdates = previousIsBatchingUpdates;
        performSyncWork();
      }
    }

    function interactiveUpdates$1(fn, a, b) {
      if (isBatchingInteractiveUpdates) {
        return fn(a, b);
      }
      // If there are any pending interactive updates, synchronously flush them.
      // This needs to happen before we read any handlers, because the effect of
      // the previous event may influence which handlers are called during
      // this event.
      if (!isBatchingUpdates && !isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
        // Synchronously flush pending interactive updates.
        performWork(lowestPriorityPendingInteractiveExpirationTime, false);
        lowestPriorityPendingInteractiveExpirationTime = NoWork;
      }
      var previousIsBatchingInteractiveUpdates = isBatchingInteractiveUpdates;
      var previousIsBatchingUpdates = isBatchingUpdates;
      isBatchingInteractiveUpdates = true;
      isBatchingUpdates = true;
      try {
        return fn(a, b);
      } finally {
        isBatchingInteractiveUpdates = previousIsBatchingInteractiveUpdates;
        isBatchingUpdates = previousIsBatchingUpdates;
        if (!isBatchingUpdates && !isRendering) {
          performSyncWork();
        }
      }
    }

    function flushInteractiveUpdates$1() {
      if (!isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
        // Synchronously flush pending interactive updates.
        performWork(lowestPriorityPendingInteractiveExpirationTime, false);
        lowestPriorityPendingInteractiveExpirationTime = NoWork;
      }
    }

    function flushControlled(fn) {
      var previousIsBatchingUpdates = isBatchingUpdates;
      isBatchingUpdates = true;
      try {
        syncUpdates(fn);
      } finally {
        isBatchingUpdates = previousIsBatchingUpdates;
        if (!isBatchingUpdates && !isRendering) {
          performSyncWork();
        }
      }
    }

    // 0 is PROD, 1 is DEV.
    // Might add PROFILE later.


    var didWarnAboutNestedUpdates = void 0;
    var didWarnAboutFindNodeInStrictMode = void 0;

    {
      didWarnAboutNestedUpdates = false;
      didWarnAboutFindNodeInStrictMode = {};
    }

    function getContextForSubtree(parentComponent) {
      if (!parentComponent) {
        return emptyContextObject;
      }

      var fiber = get(parentComponent);
      var parentContext = findCurrentUnmaskedContext(fiber);

      if (fiber.tag === ClassComponent) {
        var Component = fiber.type;
        if (isContextProvider(Component)) {
          return processChildContext(fiber, Component, parentContext);
        }
      }

      return parentContext;
    }

    function scheduleRootUpdate(current$$1, element, expirationTime, callback) {
      {
        if (phase === 'render' && current !== null && !didWarnAboutNestedUpdates) {
          didWarnAboutNestedUpdates = true;
          warningWithoutStack$1(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
        }
      }

      var update = createUpdate(expirationTime);
      // Caution: React DevTools currently depends on this property
      // being called "element".
      update.payload = { element: element };

      callback = callback === undefined ? null : callback;
      if (callback !== null) {
        !(typeof callback === 'function') ? warningWithoutStack$1(false, 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback) : void 0;
        update.callback = callback;
      }

      flushPassiveEffects();
      enqueueUpdate(current$$1, update);
      scheduleWork(current$$1, expirationTime);

      return expirationTime;
    }

    function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
      // TODO: If this is a nested container, this won't be the root.
      var current$$1 = container.current;

      var context = getContextForSubtree(parentComponent);
      if (container.context === null) {
        container.context = context;
      } else {
        container.pendingContext = context;
      }

      return scheduleRootUpdate(current$$1, element, expirationTime, callback);
    }

    function findHostInstance(component) {
      var fiber = get(component);
      if (fiber === undefined) {
        if (typeof component.render === 'function') {
          invariant(false, 'Unable to find node on an unmounted component.');
        } else {
          invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
        }
      }
      var hostFiber = findCurrentHostFiber(fiber);
      if (hostFiber === null) {
        return null;
      }
      return hostFiber.stateNode;
    }

    function findHostInstanceWithWarning(component, methodName) {
      {
        var fiber = get(component);
        if (fiber === undefined) {
          if (typeof component.render === 'function') {
            invariant(false, 'Unable to find node on an unmounted component.');
          } else {
            invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
          }
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) {
          return null;
        }
        if (hostFiber.mode & StrictMode) {
          var componentName = getComponentName(fiber.type) || 'Component';
          if (!didWarnAboutFindNodeInStrictMode[componentName]) {
            didWarnAboutFindNodeInStrictMode[componentName] = true;
            if (fiber.mode & StrictMode) {
              warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-find-node', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
            } else {
              warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-find-node', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
            }
          }
        }
        return hostFiber.stateNode;
      }
      return findHostInstance(component);
    }

    function createContainer(containerInfo, isConcurrent, hydrate) {
      return createFiberRoot(containerInfo, isConcurrent, hydrate);
    }

    function updateContainer(element, container, parentComponent, callback) {
      var current$$1 = container.current;
      var currentTime = requestCurrentTime();
      var expirationTime = computeExpirationForFiber(currentTime, current$$1);
      return updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback);
    }

    function getPublicRootInstance(container) {
      var containerFiber = container.current;
      if (!containerFiber.child) {
        return null;
      }
      switch (containerFiber.child.tag) {
        case HostComponent:
          return getPublicInstance(containerFiber.child.stateNode);
        default:
          return containerFiber.child.stateNode;
      }
    }

    function findHostInstanceWithNoPortals(fiber) {
      var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
      if (hostFiber === null) {
        return null;
      }
      return hostFiber.stateNode;
    }

    function injectIntoDevTools(devToolsConfig) {
      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;

      return injectInternals(_assign({}, devToolsConfig, {
        findHostInstanceByFiber: function (fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        },
        findFiberByHostInstance: function (instance) {
          if (!findFiberByHostInstance) {
            // Might not be implemented by the renderer.
            return null;
          }
          return findFiberByHostInstance(instance);
        }
      }));
    }

    // This file intentionally does *not* have the Flow annotation.
    // Don't add it. See `./inline-typed.js` for an explanation.

    function createPortal$1(children, containerInfo,
    // TODO: figure out the API for cross-renderer implementation.
    implementation) {
      var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      return {
        // This tag allow us to uniquely identify this as a React Portal
        $$typeof: REACT_PORTAL_TYPE,
        key: key == null ? null : '' + key,
        children: children,
        containerInfo: containerInfo,
        implementation: implementation
      };
    }

    // TODO: this is special because it gets imported during build.

    var ReactVersion = '16.6.3';

    // TODO: This type is shared between the reconciler and ReactDOM, but will
    // eventually be lifted out to the renderer.
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;

    var topLevelUpdateWarnings = void 0;
    var warnOnInvalidCallback = void 0;
    var didWarnAboutUnstableCreatePortal = false;

    {
      if (typeof Map !== 'function' ||
      // $FlowIssue Flow incorrectly thinks Map has no prototype
      Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' ||
      // $FlowIssue Flow incorrectly thinks Set has no prototype
      Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
        warningWithoutStack$1(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
      }

      topLevelUpdateWarnings = function (container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
          var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
          if (hostInstance) {
            !(hostInstance.parentNode === container) ? warningWithoutStack$1(false, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.') : void 0;
          }
        }

        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));

        !(!hasNonRootReactChild || isRootRenderedBySomeReact) ? warningWithoutStack$1(false, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

        !(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY') ? warningWithoutStack$1(false, 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
      };

      warnOnInvalidCallback = function (callback, callerName) {
        !(callback === null || typeof callback === 'function') ? warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback) : void 0;
      };
    }

    setRestoreImplementation(restoreControlledState$1);

    function ReactBatch(root) {
      var expirationTime = computeUniqueAsyncExpiration();
      this._expirationTime = expirationTime;
      this._root = root;
      this._next = null;
      this._callbacks = null;
      this._didComplete = false;
      this._hasChildren = false;
      this._children = null;
      this._defer = true;
    }
    ReactBatch.prototype.render = function (children) {
      !this._defer ? invariant(false, 'batch.render: Cannot render a batch that already committed.') : void 0;
      this._hasChildren = true;
      this._children = children;
      var internalRoot = this._root._internalRoot;
      var expirationTime = this._expirationTime;
      var work = new ReactWork();
      updateContainerAtExpirationTime(children, internalRoot, null, expirationTime, work._onCommit);
      return work;
    };
    ReactBatch.prototype.then = function (onComplete) {
      if (this._didComplete) {
        onComplete();
        return;
      }
      var callbacks = this._callbacks;
      if (callbacks === null) {
        callbacks = this._callbacks = [];
      }
      callbacks.push(onComplete);
    };
    ReactBatch.prototype.commit = function () {
      var internalRoot = this._root._internalRoot;
      var firstBatch = internalRoot.firstBatch;
      !(this._defer && firstBatch !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;

      if (!this._hasChildren) {
        // This batch is empty. Return.
        this._next = null;
        this._defer = false;
        return;
      }

      var expirationTime = this._expirationTime;

      // Ensure this is the first batch in the list.
      if (firstBatch !== this) {
        // This batch is not the earliest batch. We need to move it to the front.
        // Update its expiration time to be the expiration time of the earliest
        // batch, so that we can flush it without flushing the other batches.
        if (this._hasChildren) {
          expirationTime = this._expirationTime = firstBatch._expirationTime;
          // Rendering this batch again ensures its children will be the final state
          // when we flush (updates are processed in insertion order: last
          // update wins).
          // TODO: This forces a restart. Should we print a warning?
          this.render(this._children);
        }

        // Remove the batch from the list.
        var previous = null;
        var batch = firstBatch;
        while (batch !== this) {
          previous = batch;
          batch = batch._next;
        }
        !(previous !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;
        previous._next = batch._next;

        // Add it to the front.
        this._next = firstBatch;
        firstBatch = internalRoot.firstBatch = this;
      }

      // Synchronously flush all the work up to this batch's expiration time.
      this._defer = false;
      flushRoot(internalRoot, expirationTime);

      // Pop the batch from the list.
      var next = this._next;
      this._next = null;
      firstBatch = internalRoot.firstBatch = next;

      // Append the next earliest batch's children to the update queue.
      if (firstBatch !== null && firstBatch._hasChildren) {
        firstBatch.render(firstBatch._children);
      }
    };
    ReactBatch.prototype._onComplete = function () {
      if (this._didComplete) {
        return;
      }
      this._didComplete = true;
      var callbacks = this._callbacks;
      if (callbacks === null) {
        return;
      }
      // TODO: Error handling.
      for (var i = 0; i < callbacks.length; i++) {
        var _callback = callbacks[i];
        _callback();
      }
    };

    function ReactWork() {
      this._callbacks = null;
      this._didCommit = false;
      // TODO: Avoid need to bind by replacing callbacks in the update queue with
      // list of Work objects.
      this._onCommit = this._onCommit.bind(this);
    }
    ReactWork.prototype.then = function (onCommit) {
      if (this._didCommit) {
        onCommit();
        return;
      }
      var callbacks = this._callbacks;
      if (callbacks === null) {
        callbacks = this._callbacks = [];
      }
      callbacks.push(onCommit);
    };
    ReactWork.prototype._onCommit = function () {
      if (this._didCommit) {
        return;
      }
      this._didCommit = true;
      var callbacks = this._callbacks;
      if (callbacks === null) {
        return;
      }
      // TODO: Error handling.
      for (var i = 0; i < callbacks.length; i++) {
        var _callback2 = callbacks[i];
        !(typeof _callback2 === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', _callback2) : void 0;
        _callback2();
      }
    };

    function ReactRoot(container, isConcurrent, hydrate) {
      var root = createContainer(container, isConcurrent, hydrate);
      this._internalRoot = root;
    }
    ReactRoot.prototype.render = function (children, callback) {
      var root = this._internalRoot;
      var work = new ReactWork();
      callback = callback === undefined ? null : callback;
      {
        warnOnInvalidCallback(callback, 'render');
      }
      if (callback !== null) {
        work.then(callback);
      }
      updateContainer(children, root, null, work._onCommit);
      return work;
    };
    ReactRoot.prototype.unmount = function (callback) {
      var root = this._internalRoot;
      var work = new ReactWork();
      callback = callback === undefined ? null : callback;
      {
        warnOnInvalidCallback(callback, 'render');
      }
      if (callback !== null) {
        work.then(callback);
      }
      updateContainer(null, root, null, work._onCommit);
      return work;
    };
    ReactRoot.prototype.legacy_renderSubtreeIntoContainer = function (parentComponent, children, callback) {
      var root = this._internalRoot;
      var work = new ReactWork();
      callback = callback === undefined ? null : callback;
      {
        warnOnInvalidCallback(callback, 'render');
      }
      if (callback !== null) {
        work.then(callback);
      }
      updateContainer(children, root, parentComponent, work._onCommit);
      return work;
    };
    ReactRoot.prototype.createBatch = function () {
      var batch = new ReactBatch(this);
      var expirationTime = batch._expirationTime;

      var internalRoot = this._internalRoot;
      var firstBatch = internalRoot.firstBatch;
      if (firstBatch === null) {
        internalRoot.firstBatch = batch;
        batch._next = null;
      } else {
        // Insert sorted by expiration time then insertion order
        var insertAfter = null;
        var insertBefore = firstBatch;
        while (insertBefore !== null && insertBefore._expirationTime >= expirationTime) {
          insertAfter = insertBefore;
          insertBefore = insertBefore._next;
        }
        batch._next = insertBefore;
        if (insertAfter !== null) {
          insertAfter._next = batch;
        }
      }

      return batch;
    };

    /**
     * True if the supplied DOM node is a valid node element.
     *
     * @param {?DOMElement} node The candidate DOM node.
     * @return {boolean} True if the DOM is a valid DOM node.
     * @internal
     */
    function isValidContainer(node) {
      return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
    }

    function getReactRootElementInContainer(container) {
      if (!container) {
        return null;
      }

      if (container.nodeType === DOCUMENT_NODE) {
        return container.documentElement;
      } else {
        return container.firstChild;
      }
    }

    function shouldHydrateDueToLegacyHeuristic(container) {
      var rootElement = getReactRootElementInContainer(container);
      return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
    }

    setBatchingImplementation(batchedUpdates$1, interactiveUpdates$1, flushInteractiveUpdates$1);

    var warnedAboutHydrateAPI = false;

    function legacyCreateRootFromDOMContainer(container, forceHydrate) {
      var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
      // First clear any existing content.
      if (!shouldHydrate) {
        var warned = false;
        var rootSibling = void 0;
        while (rootSibling = container.lastChild) {
          {
            if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
              warned = true;
              warningWithoutStack$1(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
            }
          }
          container.removeChild(rootSibling);
        }
      }
      {
        if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
          warnedAboutHydrateAPI = true;
          lowPriorityWarning$1(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
        }
      }
      // Legacy roots are not async by default.
      var isConcurrent = false;
      return new ReactRoot(container, isConcurrent, shouldHydrate);
    }

    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
      // TODO: Ensure all entry points contain this check
      !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;

      {
        topLevelUpdateWarnings(container);
      }

      // TODO: Without `any` type, Flow says "Property cannot be accessed on any
      // member of intersection type." Whyyyyyy.
      var root = container._reactRootContainer;
      if (!root) {
        // Initial mount
        root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
        if (typeof callback === 'function') {
          var originalCallback = callback;
          callback = function () {
            var instance = getPublicRootInstance(root._internalRoot);
            originalCallback.call(instance);
          };
        }
        // Initial mount should not be batched.
        unbatchedUpdates(function () {
          if (parentComponent != null) {
            root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
          } else {
            root.render(children, callback);
          }
        });
      } else {
        if (typeof callback === 'function') {
          var _originalCallback = callback;
          callback = function () {
            var instance = getPublicRootInstance(root._internalRoot);
            _originalCallback.call(instance);
          };
        }
        // Update
        if (parentComponent != null) {
          root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
        } else {
          root.render(children, callback);
        }
      }
      return getPublicRootInstance(root._internalRoot);
    }

    function createPortal(children, container) {
      var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
      // TODO: pass ReactDOM portal implementation as third argument
      return createPortal$1(children, container, null, key);
    }

    var ReactDOM = {
      createPortal: createPortal,

      findDOMNode: function (componentOrElement) {
        {
          var owner = ReactCurrentOwner.current;
          if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            !warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component') : void 0;
            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }
        if (componentOrElement == null) {
          return null;
        }
        if (componentOrElement.nodeType === ELEMENT_NODE) {
          return componentOrElement;
        }
        {
          return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
        }
        return findHostInstance(componentOrElement);
      },
      hydrate: function (element, container, callback) {
        // TODO: throw or warn if we couldn't hydrate?
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
      },
      render: function (element, container, callback) {
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
      },
      unstable_renderSubtreeIntoContainer: function (parentComponent, element, containerNode, callback) {
        !(parentComponent != null && has(parentComponent)) ? invariant(false, 'parentComponent must be a valid React Component') : void 0;
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
      },
      unmountComponentAtNode: function (container) {
        !isValidContainer(container) ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : void 0;

        if (container._reactRootContainer) {
          {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
            !!renderedByDifferentReact ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
          }

          // Unmount should not be batched.
          unbatchedUpdates(function () {
            legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
              container._reactRootContainer = null;
            });
          });
          // If you call unmountComponentAtNode twice in quick succession, you'll
          // get `true` twice. That's probably fine?
          return true;
        } else {
          {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));

            // Check if the container itself is a React root node.
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

            !!hasNonRootReactChild ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
          }

          return false;
        }
      },


      // Temporary alias since we already shipped React 16 RC with it.
      // TODO: remove in React 17.
      unstable_createPortal: function () {
        if (!didWarnAboutUnstableCreatePortal) {
          didWarnAboutUnstableCreatePortal = true;
          lowPriorityWarning$1(false, 'The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
        }
        return createPortal.apply(undefined, arguments);
      },


      unstable_batchedUpdates: batchedUpdates$1,

      unstable_interactiveUpdates: interactiveUpdates$1,

      flushSync: flushSync,

      unstable_flushControlled: flushControlled,

      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
        // Keep in sync with ReactDOMUnstableNativeDependencies.js
        // and ReactTestUtils.js. This is an array for better minification.
        Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injection.injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch]
      }
    };

    function createRoot(container, options) {
      var functionName = 'unstable_createRoot';
      !isValidContainer(container) ? invariant(false, '%s(...): Target container is not a DOM element.', functionName) : void 0;
      var hydrate = options != null && options.hydrate === true;
      return new ReactRoot(container, true, hydrate);
    }

    {
      ReactDOM.unstable_createRoot = createRoot;
    }

    var foundDevTools = injectIntoDevTools({
      findFiberByHostInstance: getClosestInstanceFromNode,
      bundleType: 1,
      version: ReactVersion,
      rendererPackageName: 'react-dom'
    });

    {
      if (!foundDevTools && canUseDOM && window.top === window.self) {
        // If we're in Chrome or Firefox, provide a download link if not installed.
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
          var protocol = window.location.protocol;
          // Don't warn in exotic cases like chrome-extension://.
          if (/^(https?|file):$/.test(protocol)) {
            console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
          }
        }
      }
    }



    var ReactDOM$2 = Object.freeze({
    	default: ReactDOM
    });

    var ReactDOM$3 = ( ReactDOM$2 && ReactDOM ) || ReactDOM$2;

    // TODO: decide on the top-level export form.
    // This is hacky but makes it work with both Rollup and Jest.
    var reactDom = ReactDOM$3.default || ReactDOM$3;

    module.exports = reactDom;
      })();
    }
    });

    var reactDom = createCommonjsModule(function (module) {

    {
      module.exports = reactDom_development;
    }
    });

    /**
     * Java style map.
     */
    class JavaMap {
        constructor() {
            this[Symbol.toStringTag] = 'Map';
            this._map = new Map();
            this._size = 0;
        }
        toString() {
            return '{' + Array.from(this.entries2()).map(({ key, value }) => key + ':' + value).join(', ') + '}';
        }
        forEach(callbackfn, thisArg) {
            for (const bucket of this._map.values()) {
                for (const { key, value } of bucket) {
                    callbackfn.call(thisArg, value, key, this);
                }
            }
        }
        *keys() {
            for (const bucket of this._map.values()) {
                for (const { key } of bucket) {
                    yield key;
                }
            }
        }
        *values() {
            for (const bucket of this._map.values()) {
                for (const { value } of bucket) {
                    yield value;
                }
            }
        }
        [Symbol.iterator]() {
            return this.entries();
        }
        set(key, value) {
            this.set2(key, value);
            return this;
        }
        /**
         * Like {@link #set} except it returns true if key was new and false if the value was only updated.
         *
         */
        set2(key, val) {
            const hashCode = key.hashCode(), bucket = this._map.get(hashCode);
            //assert(hashCode === (hashCode | 0))
            if (bucket) {
                const pairIndex = bucket.findIndex(pair => pair.key.equals(key));
                if (-1 == pairIndex) {
                    bucket.push({ key: key, value: val });
                }
                else {
                    bucket[pairIndex].value = val;
                    return false;
                }
            }
            else {
                this._map.set(hashCode, [{ key: key, value: val }]);
            }
            this._size++;
            return true;
        }
        has(key) {
            const hashCode = key.hashCode(), bucket = this._map.get(hashCode);
            //assert(hashCode === (hashCode | 0))
            return undefined !== bucket && bucket.some(pair => pair.key.equals(key));
        }
        get(key) {
            const hashCode = key.hashCode(), bucket = this._map.get(hashCode), pair = bucket && bucket.find(pair => pair.key.equals(key));
            return pair && pair.value;
        }
        getLike(key) {
            for (const hashCode of key.hashCodes()) {
                const bucket = this._map.get(hashCode);
                const canonVal = bucket && bucket.find(x => x.key.like(key));
                if (canonVal)
                    return canonVal;
            }
        }
        setLike(key, val) {
            return !this.getLike(key) && this.set(key, val);
        }
        'delete'(key) {
            const hashCode = key.hashCode(), bucket = this._map.get(hashCode);
            if (bucket) {
                const index = bucket.findIndex(x => x.key.equals(key));
                if (-1 != index) {
                    if (1 == bucket.length) {
                        this._map.delete(hashCode);
                    }
                    else {
                        bucket.splice(index, 1);
                    }
                    this._size--;
                    return true;
                }
            }
            return false;
        }
        deleteLike(key) {
            for (const hashCode of key.hashCodes()) {
                const bucket = this._map.get(hashCode);
                if (bucket) {
                    const index = bucket.findIndex(x => x.key.like(key));
                    if (-1 != index) {
                        const deleted = bucket[index];
                        if (1 == bucket.length) {
                            this._map.delete(hashCode);
                        }
                        else {
                            bucket.splice(index, 1);
                        }
                        this._size--;
                        return deleted;
                    }
                }
            }
        }
        *entries2() {
            for (const bucket of this._map.values()) {
                yield* bucket;
            }
        }
        *entries() {
            for (const bucket of this._map.values()) {
                for (const { key, value } of bucket) {
                    yield [key, value];
                }
            }
        }
        clear() {
            this._map.clear();
            this._size = 0;
        }
        get size() {
            return this._size;
        }
    }

    class JavaSet {
        constructor(iterable) {
            this[Symbol.toStringTag] = 'Set';
            this[Symbol.iterator] = JavaSet.prototype.values;
            this.keys = JavaSet.prototype.values;
            this._map = new Map();
            this._size = 0;
            if (iterable) {
                this.addAll(iterable);
            }
        }
        forEach(callbackfn, thisArg) {
            for (const value of this.entries()) {
                callbackfn.call(thisArg, value, value, this);
            }
        }
        add(val) {
            this.add2(val);
            return this;
        }
        add2(val) {
            // you can't use this.canonicalize here, as there is no way to differentiate if val
            // is new or if val was === the exisitng value (not only .equals)
            const hashCode = val.hashCode(), bucket = this._map.get(hashCode);
            if (bucket) {
                if (bucket.some(x => x.equals(val))) {
                    return false;
                }
                bucket.push(val);
            }
            else {
                this._map.set(hashCode, [val]);
            }
            this._size++;
            return true;
        }
        addAll(iterable) {
            for (const val of iterable) {
                this.add(val);
            }
            return this;
        }
        canonicalize(val) {
            const hashCode = val.hashCode(), bucket = this._map.get(hashCode);
            if (bucket) {
                const existing = bucket.find(x => x.equals(val));
                if (existing) {
                    return existing;
                }
                bucket.push(val);
            }
            else {
                this._map.set(hashCode, [val]);
            }
            this._size++;
            return val;
        }
        has(val) {
            const hashCode = val.hashCode(), bucket = this._map.get(hashCode);
            return undefined !== bucket && bucket.some(x => x.equals(val));
        }
        getLike(val) {
            for (const hashCode of val.hashCodes()) {
                const bucket = this._map.get(hashCode);
                const canonVal = bucket && bucket.find(x => x.like(val));
                if (canonVal)
                    return canonVal;
            }
        }
        canonicalizeLike(val) {
            // if this.getLike(val) is defined, return it, otherwise add val and return val
            return this.getLike(val) || this.canonicalize(val);
        }
        addLike(val) {
            return !this.getLike(val) && this.add(val);
        }
        'delete'(val) {
            const hashCode = val.hashCode(), bucket = this._map.get(hashCode);
            if (bucket) {
                const index = bucket.findIndex(x => x.equals(val));
                if (-1 != index) {
                    if (1 == bucket.length) {
                        this._map.delete(hashCode);
                    }
                    else {
                        bucket.splice(index, 1);
                    }
                    this._size--;
                    return true;
                }
            }
            return false;
        }
        deleteLike(val) {
            for (const hashCode of val.hashCodes()) {
                const bucket = this._map.get(hashCode);
                if (bucket) {
                    const index = bucket.findIndex(x => x.like(val));
                    if (-1 != index) {
                        const deleted = bucket[index];
                        if (1 == bucket.length) {
                            this._map.delete(hashCode);
                        }
                        else {
                            bucket.splice(index, 1);
                        }
                        this._size--;
                        return deleted;
                    }
                }
            }
        }
        *values() {
            for (const bucket of this._map.values()) {
                yield* bucket;
            }
        }
        *entries() {
            for (const bucket of this._map.values()) {
                for (const value of bucket) {
                    yield [value, value];
                }
            }
        }
        clear() {
            this._map.clear();
            this._size = 0;
        }
        get size() {
            return this._size;
        }
        toString() {
            return '{' + Array.from(this.values()).join(', ') + '}';
        }
    }
    class Pair {
        constructor(left, right) {
            this.left = left;
            this.right = right;
        }
        hashCode() {
            return this.left.hashCode() * 31 + this.right.hashCode();
        }
        equals(other) {
            return this == other || Object.getPrototypeOf(other) == Pair.prototype && this.left.equals(other.left) && this.right.equals(other.right);
        }
        toString() {
            return '(' + this.left.toString() + ', ' + this.right.toString() + ')';
        }
        toSource() {
            return 'new Pair(' + this.left.toSource() + ', ' + this.right.toSource() + ')';
        }
    }

    class Vector {
        constructor(v) {
            this.v = v;
            assertInst(Float64Array, v);
        }
        static fromFunction(dims, f) {
            assertNumbers(dims);
            const e = new Float64Array(dims);
            let i = dims;
            while (i--) {
                e[i] = f(i);
            }
            return new Vector(e);
        }
        static random(dims) {
            return Vector.fromFunction(dims, i => Math.random());
        }
        static from(...args) {
            assert(args[0] instanceof Float64Array || args.every(a => 'number' == typeof a), 'args[0] instanceof Float64Array || args.every(a => "number" == typeof a)');
            return new Vector(args[0] instanceof Float64Array ? args[0] : Float64Array.from(args));
        }
        static Zero(dims) {
            assertNumbers(dims);
            let i = 0;
            const n = new Float64Array(dims);
            while (i--) {
                n[i] = 0;
            }
            return new Vector(n);
        }
        static Unit(dims, dir) {
            assertNumbers(dims, dir);
            let i = 0;
            const n = new Float64Array(dims);
            while (i--) {
                n[i] = +(i == dir); // +true === 1, +false === 0
            }
            return new Vector(n);
        }
        /**
         * Pack an array of Vectors into an array of numbers (Float32Array by default).
         *
         * @param vectors source array
         * @param dest destination array. If provided, must be large enough to fit v3count items.
         * @param srcStart starting index in source array
         * @param destStart starting index in destination array
         * @param vectorCount Number of V3s to copy.
         * @returns Packed array.
         */
        static pack(vectors, dest, srcStart = 0, destStart = 0, vectorCount = vectors.length - srcStart) {
            //assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')
            const dim = vectors[0].dim();
            const result = dest || new Float32Array(dim * vectorCount); // TODO
            assert(result.length - destStart >= vectorCount * dim, 'dest.length - destStart >= v3count * 3', result.length, destStart, vectorCount * 3);
            let i = vectorCount, srcIndex = srcStart, destIndex = destStart;
            while (i--) {
                const v = vectors[srcIndex++];
                for (let d = 0; d < dim; d++) {
                    result[destIndex++] = v.v[d];
                }
            }
            return result;
        }
        static lerp(a, b, t) {
            assert(a.dim() == b.dim());
            const n = new Float64Array(a.v.length);
            let i = a.v.length;
            while (i--) {
                n[i] = a.v[i] * (1 - t) + b.v[i] * t;
            }
            return new Vector(n);
        }
        static add(...vs) {
            const dim = vs[0].v.length;
            const result = new Float64Array(dim);
            let i = vs.length;
            while (i--) {
                let d = dim;
                while (d--) {
                    result[d] += vs[i].v[d];
                }
            }
            return new Vector(result);
        }
        /**
         * Create a new 4D Vector from a V3 and a weight.
         * @param v3
         * @param weight
         */
        static fromV3AndWeight(v3, weight) {
            return new Vector(new Float64Array([v3.x * weight, v3.y * weight, v3.z * weight, weight]));
        }
        get x() {
            return this.v[0];
        }
        get y() {
            return this.v[1];
        }
        get z() {
            return this.v[2];
        }
        get w() {
            return this.v[3];
        }
        [Symbol.iterator]() {
            return this.v[Symbol.iterator]();
        }
        dim() {
            return this.v.length;
        }
        e(index) {
            if (0 > index || index >= this.v.length) {
                throw new Error('array index out of bounds');
            }
            return this.v[index];
        }
        plus(vector) {
            const u = this.v, v = vector.v;
            const n = new Float64Array(u.length);
            let i = u.length;
            while (i--) {
                n[i] = u[i] + v[i];
            }
            return new Vector(n);
        }
        minus(vector) {
            const u = this.v, v = vector.v;
            const n = new Float64Array(u.length);
            let i = u.length;
            while (i--) {
                n[i] = u[i] - v[i];
            }
            return new Vector(n);
        }
        times(factor) {
            const u = this.v;
            const n = new Float64Array(u.length);
            let i = u.length;
            while (i--) {
                n[i] = u[i] * factor;
            }
            return new Vector(n);
        }
        div(val) {
            const u = this.v;
            const n = new Float64Array(u.length);
            let i = u.length;
            while (i--) {
                n[i] = u[i] / val;
            }
            return new Vector(n);
        }
        dot(vector) {
            assert(this.dim == vector.dim, 'passed vector must have the same dim');
            let result = 0;
            const u = this.v, v = vector.v;
            let i = u.length;
            while (i--) {
                result += u[i] * v[i];
            }
            return result;
        }
        cross(vector) {
            assertInst(Vector, vector);
            const n = new Float64Array(3);
            n[0] = this.v[1] * vector.v[2] - this.v[2] * vector.v[1];
            n[1] = this.v[2] * vector.v[0] - this.v[0] * vector.v[2];
            n[2] = this.v[0] * vector.v[1] - this.v[1] * vector.v[0];
            return new Vector(n);
        }
        schur(vector) {
            assertInst(Vector, vector);
            const u = this.v, v = vector.v;
            const n = new Float64Array(u.length);
            let i = u.length;
            while (i--) {
                n[i] = u[i] * v[i];
            }
            return new Vector(n);
        }
        equals(obj) {
            if (obj === this)
                return true;
            if (obj.constructor !== Vector)
                return false;
            if (this.v.length != obj.v.length)
                return false;
            let i = this.v.length;
            while (i--) {
                if (this.v[i] !== obj.v[i])
                    return false;
            }
            return true;
        }
        like(obj) {
            if (obj === this)
                return true;
            if (obj.constructor !== Vector)
                return false;
            if (this.v.length != obj.v.length)
                return false;
            let i = this.v.length;
            while (i--) {
                if (!eq(this.v[i], obj.v[i]))
                    return false;
            }
            return true;
        }
        map(f) {
            return new Vector(this.v.map(f));
        }
        toString(roundFunction) {
            roundFunction = roundFunction || (v => +v.toFixed(6));
            return 'Vector(' + this.v.map(roundFunction).join(', ') + ')';
        }
        toSource() {
            return callsce('VV', ...this.v);
        }
        angleTo(vector) {
            assertInst(Vector, vector);
            assert(!this.isZero(), '!this.likeO()');
            assert(!vector.isZero(), '!vector.likeO()');
            return Math.acos(clamp(this.dot(vector) / this.length() / vector.length(), -1, 1));
        }
        /**
         * Returns true iff this is parallel to vector, using eq
         * Throw a DebugError
         * - if vector is not a Vector or
         * - if this has a length of 0 or
         * - if vector has a length of 0
         */
        isParallelTo(vector) {
            assertInst(Vector, vector);
            assert(!this.isZero(), '!this.likeO()');
            assert(!vector.isZero(), '!vector.likeO()');
            // a . b takes on values of +|a|*|b| (vectors same direction) to -|a|*|b| (opposite direction)
            // in both cases the vectors are paralle, so check if abs(a . b) == |a|*|b|
            return eq(Math.sqrt(this.lengthSquared() * vector.lengthSquared()), Math.abs(this.dot(vector)));
        }
        isPerpendicularTo(vector) {
            assertInst(Vector, vector);
            assert(!this.isZero(), '!this.likeO()');
            assert(!vector.isZero(), '!vector.likeO()');
            return eq0(this.dot(vector));
        }
        /**
         * Returns true iff the length of this vector is 0, as returned by NLA.isZero.
         * Definition: Vector.prototype.isZero = () => NLA.isZero(this.length())
         */
        isZero() {
            return eq0(this.length());
        }
        /*/ Returns the length of this Vector, i.e. the euclidian norm.*/
        length() {
            return Math.hypot.apply(undefined, this.v);
            //return Math.sqrt(this.lengthSquared())
        }
        lengthSquared() {
            let result = 0;
            const u = this.v;
            let i = u.length;
            while (i--) {
                result += u[i] * u[i];
            }
            return result;
        }
        /**
         * Returns a new unit Vector (.length() === 1) with the same direction as this vector. Throws a
         */
        unit() {
            const length = this.length();
            if (eq0(length)) {
                throw new Error('cannot normalize zero vector');
            }
            return this.div(this.length());
        }
        /**
         * Documentation stub. You want {@link unit}
         */
        normalized() {
            throw new Error('documentation stub. use .unit()');
        }
        asRowMatrix() {
            return new Matrix(this.v.length, 1, this.v);
        }
        asColMatrix() {
            return new Matrix(1, this.v.length, this.v);
        }
        /**
         * Returns a new Vector which is the projection of this vector onto the passed vector.
         * @example
         * VV(3, 4).projectedOn(VV(1, 0)) // returns VV(3, 0)
         * @example
         * VV(3, 4).projectedOn(VV(2, 0)) // returns VV(3, 0)
         * @example
         * VV(3, 4).projectedOn(VV(-1, 0)) // returns VV(-3, 0)
         * @example
         * VV(3, 4).projectedOn(VV(0, 1)) // returns VV(0, 4)
         * @example
         * VV(3, 4).projectedOn(VV(1, 1)) // returns
         */
        projectedOn(b) {
            assertInst(Vector, b);
            // https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2
            return b.times(this.dot(b) / b.dot(b));
        }
        rejectedOn(b) {
            assertInst(Vector, b);
            // https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2
            return this.minus(b.times(this.dot(b) / b.dot(b)));
        }
        to(a) {
            return a.minus(this);
        }
        /**
         * Returns true iff the length() of this vector is equal to 'length', using equals
         * E.g. NLA.V(3, 4).hasLength(5) === true
         * NLA.V(1, 1).hasLength(1) === false
         */
        hasLength(length) {
            assertNumbers(length);
            return eq(length, this.length());
        }
        V3() {
            //assert(this.dim() == 3)
            return new V3(this.v[0], this.v[1], this.v[2]);
        }
        /**
         * Project into 3 dimensions.
         */
        p3() {
            assert(this.v.length == 4);
            const w = this.v[3];
            return new V3(this.v[0] / w, this.v[1] / w, this.v[2] / w);
        }
        transposed() {
            return new Matrix(this.v.length, 1, this.v);
        }
    }
    function VV(...values) {
        return new Vector(new Float64Array(values));
    }
    function vArrGet(vArr, dim, i) {
        assert(vArr.length % dim == 0);
        return new Vector(Float64Array.prototype.slice.call(vArr, i * dim, (i + 1) * dim));
    }

    class Matrix {
        constructor(width, height, m) {
            this.width = width;
            this.height = height;
            this.m = m;
            assertInts(width, height);
            assertf(() => 0 < width);
            assertf(() => 0 < height);
            assert(width * height == m.length, 'width * height == m.length', width, height, m.length);
        }
        static random(width, height) {
            return Matrix.fromFunction(width, height, () => Math.random());
        }
        static fromFunction(width, height, f) {
            const m = new Float64Array(height * width);
            let elIndex = height * width;
            while (elIndex--) {
                m[elIndex] = f(Math.floor(elIndex / width), elIndex % width, elIndex);
            }
            return new Matrix(width, height, m);
        }
        static identityN(dim) {
            assertInts(dim);
            const m = new Float64Array(dim * dim);
            // Float64Arrays are init to 0
            let elIndex = dim * (dim + 1);
            while (elIndex) {
                elIndex -= dim + 1;
                m[elIndex] = 1;
            }
            return new Matrix(dim, dim, m);
        }
        /**
         * Create new dim x dim matrix equal to an identity matrix with rows/colums i and k swapped. Note that i and k
         * are 0-indexed.
         */
        static permutation(dim, i, k) {
            assertInts(dim, i, k);
            assertf(() => 0 <= i && i < dim);
            assertf(() => 0 <= k && k < dim);
            const m = new Float64Array(dim * dim);
            // Float64Array are init to 0
            let elIndex = dim * (dim + 1);
            while (elIndex) {
                elIndex -= dim + 1;
                m[elIndex] = 1;
            }
            m[i * dim + i] = 0;
            m[k * dim + k] = 0;
            m[i * dim + k] = 1;
            m[k * dim + i] = 1;
            return new Matrix(dim, dim, m);
        }
        static fromRowArrays(...rowArrays) {
            if (0 == rowArrays.length) {
                throw new Error('cannot have 0 vector');
            }
            const height = rowArrays.length;
            const width = rowArrays[0].length;
            const m = new Float64Array(height * width);
            arrayCopy(rowArrays[0], 0, m, 0, width);
            for (let rowIndex = 1; rowIndex < height; rowIndex++) {
                if (rowArrays[rowIndex].length != width) {
                    throw new Error('all row arrays must be the same length');
                }
                arrayCopy(rowArrays[rowIndex], 0, m, rowIndex * width, width);
            }
            return this.new(width, height, m);
        }
        static fromColVectors(colVectors) {
            return Matrix.fromColArrays(...colVectors.map(v => v.v));
        }
        static forWidthHeight(width, height) {
            return new Matrix(width, height, new Float64Array(width * height));
        }
        static fromColArrays(...colArrays) {
            if (0 == colArrays.length) {
                throw new Error('cannot have 0 vector');
            }
            const width = colArrays.length;
            const height = colArrays[0].length;
            const m = new Float64Array(height * width);
            arrayCopyStep(colArrays[0], 0, 1, m, 0, width, height);
            for (let colIndex = 1; colIndex < width; colIndex++) {
                if (colArrays[colIndex].length != height) {
                    throw new Error('all col arrays must be the same length');
                }
                arrayCopyStep(colArrays[colIndex], 0, 1, m, colIndex, width, height);
            }
            return this.new(width, height, m);
        }
        static product(...args) {
            const [ms, result] = Array.isArray(args[0])
                ? [args[0], args[1]]
                : [args, undefined];
            if (0 == ms.length)
                throw new Error("Can't guess matrix size.");
            if (1 == ms.length)
                return Matrix.copy(ms[0], result);
            return Matrix.copy(ms.reduce((a, b) => a.times(b)), result);
        }
        /**
         * Numerically calculate all the partial derivatives of f at x0.
         *
         * @param f
         * @param x0
         * @param fx0 f(x0), pass it if you have it already
         * @param EPSILON
         */
        static jacobi(f, x0, fx0 = f(x0), EPSILON = 1e-6) {
            const jacobi = Matrix.forWidthHeight(x0.length, fx0.length);
            for (let colIndex = 0; colIndex < x0.length; colIndex++) {
                x0[colIndex] += EPSILON;
                const fx = f(x0);
                for (let rowIndex = 0; rowIndex < fx0.length; rowIndex++) {
                    const value = (fx[rowIndex] - fx0[rowIndex]) / EPSILON;
                    jacobi.setEl(rowIndex, colIndex, value);
                }
                x0[colIndex] -= EPSILON;
            }
            return jacobi;
        }
        static copy(src, result = src.new()) {
            assertInst(Matrix, src, result);
            assert(src.width == result.width);
            assert(src.height == result.height);
            assert(result != src, 'result != src');
            const s = src.m, d = result.m;
            let i = s.length;
            while (i--) {
                d[i] = s[i];
            }
            return result;
        }
        static new(width, height, m) {
            return new Matrix(width, height, m);
        }
        copy() {
            return Matrix.copy(this);
        }
        e(rowIndex, colIndex) {
            assertInts(rowIndex, colIndex);
            assert(0 <= rowIndex && rowIndex < this.height, 'rowIndex out of bounds ' + rowIndex);
            assert(0 <= colIndex && colIndex < this.width, 'colIndex out of bounds ' + colIndex);
            return this.m[rowIndex * this.width + colIndex];
        }
        setEl(rowIndex, colIndex, val) {
            assertInts(rowIndex, colIndex);
            assert(0 <= rowIndex && rowIndex < this.height, 'rowIndex out of bounds ' + rowIndex);
            assert(0 <= colIndex && colIndex < this.width, 'colIndex out of bounds ' + colIndex);
            assertNumbers(val);
            this.m[rowIndex * this.width + colIndex] = val;
        }
        plus(m) {
            assert(this.width == m.width);
            assert(this.height == m.height);
            const r = this.new();
            let i = this.m.length;
            while (i--)
                r.m[i] = this.m[i] + m.m[i];
            return r;
        }
        minus(m) {
            assert(this.width == m.width);
            assert(this.height == m.height);
            const r = this.new();
            let i = this.m.length;
            while (i--)
                r.m[i] = this.m[i] - m.m[i];
            return r;
        }
        mulScalar(scalar) {
            assertNumbers(scalar);
            const r = this.new();
            let i = this.m.length;
            while (i--)
                r.m[i] = this.m[i] * scalar;
            return r;
        }
        divScalar(scalar) {
            assertNumbers(scalar);
            const r = this.new();
            let i = this.m.length;
            while (i--)
                r.m[i] = this.m[i] / scalar;
            return r;
        }
        new() {
            return new Matrix(this.width, this.height, new Float64Array(this.width * this.height));
        }
        toString(f, colNames, rowNames) {
            f = f || (v => v.toFixed(6));
            assert(typeof f(0) == 'string', '' + typeof f(0));
            assert(!colNames || colNames.length == this.width);
            assert(!rowNames || rowNames.length == this.height);
            const rounded = Array.from(this.m).map(f);
            const rows = arrayFromFunction(this.height, rowIndex => rounded.slice(rowIndex * this.width, (rowIndex + 1) * this.width)); // select matrix row
            if (colNames) {
                rows.unshift(Array.from(colNames));
            }
            if (rowNames) {
                rows.forEach((row, rowIndex) => row.unshift(rowNames[rowIndex - (colNames ? 1 : 0)] || ''));
            }
            const colWidths = arrayFromFunction(this.width, colIndex => rows.map(row => row[colIndex].length).max());
            return rows
                .map((row, rowIndex) => row
                .map((x, colIndex) => {
                // pad numbers with spaces to col width
                const padder = (rowIndex == 0 && colNames) || (colIndex == 0 && rowNames)
                    ? String.prototype.padEnd
                    : String.prototype.padStart;
                return padder.call(x, colWidths[colIndex]);
            })
                .join('  '))
                .map(x => x + '\n')
                .join(''); // join rows
        }
        row(rowIndex) {
            assertInts(rowIndex);
            assert(0 <= rowIndex && rowIndex < this.height, 'rowIndex out of bounds ' + rowIndex);
            const v = new Float64Array(this.width);
            arrayCopy(this.m, rowIndex * this.width, v, 0, this.width);
            return new Vector(v);
        }
        col(colIndex) {
            assertInts(colIndex);
            assert(0 <= colIndex && colIndex < this.width, 'colIndex out of bounds ' + colIndex);
            const v = new Float64Array(this.height);
            arrayCopyStep(this.m, colIndex, this.width, v, 0, 1, this.height);
            return new Vector(v);
        }
        dim() {
            return { width: this.width, height: this.height };
        }
        dimString() {
            return this.width + 'x' + this.height;
        }
        equals(obj) {
            if (obj.constructor != this.constructor)
                return false;
            if (this.width != obj.width || this.height != obj.height)
                return false;
            let elIndex = this.m.length;
            while (elIndex--) {
                if (this.m[elIndex] != obj.m[elIndex])
                    return false;
            }
            return true;
        }
        equalsMatrix(matrix, precision = NLA_PRECISION) {
            assertInst(Matrix, matrix);
            if (this.width != matrix.width || this.height != matrix.height)
                return false;
            let elIndex = this.m.length;
            while (elIndex--) {
                if (Math.abs(this.m[elIndex] - matrix.m[elIndex]) >= precision)
                    return false;
            }
            return true;
        }
        hashCode() {
            let result = 0;
            let elIndex = this.m.length;
            while (elIndex--) {
                result = result * 31 + floatHashCode(this.m[elIndex]);
            }
            return result;
        }
        // todo rename
        isZero() {
            let elIndex = this.m.length;
            while (elIndex--) {
                if (!eq0(this.m[elIndex])) {
                    return false;
                }
            }
            return true;
        }
        isOrthogonal() {
            return (this.isSquare() &&
                this.transposed()
                    .times(this)
                    .equalsMatrix(Matrix.identityN(this.width)));
        }
        /**
         * Returns L, U, P such that L * U == P * this
         */
        luDecomposition() {
            assertf(() => this.isSquare(), this.dim().toSource());
            const dim = this.width;
            const uRowArrays = this.asRowArrays(Float64Array);
            const lRowArrays = arrayFromFunction(dim, row => new Float64Array(dim));
            const pRowArrays = Matrix.identityN(dim).asRowArrays(Float64Array);
            let currentRowIndex = 0;
            for (let colIndex = 0; colIndex < dim; colIndex++) {
                // find largest value in colIndex
                let maxAbsValue = 0, pivotRowIndex = -1, numberOfNonZeroRows = 0;
                for (let rowIndex = currentRowIndex; rowIndex < dim; rowIndex++) {
                    const el = uRowArrays[rowIndex][colIndex];
                    numberOfNonZeroRows += +(0 != el);
                    if (Math.abs(el) > maxAbsValue) {
                        maxAbsValue = Math.abs(el);
                        pivotRowIndex = rowIndex;
                    }
                }
                // TODO: check with isZero
                if (0 == maxAbsValue) {
                    // column contains only zeros
                    continue;
                }
                assert(-1 !== pivotRowIndex);
                // swap rows
                arraySwap(uRowArrays, currentRowIndex, pivotRowIndex);
                arraySwap(lRowArrays, currentRowIndex, pivotRowIndex);
                arraySwap(pRowArrays, currentRowIndex, pivotRowIndex);
                lRowArrays[colIndex][colIndex] = 1;
                if (1 < numberOfNonZeroRows) {
                    // subtract pivot (now current) row from all below it
                    for (let rowIndex = currentRowIndex + 1; rowIndex < dim; rowIndex++) {
                        const l = uRowArrays[rowIndex][colIndex] / uRowArrays[currentRowIndex][colIndex];
                        lRowArrays[rowIndex][colIndex] = l;
                        // subtract pivot row * l from row 'rowIndex'
                        for (let colIndex2 = colIndex; colIndex2 < dim; colIndex2++) {
                            uRowArrays[rowIndex][colIndex2] -= l * uRowArrays[currentRowIndex][colIndex2];
                        }
                    }
                }
                currentRowIndex++; // this doesn't increase if pivot was zero
            }
            return {
                L: Matrix.fromRowArrays(...lRowArrays),
                U: Matrix.fromRowArrays(...uRowArrays),
                P: Matrix.fromRowArrays(...pRowArrays),
            };
        }
        gauss() {
            const width = this.width, height = this.height;
            const uRowArrays = this.asRowArrays(Float64Array);
            const lRowArrays = arrayFromFunction(height, row => new Float64Array(width));
            const pRowArrays = Matrix.identityN(height).asRowArrays(Float64Array);
            let currentRowIndex = 0;
            for (let colIndex = 0; colIndex < width; colIndex++) {
                // console.log('currentRowIndex', currentRowIndex)	// find largest value in colIndex
                let maxAbsValue = 0, pivotRowIndex = -1, numberOfNonZeroRows = 0;
                for (let rowIndex = currentRowIndex; rowIndex < height; rowIndex++) {
                    const el = uRowArrays[rowIndex][colIndex];
                    numberOfNonZeroRows += +(0 != el);
                    if (Math.abs(el) > maxAbsValue) {
                        maxAbsValue = Math.abs(el);
                        pivotRowIndex = rowIndex;
                    }
                }
                // TODO: check with isZero
                if (0 == maxAbsValue) {
                    // column contains only zeros
                    continue;
                }
                assert(-1 !== pivotRowIndex);
                // swap rows
                arraySwap(uRowArrays, currentRowIndex, pivotRowIndex);
                arraySwap(lRowArrays, currentRowIndex, pivotRowIndex);
                arraySwap(pRowArrays, currentRowIndex, pivotRowIndex);
                lRowArrays[currentRowIndex][colIndex] = 1;
                if (1 < numberOfNonZeroRows) {
                    // subtract pivot (now current) row from all below it
                    for (let rowIndex = currentRowIndex + 1; rowIndex < height; rowIndex++) {
                        const l = uRowArrays[rowIndex][colIndex] / uRowArrays[currentRowIndex][colIndex];
                        lRowArrays[rowIndex][colIndex] = l;
                        // subtract pivot row * l from row 'rowIndex'
                        for (let colIndex2 = colIndex; colIndex2 < width; colIndex2++) {
                            uRowArrays[rowIndex][colIndex2] -= l * uRowArrays[currentRowIndex][colIndex2];
                        }
                    }
                }
                currentRowIndex++; // this doesn't increase if pivot was zero
            }
            return {
                L: Matrix.fromRowArrays(...lRowArrays),
                U: Matrix.fromRowArrays(...uRowArrays),
                P: Matrix.fromRowArrays(...pRowArrays),
            };
        }
        qrDecompositionGivensRotation() {
            // function sigma(c: number, s: number) {
            // 	if (0 == c) {
            // 		return 1
            // 	}
            // 	if (Math.abs(s) < Math.abs(c)) {
            // 		return 0.5 * Math.sign(c) * s
            // 	}
            // 	return (2 * Math.sign(s)) / c
            // }
            const R = this.copy();
            function matrixForCS(dim, i, k, c, s) {
                const m = Matrix.identityN(dim);
                m.setEl(i, i, c);
                m.setEl(k, k, c);
                m.setEl(i, k, s);
                m.setEl(k, i, -s);
                return m;
            }
            let qTransposed = Matrix.identityN(this.height);
            for (let colIndex = 0; colIndex < this.width; colIndex++) {
                // find largest value in colIndex
                for (let rowIndex = colIndex + 1; rowIndex < this.height; rowIndex++) {
                    //console.log('row ', rowIndex, 'col ', colIndex)
                    const xi = R.e(colIndex, colIndex);
                    const xk = R.e(rowIndex, colIndex);
                    if (xk == 0) {
                        continue;
                    }
                    const r = Math.hypot(xi, xk);
                    const c = xi / r;
                    const s = xk / r;
                    // apply transformation on every column:
                    for (let col2 = colIndex; col2 < this.width; col2++) {
                        const x1 = R.e(colIndex, col2) * c + R.e(rowIndex, col2) * s;
                        const x2 = R.e(rowIndex, col2) * c - R.e(colIndex, col2) * s;
                        R.setEl(colIndex, col2, x1);
                        R.setEl(rowIndex, col2, x2);
                    }
                    //console.log('r ', r, 'c ', c, 's ', s, 'sigma', sigma(c, s))
                    //console.log(this.toString(),'cs\n', matrixForCS(this.height, colIndex, rowIndex, c, s).toString())
                    qTransposed = matrixForCS(this.height, colIndex, rowIndex, c, s).times(qTransposed);
                }
            }
            //console.log(qTransposed.transposed().toString(), this.toString(),
            // qTransposed.transposed().times(this).toString())
            return { Q: qTransposed.transposed(), R };
        }
        isPermutation() {
            if (!this.isSquare())
                return false;
            if (this.m.some(value => !eq0(value) && !eq(1, value)))
                return false;
            const rows = this.asRowArrays(Array);
            if (rows.some(row => row.filter(value => eq(1, value)).length != 1))
                return false;
            const cols = this.asColArrays(Array);
            if (cols.some(col => col.filter(value => eq(1, value)).length != 1))
                return false;
            return true;
        }
        isDiagonal(precision) {
            let i = this.m.length;
            while (i--) {
                if (0 !== i % (this.width + 1) && !eq0(this.m[i]))
                    return false;
            }
            return true;
        }
        isIdentity(precision) {
            return this.isLowerUnitriangular(precision) && this.isUpperTriangular(precision);
        }
        isUpperTriangular(precision = NLA_PRECISION) {
            if (!this.isSquare())
                return false;
            for (let rowIndex = 1; rowIndex < this.height; rowIndex++) {
                for (let colIndex = 0; colIndex < rowIndex; colIndex++) {
                    if (!eq0(this.m[rowIndex * this.width + colIndex], precision)) {
                        return false;
                    }
                }
            }
            return true;
        }
        isSymmetric(precision = NLA_PRECISION) {
            if (!this.isSquare())
                return false;
            for (let rowIndex = 0; rowIndex < this.height - 1; rowIndex++) {
                for (let colIndex = rowIndex + 1; colIndex < this.width; colIndex++) {
                    const a = this.m[rowIndex * this.width + colIndex];
                    const b = this.m[colIndex * this.width + rowIndex];
                    if (!eq(a, b, precision)) {
                        return false;
                    }
                }
            }
            return true;
        }
        /**
         * Returns x, so that this * x = b
         * More efficient than calculating the inverse for few (~ <= this.height) values
         */
        solveLinearSystem(b) {
            assertInst(Vector, b);
            const { L, U, P } = this.luDecomposition();
            const y = L.solveForwards(P.timesVector(b));
            const x = U.solveBackwards(y);
            return x;
        }
        isLowerUnitriangular(precision = NLA_PRECISION) {
            if (!this.isSquare())
                return false;
            for (let rowIndex = 0; rowIndex < this.height - 1; rowIndex++) {
                for (let colIndex = rowIndex; colIndex < this.width; colIndex++) {
                    const el = this.m[rowIndex * this.width + colIndex];
                    if (rowIndex == colIndex ? !eq(1, el, precision) : !eq0(el, precision)) {
                        return false;
                    }
                }
            }
            return true;
        }
        isLowerTriangular(precision = NLA_PRECISION) {
            if (!this.isSquare())
                return false;
            for (let rowIndex = 0; rowIndex < this.height - 1; rowIndex++) {
                for (let colIndex = rowIndex + 1; colIndex < this.width; colIndex++) {
                    if (!eq0(this.m[rowIndex * this.width + colIndex], precision)) {
                        return false;
                    }
                }
            }
            return true;
        }
        solveBackwards(x) {
            assertVectors(x);
            assert(this.height == x.dim(), 'this.height == x.dim()');
            assert(this.isUpperTriangular(), 'this.isUpperTriangular()\n' + this.str);
            const v = new Float64Array(this.width);
            let rowIndex = this.height;
            while (rowIndex--) {
                let temp = x.v[rowIndex];
                for (let colIndex = rowIndex + 1; colIndex < this.width; colIndex++) {
                    temp -= v[colIndex] * this.e(rowIndex, colIndex);
                }
                v[rowIndex] = temp / this.e(rowIndex, rowIndex);
            }
            return new Vector(v);
        }
        solveBackwardsMatrix(matrix) {
            const colVectors = new Array(matrix.width);
            let i = matrix.width;
            while (i--) {
                colVectors[i] = this.solveBackwards(matrix.col(i));
            }
            return Matrix.fromColVectors(colVectors);
        }
        solveForwardsMatrix(matrix) {
            const colVectors = new Array(matrix.width);
            let i = matrix.width;
            while (i--) {
                colVectors[i] = this.solveForwards(matrix.col(i));
            }
            return Matrix.fromColVectors(colVectors);
        }
        solveForwards(x) {
            assertVectors(x);
            assert(this.height == x.dim(), 'this.height == x.dim()');
            assertf(() => this.isLowerTriangular(), this.toString());
            const v = new Float64Array(this.width);
            for (let rowIndex = 0; rowIndex < this.height; rowIndex++) {
                let temp = x.v[rowIndex];
                for (let colIndex = 0; colIndex < rowIndex; colIndex++) {
                    temp -= v[colIndex] * this.e(rowIndex, colIndex);
                }
                v[rowIndex] = temp / this.e(rowIndex, rowIndex);
            }
            return new Vector(v);
        }
        /**
         * Calculates rank of matrix.
         * Number of linearly independant row/column vectors.
         * Is equal to the unmber of dimensions the image of the affine transformation represented this matrix has.
         */
        rank() {
            const U = this.gauss().U;
            let rowIndex = this.height;
            while (rowIndex-- && U.row(rowIndex).isZero()) { }
            return rowIndex + 1;
        }
        rowsIndependent() {
            return this.height == this.rank();
        }
        colsIndependent() {
            return this.width == this.rank();
        }
        asRowArrays(arrayConstructor = Float64Array) {
            return arrayFromFunction(this.height, rowIndex => this.rowArray(rowIndex, arrayConstructor));
        }
        asColArrays(arrayConstructor = Float64Array) {
            return arrayFromFunction(this.width, colIndex => this.colArray(colIndex, arrayConstructor));
        }
        rowArray(rowIndex, arrayConstructor = Float64Array) {
            const result = new arrayConstructor(this.width);
            return arrayCopy(this.m, rowIndex * this.width, result, 0, this.width);
            return result;
        }
        colArray(colIndex, arrayConstructor = Float64Array) {
            const result = new arrayConstructor(this.width);
            arrayCopyStep(this.m, colIndex, this.height, result, 0, 1, this.height);
            return result;
        }
        subMatrix(firstColIndex, subWidth, firstRowIndex, subHeight) {
            assert(0 < firstColIndex && 0 < subWidth && 0 < firstRowIndex && 0 < subHeight);
            assert(firstColIndex + subWidth <= this.width && firstRowIndex + subHeight <= this.height);
            const m = new Float64Array(subWidth * subHeight);
            arrayCopyBlocks(this.m, firstColIndex, this.width, m, 0, subWidth, subHeight, subWidth);
            return new Matrix(subWidth, subHeight, m);
        }
        map(fn) {
            return new Matrix(this.width, this.height, this.m.map(fn));
        }
        dimEquals(matrix) {
            assertInst(Matrix, matrix);
            return this.width == matrix.width && this.height == matrix.height;
        }
        inversed() {
            if (this.isSquare()) {
                if (2 == this.width)
                    return this.inversed2();
                if (3 == this.width)
                    return this.inversed3();
                if (4 == this.width)
                    return this.inversed4();
            }
            const { L, U, P } = this.luDecomposition();
            const y = L.solveForwardsMatrix(P);
            const inverse = U.solveBackwardsMatrix(y);
            return inverse;
        }
        inversed2() {
            assertf(() => 2 == this.width && 2 == this.height);
            const result = Matrix.forWidthHeight(2, 2), m = this.m, r = result.m;
            const det = m[0] * m[3] - m[1] * r[2];
            r[0] = m[3] / det;
            r[1] = -m[2] / det;
            r[2] = -m[1] / det;
            r[3] = m[0] / det;
            return result;
        }
        inversed3(result = Matrix.forWidthHeight(3, 3)) {
            assertInst(Matrix, result);
            assertf(() => 3 == this.width && 3 == this.height);
            assertf(() => 3 == result.width && 3 == result.height);
            assert(() => this != result);
            const m = this.m, r = result.m;
            r[0] = m[4] * m[8] - m[5] * m[7];
            r[1] = -m[1] * m[8] + m[2] * m[7];
            r[2] = m[1] * m[5] - m[2] * m[4];
            r[3] = -m[3] * m[8] + m[5] * m[6];
            r[4] = m[0] * m[8] - m[2] * m[6];
            r[5] = -m[0] * m[5] + m[2] * m[3];
            r[6] = m[3] * m[7] - m[4] * m[6];
            r[7] = -m[0] * m[7] + m[1] * m[6];
            r[8] = m[0] * m[4] - m[1] * m[3];
            const det = m[0] * r[0] + m[1] * r[3] + m[2] * r[6];
            let i = 9;
            while (i--) {
                r[i] /= det;
            }
            return result;
        }
        // prettier-ignore
        inversed4(result = Matrix.forWidthHeight(4, 4)) {
            assertInst(Matrix, result);
            assertf(() => 4 == this.width && 4 == this.height);
            assertf(() => 4 == result.width && 4 == result.height);
            assert(() => this != result);
            const m = this.m, r = result.m;
            // first compute transposed cofactor matrix:
            // cofactor of an element is the determinant of the 3x3 matrix gained by removing the column and row belonging
            // to the element
            r[0] = m[5] * m[10] * m[15] - m[5] * m[14] * m[11] - m[6] * m[9] * m[15]
                + m[6] * m[13] * m[11] + m[7] * m[9] * m[14] - m[7] * m[13] * m[10];
            r[1] = -m[1] * m[10] * m[15] + m[1] * m[14] * m[11] + m[2] * m[9] * m[15]
                - m[2] * m[13] * m[11] - m[3] * m[9] * m[14] + m[3] * m[13] * m[10];
            r[2] = m[1] * m[6] * m[15] - m[1] * m[14] * m[7] - m[2] * m[5] * m[15]
                + m[2] * m[13] * m[7] + m[3] * m[5] * m[14] - m[3] * m[13] * m[6];
            r[3] = -m[1] * m[6] * m[11] + m[1] * m[10] * m[7] + m[2] * m[5] * m[11]
                - m[2] * m[9] * m[7] - m[3] * m[5] * m[10] + m[3] * m[9] * m[6];
            r[4] = -m[4] * m[10] * m[15] + m[4] * m[14] * m[11] + m[6] * m[8] * m[15]
                - m[6] * m[12] * m[11] - m[7] * m[8] * m[14] + m[7] * m[12] * m[10];
            r[5] = m[0] * m[10] * m[15] - m[0] * m[14] * m[11] - m[2] * m[8] * m[15]
                + m[2] * m[12] * m[11] + m[3] * m[8] * m[14] - m[3] * m[12] * m[10];
            r[6] = -m[0] * m[6] * m[15] + m[0] * m[14] * m[7] + m[2] * m[4] * m[15]
                - m[2] * m[12] * m[7] - m[3] * m[4] * m[14] + m[3] * m[12] * m[6];
            r[7] = m[0] * m[6] * m[11] - m[0] * m[10] * m[7] - m[2] * m[4] * m[11]
                + m[2] * m[8] * m[7] + m[3] * m[4] * m[10] - m[3] * m[8] * m[6];
            r[8] = m[4] * m[9] * m[15] - m[4] * m[13] * m[11] - m[5] * m[8] * m[15]
                + m[5] * m[12] * m[11] + m[7] * m[8] * m[13] - m[7] * m[12] * m[9];
            r[9] = -m[0] * m[9] * m[15] + m[0] * m[13] * m[11] + m[1] * m[8] * m[15]
                - m[1] * m[12] * m[11] - m[3] * m[8] * m[13] + m[3] * m[12] * m[9];
            r[10] = m[0] * m[5] * m[15] - m[0] * m[13] * m[7] - m[1] * m[4] * m[15]
                + m[1] * m[12] * m[7] + m[3] * m[4] * m[13] - m[3] * m[12] * m[5];
            r[11] = -m[0] * m[5] * m[11] + m[0] * m[9] * m[7] + m[1] * m[4] * m[11]
                - m[1] * m[8] * m[7] - m[3] * m[4] * m[9] + m[3] * m[8] * m[5];
            r[12] = -m[4] * m[9] * m[14] + m[4] * m[13] * m[10] + m[5] * m[8] * m[14]
                - m[5] * m[12] * m[10] - m[6] * m[8] * m[13] + m[6] * m[12] * m[9];
            r[13] = m[0] * m[9] * m[14] - m[0] * m[13] * m[10] - m[1] * m[8] * m[14]
                + m[1] * m[12] * m[10] + m[2] * m[8] * m[13] - m[2] * m[12] * m[9];
            r[14] = -m[0] * m[5] * m[14] + m[0] * m[13] * m[6] + m[1] * m[4] * m[14]
                - m[1] * m[12] * m[6] - m[2] * m[4] * m[13] + m[2] * m[12] * m[5];
            r[15] = m[0] * m[5] * m[10] - m[0] * m[9] * m[6] - m[1] * m[4] * m[10]
                + m[1] * m[8] * m[6] + m[2] * m[4] * m[9] - m[2] * m[8] * m[5];
            // calculate determinant using laplace expansion (cf https://en.wikipedia.org/wiki/Laplace_expansion),
            // as we already have the cofactors. We multiply a column by a row as the cofactor matrix is transposed.
            const det = m[0] * r[0] + m[1] * r[4] + m[2] * r[8] + m[3] * r[12];
            // assert(!isZero(det), 'det may not be zero, i.e. the matrix is not invertible')
            let i = 16;
            while (i--) {
                r[i] /= det;
            }
            return result;
        }
        canMultiply(matrix) {
            assertInst(Matrix, matrix);
            return this.width == matrix.height;
        }
        times(matrix) {
            assertInst(Matrix, matrix);
            assert(this.canMultiply(matrix), `Cannot multiply this {this.dimString()} by matrix {matrix.dimString()}`);
            const nWidth = matrix.width, nHeight = this.height, n = this.width;
            const nM = new Float64Array(nWidth * nHeight);
            let nRowIndex = nHeight;
            while (nRowIndex--) {
                let nColIndex = nWidth;
                while (nColIndex--) {
                    let result = 0;
                    let i = n;
                    while (i--) {
                        result += this.m[nRowIndex * n + i] * matrix.m[i * nWidth + nColIndex];
                    }
                    nM[nRowIndex * nWidth + nColIndex] = result;
                }
            }
            return new Matrix(nWidth, nHeight, nM);
        }
        timesVector(v) {
            assertVectors(v);
            assert(this.width == v.dim());
            const nHeight = this.height, n = this.width;
            const nM = new Float64Array(nHeight);
            let nRowIndex = nHeight;
            while (nRowIndex--) {
                let result = 0;
                let i = n;
                while (i--) {
                    result += this.m[nRowIndex * n + i] * v.v[i];
                }
                nM[nRowIndex] = result;
            }
            return new Vector(nM);
        }
        transposed() {
            const tWidth = this.height, tHeight = this.width;
            const tM = new Float64Array(tWidth * tHeight);
            let tRowIndex = tHeight;
            while (tRowIndex--) {
                let tColIndex = tWidth;
                while (tColIndex--) {
                    tM[tRowIndex * tWidth + tColIndex] = this.m[tColIndex * tHeight + tRowIndex];
                }
            }
            return new Matrix(tWidth, tHeight, tM);
        }
        /**
         * In-place transpose.
         */
        transpose() {
            const h = this.height, w = this.width, tM = this.m;
            let tRowIndex = h;
            while (tRowIndex--) {
                let tColIndex = Math.min(tRowIndex, w);
                while (tColIndex--) {
                    const temp = tM[tRowIndex * w + tColIndex];
                    tM[tRowIndex * w + tColIndex] = tM[tColIndex * h + tRowIndex];
                    tM[tColIndex * h + tRowIndex] = temp;
                }
            }
            this.width = h;
            this.height = w;
        }
        isSquare() {
            return this.height == this.width;
        }
        diagonal() {
            if (!this.isSquare()) {
                throw new Error('!!');
            }
            const v = new Float64Array(this.width);
            let elIndex = this.width * (this.width + 1);
            let vIndex = this.width;
            while (vIndex--) {
                elIndex -= this.width + 1;
                v[vIndex] = this.m[elIndex];
            }
            return new Vector(v);
        }
        maxEl() {
            return Math.max.apply(undefined, this.m);
        }
        minEl() {
            return Math.min.apply(undefined, this.m);
        }
        maxAbsColSum() {
            let result = 0;
            let colIndex = this.width;
            while (colIndex--) {
                let absSum = 0;
                let rowIndex = this.height;
                while (rowIndex--) {
                    absSum += Math.abs(this.m[rowIndex * this.width + colIndex]);
                }
                result = Math.max(result, absSum);
            }
            return result;
        }
        maxAbsRowSum() {
            let result = 0;
            let rowIndex = this.height;
            while (rowIndex--) {
                let absSum = 0;
                let colIndex = this.width;
                while (colIndex--) {
                    absSum += Math.abs(this.m[rowIndex * this.width + colIndex]);
                }
                result = Math.max(result, absSum);
            }
            return result;
        }
        getTriangularDeterminant() {
            assert(this.isUpperTriangular() || this.isLowerTriangular(), 'not a triangular matrix');
            let product = 1;
            let elIndex = this.width * (this.width + 1);
            while (elIndex) {
                elIndex -= this.width + 1;
                product *= this.m[elIndex];
            }
            return product;
        }
        /**
         * Calculates the determinant by first calculating the LU decomposition. If you already have that, use
         * U.getTriangularDeterminant()
         */
        getDeterminant() {
            // PA = LU
            // det(A) * det(B) = det(A * B)
            // det(P) == 1 (permutation matrix)
            // det(L) == 1 (main diagonal is 1s
            // =>  det(A) == det(U)
            return this.luDecomposition().U.getTriangularDeterminant();
        }
        hasFullRank() {
            return Math.min(this.width, this.height) == this.rank();
        }
        permutationAsIndexMap() {
            assertf(() => this.isPermutation());
            const result = new Array(this.height);
            let i = this.height;
            while (i--) {
                const searchIndexStart = i * this.width;
                let searchIndex = searchIndexStart;
                while (this.m[searchIndex] < 0.5)
                    searchIndex++;
                result[i] = searchIndex - searchIndexStart;
            }
            return result;
        }
        getDependentRowIndexes(gauss = this.gauss()) {
            const { L, U, P } = gauss;
            // rows which end up as zero vectors in U are not linearly independent
            const dependents = new Array(this.height);
            let uRowIndex = this.height;
            while (uRowIndex--) {
                const uRow = U.row(uRowIndex);
                if (uRow.length() < NLA_PRECISION) {
                    dependents[uRowIndex] = true;
                }
                else {
                    break;
                }
            }
            // figure out from which other rows the rows which end up as zero vectors are created by
            let lRowIndex = this.height;
            while (lRowIndex--) {
                if (dependents[lRowIndex]) {
                    let lColIndex = Math.min(lRowIndex, this.width);
                    while (lColIndex--) {
                        if (0 !== L.e(lRowIndex, lColIndex)) {
                            dependents[lColIndex] = true;
                        }
                    }
                }
            }
            console.log('m\n', this.toString(x => '' + x));
            console.log('L\n', L.toString(x => '' + x));
            console.log('U\n', U.toString(x => '' + x));
            console.log('P\n', P.toString(x => '' + x));
            // gauss algorithm permutes the order of the rows, so map our results back to the original indices
            const indexMap = P.permutationAsIndexMap();
            const dependentRowIndexes = dependents.map((b, index) => b && indexMap[index]).filter(x => x != undefined);
            return dependentRowIndexes;
        }
        lerp(b, t, result = this.new()) {
            assertInst(Matrix, b, result);
            assertNumbers(t);
            assert(this.width == b.width && this.height == b.height);
            const s = 1 - t;
            let i = this.m.length;
            while (i--) {
                result.m[i] = s * this.m[i] + t * b.m[i];
            }
            return result;
        }
    }

    const { abs, sign } = Math;
    const PI = Math.PI;
    const TAU = 2 * PI;
    /** Use rollup-plugin-replace or similar to avoid error in browser. */
    const NLA_DEBUG = "development" != 'production';
    const NLA_PRECISION = 1 / (1 << 26);
    console.log('NLA_PRECISION', NLA_PRECISION);
    console.log('NLA_DEBUG', NLA_DEBUG);
    let oldConsole = undefined;
    function disableConsole() {
        oldConsole = console.log;
        console.log = function () { };
    }
    function enableConsole() {
        if (oldConsole) {
            console.log = oldConsole;
        }
    }
    function hasConstructor(instance, cons) {
        return instance.constructor == cons;
    }
    function getIntervals(ts, min, max) {
        ts.sort((a, b) => a - b);
        if (!eq(ts[0], min)) {
            ts.splice(0, 0, min);
        }
        if (!eq(ts.last, max)) {
            ts.push(max);
        }
        return arrayFromFunction(ts.length - 1, i => [ts[i], ts[i + 1]]);
    }
    function assertVectors(...vectors) {
        {
            for (let i = 0; i < arguments.length; i++) {
                if (!(arguments[i] instanceof V3 || arguments[i] instanceof Vector)) {
                    throw new Error('assertVectors arguments[' +
                        i +
                        '] is not a vector. ' +
                        typeof arguments[i] +
                        ' == typeof ' +
                        arguments[i]);
                }
            }
        }
        return true;
    }
    function assertInst(what, ...objs) {
        {
            for (let i = 0; i < objs.length; i++) {
                if (!(objs[i] instanceof what)) {
                    throw new Error('assertInst objs[' +
                        i +
                        '] is not a ' +
                        what.prototype.name +
                        '. ' +
                        objs[i].constructor.name +
                        objs[i]);
                }
            }
        }
        return true;
    }
    function assertNumbers(...numbers) {
        {
            for (let i = 0; i < numbers.length; i++) {
                if ('number' !== typeof numbers[i]) {
                    throw new Error(`assertNumbers arguments[${i}] is not a number. ${typeof numbers[i]} == typeof ${numbers[i]}`);
                }
            }
        }
        return true;
    }
    function assertInts(...numbers) {
        {
            for (let i = 0; i < numbers.length; i++) {
                if ('number' !== typeof numbers[i] || numbers[i] % 1 !== 0) {
                    throw new Error(`assertNumbers arguments[${i}] is not an int. ${typeof numbers[i]} == typeof ${numbers[i]}`);
                }
            }
        }
        return true;
    }
    function assert(value, ...messages) {
        if (!value) {
            throw new Error('assert failed: ' +
                messages.map(message => ('function' === typeof message ? message() : message || '')).join('\n'));
        }
        return true;
    }
    function assertNever(value) {
        throw new Error();
    }
    function assertf(f, ...messages) {
        if (!f()) {
            throw new Error('assertf failed: ' +
                f.toString() +
                messages.map(message => ('function' === typeof message ? message() : message || '')).join('\n'));
        }
    }
    function lerp(a, b, t) {
        return a * (1 - t) + b * t;
    }
    const originalNumberToString = Number.prototype.toString;
    Number.prototype.toString = function (radix) {
        if (PI == this) {
            return 'PI';
        }
        return originalNumberToString.call(this, radix);
    };
    const eq0 = (x, EPS = NLA_PRECISION) => Math.abs(x) <= EPS;
    const eq = (x, y, EPS = NLA_PRECISION) => Math.abs(x - y) <= EPS;
    const lt = (x, y, EPS = NLA_PRECISION) => x - y < -EPS;
    const gt = (x, y, EPS = NLA_PRECISION) => y - x < -EPS;
    const le$1 = (x, y, EPS = NLA_PRECISION) => x - y <= EPS;
    const ge$1 = (x, y, EPS = NLA_PRECISION) => y - x <= EPS;
    const snap = (x, to) => (Math.abs(x - to) <= NLA_PRECISION ? to : x);
    const snap2 = (x, ...to) => to.reduce((x, to) => (Math.abs(x - to) <= NLA_PRECISION ? to : x), x);
    const snap0 = (x, EPS = NLA_PRECISION) => (Math.abs(x) <= EPS ? 0 : x);
    /** @deprecated */ const eq2 = eq;
    /**
     * Decimal adjustment of a number.
     *
     * @param f  The type of adjustment.
     * @param value The number.
     * @param exp The exponent (the 10 logarithm of the adjustment base).
     * @returns The adjusted value.
     */
    function decimalAdjust(f, value, exp) {
        // If the exp is undefined or zero...
        if (typeof exp === 'undefined' || +exp === 0) {
            return f(value);
        }
        value = +value;
        exp = +exp;
        // If the value is not a number or the exp is not an integer...
        if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
            return NaN;
        }
        // Shift
        let vs = value.toString().split('e');
        value = f(+(vs[0] + 'e' + (vs[1] ? +vs[1] - exp : -exp)));
        // Shift back
        vs = value.toString().split('e');
        return +(vs[0] + 'e' + (vs[1] ? +vs[1] + exp : exp));
    }
    const round10 = decimalAdjust.bind(undefined, Math.round);
    const floor10 = decimalAdjust.bind(undefined, Math.floor);
    const ceil10 = decimalAdjust.bind(undefined, Math.ceil);
    const GOLDEN_RATIO = (1 + Math.sqrt(5)) / 2;
    function mod(a, b) {
        return ((a % b) + b) % b;
    }
    function arraySwap(arr, i, j) {
        const temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    function arrayCopy(src, sstart, dst, dstart, length) {
        assertInts(sstart, dstart, length);
        dstart += length;
        length += sstart;
        while (length-- > sstart) {
            dst[--dstart] = src[length];
        }
        return dst;
    }
    function clamp(val, min, max) {
        assertNumbers(val, min, max);
        return Math.max(min, Math.min(max, val));
    }
    function between(val, min, max) {
        assertNumbers(val, min, max);
        return min <= val && val <= max;
    }
    function fuzzyBetween(val, min, max) {
        return le$1(min, val) && le$1(val, max);
    }
    function mapPush(map, key, val) {
        const array = map.get(key);
        if (array) {
            array.push(val);
        }
        else {
            map.set(key, [val]);
        }
    }
    /**
     * Copies a number of items from one array to another, with a definable step size between items in the source and
     * destination array.
     *
     * @param src The source array.
     * @param sstart The location of the first item in the source array.
     * @param sstep The offset between items in the source array.
     * @param dst The destination array.
     * @param dstart The location of the first item in the destination array.
     * @param dstep The offset between items in the destination array.
     * @param count The number of items to copy.
     */
    function arrayCopyStep(src, sstart, sstep, dst, dstart, dstep, count) {
        let srcIndex = sstart + count * sstep;
        let dIndex = dstart + count * dstep;
        while (srcIndex > sstart) {
            dst[(dIndex -= dstep)] = src[(srcIndex -= sstep)];
        }
    }
    /**
     * Copies a number of contiguous, evenly-spaced blocks from one array to another.
     *
     * @param src The source array.
     * @param sstart The start of the first block in the source array.
     * @param sstep The offset from the start of one block to the start of the next block in the source array.
     * @param dst The destination array.
     * @param dstart The start of the first block in the destination array.
     * @param dstep The offset from the start of one block to the start of the next block in the destination array.
     * @param blockSize The length of one block.
     * @param blockCount The number of blocks to copy.
     */
    function arrayCopyBlocks(src, sstart, sstep, dst, dstart, dstep, blockSize, blockCount) {
        for (let i = 0; i < blockCount; i++) {
            arrayCopy(src, sstart + sstep * i, dst, dstart + dstep * i, blockSize);
        }
    }
    function arrayRange(startInclusive, endExclusive, step = 1) {
        assertNumbers(startInclusive, step);
        //console.log(Math.ceil((endExclusive - startInclusive) / step))
        const arrLength = Math.ceil((endExclusive - startInclusive) / step);
        const result = new Array(arrLength); // '- startInclusive' so that chunk in the last row will also be selected, even
        // if the row is not complete
        for (let i = startInclusive, index = 0; index < arrLength; i += step, index++) {
            result[index] = i;
        }
        return result;
    }
    /**
     * Returns a number of evenly-spaced values between t0 and t1 (inclusive).
     * @param t0 First value.
     * @param t1 Last value.
     * @param count Total number of values.
     */
    function arraySamples(t0, t1, count = 64) {
        return arrayFromFunction(count, i => lerp(t0, t1, i / (count - 1)));
    }
    function arrayFromFunction(length, f) {
        assertNumbers(length);
        assert('function' == typeof f);
        const a = new Array(length);
        let elIndex = length;
        while (elIndex--) {
            a[elIndex] = f(elIndex, length);
        }
        return a;
    }
    function fuzzyUniques(vals) {
        const round = (val) => Math.floor(val * (1 << 26)) / (1 << 26);
        const map = new Map();
        for (let i = 0; i < vals.length; i++) {
            const val = vals[i], roundVal = round(val);
            let key;
            if (!map.has(roundVal) &&
                !((key = map.get(roundVal - 1 / (1 << 26))) && eq(key, val)) &&
                !((key = map.get(roundVal + 1 / (1 << 26))) && eq(key, val))) {
                map.set(roundVal, val);
            }
        }
        return Array.from(map.values());
    }
    function fuzzyUniquesF(vals, f) {
        const round = (val) => Math.floor(val * (1 << 26)) / (1 << 26);
        const map = new Map();
        for (let i = 0; i < vals.length; i++) {
            const val = vals[i], roundVal = round(f(val));
            let key;
            if (!map.has(roundVal) &&
                !((key = map.get(roundVal - 1 / (1 << 26))) && eq(key, f(val))) &&
                !((key = map.get(roundVal + 1 / (1 << 26))) && eq(key, f(val)))) {
                map.set(roundVal, val);
            }
        }
        return Array.from(map.values());
    }
    function addOwnProperties(target, props, ...exclude) {
        Object.getOwnPropertyNames(props).forEach(key => {
            //console.log(props, key)
            if (!exclude.includes(key)) {
                if (target.hasOwnProperty(key)) {
                    console.warn('target ', target, ' already has property ', key, target[key]);
                }
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(props, key));
            }
        });
    }
    let defaultRoundFunction = (x) => x; // Math.round10(x, -4)
    const MINUS = (a, b) => a - b;
    function floatHashCode(f) {
        return ~~(f * (1 << 28));
    }
    /**
     * combinations(2) will generate
     * [0,0] [0,1] [1,1] [0,2] [1,2] [2,2]
     */
    function* combinations(n) {
        for (let i = 0; i < n; i++) {
            for (let j = i; j < n; j++) {
                yield { i: i, j: j };
            }
        }
    }
    /**
     * One degree in radians. Use like Math.sin(30 * DEG).
     */
    const DEG = 0.017453292519943295;
    Object.map = function (o, f, context = undefined) {
        const result = {};
        for (const key in o) {
            result[key] = f.call(context, o[key], key, o);
        }
        return result;
    };
    Array.prototype.emod = function (i) {
        return this[i % this.length];
    };
    Array.prototype.sliceStep = function (start, end, step, chunkSize = 1) {
        assertNumbers(start, step);
        start < 0 && (start = this.length + start);
        end <= 0 && (end = this.length + end);
        const resultLength = Math.ceil((end - start) / step);
        const result = new Array(resultLength); // '- start' so that chunk in the last row
        // will also be selected, even if the row is
        // not complete
        let index = 0;
        for (let i = start; i < end; i += step) {
            for (let j = i; j < Math.min(i + chunkSize, end); j++) {
                result[index++] = this[j];
            }
        }
        assert(resultLength == index);
        return result;
    };
    Array.prototype.splicePure = function (start = 0, deleteCount = 0, ...items) {
        const arrayLength = this.length;
        const _deleteCount = deleteCount < 0 ? 0 : deleteCount;
        let _start;
        if (start < 0) {
            if (Math.abs(start) > arrayLength) {
                _start = 0;
            }
            else {
                _start = arrayLength + start;
            }
        }
        else if (start > arrayLength) {
            _start = arrayLength;
        }
        else {
            _start = start;
        }
        const newLength = this.length - _deleteCount + items.length;
        const result = new Array(newLength);
        let dst = newLength;
        let src = this.length;
        while (src-- > _start + _deleteCount) {
            result[--dst] = this[src];
        }
        src = items.length;
        while (src--) {
            result[--dst] = items[src];
        }
        src = _start;
        while (src--) {
            result[--dst] = items[src];
        }
        return result;
    };
    Array.prototype.equals = function (obj) {
        if (this === obj)
            return true;
        if (Object.getPrototypeOf(obj) !== Array.prototype)
            return false;
        if (this.length !== obj.length)
            return false;
        for (let i = 0; i < this.length; i++) {
            if (!equals(this[i], obj[i]))
                return false;
        }
        return true;
    };
    function equals(a, b) {
        return 'object' === typeof a ? a.equals(b) : a === b;
    }
    Array.prototype.hashCode = function () {
        let result = 0;
        for (let i = 0; i < this.length; i++) {
            result = (result * 31 + hashCode(this[i])) | 0;
        }
        return result | 0;
    };
    function hashCode(o) {
        if ('number' === typeof o || undefined === o) {
            return o | 0;
        }
        else {
            return null === o ? 0 : o.hashCode();
        }
    }
    Array.prototype.mapFilter = function (f) {
        const length = this.length, result = [];
        for (let i = 0; i < length; i++) {
            if (i in this) {
                const val = f(this[i], i, this);
                if (val) {
                    result.push(val);
                }
            }
        }
        return result;
    };
    Array.prototype.flatMap = function (f) {
        return Array.prototype.concat.apply([], this.map(f));
    };
    Array.prototype.clear = function (...newItems) {
        return this.splice(0, this.length, ...newItems);
    };
    /**
     *
     * @returns Array.prototype.concat.apply([], this)
     */
    Array.prototype.concatenated = function () {
        return Array.prototype.concat.apply([], this);
    };
    Array.prototype.min = function () {
        let i = this.length, max = Infinity;
        while (i--) {
            const val = this[i];
            if (max > val)
                max = val;
        }
        return max;
    };
    Array.prototype.max = function () {
        // faster and no limit on array size, see https://jsperf.com/math-max-apply-vs-loop/2
        let i = this.length, max = -Infinity;
        while (i--) {
            const val = this[i];
            if (max < val)
                max = val;
        }
        return max;
    };
    Array.prototype.indexWithMax = function (f) {
        if (this.length == 0) {
            return -1;
        }
        let i = this.length, result = -1, maxVal = -Infinity;
        while (i--) {
            const val = f(this[i], i, this);
            if (val > maxVal) {
                maxVal = val;
                result = i;
            }
        }
        return result;
    };
    Array.prototype.withMax = function (f) {
        let i = this.length, result = undefined, maxVal = -Infinity;
        while (i--) {
            const el = this[i], val = f(el, i, this);
            if (val > maxVal) {
                maxVal = val;
                result = el;
            }
        }
        return result;
    };
    /**
     * Returns the sum of the absolute values of the components of this vector.
     * E.g. V(1, -2, 3) === abs(1) + abs(-2) + abs(3) === 1 + 2 + 3 === 6
     */
    Array.prototype.absSum = function () {
        let i = this.length;
        let result = 0;
        while (i--) {
            result += Math.abs(this[i]);
        }
        return result;
    };
    Array.prototype.sum = function () {
        let i = this.length;
        let result = 0;
        while (i--) {
            result += this[i];
        }
        return result;
    };
    Array.prototype.sumInPlaceTree = function () {
        if (0 == this.length)
            return 0;
        let l = this.length;
        while (l != 1) {
            const lHalfFloor = Math.floor(l / 2);
            const lHalfCeil = Math.ceil(l / 2);
            for (let i = 0; i < lHalfFloor; i++) {
                this[i] += this[i + lHalfCeil];
            }
            l = lHalfCeil;
        }
        return this[0];
    };
    Array.prototype.isEmpty = function () {
        return 0 == this.length;
    };
    Array.prototype.unique = function () {
        const uniqueSet = new Set(this);
        return Array.from(uniqueSet);
    };
    Array.prototype.remove = function (o) {
        const index = this.indexOf(o);
        if (index != -1) {
            this.splice(index, 1);
            return true;
        }
        return false;
    };
    Array.prototype.removeIndex = function (i) {
        const result = this[i];
        this.splice(i, 1);
        return result;
    };
    Array.prototype.bagRemoveIndex = function (i) {
        const result = this[i];
        if (i == this.length - 1) {
            this.pop();
        }
        else {
            this[i] = this.pop();
        }
        return result;
    };
    Array.prototype.removeMatch = function (matcher) {
        const index = this.findIndex(matcher);
        if (-1 != index) {
            return this.removeIndex(index);
        }
    };
    Array.prototype.removeAll = function (o) {
        let i = o.length;
        while (i--) {
            this.remove(o[i]);
        }
    };
    Array.prototype.toggle = function (o) {
        const index = this.indexOf(o);
        if (index != -1) {
            this.splice(index, 1);
            return false;
        }
        else {
            this.push(o);
            return true;
        }
    };
    Array.prototype.bagToggle = function (o) {
        const index = this.indexOf(o);
        if (index != -1) {
            this.bagRemoveIndex(index);
            return false;
        }
        else {
            this.push(o);
            return true;
        }
    };
    Array.prototype.binaryIndexOf = function (searchElement, cmp = (a, b) => a - b) {
        let minIndex = 0;
        let maxIndex = this.length - 1;
        let currentIndex;
        let currentElement;
        while (minIndex <= maxIndex) {
            currentIndex = ((minIndex + maxIndex) / 2) | 0;
            currentElement = this[currentIndex];
            if (cmp(currentElement, searchElement) < 0) {
                minIndex = currentIndex + 1;
            }
            else if (cmp(currentElement, searchElement) > 0) {
                maxIndex = currentIndex - 1;
            }
            else {
                return currentIndex;
            }
        }
        return -minIndex - 1;
    };
    Array.prototype.binaryInsert = function (el, cmp = MINUS) {
        let minIndex = 0;
        let maxIndex = this.length;
        let currentIndex;
        let currentElement;
        while (minIndex < maxIndex) {
            currentIndex = ~~((minIndex + maxIndex) / 2);
            currentElement = this[currentIndex];
            if (cmp(currentElement, el) < 0) {
                minIndex = currentIndex + 1;
            }
            else {
                maxIndex = currentIndex;
            }
        }
        this.splice(minIndex, 0, el);
    };
    Array.prototype.firstUnsorted = function (c) {
        for (let i = 1; i < this.length; i++) {
            if (c(this[i - 1], this[i]) > 0)
                return i;
        }
        return -1;
    };
    Object.defineProperty(Array.prototype, 'last', {
        get() {
            return this[this.length - 1];
        },
        set(val) {
            this[this.length - 1] = val;
        },
    });
    String.prototype.capitalizeFirstLetter = function () {
        return this.charAt(0).toUpperCase() + this.slice(1);
    };
    String.prototype.equals = function (x) {
        return this == x;
    };
    function SCE(o) {
        switch (typeof o) {
            case 'undefined':
                return 'undefined';
            case 'function':
                return o.toString();
            case 'number':
                return '' + o;
            case 'string':
                return JSON.stringify(o);
            case 'object':
                if (null == o) {
                    return 'null';
                }
                else {
                    return o.sce;
                }
            default:
                throw new Error();
        }
    }
    Object.defineProperty(Object.prototype, 'sce', {
        get: function () {
            return this.toSource();
        },
    });
    Object.defineProperty(Object.prototype, 'str', {
        get: function () {
            return this.toString();
        },
    });
    //const NLA = {}
    //for (let key in ARRAY_UTILITIES) {
    //    const nlaName = 'array' + key.capitalizeFirstLetter()
    //    assert(!NLA[nlaName])
    //    NLA[nlaName] = (arr, ...rest) => ARRAY_UTILITIES[key].apply(arr, rest)
    //}
    function isCCW(vertices, normal) {
        const dsa = doubleSignedArea(vertices, normal);
        assert(0 != dsa);
        return dsa < 0;
    }
    function doubleSignedArea(vertices, normal) {
        assert(!normal.likeO(), '!normal.likeO()');
        const absMaxDim = normal.maxAbsDim();
        // order is important, coord0 and coord1 must be set so that coord0, coord1 and maxDim span a right-hand coordinate
        // system var [coord0, coord1] = [['y', 'z'], ['z', 'x'], ['x', 'y']][maxAbsDim]
        const doubleSignedArea = vertices
            .map((v0, i, vertices) => {
            const v1 = vertices[(i + 1) % vertices.length];
            //return (v1[coord0] - v0[coord0]) * (v1[coord1] + v0[coord1])
            switch (absMaxDim) {
                case 0:
                    return (v1.y - v0.y) * (v1.z + v0.z);
                case 1:
                    return (v1.z - v0.z) * (v1.x + v0.x);
                case 2:
                    return (v1.x - v0.x) * (v1.y + v0.y);
            }
        })
            .reduce((a, b) => a + b);
        return snap(doubleSignedArea * Math.sign(normal.e(absMaxDim)), 0);
    }
    /**
     * solves x² + px + q = 0
     */
    function pqFormula(p, q) {
        // 4 times the discriminant:in
        const discriminantX4 = (p * p) / 4 - q;
        if (discriminantX4 < -NLA_PRECISION) {
            return [];
        }
        else if (discriminantX4 <= NLA_PRECISION) {
            return [-p / 2];
        }
        else {
            const root = Math.sqrt(discriminantX4);
            return [-p / 2 - root, -p / 2 + root];
        }
    }
    /**
     * from pomax' library
     * solves ax³ + bx² + cx + d = 0
     * This function from pomax' utils
     * @returns 0-3 roots
     */
    function solveCubicReal2(a, b, c, d) {
        if (eq0(a)) {
            if (eq0(b)) {
                return [-d / c];
            }
            else {
                return pqFormula(c / b, d / b);
            }
        }
        const divisor = a;
        a = b / divisor;
        b = c / divisor;
        c = d / divisor;
        const p = (3 * b - a * a) / 3, pDiv3 = p / 3, pDiv3Pow3 = pDiv3 * pDiv3 * pDiv3, q = (2 * a * a * a - 9 * a * b + 27 * c) / 27, qDiv2 = q / 2, discriminant = qDiv2 * qDiv2 + pDiv3Pow3;
        // 18abcd - 4b³d + b²c² - 4ac³ - 27a²d²
        if (discriminant < -NLA_PRECISION / 8) {
            const r = Math.sqrt(-pDiv3Pow3), t = -q / (2 * r), cosphi = t < -1 ? -1 : t > 1 ? 1 : t, // clamp t to [-1;1]
            phi = Math.acos(cosphi), t1 = 2 * Math.cbrt(r);
            const x1 = t1 * Math.cos(phi / 3) - a / 3;
            const x2 = t1 * Math.cos((phi + 2 * Math.PI) / 3) - a / 3;
            const x3 = t1 * Math.cos((phi + 4 * Math.PI) / 3) - a / 3;
            return [x1, x2, x3];
        }
        else if (discriminant <= NLA_PRECISION / 8) {
            if (0 == qDiv2) {
                // TODO: compare with likeO?
                return [-a / 3];
            }
            const u1 = qDiv2 < 0 ? Math.cbrt(-qDiv2) : -Math.cbrt(qDiv2);
            const x1 = 2 * u1 - a / 3;
            const x2 = -u1 - a / 3;
            return [x1, x2];
        }
        else {
            const sd = Math.sqrt(discriminant);
            const u1 = Math.cbrt(-qDiv2 + sd);
            const v1 = Math.cbrt(qDiv2 + sd);
            return [u1 - v1 - a / 3];
        }
    }
    function checkDerivate(f, df, a, b, maxFaults = 0) {
        const eps = 1e-4;
        let faults = 0;
        for (let t = a; t < b; t += (b - a) / 100) {
            const dfdt = df(t);
            const df2 = (f(t + eps) - f(t)) / eps;
            assert((faults += +!eq2(df2, dfdt, 0.1)) <= maxFaults, `df2 == ${df2} != ${df(t)} = df(t)`);
        }
    }
    function getRoots(f, a, b, stepSize, df) {
        const results = [];
        for (let startT = a; startT <= b; startT += stepSize) {
            const dt = stepSize * abs(df(startT));
            if (abs(f(startT)) <= dt) {
                //const t = newtonIterate1d(f, startT, 16)
                let t = newtonIterateWithDerivative(f, startT, 16, df);
                if (!eq0(f(t)) || eq0(df(t))) {
                    t = newtonIterate1d(df, startT, 16);
                    // const a = startT - dt,
                    // 	b = startT + dt
                    //if (f(a) * f(b) < 0) {
                    //    t = bisect(f, a, b, 16)
                    //} else if (df(a) * df(b) < 0) {
                    //    t = bisect(df, a, b, 16)
                    //}
                }
                if (eq0(f(t)) && !results.some(r => eq(r, t))) {
                    results.push(t);
                }
            }
        }
        return results;
    }
    function bisect(f, a, b, steps) {
        assert(a < b);
        let fA = f(a), fB = f(b);
        assert(fA * fB < 0);
        while (steps--) {
            const c = (b + a) / 2;
            const fC = f(c);
            if (sign(fA) == sign(fC)) {
                a = c;
                fA = fC;
            }
            else {
                b = c;
                fB = fC;
            }
        }
        assert(a <= (b + a) / 2);
        assert(b >= (b + a) / 2);
        return lerp(a, b, 0.5);
    }
    function newtonIterate(f, x, steps = 4, EPSILON, stepize = 1) {
        EPSILON = EPSILON || 1e-8;
        for (let i = 0; i < steps; i++) {
            const fx = f(x);
            const dfdx = Matrix.jacobi(f, x, fx, EPSILON);
            assert(!dfdx.isZero());
            const dx = dfdx.solveLinearSystem(new Vector(new Float64Array(fx))).v;
            assert(!isNaN(dx[0]));
            //console.log('fx / dfdx', fx / dfdx)
            for (let j = 0; j < x.length; j++)
                x[j] -= dx[j] * stepize;
        }
        return x;
    }
    function newtonIterate1d(f, xStart, steps = 8, epsOrDf = 1e-8) {
        if ('number' === typeof epsOrDf) {
            let x = xStart;
            for (let i = 0; i < steps; i++) {
                const fx = f(x);
                const dfdx = (f(x + epsOrDf) - fx) / epsOrDf;
                //console.log('fx / dfdx', fx / dfdx)
                x = x - fx / dfdx;
            }
            return x;
        }
        else {
            return newtonIterateWithDerivative(f, xStart, steps, epsOrDf);
        }
    }
    function newtonIterateWithDerivative(f, xStart, steps = 4, df) {
        let x = xStart;
        for (let i = 0; i < steps; i++) {
            const fx = f(x);
            const dfdx = df(x);
            if (isNaN(fx) || isNaN(dfdx)) {
                console.log();
                //console.log('fx / dfdx', fx / dfdx)
            }
            x = x - fx / dfdx;
            if (isNaN(fx)) {
                console.log();
                //console.log('fx / dfdx', fx / dfdx)
            }
        }
        return x;
    }
    function newtonIterateWithDerivative2(fAndDf, xStart, steps = 8, xMin = -Infinity, xMax = Infinity) {
        assert(steps % 1 == 0);
        let x = xStart;
        for (let i = 0; i < steps; i++) {
            const [fx, dfdx] = fAndDf(x);
            if (isNaN(fx) || isNaN(dfdx)) {
                console.log();
                //console.log('fx / dfdx', fx / dfdx)
            }
            x = x - fx / dfdx;
            if (0 == dfdx || x < xMin || xMax < x) {
                return undefined;
            }
        }
        return x;
    }
    function newtonIterateSmart(f, xStart, steps = 4, df, mindf = 1e-6) {
        let x = xStart;
        for (let i = 0; i < steps; i++) {
            const fx = f(x);
            const dfdx = df(x);
            if (abs(dfdx) < mindf && abs(fx) < mindf) {
                return newtonIterate1d(df, x, steps, df);
            }
            if (isNaN(fx) || isNaN(dfdx)) {
                console.log();
                //console.log('fx / dfdx', fx / dfdx)
            }
            x = x - fx / dfdx;
            if (isNaN(fx)) {
                console.log();
                //console.log('fx / dfdx', fx / dfdx)
            }
        }
        return x;
    }
    function newtonIterate2d(f1, f2, sStart, tStart, steps) {
        const EPSILON = 1e-6;
        steps = steps || 4;
        let s = sStart, t = tStart, f1ts, f2ts;
        do {
            /*
             | a b |-1                   |  d -b |
             | c d |   = 1 / (ad - bc) * | -c  a |
             */
            f1ts = f1(s, t);
            f2ts = f2(s, t);
            /*
             let df1s = (f1(s + EPSILON, t) - f1ts) / EPSILON, df1t = (f1(s, t + EPSILON) - f1ts) / EPSILON,
             df2s = (f2(s + EPSILON, t) - f2ts) / EPSILON, df2t = (f2(s, t + EPSILON) - f2ts) / EPSILON
             let det = df1s * df2t - df1t * df2s
             s = s - ( df2t * f1ts - df1t * f2ts) / det
             t = t - (-df2s * f1ts + df1s * f2ts) / det
             */
            // TODO: is this even more accurate?
            const df1s = f1(s + EPSILON, t) - f1ts, df1t = f1(s, t + EPSILON) - f1ts, df2s = f2(s + EPSILON, t) - f2ts, df2t = f2(s, t + EPSILON) - f2ts;
            const det = (df1s * df2t - df1t * df2s) / EPSILON;
            const ds = (df2t * f1ts - df1t * f2ts) / det;
            const dt = (-df2s * f1ts + df1s * f2ts) / det;
            s -= ds;
            t -= dt;
        } while (--steps && Math.pow(f1ts, 2) + Math.pow(f2ts, 2) > NLA_PRECISION);
        if (Math.pow(f1ts, 2) + Math.pow(f2ts, 2) > NLA_PRECISION) {
            console.log(Math.pow(f1ts, 2) + Math.pow(f2ts, 2));
            return undefined;
        }
        return new V3(s, t, 0);
    }
    function newtonIterate2dWithDerivatives(f, g, sStart, tStart, steps, dfds, dfdt, dgds, dgdt) {
        steps = steps || 4;
        let s = sStart, t = tStart;
        let f1ts, f2ts;
        do {
            /*
             | a b |-1                   |  d -b |
             | c d |   = 1 / (ad - bc) * | -c  a |
             */
            f1ts = f(s, t);
            f2ts = g(s, t);
            const df1s = dfds(s, t), df1t = dfdt(s, t), df2s = dgds(s, t), df2t = dgdt(s, t);
            // TODO: is this even more accurate?
            const det = df1s * df2t - df1t * df2s;
            const ds = (df2t * f1ts - df1t * f2ts) / det;
            const dt = (-df2s * f1ts + df1s * f2ts) / det;
            s -= ds;
            t -= dt;
        } while (--steps && f1ts * f1ts + f2ts * f2ts > NLA_PRECISION / 32);
        if (!steps) {
            //console.log(f1ts * f1ts + f2ts * f2ts)
            return undefined;
        }
        return V$2(s, t, 0);
    }
    const gaussLegendre24Xs = [
        -0.0640568928626056260850430826247450385909,
        0.0640568928626056260850430826247450385909,
        -0.1911188674736163091586398207570696318404,
        0.1911188674736163091586398207570696318404,
        -0.3150426796961633743867932913198102407864,
        0.3150426796961633743867932913198102407864,
        -0.4337935076260451384870842319133497124524,
        0.4337935076260451384870842319133497124524,
        -0.5454214713888395356583756172183723700107,
        0.5454214713888395356583756172183723700107,
        -0.6480936519369755692524957869107476266696,
        0.6480936519369755692524957869107476266696,
        -0.7401241915785543642438281030999784255232,
        0.7401241915785543642438281030999784255232,
        -0.8200019859739029219539498726697452080761,
        0.8200019859739029219539498726697452080761,
        -0.8864155270044010342131543419821967550873,
        0.8864155270044010342131543419821967550873,
        -0.9382745520027327585236490017087214496548,
        0.9382745520027327585236490017087214496548,
        -0.9747285559713094981983919930081690617411,
        0.9747285559713094981983919930081690617411,
        -0.9951872199970213601799974097007368118745,
        0.9951872199970213601799974097007368118745,
    ];
    const gaussLegendre24Weights = [
        0.1279381953467521569740561652246953718517,
        0.1279381953467521569740561652246953718517,
        0.1258374563468282961213753825111836887264,
        0.1258374563468282961213753825111836887264,
        0.121670472927803391204463153476262425607,
        0.121670472927803391204463153476262425607,
        0.1155056680537256013533444839067835598622,
        0.1155056680537256013533444839067835598622,
        0.1074442701159656347825773424466062227946,
        0.1074442701159656347825773424466062227946,
        0.0976186521041138882698806644642471544279,
        0.0976186521041138882698806644642471544279,
        0.086190161531953275917185202983742667185,
        0.086190161531953275917185202983742667185,
        0.0733464814110803057340336152531165181193,
        0.0733464814110803057340336152531165181193,
        0.0592985849154367807463677585001085845412,
        0.0592985849154367807463677585001085845412,
        0.0442774388174198061686027482113382288593,
        0.0442774388174198061686027482113382288593,
        0.0285313886289336631813078159518782864491,
        0.0285313886289336631813078159518782864491,
        0.0123412297999871995468056670700372915759,
        0.0123412297999871995468056670700372915759,
    ];
    function gaussLegendreQuadrature24(f, startT, endT) {
        //let result = 0
        //for (let i = 0; i < gaussLegendre24Xs.length; i++) {
        //	// gauss-legendre goes from -1 to 1, so we need to scale
        //	let t = startT + (gaussLegendre24Xs[i] + 1) / 2 * (endT - startT)
        //	result += gaussLegendre24Weights[i] * f(t)
        //}
        //const result = NLA
        //		.arrayFromFunction(24, i => startT + (gaussLegendre24Xs[i] + 1) / 2 * (endT - startT))
        //		.map((t, i) => gaussLegendre24Weights[i] * f(t))
        //		.sumInPlaceTree()
        //99.54182500782605
        //99.54182500782602
        // again, [-1,1], so div by 2
        //return result // 2 * (endT - startT)
        return (glq24_11(t => f(startT + ((t + 1) / 2) * (endT - startT))) / 2) * (endT - startT);
    }
    /**
     * Calculate the integral of f in the interval [-1;1].
     * @param f
     */
    function glq24_11(f) {
        return arrayFromFunction(24, i => gaussLegendre24Weights[i] * f(gaussLegendre24Xs[i])).sumInPlaceTree();
    }
    function glqInSteps(f, startT, endT, steps) {
        const dt = (endT - startT) / steps;
        return ((arrayFromFunction(steps, i => glq24_11(t => f(startT + dt * i + ((t + 1) / 2) * dt))).sumInPlaceTree() / 2) *
            dt);
    }
    function callsce(name, ...params) {
        return name + '(' + params.map(SCE).join(',') + ')';
    }

    /**
     * Immutable 3d-vector/point.
     */
    class V3 {
        constructor(x, y, z) {
            this.x = x;
            this.y = y;
            this.z = z;
            assertNumbers(x, y, z);
        }
        static random() {
            return new V3(Math.random(), Math.random(), Math.random());
        }
        static parallel(a, b) {
            return a.dot(b) - a.length() * b.length();
        }
        /**
         * See http://math.stackexchange.com/questions/44689/how-to-find-a-random-axis-or-unit-vector-in-3d
         * @returns A random point on the unit sphere with uniform distribution across the surface.
         */
        static randomUnit() {
            const zRotation = Math.random() * 2 * Math.PI;
            const z = Math.random() * 2 - 1;
            const zRadius = Math.sqrt(1 - Math.pow(z, 2));
            return new V3(zRadius * Math.cos(zRotation), zRadius * Math.sin(zRotation), z);
        }
        //noinspection JSUnusedLocalSymbols
        /**
         * Documentation stub. You want {@see V3#sphere}
         */
        static fromAngles(theta, phi) {
            throw new Error();
        }
        static fromFunction(f) {
            return new V3(f(0), f(1), f(2));
        }
        static min(a, b) {
            return new V3(Math.min(a.x, b.x), Math.min(a.y, b.y), Math.min(a.z, b.z));
        }
        static max(a, b) {
            return new V3(Math.max(a.x, b.x), Math.max(a.y, b.y), Math.max(a.z, b.z));
        }
        static lerp(a, b, t) {
            return new V3(a.x * (1 - t) + b.x * t, a.y * (1 - t) + b.y * t, a.z * (1 - t) + b.z * t);
        }
        static fromArray(a) {
            return new V3(a[0], a[1], a[2]);
        }
        static angleBetween(a, b) {
            return a.angleTo(b);
        }
        static zip(f, ...args) {
            assert(f instanceof Function);
            return new V3(f.apply(undefined, args.map(x => x.x)), f.apply(undefined, args.map(x => x.y)), f.apply(undefined, args.map(x => x.z)));
        }
        static normalOnPoints(a, b, c) {
            assertVectors(a, b, c);
            return a.to(b).cross(a.to(c));
        }
        static add(...vs) {
            assertVectors(...vs);
            let x = 0, y = 0, z = 0;
            let i = vs.length;
            while (i--) {
                x += vs[i].x;
                y += vs[i].y;
                z += vs[i].z;
            }
            return new V3(x, y, z);
        }
        static sub(...vs) {
            assertVectors(...vs);
            let x = vs[0].x, y = vs[0].y, z = vs[0].z;
            let i = vs.length;
            while (i--) {
                x -= vs[i].x;
                y -= vs[i].y;
                z -= vs[i].z;
            }
            return new V3(x, y, z);
        }
        /**
         * Pack an array of V3s into an array of numbers (Float32Array by default).
         *
         * @param v3arr source array
         * @param dest destination array. If provided, must be large enough to fit v3count items.
         * @param srcStart starting index in source array
         * @param destStart starting index in destination array
         * @param v3count Number of V3s to copy.
         * @returns Packed array.
         */
        static pack(v3arr, dest, srcStart = 0, destStart = 0, v3count = v3arr.length - srcStart) {
            //assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')
            const result = dest || new Float32Array(3 * v3count); // TODO
            assert(result.length - destStart >= v3count * 3, 'dest.length - destStart >= v3count * 3', result.length, destStart, v3count * 3);
            let i = v3count, srcIndex = srcStart, destIndex = destStart;
            while (i--) {
                const v = v3arr[srcIndex++];
                result[destIndex++] = v.x;
                result[destIndex++] = v.y;
                result[destIndex++] = v.z;
            }
            return result;
        }
        static unpack(packedArray, dest, srcStart = 0, destStart = 0, v3count = (packedArray.length - srcStart) / 3) {
            //assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')
            dest = dest || new Array(v3count);
            assert(dest.length - destStart >= v3count, 'dest.length - destStart >= v3count');
            let i = v3count, srcIndex = srcStart, destIndex = destStart;
            while (i--) {
                dest[destIndex++] = new V3(packedArray[srcIndex++], packedArray[srcIndex++], packedArray[srcIndex++]);
            }
            return dest;
        }
        static packXY(v3arr, dest, srcStart = 0, destStart = 0, v3count = v3arr.length - srcStart) {
            //assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')
            const result = dest || new Float32Array(2 * v3count);
            assert(result.length - destStart >= v3count, 'dest.length - destStart >= v3count');
            let i = v3count, srcIndex = srcStart, destIndex = destStart;
            while (i--) {
                const v = v3arr[srcIndex++];
                result[destIndex++] = v.x;
                result[destIndex++] = v.y;
            }
            return result;
        }
        static unpackXY(src, dest, srcStart = 0, destStart = 0, v3count = Math.min(src.length / 2, (dest && dest.length) || Infinity) - destStart) {
            //assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')
            dest = dest || new Array(v3count);
            assert(dest.length - destStart >= v3count, 'dest.length - destStart >= v3count');
            assert(src.length - srcStart >= v3count * 2, 'dest.length - destStart >= v3count');
            let i = v3count, srcIndex = srcStart, destIndex = destStart;
            while (i--) {
                dest[destIndex++] = new V3(src[srcIndex++], src[srcIndex++], 0);
            }
            return dest;
        }
        static perturbed(v, delta) {
            return v.perturbed(delta);
        }
        static polar(radius, phi, z = 0) {
            return new V3(radius * Math.cos(phi), radius * Math.sin(phi), z);
        }
        /**
         *
         * @param longitude angle in XY plane
         * @param latitude "height"/z dir angle
         */
        static sphere(longitude, latitude, length = 1) {
            return new V3(length * Math.cos(latitude) * Math.cos(longitude), length * Math.cos(latitude) * Math.sin(longitude), length * Math.sin(latitude));
        }
        static inverseLerp(a, b, x) {
            const ab = a.to(b);
            return a.to(x).dot(ab) / ab.squared();
        }
        get [0]() {
            return this.x;
        }
        get [1]() {
            return this.y;
        }
        get [2]() {
            return this.z;
        }
        get u() {
            return this.x;
        }
        get v() {
            return this.y;
        }
        perturbed(delta = NLA_PRECISION * 0.8) {
            return this.map(x => x + (Math.random() - 0.5) * delta);
        }
        *[Symbol.iterator]() {
            yield this.x;
            yield this.y;
            yield this.z;
        }
        e(index) {
            assert(index >= 0 && index < 3);
            return 0 == index ? this.x : 1 == index ? this.y : this.z;
        }
        negated() {
            return new V3(-this.x, -this.y, -this.z);
        }
        abs() {
            return new V3(Math.abs(this.x), Math.abs(this.y), Math.abs(this.z));
        }
        plus(a) {
            assertVectors(a);
            return new V3(this.x + a.x, this.y + a.y, this.z + a.z);
        }
        /**
         * Hadarmard product (or Schur product)
         * Element-wise multiplication of two vectors.
         * @see https://en.wikipedia.org/wiki/Hadamard_product_(matrices)
         *
         */
        schur(a) {
            return new V3(this.x * a.x, this.y * a.y, this.z * a.z);
        }
        /**
         * Element-wise division.
         */
        divv(a) {
            return new V3(this.x / a.x, this.y / a.y, this.z / a.z);
        }
        /**
         * See also {@link to} which is a.minus(this)
         */
        minus(a) {
            assertVectors(a);
            return new V3(this.x - a.x, this.y - a.y, this.z - a.z);
        }
        to(a) {
            assertVectors(a);
            return a.minus(this);
        }
        times(factor) {
            assertNumbers(factor);
            return new V3(this.x * factor, this.y * factor, this.z * factor);
        }
        div(a) {
            assertNumbers(a);
            return new V3(this.x / a, this.y / a, this.z / a);
        }
        /**
         * Dot product.
         * @see https://en.wikipedia.org/wiki/Dot_product
         */
        dot(a) {
            assertInst(V3, a);
            return this.x * a.x + this.y * a.y + this.z * a.z;
        }
        /**
         * Linearly interpolate
         */
        lerp(b, t) {
            assertVectors(b);
            assertNumbers(t);
            return V3.lerp(this, b, t);
        }
        squared() {
            return this.dot(this);
        }
        distanceTo(a) {
            assertVectors(a);
            //return this.minus(a).length()
            return Math.hypot(this.x - a.x, this.y - a.y, this.z - a.z);
        }
        distanceToSquared(a) {
            assertVectors(a);
            return this.minus(a).squared();
        }
        ///**
        // * See also {@see #setTo} for the individual
        // *
        // * @param v
        // */
        //assign(v) {
        //	assertVectors(v)
        //	this.x = v.x
        //	this.y = v.y
        //	this.z = v.z
        //}
        //
        ///**
        // * See also {@see #assign} for the V3 version
        // *
        // * @param x
        // * @param y
        // * @param z
        // */
        //setTo(x, y, z = 0) {
        //	this.x = x
        //	this.y = y
        //	this.z = z
        //}
        toSource() {
            return V3.NAMEMAP.get(this) || this.toString();
        }
        nonParallelVector() {
            const abs = this.abs();
            if (abs.x <= abs.y && abs.x <= abs.z) {
                return V3.X;
            }
            else if (abs.y <= abs.x && abs.y <= abs.z) {
                return V3.Y;
            }
            else {
                return V3.Z;
            }
        }
        slerp(b, t) {
            assertVectors(b);
            assertNumbers(t);
            const sin = Math.sin;
            const omega = this.angleTo(b);
            return this.times(sin((1 - t) * omega) / sin(omega)).plus(b.times(sin(t * omega) / sin(omega)));
        }
        min(b) {
            return new V3(Math.min(this.x, b.x), Math.min(this.y, b.y), Math.min(this.z, b.z));
        }
        max(b) {
            return new V3(Math.max(this.x, b.x), Math.max(this.y, b.y), Math.max(this.z, b.z));
        }
        equals(v) {
            return this == v || (this.x == v.x && this.y == v.y && this.z == v.z);
        }
        /**
         *
         * The cross product is defined as:
         * a x b = |a| * |b| * sin(phi) * n
         * where |.| is the euclidean norm, phi is the angle between the vectors
         * and n is a unit vector perpendicular to both a and b.
         *
         * The cross product is zero for parallel vectors.
         * @see https://en.wikipedia.org/wiki/Cross_product
         */
        cross(v) {
            return new V3(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x);
        }
        minElement() {
            return Math.min(this.x, this.y, this.z);
        }
        maxElement() {
            return Math.max(this.x, this.y, this.z);
        }
        toArray(n = 3) {
            return [this.x, this.y, this.z].slice(0, n);
        }
        /**
         * Get a perpendicular vector.
         * For vectors in the XY-Plane, returns vector rotated 90° CCW.
         */
        getPerpendicular() {
            if (eq0(this.x) && eq0(this.y)) {
                if (eq0(this.z)) {
                    throw new Error('zero vector');
                }
                // v is Vector(0, 0, v.z)
                return V3.Y;
            }
            return new V3(-this.y, this.x, 0);
        }
        //noinspection JSMethodCanBeStatic
        dim() {
            return 3;
        }
        els() {
            return [this.x, this.y, this.z];
        }
        angleXY() {
            return Math.atan2(this.y, this.x);
        }
        lengthXY() {
            return Math.hypot(this.x, this.y);
            //return Math.sqrt(this.x * this.x + this.y * this.y)
        }
        squaredXY() {
            return this.x * this.x + this.y * this.y;
        }
        xy() {
            return new V3(this.x, this.y, 0);
        }
        /**
         * Transform this vector element-wise by way of function f. Returns V3(f(x), f(y), f(z))
         * @param f function to apply to elements (number -> number)
         */
        map(f) {
            return new V3(f(this.x, 'x'), f(this.y, 'y'), f(this.z, 'z'));
        }
        toString(roundFunction) {
            roundFunction = roundFunction || defaultRoundFunction;
            return V3.NAMEMAP.get(this) || 'V(' + [this.x, this.y, this.z].map(roundFunction).join(', ') + ')'; //+ this.id
        }
        angleTo(b) {
            assert(1 == arguments.length);
            assertVectors(b);
            assert(!this.likeO());
            assert(!b.likeO());
            return Math.acos(Math.min(1, this.dot(b) / this.length() / b.length()));
        }
        /**
         *
         * phi = angle between A and B
         * alpha = angle between n and normal1
         *
         * A . B = ||A|| * ||B|| * cos(phi)
         * A x B = ||A|| * ||B|| * sin(phi) * n (n = unit vector perpendicular)
         * (A x B) . normal1 = ||A|| * ||B|| * sin(phi) * cos(alpha)
         */
        angleRelativeNormal(vector, normal1) {
            assert(2 == arguments.length);
            assertVectors(vector, normal1);
            assertf(() => normal1.hasLength(1));
            //assert(vector.isPerpendicularTo(normal1), 'vector.isPerpendicularTo(normal1)' + vector.sce + normal1.sce)
            //assert(this.isPerpendicularTo(normal1), 'this.isPerpendicularTo(normal1)' + this.dot(vector)) //
            // -0.000053600770598683675
            return Math.atan2(this.cross(vector).dot(normal1), this.dot(vector));
        }
        /**
         * Returns true iff this is parallel to vector, i.e. this * s == vector, where s is a positive or negative number,
         * using eq. Throw a DebugError
         * - if vector is not a Vector or
         * - if this has a length of 0 or
         * - if vector has a length of 0
         */
        isParallelTo(vector) {
            assertVectors(vector);
            assert(!this.likeO());
            assert(!vector.likeO());
            // a . b takes on values of +|a|*|b| (vectors same direction) to -|a|*|b| (opposite direction)
            // in both cases the vectors are parallel, so check if abs(a . b) == |a|*|b|
            const dot = this.dot(vector);
            return eq(this.squared() * vector.squared(), dot * dot);
        }
        isPerpendicularTo(vector) {
            assertVectors(vector);
            assert(!this.likeO(), '!this.likeO()');
            assert(!vector.likeO(), '!vector.likeO()');
            return eq0(this.dot(vector));
        }
        isReverseDirTo(other) {
            assertVectors(other);
            assert(!this.likeO());
            assert(!other.likeO());
            // a . b takes on values of +|a|*|b| (vectors same direction) to -|a|*|b| (opposite direction)
            // in both cases the vectors are parallel, so check if abs(a . b) == |a|*|b|
            const dot = this.dot(other);
            return eq(Math.sqrt(this.squared() * other.squared()), dot);
        }
        /**
         * Returns the length of this Vector, i.e. the euclidean norm.
         *
         * Note that the partial derivatives of the euclidean norm at point x are equal to the
         * components of the unit vector x.
         */
        length() {
            return Math.hypot(this.x, this.y, this.z);
            //return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
        }
        /**
         * Definition: V3.likeO == V3.like(V3.O)
         */
        likeO() {
            return this.like(V3.O);
        }
        /**
         * eq(this.x, obj.x) && eq(this.y, obj.y) && eq(this.z, obj.z)
         * @param obj
         */
        like(obj) {
            if (obj === this)
                return true;
            if (!(obj instanceof V3))
                return false;
            return eq(this.x, obj.x) && eq(this.y, obj.y) && eq(this.z, obj.z);
        }
        /**
         * equivalent to this.like(v) || this.negated().like(v)
         */
        likeOrReversed(v) {
            return eq(Math.abs(this.dot(v)), Math.sqrt(this.squared() * v.squared()));
        }
        /**
         * Returns a new unit Vector (.length() === 1) with the same direction as this vector. Throws a
         * DebugError if this has a length of 0.
         */
        unit() {
            assert(!this.likeO(), 'cannot normalize zero vector');
            return this.div(this.length());
        }
        /**
         * Documentation stub. You want {@link unit}
         */
        normalized() {
            throw new Error('documentation stub. use .unit()');
        }
        /**
         * Returns a new V3 equal to this scaled so that its length is equal to newLength.
         *
         * Passing a negative newLength will flip the vector.
         */
        toLength(newLength) {
            assertNumbers(newLength);
            return this.times(newLength / this.length());
        }
        /**
         * Returns a new Vector which is the projection of this vector onto the passed vector.
         * Examples
         *
         * 	V(3, 4).projectedOn(V(1, 0)) // returns V(3, 0)
         * 	V(3, 4).projectedOn(V(2, 0)) // returns V(3, 0)
         * 	V(3, 4).projectedOn(V(-1, 0)) // returns V(-3, 0)
         * 	V(3, 4).projectedOn(V(0, 1)) // returns V(0, 4)
         * 	V(3, 4).projectedOn(V(1, 1)) // returns
         */
        projectedOn(b) {
            assertVectors(b);
            // https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2
            return b.times(this.dot(b) / b.dot(b));
        }
        rejectedFrom(b) {
            assertVectors(b);
            // https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2
            return this.minus(b.times(this.dot(b) / b.dot(b)));
        }
        rejectedFrom1(b1) {
            assertVectors(b1);
            assert(b1.hasLength(1));
            // https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2
            return this.minus(b1.times(this.dot(b1)));
        }
        /**
         * Returns the length of this vector rejected from the unit vector b.
         *
         *       /|
         * this / |    ^
         *     /__|    | b
         *      r
         *  Returns length of r (r === this.rejectedFrom(b))
         */
        rejectedLength(b) {
            assertVectors(b);
            return Math.sqrt(this.dot(this) - Math.pow(this.dot(b), 2) / b.dot(b));
        }
        /**
         * Returns the length of this vector rejected from the unit vector b1.
         *
         *       /|
         * this / |    ^
         *     /__|    | b1
         *      r
         *  Returns length of r (r === this.rejectedFrom(b1))
         */
        rejected1Length(b1) {
            assertVectors(b1);
            assert(b1.hasLength(1));
            return Math.sqrt(this.dot(this) - Math.pow(this.dot(b1), 2));
        }
        /**
         * Returns true iff the length() of this vector is equal to 'length', using eq
         * @example
         * V(3, 4).hasLength(5) === true
         * @example
         * V(1, 1).hasLength(1) === false
         */
        hasLength(length) {
            assertNumbers(length);
            return eq(length, this.length());
        }
        /**
         * Returns the sum of the absolute values of the components of this vector.
         * E.g. V(1, -2, 3) === abs(1) + abs(-2) + abs(3) === 1 + 2 + 3 === 6
         */
        absSum() {
            return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
        }
        /**
         * returns min(|x|, |y|, |z|)
         */
        minAbsElement() {
            return Math.min(Math.abs(this.x), Math.abs(this.y), Math.min(this.z));
        }
        /**
         * returns max(|x|, |y|, |z|)
         */
        maxAbsElement() {
            return Math.max(Math.abs(this.x), Math.abs(this.y), Math.abs(this.z));
        }
        maxAbsDim() {
            const xAbs = Math.abs(this.x), yAbs = Math.abs(this.y), zAbs = Math.abs(this.z);
            return xAbs >= yAbs ? (xAbs >= zAbs ? 0 : 2) : yAbs >= zAbs ? 1 : 2;
        }
        minAbsDim() {
            const xAbs = Math.abs(this.x), yAbs = Math.abs(this.y), zAbs = Math.abs(this.z);
            return xAbs < yAbs ? (xAbs < zAbs ? 0 : 2) : yAbs < zAbs ? 1 : 2;
        }
        withElement(dim, el) {
            assert(['x', 'y', 'z'].includes(dim), '' + dim);
            assertNumbers(el);
            if ('x' == dim) {
                return new V3(el, this.y, this.z);
            }
            if ('y' == dim) {
                return new V3(this.x, el, this.z);
            }
            return new V3(this.x, this.y, el);
        }
        hashCode() {
            function floatHashCode$$1(f) {
                return ~~(f * (1 << 28));
            }
            return ~~((floatHashCode$$1(this.x) * 31 + floatHashCode$$1(this.y)) * 31 + floatHashCode$$1(this.z));
        }
        /**
         * as sadjkh akjhs djkahsd kjahs k skjhdakjh dkjash dkjahs kjdhas kj dhkjahsd kjahs dkjahs dkjhas kjdkajs
         * hdkljhfkjahdslfghal dasd
         *
         * * asdjklas dasds
         */
        hashCodes() {
            //function floatHashCode(f) {
            //	return ~~(f * (1 << 28))
            //}
            // compare hashCode.floatHashCode
            // the following ops are equivalent to
            // floatHashCode((el - NLA_PRECISION) % (2 * NLA_PRECISION))
            // this results in the hashCode for the (out of 8 possible) cube with the lowest hashCode
            // the other 7 can be calculated by adding constants
            const xHC = ~~(this.x * (1 << 28) - 0.5), yHC = ~~(this.y * (1 << 28) - 0.5), zHC = ~~(this.z * (1 << 28) - 0.5), hc = ~~((xHC * 31 + yHC) * 31 + zHC);
            return [
                ~~hc,
                ~~(hc + 961),
                ~~(hc + 31),
                ~~(hc + 31 + 961),
                ~~(hc + 1),
                ~~(hc + 1 + 961),
                ~~(hc + 1 + 31),
                ~~(hc + 1 + 31 + 961),
            ];
        }
        //static areDisjoint(it: Iterable<V3>): boolean {
        //	const vSet = new CustomSet
        //	for (const v of it) {
        //		if (!v.equals(vSet.canonicalizeLike(v))) {
        //			// like value already in set
        //			return false
        //		}
        //	}
        //	return true
        //}
        compareTo(other) {
            if (this.x != other.x) {
                return this.x - other.x;
            }
            else if (this.y != other.y) {
                return this.y - other.y;
            }
            else {
                return this.z - other.z;
            }
        }
        compareTo2(other, eps = NLA_PRECISION) {
            if (!eq2(this.x, other.x, eps)) {
                return this.x - other.x;
            }
            else if (!eq2(this.y, other.y, eps)) {
                return this.y - other.y;
            }
            else if (!eq2(this.z, other.z, eps)) {
                return this.z - other.z;
            }
            else {
                return 0;
            }
        }
        toAngles() {
            return {
                theta: Math.atan2(this.y, this.x),
                phi: Math.asin(this.z / this.length()),
            };
        }
    }
    V3.O = new V3(0, 0, 0);
    V3.X = new V3(1, 0, 0);
    V3.Y = new V3(0, 1, 0);
    V3.Z = new V3(0, 0, 1);
    V3.XY = new V3(1, 1, 0);
    V3.XYZ = new V3(1, 1, 1);
    V3.INF = new V3(Infinity, Infinity, Infinity);
    V3.UNITS = [V3.X, V3.Y, V3.Z];
    V3.NAMEMAP = new JavaMap()
        .set(V3.O, 'V3.O')
        .set(V3.X, 'V3.X')
        .set(V3.Y, 'V3.Y')
        .set(V3.Z, 'V3.Z')
        .set(V3.XYZ, 'V3.XYZ')
        .set(V3.INF, 'V3.INF');
    function V$2(a, b, c) {
        if (arguments.length == 3) {
            return new V3(parseFloat(a), parseFloat(b), parseFloat(c));
        }
        else if (arguments.length == 2) {
            return new V3(parseFloat(a), parseFloat(b), 0);
        }
        else if (arguments.length == 1) {
            if (typeof a == 'object') {
                if (a instanceof V3) {
                    // immutable, so
                    return a;
                }
                else if (a instanceof Array || a instanceof Float32Array || a instanceof Float64Array) {
                    if (2 == a.length) {
                        return new V3(parseFloat(a[0]), parseFloat(a[1]), 0);
                    }
                    else if (3 == a.length) {
                        return new V3(parseFloat(a[0]), parseFloat(a[1]), parseFloat(a[2]));
                    }
                }
                else if ('x' in a && 'y' in a) {
                    return new V3(parseFloat(a.x), parseFloat(a.y), 'z' in a ? parseFloat(a.z) : 0);
                }
            }
        }
        throw new Error('invalid arguments' + arguments);
    }

    const P3YZ = { normal1: V3.X, w: 0 };
    const P3ZX = { normal1: V3.Y, w: 0 };
    const P3XY = { normal1: V3.Z, w: 0 };
    class Transformable {
        mirror(plane) {
            return this.transform(M4.mirror(plane));
        }
        mirroredX() {
            return this.mirror(P3YZ);
        }
        mirrorY() {
            return this.mirror(P3ZX);
        }
        mirrorZ() {
            return this.mirror(P3XY);
        }
        project(plane) {
            return this.transform(M4.project(plane));
        }
        projectXY() {
            return this.transform(M4.project(P3XY));
        }
        projectYZ() {
            return this.transform(M4.project(P3YZ));
        }
        projectZX() {
            return this.transform(M4.project(P3ZX));
        }
        translate(...args) {
            return this.transform(M4.translate.apply(undefined, args), callsce.call(undefined, '.translate', ...args));
        }
        scale(...args) {
            return this.transform(M4.scale.apply(undefined, args), callsce.call(undefined, '.scale', ...args));
        }
        rotateX(radians) {
            return this.transform(M4.rotateX(radians), `.rotateX(${radians})`);
        }
        rotateY(radians) {
            return this.transform(M4.rotateY(radians), `.rotateY(${radians})`);
        }
        rotateZ(radians) {
            return this.transform(M4.rotateZ(radians), `.rotateZ(${radians})`);
        }
        rotate(rotationCenter, rotationAxis, radians) {
            return this.transform(M4.rotateLine(rotationCenter, rotationAxis, radians), callsce('.rotate', rotationCenter, rotationAxis, radians));
        }
        rotateAB(from, to) {
            return this.transform(M4.rotateAB(from, to), callsce('.rotateAB', from, to));
        }
        eulerZXZ(alpha, beta, gamma) {
            throw new Error();
            //return this.transform(M4.eulerZXZ(alpha, beta, gamma))
        }
        shearX(y, z) {
            // prettier-ignore
            return this.transform(new M4([
                1, y, z, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1
            ]));
        }
        foo() {
            return this.transform(M4.FOO);
        }
        bar() {
            return this.transform(M4.BAR);
        }
        visit(visitor, ...args) {
            let proto = Object.getPrototypeOf(this);
            // walk up the prototype chain until we find a defined function in o
            while (!visitor.hasOwnProperty(proto.constructor.name) && proto !== Transformable.prototype) {
                proto = Object.getPrototypeOf(proto);
            }
            if (visitor.hasOwnProperty(proto.constructor.name)) {
                return visitor[proto.constructor.name].apply(this, args);
            }
            else {
                throw new Error('No implementation for ' + this.constructor.name);
            }
        }
    }

    const { PI: PI$1, abs: abs$1 } = Math;
    // tslint:enable:member-ordering
    class M4 extends Matrix {
        /**
         * Takes 16 arguments in row-major order, which can be passed individually, as a list, or even as
         * four lists, one for each row. If the arguments are omitted then the identity matrix is constructed instead.
         */
        constructor(...var_args) {
            let m;
            if (0 == arguments.length) {
                m = new Float64Array(16);
            }
            else {
                const flattened = Array.prototype.concat.apply([], arguments);
                assert(flattened.length == 16, 'flattened.length == 16 ' + flattened.length);
                m = new Float64Array(flattened);
            }
            super(4, 4, m);
        }
        /**
         * Returns the matrix that when multiplied with `matrix` results in the
         * identity matrix. You can optionally pass an existing matrix in `result`
         * to avoid allocating a new matrix. This implementation is from the Mesa
         * OpenGL function `__gluInvertMatrixd()` found in `project.c`.
         */
        static inverse(matrix, result = new M4()) {
            return matrix.inversed4(result);
        }
        /**
         * Create new dim x dim matrix equal to an identity matrix with rows/colums i and k swapped. Note that i and k
         * are 0-indexed.
         */
        static permutation4(i, k, result = new M4()) {
            assertInts(i, k);
            assertf(() => 0 <= i && i < 4);
            assertf(() => 0 <= k && k < 4);
            const m = result.m;
            M4.identity(result);
            m[i * 4 + i] = 0;
            m[k * 4 + k] = 0;
            m[i * 4 + k] = 1;
            m[k * 4 + i] = 1;
            return result;
        }
        /**
         * Returns `matrix`, exchanging columns for rows. You can optionally pass an
         * existing matrix in `result` to avoid allocating a new matrix.
         */
        static transpose(matrix, result = new M4()) {
            assertInst(M4, matrix);
            assertInst(M4, result);
            assert(matrix != result, 'matrix != result');
            const m = matrix.m, r = result.m;
            r[0] = m[0];
            r[1] = m[4];
            r[2] = m[8];
            r[3] = m[12];
            r[4] = m[1];
            r[5] = m[5];
            r[6] = m[9];
            r[7] = m[13];
            r[8] = m[2];
            r[9] = m[6];
            r[10] = m[10];
            r[11] = m[14];
            r[12] = m[3];
            r[13] = m[7];
            r[14] = m[11];
            r[15] = m[15];
            return result;
        }
        /**
         * Returns the concatenation of the transforms for `left` and `right`.
         */
        static multiply(left, right, result = new M4()) {
            assertInst(M4, left, right);
            assertInst(M4, result);
            assert(left != result, 'left != result');
            assert(right != result, 'right != result');
            const a = left.m, b = right.m, r = result.m;
            r[0] = a[0] * b[0] + a[1] * b[4] + (a[2] * b[8] + a[3] * b[12]);
            r[1] = a[0] * b[1] + a[1] * b[5] + (a[2] * b[9] + a[3] * b[13]);
            r[2] = a[0] * b[2] + a[1] * b[6] + (a[2] * b[10] + a[3] * b[14]);
            r[3] = a[0] * b[3] + a[1] * b[7] + (a[2] * b[11] + a[3] * b[15]);
            r[4] = a[4] * b[0] + a[5] * b[4] + (a[6] * b[8] + a[7] * b[12]);
            r[5] = a[4] * b[1] + a[5] * b[5] + (a[6] * b[9] + a[7] * b[13]);
            r[6] = a[4] * b[2] + a[5] * b[6] + (a[6] * b[10] + a[7] * b[14]);
            r[7] = a[4] * b[3] + a[5] * b[7] + (a[6] * b[11] + a[7] * b[15]);
            r[8] = a[8] * b[0] + a[9] * b[4] + (a[10] * b[8] + a[11] * b[12]);
            r[9] = a[8] * b[1] + a[9] * b[5] + (a[10] * b[9] + a[11] * b[13]);
            r[10] = a[8] * b[2] + a[9] * b[6] + (a[10] * b[10] + a[11] * b[14]);
            r[11] = a[8] * b[3] + a[9] * b[7] + (a[10] * b[11] + a[11] * b[15]);
            r[12] = a[12] * b[0] + a[13] * b[4] + (a[14] * b[8] + a[15] * b[12]);
            r[13] = a[12] * b[1] + a[13] * b[5] + (a[14] * b[9] + a[15] * b[13]);
            r[14] = a[12] * b[2] + a[13] * b[6] + (a[14] * b[10] + a[15] * b[14]);
            r[15] = a[12] * b[3] + a[13] * b[7] + (a[14] * b[11] + a[15] * b[15]);
            return result;
        }
        static product(...args) {
            const [m4s, result] = Array.isArray(args[0]) ? [args[0], args[1]] : [args, new M4()];
            if (0 == m4s.length)
                return M4.identity(result);
            if (1 == m4s.length)
                return M4.copy(m4s[0], result);
            if (2 == m4s.length)
                return M4.multiply(m4s[0], m4s[1], result);
            let a = M4.temp0, b = M4.temp1;
            M4.multiply(m4s[0], m4s[1], a);
            for (let i = 2; i < m4s.length - 1; i++) {
                M4.multiply(a, m4s[i], b);
                [a, b] = [b, a];
            }
            return M4.multiply(a, m4s.last, result);
        }
        static forSys(e0, e1, e2 = e0.cross(e1), origin = V3.O) {
            assertVectors(e0, e1, e2, origin);
            // prettier-ignore
            return new M4(e0.x, e1.x, e2.x, origin.x, e0.y, e1.y, e2.y, origin.y, e0.z, e1.z, e2.z, origin.z, 0, 0, 0, 1);
        }
        static forRows(n0, n1, n2, n3 = V3.O) {
            assertVectors(n0, n1, n2, n3);
            // prettier-ignore
            return new M4(n0.x, n0.y, n0.z, 0, n1.x, n1.y, n1.z, 0, n2.x, n2.y, n2.z, 0, n3.x, n3.y, n3.z, 1);
        }
        /**
         * Returns an identity matrix. You can optionally pass an existing matrix in `result` to avoid allocating a new
         * matrix. This emulates the OpenGL function `glLoadIdentity()`
         *
         * Unless initializing a matrix to be modified, use M4.IDENTITY
         */
        static identity(result = new M4()) {
            assertInst(M4, result);
            const m = result.m;
            m[0] = m[5] = m[10] = m[15] = 1;
            m[1] = m[2] = m[3] = m[4] = m[6] = m[7] = m[8] = m[9] = m[11] = m[12] = m[13] = m[14] = 0;
            return result;
        }
        /**
         * Creates a new M4 initialized by a user defined callback function
         *
         * @param f signature: (elRow, elCol, elIndex) =>
         *     el, where elIndex is the row-major index, i.e. eLindex == elRow * 4 + elCol
         * @param result
         */
        static fromFunction4(f, result = new M4()) {
            assert(typeof f == 'function');
            assertInst(M4, result);
            const m = result.m;
            let i = 16;
            while (i--) {
                m[i] = f(Math.floor(i / 4), i % 4, i);
            }
            return result;
        }
        /**
         * Returns a perspective transform matrix, which makes far away objects appear smaller than nearby objects. The
         * `aspect` argument should be the width divided by the height of your viewport and `fov` is the top-to-bottom angle
         * of the field of view in degrees. You can optionally pass an existing matrix in `result` to avoid allocating a new
         * matrix. This emulates the OpenGL function `gluPerspective()`.
         * {@see perspectiveRad}
         * perspectiveRad
         * @param fovDegrees in degrees
         * @param aspect aspect ratio = width/height of viewport
         */
        static perspective(fovDegrees, aspect, near, far, result = new M4()) {
            return M4.perspectiveRad(fovDegrees * DEG, aspect, near, far, result);
        }
        static perspectiveRad(fov, aspect, near, far, result = new M4()) {
            assertInst(M4, result);
            assertNumbers(fov, aspect, near, far);
            const y = Math.tan(fov / 2) * near;
            const x = y * aspect;
            return M4.frustum(-x, x, -y, y, near, far, result);
        }
        static perspectivePlane(vanishingPlane, result = new M4()) {
            assertInst(M4, result);
            const m = result.m;
            m[0] = 1;
            m[1] = 0;
            m[2] = 0;
            m[3] = 0;
            m[4] = 0;
            m[5] = 1;
            m[6] = 0;
            m[7] = 0;
            m[8] = 0;
            m[9] = 0;
            m[10] = 1;
            m[11] = 0;
            m[12] = vanishingPlane.normal1.x;
            m[13] = vanishingPlane.normal1.y;
            m[14] = vanishingPlane.normal1.z;
            m[15] = -vanishingPlane.w;
            return result;
        }
        // the OpenGL function `glFrustum()`.
        static frustum(left, right, bottom, top, near, far, result = new M4()) {
            assertNumbers(left, right, bottom, top, near, far);
            assert(0 < near, '0 < near');
            assert(near < far, 'near < far');
            assertInst(M4, result);
            const m = result.m;
            m[0] = (2 * near) / (right - left);
            m[1] = 0;
            m[2] = (right + left) / (right - left);
            m[3] = 0;
            m[4] = 0;
            m[5] = (2 * near) / (top - bottom);
            m[6] = (top + bottom) / (top - bottom);
            m[7] = 0;
            m[8] = 0;
            m[9] = 0;
            m[10] = -(far + near) / (far - near);
            m[11] = (-2 * far * near) / (far - near);
            m[12] = 0;
            m[13] = 0;
            m[14] = -1;
            m[15] = 0;
            return result;
        }
        /**
         * Returns a new M4 representing the a projection through/towards a point onto a plane.
         */
        static projectPlanePoint(p, plane, result = new M4()) {
            assertVectors(p, plane.normal1);
            assertInst(M4, result);
            const m = result.m;
            const n = plane.normal1, w = plane.w;
            const np = n.dot(p);
            m[0] = p.x * n.x + w - np;
            m[1] = p.x * n.y;
            m[2] = p.x * n.z;
            m[3] = -w * p.x;
            m[4] = p.y * n.x;
            m[5] = p.y * n.y + w - np;
            m[6] = p.y * n.z;
            m[7] = -w * p.y;
            m[8] = p.z * n.x;
            m[9] = p.z * n.y;
            m[10] = p.z * n.z + w - np;
            m[11] = -w * p.z;
            m[12] = n.x;
            m[13] = n.y;
            m[14] = n.z;
            m[15] = -np;
            return result;
        }
        /**
         * Orthographic/orthogonal projection. Transforms the cuboid with the dimensions X: [left right] Y: [bottom, top]
         * Z: [near far] to the cuboid X: [-1, 1] Y [-1, 1] Z [-1, 1]
         */
        static ortho(left, right, bottom, top, near, far, result = new M4()) {
            assertNumbers(left, right, bottom, top, near, far);
            assertInst(M4, result);
            const m = result.m;
            m[0] = 2 / (right - left);
            m[1] = 0;
            m[2] = 0;
            m[3] = -(right + left) / (right - left);
            m[4] = 0;
            m[5] = 2 / (top - bottom);
            m[6] = 0;
            m[7] = -(top + bottom) / (top - bottom);
            m[8] = 0;
            m[9] = 0;
            m[10] = -2 / (far - near);
            m[11] = -(far + near) / (far - near);
            m[12] = 0;
            m[13] = 0;
            m[14] = 0;
            m[15] = 1;
            return result;
        }
        static scale(...args) {
            let x, y, z, result;
            if (args[0] instanceof V3) {
                assert(args.length <= 2);
                ({ x, y, z } = args[0]);
                result = args[1];
            }
            else if ('number' != typeof args[1]) {
                x = y = z = args[0];
                result = args[1];
            }
            else {
                assert(args.length <= 4);
                x = args[0];
                y = args[1];
                z = undefined != args[2] ? args[2] : 1;
                result = args[3];
            }
            undefined == result && (result = new M4());
            assertInst(M4, result);
            assertNumbers(x, y, z);
            const m = result.m;
            m[0] = x;
            m[1] = 0;
            m[2] = 0;
            m[3] = 0;
            m[4] = 0;
            m[5] = y;
            m[6] = 0;
            m[7] = 0;
            m[8] = 0;
            m[9] = 0;
            m[10] = z;
            m[11] = 0;
            m[12] = 0;
            m[13] = 0;
            m[14] = 0;
            m[15] = 1;
            return result;
        }
        static translate(...args) {
            let x, y, z, result;
            if (args[0] instanceof V3) {
                assert(args.length <= 2);
                ({ x, y, z } = args[0]);
                result = args[1];
            }
            else {
                assert(args.length <= 4);
                x = args[0];
                y = undefined != args[1] ? args[1] : 0;
                z = undefined != args[2] ? args[2] : 0;
                result = args[3];
            }
            undefined == result && (result = new M4());
            assertInst(M4, result);
            assertNumbers(x, y, z);
            const m = result.m;
            m[0] = 1;
            m[1] = 0;
            m[2] = 0;
            m[3] = x;
            m[4] = 0;
            m[5] = 1;
            m[6] = 0;
            m[7] = y;
            m[8] = 0;
            m[9] = 0;
            m[10] = 1;
            m[11] = z;
            m[12] = 0;
            m[13] = 0;
            m[14] = 0;
            m[15] = 1;
            return result;
        }
        /**
         * Returns a matrix that rotates by `a` degrees around the vector (x, y, z). You can optionally pass an existing
         * matrix in `result` to avoid allocating a new matrix. This emulates the OpenGL function `glRotate()`.
         */
        //static rotation(radians: raddd, x: number, y: number, z: number, result?: M4): M4
        static rotate(radians, v, result) {
            undefined == result && (result = new M4());
            assertInst(M4, result);
            let { x, y, z } = v;
            assert(!new V3(x, y, z).likeO(), '!V(x, y, z).likeO()');
            const m = result.m;
            const d = Math.sqrt(x * x + y * y + z * z);
            x /= d;
            y /= d;
            z /= d;
            const cos = Math.cos(radians), sin = Math.sin(radians), t = 1 - cos;
            m[0] = x * x * t + cos;
            m[1] = x * y * t - z * sin;
            m[2] = x * z * t + y * sin;
            m[3] = 0;
            m[4] = y * x * t + z * sin;
            m[5] = y * y * t + cos;
            m[6] = y * z * t - x * sin;
            m[7] = 0;
            m[8] = z * x * t - y * sin;
            m[9] = z * y * t + x * sin;
            m[10] = z * z * t + cos;
            m[11] = 0;
            m[12] = 0;
            m[13] = 0;
            m[14] = 0;
            m[15] = 1;
            return result;
        }
        /**
         * Returns a matrix that puts the camera at the eye point `ex, ey, ez` looking
         * toward the center point `cx, cy, cz` with an up direction of `ux, uy, uz`.
         * You can optionally pass an existing matrix in `result` to avoid allocating
         * a new matrix. This emulates the OpenGL function `gluLookAt()`.
         */
        static lookAt(eye, focus, up, result = new M4()) {
            assertVectors(eye, focus, up);
            assertInst(M4, result);
            const m = result.m;
            const f = eye.minus(focus).unit();
            const s = up.cross(f).unit();
            const t = f.cross(s).unit();
            m[0] = s.x;
            m[1] = s.y;
            m[2] = s.z;
            m[3] = -s.dot(eye);
            m[4] = t.x;
            m[5] = t.y;
            m[6] = t.z;
            m[7] = -t.dot(eye);
            m[8] = f.x;
            m[9] = f.y;
            m[10] = f.z;
            m[11] = -f.dot(eye);
            m[12] = 0;
            m[13] = 0;
            m[14] = 0;
            m[15] = 1;
            return result;
        }
        /**
         * Create a rotation matrix for rotating around the X axis
         */
        static rotateX(radians) {
            assertNumbers(radians);
            const sin = Math.sin(radians), cos = Math.cos(radians);
            const els = [1, 0, 0, 0, 0, cos, -sin, 0, 0, sin, cos, 0, 0, 0, 0, 1];
            return new M4(els);
        }
        /**
         * Create a rotation matrix for rotating around the Y axis
         */
        static rotateY(radians) {
            const sin = Math.sin(radians), cos = Math.cos(radians);
            const els = [cos, 0, sin, 0, 0, 1, 0, 0, -sin, 0, cos, 0, 0, 0, 0, 1];
            return new M4(els);
        }
        /**
         * Create a rotation matrix for rotating around the Z axis
         */
        static rotateZ(radians) {
            const sin = Math.sin(radians), cos = Math.cos(radians);
            const els = [cos, -sin, 0, 0, sin, cos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
            return new M4(els);
        }
        /**
         * New rotation matrix such that result.transformVector(a).isParallelTo(b) through smallest rotation.
         * Performs no scaling.
         */
        static rotateAB(a, b, result = new M4()) {
            // see http://inside.mines.edu/fs_home/gmurray/ArbitraryAxisRotation/
            assertVectors(a, b);
            assertInst(M4, result);
            const rotationAxis = a.cross(b), rotationAxisLength = rotationAxis.length();
            if (eq0(rotationAxisLength)) {
                return M4.identity(result);
            }
            const radians = Math.atan2(rotationAxisLength, a.dot(b));
            return M4.rotateLine(V3.O, rotationAxis, radians, result);
        }
        /**
         * Matrix for rotation about arbitrary line defined by an anchor point and direction.
         * rotationAxis does not need to be unit
         */
        static rotateLine(rotationAnchor, rotationAxis, radians, result = new M4()) {
            // see http://inside.mines.edu/fs_home/gmurray/ArbitraryAxisRotation/
            assertVectors(rotationAnchor, rotationAxis);
            assertNumbers(radians);
            assertInst(M4, result);
            rotationAxis = rotationAxis.unit();
            const ax = rotationAnchor.x, ay = rotationAnchor.y, az = rotationAnchor.z, dx = rotationAxis.x, dy = rotationAxis.y, dz = rotationAxis.z;
            const m = result.m, cos = Math.cos(radians), sin = Math.sin(radians);
            m[0] = dx * dx + (dy * dy + dz * dz) * cos;
            m[1] = dx * dy * (1 - cos) - dz * sin;
            m[2] = dx * dz * (1 - cos) + dy * sin;
            m[3] = (ax * (dy * dy + dz * dz) - dx * (ay * dy + az * dz)) * (1 - cos) + (ay * dz - az * dy) * sin;
            m[4] = dx * dy * (1 - cos) + dz * sin;
            m[5] = dy * dy + (dx * dx + dz * dz) * cos;
            m[6] = dy * dz * (1 - cos) - dx * sin;
            m[7] = (ay * (dx * dx + dz * dz) - dy * (ax * dx + az * dz)) * (1 - cos) + (az * dx - ax * dz) * sin;
            m[8] = dx * dz * (1 - cos) - dy * sin;
            m[9] = dy * dz * (1 - cos) + dx * sin;
            m[10] = dz * dz + (dx * dx + dy * dy) * cos;
            m[11] = (az * (dx * dx + dy * dy) - dz * (ax * dx + ay * dy)) * (1 - cos) + (ax * dy - ay * dx) * sin;
            m[12] = 0;
            m[13] = 0;
            m[14] = 0;
            m[15] = 1;
            return result;
        }
        /**
         * Create an affine matrix for mirroring into an arbitrary plane:
         */
        static mirror(plane, result = new M4()) {
            assertVectors(plane.normal1);
            assertInst(M4, result);
            const [nx, ny, nz] = plane.normal1;
            const w = plane.w;
            const m = result.m;
            m[0] = 1.0 - 2.0 * nx * nx;
            m[1] = -2.0 * ny * nx;
            m[2] = -2.0 * nz * nx;
            m[3] = 2.0 * nx * w;
            m[4] = -2.0 * nx * ny;
            m[5] = 1.0 - 2.0 * ny * ny;
            m[6] = -2.0 * nz * ny;
            m[7] = 2.0 * ny * w;
            m[8] = -2.0 * nx * nz;
            m[9] = -2.0 * ny * nz;
            m[10] = 1.0 - 2.0 * nz * nz;
            m[11] = 2.0 * nz * w;
            m[12] = 0;
            m[13] = 0;
            m[14] = 0;
            m[15] = 1;
            return result;
        }
        /**
         *
         * @param plane
         * @param dir Projection direction. Optional, if not specified plane normal1 will be used.
         * @param result {@see M4}
         */
        static project(plane, dir = plane.normal1, result = new M4()) {
            // TODO: doc
            // plane.normal1 DOT (p + lambda * dir) = w (1)
            // extract lambda:
            // plane.normal1 DOT p + lambda * plane.normal1 DOT dir = w
            // lambda = (w - plane.normal1 DOT p) / plane.normal1 DOT dir
            // result = p + lambda * dir
            // result = p + dir * (w - plane.normal1 DOT p) / plane.normal1 DOT dir
            // result =  w * dir / (plane.normal1 DOT dir) + p - plane.normal1 DOT p * dir / (plane.normal1 DOT dir) *
            //  a + d * (w - n . a) / (nd)
            //  a + dw - d * na
            assertVectors(dir, plane.normal1);
            assertInst(M4, result);
            const w = plane.w;
            const m = result.m;
            const nd = plane.normal1.dot(dir);
            const { x: nx, y: ny, z: nz } = plane.normal1;
            const { x: dx, y: dy, z: dz } = dir.div(nd);
            /*
             rejectedFrom: return this.minus(b.times(this.dot(b) / b.dot(b)))
             return M4.forSys(
             V3.X.rejectedFrom(plane.normal1),
             V3.Y.rejectedFrom(plane.normal1),
             V3.Z.rejectedFrom(plane.normal1),
             plane.anchor,
             result
             )
             */
            m[0] = 1.0 - nx * dx;
            m[1] = -ny * dx;
            m[2] = -nz * dx;
            m[3] = dx * w;
            m[4] = -nx * dy;
            m[5] = 1.0 - ny * dy;
            m[6] = -nz * dy;
            m[7] = dy * w;
            m[8] = -nx * dz;
            m[9] = -ny * dz;
            m[10] = 1.0 - nz * dz;
            m[11] = dz * w;
            m[12] = 0;
            m[13] = 0;
            m[14] = 0;
            m[15] = 1;
            return result;
        }
        static lineProjection(line, result = new M4()) {
            assertVectors(line.anchor, line.dir1);
            assertInst(M4, result);
            const ax = line.anchor.x, ay = line.anchor.y, az = line.anchor.z;
            const dx = line.dir1.x, dy = line.dir1.y, dz = line.dir1.z;
            const m = result.m;
            /*
             projectedOn: return b.times(this.dot(b) / b.dot(b))
             */
            m[0] = dx * dx;
            m[1] = dx * dy;
            m[2] = dx * dz;
            m[3] = ax;
            m[4] = dy * dx;
            m[5] = dy * dy;
            m[6] = dy * dz;
            m[7] = ay;
            m[8] = dz * dx;
            m[9] = dz * dy;
            m[10] = dz * dz;
            m[11] = az;
            m[12] = 0;
            m[13] = 0;
            m[14] = 0;
            m[15] = 1;
            return result;
        }
        static pointInversion(p, result = new M4()) {
            assertVectors(p);
            assertInst(M4, result);
            const m = result.m;
            m[0] = -1;
            m[1] = 0;
            m[2] = 0;
            m[3] = 2 * p.x;
            m[4] = 0;
            m[5] = -1;
            m[6] = 0;
            m[7] = 2 * p.y;
            m[8] = 0;
            m[9] = 0;
            m[10] = -1;
            m[11] = 2 * p.z;
            m[12] = 0;
            m[13] = 0;
            m[14] = 0;
            m[15] = 1;
            return result;
        }
        static new(width, height, m) {
            assert(4 == width && 4 == height);
            return new M4(...m);
        }
        get X() {
            return this.transformVector(V3.X);
        }
        get Y() {
            return this.transformVector(V3.Y);
        }
        get Z() {
            return this.transformVector(V3.Z);
        }
        get O() {
            return this.getTranslation();
        }
        isMirror(precision = NLA_PRECISION) {
            const m = this.m;
            const nx = Math.sqrt((1 - m[0]) / 2);
            const ny = Math.sqrt((1 - m[5]) / 2);
            const nz = Math.sqrt((1 - m[10]) / 2);
            return (eq(m[1], -2.0 * ny * nx, precision) &&
                eq(m[2], -2.0 * nz * nx, precision) &&
                eq(m[4], -2.0 * nx * ny, precision) &&
                eq(m[6], -2.0 * nz * ny, precision) &&
                eq(m[8], -2.0 * nx * nz, precision) &&
                eq(m[9], -2.0 * ny * nz, precision) &&
                eq(m[12], 0, precision) &&
                eq(m[13], 0, precision) &&
                eq(m[14], 0, precision) &&
                eq(m[15], 1, precision) &&
                eq(m[3] * ny, m[7] * nx, precision) &&
                eq(m[7] * nz, m[11] * ny, precision) &&
                eq(m[11] * nx, m[3] * nz, precision));
        }
        // ### GL.Matrix.frustum(left, right, bottom, top, near, far[, result])
        //
        // Sets up a viewing frustum, which is shaped like a truncated pyramid with the
        // camera where the point of the pyramid would be. You can optionally pass an
        // existing matrix in `result` to avoid allocating a new matrix. This emulates
        /**
         * Returns a new M4 which is equal to the inverse of this.
         */
        inversed(result) {
            return M4.inverse(this, result);
        }
        /**
         * Matrix trace is defined as the sum of the elements of the main diagonal.
         */
        trace() {
            return this.m[0] + this.m[5] + this.m[10] + this.m[15];
        }
        as3x3(result) {
            result = M4.copy(this, result);
            const m = result.m;
            m[3] = m[7] = m[11] = m[12] = m[13] = m[14] = 0;
            m[15] = 1;
            return result;
        }
        transform(m4) {
            return m4.times(this);
        }
        realEigenValues3() {
            const m = this.m;
            assert(0 == m[12] && 0 == m[13] && 0 == m[14]);
            // determinant of (this - λI):
            // | a-λ  b   c  |
            // |  d  e-λ  f  | = -λ^3 + λ^2 (a+e+i) + λ (-a e-a i+b d+c g-e i+f h) + a(ei - fh) - b(di - fg) + c(dh - eg)
            // |  g   h  i-λ |
            const [a, b, c, , d, e, f, , g, h, i] = m;
            // det(this - λI) = -λ^3 +λ^2 (a+e+i) + λ (-a e-a i-b d+c g-e i+f h)+ (a e i-a f h-b d i+b f g+c d h-c e g)
            const s = -1;
            const t = a + e + i; // equivalent to trace of matrix
            const u = -a * e - a * i + b * d + c * g - e * i + f * h; // equivalent to 1/2 (trace(this²) - trace²(A))
            const w = a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g); // equivalent to matrix determinant
            console.log(s, t, u, w);
            return solveCubicReal2(s, t, u, w);
        }
        realEigenVectors3() {
            const eigenValues = this.realEigenValues3();
            const this3x3 = this.times(M4.IDENTITY3);
            console.log(this.toString());
            console.log(this3x3.toString());
            let mats = eigenValues.map(ev => M4.IDENTITY3.scale(-ev).plus(this3x3));
            console.log(mats.map(m => m.determinant3()));
            console.log(mats.map(m => '' + m.toString(v => '' + v)).join('\n\n'));
            console.log(mats.map(m => '' + m.gauss().U.toString(v => '' + v)).join('\n\n'));
            console.log('mats.map(m=>m.rank())', mats.map(m => m.rank()));
            if (1 == eigenValues.length) {
                console.log(mats[0].toString());
                assertf(() => 0 == mats[0].rank());
                // col vectors
                return arrayFromFunction(3, col => new V3(this.m[col], this.m[4 + col], this.m[8 + col]));
            }
            if (2 == eigenValues.length) {
                // one matrix should have rank 1, the other rank 2
                if (1 == mats[0].rank()) {
                    mats = [mats[1], mats[0]];
                }
                assertf(() => 2 == mats[0].rank());
                assertf(() => 1 == mats[1].rank());
                // mat[0] has rank 2, mat[1] has rank 1
                const gauss0 = mats[0].gauss().U;
                const eigenVector0 = gauss0
                    .row(0)
                    .cross(gauss0.row(1))
                    .V3()
                    .unit();
                const planeNormal = mats[1]
                    .gauss()
                    .U.row(0)
                    .V3();
                const eigenVector1 = planeNormal.getPerpendicular().unit();
                const eigenVector2 = eigenVector0.cross(eigenVector1).rejectedFrom(planeNormal);
                return [eigenVector0, eigenVector1, eigenVector2];
            }
            if (3 == eigenValues.length) {
                mats.forEach((mat, i) => assert(2 == mat.rank(), i + ': ' + mat.rank()));
                // the (A - lambda I) matrices map to a plane. This means, that there is an entire line in R³ which maps to
                // the point V3.O
                return mats.map(mat => {
                    const gauss = mat.gauss().U;
                    return gauss
                        .row(0)
                        .cross(gauss.row(1))
                        .V3()
                        .unit();
                });
            }
            throw new Error('there cannot be more than 3 eigen values');
        }
        /**
         * U * SIGMA * VSTAR = this
         * U and VSTAR are orthogonal matrices
         * SIGMA is a diagonal matrix
         */
        svd3() {
            function matrixForCS(i, k, c, s) {
                const m = M4.identity();
                m.setEl(i, i, c);
                m.setEl(k, k, c);
                m.setEl(i, k, s);
                m.setEl(k, i, -s);
                return m;
            }
            const A = this.as3x3();
            let S = A.transposed().times(A), V$$1 = M4.identity();
            console.log(S.str);
            for (let it = 0; it < 16; it++) {
                console.log('blahg\n', V$$1.times(S).times(V$$1.transposed()).str);
                assert(V$$1.times(S)
                    .times(V$$1.transposed())
                    .likeM4(A.transposed().times(A)), V$$1.times(S).times(V$$1.transposed()).str, A.transposed().times(A).str);
                let maxOffDiagonal = 0, maxOffDiagonalIndex = 1, j = 10;
                while (j--) {
                    const val = Math.abs(S.m[j]);
                    if (j % 4 != Math.floor(j / 4) && val > maxOffDiagonal) {
                        maxOffDiagonal = val;
                        maxOffDiagonalIndex = j;
                    }
                }
                const i = Math.floor(maxOffDiagonalIndex / 4), k = maxOffDiagonalIndex % 4;
                const a_ii = S.m[5 * i], a_kk = S.m[5 * k], a_ik = S.m[maxOffDiagonalIndex];
                const phi = a_ii === a_kk ? PI$1 / 4 : Math.atan((2 * a_ik) / (a_ii - a_kk)) / 2;
                console.log(maxOffDiagonalIndex, i, k, 'phi', phi);
                const cos = Math.cos(phi), sin = Math.sin(phi);
                const givensRotation = matrixForCS(i, k, cos, -sin);
                assert(givensRotation
                    .transposed()
                    .times(givensRotation)
                    .likeIdentity());
                console.log(givensRotation.str);
                V$$1 = V$$1.times(givensRotation);
                S = M4.product(givensRotation.transposed(), S, givensRotation);
                console.log(S.str);
            }
            const sigma = S.map((el, elIndex) => (elIndex % 5 == 0 ? Math.sqrt(el) : 0));
            return {
                U: M4.product(A, V$$1, sigma.map((el, elIndex) => (elIndex % 5 == 0 ? 1 / el : 0))),
                SIGMA: sigma,
                VSTAR: V$$1.transposed(),
            };
        }
        map(fn) {
            return M4.fromFunction4((x, y, i) => fn(this.m[i], i, this.m));
        }
        likeM4(m4) {
            assertInst(M4, m4);
            return this.m.every((el, index) => eq(el, m4.m[index]));
        }
        /**
         * Returns a new M4 equal to the transpose of this.
         */
        transposed(result) {
            return M4.transpose(this, result);
        }
        /**
         * Returns a new M4 which equal to (this * matrix) (in that order)
         */
        times(matrix) {
            return M4.multiply(this, matrix);
        }
        /**
         * In a perspective projection, parallel lines meet in a vanishing point.
         *
         * Returns undefined if there is no vanishing point, either because this is not a perspective transform,
         * or because the passed dir is perpendicular to the projections direction.
         *
         * @param dir
         */
        vanishingPoint(dir) {
            assertVectors(dir);
            const m = this.m;
            const vx = dir.x, vy = dir.y, vz = dir.z;
            const w = vx * m[12] + vy * m[13] + vz * m[14];
            if (eq0(w))
                return undefined;
            const x = vx * m[0] + vy * m[1] + vz * m[2];
            const y = vx * m[4] + vy * m[5] + vz * m[6];
            const z = vx * m[8] + vy * m[9] + vz * m[10];
            return new V3(x / w, y / w, z / w);
        }
        /**
         * Transforms the vector as a point with a w coordinate of 1. This means translations will have an effect, for
         * example.
         */
        transformPoint(v) {
            assertVectors(v);
            const m = this.m;
            const vx = v.x, vy = v.y, vz = v.z;
            const x = vx * m[0] + vy * m[1] + vz * m[2] + m[3];
            const y = vx * m[4] + vy * m[5] + vz * m[6] + m[7];
            const z = vx * m[8] + vy * m[9] + vz * m[10] + m[11];
            const w = vx * m[12] + vy * m[13] + vz * m[14] + m[15];
            // scale such that fourth element becomes 1:
            return new V3(x / w, y / w, z / w);
        }
        /**
         * Transforms the vector as a vector with a w coordinate of 0. This means translations will have no effect, for
         * example. Will throw an exception if the calculated w component != 0. This occurs for example when attempting
         * to transform a vector with a perspective matrix.
         */
        transformVector(v, checkW = true) {
            assertVectors(v);
            const m = this.m;
            const w = v.x * m[12] + v.y * m[13] + v.z * m[14];
            checkW && assert(eq0(w), () => 'w === 0 needs to be true for this to make sense (w =' + w + this.str);
            return new V3(m[0] * v.x + m[1] * v.y + m[2] * v.z, m[4] * v.x + m[5] * v.y + m[6] * v.z, m[8] * v.x + m[9] * v.y + m[10] * v.z);
        }
        transformVector2(v, anchor) {
            // v and anchor define a line(t) = anchor + t v
            // we can view the calculation of the transformed vector as the derivative of the transformed line at t = 0
            // d/dt (this * line(t)) (0)
            assertVectors(v, anchor);
            const transformedAnchor = this.timesVector(VV(anchor.x, anchor.y, anchor.z, 1));
            const transformedVector = this.timesVector(VV(v.x, v.y, v.z, 0));
            return transformedVector
                .times(transformedAnchor.w)
                .minus(transformedAnchor.times(transformedVector.w))
                .div(Math.pow(transformedAnchor.w, 2))
                .V3();
        }
        transformedPoints(vs) {
            return vs.map(v => this.transformPoint(v));
        }
        transformedVectors(vs) {
            return vs.map(v => this.transformVector(v));
        }
        new() {
            return new M4();
        }
        isRegular() {
            return !eq0(this.determinant());
        }
        isAxisAligned() {
            const m = this.m;
            return (1 >= +!eq0(m[0]) + +!eq0(m[1]) + +!eq0(m[2]) &&
                1 >= +!eq0(m[4]) + +!eq0(m[5]) + +!eq0(m[6]) &&
                1 >= +!eq0(m[8]) + +!eq0(m[9]) + +!eq0(m[10]));
        }
        /**
         * A matrix M is orthogonal iff M * M^T = I
         * I being the identity matrix.
         *
         * @returns If this matrix is orthogonal or very close to it. Comparison of the identity matrix and
         * this * this^T is done with {@link #likeM4}
         */
        isOrthogonal() {
            // return this.transposed().times(this).likeM4(M4.IDENTITY)
            M4.transpose(this, M4.temp0);
            M4.multiply(this, M4.temp0, M4.temp1);
            return M4.IDENTITY.likeM4(M4.temp1);
        }
        /**
         * A matrix M is symmetric iff M == M^T
         * I being the identity matrix.
         *
         * @returns If this matrix is symmetric or very close to it. Comparison of the identity matrix and
         * this * this^T is done with {@link #likeM4}
         */
        isSymmetric() {
            M4.transpose(this, M4.temp0);
            return this.likeM4(M4.temp0);
        }
        /**
         * A matrix M is normal1 iff M * M^-T == M^T * M TODO: ^-T?
         * I being the identity matrix.
         *
         * @returns If this matrix is symmetric or very close to it. Comparison of the identity matrix and
         * this * this^T is done with {@link #likeM4}
         */
        isNormal() {
            M4.transpose(this, M4.temp0); // temp0 = this^-T
            M4.multiply(this, M4.temp0, M4.temp1); // temp1 = this * this^-T
            M4.multiply(M4.temp0, this, M4.temp2); // temp2 = this^-T * this
            return M4.temp1.likeM4(M4.temp2);
        }
        /**
         * Determinant of matrix.
         *
         * Notes:
         *      For matrices A and B
         *      det(A * B) = det(A) * det(B)
         *      det(A^-1) = 1 / det(A)
         */
        determinant() {
            /*
             | a b c d |
             | e f g h |
             | i j k l |
             | m n o p |
             */
            const $ = this.m, a = $[0], b = $[1], c = $[2], d = $[3], e = $[4], f = $[5], g = $[6], h = $[7], i = $[8], j = $[9], k = $[10], l = $[11], m = $[12], n = $[13], o = $[14], p = $[15], klop = k * p - l * o, jlnp = j * p - l * n, jkno = j * o - k * n, ilmp = i * p - l * m, ikmo = i * o - k * m, ijmn = i * n - j * m;
            return (a * (f * klop - g * jlnp + h * jkno) -
                b * (e * klop - g * ilmp + h * ikmo) +
                c * (e * jlnp - f * ilmp + h * ijmn) -
                d * (e * jkno - f * ikmo + g * ijmn));
        }
        determinant3() {
            const [a, b, c, , d, e, f, , g, h, i] = this.m;
            const det = a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g);
            return det;
        }
        /**
         * determine whether this matrix is a mirroring transformation
         */
        isMirroring() {
            /*
             var u = V(this.m[0], this.m[4], this.m[8])
             var v = V(this.m[1], this.m[5], this.m[9])
             var w = V(this.m[2], this.m[6], this.m[10])

             // for a true orthogonal, non-mirrored base, u.cross(v) == w
             // If they have an opposite direction then we are mirroring
             var mirrorvalue = u.cross(v).dot(w)
             var ismirror = (mirrorvalue < 0)
             return ismirror
             */
            return this.determinant() < 0; // TODO: also valid for 4x4?
        }
        /**
         * Get the translation part of this matrix, i.e. the result of this.transformPoint(V3.O)
         */
        getTranslation() {
            const m = this.m, w = m[15];
            return new V3(m[3] / w, m[7] / w, m[11] / w);
        }
        /**
         * Returns this matrix scaled so that the determinant is 1.
         * det(c * A) = (c ** n) * det(A) for n x n matrices,
         * so we need to divide by the 4th root of the determinant
         */
        normalized() {
            const detAbs = abs$1(this.determinant());
            return 1 == detAbs ? this : this.divScalar(Math.pow(detAbs, 0.25));
        }
        /**
         * Returns this matrix scaled so that the determinant is 1.
         * det(c * A) = (c ** n) * det(A) for n x n matrices,
         * so we need to divide by the 4th root of the determinant
         */
        normalized2() {
            const div = this.m[15];
            return 1 == div ? this : this.divScalar(Math.pow(div, 0.25));
        }
        /**
         * Returns if the matrix has the following form (within NLA_PRECISION):
         * a b c 0
         * c d e 0
         * f g h 0
         * 0 0 0 1
         */
        like3x3() {
            const m = this.m;
            return eq(1, m[15]) && eq0(m[12]) && eq0(m[13]) && eq0(m[14]) && eq0(m[3]) && eq0(m[7]) && eq0(m[11]);
        }
        isNoProj() {
            const m = this.m;
            return 0 == m[12] && 0 == m[13] && 0 == m[14] && 1 == m[15];
        }
        likeIdentity() {
            return this.m.every((val, i) => (((i / 4) | 0) == i % 4 ? eq(1, val) : eq0(val)));
        }
        isIdentity() {
            return this.m.every((val, i) => (((i / 4) | 0) == i % 4 ? 1 == val : 0 == val));
        }
        toString(f = v => v.toFixed(6).replace(/([0.])(?=0*$)/g, ' ')) {
            assert(typeof f(0) == 'string', '' + typeof f(0));
            // slice this.m to convert it to an Array (from TypeArray)
            const rounded = Array.prototype.slice.call(this.m).map(f);
            const colWidths = [0, 1, 2, 3].map(colIndex => rounded
                .sliceStep(colIndex, 0, 4)
                .map(x => x.length)
                .max());
            return [0, 1, 2, 3]
                .map(rowIndex => rounded
                .slice(rowIndex * 4, rowIndex * 4 + 4) // select matrix row
                .map((x, colIndex) => ' '.repeat(colWidths[colIndex] - x.length) + x) // pad numbers with
                // spaces to col width
                .join(' '))
                .join('\n'); // join rows
        }
        /**
         * Wether this matrix is a translation matrix, i.e. of the form
         * ```
         * 	1, 0, 0, x,
         * 	0, 1, 0, y,
         * 	0, 0, 1, z,
         * 	0, 0, 0, 1
         * ```
         */
        isTranslation() {
            // 2: any value, otherwise same value
            // prettier-ignore
            const mask = [
                1, 0, 0, 2,
                0, 1, 0, 2,
                0, 0, 1, 2,
                0, 0, 0, 1
            ];
            return mask.every((expected, index) => expected == 2 || expected == this.m[index]);
        }
        /**
         * Wether this matrix is a translation matrix, i.e. of the form
         * ```
         * 	s, 0, 0, 0,
         * 	0, t, 0, 0,
         * 	0, 0, v, 0,
         * 	0, 0, 0, 1
         * ```
         */
        isScaling() {
            // prettier-ignore
            const mask = [
                2, 0, 0, 0,
                0, 2, 0, 0,
                0, 0, 2, 0,
                0, 0, 0, 1
            ];
            return mask.every((expected, index) => expected == 2 || expected == this.m[index]);
        }
        isZRotation() {
            // prettier-ignore
            const mask = [
                2, 2, 0, 0,
                2, 2, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1
            ];
            return (mask.every((expected, index) => expected == 2 || expected == this.m[index]) &&
                (eq(1, Math.pow(this.m[0], 2) + Math.pow(this.m[1], 2)) && this.m[0] == this.m[5] && this.m[1] == -this.m[4]));
        }
        toSource() {
            const name = M4.NAMEMAP.get(this);
            if (name) {
                return name;
            }
            else if (this.isTranslation()) {
                return callsce('M4.translate', this.O);
            }
            else if (this.isScaling()) {
                return callsce('M4.scale', this.m[0], this.m[5], this.m[10]);
            }
            else if (this.isNoProj()) {
                return !this.O.equals(V3.O)
                    ? callsce('M4.forSys', this.X, this.Y, this.Z, this.O)
                    : callsce('M4.forSys', this.X, this.Y, this.Z);
            }
            else if (this.isMirror(0)) {
                const m = this.m;
                const nx = Math.sqrt((1 - m[0]) / 2);
                const ny = Math.sqrt((1 - m[5]) / 2);
                const nz = Math.sqrt((1 - m[10]) / 2);
                const w = m[3] / 2.0 / nx;
                return callsce('M4.mirror', { normal1: new V3(nx, ny, nz), w });
            }
            else {
                const m = this.m;
                // prettier-ignore
                return 'new M4(' +
                    '\n\t' + m[0] + ',\t' + m[1] + ',\t' + m[2] + ',\t' + m[3] + ',' +
                    '\n\t' + m[4] + ',\t' + m[5] + ',\t' + m[6] + ',\t' + m[7] + ',' +
                    '\n\t' + m[8] + ',\t' + m[9] + ',\t' + m[10] + ',\t' + m[11] + ',' +
                    '\n\t' + m[12] + ',\t' + m[13] + ',\t' + m[14] + ',\t' + m[15] + ')';
            }
        }
        xyAreaFactor() {
            return this.transformVector(V3.X)
                .cross(this.transformVector(V3.Y))
                .length();
        }
    }
    /**
     * A simple (consists of integers), regular, non-orthogonal matrix, useful mainly for testing.
     * M4.BAR = M4.FOO.inverse()
     */
    // prettier-ignore
    M4.FOO = new M4(0, 1, 1, 2, 0.3, 0.4, 0.8, 13, 2.1, 3.4, 5.5, 8.9, 0, 0, 0, 1);
    M4.BAR = M4.FOO.inversed();
    M4.IDENTITY = M4.identity();
    M4.YZX = M4.forSys(V3.Y, V3.Z, V3.X);
    M4.ZXY = M4.forSys(V3.Z, V3.X, V3.Y);
    // prettier-ignore
    M4.IDENTITY3 = new M4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0);
    M4.temp0 = new M4();
    M4.temp1 = new M4();
    M4.temp2 = new M4();
    M4.NAMEMAP = new JavaMap()
        .set(M4.IDENTITY3, 'M4.IDENTITY3')
        .set(M4.FOO, 'M4.FOO')
        .set(M4.BAR, 'M4.BAR')
        .set(M4.IDENTITY, 'M4.IDENTITY')
        .set(M4.ZXY, 'M4.ZXY')
        .set(M4.YZX, 'M4.YZX');
    M4.prototype.height = 4;
    M4.prototype.width = 4;
    addOwnProperties(M4.prototype, Transformable.prototype, 'constructor');

    const KEYWORD_REGEXP = new RegExp('^(' +
        'abstract|boolean|break|byte|case|catch|char|class|const|continue|debugger|' +
        'default|delete|do|double|else|enum|export|extends|false|final|finally|' +
        'float|for|function|goto|if|implements|import|in|instanceof|int|interface|' +
        'long|native|new|null|package|private|protected|public|return|short|static|' +
        'super|switch|synchronized|this|throw|throws|transient|true|try|typeof|' +
        'undefined|var|void|volatile|while|with' +
        ')$');
    function stringIsLegalKey(key) {
        return /^[a-z_$][0-9a-z_$]*$/gi.test(key) && !KEYWORD_REGEXP.test(key);
    }
    const seen = [];
    function toSource(o, indent = 0) {
        if (undefined === o)
            return 'undefined';
        if (null === o)
            return 'null';
        return o.toSource();
    }
    function addToSourceMethodToPrototype(clazz, method) {
        if (!clazz.prototype.toSource) {
            Object.defineProperty(clazz.prototype, 'toSource', {
                value: method,
                writable: true,
                configurable: true,
                enumerable: false,
            });
        }
    }
    addToSourceMethodToPrototype(Boolean, Boolean.prototype.toString);
    addToSourceMethodToPrototype(Function, Function.prototype.toString);
    addToSourceMethodToPrototype(Number, Number.prototype.toString);
    addToSourceMethodToPrototype(RegExp, RegExp.prototype.toString);
    addToSourceMethodToPrototype(Date, function () {
        return 'new Date(' + this.getTime() + ')';
    });
    addToSourceMethodToPrototype(String, function () {
        return JSON.stringify(this);
    });
    addToSourceMethodToPrototype(Array, function () {
        if (seen.includes(this)) {
            return 'CIRCULAR_REFERENCE';
        }
        seen.push(this);
        let result = '[';
        for (let i = 0; i < this.length; i++) {
            result += '\n\t' + toSource(this[i]).replace(/\r\n|\n|\r/g, '$&\t');
            if (i !== this.length - 1) {
                result += ',';
            }
        }
        result += 0 === this.length ? ']' : '\n]';
        seen.pop();
        return result;
    });
    addToSourceMethodToPrototype(Object, function () {
        if (seen.includes(this)) {
            return 'CIRCULAR_REFERENCE';
        }
        seen.push(this);
        let result = '{';
        const keys = Object.keys(this).sort();
        for (let i = 0; i < keys.length; i++) {
            const k = keys[i];
            result +=
                '\n\t' +
                    (stringIsLegalKey(k) ? k : JSON.stringify(k)) +
                    ': ' +
                    toSource(this[k]).replace(/\r\n|\n|\r/g, '$&\t');
            if (i !== keys.length - 1) {
                result += ',';
            }
        }
        result += 0 === keys.length ? '}' : '\n}';
        seen.pop();
        return result;
    });

    class AABB extends Transformable {
        constructor(min = V3.INF, max = V3.INF.negated()) {
            super();
            this.min = min;
            this.max = max;
            assertVectors(min, max);
        }
        static forXYZ(x, y, z) {
            return new AABB(V3.O, new V3(x, y, z));
        }
        static forAABBs(aabbs) {
            const result = new AABB();
            for (const aabb of aabbs) {
                result.addAABB(aabb);
            }
            return result;
        }
        addPoint(p) {
            assertVectors(p);
            this.min = this.min.min(p);
            this.max = this.max.max(p);
            return this;
        }
        addPoints(ps) {
            ps.forEach(p => this.addPoint(p));
            return this;
        }
        addAABB(aabb) {
            assertInst(AABB, aabb);
            this.addPoint(aabb.min);
            this.addPoint(aabb.max);
            return this;
        }
        /**
         * Returns the largest AABB contained in this which doesn't overlap with aabb
         * @param aabb
         */
        withoutAABB(aabb) {
            assertInst(AABB, aabb);
            let min, max;
            const volume = this.volume(), size = this.size();
            let remainingVolume = -Infinity;
            for (let i = 0; i < 3; i++) {
                const dim = ['x', 'y', 'z'][i];
                const cond = aabb.min[dim] - this.min[dim] > this.max[dim] - aabb.max[dim];
                const dimMin = cond ? this.min[dim] : Math.max(this.min[dim], aabb.max[dim]);
                const dimMax = !cond ? this.max[dim] : Math.min(this.max[dim], aabb.min[dim]);
                const newRemainingVolume = ((dimMax - dimMin) * volume) / size[dim];
                if (newRemainingVolume > remainingVolume) {
                    remainingVolume = newRemainingVolume;
                    min = this.min.withElement(dim, dimMin);
                    max = this.max.withElement(dim, dimMax);
                }
            }
            return new AABB(min, max);
        }
        getIntersectionAABB(aabb) {
            assertInst(AABB, aabb);
            return new AABB(this.min.max(aabb.min), this.max.min(aabb.max));
        }
        touchesAABB(aabb) {
            assertInst(AABB, aabb);
            return !(this.min.x > aabb.max.x ||
                this.max.x < aabb.min.x ||
                this.min.y > aabb.max.y ||
                this.max.y < aabb.min.y ||
                this.min.z > aabb.max.z ||
                this.max.z < aabb.min.z);
        }
        touchesAABBfuzzy(aabb, precisision = NLA_PRECISION) {
            assertInst(AABB, aabb);
            return !(lt(aabb.max.x, this.min.x, precisision) ||
                lt(this.max.x, aabb.min.x, precisision) ||
                lt(aabb.max.y, this.min.y, precisision) ||
                lt(this.max.y, aabb.min.y, precisision) ||
                lt(aabb.max.z, this.min.z, precisision) ||
                lt(this.max.z, aabb.min.z, precisision));
        }
        intersectsAABB(aabb) {
            assertInst(AABB, aabb);
            return !(this.min.x >= aabb.max.x ||
                this.max.x <= aabb.min.x ||
                this.min.y >= aabb.max.y ||
                this.max.y <= aabb.min.y ||
                this.min.z >= aabb.max.z ||
                this.max.z <= aabb.min.z);
        }
        intersectsAABB2d(aabb) {
            assertInst(AABB, aabb);
            return !(this.min.x >= aabb.max.x ||
                this.max.x <= aabb.min.x ||
                this.min.y >= aabb.max.y ||
                this.max.y <= aabb.min.y);
        }
        containsPoint(p) {
            assertVectors(p);
            return (this.min.x <= p.x &&
                this.min.y <= p.y &&
                this.min.z <= p.z &&
                this.max.x >= p.x &&
                this.max.y >= p.y &&
                this.max.z >= p.z);
        }
        containsSphere(center, radius) {
            assertVectors(center);
            assertNumbers(radius);
            return this.distanceToPoint(center) > radius;
        }
        intersectsSphere(center, radius) {
            assertVectors(center);
            assertNumbers(radius);
            return this.distanceToPoint(center) <= radius;
        }
        distanceToPoint(p) {
            assertVectors(p);
            const x = p.x, y = p.y, z = p.z;
            const min = this.min, max = this.max;
            if (this.containsPoint(p)) {
                return Math.max(min.x - x, x - max.x, min.y - y, y - max.y, min.z - z, z - max.z);
            }
            return p.distanceTo(new V3(clamp(x, min.x, max.x), clamp(y, min.y, max.y), clamp(z, min.z, max.z)));
        }
        containsAABB(aabb) {
            assertInst(AABB, aabb);
            return this.containsPoint(aabb.min) && this.containsPoint(aabb.max);
        }
        likeAABB(aabb) {
            assertInst(AABB, aabb);
            return this.min.like(aabb.min) && this.max.like(aabb.max);
        }
        intersectsLine(line) {
            assertVectors(line.anchor, line.dir1);
            const dir = line.dir1.map(el => el || Number.MIN_VALUE);
            const minTs = this.min.minus(line.anchor).divv(dir);
            const maxTs = this.max.minus(line.anchor).divv(dir);
            const tMin = minTs.min(maxTs).maxElement(), tMax = minTs.max(maxTs).minElement();
            return tMin <= tMax && !(tMax < line.tMin || line.tMax < tMin);
        }
        hasVolume() {
            return this.min.x <= this.max.x && this.min.y <= this.max.y && this.min.z <= this.max.z;
        }
        volume() {
            if (!this.hasVolume()) {
                return -1;
            }
            const v = this.max.minus(this.min);
            return v.x * v.y * v.z;
        }
        size() {
            return this.max.minus(this.min);
        }
        getCenter() {
            return this.min.plus(this.max).div(2);
        }
        transform(m4) {
            assertInst(M4, m4);
            assert(m4.isAxisAligned());
            const aabb = new AABB();
            aabb.addPoint(m4.transformPoint(this.min));
            aabb.addPoint(m4.transformPoint(this.max));
            return aabb;
        }
        ofTransformed(m4) {
            assertInst(M4, m4);
            const aabb = new AABB();
            aabb.addPoints(m4.transformedPoints(this.corners()));
            return aabb;
        }
        corners() {
            const min = this.min, max = this.max;
            return [
                min,
                new V3(min.x, min.y, max.z),
                new V3(min.x, max.y, min.z),
                new V3(min.x, max.y, max.z),
                new V3(max.x, min.y, min.z),
                new V3(max.x, min.y, max.z),
                new V3(max.x, max.y, min.z),
                max,
            ];
        }
        toString() {
            return callsce('new AABB', this.min, this.max);
        }
        toSource() {
            return this.toString();
        }
        /**
         * Return the matrix which transforms the AABB from V3.O to V3.XYZ to this AABB.
         */
        getM4() {
            return M4.translate(this.min).times(M4.scale(this.size()));
        }
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __awaiter$1(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    /**
     * @license
     *
     * js - JavaScript library for color conversions
     *
     * Copyright (c) 2011-2017, Gregor Aisch
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are met:
     *
     * 1. Redistributions of source code must retain the above copyright notice, this
     *    list of conditions and the following disclaimer.
     *
     * 2. Redistributions in binary form must reproduce the above copyright notice,
     *    this list of conditions and the following disclaimer in the documentation
     *    and/or other materials provided with the distribution.
     *
     * 3. The name Gregor Aisch may not be used to endorse or promote products
     *    derived from this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
     * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
     * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
     * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
     * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    // tslint:disable:no-unnecessary-qualifier
    const { abs: abs$2, atan2, cos, floor, log, min, max, round, sign: sign$1, sin, sqrt, cbrt, PI: PI$2, hypot } = Math;
    function lerp$1(a, b, f) {
        return a + (b - a) * f;
    }
    function lerpInv$1(a, b, f) {
        return (f - a) / (b - a);
    }
    function clamp$1(x, min = 0, max = 1) {
        return x < min ? min : x > max ? max : x;
    }
    function newtonIterate1d$1(f, xStart, max_steps, eps = 1e-8) {
        let x = xStart, fx;
        while (max_steps-- && abs$2((fx = f(x))) > eps) {
            const dfdx = (f(x + eps) - fx) / eps;
            console.log("fx / dfdx", fx / dfdx, "fx", fx, "x", x);
            x = x - fx / dfdx;
        }
        return x;
    }
    function bisect$1(f, a, b, steps) {
        //assert(a < b)
        let fA = f(a);
        // let fB = f(b)
        //assert(fA * fB < 0)
        while (steps--) {
            const c = (a + b) / 2;
            const fC = f(c);
            // console.log("fC", fC, "c", c)
            if (sign$1(fA) == sign$1(fC)) {
                a = c;
                fA = fC;
            }
            else {
                b = c;
                // fB = fC
            }
        }
        //assert(a <= (b + a) / 2)
        //assert(b >= (b + a) / 2)
        return (a + b) / 2;
    }
    const DEG2RAD = PI$2 / 180;
    const RAD2DEG = 180 / PI$2;
    function color(...args) {
        if (args[0] instanceof Color) {
            return args[0];
        }
        if (args.length > 1 && "string" == typeof args[args.length - 1]) {
            return guess(args.slice(0, args.length - 1), args[args.length - 1]);
        }
        else if (Array.isArray(args[0])) {
            return guess(args[0]);
        }
        else {
            return guess(args);
        }
    }
    class Color {
        /** @internal */
        constructor(r, g, b, a = 1) {
            this.r = r;
            this.g = g;
            this.b = b;
            this.a = a;
        }
        // public shade() {
        // 	const shades: [string, string, number][] = [
        // 		["ff0000", "red"],
        // 		["ffa500", "orange"],
        // 		["ffff00", "yellow"],
        // 		["008000", "green"],
        // 		["0000ff", "blue"],
        // 		["ee82ee", "violet"],
        // 		["a52a2a", "brown"],
        // 		["000000", "black"],
        // 		["808080", "grey"],
        // 		["ffffff", "white"],
        // 	] as any
        // 	function angleDiff(a: number, b: number) {
        // 		const d = (a - b) % 360
        // 		if (d > 180) return d - 360
        // 		if (d < -180) return d + 360
        // 		return d
        // 	}
        // 	shades.forEach(arr => arr.push(color(arr[0]).hsl()[0]))
        // 	const [h, s, l] = this.hsl()
        // 	if (l > 0.9) return "white"
        // 	if (l > 0.8 && s < 0.2) return "white"
        // 	if (s < 0.1) return "grey"
        // 	if (s < 0.4 && h > 0 && h < 48) return "brown"
        // 	const distanceInXYZ: { [hue: number]: number } = { 0: 0 }
        // 	for (let i = 60; i <= 360; i += 60) {
        // 		distanceInXYZ[i] =
        // 			distanceInXYZ[i - 60] + distance(hsl(i - 60, 1, 0.5), hsl(i, 1, 0.5), "xyz")
        // 	}
        // 	// console.log(distanceInXYZ)
        // 	const shadeEnds: { [hue: number]: number } = {
        // 		0: 9,
        // 		38: 48,
        // 		60: 65,
        // 		120: 165,
        // 		240: 245,
        // 		300: 338,
        // 		360: 369,
        // 	}
        // 	const getColorDistanceAlongXYZHue = (hueDegrees: number) => {
        // 		const base = hueDegrees - (hueDegrees % 60)
        // 		return (
        // 			distanceInXYZ[base] + distance(hsl(base, 1, 0.5), hsl(hueDegrees, 1, 0.5), "xyz")
        // 		)
        // 	}
        // 	const colorXYZD = getColorDistanceAlongXYZHue(this.hsl()[0])
        // 	const md = distanceInXYZ[360]
        // 	const shadeHue =
        // 		(Object.keys(shadeEnds) as any[]).find(shadeHue => shadeEnds[shadeHue | 0] >= this.hsl()[0])! % 360
        // 	return shades.find(([_hex, _name, _hue]) => (_hue | 0) === shadeHue)![1]
        // 	// process.exit()
        // 	return withMax(shades, ([_hex, _name, _hue]) => {
        // 		return -abs(angleDiff(this.hsl()[0], _hue))
        // 	})[1]
        // 	return withMax(shades, ([_hex, _name, _hue]) => {
        // 		const [thisL, thisA, thisB] = this.lab()
        // 		const [L, A, B] = color(_hex).lab()
        // 		return -hypot(thisL - L, thisA - A, thisB - B)
        // 	})[1]
        // }
        /**
         * @see [[mix]]
         */
        mix(col2, f, m = "rgb") {
            return mix(this, col2, f, m);
        }
        rgb(doRound = true, clamp_ = true) {
            const f = (t) => {
                if (doRound)
                    t = round(t);
                if (clamp_)
                    t = clamp$1(t, 0, 255);
                return t;
            };
            const { r, g, b } = this;
            return [f(r), f(g), f(b)];
        }
        rgba(doRound = true, clamp_ = true) {
            const f = (t) => {
                if (doRound)
                    t = round(t);
                if (clamp_)
                    t = clamp$1(t, 0, 255);
                return t;
            };
            const { r, g, b, a } = this;
            return [f(r), f(g), f(b), a];
        }
        /**
         * Return a hex-string representation of this color.
         *
         * @param mode
         * @see #num for a hex-number representation.
         * @example chroma.color('yellow').alpha(0.7).hex()
         * @example chroma.color('yellow').alpha(0.7).hex('rgba')
         * @example chroma.color('yellow').alpha(0.7).hex('argb')
         */
        hex(mode = "rgb") {
            const { r, g, b, a } = this;
            return rgb2hex(r, g, b, a, mode);
        }
        /**
         * Returns the [HSL] representation of this color. hue will always be in [0;360). Values are never NaN.
         *
         * @example chroma.color('purple').hsl()
         */
        hsl() {
            const { r, g, b } = this;
            return rgb2hsl(r, g, b);
        }
        /**
         * Returns the [HSL] representation of this color. hue will always be in [0;360). Values are never NaN.
         *
         * @example chroma.color('purple').hsv()
         */
        hsv() {
            const { r, g, b } = this;
            return rgb2hsv(r, g, b);
        }
        /**
         * Returns the [HSL] representation of this color. hue will always be in [0;360). Values are never NaN.
         *
         * @example chroma.color('purple').hcg()
         */
        hcg() {
            const { r, g, b } = this;
            return rgb2hcg(r, g, b);
        }
        /**
         * Returns a CSS `rgb(...)` or `hsl(...)` string representation that can be used as CSS-color definition. The alpha
         * value is not output if it 1.
         * @example chroma.color('teal').css() // == "rgb(0,128,128)"
         * @example chroma.color('teal').alpha(0.5).css() // == "rgba(0,128,128,0.5)"
         * @example chroma.color('teal').css('hsl') // == "hsl(180,100%,25.1%)"
         */
        css(mode = "rgb") {
            if ("rgb" == mode) {
                const { r, g, b, a } = this;
                return rgb2css(r, g, b, a);
            }
            else if ("hsl" == mode) {
                return hsl2css(this.hsl(), this.alpha());
            }
            else {
                throw new Error();
            }
        }
        name(closest = false) {
            const thisNum = this.num();
            const name = Object.keys(w3cx11).find(name => w3cx11[name] == thisNum);
            if (!name && closest) {
                const [thisLStar, thisAStar, thisBStar] = this.lab();
                return withMax(Object.keys(w3cx11), name => {
                    const [lStar, aStar, bStar] = num(w3cx11[name]).lab();
                    return -hypot(thisLStar - lStar, thisAStar - aStar, thisBStar - bStar);
                });
            }
            return name;
        }
        /**
         * Get the [CMYK](#CMYK) representation of this color.
         *
         * @example chroma.color('red').cmyk()
         */
        cmyk() {
            const { r, g, b } = this;
            return rgb2cmyk(r, g, b);
        }
        /**
         * Returns the [GL] representation of this color.
         * @example chroma.color('33cc00').gl()
         */
        gl() {
            const { r, g, b, a } = this;
            return [r / 255, g / 255, b / 255, a];
        }
        luminance(lum1) {
            const { r, g, b, a } = this;
            const [, Y] = rgb2xyz(r, g, b);
            if (undefined === lum1) {
                return Y;
            }
            const inverseLerp = (a, b, val) => (val - a) / (b - a);
            if (lum1 > Y) {
                // lerp to white
                return mix(this, white, inverseLerp(Y, 1, lum1), "xyz").alpha(a);
            }
            else {
                // lerp to black
                return mix(black, this, inverseLerp(0, Y, lum1), "xyz").alpha(a);
            }
        }
        /**
         * Get color temperature of this color in Kelvin. This only makes sense for colors close to those output by
         * kelvin
         *
         * @example [c = chroma.color('#ff3300'), c.temperature()]
         * @example [c = chroma.color('#ffe3cd'), c.temperature()]
         * @example [c = chroma.color('#b3ccff'), c.temperature()]
         */
        temperature() {
            const { r, g, b } = this;
            return rgb2kelvin(r, g, b);
        }
        /**
         * Returns a new [Color] with a channel changed.
         * @example chroma.color('skyblue').set('hsl.h', 0) // change hue to 0 deg (=red)
         * @example chroma.color('hotpink').set('lch.c', 30) // set chromaticity to 30
         * @example chroma.color('orangered').set('lab.l', x => x / 2) // half Lab lightness
         * @example chroma.color('darkseagreen').set('lch.c', x => x * 2) // double Lch saturation
         */
        set(modeAndChannel, value) {
            const [mode, channel] = modeAndChannel.split(".");
            const src = this[mode]();
            const i = mode.indexOf(channel);
            if (-1 == i)
                throw new Error("invalid channel");
            src[i] = "number" == typeof value ? value : value(src[i]);
            return color(src, mode).alpha(this.a);
        }
        /**
         * Returns whether this color is outside the RGB color cube and will be clipped/clamped when calling .rgb()
         *
         * @example [c = chroma.lch( 20, 40, 50), c.clipped()]
         * @example [c = chroma.lch( 40, 40, 50), c.clipped()]
         * @example [c = chroma.lch( 60, 40, 50), c.clipped()]
         * @example [c = chroma.lch( 80, 40, 50), c.clipped()]
         * @example [c = chroma.lch(100, 40, 50), c.clipped()]
         */
        clipped() {
            const { r, g, b } = this;
            return !(0 <= r && r <= 255 && (0 <= g && g <= 255) && (0 <= b && b <= 255));
        }
        /**
         * Returns black or white, whichever has the highest contrast to `this`.
         * In the readme you should see the result of this.
         *
         * @example chroma.color('red')
         * @example chroma.color('yellow')
         */
        textColor() {
            return this.luminance() > 0.5 ? black : white;
        }
        alpha(alpha1) {
            if (undefined === alpha1) {
                return this.a;
            }
            const { r, g, b } = this;
            return rgb(r, g, b, alpha1);
        }
        darker(amount = 1) {
            const [l, a, b] = this.lab();
            return lab(l - LAB_Kn * amount, a, b, this.alpha());
        }
        /**
         *
         * @param amount
         * @example chroma.color('hotpink')
         * @example chroma.color('hotpink').brighter()
         * @example chroma.color('hotpink').brighter(2)
         * @example chroma.color('hotpink').brighter(3)
         */
        brighter(amount = 1) {
            return this.darker(-amount);
        }
        /**
         * Returns a new [Color] with increased saturation.
         * @param amount How much.
         * @example chroma.color('slategray')
         * @example chroma.color('slategray').saturate()
         * @example chroma.color('slategray').saturate(2)
         * @example chroma.color('slategray').saturate(3)
         */
        saturate(amount = 1) {
            const [l, c, h] = this.lch();
            return lch(l, max(0, c + amount * LAB_Kn), h, this.alpha());
        }
        /**
         * Equivalent to `saturate(-amount)`.
         * @see #saturate
         */
        desaturate(amount = 1) {
            return this.saturate(-amount);
        }
        premultiplied() {
            const { r, g, b, a } = this;
            return rgb(r * a, g * a, b * a, a);
        }
        /**
         * Returns the [HSI] representation of this color. hue will always be in [0; 360). Values are never NaN.
         *
         * @example chroma.color('purple').hsi()
         */
        hsi() {
            const { r, g, b } = this;
            return rgb2hsi(r, g, b);
        }
        /**
         * Returns the [LAB] representation of this color.
         *
         * @example chroma.color('purple').lab()
         */
        lab() {
            const { r, g, b } = this;
            return rgb2lab(r, g, b);
        }
        /**
         * Return a hex-num of this color.
         *
         * @param mode
         * @see #num for a hex-number representation.
         * @example chroma.color('yellow').alpha(0.7).hex()
         * @example chroma.color('yellow').alpha(0.7).hex('rgba')
         * @example chroma.color('yellow').alpha(0.7).hex('argb')
         */
        num(mode = "rgb") {
            const { r, g, b, a } = this;
            return rgb2num(r, g, b, a, mode);
        }
        /**
         * Returns the [LCH] representation of this color. hue will always be in [0; 360). Values are never NaN.
         *
         * @example chroma.color('purple').lch()
         */
        lch() {
            const { r, g, b } = this;
            return rgb2lch(r, g, b);
        }
        /**
         * Returns the [XYZ] representation of this color. hue will always be in [0; 360). Values are never NaN.
         *
         * @example chroma.color('purple').xyz()
         */
        xyz() {
            const { r, g, b } = this;
            return rgb2xyz(r, g, b);
        }
        /**
         * Whether this [Color](#Color) is identical (strict equality of r, g, b, a) to `color`.
         */
        equals(color) {
            const { r, g, b, a } = this;
            const { r: r2, g: g2, b: b2, a: a2 } = color;
            return r == r2 && g == g2 && b == b2 && a == a2;
        }
        hashCode() {
            return this.num("rgba");
        }
        /**
         * @example chroma.color('red').toSource() // == "rgb(255, 0, 0)"
         * @example chroma.rgb(-2, 100.02, 200, 0.5).toSource() // == "rgb(-2, 100.02, 200, 0.5)"
         */
        toSource() {
            const { r, g, b, a } = this;
            return "chroma.rgb(" + r + ", " + g + ", " + b + (a === 1 ? ")" : ", " + a + ")");
        }
    }
    Color.prototype.toString = Color.prototype.css;
    Color.prototype.kelvin = Color.prototype.temperature;
    /**
     * @example chroma.black
     */
    const black = new Color(0, 0, 0, 1);
    /**
     * @example chroma.black
     */
    const white = new Color(255, 255, 255, 1);
    const brewer = {
        OrRd: [0xfff7ec, 0xfee8c8, 0xfdd49e, 0xfdbb84, 0xfc8d59, 0xef6548, 0xd7301f, 0xb30000, 0x7f0000],
        PuBu: [0xfff7fb, 0xece7f2, 0xd0d1e6, 0xa6bddb, 0x74a9cf, 0x3690c0, 0x0570b0, 0x045a8d, 0x023858],
        BuPu: [0xf7fcfd, 0xe0ecf4, 0xbfd3e6, 0x9ebcda, 0x8c96c6, 0x8c6bb1, 0x88419d, 0x810f7c, 0x4d004b],
        Oranges: [0xfff5eb, 0xfee6ce, 0xfdd0a2, 0xfdae6b, 0xfd8d3c, 0xf16913, 0xd94801, 0xa63603, 0x7f2704],
        BuGn: [0xf7fcfd, 0xe5f5f9, 0xccece6, 0x99d8c9, 0x66c2a4, 0x41ae76, 0x238b45, 0x006d2c, 0x00441b],
        YlOrBr: [0xffffe5, 0xfff7bc, 0xfee391, 0xfec44f, 0xfe9929, 0xec7014, 0xcc4c02, 0x993404, 0x662506],
        YlGn: [0xffffe5, 0xf7fcb9, 0xd9f0a3, 0xaddd8e, 0x78c679, 0x41ab5d, 0x238443, 0x006837, 0x004529],
        Reds: [0xfff5f0, 0xfee0d2, 0xfcbba1, 0xfc9272, 0xfb6a4a, 0xef3b2c, 0xcb181d, 0xa50f15, 0x67000d],
        RdPu: [0xfff7f3, 0xfde0dd, 0xfcc5c0, 0xfa9fb5, 0xf768a1, 0xdd3497, 0xae017e, 0x7a0177, 0x49006a],
        Greens: [0xf7fcf5, 0xe5f5e0, 0xc7e9c0, 0xa1d99b, 0x74c476, 0x41ab5d, 0x238b45, 0x006d2c, 0x00441b],
        YlGnBu: [0xffffd9, 0xedf8b1, 0xc7e9b4, 0x7fcdbb, 0x41b6c4, 0x1d91c0, 0x225ea8, 0x253494, 0x081d58],
        Purples: [0xfcfbfd, 0xefedf5, 0xdadaeb, 0xbcbddc, 0x9e9ac8, 0x807dba, 0x6a51a3, 0x54278f, 0x3f007d],
        GnBu: [0xf7fcf0, 0xe0f3db, 0xccebc5, 0xa8ddb5, 0x7bccc4, 0x4eb3d3, 0x2b8cbe, 0x0868ac, 0x084081],
        Greys: [0xffffff, 0xf0f0f0, 0xd9d9d9, 0xbdbdbd, 0x969696, 0x737373, 0x525252, 0x252525, 0x000000],
        YlOrRd: [0xffffcc, 0xffeda0, 0xfed976, 0xfeb24c, 0xfd8d3c, 0xfc4e2a, 0xe31a1c, 0xbd0026, 0x800026],
        PuRd: [0xf7f4f9, 0xe7e1ef, 0xd4b9da, 0xc994c7, 0xdf65b0, 0xe7298a, 0xce1256, 0x980043, 0x67001f],
        Blues: [0xf7fbff, 0xdeebf7, 0xc6dbef, 0x9ecae1, 0x6baed6, 0x4292c6, 0x2171b5, 0x08519c, 0x08306b],
        PuBuGn: [0xfff7fb, 0xece2f0, 0xd0d1e6, 0xa6bddb, 0x67a9cf, 0x3690c0, 0x02818a, 0x016c59, 0x014636],
        Viridis: [0x440154, 0x482777, 0x3f4a8a, 0x31678e, 0x26838f, 0x1f9d8a, 0x6cce5a, 0xb6de2b, 0xfee825],
        Spectral: [
            0x9e0142,
            0xd53e4f,
            0xf46d43,
            0xfdae61,
            0xfee08b,
            0xffffbf,
            0xe6f598,
            0xabdda4,
            0x66c2a5,
            0x3288bd,
            0x5e4fa2,
        ],
        RdYlGn: [
            0xa50026,
            0xd73027,
            0xf46d43,
            0xfdae61,
            0xfee08b,
            0xffffbf,
            0xd9ef8b,
            0xa6d96a,
            0x66bd63,
            0x1a9850,
            0x006837,
        ],
        RdBu: [
            0x67001f,
            0xb2182b,
            0xd6604d,
            0xf4a582,
            0xfddbc7,
            0xf7f7f7,
            0xd1e5f0,
            0x92c5de,
            0x4393c3,
            0x2166ac,
            0x053061,
        ],
        PiYG: [
            0x8e0152,
            0xc51b7d,
            0xde77ae,
            0xf1b6da,
            0xfde0ef,
            0xf7f7f7,
            0xe6f5d0,
            0xb8e186,
            0x7fbc41,
            0x4d9221,
            0x276419,
        ],
        PRGn: [
            0x40004b,
            0x762a83,
            0x9970ab,
            0xc2a5cf,
            0xe7d4e8,
            0xf7f7f7,
            0xd9f0d3,
            0xa6dba0,
            0x5aae61,
            0x1b7837,
            0x00441b,
        ],
        RdYlBu: [
            0xa50026,
            0xd73027,
            0xf46d43,
            0xfdae61,
            0xfee090,
            0xffffbf,
            0xe0f3f8,
            0xabd9e9,
            0x74add1,
            0x4575b4,
            0x313695,
        ],
        BrBG: [
            0x543005,
            0x8c510a,
            0xbf812d,
            0xdfc27d,
            0xf6e8c3,
            0xf5f5f5,
            0xc7eae5,
            0x80cdc1,
            0x35978f,
            0x01665e,
            0x003c30,
        ],
        RdGy: [
            0x67001f,
            0xb2182b,
            0xd6604d,
            0xf4a582,
            0xfddbc7,
            0xffffff,
            0xe0e0e0,
            0xbababa,
            0x878787,
            0x4d4d4d,
            0x1a1a1a,
        ],
        PuOr: [
            0x7f3b08,
            0xb35806,
            0xe08214,
            0xfdb863,
            0xfee0b6,
            0xf7f7f7,
            0xd8daeb,
            0xb2abd2,
            0x8073ac,
            0x542788,
            0x2d004b,
        ],
        Set2: [0x66c2a5, 0xfc8d62, 0x8da0cb, 0xe78ac3, 0xa6d854, 0xffd92f, 0xe5c494, 0xb3b3b3],
        Accent: [0x7fc97f, 0xbeaed4, 0xfdc086, 0xffff99, 0x386cb0, 0xf0027f, 0xbf5b17, 0x666666],
        Set1: [0xe41a1c, 0x377eb8, 0x4daf4a, 0x984ea3, 0xff7f00, 0xffff33, 0xa65628, 0xf781bf, 0x999999],
        Set3: [
            0x8dd3c7,
            0xffffb3,
            0xbebada,
            0xfb8072,
            0x80b1d3,
            0xfdb462,
            0xb3de69,
            0xfccde5,
            0xd9d9d9,
            0xbc80bd,
            0xccebc5,
            0xffed6f,
        ],
        Dark2: [0x1b9e77, 0xd95f02, 0x7570b3, 0xe7298a, 0x66a61e, 0xe6ab02, 0xa6761d, 0x666666],
        Paired: [
            0xa6cee3,
            0x1f78b4,
            0xb2df8a,
            0x33a02c,
            0xfb9a99,
            0xe31a1c,
            0xfdbf6f,
            0xff7f00,
            0xcab2d6,
            0x6a3d9a,
            0xffff99,
            0xb15928,
        ],
        Pastel2: [0xb3e2cd, 0xfdcdac, 0xcbd5e8, 0xf4cae4, 0xe6f5c9, 0xfff2ae, 0xf1e2cc, 0xcccccc],
        Pastel1: [0xfbb4ae, 0xb3cde3, 0xccebc5, 0xdecbe4, 0xfed9a6, 0xffffcc, 0xe5d8bd, 0xfddaec, 0xf2f2f2],
    };
    /**
     * X11 color names
     * http://www.w3.org/TR/css3-color/#svg-color
     *
     * @example chroma.Object.keys(w3cx11).slice(0, 4)
     */
    const w3cx11 = {
        aliceblue: 0xf0f8ff,
        antiquewhite: 0xfaebd7,
        aqua: 0x00ffff,
        aquamarine: 0x7fffd4,
        azure: 0xf0ffff,
        beige: 0xf5f5dc,
        bisque: 0xffe4c4,
        black: 0x000000,
        blanchedalmond: 0xffebcd,
        blue: 0x0000ff,
        blueviolet: 0x8a2be2,
        brown: 0xa52a2a,
        burlywood: 0xdeb887,
        cadetblue: 0x5f9ea0,
        chartreuse: 0x7fff00,
        chocolate: 0xd2691e,
        coral: 0xff7f50,
        cornflower: 0x6495ed,
        cornflowerblue: 0x6495ed,
        cornsilk: 0xfff8dc,
        crimson: 0xdc143c,
        cyan: 0x00ffff,
        darkblue: 0x00008b,
        darkcyan: 0x008b8b,
        darkgoldenrod: 0xb8860b,
        darkgray: 0xa9a9a9,
        darkgreen: 0x006400,
        darkgrey: 0xa9a9a9,
        darkkhaki: 0xbdb76b,
        darkmagenta: 0x8b008b,
        darkolivegreen: 0x556b2f,
        darkorange: 0xff8c00,
        darkorchid: 0x9932cc,
        darkred: 0x8b0000,
        darksalmon: 0xe9967a,
        darkseagreen: 0x8fbc8f,
        darkslateblue: 0x483d8b,
        darkslategray: 0x2f4f4f,
        darkslategrey: 0x2f4f4f,
        darkturquoise: 0x00ced1,
        darkviolet: 0x9400d3,
        deeppink: 0xff1493,
        deepskyblue: 0x00bfff,
        dimgray: 0x696969,
        dimgrey: 0x696969,
        dodgerblue: 0x1e90ff,
        firebrick: 0xb22222,
        floralwhite: 0xfffaf0,
        forestgreen: 0x228b22,
        fuchsia: 0xff00ff,
        gainsboro: 0xdcdcdc,
        ghostwhite: 0xf8f8ff,
        gold: 0xffd700,
        goldenrod: 0xdaa520,
        gray: 0x808080,
        green: 0x008000,
        greenyellow: 0xadff2f,
        grey: 0x808080,
        honeydew: 0xf0fff0,
        hotpink: 0xff69b4,
        indianred: 0xcd5c5c,
        indigo: 0x4b0082,
        ivory: 0xfffff0,
        khaki: 0xf0e68c,
        laserlemon: 0xffff54,
        lavender: 0xe6e6fa,
        lavenderblush: 0xfff0f5,
        lawngreen: 0x7cfc00,
        lemonchiffon: 0xfffacd,
        lightblue: 0xadd8e6,
        lightcoral: 0xf08080,
        lightcyan: 0xe0ffff,
        lightgoldenrod: 0xfafad2,
        lightgoldenrodyellow: 0xfafad2,
        lightgray: 0xd3d3d3,
        lightgreen: 0x90ee90,
        lightgrey: 0xd3d3d3,
        lightpink: 0xffb6c1,
        lightsalmon: 0xffa07a,
        lightseagreen: 0x20b2aa,
        lightskyblue: 0x87cefa,
        lightslategray: 0x778899,
        lightslategrey: 0x778899,
        lightsteelblue: 0xb0c4de,
        lightyellow: 0xffffe0,
        lime: 0x00ff00,
        limegreen: 0x32cd32,
        linen: 0xfaf0e6,
        magenta: 0xff00ff,
        maroon: 0x800000,
        maroon2: 0x7f0000,
        maroon3: 0xb03060,
        mediumaquamarine: 0x66cdaa,
        mediumblue: 0x0000cd,
        mediumorchid: 0xba55d3,
        mediumpurple: 0x9370db,
        mediumseagreen: 0x3cb371,
        mediumslateblue: 0x7b68ee,
        mediumspringgreen: 0x00fa9a,
        mediumturquoise: 0x48d1cc,
        mediumvioletred: 0xc71585,
        midnightblue: 0x191970,
        mintcream: 0xf5fffa,
        mistyrose: 0xffe4e1,
        moccasin: 0xffe4b5,
        navajowhite: 0xffdead,
        navy: 0x000080,
        oldlace: 0xfdf5e6,
        olive: 0x808000,
        olivedrab: 0x6b8e23,
        orange: 0xffa500,
        orangered: 0xff4500,
        orchid: 0xda70d6,
        palegoldenrod: 0xeee8aa,
        palegreen: 0x98fb98,
        paleturquoise: 0xafeeee,
        palevioletred: 0xdb7093,
        papayawhip: 0xffefd5,
        peachpuff: 0xffdab9,
        peru: 0xcd853f,
        pink: 0xffc0cb,
        plum: 0xdda0dd,
        powderblue: 0xb0e0e6,
        purple: 0x800080,
        purple2: 0x7f007f,
        purple3: 0xa020f0,
        rebeccapurple: 0x663399,
        red: 0xff0000,
        rosybrown: 0xbc8f8f,
        royalblue: 0x4169e1,
        saddlebrown: 0x8b4513,
        salmon: 0xfa8072,
        sandybrown: 0xf4a460,
        seagreen: 0x2e8b57,
        seashell: 0xfff5ee,
        sienna: 0xa0522d,
        silver: 0xc0c0c0,
        skyblue: 0x87ceeb,
        slateblue: 0x6a5acd,
        slategray: 0x708090,
        slategrey: 0x708090,
        snow: 0xfffafa,
        springgreen: 0x00ff7f,
        steelblue: 0x4682b4,
        tan: 0xd2b48c,
        teal: 0x008080,
        thistle: 0xd8bfd8,
        tomato: 0xff6347,
        turquoise: 0x40e0d0,
        violet: 0xee82ee,
        wheat: 0xf5deb3,
        white: 0xffffff,
        whitesmoke: 0xf5f5f5,
        yellow: 0xffff00,
        yellowgreen: 0x9acd32,
    };
    /**
     * Create a valid RGB color (`.clipped() == false`) from a random point in the CIELAB color space. This results in
     * more colors in the RGB color space where humans can perceive more differences.
     * @param randomSource A function which returns random `number`s in the interval [0; 1). Useful if you want to
     *     create a deterministic sequence of "random" colors. Defaults to `Math.random`.
     * @example chroma.random((() => { let i = 0; return () => (i = (i *Math.SQRT2) % 1); })())
     */
    // export function randomLab(randomSource = Math.random) {
    // 	const labAMin = -87,
    // 		labAMax = 99,
    // 		labBMin = -108,
    // 		labBMax = 95
    // 	let maxIterations = 100
    // 	while (maxIterations--) {
    // 		const u = randomSource(),
    // 			v = randomSource(),
    // 			w = randomSource()
    // 		// The following matrix multiplication transform the random point (u v w) in the unit cube into the
    // 		// oriented bounding box (OBB) of the projection of the RGB space into the LAB space. This is necessary to
    // 		// avoid a huge number of misses.
    // 		const color = lab(
    // 			u * -53.903 + v * -88.755 + w * 71.7 + 99.707,
    // 			u * -82.784 + v * 187.036 + w * -2.422 + -28.17,
    // 			u * -75.813 + v * -141.406 + w * -48.261 + 152.469,
    // 		)
    // 		console.log(color.lab())
    // 		console.log(color.rgba(false, false))
    // 		if (!color.clipped()) return color
    // 	}
    // 	throw new Error("Could find a random color in 100 iterations")
    // }
    /**
     * Mixes two colors. The mix ratio is a value between 0 and 1.
     * The color mixing produces different results based the color space used for interpolation.
     *
     * @param col2
     * @param f
     * @param m
     * @example chroma.mix('red', 'blue')
     * @example chroma.mix('red', 'blue', 0.25)
     * @example chroma.mix('red', 'blue', 0.75)
     *
     * @example chroma.mix('red', 'blue', 0.5, 'rgb')
     * @example chroma.mix('red', 'blue', 0.5, 'hsl')
     * @example chroma.mix('red', 'blue', 0.5, 'lab')
     * @example chroma.mix('red', 'blue', 0.5, 'lch')
     * @example chroma.mix('red', 'blue', 0.5, 'lrgb')
     */
    function mix(col1, col2, f = 0.5, m = "rgb") {
        const c1 = color(col1);
        const c2 = color(col2);
        const res = interpolators[m] && interpolators[m](c1, c2, f, m);
        if (!res) {
            throw new Error("color mode " + m + " is not supported");
        }
        return res.alpha(lerp$1(c1.alpha(), c2.alpha(), f));
    }
    function lch(...args) {
        return guess(args, "lch");
    }
    function hsl(...args) {
        return guess(args, "hsl");
    }
    function lab(...args) {
        return guess(args, "lab");
    }
    /**
     * @example chroma.num(0x663399) // rebeccapurple
     */
    function num(num) {
        const [r, g, b] = num2rgb(num);
        return new Color(r, g, b);
    }
    function rgb(...args) {
        return guess(args, "rgb");
    }
    var blend_fs;
    (function (blend_fs) {
        blend_fs.normal = blend_f(each((a, _) => a));
        blend_fs.multiply = blend_f(each((a, b) => (a * b) / 255));
        blend_fs.screen = blend_f(each(_screen));
        blend_fs.overlay = blend_f(each(_overlay));
        blend_fs.darken = blend_f(each(min));
        blend_fs.lighten = blend_f(each(max));
        blend_fs.dodge = blend_f(each(_dodge));
        blend_fs.burn = blend_f(each(_burn));
    })(blend_fs || (blend_fs = {}));
    function scale(...args) {
        const f = (t => f._at(t));
        Object.getOwnPropertyNames(Scale.prototype).forEach(key => (f[key] = Scale.prototype[key]));
        if (Array.isArray(args[0]))
            args = args[0];
        if (args.length == 1 && "string" == typeof args[0])
            args = brewer[args[0]];
        f._init("function" == typeof args[0] ? args[0] : args.map(a => color(a)));
        //f.setColors(args.length > 1 ? args : args[0])
        return f;
    }
    class Scale {
        classes(classes) {
            if (undefined === classes) {
                return this._classes;
            }
            if (Array.isArray(classes)) {
                this._classes = classes;
                this.domain(classes[0], classes[classes.length - 1]);
            }
            else {
                if (classes % 1 != 0 || classes < 1)
                    throw new Error("invalid classes param");
                // const d = analyze(this.domain())
                this._classes = limits(this.domain(), "e", classes);
            }
            return this;
        }
        domain(...domain) {
            if (undefined === domain[0]) {
                return "function" !== typeof this._colors
                    ? this._pos.map(p => lerp$1(this._min, this._max, p))
                    : [this._min, this._max];
            }
            this._min = domain[0];
            this._max = domain[domain.length - 1];
            if (2 == domain.length) {
                if ("function" !== typeof this._colors) {
                    // equidistant positions
                    this._pos = this._colors.map((_, c) => c / (this._colors.length - 1));
                }
            }
            else if ("function" !== typeof this._colors && domain.length == this._colors.length) {
                this._pos = domain.map(d => lerpInv$1(this._min, this._max, d));
            }
            else {
                throw new Error("invalid domain " + domain);
            }
            return this;
        }
        mode(mode) {
            if (undefined === mode) {
                return this._mode;
            }
            this._mode = mode;
            this._resetCache();
            return this;
        }
        /**
         * Set the output format return by `this(x)` and `this.colors(n)`.
         * @param outputFormat The color format to use. Pass `undefined` to return [Color] objects.
         * @return `this`
         * @example chroma.scale("red", "white").out("hex")(0) // == "#ff0000"
         * @example chroma.scale("red", "white").out("num").colors(2) // == [0xff0000, 0xffffff]
         */
        out(outputFormat) {
            this._out = outputFormat;
            return this;
        }
        /**
         * This makes sure the lightness range is spread evenly across a color scale. Especially useful when working
         * with [multi-hue color scales](https://www.vis4.net/blog/2013/09/mastering-multi-hued-color-scales/), where
         * simple gamma correction can't help you very much.
         *
         * @example chroma.scale('black','red','yellow','white')
         * @example chroma.scale('black','red','yellow','white').correctLightness()
         */
        correctLightness(enableCorrectLightness = true) {
            if (this._correctLightness != enableCorrectLightness) {
                this._resetCache();
                const colors = this._colors;
                if (enableCorrectLightness && "function" !== typeof colors) {
                    // make sure that the colors have ascending or descending lightnesses
                    let sign = 0;
                    for (let i = 1; i < colors.length; i++) {
                        const sign2 = colors[i].lab()[0] - colors[i - 1].lab()[0];
                        if (0 == sign) {
                            sign = sign2;
                        }
                        else if (sign * sign2 < 0) {
                            throw new Error("scale color lightnesses must be monotonic");
                        }
                    }
                }
            }
            this._correctLightness = enableCorrectLightness;
            return this;
        }
        padding(paddingLeft, paddingRight = paddingLeft) {
            if (!paddingLeft) {
                return [this._paddingLeft, this._paddingRight];
            }
            this._paddingLeft = paddingLeft;
            this._paddingRight = paddingRight;
            return this;
        }
        /**
         * Get a number of equidistant colors.
         * @param numColors The number of colors to return.
         * @param format Output format. Defaults to `"hex"`. Pass `false` to get {@link Color} objects.
         * @returns If `numColors` is `undefined`, the colors which define this [Scale]. If `numColors` is 1,
         * `[this((min + max) / 2)]`. Otherwise, an array where the first element is `this(min)`, the last one is
         * `this(max)` and the rest are equidistant samples between min and max.
         * @example chroma.scale('OrRd').colors(5)
         * @example chroma.scale(['white', 'black']).colors(12)
         */
        colors(numColors, format = "hex") {
            let result;
            if (undefined === numColors) {
                result = this._colors.slice();
            }
            else if (numColors == 1) {
                result = [this._color((this._min + this._max) / 2)];
            }
            else if (numColors > 1) {
                result = Array.from({ length: numColors }, (_, i) => this._color(lerp$1(this._min, this._max, i / (numColors - 1))));
            }
            else {
                // returns all colors based on the defined classes
                let samples;
                if (this._classes && this._classes.length > 2) {
                    samples = Array.from({ length: this._classes.length - 1 }, (_, i) => (this._classes[i] + this._classes[i + 1]) * 0.5);
                }
                else {
                    samples = this.domain(); // TODO?!
                }
                result = samples.map(s => this._color(s));
            }
            return (format ? result.map(c => c[format]()) : result);
        }
        cache(enableCache) {
            if (undefined === enableCache) {
                return !!this._cache;
            }
            this._cache = enableCache ? this._cache || new Map() : undefined;
            return this;
        }
        gamma(gamma) {
            if (undefined === gamma) {
                return this._gamma;
            }
            this._gamma = gamma;
            return this;
        }
        /**
         * @ignore
         */
        _at(t) {
            const c = this._color(t);
            return this._out ? c[this._out]() : c;
        }
        /**
         * @ignore
         */
        _init(colorsOrFunction) {
            this._colors = colorsOrFunction;
            if ("function" != typeof colorsOrFunction) {
                this._pos = colorsOrFunction.map((_, i) => i / (colorsOrFunction.length - 1));
            }
            this._mode = "rgb";
            this.domain(0, 1);
            this._paddingLeft = 0;
            this._paddingRight = 0;
            this._correctLightness = false;
            this._cache = new Map();
            this._gamma = 1;
        }
        _getClass(value) {
            return this._classes.findIndex(cls => value <= cls) - 1;
        }
        _color(val, bypassMap = false) {
            let t;
            if (!bypassMap) {
                const min = this._min, max = this._max;
                if (this._classes && this._classes.length > 2) {
                    const c = this._getClass(val);
                    t = c / (this._classes.length - 2);
                }
                else if (max !== min) {
                    t = (val - min) / (max - min);
                }
                else {
                    t = 1;
                }
                if (this._correctLightness) {
                    t = this._tCorrectedLightness(t);
                }
            }
            else {
                t = val;
            }
            t = t ** this._gamma;
            t = (this._paddingLeft + t) / (1 + this._paddingLeft + this._paddingRight);
            //	t = this._paddingLeft + t * (1 - this._paddingLeft - this._paddingRight)
            t = clamp$1(t, 0, 1);
            const tHash = t;
            const cacheResult = this._cache && this._cache.get(tHash);
            if (cacheResult) {
                return cacheResult;
            }
            else {
                let col;
                if (Array.isArray(this._colors)) {
                    for (let i = 0; i < this._pos.length; i++) {
                        const p = this._pos[i];
                        if (t <= p) {
                            col = this._colors[i];
                            break;
                        }
                        if (t >= p && i == this._pos.length - 1) {
                            col = this._colors[i];
                            break;
                        }
                        if (t > p && t < this._pos[i + 1]) {
                            t = (t - p) / (this._pos[i + 1] - p);
                            col = mix(this._colors[i], this._colors[i + 1], t, this._mode);
                            break;
                        }
                    }
                }
                else {
                    col = this._colors(t);
                }
                if (this._cache) {
                    // tslint:disable-next-line
                    this._cache.set(tHash, col);
                }
                // tslint:disable-next-line
                return col;
            }
        }
        _tCorrectedLightness(t0_1) {
            const L0 = this._color(0, true).lab()[0];
            const L1 = this._color(1, true).lab()[0];
            const L_ideal = lerp$1(L0, L1, t0_1);
            return bisect$1(t => this._color(t, true).lab()[0] - L_ideal, 0, 1, 8);
        }
        _resetCache() {
            if (this._cache)
                this._cache.clear();
        }
    }
    var scales;
    (function (scales) {
        /**
         * @example chroma.scales.cool()
         */
        function cool() {
            return scale([hsl(180, 1, 0.9), hsl(250, 0.7, 0.4)]);
        }
        scales.cool = cool;
        /**
         * @example chroma.scales.hot()
         */
        function hot() {
            return scale(["#000", "#f00", "#ff0", "#fff"]).mode("rgb");
        }
        scales.hot = hot;
    })(scales || (scales = {}));
    function analyze(data) {
        const r = {
            min: Infinity,
            max: -Infinity,
            sum: 0,
            values: [],
            count: 0,
        };
        function add(val) {
            if (val != undefined && !isNaN(val)) {
                r.values.push(val);
                r.sum += val;
                if (val < r.min)
                    r.min = val;
                if (val > r.max)
                    r.max = val;
                r.count += 1;
            }
        }
        data.forEach(val => add(val));
        r.domain = [r.min, r.max];
        r.limits = function (mode, num) {
            return limits(this, mode, num);
        };
        return r;
    }
    function limits(data, mode = "e", num = 7) {
        const info = Array.isArray(data) ? analyze(data) : data;
        const { min, max, values } = info;
        values.sort((a, b) => a - b);
        if (num == 1) {
            return [min, max];
        }
        if (mode.startsWith("c")) {
            return [min, max];
        }
        else if (mode.startsWith("e")) {
            return Array.from({ length: num + 1 }, (_, i) => lerp$1(min, max, i / num));
        }
        else if (mode.startsWith("l")) {
            if (min <= 0) {
                throw new Error("Logarithmic scales are only possible for values > 0");
            }
            const min_log = Math.LOG10E * log(min);
            const max_log = Math.LOG10E * log(max);
            return Array.from({ length: num + 1 }, (_, i) => 10 ** lerp$1(min_log, max_log, i / num));
        }
        else if (mode.startsWith("q")) {
            return Array.from({ length: num + 1 }, (_, i) => {
                const p = ((values.length - 1) * i) / num;
                const pb = floor(p);
                return pb == p ? values[pb] : lerp$1(values[pb], values[pb + 1], p - pb);
            });
        }
        else if (mode.startsWith("k")) {
            // implementation based on
            // http://code.google.com/p/figue/source/browse/trunk/figue.js#336
            // simplified for 1-d input values
            const n = values.length;
            const assignments = new Array(n);
            const clusterSizes = new Array(num);
            let repeat = true;
            let nb_iters = 0;
            let centroids = Array.from({ length: num + 1 }, (_, i) => lerp$1(min, max, i / num));
            do {
                // assignment step
                clusterSizes.fill(0);
                for (let i = 0; i < values.length; i++) {
                    const value = values[i];
                    const minDistIndex = indexOfMax(centroids, c => -abs$2(c - value));
                    clusterSizes[minDistIndex]++;
                    assignments[i] = minDistIndex;
                }
                // update centroids step
                const newCentroids = new Array(num).fill(0);
                for (let i = 0; i < assignments.length; i++) {
                    const cluster = assignments[i];
                    newCentroids[cluster] += values[i];
                }
                for (let j = 0; j < newCentroids.length; j++) {
                    newCentroids[j] /= clusterSizes[j];
                }
                // check convergence
                repeat = newCentroids.some((nc, j) => nc != centroids[j]);
                centroids = newCentroids;
            } while (nb_iters++ < 200 && repeat);
            // finished k-means clustering
            // the next part is borrowed from gabrielflor.it
            const kClusters = Array.from({ length: num }, () => []);
            for (let i = 0; i < assignments.length; i++) {
                const cluster = assignments[i];
                kClusters[cluster].push(values[i]);
            }
            const tmpKMeansBreaks = [];
            for (const kCluster of kClusters) {
                tmpKMeansBreaks.push(kCluster[0], kCluster[kCluster.length - 1]);
            }
            tmpKMeansBreaks.sort((a, b) => a - b);
            const limits = [];
            limits.push(tmpKMeansBreaks[0]);
            for (let i = 1; i < tmpKMeansBreaks.length; i += 2) {
                const v = tmpKMeansBreaks[i];
                if (!isNaN(v) && limits.indexOf(v) == -1) {
                    limits.push(v);
                }
            }
            return limits;
        }
        else {
            throw new Error("unknown mode");
        }
    }
    const interpolators = {};
    // const _guess_formats: { p: number; test: (args: any[]) => ColorFormat | undefined }[] = []
    const _input = {};
    function linear_interpolator(col1, col2, f, m) {
        const xyz1 = col1[m]();
        const xyz2 = col2[m]();
        return guess([
            lerp$1(xyz1[0], xyz2[0], f),
            lerp$1(xyz1[1], xyz2[1], f),
            lerp$1(xyz1[2], xyz2[2], f),
            lerp$1(col1.alpha(), col2.alpha(), f),
        ], m);
    }
    interpolators.xyz = interpolators.rgb = interpolators.lab = linear_interpolator;
    interpolators.num = function (col1, col2, f) {
        const n1 = col1.num();
        const n2 = col2.num();
        return num(lerp$1(n1, n2, f));
    };
    interpolators.lrgb = function (col1, col2, f) {
        const [r1, g1, b1, a1] = col1.rgba(false, false);
        const [r2, g2, b2, a2] = col2.rgba(false, false);
        return new Color(sqrt(r1 ** 2 * (1 - f) + r2 ** 2 * f), sqrt(g1 ** 2 * (1 - f) + g2 ** 2 * f), sqrt(b1 ** 2 * (1 - f) + b2 ** 2 * f), lerp$1(a1, a2, f));
    };
    function guess(args, mode) {
        if (Array.isArray(args[0]))
            args = args[0];
        if (!mode) {
            if (args.length == 1 && args[0] in w3cx11) {
                mode = "name";
            }
            else if (args.length == 1 && "string" == typeof args[0]) {
                mode = "css";
            }
            else if (args.length == 3) {
                mode = "rgb";
            }
            else if (args.length == 4 && "number" == typeof args[3] && args[3] >= 0 && args[3] <= 1) {
                mode = "rgb";
            }
            else if (args.length == 1 && "number" == typeof args[0] && args[0] >= 0 && args[0] <= 0xffffff) {
                mode = "num";
            }
            else
                throw new Error("could not guess mode. args " + JSON.stringify(args));
        }
        const channels = _input[mode](...args);
        return new Color(channels[0], channels[1], channels[2], undefined !== channels[3] ? channels[3] : 1);
    }
    function hex2rgb(hex) {
        let m;
        if ((m = hex.match(/^#?([A-F\d]{2})([A-F\d]{2})([A-F\d]{2})([A-F\d]{2})?$/i))) {
            return [parseInt(m[1], 16), parseInt(m[2], 16), parseInt(m[3], 16), m[4] ? parseInt(m[4], 16) / 255 : 1];
        }
        else if ((m = hex.match(/^#?([A-F\d])([A-F\d])([A-F\d])([A-F\d])?$/i))) {
            return [
                parseInt(m[1], 16) * 0x11,
                parseInt(m[2], 16) * 0x11,
                parseInt(m[3], 16) * 0x11,
                m[4] ? (parseInt(m[4], 16) * 0x11) / 255 : 1,
            ];
        }
        throw new Error("invalid hex color: " + hex);
    }
    // interface ColorModes {
    // 	cmyk: CMYK
    // 	gl: GL
    // 	rgb: RGB
    // 	rgba: RGBA
    // 	lab: LAB
    // 	hsl: HSL
    // 	hsv: HSV
    // 	hsi: HSI
    // 	xyz: XYZ
    // 	hcg: HCG
    // 	lch: LCH
    // 	hex: string
    // 	num: number
    // 	name: string
    // 	kelvin: number
    // 	css: string
    // }
    function rgb2hex(r255, g255, b255, a1, mode = "rgb") {
        r255 = clamp$1(round(r255), 0, 255);
        g255 = clamp$1(round(g255), 0, 255);
        b255 = clamp$1(round(b255), 0, 255);
        const rgb = (r255 << 16) | (g255 << 8) | b255;
        const rgbString = rgb.toString(16).padStart(6, "0");
        const alphaString = round(clamp$1(a1) * 255)
            .toString(16)
            .padStart(2, "0");
        return "#" + ("argb" == mode ? alphaString + rgbString : "rgba" == mode ? rgbString + alphaString : rgbString);
    }
    _input.lrgb = _input.rgb;
    _input.hex = hex2rgb;
    _input.hsl = hsl2rgb;
    function norm360(degrees) {
        return ((degrees % 360) + 360) % 360;
    }
    _input.hsv = hsv2rgb;
    function num2rgb(num) {
        if (!("number" == typeof num && num >= 0 && num <= 0xffffff)) {
            throw new Error("unknown num color: " + num);
        }
        const r = num >> 16;
        const g = (num >> 8) & 0xff;
        const b = num & 0xff;
        return [r, g, b, 1];
    }
    function rgb2num(r255, g255, b255, a1 = 1, mode = "rgb") {
        const rgbNum = (round(r255) << 16) | (round(g255) << 8) | round(b255);
        if ("rgb" === mode) {
            return rgbNum;
        }
        else if ("rgba" === mode) {
            return (rgbNum << 8) | (round(a1 * 255) << 24);
        }
        else {
            return (round(a1 * 255) << 24) | rgbNum;
        }
    }
    _input.num = num2rgb;
    const WS = "\\s*";
    const FLOAT = "([+-]?(?:\\d*\\.?)?\\d+(?:[eE][+-]?\\d+)?)";
    const CSS_RGB_REGEX = new RegExp(["^rgba?\\(", FLOAT, ",", FLOAT, ",", FLOAT, "(?:,", FLOAT + "(%)?", ")?\\)$"].join(WS), "i");
    const CSS_RGB_WS_REGEX = new RegExp(["^rgba?\\(", FLOAT, FLOAT, FLOAT, "(?:/", FLOAT + "(%)?", ")?\\)$"].join(WS), "i");
    const CSS_RGB_PERCENT_REGEX = new RegExp(["^rgba?\\(", FLOAT + "%", ",", FLOAT + "%", ",", FLOAT + "%", "(?:,", FLOAT + "(%)?", ")?\\)$"].join(WS), "i");
    const CSS_RGB_WS_PERCENT_REGEX = new RegExp(["^rgba?\\(", FLOAT + "%", FLOAT + "%", FLOAT + "%", "(?:/", FLOAT + "(%)?", ")?\\)$"].join(WS), "i");
    const CSS_HSL_REGEX = new RegExp(["^hsla?\\(", FLOAT + "(deg|rad|turn)?", ",", FLOAT + "%", ",", FLOAT + "%", "(?:,", FLOAT + "(%)?", ")?\\)$"].join(WS), "i");
    const CSS_HSL_WS_REGEX = new RegExp(["^hsla?\\(", FLOAT + "(deg|rad|turn)?\\s+" + FLOAT + "%", FLOAT + "%", "(?:/", FLOAT + "(%)?", ")?\\)$"].join(WS), "i");
    function css2rgb(css) {
        if (w3cx11 && w3cx11.hasOwnProperty(css)) {
            return num2rgb(w3cx11[css.toLowerCase()]);
        }
        let m;
        if ((m = css.match(CSS_RGB_REGEX) || css.match(CSS_RGB_WS_REGEX))) {
            return [
                clamp$1(+m[1], 0, 255),
                clamp$1(+m[2], 0, 255),
                clamp$1(+m[3], 0, 255),
                m[4] ? clamp$1(m[5] ? +m[4] / 100 : +m[4]) : 1,
            ];
        }
        else if ((m = css.match(CSS_RGB_PERCENT_REGEX) || css.match(CSS_RGB_WS_PERCENT_REGEX))) {
            return [
                clamp$1(+m[1] / 100) * 255,
                clamp$1(+m[2] / 100) * 255,
                clamp$1(+m[3] / 100) * 255,
                m[4] ? clamp$1(m[5] ? +m[4] / 100 : +m[4]) : 1,
            ];
        }
        else if ((m = css.match(CSS_HSL_REGEX) || css.match(CSS_HSL_WS_REGEX))) {
            const CONVERSION = { deg: 1, rad: RAD2DEG, turn: 360 };
            const angleUnit = (m[2] ? m[2].toLowerCase() : "deg");
            return hsl2rgb((((+m[1] * CONVERSION[angleUnit]) % 360) + 360) % 360, clamp$1(+m[3] / 100), clamp$1(+m[4] / 100), m[5] ? clamp$1(m[6] ? +m[5] / 100 : +m[5]) : 1);
        }
        else {
            return hex2rgb(css);
        }
    }
    function rgb2css(r, g, b, a = 1) {
        if (a >= 1) {
            return "rgb(" + [r, g, b].map(round).join(",") + ")";
        }
        else {
            return "rgba(" + [r, g, b].map(round).join(",") + "," + a + ")";
        }
    }
    function rnd(a) {
        return round(a * 100) / 100;
    }
    function hsl2css([h, s, l], alpha) {
        const mode = alpha < 1 ? "hsla" : "hsl";
        return (mode +
            "(" +
            rnd(h) +
            "," +
            rnd(s * 100) +
            "%" +
            "," +
            rnd(l * 100) +
            "%" +
            ("hsla" == mode ? "," + rnd(alpha) : "") +
            ")");
    }
    _input.css = css2rgb;
    _input.name = function (name) {
        return num2rgb(w3cx11[name]);
    };
    function lch2lab(l, c, hueDegrees) {
        /*
        Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.
        These formulas were invented by David Dalrymple to obtain maximum contrast without going
        out of gamut if the parameters are in the range 0-1.

        A saturation multiplier was added by Gregor Aisch
         */
        return [l, cos(hueDegrees * DEG2RAD) * c, sin(hueDegrees * DEG2RAD) * c];
    }
    function lch2rgb(l, c, hDegrees, alpha1 = 1) {
        const [, a, b] = lch2lab(l, c, hDegrees);
        return cielab2rgb(l, a, b, alpha1);
    }
    function lab2lch(l, a, b) {
        const c = hypot(a, b);
        const h = (atan2(b, a) * RAD2DEG + 360) % 360;
        return [l, c, h];
    }
    function rgb2lch(r255, g255, b255) {
        const [l, a, b2] = rgb2lab(r255, g255, b255);
        return lab2lch(l, a, b2);
    }
    _input.lch = lch2rgb;
    function rgb2cmyk(r255, g255, b255) {
        r255 /= 255;
        g255 /= 255;
        b255 /= 255;
        const k = 1 - max(r255, g255, b255);
        if (1 == k)
            return [0, 0, 0, 1];
        const c = (1 - r255 - k) / (1 - k);
        const m = (1 - g255 - k) / (1 - k);
        const y = (1 - b255 - k) / (1 - k);
        return [c, m, y, k];
    }
    function cmyk2rgb(c1, m1, y1, k1, alpha1 = 1) {
        if (k1 == 1) {
            return [0, 0, 0, alpha1];
        }
        const r255 = 255 * (1 - c1) * (1 - k1);
        const g255 = 255 * (1 - m1) * (1 - k1);
        const b255 = 255 * (1 - y1) * (1 - k1);
        return [r255, g255, b255, alpha1];
    }
    _input.cmyk = cmyk2rgb;
    _input.gl = function (r, g, b, a = 1) {
        return [r * 255, g * 255, b * 255, a];
    };
    //function rgb2luminance(r: number, g: number, b: number) {
    //	// https://en.wikipedia.org/wiki/Relative_luminance
    //	const [, Y] = rgb2xyz(r, g, b)
    //	return Y
    //}
    function rgbChannel2RgbLinear(x255) {
        const x1 = x255 / 255;
        // http://entropymine.com/imageworsener/srgbformula/
        if (x1 <= 0.04045) {
            return x1 / 12.92;
        }
        else {
            return ((x1 + 0.055) / 1.055) ** 2.4;
        }
    }
    function rgbLinearChannel2Rgb(xLinear1) {
        if (xLinear1 <= 0.0031308) {
            return 255 * (12.92 * xLinear1);
        }
        else {
            return 255 * ((1 + 0.055) * xLinear1 ** (1 / 2.4) - 0.055);
        }
    }
    function kelvin2rgb(kelvin) {
        const t = kelvin / 100;
        let r, g, b;
        if (t < 66) {
            r = 255;
            g = -155.25485562709179 - 0.44596950469579133 * (t - 2) + 104.49216199393888 * log(t - 2);
            b = t < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (t - 10) + 115.67994401066147 * log(t - 10);
        }
        else {
            r = 351.97690566805693 + 0.114206453784165 * (t - 55) - 40.25366309332127 * log(t - 55);
            g = 325.4494125711974 + 0.07943456536662342 * (t - 50) - 28.0852963507957 * log(t - 50);
            b = 255;
        }
        return [r, g, b];
    }
    _input.rgb = (...args) => args;
    function rgb2kelvin(r255, g255, b255) {
        console.log(b255 - r255);
        if (g255 + b255 < 158.61) {
            console.log("0 < t < 20");
            // calc from green
            return round(newtonIterate1d$1(t => g255 - (-155.25485562709179 - 0.44596950469579133 * (t - 2) + 104.49216199393888 * log(t - 2)), 15, 4) * 100);
            return (Math.E ** ((g255 + 155.25485562709179 + 0.44596950469579133 * (15 - 2)) / 104.49216199393888) + 2) * 100;
        }
        else if (b255 - r255 < 0) {
            console.log("20 < t < 66");
            return round(newtonIterate1d$1(t => b255 - (-254.76935184120902 + 0.8274096064007395 * (t - 10) + 115.67994401066147 * log(t - 10)), 43, 4) * 100);
            return ((Math.E ** ((b255 + 254.76935184120902 - 0.8274096064007395 * (43 - 10)) / 115.67994401066147) + 10) * 100);
        }
        else {
            console.log("0 < t < 400, start= " + (-1.4 * (r255 + g255) + 755));
            return round(newtonIterate1d$1(t => r255 - (351.97690566805693 + 0.114206453784165 * (t - 55) - 40.25366309332127 * log(t - 55)), -1.4 * (r255 + g255) + 755, 8) * 100);
            return ((r255 / 329.698727446) ** (1 / -0.1332047592) + 60) * 100;
        }
        return newtonIterate1d$1(k => {
            const eps = 1e-9;
            const [kr, kg, kb] = kelvin2rgb(k);
            const [kr2, kg2, kb2] = kelvin2rgb(k + eps);
            const dkr = (kr2 - kr) / eps, dkg = (kg2 - kg) / eps, dkb = (kb2 - kb) / eps;
            return dkr * (kr - r255) + dkg * (kg - g255) + dkb * (kb - b255);
            return kb / kr - b255 / r255;
        }, 
        //1000,
        //40000,
        Math.E ** ((b255 / r255 + 2.5) / 0.4), 20);
        let maxTemp = 40000;
        let minTemp = 1000;
        const eps = 0.4;
        let temp = 0;
        let rgb;
        while (maxTemp - minTemp > eps) {
            temp = (maxTemp + minTemp) * 0.5;
            rgb = kelvin2rgb(temp);
            if (rgb[2] / rgb[0] >= b255 / r255) {
                maxTemp = temp;
            }
            else {
                minTemp = temp;
            }
        }
        return round(temp);
    }
    _input.temperature = _input.kelvin = _input.K = kelvin2rgb;
    function blend_f(f) {
        return function (bottom, top) {
            const [r, g, b] = f(color(top).rgb(), color(bottom).rgb());
            return rgb(r, g, b);
        };
    }
    function each(f) {
        return function (c1, c2) {
            return c1.map((e, i) => f(e, c2[i]));
        };
    }
    function _screen(a, b) {
        return 255 * (1 - (1 - a / 255) * (1 - b / 255));
    }
    function _overlay(a, b) {
        if (b < 128) {
            return (2 * a * b) / 255;
        }
        else {
            return 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));
        }
    }
    function _burn(a, b) {
        return 255 * (1 - (1 - b / 255) / (a / 255));
    }
    function _dodge(a, b) {
        if (a == 255) {
            return 255;
        }
        return 255 * min(1, b / 255 / (1 - a / 255));
    }
    /**
     * r, g, b can be in any interval (0-1 or 0-255)
     * @param r
     * @param g
     * @param b
     */
    function rgb2hexhue(r, g, b) {
        const m = min(r, g, b);
        const M = max(r, g, b);
        const delta = M - m;
        let hueTurnX6; // angle as value between 0 and 6
        if (0 == delta) {
            hueTurnX6 = 0;
        }
        else if (r == M) {
            // second term to make sure the value is > 0
            hueTurnX6 = (g - b) / delta + (g < b ? 6 : 0);
        }
        else if (g == M) {
            hueTurnX6 = 2 + (b - r) / delta;
        }
        else {
            hueTurnX6 = 4 + (r - g) / delta;
        }
        return [hueTurnX6 * 60, m, M];
    }
    function hcxm2rgb(hueDegrees, c1, x1, m1, alpha1) {
        const m255 = m1 * 255;
        const cm255 = c1 * 255 + m255;
        const xm255 = x1 * 255 + m255;
        if (hueDegrees < 60) {
            return [cm255, xm255, m255, alpha1];
        }
        else if (hueDegrees < 120) {
            return [xm255, cm255, m255, alpha1];
        }
        else if (hueDegrees < 180) {
            return [m255, cm255, xm255, alpha1];
        }
        else if (hueDegrees < 240) {
            return [m255, xm255, cm255, alpha1];
        }
        else if (hueDegrees < 300) {
            return [xm255, m255, cm255, alpha1];
        }
        else {
            return [cm255, m255, xm255, alpha1];
        }
    }
    /**
     * https://en.wikipedia.org/w/index.php?title=HSL_and_HSV&oldid=856714654#From_HSL
     */
    function hsl2rgb(hueDegrees, s1, l1, alpha1 = 1) {
        hueDegrees = norm360(hueDegrees);
        const c1 = (1 - abs$2(2 * l1 - 1)) * s1;
        return hcxm2rgb(hueDegrees, c1, c1 * (1 - abs$2(((hueDegrees / 60) % 2) - 1)), l1 - c1 / 2, alpha1);
    }
    function rgb2hsl(r255, g255, b255) {
        const [hue, min1, max1] = rgb2hexhue(r255 / 255, g255 / 255, b255 / 255);
        const l1 = (max1 + min1) / 2;
        let s1;
        if (max1 == min1) {
            s1 = 0;
        }
        else {
            s1 = l1 < 0.5 ? (max1 - min1) / (max1 + min1) : (max1 - min1) / (2 - max1 - min1);
        }
        return [hue, s1, l1];
    }
    function hsv2rgb(hueDegrees, s1, v1, alpha1 = 1) {
        hueDegrees = norm360(hueDegrees);
        const c1 = v1 * s1;
        return hcxm2rgb(hueDegrees, c1, c1 * (1 - abs$2(((hueDegrees / 60) % 2) - 1)), v1 - c1, alpha1);
    }
    function rgb2hsv(r255, g255, b255) {
        const [hue, min255, max255] = rgb2hexhue(r255, g255, b255);
        const delta255 = max255 - min255;
        const v1 = max255 / 255.0;
        const s1 = max255 == 0 ? 0 : delta255 / max255;
        return [hue, s1, v1];
    }
    function hcg2rgb(hueDegrees, c1, g1, alpha1 = 1) {
        hueDegrees = norm360(hueDegrees);
        const p = g1 * (1 - c1);
        return hcxm2rgb(hueDegrees, c1, c1 * (1 - abs$2(((hueDegrees / 60) % 2) - 1)), p, alpha1);
    }
    function rgb2hcg(r255, g255, b255) {
        const [hue, min255, max255] = rgb2hexhue(r255, g255, b255);
        const c1 = (max255 - min255) / 255;
        const _g1 = c1 < 1 ? min255 / 255 / (1 - c1) : 0;
        return [hue, c1, _g1];
    }
    _input.hcg = hcg2rgb;
    function cielab2rgb(LStar100, aStar, bStar, alpha = 1) {
        const [x, y, z] = cielab2xyz(LStar100, aStar, bStar);
        return xyz2rgb(x, y, z, alpha);
    }
    function cielab2xyz(LStar100, aStar, bStar) {
        function fInv(t) {
            if (t > LAB_delta) {
                return t ** 3;
            }
            else {
                return LAB_3DeltaPow2 * (t - 4 / 29);
            }
        }
        return [
            LAB_Xn * fInv((LStar100 + 16) / 116 + aStar / 500),
            LAB_Yn * fInv((LStar100 + 16) / 116),
            LAB_Zn * fInv((LStar100 + 16) / 116 - bStar / 200),
        ];
    }
    function xyz2cielab(x, y, z) {
        // https://en.wikipedia.org/w/index.php?title=CIELAB_color_space&oldid=849576085#Forward_transformation
        function f(t) {
            if (t > LAB_deltaPow3) {
                return cbrt(t);
            }
            else {
                return t / LAB_3DeltaPow2 + 4 / 29;
            }
        }
        return [116 * f(y / LAB_Yn) - 16, 500 * (f(x / LAB_Xn) - f(y / LAB_Yn)), 200 * (f(y / LAB_Yn) - f(z / LAB_Zn))];
    }
    // const LAB_CONSTANTS = {
    const LAB_Kn = 18;
    const LAB_Xn = 0.95047;
    const LAB_Yn = 1;
    const LAB_Zn = 1.08883;
    const LAB_delta = 0.206896552; // delta = 6 / 29
    const LAB_3DeltaPow2 = 0.12841855; // 3 * delta ** 2
    const LAB_deltaPow3 = 0.008856452; // delta ** 3
    // }
    function rgb2lab(r255, g255, b255) {
        const [x, y, z] = rgb2xyz(r255, g255, b255);
        return xyz2cielab(x, y, z);
    }
    function rgb2xyz(r255, g255, b255) {
        // https://en.wikipedia.org/wiki/SRGB#The_reverse_transformation
        const r1Linear = rgbChannel2RgbLinear(r255);
        const g1Linear = rgbChannel2RgbLinear(g255);
        const b1Linear = rgbChannel2RgbLinear(b255);
        const X = 0.4124564 * r1Linear + 0.3575761 * g1Linear + 0.1804375 * b1Linear;
        const Y = 0.2126729 * r1Linear + 0.7151522 * g1Linear + 0.072175 * b1Linear;
        const Z = 0.0193339 * r1Linear + 0.119192 * g1Linear + 0.9503041 * b1Linear;
        return [X, Y, Z];
    }
    function xyz2rgb(X1, Y1, Z1, alpha1 = 1) {
        // https://en.wikipedia.org/wiki/SRGB#The_forward_transformation_(CIE_XYZ_to_sRGB)
        const r1Linear = 3.2404542 * X1 - 1.5371385 * Y1 - 0.4985314 * Z1;
        const g1Linear = -0.969266 * X1 + 1.8760108 * Y1 + 0.041556 * Z1;
        const b1Linear = 0.0556434 * X1 - 0.2040259 * Y1 + 1.0572252 * Z1;
        return [rgbLinearChannel2Rgb(r1Linear), rgbLinearChannel2Rgb(g1Linear), rgbLinearChannel2Rgb(b1Linear), alpha1];
    }
    _input.xyz = xyz2rgb;
    _input.lab = cielab2rgb;
    /**
     * For HSI, we use the direct angle calculation. I.e. atan2(beta, alpha). See wikipedia link. This is why we don't use
     * hcxm2rgb.
     */
    function hsi2rgb(hueDegrees, s1, i1, alpha1 = 1) {
        /*
        borrowed from here:
        http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp
         */
        let r, g, b;
        let hRad = hueDegrees * DEG2RAD;
        if (hRad < (2 * PI$2) / 3) {
            b = (1 - s1) / 3;
            r = (1 + (s1 * cos(hRad)) / cos(PI$2 / 3 - hRad)) / 3;
            g = 1 - (b + r);
        }
        else if (hRad < (4 * PI$2) / 3) {
            hRad -= (2 * PI$2) / 3;
            r = (1 - s1) / 3;
            g = (1 + (s1 * cos(hRad)) / cos(PI$2 / 3 - hRad)) / 3;
            b = 1 - (r + g);
        }
        else {
            hRad -= (4 * PI$2) / 3;
            g = (1 - s1) / 3;
            b = (1 + (s1 * cos(hRad)) / cos(PI$2 / 3 - hRad)) / 3;
            r = 1 - (g + b);
        }
        return [3 * i1 * r * 255, 3 * i1 * g * 255, 3 * i1 * b * 255, alpha1];
    }
    /**
     * For HSI, we use the direct angle calculation. I.e. atan2(beta, alpha). See wikipedia link. This is why we don't use
     * rgb2hexhue.
     */
    function rgb2hsi(r255, g255, b255) {
        // See https://en.wikipedia.org/wiki/HSL_and_HSV#Hue_and_chroma
        // See https://en.wikipedia.org/wiki/HSL_and_HSV#Lightness
        const r1 = r255 / 255;
        const g1 = g255 / 255;
        const b1 = b255 / 255;
        const i1 = (r1 + g1 + b1) / 3;
        if (r1 == g1 && g1 == b1) {
            return [0, 0, i1];
        }
        else {
            const alpha = (1 / 2) * (2 * r1 - g1 - b1);
            const beta = (sqrt(3) / 2) * (g1 - b1);
            const hRad = atan2(beta, alpha);
            const min1 = min(r1, g1, b1);
            const s1 = 1 - min1 / i1;
            return [(hRad < 0 ? 2 * PI$2 + hRad : hRad) * RAD2DEG, s1, i1];
        }
    }
    _input.hsi = hsi2rgb;
    interpolators.hsv = interpolators.hsl = interpolators.hsi = interpolators.lch = interpolators.hcg = function interpolate_hsx(color1, color2, f, m) {
        const [a1, b1, c1] = color1[m]();
        const [a2, b2, c2] = color2[m]();
        function lerpHue(hue1, hue2, f) {
            const dh = norm360(hue2 - hue1 + 180) - 180;
            return hue1 + f * dh;
        }
        return color(("h" == m.charAt(0) ? lerpHue : lerp$1)(a1, a2, f), lerp$1(b1, b2, f), ("h" == m.charAt(2) ? lerpHue : lerp$1)(c1, c2, f), m);
    };
    function indexOfMax(arr, f) {
        let maxValue = -Infinity, maxValueIndex = -1;
        for (let i = 0; i < arr.length; i++) {
            const value = f(arr[i]);
            if (value > maxValue) {
                maxValue = value;
                maxValueIndex = i;
            }
        }
        return maxValueIndex;
    }
    function withMax(arr, f) {
        return arr[indexOfMax(arr, f)];
    }

    /// <reference types="webgl-strict-types" />
    const WGL = WebGLRenderingContext;
    class Buffer$$1 {
        /**
         * Provides a simple method of uploading data to a GPU buffer.
         *
         * @example
         *     const vertices = new Buffer(WGL.ARRAY_BUFFER, Float32Array)
         *     vertices.data = [[0, 0, 0], [1, 0, 0], [0, 1, 0], [1, 1, 0]]
         *     vertices.compile()
         *
         * @example
         *     const indices = new Buffer(WGL.ELEMENT_ARRAY_BUFFER, Uint16Array)
         *     indices.data = [[0, 1, 2], [2, 1, 3]]
         *     indices.compile()
         *
         * @param target Specifies the target to which the buffer object is bound.
         * @param type
         */
        constructor(target, type) {
            this.target = target;
            this.type = type;
            this.buffer = undefined;
            this.data = [];
            /** Number of elements in buffer. 2 V3s is still 2, not 6. */
            this.count = 0;
            /** Space between elements in buffer. 3 for V3s. */
            this.spacing = 1;
            this.hasBeenCompiled = false;
            assert(target == WGL.ARRAY_BUFFER || target == WGL.ELEMENT_ARRAY_BUFFER, 'target == WGL.ARRAY_BUFFER || target == WGL.ELEMENT_ARRAY_BUFFER');
            assert(type == Float32Array || type == Uint16Array || type == Uint32Array, 'type == Float32Array || type == Uint16Array || type == Uint32Array');
            if (Uint16Array == type) {
                this.bindSize = WGL.UNSIGNED_SHORT;
            }
            else if (Uint32Array == type) {
                this.bindSize = WGL.UNSIGNED_INT;
            }
        }
        /**
         * Upload the contents of `data` to the GPU in preparation for rendering. The data must be a list of lists
         * where each inner list has the same length. For example, each element of data for vertex normals would be a
         * list of length three. This will remember the data length and element length for later use by shaders.
         *
         * This could have used `[].concat.apply([], this.data)` to flatten the array but Google
         * Chrome has a maximum number of arguments so the concatenations are chunked to avoid that limit.
         *
         * @param usage Either `WGL.STATIC_DRAW` or `WGL.DYNAMIC_DRAW`. Defaults to `WGL.STATIC_DRAW`
         */
        compile(usage = WGL.STATIC_DRAW, gl$$1 = currentGL$$1()) {
            assert(WGL.STATIC_DRAW == usage || WGL.DYNAMIC_DRAW == usage, 'WGL.STATIC_DRAW == type || WGL.DYNAMIC_DRAW == type');
            this.buffer = this.buffer || gl$$1.createBuffer();
            let buffer;
            if (this.data.length == 0) {
                console.warn('empty buffer ' + this.name);
                //console.trace()
            }
            if (this.data.length == 0 || this.data[0] instanceof V3) {
                assert(!(this.data[0] instanceof V3) || this.type == Float32Array);
                V3.pack(this.data, (buffer = new this.type(this.data.length * 3))); // asserts that all
                // elements are V3s
                this.spacing = 3;
                this.count = this.data.length;
                this.maxValue = 0;
            }
            else {
                //assert(Array != this.data[0].constructor, this.name + this.data[0])
                if (Array.isArray(this.data[0])) {
                    const bufferLength = this.data.length * this.data[0].length;
                    buffer = new this.type(bufferLength);
                    let i = this.data.length, destPtr = bufferLength;
                    while (i--) {
                        const subArray = this.data[i];
                        let j = subArray.length;
                        while (j--) {
                            buffer[--destPtr] = subArray[j];
                        }
                    }
                    assert(0 == destPtr);
                }
                else {
                    buffer = new this.type(this.data);
                }
                const spacing = this.data.length ? buffer.length / this.data.length : 0;
                assert(spacing % 1 == 0, `buffer ${this.name} elements not of consistent size, average size is ` + spacing);
                {
                    if (10000 <= buffer.length) {
                        this.maxValue = 0;
                    }
                    else {
                        this.maxValue = Math.max.apply(undefined, buffer);
                    }
                }
                assert([1, 2, 3, 4].includes(spacing));
                this.spacing = spacing;
                this.count = this.data.length;
            }
            gl$$1.bindBuffer(this.target, this.buffer);
            gl$$1.bufferData(this.target, buffer, usage);
            this.hasBeenCompiled = true;
        }
    }

    const { cos: cos$1, sin: sin$1, PI: PI$3, min: min$1, max: max$1 } = Math;
    const WGL$1 = WebGLRenderingContext;
    const tempM4_1 = new M4();
    const tempM4_2 = new M4();
    /**
     * @example new Mesh()
     *        .addIndexBuffer('TRIANGLES')
     *        .addIndexBuffer('LINES')
     *        .addVertexBuffer('normals', 'ts_Normal')
     */
    class Mesh$$1 extends Transformable {
        constructor() {
            super();
            this.hasBeenCompiled = false;
            this.vertexBuffers = {};
            this.indexBuffers = {};
            this.addVertexBuffer('vertices', 'ts_Vertex');
        }
        /**
         * Calculate area, volume and centroid of the mesh.
         *
         * The area is the sum of the areas of the triangles.
         *
         * For closed meshes, the volume is the contained volume. If the volume is inside-out, i.e. the face normals point
         * inwards, the returned value is negative. In general, this calculates the sum of the z-direction shadow volumes
         * of the triangles. The z-dir shadow volume is the cut-off prism with the triangle projected onto the XY plane as
         * the base face and the triangle itself as the top face.
         *
         * The centroid is the "mean point of all points inside the volume". If a uniform density is assumed, this is
         * equivalent to the center of gravity. In general, this calculates the weighted average of the centroids of all the
         * triangle shadow volumes.
         */
        calcVolume() {
            let totalVolumeX2 = 0, totalCentroidWithZX2 = V3.O, totalAreaX2 = 0;
            const triangles = this.TRIANGLES;
            const vertices = this.vertices;
            for (let i = 0; i < triangles.length; i += 3) {
                const ai = triangles[i + 0], bi = triangles[i + 1], ci = triangles[i + 2];
                const a = vertices[ai], b = vertices[bi], c = vertices[ci];
                const ab = b.minus(a), ac = c.minus(a);
                const normal = ab.cross(ac);
                //const centroidZ = (v0.z + v1.z + v2.z) / 3
                const faceCentroid = V3.add(a, b, c).div(3);
                //totalVolume += centroidZ * (area === v01.cross(v02).length() / 2) * v01.cross(v02).unit().z
                totalVolumeX2 += faceCentroid.z * normal.z;
                const faceAreaX2 = normal.length();
                totalAreaX2 += faceAreaX2;
                // NB: the shadow volume centroid does NOT have the same XY coordinates
                // as the face centroid.
                // calculate the weighted centroid of the shadow volume:
                // faceShadowCentroid = INTEGRATE [0; 1] (
                //   INTEGRATE [0; 1 - s] (
                //     normal.z *
                //     ((1 - s - t) a + s b + t c) *
                //     ((1 - s - t) a + s b + t c).z
                //   ) dt
                // ) ds
                // = (a (2 a.z + b.z + c.z) + b (a.z + 2 b.z + c.z) + c (a.z + b.z + 2 c.z)) / 24
                const faceShadowCentroid = V3.add(a.times(2 * a.z + b.z + c.z), b.times(a.z + 2 * b.z + c.z), c.times(a.z + b.z + 2 * c.z)).times(normal.z); // 1/24 factor is done at very end
                totalCentroidWithZX2 = totalCentroidWithZX2.plus(faceShadowCentroid);
            }
            // sumInPlaceTree adds negligible additional accuracy for XY sphere
            const volume = totalVolumeX2 / 2;
            return {
                volume,
                centroid: eq0(volume) ? V3.O : totalCentroidWithZX2.div(24 * volume).schur(new V3(1, 1, 0.5)),
                area: totalAreaX2 / 2,
            };
        }
        /**
         * Add a new vertex buffer with a list as a property called `name` on this object and map it to
         * the attribute called `attribute` in all shaders that draw this mesh.
         * @example new Mesh().addVertexBuffer('coords', 'ts_TexCoord')
         */
        addVertexBuffer(name, attribute) {
            assert(!this.vertexBuffers[attribute], 'Buffer ' + attribute + ' already exists.');
            //assert(!this[name])
            this.hasBeenCompiled = false;
            assert('string' == typeof name);
            assert('string' == typeof attribute);
            const buffer = (this.vertexBuffers[attribute] = new Buffer$$1(WGL$1.ARRAY_BUFFER, Float32Array));
            buffer.name = name;
            this[name] = [];
            return this;
        }
        /**
         * Add a new index buffer.
         * @example new Mesh().addIndexBuffer('TRIANGLES')
         * @example new Mesh().addIndexBuffer('LINES')
         */
        addIndexBuffer(name, type = WGL$1.UNSIGNED_SHORT) {
            this.hasBeenCompiled = false;
            const arrayType = WGL$1.UNSIGNED_SHORT == type ? Uint16Array : Uint32Array;
            const buffer = (this.indexBuffers[name] = new Buffer$$1(WGL$1.ELEMENT_ARRAY_BUFFER, arrayType));
            buffer.name = name;
            this[name] = [];
            return this;
        }
        concat(...others) {
            const result = new Mesh$$1();
            const allMeshes = [this].concat(others);
            Object.getOwnPropertyNames(this.vertexBuffers).forEach(attribute => {
                assert(others.every(other => !!other.vertexBuffers[attribute]));
                const bufferName = this.vertexBuffers[attribute].name;
                if ('ts_Vertex' !== attribute) {
                    result.addVertexBuffer(bufferName, attribute);
                }
                result[bufferName] = allMeshes.map(mesh => mesh[bufferName]).concatenated();
            });
            Object.getOwnPropertyNames(this.indexBuffers).forEach(name => {
                assert(others.every(other => !!other.indexBuffers[name]));
                result.addIndexBuffer(name, this.indexBuffers[name].bindSize);
                const newIndexBufferData = new Array(allMeshes.reduce((sum, mesh) => sum + mesh[name].length, 0));
                let ptr = 0;
                let startIndex = 0;
                for (const mesh of allMeshes) {
                    for (const index of mesh[name]) {
                        newIndexBufferData[ptr++] = startIndex + index;
                    }
                    startIndex += mesh.vertices.length;
                }
                result[name] = newIndexBufferData;
            });
            result.compile();
            return result;
        }
        /**
         * Upload all attached buffers to the GPU in preparation for rendering. This doesn't need to be called every
         * frame, only needs to be done when the data changes.
         *
         * Sets `this.hasBeenCompiled` to true.
         */
        compile(gl$$1 = currentGL$$1()) {
            // figure out shortest vertex buffer to make sure indexBuffers are in bounds
            let minVertexBufferLength = Infinity; // TODO, _minBufferName
            Object.getOwnPropertyNames(this.vertexBuffers).forEach(attribute => {
                const buffer = this.vertexBuffers[attribute];
                buffer.data = this[buffer.name];
                buffer.compile(undefined, gl$$1);
                if (this[buffer.name].length < minVertexBufferLength) {
                    // _minBufferName = attribute
                    minVertexBufferLength = this[buffer.name].length;
                }
            });
            for (const name in this.indexBuffers) {
                const buffer = this.indexBuffers[name];
                buffer.data = this[buffer.name];
                buffer.compile(undefined, gl$$1);
                // if (NLA_DEBUG && buffer.maxValue >= minVertexBufferLength) {
                // 	throw new Error(`max index value for buffer ${name}
                // 	is too large ${buffer.maxValue} min Vbuffer size: ${minVertexBufferLength} ${minBufferName}`)
                // }
            }
            this.hasBeenCompiled = true;
            return this;
        }
        static fromBinarySTL(stl) {
            return __awaiter$1(this, void 0, void 0, function* () {
                return new Promise((resolve, reject) => {
                    const mesh = new Mesh$$1().addVertexBuffer('normals', 'ts_Normal');
                    const fileReader = new FileReader();
                    fileReader.onerror = reject;
                    fileReader.onload = function (_progressEvent) {
                        const dataView = new DataView(this.result);
                        const HEADER_BYTE_SIZE = 80;
                        const triangleCount = dataView.getUint32(HEADER_BYTE_SIZE, true);
                        mesh.normals.length = triangleCount * 3;
                        mesh.vertices.length = triangleCount * 3;
                        let i = triangleCount * 3, bufferPtr = HEADER_BYTE_SIZE + 4;
                        function readV3() {
                            const x = dataView.getFloat32(bufferPtr, true);
                            bufferPtr += 4;
                            const y = dataView.getFloat32(bufferPtr, true);
                            bufferPtr += 4;
                            const z = dataView.getFloat32(bufferPtr, true);
                            bufferPtr += 4;
                            return new V3(x, y, z);
                        }
                        while (i) {
                            i -= 3;
                            const normal = readV3();
                            mesh.normals[i + 0] = normal;
                            mesh.normals[i + 1] = normal;
                            mesh.normals[i + 2] = normal;
                            mesh.vertices[i + 0] = readV3();
                            mesh.vertices[i + 1] = readV3();
                            mesh.vertices[i + 2] = readV3();
                            bufferPtr += 2;
                        }
                        resolve(mesh);
                    };
                    fileReader.readAsArrayBuffer(stl);
                });
            });
        }
        toBinarySTL() {
            if (!this.TRIANGLES)
                throw new Error('TRIANGLES must be defined.');
            const HEADER_BYTE_SIZE = 80, FLOAT_BYTE_SIZE = 4;
            const triangles = this.TRIANGLES;
            const triangleCount = triangles.length / 3;
            const buffer = new ArrayBuffer(HEADER_BYTE_SIZE + 4 + triangleCount * (4 * 3 * FLOAT_BYTE_SIZE + 2));
            const dataView = new DataView(buffer);
            dataView.setUint32(HEADER_BYTE_SIZE, triangleCount, true);
            let bufferPtr = HEADER_BYTE_SIZE + 4;
            let i = triangles.length;
            while (i) {
                i -= 3;
                const a = this.vertices[triangles[i]], b = this.vertices[triangles[i + 1]], c = this.vertices[triangles[i + 2]];
                const normal = V3.normalOnPoints(a, b, c);
                [normal, a, b, c].forEach(v => {
                    dataView.setFloat32(bufferPtr, v.x, true);
                    bufferPtr += 4;
                    dataView.setFloat32(bufferPtr, v.y, true);
                    bufferPtr += 4;
                    dataView.setFloat32(bufferPtr, v.z, true);
                    bufferPtr += 4;
                });
                // skip 2 bytes, already initalized to zero
                bufferPtr += 2;
            }
            assert(bufferPtr == buffer.byteLength, bufferPtr + ' ' + buffer.byteLength);
            return new Blob([buffer], { type: 'application/octet-stream' });
        }
        /**
         * Returns a new Mesh with transformed vertices.
         *
         * Transform all vertices by `matrix` and all normals by the inverse transpose of `matrix`.
         *
         * Index buffer data is referenced.
         */
        transform(m4) {
            const mesh = new Mesh$$1();
            mesh.vertices = m4.transformedPoints(this.vertices);
            if (this.normals) {
                mesh.addVertexBuffer('normals', 'ts_Normal');
                const invTrans = m4
                    .as3x3(tempM4_1)
                    .inversed(tempM4_2)
                    .transposed(tempM4_1);
                mesh.normals = this.normals.map(n => invTrans.transformVector(n).unit());
                // mesh.normals.forEach(n => assert(n.hasLength(1)))
            }
            for (const name in this.indexBuffers) {
                mesh.addIndexBuffer(name);
                mesh[name] = this[name];
            }
            for (const attribute in this.vertexBuffers) {
                if ('ts_Vertex' !== attribute && 'ts_Normal' !== attribute) {
                    const name = this.vertexBuffers[attribute].name;
                    mesh.addVertexBuffer(name, attribute);
                    mesh[name] = this[name];
                }
            }
            // this.hasBeenCompiled && mesh.compile()
            return mesh;
        }
        /**
         * Computes a new normal for each vertex from the average normal of the neighboring triangles. This means
         * adjacent triangles must share vertices for the resulting normals to be smooth.
         */
        computeNormalsFromFlatTriangles() {
            if (!this.normals)
                this.addVertexBuffer('normals', 'ts_Normal');
            // tslint:disable:no-string-literal
            //this.vertexBuffers['ts_Normal'].data = arrayFromFunction(this.vertices.length, i => V3.O)
            const TRIANGLES = this.TRIANGLES, vertices = this.vertices, normals = this.normals;
            normals.length = vertices.length;
            for (let i = 0; i < TRIANGLES.length; i += 3) {
                const ai = TRIANGLES[i], bi = TRIANGLES[i + 1], ci = TRIANGLES[i + 2];
                const a = vertices[ai];
                const b = vertices[bi];
                const c = vertices[ci];
                const normal = b
                    .minus(a)
                    .cross(c.minus(a))
                    .unit();
                normals[ai] = normals[ai].plus(normal);
                normals[bi] = normals[bi].plus(normal);
                normals[ci] = normals[ci].plus(normal);
            }
            for (let i = 0; i < vertices.length; i++) {
                normals[i] = normals[i].unit();
            }
            this.hasBeenCompiled = false;
            return this;
        }
        computeWireframeFromFlatTriangles(indexBufferName = 'LINES') {
            if (!this.TRIANGLES)
                throw new Error('TRIANGLES must be defined.');
            const canonEdges = new Set();
            function canonEdge(i0, i1) {
                const iMin = min$1(i0, i1), iMax = max$1(i0, i1);
                return (iMin << 16) | iMax;
            }
            // function uncanonEdge(key) {
            // 	return [key >> 16, key & 0xffff]
            // }
            const t = this.TRIANGLES;
            for (let i = 0; i < t.length; i += 3) {
                canonEdges.add(canonEdge(t[i + 0], t[i + 1]));
                canonEdges.add(canonEdge(t[i + 1], t[i + 2]));
                canonEdges.add(canonEdge(t[i + 2], t[i + 0]));
            }
            const data = indexBufferName;
            if (!this[data])
                this.addIndexBuffer(indexBufferName);
            //this.LINES = new Array(canonEdges.size)
            canonEdges.forEach(val => this[data].push(val >> 16, val & 0xffff));
            this.hasBeenCompiled = false;
            return this;
        }
        computeWireframeFromFlatTrianglesClosedMesh(indexBufferName = 'LINES') {
            if (!this.TRIANGLES)
                throw new Error('TRIANGLES must be defined.');
            if (!this.LINES)
                this.addIndexBuffer('LINES');
            const tris = this.TRIANGLES;
            if (!this[indexBufferName])
                this.addIndexBuffer(indexBufferName);
            const lines = this[indexBufferName];
            for (let i = 0; i < tris.length; i += 3) {
                if (tris[i + 0] < tris[i + 1])
                    lines.push(tris[i + 0], tris[i + 1]);
                if (tris[i + 1] < tris[i + 2])
                    lines.push(tris[i + 1], tris[i + 2]);
                if (tris[i + 2] < tris[i + 0])
                    lines.push(tris[i + 2], tris[i + 0]);
            }
            this.hasBeenCompiled = false;
            return this;
        }
        computeNormalLines(length = 1, indexBufferName = 'LINES') {
            if (!this.normals) {
                throw new Error('normals must be defined.');
            }
            const vs = this.vertices, si = this.vertices.length;
            if (!this[indexBufferName])
                this.addIndexBuffer(indexBufferName);
            for (let i = 0; i < this.normals.length; i++) {
                vs[si + i] = vs[i].plus(this.normals[i].toLength(length));
                this[indexBufferName].push(si + i, i);
            }
            this.hasBeenCompiled = false;
            return this;
        }
        getAABB() {
            return new AABB().addPoints(this.vertices);
        }
        getBoundingSphere() {
            const sphere = { center: this.getAABB().getCenter(), radius: 0 };
            for (let i = 0; i < this.vertices.length; i++) {
                sphere.radius = Math.max(sphere.radius, this.vertices[i].minus(sphere.center).length());
            }
            return sphere;
        }
        /**
         * Generates a square mesh in the XY plane.
         * Texture coordinates (buffer "coords") are set to go from 0 to 1 in either direction.
         *
         * @param options foo
         * @param options.detail Defaults to 1
         * @param options.detailX Defaults to options.detail. Number of subdivisions in X direction.
         * @param options.detailY Defaults to options.detail. Number of subdivisions in Y direction.j
         * @param options.width defaults to 1
         * @param options.height defaults to 1
         * @param options.startX defaults to 0
         * @param options.startY defaults to 0
         */
        static plane(options = {}) {
            const detailX = options.detailX || options.detail || 1;
            const detailY = options.detailY || options.detail || 1;
            const startX = options.startX || 0;
            const startY = options.startY || 0;
            const width = options.width || 1;
            const height = options.height || 1;
            const mesh = new Mesh$$1()
                .addIndexBuffer('LINES')
                .addIndexBuffer('TRIANGLES')
                .addVertexBuffer('normals', 'ts_Normal')
                .addVertexBuffer('coords', 'ts_TexCoord');
            for (let j = 0; j <= detailY; j++) {
                const t = j / detailY;
                for (let i = 0; i <= detailX; i++) {
                    const s = i / detailX;
                    mesh.vertices.push(new V3(startX + s * width, startY + t * height, 0));
                    mesh.coords.push([s, t]);
                    mesh.normals.push(V3.Z);
                    if (i < detailX && j < detailY) {
                        const offset = i + j * (detailX + 1);
                        mesh.TRIANGLES.push(offset, offset + detailX + 1, offset + 1, offset + detailX + 1, offset + detailX + 2, offset + 1);
                    }
                }
            }
            for (let i = 0; i < detailX; i++) {
                mesh.LINES.push(i, i + 1);
                mesh.LINES.push((detailX + 1) * detailY + i, (detailX + 1) * detailY + i + 1);
            }
            for (let j = 0; j < detailY; j++) {
                mesh.LINES.push(detailX * j, detailX * (j + 1) + 1);
                mesh.LINES.push(detailX * (j + 1), detailX * (j + 2) + 1);
            }
            mesh.compile();
            return mesh;
        }
        static box(xDetail = 1, yDetail = 1, zDetail = 1) {
            const mesh = new Mesh$$1()
                .addIndexBuffer('LINES')
                .addIndexBuffer('TRIANGLES')
                .addVertexBuffer('normals', 'ts_Normal');
            mesh.vertices.length = mesh.normals.length =
                2 * ((xDetail + 1) * (yDetail + 1) + (yDetail + 1) * (zDetail + 1) + (zDetail + 1) * (xDetail + 1));
            mesh.TRIANGLES.length = 4 * (xDetail * yDetail + yDetail * zDetail + zDetail * xDetail);
            let vi = 0, ti = 0;
            function x(detailX, detailY, m, startX = 0, width = 1, startY = 0, height = 1) {
                const normal = m.transformVector(V3.Z);
                for (let j = 0; j <= detailY; j++) {
                    const t = j / detailY;
                    for (let i = 0; i <= detailX; i++) {
                        const s = i / detailX;
                        mesh.vertices[vi] = m.transformPoint(new V3(startX + s * width, startY + t * height, 0));
                        mesh.normals[vi] = normal;
                        vi++;
                        if (i < detailX && j < detailY) {
                            const offset = i + j * (detailX + 1);
                            mesh.TRIANGLES[ti++] = offset;
                            mesh.TRIANGLES[ti++] = offset + detailX + 1;
                            mesh.TRIANGLES[ti++] = offset + 1;
                            mesh.TRIANGLES[ti++] = offset + detailX + 1;
                            mesh.TRIANGLES[ti++] = offset + detailX + 2;
                            mesh.TRIANGLES[ti++] = offset + 1;
                        }
                    }
                }
            }
            x(yDetail, xDetail, M4.forSys(V3.Y, V3.X, V3.Z.negated()));
            x(xDetail, yDetail, M4.translate(V3.Z));
            x(zDetail, yDetail, M4.forSys(V3.Z, V3.Y, V3.X.negated()));
            x(yDetail, zDetail, M4.forSys(V3.Y, V3.Z, V3.X, V3.X));
            x(xDetail, zDetail, M4.forSys(V3.X, V3.Z, V3.Y.negated()));
            x(zDetail, xDetail, M4.forSys(V3.Z, V3.X, V3.Y, V3.Y));
            return mesh;
        }
        /**
         * Generates a unit cube (1x1x1) starting at the origin and extending into the (+ + +) octant.
         * I.e. box from V3.O to V3(1,1,1)
         * Creates line (only cube edges), triangle, vertex and normal1 buffers.
         */
        static cube() {
            const mesh = new Mesh$$1()
                .addVertexBuffer('normals', 'ts_Normal')
                .addIndexBuffer('TRIANGLES')
                .addIndexBuffer('LINES');
            // basically indexes for faces of the cube. vertices each need to be added 3 times,
            // as they have different normals depending on the face being rendered
            // prettier-ignore
            const VERTEX_CORNERS = [
                0, 1, 2, 3,
                4, 5, 6, 7,
                0, 4, 1, 5,
                2, 6, 3, 7,
                2, 6, 0, 4,
                3, 7, 1, 5,
            ];
            mesh.vertices = VERTEX_CORNERS.map(i => Mesh$$1.UNIT_CUBE_CORNERS[i]);
            mesh.normals = [V3.X.negated(), V3.X, V3.Y.negated(), V3.Y, V3.Z.negated(), V3.Z].flatMap(v => [v, v, v, v]);
            for (let i = 0; i < 6 * 4; i += 4) {
                pushQuad$$1(mesh.TRIANGLES, 0 != i % 8, VERTEX_CORNERS[i], VERTEX_CORNERS[i + 1], VERTEX_CORNERS[i + 2], VERTEX_CORNERS[i + 3]);
            }
            // indexes of LINES relative to UNIT_CUBE_CORNERS. Mapped to VERTEX_CORNERS.indexOf
            // so they make sense in the context of the mesh
            // prettier-ignore
            mesh.LINES = [
                0, 1,
                0, 2,
                1, 3,
                2, 3,
                0, 4,
                1, 5,
                2, 6,
                3, 7,
                4, 5,
                4, 6,
                5, 7,
                6, 7,
            ].map(i => VERTEX_CORNERS.indexOf(i));
            mesh.compile();
            return mesh;
        }
        static isocahedron() {
            return Mesh$$1.sphere(0);
        }
        static sphere2(latitudes, longitudes) {
            const baseVertices = arrayFromFunction(latitudes, i => {
                const angle = (i / (latitudes - 1)) * PI$3 - PI$3 / 2;
                return new V3(0, cos$1(angle), sin$1(angle));
            });
            return Mesh$$1.rotation(baseVertices, { anchor: V3.O, dir1: V3.Z }, 2 * PI$3, longitudes, true, baseVertices);
        }
        /**
         * Returns a sphere mesh with radius 1 created by subdividing the faces of a isocahedron (20-sided) recursively
         * The sphere is positioned at the origin
         * @param subdivisions
         *      How many recursive divisions to do. A subdivision divides a triangle into 4,
         *      so the total number of triangles is 20 * 4^subdivisions
         * @returns
         *      Contains vertex and normal1 buffers and index buffers for triangles and LINES
         */
        static sphere(subdivisions = 3) {
            const golden = (1 + Math.sqrt(5)) / 2, u = new V3(1, golden, 0).unit(), s = u.x, t = u.y;
            // base vertices of isocahedron
            const vertices = [
                new V3(-s, t, 0),
                new V3(s, t, 0),
                new V3(-s, -t, 0),
                new V3(s, -t, 0),
                new V3(0, -s, t),
                new V3(0, s, t),
                new V3(0, -s, -t),
                new V3(0, s, -t),
                new V3(t, 0, -s),
                new V3(t, 0, s),
                new V3(-t, 0, -s),
                new V3(-t, 0, s),
            ];
            // base triangles of isocahedron
            // prettier-ignore
            const triangles = [
                // 5 faces around point 0
                0, 11, 5,
                0, 5, 1,
                0, 1, 7,
                0, 7, 10,
                0, 10, 11,
                // 5 adjacent faces
                1, 5, 9,
                5, 11, 4,
                11, 10, 2,
                10, 7, 6,
                7, 1, 8,
                // 5 faces around point 3
                3, 9, 4,
                3, 4, 2,
                3, 2, 6,
                3, 6, 8,
                3, 8, 9,
                // 5 adjacent faces
                4, 9, 5,
                2, 4, 11,
                6, 2, 10,
                8, 6, 7,
                9, 8, 1,
            ];
            /**
             * Tesselates triangle a b c
             * a b c must already be in vertices with the indexes ia ib ic
             * res is the number of subdivisions to do. 0 just results in triangle and line indexes being added to the
             * respective buffers.
             */
            function tesselateRecursively(a, b, c, res, vertices, triangles, ia, ib, ic, lines) {
                if (0 == res) {
                    triangles.push(ia, ib, ic);
                    if (ia < ib)
                        lines.push(ia, ib);
                    if (ib < ic)
                        lines.push(ib, ic);
                    if (ic < ia)
                        lines.push(ic, ia);
                }
                else {
                    // subdivide the triangle abc into 4 by adding a vertex (with the correct distance from the origin)
                    // between each segment ab, bc and cd, then calling the function recursively
                    const abMid1 = a.plus(b).toLength(1), bcMid1 = b.plus(c).toLength(1), caMid1 = c.plus(a).toLength(1);
                    // indexes of new vertices:
                    const iabm = vertices.length, ibcm = iabm + 1, icam = iabm + 2;
                    vertices.push(abMid1, bcMid1, caMid1);
                    tesselateRecursively(abMid1, bcMid1, caMid1, res - 1, vertices, triangles, iabm, ibcm, icam, lines);
                    tesselateRecursively(a, abMid1, caMid1, res - 1, vertices, triangles, ia, iabm, icam, lines);
                    tesselateRecursively(b, bcMid1, abMid1, res - 1, vertices, triangles, ib, ibcm, iabm, lines);
                    tesselateRecursively(c, caMid1, bcMid1, res - 1, vertices, triangles, ic, icam, ibcm, lines);
                }
            }
            const mesh = new Mesh$$1()
                .addVertexBuffer('normals', 'ts_Normal')
                .addIndexBuffer('TRIANGLES')
                .addIndexBuffer('LINES');
            mesh.vertices.push(...vertices);
            subdivisions = undefined == subdivisions ? 4 : subdivisions;
            for (let i = 0; i < 20; i++) {
                const [ia, ic, ib] = triangles.slice(i * 3, i * 3 + 3);
                tesselateRecursively(vertices[ia], vertices[ic], vertices[ib], subdivisions, mesh.vertices, mesh.TRIANGLES, ia, ic, ib, mesh.LINES);
            }
            mesh.normals = mesh.vertices;
            mesh.compile();
            return mesh;
        }
        static aabb(aabb) {
            const matrix = M4.product(M4.translate(aabb.min), M4.scale(aabb.size().max(new V3(NLA_PRECISION, NLA_PRECISION, NLA_PRECISION))));
            const mesh = Mesh$$1.cube().transform(matrix);
            // mesh.vertices = aabb.corners()
            mesh.computeNormalLines(20);
            mesh.compile();
            return mesh;
        }
        static offsetVertices(vertices, offset, close, normals) {
            assertVectors.apply(undefined, vertices);
            assertVectors(offset);
            const mesh = new Mesh$$1().addIndexBuffer('TRIANGLES').addVertexBuffer('coords', 'ts_TexCoord');
            normals && mesh.addVertexBuffer('normals', 'ts_Normal');
            mesh.vertices = vertices.concat(vertices.map(v => v.plus(offset)));
            const vl = vertices.length;
            mesh.coords = arrayFromFunction(vl * 2, (i) => [(i % vl) / vl, (i / vl) | 0]);
            const triangles = mesh.TRIANGLES;
            for (let i = 0; i < vertices.length - 1; i++) {
                pushQuad$$1(triangles, false, i, i + 1, vertices.length + i, vertices.length + i + 1);
            }
            if (close) {
                pushQuad$$1(triangles, false, vertices.length - 1, 0, vertices.length * 2 - 1, vertices.length);
            }
            if (normals) {
                mesh.normals = normals.concat(normals);
            }
            mesh.compile();
            return mesh;
        }
        // Creates a new $Mesh by rotating $vertices by $totalRads around $lineAxis (according to the right-hand
        // rule). $steps is the number of steps to take. $close is whether the vertices of the first and last step
        // should be connected by triangles. If $normals is set (pass an array of V3s of the same length as $vertices),
        // these will also be rotated and correctly added to the mesh.
        // @example const precious = Mesh.rotation([V(10, 0, -2), V(10, 0, 2), V(11, 0, 2), V(11, 0, -2)], , L3.Z, 512)
        static rotation(vertices, lineAxis, totalRads, steps, close = true, normals) {
            const mesh = new Mesh$$1().addIndexBuffer('TRIANGLES');
            normals && mesh.addVertexBuffer('normals', 'ts_Normal');
            const vc = vertices.length, vTotal = vc * steps;
            const rotMat = new M4();
            const triangles = mesh.TRIANGLES;
            for (let i = 0; i < steps; i++) {
                // add triangles
                const rads = (totalRads / steps) * i;
                M4.rotateLine(lineAxis.anchor, lineAxis.dir1, rads, rotMat);
                mesh.vertices.push(...rotMat.transformedPoints(vertices));
                normals && mesh.normals.push(...rotMat.transformedVectors(normals));
                if (close || i !== steps - 1) {
                    for (let j = 0; j < vc - 1; j++) {
                        pushQuad$$1(triangles, false, i * vc + j + 1, i * vc + j, ((i + 1) * vc + j + 1) % vTotal, ((i + 1) * vc + j) % vTotal);
                    }
                }
            }
            mesh.compile();
            return mesh;
        }
        static parametric(pF, pN, sMin, sMax, tMin, tMax, sRes, tRes) {
            const mesh = new Mesh$$1().addIndexBuffer('TRIANGLES').addVertexBuffer('normals', 'ts_Normal');
            for (let si = 0; si <= sRes; si++) {
                const s = lerp(sMin, sMax, si / sRes);
                for (let ti = 0; ti <= tRes; ti++) {
                    const t = lerp(tMin, tMax, ti / tRes);
                    mesh.vertices.push(pF(s, t));
                    pN && mesh.normals.push(pN(s, t));
                    if (ti < tRes && si < sRes) {
                        const offset = ti + si * (tRes + 1);
                        pushQuad$$1(mesh.TRIANGLES, false, offset, offset + tRes + 1, offset + 1, offset + tRes + 2);
                    }
                }
            }
            return mesh;
        }
        static load(json) {
            const mesh = new Mesh$$1();
            if (Array.isArray(json.vertices[0])) {
                mesh.vertices = json.vertices.map(x => V$2(x));
            }
            else {
                throw new Error();
            }
            if (json.triangles) {
                mesh.addIndexBuffer('TRIANGLES');
                mesh.TRIANGLES = json.triangles;
            }
            if (json.normals) {
                mesh.addVertexBuffer('normals', 'ts_Normal');
                mesh.normals = json.normals;
            }
            mesh.compile();
            return mesh;
        }
        toJSON() {
            return {
                vertices: this.vertices.map(x => x.toArray()),
                TRIANGLES: this.TRIANGLES,
            };
        }
    }
    // unique corners of a unit cube. Used by Mesh.cube to generate a cube mesh.
    Mesh$$1.UNIT_CUBE_CORNERS = [
        V3.O,
        new V3(0, 0, 1),
        new V3(0, 1, 0),
        new V3(0, 1, 1),
        new V3(1, 0, 0),
        new V3(1, 0, 1),
        new V3(1, 1, 0),
        V3.XYZ,
    ];

    /* tslint:disable:no-string-literal */
    const WGL$2 = WebGLRenderingContext;
    /**
     * These are all the draw modes usable in OpenGL ES
     */
    const DRAW_MODE_NAMES = {
        [WGL$2.POINTS]: 'POINTS',
        [WGL$2.LINES]: 'LINES',
        [WGL$2.LINE_STRIP]: 'LINE_STRIP',
        [WGL$2.LINE_LOOP]: 'LINE_LOOP',
        [WGL$2.TRIANGLES]: 'TRIANGLES',
        [WGL$2.TRIANGLE_STRIP]: 'TRIANGLE_STRIP',
        [WGL$2.TRIANGLE_FAN]: 'TRIANGLE_FAN',
    };
    const DRAW_MODE_CHECKS = {
        [WGL$2.POINTS]: _ => true,
        [WGL$2.LINES]: x => 0 == x % 2,
        [WGL$2.LINE_STRIP]: x => x > 2,
        [WGL$2.LINE_LOOP]: x => x > 2,
        [WGL$2.TRIANGLES]: x => 0 == x % 3,
        [WGL$2.TRIANGLE_STRIP]: x => x > 3,
        [WGL$2.TRIANGLE_FAN]: x => x > 3,
    };
    function isFloatArray(obj) {
        return (Float32Array == obj.constructor ||
            Float64Array == obj.constructor ||
            (Array.isArray(obj) && obj.every(x => 'number' == typeof x)));
    }
    function isIntArray(x) {
        if ([Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array].some(y => x instanceof y)) {
            return true;
        }
        return ((x instanceof Float32Array || x instanceof Float64Array || Array.isArray(x)) &&
            x.every(x => Number.isInteger(x)));
    }
    //const x:UniformTypes = undefined as 'FLOAT_VEC4' | 'FLOAT_VEC3'
    class Shader$$1 {
        /**
         * Provides a convenient wrapper for WebGL shaders. A few uniforms and attributes,
         * prefixed with `gl_`, are automatically added to all shader sources to make
         * simple shaders easier to write.
         * Headers for the following variables are automatically prepended to the passed source. The correct variables
         * are also automatically passed to the shader when drawing.
         *
         * For vertex and fragment shaders:
         uniform mat3 ts_NormalMatrix;
         uniform mat4 ts_ModelViewMatrix;
         uniform mat4 ts_ProjectionMatrix;
         uniform mat4 ts_ModelViewProjectionMatrix;
         uniform mat4 ts_ModelViewMatrixInverse;
         uniform mat4 ts_ProjectionMatrixInverse;
         uniform mat4 ts_ModelViewProjectionMatrixInverse;
         *
         *
         * Example usage:
         *
         *  const shader = new GL.Shader(
         *      `void main() { gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex; }`,
         *      `uniform vec4 color; void main() { gl_FragColor = color; }`)
         *
         *  shader.uniforms({ color: [1, 0, 0, 1] }).draw(mesh)
         *
         * Compiles a shader program using the provided vertex and fragment shaders.
         */
        constructor(vertexSource, fragmentSource, gl$$1 = currentGL$$1()) {
            this.projectionMatrixVersion = -1;
            this.modelViewMatrixVersion = -1;
            // const versionRegex = /^(?:\s+|\/\/[\s\S]*?[\r\n]+|\/\*[\s\S]*?\*\/)+(#version\s+(\d+)\s+es)/
            // Headers are prepended to the sources to provide some automatic functionality.
            const header = `
		uniform mat3 ts_NormalMatrix;
		uniform mat4 ts_ModelViewMatrix;
		uniform mat4 ts_ProjectionMatrix;
		uniform mat4 ts_ModelViewProjectionMatrix;
		uniform mat4 ts_ModelViewMatrixInverse;
		uniform mat4 ts_ProjectionMatrixInverse;
		uniform mat4 ts_ModelViewProjectionMatrixInverse;
	`;
            const matrixNames = header.match(/\bts_\w+/g);
            // Compile and link errors are thrown as strings.
            function compileSource(type, source) {
                const shader = gl$$1.createShader(type);
                gl$$1.shaderSource(shader, source);
                gl$$1.compileShader(shader);
                if (!gl$$1.getShaderParameter(shader, gl$$1.COMPILE_STATUS)) {
                    throw new Error('compile error: ' + gl$$1.getShaderInfoLog(shader));
                }
                return shader;
            }
            this.gl = gl$$1;
            this.program = gl$$1.createProgram();
            gl$$1.attachShader(this.program, compileSource(gl$$1.VERTEX_SHADER, vertexSource));
            gl$$1.attachShader(this.program, compileSource(gl$$1.FRAGMENT_SHADER, fragmentSource));
            gl$$1.linkProgram(this.program);
            if (!gl$$1.getProgramParameter(this.program, gl$$1.LINK_STATUS)) {
                throw new Error('link error: ' + gl$$1.getProgramInfoLog(this.program));
            }
            this.attributeLocations = {};
            this.uniformLocations = {};
            this.constantAttributes = {};
            // Check for the use of built-in matrices that require expensive matrix
            // multiplications to compute, and record these in `activeMatrices`.
            this.activeMatrices = {};
            matrixNames &&
                matrixNames.forEach(name => {
                    if (gl$$1.getUniformLocation(this.program, name)) {
                        this.activeMatrices[name] = true;
                    }
                });
            this.uniformInfos = {};
            for (let i = gl$$1.getProgramParameter(this.program, gl$$1.ACTIVE_UNIFORMS); i-- > 0;) {
                // see https://www.khronos.org/registry/OpenGL-Refpages/es2.0/xhtml/glGetActiveUniform.xml
                // this.program has already been checked
                // i is in bounds
                const info = gl$$1.getActiveUniform(this.program, i);
                this.uniformInfos[info.name] = info;
            }
        }
        static create(vertexSource, fragmentSource, gl$$1) {
            return new Shader$$1(vertexSource, fragmentSource, gl$$1);
        }
        /**
         * Set a uniform for each property of `uniforms`. The correct `viewerGL.uniform*()` method is inferred from the
         * value types and from the stored uniform sampler flags.
         */
        uniforms(uniforms) {
            const gl$$1 = this.gl;
            gl$$1.useProgram(this.program);
            for (const name in uniforms) {
                const location = this.uniformLocations[name] || gl$$1.getUniformLocation(this.program, name);
                // !location && console.warn(name + ' uniform is not used in shader')
                if (!location)
                    continue;
                this.uniformLocations[name] = location;
                let value = uniforms[name];
                const info = this.uniformInfos[name];
                {
                    // TODO: better errors
                    if (gl$$1.SAMPLER_2D == info.type || gl$$1.SAMPLER_CUBE == info.type || gl$$1.INT == info.type) {
                        if (1 == info.size) {
                            assert(Number.isInteger(value));
                        }
                        else {
                            assert(isIntArray(value) && value.length == info.size, 'value must be int array if info.size != 1');
                        }
                    }
                    assert(gl$$1.FLOAT != info.type || ((1 == info.size && 'number' === typeof value) || isFloatArray(value)));
                    assert(gl$$1.FLOAT_VEC3 != info.type ||
                        ((1 == info.size && value instanceof V3) ||
                            (Array.isArray(value) && info.size == value.length && assertVectors(...value))));
                    assert(gl$$1.FLOAT_VEC4 != info.type || 1 != info.size || (isFloatArray(value) && value.length == 4));
                    assert(gl$$1.FLOAT_MAT4 != info.type || value instanceof M4, () => value.toSource());
                    assert(gl$$1.FLOAT_MAT3 != info.type || value.length == 9 || value instanceof M4);
                }
                if (value instanceof V3) {
                    value = value.toArray();
                }
                if (gl$$1.FLOAT_VEC4 == info.type && info.size != 1) {
                    if (value instanceof Float32Array || value instanceof Float64Array) {
                        gl$$1.uniform4fv(location, value instanceof Float32Array ? value : Float32Array.from(value));
                    }
                    else {
                        gl$$1.uniform4fv(location, value.concatenated());
                    }
                }
                else if (gl$$1.FLOAT == info.type && info.size != 1) {
                    gl$$1.uniform1fv(location, value);
                }
                else if (gl$$1.FLOAT_VEC3 == info.type && info.size != 1) {
                    gl$$1.uniform3fv(location, V3.pack(value));
                }
                else if (value.length) {
                    switch (value.length) {
                        case 1:
                            gl$$1.uniform1fv(location, value);
                            break;
                        case 2:
                            gl$$1.uniform2fv(location, value);
                            break;
                        case 3:
                            gl$$1.uniform3fv(location, value);
                            break;
                        case 4:
                            gl$$1.uniform4fv(location, value);
                            break;
                        // Matrices are automatically transposed, since WebGL uses column-major
                        // indices instead of row-major indices.
                        case 9:
                            // prettier-ignore
                            gl$$1.uniformMatrix3fv(location, false, new Float32Array([
                                value[0], value[3], value[6],
                                value[1], value[4], value[7],
                                value[2], value[5], value[8],
                            ]));
                            break;
                        case 16:
                            // prettier-ignore
                            gl$$1.uniformMatrix4fv(location, false, new Float32Array([
                                value[0], value[4], value[8], value[12],
                                value[1], value[5], value[9], value[13],
                                value[2], value[6], value[10], value[14],
                                value[3], value[7], value[11], value[15],
                            ]));
                            break;
                        default:
                            throw new Error('don\'t know how to load uniform "' + name + '" of length ' + value.length);
                    }
                }
                else if ('number' == typeof value) {
                    if (gl$$1.SAMPLER_2D == info.type || gl$$1.SAMPLER_CUBE == info.type || gl$$1.INT == info.type) {
                        gl$$1.uniform1i(location, value);
                    }
                    else {
                        gl$$1.uniform1f(location, value);
                    }
                }
                else if ('boolean' == typeof value) {
                    gl$$1.uniform1i(location, +value);
                }
                else if (value instanceof M4) {
                    const m = value.m;
                    if (gl$$1.FLOAT_MAT4 == info.type) {
                        // prettier-ignore
                        gl$$1.uniformMatrix4fv(location, false, [
                            m[0], m[4], m[8], m[12],
                            m[1], m[5], m[9], m[13],
                            m[2], m[6], m[10], m[14],
                            m[3], m[7], m[11], m[15]
                        ]);
                    }
                    else if (gl$$1.FLOAT_MAT3 == info.type) {
                        // prettier-ignore
                        gl$$1.uniformMatrix3fv(location, false, [
                            m[0], m[4], m[8],
                            m[1], m[5], m[9],
                            m[2], m[6], m[10]
                        ]);
                    }
                    else if (gl$$1.FLOAT_MAT2 == info.type) {
                        // prettier-ignore
                        gl$$1.uniformMatrix2fv(location, false, new Float32Array([
                            m[0], m[4],
                            m[1], m[5]
                        ]));
                    }
                    else {
                        throw new Error(`Can't assign M4 to ${info.type}`);
                    }
                }
                else {
                    throw new Error('attempted to set uniform "' + name + '" to invalid value ' + value);
                }
            }
            return this;
        }
        attributes(attributes) {
            const gl$$1 = this.gl;
            gl$$1.useProgram(this.program);
            for (const name in attributes) {
                const location = this.attributeLocations[name] || gl$$1.getAttribLocation(this.program, name);
                if (location == -1) {
                    if (!name.startsWith('ts_')) {
                        console.warn(`Vertex buffer ${name} was not bound because the attribute is not active.`);
                    }
                    continue;
                }
                this.attributeLocations[name] = location;
                gl$$1.disableVertexAttribArray(location);
                let value = attributes[name];
                if (value instanceof V3) {
                    // TODO: figure out the types here...
                    value = value.toArray();
                }
                if ('number' === typeof value) {
                    gl$$1.vertexAttrib1f(location, value);
                }
                else {
                    gl$$1.vertexAttrib4fv(location, value);
                    // switch ((value as number[]).length) {
                    // 	case 1:
                    // 		gl.vertexAttrib1fv(location, value as number[])
                    // 		break
                    // 	case 2:
                    // 		gl.vertexAttrib2fv(location, value as number[])
                    // 		break
                    // 	case 3:
                    // 		gl.vertexAttrib3fv(location, value as number[])
                    // 		break
                    // 	case 4:
                    // 		break
                    // }
                }
                this.constantAttributes[name] = true;
            }
            return this;
        }
        /**
         * Sets all uniform matrix attributes, binds all relevant buffers, and draws the mesh geometry as indexed
         * triangles or indexed LINES. Set `mode` to `gl.LINES` (and either add indices to `LINES` or call
         * `computeWireframe()`) to draw the mesh in wireframe.
         *
         * @param mesh
         * @param mode Defaults to 'TRIANGLES'. Must be passed as string so the correct index buffer can be
         *     automatically drawn.
         * @param start int
         * @param count int
         */
        draw(mesh, mode = WGL$2.TRIANGLES, start, count) {
            assert(mesh.hasBeenCompiled, 'mesh.hasBeenCompiled');
            assert(undefined != DRAW_MODE_NAMES[mode]);
            const modeName = DRAW_MODE_NAMES[mode];
            // assert(mesh.indexBuffers[modeStr], `mesh.indexBuffers[${modeStr}] undefined`)
            return this.drawBuffers(mesh.vertexBuffers, mesh.indexBuffers[modeName], mode, start, count);
        }
        /**
         * Sets all uniform matrix attributes, binds all relevant buffers, and draws the
         * indexed mesh geometry. The `vertexBuffers` argument is a map from attribute
         * names to `Buffer` objects of type `WGL.ARRAY_BUFFER`, `indexBuffer` is a `Buffer`
         * object of type `WGL.ELEMENT_ARRAY_BUFFER`, and `mode` is a WebGL primitive mode
         * like `WGL.TRIANGLES` or `WGL.LINES`. This method automatically creates and caches
         * vertex attribute pointers for attributes as needed.
         */
        drawBuffers(vertexBuffers, indexBuffer, mode = WGL$2.TRIANGLES, start = 0, count) {
            const gl$$1 = this.gl;
            assert(undefined != DRAW_MODE_NAMES[mode]);
            assertf(() => 1 <= Object.keys(vertexBuffers).length);
            Object.keys(vertexBuffers).forEach(key => assertInst(Buffer$$1, vertexBuffers[key]));
            // Only varruct up the built-in matrices that are active in the shader
            const on = this.activeMatrices;
            const modelViewMatrixInverse = (on['ts_ModelViewMatrixInverse'] || on['ts_NormalMatrix']) &&
                //&& this.modelViewMatrixVersion != gl.modelViewMatrixVersion
                gl$$1.modelViewMatrix.inversed();
            const projectionMatrixInverse = on['ts_ProjectionMatrixInverse'] &&
                //&& this.projectionMatrixVersion != gl.projectionMatrixVersion
                gl$$1.projectionMatrix.inversed();
            const modelViewProjectionMatrix = (on['ts_ModelViewProjectionMatrix'] || on['ts_ModelViewProjectionMatrixInverse']) &&
                //&& (this.projectionMatrixVersion != gl.projectionMatrixVersion || this.modelViewMatrixVersion !=
                // gl.modelViewMatrixVersion)
                gl$$1.projectionMatrix.times(gl$$1.modelViewMatrix);
            const uni = {}; // Uniform Matrices
            on['ts_ModelViewMatrix'] &&
                this.modelViewMatrixVersion != gl$$1.modelViewMatrixVersion &&
                (uni['ts_ModelViewMatrix'] = gl$$1.modelViewMatrix);
            on['ts_ModelViewMatrixInverse'] && (uni['ts_ModelViewMatrixInverse'] = modelViewMatrixInverse);
            on['ts_ProjectionMatrix'] &&
                this.projectionMatrixVersion != gl$$1.projectionMatrixVersion &&
                (uni['ts_ProjectionMatrix'] = gl$$1.projectionMatrix);
            projectionMatrixInverse && (uni['ts_ProjectionMatrixInverse'] = projectionMatrixInverse);
            modelViewProjectionMatrix && (uni['ts_ModelViewProjectionMatrix'] = modelViewProjectionMatrix);
            modelViewProjectionMatrix &&
                on['ts_ModelViewProjectionMatrixInverse'] &&
                (uni['ts_ModelViewProjectionMatrixInverse'] = modelViewProjectionMatrix.inversed());
            on['ts_NormalMatrix'] &&
                this.modelViewMatrixVersion != gl$$1.modelViewMatrixVersion &&
                (uni['ts_NormalMatrix'] = modelViewMatrixInverse.transposed());
            this.uniforms(uni);
            this.projectionMatrixVersion = gl$$1.projectionMatrixVersion;
            this.modelViewMatrixVersion = gl$$1.modelViewMatrixVersion;
            // Create and enable attribute pointers as necessary.
            let minVertexBufferLength = Infinity;
            for (const attribute in vertexBuffers) {
                const buffer = vertexBuffers[attribute];
                assert(buffer.hasBeenCompiled);
                const location = this.attributeLocations[attribute] || gl$$1.getAttribLocation(this.program, attribute);
                if (location == -1 || !buffer.buffer) {
                    if (!attribute.startsWith('ts_')) {
                        console.warn(`Vertex buffer ${attribute} was not bound because the attribute is not active.`);
                    }
                    continue;
                }
                this.attributeLocations[attribute] = location;
                gl$$1.bindBuffer(WGL$2.ARRAY_BUFFER, buffer.buffer);
                gl$$1.enableVertexAttribArray(location);
                gl$$1.vertexAttribPointer(location, buffer.spacing, WGL$2.FLOAT, false, 0, 0);
                minVertexBufferLength = Math.min(minVertexBufferLength, buffer.count);
            }
            // Disable unused attribute pointers.
            for (const attribute in this.attributeLocations) {
                if (!(attribute in vertexBuffers)) {
                    gl$$1.disableVertexAttribArray(this.attributeLocations[attribute]);
                }
            }
            {
                const numAttribs = gl$$1.getProgramParameter(this.program, gl$$1.ACTIVE_ATTRIBUTES);
                for (let i = 0; i < numAttribs; ++i) {
                    const buffer = gl$$1.getVertexAttrib(i, gl$$1.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING);
                    if (!buffer) {
                        const info = gl$$1.getActiveAttrib(this.program, i);
                        if (!this.constantAttributes[info.name]) {
                            console.warn('No buffer is bound to attribute ' + info.name + ' and it was not set with .attributes()');
                        }
                    }
                    // console.log('name:', info.name, 'type:', info.type, 'size:', info.size)
                }
            }
            // Draw the geometry.
            if (minVertexBufferLength) {
                if (undefined === count) {
                    count = indexBuffer ? indexBuffer.count : minVertexBufferLength;
                }
                assert(DRAW_MODE_CHECKS[mode](count), 'count ' +
                    count +
                    "doesn't fulfill requirement +" +
                    DRAW_MODE_CHECKS[mode].toString() +
                    ' for mode ' +
                    DRAW_MODE_NAMES[mode]);
                if (indexBuffer) {
                    assert(indexBuffer.hasBeenCompiled);
                    assert(minVertexBufferLength > indexBuffer.maxValue);
                    assert(count % indexBuffer.spacing == 0);
                    assert(start % indexBuffer.spacing == 0);
                    if (start + count > indexBuffer.count) {
                        throw new Error('Buffer not long enough for passed parameters start/length/buffer length ' +
                            start +
                            ' ' +
                            count +
                            ' ' +
                            indexBuffer.count);
                    }
                    gl$$1.bindBuffer(WGL$2.ELEMENT_ARRAY_BUFFER, indexBuffer.buffer);
                    // start parameter has to be multiple of sizeof(WGL.UNSIGNED_SHORT)
                    gl$$1.drawElements(mode, count, indexBuffer.bindSize, indexBuffer.type.BYTES_PER_ELEMENT * start);
                }
                else {
                    if (start + count > minVertexBufferLength) {
                        throw new Error('invalid');
                    }
                    gl$$1.drawArrays(mode, start, count);
                }
                gl$$1.drawCallCount++;
            }
            return this;
        }
    }

    /// <reference types="webgl-strict-types" />
    class Texture$$1 {
        /**
         * Provides a simple wrapper around WebGL textures that supports render-to-texture.
         *
         * The arguments `width` and `height` give the size of the texture in texels.
         * WebGL texture dimensions must be powers of two unless `filter` is set to
         * either `WGL.NEAREST` or `WGL.LINEAR` and `wrap` is set to `WGL.CLAMP_TO_EDGE`
         * (which they are by default).
         *
         * Texture parameters can be passed in via the `options` argument.
         * Example usage:
         *
         *      let tex = new GL.Texture(256, 256, {
         *       magFilter: WGL.NEAREST,
         *       minFilter: WGL.LINEAR,
         *
         *       wrapS: WGL.REPEAT,
         *       wrapT: WGL.REPEAT,
         *
         *       format: WGL.RGB, // Defaults to WGL.RGBA
         *       type: WGL.FLOAT // Defaults to WGL.UNSIGNED_BYTE
         *     })
         *
         */
        constructor(width, height, options = {}, gl$$1 = currentGL$$1()) {
            this.gl = gl$$1;
            this.width = width;
            this.height = height;
            this.format = options.format || gl$$1.RGBA;
            this.internalFormat = options.internalFormat || gl$$1.RGBA;
            this.type = options.type || gl$$1.UNSIGNED_BYTE;
            const magFilter = options.filter || options.magFilter || gl$$1.LINEAR;
            const minFilter = options.filter || options.minFilter || gl$$1.LINEAR;
            if (this.type === gl$$1.FLOAT) {
                if (gl$$1.version != 2 && !gl$$1.getExtension('OES_texture_float')) {
                    throw new Error('OES_texture_float is required but not supported');
                }
                if ((minFilter !== gl$$1.NEAREST || magFilter !== gl$$1.NEAREST) &&
                    !gl$$1.getExtension('OES_texture_float_linear')) {
                    throw new Error('OES_texture_float_linear is required but not supported');
                }
            }
            else if (this.type === gl$$1.HALF_FLOAT_OES) {
                if (!gl$$1.getExtension('OES_texture_half_float')) {
                    throw new Error('OES_texture_half_float is required but not supported');
                }
                if ((minFilter !== gl$$1.NEAREST || magFilter !== gl$$1.NEAREST) &&
                    !gl$$1.getExtension('OES_texture_half_float_linear')) {
                    throw new Error('OES_texture_half_float_linear is required but not supported');
                }
            }
            this.texture = gl$$1.createTexture();
            gl$$1.bindTexture(gl$$1.TEXTURE_2D, this.texture);
            gl$$1.texParameteri(gl$$1.TEXTURE_2D, gl$$1.TEXTURE_MAG_FILTER, magFilter);
            gl$$1.texParameteri(gl$$1.TEXTURE_2D, gl$$1.TEXTURE_MIN_FILTER, minFilter);
            gl$$1.texParameteri(gl$$1.TEXTURE_2D, gl$$1.TEXTURE_WRAP_S, options.wrap || options.wrapS || gl$$1.CLAMP_TO_EDGE);
            gl$$1.texParameteri(gl$$1.TEXTURE_2D, gl$$1.TEXTURE_WRAP_T, options.wrap || options.wrapT || gl$$1.CLAMP_TO_EDGE);
            gl$$1.texImage2D(gl$$1.TEXTURE_2D, 0, this.internalFormat, width, height, 0, this.format, this.type, options.data);
        }
        setData(data) {
            this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);
            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.format, this.width, this.height, 0, this.format, this.type, data);
        }
        bind(unit) {
            this.gl.activeTexture((this.gl.TEXTURE0 + unit));
            this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);
        }
        unbind(unit) {
            this.gl.activeTexture((this.gl.TEXTURE0 + unit));
            this.gl.bindTexture(this.gl.TEXTURE_2D, null);
        }
        drawTo(render) {
            const gl$$1 = this.gl;
            const prevFramebuffer = gl$$1.getParameter(gl$$1.FRAMEBUFFER_BINDING);
            if (!this.framebuffer) {
                // create a renderbuffer for the depth component
                const prevRenderbuffer = gl$$1.getParameter(gl$$1.RENDERBUFFER_BINDING);
                const depthRenderbuffer = gl$$1.createRenderbuffer();
                gl$$1.bindRenderbuffer(gl$$1.RENDERBUFFER, depthRenderbuffer);
                // DEPTH_COMPONENT16 is the only depth format
                gl$$1.renderbufferStorage(gl$$1.RENDERBUFFER, gl$$1.DEPTH_COMPONENT16, this.width, this.height);
                gl$$1.bindRenderbuffer(gl$$1.RENDERBUFFER, prevRenderbuffer);
                // create a framebuffer to render to
                this.framebuffer = gl$$1.createFramebuffer();
                gl$$1.bindFramebuffer(gl$$1.FRAMEBUFFER, this.framebuffer);
                gl$$1.framebufferTexture2D(gl$$1.FRAMEBUFFER, gl$$1.COLOR_ATTACHMENT0, gl$$1.TEXTURE_2D, this.texture, 0);
                gl$$1.framebufferRenderbuffer(gl$$1.FRAMEBUFFER, gl$$1.DEPTH_ATTACHMENT, gl$$1.RENDERBUFFER, depthRenderbuffer);
                if (gl$$1.checkFramebufferStatus(gl$$1.FRAMEBUFFER) !== gl$$1.FRAMEBUFFER_COMPLETE) {
                    throw new Error('Rendering to this texture is not supported (incomplete this.framebuffer)');
                }
            }
            else if (prevFramebuffer !== this.framebuffer) {
                gl$$1.bindFramebuffer(gl$$1.FRAMEBUFFER, this.framebuffer);
            }
            const prevViewport = gl$$1.getParameter(gl$$1.VIEWPORT);
            gl$$1.viewport(0, 0, this.width, this.height);
            render(gl$$1);
            // restore previous state
            prevFramebuffer !== this.framebuffer && gl$$1.bindFramebuffer(gl$$1.FRAMEBUFFER, prevFramebuffer);
            gl$$1.viewport(prevViewport[0], prevViewport[1], prevViewport[2], prevViewport[3]);
        }
        swapWith(other) {
            assert(this.gl == other.gl);
            let temp;
            temp = other.texture;
            other.texture = this.texture;
            this.texture = temp;
            temp = other.width;
            other.width = this.width;
            this.width = temp;
            temp = other.height;
            other.height = this.height;
            this.height = temp;
        }
        /**
         * Return a new texture created from `imgElement`, an `<img>` tag.
         */
        static fromImage(imgElement, options = {}, gl$$1 = currentGL$$1()) {
            const texture = new Texture$$1(imgElement.width, imgElement.height, options, gl$$1);
            try {
                gl$$1.texImage2D(gl$$1.TEXTURE_2D, 0, texture.format, texture.format, texture.type, imgElement);
            }
            catch (e) {
                if (location.protocol == 'file:') {
                    throw new Error('imgElement not loaded for security reasons (serve this page over "http://" instead)');
                }
                else {
                    throw new Error('imgElement not loaded for security reasons (imgElement must originate from the same ' +
                        'domain as this page or use Cross-Origin Resource Sharing)');
                }
            }
            if (options.minFilter && options.minFilter != gl$$1.NEAREST && options.minFilter != gl$$1.LINEAR) {
                gl$$1.generateMipmap(gl$$1.TEXTURE_2D);
            }
            return texture;
        }
        /**
         * Returns a checkerboard texture that will switch to the correct texture when it loads.
         */
        static fromURLSwitch(url, options, gl$$1 = currentGL$$1()) {
            Texture$$1.checkerBoardCanvas =
                Texture$$1.checkerBoardCanvas ||
                    (function () {
                        const c = document.createElement('canvas').getContext('2d');
                        if (!c)
                            throw new Error('Could not create 2d canvas.');
                        c.canvas.width = c.canvas.height = 128;
                        for (let y = 0; y < c.canvas.height; y += 16) {
                            for (let x = 0; x < c.canvas.width; x += 16) {
                                //noinspection JSBitwiseOperatorUsage
                                c.fillStyle = (x ^ y) & 16 ? '#FFF' : '#DDD';
                                c.fillRect(x, y, 16, 16);
                            }
                        }
                        return c.canvas;
                    })();
            const texture = Texture$$1.fromImage(Texture$$1.checkerBoardCanvas, options);
            const image = new Image();
            image.onload = () => Texture$$1.fromImage(image, options, gl$$1).swapWith(texture);
            // error event doesn't return a reason. Most likely a 404.
            image.onerror = () => {
                throw new Error('Could not load image ' + image.src + '. 404?');
            };
            image.src = url;
            return texture;
        }
        static fromURL(url, options, gl$$1 = currentGL$$1()) {
            return new Promise((resolve, reject) => {
                const image = new Image();
                image.onload = () => resolve(Texture$$1.fromImage(image, options, gl$$1));
                image.onerror = ev => reject('Could not load image ' + image.src + '. 404?' + ev);
                image.src = url;
            });
        }
    }

    var posCoordVS = "attribute vec2 ts_TexCoord;attribute vec4 ts_Vertex;uniform mat4 ts_ModelViewProjectionMatrix;varying vec2 coord;void main(){coord=ts_TexCoord.xy;gl_Position=ts_ModelViewProjectionMatrix*ts_Vertex;}";

    var sdfRenderFS = "precision mediump float;uniform sampler2D u_texture;uniform vec4 u_color;uniform float u_buffer;uniform float u_gamma;uniform float u_debug;varying vec2 coord;void main(){float dist=texture2D(u_texture,coord).r;if(u_debug>0.0){gl_FragColor=vec4(dist,dist,dist,1);}else{float alpha=smoothstep(u_buffer-u_gamma,u_buffer+u_gamma,dist);gl_FragColor=vec4(u_color.rgb,alpha*u_color.a);if(gl_FragColor.a==0.0){discard;}}}";

    /*
    ** Copyright (c) 2012 The Khronos Group Inc.
    **
    ** Permission is hereby granted, free of charge, to any person obtaining a
    ** copy of this software and/or associated documentation files (the
    ** 'Materials'), to deal in the Materials without restriction, including
    ** without limitation the rights to use, copy, modify, merge, publish,
    ** distribute, sublicense, and/or sell copies of the Materials, and to
    ** permit persons to whom the Materials are furnished to do so, subject to
    ** the following conditions:
    **
    ** The above copyright notice and this permission notice shall be included
    ** in all copies or substantial portions of the Materials.
    **
    ** THE MATERIALS ARE PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
    ** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    ** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    ** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    ** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    ** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    ** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
    */
    // Various functions for helping debug WebGL apps.
    /**
     * Wrapped logging function.
     * @param msg Message to log.
     */
    function log$1(msg) {
        if (window.console && window.console.log) {
            window.console.log(msg);
        }
    }
    /**
     * Wrapped error logging function.
     * @param msg Message to log.
     */
    function error(msg) {
        if (window.console && window.console.error) {
            window.console.error(msg);
        }
        else {
            log$1(msg);
        }
    }
    /**
     * Which arguments are enums based on the number of arguments to the function.
     * So
     *    'texImage2D': {
     *       9: { 0:true, 2:true, 6:true, 7:true },
     *       6: { 0:true, 2:true, 3:true, 4:true },
     *    },
     *
     * means if there are 9 arguments then 6 and 7 are enums, if there are 6
     * arguments 3 and 4 are enums
     *
     * @type {!Object.<number, !Object.<number, string>}
     */
    const glValidEnumContexts = {
        // Generic setters and getters
        enable: { 1: { 0: true } },
        disable: { 1: { 0: true } },
        getParameter: { 1: { 0: true } },
        // Rendering
        drawArrays: { 3: { 0: true } },
        drawElements: { 4: { 0: true, 2: true } },
        // Shaders
        createShader: { 1: { 0: true } },
        getShaderParameter: { 2: { 1: true } },
        getProgramParameter: { 2: { 1: true } },
        getShaderPrecisionFormat: { 2: { 0: true, 1: true } },
        // Vertex attributes
        getVertexAttrib: { 2: { 1: true } },
        vertexAttribPointer: { 6: { 2: true } },
        // Textures
        bindTexture: { 2: { 0: true } },
        activeTexture: { 1: { 0: true } },
        getTexParameter: { 2: { 0: true, 1: true } },
        texParameterf: { 3: { 0: true, 1: true } },
        texParameteri: { 3: { 0: true, 1: true, 2: true } },
        // texImage2D and texSubImage2D are defined below with WebGL 2 entrypoints
        copyTexImage2D: { 8: { 0: true, 2: true } },
        copyTexSubImage2D: { 8: { 0: true } },
        generateMipmap: { 1: { 0: true } },
        // compressedTexImage2D and compressedTexSubImage2D are defined below with WebGL 2 entrypoints
        // Buffer objects
        bindBuffer: { 2: { 0: true } },
        // bufferData and bufferSubData are defined below with WebGL 2 entrypoints
        getBufferParameter: { 2: { 0: true, 1: true } },
        // Renderbuffers and framebuffers
        pixelStorei: { 2: { 0: true, 1: true } },
        // readPixels is defined below with WebGL 2 entrypoints
        bindRenderbuffer: { 2: { 0: true } },
        bindFramebuffer: { 2: { 0: true } },
        checkFramebufferStatus: { 1: { 0: true } },
        framebufferRenderbuffer: { 4: { 0: true, 1: true, 2: true } },
        framebufferTexture2D: { 5: { 0: true, 1: true, 2: true } },
        getFramebufferAttachmentParameter: { 3: { 0: true, 1: true, 2: true } },
        getRenderbufferParameter: { 2: { 0: true, 1: true } },
        renderbufferStorage: { 4: { 0: true, 1: true } },
        // Frame buffer operations (clear, blend, depth test, stencil)
        clear: { 1: { 0: { enumBitwiseOr: ['COLOR_BUFFER_BIT', 'DEPTH_BUFFER_BIT', 'STENCIL_BUFFER_BIT'] } } },
        depthFunc: { 1: { 0: true } },
        blendFunc: { 2: { 0: true, 1: true } },
        blendFuncSeparate: { 4: { 0: true, 1: true, 2: true, 3: true } },
        blendEquation: { 1: { 0: true } },
        blendEquationSeparate: { 2: { 0: true, 1: true } },
        stencilFunc: { 3: { 0: true } },
        stencilFuncSeparate: { 4: { 0: true, 1: true } },
        stencilMaskSeparate: { 2: { 0: true } },
        stencilOp: { 3: { 0: true, 1: true, 2: true } },
        stencilOpSeparate: { 4: { 0: true, 1: true, 2: true, 3: true } },
        // Culling
        cullFace: { 1: { 0: true } },
        frontFace: { 1: { 0: true } },
        // ANGLE_instanced_arrays extension
        drawArraysInstancedANGLE: { 4: { 0: true } },
        drawElementsInstancedANGLE: { 5: { 0: true, 2: true } },
        // EXT_blend_minmax extension
        blendEquationEXT: { 1: { 0: true } },
        // WebGL 2 Buffer objects
        bufferData: {
            3: { 0: true, 2: true },
            4: { 0: true, 2: true },
            5: { 0: true, 2: true },
        },
        bufferSubData: {
            3: { 0: true },
            4: { 0: true },
            5: { 0: true },
        },
        copyBufferSubData: { 5: { 0: true, 1: true } },
        getBufferSubData: { 3: { 0: true }, 4: { 0: true }, 5: { 0: true } },
        // WebGL 2 Framebuffer objects
        blitFramebuffer: {
            10: { 8: { enumBitwiseOr: ['COLOR_BUFFER_BIT', 'DEPTH_BUFFER_BIT', 'STENCIL_BUFFER_BIT'] }, 9: true },
        },
        framebufferTextureLayer: { 5: { 0: true, 1: true } },
        invalidateFramebuffer: { 2: { 0: true } },
        invalidateSubFramebuffer: { 6: { 0: true } },
        readBuffer: { 1: { 0: true } },
        // WebGL 2 Renderbuffer objects
        getInternalformatParameter: { 3: { 0: true, 1: true, 2: true } },
        renderbufferStorageMultisample: { 5: { 0: true, 2: true } },
        // WebGL 2 Texture objects
        texStorage2D: { 5: { 0: true, 2: true } },
        texStorage3D: { 6: { 0: true, 2: true } },
        texImage2D: {
            9: { 0: true, 2: true, 6: true, 7: true },
            6: { 0: true, 2: true, 3: true, 4: true },
            10: { 0: true, 2: true, 6: true, 7: true },
        },
        texImage3D: {
            10: { 0: true, 2: true, 7: true, 8: true },
            11: { 0: true, 2: true, 7: true, 8: true },
        },
        texSubImage2D: {
            9: { 0: true, 6: true, 7: true },
            7: { 0: true, 4: true, 5: true },
            10: { 0: true, 6: true, 7: true },
        },
        texSubImage3D: {
            11: { 0: true, 8: true, 9: true },
            12: { 0: true, 8: true, 9: true },
        },
        copyTexSubImage3D: { 9: { 0: true } },
        compressedTexImage2D: {
            7: { 0: true, 2: true },
            8: { 0: true, 2: true },
            9: { 0: true, 2: true },
        },
        compressedTexImage3D: {
            8: { 0: true, 2: true },
            9: { 0: true, 2: true },
            10: { 0: true, 2: true },
        },
        compressedTexSubImage2D: {
            8: { 0: true, 6: true },
            9: { 0: true, 6: true },
            10: { 0: true, 6: true },
        },
        compressedTexSubImage3D: {
            10: { 0: true, 8: true },
            11: { 0: true, 8: true },
            12: { 0: true, 8: true },
        },
        // WebGL 2 Vertex attribs
        vertexAttribIPointer: { 5: { 2: true } },
        // WebGL 2 Writing to the drawing buffer
        drawArraysInstanced: { 4: { 0: true } },
        drawElementsInstanced: { 5: { 0: true, 2: true } },
        drawRangeElements: { 6: { 0: true, 4: true } },
        // WebGL 2 Reading back pixels
        readPixels: {
            7: { 4: true, 5: true },
            8: { 4: true, 5: true },
        },
        // WebGL 2 Multiple Render Targets
        clearBufferfv: { 3: { 0: true }, 4: { 0: true } },
        clearBufferiv: { 3: { 0: true }, 4: { 0: true } },
        clearBufferuiv: { 3: { 0: true }, 4: { 0: true } },
        clearBufferfi: { 4: { 0: true } },
        // WebGL 2 Query objects
        beginQuery: { 2: { 0: true } },
        endQuery: { 1: { 0: true } },
        getQuery: { 2: { 0: true, 1: true } },
        getQueryParameter: { 2: { 1: true } },
        // WebGL 2 Sampler objects
        samplerParameteri: { 3: { 1: true, 2: true } },
        samplerParameterf: { 3: { 1: true } },
        getSamplerParameter: { 2: { 1: true } },
        // WebGL 2 Sync objects
        fenceSync: { 2: { 0: true, 1: { enumBitwiseOr: [] } } },
        clientWaitSync: { 3: { 1: { enumBitwiseOr: ['SYNC_FLUSH_COMMANDS_BIT'] } } },
        waitSync: { 3: { 1: { enumBitwiseOr: [] } } },
        getSyncParameter: { 2: { 1: true } },
        // WebGL 2 Transform Feedback
        bindTransformFeedback: { 2: { 0: true } },
        beginTransformFeedback: { 1: { 0: true } },
        transformFeedbackVaryings: { 3: { 2: true } },
        // WebGL2 Uniform Buffer Objects and Transform Feedback Buffers
        bindBufferBase: { 3: { 0: true } },
        bindBufferRange: { 5: { 0: true } },
        getIndexedParameter: { 2: { 0: true } },
        getActiveUniforms: { 3: { 2: true } },
        getActiveUniformBlockParameter: { 3: { 2: true } },
    };
    /**
     * Map of numbers to names.
     * @type {Object}
     */
    let glEnums = null;
    /**
     * Map of names to numbers.
     * @type {Object}
     */
    let enumStringToValue = null;
    /**
     * Initializes this module. Safe to call more than once.
     * @param ctx A WebGL context. If
     *    you have more than one context it doesn't matter which one
     *    you pass in, it is only used to pull out constants.
     */
    function init() {
        if (null === glEnums) {
            glEnums = {};
            enumStringToValue = {};
            const c = window.WebGL2RenderingContext || window.WebGLRenderingContext;
            if (!c)
                throw new Error('Neither WebGL2RenderingContext nor WebGLRenderingContext exists on window.');
            for (const propertyName in c) {
                const prop = c[propertyName];
                if ('number' === typeof prop) {
                    glEnums[prop] = propertyName;
                    enumStringToValue[propertyName] = prop;
                }
            }
        }
    }
    /**
     * Gets an string version of an WebGL enum.
     *
     * Example:
     *   var str = WebGLDebugUtil.glEnumToString(ctx.getError())
     *
     * @param value Value to return an enum for
     * @return The string version of the enum.
     */
    function glEnumToString(value) {
        init();
        var name = glEnums[value];
        return name !== undefined ? 'gl.' + name : '/*UNKNOWN WebGL ENUM*/ 0x' + value.toString(16) + '';
    }
    /**
     * Converts the argument of a WebGL function to a string.
     * Attempts to convert enum arguments to strings.
     *
     * Example:
     *   WebGLDebugUtil.init(ctx)
     *   var str = WebGLDebugUtil.glFunctionArgToString('bindTexture', 2, 0, gl.TEXTURE_2D)
     *
     * would return 'TEXTURE_2D'
     *
     * @param functionName the name of the WebGL function.
     * @param numArgs the number of arguments passed to the function.
     * @param argumentIndex the index of the argument.
     * @param value The value of the argument.
     * @return The value as a string.
     */
    function glFunctionArgToString(functionName, numArgs, argumentIndex, value) {
        const funcInfo = glValidEnumContexts[functionName];
        if (funcInfo !== undefined) {
            const funcOverloadInfo = funcInfo[numArgs];
            if (funcOverloadInfo !== undefined) {
                const argInfo = funcOverloadInfo[argumentIndex];
                if (argInfo) {
                    if (typeof argInfo === 'object') {
                        const enums = argInfo.enumBitwiseOr;
                        const orEnums = [];
                        let orResult = 0;
                        for (let i = 0; i < enums.length; ++i) {
                            const enumValue = enumStringToValue[enums[i]];
                            if ((value & enumValue) !== 0) {
                                orResult |= enumValue;
                                orEnums.push(glEnumToString(enumValue));
                            }
                        }
                        if (orResult === value) {
                            return orEnums.join(' | ');
                        }
                        else {
                            return glEnumToString(value);
                        }
                    }
                    else {
                        return glEnumToString(value);
                    }
                }
            }
        }
        if (value === null) {
            return 'null';
        }
        else if (value === undefined) {
            return 'undefined';
        }
        else {
            return value.toString();
        }
    }
    function makePropertyWrapper(wrapper, original, propertyName) {
        //log('wrap prop: ' + propertyName)
        wrapper.__defineGetter__(propertyName, function () {
            return original[propertyName];
        });
        // TODO(gmane): this needs to handle properties that take more than
        // one value?
        wrapper.__defineSetter__(propertyName, function (value) {
            //log('set: ' + propertyName)
            original[propertyName] = value;
        });
    }
    /**
     * Given a WebGL context returns a wrapped context that calls
     * gl.getError after every command and calls a function if the
     * result is not NO_ERROR.
     *
     * You can supply your own function if you want. For example, if you'd like
     * an exception thrown on any GL error you could do this
     *
     *    function throwOnGLError(err, funcName, args) {
     *      throw new Error(WebGLDebugUtils.glEnumToString(err) +
     *            ' was caused by call to ' + funcName)
     *    }
     *
     *    ctx = WebGLDebugUtils.makeDebugContext(
     *        canvas.getContext('webgl'), throwOnGLError)
     *
     * @param ctx The webgl context to wrap.
     * @param opt_onErrorFunc The function
     *     to call when gl.getError returns an error. If not specified the default
     *     function calls console.log with a message.
     * @param opt_onFunc The
     *     function to call when each webgl function is called. You
     *     can use this to log all calls for example.
     * @param opt_err_ctx The webgl context
     *        to call getError on if different than ctx.
     */
    function makeDebugContext(ctx, opt_onErrorFunc, opt_onFunc, opt_err_ctx = ctx) {
        init();
        opt_onErrorFunc =
            opt_onErrorFunc ||
                function (err, functionName, args) {
                    // apparently we can't do args.join(',')
                    var argStr = '';
                    var numArgs = args.length;
                    for (let i = 0; i < numArgs; ++i) {
                        argStr += (i == 0 ? '' : ', ') + glFunctionArgToString(functionName, numArgs, i, args[i]);
                    }
                    error('WebGL error ' + glEnumToString(err) + ' in ' + functionName + '(' + argStr + ')');
                };
        // Holds booleans for each GL error so after we get the error ourselves
        // we can still return it to the client app.
        const glErrorShadow = {};
        // Makes a function that calls a WebGL function and then calls getError.
        function makeErrorWrapper(ctx, functionName) {
            return function (...args) {
                if (opt_onFunc) {
                    opt_onFunc(functionName, args);
                }
                const result = ctx[functionName].apply(ctx, args);
                const err = opt_err_ctx.getError();
                if (err != 0) {
                    glErrorShadow[err] = true;
                    opt_onErrorFunc(err, functionName, args);
                }
                return result;
            };
        }
        // Make a an object that has a copy of every property of the WebGL context
        // but wraps all functions.
        const wrapper = {};
        for (let propertyName in ctx) {
            const prop = ctx[propertyName];
            if ('function' === typeof prop) {
                if (propertyName != 'getExtension') {
                    wrapper[propertyName] = makeErrorWrapper(ctx, propertyName);
                }
                else {
                    let wrapped = makeErrorWrapper(ctx, propertyName);
                    wrapper[propertyName] = function () {
                        const result = wrapped.apply(ctx, arguments);
                        if (!result) {
                            return null;
                        }
                        return makeDebugContext(result, opt_onErrorFunc, opt_onFunc, opt_err_ctx);
                    };
                }
            }
            else {
                makePropertyWrapper(wrapper, ctx, propertyName);
            }
        }
        // Override the getError function with one that returns our saved results.
        wrapper.getError = function () {
            for (const err in glErrorShadow) {
                if (glErrorShadow.hasOwnProperty(err)) {
                    if (glErrorShadow[err]) {
                        glErrorShadow[err] = false;
                        return parseInt(err);
                    }
                }
            }
            return ctx.NO_ERROR;
        };
        return wrapper;
    }

    /**
     * There's only one constant, use it for default values. Use chroma-js or similar for actual colors.
     */
    const GL_COLOR_BLACK$$1 = [0, 0, 0, 1];
    function currentGL$$1() {
        return TSGLContextBase$$1.gl;
    }
    class TSGLContextBase$$1 {
        constructor(gl$$1, immediate = {
            mesh: new Mesh$$1().addVertexBuffer('coords', 'ts_TexCoord').addVertexBuffer('colors', 'ts_Color'),
            mode: -1,
            coord: [0, 0],
            color: [1, 1, 1, 1],
            pointSize: 1,
            shader: Shader$$1.create(`
			attribute vec4 ts_Color;
			attribute vec4 ts_Vertex;
			uniform mat4 ts_ModelViewProjectionMatrix;
			attribute vec2 ts_TexCoord;
            uniform float pointSize;
            varying vec4 color;
            varying vec2 coord;
            void main() {
                color = ts_Color;
                coord = ts_TexCoord;
                gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;
                gl_PointSize = pointSize;
            }
		`, `
			precision highp float;
            uniform sampler2D texture;
            uniform float pointSize;
            // uniform bool useTexture;
            varying vec4 color;
            varying vec2 coord;
            void main() {
                gl_FragColor = color;
                // if (useTexture) gl_FragColor *= texture2D(texture, coord.xy);
            }
        `, gl$$1),
        }) {
            this.immediate = immediate;
            this.modelViewMatrix = M4.identity();
            this.projectionMatrix = M4.identity();
            this.tempMatrix = new M4();
            this.resultMatrix = new M4();
            this.modelViewStack = [];
            this.projectionStack = [];
            this.drawCallCount = 0;
            this.projectionMatrixVersion = 0;
            this.modelViewMatrixVersion = 0;
            this.cachedSDFMeshes = {};
            this.matrixMode(TSGLContextBase$$1.MODELVIEW);
        }
        /// Implement the OpenGL modelview and projection matrix stacks, along with some other useful GLU matrix functions.
        matrixMode(mode) {
            switch (mode) {
                case this.MODELVIEW:
                    this.currentMatrixName = 'modelViewMatrix';
                    this.stack = this.modelViewStack;
                    break;
                case this.PROJECTION:
                    this.currentMatrixName = 'projectionMatrix';
                    this.stack = this.projectionStack;
                    break;
                default:
                    throw new Error('invalid matrix mode ' + mode);
            }
        }
        loadIdentity() {
            M4.identity(this[this.currentMatrixName]);
            this.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++;
        }
        loadMatrix(m4) {
            M4.copy(m4, this[this.currentMatrixName]);
            this.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++;
        }
        multMatrix(m4) {
            M4.multiply(this[this.currentMatrixName], m4, this.resultMatrix);
            const temp = this.resultMatrix;
            this.resultMatrix = this[this.currentMatrixName];
            this[this.currentMatrixName] = temp;
            this.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++;
        }
        mirror(plane) {
            this.multMatrix(M4.mirror(plane));
        }
        perspective(fovDegrees, aspect, near, far) {
            this.multMatrix(M4.perspectiveRad(fovDegrees * DEG, aspect, near, far, this.tempMatrix));
        }
        frustum(left, right, bottom, top, near, far) {
            this.multMatrix(M4.frustum(left, right, bottom, top, near, far, this.tempMatrix));
        }
        ortho(left, right, bottom, top, near, far) {
            this.multMatrix(M4.ortho(left, right, bottom, top, near, far, this.tempMatrix));
        }
        scale(...args) {
            this.multMatrix(M4.scale(...args, this.tempMatrix));
        }
        mirroredX() {
            this.multMatrix(M4.mirror(P3ZX));
        }
        translate(x, y, z) {
            if (undefined !== y) {
                this.multMatrix(M4.translate(x, y, z, this.tempMatrix));
            }
            else {
                this.multMatrix(M4.translate(x, this.tempMatrix));
            }
        }
        rotate(angleDegrees, x, y, z) {
            this.multMatrix(M4.rotate(angleDegrees * DEG, { x, y, z }, this.tempMatrix));
        }
        lookAt(eye, center, up) {
            this.multMatrix(M4.lookAt(eye, center, up, this.tempMatrix));
        }
        pushMatrix() {
            this.stack.push(M4.copy(this[this.currentMatrixName]));
        }
        popMatrix() {
            const pop = this.stack.pop();
            assert(undefined !== pop);
            this[this.currentMatrixName] = pop;
            this.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++;
        }
        /**
         * World coordinates (WC) to screen/window coordinates matrix
         */
        wcToWindowMatrix() {
            const viewport = this.getParameter(this.VIEWPORT);
            const [x, y, w, h] = viewport;
            // prettier-ignore
            const viewportToScreenMatrix = new M4([
                w / 2, 0, 0, x + w / 2,
                h / 2, 0, 0, y + h / 2,
                0, 0, 1, 0,
                0, 0, 0, 1,
            ]);
            return M4.product(viewportToScreenMatrix, this.projectionMatrix, this.modelViewMatrix);
        }
        /////////// IMMEDIATE MODE
        // ### Immediate mode
        //
        // Provide an implementation of OpenGL's deprecated immediate mode. This is
        // deprecated for a reason: constantly re-specifying the geometry is a bad
        // idea for performance. You should use a `GL.Mesh` instead, which specifies
        // the geometry once and caches it on the graphics card. Still, nothing
        // beats a quick `viewerGL.begin(WGL.POINTS); viewerGL.vertex(1, 2, 3); viewerGL.end();` for
        // debugging. This intentionally doesn't implement fixed-function lighting
        // because it's only meant for quick debugging tasks.
        pointSize(pointSize) {
            this.immediate.shader.uniforms({ pointSize: pointSize });
        }
        begin(mode) {
            if (this.immediate.mode != -1)
                throw new Error('mismatched viewerGL.begin() and viewerGL.end() calls');
            this.immediate.mode = mode;
            this.immediate.mesh.colors = [];
            this.immediate.mesh.coords = [];
            this.immediate.mesh.vertices = [];
        }
        color(...args) {
            this.immediate.color =
                1 == args.length && Array.isArray(args[0])
                    ? args[0]
                    : 1 == args.length && 'number' == typeof args[0]
                        ? hexIntToGLColor(args[0])
                        : 1 == args.length && 'string' == typeof args[0]
                            ? color(args[0]).gl()
                            : [args[0], args[1], args[2], args[3] || 1];
        }
        texCoord(...args) {
            this.immediate.coord = V$2.apply(undefined, args).toArray(2);
        }
        vertex(...args) {
            this.immediate.mesh.colors.push(this.immediate.color);
            this.immediate.mesh.coords.push(this.immediate.coord);
            this.immediate.mesh.vertices.push(V$2.apply(undefined, args));
        }
        end() {
            if (this.immediate.mode == -1)
                throw new Error('mismatched viewerGL.begin() and viewerGL.end() calls');
            this.immediate.mesh.compile();
            this.immediate.shader
                .uniforms({
                useTexture: !!TSGLContextBase$$1.gl.getParameter(this.TEXTURE_BINDING_2D),
            })
                .drawBuffers(this.immediate.mesh.vertexBuffers, undefined, this.immediate.mode);
            this.immediate.mode = -1;
        }
        makeCurrent() {
            TSGLContextBase$$1.gl = this;
        }
        /**
         * Starts an animation loop.
         */
        animate(callback) {
            const requestAnimationFrame = window.requestAnimationFrame ||
                window.mozRequestAnimationFrame ||
                window.webkitRequestAnimationFrame ||
                function (callback) {
                    setTimeout(() => callback(performance.now()), 1000 / 60);
                };
            let time$$1 = performance.now(), keepUpdating = true;
            const update = (now) => {
                if (keepUpdating) {
                    callback.call(this, now, now - time$$1);
                    time$$1 = now;
                    requestAnimationFrame(update);
                }
            };
            requestAnimationFrame(update);
            return () => {
                keepUpdating = false;
            };
        }
        /**
         * Provide an easy way to get a fullscreen app running, including an
         * automatic 3D perspective projection matrix by default. This should be
         * called once.
         *
         * Just fullscreen, no automatic camera:
         *
         *     viewerGL.fullscreen({ camera: false })
         *
         * Adjusting field of view, near plane distance, and far plane distance:
         *
         *     viewerGL.fullscreen({ fov: 45, near: 0.1, far: 1000 })
         *
         * Adding padding from the edge of the window:
         *
         *     viewerGL.fullscreen({ paddingLeft: 250, paddingBottom: 60 })
         */
        fullscreen(options = {}) {
            const top = options.paddingTop || 0;
            const left = options.paddingLeft || 0;
            const right = options.paddingRight || 0;
            const bottom = options.paddingBottom || 0;
            if (!document.body) {
                throw new Error("document.body doesn't exist yet (call viewerGL.fullscreen() from " +
                    'window.onload() or from inside the <body> tag)');
            }
            document.body.appendChild(this.canvas);
            document.body.style.overflow = 'hidden';
            this.canvas.style.position = 'absolute';
            this.canvas.style.left = left + 'px';
            this.canvas.style.top = top + 'px';
            this.canvas.style.width = window.innerWidth - left - right + 'px';
            this.canvas.style.bottom = window.innerHeight - top - bottom + 'px';
            const gl$$1 = this;
            function windowOnResize() {
                gl$$1.canvas.width = (window.innerWidth - left - right) * window.devicePixelRatio;
                gl$$1.canvas.height = (window.innerHeight - top - bottom) * window.devicePixelRatio;
                gl$$1.viewport(0, 0, gl$$1.canvas.width, gl$$1.canvas.height);
                if (options.camera) {
                    gl$$1.matrixMode(TSGLContextBase$$1.PROJECTION);
                    gl$$1.loadIdentity();
                    gl$$1.perspective(options.fov || 45, gl$$1.canvas.width / gl$$1.canvas.height, options.near || 0.1, options.far || 1000);
                    gl$$1.matrixMode(TSGLContextBase$$1.MODELVIEW);
                }
            }
            window.addEventListener('resize', windowOnResize);
            windowOnResize();
            return this;
        }
        getMouseLine(canvasPosXOrE, canvasPosY) {
            if (canvasPosXOrE instanceof MouseEvent) {
                return this.getMouseLine(canvasPosXOrE.offsetX, canvasPosXOrE.offsetY);
            }
            const ndc1 = V$2((canvasPosXOrE * 2) / this.canvas.offsetWidth - 1, (-canvasPosY * 2) / this.canvas.offsetHeight + 1, 0);
            const ndc2 = V$2((canvasPosXOrE * 2) / this.canvas.offsetWidth - 1, (-canvasPosY * 2) / this.canvas.offsetHeight + 1, 1);
            const inverseProjectionMatrix = this.projectionMatrix.inversed();
            const anchor = inverseProjectionMatrix.transformPoint(ndc1);
            const dir = inverseProjectionMatrix.transformPoint(ndc2).minus(anchor);
            return { anchor, dir };
        }
        viewportFill() {
            this.viewport(0, 0, this.canvas.width, this.canvas.height);
        }
        setupTextRendering(pngURL, jsonURL) {
            return __awaiter$1(this, void 0, void 0, function* () {
                this.textRenderShader = Shader$$1.create(posCoordVS, sdfRenderFS);
                [this.textAtlas, this.textMetrics] = yield Promise.all([
                    Texture$$1.fromURL(pngURL, {
                        format: this.LUMINANCE,
                        internalFormat: this.LUMINANCE,
                        type: this.UNSIGNED_BYTE,
                    }),
                    fetch(jsonURL).then(r => r.json()),
                ]);
                // const cs = this.textMetrics.chars
                // const maxY = Object.keys(cs).reduce((a, b) => Math.max(a, cs[b][3]), 0)
                // const minY = Object.keys(cs).reduce((a, b) => Math.min(a, cs[b][3] - cs[b][1]), 0)
                // console.log(maxY, minY)
            });
        }
        getSDFMeshForString(str) {
            assert(this.textMetrics);
            return (this.cachedSDFMeshes[str] ||
                (this.cachedSDFMeshes[str] = createTextMesh(this.textMetrics, this.textAtlas, str)));
        }
        renderText(string, color$$1, size = 1, xAlign = 'left', baseline = 'bottom', gamma = 0.05, lineHeight = 1.2) {
            const strMesh = this.getSDFMeshForString(string);
            this.pushMatrix();
            this.scale(size);
            const xTranslate = { left: 0, center: -0.5, right: -1 };
            const yTranslate = {
                top: -this.textMetrics.ascender / this.textMetrics.size,
                middle: (-this.textMetrics.ascender - this.textMetrics.descender) / 2 / this.textMetrics.size,
                alphabetic: 0,
                bottom: -this.textMetrics.descender / this.textMetrics.size,
            };
            // console.log('yTranslate[baseline]', yTranslate[baseline])
            this.translate(xTranslate[xAlign] * strMesh.width, yTranslate[baseline], 0);
            this.multMatrix(M4.forSys(V3.X, V3.Y, new V3(0, -lineHeight, 0)));
            this.textAtlas.bind(0);
            this.textRenderShader
                .uniforms({ texture: 0, u_color: color$$1, u_debug: 0, u_gamma: gamma, u_buffer: 192 / 256 })
                .draw(strMesh);
            this.popMatrix();
            // gl.uniform1f(shader.u_debug, debug ? 1 : 0)
            // gl.uniform4fv(shader.u_color, [1, 1, 1, 1])
            // gl.uniform1f(shader.u_buffer, buffer)
            // gl.drawArrays(gl.TRIANGLES, 0, vertexBuffer.numItems)
            // gl.uniform4fv(shader.u_color, [0, 0, 0, 1])
            // gl.uniform1f(shader.u_buffer, 192 / 256)
            // gl.uniform1f(shader.u_gamma, (gamma * 1.4142) / scale)
            // gl.drawArrays(gl.TRIANGLES, 0, vertexBuffer.numItems)
        }
        static create(options = {}) {
            const canvas = options.canvas || document.createElement('canvas');
            if (!options.canvas) {
                canvas.width = 800;
                canvas.height = 600;
            }
            if (!('alpha' in options))
                options.alpha = false;
            let newGL = undefined;
            try {
                newGL = canvas.getContext('webgl2', options);
                newGL && (newGL.version = 2);
                if (!newGL) {
                    newGL = canvas.getContext('webgl', options) || canvas.getContext('experimental-webgl', options);
                    newGL && (newGL.version = 1);
                }
                console.log('getting context');
            }
            catch (e) {
                console.log(e, 'Failed to get context');
            }
            if (!newGL)
                throw new Error('WebGL not supported');
            if (options.throwOnError) {
                newGL = makeDebugContext(newGL, (err, funcName) => {
                    throw new Error(glEnumToString(err) + ' was caused by ' + funcName);
                });
            }
            TSGLContextBase$$1.gl = newGL;
            addOwnProperties(newGL, TSGLContextBase$$1.prototype);
            addOwnProperties(newGL, new TSGLContextBase$$1(newGL));
            //addEventListeners(newGL)
            return newGL;
        }
        /**
         * Sets the canvas render resolution (canvas.width and canvas.height) to match the display. I.e. it takes into
         * account window.devicePixelRatio.
         * @param maxPixelRatio A limit for the pixelRatio. Useful for very high DPI devices such as mobile devices.
         */
        fixCanvasRes(maxPixelRatio = Infinity) {
            this.canvas.width = this.canvas.clientWidth * Math.min(window.devicePixelRatio, maxPixelRatio);
            this.canvas.height = this.canvas.clientHeight * Math.min(window.devicePixelRatio, maxPixelRatio);
            this.viewport(0, 0, this.canvas.width, this.canvas.height);
        }
    }
    TSGLContextBase$$1.MODELVIEW = 0;
    TSGLContextBase$$1.PROJECTION = 1;
    TSGLContextBase$$1.HALF_FLOAT_OES = 0x8d61;
    var TSGLContext;
    (function (TSGLContext$$1) {
        /**
         * `create()` creates a new WebGL context and augments it with more methods. The alpha channel is disabled
         * by default because it usually causes unintended transparencies in the canvas.
         */
        TSGLContext$$1.create = TSGLContextBase$$1.create;
    })(TSGLContext || (TSGLContext = {}));
    // enum WGL_ERROR {
    // 	NO_ERROR = WGL.NO_ERROR,
    // 	INVALID_ENUM = WGL.INVALID_ENUM,
    // 	INVALID_VALUE = WGL.INVALID_VALUE,
    // 	INVALID_OPERATION = WGL.INVALID_OPERATION,
    // 	INVALID_FRAMEBUFFER_OPERATION = WGL.INVALID_FRAMEBUFFER_OPERATION,
    // 	OUT_OF_MEMORY = WGL.OUT_OF_MEMORY,
    // 	CONTEXT_LOST_WEBGL = WGL.CONTEXT_LOST_WEBGL,
    // }
    TSGLContextBase$$1.prototype.MODELVIEW = TSGLContextBase$$1.MODELVIEW;
    TSGLContextBase$$1.prototype.PROJECTION = TSGLContextBase$$1.PROJECTION;
    TSGLContextBase$$1.prototype.HALF_FLOAT_OES = TSGLContextBase$$1.HALF_FLOAT_OES;
    /**
     *
     * Push two triangles:
     * ```
     c - d
     | \ |
     a - b
     ```
     */
    function pushQuad$$1(triangles, flipped, a, b, c, d) {
        // prettier-ignore
        if (flipped) {
            triangles.push(a, c, b, b, c, d);
        }
        else {
            triangles.push(a, b, c, b, d, c);
        }
    }
    function hexIntToGLColor(color$$1) {
        return [(color$$1 >> 16) / 255.0, ((color$$1 >> 8) & 0xff) / 255.0, (color$$1 & 0xff) / 255.0, 1.0];
    }
    // function measureText(metrics: FontJsonMetrics, text: string, size: number) {
    // 	const dimensions = {
    // 		advance: 0,
    // 	}
    // 	const scale = size / metrics.size
    // 	for (let i = 0; i < text.length; i++) {
    // 		const horiAdvance = metrics.chars[text[i]][4]
    // 		dimensions.advance += horiAdvance * scale
    // 	}
    // 	return dimensions
    // }
    // gl.getExtension('OES_standard_derivatives')
    // gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE)
    // gl.enable(gl.BLEND)
    // const texture = gl.createTexture()
    // const vertexBuffer = gl.createBuffer()
    // const textureBuffer = gl.createBuffer()
    function createTextMesh(fontMetrics, fontTextureAtlas, str, lineHeight = 1) {
        const mesh = new Mesh$$1().addIndexBuffer('TRIANGLES').addVertexBuffer('coords', 'ts_TexCoord');
        let cursorX = 0;
        let cursorY = 0;
        function drawGlyph(chr) {
            const metric = fontMetrics.chars[chr];
            if (!metric)
                return;
            const [width, height, horiBearingX, horiBearingY, horiAdvance, posX, posY] = metric;
            const { size, buffer } = fontMetrics;
            const quadStartIndex = mesh.vertices.length;
            // buffer = margin on texture
            if (width > 0 && height > 0) {
                // Add a quad (= two triangles) per glyph.
                const left = (cursorX + horiBearingX - buffer) / size;
                const right = (cursorX + horiBearingX + width + buffer) / size;
                const bottom = (horiBearingY - height - buffer) / size;
                const top = (horiBearingY + buffer) / size;
                mesh.vertices.push(new V3(left, bottom, cursorY / size), new V3(right, bottom, cursorY / size), new V3(left, top, cursorY / size), new V3(right, top, cursorY / size));
                const coordsLeft = posX / fontTextureAtlas.width;
                const coordsRight = (posX + width + 2 * buffer) / fontTextureAtlas.width;
                const coordsBottom = (posY + height + 2 * buffer) / fontTextureAtlas.height;
                const coordsTop = posY / fontTextureAtlas.height;
                mesh.coords.push([coordsLeft, coordsBottom], [coordsRight, coordsBottom], [coordsLeft, coordsTop], [coordsRight, coordsTop]);
                // mesh.coords.push([0, 0], [0, 1], [1, 0], [1, 1])
                pushQuad$$1(mesh.TRIANGLES, false, quadStartIndex, quadStartIndex + 1, quadStartIndex + 2, quadStartIndex + 3);
            }
            // pen.x += Math.ceil(horiAdvance * scale);
            cursorX += horiAdvance;
        }
        for (let i = 0; i < str.length; i++) {
            const chr = str[i];
            if ('\n' == chr) {
                cursorX = 0;
                cursorY += lineHeight * fontMetrics.size;
            }
            else {
                drawGlyph(chr);
            }
        }
        return Object.assign(mesh.compile(), { width: cursorX / fontMetrics.size, lineCount: cursorY + 1 });
    }

    const { abs: abs$3, acos, acosh, asin, asinh, atan, atanh, atan2: atan2$1, ceil, cbrt: cbrt$1, expm1, clz32, cos: cos$2, cosh, exp, floor: floor$1, fround, hypot: hypot$1, imul, log: log$2, log1p, log2, log10, max: max$2, min: min$2, pow, random: random$1, round: round$1, sign: sign$2, sin: sin$2, sinh, sqrt: sqrt$1, tan, tanh, trunc, E: E$2, LN10, LN2, LOG10E, LOG2E, PI: PI$4, SQRT1_2, SQRT2, } = Math;

    let insideIsInfosWithCurve = false;
    class Curve$$1 extends Transformable {
        constructor(tMin, tMax) {
            super();
            this.tMin = tMin;
            this.tMax = tMax;
            assertNumbers(tMin, tMax);
            assert('number' == typeof tMin && !isNaN(tMin));
            assert('number' == typeof tMax && !isNaN(tMax));
            assert(tMin < tMax, 'tMin < tMax ' + tMin + ' < ' + tMax);
        }
        static integrate(curve, startT, endT, steps) {
            const step = (endT - startT) / steps;
            let length = 0;
            let p = curve.at(startT);
            let i = 0, t = startT + step;
            for (; i < steps; i++, t += step) {
                const next = curve.at(t);
                length += p.distanceTo(next);
                p = next;
            }
            return length;
        }
        static ispsRecursive(curve1, tMin, tMax, curve2, sMin, sMax) {
            // the recursive function finds good approximates for the intersection points
            // curve1 function uses newton iteration to improve the result as much as possible
            function handleStartTS(startT, startS) {
                if (!result.some(info => eq(info.tThis, startT) && eq(info.tOther, startS))) {
                    const f1 = (t, s) => curve1.tangentAt(t).dot(curve1.at(t).minus(curve2.at(s)));
                    const f2 = (t, s) => curve2.tangentAt(s).dot(curve1.at(t).minus(curve2.at(s)));
                    // f = (b1, b2, t1, t2) = b1.tangentAt(t1).dot(b1.at(t1).minus(b2.at(t2)))
                    const dfdt1 = (b1, b2, t1, t2) => b1.ddt(t1).dot(b1.at(t1).minus(b2.at(t2))) + b1.tangentAt(t1).squared();
                    const dfdt2 = (b1, b2, t1, t2) => -b1.tangentAt(t1).dot(b2.tangentAt(t2));
                    const ni = newtonIterate2dWithDerivatives(f1, f2, startT, startS, 16, dfdt1.bind(undefined, curve1, curve2), dfdt2.bind(undefined, curve1, curve2), (t, s) => -dfdt2(curve2, curve1, s, t), (t, s) => -dfdt1(curve2, curve1, s, t));
                    assert(isFinite(ni.x));
                    assert(isFinite(ni.y));
                    if (ni == undefined)
                        console.log(startT, startS, curve1.sce, curve2.sce);
                    result.push({ tThis: ni.x, tOther: ni.y, p: curve1.at(ni.x) });
                }
            }
            // returns whether an intersection was immediately found (i.e. without further recursion)
            function findRecursive(tMin, tMax, sMin, sMax, curve1AABB, curve2AABB, depth = 0) {
                const EPS$$1 = NLA_PRECISION;
                if (curve1AABB.touchesAABBfuzzy(curve2AABB)) {
                    const tMid = (tMin + tMax) / 2;
                    const sMid = (sMin + sMax) / 2;
                    if (Math.abs(tMax - tMin) < EPS$$1 || Math.abs(sMax - sMin) < EPS$$1) {
                        handleStartTS(tMid, sMid);
                        return true;
                    }
                    else {
                        const curve1AABBleft = curve1.getAABB(tMin, tMid);
                        const curve2AABBleft = curve2.getAABB(sMin, sMid);
                        let curve1AABBright, curve2AABBright;
                        // if one of the following calls immediately finds an intersection, we don't want to call the others
                        // as that will lead to the same intersection being output multiple times
                        findRecursive(tMin, tMid, sMin, sMid, curve1AABBleft, curve2AABBleft, depth + 1) ||
                            findRecursive(tMin, tMid, sMid, sMax, curve1AABBleft, (curve2AABBright = curve2.getAABB(sMid, sMax)), depth + 1) ||
                            findRecursive(tMid, tMax, sMin, sMid, (curve1AABBright = curve1.getAABB(tMid, tMax)), curve2AABBleft, depth + 1) ||
                            findRecursive(tMid, tMax, sMid, sMax, curve1AABBright, curve2AABBright, depth + 1);
                    }
                }
                return false;
            }
            const result = [];
            findRecursive(tMin, tMax, sMin, sMax, curve1.getAABB(tMin, tMax), curve2.getAABB(sMin, sMax));
            return fuzzyUniquesF(result, info => info.tThis);
        }
        /**
         * Searches a 2d area for (an) implicit curve(s).
         * @param implicitCurve
         * @param bounds Defines area to search.
         * @param uStep Granularity of search in s-direction.
         * @param vStep Granularity of search in t-direction.
         * @param stepSize step size to take along the curve
         * @return
         */
        static breakDownIC(implicitCurve, bounds, uStep, vStep, stepSize, validUV) {
            //undefined == didu && (didu = (u, v) => (implicitCurve(u + EPS, v) - implicitCurve(u, v)) / EPS)
            //undefined == didv && (didv = (u, v) => (implicitCurve(u, v + EPS) - implicitCurve(u, v)) / EPS)
            const { uMin, uMax, vMin, vMax } = bounds;
            const deltaS = uMax - uMin, deltaT = vMax - vMin;
            const sRes = ceil(deltaS / uStep), tRes = ceil(deltaT / vStep);
            const grid = new Array(sRes * tRes).fill(0);
            // const printGrid = () =>
            // 	console.log(
            // 		arrayFromFunction(tRes, i =>
            // 			grid
            // 				.slice(sRes * i, sRes * (i + 1))
            // 				.map(v => (v ? 'X' : '_'))
            // 				.join(''),
            // 		).join('\n'),
            // 	)
            const get = (i, j) => grid[j * sRes + i];
            const set = (i, j) => 0 <= i && i < sRes && 0 <= j && j < tRes && (grid[j * sRes + i] = 1);
            const result = [];
            const logTable = [];
            for (let i = 0; i < sRes; i++) {
                search: for (let j = 0; j < tRes; j++) {
                    if (get(i, j))
                        continue;
                    set(i, j);
                    let u = uMin + (i + 0.5) * uStep, v = vMin + (j + 0.5) * vStep;
                    const startS = u, startT = v;
                    // basically curvePoint
                    for (let k = 0; k < 8; k++) {
                        const fp = implicitCurve(u, v);
                        const dfpdx = implicitCurve.x(u, v), dfpdy = implicitCurve.y(u, v);
                        if (0 === Math.pow(dfpdx, 2) + Math.pow(dfpdy, 2)) {
                            // top of a hill, keep looking
                            continue search;
                        }
                        const scale = fp / (Math.pow(dfpdx, 2) + Math.pow(dfpdy, 2));
                        u -= scale * dfpdx;
                        v -= scale * dfpdy;
                    }
                    const li = floor$1((u - uMin) / uStep), lj = floor$1((v - vMin) / vStep);
                    logTable.push({
                        i,
                        j,
                        li,
                        lj,
                        startS,
                        startT,
                        u,
                        v,
                        'bounds(u, v)': uvInAABB2$$1(bounds, u, v),
                        'ic(s,t)': implicitCurve(u, v),
                    });
                    if (!(i == li && j == lj) && get(li, lj)) {
                        continue search;
                    }
                    set(li, lj);
                    // u, v are now good starting coordinates to use follow algorithm
                    if (uvInAABB2$$1(bounds, u, v) && validUV(u, v) && eq0(implicitCurve(u, v))) {
                        const subResult = mkcurves(implicitCurve, u, v, stepSize, bounds, validUV);
                        for (const curveData of subResult) {
                            assert(curveData.points.length > 2);
                            for (const { x, y } of curveData.points) {
                                const lif = (x - uMin) / uStep, ljf = (y - vMin) / vStep;
                                set((lif - 0.5) | 0, (ljf - 0.5) | 0);
                                set((lif - 0.5) | 0, (ljf + 0.5) | 0);
                                set((lif + 0.5) | 0, (ljf - 0.5) | 0);
                                set((lif + 0.5) | 0, (ljf + 0.5) | 0);
                            }
                        }
                        //printGrid()
                        result.push(...subResult);
                    }
                }
            }
            // console.table(logTable)
            for (const { points } of result) {
                for (let i = 0; i < points.length - 1; i++) {
                    assert(!points[i].equals(points[i + 1]));
                }
            }
            return result;
        }
        toString() {
            return this.toSource();
        }
        toSource(rounder = x => x) {
            return callsce.call(undefined, 'new ' + this.constructor.name, ...this.getConstructorParameters(), this.tMin, this.tMax);
        }
        withBounds(tMin = this.tMin, tMax = this.tMax) {
            //assert(this.tMin <= tMin && tMin <= this.tMax)
            //assert(this.tMin <= tMax && tMax <= this.tMax)
            return new this.constructor(...this.getConstructorParameters(), tMin, tMax);
        }
        /**
         * The point on the line that is closest to the given point.
         */
        closestPointToPoint(p) {
            return this.at(this.closestTToPoint(p));
        }
        isValidT(t) {
            return le$1(this.tMin, t) && le$1(t, this.tMax);
        }
        diff(t, eps) {
            return this.at(t).to(this.at(t + eps));
        }
        // TODO: tmin/tmax first
        closestTToPoint(p, tStart, tMin = this.tMin, tMax = this.tMax) {
            // this.at(t) has minimal distance to p when this.tangentAt(t) is perpendicular to
            // the vector between this.at(t) and p. This is the case iff the dot product of the two is 0.
            // f = (this.at(t) - p) . (this.tangentAt(t)
            // df = this.tangentAt(t) . this.tangentAt(t) + (this.at(t) - p) . this.ddt(t)
            //    = this.tangentAt(t)² + (this.at(t) - p) . this.ddt(t)
            const f = (t) => this.at(t)
                .minus(p)
                .dot(this.tangentAt(t)); // 5th degree polynomial
            const df = (t) => this.tangentAt(t).squared() +
                this.at(t)
                    .minus(p)
                    .dot(this.ddt(t));
            //checkDerivate(f, df, tMin, tMax)
            const STEPS = 32;
            if (undefined === tStart) {
                tStart = arrayFromFunction(STEPS, i => tMin + (tMax - tMin) * i / (STEPS - 1)).withMax(t => -this.at(t).distanceTo(p));
            }
            return newtonIterateWithDerivative(f, tStart, 16, df);
        }
        /**
         * So different edges on the same curve do not have different vertices, they are always generated
         * on fixed points this.at(k * this.tIncrement), with k taking integer values
         *
         */
        calcSegmentPoints(aT, bT, a, b, reversed, includeFirst) {
            assert(this.tIncrement, 'tIncrement not defined on ' + this);
            const inc = this.tIncrement;
            const result = [];
            if (includeFirst)
                result.push(a);
            assert(reversed != aT < bT);
            if (aT < bT) {
                const start = Math.ceil((aT + NLA_PRECISION) / inc);
                const end = Math.floor((bT - NLA_PRECISION) / inc);
                for (let i = start; i <= end; i++) {
                    result.push(this.at(i * inc));
                }
            }
            else {
                const start = Math.floor((aT - NLA_PRECISION) / inc);
                const end = Math.ceil((bT + NLA_PRECISION) / inc);
                for (let i = start; i >= end; i--) {
                    result.push(this.at(i * inc));
                }
            }
            result.push(b);
            return result;
        }
        calcSegmentTs(aT, bT, reversed, includeFirst) {
            assert(this.tIncrement, 'tIncrement not defined on ' + this);
            const inc = this.tIncrement;
            const result = [];
            if (includeFirst)
                result.push(aT);
            assert(reversed != aT < bT);
            if (aT < bT) {
                const start = Math.ceil((aT + NLA_PRECISION) / inc);
                const end = Math.floor((bT - NLA_PRECISION) / inc);
                for (let i = start; i <= end; i++) {
                    result.push(i * inc);
                }
            }
            else {
                const start = Math.floor((aT - NLA_PRECISION) / inc);
                const end = Math.ceil((bT + NLA_PRECISION) / inc);
                for (let i = start; i >= end; i--) {
                    result.push(i * inc);
                }
            }
            result.push(bT);
            return result;
        }
        /**
         *
         * @param p
         * @param tStart Defines interval with tEnd in which a start value for t will be searched.
         * Result is not necessarily in this interval.
         * @param tEnd
         */
        distanceToPoint(p, tStart, tEnd) {
            const closestT = this.closestTToPoint(p, tStart, tEnd);
            return this.at(closestT).distanceTo(p);
        }
        asSegmentDistanceToPoint(p, tStart, tEnd) {
            let t = this.closestTToPoint(p, tStart, tEnd);
            t = clamp(t, tStart, tEnd);
            return this.at(t).distanceTo(p);
        }
        /**
         * Behavior when curves are colinear: self intersections
         */
        isInfosWithCurve(curve) {
            if (insideIsInfosWithCurve) {
                return Curve$$1.ispsRecursive(this, this.tMin, this.tMax, curve, curve.tMin, curve.tMax);
            }
            else {
                try {
                    insideIsInfosWithCurve = true;
                    const infos = curve.isInfosWithCurve(this);
                    return infos.map(info => {
                        assert(info);
                        const { tThis, tOther, p } = info;
                        return { tOther: tThis, tThis: tOther, p };
                    });
                }
                finally {
                    insideIsInfosWithCurve = false;
                }
            }
        }
        isTsWithSurface(surface) {
            if (surface instanceof PlaneSurface$$1) {
                return this.isTsWithPlane(surface.plane);
            }
            if (surface instanceof ProjectedCurveSurface$$1) {
                const projPlane = new P3$$1(surface.dir.unit(), 0);
                const projThis = this.project(projPlane);
                const projEllipse = surface.baseCurve.project(projPlane);
                return projEllipse.isInfosWithCurve(projThis).map(info => info.tOther);
            }
            if (surface instanceof EllipsoidSurface$$1) {
                const thisOC = this.transform(surface.matrixInverse);
                if (!thisOC.getAABB().touchesAABBfuzzy(new AABB(V3.XYZ.negated(), V3.XYZ))) {
                    return [];
                }
                const f = (t) => thisOC.at(t).length() - 1;
                const df = (t) => thisOC
                    .at(t)
                    .unit()
                    .dot(thisOC.tangentAt(t));
                const stepSize = 1 / (1 << 11);
                const result = [];
                for (let startT = this.tMin; startT <= this.tMax; startT += stepSize) {
                    const dt = stepSize * thisOC.tangentAt(startT).length();
                    if (abs$3(f(startT)) <= dt) {
                        //const t = newtonIterate1d(f, startT, 16)
                        let t = newtonIterateWithDerivative(f, startT, 16, df);
                        if (!eq0(f(t)) || eq0(df(t))) {
                            t = newtonIterate1d(df, startT, 16);
                            //if (f(a) * f(b) < 0) {
                            //    t = bisect(f, a, b, 16)
                            //} else if (df(a) * df(b) < 0) {
                            //    t = bisect(df, a, b, 16)
                            //}
                        }
                        if (eq0(f(t)) && !result.some(r => eq(r, t))) {
                            result.push(t);
                        }
                    }
                }
                return result.filter(t => surface.containsPoint(this.at(t)));
            }
            throw new Error();
        }
        arcLength(startT, endT, steps = 1) {
            assert(startT < endT, 'startT < endT');
            return glqInSteps(t => this.tangentAt(t).length(), startT, endT, steps);
        }
        equals(obj) {
            if (this === obj)
                return true;
            return (hasConstructor(obj, this.constructor) &&
                this.getConstructorParameters().equals(obj.getConstructorParameters()));
        }
        hashCode() {
            return this.getConstructorParameters().hashCode();
        }
        getAABB(tMin = this.tMin, tMax = this.tMax) {
            tMin = isFinite(tMin) ? tMin : this.tMin;
            tMax = isFinite(tMax) ? tMax : this.tMax;
            const tMinAt = this.at(tMin), tMaxAt = this.at(tMax);
            const roots = this.roots();
            const mins = new Array(3), maxs = new Array(3);
            for (let dim = 0; dim < 3; dim++) {
                const tRoots = roots[dim];
                mins[dim] = Math.min(tMinAt.e(dim), tMaxAt.e(dim));
                maxs[dim] = Math.max(tMinAt.e(dim), tMaxAt.e(dim));
                for (const tRoot of tRoots) {
                    if (tMin < tRoot && tRoot < tMax) {
                        mins[dim] = Math.min(mins[dim], this.at(tRoot).e(dim));
                        maxs[dim] = Math.max(maxs[dim], this.at(tRoot).e(dim));
                    }
                }
            }
            return new AABB(V3.fromArray(mins), V3.fromArray(maxs));
        }
        reversed() {
            throw new Error();
        }
        clipPlane(plane) {
            const ists = this.isTsWithPlane(plane).filter(ist => this.tMin <= ist && ist <= this.tMax);
            return getIntervals(ists, this.tMin, this.tMax).mapFilter(([a, b]) => {
                const midT = (a + b) / 2;
                return !eq(a, b) && plane.distanceToPointSigned(this.at(midT)) < 0 && this.withBounds(a, b);
            });
        }
    }
    Curve$$1.hlol = 0;
    function mkcurves(implicitCurve, sStart, tStart, stepSize, bounds, validUV) {
        const start = V$2(sStart, tStart);
        assert(stepSize > 0);
        // checkDerivate(s => implicitCurve(s, 0), s => didu(s, 0), -1, 1, 0)
        // checkDerivate(t => implicitCurve(0, t), t => didv(0, t), -1, 1, 0)
        const { points, tangents } = followAlgorithm2d$$1(implicitCurve, start, stepSize, bounds, validUV);
        if (points.length > 4 && points[0].distanceTo(points.last) <= abs$3(stepSize)) {
            // this is a loop: split it
            for (let i = 0; i < points.length - 1; i++) {
                assert(!points[i].equals(points[i + 1]));
            }
            const half = floor$1(points.length / 2);
            const points1 = points.slice(0, half), points2 = points.slice(half - 1, points.length);
            const tangents1 = tangents.slice(0, half), tangents2 = tangents.slice(half - 1, tangents.length);
            //tangents2[tangents2.length - 1] = tangents1[0]
            //points2[tangents2.length - 1] = points1[0]
            for (let i = 0; i < points1.length - 1; i++) {
                assert(!points1[i].equals(points1[i + 1]));
            }
            for (let i = 0; i < points2.length - 1; i++) {
                assert(!points2[i].equals(points2[i + 1]));
            }
            return [{ points: points1, tangents: tangents1 }, { points: points2, tangents: tangents2 }];
        }
        else {
            // not a loop: check in the other direction
            const { points: reversePoints, tangents: reverseTangents } = followAlgorithm2d$$1(implicitCurve, start, -stepSize, bounds, validUV);
            const result = followAlgorithm2d$$1(implicitCurve, reversePoints.last, stepSize, bounds, validUV, undefined, reverseTangents.last.negated());
            assert(result.points.length > 2);
            return [result];
        }
    }
    function breakDownPPCurves$$1(ps1, ps2, uStep, vStep, stepSize) {
        const { uMin, uMax, vMin, vMax } = ps1;
        const bounds = uvInAABB2$$1.bind(undefined, ps1);
        const bounds2 = uvInAABB2$$1.bind(undefined, ps2);
        const deltaU = uMax - uMin, deltaV = vMax - vMin;
        const sRes = ceil(deltaU / uStep), tRes = ceil(deltaV / vStep);
        const grid = new Array(sRes * tRes).fill(0);
        //const printGrid = () => console.log(arrayFromFunction(tRes, i => grid.slice(sRes * i, sRes * (i + 1)).map(v => v ? 'X' : '_').join('')).join('\n'))
        const at = (i, j) => grid[j * sRes + i];
        const set = (i, j) => 0 <= i && i < sRes && 0 <= j && j < tRes && (grid[j * sRes + i] = 1);
        const result = [];
        const logTable = [];
        for (let i = 0; i < sRes; i++) {
            search: for (let j = 0; j < tRes; j++) {
                if (at(i, j))
                    continue;
                set(i, j);
                const startU = uMin + (i + 0.5) * uStep, startV = vMin + (j + 0.5) * vStep;
                // assume point is valid, currently (TODO)
                const curvePointPPResult = curvePointPP$$1(ps1, ps2, ps1.pUV(startU, startV));
                if (undefined === curvePointPPResult) {
                    continue search;
                }
                const { p: startP, st1: { x: u, y: v }, st2: { x: u2, y: v2 }, } = curvePointPPResult;
                const li = floor$1((u - uMin) / uStep), lj = floor$1((v - vMin) / vStep);
                logTable.push({
                    i,
                    j,
                    li,
                    lj,
                    startU,
                    startV,
                    u,
                    v,
                    'bounds(u, v)': bounds(u, v),
                });
                if (!(i == li && j == lj) && at(li, lj)) {
                    continue search;
                }
                set(li, lj);
                // u, v are now good starting coordinates to use follow algorithm
                if (bounds(u, v) && bounds2(u2, v2)) {
                    console.log(V$2(u, v).sce);
                    const subResult = mkPPCurves(ps1, ps2, startP, stepSize, bounds, bounds2);
                    for (const curveData of subResult) {
                        assert(curveData.st1s.length > 2);
                        for (const { x, y } of curveData.st1s) {
                            const lif = (x - uMin) / uStep, ljf = (y - vMin) / vStep;
                            set((lif - 0.5) | 0, (ljf - 0.5) | 0);
                            set((lif - 0.5) | 0, (ljf + 0.5) | 0);
                            set((lif + 0.5) | 0, (ljf - 0.5) | 0);
                            set((lif + 0.5) | 0, (ljf + 0.5) | 0);
                        }
                    }
                    //printGrid()
                    result.push(...subResult);
                }
            }
        }
        console.table(logTable);
        for (const { points } of result) {
            for (let i = 0; i < points.length - 1; i++) {
                assert(!points[i].equals(points[i + 1]));
            }
        }
        return result.map(({ points, tangents, st1s }) => {
            return new PPCurve$$1(points, tangents, ps1, ps2, st1s, undefined, stepSize, 1);
        });
    }
    function mkPPCurves(ps1, ps2, startPoint, stepSize, bounds1, bounds2) {
        // checkDerivate(s => implicitCurve(s, 0), s => didu(s, 0), -1, 1, 0)
        // checkDerivate(t => implicitCurve(0, t), t => didv(0, t), -1, 1, 0)
        const { points, tangents, st1s } = followAlgorithmPP$$1(ps1, ps2, startPoint, stepSize, bounds1, bounds2);
        if (points[0].distanceTo(points.last) < stepSize && points.length > 2) {
            // this is a loop: split it
            for (let i = 0; i < points.length - 1; i++) {
                assert(!points[i].equals(points[i + 1]));
            }
            const half = floor$1(points.length / 2);
            const points1 = points.slice(0, half), points2 = points.slice(half - 1, points.length);
            const tangents1 = tangents.slice(0, half), tangents2 = tangents.slice(half - 1, tangents.length);
            const st1s1 = st1s.slice(0, half), st1s2 = st1s.slice(half - 1, tangents.length);
            tangents2[tangents2.length - 1] = tangents1[0];
            points2[tangents2.length - 1] = points1[0];
            st1s2[tangents2.length - 1] = st1s1[0];
            for (let i = 0; i < points1.length - 1; i++) {
                assert(!points1[i].equals(points1[i + 1]));
            }
            for (let i = 0; i < points2.length - 1; i++) {
                assert(!points2[i].equals(points2[i + 1]));
            }
            return [
                { points: points1, tangents: tangents1, st1s: st1s1 },
                { points: points2, tangents: tangents2, st1s: st1s2 },
            ];
        }
        else {
            // not a loop: check in the other direction
            const { points: reversePoints } = followAlgorithmPP$$1(ps1, ps2, startPoint, -stepSize, bounds1, bounds2);
            const result = followAlgorithmPP$$1(ps1, ps2, reversePoints.last, stepSize, bounds1, bounds2);
            assert(result.points.length > 2);
            return [result];
        }
    }
    function uvInAABB2$$1(aabb2, u, v) {
        return aabb2.uMin <= u && u <= aabb2.uMax && aabb2.vMin <= v && v <= aabb2.vMax;
    }
    function curvePoint$$1(implicitCurve, startPoint, didu, didv) {
        let p = startPoint;
        for (let i = 0; i < 8; i++) {
            const fp = implicitCurve(p.x, p.y);
            const dfpdx = didu(p.x, p.y), dfpdy = didv(p.x, p.y);
            const scale = fp / (dfpdx * dfpdx + dfpdy * dfpdy);
            p = p.minus(new V3(scale * dfpdx, scale * dfpdy, 0));
        }
        return p;
    }
    function curvePointMF$$1(mf, startPoint, steps = 8, eps = 1 / (1 << 30)) {
        let p = startPoint;
        for (let i = 0; i < steps; i++) {
            const fp = mf(p.x, p.y);
            const dfpdx = mf.x(p.x, p.y), dfpdy = mf.y(p.x, p.y);
            const scale = fp / (dfpdx * dfpdx + dfpdy * dfpdy);
            p = p.minus(new V3(scale * dfpdx, scale * dfpdy, 0));
            if (abs$3(fp) <= eps)
                break;
        }
        return p;
    }

    class XiEtaCurve$$1 extends Curve$$1 {
        constructor(center, f1, f2, tMin, tMax) {
            super(tMin, tMax);
            this.center = center;
            this.f1 = f1;
            this.f2 = f2;
            this.tMin = tMin;
            this.tMax = tMax;
            assertVectors(center, f1, f2);
            this.normal = f1.cross(f2);
            if (!this.normal.likeO()) {
                this.normal = this.normal.unit();
                this.matrix = M4.forSys(f1, f2, this.normal, center);
                this.matrixInverse = this.matrix.inversed();
            }
            else {
                this.matrix = M4.forSys(f1, f2, f1.unit(), center);
                const f1p = f1.getPerpendicular();
                // prettier-ignore
                this.matrixInverse = new M4(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1).times(M4.forSys(f1, f1p, f1.cross(f1p), center).inversed());
            }
        }
        /**
         * Intersection of the unit curve with the line ax + by = c.
         */
        static intersectionUnitLine(a, b, c, tMin, tMax) {
            throw new Error('abstract');
        }
        /**
         * Returns a new EllipseCurve representing an ellipse parallel to the XY-plane
         * with semi-major/minor axes parallel t the X and Y axes.
         *
         * @param a length of the axis parallel to X axis.
         * @param b length of the axis parallel to Y axis.
         * @param center center of the ellipse.
         */
        static forAB(a, b, center = V3.O) {
            return new this(center, V$2(a, 0, 0), V$2(0, b, 0));
        }
        static XYLCValid(pLC) {
            throw new Error('abstract');
        }
        static XYLCPointT(pLC, tMin, tMax) {
            throw new Error('abstract');
        }
        static unitIsInfosWithLine(anchorLC, dirLC, anchorWC, dirWC, tMin, tMax) {
            throw new Error('abstract');
        }
        addToMesh(mesh, res = 4, radius = 0, pointStep = 1) {
            const baseNormals = arrayFromFunction(res, i => V3.polar(1, TAU * i / res));
            const baseVertices = arrayFromFunction(res, i => V3.polar(radius, TAU * i / res));
            const inc = this.tIncrement;
            const start = Math.ceil((this.tMin + NLA_PRECISION) / inc);
            const end = Math.floor((this.tMax - NLA_PRECISION) / inc);
            for (let i = start; i <= end; i += pointStep) {
                const t = i * inc;
                const start = mesh.vertices.length;
                if (0 !== i) {
                    for (let j = 0; j < res; j++) {
                        pushQuad$$1(mesh.TRIANGLES, true, start - res + j, start + j, start - res + (j + 1) % res, start + (j + 1) % res);
                    }
                }
                const point = this.at(t), tangent = this.tangentAt(t);
                const matrix = M4.forSys(this.normal, tangent.cross(this.normal), tangent, point);
                mesh.normals.push(...matrix.transformedVectors(baseNormals));
                mesh.vertices.push(...matrix.transformedPoints(baseVertices));
            }
        }
        getConstructorParameters() {
            return [this.center, this.f1, this.f2];
        }
        isInfosWithCurve(curve) {
            if (curve instanceof L3$$1) {
                return this.isInfosWithLine(curve.anchor, curve.dir1, this.tMin, this.tMax, curve.tMin, curve.tMax);
            }
            if (curve instanceof BezierCurve$$1) {
                return this.isInfosWithBezier(curve);
            }
            if (curve instanceof XiEtaCurve$$1) {
                if (!this.normal.isParallelTo(curve.normal)) {
                    return this.isTsWithPlane(curve.getPlane()).mapFilter(tThis => {
                        const p = this.at(tThis);
                        if (curve.containsPoint(p)) {
                            return { tThis, tOther: curve.pointT(p), p };
                        }
                        return undefined;
                    });
                }
            }
            return super.isInfosWithCurve(curve);
        }
        transform(m4) {
            return new this.constructor(m4.transformPoint(this.center), m4.transformVector(this.f1), m4.transformVector(this.f2), this.tMin, this.tMax);
        }
        equals(obj) {
            return (this == obj ||
                (undefined != obj &&
                    this.constructor == obj.constructor &&
                    this.center.equals(obj.center) &&
                    this.f1.equals(obj.f1) &&
                    this.f2.equals(obj.f2)));
        }
        hashCode() {
            let hashCode$$1 = 0;
            hashCode$$1 = hashCode$$1 * 31 + this.center.hashCode();
            hashCode$$1 = hashCode$$1 * 31 + this.f1.hashCode();
            hashCode$$1 = hashCode$$1 * 31 + this.f2.hashCode();
            return hashCode$$1 | 0;
        }
        likeCurve(curve) {
            return (hasConstructor(curve, this.constructor) &&
                this.center.like(curve.center) &&
                this.f1.like(curve.f1) &&
                this.f2.like(curve.f2));
        }
        normalP(t) {
            return this.tangentAt(t).cross(this.normal);
        }
        getPlane() {
            return P3$$1.normalOnAnchor(this.normal, this.center);
        }
        isTsWithPlane(planeWC) {
            assertInst(P3$$1, planeWC);
            /*
             this: x = center + f1 * cos t + f2 * sin t  (1)
             plane:
             n := plane.normal1
             n DOT x == plane.w           (2)
             plane defined by f1/f2
             x = center + f1 * xi + f2 * eta         (3)
             intersection plane and planef1/f2:
             insert (3) into (2):
             n DOT center + n DOT f1 * xi + n DOT f2 * eta = plane.w | -n DOT center
             n DOT f1 * xi + n DOT f2 * eta = plane.w - n DOT center (4)
             points on ellipse have additional condition
             eta * eta + xi * xi = 1 (5)
             g1 := n DOT f1
             g2 := n DOT f2
             g3 := w - n DOT center
             solve system (5)/(6)
             g1 * xi + g2 * eta = g3 (6)
             */
            if (planeWC.normal1.isParallelTo(this.normal)) {
                return [];
            }
            const n = planeWC.normal1, w = planeWC.w, center = this.center, f1 = this.f1, f2 = this.f2, g1 = n.dot(f1), g2 = n.dot(f2), g3 = w - n.dot(center);
            return this.constructor.intersectionUnitLine(g1, g2, g3, this.tMin, this.tMax);
        }
        pointT(p) {
            assertVectors(p);
            const pLC = this.matrixInverse.transformPoint(p);
            return this.constructor.XYLCPointT(pLC);
        }
        containsPoint(p) {
            const pLC = this.matrixInverse.transformPoint(p);
            return eq0(pLC.z) && this.isValidT(this.constructor.XYLCPointT(pLC, this.tMin, this.tMax));
        }
        isInfosWithLine(anchorWC, dirWC, tMin = this.tMin, tMax = this.tMax, lineMin = -100000, lineMax = 100000) {
            const anchorLC = this.matrixInverse.transformPoint(anchorWC);
            const dirLC = this.matrixInverse.transformVector(dirWC);
            if (eq0(dirLC.z)) {
                // local line parallel to XY-plane
                if (eq0(anchorLC.z)) {
                    // local line lies in XY-plane
                    return this.constructor.unitIsInfosWithLine(anchorLC, dirLC, anchorWC, dirWC, tMin, tMax);
                }
            }
            else {
                // if the line intersects the XY-plane in a single point, there can be an intersection there
                // find point, then check if distance from circle = 1
                const otherTAtZ0 = anchorLC.z / dirLC.z;
                const isp = dirLC.times(otherTAtZ0).plus(anchorLC);
                if (this.constructor.XYLCValid(isp)) {
                    // point lies on unit circle
                    return [
                        {
                            tThis: this.constructor.XYLCPointT(isp),
                            tOther: otherTAtZ0,
                            p: anchorWC.plus(dirWC.times(otherTAtZ0)),
                        },
                    ];
                }
            }
            return [];
        }
        isTsWithSurface(surface) {
            if (surface instanceof PlaneSurface$$1) {
                return this.isTsWithPlane(surface.plane);
            }
            else if (surface instanceof EllipsoidSurface$$1) {
                const isEllipses = surface.isCurvesWithPlane(this.getPlane());
                return isEllipses
                    .flatMap(isEllipse => this.isInfosWithCurve(isEllipse))
                    .filter(info => surface.containsPoint(info.p))
                    .map(info => info.tThis);
            }
            else if (surface instanceof ProjectedCurveSurface$$1 || surface instanceof ConicSurface$$1) {
                return surface
                    .isCurvesWithPlane(this.getPlane())
                    .flatMap(curve => this.isInfosWithCurve(curve))
                    .map(info => info.tThis);
            }
            else {
                throw new Error();
            }
        }
        isInfosWithBezier(bezierWC) {
            const bezierLC = bezierWC.transform(this.matrixInverse);
            if (new PlaneSurface$$1(P3$$1.XY).containsCurve(bezierLC)) {
                return this.isInfosWithBezier2D(bezierWC);
            }
            else {
                const infos = bezierLC.isTsWithPlane(P3$$1.XY).mapFilter(tOther => {
                    const pLC = bezierLC.at(tOther);
                    if (this.constructor.XYLCValid(pLC)) {
                        return { tOther: tOther, p: bezierWC.at(tOther), tThis: this.constructor.XYLCPointT(pLC) };
                    }
                    return undefined;
                });
                return infos;
            }
        }
        isInfosWithBezier2D(bezierWC, sMin = bezierWC.tMin, sMax = bezierWC.tMax) {
            return Curve$$1.ispsRecursive(this, this.tMin, this.tMax, bezierWC, sMin, sMax);
        }
        isOrthogonal() {
            return this.f1.isPerpendicularTo(this.f2);
        }
        at2(xi, eta) {
            assertNumbers(xi, eta);
            // center + f1 xi + f2 eta
            return this.center.plus(this.f1.times(xi)).plus(this.f2.times(eta));
        }
        debugInfo() {
            return {
                points: [this.center, this.at2(0.5, 0), this.at2(0, 1 / 3), this.at2(0, 2 / 3)],
                lines: [this.center, this.at2(0, 1), this.center, this.at2(1, 0)],
            };
        }
    }
    /**
     * Transforms the unit 4d parabola P(t) = t² (0, 1, 0, 0) + t (1, 0, 0, 0) + (0, 0, 0, 1) using m and projects the
     * result into 3d. This is used for the transform4 implementation of conics. The parabola my not cross the vanishing
     * plane of m in the interval [tMin, tMax], as that would result in discontinuities.
     */
    function parabola4Projection$$1(m, tMin, tMax) {
        return HyperbolaCurve$$1.XY.rotateZ(45 * DEG);
        console.log(m.str);
        console.log();
        const w2 = m.m[13];
        const w1 = m.m[12];
        const wc = m.m[15];
        // if the 4d parabola crosses the vanishing plane, it will lead to multiple/infinite hyperbolas, both of which we
        // want to avoid. Hence, we must check that the entire interval [tMin, tMax] is on one side of the vanishing plane.
        // Checking tMax, tMin and the extremas is enough.
        const extremas = solveCubicReal2(0, w2, w1, wc);
        const wx0 = (x) => (Number.isFinite(x) ? snap0(Math.pow(x, 2) * w2 + x * w1 + wc) : sign$2(w2) * Infinity);
        if (wx0(tMin) * wx0(tMax) < 0 || extremas.some(x => wx0(x) * (wx0(tMin) + wx0(tMax)) < 0)) {
            console.log(m.str);
            throw new Error('The entire interval must be on one side of the vanishing plane. P=' + P3$$1.vanishingPlane(m).toSource());
        }
        if (eq0(wc)) {
            // the following matrix maps a curve C onto itself, with the parameter being inverted:
            // C2(t) = C(-1/t). This makes C(0) a real value, which i necessary for the projection calculation.
            // the sign inversion is so the tangent direction does not change.
            // prettier-ignore
            const mm = new M4(-1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0);
            if (!eq0(w2)) {
                return parabola4Projection$$1(m.times(mm), -1 / tMin, -1 / tMax);
            }
            // wc == w2 == 0 => degenerates to a line:
            // C(t) = (t² f2 + t f1 + c) / (t w1)
            // C(t) = (t f2 + f1 + c) / (t w2 + w1)
            // substitute t = (1/s - w1) / w2
            // C(s) = f2 / w2 + s (f1 - f2 w1 / w2), which is a line
            // we can multiply the direction vector by w2 to avoid divisions:
            // C(t) = f2 / w2 + s (f1 w2 - f2 w1)
            const f1 = m.col(0);
            const f2 = m.col(1);
            return L3$$1.anchorDirection(f2.p3(), f1
                .V3()
                .times(f2.w)
                .minus(f2.V3().times(f1.w)));
        }
        {
            // ensure that the bottom-right value = 1. this does not change the 3d result.
            m.m[15] !== 1 && (m = m.divScalar(m.m[15]));
            const w2 = m.m[13];
            const w1 = m.m[12];
            const wc = m.m[15];
            // we want to split m into X * P, such that X is a transformation with no projective component (first three
            // values of the bottom row = 0), which can be handled by the usual .transform() method, and P which has only a
            // projective component (only the row differs from the identity matrix). This simplifies the following
            // calculation. X * P = x => X * P * P^-1 = m * P^-1 => X = m * P^-1 prettier-ignore
            const Pinv = new M4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -m.m[12], -m.m[13], -m.m[14], 1);
            const X = m.times(Pinv);
            // P'(t) = 0 is true for t = 0 and t1. The center is in between P(0) and P(t1), or P(t1) / 2, as P(0) = O
            const delta = 4 * w2 * wc - Math.pow(w1, 2);
            const center = new V3(-w1 * wc / delta, 2 * Math.pow(wc, 2) / delta, 0);
            // f2 is parallel to P'(0), i.e. horizontal. Solve Py(t2) = Cy = Py(t1) / 2 for t2 and simplify
            // f2x = Px(t2) - Cx = Px(t2) - Px(t1) / 2 to get the x-component of f2:
            const f2x = 1 / sqrt$1(abs$3(delta)) / wc;
            const f2 = new V3(f2x, 0, 0);
            let result;
            if (eq0(delta)) {
                result = new ParabolaCurve$$1(V3.O, V3.X, V3.Y, tMin, tMax);
            }
            else if (0 < delta) {
                const tMapInv = (t) => {
                    const wt = Math.pow(t, 2) * w2 + t * w1 + wc;
                    const xi = 1 - delta / 2 / Math.pow(wc, 2) * (Number.isFinite(t) ? Math.pow(t, 2) / wt : 1 / w2);
                    const xx = acos(xi);
                    const p = Number.isFinite(t) ? new V3(t, Math.pow(t, 2), 0).div(wt) : new V3(0, 1 / w2, 0);
                    const pLC = M4.forSys(center.negated(), f2, V3.Z, center)
                        .inversed()
                        .transformPoint(p);
                    const angle = pLC.angleXY();
                    if (t > 0 && pLC.y < 0) {
                        return angle + TAU;
                    }
                    else if (t < 0 && pLC.y > 0) {
                        return angle - TAU;
                    }
                    return angle;
                };
                result = EllipseCurve$$1.andFixTs(center, center.negated(), f2, tMapInv(tMin), tMapInv(tMax));
            }
            else {
                const tMapInv = (t) => sign$2(t) *
                    acosh(1 - delta / 2 / Math.pow(wc, 2) * (Number.isFinite(t) ? Math.pow(t, 2) / (Math.pow(t, 2) * w2 + t * w1 + wc) : 1 / w2));
                result = new HyperbolaCurve$$1(center, center.negated(), f2, tMapInv(tMin), tMapInv(tMax));
            }
            return result.transform(X);
        }
    }

    class ImplicitCurve$$1 extends Curve$$1 {
        constructor(points, tangents, dir = 1, generator, tMin = 1 == dir ? 0 : -(points.length - 1), tMax = 1 == dir ? points.length - 1 : 0) {
            super(tMin, tMax);
            this.points = points;
            this.tangents = tangents;
            this.dir = dir;
            this.generator = generator;
            assert(points.length > 2);
            assert(0 <= tMin && tMin <= points.length - 1, tMin, points.length);
            assert(0 <= tMax && tMax <= points.length - 1, tMax, points.length);
        }
        likeCurve(curve) {
            throw new Error('Method not implemented.');
        }
        toSource(rounder = x => x) {
            return this.generator || super.toSource(rounder);
        }
        containsPoint(p) {
            assertVectors(p);
            return !isNaN(this.pointT(p));
        }
        equals(obj) {
            return (this == obj ||
                (Object.getPrototypeOf(obj) == PICurve$$1.prototype &&
                    this.points[0].equals(obj.points[0]) &&
                    this.tangents[0].equals(obj.tangents[0])));
        }
        hashCode() {
            return [this.points[0], this.tangents[0]].hashCode();
        }
        tangentP(pWC) {
            assertVectors(pWC);
            assert(this.containsPoint(pWC), 'this.containsPoint(pWC)' + this.containsPoint(pWC));
            const t = this.pointT(pWC);
            return this.tangentAt(t);
        }
        tangentAt(t) {
            t = clamp(t, this.tMin, this.tMax);
            return V3.lerp(this.tangents[floor$1(t)], this.tangents[ceil(t)], t % 1);
        }
        at(t) {
            assert(isFinite(t));
            return V3.lerp(this.points[floor$1(t)], this.points[ceil(t)], t % 1);
        }
        getConstructorParameters() {
            throw new Error();
        }
        roots() {
            const allTs = arrayRange(0, this.points.length);
            return [allTs, allTs, allTs];
        }
        /**
         * @param mesh
         * @param res
         * @param radius default to 0. Use the shader to achieve dynamic scaling.
         * @param pointStep
         */
        addToMesh(mesh, res = 4, radius = 0, pointStep = 1) {
            const baseNormals = arrayFromFunction(res, i => V3.polar(1, TAU * i / res));
            const baseVertices = arrayFromFunction(res, i => V3.polar(radius, TAU * i / res));
            let prevTangent = V3.Z, prevMatrix = M4.IDENTITY;
            for (let i = 0; i < this.points.length; i += pointStep) {
                const start = mesh.vertices.length;
                if (0 !== i) {
                    for (let j = 0; j < res; j++) {
                        pushQuad$$1(mesh.TRIANGLES, true, start - res + j, start + j, start - res + (j + 1) % res, start + (j + 1) % res);
                    }
                }
                const point = this.points[i], tangent = this.tangents[i];
                const tangentMatrix = M4.rotateAB(prevTangent, tangent).times(prevMatrix);
                mesh.normals.push(...tangentMatrix.transformedVectors(baseNormals));
                const baseMatrix = M4.translate(point).times(tangentMatrix);
                mesh.vertices.push(...baseMatrix.transformedPoints(baseVertices));
                prevTangent = tangent;
                prevMatrix = tangentMatrix;
            }
        }
        rootsApprox() {
            const roots = [[], [], []];
            const points = this.points;
            let lastDiff = points[1].minus(points[0]);
            for (let i = 2; i < points.length; i++) {
                const diff = points[i].minus(points[i - 1]);
                for (let dim = 0; dim < 3; dim++) {
                    if (Math.sign(lastDiff.e(dim)) != Math.sign(diff.e(dim))) {
                        roots[dim].push(i);
                    }
                }
                lastDiff = diff;
            }
            return roots;
        }
        pointT(pWC) {
            const startT = arrayRange(floor$1(this.tMin), ceil(this.tMax), 1).withMax(t => -pWC.distanceTo(this.points[t]));
            if (undefined === startT)
                throw new Error();
            if (this.points[startT].like(pWC))
                return startT;
            const a = max$2(0, startT - 1), b = min$2(this.points.length - 1, startT + 1);
            const tangent = this.tangentAt(startT);
            const f = (t) => this.at(t)
                .to(pWC)
                .dot(tangent);
            // const df = (t: number) => -this.tangentAt(clamp(t, 0, this.points.length - 1)).dot(tangent)
            //checkDerivate(f, df, 0, this.points.length - 2, 3)
            const t = bisect(f, a, b, 32);
            if (!isFinite(t) || !eq0(this.at(t).distanceTo(pWC))) {
                return NaN;
            }
            return t;
        }
    }
    ImplicitCurve$$1.prototype.tIncrement = 1;
    /**
     * isInfosWithLine for an ImplicitCurve defined as the intersection of two surfaces.
     */
    function surfaceIsICurveIsInfosWithLine$$1(surface1, surface2, anchorWC, dirWC, tMin, tMax, lineMin, lineMax) {
        const line = new L3$$1(anchorWC, dirWC.unit());
        const psTs = surface1.isTsForLine(line);
        const isTs = surface2.isTsForLine(line);
        const commonTs = psTs.filter(psT => isTs.some(isT => eq(psT, isT)));
        const commonTInfos = commonTs.map(t => ({ tThis: 0, tOther: t / dirWC.length(), p: line.at(t) }));
        const result = commonTInfos.filter(info => this.containsPoint(info.p));
        result.forEach(info => (info.tThis = this.pointT(info.p)));
    }

    /**
     * Bezier curve with degree 3.
     */
    class BezierCurve$$1 extends Curve$$1 {
        constructor(p0, p1, p2, p3, tMin = -0.1, tMax = 1.1) {
            super(tMin, tMax);
            assertVectors(p0, p1, p2, p3);
            assert(isFinite(tMin) && isFinite(tMax));
            //assert(!L3.throughPoints(p0, p3).containsPoint(p1) || !L3.throughPoints(p0, p3).containsPoint(p2))
            this.p0 = p0;
            this.p1 = p1;
            this.p2 = p2;
            this.p3 = p3;
        }
        get points() {
            return [this.p0, this.p1, this.p2, this.p3];
        }
        /**
         * Returns a curve with curve.at(x) == V(x, ax³ + bx² + cx + d, 0)
         */
        static graphXY(a, b, c, d, tMin, tMax) {
            // d = p0y
            // c = -3 p0y + 3 p1y => p1y = c/3 + p0y
            // b = 3 p0y - 6 p1y + 3 p2y => p2y = b/3 - p0y + 2 p1y
            // a = -p0y + 3 p1y -3 p2y + p3y => p3y = a + p0y - 3 p1y + 3 p2y
            const p0y = d;
            const p1y = c / 3 + p0y;
            const p2y = b / 3 - p0y + 2 * p1y;
            const p3y = a + p0y - 3 * p1y + 3 * p2y;
            return new BezierCurve$$1(V$2(0, p0y), V$2(1 / 3, p1y), V$2(2 / 3, p2y), V$2(1, p3y), tMin, tMax);
        }
        static quadratic(a, b, c, tMin = 0, tMax = 1) {
            const line = L3$$1.throughPoints(a, c);
            if (line.containsPoint(b)) {
                return line;
            }
            else {
                // p1 = 1/3 a + 2/3 b
                // p2 = 1/3 c + 2/3 b
                return new BezierCurve$$1(a, b
                    .times(2)
                    .plus(a)
                    .div(3), b
                    .times(2)
                    .plus(c)
                    .div(3), c, tMin, tMax);
            }
        }
        /**
         * Returns a bezier curve which approximates a CCW unit circle arc starting at V3.X of angle phi
         * phi <= PI / 2 is recommended
         *
         * Formula from here: https://pomax.github.io/bezierinfo/#circles_cubic
         */
        static approximateUnitArc(phi) {
            const f = 4 / 3 * Math.tan(phi / 4);
            return new BezierCurve$$1(V3.X, new V3(1, f, 0), new V3(cos$2(phi) + f * sin$2(phi), sin$2(phi) - f * cos$2(phi), 0), V3.sphere(phi, 0), 0, 1);
        }
        getConstructorParameters() {
            return [this.p0, this.p1, this.p2, this.p3];
        }
        at(t) {
            // = s^3 p0 + 3 s^2 t p1 + 3 s t^2 p2 + t^3 p3
            assertNumbers(t);
            const p0 = this.p0, p1 = this.p1, p2 = this.p2, p3 = this.p3;
            const s = 1 - t, c0 = s * s * s, c1 = 3 * s * s * t, c2 = 3 * s * t * t, c3 = t * t * t;
            return new V3(p0.x * c0 + p1.x * c1 + p2.x * c2 + p3.x * c3, p0.y * c0 + p1.y * c1 + p2.y * c2 + p3.y * c3, p0.z * c0 + p1.z * c1 + p2.z * c2 + p3.z * c3);
        }
        /**
         * s := (1 - t)
         * at(t) := s³ p0 + 3 s² t p1 + 3 s t² p2 + t³ p3
         * tangent(t) := 3 s² (p1 - p0) + 6 s t (p2 - p1) + 3 t² (p3 - p2)
         *            := 3 (1 - t)² (p1 - p0) + 6 (1 - t) t (p2 - p1) + 3 t² (p3 - p2)
         *            := 3 (1 - 2 t + t²) (p1 - p0) + 6 (t - t²) (p2 - p1) + 3 t² (p3 - p2)
         *            := (3 (p3 - p2) - 6 (p2 - p1) + 3 (p1 - p0)) t²*
         *                + (-6 (p1 - p0) + (p2 - p1)) t
         *                + 3 (p1 - p0)
         */
        tangentAt(t) {
            assertNumbers(t);
            const p0 = this.p0, p1 = this.p1, p2 = this.p2, p3 = this.p3;
            const s = 1 - t, c01 = 3 * s * s, c12 = 6 * s * t, c23 = 3 * t * t;
            return new V3((p1.x - p0.x) * c01 + (p2.x - p1.x) * c12 + (p3.x - p2.x) * c23, (p1.y - p0.y) * c01 + (p2.y - p1.y) * c12 + (p3.y - p2.y) * c23, (p1.z - p0.z) * c01 + (p2.z - p1.z) * c12 + (p3.z - p2.z) * c23);
        }
        ddt(t) {
            assertNumbers(t);
            const p0 = this.p0, p1 = this.p1, p2 = this.p2, p3 = this.p3;
            const c012 = 6 * (1 - t), c123 = 6 * t;
            return new V3((p2.x - 2 * p1.x + p0.x) * c012 + (p3.x - 2 * p2.x + p1.x) * c123, (p2.y - 2 * p1.y + p0.y) * c012 + (p3.y - 2 * p2.y + p1.y) * c123, (p2.z - 2 * p1.z + p0.z) * c012 + (p3.z - 2 * p2.z + p1.z) * c123);
        }
        normalP(t) {
            const tangent = this.tangentAt(t);
            const rot = tangent.cross(this.ddt(t));
            return rot.cross(tangent);
        }
        isTsWithPlane(planeWC) {
            assertInst(P3$$1, planeWC);
            /*
             We are solving for t:
             n := plane.normal1
             this.at(t) DOT n == plane.w // according to plane definition
             (a t³ + b t² + c t + d) DOT n == plane.w // bezier curve as cubic equation
             (a DOT n) t³ + (b DOT n) t³ + (c DOT n) t + d DOT n - plane.w == 0 // multiply out DOT n, minus plane.w
             */
            const { p0, p1, p2, p3 } = this;
            const n = planeWC.normal1;
            const a = p1
                .minus(p2)
                .times(3)
                .minus(p0)
                .plus(p3);
            const b = p0
                .plus(p2)
                .times(3)
                .minus(p1.times(6));
            const c = p1.minus(p0).times(3);
            const d = p0;
            return solveCubicReal2(a.dot(n), b.dot(n), c.dot(n), d.dot(n) - planeWC.w).filter(t => between(t, this.tMin, this.tMax));
        }
        isTsWithSurface(surfaceWC) {
            if (surfaceWC instanceof CylinderSurface$$1) {
                const projPlane = new P3$$1(surfaceWC.dir.unit(), 0);
                const projThis = this.project(projPlane);
                const projEllipse = surfaceWC.baseCurve.project(projPlane);
                return projEllipse.isInfosWithBezier2D(projThis).map(info => info.tOther);
            }
            return super.isTsWithSurface(surfaceWC);
        }
        likeCurve(curve) {
            return (this == curve ||
                (hasConstructor(curve, BezierCurve$$1) &&
                    this.p0.like(curve.p0) &&
                    this.p1.like(curve.p1) &&
                    this.p2.like(curve.p2) &&
                    this.p3.like(curve.p3)));
        }
        equals(obj) {
            return (this == obj ||
                (hasConstructor(obj, BezierCurve$$1) &&
                    this.p0.equals(obj.p0) &&
                    this.p1.equals(obj.p1) &&
                    this.p2.equals(obj.p2) &&
                    this.p3.equals(obj.p3)));
        }
        hashCode() {
            let hashCode$$1 = 0;
            hashCode$$1 = hashCode$$1 * 31 + this.p0.hashCode();
            hashCode$$1 = hashCode$$1 * 31 + this.p1.hashCode();
            hashCode$$1 = hashCode$$1 * 31 + this.p2.hashCode();
            hashCode$$1 = hashCode$$1 * 31 + this.p3.hashCode();
            return hashCode$$1 | 0;
        }
        /**
         * Checks if this curve is colinear to the passed curve, i.e.
         * for every t:number there exists a s:number with this.at(t) = curve.at(s)
         */
        isColinearTo(curve) {
            if (this === curve || this.likeCurve(curve))
                return true;
            if (!(curve instanceof BezierCurve$$1))
                return false;
            // first, find out where/if curve.p0 and curve.p3 are on this
            // then split this at curve.p0 --> curve.p3 to compare points p1 and p2
            let curveP0T, curveP3T;
            // assign in if condition to exploit short-circuit
            if (isNaN((curveP0T = this.pointT(curve.p0))) || isNaN((curveP3T = this.pointT(curve.p3)))) {
                return false;
            }
            let thisSplit;
            if (eq(1, curveP0T)) {
                // this.split(curveP0T).right is degenerate in this case, so we need to handle it separately
                // this.split(curveP3T): 0 --> curveP3T --> 1
                // .right: curveP3T --> 1
                // .reversed(): 1 --> curveP3T
                thisSplit = this.split(curveP3T)[1].reversed();
            }
            else {
                // curveP3T describes the point on this
                // adjust it so it describes the same point on this.split(curveP0T).right
                // this:                       0           p0t        p3t      1
                //                             |            |          |       |
                // this.split(curveP0T).right:              0        p3tad     1
                const curveP3Tadjusted = (curveP3T - curveP0T) / (1 - curveP0T);
                thisSplit = this.split(curveP0T)[1].split(curveP3Tadjusted)[0];
            }
            return curve.likeCurve(thisSplit);
        }
        selectPart(t0, t1) {
            const t1Adjusted = (t1 - t0) / (1 - t0);
            return this.split(t0)[1].split(t1Adjusted)[0];
        }
        reversed() {
            return new BezierCurve$$1(this.p3, this.p2, this.p1, this.p0, 1 - this.tMax, 1 - this.tMin);
        }
        getCoefficients() {
            const { p0, p1, p2, p3 } = this;
            // calculate cubic equation coefficients
            // a t³ + b t² + c t + d = 0
            // multiplying out the cubic Bézier curve equation gives:
            // a = -p0 + 3 p1 - 3 p2 + p3
            // b = 3 p0 - 6 p1 + 3 p2
            // c = -3 p0 + 3 p1
            // d = p0 - p
            const a = p1
                .minus(p2)
                .times(3)
                .minus(p0)
                .plus(p3);
            const b = p0
                .plus(p2)
                .times(3)
                .minus(p1.times(6));
            const c = p1.minus(p0).times(3);
            const d = p0;
            return [a, b, c, d];
        }
        tangentCoefficients() {
            const { p0, p1, p2, p3 } = this;
            const p01 = p1.minus(p0), p12 = p2.minus(p1), p23 = p3.minus(p2);
            const a = p01
                .plus(p23)
                .times(3)
                .minus(p12.times(6));
            const b = p12.minus(p01).times(6);
            const c = p01.times(3);
            return [V3.O, a, b, c];
        }
        pointT2(p, tMin = this.tMin, tMax = this.tMax) {
            const t = this.closestTToPoint(p, undefined, tMin, tMax);
            assert(this.at(t).like(p));
            return t;
        }
        pointT(p) {
            const { p0, p1, p2, p3 } = this;
            // calculate cubic equation coefficients
            // a t³ + b t² + c t + d = 0
            // multiplying out the cubic Bézier curve equation gives:
            // a = -p0 + 3 p1 - 3 p2 + p3
            // b = 3 p0 - 6 p1 + 3 p2
            // c = -3 p0 + 3 p1
            // d = p0 - p
            const a = p1
                .minus(p2)
                .times(3)
                .minus(p0)
                .plus(p3);
            const b = p0
                .plus(p2)
                .times(3)
                .minus(p1.times(6));
            const c = p1.minus(p0).times(3);
            const d = p0.minus(p);
            // a t³ + b t² + c t + d = 0 is 3 cubic equations, some of which can be degenerate
            const maxDim = NLA_PRECISION < a.maxAbsElement()
                ? a.maxAbsDim()
                : NLA_PRECISION < b.maxAbsElement()
                    ? b.maxAbsDim()
                    : NLA_PRECISION < c.maxAbsElement()
                        ? c.maxAbsDim()
                        : assertNever();
            const results = solveCubicReal2(a.e(maxDim), b.e(maxDim), c.e(maxDim), d.e(maxDim)).filter(t => this.at(t).like(p));
            if (0 == results.length)
                return NaN;
            if (1 == results.length)
                return results[0];
            throw new Error('multiple intersection ' + this.toString() + p.sce);
        }
        pointT3(p) {
            const { p0, p1, p2, p3 } = this;
            // calculate cubic equation coefficients
            // a t³ + b t² + c t + d = 0
            // multiplying out the cubic Bézier curve equation gives:
            // a = -p0 + 3 p1 - 3 p2 + p3
            // b = 3 p0 - 6 p1 + 3 p2
            // c = -3 p0 + 3 p1
            // d = p0 - p
            const a = p1
                .minus(p2)
                .times(3)
                .minus(p0)
                .plus(p3)
                .els();
            const b = p0
                .plus(p2)
                .times(3)
                .minus(p1.times(6))
                .els();
            const c = p1
                .minus(p0)
                .times(3)
                .els();
            const d = p0.minus(p).els();
            let results = undefined;
            // assume passed point is on curve and that curve does not self-intersect,
            // i.e. there is exactly one correct result for t
            // try to find a single result in the x-dimension, if multiple are found,
            // filter them by checking the other dimensions
            for (let dim = 0; dim < 3; dim++) {
                if (eq0(a[dim]) && eq0(b[dim]) && eq0(c[dim])) {
                    // for case x:
                    // ax == bx == cx == 0 => x(t) = dx
                    // x value is constant
                    // if x == 0 for all t, this does not limit the result, otherwise, there is no result, i.e
                    // the passed point is not on the curve
                    if (!eq0(d[dim]))
                        return NaN;
                }
                else {
                    const newResults = solveCubicReal2(a[dim], b[dim], c[dim], d[dim]);
                    if (0 == newResults.length)
                        return NaN;
                    if (1 == newResults.length)
                        return newResults[0];
                    if (results) {
                        results = results.filter(t => newResults.some(t2 => eq(t, t2)));
                        if (0 == results.length)
                            return NaN;
                        if (1 == results.length)
                            return results[0];
                    }
                    else {
                        results = newResults;
                    }
                }
            }
            throw new Error('multiple intersection ' + results + this.toString() + p.sce);
        }
        transform(m4) {
            // perspective projection turn bezier curve into rational spline
            assert(m4.isNoProj(), m4.str);
            return new BezierCurve$$1(m4.transformPoint(this.p0), m4.transformPoint(this.p1), m4.transformPoint(this.p2), m4.transformPoint(this.p3), this.tMin, this.tMax);
        }
        isClosed() {
            return this.p0.like(this.p3);
        }
        isQuadratic() {
            return this.p0.lerp(this.p1, 1.5).like(this.p3.lerp(this.p2, 1.5));
        }
        debugInfo() {
            return {
                lines: [0, 1, 1, 2, 2, 3].map(i => this.points[i]),
                points: this.points,
            };
        }
        split(t) {
            // do de Casteljau's algorithm at t, the resulting points are the points needed to create 2 new curves
            const s = 1 - t;
            const { p0, p1, p2, p3 } = this;
            /*
            p3 // n3
            b01 = s p0 + t p1
            b11 = s p1 + t p2
            b21 = s p2 + t p3 // n2
            b02 = s b01 + t b11
            b12 = s b11 + t b21 // n1
            b03 = s b02 + t b12 // n0

            c01 =
            */
            const b01 = p0.times(s).plus(p1.times(t)), b11 = p1.times(s).plus(p2.times(t)), b21 = p2.times(s).plus(p3.times(t));
            const b02 = b01.times(s).plus(b11.times(t)), b12 = b11.times(s).plus(b21.times(t));
            const b03 = b02.times(s).plus(b12.times(t));
            return [new BezierCurve$$1(p0, b01, b02, b03), new BezierCurve$$1(b03, b12, b21, p3)];
        }
        containsPoint(p) {
            return isFinite(this.pointT(p));
        }
        roots() {
            /**
             *            := (3 (p3 - p2) - 6 (p2 - p1) + 3 (p1 - p0)) t²*
             *                + (-6 (p1 - p0) + 6 (p2 - p1)) t
             *                + 3 (p1 - p0)
             *                */
            const { p0, p1, p2, p3 } = this;
            const p01 = p1.minus(p0), p12 = p2.minus(p1), p23 = p3.minus(p2);
            const a = p01
                .plus(p23)
                .times(3)
                .minus(p12.times(6));
            const b = p12.minus(p01).times(6);
            const c = p01.times(3);
            return arrayFromFunction(3, dim => solveCubicReal2(0, a.e(dim), b.e(dim), c.e(dim)));
        }
        isInfosWithLine(anchorWC, dirWC, tMin, tMax, lineMin = -100000, lineMax = 100000) {
            // const dirLength = dirWC.length()
            // // TODO: no:
            // let result = Curve.ispsRecursive(this, this.tMin, this.tMax, new L3(anchorWC, dirWC.unit()), lineMin, lineMax)
            // result = fuzzyUniquesF(result, info => info.tOther)
            // result.forEach(info => (info.tOther /= dirLength))
            // return result
            // looking for this.at(t) == line.at(s)
            // this.at(t).x == anchorWC.x + dirWC.x * s
            // (this.at(t).x - anchorWC.x) / dirWC.x == s (analogue for y and z) (1x, 1y, 1z)
            // (1x) - (1y):
            // (this.at(t).x - anchorWC.x) / dirWC.x - (this.at(t).y - anchorWC.y) / dirWC.y == 0
            // (this.at(t).x - anchorWC.x) * dirWC.y - (this.at(t).y - anchorWC.y) * dirWC.x == 0 (2)
            // cubic equation params (see #pointT):
            const { p0, p1, p2, p3 } = this;
            const a = p1
                .minus(p2)
                .times(3)
                .minus(p0)
                .plus(p3);
            const v1 = V3.UNITS[a.minAbsDim()];
            const testPlane = P3$$1.forAnchorAndPlaneVectors(anchorWC, dirWC, v1.isParallelTo(dirWC) ? a : v1);
            return this.isTsWithPlane(testPlane)
                .map(tThis => {
                const p = this.at(tThis);
                return { tThis, tOther: L3$$1.pointT(anchorWC, dirWC, p), p };
            })
                .filter(info => L3$$1.containsPoint(anchorWC, dirWC, info.p));
        }
        closestPointToLine(line, tMin, tMax) {
            // (this(t)-line(s)) * line.dir == 0 (1)
            // (this(t)-line(s)) * this.tangentAt(t) == 0 (2)
            // this(t) * line.dir - line(s) * line.dir == 0
            // this(t) * line.dir - line.anchor * line.dir - s line.dir * line.dir == 0
            // this(t) * line.dir - line.anchor * line.dir == s (3)
            // insert (3) in (2)
            // (this(t)-line(this(t) * line.dir - line.anchor * line.dir)) * this.tangentAt(t) == 0 (4)
            // (4) is a 5th degree polynomial, solve numerically
            tMin = isFinite(tMin) ? tMin : this.tMin;
            tMax = isFinite(tMax) ? tMax : this.tMax;
            const anchorDotDir1 = line.anchor.dot(line.dir1);
            const f = (t) => {
                const atT = this.at(t);
                return atT.minus(line.at(atT.dot(line.dir1) - anchorDotDir1)).dot(this.tangentAt(t));
            };
            const STEPS = 32;
            const startT = arrayFromFunction(STEPS, i => tMin + (tMax - tMin) * i / STEPS).withMax(t => -f(t));
            return newtonIterate1d(f, startT, 8);
        }
        /**
         *
         * @param bezier
         * @param tMin
         * @param tMax
         * @param sMin
         * @param {number=} sMax
         * @returns
         */
        isInfosWithBezier3(bezier, tMin, tMax, sMin, sMax) {
            const handleStartTS = (startT, startS) => {
                if (!result.some(info => eq(info.tThis, startT) && eq(info.tOther, startS))) {
                    const f1 = (t, s) => this.tangentAt(t).dot(this.at(t).minus(bezier.at(s)));
                    const f2 = (t, s) => bezier.tangentAt(s).dot(this.at(t).minus(bezier.at(s)));
                    // f = (b1, b2, t1, t2) = b1.tangentAt(t1).dot(b1.at(t1).minus(b2.at(t2)))
                    const fdt1 = (b1, b2, t1, t2) => b1.ddt(t1).dot(b1.at(t1).minus(b2.at(t2))) + b1.tangentAt(t1).squared();
                    const fdt2 = (b1, b2, t1, t2) => -b1.tangentAt(t1).dot(b2.tangentAt(t2));
                    const ni = newtonIterate2dWithDerivatives(f1, f2, startT, startS, 16, fdt1.bind(undefined, this, bezier), fdt2.bind(undefined, this, bezier), (t, s) => -fdt2(bezier, this, s, t), (t, s) => -fdt1(bezier, this, s, t));
                    result.push({ tThis: ni.x, tOther: ni.y, p: this.at(ni.x) });
                }
            };
            tMin = undefined !== tMin ? tMin : this.tMin;
            tMax = undefined !== tMax ? tMax : this.tMax;
            sMin = undefined !== sMin ? sMin : bezier.tMin;
            sMax = undefined !== sMax ? sMax : bezier.tMax;
            // stack of indices:
            const indices = [tMin, tMax, sMin, sMax];
            const result = [];
            while (indices.length) {
                const i = indices.length - 4;
                const tMin = indices[i], tMax = indices[i + 1], sMin = indices[i + 2], sMax = indices[i + 3];
                indices.length -= 4;
                const thisAABB = this.getAABB(tMin, tMax);
                const otherAABB = bezier.getAABB(sMin, sMax);
                // console.log(tMin, tMax, sMin, sMax, thisAABB.sce, otherAABB.sce)
                if (thisAABB && otherAABB && thisAABB.intersectsAABB2d(otherAABB)) {
                    const tMid = (tMin + tMax) / 2;
                    const sMid = (sMin + sMax) / 2;
                    const EPS$$1 = 0.00001;
                    if (tMax - tMin < EPS$$1 || sMax - sMin < EPS$$1) {
                        console.log(tMin, tMax, sMin, sMax);
                        console.log(thisAABB.sce);
                        console.log(otherAABB.sce);
                        console.log(tMid, sMid);
                        handleStartTS(tMid, sMid);
                    }
                    else {
                        indices.push(tMin, tMid, sMin, sMid, tMin, tMid, sMid, sMax, tMid, tMax, sMin, sMid, tMid, tMax, sMid, sMax);
                    }
                }
            }
            return result;
        }
        isInfosWithBezier(bezier, tMin, tMax, sMin, sMax) {
            tMin = undefined !== tMin ? tMin : this.tMin;
            tMax = undefined !== tMax ? tMax : this.tMax;
            sMin = undefined !== sMin ? sMin : bezier.tMin;
            sMax = undefined !== sMax ? sMax : bezier.tMax;
            assertf(() => tMin < tMax);
            assertf(() => sMin < sMax);
            const result = [];
            const likeCurves = this.likeCurve(bezier), colinearCurves = this.isColinearTo(bezier);
            if (likeCurves || colinearCurves) {
                if (!likeCurves) {
                    // only colinear
                    // recalculate sMin and sMax so they are valid on this, from then on we can ignore bezier
                    sMin = this.pointT(bezier.at(sMin));
                    sMax = this.pointT(bezier.at(sMax));
                }
                tMin = Math.min(tMin, sMin);
                tMax = Math.max(tMax, sMax);
                const splits = fuzzyUniques(this.roots()
                    .concatenated()
                    .filter(isFinite)
                    .concat([tMin, tMax])).sort(MINUS);
                //const aabbs = arrayFromFunction(splits.length - 1, i => this.getAABB(splits[i], splits[i + 1]))
                Array.from(combinations(splits.length - 1)).forEach(({ i, j }) => {
                    // adjacent curves can't intersect
                    if (Math.abs(i - j) > 2) {
                        // console.log(splits[i], splits[i + 1], splits[j], splits[j + 1], aabbs[i], aabbs[j])
                        //findRecursive(splits[i], splits[i + 1], splits[j], splits[j + 1], aabbs[i], aabbs[j])
                        result.push(...Curve$$1.ispsRecursive(this, splits[i], splits[i + 1], bezier, splits[j], splits[j + 1]));
                    }
                });
            }
            else {
                return Curve$$1.ispsRecursive(this, tMin, tMax, bezier, sMin, sMax);
            }
            return result;
        }
        selfIntersectionsInfo() {
            return this.isInfosWithBezier(this);
        }
        isInfosWithCurve(curve) {
            if (curve instanceof L3$$1) {
                return this.isInfosWithLine(curve.anchor, curve.dir1, curve.tMin, curve.tMax);
            }
            if (curve instanceof BezierCurve$$1) {
                return this.isInfosWithBezier(curve);
            }
            return curve.isInfosWithCurve(this).map(({ tThis, tOther, p }) => ({ tThis: tOther, tOther: tThis, p }));
        }
        /**
         * Approximate this bezier curve with a number of circular segments. This curve is recursively split in half until
         * segments are close enough (relative error < REL_ERR in two test points) to an arc which goes through the start,
         * end and mid points of the segment.
         * @returns each EllipseCurve is circular and their tMin and tMax respectively define their start and end points.
         * @param t0 Start parameter of segment which should be approximated.
         * @param t1 End parameter of segment which should be approximated.
         * @param REL_ERROR max allowable relative error.
         * @param result Resulting circle arcs are stored in this array. Mainly used by the recursion.
         */
        circleApprox(t0 = this.tMin, t1 = this.tMax, REL_ERROR = 1 / 1024, result = []) {
            const a = this.at(t0), b = this.at(t1), tMid = (t0 + t1) / 2, pMid = this.at(tMid), abLine = L3$$1.throughPoints(a, b);
            if (!abLine.containsPoint(pMid) && between(abLine.pointT(pMid), 0, abLine.pointT(b))) {
                const arc = EllipseCurve$$1.circleThroughPoints(a, pMid, b), arcRadius = arc.f1.length(), pTest1 = this.at(lerp(t0, t1, 0.25)), pTest2 = this.at(lerp(t0, t1, 0.75));
                if (abs$3(arc.center.distanceTo(pTest1) / arcRadius - 1) <= REL_ERROR &&
                    abs$3(arc.center.distanceTo(pTest2) / arcRadius - 1) <= REL_ERROR) {
                    result.push(arc);
                    return result;
                }
            }
            this.circleApprox(t0, tMid, REL_ERROR, result);
            this.circleApprox(tMid, t1, REL_ERROR, result);
            return result;
        }
    }
    /**
     * https://en.wikipedia.org/wiki/Cubic_function#/media/File:Graph_of_cubic_polynomial.svg
     */
    BezierCurve$$1.EX2D = BezierCurve$$1.graphXY(2, -3, -3, 2);
    BezierCurve$$1.EX3D = new BezierCurve$$1(V3.O, V$2(-0.1, -1, 1), V$2(1.1, 1, 1), V3.X);
    BezierCurve$$1.QUARTER_CIRCLE = BezierCurve$$1.approximateUnitArc(PI$4 / 2);
    BezierCurve$$1.prototype.hlol = Curve$$1.hlol++;
    BezierCurve$$1.prototype.tIncrement = 1 / 80;

    /**
     * x² - y² = 1
     * C(t) = center + f1 * cosh(t) + f2 * sinh(t)
     */
    class HyperbolaCurve$$1 extends XiEtaCurve$$1 {
        constructor(center, f1, f2, tMin = -7, tMax = 7) {
            super(center, f1, f2, tMin, tMax);
        }
        static XYLCValid(pLC) {
            return pLC.x > 0 && eq(1, pLC.x * pLC.x - pLC.y * pLC.y);
        }
        static XYLCPointT(pLC) {
            return Math.asinh(pLC.y);
        }
        /**
         * http://www.wolframalpha.com/input/?i=x%C2%BRep-y%C2%BRep%3D1,ax%2Bby%3Dc
         * Minor empiric test shows asinh(eta) consistently gets more accurate results than atanh(eta/xi)
         */
        static intersectionUnitLine(a, b, c) {
            if (eq0(b)) {
                const sqrtVal = snap0(Math.pow(c, 2) / Math.pow(a, 2) - 1);
                if (sqrtVal < 0 || c * a < 0) {
                    return [];
                }
                else if (sqrtVal == 0) {
                    return [0];
                }
                const eta1 = Math.sqrt(sqrtVal);
                return [-Math.asinh(eta1), Math.asinh(eta1)];
            }
            else if (eq(abs$3(a), abs$3(b))) {
                if (le$1(c * a, 0)) {
                    return [];
                }
                const eta = sign$2(a * b) * (Math.pow(c, 2) - Math.pow(a, 2)) / 2 / a / c;
                return [Math.asinh(eta)];
            }
            else {
                const sqrtVal = snap0(Math.pow(b, 2) * (-(Math.pow(a, 2)) + Math.pow(b, 2) + Math.pow(c, 2)));
                if (sqrtVal < 0) {
                    return [];
                }
                const xi1 = (a * c - Math.sqrt(sqrtVal)) / (Math.pow(a, 2) - Math.pow(b, 2));
                const xi2 = (a * c + Math.sqrt(sqrtVal)) / (Math.pow(a, 2) - Math.pow(b, 2));
                const eta1 = (Math.pow(b, 2) * c - a * Math.sqrt(sqrtVal)) / (b * (Math.pow(b, 2) - Math.pow(a, 2)));
                const eta2 = (Math.pow(b, 2) * c + a * Math.sqrt(sqrtVal)) / (b * (Math.pow(b, 2) - Math.pow(a, 2)));
                return [xi1 > 0 && Math.asinh(eta1), xi2 > 0 && Math.asinh(eta2)].filter((x) => x !== false);
            }
        }
        at(t) {
            assertNumbers(t);
            // = center + f1 cosh t + f2 sinh t
            return this.center.plus(this.f1.times(Math.cosh(t))).plus(this.f2.times(Math.sinh(t)));
        }
        toString() {
            return `${this.center} + ${this.f1} * cosh(t) + ${this.f2} * sinh(t)`;
        }
        tangentAt(t) {
            assertNumbers(t);
            // = f1 sinh t + f2 cosh t
            return this.f1.times(Math.sinh(t)).plus(this.f2.times(Math.cosh(t)));
        }
        tangentAt2(xi, eta) {
            assertNumbers(xi, eta);
            // = f1 eta + f2 xi
            return this.f1.times(eta).plus(this.f2.times(xi));
        }
        ddt(t) {
            assertNumbers(t);
            return this.f1.times(Math.cosh(t)).plus(this.f2.times(Math.sinh(t)));
        }
        isColinearTo(curve) {
            if (!hasConstructor(curve, HyperbolaCurve$$1))
                return false;
            if (!curve.center || !this.center.like(curve.center)) {
                return false;
            }
            if (this === curve) {
                return true;
            }
            const { f1: f1, f2: f2 } = this.rightAngled(), { f1: c1, f2: c2 } = curve.rightAngled();
            return eq(f1.squared(), Math.abs(f1.dot(c1))) && eq(f2.squared(), Math.abs(f2.dot(c2)));
        }
        reversed() {
            return new HyperbolaCurve$$1(this.center, this.f1, this.f2.negated(), -this.tMax, -this.tMin);
        }
        rightAngled() {
            const f1 = this.f1, f2 = this.f2, a = f1.dot(f2), b = f2.squared() + f1.squared();
            if (eq0(a)) {
                return this;
            }
            const g1 = 2 * a, g2 = b + Math.sqrt(b * b - 4 * a * a);
            const { x1: xi, y1: eta } = intersectionUnitHyperbolaLine$$1(g1, g2, 0);
            return new HyperbolaCurve$$1(this.center, f1.times(xi).plus(f2.times(eta)), f1.times(eta).plus(f2.times(xi)));
        }
        eccentricity() {
            const mainAxes = this.rightAngled();
            const f1length = mainAxes.f1.length(), f2length = mainAxes.f1.length();
            const [a, b] = f1length > f2length ? [f1length, f2length] : [f2length, f1length];
            return Math.sqrt(1 + b * b / a / a);
        }
        roots() {
            // tangent(t) = f1 sinh t + f2 cosh t = 0
            // tangentAt2(xi, eta) = f1 eta + f2 xi = V3.O
            // xi² - eta² = 1 (by def for hyperbola)
            return arrayFromFunction(3, dim => {
                const a = this.f2.e(dim), b = this.f1.e(dim);
                return HyperbolaCurve$$1.intersectionUnitLine(a, b, 0);
            });
        }
        transform4(m4) {
            const tMap = (t) => sign$2(t) * min$2(10, sqrt$1(-(1 - cosh(t)) / (1 + cosh(t))));
            // prettier-ignore
            const parabolaToUnitHyperbola = new M4(0, 1, 0, 1, 2, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 1);
            return parabola4Projection$$1(M4.product(m4, this.matrix, parabolaToUnitHyperbola), tMap(this.tMin), tMap(this.tMax));
        }
    }
    HyperbolaCurve$$1.XY = new HyperbolaCurve$$1(V3.O, V3.X, V3.Y);
    HyperbolaCurve$$1.prototype.tIncrement = PI$4 / 16;

    /**
     * A 3-dimensional line. Defined by an anchor and a normalized direction vector.
     */
    class L3$$1 extends Curve$$1 {
        constructor(anchor, // line anchor
        dir1, // normalized line dir
        tMin = -4096, tMax = 4096) {
            super(tMin, tMax);
            this.anchor = anchor;
            this.dir1 = dir1;
            assertVectors(anchor, dir1);
            assert(dir1.hasLength(1), 'dir must be unit' + dir1);
            assertf(() => !Number.isNaN(anchor.x));
        }
        isTsWithSurface(surface) {
            return surface.isTsForLine(this);
        }
        static throughPoints(anchor, b, tMin = 0, tMax) {
            const dir = b.minus(anchor);
            return new L3$$1(anchor, dir.unit(), tMin, undefined !== tMax ? tMax : dir.length());
        }
        static anchorDirection(anchor, dir, min = 0, max = dir.length()) {
            const dir1 = dir.unit();
            return new L3$$1(anchor, dir1, 'number' == typeof min ? min : min.minus(anchor).dot(dir1), 'number' == typeof max ? max : max.minus(anchor).dot(dir1));
        }
        static pointT(anchor, dir, x) {
            assertVectors(anchor, dir, x);
            return x.minus(anchor).dot(dir) / dir.squared();
        }
        static at(anchor, dir, t) {
            return anchor.plus(dir.times(t));
        }
        /**
         * Create new line which is the intersection of two planes. Throws error if planes are parallel.
         * @param plane1
         * @param plane2
         */
        static fromPlanes(plane1, plane2) {
            assertInst(P3$$1, plane1, plane2);
            const dir = plane1.normal1.cross(plane2.normal1);
            const length = dir.length();
            if (length < 1e-10) {
                throw new Error('Parallel planes');
            }
            return plane1.intersectionWithPlane(plane2);
        }
        static containsPoint(anchor, dir, p) {
            const closestT = L3$$1.pointT(anchor, dir, p);
            const distance = L3$$1.at(anchor, dir, closestT).distanceTo(p);
            return eq0(distance);
        }
        roots() {
            return [[], [], []];
        }
        containsPoint(p) {
            assertVectors(p);
            const dist = this.distanceToPoint(p);
            assertNumbers(dist);
            return eq0(dist);
        }
        likeCurve(curve) {
            return (this == curve || (hasConstructor(curve, L3$$1) && this.anchor.like(curve.anchor) && this.dir1.like(curve.dir1)));
        }
        equals(obj) {
            return (this == obj ||
                (Object.getPrototypeOf(obj) == L3$$1.prototype && this.anchor.equals(obj.anchor) && this.dir1.equals(obj.dir1)));
        }
        isColinearTo(obj) {
            return obj instanceof L3$$1 && this.containsPoint(obj.anchor) && eq(1, Math.abs(this.dir1.dot(obj.dir1)));
        }
        distanceToLine(line) {
            assertInst(L3$$1, line);
            if (this.isParallelToLine(line)) {
                return this.distanceToPoint(line.anchor);
            }
            const dirCross1 = this.dir1.cross(line.dir1).unit();
            const anchorDiff = this.anchor.minus(line.anchor);
            return Math.abs(anchorDiff.dot(dirCross1));
        }
        distanceToPoint(x) {
            assertVectors(x);
            // See http://mathworld.wolfram.com/Point-LineDistance3-Dimensional.html
            const t = x.minus(this.anchor).dot(this.dir1);
            return this.at(t).distanceTo(x);
            //return x.minus(this.anchor).cross(x.minus(this.anchor.plus(this.dir1))).length()
        }
        asSegmentDistanceToPoint(x, sStart, sEnd) {
            let t = x.minus(this.anchor).dot(this.dir1);
            t = clamp(t, sStart, sEnd);
            return this.at(t)
                .minus(x)
                .length();
        }
        asSegmentDistanceToLine(line, sStart, sEnd) {
            assertInst(L3$$1, line);
            const dirCross = this.dir1.cross(line.dir1);
            const div = dirCross.squared();
            if (eq0(div)) {
                return undefined;
            } // lines parallel
            const anchorDiff = line.anchor.minus(this.anchor);
            // check if distance is zero (see also L3.distanceToLine)
            if (!eq0(anchorDiff.dot(dirCross.unit()))) {
                return undefined;
            }
            let t = this.infoClosestToLine(line).t;
            t = clamp(t, sStart, sEnd);
            return this.at(clamp(t, sStart, sEnd));
        }
        at(t) {
            assertNumbers(t);
            return this.anchor.plus(this.dir1.times(t));
        }
        /**
         * This function returns lambda for a given point x
         *
         * Every point x on this line is described by the equation
         *      x = this.anchor + lambda * this.dir1 | - this.anchor
         *      x - this.anchor = lambda * this.dir1 | DOT this.dir1
         *      (x - this.anchor) DOT this.dir1 = lambda (dir1² is 1 as |dir1| == 1)
         *
         *  @param x
         *  @returns
         */
        pointT(x) {
            assertVectors(x);
            const t = x.minus(this.anchor).dot(this.dir1);
            return t;
        }
        /**
         * Returns true if the line is parallel (this.dir = line.dir || this.dir = -line.dir) to the argument.
         */
        isParallelToLine(line) {
            assertInst(L3$$1, line);
            // we know that 1 == this.dir1.length() == line.dir1.length(), we can check for parallelity simpler than
            // isParallelTo()
            return eq(1, Math.abs(this.dir1.dot(line.dir1)));
        }
        angleToLine(line) {
            assertInst(L3$$1, line);
            return this.dir1.angleTo(line.dir1);
        }
        /**
         *
         * @param line
         * @returns {boolean} If the distance between the lines is zero
         */
        intersectsLine(line) {
            return eq0(this.distanceToLine(line));
        }
        isInfosWithCurve(curve) {
            if (curve instanceof L3$$1) {
                return this.isInfosWithLine(curve.anchor, curve.dir1);
            }
            return super.isInfosWithCurve(curve);
        }
        isInfosWithLine(anchorWC, dirWC) {
            const dirCross = this.dir1.cross(dirWC);
            const div = dirCross.squared();
            if (eq0(div)) {
                // lines are parallel
                return [];
            }
            const anchorDiff = anchorWC.minus(this.anchor);
            if (eq0(anchorDiff.dot(dirCross))) {
                const tThis = anchorDiff.cross(dirWC).dot(dirCross) / div;
                const tOther = anchorDiff.cross(this.dir1).dot(dirCross) / div;
                const p = this.at(tThis);
                return [{ tThis: tThis, tOther: tOther, p: p }];
            }
            return [];
        }
        isInfoWithLine(line) {
            // todo infos?
            assertInst(L3$$1, line);
            const dirCross = this.dir1.cross(line.dir1);
            const div = dirCross.squared();
            if (eq0(div)) {
                return undefined;
            } // lines parallel
            const anchorDiff = line.anchor.minus(this.anchor);
            // check if distance is zero (see also L3.distanceToLine)
            if (!eq0(anchorDiff.dot(dirCross.unit()))) {
                return undefined;
            }
            const t = anchorDiff.cross(line.dir1).dot(dirCross) / div;
            return this.at(t);
        }
        /**
         * returns s and t with this.at(s) == line.at(t)
         */
        intersectionLineST(line) {
            // the two points on two lines the closest two each other are the ones whose
            // connecting
            // TODO Where does this come from?
            // TODO: return value when no IS?
            assertInst(L3$$1, line);
            const dirCross = this.dir1.cross(line.dir1);
            const div = dirCross.squared();
            const anchorDiff = line.anchor.minus(this.anchor);
            const s = anchorDiff.cross(this.dir1).dot(dirCross) / div;
            const t = anchorDiff.cross(line.dir1).dot(dirCross) / div;
            return { s: s, t: t };
            // console.log(segmentIntersectsRay, a, b, "ab", ab, "p", p, "dir", dir, s > 0 && t / div >= 0 && t / div <= 1,
            // "s", s, "t", t, "div", div)
        }
        ddt() {
            return V3.O;
        }
        getConstructorParameters() {
            return [this.anchor, this.dir1];
        }
        closestTToPoint(p) {
            // similar logic as pointT; we project the vector (anchor -> p) onto dir1, then add anchor back to it
            const nearestT = p.minus(this.anchor).dot(this.dir1);
            return nearestT;
        }
        infoClosestToLine(line) {
            /*
             line = a + s*b
             this = c + t*d

             (this - line) * b = 0
             (this - line) * d = 0

             (a + s*b - c - t*d) * b = 0
             (a + s*b - c - t*d) * d = 0

             (a - c + s*b - t*d) * b = 0
             (a - c + s*b - t*d) * d = 0

             (a - c)*b + (s*b - t*d)*b = 0
             (a - c)*d + (s*b - t*d)*d = 0

             (a - c)*b + s*(b*b) - t*(d*b) = 0
             (a - c)*d + s*(b*d) - t*(d*d) = 0

             s = (t*(d*b) - (a - c)*b) / (b*b)
             =>
             (a - c)*d + (t*(d*b) - (a - c)*b) / (b*b)*(b*d) - t*(d*d) = 0 | * (b*b)
             (a - c)*d * (b*b) + (t*(d*b) - (a - c)*b)*(b*d) - t*(d*d) * (b*b) = 0
             (a - c)*d * (b*b) + t*(d*b)*(b*d) - (a - c)*b*(b*d) - t*(d*d) * (b*b) = 0
             t = ((a - c)*b*(b*d) - (a - c)*d * (b*b)) / ((d*b)*(b*d) - (d*d) * (b*b))
             */
            if (this.isParallelToLine(line)) {
                return { t: NaN, s: NaN, distance: this.distanceToLine(line) };
            }
            const a = line.anchor, b = line.dir1, c = this.anchor, d = this.dir1;
            const bd = b.dot(d), bb = b.squared(), dd = d.squared(), ca = a.minus(c), divisor = bd * bd - dd * bb;
            const t = (ca.dot(b) * bd - ca.dot(d) * bb) / divisor;
            const s = (ca.dot(b) * dd - ca.dot(d) * bd) / divisor;
            return {
                t: t,
                s: s,
                closest: this.at(t),
                closest2: line.at(s),
                distance: this.at(t).distanceTo(line.at(s)),
            };
        }
        intersectionWithPlane(plane) {
            // plane: plane.normal1 * p = plane.w
            // line: p=line.point + lambda * line.dir1
            const lambda = (plane.w - plane.normal1.dot(this.anchor)) / plane.normal1.dot(this.dir1);
            const point = this.anchor.plus(this.dir1.times(lambda));
            return point;
        }
        tangentAt() {
            return this.dir1;
        }
        isTWithPlane(plane) {
            // plane: plane.normal1 * p = plane.w
            // line: p=line.point + lambda * line.dir1
            const div = plane.normal1.dot(this.dir1);
            if (eq0(div))
                return NaN;
            const lambda = (plane.w - plane.normal1.dot(this.anchor)) / div;
            return lambda;
        }
        reversed() {
            return new L3$$1(this.anchor, this.dir1.negated(), -this.tMax, -this.tMin);
        }
        isTsWithPlane(planeWC) {
            const t = this.isTWithPlane(planeWC);
            return isNaN(t) ? [] : [t];
        }
        flipped() {
            return new L3$$1(this.anchor, this.dir1.negated());
        }
        transform(m4) {
            const newAnchor = m4.transformPoint(this.anchor);
            const newDir = m4.transformVector(this.dir1);
            return new L3$$1(newAnchor, newDir.unit(), this.tMin * newDir.length(), this.tMax * newDir.length());
        }
        transform4(m4) {
            const vanishingPlane = P3$$1.vanishingPlane(m4);
            if (!vanishingPlane)
                return this.transform(m4);
            const pMin = this.at(this.tMin);
            const pMax = this.at(this.tMax);
            if (le$1(vanishingPlane.distanceToPointSigned(pMin), 0) || le$1(vanishingPlane.distanceToPointSigned(pMax), 0)) {
                throw new Error('line must be in front of vanishingPlane in [tMin, tMax]');
            }
            const anchor = lt(0, vanishingPlane.distanceToPointSigned(this.anchor))
                ? this.anchor
                : this.at((this.tMin + this.tMax) / 2);
            const transformedAnchor = m4.timesVector(VV(anchor.x, anchor.y, anchor.z, 1));
            const transformedVector = m4.timesVector(VV(this.dir1.x, this.dir1.y, this.dir1.z, 0));
            const newDir = transformedVector
                .times(transformedAnchor.w)
                .minus(transformedAnchor.times(transformedVector.w))
                .V3();
            const newAnchor = transformedAnchor.p3();
            return L3$$1.anchorDirection(newAnchor, newDir, m4.transformPoint(pMin), m4.transformPoint(pMax));
        }
        hashCode() {
            return this.anchor.hashCode() * 31 + this.dir1.hashCode();
        }
    }
    L3$$1.X = new L3$$1(V3.O, V3.X);
    L3$$1.Y = new L3$$1(V3.O, V3.Y);
    L3$$1.Z = new L3$$1(V3.O, V3.Z);
    L3$$1.prototype.hlol = Curve$$1.hlol++;
    L3$$1.prototype.tIncrement = 256;

    class PICurve$$1 extends ImplicitCurve$$1 {
        constructor(points, tangents, parametricSurface, implicitSurface, pmPoints, pmTangents, stepSize, dir = 1, generator, tMin, tMax) {
            super(points, tangents, dir, generator, tMin, tMax);
            this.parametricSurface = parametricSurface;
            this.implicitSurface = implicitSurface;
            this.pmPoints = pmPoints;
            this.pmTangents = pmTangents;
            this.stepSize = stepSize;
            assert(Array.isArray(pmPoints));
            assert(dir == 1);
            assert(stepSize <= 1);
            const pf = parametricSurface.pUVFunc();
            const dpdu = parametricSurface.dpdu();
            const dpdv = parametricSurface.dpdv();
            const didp = implicitSurface.didp.bind(implicitSurface);
            this.didu = (u, v) => didp(pf(u, v)).dot(dpdu(u, v));
            this.didv = (u, v) => didp(pf(u, v)).dot(dpdv(u, v));
            for (let i = 0; i < points.length - 1; i++) {
                assert(!points[i].equals(points[i + 1]));
                //assert(parametricSurface.pUV(pmPoints[i].x, pmPoints[i].y).equals(points[i]))
            }
            {
                const ps = this.parametricSurface;
                const is = implicitSurface;
                const pFunc = ps.pUVFunc(), iFunc = is.implicitFunction();
                const dpdu = ps.dpdu();
                const dpdv = ps.dpdv();
                const didp = is.didp.bind(is);
                const mf = MathFunctionR2R$$1.forFFxFy((x, y) => iFunc(pFunc(x, y)), (u, v) => didp(pFunc(u, v)).dot(dpdu(u, v)), (u, v) => didp(pFunc(u, v)).dot(dpdv(u, v)));
                const { points } = followAlgorithm2d$$1(mf, this.pmPoints[0], stepSize, ps, (u, v) => is.containsPoint(pFunc(u, v)), this.pmPoints.last, this.pmTangents[0]);
                if (points.length !== this.points.length) {
                    followAlgorithm2d$$1(mf, this.pmPoints[0], stepSize, ps, (u, v) => is.containsPoint(pFunc(u, v)), this.pmPoints.last, this.pmTangents[0]);
                }
                assert(points.length == this.points.length, points.length, this.points.length);
            }
        }
        static forParametricStartEnd(ps, is, pmStart, pmEnd, stepSize = 0.02, startPMTangent, tMin, tMax) {
            const pFunc = ps.pUVFunc(), iFunc = is.implicitFunction();
            const dpdu = ps.dpdu();
            const dpdv = ps.dpdv();
            const didp = is.didp.bind(is);
            const mf = MathFunctionR2R$$1.forFFxFy((x, y) => iFunc(pFunc(x, y)), (u, v) => didp(pFunc(u, v)).dot(dpdu(u, v)), (u, v) => didp(pFunc(u, v)).dot(dpdv(u, v)));
            const { points, tangents } = followAlgorithm2d$$1(mf, pmStart, stepSize, ps, (u, v) => is.containsPoint(pFunc(u, v)), pmEnd, startPMTangent);
            return PICurve$$1.forParametricPointsTangents(ps, is, points, tangents, stepSize, 1, tMin, tMax);
        }
        static forStartEnd(ps, is, start, end, stepSize = 0.02, startTangent, min, max) {
            const startPM = ps.uvP(start);
            const dpdu = ps.dpdu()(startPM.x, startPM.y), dpdv = ps.dpdv()(startPM.x, startPM.y);
            const startPMTangent = startTangent &&
                M4.forSys(dpdu, dpdv)
                    .inversed()
                    .transformVector(startTangent);
            // assert(dpdu.times(startPMTangent.x).plus(dpdv.times(startPMTangent.y)).like(startTangent))
            const curve = PICurve$$1.forParametricStartEnd(ps, is, startPM, ps.uvP(end), stepSize, startPMTangent);
            return curve.withBounds(min && curve.pointT(min), max && curve.pointT(max));
        }
        static forParametricPointsTangents(ps, is, pmPoints, pmTangents, stepSize, dir = 1, tMin, tMax) {
            const pFunc = ps.pUVFunc(), dpdu = ps.dpdu();
            const dpdv = ps.dpdv();
            const points = pmPoints.map(({ x, y }) => pFunc(x, y));
            const tangents = pmPoints.map(({ x: u, y: v }, i) => {
                const ds = dpdu(u, v);
                const dt = dpdv(u, v);
                return ds.times(pmTangents[i].x).plus(dt.times(pmTangents[i].y));
                //const p = points[i]
                //return cs.normalP(p).cross(ses.normalP(p))
                //	.toLength(ds.times(pmTangents[i].x).plus(dt.times(pmTangents[i].y)).length())
            });
            return new PICurve$$1(points, tangents, ps, is, pmPoints, pmTangents, stepSize, dir, undefined, tMin, tMax);
        }
        getConstructorParameters() {
            return [
                this.points,
                this.tangents,
                this.parametricSurface,
                this.implicitSurface,
                this.pmPoints,
                this.pmTangents,
                this.stepSize,
                this.dir,
                this.generator,
            ];
        }
        implicitCurve() {
            const pF = this.parametricSurface.pUVFunc();
            const iF = this.implicitSurface.implicitFunction();
            return (u, v) => iF(pF(u, v));
        }
        isColinearTo(curve) {
            if (curve instanceof PICurve$$1) {
                if (this.equals(curve)) {
                    return true;
                }
                if (this.parametricSurface.isCoplanarTo(curve.parametricSurface) &&
                    this.implicitSurface.isCoplanarTo(curve.implicitSurface)) ;
                return false;
            }
            else {
                return false;
            }
        }
        containsPoint(p) {
            assertVectors(p);
            const t = this.pointT(p);
            return !isNaN(t) && this.isValidT(t);
        }
        equals(obj) {
            return (Object.getPrototypeOf(obj) == PICurve$$1.prototype &&
                this.parametricSurface.equals(obj.parametricSurface) &&
                this.implicitSurface.equals(obj.implicitSurface) &&
                this.points[0].equals(obj.points[0]) &&
                this.tangents[0].equals(obj.tangents[0]) &&
                this.dir === obj.dir);
        }
        hashCode() {
            let hashCode$$1 = 0;
            hashCode$$1 = hashCode$$1 * 31 + this.parametricSurface.hashCode();
            hashCode$$1 = hashCode$$1 * 31 + this.implicitSurface.hashCode();
            hashCode$$1 = hashCode$$1 * 31 + this.points[0].hashCode();
            hashCode$$1 = hashCode$$1 * 31 + this.tangents[0].hashCode();
            return hashCode$$1 | 0;
        }
        tangentP(point) {
            assertVectors(point);
            assert(this.containsPoint(point), 'this.containsPoint(point)');
            const t = this.pointT(point);
            return this.tangentAt(t);
        }
        tangentAt(t) {
            assert(!isNaN(t));
            if (0 === t % 1)
                return this.tangents[t];
            const uv = this.uvT(t);
            const uvTangent = new V3(-this.didv(uv.x, uv.y), this.didu(uv.x, uv.y), 0).toLength(this.stepSize);
            const du = this.parametricSurface.dpdu()(uv.x, uv.y);
            const dv = this.parametricSurface.dpdv()(uv.x, uv.y);
            return du.times(uvTangent.x).plus(dv.times(uvTangent.y));
        }
        at(t) {
            assert(!isNaN(t));
            if (0 === t % 1)
                return this.points[t];
            const startParams = V3.lerp(this.pmPoints[floor$1(t)], this.pmPoints[ceil(t)], t % 1);
            return this.closestPointToParams(startParams);
        }
        uvT(t) {
            assert(!isNaN(t));
            if (0 === t % 1)
                return this.pmPoints[t];
            const startParams = V3.lerp(this.pmPoints[floor$1(t)], this.pmPoints[ceil(t)], t % 1);
            return curvePoint$$1(this.implicitCurve(), startParams, this.didu, this.didv);
        }
        closestTToPoint(p, tStart) {
            // TODO
            return 0;
        }
        closestPointToParams(startUV) {
            const pointParams = curvePoint$$1(this.implicitCurve(), startUV, this.didu, this.didv);
            return this.parametricSurface.pUVFunc()(pointParams.x, pointParams.y);
        }
        isTsWithSurface(surface) {
            if (surface instanceof EllipsoidSurface$$1) {
                const pS = this.parametricSurface, iS = this.implicitSurface;
                if (pS instanceof ProjectedCurveSurface$$1 && iS instanceof EllipsoidSurface$$1) {
                    const iscs = iS.isCurvesWithSurface(surface);
                    const points = iscs.flatMap(isc => isc.isTsWithSurface(pS).map(t => isc.at(t)));
                    const ts = fuzzyUniques(points.map(p => this.pointT(p)));
                    return ts.filter(t => !isNaN(t) && this.isValidT(t));
                }
            }
            else if (ImplicitSurface$$1.is(surface)) {
                const result = [];
                const iF = surface.implicitFunction();
                let prevSignedDistance = iF(this.points[0]);
                for (let i = 1; i < this.points.length; i++) {
                    const point = this.points[i];
                    const signedDistance = iF(point);
                    if (prevSignedDistance * signedDistance <= 0) {
                        const pF = this.parametricSurface.pUVFunc();
                        const dpdu = this.parametricSurface.dpdu();
                        const dpdv = this.parametricSurface.dpdv();
                        const startUV = this.pmPoints[abs$3(prevSignedDistance) < abs$3(signedDistance) ? i - 1 : i];
                        const isUV = newtonIterate2dWithDerivatives(this.implicitCurve(), (u, v) => iF(pF(u, v)), startUV.x, startUV.y, 4, this.didu, this.didv, (u, v) => dpdu(u, v).dot(surface.didp(pF(u, v))), (u, v) => dpdv(u, v).dot(surface.didp(pF(u, v))));
                        result.push(this.pointT(this.parametricSurface.pUV(isUV.x, isUV.y)));
                    }
                    prevSignedDistance = signedDistance;
                }
                return result;
            }
            throw new Error();
        }
        isTsWithPlane(planeWC) {
            return this.isTsWithSurface(new PlaneSurface$$1(planeWC));
            // version which intersects the plane with the defining surfaces of this PICurve, but this causes
            // issues when they are PICurves too:
            // assertInst(P3, planeWC)
            // const ps = this.parametricSurface,
            // 	is = this.implicitSurface
            // const pscs = ps.isCurvesWithPlane(planeWC)
            // const iscs = is.isCurvesWithPlane(planeWC)
            // const infos = iscs.flatMap(isc => pscs.flatMap(psc => isc.isInfosWithCurve(psc)))
            // const ts = fuzzyUniques(infos.map(info => this.pointT(info.p)))
            // return ts.filter(t => !isNaN(t) && this.isValidT(t))
        }
        pointT(p) {
            assertVectors(p);
            if (!this.parametricSurface.containsPoint(p) || !this.implicitSurface.containsPoint(p)) {
                return NaN;
            }
            const pmPoint = this.parametricSurface.uvPFunc()(p);
            const ps = this.points, pmps = this.pmPoints;
            let t = 0, pmDistance = pmPoint.distanceTo(pmps[0]);
            while (pmDistance > abs$3(this.stepSize) && t < ps.length - 1) {
                // TODO -1?
                //console.log(t, pmps[t].$, pmDistance)
                t = min$2(pmps.length - 1, t + max$2(1, Math.round(pmDistance / abs$3(this.stepSize) / 2 / 2)));
                pmDistance = pmPoint.distanceTo(pmps[t]);
            }
            // if (t < this.pmPoints.length - 1 && pmDistance > pmPoint.distanceTo(pmps[t + 1])) {
            //     t++
            // }
            if (pmDistance > abs$3(this.stepSize) * 1.1) {
                // p is not on this curve
                return NaN;
            }
            if (t == ps.length - 1) {
                t--;
            }
            if (ps[t].like(p))
                return t;
            if (ps[t + 1].like(p))
                return t + 1;
            const startT = arrayRange(floor$1(this.tMin), ceil(this.tMax), 1).withMax(t => -pmPoint.distanceTo(pmps[t]));
            if (undefined === startT)
                throw new Error();
            if (ps[startT].like(p))
                return startT;
            //const [a, b] = 0 === startT
            //    ? [0, 1]
            //    : this.points.length - 1 === startT
            //        ? [startT - 1, startT]
            //        : pmPoint.distanceTo(pmps[startT - 1]) < pmPoint.distanceTo(pmps[startT + 1])
            //            ? [startT - 1, startT]
            //            : [startT, startT + 1]
            const a = max$2(0, startT - 1), b = min$2(this.points.length - 1, startT + 1);
            const tangent = this.tangentAt(startT);
            const f = (t) => this.at(clamp(t, 0, this.points.length - 1))
                .to(p)
                .dot(tangent);
            // const df = (t: number) => -this.tangentAt(clamp(t, 0, this.points.length - 1)).dot(tangent)
            //checkDerivate(f, df, 0, this.points.length - 2, 3)
            // 8 steps necessary because df can currently be way off
            t = bisect(f, a, b, 32);
            if (!isFinite(t) || this.at(t).distanceTo(p) > abs$3(this.stepSize)) {
                return NaN;
            }
            return t;
        }
        transform(m4) {
            const dirFactor = m4.isMirroring() ? -1 : 1;
            return PICurve$$1.forStartEnd(this.parametricSurface.transform(m4), this.implicitSurface.transform(m4), m4.transformPoint(this.points[0]), m4.transformPoint(this.points.last), this.stepSize * dirFactor, m4.transformVector(this.tangents[0]), m4.transformPoint(this.at(this.tMin)), m4.transformPoint(this.at(this.tMax)));
            //return PICurve.forParametricStartEnd(
            //	this.parametricSurface.transform(m4),
            //	this.implicitSurface.transform(m4),
            //	this.pmPoints[0],
            //	this.pmPoints.last,
            //	this.stepSize,
            //	this.dir,
            //	this.tMin,
            //	this.tMax)
            // TODO: pass transformed points?
            //return new PICurve(
            //	m4.transformedPoints(this.points),
            //	m4.transformedVectors(this.tangents),
            //    this.parametricSurface.transform(m4),
            //   this.implicitSurface.transform(m4),
            //   this.pmPoints,
            //   this.pmTangents,
            //this.stepSize,
            //   this.dir,
            //this.generator,
            //this.tMin, this.tMax)
        }
        roots() {
            const allTs = arrayRange(0, this.points.length);
            return [allTs, allTs, allTs];
        }
        isInfosWithLine(anchorWC, dirWC, tMin, tMax, lineMin, lineMax) {
            return surfaceIsICurveIsInfosWithLine$$1.call(this, anchorWC, dirWC, tMin, tMax, lineMin, lineMax);
        }
        toSource(rounder = x => x) {
            const result = callsce('PICurve.forParametricStartEnd', this.parametricSurface, this.implicitSurface, this.pmPoints[0], this.pmPoints.last, this.stepSize, this.pmTangents[0], this.tMin, this.tMax);
            return result;
        }
    }
    PICurve$$1.prototype.tIncrement = 1;

    class PPCurve$$1 extends ImplicitCurve$$1 {
        constructor(points, tangents, parametricSurface1, parametricSurface2, st1s, pmTangents, stepSize, dir = 1, generator, tMin, tMax) {
            super(points, tangents, dir, generator, tMin, tMax);
            this.parametricSurface1 = parametricSurface1;
            this.parametricSurface2 = parametricSurface2;
            this.st1s = st1s;
            this.pmTangents = pmTangents;
            this.stepSize = stepSize;
            assert(ParametricSurface$$1.is(parametricSurface1));
            assert(ParametricSurface$$1.is(parametricSurface2));
            assert(Array.isArray(st1s));
            assert(dir == 1);
            assert(stepSize <= 1);
        }
        at(t) {
            assert(!isNaN(t));
            if (0 === t % 1)
                return this.points[t];
            const startPoint = V3.lerp(this.points[floor$1(t)], this.points[ceil(t)], t % 1);
            return curvePointPP$$1(this.parametricSurface1, this.parametricSurface2, startPoint).p;
        }
        isColinearTo(curve) {
            if (curve instanceof PPCurve$$1) {
                if (this.equals(curve)) {
                    return true;
                }
                if (this.parametricSurface1.isCoplanarTo(curve.parametricSurface1) &&
                    this.parametricSurface1.isCoplanarTo(curve.parametricSurface2)) ;
                return false;
            }
            else {
                return false;
            }
        }
        containsPoint(p) {
            assertVectors(p);
            // TODO: wrong, as there could be another curve
            return (this.parametricSurface1.containsPoint(p) &&
                this.parametricSurface2.containsPoint(p) &&
                !isNaN(this.pointT(p)));
        }
        rootPoints() {
            const pF1 = this.parametricSurface1.pUVFunc();
            const pF2 = this.parametricSurface2.pUVFunc();
            const pN1 = this.parametricSurface1.normalUVFunc();
            const pN2 = this.parametricSurface2.normalUVFunc();
            const rootsApprox = this.rootsApprox();
            const results = [[], [], []];
            for (let dim = 0; dim < 3; dim++) {
                for (let i = 0; i < rootsApprox[dim].length; i++) {
                    const lambda = rootsApprox[dim][i];
                    const p = this.at(lambda);
                    assert(this.parametricSurface1.containsPoint(p));
                    const pp1 = this.parametricSurface1.uvP(p);
                    const { x: u, y: v } = this.parametricSurface2.uvP(p);
                    const startValues = [pp1.x, pp1.y, u, v];
                    function f(vals) {
                        const [u1, v1, u2, v2] = vals;
                        const diff = pF1(u1, v1).minus(pF2(u2, v2));
                        const n1 = pN1(u1, v1);
                        const n2 = pN2(u2, v2);
                        const tangent = n1.cross(n2);
                        return [diff.x, diff.y, diff.z, tangent.e(dim)];
                    }
                    const pps = newtonIterate(f, startValues, 8);
                    // assert(pF1(pps[0], pps[1]).like(pF2(pps[2], pps[3])),
                    // 	pF1(pps[0], pps[1]).sce + pF2(pps[2], pps[3]).sce)
                    const result = pF1(pps[0], pps[1]);
                    results[dim].push(result);
                }
            }
            return results;
        }
        roots() {
            return this.rootPoints().map(ps => ps.map(p => this.pointT(p)));
        }
        pointTangent(pWC) {
            assertVectors(pWC);
            assert(this.containsPoint(pWC), 'this.containsPoint(pWC)');
            const n1 = this.parametricSurface1.normalP(pWC);
            const n2 = this.parametricSurface2.normalP(pWC);
            return n1.cross(n2);
        }
        transform(m4) {
            return new PPCurve$$1(m4.transformedPoints(this.points), m4.transformedVectors(this.tangents), this.parametricSurface1.transform(m4), this.parametricSurface2.transform(m4), this.st1s, undefined, this.stepSize, this.dir, undefined);
        }
        toSource() {
            return callsce('PPCurve.forStartEnd', this.parametricSurface1, this.parametricSurface2, this.points[0], this.points.last, this.stepSize);
        }
        static forStartEnd(ps1, ps2, startPoint, end, stepSize = 0.02) {
            const { points, tangents, st1s } = followAlgorithmPP$$1(ps1, ps2, startPoint, stepSize);
            return new PPCurve$$1(points, tangents, ps1, ps2, st1s, undefined, stepSize, 1);
        }
        isInfosWithLine(anchorWC, dirWC, tMin, tMax, lineMin, lineMax) {
            return surfaceIsICurveIsInfosWithLine$$1.call(this, anchorWC, dirWC, tMin, tMax, lineMin, lineMax);
        }
        isTsWithSurface(surface) {
            if (ImplicitSurface$$1.is(surface)) {
                const result = [];
                const iF = surface.implicitFunction();
                const pUV1 = this.parametricSurface1.pUVFunc();
                const pUV2 = this.parametricSurface2.pUVFunc();
                let prevSignedDistance = iF(this.points[0]);
                for (let i = 1; i < this.points.length; i++) {
                    const point = this.points[i];
                    const signedDistance = iF(point);
                    if (prevSignedDistance * signedDistance <= 0) {
                        const startIndex = abs$3(prevSignedDistance) < abs$3(signedDistance) ? i - 1 : i;
                        const startPoint = this.points[startIndex];
                        const startUV1 = this.st1s[startIndex];
                        const startUV2 = this.parametricSurface2.uvP(startPoint);
                        const isSTUV = newtonIterate(([u1, v1, u2, v2]) => {
                            const ps1p = pUV1(u1, v1);
                            const ps2p = pUV2(u2, v2);
                            return [...ps1p.to(ps2p), iF(ps1p)];
                        }, [startUV1.x, startUV1.y, startUV2.x, startUV2.y]);
                        result.push(this.pointT(this.parametricSurface1.pUV(isSTUV[0], isSTUV[1])));
                    }
                    prevSignedDistance = signedDistance;
                }
                return result;
            }
            throw new Error('Method not implemented.');
        }
        isTsWithPlane(planeWC) {
            return this.isTsWithSurface(new PlaneSurface$$1(planeWC));
        }
    }

    /**
     * eta = xi²
     */
    class ParabolaCurve$$1 extends XiEtaCurve$$1 {
        constructor(center, f1, f2, tMin = -10, tMax = 10) {
            super(center, f1, f2, tMin, tMax);
        }
        static eccentricity() {
            return 1;
        }
        static unitIsInfosWithLine(anchorLC, dirLC, anchorWC, dirWC) {
            // para: x² = y
            // line(t) = anchor + t dir
            // (ax + t dx)² = ay + t dy
            // ax² + t ax dx + t² dx² = ay + t dy
            // t² dx² + t (ax dx + dy) + ay² + ay = 0
            const pqDiv = Math.pow(dirLC.x, 2);
            const lineTs = pqFormula((anchorLC.x * dirLC.x + dirLC.y) / pqDiv, (Math.pow(anchorLC.x, 2) + anchorLC.y) / pqDiv);
            return lineTs.filter(tOther => le$1(0, anchorLC.y + tOther * dirLC.y)).map(tOther => ({
                tThis: dirLC.x * tOther + anchorLC.x,
                tOther: tOther,
                p: L3$$1.at(anchorWC, dirWC, tOther),
            }));
        }
        static intersectionUnitLine(a, b, c) {
            /*
             solve system (5)/(6)
             g1 * xi + g2 * eta = g3 (6)
             g1 * xi + g2 * xi * xi = g3
             xi² + xi * g1/g2 - g3/g2 = 0
             */
            return pqFormula(a / b, -c / b);
        }
        static XYLCValid(pLC) {
            return eq(Math.pow(pLC.x, 2), pLC.y);
        }
        static XYLCPointT(pLC) {
            return pLC.x;
        }
        static quadratic(a, b, c) {
            // (1 - t)² a + 2 * t * (1 - t) b + t² c
            // (1 -2t +t²)a + (2t -2t²) b + t² c
            // = t²(a - 2b + c) + t (-2a + 2b) + a
            // (2t - 2) a + (1 - 2t) b + 2t c = t(2a + 2b - 2c) - 2a + b
            // 2 a + -2 b + 2 c
            const f2 = a.plus(c).minus(b.times(2));
            const f1 = b.minus(a).times(2);
            const center = a;
            return new ParabolaCurve$$1(center, f1, f2, 0, 1);
        }
        at(t) {
            // center + f1 t + f2 t²
            return this.center.plus(this.f1.times(t)).plus(this.f2.times(t * t));
        }
        tangentAt(t) {
            assertNumbers(t);
            // f1 + f2 2 t
            return this.f1.plus(this.f2.times(2 * t));
        }
        ddt(t) {
            assertNumbers(t);
            return this.f2.times(2);
        }
        tangentAt2(xi, eta) {
            assertNumbers(xi, eta);
            return this.f1.plus(this.f2.times(2 * eta));
        }
        reversed() {
            return new this.constructor(this.center, this.f1.negated(), this.f2, -this.tMax, -this.tMin);
        }
        /**
         * tangent: f1 + 2 * t * f2 = 0
         * t = -f1 / 2 / f2 (for individual dimensions)
         */
        roots() {
            const dimRoots = (dim) => (eq0(this.f2.e(dim)) ? [] : [-this.f1.e(dim) / 2 / this.f2.e(dim)]);
            return arrayFromFunction(3, dimRoots);
        }
        isColinearTo(curve) {
            if (!hasConstructor(curve, ParabolaCurve$$1))
                return false;
            const thisRA = this.rightAngled(), curveRA = curve.rightAngled();
            return thisRA.center.like(curveRA.center) && thisRA.f2.like(curveRA.f2) && thisRA.f1.likeOrReversed(curveRA.f1);
        }
        rightAngled() {
            // looking for vertex of parabola
            // this is the point where the tangent is perpendicular to the main axis (f2)
            // tangent = f1 + f2 * 2 * t0
            // f2 DOT (f1 + f2 * 2 * t0) == 0
            // f1 DOT f2 + f2 DOT f2 * 2 * t0 == 0
            // t0 == -(f1 DOT f2) / (f2 DOT f2 * 2)
            const f1 = this.f1, f2 = this.f2;
            const f1DOTf2 = f1.dot(f2);
            if (eq0(f1DOTf2) && f1.hasLength(1)) {
                return this;
            }
            const t0 = -f1DOTf2 / f2.squared() / 2;
            // we need to rearange tMin/tMax
            // tMin' = pointT(at(tMin)) =
            const raCenter = this.at(t0);
            const raF1 = this.tangentAt(t0), raF1Length = raF1.length(), raF11 = raF1.unit();
            const repos = (t) => this.at(t)
                .minus(raCenter)
                .dot(raF11);
            return new ParabolaCurve$$1(raCenter, raF11, f2.div(Math.pow(raF1Length, 2)), repos(this.tMin), repos(this.tMax));
        }
        arcLength(startT, endT) {
            let f1 = this.f1;
            const f2 = this.f2;
            const f1DOTf2 = f1.dot(f2);
            let t0 = 0;
            if (!eq0(f1DOTf2)) {
                t0 = -f1DOTf2 / f2.squared() / 2;
                f1 = f1.plus(f2.times(2 * t0));
            }
            const f1Length = f1.length();
            const a = f2.length() / f1Length;
            function F(x) {
                return Math.asinh(a * 2 * x) / 4 / a + x * Math.sqrt(1 + a * a * 4 * x * x) / 2;
            }
            return f1Length * (F(endT - t0) - F(startT - t0));
        }
        transform4(m4) {
            return parabola4Projection$$1(this.matrix.transform(m4), this.tMin, this.tMax);
        }
        asBezier() {
            return BezierCurve$$1.quadratic(this.at(-1), new L3$$1(this.at(-1), this.tangentAt(-1).unit()).isInfoWithLine(new L3$$1(this.at(1), this.tangentAt(1).unit())), this.at(1));
        }
        /**
         * Returns new ParabolaCurve that has its center point at this.at(t0)
         * @param t0
         */
        recenter(t0) {
            // this.at(t) = f2 t² + f1 t + center
            // c2.at(t) = f2 (t + t0)² + f1 (t + t0) + center
            // c2.at(t) = f2 (t² + 2 t0 t + t0²) + f1 (t + t0) + center
            // c2.at(t) = f2 t² + (f1 + 2 f2 t0) t + center + f2 t0² + f1 t0
            return new ParabolaCurve$$1(this.at(t0), this.f1.plus(this.f2.times(2 * t0)), this.f2);
        }
    }
    ParabolaCurve$$1.XY = new ParabolaCurve$$1(V3.O, V3.X, V3.Y);
    ParabolaCurve$$1.YZ = new ParabolaCurve$$1(V3.O, V3.Y, V3.Z);
    ParabolaCurve$$1.ZX = new ParabolaCurve$$1(V3.O, V3.Z, V3.X);
    ParabolaCurve$$1.prototype.tIncrement = 1 / 32;

    class EllipseCurve$$1 extends XiEtaCurve$$1 {
        constructor(center, f1, f2, tMin = 0, tMax = PI$4) {
            super(center, f1, f2, tMin, tMax);
            assert(-PI$4 <= this.tMin && this.tMin < PI$4);
            assert(-PI$4 < this.tMax && this.tMax <= PI$4);
        }
        static andFixTs(center, f1, f2, tMin = 0, tMax = PI$4) {
            if (-PI$4 <= tMin && tMax <= PI$4) {
                return new EllipseCurve$$1(center, f1, f2, tMin, tMax);
            }
            if (0 <= tMin && tMax <= TAU) {
                return new EllipseCurve$$1(center, f1.negated(), f2.negated(), tMin - PI$4, tMax - PI$4);
            }
            if (-TAU <= tMin && tMax <= 0) {
                return new EllipseCurve$$1(center, f1.negated(), f2.negated(), tMin + PI$4, tMax + PI$4);
            }
            throw new Error('Method not implemented.');
        }
        static XYLCValid(pLC) {
            const { x, y } = pLC;
            return eq0(Math.pow(x, 2) + Math.pow(y, 2) - 1);
        }
        static XYLCPointT(pLC, tMin, tMax) {
            assertNumbers(tMin, tMax);
            const t = atan2$1(pLC.y, pLC.x);
            const lowSplitter = lerp(tMin, tMax - TAU, 0.5);
            if (t < lowSplitter) {
                return t + TAU;
            }
            const highSplitter = lerp(tMax, tMin + TAU, 0.5);
            if (t > highSplitter) {
                return t - TAU;
            }
            return t;
        }
        static intersectionUnitLine(a, b, c, tMin, tMax) {
            const isLC = intersectionUnitCircleLine2$$1(a, b, c);
            const result = [];
            for (const [xi, eta] of isLC) {
                const t = EllipseCurve$$1.XYLCPointT(new V3(xi, eta, 0), tMin, tMax);
                fuzzyBetween(t, tMin, tMax) && result.push(t);
            }
            return result;
        }
        static unitIsInfosWithLine(anchorLC, dirLC, anchorWC, dirWC, tMin, tMax) {
            // ell: x² + y² = 1 = p²
            // line(t) = anchor + t dir
            // anchor² - 1 + 2 t dir anchor + t² dir² = 0
            const pqDiv = dirLC.squared();
            const lineTs = pqFormula(2 * dirLC.dot(anchorLC) / pqDiv, (anchorLC.squared() - 1) / pqDiv);
            return lineTs.filter(tOther => le$1(0, anchorLC.y + tOther * dirLC.y)).map(tOther => ({
                tThis: EllipseCurve$$1.XYLCPointT(dirLC.times(tOther).plus(anchorLC), tMin, tMax),
                tOther: tOther,
                p: L3$$1.at(anchorWC, dirWC, tOther),
            }));
        }
        /**
         * Returns a new EllipseCurve representing a circle parallel to the XY-plane.`
         */
        static semicircle(radius, center = V3.O, tMin, tMax) {
            return new EllipseCurve$$1(center, new V3(radius, 0, 0), new V3(0, radius, 0), tMin, tMax);
        }
        static circleForCenter2P(center, a, b, radius, tMin, tMax) {
            const f1 = center.to(a);
            const normal = f1.cross(center.to(b));
            const f2 = normal.cross(f1).toLength(f1.length());
            return new EllipseCurve$$1(center, f1, f2, undefined !== tMin ? tMin : 0, undefined !== tMax ? tMax : f1.angleTo(center.to(b)));
        }
        split(tMin = this.tMin, tMax = this.tMax) {
            const result = [];
            tMin < 0 &&
                result.push(new EllipseCurve$$1(this.center, this.f1.negated(), this.f2.negated(), tMin + PI$4, min$2(0, tMax) + PI$4));
            tMax > 0 && result.push(new EllipseCurve$$1(this.center, this.f1, this.f2, max$2(0, tMin), tMax));
            return result;
        }
        static forAB(a, b, center = V3.O) {
            return super.forAB(a, b, center);
        }
        /**
         * Create a circle curve which has a, b and c on it. a, b, c can't be on a straight line.
         * tMin defaults to 0, tMax defaults to the value for c
         */
        static circleThroughPoints(a, b, c, tMin = 0, tMax) {
            assertf(() => !L3$$1.throughPoints(a, c).containsPoint(b));
            const normal = a.to(b).cross(b.to(c));
            const center = new L3$$1(a.lerp(b, 0.5), normal.cross(a.to(b)).unit()).isInfoWithLine(new L3$$1(b.lerp(c, 0.5), normal.cross(b.to(c)).unit()));
            const f1 = center.to(a).negated();
            return new EllipseCurve$$1(center, f1, normal.unit().cross(f1), -PI$4, undefined === tMax ? f1.angleRelativeNormal(center.to(c), normal.unit()) : tMax);
        }
        getAreaInDir(right, up, tStart, tEnd) {
            //assertf(() => tStart < tEnd)
            assertf(() => right.isPerpendicularTo(this.normal));
            assertf(() => up.isPerpendicularTo(this.normal));
            //assertf(() => EllipseCurve.isValidT(tStart), tStart)
            //assertf(() => EllipseCurve.isValidT(tEnd), tEnd)
            const upLC = this.matrixInverse.transformVector(up);
            const rightLC = upLC.cross(V3.Z);
            const normTStart = tStart - rightLC.angleXY();
            const normTEnd = tEnd - rightLC.angleXY();
            const transformedOriginY = this.matrixInverse.getTranslation().dot(upLC.unit());
            // integral of sqrt(1 - x²) from 0 to cos(t)
            // Basically, we want
            // INTEGRAL[cos(t); PI/2] sqrt(1 - x²) dx
            // INTEGRAL[PI/2: cos(t)] -sqrt(1 - x²) dx
            // = INTEGRAL[cos(0); cos(t)] -sqrt(1 - x²) dx
            // = INTEGRAL[0; t] -sqrt(1 - cos²(t)) * -sin(t) dt
            // = INTEGRAL[0; t] -sin(t) * -sin(t) dt
            // = INTEGRAL[0; t] sin²(t) dt (partial integration / wolfram alpha)
            // = (1/2 * (t - sin(t) * cos(t)))[0; t] (this form has the distinct advantage of being defined everywhere)
            function fArea(t) {
                return (t - Math.sin(t) * Math.cos(t)) / 2;
            }
            // for the centroid, we want
            // cx = 1 / area * INTEGRAL[cos(t); PI/2] x * f(x) dx
            // cx = 1 / area * INTEGRAL[cos(t); PI/2] x * sqrt(1 - x²) dx
            // cx = 1 / area * INTEGRAL[cos(0); cos(t)] x * -sqrt(1 - x²) dx
            // ...
            // cx = 1 / area * INTEGRAL[0; t] cos(t) * sin²(t) dt // WA
            // cx = 1 / area * (sin^3(t) / 3)[0; t]
            function cxTimesArea(t) {
                return Math.pow(Math.sin(t), 3) / 3;
            }
            // cy = 1 / area * INTEGRAL[cos(t); PI/2] f²(x) / 2 dx
            // cy = 1 / area * INTEGRAL[cos(0); cos(t)] -(1 - x²) / 2 dx
            // cy = 1 / area * INTEGRAL[0; t] (cos²(t) - 1) * -sin(t) / 2 dt
            // cy = 1 / area * (cos (3 * t) - 9 * cos(t)) / 24 )[0; t]
            function cyTimesArea(t) {
                return (Math.cos(3 * t) - 9 * Math.cos(t)) / 24;
            }
            const restArea = -transformedOriginY * (-Math.cos(normTEnd) + Math.cos(normTStart));
            const area = fArea(normTEnd) - fArea(normTStart) + restArea;
            const cxt = (cxTimesArea(normTEnd) -
                cxTimesArea(normTStart) +
                -transformedOriginY * (-Math.cos(normTEnd) - Math.cos(normTStart)) / 2 * restArea) /
                area;
            const cyt = (cyTimesArea(normTEnd) - cyTimesArea(normTStart) - -transformedOriginY / 2 * restArea) / area;
            const factor = this.matrix.xyAreaFactor(); // * upLC.length()
            //console.log('fctor', factor, 'area', area, 'resultarea', area* factor)
            assert(!eq0(factor));
            return {
                area: area * factor,
                centroid: this.matrix.transformPoint(M4.rotateZ(rightLC.angleXY()).transformPoint(new V3(cxt, cyt, 0))),
            };
        }
        at(t) {
            assertNumbers(t);
            //assert(this.isValidT(t))
            // = center + f1 cos t + f2 sin t
            return this.center.plus(this.f1.times(Math.cos(t))).plus(this.f2.times(Math.sin(t)));
        }
        tangentAt(t) {
            assertNumbers(t);
            //assert(this.isValidT(t))
            // ) f2 cos(t) - f1 sin(t)
            return this.f2.times(Math.cos(t)).minus(this.f1.times(Math.sin(t)));
        }
        ddt(t) {
            assertNumbers(t);
            assert(this.isValidT(t));
            return this.f2.times(-Math.sin(t)).minus(this.f1.times(Math.cos(t)));
        }
        tangentAt2(xi, eta) {
            return this.f2.times(xi).minus(this.f1.times(eta));
        }
        isCircular() {
            return eq(this.f1.length(), this.f2.length()) && this.f1.isPerpendicularTo(this.f2);
        }
        isColinearTo(curve) {
            if (!hasConstructor(curve, EllipseCurve$$1))
                return false;
            if (!this.center.like(curve.center)) {
                return false;
            }
            if (this == curve) {
                return true;
            }
            if (this.isCircular()) {
                return (curve.isCircular() && eq(this.f1.length(), curve.f1.length()) && this.normal.isParallelTo(curve.normal));
            }
            else {
                let { f1: f1, f2: f2 } = this.rightAngled(), { f1: c1, f2: c2 } = curve.rightAngled();
                if (f1.length() > f2.length()) {
                    [f1, f2] = [f2, f1];
                }
                if (c1.length() > c2.length()) {
                    [c1, c2] = [c2, c1];
                }
                return eq(f1.squared(), Math.abs(f1.dot(c1))) && eq(f2.squared(), Math.abs(f2.dot(c2)));
            }
        }
        pointT(pWC) {
            assertVectors(pWC);
            assert(this.containsPoint(pWC));
            const pLC = this.matrixInverse.transformPoint(pWC);
            const t = EllipseCurve$$1.XYLCPointT(pLC, this.tMin, this.tMax);
            assert(this.isValidT(t));
            return t;
        }
        reversed() {
            return new EllipseCurve$$1(this.center, this.f1.negated(), this.f2, PI$4 - this.tMax, PI$4 - this.tMin);
        }
        eccentricity() {
            const mainAxes = this.rightAngled();
            const f1length = mainAxes.f1.length(), f2length = mainAxes.f1.length();
            const [a, b] = f1length > f2length ? [f1length, f2length] : [f2length, f1length];
            return Math.sqrt(1 - b * b / a / a);
        }
        circumference() {
            return this.arcLength(-Math.PI, Math.PI);
        }
        arcLength(tStart = this.tMin, tEnd = this.tMax, steps = 2) {
            assert(tStart < tEnd, 'startT < endT');
            const f1Length = this.f1.length();
            if (eq(f1Length, this.f2.length())) {
                return f1Length * (tEnd - tStart);
            }
            return super.arcLength(tStart, tEnd, steps);
        }
        circumferenceApproximate() {
            // approximate circumference by Ramanujan
            // https://en.wikipedia.org/wiki/Ellipse#Circumference
            const { f1, f2 } = this.rightAngled(), a = f1.length(), b = f2.length();
            const h = Math.pow((a - b), 2) / Math.pow((a + b), 2);
            return Math.PI * (a + b) * (1 + 3 * h / (10 + Math.sqrt(4 - 3 * h)));
        }
        /**
         * Radii of the ellipse are described by
         * q(phi) = f1 * cos(phi) + f2 * sin(phi)
         * or q(xi, eta) = f1 * xi + f2 * eta (1) with the added condition
         * xi² + eta² = 1 (2)
         * we want to find the radius where the corresponding tangent is perpendicular
         * tangent: q'(phi) = f1 * -sin(phi) + f2 * cos(phi)
         * tangent: q'(xi, eta) = f1 * -eta + f2 * xi
         * perpendicular when: q'(xi, eta) DOT q(xi, eta) = 0
         * (f1 * -eta + f2 * xi) DOT (f1 * xi + f2 * eta) = 0
         * DOT is distributive:
         * f1² * (-eta * xi) + f1 * f2 * (-eta² + xi²) + f2² * (xi * eta) = 0
         * (f2² - f1²) * (eta * xi) + f1 * f2 * (-eta² + xi²) = 0
         * a * (xi² - eta²) + b * xi * eta = 0 (2)
         * with a = f1 * f2, b = f2² - f1²
         * => (xi/eta)² + xi/eta * b/a + 1 = 0 (divide by a * eta²)
         * xi/eta = b/a/2 +- sqrt(b²/a²/4 - 1) | * 2*a*eta
         * 2 * a * xi = eta * (b +- sqrt(b² - 4 * a²))
         * g1 * xi - g2 * eta = 0 (3)
         * with g1 = 2 * a, g2 = b +- sqrt(b² - 4 * a²)
         * Solve (3), (2) with intersectionUnitCircleLine
         */
        rightAngled() {
            const f1 = this.f1, f2 = this.f2, a = f1.dot(f2), b = f2.squared() - f1.squared();
            if (eq0(a)) {
                return this;
            }
            const g1 = 2 * a, g2 = b + Math.sqrt(b * b + 4 * a * a);
            const { x1: xi, y1: eta } = intersectionUnitCircleLine$$1(g1, g2, 0);
            const f1RA = f1.times(xi).plus(f2.times(eta));
            const f2RA = f1.times(-eta).plus(f2.times(xi));
            return new EllipseCurve$$1(this.center, f1RA, f2RA, -PI$4, PI$4);
        }
        isInfosWithEllipse(ellipse) {
            if (this.normal.isParallelTo(ellipse.normal) && eq0(this.center.minus(ellipse.center).dot(ellipse.normal))) {
                // ellipses are coplanar
                const ellipseLCRA = ellipse.transform(this.matrixInverse).rightAngled();
                const r1 = ellipseLCRA.f1.lengthXY(), r2 = ellipseLCRA.f2.lengthXY(), centerDist = ellipseLCRA.center.lengthXY();
                const rMin = min$2(r1, r2), rMax = max$2(r1, r2);
                if (lt(centerDist + rMax, 1) || // entirely inside unit circle
                    lt(1, centerDist - rMax) || // entirely outside unit circle
                    lt(1, rMin - centerDist) || // contains unit circle
                    (eq(1, r1) && eq(1, r2) && eq0(centerDist)) // also unit circle, return no IS
                ) {
                    return [];
                }
                const f = (t) => ellipseLCRA.at(t).lengthXY() - 1;
                const df = (t) => ellipseLCRA
                    .at(t)
                    .xy()
                    .dot(ellipseLCRA.tangentAt(t)) / ellipseLCRA.at(t).lengthXY();
                checkDerivate(f, df, -PI$4, PI$4, 1);
                const ellipseLCRATs = [];
                for (let startT = -4 / 5 * PI$4; startT < PI$4; startT += PI$4 / 4) {
                    let t = newtonIterateSmart(f, startT, 16, df, 1e-4);
                    le$1(t, -PI$4) && (t += TAU);
                    assert(!isNaN(t));
                    if (between(t, -PI$4, PI$4) && eq0(f(t)) && !ellipseLCRATs.some(r => eq(t, r))) {
                        ellipseLCRATs.push(t);
                    }
                }
                const result = [];
                for (const ellipseLCRAT of ellipseLCRATs) {
                    const p = this.matrix.transformPoint(ellipseLCRA.at(ellipseLCRAT));
                    if (this.containsPoint(p) && ellipse.containsPoint(p)) {
                        result.push({ tThis: this.pointT(p), tOther: ellipse.pointT(p), p });
                    }
                }
                return result;
                //const angle = ellipseLCRA.f1.angleXY()
                //const aSqr = ellipseLCRA.f1.squared(), bSqr = ellipseLCRA.f2.squared()
                //const a = Math.sqrt(aSqr), b = Math.sqrt(bSqr)
                //const {x: centerX, y: centerY} = ellipseLCRA.center
                //const rotCenterX = centerX * Math.cos(-angle) + centerY * -Math.sin(-angle)
                //const rotCenterY = centerX * Math.sin(-angle) + centerY * Math.cos(-angle)
                //const rotCenter = V(rotCenterX, rotCenterY)
                //const f = t => {
                //	const lex = Math.cos(t) - rotCenterX, ley = Math.sin(t) - rotCenterY
                //	return lex * lex / aSqr + ley * ley / bSqr - 1
                //}
                //const f2 = (x, y) => (x * x + y * y - 1)
                //const f3 = (x, y) => ((x - rotCenterX) * (x - rotCenterX) / aSqr + (y - rotCenterY) * (y - rotCenterY) /
                // bSqr - 1) const results = [] const resetMatrix = this.matrix.times(M4.rotateZ(angle)) for (let startT =
                // Math.PI / 4; startT < 2 * Math.PI; startT += Math.PI / 2) { const startP = EllipseCurve.XY.at(startT)
                // const p = newtonIterate2d(f3, f2, startP.x, startP.y, 10) if (p && !results.some(r => r.like(p))) {
                // results.push(p) } } const rotEl = new EllipseCurve(rotCenter, V(a, 0, 0), V(0, b, 0)) return
                // results.map(pLC => { const p = resetMatrix.transformPoint(pLC) return {tThis: this.pointT(p, PI),
                // tOther: ellipse.pointT(p, PI), p} })
            }
            else {
                return this.isTsWithPlane(P3$$1.normalOnAnchor(ellipse.normal.unit(), ellipse.center)).mapFilter(t => {
                    const p = this.at(t);
                    if (ellipse.containsPoint(p)) {
                        return { tThis: t, tOther: ellipse.pointT(p), p };
                    }
                    return undefined;
                });
            }
        }
        isInfosWithCurve(curve) {
            if (curve instanceof EllipseCurve$$1) {
                return this.isInfosWithEllipse(curve);
            }
            return super.isInfosWithCurve(curve);
        }
        transform4(m4) {
            const tMap = (t) => sign$2(t) * sqrt$1((1 - cos$2(t)) / (1 + cos$2(t)));
            // prettier-ignore
            const parabolaToUnitEllipse = new M4(0, -1, 0, 1, 2, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1);
            return parabola4Projection$$1(M4.product(m4, this.matrix, parabolaToUnitEllipse), tMap(this.tMin), tMap(this.tMax));
        }
        roots() {
            // tangent(t) = f2 cos t - f1 sin t
            // solve for each dimension separately
            // tangent(eta, xi) = f2 eta - f1 xi
            return arrayFromFunction(3, dim => {
                const a = this.f2.e(dim), b = -this.f1.e(dim);
                return intersectionUnitCircleLine2$$1(a, b, 0)
                    .map(([xi, eta]) => Math.atan2(eta, xi))
                    .filter(t => this.isValidT(t));
            });
        }
        closestTToPoint(p, tStart) {
            // (at(t) - p) * tangentAt(t) = 0
            // (xi f1 + eta f2 + q) * (xi f2 - eta f1) = 0
            // xi eta (f2^2-f1^2) + xi f2 q - eta² f1 f2 + xi² f1 f2 - eta f1 q = 0
            //  (xi² - eta²) f1 f2 + xi eta (f2^2-f1^2) + xi f2 q - eta f1 q = 0
            // atan2 of p is a good first approximation for the searched t
            tStart = tStart || this.matrixInverse.transformPoint(p).angleXY();
            const pRelCenter = p.minus(this.center);
            const f = (t) => this.tangentAt(t).dot(this.f1
                .times(Math.cos(t))
                .plus(this.f2.times(Math.sin(t)))
                .minus(pRelCenter));
            return newtonIterate1d(f, tStart, 8);
        }
        area() {
            // see
            // https://upload.wikimedia.org/wikipedia/commons/thumb/4/4e/Cross_product_parallelogram.svg/220px-Cross_product_parallelogram.svg.png
            return Math.PI * this.f1.cross(this.f2).length();
        }
        angleToT(phi) {
            // atan2(y, x) = phi
            const phiDir = this.f1
                .unit()
                .times(Math.cos(phi))
                .plus(this.f2
                .rejectedFrom(this.f1)
                .unit()
                .times(Math.sin(phi)));
            const dirLC = this.matrixInverse.transformVector(phiDir);
            return dirLC.angleXY();
        }
    }
    EllipseCurve$$1.UNIT = new EllipseCurve$$1(V3.O, V3.X, V3.Y);
    EllipseCurve$$1.prototype.hlol = Curve$$1.hlol++;
    EllipseCurve$$1.prototype.tIncrement = 2 * Math.PI / (4 * 32);

    class NURBS$$1 extends Curve$$1 {
        constructor(points, degree, knots = NURBS$$1.openUniformKnots(points.length, degree), tMin = knots[degree], tMax = knots[knots.length - degree - 1]) {
            super(tMin, tMax);
            this.points = points;
            this.degree = degree;
            this.knots = knots;
            const knotsLength = points.length + degree + 1;
            assert(knots.length === knotsLength, 'bad knot vector length: expected ' +
                knotsLength +
                ' (degree = ' +
                degree +
                ' pcount = ' +
                points.length +
                '), but was ' +
                knots.length);
            assert(knots[degree] <= tMin);
            assert(tMax <= knots[knots.length - degree - 1]);
            for (let i = 0; i < points.length; i++) {
                assert(points[i].dim() == 4);
            }
            assert(degree >= 1, 'degree must be at least 1 (linear)');
            assert(degree % 1 == 0);
            assert(-1 == knots.firstUnsorted(MINUS), 'knot values must be in ascending order');
        }
        getConstructorParameters() {
            return [this.points, this.degree, this.knots];
        }
        at4(t) {
            assert(between(t, this.tMin, this.tMax), t);
            const { points, degree, knots } = this;
            // find s (the spline segment) for the [t] value provided
            const s = this.tInterval(t);
            const v = Vector.pack(points, new Float64Array((degree + 1) * 4), s - degree, 0, degree + 1);
            for (let level = 0; level < degree; level++) {
                // build level l of the pyramid
                for (let i = degree; i > level; i--) {
                    const alpha = (t - knots[i + s - degree]) / (knots[i + s - level] - knots[i + s - degree]);
                    // interpolate each component
                    for (let dim = 0; dim < 4; dim++) {
                        v[i * 4 + dim] = (1 - alpha) * v[(i - 1) * 4 + dim] + alpha * v[i * 4 + dim];
                    }
                }
            }
            return new Vector(v.slice(degree * 4, (degree + 1) * 4));
        }
        at(t) {
            return this.at4(t).p3();
        }
        /*
        d(k, i, t) = a(i, k, t) * d(k - 1, i, t) + (1 - a(i, k, t)) * d(k - 1, i - 1, t)
        a(i, k, t) = (t - knots[i]) / (knots[i + 1 + n - k] - knots[i])
        a'(i, k, t) = 1 / (knots[i + 1 + n - k] - knots[i])

        d/dt =  a(i, k, t) * d'(k - 1, i, t) + a'(i, k, t) * d(k - 1, i, t)
        + (1 - a(i, k, t)) * d'(k - 1, i - 1, t) + a'(i, k, t) * d(k - 1, i - 1, t)
    */
        ptDtDdt4(t) {
            const { points, degree, knots } = this;
            // find s (the spline segment) for the [t] value provided
            const s = this.tInterval(t);
            const v = Vector.pack(points, new Float64Array((degree + 1) * 4), s - degree, 0, degree + 1);
            let ddt = Vector.Zero(4), derivative;
            for (let level = 0; level < degree; level++) {
                if (level == degree - 2) {
                    // see https://www.globalspec.com/reference/61012/203279/10-8-derivatives
                    const a = new Vector(v.slice(degree * 4, (degree + 1) * 4));
                    const b = new Vector(v.slice((degree - 1) * 4, degree * 4));
                    const c = new Vector(v.slice((degree - 2) * 4, (degree - 1) * 4));
                    function step(k, i, dkMinus1iMinus1, dkMinus1i) {
                        return dkMinus1i.minus(dkMinus1iMinus1).times(k / (knots[i + degree - k] - knots[i - 1]));
                    }
                    ddt = step(degree, s + 1, step(degree - 1, s + 1, a, b), step(degree - 1, s, b, c));
                }
                if (level == degree - 1) {
                    const a = new Vector(v.slice(degree * 4, (degree + 1) * 4));
                    const b = new Vector(v.slice((degree - 1) * 4, degree * 4));
                    derivative = b.minus(a).times(degree / (knots[s] - knots[s + 1]));
                }
                for (let i = degree; i > level; i--) {
                    const alpha = (t - knots[i + s - degree]) / (knots[i + s - level] - knots[i + s - degree]);
                    // interpolate each component
                    for (let dim = 0; dim < 4; dim++) {
                        v[i * 4 + dim] = (1 - alpha) * v[(i - 1) * 4 + dim] + alpha * v[i * 4 + dim];
                    }
                }
            }
            const p = new Vector(v.slice(degree * 4, degree * 4 + 4));
            return [p, derivative, ddt];
        }
        tangentAt(t) {
            // x(t) = xw(t) / w(t)
            // quotient rule
            const [p, derivative] = this.ptDtDdt4(t);
            const expected = derivative
                .times(p.w)
                .minus(p.times(derivative.w))
                .div(Math.pow(p.w, 2))
                .V3();
            return expected;
        }
        ddt(t) {
            const [p, dt, ddt] = this.ptDtDdt4(t);
            // =(-w(t) x(t) w''(t) - 2 w(t) w'(t) x'(t) + 2 x(t) w'(t)^2 + w(t)^2 x''(t))/w(t)^3
            // =(x(t) ((-w(t)) w''(t) + 2 w'(t)^2) - x'(t) 2 w(t) w'(t) + x''(t) w(t)^2 )/w(t)^3
            // prettier-ignore
            return Vector.add(p.times(-p.w * ddt.w + 2 * Math.pow(dt.w, 2)), dt.times(-2 * p.w * dt.w), ddt.times(Math.pow(p.w, 2))).div(Math.pow(p.w, 3)).V3();
        }
        ptDtDdt(t) {
            const [pt, dt4, ddt4] = this.ptDtDdt4(t);
            return [
                pt.p3(),
                dt4
                    .times(pt.w)
                    .minus(pt.times(dt4.w))
                    .div(Math.pow(pt.w, 2))
                    .V3(),
                // prettier-ignore
                Vector.add(pt.times(-pt.w * ddt4.w + 2 * Math.pow(dt4.w, 2)), dt4.times(-2 * pt.w * dt4.w), ddt4.times(Math.pow(pt.w, 2))).div(Math.pow(pt.w, 3)).V3(),
            ];
        }
        pointT(pWC) {
            return this.closestTToPoint(pWC);
        }
        closestTToPoint(p, tStart, tMin = this.tMin, tMax = this.tMax) {
            // this.at(t) has minimal distance to p when this.tangentAt(t) is perpendicular to
            // the vector between this.at(t) and p. This is the case iff the dot product of the two is 0.
            // f = (this.at(t) - p) . (this.tangentAt(t)
            // df = this.tangentAt(t) . this.tangentAt(t) + (this.at(t) - p) . this.ddt(t)
            //    = this.tangentAt(t)² + (this.at(t) - p) . this.ddt(t)
            const f = (t) => {
                const [pt, dt, ddt] = this.ptDtDdt(t);
                return [pt.minus(p).dot(dt), dt.squared() + pt.minus(p).dot(ddt)];
            };
            //checkDerivate(f, df, tMin, tMax)
            const STEPS = 32;
            if (undefined === tStart) {
                tStart = arraySamples(tMin, tMax, STEPS).withMax(t => -this.at(t).distanceTo(p));
            }
            const result = newtonIterateWithDerivative2(f, tStart, 8, this.tMin, this.tMax);
            //assert(undefined !== result)
            return result;
        }
        containsPoint(pWC) {
            const tGuess = this.closestTToPoint(pWC);
            return undefined === tGuess ? false : this.at(tGuess).like(pWC);
        }
        derivate() {
            const k = this.degree;
            const ps = arrayFromFunction(this.points.length - 1, i => this.points[i].to(this.points[i + 1]).times(k / (this.knots[i + k + 1] - this.knots[i + 1])));
            return new NURBS$$1(ps, this.degree - 1, this.knots.slice(1, -1), this.tMin, this.tMax);
        }
        /**
         * Create a new NURBS of equal degree with the added knot [newKnot]. New NURBS will have one additional control
         * point.
         */
        withKnot(newKnot, multiplicity = 1) {
            assert(between(newKnot, this.tMin, this.tMax));
            const k = this.tInterval(newKnot);
            const { knots, points, degree } = this;
            const insertPoints = arrayFromFunction(this.degree, j => {
                const i = k - degree + 1 + j;
                const aiNumerator = newKnot - knots[i];
                // 0/0 defined as 0:
                const ai = aiNumerator == 0 ? 0 : aiNumerator / (knots[i + degree] - knots[i]);
                assert(between(ai, 0, 1));
                return Vector.lerp(points[i - 1], points[i], ai);
            });
            const newPoints = points.slice();
            newPoints.splice(k - degree + 1, degree - 1, ...insertPoints);
            const newKnots = knots.slice();
            newKnots.splice(k + 1, 0, newKnot);
            return new NURBS$$1(newPoints, degree, newKnots, this.tMin, this.tMax);
        }
        removeKnot(t) {
            const { knots, points, degree } = this;
            let k = this.tInterval(t), s = 0; // s = multiplicity of the knot
            while (knots[k + 1] == t) {
                k++;
                s++;
            }
            if (s == 0)
                throw new Error('There is no knot ' + t + '!');
            // the points which were relevant when inserting were (k - p - 1) to (k - 1). (- 1) because the current k has
            // been increased by one due to the insertion.
            // p - 1 points were replaced by p points, hence we need to generate the original p - 1 point, + 1 to check if
            // this transformation is valid.
            const insertPoints = [points[k - degree - 1]];
            const oldKnots = knots.slice();
            oldKnots.splice(k, 1);
            for (let i = k - degree; i <= k - s; i++) {
                const alphaInv = (oldKnots[i + degree] - oldKnots[i]) / (t - oldKnots[i]);
                const oldPoint = Vector.lerp(insertPoints.last, points[i], alphaInv);
                insertPoints.push(oldPoint);
            }
            if (insertPoints.last.like(points[k + 1 - s])) {
                const oldPoints = points.slice();
                oldPoints.splice(k - degree - 1, degree - s + 3, ...insertPoints);
                return new NURBS$$1(oldPoints, degree, oldKnots);
            }
            return undefined;
        }
        static openUniformKnots(pointCount, degree, tMin = 0, tMax = 1) {
            const knotsLength = pointCount + degree + 1;
            return arrayFromFunction(knotsLength, i => {
                if (i <= degree) {
                    return tMin;
                }
                else if (i >= knotsLength - degree - 1) {
                    return tMax;
                }
                else {
                    return lerp(tMin, tMax, (i - degree) / (knotsLength - degree * 2 - 1));
                }
            });
        }
        static bezierKnots(degree, tMin = 0, tMax = 1) {
            const result = new Array((degree + 1) * 2);
            for (let i = 0; i < degree + 1; i++) {
                result[i] = tMin;
                result[degree + 1 + i] = tMax;
            }
            return result;
        }
        static fromBezier(bezier) {
            const bezier01 = bezier.selectPart(bezier.tMin, bezier.tMax);
            return NURBS$$1.Bezier(bezier01.points);
        }
        static Bezier(points, tMin = 0, tMax = 1) {
            return new NURBS$$1(points.map(p => (p instanceof V3 ? new Vector(new Float64Array([p.x, p.y, p.z, 1])) : p)), points.length - 1, arrayFromFunction(points.length * 2, i => (i < points.length ? 0 : 1)), tMin, tMax);
        }
        static fromHyperbola(hyperbola, tMin = hyperbola.tMin, tMax = hyperbola.tMax) {
            const p0 = HyperbolaCurve$$1.XY.at(tMin);
            const p2 = HyperbolaCurve$$1.XY.at(tMax);
            const p1 = new V3((sinh(tMin) - sinh(tMax)) / sinh(tMin - tMax), (cosh(tMin) - cosh(tMax)) / sinh(tMin - tMax), 0);
            // M: midpoint between p0 and p2
            // X: intersection of line through p1 and M and unit hyperbola
            // result.at(1/2) = X
            // result.at(1/2) = (1/4 p0 + 1/2 p1 w + 1/4 p2) / (1/4 + 1/ 2 w + 1/4)
            // result.at(1/2) = (1/2 p0 + p1 w + 1/2 p2) / (1 + w)
            // result.at(1/2) = (M + p1 w) / (1 + w) = X
            // => w * (p1 - X) = (X - M)
            // as p1, X and M are all on the same line, we can solve this equation with only the x
            const M = p0.lerp(p2, 0.5);
            const Xx = 1 / sqrt$1(1 - Math.pow((M.y / M.x), 2));
            const w = (Xx - M.x) / (p1.x - Xx);
            return NURBS$$1.fromV3s([p0, p1, p2], 2, undefined, [1, w, 1]).transform(hyperbola.matrix);
        }
        static fromParabola(parabola) {
            return NURBS$$1.fromBezier(parabola.asBezier());
        }
        static fromEllipse(ellipse) {
            const unitSemiEllipse = new NURBS$$1([
                VV(1, 0, 0, 1),
                VV(1, 1, 0, 1).times(SQRT1_2),
                VV(0, 1, 0, 1),
                VV(-1, 1, 0, 1).times(SQRT1_2),
                VV(-1, 0, 0, 1),
                VV(-1, -1, 0, 1).times(SQRT1_2),
                VV(0, -1, 0, 1),
            ], 2, [0, 0, 0, PI$4 / 2, PI$4 / 2, PI$4, PI$4, 3 * PI$4 / 2, 3 * PI$4 / 2, 2 * PI$4]);
            return unitSemiEllipse.transform(ellipse.matrix);
        }
        /**
         * Create a new NURBS from V3s, with optional weights.
         * @param points
         * @param degree
         * @param knots
         * @param weights
         */
        static fromV3s(points, degree, knots, weights = arrayFromFunction(points.length, () => 1)) {
            assert(points.length == weights.length);
            return new NURBS$$1(points.map((p, i) => Vector.fromV3AndWeight(p, weights[i])), degree, knots);
        }
        isUniform(precision = 0) {
            const intervals = arrayFromFunction(this.knots.length - 1, i => this.knots[i + 1] - this.knots[i]);
            const [min, max] = minAndMax(intervals);
            return eq(min, max, precision);
        }
        /**
         * NURBS is a B spline if control points all have the same weight.
         */
        isBSpline(precision = 0) {
            const [minWeight, maxWeight] = minAndMax(this.points.map(p => p.w));
            return eq(minWeight, maxWeight, precision);
        }
        /**
         * Whether this is a (rational) bezier curve.
         */
        isBezier(precision = 0) {
            if (this.degree + 1 != this.points.length)
                return false;
            const [min0, max0] = minAndMax(this.knots, 0, this.degree + 1);
            if (!eq(min0, max0, precision))
                return false;
            const [min1, max1] = minAndMax(this.knots, this.degree + 1);
            if (!eq(min1, max1, precision))
                return false;
            return true;
        }
        /**
         * Splits NURBS curve into rational bezier curves.
         * See https://pages.mtu.edu/~shene/COURSES/cs3621/NOTES/spline/B-spline/subdivision.html
         */
        getSegments() {
            const { knots, points, degree } = this;
            const result = [];
            const v = Vector.pack(points, new Float64Array(points.length * 4));
            const vectorFromV = (i) => new Vector(v.slice(i * 4, (i + 1) * 4));
            let k = degree + 1; // k = knot index we are duplicating
            while (k < knots.length - degree - 1) {
                const t = knots[k];
                const prevKnot = knots[k - 1];
                let s = 1; // s = multiplicity of the knot
                while (knots[k + 1] == t) {
                    k++;
                    s++;
                }
                const newNURBSPoints = new Array(degree + 1);
                // the first s + 1 points are identical to the current curve
                for (let i = 0; i < s + 1; i++) {
                    newNURBSPoints[i] = vectorFromV(k - degree - s + i);
                }
                // we need to have multiplicity degree, so insert (degree - s) times
                for (let level = 1; level <= degree - s; level++) {
                    for (let i = k - degree; i <= k - s - level; i++) {
                        const alpha = (t - prevKnot) / (knots[i + degree + 1] - prevKnot);
                        for (let dim = 0; dim < 4; dim++) {
                            v[i * 4 + dim] = (1 - alpha) * v[i * 4 + dim] + alpha * v[(i + 1) * 4 + dim];
                        }
                    }
                    newNURBSPoints[s + level] = vectorFromV(k - degree);
                }
                const newNURBSKnots = arrayFromFunction((degree + 1) * 2, i => (i < degree + 1 ? knots[k - s] : t));
                result.push(new NURBS$$1(newNURBSPoints, degree, newNURBSKnots));
                k++;
            }
            // last curve
            const newNURBSPoints = arrayFromFunction(degree + 1, i => vectorFromV(points.length - degree - 1 + i));
            const newNURBSKnots = arrayFromFunction((degree + 1) * 2, i => (i < degree + 1 ? knots[k - 1] : knots[k]));
            result.push(new NURBS$$1(newNURBSPoints, degree, newNURBSKnots));
            return result;
        }
        split(t) {
            const { knots, points, degree } = this;
            assert(le$1(this.tMin, t) && le$1(t, this.tMax));
            let k = this.tInterval(t), s = 0; // s = multiplicity of the knot
            while (knots[k + 1] == t) {
                k++;
                s++;
            }
            const vectorFromV = (i) => new Vector(v.slice(i * 4, (i + 1) * 4));
            const leftPoints = new Array(k + 1 - s);
            // the first k + s + 1 points are identical to the current curve
            for (let i = 0; i < k + s - degree + 1; i++) {
                leftPoints[i] = this.points[i];
            }
            const rightPointsLength = points.length - (k - degree);
            const v = Vector.pack(points, new Float64Array(rightPointsLength * 4), k - degree);
            // we need to have multiplicity degree, so insert (degree - s) times
            for (let level = 1; level <= degree - s; level++) {
                for (let i = k - degree; i <= k - s - level; i++) {
                    const alpha = (t - knots[i + level]) / (knots[i + degree + 1] - knots[i + level]);
                    const j = i - (k - degree);
                    for (let dim = 0; dim < 4; dim++) {
                        v[j * 4 + dim] = (1 - alpha) * v[j * 4 + dim] + alpha * v[(j + 1) * 4 + dim];
                    }
                }
                leftPoints[k - degree + level] = vectorFromV(0);
            }
            const leftKnots = knots.slice(0, k + degree + 2 - s);
            for (let i = 0; i < degree - s + 1; i++) {
                leftKnots[k - s + 1 + i] = t;
            }
            const rightKnots = knots.slice(k - degree);
            for (let i = 0; i < degree + 1; i++) {
                rightKnots[i] = t;
            }
            const rightPoints = arrayFromFunction(rightPointsLength, i => vArrGet(v, 4, i));
            return [new NURBS$$1(leftPoints, degree, leftKnots), new NURBS$$1(rightPoints, degree, rightKnots)];
        }
        simplify() {
            assert(this.isBezier());
            if (3 == this.degree && this.isBSpline()) {
                return new BezierCurve$$1(this.points[0].p3(), this.points[1].p3(), this.points[2].p3(), this.points[3].p3(), this.tMin, this.tMax);
            }
            else if (2 == this.degree) {
                const [P0, P1, P2] = this.points;
                const [p0, p1, p2] = this.points.map(p => p.p3());
                const c = NURBS$$1.simplifyUnit2(P0.w, P1.w, P2.w).transform(M4.forSys(p1.to(p0), p1.to(p2), undefined, p1));
                const [tMin, tMax] = [c.pointT(p0), c.pointT(p2)].sort();
                return c.withBounds(snap(tMin, c.tMin), snap(tMax, c.tMax));
            }
            else if (1 == this.degree) {
                return L3$$1.throughPoints(this.points[0].p3(), this.points[1].p3());
            }
            else {
                return this;
            }
        }
        static simplifyUnit2(w0, w1, w2) {
            // see https://math.stackexchange.com/a/2794874/230980
            const delta = w0 * w2 - Math.pow(w1, 2);
            const cxy = w0 * w2 / 2 / delta;
            const center = new V3(cxy, cxy, 0);
            const k = (Math.pow(w1, 2) + delta - 2 * w1 * sqrt$1(abs$3(delta))) / 2 / delta;
            const p = V3.X;
            const q = new V3(k, cxy, 0);
            // const q = new V3(cxy, k, 0)
            if (eq0(delta)) {
                return new ParabolaCurve$$1(new V3(1 / 4, 1 / 4, 0), new V3(1, -1, 0), new V3(1, 1, 0), -0.5, 0.5);
            }
            else if (delta < 0) {
                // hyperbola
                return new HyperbolaCurve$$1(center, center.to(p), center.to(q));
            }
            else {
                // ellipse
                return new EllipseCurve$$1(center, center.to(p), center.to(q), 0);
            }
        }
        elevateDegreeBezier() {
            assert(this.isBezier());
            const newPoints = new Array(this.points.length + 1);
            newPoints[0] = this.points[0];
            newPoints[this.points.length] = this.points[this.points.length - 1];
            for (let i = 1; i < this.points.length; i++) {
                newPoints[i] = Vector.lerp(this.points[i], this.points[i - 1], i / (this.degree + 1));
            }
            const newKnots = NURBS$$1.bezierKnots(this.degree + 1, this.knots[0], this.knots[this.degree + 1]);
            return new NURBS$$1(newPoints, this.degree + 1, newKnots, this.tMin, this.tMax);
        }
        elevateDegree() {
            const segmentsElevated = this.getSegments().map(b => b.elevateDegreeBezier());
            // stitch together the segments
            const newPoints = new Array(2 + segmentsElevated.length * this.degree);
            newPoints[0] = segmentsElevated[0].points[0];
            newPoints.last = segmentsElevated.last.points.last;
            for (let i = 0; i < segmentsElevated.length; i++) {
                for (let pi = 1; pi < segmentsElevated[i].points.length - 1; pi++) {
                    newPoints[i * (segmentsElevated[0].points.length - 2) + pi] = segmentsElevated[i].points[pi];
                }
            }
            const newKnots = new Array(newPoints.length + this.degree + 2);
            for (let i = 0; i < this.degree + 2; i++) {
                newKnots[i] = this.knots[0];
            }
            for (let i = 0; i < segmentsElevated.length; i++) {
                for (let pi = 1; pi < segmentsElevated[i].points.length - 1; pi++) {
                    newKnots[i * (segmentsElevated[0].points.length - 2) + pi + this.degree + 1] =
                        segmentsElevated[i].knots.last;
                }
            }
            newKnots[newKnots.length - 1] = this.knots.last;
            newKnots[newKnots.length - 2] = this.knots.last;
            let result = new NURBS$$1(newPoints, this.degree + 1, newKnots, this.tMin, this.tMax);
            for (let i = 0; i < segmentsElevated.length - 1; i++) {
                let optimization;
                while ((optimization = result.removeKnot(segmentsElevated[i].knots.last))) {
                    result = optimization;
                }
            }
            return result;
        }
        transform(m4) {
            return this.transform4(m4);
        }
        transform4(m4) {
            return new NURBS$$1(this.points.map(p => m4.timesVector(p)), this.degree, this.knots, this.tMin, this.tMax);
        }
        /**
         * Returns the index of the interval which contains the value t.
         */
        tInterval(t) {
            const { degree, knots } = this;
            for (let s = degree; s < knots.length - 1 - degree; s++) {
                if (t >= knots[s] && t <= knots[s + 1]) {
                    return s;
                }
            }
            throw new Error(t + ' ' + knots);
        }
        static UnitCircle(sections = 2, tMin = 0, tMax = PI$4) {
            const dt = tMax - tMin;
            const tStep = dt / sections;
            const w = sin$2(PI$4 / 2 - tStep / 2);
            console.log(tStep / 2 / DEG);
            // cos
            const r = 1 / cos$2(tStep / 2);
            const points = arrayFromFunction(sections * 2 + 1, i => {
                const t = lerp(tMin, tMax, i / 2 / sections);
                if (i % 2 == 0) {
                    // control point on circle
                    return VV(cos$2(t), sin$2(t), 0, 1);
                }
                else {
                    return VV(r * w * cos$2(t), r * w * sin$2(t), 0, w);
                }
            });
            const knots = [];
            knots.push(tMin, tMin, tMin);
            for (let i = 0; i < sections - 1; i++) {
                const knot = lerp(tMin, tMax, (i + 1) / sections);
                knots.push(knot, knot);
            }
            knots.push(tMax, tMax, tMax);
            return new NURBS$$1(points, 2, knots);
        }
        debugInfo() {
            return {
                points: [
                    ...this.knots.slice(this.degree, -this.degree).map(t => this.at(t)),
                    ...this.points.map(p => p.p3()),
                ],
                lines: this.points.flatMap((p, i, ps) => (ps[i + 1] ? [p.p3(), ps[i + 1].p3()] : [])),
            };
        }
        isTsWithPlane(planeWC) {
            const { knots, degree, points } = this;
            const controlPointTs = [
                knots[degree],
                ...points
                    .slice(1, -1)
                    .map((p, i) => this.closestTToPoint(p.p3(), undefined, knots[i + 3], knots[i + degree])),
                knots[knots.length - degree - 1],
            ];
            const result = [];
            for (let i = 0; i < this.points.length - 1; i++) {
                const findClosest = (startT) => {
                    console.log('startT', startT);
                    // try {
                    const f = (t) => {
                        const [p, dt] = this.ptDtDdt(t);
                        return [planeWC.distanceToPointSigned(p), planeWC.normal1.dot(dt)];
                    };
                    let t = newtonIterateWithDerivative2(f, startT, 8, this.tMin, this.tMax);
                    let [distanceAtT, distanceDtAtT] = undefined === t ? [] : f(t);
                    if (t === undefined || !eq0(distanceAtT) || eq0(distanceDtAtT)) {
                        t = newtonIterateWithDerivative2(t => {
                            const [, dt, ddt] = this.ptDtDdt(t);
                            return [planeWC.normal1.dot(dt), planeWC.normal1.dot(ddt)];
                        }, startT, 8, this.tMin, this.tMax);
                    }
                    [distanceAtT, distanceDtAtT] = undefined === t ? [] : f(t);
                    if (undefined !== t && eq0(distanceAtT) && !result.some(r => eq(r, t))) {
                        result.push(t);
                    }
                };
                const a = this.points[i].p3();
                const b = this.points[i + 1].p3();
                const ad = snap0(planeWC.distanceToPointSigned(a));
                const bd = snap0(planeWC.distanceToPointSigned(b));
                if (ad * bd < 0) {
                    const startT = lerp(controlPointTs[i], controlPointTs[i + 1], ad / (ad - bd));
                    findClosest(startT);
                }
                else if (0 == bd) {
                    findClosest(this.closestTToPoint(b, controlPointTs[i + 1]));
                }
            }
            return result;
        }
        isInfosWithCurve(curveWC) {
            if (curveWC instanceof L3$$1) {
                return this.isInfosWithLine(curveWC.anchor, curveWC.dir1);
            }
            return super.isInfosWithCurve(curveWC);
        }
        isInfosWithLine(anchor, dir) {
            const thisPlane = P3$$1.fromPoints(this.points.map(p => p.p3()));
            const l = L3$$1.anchorDirection(anchor, dir);
            const maxDistanceToPlane = this.points.map(p => thisPlane.distanceToPoint(p.p3())).max();
            const thisIsPlanar = eq0(maxDistanceToPlane);
            if (thisIsPlanar && !thisPlane.containsLine(l)) {
                const [t] = l.isTsWithPlane(thisPlane);
                if (undefined === t)
                    return [];
                const p = l.at(t);
                return this.containsPoint(p) ? [{ tThis: this.pointT(p), tOther: L3$$1.pointT(anchor, dir, p), p }] : [];
            }
            else {
                const thisTs = this.isTsWithPlane(P3$$1.normalOnAnchor(thisPlane.normal1.cross(dir), anchor));
                const infos = thisTs.map(tThis => {
                    const p = this.at(tThis);
                    return { tThis, tOther: L3$$1.pointT(anchor, dir, p), p };
                });
                return thisIsPlanar ? infos : infos.filter(info => L3$$1.containsPoint(anchor, dir, info.p));
            }
        }
        roots() {
            console.log(this.tMin, this.tMax);
            arraySamples(this.tMin, this.tMax, 30).forEach(t => {
                console.log(t + ',' + this.tangentAt(t).z);
            });
            const result = [[], [], []];
            for (let i = 0; i < this.points.length - 1; i++) {
                const findClosest = (startT, d) => {
                    console.log('d', d, 'startT', startT);
                    // try {
                    const root = newtonIterateWithDerivative2(t => {
                        const [, dt, ddt] = this.ptDtDdt(t);
                        return [dt.e(d), ddt.e(d)];
                    }, startT, 8, this.tMin, this.tMax);
                    if (undefined !== root) {
                        result[d].push(root);
                    }
                    console.log('d', d, 'startT', startT, 'root', root);
                };
                const a = this.points[i].p3();
                const b = this.points[i + 1].p3();
                const ab = a.to(b);
                for (let d = 0; d < 3; d++) {
                    if (0 !== i && eq0(ab.e(d))) {
                        const startT = lerp(this.knots[i], this.knots[i + this.degree + 2], 0.5);
                        findClosest(startT, d);
                    }
                    else if (i < this.points.length - 2) {
                        const bc = b.to(this.points[i + 2].p3());
                        if (!eq0(bc.e(d)) && ab.e(d) * bc.e(d) < 0) {
                            findClosest(this.closestTToPoint(b, this.guessTClosestToControlPoint(i + 1)), d);
                        }
                    }
                }
            }
            console.log(result);
            return result;
        }
        //getAABB() {
        //	return new AABB().addPoints(this.points.map(p => p.p3()))
        //}
        /**
         * Rough approximation of t param for points closest to control point.
         */
        guessTClosestToControlPoint(pointIndex) {
            return lerp(this.knots[pointIndex], this.knots[pointIndex + this.degree + 1], 0.5);
        }
        likeCurve(curve) {
            return (this == curve ||
                (hasConstructor(curve, NURBS$$1) &&
                    this.degree === curve.degree &&
                    this.points.every((p, i) => p.like(curve.points[i])) &&
                    this.knots.every((k, i) => eq(k, curve.knots[i]))));
        }
        isColinearTo(curve) {
            throw new Error("This doesn't even make sense.");
        }
    }
    NURBS$$1.EX2D = NURBS$$1.fromV3s([
        V$2(51, 141),
        V$2(11, 76),
        V$2(29, 32),
        V$2(46, 102),
        V$2(74, 148),
        V$2(189, 107),
        V$2(56, 10),
        V$2(206, 10),
        V$2(211, 98),
        V$2(195, 141),
        V$2(139, 148),
    ], 4);
    NURBS$$1.EX3D = new NURBS$$1([
        VV(94, 0, -34, 1),
        VV(69, 57, 45, 0.5),
        VV(-20, 44, 91, 1),
        VV(-89, -13, 47, 0.5),
        VV(-56, -97, -7, 1),
        VV(34, -83, -54, 0.5),
        VV(112, -53, 16, 1),
        VV(79, 30, 70, 0.5),
        VV(-2, -9, 141, 1),
        VV(-80, -40, 72, 0.5),
        VV(-38, -150, 43, 1),
        VV(43, -110, -29, 0.5),
        VV(130, -106, 65, 1),
    ], 2, [-12, -12, -12, -8, -8, -4, -4, 0, 0, 4, 4, 8, 8, 12, 12, 12]);
    NURBS$$1.prototype.tIncrement = 1 / 128;
    function minAndMax(arr, start = 0, end = arr.length) {
        let min = Infinity, max = -Infinity;
        for (let i = start; i < end; i++) {
            if (min > arr[i])
                min = arr[i];
            if (max < arr[i])
                max = arr[i];
        }
        return [min, max];
    }

    /**
     * Plane x DOT this.normal1 = this.w
     */
    class P3$$1 extends Transformable {
        /**
         * Oriented plane, i.e. splits R^3 in half, with one half being "in front" of the plane.
         * Leads to multiple comparisons: isCoplanarToPlane returns if the plane occupies the same space,
         * like returns if the plane occupies the same space and has the same orientation
         *
         * Points x on the plane fulfill the equation: normal1 DOT x = w
         *
         * @param normal1 unit plane normal1
         * @param w signed (rel to normal1) distance from the origin
         */
        constructor(normal1, w = 0) {
            super();
            this.normal1 = normal1;
            this.w = w;
            assertVectors(normal1);
            assertNumbers(w);
            assert(normal1.hasLength(1), 'normal1.hasLength(1)' + normal1);
        }
        get anchor() {
            return this.normal1.times(this.w);
        }
        static throughPoints(a, b, c) {
            assertVectors(a, b, c);
            const n1 = b
                .minus(a)
                .cross(c.minus(a))
                .unit();
            return new P3$$1(n1, n1.dot(a));
        }
        static normalOnAnchor(normal, anchor) {
            assertVectors(normal, anchor);
            const n1 = normal.unit();
            return new this(n1, n1.dot(anchor));
        }
        /**
         * Create a plane which intersects the X, Y and Z axes at the specified offsets.
         * x/x0 + y/y0 + y/y0 = 1
         */
        static forAxisIntercepts(x0, y0, z0) {
            assertNumbers(x0, y0, z0);
            const normal = new V3(1 / x0, 1 / y0, 1 / z0);
            return new P3$$1(normal.unit(), normal.length());
        }
        /**
         * Create a plane containing `anchor` and extending in directions `v0` and `v1`.
         * `v0` and `v1` may not be parallel.
         * @param anchor
         * @param v0
         * @param v1
         */
        static forAnchorAndPlaneVectors(anchor, v0, v1) {
            assertVectors(anchor, v0, v1);
            assert(!v0.isParallelTo(v1));
            return this.normalOnAnchor(v0.cross(v1), anchor);
        }
        /**
         * Create a plane which contains botha point and a line. The point may not lie on the line.
         * @param p
         * @param line
         */
        static forPointAndLine(p, line) {
            return this.forAnchorAndPlaneVectors(line.anchor, line.dir1, line.anchor.to(p));
        }
        /**
         * ax + by + cz + d = 0
         */
        static forABCD(a, b, c, d) {
            const normalLength = Math.hypot(a, b, c);
            if (eq0(normalLength))
                return undefined;
            return new P3$$1(new V3(a / normalLength, b / normalLength, c / normalLength), -d / normalLength);
        }
        static vanishingPlane(m4) {
            return P3$$1.forABCD(m4.m[12], m4.m[13], m4.m[14], m4.m[15]);
        }
        static forAABB(aabb, distance = 0) {
            return [
                new P3$$1(V3.X, aabb.max.x + distance),
                new P3$$1(V3.X.negated(), -aabb.min.x - distance),
                new P3$$1(V3.Y, aabb.max.y + distance),
                new P3$$1(V3.Y.negated(), -aabb.min.y - distance),
                new P3$$1(V3.Z, aabb.max.z + distance),
                new P3$$1(V3.Z.negated(), -aabb.min.z - distance),
            ];
        }
        // Fit a plane to a collection of points.
        // Fast, and accurate to within a few degrees.
        // Returns None if the points do not span a plane.
        static fromPoints(points) {
            const n = points.length;
            if (n < 3) {
                return undefined;
            }
            const centroid = V3.add(...points).div(n);
            // Calculate full 3x3 covariance matrix, excluding symmetries:
            let xx = 0.0;
            let xy = 0.0;
            let xz = 0.0;
            let yy = 0.0;
            let yz = 0.0;
            let zz = 0.0;
            for (const p of points) {
                const r = p.minus(centroid);
                xx += r.x * r.x;
                xy += r.x * r.y;
                xz += r.x * r.z;
                yy += r.y * r.y;
                yz += r.y * r.z;
                zz += r.z * r.z;
            }
            xx /= n;
            xy /= n;
            xz /= n;
            yy /= n;
            yz /= n;
            zz /= n;
            let weighted_dir = V3.O;
            {
                const det_x = yy * zz - yz * yz;
                const axis_dir = new V3(det_x, xz * yz - xy * zz, xy * yz - xz * yy);
                let weight = det_x * det_x;
                if (weighted_dir.dot(axis_dir) < 0.0) {
                    weight = -weight;
                }
                weighted_dir = weighted_dir.plus(axis_dir.times(weight));
            }
            {
                const det_y = xx * zz - xz * xz;
                const axis_dir = new V3(xz * yz - xy * zz, det_y, xy * xz - yz * xx);
                let weight = det_y * det_y;
                if (weighted_dir.dot(axis_dir) < 0.0) {
                    weight = -weight;
                }
                weighted_dir = weighted_dir.plus(axis_dir.times(weight));
            }
            {
                const det_z = xx * yy - xy * xy;
                const axis_dir = new V3(xy * yz - xz * yy, xy * xz - yz * xx, det_z);
                let weight = det_z * det_z;
                if (weighted_dir.dot(axis_dir) < 0.0) {
                    weight = -weight;
                }
                weighted_dir = weighted_dir.plus(axis_dir.times(weight));
            }
            const normal = weighted_dir.unit();
            return P3$$1.normalOnAnchor(normal, centroid);
        }
        axisIntercepts() {
            const w = this.w, n = this.normal1;
            return new V3(w / n.x, w / n.y, w / n.z);
        }
        isCoplanarToPlane(plane) {
            assertInst(P3$$1, plane);
            return this.like(plane) || this.likeFlipped(plane);
        }
        like(plane) {
            assertInst(P3$$1, plane);
            return eq(this.w, plane.w) && this.normal1.like(plane.normal1);
        }
        likeFlipped(plane) {
            assertInst(P3$$1, plane);
            return eq(this.w, -plane.w) && this.normal1.like(plane.normal1.negated());
        }
        /**
         * True iff plane.normal1 is equal to this.normal1 or it's negation.
         *
         */
        isParallelToPlane(plane) {
            assertInst(P3$$1, plane);
            return eq(1, Math.abs(this.normal1.dot(plane.normal1)));
        }
        isParallelToLine(line) {
            assertInst(L3$$1, line);
            return eq0(this.normal1.dot(line.dir1));
        }
        isPerpendicularToLine(line) {
            assertInst(L3$$1, line);
            // this.normal1 || line.dir1
            return eq(1, Math.abs(this.normal1.dot(line.dir1)));
        }
        isPerpendicularToPlane(plane) {
            assertInst(P3$$1, plane);
            return eq0(this.normal1.dot(plane.normal1));
        }
        toSource() {
            return callsce('new P3', this.normal1, this.w);
        }
        translated(offset) {
            return new P3$$1(this.normal1, this.w + offset.dot(this.normal1));
        }
        transform(m4) {
            // See https://stackoverflow.com/questions/7685495/transforming-a-3d-plane-using-a-4x4-matrix
            // See http://www.songho.ca/opengl/gl_normaltransform.html
            // with homogeneous coordinates, the hessian normal form of this plane is
            // (p, 1) * (normal1, -w) = 0
            // transformation: (m4^-1 * (p, 1)) DOT (normal1, -w) = 0
            // => (p, 1) DOT ((m4^-T) * (normal1, -w)) = 0
            // (validity of the above transformation is easily seen by expanding the matrix multiplication and dot product)
            // hence, (newNormal, newW) = (m4^-T) * (normal1, -w)
            // we divide both newNormal and newW by newNormal.length() to normalize the normal vector
            const m4InversedTransposed = M4.transpose(M4.inverse(m4, M4.temp0), M4.temp1);
            const [nx, ny, nz] = this.normal1;
            const newNormal = m4InversedTransposed.timesVector(VV(nx, ny, nz, -this.w));
            return P3$$1.forABCD(newNormal.x, newNormal.y, newNormal.z, newNormal.w);
        }
        distanceToLine(line) {
            assertInst(L3$$1, line);
            if (!this.isParallelToLine(line)) {
                return this.distanceToPoint(line.anchor);
            }
            else {
                return 0;
            }
        }
        containsPoint(x) {
            assertVectors(x);
            return eq(this.w, this.normal1.dot(x));
        }
        containsLine(line) {
            assertInst(L3$$1, line);
            return this.containsPoint(line.anchor) && this.isParallelToLine(line);
        }
        distanceToPointSigned(point) {
            assertInst(V3, point);
            return this.normal1.dot(point) - this.w;
        }
        distanceToPoint(point) {
            assertInst(V3, point);
            return Math.abs(this.normal1.dot(point) - this.w);
        }
        intersectionWithLine(line) {
            return line.intersectionWithPlane(this);
        }
        intersectionWithPlane(plane) {
            assertInst(P3$$1, plane);
            /*

             this: n0 * x = w0
             plane: n1 * x = w1
             plane perpendicular to both which goes through origin:
             n2 := n0 X x1
             n2 * x = 0
             */
            if (this.isParallelToPlane(plane)) {
                return undefined;
            }
            /*
             var n0 = this.normal1, n1 = plane.normal1, n2 = n0.cross(n1).unit(), m = M4.forSys(n0, n1, n2)
             var x0 = this.anchor, x1 = plane.anchor, x2 = V3.O
             var p = n2.times(x2.dot(n2))
             .plus(n1.cross(n2).times(x0.dot(n0)))
             .plus(n2.cross(n0).times(x1.dot(n1)))
             .div(m.determinant())
             */
            const n0 = this.normal1, n1 = plane.normal1, n2 = n0.cross(n1).unit();
            const p = M4.forRows(n0, n1, n2)
                .inversed()
                .transformVector(new V3(this.w, plane.w, 0));
            return new L3$$1(p, n2);
        }
        /**
         * Returns the point in the plane closest to the given point
         *
         */
        projectedPoint(x) {
            // See http://math.stackexchange.com/questions/444968/project-a-point-in-3d-on-a-given-plane
            // p = x - ((x - planeAnchor) * normal1) * normal1
            return x.minus(this.normal1.times(x.minus(this.anchor).dot(this.normal1)));
        }
        projectedVector(x) {
            // See V3.rejectedFrom. Simplified, as this.normal1.length() == 1
            return x.minus(this.normal1.times(x.dot(this.normal1)));
        }
        flipped() {
            return new P3$$1(this.normal1.negated(), -this.w);
        }
        containsCurve(curve) {
            if (curve instanceof L3$$1) {
                return this.containsLine(curve);
            }
            else if (curve instanceof EllipseCurve$$1 || curve instanceof HyperbolaCurve$$1 || curve instanceof ParabolaCurve$$1) {
                return this.containsPoint(curve.center) && this.normal1.isParallelTo(curve.normal);
            }
            else if (curve instanceof BezierCurve$$1) {
                return curve.points.every(p => this.containsPoint(p));
            }
            else {
                throw new Error('' + curve);
            }
        }
        equals(obj) {
            return hasConstructor(obj, P3$$1) && this.normal1.equals(obj.normal1) && this.w == obj.w;
        }
        hashCode() {
            return (this.normal1.hashCode() * 31) | (0 + floatHashCode(this.w));
        }
    }
    P3$$1.YZ = new P3$$1(V3.X, 0);
    P3$$1.ZX = new P3$$1(V3.Y, 0);
    P3$$1.XY = new P3$$1(V3.Z, 0);

    class Surface$$1 extends Transformable {
        static loopContainsPointGeneral(loop, pWC, testLine, lineOut) {
            const testPlane = P3$$1.normalOnAnchor(lineOut, pWC);
            // edges colinear to the testing line; these will always be counted as "inside" relative to the testing line
            const colinearEdges = loop.map(edge => edge.colinearToLine(testLine));
            let inside = false;
            function logIS(isP) {
                const isT = testLine.pointT(isP);
                if (eq0(isT)) {
                    return true;
                }
                else if (isT > 0) {
                    inside = !inside;
                }
                return false;
            }
            for (let edgeIndex = 0; edgeIndex < loop.length; edgeIndex++) {
                const edge = loop[edgeIndex];
                const nextEdgeIndex = (edgeIndex + 1) % loop.length, nextEdge = loop[nextEdgeIndex];
                //console.log(edge.toSource()) {p:V(2, -2.102, 0),
                if (colinearEdges[edgeIndex]) {
                    const lineAT = testLine.pointT(edge.a), lineBT = testLine.pointT(edge.b);
                    if (Math.min(lineAT, lineBT) <= NLA_PRECISION && -NLA_PRECISION <= Math.max(lineAT, lineBT)) {
                        return PointVsFace$$1.ON_EDGE;
                    }
                    // edge colinear to intersection
                    const nextInside = colinearEdges[nextEdgeIndex] ||
                        dotCurve2$$1(nextEdge.curve, nextEdge.aT, lineOut, sign$2(nextEdge.deltaT())) < 0;
                    if (!nextInside) {
                        if (logIS(edge.b))
                            return PointVsFace$$1.ON_EDGE;
                    }
                }
                else {
                    for (const edgeT of edge.edgeISTsWithPlane(testPlane)) {
                        if (edgeT == edge.bT) {
                            if (!testLine.containsPoint(edge.b))
                                continue;
                            // endpoint lies on intersection line
                            if (edge.b.like(pWC)) {
                                // TODO: refactor, dont check for different sides, just logIs everything
                                return PointVsFace$$1.ON_EDGE;
                            }
                            const edgeInside = dotCurve2$$1(edge.curve, edge.bT, lineOut, -sign$2(edge.deltaT())) < 0;
                            const nextInside = colinearEdges[nextEdgeIndex] ||
                                dotCurve2$$1(nextEdge.curve, nextEdge.aT, lineOut, sign$2(nextEdge.deltaT())) < 0;
                            if (edgeInside != nextInside) {
                                if (logIS(edge.b))
                                    return PointVsFace$$1.ON_EDGE;
                            }
                        }
                        else if (edgeT != edge.aT) {
                            const p = edge.curve.at(edgeT);
                            if (!testLine.containsPoint(p))
                                continue;
                            // edge crosses line, neither starts nor ends on it
                            if (logIS(p))
                                return PointVsFace$$1.ON_EDGE;
                            // TODO: tangents?
                        }
                    }
                }
            }
            return inside ? PointVsFace$$1.INSIDE : PointVsFace$$1.OUTSIDE;
        }
        static loopContainsPointEllipse(loop, pWC, testLine, pWCT) {
            const lineOut = testLine.normal;
            const testPlane = P3$$1.normalOnAnchor(testLine.normal, pWC);
            const colinearEdges = loop.map(edge => testLine.isColinearTo(edge.curve));
            let inside = false;
            if (undefined === pWCT) {
                pWCT = testLine.pointT(pWC);
            }
            const pT = pWCT;
            function logIS(isP) {
                const isT = testLine.pointT(isP);
                if (eq(pT, isT)) {
                    return true;
                }
                else if (pT < isT && le$1(isT, PI$4)) {
                    inside = !inside;
                }
                return false;
            }
            for (let edgeIndex = 0; edgeIndex < loop.length; edgeIndex++) {
                const edge = loop[edgeIndex];
                const nextEdgeIndex = (edgeIndex + 1) % loop.length, nextEdge = loop[nextEdgeIndex];
                //console.log(edge.toSource()) {p:V(2, -2.102, 0),
                if (colinearEdges[edgeIndex]) {
                    let edgeT;
                    if (edge.curve.containsPoint(pWC) &&
                        le$1(edge.minT, (edgeT = edge.curve.pointT(pWC))) &&
                        le$1(edgeT, edge.maxT)) {
                        return PointVsFace$$1.ON_EDGE;
                    }
                    // edge colinear to intersection
                    const nextInside = colinearEdges[nextEdgeIndex] ||
                        dotCurve2$$1(nextEdge.curve, nextEdge.aT, lineOut, sign$2(nextEdge.deltaT())) < 0;
                    if (!nextInside && testLine.containsPoint(edge.b)) {
                        if (logIS(edge.b))
                            return PointVsFace$$1.ON_EDGE;
                    }
                }
                else {
                    for (const edgeT of edge.edgeISTsWithPlane(testPlane)) {
                        if (edgeT == edge.bT) {
                            if (!testLine.containsPoint(edge.b))
                                continue;
                            // endpoint lies on intersection testLine
                            const edgeInside = dotCurve2$$1(edge.curve, edge.bT, lineOut, -sign$2(edge.deltaT())) < 0;
                            const nextInside = colinearEdges[nextEdgeIndex] ||
                                dotCurve2$$1(nextEdge.curve, nextEdge.aT, lineOut, sign$2(nextEdge.deltaT())) < 0;
                            if (edgeInside != nextInside) {
                                if (logIS(edge.b))
                                    return PointVsFace$$1.ON_EDGE;
                            }
                        }
                        else if (edgeT != edge.aT) {
                            const p = edge.curve.at(edgeT);
                            if (!testLine.containsPoint(p))
                                continue;
                            // edge crosses testLine, neither starts nor ends on it
                            if (logIS(p))
                                return PointVsFace$$1.ON_EDGE;
                            // TODO: tangents?
                        }
                    }
                }
            }
            return inside ? PointVsFace$$1.INSIDE : PointVsFace$$1.OUTSIDE;
        }
        toString() {
            return this.toSource();
        }
        toSource(rounder = x => x) {
            return callsce.call(undefined, 'new ' + this.constructor.name, ...this.getConstructorParameters());
        }
        /**
         * Return points which would touch AABB. Doesnt include borders due to paramtetric bounds, for example.
         */
        getExtremePoints() {
            return [];
        }
        isCurvesWithSurface(surface) {
            return surface.isCurvesWithSurface(this); //.map(curve => curve.reversed())
        }
        containsCurve(curve) {
            if (curve instanceof PPCurve$$1) {
                if (this.equals(curve.parametricSurface1) || this.equals(curve.parametricSurface2)) {
                    return true;
                }
            }
            if (curve instanceof ImplicitCurve$$1) {
                for (let i = ceil(curve.tMin) + 1; i <= floor$1(curve.tMax) - 1; i++) {
                    if (!this.containsPoint(curve.points[i])) {
                        return false;
                    }
                }
                return true;
            }
            return false;
        }
        flipped2(doFlip) {
            return doFlip ? this.flipped() : this;
        }
        clipCurves(curves) {
            return curves;
        }
        equals(obj) {
            return (this === obj ||
                (this.constructor === obj.constructor &&
                    this.getConstructorParameters().equals(obj.getConstructorParameters())));
        }
        hashCode() {
            return this.getConstructorParameters().hashCode();
        }
        zDirVolume(allEdges) {
            return this.visit(ZDirVolumeVisitor$$1, allEdges);
        }
        calculateArea(allEdges) {
            return this.visit(CalculateAreaVisitor$$1, allEdges);
        }
    }
    var PointVsFace$$1;
    (function (PointVsFace$$1) {
        PointVsFace$$1[PointVsFace$$1["INSIDE"] = 0] = "INSIDE";
        PointVsFace$$1[PointVsFace$$1["OUTSIDE"] = 1] = "OUTSIDE";
        PointVsFace$$1[PointVsFace$$1["ON_EDGE"] = 2] = "ON_EDGE";
    })(PointVsFace$$1 || (PointVsFace$$1 = {}));
    class ImplicitSurface$$1 extends Surface$$1 {
        static is(obj) {
            return obj.implicitFunction && obj.didp;
        }
    }

    class ParametricSurface$$1 extends Surface$$1 {
        constructor(uMin, uMax, vMin, vMax) {
            super();
            this.uMin = uMin;
            this.uMax = uMax;
            this.vMin = vMin;
            this.vMax = vMax;
            assertNumbers(uMin, uMax, vMin, vMax);
            assert(uMin < uMax);
            assert(vMin < vMax);
            assert((x => x[x.length - 4])(this.getConstructorParameters()) == this.uMin, this.getConstructorParameters(), this.uMin);
        }
        static isCurvesParametricImplicitSurface(ps, is, uStep, vStep = uStep, curveStepSize) {
            const pf = ps.pUVFunc(), icc = is.implicitFunction();
            const dpdu = ps.dpdu();
            const dpdv = ps.dpdv();
            const didp = is.didp.bind(is);
            const ist = (x, y) => icc(pf(x, y));
            const didu = (u, v) => didp(pf(u, v)).dot(dpdu(u, v));
            const didv = (u, v) => didp(pf(u, v)).dot(dpdv(u, v));
            const mf = MathFunctionR2R$$1.forFFxFy(ist, didu, didv);
            const curves = Curve$$1.breakDownIC(mf, ps, uStep, vStep, curveStepSize, (u, v) => is.containsPoint(pf(u, v))).map(({ points, tangents }, i) => PICurve$$1.forParametricPointsTangents(ps, is, points, tangents, curveStepSize));
            return curves;
        }
        static isCurvesParametricParametricSurface(ps1, ps2, s1Step, t1Step = s1Step, curveStepSize) {
            return breakDownPPCurves$$1(ps1, ps2, s1Step, t1Step, curveStepSize);
        }
        static is(obj) {
            return obj.pUVFunc;
        }
        pUV(u, v) {
            return this.pUVFunc()(u, v);
        }
        pUVFunc() {
            return this.pUV.bind(this);
        }
        uvP(pWC) {
            return this.uvPFunc()(pWC);
        }
        uvPFunc() {
            return this.uvP.bind(this);
        }
        bounds(u, v) {
            return this.uMin <= u && u <= this.uMax && this.vMin <= v && v <= this.vMax;
        }
        /**
         * Positive values are inside bounds.
         */
        boundsSigned(u, v) {
            return min$2(u - this.uMin, this.uMax - u, v - this.vMin, this.vMax - v);
        }
        normalP(p) {
            const pmPoint = this.uvPFunc()(p);
            return this.normalUV(pmPoint.x, pmPoint.y);
        }
        normalUVFunc() {
            return this.normalUV.bind(this);
        }
        normalUV(u, v) {
            return this.normalUVFunc()(u, v);
        }
        parametersValid(u, v) {
            return between(u, this.uMin, this.uMax) && between(v, this.vMin, this.vMax);
        }
        toMesh(uStep = this.uStep, vStep = this.vStep) {
            assert(isFinite(this.vMin) && isFinite(this.vMax) && isFinite(this.uMin) && isFinite(this.uMax));
            assert(isFinite(uStep) && isFinite(vStep));
            return Mesh$$1.parametric(this.pUVFunc(), this.normalUVFunc(), this.uMin, this.uMax, this.vMin, this.vMax, ceil((this.uMax - this.uMin) / uStep), ceil((this.vMax - this.vMin) / vStep));
        }
        isCurvesWithImplicitSurface(is, uStep, vStep, stepSize) {
            return ParametricSurface$$1.isCurvesParametricImplicitSurface(this, is, uStep, vStep, stepSize);
        }
        edgeLoopCCW(contour) {
            const ptpF = this.uvPFunc();
            return isCCW(contour.flatMap(e => e.getVerticesNo0()).map(v => ptpF(v)), V3.Z);
        }
        like(object) {
            if (!this.isCoplanarTo(object))
                return false;
            // normals need to point in the same direction (outwards or inwards) for both
            const pSMinTMin = this.pUVFunc()(this.uMin, this.vMin);
            const thisNormal = this.normalUVFunc()(this.uMin, this.vMin);
            const otherNormal = object.normalP(pSMinTMin);
            return 0 < thisNormal.dot(otherNormal);
        }
        getApproxAABB() {
            const result = new AABB();
            result.addPoints(this.getExtremePoints());
            const ps = [V$2(0, 0), V$2(0, 1), V$2(1, 0), V$2(1, 1), V$2(0.5, 0.5)].map(p => this.pUV(lerp(this.uMin, this.uMax, p.x), lerp(this.vMin, this.vMax, p.y)));
            result.addPoints(ps);
            return result;
        }
    }

    class ConicSurface$$1 extends ParametricSurface$$1 {
        /**
         * returns new cone C = {apex + f1 * z * cos(d) + f2 * z * sin(d) + f3 * z | -PI <= d <= PI, 0 <= z}
         * @param f1
         * @param f2
         * @param dir Direction in which the cone opens. The ellipse spanned by f1, f2 is contained at (apex + f1).
         */
        constructor(center, f1, f2, dir, uMin = 0, uMax = PI$4, vMin = 0, vMax = 16) {
            super(uMin, uMax, vMin, vMax);
            this.center = center;
            this.f1 = f1;
            this.f2 = f2;
            this.dir = dir;
            assertVectors(center, f1, f2, dir);
            assert(0 <= vMin);
            this.matrix = M4.forSys(f1, f2, dir, center);
            this.matrixInverse = this.matrix.inversed();
            this.normalDir = sign$2(this.f1.cross(this.f2).dot(this.dir));
            this.pLCNormalWCMatrix = this.matrix
                .as3x3()
                .inversed()
                .transposed()
                .scale(this.normalDir);
        }
        pointFoot(pWC, startU, startV) {
            if (undefined === startU || undefined === startV) {
                // similar to uvP
                const pLC = this.matrixInverse.transformPoint(pWC);
                const angle = pLC.angleXY();
                if (undefined === startU) {
                    startU = angle < -PI$4 / 2 ? angle + TAU : angle;
                }
                if (undefined === startV) {
                    startV = pLC.z + (pLC.lengthXY() - pLC.z) * SQRT1_2;
                }
            }
            const f = ([u, v]) => {
                const pUVToPWC = this.pUV(u, v).to(pWC);
                return [this.dpdu()(u, v).dot(pUVToPWC), this.dpdv()(u).dot(pUVToPWC)];
            };
            const { 0: x, 1: y } = newtonIterate(f, [startU, startV]);
            return new V3(x, y, 0);
        }
        get apex() {
            return this.center;
        }
        static atApexThroughEllipse(apex, ellipse, uMin, uMax, vMin, vMax) {
            assertVectors(apex);
            assertInst(EllipseCurve$$1, ellipse);
            return new ConicSurface$$1(apex, ellipse.f1, ellipse.f2, apex.to(ellipse.center), uMin, uMax, vMin, vMax);
        }
        static unitISLineTs(anchor, dir) {
            const { x: ax, y: ay, z: az } = anchor;
            const { x: dx, y: dy, z: dz } = dir;
            // this cone: x² + y² = z²
            // line: p = anchor + t * dir1
            // split line equation into 3 component equations, insert into cone equation
            // transform to form (a t² + b t + c = 0) and solve with pqFormula
            const a = dx * dx + dy * dy - dz * dz;
            const b = 2 * (ax * dx + ay * dy - az * dz);
            const c = ax * ax + ay * ay - az * az;
            // cone only defined for 0 <= z, so filter invalid values
            return pqFormula(b / a, c / a).filter(t => 0 < az + t * dz);
        }
        // calculate intersection of plane ax + cz = d and cone x² + y² = z²
        static unitISPlane(a, c, d) {
            if (eq0(c)) {
                // plane is "vertical", i.e. parallel to Y and Z axes
                assert(!eq0(a)); // normal would be zero, which is invalid
                // z² - y² = d²/a²
                if (eq0(d)) {
                    // d = 0 => z² - y² = 0 => z² = y² => z = y
                    // plane goes through origin/V3.O
                    return [
                        new L3$$1(V3.O, new V3(0, -SQRT1_2, -SQRT1_2), undefined, 0),
                        new L3$$1(V3.O, new V3(0, -SQRT1_2, SQRT1_2), 0),
                    ];
                }
                else {
                    // hyperbola
                    const center = new V3(d / a, 0, 0);
                    const f1 = new V3(0, 0, abs$3(d / a)); // abs, because we always want the hyperbola to be pointing up
                    const f2 = new V3(0, d / a, 0);
                    return [new HyperbolaCurve$$1(center, f1, f2)];
                }
            }
            else {
                // c != 0
                const aa = a * a, cc = c * c;
                if (eq0(d)) {
                    // ax + cz = d => x = d - cz / a => x² = d² - 2cdz/a + c²z²/a²
                    // x² + y² = z²
                    // => d² - 2cdz/a + c²z²/a² + y² = z²
                    if (eq(aa, cc)) {
                        return [new L3$$1(V3.O, new V3(c, 0, -a).unit())];
                    }
                    else if (aa < cc) {
                        throw new Error('intersection is single point V3.O');
                    }
                    else if (aa > cc) {
                        return [
                            new L3$$1(V3.O, new V3(c, sqrt$1(aa - cc), -a).unit()),
                            new L3$$1(V3.O, new V3(c, -sqrt$1(aa - cc), -a).unit()),
                        ];
                    }
                }
                else {
                    if (eq(aa, cc)) {
                        // parabola
                        const parabolaVertex = new V3(d / 2 / a, 0, d / 2 / c);
                        const parabolaVertexTangentPoint = new V3(d / 2 / a, d / c, d / 2 / c);
                        const p2 = new V3(0, 0, d / c);
                        const f2 = p2.minus(parabolaVertex);
                        return [
                            new ParabolaCurve$$1(parabolaVertex, parabolaVertexTangentPoint.minus(parabolaVertex), f2.z < 0 ? f2.negated() : f2),
                        ];
                    }
                    else if (aa < cc) {
                        // ellipse
                        const center = new V3(-a * d / (cc - aa), 0, d * c / (cc - aa));
                        if (center.z < 0) {
                            return [];
                        }
                        const p1 = new V3(d / (a - c), 0, -d / (a - c));
                        const p2 = new V3(-a * d / (cc - aa), d / sqrt$1(cc - aa), d * c / (cc - aa));
                        return [new EllipseCurve$$1(center, center.to(p1), center.to(p2), -PI$4, PI$4)];
                    }
                    else if (aa > cc) {
                        // hyperbola
                        const center = new V3(-a * d / (cc - aa), 0, d * c / (cc - aa));
                        // const p1 = new V3(d / (a - c), 0, -d / (a - c))
                        // const p2 = new V3(-a * d / (cc - aa), d / sqrt(aa - cc), d * c / (cc - aa))
                        // const f1 = center.to(p1)
                        const f1 = new V3(d * c / (aa - cc), 0, -d * a / (aa - cc));
                        const f2 = new V3(0, d / sqrt$1(aa - cc), 0);
                        return [new HyperbolaCurve$$1(center, f1.z > 0 ? f1 : f1.negated(), f2)];
                    }
                }
            }
            throw new Error('???');
        }
        equals(obj) {
            return (this == obj ||
                (Object.getPrototypeOf(this) == Object.getPrototypeOf(obj) &&
                    this.center.equals(obj.center) &&
                    this.f1.equals(obj.f1) &&
                    this.f2.equals(obj.f2) &&
                    this.dir.equals(obj.dir)));
        }
        like(object) {
            if (!this.isCoplanarTo(object))
                return false;
            // normals need to point in the same direction (outwards or inwards) for both
            return this.normalDir == object.normalDir;
        }
        getVectors() {
            return [
                { anchor: this.center, dir1: this.dir },
                { anchor: this.center.plus(this.dir), dir1: this.f1 },
                { anchor: this.center.plus(this.dir), dir1: this.f2 },
            ];
        }
        getSeamPlane() {
            return P3$$1.forAnchorAndPlaneVectors(this.center, this.f1, this.dir);
        }
        loopContainsPoint(contour, p) {
            assertVectors(p);
            const line = this.center.like(p)
                ? new L3$$1(p, this.matrix.transformVector(new V3(0, 1, 1)).unit())
                : L3$$1.throughPoints(p, this.apex);
            const lineOut = line.dir1.cross(this.dir);
            return Surface$$1.loopContainsPointGeneral(contour, p, line, lineOut);
        }
        getConstructorParameters() {
            return [this.center, this.f1, this.f2, this.dir, this.uMin, this.uMax, this.vMin, this.vMax];
        }
        isTsForLine(line) {
            // transforming line manually has advantage that dir1 will not be renormalized,
            // meaning that calculated values t for lineLC are directly transferable to line
            const anchorLC = this.matrixInverse.transformPoint(line.anchor);
            const dirLC = this.matrixInverse.transformVector(line.dir1);
            return ConicSurface$$1.unitISLineTs(anchorLC, dirLC);
        }
        /**
         * Interestingly, two cones don't need to have parallel dirs to be coplanar.
         */
        isCoplanarTo(surface) {
            if (this === surface)
                return true;
            if (!(surface instanceof ConicSurface$$1) || !this.apex.like(surface.apex))
                return false;
            // at this point apexes are equal
            return this.containsEllipse(new EllipseCurve$$1(surface.center.plus(surface.dir), surface.f1, surface.f2));
        }
        containsEllipse(ellipse) {
            const ellipseLC = ellipse.transform(this.matrixInverse);
            if (ellipseLC.center.z < 0) {
                return false;
            }
            const { f1, f2 } = ellipseLC.rightAngled();
            const p1 = ellipseLC.center.plus(f1), p2 = ellipseLC.center.plus(f2);
            // check if both endpoints are on the cone's surface
            // and that one main axis is perpendicular to the Z-axis
            return eq(Math.pow(p1.x, 2) + Math.pow(p1.y, 2), Math.pow(p1.z, 2)) && eq(Math.pow(p2.x, 2) + Math.pow(p2.y, 2), Math.pow(p2.z, 2)) && (eq0(f1.z) || eq0(f2.z));
        }
        containsLine(line) {
            const lineLC = line.transform(this.matrixInverse);
            const d = lineLC.dir1;
            return lineLC.containsPoint(V3.O) && eq(d.x * d.x + d.y * d.y, d.z * d.z);
        }
        containsParabola(curve) {
            assertInst(ParabolaCurve$$1, curve);
            const curveLC = curve.transform(this.matrixInverse);
            if (curveLC.center.z < 0 || curveLC.f2.z < 0) {
                return false;
            }
            const { center, f1, f2 } = curveLC.rightAngled();
            // check if center is on the surface,
            // that tangent is perpendicular to the Z-axis
            // and that "y" axis is parallel to surface
            return (eq(center.x * center.x + center.y * center.y, center.z * center.z) &&
                eq0(f1.z) &&
                eq(f2.x * f2.x + f2.y * f2.y, f2.z * f2.z));
        }
        containsHyperbola(curve) {
            // calculate intersection of plane ax + cz = 1 and cone x² + y² = z²
            // const center = new V3(-a / (cc - aa), 0, 1 / (cc - aa))
            // const p1 = new V3(1 / (a - c), 0, -1 / (a - c))
            // const p2 = new V3(-a / (cc - aa), 1 / sqrt(aa - cc), 1 / (cc - aa))
            // const f1 = new V3(1 * c / (aa - cc), 0, -a / (aa - cc) )
            // const f2 = new V3(0, 1 / sqrt(aa - cc), 0)
            assertInst(HyperbolaCurve$$1, curve);
            const curveLC = curve.transform(this.matrixInverse).rightAngled();
            const centerXY = curveLC.center.xy();
            if (centerXY.likeO()) {
                return false;
            }
            const rot = centerXY.angleXY();
            const { center, f1, f2 } = curveLC.rotateZ(-rot);
            // s = a / (aa - cc)
            // t = -c / (aa - cc)
            // s + t = 1 / (a + c)
            // s - t = 1 / (a - c)
            // (s + t)(s - t) = (ss - tt) = 1 / (aa - cc)
            // u = 1 / sqrt(aa - cc) = sqrt(ss - tt)
            // check if center is on the surface,
            // that tangent is perpendicular to the Z-axis
            return (f1.z > 0 &&
                eq(center.x, f1.z) &&
                eq(center.z, f1.x) &&
                eq0(center.y) &&
                eq0(f1.y) &&
                eq(sqrt$1(abs$3(Math.pow(center.x, 2) - Math.pow(center.z, 2))), abs$3(f2.y)) &&
                eq0(f2.x) &&
                eq0(f2.z));
        }
        containsCurve(curve) {
            if (curve instanceof EllipseCurve$$1) {
                return this.containsEllipse(curve);
            }
            else if (curve instanceof L3$$1) {
                return this.containsLine(curve);
            }
            else if (curve instanceof HyperbolaCurve$$1) {
                return this.containsHyperbola(curve);
            }
            else if (curve instanceof ParabolaCurve$$1) {
                return this.containsParabola(curve);
            }
            else {
                return super.containsCurve(curve);
            }
        }
        transform(m4) {
            return new ConicSurface$$1(m4.transformPoint(this.center), m4.transformVector(this.f1).times(m4.isMirroring() ? -1 : 1), m4.transformVector(this.f2), m4.transformVector(this.dir), this.uMin, this.uMax, this.vMin, this.vMax);
        }
        transform4(m4) {
            const transformedApex = m4.timesVector(Vector.fromV3AndWeight(this.center, 1));
            const isometricZ = (z) => new EllipseCurve$$1(new V3(0, 0, z), new V3(z, 0, 0), new V3(0, z, 0));
            if (!eq0(transformedApex.w)) {
                // sMin doesn't change, but tMin does...
                const c = m4.transformPoint(this.center), f1 = m4.transformVector2(this.f1, this.center).times(m4.isMirroring() ? -1 : 1), f2 = m4.transformVector2(this.f2, this.center), dir = m4.transformVector2(this.dir, this.center);
                const matrixInv = M4.forSys(f1, f2, dir, c).inversed();
                const aabb = isometricZ(this.vMin)
                    .transform4(matrixInv.times(m4.times(this.matrix)))
                    .getAABB()
                    .addAABB(isometricZ(this.vMax)
                    .transform4(matrixInv.times(m4.times(this.matrix)))
                    .getAABB());
                return new ConicSurface$$1(c, f1, f2, dir, this.uMin, this.uMax, aabb.min.z, aabb.max.z);
            }
            else {
                const dir = transformedApex.V3();
                const baseCurve = isometricZ(this.vMin).transform4(m4.times(this.matrix));
                const matrixInv = M4.forSys(baseCurve.f1, baseCurve.f2, dir.unit(), baseCurve.center).inversed();
                const aabb = isometricZ(this.vMax)
                    .transform4(matrixInv.times(m4.times(this.matrix)))
                    .getAABB();
                return new CylinderSurface$$1(baseCurve, dir.unit(), this.uMin, this.uMax, min$2(0, aabb.min.z, aabb.max.z), max$2(0, aabb.min.z, aabb.max.z));
            }
        }
        flipped() {
            return new ConicSurface$$1(this.center, this.f1.negated(), this.f2, this.dir);
        }
        normalUVFunc() {
            const { f1, f2 } = this, f3 = this.dir;
            return (d, _z) => {
                return f2
                    .cross(f1)
                    .plus(f2.cross(f3.times(Math.cos(d))))
                    .plus(f3.cross(f1.times(Math.sin(d))))
                    .unit();
            };
        }
        normalP(p) {
            //TODO assert(!p.like(this.center))
            const pLC = this.matrixInverse.transformPoint(p);
            return this.normalUVFunc()(pLC.angleXY(), pLC.z);
        }
        pUVFunc() {
            return (u, v) => {
                // center + f1 v cos u + f2 v sin u + v dir
                const resultLC = new V3(v * cos$2(u), v * sin$2(u), v);
                return this.matrix.transformPoint(resultLC);
            };
        }
        dpdu() {
            return (u, v) => {
                const resultLC = new V3(v * -sin$2(u), v * cos$2(u), 0);
                return this.matrix.transformVector(resultLC);
            };
        }
        dpdv() {
            return s => {
                const resultLC = new V3(cos$2(s), sin$2(s), 1);
                return this.matrix.transformVector(resultLC);
            };
        }
        implicitFunction() {
            return pWC => {
                const pLC = this.matrixInverse.transformPoint(pWC);
                const radiusLC = pLC.lengthXY();
                return this.normalDir * (radiusLC - pLC.z);
            };
        }
        didp(pWC) {
            const pLC = this.matrixInverse.transformPoint(pWC);
            return this.pLCNormalWCMatrix.transformVector(pLC
                .xy()
                .unit()
                .withElement('z', -1)
                .times(this.normalDir));
        }
        containsPoint(p) {
            return eq0(this.implicitFunction()(p));
        }
        uvP(pWC) {
            const pLC = this.matrixInverse.transformPoint(pWC);
            const angle = pLC.angleXY();
            return new V3(angle < -PI$4 / 2 ? angle + TAU : angle, pLC.z, 0);
        }
        isCurvesWithSurface(surface) {
            if (surface instanceof PlaneSurface$$1) {
                return this.isCurvesWithPlane(surface.plane);
            }
            else if (ImplicitSurface$$1.is(surface)) {
                return ParametricSurface$$1.isCurvesParametricImplicitSurface(this, surface, 0.1, 0.1 / this.dir.length(), 0.02);
            }
            return super.isCurvesWithSurface(surface);
        }
        getCenterLine() {
            return new L3$$1(this.center, this.dir);
        }
        isCurvesWithPlane(plane) {
            assertInst(P3$$1, plane);
            const planeLC = plane.transform(this.matrixInverse);
            const planeNormal = planeLC.normal1;
            const c = planeNormal.z;
            /** "rotate" plane normal1 when passing to {@link ConicSurface.unitISPlane} so that
             *  y-component of normal1 is 0 */
            const a = planeNormal.lengthXY();
            const d = planeLC.w;
            // generated curves need to be rotated back before transforming to world coordinates
            const rotationMatrix = M4.rotateZ(planeNormal.angleXY());
            const wcMatrix = eq0(planeNormal.lengthXY()) ? this.matrix : this.matrix.times(rotationMatrix);
            return ConicSurface$$1.unitISPlane(a, c, d).flatMap(curve => {
                const curveWC = curve.transform(wcMatrix);
                if (curve instanceof EllipseCurve$$1) {
                    const curveLC = curve.transform(rotationMatrix);
                    const ts = curveLC.isTsWithPlane(P3$$1.ZX);
                    const intervals = getIntervals(ts, -PI$4, PI$4).filter(([a, b]) => curveLC.at((a + b) / 2).y > 0);
                    return intervals.flatMap(([a, b]) => curveWC.split(a, b));
                }
                const p = curveWC.at(0.2);
                return this.normalP(p)
                    .cross(plane.normal1)
                    .dot(curveWC.tangentAt(0.2)) > 0
                    ? curveWC
                    : curveWC.reversed();
            });
        }
        debugInfo() {
            return {
                ps: [this.center],
                lines: [this.center, this.center.plus(this.f1), this.center.plus(this.f2), this.center.plus(this.dir)],
            };
        }
    }
    /**
     * Unit cone. x² + y² = z², 0 <= z
     */
    ConicSurface$$1.UNIT = new ConicSurface$$1(V3.O, V3.X, V3.Y, V3.Z);
    ConicSurface$$1.prototype.uStep = PI$4 / 16;
    ConicSurface$$1.prototype.vStep = 256;

    /**
     * Surface normal1 is (t, z) => this.baseCurve.tangentAt(t) X this.dir
     * Choose dir appropriately to select surface orientation.
     */
    class ProjectedCurveSurface$$1 extends ParametricSurface$$1 {
        constructor(baseCurve, dir, uMin = baseCurve.tMin, uMax = baseCurve.tMax, vMin = -100, vMax = 100) {
            super(uMin, uMax, vMin, vMax);
            this.baseCurve = baseCurve;
            this.dir = dir;
            assertInst(Curve$$1, baseCurve);
            assertInst(V3, dir);
            assert(uMin < uMax);
            assert(vMin < vMax);
        }
        getConstructorParameters() {
            return [this.baseCurve, this.dir, this.uMin, this.uMax, this.vMin, this.vMax];
        }
        equals(obj) {
            return (this == obj ||
                (Object.getPrototypeOf(this) == Object.getPrototypeOf(obj) &&
                    this.dir.equals(obj.dir) &&
                    this.baseCurve.equals(obj.baseCurve)));
        }
        hashCode() {
            return [this.dir, this.baseCurve].hashCode();
        }
        containsLine(line) {
            return this.dir.isParallelTo(line.dir1) && this.containsPoint(line.anchor);
        }
        dpdu() {
            return (u, v) => this.baseCurve.tangentAt(u);
        }
        dpdv() {
            return (u, v) => this.dir;
        }
        normalUV(u, v) {
            return this.baseCurve
                .tangentAt(u)
                .cross(this.dir)
                .unit();
        }
        pUV(u, v) {
            return this.baseCurve.at(u).plus(this.dir.times(v));
        }
        pointFoot(pWC, ss) {
            const basePlane = new P3$$1(this.dir.unit(), 0);
            const projCurve = this.baseCurve.project(basePlane);
            const projPoint = basePlane.projectedPoint(pWC);
            const t = projCurve.closestTToPoint(projPoint, ss, this.uMin, this.uMax);
            const z = L3$$1.pointT(this.baseCurve.at(t), this.dir, pWC);
            return new V3(t, z, 0);
        }
        uvPFunc() {
            const projPlane = new P3$$1(this.dir.unit(), 0);
            const projBaseCurve = this.baseCurve.project(projPlane);
            return pWC => {
                const projPoint = projPlane.projectedPoint(pWC);
                assertNumbers(this.uMin);
                const t = projBaseCurve.pointT(projPoint, this.uMin, this.uMax);
                const z = L3$$1.pointT(this.baseCurve.at(t), this.dir, pWC);
                return new V3(t, z, 0);
            };
        }
        isCurvesWithPlane(plane) {
            assertInst(P3$$1, plane);
            if (this.dir.isPerpendicularTo(plane.normal1)) {
                const ts = this.baseCurve.isTsWithPlane(plane);
                return ts.map(t => {
                    const l3dir = 0 < this.baseCurve.tangentAt(t).dot(plane.normal1) ? this.dir : this.dir.negated();
                    return new L3$$1(this.baseCurve.at(t), l3dir.unit());
                });
            }
            else {
                let projCurve = this.baseCurve.transform(M4.project(plane, this.dir));
                if (this.dir.dot(plane.normal1) > 0) {
                    // we need to flip the ellipse so the tangent is correct
                    projCurve = projCurve.reversed();
                }
                return [projCurve];
            }
        }
        isCurvesWithSurface(surface) {
            if (surface instanceof PlaneSurface$$1) {
                return this.isCurvesWithPlane(surface.plane);
            }
            if (surface instanceof ProjectedCurveSurface$$1) {
                const dir1 = surface.dir;
                if (this.dir.isParallelTo(dir1)) {
                    const ts = surface.baseCurve.isTsWithSurface(this);
                    return ts.map(t => {
                        const p = surface.baseCurve.at(t);
                        const correctDir = this.normalP(p).cross(surface.normalP(p));
                        return new L3$$1(p, dir1.times(sign$2(correctDir.dot(dir1))));
                    });
                }
                else if (ImplicitSurface$$1.is(surface)) {
                    let curves2 = ParametricSurface$$1.isCurvesParametricImplicitSurface(this, surface, 0.1, 0.1 / surface.dir.length(), 0.05);
                    curves2 = surface.clipCurves(curves2);
                    return curves2;
                }
                else {
                    let curves2 = ParametricSurface$$1.isCurvesParametricParametricSurface(this, surface, 0.05, 0.1 / surface.dir.length(), 0.05);
                    curves2 = this.clipCurves(curves2);
                    curves2 = surface.clipCurves(curves2);
                    return curves2;
                }
            }
            if (surface instanceof EllipsoidSurface$$1) {
                return surface.isCurvesWithSurface(this);
            }
            return super.isCurvesWithSurface(surface);
        }
        containsPoint(pWC) {
            const uv = this.uvPFunc()(pWC);
            return this.pUVFunc()(uv.x, uv.y).like(pWC);
        }
        containsCurve(curve) {
            if (curve instanceof L3$$1) {
                return this.dir.isParallelTo(curve.dir1) && this.containsPoint(curve.anchor);
            }
            if (curve instanceof ImplicitCurve$$1) {
                return super.containsCurve(curve);
            }
            // project baseCurve and test curve onto a common plane and check if the curves are alike
            const projPlane = new P3$$1(this.dir.unit(), 0);
            const projBaseCurve = this.baseCurve.project(projPlane);
            const projCurve = curve.project(projPlane);
            return projBaseCurve.isColinearTo(projCurve);
        }
        isCoplanarTo(surface) {
            return (this == surface ||
                (hasConstructor(surface, ProjectedCurveSurface$$1) &&
                    this.dir.isParallelTo(surface.dir) &&
                    this.containsCurve(surface.baseCurve)));
        }
        like(object) {
            if (!this.isCoplanarTo(object))
                return false;
            // normals need to point in the same direction (outwards or inwards) for both
            const p00 = this.pUVFunc()(0, 0);
            const thisNormal = this.normalUVFunc()(0, 0);
            const otherNormal = object.normalP(p00);
            return 0 < thisNormal.dot(otherNormal);
        }
        loopContainsPoint(loop, p) {
            assertVectors(p);
            assert(isFinite(p.x), p.y, p.z);
            const line = new L3$$1(p, this.dir.unit());
            const ptpf = this.uvPFunc();
            const pp = ptpf(p);
            if (isNaN(pp.x)) {
                console.log(this.sce, p.sce);
                assert(false);
            }
            const lineOut = this.baseCurve.tangentAt(pp.x).rejectedFrom(this.dir);
            return Surface$$1.loopContainsPointGeneral(loop, p, line, lineOut);
        }
        transform(m4) {
            const f = m4.isMirroring() ? -1 : 1;
            return new this.constructor(this.baseCurve.transform(m4), m4.transformVector(this.dir).times(f), this.uMin, this.uMax, 1 == f ? this.vMin : -this.vMax, 1 == f ? this.vMax : -this.vMin);
        }
        transform4(m4) {
            const vp = m4.vanishingPoint(this.dir);
            if (!vp) {
                const f = m4.isMirroring() ? -1 : 1;
                return new this.constructor(this.baseCurve.transform4(m4), m4
                    .normalized()
                    .transformVector(this.dir)
                    .times(f), undefined, undefined, 1 == f ? this.tMin : -this.tMax, 1 == f ? this.tMax : -this.tMin);
            }
            const curveT = this.baseCurve.transform4(m4);
            if (curveT instanceof EllipseCurve$$1) {
                console.log(vp.sce, curveT.sce);
                return ConicSurface$$1.atApexThroughEllipse(vp, m4.isMirroring() ? curveT : curveT.reversed(), this.sMin, this.sMax, 1, 2);
            }
            return new PointProjectedSurface$$1(curveT, vp, P3$$1.throughPoints(curveT.at(curveT.tMin), curveT.at((curveT.tMin + curveT.tMax) / 2), curveT.at(curveT.tMax)), 1, this.sMin, this.sMax, 1, 2);
        }
        isTsForLine(line) {
            assertInst(L3$$1, line);
            const projPlane = new P3$$1(this.dir.unit(), 0);
            const projDir = projPlane.projectedVector(line.dir1);
            if (projDir.likeO()) {
                // line is parallel to this.dir
                return [];
            }
            const projAnchor = projPlane.projectedPoint(line.anchor);
            const projBaseCurve = this.baseCurve.project(projPlane);
            return projBaseCurve
                .isInfosWithLine(projAnchor, projDir, this.uMin, this.uMax, line.tMin, line.tMax)
                .map(info => info.tOther);
        }
        flipped() {
            return new this.constructor(this.baseCurve, this.dir.negated(), this.uMin, this.uMax, -this.vMax, -this.vMin);
        }
    }
    ProjectedCurveSurface$$1.prototype.uStep = 1 / 128;
    ProjectedCurveSurface$$1.prototype.vStep = 256;

    /**
     * Rotation surface with r = f(z)
     */
    class RotatedCurveSurface$$1 extends ParametricSurface$$1 {
        constructor(curve, matrix = M4.IDENTITY, uMin = 0, uMax = PI$4, vMin = curve.tMin, vMax = curve.tMax) {
            // d/dz (r(z))
            super(uMin, uMax, vMin, vMax);
            this.curve = curve;
            this.matrix = matrix;
            assertInst(M4, matrix);
            assert(matrix.isNoProj());
            assert(eq0(curve.at(vMin).y));
            this.matrixInverse = matrix.inversed();
            this.vStep = this.curve.tIncrement;
        }
        getConstructorParameters() {
            return [this.curve, this.matrix, this.uMin, this.uMax, this.vMin, this.vMax];
        }
        flipped() {
            return new RotatedCurveSurface$$1(this.curve, this.matrix.times(M4.mirror(P3$$1.YZ)), this.uMin, this.uMax, this.vMin, this.vMax);
        }
        transform(m4) {
            return new RotatedCurveSurface$$1(this.curve, m4.isMirroring() ? m4.times(this.matrix).times(M4.mirror(P3$$1.YZ)) : m4.times(this.matrix), this.uMin, this.uMax, this.vMin, this.vMax);
        }
        containsPoint(pWC) {
            const pLC = this.matrixInverse.transformPoint(pWC);
            const radius = pLC.lengthXY();
            return this.curve.containsPoint(new V3(radius, 0, pLC.z));
        }
        pUVFunc() {
            return (u, v) => {
                const { x: radius, z: z } = this.curve.at(v);
                return this.matrix.transformPoint(V3.polar(radius, u, z));
            };
        }
        dpdu() {
            return (u, v) => {
                const radius = this.curve.at(v).x;
                const resultLC = new V3(radius * -sin$2(u), radius * cos$2(u), 0);
                return this.matrix.transformVector(resultLC);
            };
        }
        dpdv() {
            return (u, v) => {
                const { x: drdt, z: dzdt } = this.curve.tangentAt(v);
                return this.matrix.transformVector(V3.polar(drdt, u, dzdt));
            };
        }
        normalUVFunc() {
            const matrix = this.matrix
                .inversed()
                .transposed()
                .as3x3();
            const normalLength = this.matrix.isMirroring() ? -1 : 1;
            return (u, v) => {
                const { x: drdt, z: dzdt } = this.curve.tangentAt(v);
                return matrix.transformVector(V3.polar(dzdt, u, -drdt)).toLength(normalLength);
            };
        }
        uvPFunc() {
            return pWC => {
                const pLC = this.matrixInverse.transformPoint(pWC);
                const angle = EllipseCurve$$1.XYLCPointT(pLC, this.uMin, this.uMax);
                const radius = pLC.lengthXY();
                return new V3(angle, this.curve.pointT(new V3(radius, 0, pLC.z)), 0);
            };
        }
        pointFoot(pWC, startS, startT) {
            const pLC = this.matrixInverse.transformPoint(pWC);
            const angle = abs$3(pLC.angleXY());
            const radius = pLC.lengthXY();
            return new V3(angle, this.curve.closestTToPoint(new V3(radius, 0, pLC.z)), 0);
        }
        isTsForLine(line) {
            const anchorLC = this.matrixInverse.transformPoint(line.anchor);
            const dirLC = this.matrixInverse.transformVector(line.dir1);
            if (dirLC.isParallelTo(V3.Z)) {
                if (!fuzzyBetween(anchorLC.angleXY(), this.uMin, this.uMax))
                    return [];
                return this.curve
                    .isInfosWithLine(new V3(anchorLC.lengthXY(), 0, anchorLC.z), dirLC)
                    .map(info => info.tOther);
            }
            else if (L3$$1.containsPoint(anchorLC.xy(), dirLC.xy(), V3.O)) {
                // line goes through Z axis
                const dotter = dirLC.xy().unit();
                return [
                    ...this.curve.isInfosWithLine(new V3(dotter.dot(anchorLC), 0, anchorLC.z), new V3(dotter.dot(dirLC), 0, dirLC.z)),
                    ...this.curve.isInfosWithLine(new V3(-dotter.dot(anchorLC), 0, anchorLC.z), new V3(-dotter.dot(dirLC), 0, dirLC.z)),
                ]
                    .map(info => info.tOther)
                    .filter(t => fuzzyBetween(L3$$1.at(anchorLC, dirLC, t).angleXY(), this.uMin, this.uMax));
            }
            else if (dirLC.isPerpendicularTo(V3.Z)) {
                const secs = this.isCurvesWithPlaneLC(new P3$$1(V3.Z, anchorLC.z));
                if (!secs)
                    return [];
                return secs.flatMap(sec => sec.isInfosWithLine(anchorLC, dirLC).map(info => info.tOther));
            }
            else {
                // transform into hyperbola
                // f(t) = V(((ax + t dx)² + (ay + t dy)²) ** 1/2, 0, az + t dz)
                // f(t) = V((ax² + 2 ax t dx + t² dx² + ay² + 2 ay t dy + t² dy²) ** 1/2, 0, az + t dz)
                // f(t) = V((t² (dx² + dy²) + 2 t (ax dx + ay dy) + ax² + ay²) ** 1/2, 0, az + t * dz)
                // (anchorLC.xy + t * dirLC.xy) * dir.xy = 0
                // t * dirLC.xy² = -anchorLC.xy * dirLC.xy
                const closestTToZ = -anchorLC.xy().dot(dirLC.xy()) / dirLC.xy().squared();
                const closestPointToZ = L3$$1.at(anchorLC, dirLC, closestTToZ);
                const scaleX = closestPointToZ.lengthXY();
                const lineGradientWC = dirLC.z / dirLC.lengthXY();
                const scaleZ = scaleX * lineGradientWC;
                const hc = HyperbolaCurve$$1.XY.transform(M4.rotateX(90 * DEG)
                    .scale(scaleX, 0, scaleZ)
                    .translate(0, 0, closestPointToZ.z));
                const infos = hc.isInfosWithCurve(this.curve);
                return infos
                    .map(info => (info.p.z - anchorLC.z) / dirLC.z)
                    .filter(t => fuzzyBetween(L3$$1.at(anchorLC, dirLC, t).angleXY(), this.uMin, this.uMax));
            }
        }
        isCurvesWithPlaneLC(planeLC) {
            if (planeLC.normal1.isParallelTo(V3.Z)) {
                return this.curve.isTsWithPlane(planeLC).map(t => {
                    const { x: radius } = this.curve.at(t);
                    return new EllipseCurve$$1(new V3(0, 0, planeLC.w), new V3(radius, 0, 0), new V3(0, radius, 0), this.uMin, this.uMax).transform(this.matrix);
                });
            }
            else if (planeLC.normal1.isPerpendicularTo(V3.Z) && planeLC.containsPoint(V3.O)) {
                return [this.curve.rotateZ(V3.Y.angleRelativeNormal(planeLC.normal1, V3.Z)).transform(this.matrix)];
            }
            return undefined;
        }
        isCurvesWithPlane(plane) {
            const planeLC = plane.transform(this.matrixInverse);
            const planeLCCurves = this.isCurvesWithPlaneLC(planeLC);
            if (planeLCCurves) {
                return planeLCCurves.map(curve => curve.transform(this.matrix));
            }
            else {
                return ParametricSurface$$1.isCurvesParametricImplicitSurface(this, new PlaneSurface$$1(plane), 0.05, 0.05, 0.02);
            }
        }
        loopContainsPoint(loop, pWC) {
            const pLC = this.matrixInverse.transformPoint(pWC);
            const angle = EllipseCurve$$1.XYLCPointT(pLC, this.uMin, this.uMax);
            const testCurveLC = EllipseCurve$$1.semicircle(pLC.lengthXY(), new V3(0, 0, pLC.z));
            const testCurveWC = testCurveLC.transform(this.matrix);
            return Surface$$1.loopContainsPointEllipse(loop, pWC, testCurveWC, angle);
        }
        isCoplanarTo(surface) {
            if (this === surface)
                return true;
            if (!hasConstructor(surface, RotatedCurveSurface$$1))
                return false;
            const surfaceLCToThisLC = this.matrixInverse.times(surface.matrix);
            assert(!surfaceLCToThisLC.X.xy().likeO());
            const zRotation = surfaceLCToThisLC.X.angleXY();
            return surface.curve.transform(M4.rotateZ(-zRotation).times(surfaceLCToThisLC)).isColinearTo(this.curve);
        }
        isCurvesWithSurface(surface) {
            if (surface instanceof PlaneSurface$$1) {
                return this.isCurvesWithPlane(surface.plane);
            }
            return super.isCurvesWithSurface(surface);
        }
        containsCurve(curve) {
            if (curve.constructor == this.curve.constructor) {
                const curveLC = curve.transform(this.matrixInverse);
                // find a point on curveLC which isn't on the Z-axis
                const t = [0, 0.5, 1].map(x => lerp(curveLC.tMin, curveLC.tMax, x)).withMax(t => curveLC.at(t).lengthXY());
                const angle = curveLC.at(t).angleXY();
                const curveLCRotated = curveLC.rotateZ(-angle);
                if (this.curve.isColinearTo(curveLCRotated)) {
                    return true;
                }
            }
            if (curve instanceof EllipseCurve$$1) {
                const curveLC = curve.transform(this.matrixInverse);
                if (curveLC.normal.isParallelTo(V3.Z)) {
                    return (curveLC.isCircular() && this.curve.containsPoint(new V3(curveLC.f1.length(), 0, curveLC.center.z)));
                }
                return false;
            }
            return super.containsCurve(curve);
        }
        getExtremePoints() {
            return getExtremePointsHelper$$1.call(this, this.curve);
        }
        asNURBSSurface() {
            // y = 0 for baseNURBS
            const baseNURBS = NURBS$$1.fromEllipse(this.curve);
            const rotationNURBS = NURBS$$1.UnitCircle(2, this.tMin, this.tMax);
            return new NURBSSurface$$1(rotationNURBS.points.flatMap(rv => baseNURBS.points.map(b => this.matrix.timesVector(VV(rv.x * b.x, rv.y * b.x, b.z * rv.w, rv.w * b.w)))), baseNURBS.knots, rotationNURBS.knots, baseNURBS.degree, rotationNURBS.degree, baseNURBS.tMin, baseNURBS.tMax, rotationNURBS.tMin, rotationNURBS.tMax);
        }
    }
    RotatedCurveSurface$$1.prototype.uStep = EllipseCurve$$1.prototype.tIncrement;
    function getExtremePointsHelper$$1(curve) {
        // this logic comes from EllipseCurve.roots
        const f1 = this.matrix.X;
        const f2 = this.matrix.Y;
        return [0, 1, 2].flatMap(dim => {
            const a = f2.e(dim), b = -f1.e(dim);
            const xiEtas = eq0(a) && eq0(b) ? [[1, 0]] : intersectionUnitCircleLine2$$1(a, b, 0);
            return xiEtas.flatMap(([xi, eta]) => {
                const u = Math.atan2(eta, xi);
                if (!(lt(this.uMin, u) && lt(u, this.uMax)))
                    return [];
                const testCurve = curve.transform(this.matrix.times(M4.rotateZ(u)));
                return testCurve.roots()[dim].map(v => this.pUV(u, v));
            });
        });
    }

    class CylinderSurface$$1 extends ProjectedCurveSurface$$1 {
        // @ts-ignore
        // readonly baseCurve: EllipseCurve
        constructor(baseCurve, dir1, uMin = baseCurve.tMin, uMax = baseCurve.tMax, zMin = -Infinity, zMax = Infinity) {
            super(baseCurve, dir1, uMin, uMax, zMin, zMax);
            this.baseCurve = baseCurve;
            assertInst(EllipseCurve$$1, baseCurve);
            //assert(!baseCurve.normal1.isPerpendicularTo(dir1), !baseCurve.normal1.isPerpendicularTo(dir1))
            this.matrix = M4.forSys(baseCurve.f1, baseCurve.f2, dir1, baseCurve.center);
            this.matrixInverse = this.matrix.inversed();
            this.normalDir = sign$2(this.baseCurve.normal.dot(this.dir));
            this.pLCNormalWCMatrix = this.matrix
                .as3x3()
                .inversed()
                .transposed()
                .scale(this.normalDir);
            this.pWCNormalWCMatrix = this.pLCNormalWCMatrix.times(this.matrixInverse);
        }
        static semicylinder(radius, sMin, sMax, tMin, tMax) {
            return new CylinderSurface$$1(new EllipseCurve$$1(V3.O, new V3(radius, 0, 0), new V3(0, radius, 0)), V3.Z, sMin, sMax, tMin, tMax);
        }
        /**
         *
         * @param anchorLC
         * @param dirLC not necessarily unit
         */
        static unitISLineTs(anchorLC, dirLC) {
            const { x: ax, y: ay } = anchorLC;
            const { x: dx, y: dy } = dirLC;
            // this cylinder: x² + y² = 1
            // line: p = anchorLC + t * dirLC
            // split line equation into 3 component equations, insert into cylinder equation
            // x = ax + t * dx
            // y = ay + t * dy
            // (ax² + 2 ax t dx + t²dx²) + (ay² + 2 ay t dy + t²dy²) = 1
            // transform to form (a t² + b t + c = 0) and solve with pqFormula
            const a = Math.pow(dx, 2) + Math.pow(dy, 2);
            const b = 2 * (ax * dx + ay * dy);
            const c = Math.pow(ax, 2) + Math.pow(ay, 2) - 1;
            return pqFormula(b / a, c / a).filter(t => EllipseCurve$$1.XYLCValid(new V3(ax + dx * t, ay + dy * t, 0)));
        }
        normalP(p) {
            return this.pLCNormalWCMatrix.transformVector(this.matrixInverse.transformPoint(p).xy()).unit();
        }
        loopContainsPoint(loop, p) {
            assertVectors(p);
            if (!this.containsPoint(p))
                return OUTSIDE$$1;
            const line = new L3$$1(p, this.dir.unit());
            const lineOut = this.dir.cross(this.normalP(p));
            return Surface$$1.loopContainsPointGeneral(loop, p, line, lineOut);
        }
        isTsForLine(line) {
            assertInst(L3$$1, line);
            // transforming line manually has advantage that dir1 will not be renormalized,
            // meaning that calculated values t for localLine are directly transferable to line
            const dirLC = this.matrixInverse.transformVector(line.dir1);
            if (dirLC.isParallelTo(V3.Z)) {
                // line is parallel to this.dir
                return [];
            }
            const anchorLC = this.matrixInverse.transformPoint(line.anchor);
            assert(!CylinderSurface$$1.unitISLineTs(anchorLC, dirLC).length ||
                !isNaN(CylinderSurface$$1.unitISLineTs(anchorLC, dirLC)[0]), 'sad ' + dirLC);
            return CylinderSurface$$1.unitISLineTs(anchorLC, dirLC);
        }
        isCoplanarTo(surface) {
            return (this == surface ||
                (hasConstructor(surface, CylinderSurface$$1) &&
                    this.dir.isParallelTo(surface.dir) &&
                    this.containsEllipse(surface.baseCurve, false)));
        }
        like(surface) {
            if (!this.isCoplanarTo(surface))
                return false;
            // normals need to point in the same direction (outwards or inwards) for both
            const thisFacesOut = 0 < this.baseCurve.normal.dot(this.dir);
            const objectFacesOut = 0 < surface.baseCurve.normal.dot(surface.dir);
            return thisFacesOut == objectFacesOut;
        }
        containsEllipse(ellipse, checkAABB = true) {
            const projEllipse = ellipse.transform(M4.project(this.baseCurve.getPlane(), this.dir));
            return this.baseCurve == ellipse || this.baseCurve.isColinearTo(projEllipse);
        }
        containsCurve(curve) {
            if (curve instanceof L3$$1) {
                return this.containsLine(curve);
            }
            else if (curve instanceof EllipseCurve$$1) {
                return this.containsEllipse(curve);
            }
            else if (curve instanceof BezierCurve$$1) {
                return false;
            }
            else {
                return super.containsCurve(curve);
            }
        }
        implicitFunction() {
            return (pWC) => {
                const pLC = this.matrixInverse.transformPoint(pWC);
                return (pLC.lengthXY() - 1) * this.normalDir;
            };
        }
        didp(pWC) {
            const pLC = this.matrixInverse.transformPoint(pWC);
            const pLCLengthXY = pLC.lengthXY();
            const didpLC = new V3(pLC.x / pLCLengthXY, pLC.y / pLCLengthXY, 0);
            return this.pLCNormalWCMatrix.transformVector(didpLC);
        }
        containsPoint(pWC) {
            const pLC = this.matrixInverse.transformPoint(pWC);
            return this.baseCurve.isValidT(EllipseCurve$$1.XYLCPointT(pLC, this.uMin, this.uMax));
        }
        uvP(pWC) {
            assert(arguments.length == 1);
            const pLC = this.matrixInverse.transformPoint(pWC);
            const u = EllipseCurve$$1.XYLCPointT(pLC, this.vMin, this.vMax);
            return new V3(u, pLC.z, 0);
        }
        isCurvesWithSurface(surface2) {
            if (surface2 instanceof ProjectedCurveSurface$$1) {
                if (surface2.dir.isParallelTo(this.dir)) {
                    const projectedCurve = surface2.baseCurve.transform(M4.project(this.baseCurve.getPlane(), this.dir));
                    return this.baseCurve.isInfosWithCurve(projectedCurve).map(info => {
                        const lineDir = sign$2(this.normalP(info.p)
                            .cross(surface2.normalP(info.p))
                            .dot(this.dir)) || 1;
                        return new L3$$1(info.p, this.dir.times(lineDir));
                    });
                }
            }
            if (surface2 instanceof CylinderSurface$$1) {
                if (eq0(this.getCenterLine().distanceToLine(surface2.getCenterLine()))) {
                    throw new Error();
                }
            }
            return super.isCurvesWithSurface(surface2);
        }
        getCenterLine() {
            return new L3$$1(this.baseCurve.center, this.dir);
        }
        facesOutwards() {
            return this.baseCurve.normal.dot(this.dir) > 0;
        }
        getSeamPlane() {
            let normal = this.baseCurve.f1.cross(this.dir);
            normal = normal.times(-sign$2(normal.dot(this.baseCurve.f2)));
            return P3$$1.normalOnAnchor(normal, this.baseCurve.center);
        }
        clipCurves(curves) {
            return curves.flatMap(curve => curve.clipPlane(this.getSeamPlane()));
        }
    }
    CylinderSurface$$1.UNIT = new CylinderSurface$$1(EllipseCurve$$1.UNIT, V3.Z, undefined, undefined, 0, 1);
    CylinderSurface$$1.prototype.uStep = TAU / 32;
    CylinderSurface$$1.prototype.vStep = 256;

    class EllipsoidSurface$$1 extends ParametricSurface$$1 {
        constructor(center, f1, f2, f3, uMin = 0, uMax = PI$4, vMin = -PI$4 / 2, vMax = PI$4 / 2) {
            super(uMin, uMax, vMin, vMax);
            this.center = center;
            this.f1 = f1;
            this.f2 = f2;
            this.f3 = f3;
            assert(0 <= uMin && uMin <= PI$4);
            assert(0 <= uMax && uMax <= PI$4);
            assert(-PI$4 / 2 <= vMin && vMin <= PI$4 / 2);
            assert(-PI$4 / 2 <= vMax && vMax <= PI$4 / 2);
            assertVectors(center, f1, f2, f3);
            this.matrix = M4.forSys(f1, f2, f3, center);
            this.matrixInverse = this.matrix.inversed();
            this.normalDir = sign$2(this.f1.cross(this.f2).dot(this.f3));
            this.pLCNormalWCMatrix = this.matrix
                .as3x3()
                .inversed()
                .transposed()
                .scale(this.normalDir);
            this.pWCNormalWCMatrix = this.pLCNormalWCMatrix.times(this.matrixInverse);
        }
        static unitArea(contour) {
            const totalArea = contour
                .map(edge => {
                if (edge.curve instanceof PICurve$$1) {
                    const points = edge.curve.calcSegmentPoints(edge.aT, edge.bT, edge.a, edge.b, edge.aT > edge.bT, true);
                    let sum = 0;
                    for (let i = 0; i < points.length - 1; i++) {
                        const p = points[i], ppp = points[i + 1];
                        sum += (abs$3(p.angleXY()) + abs$3(ppp.angleXY())) / 2 * (ppp.z - p.z);
                    }
                    return sum;
                }
                else if (edge.curve instanceof EllipseCurve$$1) {
                    const f = (t) => {
                        const at = edge.curve.at(t), tangent = edge.curve.tangentAt(t);
                        const angleXY = abs$3(at.angleXY());
                        //const arcLength = angleXY * Math.sqrt(1 - at.z ** 2) ( == at.lengthXY())
                        //const scaling = tangent.z / at.lengthXY()
                        return angleXY * tangent.z;
                    };
                    const val = glqInSteps(f, edge.aT, edge.bT, 1);
                    return val;
                }
                else {
                    throw new Error();
                }
            })
                .sum();
            return totalArea;
        }
        /**
         * unit sphere: x² + y² + z² = 1
         * line: p = anchor + t * dir |^2
         * p² = (anchor + t * dir)^2
         * 1 == (anchor + t * dir)^2
         * 1 == anchor DOT anchor + 2 * anchor * t * dir + t² * dir DOT dir
         */
        static unitISTsWithLine(anchor, dir) {
            // for 0 = a t² + b t + c
            const a = dir.dot(dir);
            const b = 2 * anchor.dot(dir);
            const c = anchor.dot(anchor) - 1;
            return pqFormula(b / a, c / a).filter(t => le$1(0, anchor.y + t * dir.y));
        }
        /**
         * unit sphere: x² + y² + z² = 1
         * plane: normal1 DOT p = w
         */
        static unitISCurvesWithPlane(plane) {
            const distPlaneCenter = Math.abs(plane.w);
            if (lt(distPlaneCenter, 1)) {
                // result is a circle
                // radius of circle: imagine right angled triangle (origin -> center of intersection circle -> point on
                // intersection circle) pythagoras: 1² == distPlaneCenter² + isCircleRadius² => isCircleRadius == sqrt(1 -
                // distPlaneCenter²)
                const isCircleRadius = Math.sqrt(1 - Math.pow(distPlaneCenter, 2));
                const anchorY = plane.normal1.y * plane.w;
                const d = abs$3(distPlaneCenter * isCircleRadius);
                if (le$1(anchorY, -d) && !eq0(distPlaneCenter)) {
                    return [];
                }
                else if (le$1(anchorY, 0) && !plane.normal1.isParallelTo(V3.Y)) {
                    const f1 = plane.normal1.isParallelTo(V3.Y) ? V3.Z : plane.normal1.cross(V3.Y).toLength(isCircleRadius);
                    const f2 = f1.cross(plane.normal1);
                    const minEta = -anchorY / f2.y, minT = max$2(0, Math.asin(minEta));
                    return [new EllipseCurve$$1(plane.anchor, f1, f2, minT, PI$4 - minT)];
                }
                else {
                    const f2 = (plane.normal1.isParallelTo(V3.Y) ? V3.X : plane.normal1.cross(V3.Y)).toLength(isCircleRadius);
                    const f1 = f2.cross(plane.normal1);
                    const minXi = eq0(f1.y) ? -1 : -anchorY / f1.y, maxT = Math.acos(max$2(-1, minXi - NLA_PRECISION));
                    return [
                        new EllipseCurve$$1(plane.anchor, f1.negated(), f2, PI$4 - maxT, PI$4),
                        new EllipseCurve$$1(plane.anchor, f1, f2.negated(), 0, maxT),
                    ];
                }
            }
            else {
                return [];
            }
        }
        static unitISCurvesWithEllipsoidSurface(surface) {
            if (surface.isSphere()) {
                const surfaceRadius = surface.f1.length();
                const surfaceCenterDist = surface.center.length();
                if (le$1(1, surfaceCenterDist - surfaceRadius) ||
                    le$1(surfaceCenterDist + surfaceRadius, 1) ||
                    le$1(surfaceCenterDist - surfaceRadius, -1)) {
                    return [];
                }
                else {
                    // origin, surface.center and points on the intersection curves form a triangle.
                    // the height on the segment origin - surface.center is the radius of the is curves
                    // the distance from the origin to the lot point is the distance to the intersection plane
                    function heron(a, b, c) {
                        const p = (a + b + c) / 2;
                        return sqrt$1(p * (p - a) * (p - b) * (p - c));
                    }
                    const triangleArea = heron(1, surfaceRadius, surfaceCenterDist);
                    const radius = triangleArea * 2 / surfaceCenterDist;
                    const isCurvesCenterDist = sign$2(1 + Math.pow(surfaceCenterDist, 2) - Math.pow(surfaceRadius, 2)) * sqrt$1(1 - Math.pow(radius, 2));
                    const plane = new P3$$1(surface.center.unit(), isCurvesCenterDist);
                    return EllipsoidSurface$$1.unitISCurvesWithPlane(plane.flipped());
                }
            }
            throw new Error();
        }
        static unitISCurvesWithCylinderSurface(surface) {
            if (new L3$$1(surface.baseCurve.center, surface.dir).containsPoint(V3.O)) {
                const projEllipse = surface.baseCurve.transform(M4.project(new P3$$1(surface.dir, 0)));
                const f1Length = projEllipse.f1.length(), f2Length = projEllipse.f2.length();
                if (lt(1, min$2(f1Length, f2Length)))
                    return [];
                if (projEllipse.isCircular()) {
                    const distISCurveCenter = Math.sqrt(1 - Math.pow(min$2(1, f1Length), 2));
                    const isCurveCenter = (surface.dir.y < 0 ? surface.dir.negated() : surface.dir).times(distISCurveCenter);
                    // isCurve.at(t).y = isCurveCenter.y + projEllipse.f1.y * cos(t) + projEllipse.f2.y * sin(t) = 0
                    return [new EllipseCurve$$1(isCurveCenter, projEllipse.f1, projEllipse.f2)];
                }
            }
            throw new Error();
        }
        static sphere(radius, center = V3.O) {
            assertNumbers(radius);
            return new EllipsoidSurface$$1(center, new V3(radius, 0, 0), new V3(0, radius, 0), new V3(0, 0, radius));
        }
        /**
         * x²/a² + y²/b² + z²/c² = 1
         */
        static forABC(a, b, c, center = V3.O) {
            return new EllipsoidSurface$$1(center, new V3(a, 0, 0), new V3(0, b, 0), new V3(0, 0, c));
        }
        static calculateAreaSpheroid(a, b, c, edges) {
            assertf(() => a.isPerpendicularTo(b));
            assertf(() => b.isPerpendicularTo(c));
            assertf(() => c.isPerpendicularTo(a));
            // handling discontinuities:
            // option 1: check for intersections with baseline, if there are any integrate parts separetely
            // "rotate" the edge so that there are no overlaps
            const matrix = M4.forSys(a, b, c), matrixInverse = matrix.inversed();
            const circleRadius = a.length();
            const c1 = c.unit();
            const totalArea = edges
                .map(edge => {
                if (edge.curve instanceof EllipseCurve$$1) {
                    const f = (t) => {
                        const at = edge.curve.at(t), tangent = edge.tangentAt(t);
                        const localAt = matrixInverse.transformPoint(at);
                        const angleXY = localAt.angleXY();
                        const arcLength = angleXY * circleRadius * Math.sqrt(1 + Math.pow(localAt.z, 2));
                        const scaling = Math.sqrt(1 + Math.pow(c1.dot(tangent), 2));
                        return arcLength * scaling;
                    };
                    const val = glqInSteps(f, edge.aT, edge.bT, 1);
                    return val;
                }
                else {
                    throw new Error();
                }
            })
                .sum();
            return totalArea;
        }
        getConstructorParameters() {
            return [this.center, this.f1, this.f2, this.f3, this.uMin, this.uMax, this.vMin, this.vMax];
        }
        equals(obj) {
            return (this == obj || (Object.getPrototypeOf(obj) == this.constructor.prototype && this.matrix.equals(obj.matrix)));
        }
        edgeLoopCCW(loop) {
            return EllipsoidSurface$$1.unitArea(loop.map(edge => edge.transform(this.matrixInverse))) > 0;
            //let totalAngle = 0
            //for (let i = 0; i < contour.length; i++) {
            //    const ipp = (i + 1) % contour.length
            //    const edge = contour[i], nextEdge = contour[ipp]
            //    totalAngle += edge.bDir.angleRelativeNormal(nextEdge.aDir, this.normalP(edge.b))
            //}
            //return le(0, totalAngle)
        }
        like(object) {
            if (!this.isCoplanarTo(object))
                return false;
            // normals need to point in the same direction (outwards or inwards) for both
            return this.matrix.determinant3() * object.matrix.determinant3() > 0;
        }
        rootPoints() { }
        toMesh() {
            return ParametricSurface$$1.prototype.toMesh.call(this);
        }
        clipCurves(curves) {
            return curves.flatMap(curve => curve.clipPlane(this.getSeamPlane()));
        }
        dpdu() {
            // dp(u, v) = new V3(cos(t) * cos(s), cos(t) * sin(s), sin(t)
            return (u, v) => this.matrix.transformVector(new V3(cos$2(v) * -sin$2(u), cos$2(v) * cos$2(u), 0));
        }
        dpdv() {
            return (u, v) => this.matrix.transformVector(new V3(-sin$2(v) * cos$2(u), -sin$2(v) * sin$2(u), cos$2(v)));
        }
        isCurvesWithPCS(surface) {
            let curves2 = ParametricSurface$$1.isCurvesParametricImplicitSurface(surface, this, 0.1, 0.1 / surface.dir.length(), 0.05);
            curves2 = this.clipCurves(curves2);
            return curves2;
        }
        isCurvesWithPCSSmart(surface) {
            const surfaceLC = surface.transform(this.matrixInverse);
            //const lcMinZ0RelO =
            const baseCurveLC = surfaceLC.baseCurve.project(new P3$$1(surfaceLC.dir, 0));
            const ists = baseCurveLC.isTsWithSurface(EllipsoidSurface$$1.UNIT);
            const insideIntervals = getIntervals(ists, baseCurveLC.tMin, baseCurveLC.tMax).filter(([a, b]) => baseCurveLC.at((a + b) / 2).length() < 1);
            const projectedCurves = [0, 1].map(id => {
                return (t) => {
                    const atSqr = snap(baseCurveLC.at(t).squared(), 1);
                    const lineISTs = /* +- */ sqrt$1(1 - atSqr);
                    //assert(!isNaN(lineISTs))
                    return eq0(lineISTs)
                        ? baseCurveLC.at(t)
                        : baseCurveLC.at(t).plus(surfaceLC.dir.times(sign$2(id - 0.5) * lineISTs));
                };
            });
            const dProjectedCurves = [0, 1].map(id => {
                return (t) => {
                    // d/dt sqrt(1 - baseCurveLC.at(t).squared())
                    // = -1/2 * 1/sqrt(1 - baseCurveLC.at(t).squared()) * -2*baseCurveLC.at(t) * baseCurveLC.tangentAt(t)
                    const atSqr = snap(baseCurveLC.at(t).squared(), 1);
                    const lineISTs = /* +- */ baseCurveLC
                        .at(t)
                        .times(-1 / sqrt$1(1 - atSqr))
                        .dot(baseCurveLC.tangentAt(t));
                    //assert(!isNaN(lineISTs))
                    return baseCurveLC.tangentAt(t).plus(surfaceLC.dir.times(sign$2(id - 0.5) * lineISTs));
                };
            });
            //const f2 = t => sqrt(1 - baseCurveLC.at(t).squared())
            //const df2 = t => baseCurveLC.at(t).times(-1 / sqrt(1 -
            // baseCurveLC.at(t).squared())).dot(baseCurveLC.tangentAt(t)) checkDerivate(f2, df2, 0.31, 0.60)
            const curves = [];
            for (const [aT, bT] of insideIntervals) {
                //const aLine = new L3(baseCurveLC.at(aT), surfaceLC.dir1)
                //const a = EllipsoidSurface.UNIT.isTsForLine(aLine).map(t => aLine.at(t))
                //const bLine = new L3(baseCurveLC.at(bT), surfaceLC.dir1)
                //const b = EllipsoidSurface.UNIT.isTsForLine(bLine).map(t => bLine.at(t))
                for (const i of [0, 1]) {
                    const f = (t) => projectedCurves[i](t).y;
                    const df = (t) => dProjectedCurves[i](t).y;
                    checkDerivate(f, df, aT + 0.1, bT - 0.1);
                    const tsAtY0 = getRoots(f, aT + NLA_PRECISION, bT - NLA_PRECISION, 1 / (1 << 11), df);
                    const ii2 = getIntervals(tsAtY0, aT, bT).filter(([a, b]) => f((a + b) / 2) > 0);
                    for (const [aT2, bT2] of ii2) {
                        let aP = projectedCurves[i](aT2), bP = projectedCurves[i](bT2);
                        0 === i && ([aP, bP] = [bP, aP]);
                        assert(EllipsoidSurface$$1.UNIT.containsPoint(aP));
                        assert(EllipsoidSurface$$1.UNIT.containsPoint(bP));
                        curves.push(PICurve$$1.forStartEnd(surface, this, this.matrix.transformPoint(bP), this.matrix.transformPoint(aP), undefined));
                    }
                }
            }
            return surface.clipCurves(curves);
        }
        isCurvesWithSurface(surface) {
            if (surface instanceof PlaneSurface$$1) {
                return this.isCurvesWithPlane(surface.plane);
            }
            else if (surface instanceof CylinderSurface$$1) {
                return this.isCurvesWithCylinderSurface(surface);
            }
            else if (surface instanceof EllipsoidSurface$$1) {
                const surfaceLC = surface.transform(this.matrixInverse);
                const curves = EllipsoidSurface$$1.unitISCurvesWithEllipsoidSurface(surfaceLC).map(c => c.transform(this.matrix));
                return surface.clipCurves(curves);
            }
            else if (surface instanceof ProjectedCurveSurface$$1) {
                return this.isCurvesWithPCS(surface);
            }
            else if (surface instanceof ParametricSurface$$1) {
                let curves2 = ParametricSurface$$1.isCurvesParametricImplicitSurface(surface, this, 0.1, 0.1, 0.05);
                curves2 = this.clipCurves(curves2);
                curves2 = surface.clipCurves(curves2);
                return curves2;
            }
            else {
                throw new Error();
            }
        }
        isCurvesWithPlane(plane) {
            const planeLC = plane.transform(this.matrixInverse);
            return EllipsoidSurface$$1.unitISCurvesWithPlane(planeLC).map(c => c.transform(this.matrix));
        }
        isCurvesWithCylinderSurface(surface) {
            if (L3$$1.containsPoint(surface.baseCurve.center, surface.dir, this.center)) {
                assert(this.isSphere());
                const ellipseProjected = surface.baseCurve.transform(M4.project(surface.baseCurve.getPlane(), surface.dir));
                if (ellipseProjected.isCircular()) {
                    const thisRadius = this.f1.length();
                    const surfaceRadius = ellipseProjected.f1.length();
                    assert(false);
                }
            }
            return this.isCurvesWithPCS(surface);
        }
        isTsForLine(line) {
            assertInst(L3$$1, line);
            // transforming line manually has advantage that dir1 will not be renormalized,
            // meaning that calculated values t for localLine are directly transferable to line
            const anchorLC = this.matrixInverse.transformPoint(line.anchor);
            const dirLC = this.matrixInverse.transformVector(line.dir1);
            return EllipsoidSurface$$1.unitISTsWithLine(anchorLC, dirLC);
        }
        isCoplanarTo(surface) {
            if (this === surface)
                return true;
            if (!hasConstructor(surface, EllipsoidSurface$$1))
                return false;
            if (!this.center.like(surface.center))
                return false;
            if (this.isSphere())
                return surface.isSphere() && eq(this.f1.length(), this.f2.length());
            const otherMatrixLC = this.matrixInverse.times(surface.matrix);
            // Ellipsoid with matrix otherMatrixLC is unit sphere iff otherMatrixLC is orthogonal
            return otherMatrixLC.like3x3() && otherMatrixLC.isOrthogonal();
        }
        containsEllipse(ellipse) {
            const ellipseLC = ellipse.transform(this.matrixInverse);
            const distEllipseLCCenter = ellipseLC.center.length();
            const correctRadius = Math.sqrt(1 - Math.pow(distEllipseLCCenter, 2));
            return lt(distEllipseLCCenter, 1) && ellipseLC.isCircular() && ellipseLC.f1.hasLength(correctRadius);
            //&& le(0, ellipseLC.getAABB().min.y)
        }
        containsCurve(curve) {
            if (curve instanceof EllipseCurve$$1) {
                return this.containsEllipse(curve);
            }
            else {
                return super.containsCurve(curve);
            }
        }
        transform(m4) {
            assert(m4.isNoProj(), () => m4.sce);
            return new EllipsoidSurface$$1(m4.transformPoint(this.center), m4.transformVector(this.f1), m4.transformVector(this.f2), m4.transformVector(this.f3).times(m4.isMirroring() ? -1 : 1));
        }
        transform4(m4) {
            console.log('transform4');
            const resultMatrix = m4.times(this.matrix);
            console.log(resultMatrix.toString());
            const scaleDir = V$2(resultMatrix.m[12], resultMatrix.m[13], resultMatrix.m[14]);
            // need to find parameters where scaleDir is parallel to the normal
            const pLC = this.pLCNormalWCMatrix.inversed().transformPoint(scaleDir);
            const s = pLC.angleXY();
            const t = Math.asin(clamp(pLC.z, -1, 1));
            const fa = resultMatrix.transformPoint(scaleDir.unit());
            const fb = resultMatrix.transformPoint(scaleDir.unit().negated());
            const newCenter = V3.lerp(fa, fb, 0.5);
            console.log(scaleDir.sce, s, t, fa, fb, 'newCenter', newCenter.sce);
            return new EllipsoidSurface$$1(newCenter, m4.transformVector2(this.f1, this.center), m4.transformVector2(this.f2, this.center), m4.transformVector2(this.f3, this.center).times(m4.isMirroring() ? -1 : 1));
        }
        isInsideOut() {
            return this.f1.cross(this.f2).dot(this.f3) < 0;
        }
        flipped() {
            return new EllipsoidSurface$$1(this.center, this.f1, this.f2, this.f3.negated(), this.uMin, this.uMax, -this.vMax, -this.vMin);
        }
        normalUVFunc() {
            // ugh
            // paramtric ellipsoid point q(a, b)
            // normal1 == (dq(a, b) / da) X (dq(a, b) / db) (cross product of partial derivatives)
            // normal1 == cos b * (f2 X f3 * cos b * cos a + f3 X f1 * cos b * sin a + f1 X f2 * sin b)
            return (a, b) => {
                const { f1, f2, f3 } = this;
                const normal = f2
                    .cross(f3)
                    .times(Math.cos(b) * Math.cos(a))
                    .plus(f3.cross(f1).times(Math.cos(b) * Math.sin(a)))
                    .plus(f1.cross(f2).times(Math.sin(b)))
                    //.times(Math.cos(b))
                    .unit();
                return normal;
            };
        }
        normalP(p) {
            return this.pLCNormalWCMatrix.transformVector(this.matrixInverse.transformPoint(p)).unit();
        }
        normalUV(u, v) {
            return this.pLCNormalWCMatrix.transformVector(V3.sphere(u, v)).unit();
        }
        uvPFunc() {
            return (pWC) => {
                const pLC = this.matrixInverse.transformPoint(pWC);
                const alpha = abs$3(pLC.angleXY());
                const beta = Math.asin(clamp(pLC.z, -1, 1));
                assert(isFinite(alpha));
                assert(isFinite(beta));
                return new V3(alpha, beta, 0);
            };
        }
        pUVFunc() {
            // this(a, b) = f1 cos a cos b + f2 sin a cos b + f2 sin b
            return (alpha, beta) => {
                return this.matrix.transformPoint(V3.sphere(alpha, beta));
            };
        }
        isSphere() {
            return (eq(this.f1.length(), this.f2.length()) &&
                eq(this.f2.length(), this.f3.length()) &&
                eq(this.f3.length(), this.f1.length()) &&
                this.f1.isPerpendicularTo(this.f2) &&
                this.f2.isPerpendicularTo(this.f3) &&
                this.f3.isPerpendicularTo(this.f1));
        }
        isVerticalSpheroid() {
            return (eq(this.f1.length(), this.f2.length()) &&
                this.f1.isPerpendicularTo(this.f2) &&
                this.f2.isPerpendicularTo(this.f3) &&
                this.f3.isPerpendicularTo(this.f1));
        }
        mainAxes() {
            // q(a, b) = f1 cos a cos b + f2 sin a cos b + f3 sin b
            // q(s, t, u) = s * f1 + t * f2 + u * f3 with s² + t² + u² = 1
            // (del q(a, b) / del a) = f1 (-sin a) cos b  + f2 cos a cos b
            // (del q(a, b) / del b) = f1 cos a (-sin b) + f2 sin a (-sin b) + f2 cos b
            // del q(s, t, u) / del a = -t f1 + s f2
            // (del q(a, b) / del a) DOT q(a, b) == 0
            // (f1 (-sin a) cos b  + f2 cos a cos b) DOT (f1 cos a cos b + f2 sin a cos b + f2 sin b) == 0
            // (del q(a, b) / del b) DOT q(a, b) == 0
            // (f1 cos a (-sin b) + f2 sin a (-sin b) + f2 cos b) DOT (f1 cos a cos b + f2 sin a cos b + f2 sin b) == 0
            // Solve[
            // (f1 (-sin a) cos b  + f2 cos a cos b) * (f1 cos a cos b + f2 sin a cos b + f2 sin b) = 0,
            // (f1 cos a (-sin b) + f2 sin a (-sin b) + f2 cos b) * (f1 cos a cos b + f2 sin a cos b + f2 sin b) = 0}, a, b]
            const { f1, f2, f3 } = this;
            if (eq0(f1.dot(f2)) && eq0(f2.dot(f3)) && eq0(f3.dot(f1))) {
                return this;
            }
            //const f = ([a, b], x?) => {
            //    const sinA = Math.sin(a), cosA = Math.cos(a), sinB = Math.sin(b), cosB = Math.cos(b)
            //    const centerToP = V3.add(f1.times(cosA * cosB), f2.times(sinA * cosB), f3.times(sinB))
            //    const centerToPdelA = f1.times(-sinA * cosB).plus(f2.times(cosA * cosB))
            //    const centerToPdelB = V3.add(f1.times(cosA * -sinB), f2.times(sinA * -sinB), f3.times(cosB))
            //    x && console.log(centerToP.sce, centerToPdelA.sce, centerToPdelB.sce)
            //    return [centerToP.dot(centerToPdelA), centerToP.dot(centerToPdelB)]
            //}
            //const mainF1Params = newtonIterate(f, [0, 0], 8), mainF1 = this.pUVFunc()(mainF1Params[0], mainF1Params[1])
            //console.log(f(mainF1Params, 1).sce)
            //const mainF2Params = newtonIterate(f, this.uvPFunc()(f2.rejectedFrom(mainF1)).toArray(2), 8),
            //   mainF2 = this.pUVFunc()(mainF2Params[0], mainF2Params[1])
            //console.log(this.normalUVFunc()(mainF2Params[0], mainF2Params[1]).sce)
            //assert(mainF1.isPerpendicularTo(mainF2), mainF1, mainF2, mainF1.dot(mainF2), mainF1Params)
            //const mainF3Params = this.uvPFunc()(mainF1.cross(mainF2)), mainF3 = this.pUVFunc()(mainF3Params[0],
            // mainF3Params[1]) return new EllipsoidSurface(this.center, mainF1, mainF2, mainF3)
            const { U, SIGMA } = this.matrix.svd3();
            assert(SIGMA.isDiagonal());
            assert(U.isOrthogonal());
            const U_SIGMA = U.times(SIGMA);
            // column vectors of U_SIGMA
            const [mainF1, mainF2, mainF3] = arrayFromFunction(3, i => new V3(U_SIGMA.m[i], U_SIGMA.m[i + 4], U_SIGMA.m[i + 8]));
            return new EllipsoidSurface$$1(this.center, mainF1, mainF2, mainF3);
        }
        containsPoint(p) {
            return eq0(this.implicitFunction()(p));
        }
        boundsFunction() {
            return (a, b) => between(a, 0, PI$4) && between(b, -PI$4, PI$4);
        }
        volume() {
            return 4 / 3 * Math.PI * this.f1.dot(this.f2.cross(this.f3));
        }
        loopContainsPoint(loop, pWC) {
            if (!this.containsPoint(pWC))
                return PointVsFace$$1.OUTSIDE;
            assertVectors(pWC);
            assert(Edge$$1.isLoop(loop));
            const pLCXY = this.matrixInverse.transformPoint(pWC).xy();
            const testLine = new EllipseCurve$$1(this.center, this.f3, pLCXY.likeO() ? this.f2 : this.matrix.transformVector(pLCXY.unit()));
            if (P3$$1.normalOnAnchor(this.f2.unit(), this.center).containsPoint(pWC)) {
                return loop.some(edge => edge.curve.containsPoint(pWC) && fuzzyBetween(edge.curve.pointT(pWC), edge.minT, edge.maxT))
                    ? PointVsFace$$1.ON_EDGE
                    : PointVsFace$$1.OUTSIDE;
            }
            return Surface$$1.loopContainsPointEllipse(loop, pWC, testLine);
        }
        surfaceAreaApprox() {
            // See https://en.wikipedia.org/wiki/Ellipsoid#Surface_area
            const mainAxes = this.mainAxes(), a = mainAxes.f1.length(), b = mainAxes.f2.length(), c = mainAxes.f3.length();
            const p = 1.6075;
            return 4 * PI$4 * Math.pow((Math.pow(a * b, p) + Math.pow(b * c, p) + Math.pow(c * a, p)) / 3, 1 / p);
        }
        surfaceArea() {
            // See https://en.wikipedia.org/wiki/Ellipsoid#Surface_area
            const mainAxes = this.mainAxes(), f1l = mainAxes.f1.length(), f2l = mainAxes.f2.length(), f3l = mainAxes.f3.length(), [c, b, a] = [f1l, f2l, f3l].sort(MINUS);
            // https://en.wikipedia.org/w/index.php?title=Spheroid&oldid=761246800#Area
            function spheroidArea(a, c) {
                if (c < a) {
                    const eccentricity2 = 1 - Math.pow(c, 2) / Math.pow(a, 2);
                    const eccentricity = Math.sqrt(eccentricity2);
                    return 2 * PI$4 * Math.pow(a, 2) * (1 + (1 - eccentricity2) / Math.sqrt(eccentricity) * Math.atanh(eccentricity));
                }
                else {
                    const eccentricity = Math.sqrt(1 - Math.pow(a, 2) / Math.pow(c, 2));
                    return 2 * PI$4 * Math.pow(a, 2) * (1 + c / a / eccentricity * Math.asin(eccentricity));
                }
            }
            if (eq(a, b)) {
                return spheroidArea(a, c);
            }
            else if (eq(b, c)) {
                return spheroidArea(b, a);
            }
            else if (eq(c, a)) {
                return spheroidArea(c, b);
            }
            const phi = Math.acos(c / a);
            const kk = Math.pow(a, 2) * (Math.pow(b, 2) - Math.pow(c, 2)) / (Math.pow(b, 2) * (Math.pow(a, 2) - Math.pow(c, 2)));
            const incompleteEllipticInt1 = gaussLegendreQuadrature24(phi => Math.pow(1 - kk * Math.pow(Math.sin(phi), 2), -0.5), 0, phi);
            const incompleteEllipticInt2 = gaussLegendreQuadrature24(phi => Math.pow(1 - kk * Math.pow(Math.sin(phi), 2), 0.5), 0, phi);
            return ((2 * PI$4 * Math.pow(c, 2) + 2 * PI$4 * a * b / Math.sin(phi)) *
                (incompleteEllipticInt2 * Math.pow(Math.sin(phi), 2) + incompleteEllipticInt1 * Math.pow(Math.cos(phi), 2)));
        }
        getSeamPlane() {
            const plane = P3$$1.forAnchorAndPlaneVectors(this.center, this.f1, this.f3);
            return plane.normal1.dot(this.f2) < 0 ? plane : plane.flipped();
        }
        getExtremePoints() {
            return getExtremePointsHelper$$1.call(this, new EllipseCurve$$1(V3.O, V3.X, V3.Z, -PI$4 / 2, PI$4 / 2));
        }
        pointFoot(pWC, startS, startT) {
            console.log(pWC.sce);
            if (undefined === startS || undefined === startT) {
                let pLC1 = this.matrixInverse.transformPoint(pWC).unit();
                if (pLC1.y < 0)
                    pLC1 = pLC1.negated();
                ({ x: startS, y: startT } = EllipsoidSurface$$1.UNIT.uvP(pLC1));
            }
            const dpdu = this.dpdu();
            const dpdv = this.dpdv();
            const [u, v] = newtonIterate(([u, v]) => {
                const p = this.pUV(u, v);
                console.log([p, p.plus(dpdu(u, v)), p, p.plus(dpdv(u, v))].map(toSource).join() + ',');
                const pUVToPWC = this.pUV(u, v).to(pWC);
                return [pUVToPWC.dot(dpdu(u, v)), pUVToPWC.dot(dpdv(u, v))];
            }, [startS, startT], 8, undefined, 0.1);
            return new V3(u, v, 0);
        }
        implicitFunction() {
            return (pWC) => {
                const pLC = this.matrixInverse.transformPoint(pWC);
                return (pLC.length() - 1) * this.normalDir;
            };
        }
        // = this.inverseMatrix.transformPoint(this.inverseMatrix.transformPoint(pWC).unit())
        didp(pWC) {
            // i(pWC) = this.inverseMatrix.transformPoint(pWC).length() - 1
            // chain diff rule
            const pLC = this.matrixInverse.transformPoint(pWC);
            return this.pLCNormalWCMatrix.transformVector(pLC.unit()); //.times(this.normalDir)
        }
        /*+
         * An ellipsoid remains an ellipsoid after a perspective transform (as long as it does not intersect the vanishing
         * plane. This transforms a matrix with a perspective component into one which would return an identical ellipsoid,
         * but with no perspective component.
         */
        static unitTransform4(m) {
            m.m[15] !== 1 && (m = m.divScalar(m.m[15]));
            // X * P = m => X = m * P^-1
            // prettier-ignore
            const Pinv = new M4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -m.m[12], -m.m[13], -m.m[14], 1);
            const pn = new V3(m.m[12], m.m[13], m.m[14]), pw = m.m[15];
            const pwSqrMinusPnSqr = Math.pow(pw, 2) - pn.squared();
            if (lt(pwSqrMinusPnSqr, 0)) {
                throw new Error('vanishing plane intersects unit sphere');
            }
            const c = pn.div(-pwSqrMinusPnSqr);
            const scale = pn.times(pw * pn.length() / (pn.squared() * -pwSqrMinusPnSqr));
            const scale1 = pw / -pwSqrMinusPnSqr;
            const scale2 = 1 / sqrt$1(pwSqrMinusPnSqr);
            const rotNX = M4.forSys(pn.unit(), pn.getPerpendicular().unit());
            return M4.product(m, Pinv, M4.translate(c), rotNX, M4.scale(scale1, scale2, scale2), rotNX.transposed());
        }
    }
    EllipsoidSurface$$1.UNIT = new EllipsoidSurface$$1(V3.O, V3.X, V3.Y, V3.Z);
    EllipsoidSurface$$1.prototype.uStep = PI$4 / 32;
    EllipsoidSurface$$1.prototype.vStep = PI$4 / 32;

    class PlaneSurface$$1 extends ParametricSurface$$1 {
        constructor(plane, right = plane.normal1.getPerpendicular().unit(), up = plane.normal1.cross(right).unit(), uMin = -100, uMax = 100, vMin = -100, vMax = 100) {
            super(uMin, uMax, vMin, vMax);
            this.plane = plane;
            this.right = right;
            this.up = up;
            assertInst(P3$$1, plane);
            assert(this.right.cross(this.up).like(this.plane.normal1));
            this.matrix = M4.forSys(right, up, plane.normal1, plane.anchor);
        }
        toSource(rounder = x => x) {
            return callsce.call(undefined, 'new PlaneSurface', ...this.getConstructorParameters());
        }
        static throughPoints(a, b, c) {
            return new PlaneSurface$$1(P3$$1.throughPoints(a, b, c));
        }
        static forAnchorAndPlaneVectors(anchor, v0, v1, uMin, uMax, vMin, vMax) {
            return new PlaneSurface$$1(P3$$1.forAnchorAndPlaneVectors(anchor, v0, v1), v0, v1, uMin, uMax, vMin, vMax);
        }
        isCoplanarTo(surface) {
            return hasConstructor(surface, PlaneSurface$$1) && this.plane.isCoplanarToPlane(surface.plane);
        }
        isTsForLine(line) {
            return line.isTsWithPlane(this.plane);
        }
        like(surface) {
            return hasConstructor(surface, PlaneSurface$$1) && this.plane.like(surface.plane);
        }
        pUV(u, v) {
            return this.matrix.transformPoint(new V3(u, v, 0));
        }
        implicitFunction() {
            return p => this.plane.distanceToPointSigned(p);
        }
        isCurvesWithSurface(surface2) {
            if (surface2 instanceof PlaneSurface$$1) {
                return this.isCurvesWithPlane(surface2.plane);
            }
            return super.isCurvesWithSurface(surface2);
        }
        isCurvesWithPlane(plane) {
            const result = this.plane.intersectionWithPlane(plane);
            return result ? [result] : [];
        }
        edgeLoopCCW(contour) {
            assert(Edge$$1.isLoop(contour), 'isLoop');
            return isCCW(contour.flatMap(edge => edge.points()), this.plane.normal1);
        }
        loopContainsPoint(loop, p) {
            const dir = this.right.plus(this.up.times(0.123)).unit();
            const line = new L3$$1(p, dir);
            const lineOut = dir.cross(this.plane.normal1);
            return Surface$$1.loopContainsPointGeneral(loop, p, line, lineOut);
        }
        uvPFunc() {
            const matrixInverse = this.matrix.inversed();
            return function (pWC) {
                return matrixInverse.transformPoint(pWC);
            };
        }
        pointFoot(pWC) {
            return this.uvP(pWC);
        }
        normalP(pWC) {
            return this.plane.normal1;
        }
        containsPoint(p) {
            return this.plane.containsPoint(p);
        }
        containsCurve(curve) {
            return curve instanceof ImplicitCurve$$1 ? super.containsCurve(curve) : this.plane.containsCurve(curve);
        }
        transform(m4) {
            return new PlaneSurface$$1(this.plane.transform(m4));
        }
        transform4(m4) {
            return new PlaneSurface$$1(this.plane.transform(m4));
        }
        flipped() {
            return new PlaneSurface$$1(this.plane.flipped(), this.right, this.up.negated());
        }
        getConstructorParameters() {
            return [this.plane, this.right, this.up, this.uMin, this.uMax, this.vMin, this.vMax];
        }
        dpdu() {
            return () => this.right;
        }
        dpdv() {
            return () => this.up;
        }
        didp(pWC) {
            return this.plane.normal1;
        }
        normalUV() {
            return this.plane.normal1;
        }
    }
    PlaneSurface$$1.prototype.uStep = 1e6;
    PlaneSurface$$1.prototype.vStep = 1e6;

    class PointProjectedSurface$$1 extends ParametricSurface$$1 {
        constructor(curve, apex, curvePlane, normalDir = 1, sMin = curve.tMin, sMax = curve.tMax, tMin = 0, tMax = 16) {
            super(sMin, sMax, tMin, tMax);
            this.curve = curve;
            this.apex = apex;
            this.curvePlane = curvePlane;
            this.normalDir = normalDir;
            assertInst(Curve$$1, curve);
            assert(!(curve instanceof L3$$1), 'use PlaneSurface instead');
            assert(!(curve instanceof EllipseCurve$$1), 'use ConicSurface instead');
            assert(!(curve instanceof ImplicitCurve$$1), 'this just seems like a terrible idea');
            assert(new PlaneSurface$$1(curvePlane).containsCurve(curve));
            assertVectors(apex);
            assert(0 <= tMin);
            this.planeProjectionMatrix = M4.projectPlanePoint(apex, curvePlane);
            this.uStep = curve.tIncrement;
        }
        pointFoot(pWC, ss, st) {
            if (undefined === ss || undefined === st) {
                // similar to stP
                if (undefined === ss) {
                    ss = pWC.like(this.apex)
                        ? 0
                        : this.curve.closestTToPoint(this.planeProjectionMatrix.transformPoint(pWC)) * this.normalDir;
                }
                if (undefined === st) {
                    st = V3.inverseLerp(this.apex, this.curve.at(ss), pWC);
                }
            }
            const f = ([s, t]) => {
                const pSTToPWC = this.pST(s, t).to(pWC);
                return [this.dpds()(s, t).dot(pSTToPWC), this.dpdt()(s).dot(pSTToPWC)];
            };
            const { 0: x, 1: y } = newtonIterate(f, [ss, st]);
            return new V3(x, y, 0);
        }
        getConstructorParameters() {
            return [this.curve, this.apex, this.curvePlane, this.normalDir, this.sMin, this.sMax, this.tMin, this.tMax];
        }
        static unitISLineTs(anchor, dir) {
            const { x: ax, y: ay, z: az } = anchor;
            const { x: dx, y: dy, z: dz } = dir;
            // this cone: x² + y² = z²
            // line: p = anchor + t * dir1
            // split line equation into 3 component equations, insert into cone equation
            // transform to form (a t² + b t + c = 0) and solve with pqFormula
            const a = dx * dx + dy * dy - dz * dz;
            const b = 2 * (ax * dx + ay * dy - az * dz);
            const c = ax * ax + ay * ay - az * az;
            // cone only defined for 0 <= z, so filter invalid values
            return pqFormula(b / a, c / a).filter(t => 0 < az + t * dz);
        }
        equals(obj) {
            return (this == obj ||
                (hasConstructor(obj, PointProjectedSurface$$1) && this.curve.equals(obj.curve) && this.apex.equals(this.apex)));
        }
        like(object) {
            if (!this.isCoplanarTo(object))
                return false;
            // normals need to point in the same direction (outwards or inwards) for both
            return this.normalDir == object.normalDir;
        }
        loopContainsPoint(contour, p) {
            assertVectors(p);
            const line = this.apex.like(p)
                ? new L3$$1(p, this.apex.to(this.curve.at(this.curve.tMin)).unit())
                : L3$$1.throughPoints(p, this.apex);
            const lineOut = line.dir1.cross(this.curvePlane.normal1);
            return Surface$$1.loopContainsPointGeneral(contour, p, line, lineOut);
        }
        isTsForLine(line) {
            // transforming line manually has advantage that dir1 will not be renormalized,
            // meaning that calculated values t for lineLC are directly transferable to line
            const anchorPlane = this.planeProjectionMatrix.transformPoint(line.anchor);
            const anchor2Plane = this.planeProjectionMatrix.transformPoint(line.anchor.plus(line.dir1));
            if (anchorPlane.like(anchor2Plane)) {
                // line projects onto a point in plane.
                // there are either no or infinite intersection points
                return [];
            }
            return this.curve
                .isInfosWithLine(anchorPlane, anchorPlane.to(anchor2Plane), undefined, undefined, line.tMin, line.tMax)
                .map(info => info.tOther);
        }
        /**
         * Interestingly, two cones don't need to have parallel dirs to be coplanar.
         */
        isCoplanarTo(surface) {
            if (this === surface)
                return true;
            if (!(surface instanceof PointProjectedSurface$$1) || !this.apex.like(surface.apex))
                return false;
            // at this point apexes are equal
            return this.containsCurve(surface.curve);
        }
        containsLine(line) {
            if (this.curvePlane.isParallelToLine(line)) {
                return false;
            }
            if (!line.containsPoint(this.apex)) {
                return false;
            }
            const p = this.curvePlane.intersectionWithLine(line);
            return this.curve.containsPoint(p);
        }
        containsCurve(curve) {
            if (curve instanceof L3$$1) {
                return this.containsLine(curve);
            }
            else if (!(curve instanceof ImplicitCurve$$1)) {
                const otherCurveOnThisPlane = curve.transform(this.planeProjectionMatrix);
                return this.curve.isColinearTo(otherCurveOnThisPlane);
            }
            else {
                return super.containsCurve(curve);
            }
        }
        transform(m4) {
            return new PointProjectedSurface$$1(this.curve.transform(m4), m4.transformPoint(this.apex), this.curvePlane.transform(m4), (m4.isMirroring() ? -1 : 1) * this.normalDir, this.sMin, this.sMax, this.tMin, this.tMax);
        }
        flipped() {
            return new PointProjectedSurface$$1(this.curve, this.apex, this.curvePlane, -this.normalDir, -this.sMax, -this.sMin, this.tMin, this.tMax);
        }
        normalSTFunc() {
            const dpdt = this.dpdt();
            return (s, t) => this.curve
                .tangentAt(s * this.normalDir)
                .times(this.normalDir)
                .cross(dpdt(s))
                .unit();
        }
        pSTFunc() {
            return (s, t) => {
                return this.apex.lerp(this.curve.at(s * this.normalDir), t);
            };
        }
        dpds() {
            return (s, t) => {
                return this.curve.tangentAt(s * this.normalDir).times(t * this.normalDir);
            };
        }
        dpdt() {
            return s => {
                return this.apex.to(this.curve.at(s * this.normalDir));
            };
        }
        containsPoint(pWC) {
            return this.apex.like(pWC) || this.curve.containsPoint(this.planeProjectionMatrix.transformPoint(pWC));
        }
        stP(pWC) {
            const s = pWC.like(this.apex) ? 0 : this.curve.pointT(this.planeProjectionMatrix.transformPoint(pWC));
            const t = V3.inverseLerp(this.apex, this.curve.at(s), pWC);
            return new V3(s * this.normalDir, t, 0);
        }
        isCurvesWithSurface(surface) {
            if (surface instanceof PlaneSurface$$1) {
                return this.isCurvesWithPlane(surface.plane);
            }
            else if (ImplicitSurface$$1.is(surface)) {
                return ParametricSurface$$1.isCurvesParametricImplicitSurface(this, surface, 0.1, 0.1 / this.curvePlane.distanceToPoint(this.apex), 0.02);
            }
            return super.isCurvesWithSurface(surface);
        }
        isCurvesWithPlane(plane) {
            if (plane.containsPoint(this.apex)) {
                if (plane.isParallelToPlane(this.curvePlane)) {
                    return [];
                }
                return this.curve.isTsWithPlane(plane).map(t => L3$$1.throughPoints(this.apex, this.curve.at(t)));
            }
            return [this.curve.transform(M4.projectPlanePoint(this.apex, plane))];
        }
    }
    PointProjectedSurface$$1.prototype.vStep = 256;

    class NURBSSurface$$1 extends ParametricSurface$$1 {
        constructor(
        /**
         * Control points in u-major order. I.e. the first pointCountU points are a NURBS.
         */
        points, knotsU, knotsV, degreeU, degreeV, uMin = knotsU[degreeU], uMax = knotsU[knotsU.length - degreeU - 1], vMin = knotsV[degreeV], vMax = knotsV[knotsV.length - degreeV - 1]) {
            super(uMin, uMax, vMin, vMax);
            this.points = points;
            this.knotsU = knotsU;
            this.knotsV = knotsV;
            this.degreeU = degreeU;
            this.degreeV = degreeV;
            const pointCountU = knotsU.length - 1 - degreeU;
            const pointCountV = knotsV.length - 1 - degreeV;
            assert(pointCountU * pointCountV == points.length);
            assert(degreeU <= degreeV, 'degreeU <= degreeV');
            assert(-1 == knotsU.firstUnsorted(MINUS), 'knot values must be in ascending order');
            assert(-1 == knotsV.firstUnsorted(MINUS), 'knot values must be in ascending order');
        }
        getConstructorParameters() {
            return [
                this.points,
                this.knotsU,
                this.knotsV,
                this.degreeU,
                this.degreeV,
                this.uMin,
                this.uMax,
                this.vMin,
                this.vMax,
            ];
        }
        transform(m4) {
            return this.transform4(m4);
        }
        transform4(m4) {
            return new NURBSSurface$$1(this.points.map(p => m4.timesVector(p)), this.knotsU, this.knotsV, this.degreeU, this.degreeV, this.uMin, this.uMax, this.vMin, this.vMax);
        }
        pUV(u, v) {
            return this.isoparametricU(u).at(v);
        }
        dpdu() {
            return (u, v) => this.isoparametricV(v).tangentAt(u);
        }
        dpdv() {
            return (u, v) => this.isoparametricU(u).tangentAt(v);
        }
        normalUV(u, v) {
            const normal = this.dpdu()(u, v).cross(this.dpdv()(u, v));
            return normal.likeO() ? V3.X : normal.unit();
        }
        isoparametricU(u) {
            const pointCountU = this.knotsU.length - 1 - this.degreeU;
            const pointCountV = this.knotsV.length - 1 - this.degreeV;
            return new NURBS$$1(arrayFromFunction(pointCountV, i => {
                return deBoor(this.points.slice(i * pointCountU, (i + 1) * pointCountU), this.degreeU, this.knotsU, u);
            }), this.degreeV, this.knotsV, this.vMin, this.vMax);
        }
        isoparametricV(v) {
            const pointCountU = this.knotsU.length - 1 - this.degreeU;
            return new NURBS$$1(arrayFromFunction(pointCountU, i => {
                return deBoor(this.points.sliceStep(i, this.points.length, pointCountU, 1), this.degreeV, this.knotsV, v);
            }), this.degreeU, this.knotsU, this.uMin, this.uMax);
        }
        debugInfo() {
            const pointCountU = this.knotsU.length - 1 - this.degreeU;
            const pointCountV = this.knotsV.length - 1 - this.degreeV;
            const grid = [];
            for (let u = 0; u < pointCountU; u++) {
                for (let v = 0; v < pointCountV; v++) {
                    const i = v * pointCountU + u;
                    if (u < pointCountU - 1) {
                        const j = v * pointCountU + u + 1;
                        grid.push(this.points[i].p3(), this.points[j].p3());
                    }
                    if (v < pointCountV - 1) {
                        const j = (v + 1) * pointCountU + u;
                        grid.push(this.points[i].p3(), this.points[j].p3());
                    }
                }
            }
            return { points: this.points.map(p => p.p3()), lines: grid };
        }
        flipped() {
            const pointCountU = this.knotsU.length - 1 - this.degreeU;
            return new NURBSSurface$$1(arrayFromFunction(this.points.length, i => {
                const u = i % pointCountU;
                return this.points[i - u + (pointCountU - u - 1)];
            }), this.knotsU.map(x => -x).reverse(), this.knotsV, this.degreeU, this.degreeV, -this.uMax, -this.uMin, this.vMin, this.vMax);
        }
    }
    NURBSSurface$$1.prototype.uStep = 1 / 8;
    NURBSSurface$$1.prototype.vStep = 1 / 8;
    function getInterval(degree, knots, t) {
        for (let s = degree; s < knots.length - 1 - degree; s++) {
            if (t >= knots[s] && t <= knots[s + 1]) {
                return s;
            }
        }
        throw new Error(t + ' ' + knots);
    }
    function deBoor(points, degree, knots, t) {
        // find s (the spline segment) for the [t] value provided
        const s = getInterval(degree, knots, t);
        const v = Vector.pack(points, new Float64Array(points.length * 4));
        // l (level) goes from 1 to the curve degree + 1
        for (let l = 1; l <= degree; l++) {
            // build level l of the pyramid
            for (let i = s; i > s - degree - 1 + l; i--) {
                const alpha = (t - knots[i]) / (knots[i + degree + 1 - l] - knots[i]);
                // interpolate each component
                for (let d = 0; d < 4; d++) {
                    v[i * 4 + d] = (1 - alpha) * v[(i - 1) * 4 + d] + alpha * v[i * 4 + d];
                }
            }
        }
        return new Vector(v.slice(s * 4, s * 4 + 4));
    }

    /**
     * In general: the z-dir shadow volume of a face is the integral: SURFACE_INTEGRAL[p in face] (normal(p).z * p.z) dp
     * In general: the centroid of the z-dir shadow volume of a face is the integral:
     *     SURFACE_INTEGRAL[p in face] ((p schur (1, 1, 0.5)) * normal(p).z * p.z) dp
     *     dividing the z component by 2 is usually done at the very end
     */
    const ZDirVolumeVisitor$$1 = {
        [ConicSurface$$1.name](edges) {
            console.log(this);
            const dpdu = this.dpdu();
            const dpdv = this.dpdv();
            // INT[edge.at; edge.bT] (at(t) DOT dir) * (at(t) - at(t).projectedOn(dir) / 2).z dt
            const totalVolume = edges
                .map(edgeWC => {
                const curveWC = edgeWC.curve;
                if (curveWC instanceof EllipseCurve$$1 ||
                    curveWC instanceof HyperbolaCurve$$1 ||
                    curveWC instanceof ParabolaCurve$$1) {
                    const f = (curveT) => {
                        const at = curveWC.at(curveT), tangentWC = curveWC.tangentAt(curveT);
                        const uvOfPWC = this.uvP(at);
                        // INTEGRATE [0; atUV.y] (dpdu(atUV.x, t) X dpdv(atUV.x)).z * pUV(atUV.x, t).z dt
                        // dpdu(u, v) === t * dpdu(s, 1)
                        // => INTEGRATE [0; atUV.y] (t * dpdu(atUV.x, 1) X dpdv(atUV.x)).z * pUV(atUV.x, t).z dt
                        // => (dpdu(atUV.x, 1) X dpdv(atUV.x)).z * INTEGRATE [0; atUV.y] t * pUV(atUV.x, t).z dt
                        // pUV(u, v) === t * (pUV(s, 1) - center) + center
                        // => (dpdu(atUV.x, 1) X dpdv(atUV.x)).z
                        //      * INTEGRATE [0; atUV.y] t² * (pUV(atUV.x, t) - center).z + t * center.z dt
                        // => (dpdu(atUV.x, 1) X dpdv(atUV.x)).z
                        //      * INTEGRATE [0; atUV.y] t² * (pUV(atUV.x, t) - center).z + t * center.z dt
                        // => (dpdu(atUV.x, 1) X dpdv(atUV.x)).z
                        //      * (1/3 t³ pUV(atUV.x, 1).z + 1/2 t² center.z)[0; atUV.y]
                        const du = -M4.forSys(dpdu(uvOfPWC.x, uvOfPWC.y), dpdv(uvOfPWC.x))
                            .inversed()
                            .transformVector(tangentWC).x;
                        const factor = Math.pow(uvOfPWC.y, 3) / 3 * (this.pUV(uvOfPWC.x, 1).z - this.center.z) +
                            Math.pow(uvOfPWC.y, 2) / 2 * this.center.z;
                        const actual = dpdu(uvOfPWC.x, factor).cross(dpdv(uvOfPWC.x)).z;
                        return actual * du;
                    };
                    const val = glqInSteps(f, edgeWC.aT, edgeWC.bT, 1);
                    return val;
                }
                else if (curveWC instanceof L3$$1) {
                    return 0;
                }
                else {
                    throw new Error();
                }
            })
                .sum();
            const centroidZX2Parts = edges.map(edgeWC => {
                const curveWC = edgeWC.curve;
                if (curveWC instanceof EllipseCurve$$1 ||
                    curveWC instanceof HyperbolaCurve$$1 ||
                    curveWC instanceof ParabolaCurve$$1) {
                    const f = (curveT) => {
                        const at = curveWC.at(curveT), tangentWC = curveWC.tangentAt(curveT);
                        const uvOfPWC = this.uvP(at);
                        // INTEGRATE [0; atUV.y] dpdu(atUV.x, t) X dpdv(atUV.x, t) * pUV(atUV.x, t).z dt
                        // dpdv is constant with respect to t
                        // => (dpdu(atUV.x, t) X dpdv(atUV.x, t)).z
                        //      * (INTEGRATE [0; atUV.y] t * pUV(atUV.x, t) * pUV(atUV.x, t).z dt)
                        // dpdu(u, v) === t * dpdu(s, 1)
                        // pUV(u, v) === t * (pUV(s, 1) - center) + center
                        // INTEGRATE [0; atUV.y] t * pUV(atUV.x, t) * pUV(atUV.x, t).z dt
                        // = INTEGRATE [0; atUV.y] t *
                        //                         (t * (pUV(s, 1) - center) + center) *
                        //                         (t (pUV(s, 1) - center).z + center.z) dt
                        // = INTEGRATE [0; atUV.y] t³ (pUV(s, 1) - center) * (pUV(s, 1) - center).z
                        //                       + t² ((pUV(s, 1) - center) * center.z + (pUV(s, 1) - center).z * center)
                        //                       + t center center.z dt
                        // = (1/4 t^4 (pUV(s, 1) - center) * (pUV(s, 1) - center).z
                        //   (1/3 t³ ((pUV(s, 1) - center) * center.z + (pUV(s, 1) - center).z * center)
                        //   (1/2 t² center center.z dt)[0; atUV.y]
                        const pUVS1V = this.pUV(uvOfPWC.x, 1).minus(this.center);
                        const factor = V3.add(pUVS1V.times(1 / 4 * Math.pow(uvOfPWC.y, 4) * pUVS1V.z + 1 / 3 * Math.pow(uvOfPWC.y, 3) * this.center.z), this.center.times(1 / 3 * Math.pow(uvOfPWC.y, 3) * pUVS1V.z + 1 / 2 * Math.pow(uvOfPWC.y, 2) * this.center.z));
                        const partialCentroid = factor.times(dpdu(uvOfPWC.x, 1).cross(dpdv(uvOfPWC.x)).z);
                        const ds = -M4.forSys(dpdu(uvOfPWC.x, uvOfPWC.y), dpdv(uvOfPWC.x))
                            .inversed()
                            .transformVector(tangentWC).x;
                        return partialCentroid.times(ds);
                    };
                    return glqV3$$1(f, edgeWC.aT, edgeWC.bT);
                }
                else if (curveWC instanceof L3$$1) {
                    return V3.O;
                }
                else {
                    throw new Error();
                }
            });
            const centroid = V3.add(...centroidZX2Parts)
                .schur(new V3(1, 1, 0.5))
                .div(totalVolume);
            return { volume: totalVolume, centroid: centroid };
        },
        [PlaneSurface$$1.name](edges) {
            const r1 = this.right;
            const u1 = this.up;
            const c = this.plane.anchor;
            assert(r1.hasLength(1));
            assert(u1.hasLength(1));
            assert(r1.isPerpendicularTo(u1));
            const volumeAndCentroidZX2Parts = edges.map((edgeWC) => {
                const curveWC = edgeWC.curve;
                if (curveWC instanceof L3$$1) {
                    // split shadow volume into two triangle shadow volumes and use the same logic as for mesh triangles:
                    function triangleShadowVolumeAndCentroid(a, b, c) {
                        const ab = b.minus(a), ac = c.minus(a);
                        const normal = ab.cross(ac);
                        const faceCentroid = V3.add(a, b, c).div(3);
                        return [
                            faceCentroid.z * normal.z / 2,
                            V3.add(a.times(2 * a.z + b.z + c.z), b.times(a.z + 2 * b.z + c.z), c.times(a.z + b.z + 2 * c.z)).times(normal.z),
                        ];
                    }
                    const a = edgeWC.a, b = edgeWC.b;
                    const as = a.dot(r1);
                    const bs = b.dot(r1);
                    const aBase = this.pUV(as, 0);
                    const bBase = this.pUV(bs, 0);
                    const [v1, c1] = triangleShadowVolumeAndCentroid(a, b, aBase);
                    const [v2, c2] = triangleShadowVolumeAndCentroid(bBase, aBase, b);
                    return [v1 + v2, c1.plus(c2).div(24)];
                }
                else if (curveWC instanceof ImplicitCurve$$1) {
                    throw new Error();
                }
                else {
                    const sliceAreaAndCentroidZX2TimesDs = (curveT) => {
                        const p = curveWC.at(curveT);
                        const s = p.dot(r1);
                        const t = p.dot(u1);
                        const area = t * c.z + s * t * r1.z + 1 / 2 * Math.pow(t, 2) * u1.z;
                        const ds = -curveWC.tangentAt(curveT).dot(r1);
                        return [
                            area * ds,
                            ...V3.add(c.times(area), r1.times(c.z * s * t + r1.z * Math.pow(s, 2) * t + 1 / 2 * s * Math.pow(t, 2) * u1.z), u1.times(1 / 2 * c.z * Math.pow(t, 2) + 1 / 2 * r1.z * s * Math.pow(t, 2) + 1 / 3 * Math.pow(t, 3) * u1.z)).times(ds),
                        ];
                    };
                    const [vol, cx, cy, cz] = glqArray$$1(sliceAreaAndCentroidZX2TimesDs, edgeWC.aT, edgeWC.bT, 4);
                    return [vol * this.plane.normal1.z, new V3(cx, cy, cz).times(this.plane.normal1.z)];
                }
            });
            return mergeVolumeAndCentroidZX2Parts(volumeAndCentroidZX2Parts);
        },
        /**
         * Generic implementation.
         */
        [ParametricSurface$$1.name](edges) {
            const dpdu = this.dpdu();
            const dpdv = this.dpdv();
            const volume = edges.map((edgeWC) => {
                const curveWC = edgeWC.curve;
                if (curveWC instanceof ImplicitCurve$$1) {
                    throw new Error();
                }
                else {
                    const sliceAreaAndCentroidZX2TimesDs = (curveT) => {
                        // use curve.tangent not edge.tangent, reverse edges are handled by the integration boundaries
                        const pWC = curveWC.at(curveT), tangentWC = curveWC.tangentAt(curveT);
                        const uvOfPWC = this.uvP(pWC);
                        const slice = (t) => {
                            const p = this.pUV(uvOfPWC.x, t);
                            const normal = dpdu(uvOfPWC.x, t).cross(dpdv(uvOfPWC.x, t));
                            return p.z * normal.z;
                        };
                        const sliceIntegral0ToPWCT = glqInSteps(slice, 0, uvOfPWC.y, 1);
                        // const dt = tangentWC.dot(scalingVector)
                        const dt = -M4.forSys(dpdu(uvOfPWC.x, uvOfPWC.y), dpdv(uvOfPWC.x, uvOfPWC.y))
                            .inversed()
                            .transformVector(tangentWC).x;
                        const sliceAreaTimesDs = sliceIntegral0ToPWCT * dt;
                        const slice2 = (t) => {
                            const p = this.pUV(uvOfPWC.x, t);
                            const normal = dpdu(uvOfPWC.x, t).cross(dpdv(uvOfPWC.x, t));
                            return p.times(p.z * normal.z);
                        };
                        const sliceIntegral0ToPWCT2 = glqV3$$1(slice2, 0, uvOfPWC.y);
                        // const dt = tangentWC.dot(scalingVector)
                        const sliceCentroidZX2TimesDs = sliceIntegral0ToPWCT2.times(dt);
                        return [sliceAreaTimesDs, ...sliceCentroidZX2TimesDs.toArray()];
                    };
                    const [vol, cx, cy, cz] = glqArray$$1(sliceAreaAndCentroidZX2TimesDs, edgeWC.aT, edgeWC.bT, 4);
                    return [vol, new V3(cx, cy, cz)];
                }
            });
            return mergeVolumeAndCentroidZX2Parts(volume);
        },
        /**
         * at(t)
         * |\                                    ^
         * | \ at(t).projectedOn(dir1)            \  dir1
         * |  \                                    \
         * |   \ at(t).rejectedFrom(dir1) = b
         * |   |
         * |___|
         *        z = 0
         *
         *
         * A = ((at(t) + at(t).rejectedFrom(dir1)) / 2).z * at(t).projectedOn(dir1).lengthXY()
         * scaling = tangentAt(t) DOT dir1.cross(V3.Z).unit()
         */
        [ProjectedCurveSurface$$1.name](edges) {
            if (V3.Z.cross(this.dir).likeO())
                return { volume: 0, centroid: V3.O };
            // normalize this.dir so it always points up
            const upDir1 = this.dir.toLength(Math.sign(this.dir.z) || 1);
            const scalingVector = V3.Z.cross(upDir1).unit();
            // the length of the base of the trapezoid is calculated by dotting with the baseVector
            const baseVector = upDir1.rejectedFrom(V3.Z).unit();
            // INT[edge.at; edge.bT] (at(t) DOT dir1) * (at(t) - at(t).projectedOn(dir) / 2).z
            const volume = edges.map((edgeWC) => {
                if (edgeWC.curve instanceof L3$$1) {
                    return [0, V3.O];
                }
                else if (edgeWC.curve instanceof ImplicitCurve$$1) {
                    return [0, V3.O];
                    // 	const { points, tangents } = edgeWC.curve
                    // 	const minT = edgeWC.minT,
                    // 		maxT = edgeWC.maxT
                    // 	let sum = 0
                    // 	const start = Math.ceil(minT + NLA_PRECISION)
                    // 	const end = Math.floor(maxT - NLA_PRECISION)
                    // 	for (let i = start; i <= end; i++) {
                    // 		const at = points[i],
                    // 			tangent = tangents[i]
                    // 		const area = (at.z + at.rejectedFrom1(upDir1).z) / 2 * at.projectedOn(upDir1).dot(baseVector)
                    // 		const scale = tangent.dot(scalingVector)
                    // 		sum += area * scale
                    // 	}
                    // 	const f = (t: number) => {
                    // 		const at = edgeWC.curve.at(t),
                    // 			tangent = edgeWC.curve.tangentAt(t)
                    // 		const area = (at.z + at.rejectedFrom1(upDir1).z) / 2 * at.projectedOn(upDir1).dot(baseVector)
                    // 		const scale = tangent.dot(scalingVector)
                    // 		return area * scale
                    // 	}
                    // 	sum += f(minT) * (start - minT - 0.5)
                    // 	sum += f(maxT) * (maxT - end - 0.5)
                    // 	return sum * Math.sign(edgeWC.deltaT())
                }
                else {
                    const f = (curveT) => {
                        // use curve.tangent not edge.tangent, reverse edges are handled by the integration boundaries
                        const at = edgeWC.curve.at(curveT), tangent = edgeWC.curve.tangentAt(curveT);
                        const b = at.rejectedFrom1(upDir1);
                        const area = at.z * b.to(at).dot(baseVector) / 2 + b.z * b.to(at).dot(baseVector) / 2;
                        const areaCentroidA = V3.add(at.xy(), b, at).times(at.z * b.to(at).dot(baseVector) / 2 / 3);
                        const areaCentroidB = V3.add(at.xy(), b, b.xy()).times(b.z * b.to(at).dot(baseVector) / 2 / 3);
                        const scale = tangent.dot(scalingVector);
                        return [
                            area * scale,
                            ...areaCentroidA
                                .plus(areaCentroidB)
                                .times(scale)
                                .schur(V$2(1, 1, 2)),
                        ];
                    };
                    const [vol, cx, cy, cz] = glqArray$$1(f, edgeWC.aT, edgeWC.bT, 4);
                    return [vol, new V3(cx, cy, cz)];
                }
            });
            return mergeVolumeAndCentroidZX2Parts(volume);
        },
        // volume does scale linearly, so this could be done in the local coordinate system
        // however, shear matrices lead to point-to-plane distances having to be calculated along a vector other than
        // the plane normal
        [RotatedCurveSurface$$1.name](edges) {
            const dpdu = this.dpdu();
            const dpdv = this.dpdv();
            const totalVolume = edges
                .map(edgeWC => {
                const curveWC = edgeWC.curve;
                const f = (curveT) => {
                    const pWC = curveWC.at(curveT), tangentWC = curveWC.tangentAt(curveT);
                    const uvOfPWC = this.uvP(pWC);
                    const pLC = this.matrixInverse.transformPoint(pWC);
                    const dpdvAtS0 = this instanceof RotatedCurveSurface$$1
                        ? this.curve.tangentAt(uvOfPWC.y)
                        : V$2(-pLC.z, 0, pLC.lengthXY());
                    // const slice = (phi: number) => {
                    // 	const p = this.pUV(phi, uvOfPWC.y)
                    // 	const normal = dpdu(phi, uvOfPWC.y).cross(dpdv(phi, uvOfPWC.y))
                    // 	return p.z * normal.z
                    // }
                    // const z = this.curve.at(uvOfPWC.y).z
                    // const r = this.curve.at(uvOfPWC.y).lengthXY()
                    // const pz =
                    // 	this.f1.z * r * cos(s) +
                    // 	this.f2.z * r * sin(s) +
                    // 	this.f3.z * z +
                    // 	this.center.z
                    // const dpdux = this.f1.x * r * -sin(s) + this.f2.x * r * cos(s)
                    // const dpduy = this.f1.y * r * -sin(s) + this.f2.y * r * cos(s)
                    // const dpdvx = this.f1.x * dr * cos(s) + this.f2.x * dr * sin(s) + this.f3.x * dz
                    // const dpdvy = this.f1.y * dr * cos(s) + this.f2.y * dr * sin(s) + this.f3.y * dz
                    // const normalz = dpdux * dpdvy - dpduy * dpdvx
                    // result = pz * normalz
                    const r = pLC.lengthXY(), z = pLC.z;
                    const dr = dpdvAtS0.x;
                    const dz = dpdvAtS0.z;
                    const a = this.matrix.X.z * r, b = this.matrix.Y.z * r, c = this.matrix.Z.z * z + this.matrix.O.z;
                    const t0 = (this.matrix.X.x * this.matrix.Y.y - this.matrix.X.y * this.matrix.Y.x) * r * dr;
                    const t1 = (this.matrix.Y.x * this.matrix.X.y - this.matrix.Y.y * this.matrix.X.x) * r * dr;
                    const t2 = (this.matrix.X.x * this.matrix.X.y - this.matrix.X.y * this.matrix.X.x) * r * dr;
                    const t3 = (this.matrix.Y.x * this.matrix.Y.y - this.matrix.Y.y * this.matrix.Y.x) * r * dr;
                    const t4 = (this.matrix.Y.x * this.matrix.Z.y - this.matrix.Y.y * this.matrix.Z.x) * r * dz;
                    const t5 = (this.matrix.X.x * this.matrix.Z.y - this.matrix.X.y * this.matrix.Z.x) * r * dz;
                    const sliceIntegral = (p) => {
                        return ((6 * (c * (-t0 + t1) + a * t4 - b * t5) * p +
                            3 * (3 * b * t0 - b * t1 + a * (t2 - t3) + 4 * c * t5) * cos$2(p) +
                            3 * (3 * a * t1 - a * t0 - b * (t2 - t3) + 4 * c * t4) * sin$2(p) +
                            3 * (a * t5 - b * t4 + c * (t2 - t3)) * cos$2(2 * p) +
                            3 * (a * t4 + b * t5 + c * (t0 + t1)) * sin$2(2 * p) +
                            (a * (t2 - t3) - b * (t0 + t1)) * cos$2(3 * p) +
                            (a * (t0 + t1) + b * (t2 - t3)) * sin$2(3 * p)) /
                            12);
                    };
                    const dt = M4.forSys(dpdu(uvOfPWC.x, uvOfPWC.y), dpdv(uvOfPWC.x, uvOfPWC.y))
                        .inversed()
                        .transformVector(tangentWC).y;
                    const sliceIntegral0ToPWCS = sliceIntegral(uvOfPWC.x); //- sliceIntegral(0) //(always 0)
                    const result = sliceIntegral0ToPWCS * dt;
                    return result;
                };
                return gaussLegendreQuadrature24(f, edgeWC.aT, edgeWC.bT);
            })
                .sum();
            // calc centroid:
            const centroidZX2Parts = edges.map(edgeWC => {
                const f = (curveT) => {
                    const curveWC = edgeWC.curve;
                    const pWC = curveWC.at(curveT), tangentWC = curveWC.tangentAt(curveT);
                    const uvOfPWC = this.uvP(pWC);
                    const slice = (phi) => {
                        const p = this.pUV(phi, uvOfPWC.y);
                        const normal = dpdu(phi, uvOfPWC.y).cross(dpdv(phi, uvOfPWC.y));
                        return p.times(p.z * normal.z);
                    };
                    const sliceIntegral0ToPWCS = glqV3$$1(slice, 0, uvOfPWC.x);
                    const dt = M4.forSys(dpdu(uvOfPWC.x, uvOfPWC.y), dpdv(uvOfPWC.x, uvOfPWC.y))
                        .inversed()
                        .transformVector(tangentWC).y;
                    const result = sliceIntegral0ToPWCS.times(dt);
                    return result;
                };
                return glqV3$$1(f, edgeWC.aT, edgeWC.bT);
            });
            const centroid = V3.add(...centroidZX2Parts)
                .schur(new V3(1, 1, 0.5))
                .div(totalVolume);
            return { volume: totalVolume, centroid: centroid };
        },
    };
    ZDirVolumeVisitor$$1[EllipsoidSurface$$1.name] = ZDirVolumeVisitor$$1[RotatedCurveSurface$$1.name];
    function glqV3$$1(f, startT, endT) {
        return gaussLegendre24Xs
            .reduce((val, currVal, index) => {
            const x = startT + (currVal + 1) / 2 * (endT - startT);
            return val.plus(f(x).times(gaussLegendre24Weights[index]));
        }, V3.O)
            .times((endT - startT) / 2);
    }
    function glqArray$$1(f, startT, endT, numEls = 3) {
        const result = new Array(numEls).fill(0);
        for (let i = 0; i < 24; i++) {
            const x = startT + (gaussLegendre24Xs[i] + 1) / 2 * (endT - startT);
            const fx = f(x);
            for (let j = 0; j < numEls; j++) {
                result[j] += fx[j] * gaussLegendre24Weights[i];
            }
        }
        for (let j = 0; j < numEls; j++) {
            result[j] *= (endT - startT) / 2;
        }
        return result;
    }
    function mergeVolumeAndCentroidZX2Parts(volumeAndCentroidZX2Parts) {
        const volume = volumeAndCentroidZX2Parts.reduce((result, [volume]) => result + volume, 0);
        const weightedCentroid = V3.add(...volumeAndCentroidZX2Parts.map(([, centroidZX2]) => centroidZX2)).schur(new V3(1, 1, 0.5));
        return { volume, centroid: weightedCentroid.div(volume) };
    }

    const CalculateAreaVisitor$$1 = {
        [ConicSurface$$1.name](edges) {
            const dpdu = this.dpdu();
            const dpdv = this.dpdv();
            // calculation cannot be done in local coordinate system, as the area doesnt scale proportionally
            const totalArea = edges
                .map(edge => {
                if (edge.curve instanceof EllipseCurve$$1 ||
                    edge.curve instanceof HyperbolaCurve$$1 ||
                    edge.curve instanceof ParabolaCurve$$1) {
                    const f = (t) => {
                        const at = edge.curve.at(t), tangentWC = edge.tangentAt(t);
                        const uvOfPWC = this.uvP(at);
                        // INTEGRATE [0; atUV.y]
                        //   dpdu(atUV.x, t) X dpdv(atUV.x, t)
                        // dt
                        // dpdv is constant with respect to t
                        // => dpdv(atUV.x, 0) X (INTEGRATE [0; atUV.y] dpdu(atUV.x, t) dt)
                        // dpdu(u, v) === v * dpdu(u, 1)
                        // => dpdv(atUV.x, 0) X (1/2 t² dpdu(atUV.x, 1))[0; atUV.y]
                        // => dpdv(atUV.x, 0) X dpdu(atUV.x, atUV.y² / 2)
                        const du = -M4.forSys(dpdu(uvOfPWC.x, uvOfPWC.y), dpdv(uvOfPWC.x))
                            .inversed()
                            .transformVector(tangentWC).x;
                        return (dpdu(uvOfPWC.x, Math.pow(uvOfPWC.y, 2) / 2)
                            .cross(dpdv(uvOfPWC.x))
                            .length() * du);
                    };
                    return glqInSteps(f, edge.aT, edge.bT, 1);
                }
                else if (edge.curve instanceof L3$$1) {
                    return 0;
                }
                else {
                    throw new Error();
                }
            })
                .sum();
            return totalArea * this.normalDir;
        },
        [PlaneSurface$$1.name](edges) {
            let totalArea = 0;
            const r1 = this.right, u1 = this.up;
            for (const edge of edges) {
                let edgeArea;
                const curve = edge.curve;
                if (curve instanceof L3$$1) {
                    edgeArea = (edge.a.dot(u1) + edge.b.dot(u1)) / 2 * edge.b.to(edge.a).dot(r1);
                }
                else if (curve instanceof EllipseCurve$$1) {
                    // INTEGRATE[aT; bT] (curve.at(t) * u1) * (tangent(t) * r1) dt
                    // INTEGRATE[aT; bT] (u1 f1 cos t + u1 f2 sin t + u1 c) * (r1 f1 (-sin t) + r1 f2 cos t) dt
                    const { f1, f2, center } = curve;
                    const a = u1.dot(f1), b = u1.dot(f2), c = u1.dot(center), d = r1.dot(f1), e = r1.dot(f2);
                    function fArea(t) {
                        return (0.25 *
                            (2 * (-b * d + a * e) * t +
                                4 * c * d * cos$2(t) +
                                4 * c * e * sin$2(t) +
                                (a * d - b * e) * cos$2(2 * t) +
                                (b * d + a * e) * sin$2(2 * t)));
                    }
                    edgeArea = -(fArea(edge.bT) - fArea(edge.aT));
                }
                else if (curve instanceof ImplicitCurve$$1) {
                    throw new Error('implement for implicitCurve');
                }
                else {
                    const dir1 = u1;
                    assertf(() => dir1.hasLength(1));
                    // INT[aT; bT] at(t) * dir1 * tangentAt(t).rejectedFrom(dir1) dt
                    const f = (curveT) => {
                        const at = curve.at(curveT);
                        const tangent = curve.tangentAt(curveT);
                        const ds = r1.dot(tangent);
                        const t = u1.dot(at);
                        return ds * t;
                    };
                    edgeArea = glqInSteps(f, edge.aT, edge.bT, 3);
                }
                totalArea += edgeArea;
            }
            assert(isFinite(totalArea));
            return totalArea;
        },
        [RotatedCurveSurface$$1.name](edges, canApproximate = true) {
            const f1 = this.matrix.X, f2 = this.matrix.Y, f3 = this.matrix.Z;
            const likeVerticalSpheroid = eq(f1.length(), f2.length()) &&
                f1.isPerpendicularTo(f2) &&
                f2.isPerpendicularTo(f3) &&
                f3.isPerpendicularTo(f1);
            const areaParts = edges.map((edgeWC, ei) => {
                console.log('edge', ei, edgeWC.sce);
                const curveWC = edgeWC.curve;
                if (edgeWC.curve instanceof ImplicitCurve$$1) {
                    throw new Error();
                }
                else {
                    if (likeVerticalSpheroid) {
                        const f = (curveT) => {
                            const pWC = curveWC.at(curveT), tangent = curveWC.tangentAt(curveT);
                            const pLC = this.matrixInverse.transformPoint(pWC);
                            const { x: angleXY, y: t } = this.uvP(pWC);
                            const arcRadius = this.matrix.transformVector(pLC.xy()).length();
                            const arcLength = angleXY * arcRadius;
                            const dpdv = this.dpdv()(angleXY, t).unit();
                            const scaling = dpdv.dot(tangent);
                            return arcLength * scaling;
                        };
                        return glqInSteps(f, edgeWC.aT, edgeWC.bT, 1);
                    }
                    else {
                        const dpdu = this.dpdu(), dpdv = this.dpdv();
                        const f2 = (curveT) => {
                            const pWC = curveWC.at(curveT), tangentWC = curveWC.tangentAt(curveT);
                            const uvPWC = this.uvP(pWC);
                            const slice = (phi) => {
                                //return this.dpdu()(phi, st.y).length() * this.dpdv()(phi, st.y).length()
                                return dpdu(phi, uvPWC.y)
                                    .cross(dpdv(phi, uvPWC.y))
                                    .length();
                            };
                            // we need to do a coordinate transform from curveT to dt, as that is what we are integrating
                            const dt = M4.forSys(dpdu(uvPWC.x, uvPWC.y), dpdv(uvPWC.x, uvPWC.y))
                                .inversed()
                                .transformVector(tangentWC).y;
                            return glqInSteps(slice, 0, uvPWC.x, 1) * dt;
                        };
                        return glqInSteps(f2, edgeWC.aT, edgeWC.bT, 1);
                    }
                }
            });
            return areaParts.sum();
        },
        [ProjectedCurveSurface$$1.name](edges) {
            // calculation cannot be done in local coordinate system, as the area doesn't scale proportionally
            const thisDir1 = this.dir.unit();
            const totalArea = edges
                .map(edge => {
                if (edge.curve instanceof L3$$1) {
                    return 0;
                }
                else if (edge.curve instanceof ImplicitCurve$$1) {
                    const { points, tangents } = edge.curve;
                    const minT = edge.minT, maxT = edge.maxT;
                    let sum = 0;
                    const start = ceil(minT + NLA_PRECISION);
                    const end = floor$1(maxT - NLA_PRECISION);
                    for (let i = start; i <= end; i++) {
                        const at = points[i], tangent = tangents[i]; //.toLength(edge.curve.stepSize)
                        const scaling = this.normalP(at)
                            .cross(thisDir1)
                            .unit()
                            .dot(tangent);
                        sum += at.dot(thisDir1) * scaling;
                    }
                    const f = (t) => {
                        const at = edge.curve.at(t), tangent = edge.curve.tangentAt(t);
                        const scaling = this.normalP(at)
                            .cross(thisDir1)
                            .unit()
                            .dot(tangent);
                        return at.dot(thisDir1) * scaling;
                    };
                    sum += f(minT) * (start - minT - 0.5);
                    sum += f(maxT) * (maxT - end - 0.5);
                    return sum * sign$2(edge.deltaT());
                }
                else {
                    const f = (t) => {
                        const at = edge.curve.at(t);
                        const tangent = edge.tangentAt(t);
                        const scaling = tangent.rejected1Length(thisDir1);
                        return at.dot(thisDir1) * scaling;
                    };
                    const val = glqInSteps(f, edge.aT, edge.bT, 1);
                    const sign = Math.sign(this.normalP(edge.a)
                        .cross(this.dir)
                        .dot(edge.curve.tangentAt(edge.aT)));
                    assert(0 !== sign);
                    return val * sign;
                }
            })
                .sum();
            console.log('totalArea', totalArea);
            return totalArea;
        },
    };
    CalculateAreaVisitor$$1[EllipsoidSurface$$1.name] = CalculateAreaVisitor$$1[RotatedCurveSurface$$1.name];

    var TINF_OK = 0;
    var TINF_DATA_ERROR = -3;

    function Tree() {
      this.table = new Uint16Array(16);   /* table of code length counts */
      this.trans = new Uint16Array(288);  /* code -> symbol translation table */
    }

    function Data(source, dest) {
      this.source = source;
      this.sourceIndex = 0;
      this.tag = 0;
      this.bitcount = 0;
      
      this.dest = dest;
      this.destLen = 0;
      
      this.ltree = new Tree();  /* dynamic length/symbol tree */
      this.dtree = new Tree();  /* dynamic distance tree */
    }

    /* --------------------------------------------------- *
     * -- uninitialized global data (static structures) -- *
     * --------------------------------------------------- */

    var sltree = new Tree();
    var sdtree = new Tree();

    /* extra bits and base tables for length codes */
    var length_bits = new Uint8Array(30);
    var length_base = new Uint16Array(30);

    /* extra bits and base tables for distance codes */
    var dist_bits = new Uint8Array(30);
    var dist_base = new Uint16Array(30);

    /* special ordering of code length codes */
    var clcidx = new Uint8Array([
      16, 17, 18, 0, 8, 7, 9, 6,
      10, 5, 11, 4, 12, 3, 13, 2,
      14, 1, 15
    ]);

    /* used by tinf_decode_trees, avoids allocations every call */
    var code_tree = new Tree();
    var lengths = new Uint8Array(288 + 32);

    /* ----------------------- *
     * -- utility functions -- *
     * ----------------------- */

    /* build extra bits and base tables */
    function tinf_build_bits_base(bits, base, delta, first) {
      var i, sum;

      /* build bits table */
      for (i = 0; i < delta; ++i) bits[i] = 0;
      for (i = 0; i < 30 - delta; ++i) bits[i + delta] = i / delta | 0;

      /* build base table */
      for (sum = first, i = 0; i < 30; ++i) {
        base[i] = sum;
        sum += 1 << bits[i];
      }
    }

    /* build the fixed huffman trees */
    function tinf_build_fixed_trees(lt, dt) {
      var i;

      /* build fixed length tree */
      for (i = 0; i < 7; ++i) lt.table[i] = 0;

      lt.table[7] = 24;
      lt.table[8] = 152;
      lt.table[9] = 112;

      for (i = 0; i < 24; ++i) lt.trans[i] = 256 + i;
      for (i = 0; i < 144; ++i) lt.trans[24 + i] = i;
      for (i = 0; i < 8; ++i) lt.trans[24 + 144 + i] = 280 + i;
      for (i = 0; i < 112; ++i) lt.trans[24 + 144 + 8 + i] = 144 + i;

      /* build fixed distance tree */
      for (i = 0; i < 5; ++i) dt.table[i] = 0;

      dt.table[5] = 32;

      for (i = 0; i < 32; ++i) dt.trans[i] = i;
    }

    /* given an array of code lengths, build a tree */
    var offs = new Uint16Array(16);

    function tinf_build_tree(t, lengths, off, num) {
      var i, sum;

      /* clear code length count table */
      for (i = 0; i < 16; ++i) t.table[i] = 0;

      /* scan symbol lengths, and sum code length counts */
      for (i = 0; i < num; ++i) t.table[lengths[off + i]]++;

      t.table[0] = 0;

      /* compute offset table for distribution sort */
      for (sum = 0, i = 0; i < 16; ++i) {
        offs[i] = sum;
        sum += t.table[i];
      }

      /* create code->symbol translation table (symbols sorted by code) */
      for (i = 0; i < num; ++i) {
        if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;
      }
    }

    /* ---------------------- *
     * -- decode functions -- *
     * ---------------------- */

    /* get one bit from source stream */
    function tinf_getbit(d) {
      /* check if tag is empty */
      if (!d.bitcount--) {
        /* load next tag */
        d.tag = d.source[d.sourceIndex++];
        d.bitcount = 7;
      }

      /* shift bit out of tag */
      var bit = d.tag & 1;
      d.tag >>>= 1;

      return bit;
    }

    /* read a num bit value from a stream and add base */
    function tinf_read_bits(d, num, base) {
      if (!num)
        return base;

      while (d.bitcount < 24) {
        d.tag |= d.source[d.sourceIndex++] << d.bitcount;
        d.bitcount += 8;
      }

      var val = d.tag & (0xffff >>> (16 - num));
      d.tag >>>= num;
      d.bitcount -= num;
      return val + base;
    }

    /* given a data stream and a tree, decode a symbol */
    function tinf_decode_symbol(d, t) {
      while (d.bitcount < 24) {
        d.tag |= d.source[d.sourceIndex++] << d.bitcount;
        d.bitcount += 8;
      }
      
      var sum = 0, cur = 0, len = 0;
      var tag = d.tag;

      /* get more bits while code value is above sum */
      do {
        cur = 2 * cur + (tag & 1);
        tag >>>= 1;
        ++len;

        sum += t.table[len];
        cur -= t.table[len];
      } while (cur >= 0);
      
      d.tag = tag;
      d.bitcount -= len;

      return t.trans[sum + cur];
    }

    /* given a data stream, decode dynamic trees from it */
    function tinf_decode_trees(d, lt, dt) {
      var hlit, hdist, hclen;
      var i, num, length;

      /* get 5 bits HLIT (257-286) */
      hlit = tinf_read_bits(d, 5, 257);

      /* get 5 bits HDIST (1-32) */
      hdist = tinf_read_bits(d, 5, 1);

      /* get 4 bits HCLEN (4-19) */
      hclen = tinf_read_bits(d, 4, 4);

      for (i = 0; i < 19; ++i) lengths[i] = 0;

      /* read code lengths for code length alphabet */
      for (i = 0; i < hclen; ++i) {
        /* get 3 bits code length (0-7) */
        var clen = tinf_read_bits(d, 3, 0);
        lengths[clcidx[i]] = clen;
      }

      /* build code length tree */
      tinf_build_tree(code_tree, lengths, 0, 19);

      /* decode code lengths for the dynamic trees */
      for (num = 0; num < hlit + hdist;) {
        var sym = tinf_decode_symbol(d, code_tree);

        switch (sym) {
          case 16:
            /* copy previous code length 3-6 times (read 2 bits) */
            var prev = lengths[num - 1];
            for (length = tinf_read_bits(d, 2, 3); length; --length) {
              lengths[num++] = prev;
            }
            break;
          case 17:
            /* repeat code length 0 for 3-10 times (read 3 bits) */
            for (length = tinf_read_bits(d, 3, 3); length; --length) {
              lengths[num++] = 0;
            }
            break;
          case 18:
            /* repeat code length 0 for 11-138 times (read 7 bits) */
            for (length = tinf_read_bits(d, 7, 11); length; --length) {
              lengths[num++] = 0;
            }
            break;
          default:
            /* values 0-15 represent the actual code lengths */
            lengths[num++] = sym;
            break;
        }
      }

      /* build dynamic trees */
      tinf_build_tree(lt, lengths, 0, hlit);
      tinf_build_tree(dt, lengths, hlit, hdist);
    }

    /* ----------------------------- *
     * -- block inflate functions -- *
     * ----------------------------- */

    /* given a stream and two trees, inflate a block of data */
    function tinf_inflate_block_data(d, lt, dt) {
      while (1) {
        var sym = tinf_decode_symbol(d, lt);

        /* check for end of block */
        if (sym === 256) {
          return TINF_OK;
        }

        if (sym < 256) {
          d.dest[d.destLen++] = sym;
        } else {
          var length, dist, offs;
          var i;

          sym -= 257;

          /* possibly get more bits from length code */
          length = tinf_read_bits(d, length_bits[sym], length_base[sym]);

          dist = tinf_decode_symbol(d, dt);

          /* possibly get more bits from distance code */
          offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);

          /* copy match */
          for (i = offs; i < offs + length; ++i) {
            d.dest[d.destLen++] = d.dest[i];
          }
        }
      }
    }

    /* inflate an uncompressed block of data */
    function tinf_inflate_uncompressed_block(d) {
      var length, invlength;
      var i;
      
      /* unread from bitbuffer */
      while (d.bitcount > 8) {
        d.sourceIndex--;
        d.bitcount -= 8;
      }

      /* get length */
      length = d.source[d.sourceIndex + 1];
      length = 256 * length + d.source[d.sourceIndex];

      /* get one's complement of length */
      invlength = d.source[d.sourceIndex + 3];
      invlength = 256 * invlength + d.source[d.sourceIndex + 2];

      /* check length */
      if (length !== (~invlength & 0x0000ffff))
        return TINF_DATA_ERROR;

      d.sourceIndex += 4;

      /* copy block */
      for (i = length; i; --i)
        d.dest[d.destLen++] = d.source[d.sourceIndex++];

      /* make sure we start next block on a byte boundary */
      d.bitcount = 0;

      return TINF_OK;
    }

    /* inflate stream from source to dest */
    function tinf_uncompress(source, dest) {
      var d = new Data(source, dest);
      var bfinal, btype, res;

      do {
        /* read final block flag */
        bfinal = tinf_getbit(d);

        /* read block type (2 bits) */
        btype = tinf_read_bits(d, 2, 0);

        /* decompress block */
        switch (btype) {
          case 0:
            /* decompress uncompressed block */
            res = tinf_inflate_uncompressed_block(d);
            break;
          case 1:
            /* decompress block with fixed huffman trees */
            res = tinf_inflate_block_data(d, sltree, sdtree);
            break;
          case 2:
            /* decompress block with dynamic huffman trees */
            tinf_decode_trees(d, d.ltree, d.dtree);
            res = tinf_inflate_block_data(d, d.ltree, d.dtree);
            break;
          default:
            res = TINF_DATA_ERROR;
        }

        if (res !== TINF_OK)
          throw new Error('Data error');

      } while (!bfinal);

      if (d.destLen < d.dest.length) {
        if (typeof d.dest.slice === 'function')
          return d.dest.slice(0, d.destLen);
        else
          return d.dest.subarray(0, d.destLen);
      }
      
      return d.dest;
    }

    /* -------------------- *
     * -- initialization -- *
     * -------------------- */

    /* build fixed huffman trees */
    tinf_build_fixed_trees(sltree, sdtree);

    /* build extra bits and base tables */
    tinf_build_bits_base(length_bits, length_base, 4, 3);
    tinf_build_bits_base(dist_bits, dist_base, 2, 1);

    /* fix a special case */
    length_bits[28] = 0;
    length_base[28] = 258;

    var tinyInflate = tinf_uncompress;

    // The Bounding Box object

    function derive(v0, v1, v2, v3, t) {
        return Math.pow(1 - t, 3) * v0 +
            3 * Math.pow(1 - t, 2) * t * v1 +
            3 * (1 - t) * Math.pow(t, 2) * v2 +
            Math.pow(t, 3) * v3;
    }
    /**
     * A bounding box is an enclosing box that describes the smallest measure within which all the points lie.
     * It is used to calculate the bounding box of a glyph or text path.
     *
     * On initialization, x1/y1/x2/y2 will be NaN. Check if the bounding box is empty using `isEmpty()`.
     *
     * @exports opentype.BoundingBox
     * @class
     * @constructor
     */
    function BoundingBox() {
        this.x1 = Number.NaN;
        this.y1 = Number.NaN;
        this.x2 = Number.NaN;
        this.y2 = Number.NaN;
    }

    /**
     * Returns true if the bounding box is empty, that is, no points have been added to the box yet.
     */
    BoundingBox.prototype.isEmpty = function() {
        return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);
    };

    /**
     * Add the point to the bounding box.
     * The x1/y1/x2/y2 coordinates of the bounding box will now encompass the given point.
     * @param {number} x - The X coordinate of the point.
     * @param {number} y - The Y coordinate of the point.
     */
    BoundingBox.prototype.addPoint = function(x, y) {
        if (typeof x === 'number') {
            if (isNaN(this.x1) || isNaN(this.x2)) {
                this.x1 = x;
                this.x2 = x;
            }
            if (x < this.x1) {
                this.x1 = x;
            }
            if (x > this.x2) {
                this.x2 = x;
            }
        }
        if (typeof y === 'number') {
            if (isNaN(this.y1) || isNaN(this.y2)) {
                this.y1 = y;
                this.y2 = y;
            }
            if (y < this.y1) {
                this.y1 = y;
            }
            if (y > this.y2) {
                this.y2 = y;
            }
        }
    };

    /**
     * Add a X coordinate to the bounding box.
     * This extends the bounding box to include the X coordinate.
     * This function is used internally inside of addBezier.
     * @param {number} x - The X coordinate of the point.
     */
    BoundingBox.prototype.addX = function(x) {
        this.addPoint(x, null);
    };

    /**
     * Add a Y coordinate to the bounding box.
     * This extends the bounding box to include the Y coordinate.
     * This function is used internally inside of addBezier.
     * @param {number} y - The Y coordinate of the point.
     */
    BoundingBox.prototype.addY = function(y) {
        this.addPoint(null, y);
    };

    /**
     * Add a Bézier curve to the bounding box.
     * This extends the bounding box to include the entire Bézier.
     * @param {number} x0 - The starting X coordinate.
     * @param {number} y0 - The starting Y coordinate.
     * @param {number} x1 - The X coordinate of the first control point.
     * @param {number} y1 - The Y coordinate of the first control point.
     * @param {number} x2 - The X coordinate of the second control point.
     * @param {number} y2 - The Y coordinate of the second control point.
     * @param {number} x - The ending X coordinate.
     * @param {number} y - The ending Y coordinate.
     */
    BoundingBox.prototype.addBezier = function(x0, y0, x1, y1, x2, y2, x, y) {
        // This code is based on http://nishiohirokazu.blogspot.com/2009/06/how-to-calculate-bezier-curves-bounding.html
        // and https://github.com/icons8/svg-path-bounding-box

        const p0 = [x0, y0];
        const p1 = [x1, y1];
        const p2 = [x2, y2];
        const p3 = [x, y];

        this.addPoint(x0, y0);
        this.addPoint(x, y);

        for (let i = 0; i <= 1; i++) {
            const b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
            const a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
            const c = 3 * p1[i] - 3 * p0[i];

            if (a === 0) {
                if (b === 0) continue;
                const t = -c / b;
                if (0 < t && t < 1) {
                    if (i === 0) this.addX(derive(p0[i], p1[i], p2[i], p3[i], t));
                    if (i === 1) this.addY(derive(p0[i], p1[i], p2[i], p3[i], t));
                }
                continue;
            }

            const b2ac = Math.pow(b, 2) - 4 * c * a;
            if (b2ac < 0) continue;
            const t1 = (-b + Math.sqrt(b2ac)) / (2 * a);
            if (0 < t1 && t1 < 1) {
                if (i === 0) this.addX(derive(p0[i], p1[i], p2[i], p3[i], t1));
                if (i === 1) this.addY(derive(p0[i], p1[i], p2[i], p3[i], t1));
            }
            const t2 = (-b - Math.sqrt(b2ac)) / (2 * a);
            if (0 < t2 && t2 < 1) {
                if (i === 0) this.addX(derive(p0[i], p1[i], p2[i], p3[i], t2));
                if (i === 1) this.addY(derive(p0[i], p1[i], p2[i], p3[i], t2));
            }
        }
    };

    /**
     * Add a quadratic curve to the bounding box.
     * This extends the bounding box to include the entire quadratic curve.
     * @param {number} x0 - The starting X coordinate.
     * @param {number} y0 - The starting Y coordinate.
     * @param {number} x1 - The X coordinate of the control point.
     * @param {number} y1 - The Y coordinate of the control point.
     * @param {number} x - The ending X coordinate.
     * @param {number} y - The ending Y coordinate.
     */
    BoundingBox.prototype.addQuad = function(x0, y0, x1, y1, x, y) {
        const cp1x = x0 + 2 / 3 * (x1 - x0);
        const cp1y = y0 + 2 / 3 * (y1 - y0);
        const cp2x = cp1x + 1 / 3 * (x - x0);
        const cp2y = cp1y + 1 / 3 * (y - y0);
        this.addBezier(x0, y0, cp1x, cp1y, cp2x, cp2y, x, y);
    };

    // Geometric objects

    /**
     * A bézier path containing a set of path commands similar to a SVG path.
     * Paths can be drawn on a context using `draw`.
     * @exports opentype.Path
     * @class
     * @constructor
     */
    function Path() {
        this.commands = [];
        this.fill = 'black';
        this.stroke = null;
        this.strokeWidth = 1;
    }

    /**
     * @param  {number} x
     * @param  {number} y
     */
    Path.prototype.moveTo = function(x, y) {
        this.commands.push({
            type: 'M',
            x: x,
            y: y
        });
    };

    /**
     * @param  {number} x
     * @param  {number} y
     */
    Path.prototype.lineTo = function(x, y) {
        this.commands.push({
            type: 'L',
            x: x,
            y: y
        });
    };

    /**
     * Draws cubic curve
     * @function
     * curveTo
     * @memberof opentype.Path.prototype
     * @param  {number} x1 - x of control 1
     * @param  {number} y1 - y of control 1
     * @param  {number} x2 - x of control 2
     * @param  {number} y2 - y of control 2
     * @param  {number} x - x of path point
     * @param  {number} y - y of path point
     */

    /**
     * Draws cubic curve
     * @function
     * bezierCurveTo
     * @memberof opentype.Path.prototype
     * @param  {number} x1 - x of control 1
     * @param  {number} y1 - y of control 1
     * @param  {number} x2 - x of control 2
     * @param  {number} y2 - y of control 2
     * @param  {number} x - x of path point
     * @param  {number} y - y of path point
     * @see curveTo
     */
    Path.prototype.curveTo = Path.prototype.bezierCurveTo = function(x1, y1, x2, y2, x, y) {
        this.commands.push({
            type: 'C',
            x1: x1,
            y1: y1,
            x2: x2,
            y2: y2,
            x: x,
            y: y
        });
    };

    /**
     * Draws quadratic curve
     * @function
     * quadraticCurveTo
     * @memberof opentype.Path.prototype
     * @param  {number} x1 - x of control
     * @param  {number} y1 - y of control
     * @param  {number} x - x of path point
     * @param  {number} y - y of path point
     */

    /**
     * Draws quadratic curve
     * @function
     * quadTo
     * @memberof opentype.Path.prototype
     * @param  {number} x1 - x of control
     * @param  {number} y1 - y of control
     * @param  {number} x - x of path point
     * @param  {number} y - y of path point
     */
    Path.prototype.quadTo = Path.prototype.quadraticCurveTo = function(x1, y1, x, y) {
        this.commands.push({
            type: 'Q',
            x1: x1,
            y1: y1,
            x: x,
            y: y
        });
    };

    /**
     * Closes the path
     * @function closePath
     * @memberof opentype.Path.prototype
     */

    /**
     * Close the path
     * @function close
     * @memberof opentype.Path.prototype
     */
    Path.prototype.close = Path.prototype.closePath = function() {
        this.commands.push({
            type: 'Z'
        });
    };

    /**
     * Add the given path or list of commands to the commands of this path.
     * @param  {Array} pathOrCommands - another opentype.Path, an opentype.BoundingBox, or an array of commands.
     */
    Path.prototype.extend = function(pathOrCommands) {
        if (pathOrCommands.commands) {
            pathOrCommands = pathOrCommands.commands;
        } else if (pathOrCommands instanceof BoundingBox) {
            const box = pathOrCommands;
            this.moveTo(box.x1, box.y1);
            this.lineTo(box.x2, box.y1);
            this.lineTo(box.x2, box.y2);
            this.lineTo(box.x1, box.y2);
            this.close();
            return;
        }

        Array.prototype.push.apply(this.commands, pathOrCommands);
    };

    /**
     * Calculate the bounding box of the path.
     * @returns {opentype.BoundingBox}
     */
    Path.prototype.getBoundingBox = function() {
        const box = new BoundingBox();

        let startX = 0;
        let startY = 0;
        let prevX = 0;
        let prevY = 0;
        for (let i = 0; i < this.commands.length; i++) {
            const cmd = this.commands[i];
            switch (cmd.type) {
                case 'M':
                    box.addPoint(cmd.x, cmd.y);
                    startX = prevX = cmd.x;
                    startY = prevY = cmd.y;
                    break;
                case 'L':
                    box.addPoint(cmd.x, cmd.y);
                    prevX = cmd.x;
                    prevY = cmd.y;
                    break;
                case 'Q':
                    box.addQuad(prevX, prevY, cmd.x1, cmd.y1, cmd.x, cmd.y);
                    prevX = cmd.x;
                    prevY = cmd.y;
                    break;
                case 'C':
                    box.addBezier(prevX, prevY, cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
                    prevX = cmd.x;
                    prevY = cmd.y;
                    break;
                case 'Z':
                    prevX = startX;
                    prevY = startY;
                    break;
                default:
                    throw new Error('Unexpected path command ' + cmd.type);
            }
        }
        if (box.isEmpty()) {
            box.addPoint(0, 0);
        }
        return box;
    };

    /**
     * Draw the path to a 2D context.
     * @param {CanvasRenderingContext2D} ctx - A 2D drawing context.
     */
    Path.prototype.draw = function(ctx) {
        ctx.beginPath();
        for (let i = 0; i < this.commands.length; i += 1) {
            const cmd = this.commands[i];
            if (cmd.type === 'M') {
                ctx.moveTo(cmd.x, cmd.y);
            } else if (cmd.type === 'L') {
                ctx.lineTo(cmd.x, cmd.y);
            } else if (cmd.type === 'C') {
                ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
            } else if (cmd.type === 'Q') {
                ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);
            } else if (cmd.type === 'Z') {
                ctx.closePath();
            }
        }

        if (this.fill) {
            ctx.fillStyle = this.fill;
            ctx.fill();
        }

        if (this.stroke) {
            ctx.strokeStyle = this.stroke;
            ctx.lineWidth = this.strokeWidth;
            ctx.stroke();
        }
    };

    /**
     * Convert the Path to a string of path data instructions
     * See http://www.w3.org/TR/SVG/paths.html#PathData
     * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values
     * @return {string}
     */
    Path.prototype.toPathData = function(decimalPlaces) {
        decimalPlaces = decimalPlaces !== undefined ? decimalPlaces : 2;

        function floatToString(v) {
            if (Math.round(v) === v) {
                return '' + Math.round(v);
            } else {
                return v.toFixed(decimalPlaces);
            }
        }

        function packValues() {
            let s = '';
            for (let i = 0; i < arguments.length; i += 1) {
                const v = arguments[i];
                if (v >= 0 && i > 0) {
                    s += ' ';
                }

                s += floatToString(v);
            }

            return s;
        }

        let d = '';
        for (let i = 0; i < this.commands.length; i += 1) {
            const cmd = this.commands[i];
            if (cmd.type === 'M') {
                d += 'M' + packValues(cmd.x, cmd.y);
            } else if (cmd.type === 'L') {
                d += 'L' + packValues(cmd.x, cmd.y);
            } else if (cmd.type === 'C') {
                d += 'C' + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
            } else if (cmd.type === 'Q') {
                d += 'Q' + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);
            } else if (cmd.type === 'Z') {
                d += 'Z';
            }
        }

        return d;
    };

    /**
     * Convert the path to an SVG <path> element, as a string.
     * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values
     * @return {string}
     */
    Path.prototype.toSVG = function(decimalPlaces) {
        let svg = '<path d="';
        svg += this.toPathData(decimalPlaces);
        svg += '"';
        if (this.fill && this.fill !== 'black') {
            if (this.fill === null) {
                svg += ' fill="none"';
            } else {
                svg += ' fill="' + this.fill + '"';
            }
        }

        if (this.stroke) {
            svg += ' stroke="' + this.stroke + '" stroke-width="' + this.strokeWidth + '"';
        }

        svg += '/>';
        return svg;
    };

    /**
     * Convert the path to a DOM element.
     * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values
     * @return {SVGPathElement}
     */
    Path.prototype.toDOMElement = function(decimalPlaces) {
        const temporaryPath = this.toPathData(decimalPlaces);
        const newPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');

        newPath.setAttribute('d', temporaryPath);

        return newPath;
    };

    // Run-time checking of preconditions.

    function fail(message) {
        throw new Error(message);
    }

    // Precondition function that checks if the given predicate is true.
    // If not, it will throw an error.
    function argument(predicate, message) {
        if (!predicate) {
            fail(message);
        }
    }
    var check = { fail, argument, assert: argument };

    // Data types used in the OpenType font file.

    const LIMIT16 = 32768; // The limit at which a 16-bit number switches signs == 2^15
    const LIMIT32 = 2147483648; // The limit at which a 32-bit number switches signs == 2 ^ 31

    /**
     * @exports opentype.decode
     * @class
     */
    const decode = {};
    /**
     * @exports opentype.encode
     * @class
     */
    const encode = {};
    /**
     * @exports opentype.sizeOf
     * @class
     */
    const sizeOf = {};

    // Return a function that always returns the same value.
    function constant(v) {
        return function() {
            return v;
        };
    }

    // OpenType data types //////////////////////////////////////////////////////

    /**
     * Convert an 8-bit unsigned integer to a list of 1 byte.
     * @param {number}
     * @returns {Array}
     */
    encode.BYTE = function(v) {
        check.argument(v >= 0 && v <= 255, 'Byte value should be between 0 and 255.');
        return [v];
    };
    /**
     * @constant
     * @type {number}
     */
    sizeOf.BYTE = constant(1);

    /**
     * Convert a 8-bit signed integer to a list of 1 byte.
     * @param {string}
     * @returns {Array}
     */
    encode.CHAR = function(v) {
        return [v.charCodeAt(0)];
    };

    /**
     * @constant
     * @type {number}
     */
    sizeOf.CHAR = constant(1);

    /**
     * Convert an ASCII string to a list of bytes.
     * @param {string}
     * @returns {Array}
     */
    encode.CHARARRAY = function(v) {
        const b = [];
        for (let i = 0; i < v.length; i += 1) {
            b[i] = v.charCodeAt(i);
        }

        return b;
    };

    /**
     * @param {Array}
     * @returns {number}
     */
    sizeOf.CHARARRAY = function(v) {
        return v.length;
    };

    /**
     * Convert a 16-bit unsigned integer to a list of 2 bytes.
     * @param {number}
     * @returns {Array}
     */
    encode.USHORT = function(v) {
        return [(v >> 8) & 0xFF, v & 0xFF];
    };

    /**
     * @constant
     * @type {number}
     */
    sizeOf.USHORT = constant(2);

    /**
     * Convert a 16-bit signed integer to a list of 2 bytes.
     * @param {number}
     * @returns {Array}
     */
    encode.SHORT = function(v) {
        // Two's complement
        if (v >= LIMIT16) {
            v = -(2 * LIMIT16 - v);
        }

        return [(v >> 8) & 0xFF, v & 0xFF];
    };

    /**
     * @constant
     * @type {number}
     */
    sizeOf.SHORT = constant(2);

    /**
     * Convert a 24-bit unsigned integer to a list of 3 bytes.
     * @param {number}
     * @returns {Array}
     */
    encode.UINT24 = function(v) {
        return [(v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
    };

    /**
     * @constant
     * @type {number}
     */
    sizeOf.UINT24 = constant(3);

    /**
     * Convert a 32-bit unsigned integer to a list of 4 bytes.
     * @param {number}
     * @returns {Array}
     */
    encode.ULONG = function(v) {
        return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
    };

    /**
     * @constant
     * @type {number}
     */
    sizeOf.ULONG = constant(4);

    /**
     * Convert a 32-bit unsigned integer to a list of 4 bytes.
     * @param {number}
     * @returns {Array}
     */
    encode.LONG = function(v) {
        // Two's complement
        if (v >= LIMIT32) {
            v = -(2 * LIMIT32 - v);
        }

        return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
    };

    /**
     * @constant
     * @type {number}
     */
    sizeOf.LONG = constant(4);

    encode.FIXED = encode.ULONG;
    sizeOf.FIXED = sizeOf.ULONG;

    encode.FWORD = encode.SHORT;
    sizeOf.FWORD = sizeOf.SHORT;

    encode.UFWORD = encode.USHORT;
    sizeOf.UFWORD = sizeOf.USHORT;

    /**
     * Convert a 32-bit Apple Mac timestamp integer to a list of 8 bytes, 64-bit timestamp.
     * @param {number}
     * @returns {Array}
     */
    encode.LONGDATETIME = function(v) {
        return [0, 0, 0, 0, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
    };

    /**
     * @constant
     * @type {number}
     */
    sizeOf.LONGDATETIME = constant(8);

    /**
     * Convert a 4-char tag to a list of 4 bytes.
     * @param {string}
     * @returns {Array}
     */
    encode.TAG = function(v) {
        check.argument(v.length === 4, 'Tag should be exactly 4 ASCII characters.');
        return [v.charCodeAt(0),
                v.charCodeAt(1),
                v.charCodeAt(2),
                v.charCodeAt(3)];
    };

    /**
     * @constant
     * @type {number}
     */
    sizeOf.TAG = constant(4);

    // CFF data types ///////////////////////////////////////////////////////////

    encode.Card8 = encode.BYTE;
    sizeOf.Card8 = sizeOf.BYTE;

    encode.Card16 = encode.USHORT;
    sizeOf.Card16 = sizeOf.USHORT;

    encode.OffSize = encode.BYTE;
    sizeOf.OffSize = sizeOf.BYTE;

    encode.SID = encode.USHORT;
    sizeOf.SID = sizeOf.USHORT;

    // Convert a numeric operand or charstring number to a variable-size list of bytes.
    /**
     * Convert a numeric operand or charstring number to a variable-size list of bytes.
     * @param {number}
     * @returns {Array}
     */
    encode.NUMBER = function(v) {
        if (v >= -107 && v <= 107) {
            return [v + 139];
        } else if (v >= 108 && v <= 1131) {
            v = v - 108;
            return [(v >> 8) + 247, v & 0xFF];
        } else if (v >= -1131 && v <= -108) {
            v = -v - 108;
            return [(v >> 8) + 251, v & 0xFF];
        } else if (v >= -32768 && v <= 32767) {
            return encode.NUMBER16(v);
        } else {
            return encode.NUMBER32(v);
        }
    };

    /**
     * @param {number}
     * @returns {number}
     */
    sizeOf.NUMBER = function(v) {
        return encode.NUMBER(v).length;
    };

    /**
     * Convert a signed number between -32768 and +32767 to a three-byte value.
     * This ensures we always use three bytes, but is not the most compact format.
     * @param {number}
     * @returns {Array}
     */
    encode.NUMBER16 = function(v) {
        return [28, (v >> 8) & 0xFF, v & 0xFF];
    };

    /**
     * @constant
     * @type {number}
     */
    sizeOf.NUMBER16 = constant(3);

    /**
     * Convert a signed number between -(2^31) and +(2^31-1) to a five-byte value.
     * This is useful if you want to be sure you always use four bytes,
     * at the expense of wasting a few bytes for smaller numbers.
     * @param {number}
     * @returns {Array}
     */
    encode.NUMBER32 = function(v) {
        return [29, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
    };

    /**
     * @constant
     * @type {number}
     */
    sizeOf.NUMBER32 = constant(5);

    /**
     * @param {number}
     * @returns {Array}
     */
    encode.REAL = function(v) {
        let value = v.toString();

        // Some numbers use an epsilon to encode the value. (e.g. JavaScript will store 0.0000001 as 1e-7)
        // This code converts it back to a number without the epsilon.
        const m = /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(value);
        if (m) {
            const epsilon = parseFloat('1e' + ((m[2] ? +m[2] : 0) + m[1].length));
            value = (Math.round(v * epsilon) / epsilon).toString();
        }

        let nibbles = '';
        for (let i = 0, ii = value.length; i < ii; i += 1) {
            const c = value[i];
            if (c === 'e') {
                nibbles += value[++i] === '-' ? 'c' : 'b';
            } else if (c === '.') {
                nibbles += 'a';
            } else if (c === '-') {
                nibbles += 'e';
            } else {
                nibbles += c;
            }
        }

        nibbles += (nibbles.length & 1) ? 'f' : 'ff';
        const out = [30];
        for (let i = 0, ii = nibbles.length; i < ii; i += 2) {
            out.push(parseInt(nibbles.substr(i, 2), 16));
        }

        return out;
    };

    /**
     * @param {number}
     * @returns {number}
     */
    sizeOf.REAL = function(v) {
        return encode.REAL(v).length;
    };

    encode.NAME = encode.CHARARRAY;
    sizeOf.NAME = sizeOf.CHARARRAY;

    encode.STRING = encode.CHARARRAY;
    sizeOf.STRING = sizeOf.CHARARRAY;

    /**
     * @param {DataView} data
     * @param {number} offset
     * @param {number} numBytes
     * @returns {string}
     */
    decode.UTF8 = function(data, offset, numBytes) {
        const codePoints = [];
        const numChars = numBytes;
        for (let j = 0; j < numChars; j++, offset += 1) {
            codePoints[j] = data.getUint8(offset);
        }

        return String.fromCharCode.apply(null, codePoints);
    };

    /**
     * @param {DataView} data
     * @param {number} offset
     * @param {number} numBytes
     * @returns {string}
     */
    decode.UTF16 = function(data, offset, numBytes) {
        const codePoints = [];
        const numChars = numBytes / 2;
        for (let j = 0; j < numChars; j++, offset += 2) {
            codePoints[j] = data.getUint16(offset);
        }

        return String.fromCharCode.apply(null, codePoints);
    };

    /**
     * Convert a JavaScript string to UTF16-BE.
     * @param {string}
     * @returns {Array}
     */
    encode.UTF16 = function(v) {
        const b = [];
        for (let i = 0; i < v.length; i += 1) {
            const codepoint = v.charCodeAt(i);
            b[b.length] = (codepoint >> 8) & 0xFF;
            b[b.length] = codepoint & 0xFF;
        }

        return b;
    };

    /**
     * @param {string}
     * @returns {number}
     */
    sizeOf.UTF16 = function(v) {
        return v.length * 2;
    };

    // Data for converting old eight-bit Macintosh encodings to Unicode.
    // This representation is optimized for decoding; encoding is slower
    // and needs more memory. The assumption is that all opentype.js users
    // want to open fonts, but saving a font will be comparatively rare
    // so it can be more expensive. Keyed by IANA character set name.
    //
    // Python script for generating these strings:
    //
    //     s = u''.join([chr(c).decode('mac_greek') for c in range(128, 256)])
    //     print(s.encode('utf-8'))
    /**
     * @private
     */
    const eightBitMacEncodings = {
        'x-mac-croatian':  // Python: 'mac_croatian'
        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø' +
        '¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ',
        'x-mac-cyrillic':  // Python: 'mac_cyrillic'
        'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњ' +
        'јЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю',
        'x-mac-gaelic': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/GAELIC.TXT
        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæø' +
        'ṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ',
        'x-mac-greek':  // Python: 'mac_greek'
        'Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩ' +
        'άΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\u00AD',
        'x-mac-icelandic':  // Python: 'mac_iceland'
        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +
        '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
        'x-mac-inuit': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/INUIT.TXT
        'ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗ' +
        'ᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł',
        'x-mac-ce':  // Python: 'mac_latin2'
        'ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅ' +
        'ņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ',
        macintosh:  // Python: 'mac_roman'
        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +
        '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
        'x-mac-romanian':  // Python: 'mac_romanian'
        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș' +
        '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
        'x-mac-turkish':  // Python: 'mac_turkish'
        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +
        '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ'
    };

    /**
     * Decodes an old-style Macintosh string. Returns either a Unicode JavaScript
     * string, or 'undefined' if the encoding is unsupported. For example, we do
     * not support Chinese, Japanese or Korean because these would need large
     * mapping tables.
     * @param {DataView} dataView
     * @param {number} offset
     * @param {number} dataLength
     * @param {string} encoding
     * @returns {string}
     */
    decode.MACSTRING = function(dataView, offset, dataLength, encoding) {
        const table = eightBitMacEncodings[encoding];
        if (table === undefined) {
            return undefined;
        }

        let result = '';
        for (let i = 0; i < dataLength; i++) {
            const c = dataView.getUint8(offset + i);
            // In all eight-bit Mac encodings, the characters 0x00..0x7F are
            // mapped to U+0000..U+007F; we only need to look up the others.
            if (c <= 0x7F) {
                result += String.fromCharCode(c);
            } else {
                result += table[c & 0x7F];
            }
        }

        return result;
    };

    // Helper function for encode.MACSTRING. Returns a dictionary for mapping
    // Unicode character codes to their 8-bit MacOS equivalent. This table
    // is not exactly a super cheap data structure, but we do not care because
    // encoding Macintosh strings is only rarely needed in typical applications.
    const macEncodingTableCache = typeof WeakMap === 'function' && new WeakMap();
    let macEncodingCacheKeys;
    const getMacEncodingTable = function (encoding) {
        // Since we use encoding as a cache key for WeakMap, it has to be
        // a String object and not a literal. And at least on NodeJS 2.10.1,
        // WeakMap requires that the same String instance is passed for cache hits.
        if (!macEncodingCacheKeys) {
            macEncodingCacheKeys = {};
            for (let e in eightBitMacEncodings) {
                /*jshint -W053 */  // Suppress "Do not use String as a constructor."
                macEncodingCacheKeys[e] = new String(e);
            }
        }

        const cacheKey = macEncodingCacheKeys[encoding];
        if (cacheKey === undefined) {
            return undefined;
        }

        // We can't do "if (cache.has(key)) {return cache.get(key)}" here:
        // since garbage collection may run at any time, it could also kick in
        // between the calls to cache.has() and cache.get(). In that case,
        // we would return 'undefined' even though we do support the encoding.
        if (macEncodingTableCache) {
            const cachedTable = macEncodingTableCache.get(cacheKey);
            if (cachedTable !== undefined) {
                return cachedTable;
            }
        }

        const decodingTable = eightBitMacEncodings[encoding];
        if (decodingTable === undefined) {
            return undefined;
        }

        const encodingTable = {};
        for (let i = 0; i < decodingTable.length; i++) {
            encodingTable[decodingTable.charCodeAt(i)] = i + 0x80;
        }

        if (macEncodingTableCache) {
            macEncodingTableCache.set(cacheKey, encodingTable);
        }

        return encodingTable;
    };

    /**
     * Encodes an old-style Macintosh string. Returns a byte array upon success.
     * If the requested encoding is unsupported, or if the input string contains
     * a character that cannot be expressed in the encoding, the function returns
     * 'undefined'.
     * @param {string} str
     * @param {string} encoding
     * @returns {Array}
     */
    encode.MACSTRING = function(str, encoding) {
        const table = getMacEncodingTable(encoding);
        if (table === undefined) {
            return undefined;
        }

        const result = [];
        for (let i = 0; i < str.length; i++) {
            let c = str.charCodeAt(i);

            // In all eight-bit Mac encodings, the characters 0x00..0x7F are
            // mapped to U+0000..U+007F; we only need to look up the others.
            if (c >= 0x80) {
                c = table[c];
                if (c === undefined) {
                    // str contains a Unicode character that cannot be encoded
                    // in the requested encoding.
                    return undefined;
                }
            }
            result[i] = c;
            // result.push(c);
        }

        return result;
    };

    /**
     * @param {string} str
     * @param {string} encoding
     * @returns {number}
     */
    sizeOf.MACSTRING = function(str, encoding) {
        const b = encode.MACSTRING(str, encoding);
        if (b !== undefined) {
            return b.length;
        } else {
            return 0;
        }
    };

    // Helper for encode.VARDELTAS
    function isByteEncodable(value) {
        return value >= -128 && value <= 127;
    }

    // Helper for encode.VARDELTAS
    function encodeVarDeltaRunAsZeroes(deltas, pos, result) {
        let runLength = 0;
        const numDeltas = deltas.length;
        while (pos < numDeltas && runLength < 64 && deltas[pos] === 0) {
            ++pos;
            ++runLength;
        }
        result.push(0x80 | (runLength - 1));
        return pos;
    }

    // Helper for encode.VARDELTAS
    function encodeVarDeltaRunAsBytes(deltas, offset, result) {
        let runLength = 0;
        const numDeltas = deltas.length;
        let pos = offset;
        while (pos < numDeltas && runLength < 64) {
            const value = deltas[pos];
            if (!isByteEncodable(value)) {
                break;
            }

            // Within a byte-encoded run of deltas, a single zero is best
            // stored literally as 0x00 value. However, if we have two or
            // more zeroes in a sequence, it is better to start a new run.
            // Fore example, the sequence of deltas [15, 15, 0, 15, 15]
            // becomes 6 bytes (04 0F 0F 00 0F 0F) when storing the zero
            // within the current run, but 7 bytes (01 0F 0F 80 01 0F 0F)
            // when starting a new run.
            if (value === 0 && pos + 1 < numDeltas && deltas[pos + 1] === 0) {
                break;
            }

            ++pos;
            ++runLength;
        }
        result.push(runLength - 1);
        for (let i = offset; i < pos; ++i) {
            result.push((deltas[i] + 256) & 0xff);
        }
        return pos;
    }

    // Helper for encode.VARDELTAS
    function encodeVarDeltaRunAsWords(deltas, offset, result) {
        let runLength = 0;
        const numDeltas = deltas.length;
        let pos = offset;
        while (pos < numDeltas && runLength < 64) {
            const value = deltas[pos];

            // Within a word-encoded run of deltas, it is easiest to start
            // a new run (with a different encoding) whenever we encounter
            // a zero value. For example, the sequence [0x6666, 0, 0x7777]
            // needs 7 bytes when storing the zero inside the current run
            // (42 66 66 00 00 77 77), and equally 7 bytes when starting a
            // new run (40 66 66 80 40 77 77).
            if (value === 0) {
                break;
            }

            // Within a word-encoded run of deltas, a single value in the
            // range (-128..127) should be encoded within the current run
            // because it is more compact. For example, the sequence
            // [0x6666, 2, 0x7777] becomes 7 bytes when storing the value
            // literally (42 66 66 00 02 77 77), but 8 bytes when starting
            // a new run (40 66 66 00 02 40 77 77).
            if (isByteEncodable(value) && pos + 1 < numDeltas && isByteEncodable(deltas[pos + 1])) {
                break;
            }

            ++pos;
            ++runLength;
        }
        result.push(0x40 | (runLength - 1));
        for (let i = offset; i < pos; ++i) {
            const val = deltas[i];
            result.push(((val + 0x10000) >> 8) & 0xff, (val + 0x100) & 0xff);
        }
        return pos;
    }

    /**
     * Encode a list of variation adjustment deltas.
     *
     * Variation adjustment deltas are used in ‘gvar’ and ‘cvar’ tables.
     * They indicate how points (in ‘gvar’) or values (in ‘cvar’) get adjusted
     * when generating instances of variation fonts.
     *
     * @see https://www.microsoft.com/typography/otspec/gvar.htm
     * @see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6gvar.html
     * @param {Array}
     * @return {Array}
     */
    encode.VARDELTAS = function(deltas) {
        let pos = 0;
        const result = [];
        while (pos < deltas.length) {
            const value = deltas[pos];
            if (value === 0) {
                pos = encodeVarDeltaRunAsZeroes(deltas, pos, result);
            } else if (value >= -128 && value <= 127) {
                pos = encodeVarDeltaRunAsBytes(deltas, pos, result);
            } else {
                pos = encodeVarDeltaRunAsWords(deltas, pos, result);
            }
        }
        return result;
    };

    // Convert a list of values to a CFF INDEX structure.
    // The values should be objects containing name / type / value.
    /**
     * @param {Array} l
     * @returns {Array}
     */
    encode.INDEX = function(l) {
        //var offset, offsets, offsetEncoder, encodedOffsets, encodedOffset, data,
        //    i, v;
        // Because we have to know which data type to use to encode the offsets,
        // we have to go through the values twice: once to encode the data and
        // calculate the offsets, then again to encode the offsets using the fitting data type.
        let offset = 1; // First offset is always 1.
        const offsets = [offset];
        const data = [];
        for (let i = 0; i < l.length; i += 1) {
            const v = encode.OBJECT(l[i]);
            Array.prototype.push.apply(data, v);
            offset += v.length;
            offsets.push(offset);
        }

        if (data.length === 0) {
            return [0, 0];
        }

        const encodedOffsets = [];
        const offSize = (1 + Math.floor(Math.log(offset) / Math.log(2)) / 8) | 0;
        const offsetEncoder = [undefined, encode.BYTE, encode.USHORT, encode.UINT24, encode.ULONG][offSize];
        for (let i = 0; i < offsets.length; i += 1) {
            const encodedOffset = offsetEncoder(offsets[i]);
            Array.prototype.push.apply(encodedOffsets, encodedOffset);
        }

        return Array.prototype.concat(encode.Card16(l.length),
                               encode.OffSize(offSize),
                               encodedOffsets,
                               data);
    };

    /**
     * @param {Array}
     * @returns {number}
     */
    sizeOf.INDEX = function(v) {
        return encode.INDEX(v).length;
    };

    /**
     * Convert an object to a CFF DICT structure.
     * The keys should be numeric.
     * The values should be objects containing name / type / value.
     * @param {Object} m
     * @returns {Array}
     */
    encode.DICT = function(m) {
        let d = [];
        const keys = Object.keys(m);
        const length = keys.length;

        for (let i = 0; i < length; i += 1) {
            // Object.keys() return string keys, but our keys are always numeric.
            const k = parseInt(keys[i], 0);
            const v = m[k];
            // Value comes before the key.
            d = d.concat(encode.OPERAND(v.value, v.type));
            d = d.concat(encode.OPERATOR(k));
        }

        return d;
    };

    /**
     * @param {Object}
     * @returns {number}
     */
    sizeOf.DICT = function(m) {
        return encode.DICT(m).length;
    };

    /**
     * @param {number}
     * @returns {Array}
     */
    encode.OPERATOR = function(v) {
        if (v < 1200) {
            return [v];
        } else {
            return [12, v - 1200];
        }
    };

    /**
     * @param {Array} v
     * @param {string}
     * @returns {Array}
     */
    encode.OPERAND = function(v, type) {
        let d = [];
        if (Array.isArray(type)) {
            for (let i = 0; i < type.length; i += 1) {
                check.argument(v.length === type.length, 'Not enough arguments given for type' + type);
                d = d.concat(encode.OPERAND(v[i], type[i]));
            }
        } else {
            if (type === 'SID') {
                d = d.concat(encode.NUMBER(v));
            } else if (type === 'offset') {
                // We make it easy for ourselves and always encode offsets as
                // 4 bytes. This makes offset calculation for the top dict easier.
                d = d.concat(encode.NUMBER32(v));
            } else if (type === 'number') {
                d = d.concat(encode.NUMBER(v));
            } else if (type === 'real') {
                d = d.concat(encode.REAL(v));
            } else {
                throw new Error('Unknown operand type ' + type);
                // FIXME Add support for booleans
            }
        }

        return d;
    };

    encode.OP = encode.BYTE;
    sizeOf.OP = sizeOf.BYTE;

    // memoize charstring encoding using WeakMap if available
    const wmm = typeof WeakMap === 'function' && new WeakMap();

    /**
     * Convert a list of CharString operations to bytes.
     * @param {Array}
     * @returns {Array}
     */
    encode.CHARSTRING = function(ops) {
        // See encode.MACSTRING for why we don't do "if (wmm && wmm.has(ops))".
        if (wmm) {
            const cachedValue = wmm.get(ops);
            if (cachedValue !== undefined) {
                return cachedValue;
            }
        }

        let d = [];
        const length = ops.length;

        for (let i = 0; i < length; i += 1) {
            const op = ops[i];
            d = d.concat(encode[op.type](op.value));
        }

        if (wmm) {
            wmm.set(ops, d);
        }

        return d;
    };

    /**
     * @param {Array}
     * @returns {number}
     */
    sizeOf.CHARSTRING = function(ops) {
        return encode.CHARSTRING(ops).length;
    };

    // Utility functions ////////////////////////////////////////////////////////

    /**
     * Convert an object containing name / type / value to bytes.
     * @param {Object}
     * @returns {Array}
     */
    encode.OBJECT = function(v) {
        const encodingFunction = encode[v.type];
        check.argument(encodingFunction !== undefined, 'No encoding function for type ' + v.type);
        return encodingFunction(v.value);
    };

    /**
     * @param {Object}
     * @returns {number}
     */
    sizeOf.OBJECT = function(v) {
        const sizeOfFunction = sizeOf[v.type];
        check.argument(sizeOfFunction !== undefined, 'No sizeOf function for type ' + v.type);
        return sizeOfFunction(v.value);
    };

    /**
     * Convert a table object to bytes.
     * A table contains a list of fields containing the metadata (name, type and default value).
     * The table itself has the field values set as attributes.
     * @param {opentype.Table}
     * @returns {Array}
     */
    encode.TABLE = function(table) {
        let d = [];
        const length = table.fields.length;
        const subtables = [];
        const subtableOffsets = [];

        for (let i = 0; i < length; i += 1) {
            const field = table.fields[i];
            const encodingFunction = encode[field.type];
            check.argument(encodingFunction !== undefined, 'No encoding function for field type ' + field.type + ' (' + field.name + ')');
            let value = table[field.name];
            if (value === undefined) {
                value = field.value;
            }

            const bytes = encodingFunction(value);

            if (field.type === 'TABLE') {
                subtableOffsets.push(d.length);
                d = d.concat([0, 0]);
                subtables.push(bytes);
            } else {
                d = d.concat(bytes);
            }
        }

        for (let i = 0; i < subtables.length; i += 1) {
            const o = subtableOffsets[i];
            const offset = d.length;
            check.argument(offset < 65536, 'Table ' + table.tableName + ' too big.');
            d[o] = offset >> 8;
            d[o + 1] = offset & 0xff;
            d = d.concat(subtables[i]);
        }

        return d;
    };

    /**
     * @param {opentype.Table}
     * @returns {number}
     */
    sizeOf.TABLE = function(table) {
        let numBytes = 0;
        const length = table.fields.length;

        for (let i = 0; i < length; i += 1) {
            const field = table.fields[i];
            const sizeOfFunction = sizeOf[field.type];
            check.argument(sizeOfFunction !== undefined, 'No sizeOf function for field type ' + field.type + ' (' + field.name + ')');
            let value = table[field.name];
            if (value === undefined) {
                value = field.value;
            }

            numBytes += sizeOfFunction(value);

            // Subtables take 2 more bytes for offsets.
            if (field.type === 'TABLE') {
                numBytes += 2;
            }
        }

        return numBytes;
    };

    encode.RECORD = encode.TABLE;
    sizeOf.RECORD = sizeOf.TABLE;

    // Merge in a list of bytes.
    encode.LITERAL = function(v) {
        return v;
    };

    sizeOf.LITERAL = function(v) {
        return v.length;
    };

    // Table metadata

    /**
     * @exports opentype.Table
     * @class
     * @param {string} tableName
     * @param {Array} fields
     * @param {Object} options
     * @constructor
     */
    function Table(tableName, fields, options) {
        for (let i = 0; i < fields.length; i += 1) {
            const field = fields[i];
            this[field.name] = field.value;
        }

        this.tableName = tableName;
        this.fields = fields;
        if (options) {
            const optionKeys = Object.keys(options);
            for (let i = 0; i < optionKeys.length; i += 1) {
                const k = optionKeys[i];
                const v = options[k];
                if (this[k] !== undefined) {
                    this[k] = v;
                }
            }
        }
    }

    /**
     * Encodes the table and returns an array of bytes
     * @return {Array}
     */
    Table.prototype.encode = function() {
        return encode.TABLE(this);
    };

    /**
     * Get the size of the table.
     * @return {number}
     */
    Table.prototype.sizeOf = function() {
        return sizeOf.TABLE(this);
    };

    /**
     * @private
     */
    function ushortList(itemName, list, count) {
        if (count === undefined) {
            count = list.length;
        }
        const fields = new Array(list.length + 1);
        fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};
        for (let i = 0; i < list.length; i++) {
            fields[i + 1] = {name: itemName + i, type: 'USHORT', value: list[i]};
        }
        return fields;
    }

    /**
     * @private
     */
    function tableList(itemName, records, itemCallback) {
        const count = records.length;
        const fields = new Array(count + 1);
        fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};
        for (let i = 0; i < count; i++) {
            fields[i + 1] = {name: itemName + i, type: 'TABLE', value: itemCallback(records[i], i)};
        }
        return fields;
    }

    /**
     * @private
     */
    function recordList(itemName, records, itemCallback) {
        const count = records.length;
        let fields = [];
        fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};
        for (let i = 0; i < count; i++) {
            fields = fields.concat(itemCallback(records[i], i));
        }
        return fields;
    }

    // Common Layout Tables

    /**
     * @exports opentype.Coverage
     * @class
     * @param {opentype.Table}
     * @constructor
     * @extends opentype.Table
     */
    function Coverage(coverageTable) {
        if (coverageTable.format === 1) {
            Table.call(this, 'coverageTable',
                [{name: 'coverageFormat', type: 'USHORT', value: 1}]
                .concat(ushortList('glyph', coverageTable.glyphs))
            );
        } else {
            check.assert(false, 'Can\'t create coverage table format 2 yet.');
        }
    }
    Coverage.prototype = Object.create(Table.prototype);
    Coverage.prototype.constructor = Coverage;

    function ScriptList(scriptListTable) {
        Table.call(this, 'scriptListTable',
            recordList('scriptRecord', scriptListTable, function(scriptRecord, i) {
                const script = scriptRecord.script;
                let defaultLangSys = script.defaultLangSys;
                check.assert(!!defaultLangSys, 'Unable to write GSUB: script ' + scriptRecord.tag + ' has no default language system.');
                return [
                    {name: 'scriptTag' + i, type: 'TAG', value: scriptRecord.tag},
                    {name: 'script' + i, type: 'TABLE', value: new Table('scriptTable', [
                        {name: 'defaultLangSys', type: 'TABLE', value: new Table('defaultLangSys', [
                            {name: 'lookupOrder', type: 'USHORT', value: 0},
                            {name: 'reqFeatureIndex', type: 'USHORT', value: defaultLangSys.reqFeatureIndex}]
                            .concat(ushortList('featureIndex', defaultLangSys.featureIndexes)))}
                        ].concat(recordList('langSys', script.langSysRecords, function(langSysRecord, i) {
                            const langSys = langSysRecord.langSys;
                            return [
                                {name: 'langSysTag' + i, type: 'TAG', value: langSysRecord.tag},
                                {name: 'langSys' + i, type: 'TABLE', value: new Table('langSys', [
                                    {name: 'lookupOrder', type: 'USHORT', value: 0},
                                    {name: 'reqFeatureIndex', type: 'USHORT', value: langSys.reqFeatureIndex}
                                    ].concat(ushortList('featureIndex', langSys.featureIndexes)))}
                            ];
                        })))}
                ];
            })
        );
    }
    ScriptList.prototype = Object.create(Table.prototype);
    ScriptList.prototype.constructor = ScriptList;

    /**
     * @exports opentype.FeatureList
     * @class
     * @param {opentype.Table}
     * @constructor
     * @extends opentype.Table
     */
    function FeatureList(featureListTable) {
        Table.call(this, 'featureListTable',
            recordList('featureRecord', featureListTable, function(featureRecord, i) {
                const feature = featureRecord.feature;
                return [
                    {name: 'featureTag' + i, type: 'TAG', value: featureRecord.tag},
                    {name: 'feature' + i, type: 'TABLE', value: new Table('featureTable', [
                        {name: 'featureParams', type: 'USHORT', value: feature.featureParams},
                        ].concat(ushortList('lookupListIndex', feature.lookupListIndexes)))}
                ];
            })
        );
    }
    FeatureList.prototype = Object.create(Table.prototype);
    FeatureList.prototype.constructor = FeatureList;

    /**
     * @exports opentype.LookupList
     * @class
     * @param {opentype.Table}
     * @param {Object}
     * @constructor
     * @extends opentype.Table
     */
    function LookupList(lookupListTable, subtableMakers) {
        Table.call(this, 'lookupListTable', tableList('lookup', lookupListTable, function(lookupTable) {
            let subtableCallback = subtableMakers[lookupTable.lookupType];
            check.assert(!!subtableCallback, 'Unable to write GSUB lookup type ' + lookupTable.lookupType + ' tables.');
            return new Table('lookupTable', [
                {name: 'lookupType', type: 'USHORT', value: lookupTable.lookupType},
                {name: 'lookupFlag', type: 'USHORT', value: lookupTable.lookupFlag}
            ].concat(tableList('subtable', lookupTable.subtables, subtableCallback)));
        }));
    }
    LookupList.prototype = Object.create(Table.prototype);
    LookupList.prototype.constructor = LookupList;

    // Record = same as Table, but inlined (a Table has an offset and its data is further in the stream)
    // Don't use offsets inside Records (probable bug), only in Tables.
    var table = {
        Table,
        Record: Table,
        Coverage,
        ScriptList,
        FeatureList,
        LookupList,
        ushortList,
        tableList,
        recordList,
    };

    // Parsing utility functions

    // Retrieve an unsigned byte from the DataView.
    function getByte(dataView, offset) {
        return dataView.getUint8(offset);
    }

    // Retrieve an unsigned 16-bit short from the DataView.
    // The value is stored in big endian.
    function getUShort(dataView, offset) {
        return dataView.getUint16(offset, false);
    }

    // Retrieve a signed 16-bit short from the DataView.
    // The value is stored in big endian.
    function getShort(dataView, offset) {
        return dataView.getInt16(offset, false);
    }

    // Retrieve an unsigned 32-bit long from the DataView.
    // The value is stored in big endian.
    function getULong(dataView, offset) {
        return dataView.getUint32(offset, false);
    }

    // Retrieve a 32-bit signed fixed-point number (16.16) from the DataView.
    // The value is stored in big endian.
    function getFixed(dataView, offset) {
        const decimal = dataView.getInt16(offset, false);
        const fraction = dataView.getUint16(offset + 2, false);
        return decimal + fraction / 65535;
    }

    // Retrieve a 4-character tag from the DataView.
    // Tags are used to identify tables.
    function getTag$1(dataView, offset) {
        let tag = '';
        for (let i = offset; i < offset + 4; i += 1) {
            tag += String.fromCharCode(dataView.getInt8(i));
        }

        return tag;
    }

    // Retrieve an offset from the DataView.
    // Offsets are 1 to 4 bytes in length, depending on the offSize argument.
    function getOffset(dataView, offset, offSize) {
        let v = 0;
        for (let i = 0; i < offSize; i += 1) {
            v <<= 8;
            v += dataView.getUint8(offset + i);
        }

        return v;
    }

    // Retrieve a number of bytes from start offset to the end offset from the DataView.
    function getBytes(dataView, startOffset, endOffset) {
        const bytes = [];
        for (let i = startOffset; i < endOffset; i += 1) {
            bytes.push(dataView.getUint8(i));
        }

        return bytes;
    }

    // Convert the list of bytes to a string.
    function bytesToString(bytes) {
        let s = '';
        for (let i = 0; i < bytes.length; i += 1) {
            s += String.fromCharCode(bytes[i]);
        }

        return s;
    }

    const typeOffsets = {
        byte: 1,
        uShort: 2,
        short: 2,
        uLong: 4,
        fixed: 4,
        longDateTime: 8,
        tag: 4
    };

    // A stateful parser that changes the offset whenever a value is retrieved.
    // The data is a DataView.
    function Parser(data, offset) {
        this.data = data;
        this.offset = offset;
        this.relativeOffset = 0;
    }

    Parser.prototype.parseByte = function() {
        const v = this.data.getUint8(this.offset + this.relativeOffset);
        this.relativeOffset += 1;
        return v;
    };

    Parser.prototype.parseChar = function() {
        const v = this.data.getInt8(this.offset + this.relativeOffset);
        this.relativeOffset += 1;
        return v;
    };

    Parser.prototype.parseCard8 = Parser.prototype.parseByte;

    Parser.prototype.parseUShort = function() {
        const v = this.data.getUint16(this.offset + this.relativeOffset);
        this.relativeOffset += 2;
        return v;
    };

    Parser.prototype.parseCard16 = Parser.prototype.parseUShort;
    Parser.prototype.parseSID = Parser.prototype.parseUShort;
    Parser.prototype.parseOffset16 = Parser.prototype.parseUShort;

    Parser.prototype.parseShort = function() {
        const v = this.data.getInt16(this.offset + this.relativeOffset);
        this.relativeOffset += 2;
        return v;
    };

    Parser.prototype.parseF2Dot14 = function() {
        const v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;
        this.relativeOffset += 2;
        return v;
    };

    Parser.prototype.parseULong = function() {
        const v = getULong(this.data, this.offset + this.relativeOffset);
        this.relativeOffset += 4;
        return v;
    };

    Parser.prototype.parseOffset32 = Parser.prototype.parseULong;

    Parser.prototype.parseFixed = function() {
        const v = getFixed(this.data, this.offset + this.relativeOffset);
        this.relativeOffset += 4;
        return v;
    };

    Parser.prototype.parseString = function(length) {
        const dataView = this.data;
        const offset = this.offset + this.relativeOffset;
        let string = '';
        this.relativeOffset += length;
        for (let i = 0; i < length; i++) {
            string += String.fromCharCode(dataView.getUint8(offset + i));
        }

        return string;
    };

    Parser.prototype.parseTag = function() {
        return this.parseString(4);
    };

    // LONGDATETIME is a 64-bit integer.
    // JavaScript and unix timestamps traditionally use 32 bits, so we
    // only take the last 32 bits.
    // + Since until 2038 those bits will be filled by zeros we can ignore them.
    Parser.prototype.parseLongDateTime = function() {
        let v = getULong(this.data, this.offset + this.relativeOffset + 4);
        // Subtract seconds between 01/01/1904 and 01/01/1970
        // to convert Apple Mac timestamp to Standard Unix timestamp
        v -= 2082844800;
        this.relativeOffset += 8;
        return v;
    };

    Parser.prototype.parseVersion = function(minorBase) {
        const major = getUShort(this.data, this.offset + this.relativeOffset);

        // How to interpret the minor version is very vague in the spec. 0x5000 is 5, 0x1000 is 1
        // Default returns the correct number if minor = 0xN000 where N is 0-9
        // Set minorBase to 1 for tables that use minor = N where N is 0-9
        const minor = getUShort(this.data, this.offset + this.relativeOffset + 2);
        this.relativeOffset += 4;
        if (minorBase === undefined) minorBase = 0x1000;
        return major + minor / minorBase / 10;
    };

    Parser.prototype.skip = function(type, amount) {
        if (amount === undefined) {
            amount = 1;
        }

        this.relativeOffset += typeOffsets[type] * amount;
    };

    ///// Parsing lists and records ///////////////////////////////

    // Parse a list of 32 bit unsigned integers.
    Parser.prototype.parseULongList = function(count) {
        if (count === undefined) { count = this.parseULong(); }
        const offsets = new Array(count);
        const dataView = this.data;
        let offset = this.offset + this.relativeOffset;
        for (let i = 0; i < count; i++) {
            offsets[i] = dataView.getUint32(offset);
            offset += 4;
        }

        this.relativeOffset += count * 4;
        return offsets;
    };

    // Parse a list of 16 bit unsigned integers. The length of the list can be read on the stream
    // or provided as an argument.
    Parser.prototype.parseOffset16List =
    Parser.prototype.parseUShortList = function(count) {
        if (count === undefined) { count = this.parseUShort(); }
        const offsets = new Array(count);
        const dataView = this.data;
        let offset = this.offset + this.relativeOffset;
        for (let i = 0; i < count; i++) {
            offsets[i] = dataView.getUint16(offset);
            offset += 2;
        }

        this.relativeOffset += count * 2;
        return offsets;
    };

    // Parses a list of 16 bit signed integers.
    Parser.prototype.parseShortList = function(count) {
        const list = new Array(count);
        const dataView = this.data;
        let offset = this.offset + this.relativeOffset;
        for (let i = 0; i < count; i++) {
            list[i] = dataView.getInt16(offset);
            offset += 2;
        }

        this.relativeOffset += count * 2;
        return list;
    };

    // Parses a list of bytes.
    Parser.prototype.parseByteList = function(count) {
        const list = new Array(count);
        const dataView = this.data;
        let offset = this.offset + this.relativeOffset;
        for (let i = 0; i < count; i++) {
            list[i] = dataView.getUint8(offset++);
        }

        this.relativeOffset += count;
        return list;
    };

    /**
     * Parse a list of items.
     * Record count is optional, if omitted it is read from the stream.
     * itemCallback is one of the Parser methods.
     */
    Parser.prototype.parseList = function(count, itemCallback) {
        if (!itemCallback) {
            itemCallback = count;
            count = this.parseUShort();
        }
        const list = new Array(count);
        for (let i = 0; i < count; i++) {
            list[i] = itemCallback.call(this);
        }
        return list;
    };

    Parser.prototype.parseList32 = function(count, itemCallback) {
        if (!itemCallback) {
            itemCallback = count;
            count = this.parseULong();
        }
        const list = new Array(count);
        for (let i = 0; i < count; i++) {
            list[i] = itemCallback.call(this);
        }
        return list;
    };

    /**
     * Parse a list of records.
     * Record count is optional, if omitted it is read from the stream.
     * Example of recordDescription: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }
     */
    Parser.prototype.parseRecordList = function(count, recordDescription) {
        // If the count argument is absent, read it in the stream.
        if (!recordDescription) {
            recordDescription = count;
            count = this.parseUShort();
        }
        const records = new Array(count);
        const fields = Object.keys(recordDescription);
        for (let i = 0; i < count; i++) {
            const rec = {};
            for (let j = 0; j < fields.length; j++) {
                const fieldName = fields[j];
                const fieldType = recordDescription[fieldName];
                rec[fieldName] = fieldType.call(this);
            }
            records[i] = rec;
        }
        return records;
    };

    Parser.prototype.parseRecordList32 = function(count, recordDescription) {
        // If the count argument is absent, read it in the stream.
        if (!recordDescription) {
            recordDescription = count;
            count = this.parseULong();
        }
        const records = new Array(count);
        const fields = Object.keys(recordDescription);
        for (let i = 0; i < count; i++) {
            const rec = {};
            for (let j = 0; j < fields.length; j++) {
                const fieldName = fields[j];
                const fieldType = recordDescription[fieldName];
                rec[fieldName] = fieldType.call(this);
            }
            records[i] = rec;
        }
        return records;
    };

    // Parse a data structure into an object
    // Example of description: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }
    Parser.prototype.parseStruct = function(description) {
        if (typeof description === 'function') {
            return description.call(this);
        } else {
            const fields = Object.keys(description);
            const struct = {};
            for (let j = 0; j < fields.length; j++) {
                const fieldName = fields[j];
                const fieldType = description[fieldName];
                struct[fieldName] = fieldType.call(this);
            }
            return struct;
        }
    };

    /**
     * Parse a GPOS valueRecord
     * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record
     * valueFormat is optional, if omitted it is read from the stream.
     */
    Parser.prototype.parseValueRecord = function(valueFormat) {
        if (valueFormat === undefined) {
            valueFormat = this.parseUShort();
        }
        if (valueFormat === 0) {
            // valueFormat2 in kerning pairs is most often 0
            // in this case return undefined instead of an empty object, to save space
            return;
        }
        const valueRecord = {};

        if (valueFormat & 0x0001) { valueRecord.xPlacement = this.parseShort(); }
        if (valueFormat & 0x0002) { valueRecord.yPlacement = this.parseShort(); }
        if (valueFormat & 0x0004) { valueRecord.xAdvance = this.parseShort(); }
        if (valueFormat & 0x0008) { valueRecord.yAdvance = this.parseShort(); }

        // Device table (non-variable font) / VariationIndex table (variable font) not supported
        // https://docs.microsoft.com/fr-fr/typography/opentype/spec/chapter2#devVarIdxTbls
        if (valueFormat & 0x0010) { valueRecord.xPlaDevice = undefined; this.parseShort(); }
        if (valueFormat & 0x0020) { valueRecord.yPlaDevice = undefined; this.parseShort(); }
        if (valueFormat & 0x0040) { valueRecord.xAdvDevice = undefined; this.parseShort(); }
        if (valueFormat & 0x0080) { valueRecord.yAdvDevice = undefined; this.parseShort(); }

        return valueRecord;
    };

    /**
     * Parse a list of GPOS valueRecords
     * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record
     * valueFormat and valueCount are read from the stream.
     */
    Parser.prototype.parseValueRecordList = function() {
        const valueFormat = this.parseUShort();
        const valueCount = this.parseUShort();
        const values = new Array(valueCount);
        for (let i = 0; i < valueCount; i++) {
            values[i] = this.parseValueRecord(valueFormat);
        }
        return values;
    };

    Parser.prototype.parsePointer = function(description) {
        const structOffset = this.parseOffset16();
        if (structOffset > 0) {
            // NULL offset => return undefined
            return new Parser(this.data, this.offset + structOffset).parseStruct(description);
        }
        return undefined;
    };

    Parser.prototype.parsePointer32 = function(description) {
        const structOffset = this.parseOffset32();
        if (structOffset > 0) {
            // NULL offset => return undefined
            return new Parser(this.data, this.offset + structOffset).parseStruct(description);
        }
        return undefined;
    };

    /**
     * Parse a list of offsets to lists of 16-bit integers,
     * or a list of offsets to lists of offsets to any kind of items.
     * If itemCallback is not provided, a list of list of UShort is assumed.
     * If provided, itemCallback is called on each item and must parse the item.
     * See examples in tables/gsub.js
     */
    Parser.prototype.parseListOfLists = function(itemCallback) {
        const offsets = this.parseOffset16List();
        const count = offsets.length;
        const relativeOffset = this.relativeOffset;
        const list = new Array(count);
        for (let i = 0; i < count; i++) {
            const start = offsets[i];
            if (start === 0) {
                // NULL offset
                // Add i as owned property to list. Convenient with assert.
                list[i] = undefined;
                continue;
            }
            this.relativeOffset = start;
            if (itemCallback) {
                const subOffsets = this.parseOffset16List();
                const subList = new Array(subOffsets.length);
                for (let j = 0; j < subOffsets.length; j++) {
                    this.relativeOffset = start + subOffsets[j];
                    subList[j] = itemCallback.call(this);
                }
                list[i] = subList;
            } else {
                list[i] = this.parseUShortList();
            }
        }
        this.relativeOffset = relativeOffset;
        return list;
    };

    ///// Complex tables parsing //////////////////////////////////

    // Parse a coverage table in a GSUB, GPOS or GDEF table.
    // https://www.microsoft.com/typography/OTSPEC/chapter2.htm
    // parser.offset must point to the start of the table containing the coverage.
    Parser.prototype.parseCoverage = function() {
        const startOffset = this.offset + this.relativeOffset;
        const format = this.parseUShort();
        const count = this.parseUShort();
        if (format === 1) {
            return {
                format: 1,
                glyphs: this.parseUShortList(count)
            };
        } else if (format === 2) {
            const ranges = new Array(count);
            for (let i = 0; i < count; i++) {
                ranges[i] = {
                    start: this.parseUShort(),
                    end: this.parseUShort(),
                    index: this.parseUShort()
                };
            }
            return {
                format: 2,
                ranges: ranges
            };
        }
        throw new Error('0x' + startOffset.toString(16) + ': Coverage format must be 1 or 2.');
    };

    // Parse a Class Definition Table in a GSUB, GPOS or GDEF table.
    // https://www.microsoft.com/typography/OTSPEC/chapter2.htm
    Parser.prototype.parseClassDef = function() {
        const startOffset = this.offset + this.relativeOffset;
        const format = this.parseUShort();
        if (format === 1) {
            return {
                format: 1,
                startGlyph: this.parseUShort(),
                classes: this.parseUShortList()
            };
        } else if (format === 2) {
            return {
                format: 2,
                ranges: this.parseRecordList({
                    start: Parser.uShort,
                    end: Parser.uShort,
                    classId: Parser.uShort
                })
            };
        }
        throw new Error('0x' + startOffset.toString(16) + ': ClassDef format must be 1 or 2.');
    };

    ///// Static methods ///////////////////////////////////
    // These convenience methods can be used as callbacks and should be called with "this" context set to a Parser instance.

    Parser.list = function(count, itemCallback) {
        return function() {
            return this.parseList(count, itemCallback);
        };
    };

    Parser.list32 = function(count, itemCallback) {
        return function() {
            return this.parseList32(count, itemCallback);
        };
    };

    Parser.recordList = function(count, recordDescription) {
        return function() {
            return this.parseRecordList(count, recordDescription);
        };
    };

    Parser.recordList32 = function(count, recordDescription) {
        return function() {
            return this.parseRecordList32(count, recordDescription);
        };
    };

    Parser.pointer = function(description) {
        return function() {
            return this.parsePointer(description);
        };
    };

    Parser.pointer32 = function(description) {
        return function() {
            return this.parsePointer32(description);
        };
    };

    Parser.tag = Parser.prototype.parseTag;
    Parser.byte = Parser.prototype.parseByte;
    Parser.uShort = Parser.offset16 = Parser.prototype.parseUShort;
    Parser.uShortList = Parser.prototype.parseUShortList;
    Parser.uLong = Parser.offset32 = Parser.prototype.parseULong;
    Parser.uLongList = Parser.prototype.parseULongList;
    Parser.struct = Parser.prototype.parseStruct;
    Parser.coverage = Parser.prototype.parseCoverage;
    Parser.classDef = Parser.prototype.parseClassDef;

    ///// Script, Feature, Lookup lists ///////////////////////////////////////////////
    // https://www.microsoft.com/typography/OTSPEC/chapter2.htm

    const langSysTable = {
        reserved: Parser.uShort,
        reqFeatureIndex: Parser.uShort,
        featureIndexes: Parser.uShortList
    };

    Parser.prototype.parseScriptList = function() {
        return this.parsePointer(Parser.recordList({
            tag: Parser.tag,
            script: Parser.pointer({
                defaultLangSys: Parser.pointer(langSysTable),
                langSysRecords: Parser.recordList({
                    tag: Parser.tag,
                    langSys: Parser.pointer(langSysTable)
                })
            })
        })) || [];
    };

    Parser.prototype.parseFeatureList = function() {
        return this.parsePointer(Parser.recordList({
            tag: Parser.tag,
            feature: Parser.pointer({
                featureParams: Parser.offset16,
                lookupListIndexes: Parser.uShortList
            })
        })) || [];
    };

    Parser.prototype.parseLookupList = function(lookupTableParsers) {
        return this.parsePointer(Parser.list(Parser.pointer(function() {
            const lookupType = this.parseUShort();
            check.argument(1 <= lookupType && lookupType <= 9, 'GPOS/GSUB lookup type ' + lookupType + ' unknown.');
            const lookupFlag = this.parseUShort();
            const useMarkFilteringSet = lookupFlag & 0x10;
            return {
                lookupType: lookupType,
                lookupFlag: lookupFlag,
                subtables: this.parseList(Parser.pointer(lookupTableParsers[lookupType])),
                markFilteringSet: useMarkFilteringSet ? this.parseUShort() : undefined
            };
        }))) || [];
    };

    Parser.prototype.parseFeatureVariationsList = function() {
        return this.parsePointer32(function() {
            const majorVersion = this.parseUShort();
            const minorVersion = this.parseUShort();
            check.argument(majorVersion === 1 && minorVersion < 1, 'GPOS/GSUB feature variations table unknown.');
            const featureVariations = this.parseRecordList32({
                conditionSetOffset: Parser.offset32,
                featureTableSubstitutionOffset: Parser.offset32
            });
            return featureVariations;
        }) || [];
    };

    var parse = {
        getByte,
        getCard8: getByte,
        getUShort,
        getCard16: getUShort,
        getShort,
        getULong,
        getFixed,
        getTag: getTag$1,
        getOffset,
        getBytes,
        bytesToString,
        Parser,
    };

    // The `cmap` table stores the mappings from characters to glyphs.

    function parseCmapTableFormat12(cmap, p) {
        //Skip reserved.
        p.parseUShort();

        // Length in bytes of the sub-tables.
        cmap.length = p.parseULong();
        cmap.language = p.parseULong();

        let groupCount;
        cmap.groupCount = groupCount = p.parseULong();
        cmap.glyphIndexMap = {};

        for (let i = 0; i < groupCount; i += 1) {
            const startCharCode = p.parseULong();
            const endCharCode = p.parseULong();
            let startGlyphId = p.parseULong();

            for (let c = startCharCode; c <= endCharCode; c += 1) {
                cmap.glyphIndexMap[c] = startGlyphId;
                startGlyphId++;
            }
        }
    }

    function parseCmapTableFormat4(cmap, p, data, start, offset) {
        // Length in bytes of the sub-tables.
        cmap.length = p.parseUShort();
        cmap.language = p.parseUShort();

        // segCount is stored x 2.
        let segCount;
        cmap.segCount = segCount = p.parseUShort() >> 1;

        // Skip searchRange, entrySelector, rangeShift.
        p.skip('uShort', 3);

        // The "unrolled" mapping from character codes to glyph indices.
        cmap.glyphIndexMap = {};
        const endCountParser = new parse.Parser(data, start + offset + 14);
        const startCountParser = new parse.Parser(data, start + offset + 16 + segCount * 2);
        const idDeltaParser = new parse.Parser(data, start + offset + 16 + segCount * 4);
        const idRangeOffsetParser = new parse.Parser(data, start + offset + 16 + segCount * 6);
        let glyphIndexOffset = start + offset + 16 + segCount * 8;
        for (let i = 0; i < segCount - 1; i += 1) {
            let glyphIndex;
            const endCount = endCountParser.parseUShort();
            const startCount = startCountParser.parseUShort();
            const idDelta = idDeltaParser.parseShort();
            const idRangeOffset = idRangeOffsetParser.parseUShort();
            for (let c = startCount; c <= endCount; c += 1) {
                if (idRangeOffset !== 0) {
                    // The idRangeOffset is relative to the current position in the idRangeOffset array.
                    // Take the current offset in the idRangeOffset array.
                    glyphIndexOffset = (idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2);

                    // Add the value of the idRangeOffset, which will move us into the glyphIndex array.
                    glyphIndexOffset += idRangeOffset;

                    // Then add the character index of the current segment, multiplied by 2 for USHORTs.
                    glyphIndexOffset += (c - startCount) * 2;
                    glyphIndex = parse.getUShort(data, glyphIndexOffset);
                    if (glyphIndex !== 0) {
                        glyphIndex = (glyphIndex + idDelta) & 0xFFFF;
                    }
                } else {
                    glyphIndex = (c + idDelta) & 0xFFFF;
                }

                cmap.glyphIndexMap[c] = glyphIndex;
            }
        }
    }

    // Parse the `cmap` table. This table stores the mappings from characters to glyphs.
    // There are many available formats, but we only support the Windows format 4 and 12.
    // This function returns a `CmapEncoding` object or null if no supported format could be found.
    function parseCmapTable(data, start) {
        const cmap = {};
        cmap.version = parse.getUShort(data, start);
        check.argument(cmap.version === 0, 'cmap table version should be 0.');

        // The cmap table can contain many sub-tables, each with their own format.
        // We're only interested in a "platform 3" table. This is a Windows format.
        cmap.numTables = parse.getUShort(data, start + 2);
        let offset = -1;
        for (let i = cmap.numTables - 1; i >= 0; i -= 1) {
            const platformId = parse.getUShort(data, start + 4 + (i * 8));
            const encodingId = parse.getUShort(data, start + 4 + (i * 8) + 2);
            if (platformId === 3 && (encodingId === 0 || encodingId === 1 || encodingId === 10)) {
                offset = parse.getULong(data, start + 4 + (i * 8) + 4);
                break;
            }
        }

        if (offset === -1) {
            // There is no cmap table in the font that we support.
            throw new Error('No valid cmap sub-tables found.');
        }

        const p = new parse.Parser(data, start + offset);
        cmap.format = p.parseUShort();

        if (cmap.format === 12) {
            parseCmapTableFormat12(cmap, p);
        } else if (cmap.format === 4) {
            parseCmapTableFormat4(cmap, p, data, start, offset);
        } else {
            throw new Error('Only format 4 and 12 cmap tables are supported (found format ' + cmap.format + ').');
        }

        return cmap;
    }

    function addSegment(t, code, glyphIndex) {
        t.segments.push({
            end: code,
            start: code,
            delta: -(code - glyphIndex),
            offset: 0,
            glyphIndex: glyphIndex
        });
    }

    function addTerminatorSegment(t) {
        t.segments.push({
            end: 0xFFFF,
            start: 0xFFFF,
            delta: 1,
            offset: 0
        });
    }

    // Make cmap table, format 4 by default, 12 if needed only
    function makeCmapTable(glyphs) {
        // Plan 0 is the base Unicode Plan but emojis, for example are on another plan, and needs cmap 12 format (with 32bit)
        let isPlan0Only = true;
        let i;

        // Check if we need to add cmap format 12 or if format 4 only is fine
        for (i = glyphs.length - 1; i > 0; i -= 1) {
            const g = glyphs.get(i);
            if (g.unicode > 65535) {
                console.log('Adding CMAP format 12 (needed!)');
                isPlan0Only = false;
                break;
            }
        }

        let cmapTable = [
            {name: 'version', type: 'USHORT', value: 0},
            {name: 'numTables', type: 'USHORT', value: isPlan0Only ? 1 : 2},

            // CMAP 4 header
            {name: 'platformID', type: 'USHORT', value: 3},
            {name: 'encodingID', type: 'USHORT', value: 1},
            {name: 'offset', type: 'ULONG', value: isPlan0Only ? 12 : (12 + 8)}
        ];

        if (!isPlan0Only)
            cmapTable = cmapTable.concat([
                // CMAP 12 header
                {name: 'cmap12PlatformID', type: 'USHORT', value: 3}, // We encode only for PlatformID = 3 (Windows) because it is supported everywhere
                {name: 'cmap12EncodingID', type: 'USHORT', value: 10},
                {name: 'cmap12Offset', type: 'ULONG', value: 0}
            ]);

        cmapTable = cmapTable.concat([
            // CMAP 4 Subtable
            {name: 'format', type: 'USHORT', value: 4},
            {name: 'cmap4Length', type: 'USHORT', value: 0},
            {name: 'language', type: 'USHORT', value: 0},
            {name: 'segCountX2', type: 'USHORT', value: 0},
            {name: 'searchRange', type: 'USHORT', value: 0},
            {name: 'entrySelector', type: 'USHORT', value: 0},
            {name: 'rangeShift', type: 'USHORT', value: 0}
        ]);

        const t = new table.Table('cmap', cmapTable);

        t.segments = [];
        for (i = 0; i < glyphs.length; i += 1) {
            const glyph = glyphs.get(i);
            for (let j = 0; j < glyph.unicodes.length; j += 1) {
                addSegment(t, glyph.unicodes[j], i);
            }

            t.segments = t.segments.sort(function (a, b) {
                return a.start - b.start;
            });
        }

        addTerminatorSegment(t);

        const segCount = t.segments.length;
        let segCountToRemove = 0;

        // CMAP 4
        // Set up parallel segment arrays.
        let endCounts = [];
        let startCounts = [];
        let idDeltas = [];
        let idRangeOffsets = [];
        let glyphIds = [];

        // CMAP 12
        let cmap12Groups = [];

        // Reminder this loop is not following the specification at 100%
        // The specification -> find suites of characters and make a group
        // Here we're doing one group for each letter
        // Doing as the spec can save 8 times (or more) space
        for (i = 0; i < segCount; i += 1) {
            const segment = t.segments[i];

            // CMAP 4
            if (segment.end <= 65535 && segment.start <= 65535) {
                endCounts = endCounts.concat({name: 'end_' + i, type: 'USHORT', value: segment.end});
                startCounts = startCounts.concat({name: 'start_' + i, type: 'USHORT', value: segment.start});
                idDeltas = idDeltas.concat({name: 'idDelta_' + i, type: 'SHORT', value: segment.delta});
                idRangeOffsets = idRangeOffsets.concat({name: 'idRangeOffset_' + i, type: 'USHORT', value: segment.offset});
                if (segment.glyphId !== undefined) {
                    glyphIds = glyphIds.concat({name: 'glyph_' + i, type: 'USHORT', value: segment.glyphId});
                }
            } else {
                // Skip Unicode > 65535 (16bit unsigned max) for CMAP 4, will be added in CMAP 12
                segCountToRemove += 1;
            }

            // CMAP 12
            // Skip Terminator Segment
            if (!isPlan0Only && segment.glyphIndex !== undefined) {
                cmap12Groups = cmap12Groups.concat({name: 'cmap12Start_' + i, type: 'ULONG', value: segment.start});
                cmap12Groups = cmap12Groups.concat({name: 'cmap12End_' + i, type: 'ULONG', value: segment.end});
                cmap12Groups = cmap12Groups.concat({name: 'cmap12Glyph_' + i, type: 'ULONG', value: segment.glyphIndex});
            }
        }

        // CMAP 4 Subtable
        t.segCountX2 = (segCount - segCountToRemove) * 2;
        t.searchRange = Math.pow(2, Math.floor(Math.log((segCount - segCountToRemove)) / Math.log(2))) * 2;
        t.entrySelector = Math.log(t.searchRange / 2) / Math.log(2);
        t.rangeShift = t.segCountX2 - t.searchRange;

        t.fields = t.fields.concat(endCounts);
        t.fields.push({name: 'reservedPad', type: 'USHORT', value: 0});
        t.fields = t.fields.concat(startCounts);
        t.fields = t.fields.concat(idDeltas);
        t.fields = t.fields.concat(idRangeOffsets);
        t.fields = t.fields.concat(glyphIds);

        t.cmap4Length = 14 + // Subtable header
            endCounts.length * 2 +
            2 + // reservedPad
            startCounts.length * 2 +
            idDeltas.length * 2 +
            idRangeOffsets.length * 2 +
            glyphIds.length * 2;

        if (!isPlan0Only) {
            // CMAP 12 Subtable
            const cmap12Length = 16 + // Subtable header
                cmap12Groups.length * 4;

            t.cmap12Offset = 12 + (2 * 2) + 4 + t.cmap4Length;
            t.fields = t.fields.concat([
                {name: 'cmap12Format', type: 'USHORT', value: 12},
                {name: 'cmap12Reserved', type: 'USHORT', value: 0},
                {name: 'cmap12Length', type: 'ULONG', value: cmap12Length},
                {name: 'cmap12Language', type: 'ULONG', value: 0},
                {name: 'cmap12nGroups', type: 'ULONG', value: cmap12Groups.length / 3}
            ]);

            t.fields = t.fields.concat(cmap12Groups);
        }

        return t;
    }

    var cmap = { parse: parseCmapTable, make: makeCmapTable };

    // Glyph encoding

    const cffStandardStrings = [
        '.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',
        'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',
        'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',
        'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
        'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',
        'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
        'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling',
        'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft',
        'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph',
        'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand',
        'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring',
        'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE',
        'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu',
        'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn',
        'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright',
        'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex',
        'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex',
        'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute',
        'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute',
        'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute',
        'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave',
        'yacute', 'ydieresis', 'zcaron', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior',
        'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', '266 ff', 'onedotenleader',
        'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle',
        'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'commasuperior', 'threequartersemdash', 'periodsuperior',
        'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior',
        'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'ffi', 'ffl',
        'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',
        'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',
        'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',
        'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall',
        'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall',
        'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall',
        'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds',
        'zerosuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior',
        'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior',
        'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior',
        'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall',
        'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall',
        'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall',
        'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall',
        'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall', '001.000',
        '001.001', '001.002', '001.003', 'Black', 'Bold', 'Book', 'Light', 'Medium', 'Regular', 'Roman', 'Semibold'];

    const cffStandardEncoding = [
        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
        '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',
        'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',
        'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',
        'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
        'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',
        'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
        'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '',
        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
        'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle',
        'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger',
        'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright',
        'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde',
        'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron',
        'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '',
        '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '',
        'lslash', 'oslash', 'oe', 'germandbls'];

    const cffExpertEncoding = [
        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
        '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior',
        'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader',
        'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle',
        'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon',
        'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior',
        'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior',
        'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl',
        'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',
        'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',
        'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',
        'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '',
        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
        'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall',
        'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior',
        '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters',
        'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '',
        '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',
        'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior',
        'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior',
        'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall',
        'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall',
        'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall',
        'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall',
        'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall',
        'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];

    const standardNames = [
        '.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent',
        'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash',
        'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less',
        'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
        'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright',
        'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
        'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde',
        'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave',
        'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis',
        'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis',
        'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section',
        'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal',
        'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation',
        'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown',
        'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright',
        'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft',
        'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction',
        'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase',
        'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute',
        'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex',
        'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut',
        'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth',
        'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior',
        'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla',
        'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];

    /**
     * This is the encoding used for fonts created from scratch.
     * It loops through all glyphs and finds the appropriate unicode value.
     * Since it's linear time, other encodings will be faster.
     * @exports opentype.DefaultEncoding
     * @class
     * @constructor
     * @param {opentype.Font}
     */
    function DefaultEncoding(font) {
        this.font = font;
    }

    DefaultEncoding.prototype.charToGlyphIndex = function(c) {
        const code = c.charCodeAt(0);
        const glyphs = this.font.glyphs;
        if (glyphs) {
            for (let i = 0; i < glyphs.length; i += 1) {
                const glyph = glyphs.get(i);
                for (let j = 0; j < glyph.unicodes.length; j += 1) {
                    if (glyph.unicodes[j] === code) {
                        return i;
                    }
                }
            }
        }
        return null;
    };

    /**
     * @exports opentype.CmapEncoding
     * @class
     * @constructor
     * @param {Object} cmap - a object with the cmap encoded data
     */
    function CmapEncoding(cmap) {
        this.cmap = cmap;
    }

    /**
     * @param  {string} c - the character
     * @return {number} The glyph index.
     */
    CmapEncoding.prototype.charToGlyphIndex = function(c) {
        return this.cmap.glyphIndexMap[c.charCodeAt(0)] || 0;
    };

    /**
     * @exports opentype.CffEncoding
     * @class
     * @constructor
     * @param {string} encoding - The encoding
     * @param {Array} charset - The character set.
     */
    function CffEncoding(encoding, charset) {
        this.encoding = encoding;
        this.charset = charset;
    }

    /**
     * @param  {string} s - The character
     * @return {number} The index.
     */
    CffEncoding.prototype.charToGlyphIndex = function(s) {
        const code = s.charCodeAt(0);
        const charName = this.encoding[code];
        return this.charset.indexOf(charName);
    };

    /**
     * @exports opentype.GlyphNames
     * @class
     * @constructor
     * @param {Object} post
     */
    function GlyphNames(post) {
        switch (post.version) {
            case 1:
                this.names = standardNames.slice();
                break;
            case 2:
                this.names = new Array(post.numberOfGlyphs);
                for (let i = 0; i < post.numberOfGlyphs; i++) {
                    if (post.glyphNameIndex[i] < standardNames.length) {
                        this.names[i] = standardNames[post.glyphNameIndex[i]];
                    } else {
                        this.names[i] = post.names[post.glyphNameIndex[i] - standardNames.length];
                    }
                }

                break;
            case 2.5:
                this.names = new Array(post.numberOfGlyphs);
                for (let i = 0; i < post.numberOfGlyphs; i++) {
                    this.names[i] = standardNames[i + post.glyphNameIndex[i]];
                }

                break;
            case 3:
                this.names = [];
                break;
            default:
                this.names = [];
                break;
        }
    }

    /**
     * Gets the index of a glyph by name.
     * @param  {string} name - The glyph name
     * @return {number} The index
     */
    GlyphNames.prototype.nameToGlyphIndex = function(name) {
        return this.names.indexOf(name);
    };

    /**
     * @param  {number} gid
     * @return {string}
     */
    GlyphNames.prototype.glyphIndexToName = function(gid) {
        return this.names[gid];
    };

    /**
     * @alias opentype.addGlyphNames
     * @param {opentype.Font}
     */
    function addGlyphNames(font) {
        let glyph;
        const glyphIndexMap = font.tables.cmap.glyphIndexMap;
        const charCodes = Object.keys(glyphIndexMap);

        for (let i = 0; i < charCodes.length; i += 1) {
            const c = charCodes[i];
            const glyphIndex = glyphIndexMap[c];
            glyph = font.glyphs.get(glyphIndex);
            glyph.addUnicode(parseInt(c));
        }

        for (let i = 0; i < font.glyphs.length; i += 1) {
            glyph = font.glyphs.get(i);
            if (font.cffEncoding) {
                if (font.isCIDFont) {
                    glyph.name = 'gid' + i;
                } else {
                    glyph.name = font.cffEncoding.charset[i];
                }
            } else if (font.glyphNames.names) {
                glyph.name = font.glyphNames.glyphIndexToName(i);
            }
        }
    }

    // Drawing utility functions.

    // Draw a line on the given context from point `x1,y1` to point `x2,y2`.
    function line(ctx, x1, y1, x2, y2) {
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.stroke();
    }

    var draw = { line };

    // The `glyf` table describes the glyphs in TrueType outline format.

    // Parse the coordinate data for a glyph.
    function parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {
        let v;
        if ((flag & shortVectorBitMask) > 0) {
            // The coordinate is 1 byte long.
            v = p.parseByte();
            // The `same` bit is re-used for short values to signify the sign of the value.
            if ((flag & sameBitMask) === 0) {
                v = -v;
            }

            v = previousValue + v;
        } else {
            //  The coordinate is 2 bytes long.
            // If the `same` bit is set, the coordinate is the same as the previous coordinate.
            if ((flag & sameBitMask) > 0) {
                v = previousValue;
            } else {
                // Parse the coordinate as a signed 16-bit delta value.
                v = previousValue + p.parseShort();
            }
        }

        return v;
    }

    // Parse a TrueType glyph.
    function parseGlyph(glyph, data, start) {
        const p = new parse.Parser(data, start);
        glyph.numberOfContours = p.parseShort();
        glyph._xMin = p.parseShort();
        glyph._yMin = p.parseShort();
        glyph._xMax = p.parseShort();
        glyph._yMax = p.parseShort();
        let flags;
        let flag;

        if (glyph.numberOfContours > 0) {
            // This glyph is not a composite.
            const endPointIndices = glyph.endPointIndices = [];
            for (let i = 0; i < glyph.numberOfContours; i += 1) {
                endPointIndices.push(p.parseUShort());
            }

            glyph.instructionLength = p.parseUShort();
            glyph.instructions = [];
            for (let i = 0; i < glyph.instructionLength; i += 1) {
                glyph.instructions.push(p.parseByte());
            }

            const numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;
            flags = [];
            for (let i = 0; i < numberOfCoordinates; i += 1) {
                flag = p.parseByte();
                flags.push(flag);
                // If bit 3 is set, we repeat this flag n times, where n is the next byte.
                if ((flag & 8) > 0) {
                    const repeatCount = p.parseByte();
                    for (let j = 0; j < repeatCount; j += 1) {
                        flags.push(flag);
                        i += 1;
                    }
                }
            }

            check.argument(flags.length === numberOfCoordinates, 'Bad flags.');

            if (endPointIndices.length > 0) {
                const points = [];
                let point;
                // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.
                if (numberOfCoordinates > 0) {
                    for (let i = 0; i < numberOfCoordinates; i += 1) {
                        flag = flags[i];
                        point = {};
                        point.onCurve = !!(flag & 1);
                        point.lastPointOfContour = endPointIndices.indexOf(i) >= 0;
                        points.push(point);
                    }

                    let px = 0;
                    for (let i = 0; i < numberOfCoordinates; i += 1) {
                        flag = flags[i];
                        point = points[i];
                        point.x = parseGlyphCoordinate(p, flag, px, 2, 16);
                        px = point.x;
                    }

                    let py = 0;
                    for (let i = 0; i < numberOfCoordinates; i += 1) {
                        flag = flags[i];
                        point = points[i];
                        point.y = parseGlyphCoordinate(p, flag, py, 4, 32);
                        py = point.y;
                    }
                }

                glyph.points = points;
            } else {
                glyph.points = [];
            }
        } else if (glyph.numberOfContours === 0) {
            glyph.points = [];
        } else {
            glyph.isComposite = true;
            glyph.points = [];
            glyph.components = [];
            let moreComponents = true;
            while (moreComponents) {
                flags = p.parseUShort();
                const component = {
                    glyphIndex: p.parseUShort(),
                    xScale: 1,
                    scale01: 0,
                    scale10: 0,
                    yScale: 1,
                    dx: 0,
                    dy: 0
                };
                if ((flags & 1) > 0) {
                    // The arguments are words
                    if ((flags & 2) > 0) {
                        // values are offset
                        component.dx = p.parseShort();
                        component.dy = p.parseShort();
                    } else {
                        // values are matched points
                        component.matchedPoints = [p.parseUShort(), p.parseUShort()];
                    }

                } else {
                    // The arguments are bytes
                    if ((flags & 2) > 0) {
                        // values are offset
                        component.dx = p.parseChar();
                        component.dy = p.parseChar();
                    } else {
                        // values are matched points
                        component.matchedPoints = [p.parseByte(), p.parseByte()];
                    }
                }

                if ((flags & 8) > 0) {
                    // We have a scale
                    component.xScale = component.yScale = p.parseF2Dot14();
                } else if ((flags & 64) > 0) {
                    // We have an X / Y scale
                    component.xScale = p.parseF2Dot14();
                    component.yScale = p.parseF2Dot14();
                } else if ((flags & 128) > 0) {
                    // We have a 2x2 transformation
                    component.xScale = p.parseF2Dot14();
                    component.scale01 = p.parseF2Dot14();
                    component.scale10 = p.parseF2Dot14();
                    component.yScale = p.parseF2Dot14();
                }

                glyph.components.push(component);
                moreComponents = !!(flags & 32);
            }
            if (flags & 0x100) {
                // We have instructions
                glyph.instructionLength = p.parseUShort();
                glyph.instructions = [];
                for (let i = 0; i < glyph.instructionLength; i += 1) {
                    glyph.instructions.push(p.parseByte());
                }
            }
        }
    }

    // Transform an array of points and return a new array.
    function transformPoints(points, transform) {
        const newPoints = [];
        for (let i = 0; i < points.length; i += 1) {
            const pt = points[i];
            const newPt = {
                x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,
                y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,
                onCurve: pt.onCurve,
                lastPointOfContour: pt.lastPointOfContour
            };
            newPoints.push(newPt);
        }

        return newPoints;
    }

    function getContours(points) {
        const contours = [];
        let currentContour = [];
        for (let i = 0; i < points.length; i += 1) {
            const pt = points[i];
            currentContour.push(pt);
            if (pt.lastPointOfContour) {
                contours.push(currentContour);
                currentContour = [];
            }
        }

        check.argument(currentContour.length === 0, 'There are still points left in the current contour.');
        return contours;
    }

    // Convert the TrueType glyph outline to a Path.
    function getPath(points) {
        const p = new Path();
        if (!points) {
            return p;
        }

        const contours = getContours(points);

        for (let contourIndex = 0; contourIndex < contours.length; ++contourIndex) {
            const contour = contours[contourIndex];

            let prev = null;
            let curr = contour[contour.length - 1];
            let next = contour[0];

            if (curr.onCurve) {
                p.moveTo(curr.x, curr.y);
            } else {
                if (next.onCurve) {
                    p.moveTo(next.x, next.y);
                } else {
                    // If both first and last points are off-curve, start at their middle.
                    const start = {x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5};
                    p.moveTo(start.x, start.y);
                }
            }

            for (let i = 0; i < contour.length; ++i) {
                prev = curr;
                curr = next;
                next = contour[(i + 1) % contour.length];

                if (curr.onCurve) {
                    // This is a straight line.
                    p.lineTo(curr.x, curr.y);
                } else {
                    let prev2 = prev;
                    let next2 = next;

                    if (!prev.onCurve) {
                        prev2 = { x: (curr.x + prev.x) * 0.5, y: (curr.y + prev.y) * 0.5 };
                        p.lineTo(prev2.x, prev2.y);
                    }

                    if (!next.onCurve) {
                        next2 = { x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5 };
                    }

                    p.lineTo(prev2.x, prev2.y);
                    p.quadraticCurveTo(curr.x, curr.y, next2.x, next2.y);
                }
            }

            p.closePath();
        }
        return p;
    }

    function buildPath(glyphs, glyph) {
        if (glyph.isComposite) {
            for (let j = 0; j < glyph.components.length; j += 1) {
                const component = glyph.components[j];
                const componentGlyph = glyphs.get(component.glyphIndex);
                // Force the ttfGlyphLoader to parse the glyph.
                componentGlyph.getPath();
                if (componentGlyph.points) {
                    let transformedPoints;
                    if (component.matchedPoints === undefined) {
                        // component positioned by offset
                        transformedPoints = transformPoints(componentGlyph.points, component);
                    } else {
                        // component positioned by matched points
                        if ((component.matchedPoints[0] > glyph.points.length - 1) ||
                            (component.matchedPoints[1] > componentGlyph.points.length - 1)) {
                            throw Error('Matched points out of range in ' + glyph.name);
                        }
                        const firstPt = glyph.points[component.matchedPoints[0]];
                        let secondPt = componentGlyph.points[component.matchedPoints[1]];
                        const transform = {
                            xScale: component.xScale, scale01: component.scale01,
                            scale10: component.scale10, yScale: component.yScale,
                            dx: 0, dy: 0
                        };
                        secondPt = transformPoints([secondPt], transform)[0];
                        transform.dx = firstPt.x - secondPt.x;
                        transform.dy = firstPt.y - secondPt.y;
                        transformedPoints = transformPoints(componentGlyph.points, transform);
                    }
                    glyph.points = glyph.points.concat(transformedPoints);
                }
            }
        }

        return getPath(glyph.points);
    }

    // Parse all the glyphs according to the offsets from the `loca` table.
    function parseGlyfTable(data, start, loca, font) {
        const glyphs = new glyphset.GlyphSet(font);

        // The last element of the loca table is invalid.
        for (let i = 0; i < loca.length - 1; i += 1) {
            const offset = loca[i];
            const nextOffset = loca[i + 1];
            if (offset !== nextOffset) {
                glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));
            } else {
                glyphs.push(i, glyphset.glyphLoader(font, i));
            }
        }

        return glyphs;
    }

    var glyf = { getPath, parse: parseGlyfTable };

    // The Glyph object

    function getPathDefinition(glyph, path) {
        let _path = path || new Path();
        return {
            configurable: true,

            get: function() {
                if (typeof _path === 'function') {
                    _path = _path();
                }

                return _path;
            },

            set: function(p) {
                _path = p;
            }
        };
    }
    /**
     * @typedef GlyphOptions
     * @type Object
     * @property {string} [name] - The glyph name
     * @property {number} [unicode]
     * @property {Array} [unicodes]
     * @property {number} [xMin]
     * @property {number} [yMin]
     * @property {number} [xMax]
     * @property {number} [yMax]
     * @property {number} [advanceWidth]
     */

    // A Glyph is an individual mark that often corresponds to a character.
    // Some glyphs, such as ligatures, are a combination of many characters.
    // Glyphs are the basic building blocks of a font.
    //
    // The `Glyph` class contains utility methods for drawing the path and its points.
    /**
     * @exports opentype.Glyph
     * @class
     * @param {GlyphOptions}
     * @constructor
     */
    function Glyph(options) {
        // By putting all the code on a prototype function (which is only declared once)
        // we reduce the memory requirements for larger fonts by some 2%
        this.bindConstructorValues(options);
    }

    /**
     * @param  {GlyphOptions}
     */
    Glyph.prototype.bindConstructorValues = function(options) {
        this.index = options.index || 0;

        // These three values cannot be deferred for memory optimization:
        this.name = options.name || null;
        this.unicode = options.unicode || undefined;
        this.unicodes = options.unicodes || options.unicode !== undefined ? [options.unicode] : [];

        // But by binding these values only when necessary, we reduce can
        // the memory requirements by almost 3% for larger fonts.
        if (options.xMin) {
            this.xMin = options.xMin;
        }

        if (options.yMin) {
            this.yMin = options.yMin;
        }

        if (options.xMax) {
            this.xMax = options.xMax;
        }

        if (options.yMax) {
            this.yMax = options.yMax;
        }

        if (options.advanceWidth) {
            this.advanceWidth = options.advanceWidth;
        }

        // The path for a glyph is the most memory intensive, and is bound as a value
        // with a getter/setter to ensure we actually do path parsing only once the
        // path is actually needed by anything.
        Object.defineProperty(this, 'path', getPathDefinition(this, options.path));
    };

    /**
     * @param {number}
     */
    Glyph.prototype.addUnicode = function(unicode) {
        if (this.unicodes.length === 0) {
            this.unicode = unicode;
        }

        this.unicodes.push(unicode);
    };

    /**
     * Calculate the minimum bounding box for this glyph.
     * @return {opentype.BoundingBox}
     */
    Glyph.prototype.getBoundingBox = function() {
        return this.path.getBoundingBox();
    };

    /**
     * Convert the glyph to a Path we can draw on a drawing context.
     * @param  {number} [x=0] - Horizontal position of the beginning of the text.
     * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
     * @param  {Object=} options - xScale, yScale to stretch the glyph.
     * @param  {opentype.Font} if hinting is to be used, the font
     * @return {opentype.Path}
     */
    Glyph.prototype.getPath = function(x, y, fontSize, options, font) {
        x = x !== undefined ? x : 0;
        y = y !== undefined ? y : 0;
        fontSize = fontSize !== undefined ? fontSize : 72;
        let commands;
        let hPoints;
        if (!options) options = { };
        let xScale = options.xScale;
        let yScale = options.yScale;

        if (options.hinting && font && font.hinting) {
            // in case of hinting, the hinting engine takes care
            // of scaling the points (not the path) before hinting.
            hPoints = this.path && font.hinting.exec(this, fontSize);
            // in case the hinting engine failed hPoints is undefined
            // and thus reverts to plain rending
        }

        if (hPoints) {
            commands = glyf.getPath(hPoints).commands;
            x = Math.round(x);
            y = Math.round(y);
            // TODO in case of hinting xyScaling is not yet supported
            xScale = yScale = 1;
        } else {
            commands = this.path.commands;
            const scale = 1 / this.path.unitsPerEm * fontSize;
            if (xScale === undefined) xScale = scale;
            if (yScale === undefined) yScale = scale;
        }

        const p = new Path();
        for (let i = 0; i < commands.length; i += 1) {
            const cmd = commands[i];
            if (cmd.type === 'M') {
                p.moveTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));
            } else if (cmd.type === 'L') {
                p.lineTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));
            } else if (cmd.type === 'Q') {
                p.quadraticCurveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),
                                   x + (cmd.x * xScale), y + (-cmd.y * yScale));
            } else if (cmd.type === 'C') {
                p.curveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),
                          x + (cmd.x2 * xScale), y + (-cmd.y2 * yScale),
                          x + (cmd.x * xScale), y + (-cmd.y * yScale));
            } else if (cmd.type === 'Z') {
                p.closePath();
            }
        }

        return p;
    };

    /**
     * Split the glyph into contours.
     * This function is here for backwards compatibility, and to
     * provide raw access to the TrueType glyph outlines.
     * @return {Array}
     */
    Glyph.prototype.getContours = function() {
        if (this.points === undefined) {
            return [];
        }

        const contours = [];
        let currentContour = [];
        for (let i = 0; i < this.points.length; i += 1) {
            const pt = this.points[i];
            currentContour.push(pt);
            if (pt.lastPointOfContour) {
                contours.push(currentContour);
                currentContour = [];
            }
        }

        check.argument(currentContour.length === 0, 'There are still points left in the current contour.');
        return contours;
    };

    /**
     * Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.
     * @return {Object}
     */
    Glyph.prototype.getMetrics = function() {
        const commands = this.path.commands;
        const xCoords = [];
        const yCoords = [];
        for (let i = 0; i < commands.length; i += 1) {
            const cmd = commands[i];
            if (cmd.type !== 'Z') {
                xCoords.push(cmd.x);
                yCoords.push(cmd.y);
            }

            if (cmd.type === 'Q' || cmd.type === 'C') {
                xCoords.push(cmd.x1);
                yCoords.push(cmd.y1);
            }

            if (cmd.type === 'C') {
                xCoords.push(cmd.x2);
                yCoords.push(cmd.y2);
            }
        }

        const metrics = {
            xMin: Math.min.apply(null, xCoords),
            yMin: Math.min.apply(null, yCoords),
            xMax: Math.max.apply(null, xCoords),
            yMax: Math.max.apply(null, yCoords),
            leftSideBearing: this.leftSideBearing
        };

        if (!isFinite(metrics.xMin)) {
            metrics.xMin = 0;
        }

        if (!isFinite(metrics.xMax)) {
            metrics.xMax = this.advanceWidth;
        }

        if (!isFinite(metrics.yMin)) {
            metrics.yMin = 0;
        }

        if (!isFinite(metrics.yMax)) {
            metrics.yMax = 0;
        }

        metrics.rightSideBearing = this.advanceWidth - metrics.leftSideBearing - (metrics.xMax - metrics.xMin);
        return metrics;
    };

    /**
     * Draw the glyph on the given context.
     * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
     * @param  {number} [x=0] - Horizontal position of the beginning of the text.
     * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
     * @param  {Object=} options - xScale, yScale to stretch the glyph.
     */
    Glyph.prototype.draw = function(ctx, x, y, fontSize, options) {
        this.getPath(x, y, fontSize, options).draw(ctx);
    };

    /**
     * Draw the points of the glyph.
     * On-curve points will be drawn in blue, off-curve points will be drawn in red.
     * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
     * @param  {number} [x=0] - Horizontal position of the beginning of the text.
     * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
     */
    Glyph.prototype.drawPoints = function(ctx, x, y, fontSize) {
        function drawCircles(l, x, y, scale) {
            const PI_SQ = Math.PI * 2;
            ctx.beginPath();
            for (let j = 0; j < l.length; j += 1) {
                ctx.moveTo(x + (l[j].x * scale), y + (l[j].y * scale));
                ctx.arc(x + (l[j].x * scale), y + (l[j].y * scale), 2, 0, PI_SQ, false);
            }

            ctx.closePath();
            ctx.fill();
        }

        x = x !== undefined ? x : 0;
        y = y !== undefined ? y : 0;
        fontSize = fontSize !== undefined ? fontSize : 24;
        const scale = 1 / this.path.unitsPerEm * fontSize;

        const blueCircles = [];
        const redCircles = [];
        const path = this.path;
        for (let i = 0; i < path.commands.length; i += 1) {
            const cmd = path.commands[i];
            if (cmd.x !== undefined) {
                blueCircles.push({x: cmd.x, y: -cmd.y});
            }

            if (cmd.x1 !== undefined) {
                redCircles.push({x: cmd.x1, y: -cmd.y1});
            }

            if (cmd.x2 !== undefined) {
                redCircles.push({x: cmd.x2, y: -cmd.y2});
            }
        }

        ctx.fillStyle = 'blue';
        drawCircles(blueCircles, x, y, scale);
        ctx.fillStyle = 'red';
        drawCircles(redCircles, x, y, scale);
    };

    /**
     * Draw lines indicating important font measurements.
     * Black lines indicate the origin of the coordinate system (point 0,0).
     * Blue lines indicate the glyph bounding box.
     * Green line indicates the advance width of the glyph.
     * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
     * @param  {number} [x=0] - Horizontal position of the beginning of the text.
     * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
     */
    Glyph.prototype.drawMetrics = function(ctx, x, y, fontSize) {
        let scale;
        x = x !== undefined ? x : 0;
        y = y !== undefined ? y : 0;
        fontSize = fontSize !== undefined ? fontSize : 24;
        scale = 1 / this.path.unitsPerEm * fontSize;
        ctx.lineWidth = 1;

        // Draw the origin
        ctx.strokeStyle = 'black';
        draw.line(ctx, x, -10000, x, 10000);
        draw.line(ctx, -10000, y, 10000, y);

        // This code is here due to memory optimization: by not using
        // defaults in the constructor, we save a notable amount of memory.
        const xMin = this.xMin || 0;
        let yMin = this.yMin || 0;
        const xMax = this.xMax || 0;
        let yMax = this.yMax || 0;
        const advanceWidth = this.advanceWidth || 0;

        // Draw the glyph box
        ctx.strokeStyle = 'blue';
        draw.line(ctx, x + (xMin * scale), -10000, x + (xMin * scale), 10000);
        draw.line(ctx, x + (xMax * scale), -10000, x + (xMax * scale), 10000);
        draw.line(ctx, -10000, y + (-yMin * scale), 10000, y + (-yMin * scale));
        draw.line(ctx, -10000, y + (-yMax * scale), 10000, y + (-yMax * scale));

        // Draw the advance width
        ctx.strokeStyle = 'green';
        draw.line(ctx, x + (advanceWidth * scale), -10000, x + (advanceWidth * scale), 10000);
    };

    // The GlyphSet object

    // Define a property on the glyph that depends on the path being loaded.
    function defineDependentProperty(glyph, externalName, internalName) {
        Object.defineProperty(glyph, externalName, {
            get: function() {
                // Request the path property to make sure the path is loaded.
                glyph.path; // jshint ignore:line
                return glyph[internalName];
            },
            set: function(newValue) {
                glyph[internalName] = newValue;
            },
            enumerable: true,
            configurable: true
        });
    }

    /**
     * A GlyphSet represents all glyphs available in the font, but modelled using
     * a deferred glyph loader, for retrieving glyphs only once they are absolutely
     * necessary, to keep the memory footprint down.
     * @exports opentype.GlyphSet
     * @class
     * @param {opentype.Font}
     * @param {Array}
     */
    function GlyphSet(font, glyphs) {
        this.font = font;
        this.glyphs = {};
        if (Array.isArray(glyphs)) {
            for (let i = 0; i < glyphs.length; i++) {
                this.glyphs[i] = glyphs[i];
            }
        }

        this.length = (glyphs && glyphs.length) || 0;
    }

    /**
     * @param  {number} index
     * @return {opentype.Glyph}
     */
    GlyphSet.prototype.get = function(index) {
        if (typeof this.glyphs[index] === 'function') {
            this.glyphs[index] = this.glyphs[index]();
        }

        return this.glyphs[index];
    };

    /**
     * @param  {number} index
     * @param  {Object}
     */
    GlyphSet.prototype.push = function(index, loader) {
        this.glyphs[index] = loader;
        this.length++;
    };

    /**
     * @alias opentype.glyphLoader
     * @param  {opentype.Font} font
     * @param  {number} index
     * @return {opentype.Glyph}
     */
    function glyphLoader(font, index) {
        return new Glyph({index: index, font: font});
    }

    /**
     * Generate a stub glyph that can be filled with all metadata *except*
     * the "points" and "path" properties, which must be loaded only once
     * the glyph's path is actually requested for text shaping.
     * @alias opentype.ttfGlyphLoader
     * @param  {opentype.Font} font
     * @param  {number} index
     * @param  {Function} parseGlyph
     * @param  {Object} data
     * @param  {number} position
     * @param  {Function} buildPath
     * @return {opentype.Glyph}
     */
    function ttfGlyphLoader(font, index, parseGlyph, data, position, buildPath) {
        return function() {
            const glyph = new Glyph({index: index, font: font});

            glyph.path = function() {
                parseGlyph(glyph, data, position);
                const path = buildPath(font.glyphs, glyph);
                path.unitsPerEm = font.unitsPerEm;
                return path;
            };

            defineDependentProperty(glyph, 'xMin', '_xMin');
            defineDependentProperty(glyph, 'xMax', '_xMax');
            defineDependentProperty(glyph, 'yMin', '_yMin');
            defineDependentProperty(glyph, 'yMax', '_yMax');

            return glyph;
        };
    }
    /**
     * @alias opentype.cffGlyphLoader
     * @param  {opentype.Font} font
     * @param  {number} index
     * @param  {Function} parseCFFCharstring
     * @param  {string} charstring
     * @return {opentype.Glyph}
     */
    function cffGlyphLoader(font, index, parseCFFCharstring, charstring) {
        return function() {
            const glyph = new Glyph({index: index, font: font});

            glyph.path = function() {
                const path = parseCFFCharstring(font, glyph, charstring);
                path.unitsPerEm = font.unitsPerEm;
                return path;
            };

            return glyph;
        };
    }

    var glyphset = { GlyphSet, glyphLoader, ttfGlyphLoader, cffGlyphLoader };

    // The `CFF` table contains the glyph outlines in PostScript format.

    // Custom equals function that can also check lists.
    function equals$1(a, b) {
        if (a === b) {
            return true;
        } else if (Array.isArray(a) && Array.isArray(b)) {
            if (a.length !== b.length) {
                return false;
            }

            for (let i = 0; i < a.length; i += 1) {
                if (!equals$1(a[i], b[i])) {
                    return false;
                }
            }

            return true;
        } else {
            return false;
        }
    }

    // Subroutines are encoded using the negative half of the number space.
    // See type 2 chapter 4.7 "Subroutine operators".
    function calcCFFSubroutineBias(subrs) {
        let bias;
        if (subrs.length < 1240) {
            bias = 107;
        } else if (subrs.length < 33900) {
            bias = 1131;
        } else {
            bias = 32768;
        }

        return bias;
    }

    // Parse a `CFF` INDEX array.
    // An index array consists of a list of offsets, then a list of objects at those offsets.
    function parseCFFIndex(data, start, conversionFn) {
        const offsets = [];
        const objects = [];
        const count = parse.getCard16(data, start);
        let objectOffset;
        let endOffset;
        if (count !== 0) {
            const offsetSize = parse.getByte(data, start + 2);
            objectOffset = start + ((count + 1) * offsetSize) + 2;
            let pos = start + 3;
            for (let i = 0; i < count + 1; i += 1) {
                offsets.push(parse.getOffset(data, pos, offsetSize));
                pos += offsetSize;
            }

            // The total size of the index array is 4 header bytes + the value of the last offset.
            endOffset = objectOffset + offsets[count];
        } else {
            endOffset = start + 2;
        }

        for (let i = 0; i < offsets.length - 1; i += 1) {
            let value = parse.getBytes(data, objectOffset + offsets[i], objectOffset + offsets[i + 1]);
            if (conversionFn) {
                value = conversionFn(value);
            }

            objects.push(value);
        }

        return {objects: objects, startOffset: start, endOffset: endOffset};
    }

    // Parse a `CFF` DICT real value.
    function parseFloatOperand(parser) {
        let s = '';
        const eof = 15;
        const lookup = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];
        while (true) {
            const b = parser.parseByte();
            const n1 = b >> 4;
            const n2 = b & 15;

            if (n1 === eof) {
                break;
            }

            s += lookup[n1];

            if (n2 === eof) {
                break;
            }

            s += lookup[n2];
        }

        return parseFloat(s);
    }

    // Parse a `CFF` DICT operand.
    function parseOperand(parser, b0) {
        let b1;
        let b2;
        let b3;
        let b4;
        if (b0 === 28) {
            b1 = parser.parseByte();
            b2 = parser.parseByte();
            return b1 << 8 | b2;
        }

        if (b0 === 29) {
            b1 = parser.parseByte();
            b2 = parser.parseByte();
            b3 = parser.parseByte();
            b4 = parser.parseByte();
            return b1 << 24 | b2 << 16 | b3 << 8 | b4;
        }

        if (b0 === 30) {
            return parseFloatOperand(parser);
        }

        if (b0 >= 32 && b0 <= 246) {
            return b0 - 139;
        }

        if (b0 >= 247 && b0 <= 250) {
            b1 = parser.parseByte();
            return (b0 - 247) * 256 + b1 + 108;
        }

        if (b0 >= 251 && b0 <= 254) {
            b1 = parser.parseByte();
            return -(b0 - 251) * 256 - b1 - 108;
        }

        throw new Error('Invalid b0 ' + b0);
    }

    // Convert the entries returned by `parseDict` to a proper dictionary.
    // If a value is a list of one, it is unpacked.
    function entriesToObject(entries) {
        const o = {};
        for (let i = 0; i < entries.length; i += 1) {
            const key = entries[i][0];
            const values = entries[i][1];
            let value;
            if (values.length === 1) {
                value = values[0];
            } else {
                value = values;
            }

            if (o.hasOwnProperty(key) && !isNaN(o[key])) {
                throw new Error('Object ' + o + ' already has key ' + key);
            }

            o[key] = value;
        }

        return o;
    }

    // Parse a `CFF` DICT object.
    // A dictionary contains key-value pairs in a compact tokenized format.
    function parseCFFDict(data, start, size) {
        start = start !== undefined ? start : 0;
        const parser = new parse.Parser(data, start);
        const entries = [];
        let operands = [];
        size = size !== undefined ? size : data.length;

        while (parser.relativeOffset < size) {
            let op = parser.parseByte();

            // The first byte for each dict item distinguishes between operator (key) and operand (value).
            // Values <= 21 are operators.
            if (op <= 21) {
                // Two-byte operators have an initial escape byte of 12.
                if (op === 12) {
                    op = 1200 + parser.parseByte();
                }

                entries.push([op, operands]);
                operands = [];
            } else {
                // Since the operands (values) come before the operators (keys), we store all operands in a list
                // until we encounter an operator.
                operands.push(parseOperand(parser, op));
            }
        }

        return entriesToObject(entries);
    }

    // Given a String Index (SID), return the value of the string.
    // Strings below index 392 are standard CFF strings and are not encoded in the font.
    function getCFFString(strings, index) {
        if (index <= 390) {
            index = cffStandardStrings[index];
        } else {
            index = strings[index - 391];
        }

        return index;
    }

    // Interpret a dictionary and return a new dictionary with readable keys and values for missing entries.
    // This function takes `meta` which is a list of objects containing `operand`, `name` and `default`.
    function interpretDict(dict, meta, strings) {
        const newDict = {};
        let value;

        // Because we also want to include missing values, we start out from the meta list
        // and lookup values in the dict.
        for (let i = 0; i < meta.length; i += 1) {
            const m = meta[i];

            if (Array.isArray(m.type)) {
                const values = [];
                values.length = m.type.length;
                for (let j = 0; j < m.type.length; j++) {
                    value = dict[m.op] !== undefined ? dict[m.op][j] : undefined;
                    if (value === undefined) {
                        value = m.value !== undefined && m.value[j] !== undefined ? m.value[j] : null;
                    }
                    if (m.type[j] === 'SID') {
                        value = getCFFString(strings, value);
                    }
                    values[j] = value;
                }
                newDict[m.name] = values;
            } else {
                value = dict[m.op];
                if (value === undefined) {
                    value = m.value !== undefined ? m.value : null;
                }

                if (m.type === 'SID') {
                    value = getCFFString(strings, value);
                }
                newDict[m.name] = value;
            }
        }

        return newDict;
    }

    // Parse the CFF header.
    function parseCFFHeader(data, start) {
        const header = {};
        header.formatMajor = parse.getCard8(data, start);
        header.formatMinor = parse.getCard8(data, start + 1);
        header.size = parse.getCard8(data, start + 2);
        header.offsetSize = parse.getCard8(data, start + 3);
        header.startOffset = start;
        header.endOffset = start + 4;
        return header;
    }

    const TOP_DICT_META = [
        {name: 'version', op: 0, type: 'SID'},
        {name: 'notice', op: 1, type: 'SID'},
        {name: 'copyright', op: 1200, type: 'SID'},
        {name: 'fullName', op: 2, type: 'SID'},
        {name: 'familyName', op: 3, type: 'SID'},
        {name: 'weight', op: 4, type: 'SID'},
        {name: 'isFixedPitch', op: 1201, type: 'number', value: 0},
        {name: 'italicAngle', op: 1202, type: 'number', value: 0},
        {name: 'underlinePosition', op: 1203, type: 'number', value: -100},
        {name: 'underlineThickness', op: 1204, type: 'number', value: 50},
        {name: 'paintType', op: 1205, type: 'number', value: 0},
        {name: 'charstringType', op: 1206, type: 'number', value: 2},
        {
            name: 'fontMatrix',
            op: 1207,
            type: ['real', 'real', 'real', 'real', 'real', 'real'],
            value: [0.001, 0, 0, 0.001, 0, 0]
        },
        {name: 'uniqueId', op: 13, type: 'number'},
        {name: 'fontBBox', op: 5, type: ['number', 'number', 'number', 'number'], value: [0, 0, 0, 0]},
        {name: 'strokeWidth', op: 1208, type: 'number', value: 0},
        {name: 'xuid', op: 14, type: [], value: null},
        {name: 'charset', op: 15, type: 'offset', value: 0},
        {name: 'encoding', op: 16, type: 'offset', value: 0},
        {name: 'charStrings', op: 17, type: 'offset', value: 0},
        {name: 'private', op: 18, type: ['number', 'offset'], value: [0, 0]},
        {name: 'ros', op: 1230, type: ['SID', 'SID', 'number']},
        {name: 'cidFontVersion', op: 1231, type: 'number', value: 0},
        {name: 'cidFontRevision', op: 1232, type: 'number', value: 0},
        {name: 'cidFontType', op: 1233, type: 'number', value: 0},
        {name: 'cidCount', op: 1234, type: 'number', value: 8720},
        {name: 'uidBase', op: 1235, type: 'number'},
        {name: 'fdArray', op: 1236, type: 'offset'},
        {name: 'fdSelect', op: 1237, type: 'offset'},
        {name: 'fontName', op: 1238, type: 'SID'}
    ];

    const PRIVATE_DICT_META = [
        {name: 'subrs', op: 19, type: 'offset', value: 0},
        {name: 'defaultWidthX', op: 20, type: 'number', value: 0},
        {name: 'nominalWidthX', op: 21, type: 'number', value: 0}
    ];

    // Parse the CFF top dictionary. A CFF table can contain multiple fonts, each with their own top dictionary.
    // The top dictionary contains the essential metadata for the font, together with the private dictionary.
    function parseCFFTopDict(data, strings) {
        const dict = parseCFFDict(data, 0, data.byteLength);
        return interpretDict(dict, TOP_DICT_META, strings);
    }

    // Parse the CFF private dictionary. We don't fully parse out all the values, only the ones we need.
    function parseCFFPrivateDict(data, start, size, strings) {
        const dict = parseCFFDict(data, start, size);
        return interpretDict(dict, PRIVATE_DICT_META, strings);
    }

    // Returns a list of "Top DICT"s found using an INDEX list.
    // Used to read both the usual high-level Top DICTs and also the FDArray
    // discovered inside CID-keyed fonts.  When a Top DICT has a reference to
    // a Private DICT that is read and saved into the Top DICT.
    //
    // In addition to the expected/optional values as outlined in TOP_DICT_META
    // the following values might be saved into the Top DICT.
    //
    //    _subrs []        array of local CFF subroutines from Private DICT
    //    _subrsBias       bias value computed from number of subroutines
    //                      (see calcCFFSubroutineBias() and parseCFFCharstring())
    //    _defaultWidthX   default widths for CFF characters
    //    _nominalWidthX   bias added to width embedded within glyph description
    //
    //    _privateDict     saved copy of parsed Private DICT from Top DICT
    function gatherCFFTopDicts(data, start, cffIndex, strings) {
        const topDictArray = [];
        for (let iTopDict = 0; iTopDict < cffIndex.length; iTopDict += 1) {
            const topDictData = new DataView(new Uint8Array(cffIndex[iTopDict]).buffer);
            const topDict = parseCFFTopDict(topDictData, strings);
            topDict._subrs = [];
            topDict._subrsBias = 0;
            const privateSize = topDict.private[0];
            const privateOffset = topDict.private[1];
            if (privateSize !== 0 && privateOffset !== 0) {
                const privateDict = parseCFFPrivateDict(data, privateOffset + start, privateSize, strings);
                topDict._defaultWidthX = privateDict.defaultWidthX;
                topDict._nominalWidthX = privateDict.nominalWidthX;
                if (privateDict.subrs !== 0) {
                    const subrOffset = privateOffset + privateDict.subrs;
                    const subrIndex = parseCFFIndex(data, subrOffset + start);
                    topDict._subrs = subrIndex.objects;
                    topDict._subrsBias = calcCFFSubroutineBias(topDict._subrs);
                }
                topDict._privateDict = privateDict;
            }
            topDictArray.push(topDict);
        }
        return topDictArray;
    }

    // Parse the CFF charset table, which contains internal names for all the glyphs.
    // This function will return a list of glyph names.
    // See Adobe TN #5176 chapter 13, "Charsets".
    function parseCFFCharset(data, start, nGlyphs, strings) {
        let sid;
        let count;
        const parser = new parse.Parser(data, start);

        // The .notdef glyph is not included, so subtract 1.
        nGlyphs -= 1;
        const charset = ['.notdef'];

        const format = parser.parseCard8();
        if (format === 0) {
            for (let i = 0; i < nGlyphs; i += 1) {
                sid = parser.parseSID();
                charset.push(getCFFString(strings, sid));
            }
        } else if (format === 1) {
            while (charset.length <= nGlyphs) {
                sid = parser.parseSID();
                count = parser.parseCard8();
                for (let i = 0; i <= count; i += 1) {
                    charset.push(getCFFString(strings, sid));
                    sid += 1;
                }
            }
        } else if (format === 2) {
            while (charset.length <= nGlyphs) {
                sid = parser.parseSID();
                count = parser.parseCard16();
                for (let i = 0; i <= count; i += 1) {
                    charset.push(getCFFString(strings, sid));
                    sid += 1;
                }
            }
        } else {
            throw new Error('Unknown charset format ' + format);
        }

        return charset;
    }

    // Parse the CFF encoding data. Only one encoding can be specified per font.
    // See Adobe TN #5176 chapter 12, "Encodings".
    function parseCFFEncoding(data, start, charset) {
        let code;
        const enc = {};
        const parser = new parse.Parser(data, start);
        const format = parser.parseCard8();
        if (format === 0) {
            const nCodes = parser.parseCard8();
            for (let i = 0; i < nCodes; i += 1) {
                code = parser.parseCard8();
                enc[code] = i;
            }
        } else if (format === 1) {
            const nRanges = parser.parseCard8();
            code = 1;
            for (let i = 0; i < nRanges; i += 1) {
                const first = parser.parseCard8();
                const nLeft = parser.parseCard8();
                for (let j = first; j <= first + nLeft; j += 1) {
                    enc[j] = code;
                    code += 1;
                }
            }
        } else {
            throw new Error('Unknown encoding format ' + format);
        }

        return new CffEncoding(enc, charset);
    }

    // Take in charstring code and return a Glyph object.
    // The encoding is described in the Type 2 Charstring Format
    // https://www.microsoft.com/typography/OTSPEC/charstr2.htm
    function parseCFFCharstring(font, glyph, code) {
        let c1x;
        let c1y;
        let c2x;
        let c2y;
        const p = new Path();
        const stack = [];
        let nStems = 0;
        let haveWidth = false;
        let open = false;
        let x = 0;
        let y = 0;
        let subrs;
        let subrsBias;
        let defaultWidthX;
        let nominalWidthX;
        if (font.isCIDFont) {
            const fdIndex = font.tables.cff.topDict._fdSelect[glyph.index];
            const fdDict = font.tables.cff.topDict._fdArray[fdIndex];
            subrs = fdDict._subrs;
            subrsBias = fdDict._subrsBias;
            defaultWidthX = fdDict._defaultWidthX;
            nominalWidthX = fdDict._nominalWidthX;
        } else {
            subrs = font.tables.cff.topDict._subrs;
            subrsBias = font.tables.cff.topDict._subrsBias;
            defaultWidthX = font.tables.cff.topDict._defaultWidthX;
            nominalWidthX = font.tables.cff.topDict._nominalWidthX;
        }
        let width = defaultWidthX;

        function newContour(x, y) {
            if (open) {
                p.closePath();
            }

            p.moveTo(x, y);
            open = true;
        }

        function parseStems() {
            let hasWidthArg;

            // The number of stem operators on the stack is always even.
            // If the value is uneven, that means a width is specified.
            hasWidthArg = stack.length % 2 !== 0;
            if (hasWidthArg && !haveWidth) {
                width = stack.shift() + nominalWidthX;
            }

            nStems += stack.length >> 1;
            stack.length = 0;
            haveWidth = true;
        }

        function parse$$1(code) {
            let b1;
            let b2;
            let b3;
            let b4;
            let codeIndex;
            let subrCode;
            let jpx;
            let jpy;
            let c3x;
            let c3y;
            let c4x;
            let c4y;

            let i = 0;
            while (i < code.length) {
                let v = code[i];
                i += 1;
                switch (v) {
                    case 1: // hstem
                        parseStems();
                        break;
                    case 3: // vstem
                        parseStems();
                        break;
                    case 4: // vmoveto
                        if (stack.length > 1 && !haveWidth) {
                            width = stack.shift() + nominalWidthX;
                            haveWidth = true;
                        }

                        y += stack.pop();
                        newContour(x, y);
                        break;
                    case 5: // rlineto
                        while (stack.length > 0) {
                            x += stack.shift();
                            y += stack.shift();
                            p.lineTo(x, y);
                        }

                        break;
                    case 6: // hlineto
                        while (stack.length > 0) {
                            x += stack.shift();
                            p.lineTo(x, y);
                            if (stack.length === 0) {
                                break;
                            }

                            y += stack.shift();
                            p.lineTo(x, y);
                        }

                        break;
                    case 7: // vlineto
                        while (stack.length > 0) {
                            y += stack.shift();
                            p.lineTo(x, y);
                            if (stack.length === 0) {
                                break;
                            }

                            x += stack.shift();
                            p.lineTo(x, y);
                        }

                        break;
                    case 8: // rrcurveto
                        while (stack.length > 0) {
                            c1x = x + stack.shift();
                            c1y = y + stack.shift();
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            x = c2x + stack.shift();
                            y = c2y + stack.shift();
                            p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        }

                        break;
                    case 10: // callsubr
                        codeIndex = stack.pop() + subrsBias;
                        subrCode = subrs[codeIndex];
                        if (subrCode) {
                            parse$$1(subrCode);
                        }

                        break;
                    case 11: // return
                        return;
                    case 12: // flex operators
                        v = code[i];
                        i += 1;
                        switch (v) {
                            case 35: // flex
                                // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 dx6 dy6 fd flex (12 35) |-
                                c1x = x   + stack.shift();    // dx1
                                c1y = y   + stack.shift();    // dy1
                                c2x = c1x + stack.shift();    // dx2
                                c2y = c1y + stack.shift();    // dy2
                                jpx = c2x + stack.shift();    // dx3
                                jpy = c2y + stack.shift();    // dy3
                                c3x = jpx + stack.shift();    // dx4
                                c3y = jpy + stack.shift();    // dy4
                                c4x = c3x + stack.shift();    // dx5
                                c4y = c3y + stack.shift();    // dy5
                                x = c4x   + stack.shift();    // dx6
                                y = c4y   + stack.shift();    // dy6
                                stack.shift();                // flex depth
                                p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                                p.curveTo(c3x, c3y, c4x, c4y, x, y);
                                break;
                            case 34: // hflex
                                // |- dx1 dx2 dy2 dx3 dx4 dx5 dx6 hflex (12 34) |-
                                c1x = x   + stack.shift();    // dx1
                                c1y = y;                      // dy1
                                c2x = c1x + stack.shift();    // dx2
                                c2y = c1y + stack.shift();    // dy2
                                jpx = c2x + stack.shift();    // dx3
                                jpy = c2y;                    // dy3
                                c3x = jpx + stack.shift();    // dx4
                                c3y = c2y;                    // dy4
                                c4x = c3x + stack.shift();    // dx5
                                c4y = y;                      // dy5
                                x = c4x + stack.shift();      // dx6
                                p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                                p.curveTo(c3x, c3y, c4x, c4y, x, y);
                                break;
                            case 36: // hflex1
                                // |- dx1 dy1 dx2 dy2 dx3 dx4 dx5 dy5 dx6 hflex1 (12 36) |-
                                c1x = x   + stack.shift();    // dx1
                                c1y = y   + stack.shift();    // dy1
                                c2x = c1x + stack.shift();    // dx2
                                c2y = c1y + stack.shift();    // dy2
                                jpx = c2x + stack.shift();    // dx3
                                jpy = c2y;                    // dy3
                                c3x = jpx + stack.shift();    // dx4
                                c3y = c2y;                    // dy4
                                c4x = c3x + stack.shift();    // dx5
                                c4y = c3y + stack.shift();    // dy5
                                x = c4x + stack.shift();      // dx6
                                p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                                p.curveTo(c3x, c3y, c4x, c4y, x, y);
                                break;
                            case 37: // flex1
                                // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 d6 flex1 (12 37) |-
                                c1x = x   + stack.shift();    // dx1
                                c1y = y   + stack.shift();    // dy1
                                c2x = c1x + stack.shift();    // dx2
                                c2y = c1y + stack.shift();    // dy2
                                jpx = c2x + stack.shift();    // dx3
                                jpy = c2y + stack.shift();    // dy3
                                c3x = jpx + stack.shift();    // dx4
                                c3y = jpy + stack.shift();    // dy4
                                c4x = c3x + stack.shift();    // dx5
                                c4y = c3y + stack.shift();    // dy5
                                if (Math.abs(c4x - x) > Math.abs(c4y - y)) {
                                    x = c4x + stack.shift();
                                } else {
                                    y = c4y + stack.shift();
                                }

                                p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                                p.curveTo(c3x, c3y, c4x, c4y, x, y);
                                break;
                            default:
                                console.log('Glyph ' + glyph.index + ': unknown operator ' + 1200 + v);
                                stack.length = 0;
                        }
                        break;
                    case 14: // endchar
                        if (stack.length > 0 && !haveWidth) {
                            width = stack.shift() + nominalWidthX;
                            haveWidth = true;
                        }

                        if (open) {
                            p.closePath();
                            open = false;
                        }

                        break;
                    case 18: // hstemhm
                        parseStems();
                        break;
                    case 19: // hintmask
                    case 20: // cntrmask
                        parseStems();
                        i += (nStems + 7) >> 3;
                        break;
                    case 21: // rmoveto
                        if (stack.length > 2 && !haveWidth) {
                            width = stack.shift() + nominalWidthX;
                            haveWidth = true;
                        }

                        y += stack.pop();
                        x += stack.pop();
                        newContour(x, y);
                        break;
                    case 22: // hmoveto
                        if (stack.length > 1 && !haveWidth) {
                            width = stack.shift() + nominalWidthX;
                            haveWidth = true;
                        }

                        x += stack.pop();
                        newContour(x, y);
                        break;
                    case 23: // vstemhm
                        parseStems();
                        break;
                    case 24: // rcurveline
                        while (stack.length > 2) {
                            c1x = x + stack.shift();
                            c1y = y + stack.shift();
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            x = c2x + stack.shift();
                            y = c2y + stack.shift();
                            p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        }

                        x += stack.shift();
                        y += stack.shift();
                        p.lineTo(x, y);
                        break;
                    case 25: // rlinecurve
                        while (stack.length > 6) {
                            x += stack.shift();
                            y += stack.shift();
                            p.lineTo(x, y);
                        }

                        c1x = x + stack.shift();
                        c1y = y + stack.shift();
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        x = c2x + stack.shift();
                        y = c2y + stack.shift();
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        break;
                    case 26: // vvcurveto
                        if (stack.length % 2) {
                            x += stack.shift();
                        }

                        while (stack.length > 0) {
                            c1x = x;
                            c1y = y + stack.shift();
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            x = c2x;
                            y = c2y + stack.shift();
                            p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        }

                        break;
                    case 27: // hhcurveto
                        if (stack.length % 2) {
                            y += stack.shift();
                        }

                        while (stack.length > 0) {
                            c1x = x + stack.shift();
                            c1y = y;
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            x = c2x + stack.shift();
                            y = c2y;
                            p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        }

                        break;
                    case 28: // shortint
                        b1 = code[i];
                        b2 = code[i + 1];
                        stack.push(((b1 << 24) | (b2 << 16)) >> 16);
                        i += 2;
                        break;
                    case 29: // callgsubr
                        codeIndex = stack.pop() + font.gsubrsBias;
                        subrCode = font.gsubrs[codeIndex];
                        if (subrCode) {
                            parse$$1(subrCode);
                        }

                        break;
                    case 30: // vhcurveto
                        while (stack.length > 0) {
                            c1x = x;
                            c1y = y + stack.shift();
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            x = c2x + stack.shift();
                            y = c2y + (stack.length === 1 ? stack.shift() : 0);
                            p.curveTo(c1x, c1y, c2x, c2y, x, y);
                            if (stack.length === 0) {
                                break;
                            }

                            c1x = x + stack.shift();
                            c1y = y;
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            y = c2y + stack.shift();
                            x = c2x + (stack.length === 1 ? stack.shift() : 0);
                            p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        }

                        break;
                    case 31: // hvcurveto
                        while (stack.length > 0) {
                            c1x = x + stack.shift();
                            c1y = y;
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            y = c2y + stack.shift();
                            x = c2x + (stack.length === 1 ? stack.shift() : 0);
                            p.curveTo(c1x, c1y, c2x, c2y, x, y);
                            if (stack.length === 0) {
                                break;
                            }

                            c1x = x;
                            c1y = y + stack.shift();
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            x = c2x + stack.shift();
                            y = c2y + (stack.length === 1 ? stack.shift() : 0);
                            p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        }

                        break;
                    default:
                        if (v < 32) {
                            console.log('Glyph ' + glyph.index + ': unknown operator ' + v);
                        } else if (v < 247) {
                            stack.push(v - 139);
                        } else if (v < 251) {
                            b1 = code[i];
                            i += 1;
                            stack.push((v - 247) * 256 + b1 + 108);
                        } else if (v < 255) {
                            b1 = code[i];
                            i += 1;
                            stack.push(-(v - 251) * 256 - b1 - 108);
                        } else {
                            b1 = code[i];
                            b2 = code[i + 1];
                            b3 = code[i + 2];
                            b4 = code[i + 3];
                            i += 4;
                            stack.push(((b1 << 24) | (b2 << 16) | (b3 << 8) | b4) / 65536);
                        }
                }
            }
        }

        parse$$1(code);

        glyph.advanceWidth = width;
        return p;
    }

    function parseCFFFDSelect(data, start, nGlyphs, fdArrayCount) {
        const fdSelect = [];
        let fdIndex;
        const parser = new parse.Parser(data, start);
        const format = parser.parseCard8();
        if (format === 0) {
            // Simple list of nGlyphs elements
            for (let iGid = 0; iGid < nGlyphs; iGid++) {
                fdIndex = parser.parseCard8();
                if (fdIndex >= fdArrayCount) {
                    throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');
                }
                fdSelect.push(fdIndex);
            }
        } else if (format === 3) {
            // Ranges
            const nRanges = parser.parseCard16();
            let first = parser.parseCard16();
            if (first !== 0) {
                throw new Error('CFF Table CID Font FDSelect format 3 range has bad initial GID ' + first);
            }
            let next;
            for (let iRange = 0; iRange < nRanges; iRange++) {
                fdIndex = parser.parseCard8();
                next = parser.parseCard16();
                if (fdIndex >= fdArrayCount) {
                    throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');
                }
                if (next > nGlyphs) {
                    throw new Error('CFF Table CID Font FDSelect format 3 range has bad GID ' + next);
                }
                for (; first < next; first++) {
                    fdSelect.push(fdIndex);
                }
                first = next;
            }
            if (next !== nGlyphs) {
                throw new Error('CFF Table CID Font FDSelect format 3 range has bad final GID ' + next);
            }
        } else {
            throw new Error('CFF Table CID Font FDSelect table has unsupported format ' + format);
        }
        return fdSelect;
    }

    // Parse the `CFF` table, which contains the glyph outlines in PostScript format.
    function parseCFFTable(data, start, font) {
        font.tables.cff = {};
        const header = parseCFFHeader(data, start);
        const nameIndex = parseCFFIndex(data, header.endOffset, parse.bytesToString);
        const topDictIndex = parseCFFIndex(data, nameIndex.endOffset);
        const stringIndex = parseCFFIndex(data, topDictIndex.endOffset, parse.bytesToString);
        const globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);
        font.gsubrs = globalSubrIndex.objects;
        font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);

        const topDictArray = gatherCFFTopDicts(data, start, topDictIndex.objects, stringIndex.objects);
        if (topDictArray.length !== 1) {
            throw new Error('CFF table has too many fonts in \'FontSet\' - count of fonts NameIndex.length = ' + topDictArray.length);
        }

        const topDict = topDictArray[0];
        font.tables.cff.topDict = topDict;

        if (topDict._privateDict) {
            font.defaultWidthX = topDict._privateDict.defaultWidthX;
            font.nominalWidthX = topDict._privateDict.nominalWidthX;
        }

        if (topDict.ros[0] !== undefined && topDict.ros[1] !== undefined) {
            font.isCIDFont = true;
        }

        if (font.isCIDFont) {
            let fdArrayOffset = topDict.fdArray;
            let fdSelectOffset = topDict.fdSelect;
            if (fdArrayOffset === 0 || fdSelectOffset === 0) {
                throw new Error('Font is marked as a CID font, but FDArray and/or FDSelect information is missing');
            }
            fdArrayOffset += start;
            const fdArrayIndex = parseCFFIndex(data, fdArrayOffset);
            const fdArray = gatherCFFTopDicts(data, start, fdArrayIndex.objects, stringIndex.objects);
            topDict._fdArray = fdArray;
            fdSelectOffset += start;
            topDict._fdSelect = parseCFFFDSelect(data, fdSelectOffset, font.numGlyphs, fdArray.length);
        }

        const privateDictOffset = start + topDict.private[1];
        const privateDict = parseCFFPrivateDict(data, privateDictOffset, topDict.private[0], stringIndex.objects);
        font.defaultWidthX = privateDict.defaultWidthX;
        font.nominalWidthX = privateDict.nominalWidthX;

        if (privateDict.subrs !== 0) {
            const subrOffset = privateDictOffset + privateDict.subrs;
            const subrIndex = parseCFFIndex(data, subrOffset);
            font.subrs = subrIndex.objects;
            font.subrsBias = calcCFFSubroutineBias(font.subrs);
        } else {
            font.subrs = [];
            font.subrsBias = 0;
        }

        // Offsets in the top dict are relative to the beginning of the CFF data, so add the CFF start offset.
        const charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);
        font.nGlyphs = charStringsIndex.objects.length;

        const charset = parseCFFCharset(data, start + topDict.charset, font.nGlyphs, stringIndex.objects);
        if (topDict.encoding === 0) {
            // Standard encoding
            font.cffEncoding = new CffEncoding(cffStandardEncoding, charset);
        } else if (topDict.encoding === 1) {
            // Expert encoding
            font.cffEncoding = new CffEncoding(cffExpertEncoding, charset);
        } else {
            font.cffEncoding = parseCFFEncoding(data, start + topDict.encoding, charset);
        }

        // Prefer the CMAP encoding to the CFF encoding.
        font.encoding = font.encoding || font.cffEncoding;

        font.glyphs = new glyphset.GlyphSet(font);
        for (let i = 0; i < font.nGlyphs; i += 1) {
            const charString = charStringsIndex.objects[i];
            font.glyphs.push(i, glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString));
        }
    }

    // Convert a string to a String ID (SID).
    // The list of strings is modified in place.
    function encodeString(s, strings) {
        let sid;

        // Is the string in the CFF standard strings?
        let i = cffStandardStrings.indexOf(s);
        if (i >= 0) {
            sid = i;
        }

        // Is the string already in the string index?
        i = strings.indexOf(s);
        if (i >= 0) {
            sid = i + cffStandardStrings.length;
        } else {
            sid = cffStandardStrings.length + strings.length;
            strings.push(s);
        }

        return sid;
    }

    function makeHeader() {
        return new table.Record('Header', [
            {name: 'major', type: 'Card8', value: 1},
            {name: 'minor', type: 'Card8', value: 0},
            {name: 'hdrSize', type: 'Card8', value: 4},
            {name: 'major', type: 'Card8', value: 1}
        ]);
    }

    function makeNameIndex(fontNames) {
        const t = new table.Record('Name INDEX', [
            {name: 'names', type: 'INDEX', value: []}
        ]);
        t.names = [];
        for (let i = 0; i < fontNames.length; i += 1) {
            t.names.push({name: 'name_' + i, type: 'NAME', value: fontNames[i]});
        }

        return t;
    }

    // Given a dictionary's metadata, create a DICT structure.
    function makeDict(meta, attrs, strings) {
        const m = {};
        for (let i = 0; i < meta.length; i += 1) {
            const entry = meta[i];
            let value = attrs[entry.name];
            if (value !== undefined && !equals$1(value, entry.value)) {
                if (entry.type === 'SID') {
                    value = encodeString(value, strings);
                }

                m[entry.op] = {name: entry.name, type: entry.type, value: value};
            }
        }

        return m;
    }

    // The Top DICT houses the global font attributes.
    function makeTopDict(attrs, strings) {
        const t = new table.Record('Top DICT', [
            {name: 'dict', type: 'DICT', value: {}}
        ]);
        t.dict = makeDict(TOP_DICT_META, attrs, strings);
        return t;
    }

    function makeTopDictIndex(topDict) {
        const t = new table.Record('Top DICT INDEX', [
            {name: 'topDicts', type: 'INDEX', value: []}
        ]);
        t.topDicts = [{name: 'topDict_0', type: 'TABLE', value: topDict}];
        return t;
    }

    function makeStringIndex(strings) {
        const t = new table.Record('String INDEX', [
            {name: 'strings', type: 'INDEX', value: []}
        ]);
        t.strings = [];
        for (let i = 0; i < strings.length; i += 1) {
            t.strings.push({name: 'string_' + i, type: 'STRING', value: strings[i]});
        }

        return t;
    }

    function makeGlobalSubrIndex() {
        // Currently we don't use subroutines.
        return new table.Record('Global Subr INDEX', [
            {name: 'subrs', type: 'INDEX', value: []}
        ]);
    }

    function makeCharsets(glyphNames, strings) {
        const t = new table.Record('Charsets', [
            {name: 'format', type: 'Card8', value: 0}
        ]);
        for (let i = 0; i < glyphNames.length; i += 1) {
            const glyphName = glyphNames[i];
            const glyphSID = encodeString(glyphName, strings);
            t.fields.push({name: 'glyph_' + i, type: 'SID', value: glyphSID});
        }

        return t;
    }

    function glyphToOps(glyph) {
        const ops = [];
        const path = glyph.path;
        ops.push({name: 'width', type: 'NUMBER', value: glyph.advanceWidth});
        let x = 0;
        let y = 0;
        for (let i = 0; i < path.commands.length; i += 1) {
            let dx;
            let dy;
            let cmd = path.commands[i];
            if (cmd.type === 'Q') {
                // CFF only supports bézier curves, so convert the quad to a bézier.
                const _13 = 1 / 3;
                const _23 = 2 / 3;

                // We're going to create a new command so we don't change the original path.
                cmd = {
                    type: 'C',
                    x: cmd.x,
                    y: cmd.y,
                    x1: _13 * x + _23 * cmd.x1,
                    y1: _13 * y + _23 * cmd.y1,
                    x2: _13 * cmd.x + _23 * cmd.x1,
                    y2: _13 * cmd.y + _23 * cmd.y1
                };
            }

            if (cmd.type === 'M') {
                dx = Math.round(cmd.x - x);
                dy = Math.round(cmd.y - y);
                ops.push({name: 'dx', type: 'NUMBER', value: dx});
                ops.push({name: 'dy', type: 'NUMBER', value: dy});
                ops.push({name: 'rmoveto', type: 'OP', value: 21});
                x = Math.round(cmd.x);
                y = Math.round(cmd.y);
            } else if (cmd.type === 'L') {
                dx = Math.round(cmd.x - x);
                dy = Math.round(cmd.y - y);
                ops.push({name: 'dx', type: 'NUMBER', value: dx});
                ops.push({name: 'dy', type: 'NUMBER', value: dy});
                ops.push({name: 'rlineto', type: 'OP', value: 5});
                x = Math.round(cmd.x);
                y = Math.round(cmd.y);
            } else if (cmd.type === 'C') {
                const dx1 = Math.round(cmd.x1 - x);
                const dy1 = Math.round(cmd.y1 - y);
                const dx2 = Math.round(cmd.x2 - cmd.x1);
                const dy2 = Math.round(cmd.y2 - cmd.y1);
                dx = Math.round(cmd.x - cmd.x2);
                dy = Math.round(cmd.y - cmd.y2);
                ops.push({name: 'dx1', type: 'NUMBER', value: dx1});
                ops.push({name: 'dy1', type: 'NUMBER', value: dy1});
                ops.push({name: 'dx2', type: 'NUMBER', value: dx2});
                ops.push({name: 'dy2', type: 'NUMBER', value: dy2});
                ops.push({name: 'dx', type: 'NUMBER', value: dx});
                ops.push({name: 'dy', type: 'NUMBER', value: dy});
                ops.push({name: 'rrcurveto', type: 'OP', value: 8});
                x = Math.round(cmd.x);
                y = Math.round(cmd.y);
            }

            // Contours are closed automatically.
        }

        ops.push({name: 'endchar', type: 'OP', value: 14});
        return ops;
    }

    function makeCharStringsIndex(glyphs) {
        const t = new table.Record('CharStrings INDEX', [
            {name: 'charStrings', type: 'INDEX', value: []}
        ]);

        for (let i = 0; i < glyphs.length; i += 1) {
            const glyph = glyphs.get(i);
            const ops = glyphToOps(glyph);
            t.charStrings.push({name: glyph.name, type: 'CHARSTRING', value: ops});
        }

        return t;
    }

    function makePrivateDict(attrs, strings) {
        const t = new table.Record('Private DICT', [
            {name: 'dict', type: 'DICT', value: {}}
        ]);
        t.dict = makeDict(PRIVATE_DICT_META, attrs, strings);
        return t;
    }

    function makeCFFTable(glyphs, options) {
        const t = new table.Table('CFF ', [
            {name: 'header', type: 'RECORD'},
            {name: 'nameIndex', type: 'RECORD'},
            {name: 'topDictIndex', type: 'RECORD'},
            {name: 'stringIndex', type: 'RECORD'},
            {name: 'globalSubrIndex', type: 'RECORD'},
            {name: 'charsets', type: 'RECORD'},
            {name: 'charStringsIndex', type: 'RECORD'},
            {name: 'privateDict', type: 'RECORD'}
        ]);

        const fontScale = 1 / options.unitsPerEm;
        // We use non-zero values for the offsets so that the DICT encodes them.
        // This is important because the size of the Top DICT plays a role in offset calculation,
        // and the size shouldn't change after we've written correct offsets.
        const attrs = {
            version: options.version,
            fullName: options.fullName,
            familyName: options.familyName,
            weight: options.weightName,
            fontBBox: options.fontBBox || [0, 0, 0, 0],
            fontMatrix: [fontScale, 0, 0, fontScale, 0, 0],
            charset: 999,
            encoding: 0,
            charStrings: 999,
            private: [0, 999]
        };

        const privateAttrs = {};

        const glyphNames = [];
        let glyph;

        // Skip first glyph (.notdef)
        for (let i = 1; i < glyphs.length; i += 1) {
            glyph = glyphs.get(i);
            glyphNames.push(glyph.name);
        }

        const strings = [];

        t.header = makeHeader();
        t.nameIndex = makeNameIndex([options.postScriptName]);
        let topDict = makeTopDict(attrs, strings);
        t.topDictIndex = makeTopDictIndex(topDict);
        t.globalSubrIndex = makeGlobalSubrIndex();
        t.charsets = makeCharsets(glyphNames, strings);
        t.charStringsIndex = makeCharStringsIndex(glyphs);
        t.privateDict = makePrivateDict(privateAttrs, strings);

        // Needs to come at the end, to encode all custom strings used in the font.
        t.stringIndex = makeStringIndex(strings);

        const startOffset = t.header.sizeOf() +
            t.nameIndex.sizeOf() +
            t.topDictIndex.sizeOf() +
            t.stringIndex.sizeOf() +
            t.globalSubrIndex.sizeOf();
        attrs.charset = startOffset;

        // We use the CFF standard encoding; proper encoding will be handled in cmap.
        attrs.encoding = 0;
        attrs.charStrings = attrs.charset + t.charsets.sizeOf();
        attrs.private[1] = attrs.charStrings + t.charStringsIndex.sizeOf();

        // Recreate the Top DICT INDEX with the correct offsets.
        topDict = makeTopDict(attrs, strings);
        t.topDictIndex = makeTopDictIndex(topDict);

        return t;
    }

    var cff = { parse: parseCFFTable, make: makeCFFTable };

    // The `head` table contains global information about the font.

    // Parse the header `head` table
    function parseHeadTable(data, start) {
        const head = {};
        const p = new parse.Parser(data, start);
        head.version = p.parseVersion();
        head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;
        head.checkSumAdjustment = p.parseULong();
        head.magicNumber = p.parseULong();
        check.argument(head.magicNumber === 0x5F0F3CF5, 'Font header has wrong magic number.');
        head.flags = p.parseUShort();
        head.unitsPerEm = p.parseUShort();
        head.created = p.parseLongDateTime();
        head.modified = p.parseLongDateTime();
        head.xMin = p.parseShort();
        head.yMin = p.parseShort();
        head.xMax = p.parseShort();
        head.yMax = p.parseShort();
        head.macStyle = p.parseUShort();
        head.lowestRecPPEM = p.parseUShort();
        head.fontDirectionHint = p.parseShort();
        head.indexToLocFormat = p.parseShort();
        head.glyphDataFormat = p.parseShort();
        return head;
    }

    function makeHeadTable(options) {
        // Apple Mac timestamp epoch is 01/01/1904 not 01/01/1970
        const timestamp = Math.round(new Date().getTime() / 1000) + 2082844800;
        let createdTimestamp = timestamp;

        if (options.createdTimestamp) {
            createdTimestamp = options.createdTimestamp + 2082844800;
        }

        return new table.Table('head', [
            {name: 'version', type: 'FIXED', value: 0x00010000},
            {name: 'fontRevision', type: 'FIXED', value: 0x00010000},
            {name: 'checkSumAdjustment', type: 'ULONG', value: 0},
            {name: 'magicNumber', type: 'ULONG', value: 0x5F0F3CF5},
            {name: 'flags', type: 'USHORT', value: 0},
            {name: 'unitsPerEm', type: 'USHORT', value: 1000},
            {name: 'created', type: 'LONGDATETIME', value: createdTimestamp},
            {name: 'modified', type: 'LONGDATETIME', value: timestamp},
            {name: 'xMin', type: 'SHORT', value: 0},
            {name: 'yMin', type: 'SHORT', value: 0},
            {name: 'xMax', type: 'SHORT', value: 0},
            {name: 'yMax', type: 'SHORT', value: 0},
            {name: 'macStyle', type: 'USHORT', value: 0},
            {name: 'lowestRecPPEM', type: 'USHORT', value: 0},
            {name: 'fontDirectionHint', type: 'SHORT', value: 2},
            {name: 'indexToLocFormat', type: 'SHORT', value: 0},
            {name: 'glyphDataFormat', type: 'SHORT', value: 0}
        ], options);
    }

    var head = { parse: parseHeadTable, make: makeHeadTable };

    // The `hhea` table contains information for horizontal layout.

    // Parse the horizontal header `hhea` table
    function parseHheaTable(data, start) {
        const hhea = {};
        const p = new parse.Parser(data, start);
        hhea.version = p.parseVersion();
        hhea.ascender = p.parseShort();
        hhea.descender = p.parseShort();
        hhea.lineGap = p.parseShort();
        hhea.advanceWidthMax = p.parseUShort();
        hhea.minLeftSideBearing = p.parseShort();
        hhea.minRightSideBearing = p.parseShort();
        hhea.xMaxExtent = p.parseShort();
        hhea.caretSlopeRise = p.parseShort();
        hhea.caretSlopeRun = p.parseShort();
        hhea.caretOffset = p.parseShort();
        p.relativeOffset += 8;
        hhea.metricDataFormat = p.parseShort();
        hhea.numberOfHMetrics = p.parseUShort();
        return hhea;
    }

    function makeHheaTable(options) {
        return new table.Table('hhea', [
            {name: 'version', type: 'FIXED', value: 0x00010000},
            {name: 'ascender', type: 'FWORD', value: 0},
            {name: 'descender', type: 'FWORD', value: 0},
            {name: 'lineGap', type: 'FWORD', value: 0},
            {name: 'advanceWidthMax', type: 'UFWORD', value: 0},
            {name: 'minLeftSideBearing', type: 'FWORD', value: 0},
            {name: 'minRightSideBearing', type: 'FWORD', value: 0},
            {name: 'xMaxExtent', type: 'FWORD', value: 0},
            {name: 'caretSlopeRise', type: 'SHORT', value: 1},
            {name: 'caretSlopeRun', type: 'SHORT', value: 0},
            {name: 'caretOffset', type: 'SHORT', value: 0},
            {name: 'reserved1', type: 'SHORT', value: 0},
            {name: 'reserved2', type: 'SHORT', value: 0},
            {name: 'reserved3', type: 'SHORT', value: 0},
            {name: 'reserved4', type: 'SHORT', value: 0},
            {name: 'metricDataFormat', type: 'SHORT', value: 0},
            {name: 'numberOfHMetrics', type: 'USHORT', value: 0}
        ], options);
    }

    var hhea = { parse: parseHheaTable, make: makeHheaTable };

    // The `hmtx` table contains the horizontal metrics for all glyphs.

    // Parse the `hmtx` table, which contains the horizontal metrics for all glyphs.
    // This function augments the glyph array, adding the advanceWidth and leftSideBearing to each glyph.
    function parseHmtxTable(data, start, numMetrics, numGlyphs, glyphs) {
        let advanceWidth;
        let leftSideBearing;
        const p = new parse.Parser(data, start);
        for (let i = 0; i < numGlyphs; i += 1) {
            // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.
            if (i < numMetrics) {
                advanceWidth = p.parseUShort();
                leftSideBearing = p.parseShort();
            }

            const glyph = glyphs.get(i);
            glyph.advanceWidth = advanceWidth;
            glyph.leftSideBearing = leftSideBearing;
        }
    }

    function makeHmtxTable(glyphs) {
        const t = new table.Table('hmtx', []);
        for (let i = 0; i < glyphs.length; i += 1) {
            const glyph = glyphs.get(i);
            const advanceWidth = glyph.advanceWidth || 0;
            const leftSideBearing = glyph.leftSideBearing || 0;
            t.fields.push({name: 'advanceWidth_' + i, type: 'USHORT', value: advanceWidth});
            t.fields.push({name: 'leftSideBearing_' + i, type: 'SHORT', value: leftSideBearing});
        }

        return t;
    }

    var hmtx = { parse: parseHmtxTable, make: makeHmtxTable };

    // The `ltag` table stores IETF BCP-47 language tags. It allows supporting

    function makeLtagTable(tags) {
        const result = new table.Table('ltag', [
            {name: 'version', type: 'ULONG', value: 1},
            {name: 'flags', type: 'ULONG', value: 0},
            {name: 'numTags', type: 'ULONG', value: tags.length}
        ]);

        let stringPool = '';
        const stringPoolOffset = 12 + tags.length * 4;
        for (let i = 0; i < tags.length; ++i) {
            let pos = stringPool.indexOf(tags[i]);
            if (pos < 0) {
                pos = stringPool.length;
                stringPool += tags[i];
            }

            result.fields.push({name: 'offset ' + i, type: 'USHORT', value: stringPoolOffset + pos});
            result.fields.push({name: 'length ' + i, type: 'USHORT', value: tags[i].length});
        }

        result.fields.push({name: 'stringPool', type: 'CHARARRAY', value: stringPool});
        return result;
    }

    function parseLtagTable(data, start) {
        const p = new parse.Parser(data, start);
        const tableVersion = p.parseULong();
        check.argument(tableVersion === 1, 'Unsupported ltag table version.');
        // The 'ltag' specification does not define any flags; skip the field.
        p.skip('uLong', 1);
        const numTags = p.parseULong();

        const tags = [];
        for (let i = 0; i < numTags; i++) {
            let tag = '';
            const offset = start + p.parseUShort();
            const length = p.parseUShort();
            for (let j = offset; j < offset + length; ++j) {
                tag += String.fromCharCode(data.getInt8(j));
            }

            tags.push(tag);
        }

        return tags;
    }

    var ltag = { make: makeLtagTable, parse: parseLtagTable };

    // The `maxp` table establishes the memory requirements for the font.

    // Parse the maximum profile `maxp` table.
    function parseMaxpTable(data, start) {
        const maxp = {};
        const p = new parse.Parser(data, start);
        maxp.version = p.parseVersion();
        maxp.numGlyphs = p.parseUShort();
        if (maxp.version === 1.0) {
            maxp.maxPoints = p.parseUShort();
            maxp.maxContours = p.parseUShort();
            maxp.maxCompositePoints = p.parseUShort();
            maxp.maxCompositeContours = p.parseUShort();
            maxp.maxZones = p.parseUShort();
            maxp.maxTwilightPoints = p.parseUShort();
            maxp.maxStorage = p.parseUShort();
            maxp.maxFunctionDefs = p.parseUShort();
            maxp.maxInstructionDefs = p.parseUShort();
            maxp.maxStackElements = p.parseUShort();
            maxp.maxSizeOfInstructions = p.parseUShort();
            maxp.maxComponentElements = p.parseUShort();
            maxp.maxComponentDepth = p.parseUShort();
        }

        return maxp;
    }

    function makeMaxpTable(numGlyphs) {
        return new table.Table('maxp', [
            {name: 'version', type: 'FIXED', value: 0x00005000},
            {name: 'numGlyphs', type: 'USHORT', value: numGlyphs}
        ]);
    }

    var maxp = { parse: parseMaxpTable, make: makeMaxpTable };

    // The `name` naming table.

    // NameIDs for the name table.
    const nameTableNames = [
        'copyright',              // 0
        'fontFamily',             // 1
        'fontSubfamily',          // 2
        'uniqueID',               // 3
        'fullName',               // 4
        'version',                // 5
        'postScriptName',         // 6
        'trademark',              // 7
        'manufacturer',           // 8
        'designer',               // 9
        'description',            // 10
        'manufacturerURL',        // 11
        'designerURL',            // 12
        'license',                // 13
        'licenseURL',             // 14
        'reserved',               // 15
        'preferredFamily',        // 16
        'preferredSubfamily',     // 17
        'compatibleFullName',     // 18
        'sampleText',             // 19
        'postScriptFindFontName', // 20
        'wwsFamily',              // 21
        'wwsSubfamily'            // 22
    ];

    const macLanguages = {
        0: 'en',
        1: 'fr',
        2: 'de',
        3: 'it',
        4: 'nl',
        5: 'sv',
        6: 'es',
        7: 'da',
        8: 'pt',
        9: 'no',
        10: 'he',
        11: 'ja',
        12: 'ar',
        13: 'fi',
        14: 'el',
        15: 'is',
        16: 'mt',
        17: 'tr',
        18: 'hr',
        19: 'zh-Hant',
        20: 'ur',
        21: 'hi',
        22: 'th',
        23: 'ko',
        24: 'lt',
        25: 'pl',
        26: 'hu',
        27: 'es',
        28: 'lv',
        29: 'se',
        30: 'fo',
        31: 'fa',
        32: 'ru',
        33: 'zh',
        34: 'nl-BE',
        35: 'ga',
        36: 'sq',
        37: 'ro',
        38: 'cz',
        39: 'sk',
        40: 'si',
        41: 'yi',
        42: 'sr',
        43: 'mk',
        44: 'bg',
        45: 'uk',
        46: 'be',
        47: 'uz',
        48: 'kk',
        49: 'az-Cyrl',
        50: 'az-Arab',
        51: 'hy',
        52: 'ka',
        53: 'mo',
        54: 'ky',
        55: 'tg',
        56: 'tk',
        57: 'mn-CN',
        58: 'mn',
        59: 'ps',
        60: 'ks',
        61: 'ku',
        62: 'sd',
        63: 'bo',
        64: 'ne',
        65: 'sa',
        66: 'mr',
        67: 'bn',
        68: 'as',
        69: 'gu',
        70: 'pa',
        71: 'or',
        72: 'ml',
        73: 'kn',
        74: 'ta',
        75: 'te',
        76: 'si',
        77: 'my',
        78: 'km',
        79: 'lo',
        80: 'vi',
        81: 'id',
        82: 'tl',
        83: 'ms',
        84: 'ms-Arab',
        85: 'am',
        86: 'ti',
        87: 'om',
        88: 'so',
        89: 'sw',
        90: 'rw',
        91: 'rn',
        92: 'ny',
        93: 'mg',
        94: 'eo',
        128: 'cy',
        129: 'eu',
        130: 'ca',
        131: 'la',
        132: 'qu',
        133: 'gn',
        134: 'ay',
        135: 'tt',
        136: 'ug',
        137: 'dz',
        138: 'jv',
        139: 'su',
        140: 'gl',
        141: 'af',
        142: 'br',
        143: 'iu',
        144: 'gd',
        145: 'gv',
        146: 'ga',
        147: 'to',
        148: 'el-polyton',
        149: 'kl',
        150: 'az',
        151: 'nn'
    };

    // MacOS language ID → MacOS script ID
    //
    // Note that the script ID is not sufficient to determine what encoding
    // to use in TrueType files. For some languages, MacOS used a modification
    // of a mainstream script. For example, an Icelandic name would be stored
    // with smRoman in the TrueType naming table, but the actual encoding
    // is a special Icelandic version of the normal Macintosh Roman encoding.
    // As another example, Inuktitut uses an 8-bit encoding for Canadian Aboriginal
    // Syllables but MacOS had run out of available script codes, so this was
    // done as a (pretty radical) "modification" of Ethiopic.
    //
    // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt
    const macLanguageToScript = {
        0: 0,  // langEnglish → smRoman
        1: 0,  // langFrench → smRoman
        2: 0,  // langGerman → smRoman
        3: 0,  // langItalian → smRoman
        4: 0,  // langDutch → smRoman
        5: 0,  // langSwedish → smRoman
        6: 0,  // langSpanish → smRoman
        7: 0,  // langDanish → smRoman
        8: 0,  // langPortuguese → smRoman
        9: 0,  // langNorwegian → smRoman
        10: 5,  // langHebrew → smHebrew
        11: 1,  // langJapanese → smJapanese
        12: 4,  // langArabic → smArabic
        13: 0,  // langFinnish → smRoman
        14: 6,  // langGreek → smGreek
        15: 0,  // langIcelandic → smRoman (modified)
        16: 0,  // langMaltese → smRoman
        17: 0,  // langTurkish → smRoman (modified)
        18: 0,  // langCroatian → smRoman (modified)
        19: 2,  // langTradChinese → smTradChinese
        20: 4,  // langUrdu → smArabic
        21: 9,  // langHindi → smDevanagari
        22: 21,  // langThai → smThai
        23: 3,  // langKorean → smKorean
        24: 29,  // langLithuanian → smCentralEuroRoman
        25: 29,  // langPolish → smCentralEuroRoman
        26: 29,  // langHungarian → smCentralEuroRoman
        27: 29,  // langEstonian → smCentralEuroRoman
        28: 29,  // langLatvian → smCentralEuroRoman
        29: 0,  // langSami → smRoman
        30: 0,  // langFaroese → smRoman (modified)
        31: 4,  // langFarsi → smArabic (modified)
        32: 7,  // langRussian → smCyrillic
        33: 25,  // langSimpChinese → smSimpChinese
        34: 0,  // langFlemish → smRoman
        35: 0,  // langIrishGaelic → smRoman (modified)
        36: 0,  // langAlbanian → smRoman
        37: 0,  // langRomanian → smRoman (modified)
        38: 29,  // langCzech → smCentralEuroRoman
        39: 29,  // langSlovak → smCentralEuroRoman
        40: 0,  // langSlovenian → smRoman (modified)
        41: 5,  // langYiddish → smHebrew
        42: 7,  // langSerbian → smCyrillic
        43: 7,  // langMacedonian → smCyrillic
        44: 7,  // langBulgarian → smCyrillic
        45: 7,  // langUkrainian → smCyrillic (modified)
        46: 7,  // langByelorussian → smCyrillic
        47: 7,  // langUzbek → smCyrillic
        48: 7,  // langKazakh → smCyrillic
        49: 7,  // langAzerbaijani → smCyrillic
        50: 4,  // langAzerbaijanAr → smArabic
        51: 24,  // langArmenian → smArmenian
        52: 23,  // langGeorgian → smGeorgian
        53: 7,  // langMoldavian → smCyrillic
        54: 7,  // langKirghiz → smCyrillic
        55: 7,  // langTajiki → smCyrillic
        56: 7,  // langTurkmen → smCyrillic
        57: 27,  // langMongolian → smMongolian
        58: 7,  // langMongolianCyr → smCyrillic
        59: 4,  // langPashto → smArabic
        60: 4,  // langKurdish → smArabic
        61: 4,  // langKashmiri → smArabic
        62: 4,  // langSindhi → smArabic
        63: 26,  // langTibetan → smTibetan
        64: 9,  // langNepali → smDevanagari
        65: 9,  // langSanskrit → smDevanagari
        66: 9,  // langMarathi → smDevanagari
        67: 13,  // langBengali → smBengali
        68: 13,  // langAssamese → smBengali
        69: 11,  // langGujarati → smGujarati
        70: 10,  // langPunjabi → smGurmukhi
        71: 12,  // langOriya → smOriya
        72: 17,  // langMalayalam → smMalayalam
        73: 16,  // langKannada → smKannada
        74: 14,  // langTamil → smTamil
        75: 15,  // langTelugu → smTelugu
        76: 18,  // langSinhalese → smSinhalese
        77: 19,  // langBurmese → smBurmese
        78: 20,  // langKhmer → smKhmer
        79: 22,  // langLao → smLao
        80: 30,  // langVietnamese → smVietnamese
        81: 0,  // langIndonesian → smRoman
        82: 0,  // langTagalog → smRoman
        83: 0,  // langMalayRoman → smRoman
        84: 4,  // langMalayArabic → smArabic
        85: 28,  // langAmharic → smEthiopic
        86: 28,  // langTigrinya → smEthiopic
        87: 28,  // langOromo → smEthiopic
        88: 0,  // langSomali → smRoman
        89: 0,  // langSwahili → smRoman
        90: 0,  // langKinyarwanda → smRoman
        91: 0,  // langRundi → smRoman
        92: 0,  // langNyanja → smRoman
        93: 0,  // langMalagasy → smRoman
        94: 0,  // langEsperanto → smRoman
        128: 0,  // langWelsh → smRoman (modified)
        129: 0,  // langBasque → smRoman
        130: 0,  // langCatalan → smRoman
        131: 0,  // langLatin → smRoman
        132: 0,  // langQuechua → smRoman
        133: 0,  // langGuarani → smRoman
        134: 0,  // langAymara → smRoman
        135: 7,  // langTatar → smCyrillic
        136: 4,  // langUighur → smArabic
        137: 26,  // langDzongkha → smTibetan
        138: 0,  // langJavaneseRom → smRoman
        139: 0,  // langSundaneseRom → smRoman
        140: 0,  // langGalician → smRoman
        141: 0,  // langAfrikaans → smRoman
        142: 0,  // langBreton → smRoman (modified)
        143: 28,  // langInuktitut → smEthiopic (modified)
        144: 0,  // langScottishGaelic → smRoman (modified)
        145: 0,  // langManxGaelic → smRoman (modified)
        146: 0,  // langIrishGaelicScript → smRoman (modified)
        147: 0,  // langTongan → smRoman
        148: 6,  // langGreekAncient → smRoman
        149: 0,  // langGreenlandic → smRoman
        150: 0,  // langAzerbaijanRoman → smRoman
        151: 0   // langNynorsk → smRoman
    };

    // While Microsoft indicates a region/country for all its language
    // IDs, we omit the region code if it's equal to the "most likely
    // region subtag" according to Unicode CLDR. For scripts, we omit
    // the subtag if it is equal to the Suppress-Script entry in the
    // IANA language subtag registry for IETF BCP 47.
    //
    // For example, Microsoft states that its language code 0x041A is
    // Croatian in Croatia. We transform this to the BCP 47 language code 'hr'
    // and not 'hr-HR' because Croatia is the default country for Croatian,
    // according to Unicode CLDR. As another example, Microsoft states
    // that 0x101A is Croatian (Latin) in Bosnia-Herzegovina. We transform
    // this to 'hr-BA' and not 'hr-Latn-BA' because Latin is the default script
    // for the Croatian language, according to IANA.
    //
    // http://www.unicode.org/cldr/charts/latest/supplemental/likely_subtags.html
    // http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry
    const windowsLanguages = {
        0x0436: 'af',
        0x041C: 'sq',
        0x0484: 'gsw',
        0x045E: 'am',
        0x1401: 'ar-DZ',
        0x3C01: 'ar-BH',
        0x0C01: 'ar',
        0x0801: 'ar-IQ',
        0x2C01: 'ar-JO',
        0x3401: 'ar-KW',
        0x3001: 'ar-LB',
        0x1001: 'ar-LY',
        0x1801: 'ary',
        0x2001: 'ar-OM',
        0x4001: 'ar-QA',
        0x0401: 'ar-SA',
        0x2801: 'ar-SY',
        0x1C01: 'aeb',
        0x3801: 'ar-AE',
        0x2401: 'ar-YE',
        0x042B: 'hy',
        0x044D: 'as',
        0x082C: 'az-Cyrl',
        0x042C: 'az',
        0x046D: 'ba',
        0x042D: 'eu',
        0x0423: 'be',
        0x0845: 'bn',
        0x0445: 'bn-IN',
        0x201A: 'bs-Cyrl',
        0x141A: 'bs',
        0x047E: 'br',
        0x0402: 'bg',
        0x0403: 'ca',
        0x0C04: 'zh-HK',
        0x1404: 'zh-MO',
        0x0804: 'zh',
        0x1004: 'zh-SG',
        0x0404: 'zh-TW',
        0x0483: 'co',
        0x041A: 'hr',
        0x101A: 'hr-BA',
        0x0405: 'cs',
        0x0406: 'da',
        0x048C: 'prs',
        0x0465: 'dv',
        0x0813: 'nl-BE',
        0x0413: 'nl',
        0x0C09: 'en-AU',
        0x2809: 'en-BZ',
        0x1009: 'en-CA',
        0x2409: 'en-029',
        0x4009: 'en-IN',
        0x1809: 'en-IE',
        0x2009: 'en-JM',
        0x4409: 'en-MY',
        0x1409: 'en-NZ',
        0x3409: 'en-PH',
        0x4809: 'en-SG',
        0x1C09: 'en-ZA',
        0x2C09: 'en-TT',
        0x0809: 'en-GB',
        0x0409: 'en',
        0x3009: 'en-ZW',
        0x0425: 'et',
        0x0438: 'fo',
        0x0464: 'fil',
        0x040B: 'fi',
        0x080C: 'fr-BE',
        0x0C0C: 'fr-CA',
        0x040C: 'fr',
        0x140C: 'fr-LU',
        0x180C: 'fr-MC',
        0x100C: 'fr-CH',
        0x0462: 'fy',
        0x0456: 'gl',
        0x0437: 'ka',
        0x0C07: 'de-AT',
        0x0407: 'de',
        0x1407: 'de-LI',
        0x1007: 'de-LU',
        0x0807: 'de-CH',
        0x0408: 'el',
        0x046F: 'kl',
        0x0447: 'gu',
        0x0468: 'ha',
        0x040D: 'he',
        0x0439: 'hi',
        0x040E: 'hu',
        0x040F: 'is',
        0x0470: 'ig',
        0x0421: 'id',
        0x045D: 'iu',
        0x085D: 'iu-Latn',
        0x083C: 'ga',
        0x0434: 'xh',
        0x0435: 'zu',
        0x0410: 'it',
        0x0810: 'it-CH',
        0x0411: 'ja',
        0x044B: 'kn',
        0x043F: 'kk',
        0x0453: 'km',
        0x0486: 'quc',
        0x0487: 'rw',
        0x0441: 'sw',
        0x0457: 'kok',
        0x0412: 'ko',
        0x0440: 'ky',
        0x0454: 'lo',
        0x0426: 'lv',
        0x0427: 'lt',
        0x082E: 'dsb',
        0x046E: 'lb',
        0x042F: 'mk',
        0x083E: 'ms-BN',
        0x043E: 'ms',
        0x044C: 'ml',
        0x043A: 'mt',
        0x0481: 'mi',
        0x047A: 'arn',
        0x044E: 'mr',
        0x047C: 'moh',
        0x0450: 'mn',
        0x0850: 'mn-CN',
        0x0461: 'ne',
        0x0414: 'nb',
        0x0814: 'nn',
        0x0482: 'oc',
        0x0448: 'or',
        0x0463: 'ps',
        0x0415: 'pl',
        0x0416: 'pt',
        0x0816: 'pt-PT',
        0x0446: 'pa',
        0x046B: 'qu-BO',
        0x086B: 'qu-EC',
        0x0C6B: 'qu',
        0x0418: 'ro',
        0x0417: 'rm',
        0x0419: 'ru',
        0x243B: 'smn',
        0x103B: 'smj-NO',
        0x143B: 'smj',
        0x0C3B: 'se-FI',
        0x043B: 'se',
        0x083B: 'se-SE',
        0x203B: 'sms',
        0x183B: 'sma-NO',
        0x1C3B: 'sms',
        0x044F: 'sa',
        0x1C1A: 'sr-Cyrl-BA',
        0x0C1A: 'sr',
        0x181A: 'sr-Latn-BA',
        0x081A: 'sr-Latn',
        0x046C: 'nso',
        0x0432: 'tn',
        0x045B: 'si',
        0x041B: 'sk',
        0x0424: 'sl',
        0x2C0A: 'es-AR',
        0x400A: 'es-BO',
        0x340A: 'es-CL',
        0x240A: 'es-CO',
        0x140A: 'es-CR',
        0x1C0A: 'es-DO',
        0x300A: 'es-EC',
        0x440A: 'es-SV',
        0x100A: 'es-GT',
        0x480A: 'es-HN',
        0x080A: 'es-MX',
        0x4C0A: 'es-NI',
        0x180A: 'es-PA',
        0x3C0A: 'es-PY',
        0x280A: 'es-PE',
        0x500A: 'es-PR',

        // Microsoft has defined two different language codes for
        // “Spanish with modern sorting” and “Spanish with traditional
        // sorting”. This makes sense for collation APIs, and it would be
        // possible to express this in BCP 47 language tags via Unicode
        // extensions (eg., es-u-co-trad is Spanish with traditional
        // sorting). However, for storing names in fonts, the distinction
        // does not make sense, so we give “es” in both cases.
        0x0C0A: 'es',
        0x040A: 'es',

        0x540A: 'es-US',
        0x380A: 'es-UY',
        0x200A: 'es-VE',
        0x081D: 'sv-FI',
        0x041D: 'sv',
        0x045A: 'syr',
        0x0428: 'tg',
        0x085F: 'tzm',
        0x0449: 'ta',
        0x0444: 'tt',
        0x044A: 'te',
        0x041E: 'th',
        0x0451: 'bo',
        0x041F: 'tr',
        0x0442: 'tk',
        0x0480: 'ug',
        0x0422: 'uk',
        0x042E: 'hsb',
        0x0420: 'ur',
        0x0843: 'uz-Cyrl',
        0x0443: 'uz',
        0x042A: 'vi',
        0x0452: 'cy',
        0x0488: 'wo',
        0x0485: 'sah',
        0x0478: 'ii',
        0x046A: 'yo'
    };

    // Returns a IETF BCP 47 language code, for example 'zh-Hant'
    // for 'Chinese in the traditional script'.
    function getLanguageCode(platformID, languageID, ltag) {
        switch (platformID) {
            case 0:  // Unicode
                if (languageID === 0xFFFF) {
                    return 'und';
                } else if (ltag) {
                    return ltag[languageID];
                }

                break;

            case 1:  // Macintosh
                return macLanguages[languageID];

            case 3:  // Windows
                return windowsLanguages[languageID];
        }

        return undefined;
    }

    const utf16 = 'utf-16';

    // MacOS script ID → encoding. This table stores the default case,
    // which can be overridden by macLanguageEncodings.
    const macScriptEncodings = {
        0: 'macintosh',           // smRoman
        1: 'x-mac-japanese',      // smJapanese
        2: 'x-mac-chinesetrad',   // smTradChinese
        3: 'x-mac-korean',        // smKorean
        6: 'x-mac-greek',         // smGreek
        7: 'x-mac-cyrillic',      // smCyrillic
        9: 'x-mac-devanagai',     // smDevanagari
        10: 'x-mac-gurmukhi',     // smGurmukhi
        11: 'x-mac-gujarati',     // smGujarati
        12: 'x-mac-oriya',        // smOriya
        13: 'x-mac-bengali',      // smBengali
        14: 'x-mac-tamil',        // smTamil
        15: 'x-mac-telugu',       // smTelugu
        16: 'x-mac-kannada',      // smKannada
        17: 'x-mac-malayalam',    // smMalayalam
        18: 'x-mac-sinhalese',    // smSinhalese
        19: 'x-mac-burmese',      // smBurmese
        20: 'x-mac-khmer',        // smKhmer
        21: 'x-mac-thai',         // smThai
        22: 'x-mac-lao',          // smLao
        23: 'x-mac-georgian',     // smGeorgian
        24: 'x-mac-armenian',     // smArmenian
        25: 'x-mac-chinesesimp',  // smSimpChinese
        26: 'x-mac-tibetan',      // smTibetan
        27: 'x-mac-mongolian',    // smMongolian
        28: 'x-mac-ethiopic',     // smEthiopic
        29: 'x-mac-ce',           // smCentralEuroRoman
        30: 'x-mac-vietnamese',   // smVietnamese
        31: 'x-mac-extarabic'     // smExtArabic
    };

    // MacOS language ID → encoding. This table stores the exceptional
    // cases, which override macScriptEncodings. For writing MacOS naming
    // tables, we need to emit a MacOS script ID. Therefore, we cannot
    // merge macScriptEncodings into macLanguageEncodings.
    //
    // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt
    const macLanguageEncodings = {
        15: 'x-mac-icelandic',    // langIcelandic
        17: 'x-mac-turkish',      // langTurkish
        18: 'x-mac-croatian',     // langCroatian
        24: 'x-mac-ce',           // langLithuanian
        25: 'x-mac-ce',           // langPolish
        26: 'x-mac-ce',           // langHungarian
        27: 'x-mac-ce',           // langEstonian
        28: 'x-mac-ce',           // langLatvian
        30: 'x-mac-icelandic',    // langFaroese
        37: 'x-mac-romanian',     // langRomanian
        38: 'x-mac-ce',           // langCzech
        39: 'x-mac-ce',           // langSlovak
        40: 'x-mac-ce',           // langSlovenian
        143: 'x-mac-inuit',       // langInuktitut
        146: 'x-mac-gaelic'       // langIrishGaelicScript
    };

    function getEncoding(platformID, encodingID, languageID) {
        switch (platformID) {
            case 0:  // Unicode
                return utf16;

            case 1:  // Apple Macintosh
                return macLanguageEncodings[languageID] || macScriptEncodings[encodingID];

            case 3:  // Microsoft Windows
                if (encodingID === 1 || encodingID === 10) {
                    return utf16;
                }

                break;
        }

        return undefined;
    }

    // Parse the naming `name` table.
    // FIXME: Format 1 additional fields are not supported yet.
    // ltag is the content of the `ltag' table, such as ['en', 'zh-Hans', 'de-CH-1904'].
    function parseNameTable(data, start, ltag) {
        const name = {};
        const p = new parse.Parser(data, start);
        const format = p.parseUShort();
        const count = p.parseUShort();
        const stringOffset = p.offset + p.parseUShort();
        for (let i = 0; i < count; i++) {
            const platformID = p.parseUShort();
            const encodingID = p.parseUShort();
            const languageID = p.parseUShort();
            const nameID = p.parseUShort();
            const property = nameTableNames[nameID] || nameID;
            const byteLength = p.parseUShort();
            const offset = p.parseUShort();
            const language = getLanguageCode(platformID, languageID, ltag);
            const encoding = getEncoding(platformID, encodingID, languageID);
            if (encoding !== undefined && language !== undefined) {
                let text;
                if (encoding === utf16) {
                    text = decode.UTF16(data, stringOffset + offset, byteLength);
                } else {
                    text = decode.MACSTRING(data, stringOffset + offset, byteLength, encoding);
                }

                if (text) {
                    let translations = name[property];
                    if (translations === undefined) {
                        translations = name[property] = {};
                    }

                    translations[language] = text;
                }
            }
        }

        let langTagCount = 0;
        if (format === 1) {
            // FIXME: Also handle Microsoft's 'name' table 1.
            langTagCount = p.parseUShort();
        }

        return name;
    }

    // {23: 'foo'} → {'foo': 23}
    // ['bar', 'baz'] → {'bar': 0, 'baz': 1}
    function reverseDict(dict) {
        const result = {};
        for (let key in dict) {
            result[dict[key]] = parseInt(key);
        }

        return result;
    }

    function makeNameRecord(platformID, encodingID, languageID, nameID, length, offset) {
        return new table.Record('NameRecord', [
            {name: 'platformID', type: 'USHORT', value: platformID},
            {name: 'encodingID', type: 'USHORT', value: encodingID},
            {name: 'languageID', type: 'USHORT', value: languageID},
            {name: 'nameID', type: 'USHORT', value: nameID},
            {name: 'length', type: 'USHORT', value: length},
            {name: 'offset', type: 'USHORT', value: offset}
        ]);
    }

    // Finds the position of needle in haystack, or -1 if not there.
    // Like String.indexOf(), but for arrays.
    function findSubArray(needle, haystack) {
        const needleLength = needle.length;
        const limit = haystack.length - needleLength + 1;

        loop:
        for (let pos = 0; pos < limit; pos++) {
            for (; pos < limit; pos++) {
                for (let k = 0; k < needleLength; k++) {
                    if (haystack[pos + k] !== needle[k]) {
                        continue loop;
                    }
                }

                return pos;
            }
        }

        return -1;
    }

    function addStringToPool(s, pool) {
        let offset = findSubArray(s, pool);
        if (offset < 0) {
            offset = pool.length;
            let i = 0;
            const len = s.length;
            for (; i < len; ++i) {
                pool.push(s[i]);
            }

        }

        return offset;
    }

    function makeNameTable(names, ltag) {
        let nameID;
        const nameIDs = [];

        const namesWithNumericKeys = {};
        const nameTableIds = reverseDict(nameTableNames);
        for (let key in names) {
            let id = nameTableIds[key];
            if (id === undefined) {
                id = key;
            }

            nameID = parseInt(id);

            if (isNaN(nameID)) {
                throw new Error('Name table entry "' + key + '" does not exist, see nameTableNames for complete list.');
            }

            namesWithNumericKeys[nameID] = names[key];
            nameIDs.push(nameID);
        }

        const macLanguageIds = reverseDict(macLanguages);
        const windowsLanguageIds = reverseDict(windowsLanguages);

        const nameRecords = [];
        const stringPool = [];

        for (let i = 0; i < nameIDs.length; i++) {
            nameID = nameIDs[i];
            const translations = namesWithNumericKeys[nameID];
            for (let lang in translations) {
                const text = translations[lang];

                // For MacOS, we try to emit the name in the form that was introduced
                // in the initial version of the TrueType spec (in the late 1980s).
                // However, this can fail for various reasons: the requested BCP 47
                // language code might not have an old-style Mac equivalent;
                // we might not have a codec for the needed character encoding;
                // or the name might contain characters that cannot be expressed
                // in the old-style Macintosh encoding. In case of failure, we emit
                // the name in a more modern fashion (Unicode encoding with BCP 47
                // language tags) that is recognized by MacOS 10.5, released in 2009.
                // If fonts were only read by operating systems, we could simply
                // emit all names in the modern form; this would be much easier.
                // However, there are many applications and libraries that read
                // 'name' tables directly, and these will usually only recognize
                // the ancient form (silently skipping the unrecognized names).
                let macPlatform = 1;  // Macintosh
                let macLanguage = macLanguageIds[lang];
                let macScript = macLanguageToScript[macLanguage];
                const macEncoding = getEncoding(macPlatform, macScript, macLanguage);
                let macName = encode.MACSTRING(text, macEncoding);
                if (macName === undefined) {
                    macPlatform = 0;  // Unicode
                    macLanguage = ltag.indexOf(lang);
                    if (macLanguage < 0) {
                        macLanguage = ltag.length;
                        ltag.push(lang);
                    }

                    macScript = 4;  // Unicode 2.0 and later
                    macName = encode.UTF16(text);
                }

                const macNameOffset = addStringToPool(macName, stringPool);
                nameRecords.push(makeNameRecord(macPlatform, macScript, macLanguage,
                                                nameID, macName.length, macNameOffset));

                const winLanguage = windowsLanguageIds[lang];
                if (winLanguage !== undefined) {
                    const winName = encode.UTF16(text);
                    const winNameOffset = addStringToPool(winName, stringPool);
                    nameRecords.push(makeNameRecord(3, 1, winLanguage,
                                                    nameID, winName.length, winNameOffset));
                }
            }
        }

        nameRecords.sort(function(a, b) {
            return ((a.platformID - b.platformID) ||
                    (a.encodingID - b.encodingID) ||
                    (a.languageID - b.languageID) ||
                    (a.nameID - b.nameID));
        });

        const t = new table.Table('name', [
            {name: 'format', type: 'USHORT', value: 0},
            {name: 'count', type: 'USHORT', value: nameRecords.length},
            {name: 'stringOffset', type: 'USHORT', value: 6 + nameRecords.length * 12}
        ]);

        for (let r = 0; r < nameRecords.length; r++) {
            t.fields.push({name: 'record_' + r, type: 'RECORD', value: nameRecords[r]});
        }

        t.fields.push({name: 'strings', type: 'LITERAL', value: stringPool});
        return t;
    }

    var _name = { parse: parseNameTable, make: makeNameTable };

    // The `OS/2` table contains metrics required in OpenType fonts.

    const unicodeRanges = [
        {begin: 0x0000, end: 0x007F}, // Basic Latin
        {begin: 0x0080, end: 0x00FF}, // Latin-1 Supplement
        {begin: 0x0100, end: 0x017F}, // Latin Extended-A
        {begin: 0x0180, end: 0x024F}, // Latin Extended-B
        {begin: 0x0250, end: 0x02AF}, // IPA Extensions
        {begin: 0x02B0, end: 0x02FF}, // Spacing Modifier Letters
        {begin: 0x0300, end: 0x036F}, // Combining Diacritical Marks
        {begin: 0x0370, end: 0x03FF}, // Greek and Coptic
        {begin: 0x2C80, end: 0x2CFF}, // Coptic
        {begin: 0x0400, end: 0x04FF}, // Cyrillic
        {begin: 0x0530, end: 0x058F}, // Armenian
        {begin: 0x0590, end: 0x05FF}, // Hebrew
        {begin: 0xA500, end: 0xA63F}, // Vai
        {begin: 0x0600, end: 0x06FF}, // Arabic
        {begin: 0x07C0, end: 0x07FF}, // NKo
        {begin: 0x0900, end: 0x097F}, // Devanagari
        {begin: 0x0980, end: 0x09FF}, // Bengali
        {begin: 0x0A00, end: 0x0A7F}, // Gurmukhi
        {begin: 0x0A80, end: 0x0AFF}, // Gujarati
        {begin: 0x0B00, end: 0x0B7F}, // Oriya
        {begin: 0x0B80, end: 0x0BFF}, // Tamil
        {begin: 0x0C00, end: 0x0C7F}, // Telugu
        {begin: 0x0C80, end: 0x0CFF}, // Kannada
        {begin: 0x0D00, end: 0x0D7F}, // Malayalam
        {begin: 0x0E00, end: 0x0E7F}, // Thai
        {begin: 0x0E80, end: 0x0EFF}, // Lao
        {begin: 0x10A0, end: 0x10FF}, // Georgian
        {begin: 0x1B00, end: 0x1B7F}, // Balinese
        {begin: 0x1100, end: 0x11FF}, // Hangul Jamo
        {begin: 0x1E00, end: 0x1EFF}, // Latin Extended Additional
        {begin: 0x1F00, end: 0x1FFF}, // Greek Extended
        {begin: 0x2000, end: 0x206F}, // General Punctuation
        {begin: 0x2070, end: 0x209F}, // Superscripts And Subscripts
        {begin: 0x20A0, end: 0x20CF}, // Currency Symbol
        {begin: 0x20D0, end: 0x20FF}, // Combining Diacritical Marks For Symbols
        {begin: 0x2100, end: 0x214F}, // Letterlike Symbols
        {begin: 0x2150, end: 0x218F}, // Number Forms
        {begin: 0x2190, end: 0x21FF}, // Arrows
        {begin: 0x2200, end: 0x22FF}, // Mathematical Operators
        {begin: 0x2300, end: 0x23FF}, // Miscellaneous Technical
        {begin: 0x2400, end: 0x243F}, // Control Pictures
        {begin: 0x2440, end: 0x245F}, // Optical Character Recognition
        {begin: 0x2460, end: 0x24FF}, // Enclosed Alphanumerics
        {begin: 0x2500, end: 0x257F}, // Box Drawing
        {begin: 0x2580, end: 0x259F}, // Block Elements
        {begin: 0x25A0, end: 0x25FF}, // Geometric Shapes
        {begin: 0x2600, end: 0x26FF}, // Miscellaneous Symbols
        {begin: 0x2700, end: 0x27BF}, // Dingbats
        {begin: 0x3000, end: 0x303F}, // CJK Symbols And Punctuation
        {begin: 0x3040, end: 0x309F}, // Hiragana
        {begin: 0x30A0, end: 0x30FF}, // Katakana
        {begin: 0x3100, end: 0x312F}, // Bopomofo
        {begin: 0x3130, end: 0x318F}, // Hangul Compatibility Jamo
        {begin: 0xA840, end: 0xA87F}, // Phags-pa
        {begin: 0x3200, end: 0x32FF}, // Enclosed CJK Letters And Months
        {begin: 0x3300, end: 0x33FF}, // CJK Compatibility
        {begin: 0xAC00, end: 0xD7AF}, // Hangul Syllables
        {begin: 0xD800, end: 0xDFFF}, // Non-Plane 0 *
        {begin: 0x10900, end: 0x1091F}, // Phoenicia
        {begin: 0x4E00, end: 0x9FFF}, // CJK Unified Ideographs
        {begin: 0xE000, end: 0xF8FF}, // Private Use Area (plane 0)
        {begin: 0x31C0, end: 0x31EF}, // CJK Strokes
        {begin: 0xFB00, end: 0xFB4F}, // Alphabetic Presentation Forms
        {begin: 0xFB50, end: 0xFDFF}, // Arabic Presentation Forms-A
        {begin: 0xFE20, end: 0xFE2F}, // Combining Half Marks
        {begin: 0xFE10, end: 0xFE1F}, // Vertical Forms
        {begin: 0xFE50, end: 0xFE6F}, // Small Form Variants
        {begin: 0xFE70, end: 0xFEFF}, // Arabic Presentation Forms-B
        {begin: 0xFF00, end: 0xFFEF}, // Halfwidth And Fullwidth Forms
        {begin: 0xFFF0, end: 0xFFFF}, // Specials
        {begin: 0x0F00, end: 0x0FFF}, // Tibetan
        {begin: 0x0700, end: 0x074F}, // Syriac
        {begin: 0x0780, end: 0x07BF}, // Thaana
        {begin: 0x0D80, end: 0x0DFF}, // Sinhala
        {begin: 0x1000, end: 0x109F}, // Myanmar
        {begin: 0x1200, end: 0x137F}, // Ethiopic
        {begin: 0x13A0, end: 0x13FF}, // Cherokee
        {begin: 0x1400, end: 0x167F}, // Unified Canadian Aboriginal Syllabics
        {begin: 0x1680, end: 0x169F}, // Ogham
        {begin: 0x16A0, end: 0x16FF}, // Runic
        {begin: 0x1780, end: 0x17FF}, // Khmer
        {begin: 0x1800, end: 0x18AF}, // Mongolian
        {begin: 0x2800, end: 0x28FF}, // Braille Patterns
        {begin: 0xA000, end: 0xA48F}, // Yi Syllables
        {begin: 0x1700, end: 0x171F}, // Tagalog
        {begin: 0x10300, end: 0x1032F}, // Old Italic
        {begin: 0x10330, end: 0x1034F}, // Gothic
        {begin: 0x10400, end: 0x1044F}, // Deseret
        {begin: 0x1D000, end: 0x1D0FF}, // Byzantine Musical Symbols
        {begin: 0x1D400, end: 0x1D7FF}, // Mathematical Alphanumeric Symbols
        {begin: 0xFF000, end: 0xFFFFD}, // Private Use (plane 15)
        {begin: 0xFE00, end: 0xFE0F}, // Variation Selectors
        {begin: 0xE0000, end: 0xE007F}, // Tags
        {begin: 0x1900, end: 0x194F}, // Limbu
        {begin: 0x1950, end: 0x197F}, // Tai Le
        {begin: 0x1980, end: 0x19DF}, // New Tai Lue
        {begin: 0x1A00, end: 0x1A1F}, // Buginese
        {begin: 0x2C00, end: 0x2C5F}, // Glagolitic
        {begin: 0x2D30, end: 0x2D7F}, // Tifinagh
        {begin: 0x4DC0, end: 0x4DFF}, // Yijing Hexagram Symbols
        {begin: 0xA800, end: 0xA82F}, // Syloti Nagri
        {begin: 0x10000, end: 0x1007F}, // Linear B Syllabary
        {begin: 0x10140, end: 0x1018F}, // Ancient Greek Numbers
        {begin: 0x10380, end: 0x1039F}, // Ugaritic
        {begin: 0x103A0, end: 0x103DF}, // Old Persian
        {begin: 0x10450, end: 0x1047F}, // Shavian
        {begin: 0x10480, end: 0x104AF}, // Osmanya
        {begin: 0x10800, end: 0x1083F}, // Cypriot Syllabary
        {begin: 0x10A00, end: 0x10A5F}, // Kharoshthi
        {begin: 0x1D300, end: 0x1D35F}, // Tai Xuan Jing Symbols
        {begin: 0x12000, end: 0x123FF}, // Cuneiform
        {begin: 0x1D360, end: 0x1D37F}, // Counting Rod Numerals
        {begin: 0x1B80, end: 0x1BBF}, // Sundanese
        {begin: 0x1C00, end: 0x1C4F}, // Lepcha
        {begin: 0x1C50, end: 0x1C7F}, // Ol Chiki
        {begin: 0xA880, end: 0xA8DF}, // Saurashtra
        {begin: 0xA900, end: 0xA92F}, // Kayah Li
        {begin: 0xA930, end: 0xA95F}, // Rejang
        {begin: 0xAA00, end: 0xAA5F}, // Cham
        {begin: 0x10190, end: 0x101CF}, // Ancient Symbols
        {begin: 0x101D0, end: 0x101FF}, // Phaistos Disc
        {begin: 0x102A0, end: 0x102DF}, // Carian
        {begin: 0x1F030, end: 0x1F09F}  // Domino Tiles
    ];

    function getUnicodeRange(unicode) {
        for (let i = 0; i < unicodeRanges.length; i += 1) {
            const range = unicodeRanges[i];
            if (unicode >= range.begin && unicode < range.end) {
                return i;
            }
        }

        return -1;
    }

    // Parse the OS/2 and Windows metrics `OS/2` table
    function parseOS2Table(data, start) {
        const os2 = {};
        const p = new parse.Parser(data, start);
        os2.version = p.parseUShort();
        os2.xAvgCharWidth = p.parseShort();
        os2.usWeightClass = p.parseUShort();
        os2.usWidthClass = p.parseUShort();
        os2.fsType = p.parseUShort();
        os2.ySubscriptXSize = p.parseShort();
        os2.ySubscriptYSize = p.parseShort();
        os2.ySubscriptXOffset = p.parseShort();
        os2.ySubscriptYOffset = p.parseShort();
        os2.ySuperscriptXSize = p.parseShort();
        os2.ySuperscriptYSize = p.parseShort();
        os2.ySuperscriptXOffset = p.parseShort();
        os2.ySuperscriptYOffset = p.parseShort();
        os2.yStrikeoutSize = p.parseShort();
        os2.yStrikeoutPosition = p.parseShort();
        os2.sFamilyClass = p.parseShort();
        os2.panose = [];
        for (let i = 0; i < 10; i++) {
            os2.panose[i] = p.parseByte();
        }

        os2.ulUnicodeRange1 = p.parseULong();
        os2.ulUnicodeRange2 = p.parseULong();
        os2.ulUnicodeRange3 = p.parseULong();
        os2.ulUnicodeRange4 = p.parseULong();
        os2.achVendID = String.fromCharCode(p.parseByte(), p.parseByte(), p.parseByte(), p.parseByte());
        os2.fsSelection = p.parseUShort();
        os2.usFirstCharIndex = p.parseUShort();
        os2.usLastCharIndex = p.parseUShort();
        os2.sTypoAscender = p.parseShort();
        os2.sTypoDescender = p.parseShort();
        os2.sTypoLineGap = p.parseShort();
        os2.usWinAscent = p.parseUShort();
        os2.usWinDescent = p.parseUShort();
        if (os2.version >= 1) {
            os2.ulCodePageRange1 = p.parseULong();
            os2.ulCodePageRange2 = p.parseULong();
        }

        if (os2.version >= 2) {
            os2.sxHeight = p.parseShort();
            os2.sCapHeight = p.parseShort();
            os2.usDefaultChar = p.parseUShort();
            os2.usBreakChar = p.parseUShort();
            os2.usMaxContent = p.parseUShort();
        }

        return os2;
    }

    function makeOS2Table(options) {
        return new table.Table('OS/2', [
            {name: 'version', type: 'USHORT', value: 0x0003},
            {name: 'xAvgCharWidth', type: 'SHORT', value: 0},
            {name: 'usWeightClass', type: 'USHORT', value: 0},
            {name: 'usWidthClass', type: 'USHORT', value: 0},
            {name: 'fsType', type: 'USHORT', value: 0},
            {name: 'ySubscriptXSize', type: 'SHORT', value: 650},
            {name: 'ySubscriptYSize', type: 'SHORT', value: 699},
            {name: 'ySubscriptXOffset', type: 'SHORT', value: 0},
            {name: 'ySubscriptYOffset', type: 'SHORT', value: 140},
            {name: 'ySuperscriptXSize', type: 'SHORT', value: 650},
            {name: 'ySuperscriptYSize', type: 'SHORT', value: 699},
            {name: 'ySuperscriptXOffset', type: 'SHORT', value: 0},
            {name: 'ySuperscriptYOffset', type: 'SHORT', value: 479},
            {name: 'yStrikeoutSize', type: 'SHORT', value: 49},
            {name: 'yStrikeoutPosition', type: 'SHORT', value: 258},
            {name: 'sFamilyClass', type: 'SHORT', value: 0},
            {name: 'bFamilyType', type: 'BYTE', value: 0},
            {name: 'bSerifStyle', type: 'BYTE', value: 0},
            {name: 'bWeight', type: 'BYTE', value: 0},
            {name: 'bProportion', type: 'BYTE', value: 0},
            {name: 'bContrast', type: 'BYTE', value: 0},
            {name: 'bStrokeVariation', type: 'BYTE', value: 0},
            {name: 'bArmStyle', type: 'BYTE', value: 0},
            {name: 'bLetterform', type: 'BYTE', value: 0},
            {name: 'bMidline', type: 'BYTE', value: 0},
            {name: 'bXHeight', type: 'BYTE', value: 0},
            {name: 'ulUnicodeRange1', type: 'ULONG', value: 0},
            {name: 'ulUnicodeRange2', type: 'ULONG', value: 0},
            {name: 'ulUnicodeRange3', type: 'ULONG', value: 0},
            {name: 'ulUnicodeRange4', type: 'ULONG', value: 0},
            {name: 'achVendID', type: 'CHARARRAY', value: 'XXXX'},
            {name: 'fsSelection', type: 'USHORT', value: 0},
            {name: 'usFirstCharIndex', type: 'USHORT', value: 0},
            {name: 'usLastCharIndex', type: 'USHORT', value: 0},
            {name: 'sTypoAscender', type: 'SHORT', value: 0},
            {name: 'sTypoDescender', type: 'SHORT', value: 0},
            {name: 'sTypoLineGap', type: 'SHORT', value: 0},
            {name: 'usWinAscent', type: 'USHORT', value: 0},
            {name: 'usWinDescent', type: 'USHORT', value: 0},
            {name: 'ulCodePageRange1', type: 'ULONG', value: 0},
            {name: 'ulCodePageRange2', type: 'ULONG', value: 0},
            {name: 'sxHeight', type: 'SHORT', value: 0},
            {name: 'sCapHeight', type: 'SHORT', value: 0},
            {name: 'usDefaultChar', type: 'USHORT', value: 0},
            {name: 'usBreakChar', type: 'USHORT', value: 0},
            {name: 'usMaxContext', type: 'USHORT', value: 0}
        ], options);
    }

    var os2 = { parse: parseOS2Table, make: makeOS2Table, unicodeRanges, getUnicodeRange };

    // The `post` table stores additional PostScript information, such as glyph names.

    // Parse the PostScript `post` table
    function parsePostTable(data, start) {
        const post = {};
        const p = new parse.Parser(data, start);
        post.version = p.parseVersion();
        post.italicAngle = p.parseFixed();
        post.underlinePosition = p.parseShort();
        post.underlineThickness = p.parseShort();
        post.isFixedPitch = p.parseULong();
        post.minMemType42 = p.parseULong();
        post.maxMemType42 = p.parseULong();
        post.minMemType1 = p.parseULong();
        post.maxMemType1 = p.parseULong();
        switch (post.version) {
            case 1:
                post.names = standardNames.slice();
                break;
            case 2:
                post.numberOfGlyphs = p.parseUShort();
                post.glyphNameIndex = new Array(post.numberOfGlyphs);
                for (let i = 0; i < post.numberOfGlyphs; i++) {
                    post.glyphNameIndex[i] = p.parseUShort();
                }

                post.names = [];
                for (let i = 0; i < post.numberOfGlyphs; i++) {
                    if (post.glyphNameIndex[i] >= standardNames.length) {
                        const nameLength = p.parseChar();
                        post.names.push(p.parseString(nameLength));
                    }
                }

                break;
            case 2.5:
                post.numberOfGlyphs = p.parseUShort();
                post.offset = new Array(post.numberOfGlyphs);
                for (let i = 0; i < post.numberOfGlyphs; i++) {
                    post.offset[i] = p.parseChar();
                }

                break;
        }
        return post;
    }

    function makePostTable() {
        return new table.Table('post', [
            {name: 'version', type: 'FIXED', value: 0x00030000},
            {name: 'italicAngle', type: 'FIXED', value: 0},
            {name: 'underlinePosition', type: 'FWORD', value: 0},
            {name: 'underlineThickness', type: 'FWORD', value: 0},
            {name: 'isFixedPitch', type: 'ULONG', value: 0},
            {name: 'minMemType42', type: 'ULONG', value: 0},
            {name: 'maxMemType42', type: 'ULONG', value: 0},
            {name: 'minMemType1', type: 'ULONG', value: 0},
            {name: 'maxMemType1', type: 'ULONG', value: 0}
        ]);
    }

    var post = { parse: parsePostTable, make: makePostTable };

    // The `GSUB` table contains ligatures, among other things.

    const subtableParsers = new Array(9);         // subtableParsers[0] is unused

    // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#SS
    subtableParsers[1] = function parseLookup1() {
        const start = this.offset + this.relativeOffset;
        const substFormat = this.parseUShort();
        if (substFormat === 1) {
            return {
                substFormat: 1,
                coverage: this.parsePointer(Parser.coverage),
                deltaGlyphId: this.parseUShort()
            };
        } else if (substFormat === 2) {
            return {
                substFormat: 2,
                coverage: this.parsePointer(Parser.coverage),
                substitute: this.parseOffset16List()
            };
        }
        check.assert(false, '0x' + start.toString(16) + ': lookup type 1 format must be 1 or 2.');
    };

    // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#MS
    subtableParsers[2] = function parseLookup2() {
        const substFormat = this.parseUShort();
        check.argument(substFormat === 1, 'GSUB Multiple Substitution Subtable identifier-format must be 1');
        return {
            substFormat: substFormat,
            coverage: this.parsePointer(Parser.coverage),
            sequences: this.parseListOfLists()
        };
    };

    // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#AS
    subtableParsers[3] = function parseLookup3() {
        const substFormat = this.parseUShort();
        check.argument(substFormat === 1, 'GSUB Alternate Substitution Subtable identifier-format must be 1');
        return {
            substFormat: substFormat,
            coverage: this.parsePointer(Parser.coverage),
            alternateSets: this.parseListOfLists()
        };
    };

    // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#LS
    subtableParsers[4] = function parseLookup4() {
        const substFormat = this.parseUShort();
        check.argument(substFormat === 1, 'GSUB ligature table identifier-format must be 1');
        return {
            substFormat: substFormat,
            coverage: this.parsePointer(Parser.coverage),
            ligatureSets: this.parseListOfLists(function() {
                return {
                    ligGlyph: this.parseUShort(),
                    components: this.parseUShortList(this.parseUShort() - 1)
                };
            })
        };
    };

    const lookupRecordDesc = {
        sequenceIndex: Parser.uShort,
        lookupListIndex: Parser.uShort
    };

    // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CSF
    subtableParsers[5] = function parseLookup5() {
        const start = this.offset + this.relativeOffset;
        const substFormat = this.parseUShort();

        if (substFormat === 1) {
            return {
                substFormat: substFormat,
                coverage: this.parsePointer(Parser.coverage),
                ruleSets: this.parseListOfLists(function() {
                    const glyphCount = this.parseUShort();
                    const substCount = this.parseUShort();
                    return {
                        input: this.parseUShortList(glyphCount - 1),
                        lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
                    };
                })
            };
        } else if (substFormat === 2) {
            return {
                substFormat: substFormat,
                coverage: this.parsePointer(Parser.coverage),
                classDef: this.parsePointer(Parser.classDef),
                classSets: this.parseListOfLists(function() {
                    const glyphCount = this.parseUShort();
                    const substCount = this.parseUShort();
                    return {
                        classes: this.parseUShortList(glyphCount - 1),
                        lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
                    };
                })
            };
        } else if (substFormat === 3) {
            const glyphCount = this.parseUShort();
            const substCount = this.parseUShort();
            return {
                substFormat: substFormat,
                coverages: this.parseList(glyphCount, Parser.pointer(Parser.coverage)),
                lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
            };
        }
        check.assert(false, '0x' + start.toString(16) + ': lookup type 5 format must be 1, 2 or 3.');
    };

    // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CC
    subtableParsers[6] = function parseLookup6() {
        const start = this.offset + this.relativeOffset;
        const substFormat = this.parseUShort();
        if (substFormat === 1) {
            return {
                substFormat: 1,
                coverage: this.parsePointer(Parser.coverage),
                chainRuleSets: this.parseListOfLists(function() {
                    return {
                        backtrack: this.parseUShortList(),
                        input: this.parseUShortList(this.parseShort() - 1),
                        lookahead: this.parseUShortList(),
                        lookupRecords: this.parseRecordList(lookupRecordDesc)
                    };
                })
            };
        } else if (substFormat === 2) {
            return {
                substFormat: 2,
                coverage: this.parsePointer(Parser.coverage),
                backtrackClassDef: this.parsePointer(Parser.classDef),
                inputClassDef: this.parsePointer(Parser.classDef),
                lookaheadClassDef: this.parsePointer(Parser.classDef),
                chainClassSet: this.parseListOfLists(function() {
                    return {
                        backtrack: this.parseUShortList(),
                        input: this.parseUShortList(this.parseShort() - 1),
                        lookahead: this.parseUShortList(),
                        lookupRecords: this.parseRecordList(lookupRecordDesc)
                    };
                })
            };
        } else if (substFormat === 3) {
            return {
                substFormat: 3,
                backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),
                inputCoverage: this.parseList(Parser.pointer(Parser.coverage)),
                lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),
                lookupRecords: this.parseRecordList(lookupRecordDesc)
            };
        }
        check.assert(false, '0x' + start.toString(16) + ': lookup type 6 format must be 1, 2 or 3.');
    };

    // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#ES
    subtableParsers[7] = function parseLookup7() {
        // Extension Substitution subtable
        const substFormat = this.parseUShort();
        check.argument(substFormat === 1, 'GSUB Extension Substitution subtable identifier-format must be 1');
        const extensionLookupType = this.parseUShort();
        const extensionParser = new Parser(this.data, this.offset + this.parseULong());
        return {
            substFormat: 1,
            lookupType: extensionLookupType,
            extension: subtableParsers[extensionLookupType].call(extensionParser)
        };
    };

    // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#RCCS
    subtableParsers[8] = function parseLookup8() {
        const substFormat = this.parseUShort();
        check.argument(substFormat === 1, 'GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1');
        return {
            substFormat: substFormat,
            coverage: this.parsePointer(Parser.coverage),
            backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),
            lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),
            substitutes: this.parseUShortList()
        };
    };

    // https://www.microsoft.com/typography/OTSPEC/gsub.htm
    function parseGsubTable(data, start) {
        start = start || 0;
        const p = new Parser(data, start);
        const tableVersion = p.parseVersion(1);
        check.argument(tableVersion === 1 || tableVersion === 1.1, 'Unsupported GSUB table version.');
        if (tableVersion === 1) {
            return {
                version: tableVersion,
                scripts: p.parseScriptList(),
                features: p.parseFeatureList(),
                lookups: p.parseLookupList(subtableParsers)
            };
        } else {
            return {
                version: tableVersion,
                scripts: p.parseScriptList(),
                features: p.parseFeatureList(),
                lookups: p.parseLookupList(subtableParsers),
                variations: p.parseFeatureVariationsList()
            };
        }

    }

    // GSUB Writing //////////////////////////////////////////////
    const subtableMakers = new Array(9);

    subtableMakers[1] = function makeLookup1(subtable) {
        if (subtable.substFormat === 1) {
            return new table.Table('substitutionTable', [
                {name: 'substFormat', type: 'USHORT', value: 1},
                {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)},
                {name: 'deltaGlyphID', type: 'USHORT', value: subtable.deltaGlyphId}
            ]);
        } else {
            return new table.Table('substitutionTable', [
                {name: 'substFormat', type: 'USHORT', value: 2},
                {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}
            ].concat(table.ushortList('substitute', subtable.substitute)));
        }
        check.fail('Lookup type 1 substFormat must be 1 or 2.');
    };

    subtableMakers[3] = function makeLookup3(subtable) {
        check.assert(subtable.substFormat === 1, 'Lookup type 3 substFormat must be 1.');
        return new table.Table('substitutionTable', [
            {name: 'substFormat', type: 'USHORT', value: 1},
            {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}
        ].concat(table.tableList('altSet', subtable.alternateSets, function(alternateSet) {
            return new table.Table('alternateSetTable', table.ushortList('alternate', alternateSet));
        })));
    };

    subtableMakers[4] = function makeLookup4(subtable) {
        check.assert(subtable.substFormat === 1, 'Lookup type 4 substFormat must be 1.');
        return new table.Table('substitutionTable', [
            {name: 'substFormat', type: 'USHORT', value: 1},
            {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}
        ].concat(table.tableList('ligSet', subtable.ligatureSets, function(ligatureSet) {
            return new table.Table('ligatureSetTable', table.tableList('ligature', ligatureSet, function(ligature) {
                return new table.Table('ligatureTable',
                    [{name: 'ligGlyph', type: 'USHORT', value: ligature.ligGlyph}]
                    .concat(table.ushortList('component', ligature.components, ligature.components.length + 1))
                );
            }));
        })));
    };

    function makeGsubTable(gsub) {
        return new table.Table('GSUB', [
            {name: 'version', type: 'ULONG', value: 0x10000},
            {name: 'scripts', type: 'TABLE', value: new table.ScriptList(gsub.scripts)},
            {name: 'features', type: 'TABLE', value: new table.FeatureList(gsub.features)},
            {name: 'lookups', type: 'TABLE', value: new table.LookupList(gsub.lookups, subtableMakers)}
        ]);
    }

    var gsub = { parse: parseGsubTable, make: makeGsubTable };

    // The `GPOS` table contains kerning pairs, among other things.

    // Parse the metadata `meta` table.
    // https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6meta.html
    function parseMetaTable(data, start) {
        const p = new parse.Parser(data, start);
        const tableVersion = p.parseULong();
        check.argument(tableVersion === 1, 'Unsupported META table version.');
        p.parseULong(); // flags - currently unused and set to 0
        p.parseULong(); // tableOffset
        const numDataMaps = p.parseULong();

        const tags = {};
        for (let i = 0; i < numDataMaps; i++) {
            const tag = p.parseTag();
            const dataOffset = p.parseULong();
            const dataLength = p.parseULong();
            const text = decode.UTF8(data, start + dataOffset, dataLength);

            tags[tag] = text;
        }
        return tags;
    }

    function makeMetaTable(tags) {
        const numTags = Object.keys(tags).length;
        let stringPool = '';
        const stringPoolOffset = 16 + numTags * 12;

        const result = new table.Table('meta', [
            {name: 'version', type: 'ULONG', value: 1},
            {name: 'flags', type: 'ULONG', value: 0},
            {name: 'offset', type: 'ULONG', value: stringPoolOffset},
            {name: 'numTags', type: 'ULONG', value: numTags}
        ]);

        for (let tag in tags) {
            const pos = stringPool.length;
            stringPool += tags[tag];

            result.fields.push({name: 'tag ' + tag, type: 'TAG', value: tag});
            result.fields.push({name: 'offset ' + tag, type: 'ULONG', value: stringPoolOffset + pos});
            result.fields.push({name: 'length ' + tag, type: 'ULONG', value: tags[tag].length});
        }

        result.fields.push({name: 'stringPool', type: 'CHARARRAY', value: stringPool});

        return result;
    }

    var meta = { parse: parseMetaTable, make: makeMetaTable };

    // The `sfnt` wrapper provides organization for the tables in the font.

    function log2$1(v) {
        return Math.log(v) / Math.log(2) | 0;
    }

    function computeCheckSum(bytes) {
        while (bytes.length % 4 !== 0) {
            bytes.push(0);
        }

        let sum = 0;
        for (let i = 0; i < bytes.length; i += 4) {
            sum += (bytes[i] << 24) +
                (bytes[i + 1] << 16) +
                (bytes[i + 2] << 8) +
                (bytes[i + 3]);
        }

        sum %= Math.pow(2, 32);
        return sum;
    }

    function makeTableRecord(tag, checkSum, offset, length) {
        return new table.Record('Table Record', [
            {name: 'tag', type: 'TAG', value: tag !== undefined ? tag : ''},
            {name: 'checkSum', type: 'ULONG', value: checkSum !== undefined ? checkSum : 0},
            {name: 'offset', type: 'ULONG', value: offset !== undefined ? offset : 0},
            {name: 'length', type: 'ULONG', value: length !== undefined ? length : 0}
        ]);
    }

    function makeSfntTable(tables) {
        const sfnt = new table.Table('sfnt', [
            {name: 'version', type: 'TAG', value: 'OTTO'},
            {name: 'numTables', type: 'USHORT', value: 0},
            {name: 'searchRange', type: 'USHORT', value: 0},
            {name: 'entrySelector', type: 'USHORT', value: 0},
            {name: 'rangeShift', type: 'USHORT', value: 0}
        ]);
        sfnt.tables = tables;
        sfnt.numTables = tables.length;
        const highestPowerOf2 = Math.pow(2, log2$1(sfnt.numTables));
        sfnt.searchRange = 16 * highestPowerOf2;
        sfnt.entrySelector = log2$1(highestPowerOf2);
        sfnt.rangeShift = sfnt.numTables * 16 - sfnt.searchRange;

        const recordFields = [];
        const tableFields = [];

        let offset = sfnt.sizeOf() + (makeTableRecord().sizeOf() * sfnt.numTables);
        while (offset % 4 !== 0) {
            offset += 1;
            tableFields.push({name: 'padding', type: 'BYTE', value: 0});
        }

        for (let i = 0; i < tables.length; i += 1) {
            const t = tables[i];
            check.argument(t.tableName.length === 4, 'Table name' + t.tableName + ' is invalid.');
            const tableLength = t.sizeOf();
            const tableRecord = makeTableRecord(t.tableName, computeCheckSum(t.encode()), offset, tableLength);
            recordFields.push({name: tableRecord.tag + ' Table Record', type: 'RECORD', value: tableRecord});
            tableFields.push({name: t.tableName + ' table', type: 'RECORD', value: t});
            offset += tableLength;
            check.argument(!isNaN(offset), 'Something went wrong calculating the offset.');
            while (offset % 4 !== 0) {
                offset += 1;
                tableFields.push({name: 'padding', type: 'BYTE', value: 0});
            }
        }

        // Table records need to be sorted alphabetically.
        recordFields.sort(function(r1, r2) {
            if (r1.value.tag > r2.value.tag) {
                return 1;
            } else {
                return -1;
            }
        });

        sfnt.fields = sfnt.fields.concat(recordFields);
        sfnt.fields = sfnt.fields.concat(tableFields);
        return sfnt;
    }

    // Get the metrics for a character. If the string has more than one character
    // this function returns metrics for the first available character.
    // You can provide optional fallback metrics if no characters are available.
    function metricsForChar(font, chars, notFoundMetrics) {
        for (let i = 0; i < chars.length; i += 1) {
            const glyphIndex = font.charToGlyphIndex(chars[i]);
            if (glyphIndex > 0) {
                const glyph = font.glyphs.get(glyphIndex);
                return glyph.getMetrics();
            }
        }

        return notFoundMetrics;
    }

    function average$1(vs) {
        let sum = 0;
        for (let i = 0; i < vs.length; i += 1) {
            sum += vs[i];
        }

        return sum / vs.length;
    }

    // Convert the font object to a SFNT data structure.
    // This structure contains all the necessary tables and metadata to create a binary OTF file.
    function fontToSfntTable(font) {
        const xMins = [];
        const yMins = [];
        const xMaxs = [];
        const yMaxs = [];
        const advanceWidths = [];
        const leftSideBearings = [];
        const rightSideBearings = [];
        let firstCharIndex;
        let lastCharIndex = 0;
        let ulUnicodeRange1 = 0;
        let ulUnicodeRange2 = 0;
        let ulUnicodeRange3 = 0;
        let ulUnicodeRange4 = 0;

        for (let i = 0; i < font.glyphs.length; i += 1) {
            const glyph = font.glyphs.get(i);
            const unicode = glyph.unicode | 0;

            if (isNaN(glyph.advanceWidth)) {
                throw new Error('Glyph ' + glyph.name + ' (' + i + '): advanceWidth is not a number.');
            }

            if (firstCharIndex > unicode || firstCharIndex === undefined) {
                // ignore .notdef char
                if (unicode > 0) {
                    firstCharIndex = unicode;
                }
            }

            if (lastCharIndex < unicode) {
                lastCharIndex = unicode;
            }

            const position = os2.getUnicodeRange(unicode);
            if (position < 32) {
                ulUnicodeRange1 |= 1 << position;
            } else if (position < 64) {
                ulUnicodeRange2 |= 1 << position - 32;
            } else if (position < 96) {
                ulUnicodeRange3 |= 1 << position - 64;
            } else if (position < 123) {
                ulUnicodeRange4 |= 1 << position - 96;
            } else {
                throw new Error('Unicode ranges bits > 123 are reserved for internal usage');
            }
            // Skip non-important characters.
            if (glyph.name === '.notdef') continue;
            const metrics = glyph.getMetrics();
            xMins.push(metrics.xMin);
            yMins.push(metrics.yMin);
            xMaxs.push(metrics.xMax);
            yMaxs.push(metrics.yMax);
            leftSideBearings.push(metrics.leftSideBearing);
            rightSideBearings.push(metrics.rightSideBearing);
            advanceWidths.push(glyph.advanceWidth);
        }

        const globals = {
            xMin: Math.min.apply(null, xMins),
            yMin: Math.min.apply(null, yMins),
            xMax: Math.max.apply(null, xMaxs),
            yMax: Math.max.apply(null, yMaxs),
            advanceWidthMax: Math.max.apply(null, advanceWidths),
            advanceWidthAvg: average$1(advanceWidths),
            minLeftSideBearing: Math.min.apply(null, leftSideBearings),
            maxLeftSideBearing: Math.max.apply(null, leftSideBearings),
            minRightSideBearing: Math.min.apply(null, rightSideBearings)
        };
        globals.ascender = font.ascender;
        globals.descender = font.descender;

        const headTable = head.make({
            flags: 3, // 00000011 (baseline for font at y=0; left sidebearing point at x=0)
            unitsPerEm: font.unitsPerEm,
            xMin: globals.xMin,
            yMin: globals.yMin,
            xMax: globals.xMax,
            yMax: globals.yMax,
            lowestRecPPEM: 3,
            createdTimestamp: font.createdTimestamp
        });

        const hheaTable = hhea.make({
            ascender: globals.ascender,
            descender: globals.descender,
            advanceWidthMax: globals.advanceWidthMax,
            minLeftSideBearing: globals.minLeftSideBearing,
            minRightSideBearing: globals.minRightSideBearing,
            xMaxExtent: globals.maxLeftSideBearing + (globals.xMax - globals.xMin),
            numberOfHMetrics: font.glyphs.length
        });

        const maxpTable = maxp.make(font.glyphs.length);

        const os2Table = os2.make({
            xAvgCharWidth: Math.round(globals.advanceWidthAvg),
            usWeightClass: font.tables.os2.usWeightClass,
            usWidthClass: font.tables.os2.usWidthClass,
            usFirstCharIndex: firstCharIndex,
            usLastCharIndex: lastCharIndex,
            ulUnicodeRange1: ulUnicodeRange1,
            ulUnicodeRange2: ulUnicodeRange2,
            ulUnicodeRange3: ulUnicodeRange3,
            ulUnicodeRange4: ulUnicodeRange4,
            fsSelection: font.tables.os2.fsSelection, // REGULAR
            // See http://typophile.com/node/13081 for more info on vertical metrics.
            // We get metrics for typical characters (such as "x" for xHeight).
            // We provide some fallback characters if characters are unavailable: their
            // ordering was chosen experimentally.
            sTypoAscender: globals.ascender,
            sTypoDescender: globals.descender,
            sTypoLineGap: 0,
            usWinAscent: globals.yMax,
            usWinDescent: Math.abs(globals.yMin),
            ulCodePageRange1: 1, // FIXME: hard-code Latin 1 support for now
            sxHeight: metricsForChar(font, 'xyvw', {yMax: Math.round(globals.ascender / 2)}).yMax,
            sCapHeight: metricsForChar(font, 'HIKLEFJMNTZBDPRAGOQSUVWXY', globals).yMax,
            usDefaultChar: font.hasChar(' ') ? 32 : 0, // Use space as the default character, if available.
            usBreakChar: font.hasChar(' ') ? 32 : 0 // Use space as the break character, if available.
        });

        const hmtxTable = hmtx.make(font.glyphs);
        const cmapTable = cmap.make(font.glyphs);

        const englishFamilyName = font.getEnglishName('fontFamily');
        const englishStyleName = font.getEnglishName('fontSubfamily');
        const englishFullName = englishFamilyName + ' ' + englishStyleName;
        let postScriptName = font.getEnglishName('postScriptName');
        if (!postScriptName) {
            postScriptName = englishFamilyName.replace(/\s/g, '') + '-' + englishStyleName;
        }

        const names = {};
        for (let n in font.names) {
            names[n] = font.names[n];
        }

        if (!names.uniqueID) {
            names.uniqueID = {en: font.getEnglishName('manufacturer') + ':' + englishFullName};
        }

        if (!names.postScriptName) {
            names.postScriptName = {en: postScriptName};
        }

        if (!names.preferredFamily) {
            names.preferredFamily = font.names.fontFamily;
        }

        if (!names.preferredSubfamily) {
            names.preferredSubfamily = font.names.fontSubfamily;
        }

        const languageTags = [];
        const nameTable = _name.make(names, languageTags);
        const ltagTable = (languageTags.length > 0 ? ltag.make(languageTags) : undefined);

        const postTable = post.make();
        const cffTable = cff.make(font.glyphs, {
            version: font.getEnglishName('version'),
            fullName: englishFullName,
            familyName: englishFamilyName,
            weightName: englishStyleName,
            postScriptName: postScriptName,
            unitsPerEm: font.unitsPerEm,
            fontBBox: [0, globals.yMin, globals.ascender, globals.advanceWidthMax]
        });

        const metaTable = (font.metas && Object.keys(font.metas).length > 0) ? meta.make(font.metas) : undefined;

        // The order does not matter because makeSfntTable() will sort them.
        const tables = [headTable, hheaTable, maxpTable, os2Table, nameTable, cmapTable, postTable, cffTable, hmtxTable];
        if (ltagTable) {
            tables.push(ltagTable);
        }
        // Optional tables
        if (font.tables.gsub) {
            tables.push(gsub.make(font.tables.gsub));
        }
        if (metaTable) {
            tables.push(metaTable);
        }

        const sfntTable = makeSfntTable(tables);

        // Compute the font's checkSum and store it in head.checkSumAdjustment.
        const bytes = sfntTable.encode();
        const checkSum = computeCheckSum(bytes);
        const tableFields = sfntTable.fields;
        let checkSumAdjusted = false;
        for (let i = 0; i < tableFields.length; i += 1) {
            if (tableFields[i].name === 'head table') {
                tableFields[i].value.checkSumAdjustment = 0xB1B0AFBA - checkSum;
                checkSumAdjusted = true;
                break;
            }
        }

        if (!checkSumAdjusted) {
            throw new Error('Could not find head table with checkSum to adjust.');
        }

        return sfntTable;
    }

    var sfnt = { make: makeSfntTable, fontToTable: fontToSfntTable, computeCheckSum };

    // The Layout object is the prototype of Substitution objects, and provides

    function searchTag(arr, tag) {
        /* jshint bitwise: false */
        let imin = 0;
        let imax = arr.length - 1;
        while (imin <= imax) {
            const imid = (imin + imax) >>> 1;
            const val = arr[imid].tag;
            if (val === tag) {
                return imid;
            } else if (val < tag) {
                imin = imid + 1;
            } else { imax = imid - 1; }
        }
        // Not found: return -1-insertion point
        return -imin - 1;
    }

    function binSearch(arr, value) {
        /* jshint bitwise: false */
        let imin = 0;
        let imax = arr.length - 1;
        while (imin <= imax) {
            const imid = (imin + imax) >>> 1;
            const val = arr[imid];
            if (val === value) {
                return imid;
            } else if (val < value) {
                imin = imid + 1;
            } else { imax = imid - 1; }
        }
        // Not found: return -1-insertion point
        return -imin - 1;
    }

    // binary search in a list of ranges (coverage, class definition)
    function searchRange(ranges, value) {
        // jshint bitwise: false
        let range;
        let imin = 0;
        let imax = ranges.length - 1;
        while (imin <= imax) {
            const imid = (imin + imax) >>> 1;
            range = ranges[imid];
            const start = range.start;
            if (start === value) {
                return range;
            } else if (start < value) {
                imin = imid + 1;
            } else { imax = imid - 1; }
        }
        if (imin > 0) {
            range = ranges[imin - 1];
            if (value > range.end) return 0;
            return range;
        }
    }

    /**
     * @exports opentype.Layout
     * @class
     */
    function Layout(font, tableName) {
        this.font = font;
        this.tableName = tableName;
    }

    Layout.prototype = {

        /**
         * Binary search an object by "tag" property
         * @instance
         * @function searchTag
         * @memberof opentype.Layout
         * @param  {Array} arr
         * @param  {string} tag
         * @return {number}
         */
        searchTag: searchTag,

        /**
         * Binary search in a list of numbers
         * @instance
         * @function binSearch
         * @memberof opentype.Layout
         * @param  {Array} arr
         * @param  {number} value
         * @return {number}
         */
        binSearch: binSearch,

        /**
         * Get or create the Layout table (GSUB, GPOS etc).
         * @param  {boolean} create - Whether to create a new one.
         * @return {Object} The GSUB or GPOS table.
         */
        getTable: function(create) {
            let layout = this.font.tables[this.tableName];
            if (!layout && create) {
                layout = this.font.tables[this.tableName] = this.createDefaultTable();
            }
            return layout;
        },

        /**
         * Returns all scripts in the substitution table.
         * @instance
         * @return {Array}
         */
        getScriptNames: function() {
            let layout = this.getTable();
            if (!layout) { return []; }
            return layout.scripts.map(function(script) {
                return script.tag;
            });
        },

        /**
         * Returns the best bet for a script name.
         * Returns 'DFLT' if it exists.
         * If not, returns 'latn' if it exists.
         * If neither exist, returns undefined.
         */
        getDefaultScriptName: function() {
            let layout = this.getTable();
            if (!layout) { return; }
            let hasLatn = false;
            for (let i = 0; i < layout.scripts.length; i++) {
                const name = layout.scripts[i].tag;
                if (name === 'DFLT') return name;
                if (name === 'latn') hasLatn = true;
            }
            if (hasLatn) return 'latn';
        },

        /**
         * Returns all LangSysRecords in the given script.
         * @instance
         * @param {string} [script='DFLT']
         * @param {boolean} create - forces the creation of this script table if it doesn't exist.
         * @return {Object} An object with tag and script properties.
         */
        getScriptTable: function(script, create) {
            const layout = this.getTable(create);
            if (layout) {
                script = script || 'DFLT';
                const scripts = layout.scripts;
                const pos = searchTag(layout.scripts, script);
                if (pos >= 0) {
                    return scripts[pos].script;
                } else if (create) {
                    const scr = {
                        tag: script,
                        script: {
                            defaultLangSys: {reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: []},
                            langSysRecords: []
                        }
                    };
                    scripts.splice(-1 - pos, 0, scr);
                    return scr.script;
                }
            }
        },

        /**
         * Returns a language system table
         * @instance
         * @param {string} [script='DFLT']
         * @param {string} [language='dlft']
         * @param {boolean} create - forces the creation of this langSysTable if it doesn't exist.
         * @return {Object}
         */
        getLangSysTable: function(script, language, create) {
            const scriptTable = this.getScriptTable(script, create);
            if (scriptTable) {
                if (!language || language === 'dflt' || language === 'DFLT') {
                    return scriptTable.defaultLangSys;
                }
                const pos = searchTag(scriptTable.langSysRecords, language);
                if (pos >= 0) {
                    return scriptTable.langSysRecords[pos].langSys;
                } else if (create) {
                    const langSysRecord = {
                        tag: language,
                        langSys: {reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: []}
                    };
                    scriptTable.langSysRecords.splice(-1 - pos, 0, langSysRecord);
                    return langSysRecord.langSys;
                }
            }
        },

        /**
         * Get a specific feature table.
         * @instance
         * @param {string} [script='DFLT']
         * @param {string} [language='dlft']
         * @param {string} feature - One of the codes listed at https://www.microsoft.com/typography/OTSPEC/featurelist.htm
         * @param {boolean} create - forces the creation of the feature table if it doesn't exist.
         * @return {Object}
         */
        getFeatureTable: function(script, language, feature, create) {
            const langSysTable = this.getLangSysTable(script, language, create);
            if (langSysTable) {
                let featureRecord;
                const featIndexes = langSysTable.featureIndexes;
                const allFeatures = this.font.tables[this.tableName].features;
                // The FeatureIndex array of indices is in arbitrary order,
                // even if allFeatures is sorted alphabetically by feature tag.
                for (let i = 0; i < featIndexes.length; i++) {
                    featureRecord = allFeatures[featIndexes[i]];
                    if (featureRecord.tag === feature) {
                        return featureRecord.feature;
                    }
                }
                if (create) {
                    const index = allFeatures.length;
                    // Automatic ordering of features would require to shift feature indexes in the script list.
                    check.assert(index === 0 || feature >= allFeatures[index - 1].tag, 'Features must be added in alphabetical order.');
                    featureRecord = {
                        tag: feature,
                        feature: { params: 0, lookupListIndexes: [] }
                    };
                    allFeatures.push(featureRecord);
                    featIndexes.push(index);
                    return featureRecord.feature;
                }
            }
        },

        /**
         * Get the lookup tables of a given type for a script/language/feature.
         * @instance
         * @param {string} [script='DFLT']
         * @param {string} [language='dlft']
         * @param {string} feature - 4-letter feature code
         * @param {number} lookupType - 1 to 9
         * @param {boolean} create - forces the creation of the lookup table if it doesn't exist, with no subtables.
         * @return {Object[]}
         */
        getLookupTables: function(script, language, feature, lookupType, create) {
            const featureTable = this.getFeatureTable(script, language, feature, create);
            const tables = [];
            if (featureTable) {
                let lookupTable;
                const lookupListIndexes = featureTable.lookupListIndexes;
                const allLookups = this.font.tables[this.tableName].lookups;
                // lookupListIndexes are in no particular order, so use naive search.
                for (let i = 0; i < lookupListIndexes.length; i++) {
                    lookupTable = allLookups[lookupListIndexes[i]];
                    if (lookupTable.lookupType === lookupType) {
                        tables.push(lookupTable);
                    }
                }
                if (tables.length === 0 && create) {
                    lookupTable = {
                        lookupType: lookupType,
                        lookupFlag: 0,
                        subtables: [],
                        markFilteringSet: undefined
                    };
                    const index = allLookups.length;
                    allLookups.push(lookupTable);
                    lookupListIndexes.push(index);
                    return [lookupTable];
                }
            }
            return tables;
        },

        /**
         * Find a glyph in a class definition table
         * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#class-definition-table
         * @param {object} classDefTable - an OpenType Layout class definition table
         * @param {number} glyphIndex - the index of the glyph to find
         * @returns {number} -1 if not found
         */
        getGlyphClass: function(classDefTable, glyphIndex) {
            switch (classDefTable.format) {
                case 1:
                    if (classDefTable.startGlyph <= glyphIndex && glyphIndex < classDefTable.startGlyph + classDefTable.classes.length) {
                        return classDefTable.classes[glyphIndex - classDefTable.startGlyph];
                    }
                    return 0;
                case 2:
                    const range = searchRange(classDefTable.ranges, glyphIndex);
                    return range ? range.classId : 0;
            }
        },

        /**
         * Find a glyph in a coverage table
         * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#coverage-table
         * @param {object} coverageTable - an OpenType Layout coverage table
         * @param {number} glyphIndex - the index of the glyph to find
         * @returns {number} -1 if not found
         */
        getCoverageIndex: function(coverageTable, glyphIndex) {
            switch (coverageTable.format) {
                case 1:
                    const index = binSearch(coverageTable.glyphs, glyphIndex);
                    return index >= 0 ? index : -1;
                case 2:
                    const range = searchRange(coverageTable.ranges, glyphIndex);
                    return range ? range.index + glyphIndex - range.start : -1;
            }
        },

        /**
         * Returns the list of glyph indexes of a coverage table.
         * Format 1: the list is stored raw
         * Format 2: compact list as range records.
         * @instance
         * @param  {Object} coverageTable
         * @return {Array}
         */
        expandCoverage: function(coverageTable) {
            if (coverageTable.format === 1) {
                return coverageTable.glyphs;
            } else {
                const glyphs = [];
                const ranges = coverageTable.ranges;
                for (let i = 0; i < ranges.length; i++) {
                    const range = ranges[i];
                    const start = range.start;
                    const end = range.end;
                    for (let j = start; j <= end; j++) {
                        glyphs.push(j);
                    }
                }
                return glyphs;
            }
        }

    };

    // The Position object provides utility methods to manipulate

    /**
     * @exports opentype.Position
     * @class
     * @extends opentype.Layout
     * @param {opentype.Font}
     * @constructor
     */
    function Position(font) {
        Layout.call(this, font, 'gpos');
    }

    Position.prototype = Layout.prototype;

    /**
     * Find a glyph pair in a list of lookup tables of type 2 and retrieve the xAdvance kerning value.
     *
     * @param {integer} leftIndex - left glyph index
     * @param {integer} rightIndex - right glyph index
     * @returns {integer}
     */
    Position.prototype.getKerningValue = function(kerningLookups, leftIndex, rightIndex) {
        for (let i = 0; i < kerningLookups.length; i++) {
            const subtables = kerningLookups[i].subtables;
            for (let j = 0; j < subtables.length; j++) {
                const subtable = subtables[j];
                const covIndex = this.getCoverageIndex(subtable.coverage, leftIndex);
                if (covIndex < 0) continue;
                switch (subtable.posFormat) {
                    case 1:
                        // Search Pair Adjustment Positioning Format 1
                        let pairSet = subtable.pairSets[covIndex];
                        for (let k = 0; k < pairSet.length; k++) {
                            let pair = pairSet[k];
                            if (pair.secondGlyph === rightIndex) {
                                return pair.value1 && pair.value1.xAdvance || 0;
                            }
                        }
                        break;      // left glyph found, not right glyph - try next subtable
                    case 2:
                        // Search Pair Adjustment Positioning Format 2
                        const class1 = this.getGlyphClass(subtable.classDef1, leftIndex);
                        const class2 = this.getGlyphClass(subtable.classDef2, rightIndex);
                        const pair = subtable.classRecords[class1][class2];
                        return pair.value1 && pair.value1.xAdvance || 0;
                }
            }
        }
        return 0;
    };

    /**
     * List all kerning lookup tables.
     *
     * @param {string} [script='DFLT'] - use font.position.getDefaultScriptName() for a better default value
     * @param {string} [language='dflt']
     * @return {object[]} The list of kerning lookup tables (may be empty), or undefined if there is no GPOS table (and we should use the kern table)
     */
    Position.prototype.getKerningTables = function(script, language) {
        if (this.font.tables.gpos) {
            return this.getLookupTables(script, language, 'kern', 2);
        }
    };

    // The Substitution object provides utility methods to manipulate

    /**
     * @exports opentype.Substitution
     * @class
     * @extends opentype.Layout
     * @param {opentype.Font}
     * @constructor
     */
    function Substitution(font) {
        Layout.call(this, font, 'gsub');
    }

    // Check if 2 arrays of primitives are equal.
    function arraysEqual(ar1, ar2) {
        const n = ar1.length;
        if (n !== ar2.length) { return false; }
        for (let i = 0; i < n; i++) {
            if (ar1[i] !== ar2[i]) { return false; }
        }
        return true;
    }

    // Find the first subtable of a lookup table in a particular format.
    function getSubstFormat(lookupTable, format, defaultSubtable) {
        const subtables = lookupTable.subtables;
        for (let i = 0; i < subtables.length; i++) {
            const subtable = subtables[i];
            if (subtable.substFormat === format) {
                return subtable;
            }
        }
        if (defaultSubtable) {
            subtables.push(defaultSubtable);
            return defaultSubtable;
        }
        return undefined;
    }

    Substitution.prototype = Layout.prototype;

    /**
     * Create a default GSUB table.
     * @return {Object} gsub - The GSUB table.
     */
    Substitution.prototype.createDefaultTable = function() {
        // Generate a default empty GSUB table with just a DFLT script and dflt lang sys.
        return {
            version: 1,
            scripts: [{
                tag: 'DFLT',
                script: {
                    defaultLangSys: { reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: [] },
                    langSysRecords: []
                }
            }],
            features: [],
            lookups: []
        };
    };

    /**
     * List all single substitutions (lookup type 1) for a given script, language, and feature.
     * @param {string} [script='DFLT']
     * @param {string} [language='dflt']
     * @param {string} feature - 4-character feature name ('aalt', 'salt', 'ss01'...)
     * @return {Array} substitutions - The list of substitutions.
     */
    Substitution.prototype.getSingle = function(feature, script, language) {
        const substitutions = [];
        const lookupTables = this.getLookupTables(script, language, feature, 1);
        for (let idx = 0; idx < lookupTables.length; idx++) {
            const subtables = lookupTables[idx].subtables;
            for (let i = 0; i < subtables.length; i++) {
                const subtable = subtables[i];
                const glyphs = this.expandCoverage(subtable.coverage);
                let j;
                if (subtable.substFormat === 1) {
                    const delta = subtable.deltaGlyphId;
                    for (j = 0; j < glyphs.length; j++) {
                        const glyph = glyphs[j];
                        substitutions.push({ sub: glyph, by: glyph + delta });
                    }
                } else {
                    const substitute = subtable.substitute;
                    for (j = 0; j < glyphs.length; j++) {
                        substitutions.push({ sub: glyphs[j], by: substitute[j] });
                    }
                }
            }
        }
        return substitutions;
    };

    /**
     * List all alternates (lookup type 3) for a given script, language, and feature.
     * @param {string} [script='DFLT']
     * @param {string} [language='dflt']
     * @param {string} feature - 4-character feature name ('aalt', 'salt'...)
     * @return {Array} alternates - The list of alternates
     */
    Substitution.prototype.getAlternates = function(feature, script, language) {
        const alternates = [];
        const lookupTables = this.getLookupTables(script, language, feature, 3);
        for (let idx = 0; idx < lookupTables.length; idx++) {
            const subtables = lookupTables[idx].subtables;
            for (let i = 0; i < subtables.length; i++) {
                const subtable = subtables[i];
                const glyphs = this.expandCoverage(subtable.coverage);
                const alternateSets = subtable.alternateSets;
                for (let j = 0; j < glyphs.length; j++) {
                    alternates.push({ sub: glyphs[j], by: alternateSets[j] });
                }
            }
        }
        return alternates;
    };

    /**
     * List all ligatures (lookup type 4) for a given script, language, and feature.
     * The result is an array of ligature objects like { sub: [ids], by: id }
     * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
     * @param {string} [script='DFLT']
     * @param {string} [language='dflt']
     * @return {Array} ligatures - The list of ligatures.
     */
    Substitution.prototype.getLigatures = function(feature, script, language) {
        const ligatures = [];
        const lookupTables = this.getLookupTables(script, language, feature, 4);
        for (let idx = 0; idx < lookupTables.length; idx++) {
            const subtables = lookupTables[idx].subtables;
            for (let i = 0; i < subtables.length; i++) {
                const subtable = subtables[i];
                const glyphs = this.expandCoverage(subtable.coverage);
                const ligatureSets = subtable.ligatureSets;
                for (let j = 0; j < glyphs.length; j++) {
                    const startGlyph = glyphs[j];
                    const ligSet = ligatureSets[j];
                    for (let k = 0; k < ligSet.length; k++) {
                        const lig = ligSet[k];
                        ligatures.push({
                            sub: [startGlyph].concat(lig.components),
                            by: lig.ligGlyph
                        });
                    }
                }
            }
        }
        return ligatures;
    };

    /**
     * Add or modify a single substitution (lookup type 1)
     * Format 2, more flexible, is always used.
     * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
     * @param {Object} substitution - { sub: id, delta: number } for format 1 or { sub: id, by: id } for format 2.
     * @param {string} [script='DFLT']
     * @param {string} [language='dflt']
     */
    Substitution.prototype.addSingle = function(feature, substitution, script, language) {
        const lookupTable = this.getLookupTables(script, language, feature, 1, true)[0];
        const subtable = getSubstFormat(lookupTable, 2, {                // lookup type 1 subtable, format 2, coverage format 1
            substFormat: 2,
            coverage: {format: 1, glyphs: []},
            substitute: []
        });
        check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);
        const coverageGlyph = substitution.sub;
        let pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
        if (pos < 0) {
            pos = -1 - pos;
            subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
            subtable.substitute.splice(pos, 0, 0);
        }
        subtable.substitute[pos] = substitution.by;
    };

    /**
     * Add or modify an alternate substitution (lookup type 1)
     * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
     * @param {Object} substitution - { sub: id, by: [ids] }
     * @param {string} [script='DFLT']
     * @param {string} [language='dflt']
     */
    Substitution.prototype.addAlternate = function(feature, substitution, script, language) {
        const lookupTable = this.getLookupTables(script, language, feature, 3, true)[0];
        const subtable = getSubstFormat(lookupTable, 1, {                // lookup type 3 subtable, format 1, coverage format 1
            substFormat: 1,
            coverage: {format: 1, glyphs: []},
            alternateSets: []
        });
        check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);
        const coverageGlyph = substitution.sub;
        let pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
        if (pos < 0) {
            pos = -1 - pos;
            subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
            subtable.alternateSets.splice(pos, 0, 0);
        }
        subtable.alternateSets[pos] = substitution.by;
    };

    /**
     * Add a ligature (lookup type 4)
     * Ligatures with more components must be stored ahead of those with fewer components in order to be found
     * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
     * @param {Object} ligature - { sub: [ids], by: id }
     * @param {string} [script='DFLT']
     * @param {string} [language='dflt']
     */
    Substitution.prototype.addLigature = function(feature, ligature, script, language) {
        const lookupTable = this.getLookupTables(script, language, feature, 4, true)[0];
        let subtable = lookupTable.subtables[0];
        if (!subtable) {
            subtable = {                // lookup type 4 subtable, format 1, coverage format 1
                substFormat: 1,
                coverage: { format: 1, glyphs: [] },
                ligatureSets: []
            };
            lookupTable.subtables[0] = subtable;
        }
        check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);
        const coverageGlyph = ligature.sub[0];
        const ligComponents = ligature.sub.slice(1);
        const ligatureTable = {
            ligGlyph: ligature.by,
            components: ligComponents
        };
        let pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
        if (pos >= 0) {
            // ligatureSet already exists
            const ligatureSet = subtable.ligatureSets[pos];
            for (let i = 0; i < ligatureSet.length; i++) {
                // If ligature already exists, return.
                if (arraysEqual(ligatureSet[i].components, ligComponents)) {
                    return;
                }
            }
            // ligature does not exist: add it.
            ligatureSet.push(ligatureTable);
        } else {
            // Create a new ligatureSet and add coverage for the first glyph.
            pos = -1 - pos;
            subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
            subtable.ligatureSets.splice(pos, 0, [ligatureTable]);
        }
    };

    /**
     * List all feature data for a given script and language.
     * @param {string} feature - 4-letter feature name
     * @param {string} [script='DFLT']
     * @param {string} [language='dflt']
     * @return {Array} substitutions - The list of substitutions.
     */
    Substitution.prototype.getFeature = function(feature, script, language) {
        if (/ss\d\d/.test(feature)) {
            // ss01 - ss20
            return this.getSingle(feature, script, language);
        }
        switch (feature) {
            case 'aalt':
            case 'salt':
                return this.getSingle(feature, script, language)
                        .concat(this.getAlternates(feature, script, language));
            case 'dlig':
            case 'liga':
            case 'rlig': return this.getLigatures(feature, script, language);
        }
        return undefined;
    };

    /**
     * Add a substitution to a feature for a given script and language.
     * @param {string} feature - 4-letter feature name
     * @param {Object} sub - the substitution to add (an object like { sub: id or [ids], by: id or [ids] })
     * @param {string} [script='DFLT']
     * @param {string} [language='dflt']
     */
    Substitution.prototype.add = function(feature, sub, script, language) {
        if (/ss\d\d/.test(feature)) {
            // ss01 - ss20
            return this.addSingle(feature, sub, script, language);
        }
        switch (feature) {
            case 'aalt':
            case 'salt':
                if (typeof sub.by === 'number') {
                    return this.addSingle(feature, sub, script, language);
                }
                return this.addAlternate(feature, sub, script, language);
            case 'dlig':
            case 'liga':
            case 'rlig':
                return this.addLigature(feature, sub, script, language);
        }
        return undefined;
    };

    function isBrowser() {
        return typeof window !== 'undefined';
    }

    function nodeBufferToArrayBuffer(buffer) {
        const ab = new ArrayBuffer(buffer.length);
        const view = new Uint8Array(ab);
        for (let i = 0; i < buffer.length; ++i) {
            view[i] = buffer[i];
        }

        return ab;
    }

    function arrayBufferToNodeBuffer(ab) {
        const buffer = new Buffer(ab.byteLength);
        const view = new Uint8Array(ab);
        for (let i = 0; i < buffer.length; ++i) {
            buffer[i] = view[i];
        }

        return buffer;
    }

    function checkArgument(expression, message) {
        if (!expression) {
            throw message;
        }
    }

    /* A TrueType font hinting interpreter.
    *
    * (c) 2017 Axel Kittenberger
    *
    * This interpreter has been implemented according to this documentation:
    * https://developer.apple.com/fonts/TrueType-Reference-Manual/RM05/Chap5.html
    *
    * According to the documentation F24DOT6 values are used for pixels.
    * That means calculation is 1/64 pixel accurate and uses integer operations.
    * However, Javascript has floating point operations by default and only
    * those are available. One could make a case to simulate the 1/64 accuracy
    * exactly by truncating after every division operation
    * (for example with << 0) to get pixel exactly results as other TrueType
    * implementations. It may make sense since some fonts are pixel optimized
    * by hand using DELTAP instructions. The current implementation doesn't
    * and rather uses full floating point precision.
    *
    * xScale, yScale and rotation is currently ignored.
    *
    * A few non-trivial instructions are missing as I didn't encounter yet
    * a font that used them to test a possible implementation.
    *
    * Some fonts seem to use undocumented features regarding the twilight zone.
    * Only some of them are implemented as they were encountered.
    *
    * The exports.DEBUG statements are removed on the minified distribution file.
    */

    let instructionTable;
    let exec;
    let execGlyph;
    let execComponent;

    /*
    * Creates a hinting object.
    *
    * There ought to be exactly one
    * for each truetype font that is used for hinting.
    */
    function Hinting(font) {
        // the font this hinting object is for
        this.font = font;

        // cached states
        this._fpgmState  =
        this._prepState  =
            undefined;

        // errorState
        // 0 ... all okay
        // 1 ... had an error in a glyf,
        //       continue working but stop spamming
        //       the console
        // 2 ... error at prep, stop hinting at this ppem
        // 3 ... error at fpeg, stop hinting for this font at all
        this._errorState = 0;
    }

    /*
    * Not rounding.
    */
    function roundOff(v) {
        return v;
    }

    /*
    * Rounding to grid.
    */
    function roundToGrid(v) {
        //Rounding in TT is supposed to "symmetrical around zero"
        return Math.sign(v) * Math.round(Math.abs(v));
    }

    /*
    * Rounding to double grid.
    */
    function roundToDoubleGrid(v) {
        return Math.sign(v) * Math.round(Math.abs(v * 2)) / 2;
    }

    /*
    * Rounding to half grid.
    */
    function roundToHalfGrid(v) {
        return Math.sign(v) * (Math.round(Math.abs(v) + 0.5) - 0.5);
    }

    /*
    * Rounding to up to grid.
    */
    function roundUpToGrid(v) {
        return Math.sign(v) * Math.ceil(Math.abs(v));
    }

    /*
    * Rounding to down to grid.
    */
    function roundDownToGrid(v) {
        return Math.sign(v) * Math.floor(Math.abs(v));
    }

    /*
    * Super rounding.
    */
    const roundSuper = function (v) {
        const period = this.srPeriod;
        let phase = this.srPhase;
        const threshold = this.srThreshold;
        let sign = 1;

        if (v < 0) {
            v = -v;
            sign = -1;
        }

        v += threshold - phase;

        v = Math.trunc(v / period) * period;

        v += phase;

        // according to http://xgridfit.sourceforge.net/round.html
        if (v < 0) return phase * sign;

        return v * sign;
    };

    /*
    * Unit vector of x-axis.
    */
    const xUnitVector = {
        x: 1,

        y: 0,

        axis: 'x',

        // Gets the projected distance between two points.
        // o1/o2 ... if true, respective original position is used.
        distance: function (p1, p2, o1, o2) {
            return (o1 ? p1.xo : p1.x) - (o2 ? p2.xo : p2.x);
        },

        // Moves point p so the moved position has the same relative
        // position to the moved positions of rp1 and rp2 than the
        // original positions had.
        //
        // See APPENDIX on INTERPOLATE at the bottom of this file.
        interpolate: function (p, rp1, rp2, pv) {
            let do1;
            let do2;
            let doa1;
            let doa2;
            let dm1;
            let dm2;
            let dt;

            if (!pv || pv === this) {
                do1 = p.xo - rp1.xo;
                do2 = p.xo - rp2.xo;
                dm1 = rp1.x - rp1.xo;
                dm2 = rp2.x - rp2.xo;
                doa1 = Math.abs(do1);
                doa2 = Math.abs(do2);
                dt = doa1 + doa2;

                if (dt === 0) {
                    p.x = p.xo + (dm1 + dm2) / 2;
                    return;
                }

                p.x = p.xo + (dm1 * doa2 + dm2 * doa1) / dt;
                return;
            }

            do1 = pv.distance(p, rp1, true, true);
            do2 = pv.distance(p, rp2, true, true);
            dm1 = pv.distance(rp1, rp1, false, true);
            dm2 = pv.distance(rp2, rp2, false, true);
            doa1 = Math.abs(do1);
            doa2 = Math.abs(do2);
            dt = doa1 + doa2;

            if (dt === 0) {
                xUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
                return;
            }

            xUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
        },

        // Slope of line normal to this
        normalSlope: Number.NEGATIVE_INFINITY,

        // Sets the point 'p' relative to point 'rp'
        // by the distance 'd'.
        //
        // See APPENDIX on SETRELATIVE at the bottom of this file.
        //
        // p   ... point to set
        // rp  ... reference point
        // d   ... distance on projection vector
        // pv  ... projection vector (undefined = this)
        // org ... if true, uses the original position of rp as reference.
        setRelative: function (p, rp, d, pv, org) {
            if (!pv || pv === this) {
                p.x = (org ? rp.xo : rp.x) + d;
                return;
            }

            const rpx = org ? rp.xo : rp.x;
            const rpy = org ? rp.yo : rp.y;
            const rpdx = rpx + d * pv.x;
            const rpdy = rpy + d * pv.y;

            p.x = rpdx + (p.y - rpdy) / pv.normalSlope;
        },

        // Slope of vector line.
        slope: 0,

        // Touches the point p.
        touch: function (p) {
            p.xTouched = true;
        },

        // Tests if a point p is touched.
        touched: function (p) {
            return p.xTouched;
        },

        // Untouches the point p.
        untouch: function (p) {
            p.xTouched = false;
        }
    };

    /*
    * Unit vector of y-axis.
    */
    const yUnitVector = {
        x: 0,

        y: 1,

        axis: 'y',

        // Gets the projected distance between two points.
        // o1/o2 ... if true, respective original position is used.
        distance: function (p1, p2, o1, o2) {
            return (o1 ? p1.yo : p1.y) - (o2 ? p2.yo : p2.y);
        },

        // Moves point p so the moved position has the same relative
        // position to the moved positions of rp1 and rp2 than the
        // original positions had.
        //
        // See APPENDIX on INTERPOLATE at the bottom of this file.
        interpolate: function (p, rp1, rp2, pv) {
            let do1;
            let do2;
            let doa1;
            let doa2;
            let dm1;
            let dm2;
            let dt;

            if (!pv || pv === this) {
                do1 = p.yo - rp1.yo;
                do2 = p.yo - rp2.yo;
                dm1 = rp1.y - rp1.yo;
                dm2 = rp2.y - rp2.yo;
                doa1 = Math.abs(do1);
                doa2 = Math.abs(do2);
                dt = doa1 + doa2;

                if (dt === 0) {
                    p.y = p.yo + (dm1 + dm2) / 2;
                    return;
                }

                p.y = p.yo + (dm1 * doa2 + dm2 * doa1) / dt;
                return;
            }

            do1 = pv.distance(p, rp1, true, true);
            do2 = pv.distance(p, rp2, true, true);
            dm1 = pv.distance(rp1, rp1, false, true);
            dm2 = pv.distance(rp2, rp2, false, true);
            doa1 = Math.abs(do1);
            doa2 = Math.abs(do2);
            dt = doa1 + doa2;

            if (dt === 0) {
                yUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
                return;
            }

            yUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
        },

        // Slope of line normal to this.
        normalSlope: 0,

        // Sets the point 'p' relative to point 'rp'
        // by the distance 'd'
        //
        // See APPENDIX on SETRELATIVE at the bottom of this file.
        //
        // p   ... point to set
        // rp  ... reference point
        // d   ... distance on projection vector
        // pv  ... projection vector (undefined = this)
        // org ... if true, uses the original position of rp as reference.
        setRelative: function (p, rp, d, pv, org) {
            if (!pv || pv === this) {
                p.y = (org ? rp.yo : rp.y) + d;
                return;
            }

            const rpx = org ? rp.xo : rp.x;
            const rpy = org ? rp.yo : rp.y;
            const rpdx = rpx + d * pv.x;
            const rpdy = rpy + d * pv.y;

            p.y = rpdy + pv.normalSlope * (p.x - rpdx);
        },

        // Slope of vector line.
        slope: Number.POSITIVE_INFINITY,

        // Touches the point p.
        touch: function (p) {
            p.yTouched = true;
        },

        // Tests if a point p is touched.
        touched: function (p) {
            return p.yTouched;
        },

        // Untouches the point p.
        untouch: function (p) {
            p.yTouched = false;
        }
    };

    Object.freeze(xUnitVector);
    Object.freeze(yUnitVector);

    /*
    * Creates a unit vector that is not x- or y-axis.
    */
    function UnitVector(x, y) {
        this.x = x;
        this.y = y;
        this.axis = undefined;
        this.slope = y / x;
        this.normalSlope = -x / y;
        Object.freeze(this);
    }

    /*
    * Gets the projected distance between two points.
    * o1/o2 ... if true, respective original position is used.
    */
    UnitVector.prototype.distance = function(p1, p2, o1, o2) {
        return (
            this.x * xUnitVector.distance(p1, p2, o1, o2) +
            this.y * yUnitVector.distance(p1, p2, o1, o2)
        );
    };

    /*
    * Moves point p so the moved position has the same relative
    * position to the moved positions of rp1 and rp2 than the
    * original positions had.
    *
    * See APPENDIX on INTERPOLATE at the bottom of this file.
    */
    UnitVector.prototype.interpolate = function(p, rp1, rp2, pv) {
        let dm1;
        let dm2;
        let do1;
        let do2;
        let doa1;
        let doa2;
        let dt;

        do1 = pv.distance(p, rp1, true, true);
        do2 = pv.distance(p, rp2, true, true);
        dm1 = pv.distance(rp1, rp1, false, true);
        dm2 = pv.distance(rp2, rp2, false, true);
        doa1 = Math.abs(do1);
        doa2 = Math.abs(do2);
        dt = doa1 + doa2;

        if (dt === 0) {
            this.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
            return;
        }

        this.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
    };

    /*
    * Sets the point 'p' relative to point 'rp'
    * by the distance 'd'
    *
    * See APPENDIX on SETRELATIVE at the bottom of this file.
    *
    * p   ...  point to set
    * rp  ... reference point
    * d   ... distance on projection vector
    * pv  ... projection vector (undefined = this)
    * org ... if true, uses the original position of rp as reference.
    */
    UnitVector.prototype.setRelative = function(p, rp, d, pv, org) {
        pv = pv || this;

        const rpx = org ? rp.xo : rp.x;
        const rpy = org ? rp.yo : rp.y;
        const rpdx = rpx + d * pv.x;
        const rpdy = rpy + d * pv.y;

        const pvns = pv.normalSlope;
        const fvs = this.slope;

        const px = p.x;
        const py = p.y;

        p.x = (fvs * px - pvns * rpdx + rpdy - py) / (fvs - pvns);
        p.y = fvs * (p.x - px) + py;
    };

    /*
    * Touches the point p.
    */
    UnitVector.prototype.touch = function(p) {
        p.xTouched = true;
        p.yTouched = true;
    };

    /*
    * Returns a unit vector with x/y coordinates.
    */
    function getUnitVector(x, y) {
        const d = Math.sqrt(x * x + y * y);

        x /= d;
        y /= d;

        if (x === 1 && y === 0) return xUnitVector;
        else if (x === 0 && y === 1) return yUnitVector;
        else return new UnitVector(x, y);
    }

    /*
    * Creates a point in the hinting engine.
    */
    function HPoint(
        x,
        y,
        lastPointOfContour,
        onCurve
    ) {
        this.x = this.xo = Math.round(x * 64) / 64; // hinted x value and original x-value
        this.y = this.yo = Math.round(y * 64) / 64; // hinted y value and original y-value

        this.lastPointOfContour = lastPointOfContour;
        this.onCurve = onCurve;
        this.prevPointOnContour = undefined;
        this.nextPointOnContour = undefined;
        this.xTouched = false;
        this.yTouched = false;

        Object.preventExtensions(this);
    }

    /*
    * Returns the next touched point on the contour.
    *
    * v  ... unit vector to test touch axis.
    */
    HPoint.prototype.nextTouched = function(v) {
        let p = this.nextPointOnContour;

        while (!v.touched(p) && p !== this) p = p.nextPointOnContour;

        return p;
    };

    /*
    * Returns the previous touched point on the contour
    *
    * v  ... unit vector to test touch axis.
    */
    HPoint.prototype.prevTouched = function(v) {
        let p = this.prevPointOnContour;

        while (!v.touched(p) && p !== this) p = p.prevPointOnContour;

        return p;
    };

    /*
    * The zero point.
    */
    const HPZero = Object.freeze(new HPoint(0, 0));

    /*
    * The default state of the interpreter.
    *
    * Note: Freezing the defaultState and then deriving from it
    * makes the V8 Javascript engine going awkward,
    * so this is avoided, albeit the defaultState shouldn't
    * ever change.
    */
    const defaultState = {
        cvCutIn: 17 / 16,    // control value cut in
        deltaBase: 9,
        deltaShift: 0.125,
        loop: 1,             // loops some instructions
        minDis: 1,           // minimum distance
        autoFlip: true
    };

    /*
    * The current state of the interpreter.
    *
    * env  ... 'fpgm' or 'prep' or 'glyf'
    * prog ... the program
    */
    function State(env, prog) {
        this.env = env;
        this.stack = [];
        this.prog = prog;

        switch (env) {
            case 'glyf' :
                this.zp0 = this.zp1 = this.zp2 = 1;
                this.rp0 = this.rp1 = this.rp2 = 0;
                /* fall through */
            case 'prep' :
                this.fv = this.pv = this.dpv = xUnitVector;
                this.round = roundToGrid;
        }
    }

    /*
    * Executes a glyph program.
    *
    * This does the hinting for each glyph.
    *
    * Returns an array of moved points.
    *
    * glyph: the glyph to hint
    * ppem: the size the glyph is rendered for
    */
    Hinting.prototype.exec = function(glyph, ppem) {
        if (typeof ppem !== 'number') {
            throw new Error('Point size is not a number!');
        }

        // Received a fatal error, don't do any hinting anymore.
        if (this._errorState > 2) return;

        const font = this.font;
        let prepState = this._prepState;

        if (!prepState || prepState.ppem !== ppem) {
            let fpgmState = this._fpgmState;

            if (!fpgmState) {
                // Executes the fpgm state.
                // This is used by fonts to define functions.
                State.prototype = defaultState;

                fpgmState =
                this._fpgmState =
                    new State('fpgm', font.tables.fpgm);

                fpgmState.funcs = [ ];
                fpgmState.font = font;

                if (exports.DEBUG) {
                    console.log('---EXEC FPGM---');
                    fpgmState.step = -1;
                }

                try {
                    exec(fpgmState);
                } catch (e) {
                    console.log('Hinting error in FPGM:' + e);
                    this._errorState = 3;
                    return;
                }
            }

            // Executes the prep program for this ppem setting.
            // This is used by fonts to set cvt values
            // depending on to be rendered font size.

            State.prototype = fpgmState;
            prepState =
            this._prepState =
                new State('prep', font.tables.prep);

            prepState.ppem = ppem;

            // Creates a copy of the cvt table
            // and scales it to the current ppem setting.
            const oCvt = font.tables.cvt;
            if (oCvt) {
                const cvt = prepState.cvt = new Array(oCvt.length);
                const scale = ppem / font.unitsPerEm;
                for (let c = 0; c < oCvt.length; c++) {
                    cvt[c] = oCvt[c] * scale;
                }
            } else {
                prepState.cvt = [];
            }

            if (exports.DEBUG) {
                console.log('---EXEC PREP---');
                prepState.step = -1;
            }

            try {
                exec(prepState);
            } catch (e) {
                if (this._errorState < 2) {
                    console.log('Hinting error in PREP:' + e);
                }
                this._errorState = 2;
            }
        }

        if (this._errorState > 1) return;

        try {
            return execGlyph(glyph, prepState);
        } catch (e) {
            if (this._errorState < 1) {
                console.log('Hinting error:' + e);
                console.log('Note: further hinting errors are silenced');
            }
            this._errorState = 1;
            return undefined;
        }
    };

    /*
    * Executes the hinting program for a glyph.
    */
    execGlyph = function(glyph, prepState) {
        // original point positions
        const xScale = prepState.ppem / prepState.font.unitsPerEm;
        const yScale = xScale;
        let components = glyph.components;
        let contours;
        let gZone;
        let state;

        State.prototype = prepState;
        if (!components) {
            state = new State('glyf', glyph.instructions);
            if (exports.DEBUG) {
                console.log('---EXEC GLYPH---');
                state.step = -1;
            }
            execComponent(glyph, state, xScale, yScale);
            gZone = state.gZone;
        } else {
            const font = prepState.font;
            gZone = [];
            contours = [];
            for (let i = 0; i < components.length; i++) {
                const c = components[i];
                const cg = font.glyphs.get(c.glyphIndex);

                state = new State('glyf', cg.instructions);

                if (exports.DEBUG) {
                    console.log('---EXEC COMP ' + i + '---');
                    state.step = -1;
                }

                execComponent(cg, state, xScale, yScale);
                // appends the computed points to the result array
                // post processes the component points
                const dx = Math.round(c.dx * xScale);
                const dy = Math.round(c.dy * yScale);
                const gz = state.gZone;
                const cc = state.contours;
                for (let pi = 0; pi < gz.length; pi++) {
                    const p = gz[pi];
                    p.xTouched = p.yTouched = false;
                    p.xo = p.x = p.x + dx;
                    p.yo = p.y = p.y + dy;
                }

                const gLen = gZone.length;
                gZone.push.apply(gZone, gz);
                for (let j = 0; j < cc.length; j++) {
                    contours.push(cc[j] + gLen);
                }
            }

            if (glyph.instructions && !state.inhibitGridFit) {
                // the composite has instructions on its own
                state = new State('glyf', glyph.instructions);

                state.gZone = state.z0 = state.z1 = state.z2 = gZone;

                state.contours = contours;

                // note: HPZero cannot be used here, since
                //       the point might be modified
                gZone.push(
                    new HPoint(0, 0),
                    new HPoint(Math.round(glyph.advanceWidth * xScale), 0)
                );

                if (exports.DEBUG) {
                    console.log('---EXEC COMPOSITE---');
                    state.step = -1;
                }

                exec(state);

                gZone.length -= 2;
            }
        }

        return gZone;
    };

    /*
    * Executes the hinting program for a component of a multi-component glyph
    * or of the glyph itself for a non-component glyph.
    */
    execComponent = function(glyph, state, xScale, yScale)
    {
        const points = glyph.points || [];
        const pLen = points.length;
        const gZone = state.gZone = state.z0 = state.z1 = state.z2 = [];
        const contours = state.contours = [];

        // Scales the original points and
        // makes copies for the hinted points.
        let cp; // current point
        for (let i = 0; i < pLen; i++) {
            cp = points[i];

            gZone[i] = new HPoint(
                cp.x * xScale,
                cp.y * yScale,
                cp.lastPointOfContour,
                cp.onCurve
            );
        }

        // Chain links the contours.
        let sp; // start point
        let np; // next point

        for (let i = 0; i < pLen; i++) {
            cp = gZone[i];

            if (!sp) {
                sp = cp;
                contours.push(i);
            }

            if (cp.lastPointOfContour) {
                cp.nextPointOnContour = sp;
                sp.prevPointOnContour = cp;
                sp = undefined;
            } else {
                np = gZone[i + 1];
                cp.nextPointOnContour = np;
                np.prevPointOnContour = cp;
            }
        }

        if (state.inhibitGridFit) return;

        if (exports.DEBUG) {
            console.log('PROCESSING GLYPH', state.stack);
            for (let i = 0; i < pLen; i++) {
                console.log(i, gZone[i].x, gZone[i].y);
            }
        }

        gZone.push(
            new HPoint(0, 0),
            new HPoint(Math.round(glyph.advanceWidth * xScale), 0)
        );

        exec(state);

        // Removes the extra points.
        gZone.length -= 2;

        if (exports.DEBUG) {
            console.log('FINISHED GLYPH', state.stack);
            for (let i = 0; i < pLen; i++) {
                console.log(i, gZone[i].x, gZone[i].y);
            }
        }
    };

    /*
    * Executes the program loaded in state.
    */
    exec = function(state) {
        let prog = state.prog;

        if (!prog) return;

        const pLen = prog.length;
        let ins;

        for (state.ip = 0; state.ip < pLen; state.ip++) {
            if (exports.DEBUG) state.step++;
            ins = instructionTable[prog[state.ip]];

            if (!ins) {
                throw new Error(
                    'unknown instruction: 0x' +
                    Number(prog[state.ip]).toString(16)
                );
            }

            ins(state);

            // very extensive debugging for each step
            /*
            if (exports.DEBUG) {
                var da;
                if (state.gZone) {
                    da = [];
                    for (let i = 0; i < state.gZone.length; i++)
                    {
                        da.push(i + ' ' +
                            state.gZone[i].x * 64 + ' ' +
                            state.gZone[i].y * 64 + ' ' +
                            (state.gZone[i].xTouched ? 'x' : '') +
                            (state.gZone[i].yTouched ? 'y' : '')
                        );
                    }
                    console.log('GZ', da);
                }

                if (state.tZone) {
                    da = [];
                    for (let i = 0; i < state.tZone.length; i++) {
                        da.push(i + ' ' +
                            state.tZone[i].x * 64 + ' ' +
                            state.tZone[i].y * 64 + ' ' +
                            (state.tZone[i].xTouched ? 'x' : '') +
                            (state.tZone[i].yTouched ? 'y' : '')
                        );
                    }
                    console.log('TZ', da);
                }

                if (state.stack.length > 10) {
                    console.log(
                        state.stack.length,
                        '...', state.stack.slice(state.stack.length - 10)
                    );
                } else {
                    console.log(state.stack.length, state.stack);
                }
            }
            */
        }
    };

    /*
    * Initializes the twilight zone.
    *
    * This is only done if a SZPx instruction
    * refers to the twilight zone.
    */
    function initTZone(state)
    {
        const tZone = state.tZone = new Array(state.gZone.length);

        // no idea if this is actually correct...
        for (let i = 0; i < tZone.length; i++)
        {
            tZone[i] = new HPoint(0, 0);
        }
    }

    /*
    * Skips the instruction pointer ahead over an IF/ELSE block.
    * handleElse .. if true breaks on matching ELSE
    */
    function skip(state, handleElse)
    {
        const prog = state.prog;
        let ip = state.ip;
        let nesting = 1;
        let ins;

        do {
            ins = prog[++ip];
            if (ins === 0x58) // IF
                nesting++;
            else if (ins === 0x59) // EIF
                nesting--;
            else if (ins === 0x40) // NPUSHB
                ip += prog[ip + 1] + 1;
            else if (ins === 0x41) // NPUSHW
                ip += 2 * prog[ip + 1] + 1;
            else if (ins >= 0xB0 && ins <= 0xB7) // PUSHB
                ip += ins - 0xB0 + 1;
            else if (ins >= 0xB8 && ins <= 0xBF) // PUSHW
                ip += (ins - 0xB8 + 1) * 2;
            else if (handleElse && nesting === 1 && ins === 0x1B) // ELSE
                break;
        } while (nesting > 0);

        state.ip = ip;
    }

    /*----------------------------------------------------------*
    *          And then a lot of instructions...                *
    *----------------------------------------------------------*/

    // SVTCA[a] Set freedom and projection Vectors To Coordinate Axis
    // 0x00-0x01
    function SVTCA(v, state) {
        if (exports.DEBUG) console.log(state.step, 'SVTCA[' + v.axis + ']');

        state.fv = state.pv = state.dpv = v;
    }

    // SPVTCA[a] Set Projection Vector to Coordinate Axis
    // 0x02-0x03
    function SPVTCA(v, state) {
        if (exports.DEBUG) console.log(state.step, 'SPVTCA[' + v.axis + ']');

        state.pv = state.dpv = v;
    }

    // SFVTCA[a] Set Freedom Vector to Coordinate Axis
    // 0x04-0x05
    function SFVTCA(v, state) {
        if (exports.DEBUG) console.log(state.step, 'SFVTCA[' + v.axis + ']');

        state.fv = v;
    }

    // SPVTL[a] Set Projection Vector To Line
    // 0x06-0x07
    function SPVTL(a, state) {
        const stack = state.stack;
        const p2i = stack.pop();
        const p1i = stack.pop();
        const p2 = state.z2[p2i];
        const p1 = state.z1[p1i];

        if (exports.DEBUG) console.log('SPVTL[' + a + ']', p2i, p1i);

        let dx;
        let dy;

        if (!a) {
            dx = p1.x - p2.x;
            dy = p1.y - p2.y;
        } else {
            dx = p2.y - p1.y;
            dy = p1.x - p2.x;
        }

        state.pv = state.dpv = getUnitVector(dx, dy);
    }

    // SFVTL[a] Set Freedom Vector To Line
    // 0x08-0x09
    function SFVTL(a, state) {
        const stack = state.stack;
        const p2i = stack.pop();
        const p1i = stack.pop();
        const p2 = state.z2[p2i];
        const p1 = state.z1[p1i];

        if (exports.DEBUG) console.log('SFVTL[' + a + ']', p2i, p1i);

        let dx;
        let dy;

        if (!a) {
            dx = p1.x - p2.x;
            dy = p1.y - p2.y;
        } else {
            dx = p2.y - p1.y;
            dy = p1.x - p2.x;
        }

        state.fv = getUnitVector(dx, dy);
    }

    // SPVFS[] Set Projection Vector From Stack
    // 0x0A
    function SPVFS(state) {
        const stack = state.stack;
        const y = stack.pop();
        const x = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'SPVFS[]', y, x);

        state.pv = state.dpv = getUnitVector(x, y);
    }

    // SFVFS[] Set Freedom Vector From Stack
    // 0x0B
    function SFVFS(state) {
        const stack = state.stack;
        const y = stack.pop();
        const x = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'SPVFS[]', y, x);

        state.fv = getUnitVector(x, y);
    }

    // GPV[] Get Projection Vector
    // 0x0C
    function GPV(state) {
        const stack = state.stack;
        const pv = state.pv;

        if (exports.DEBUG) console.log(state.step, 'GPV[]');

        stack.push(pv.x * 0x4000);
        stack.push(pv.y * 0x4000);
    }

    // GFV[] Get Freedom Vector
    // 0x0C
    function GFV(state) {
        const stack = state.stack;
        const fv = state.fv;

        if (exports.DEBUG) console.log(state.step, 'GFV[]');

        stack.push(fv.x * 0x4000);
        stack.push(fv.y * 0x4000);
    }

    // SFVTPV[] Set Freedom Vector To Projection Vector
    // 0x0E
    function SFVTPV(state) {
        state.fv = state.pv;

        if (exports.DEBUG) console.log(state.step, 'SFVTPV[]');
    }

    // ISECT[] moves point p to the InterSECTion of two lines
    // 0x0F
    function ISECT(state)
    {
        const stack = state.stack;
        const pa0i = stack.pop();
        const pa1i = stack.pop();
        const pb0i = stack.pop();
        const pb1i = stack.pop();
        const pi = stack.pop();
        const z0 = state.z0;
        const z1 = state.z1;
        const pa0 = z0[pa0i];
        const pa1 = z0[pa1i];
        const pb0 = z1[pb0i];
        const pb1 = z1[pb1i];
        const p = state.z2[pi];

        if (exports.DEBUG) console.log('ISECT[], ', pa0i, pa1i, pb0i, pb1i, pi);

        // math from
        // en.wikipedia.org/wiki/Line%E2%80%93line_intersection#Given_two_points_on_each_line

        const x1 = pa0.x;
        const y1 = pa0.y;
        const x2 = pa1.x;
        const y2 = pa1.y;
        const x3 = pb0.x;
        const y3 = pb0.y;
        const x4 = pb1.x;
        const y4 = pb1.y;

        const div = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
        const f1 = x1 * y2 - y1 * x2;
        const f2 = x3 * y4 - y3 * x4;

        p.x = (f1 * (x3 - x4) - f2 * (x1 - x2)) / div;
        p.y = (f1 * (y3 - y4) - f2 * (y1 - y2)) / div;
    }

    // SRP0[] Set Reference Point 0
    // 0x10
    function SRP0(state) {
        state.rp0 = state.stack.pop();

        if (exports.DEBUG) console.log(state.step, 'SRP0[]', state.rp0);
    }

    // SRP1[] Set Reference Point 1
    // 0x11
    function SRP1(state) {
        state.rp1 = state.stack.pop();

        if (exports.DEBUG) console.log(state.step, 'SRP1[]', state.rp1);
    }

    // SRP1[] Set Reference Point 2
    // 0x12
    function SRP2(state) {
        state.rp2 = state.stack.pop();

        if (exports.DEBUG) console.log(state.step, 'SRP2[]', state.rp2);
    }

    // SZP0[] Set Zone Pointer 0
    // 0x13
    function SZP0(state) {
        const n = state.stack.pop();

        if (exports.DEBUG) console.log(state.step, 'SZP0[]', n);

        state.zp0 = n;

        switch (n) {
            case 0:
                if (!state.tZone) initTZone(state);
                state.z0 = state.tZone;
                break;
            case 1 :
                state.z0 = state.gZone;
                break;
            default :
                throw new Error('Invalid zone pointer');
        }
    }

    // SZP1[] Set Zone Pointer 1
    // 0x14
    function SZP1(state) {
        const n = state.stack.pop();

        if (exports.DEBUG) console.log(state.step, 'SZP1[]', n);

        state.zp1 = n;

        switch (n) {
            case 0:
                if (!state.tZone) initTZone(state);
                state.z1 = state.tZone;
                break;
            case 1 :
                state.z1 = state.gZone;
                break;
            default :
                throw new Error('Invalid zone pointer');
        }
    }

    // SZP2[] Set Zone Pointer 2
    // 0x15
    function SZP2(state) {
        const n = state.stack.pop();

        if (exports.DEBUG) console.log(state.step, 'SZP2[]', n);

        state.zp2 = n;

        switch (n) {
            case 0:
                if (!state.tZone) initTZone(state);
                state.z2 = state.tZone;
                break;
            case 1 :
                state.z2 = state.gZone;
                break;
            default :
                throw new Error('Invalid zone pointer');
        }
    }

    // SZPS[] Set Zone PointerS
    // 0x16
    function SZPS(state) {
        const n = state.stack.pop();

        if (exports.DEBUG) console.log(state.step, 'SZPS[]', n);

        state.zp0 = state.zp1 = state.zp2 = n;

        switch (n) {
            case 0:
                if (!state.tZone) initTZone(state);
                state.z0 = state.z1 = state.z2 = state.tZone;
                break;
            case 1 :
                state.z0 = state.z1 = state.z2 = state.gZone;
                break;
            default :
                throw new Error('Invalid zone pointer');
        }
    }

    // SLOOP[] Set LOOP variable
    // 0x17
    function SLOOP(state) {
        state.loop = state.stack.pop();

        if (exports.DEBUG) console.log(state.step, 'SLOOP[]', state.loop);
    }

    // RTG[] Round To Grid
    // 0x18
    function RTG(state) {
        if (exports.DEBUG) console.log(state.step, 'RTG[]');

        state.round = roundToGrid;
    }

    // RTHG[] Round To Half Grid
    // 0x19
    function RTHG(state) {
        if (exports.DEBUG) console.log(state.step, 'RTHG[]');

        state.round = roundToHalfGrid;
    }

    // SMD[] Set Minimum Distance
    // 0x1A
    function SMD(state) {
        const d = state.stack.pop();

        if (exports.DEBUG) console.log(state.step, 'SMD[]', d);

        state.minDis = d / 0x40;
    }

    // ELSE[] ELSE clause
    // 0x1B
    function ELSE(state) {
        // This instruction has been reached by executing a then branch
        // so it just skips ahead until matching EIF.
        //
        // In case the IF was negative the IF[] instruction already
        // skipped forward over the ELSE[]

        if (exports.DEBUG) console.log(state.step, 'ELSE[]');

        skip(state, false);
    }

    // JMPR[] JuMP Relative
    // 0x1C
    function JMPR(state) {
        const o = state.stack.pop();

        if (exports.DEBUG) console.log(state.step, 'JMPR[]', o);

        // A jump by 1 would do nothing.
        state.ip += o - 1;
    }

    // SCVTCI[] Set Control Value Table Cut-In
    // 0x1D
    function SCVTCI(state) {
        const n = state.stack.pop();

        if (exports.DEBUG) console.log(state.step, 'SCVTCI[]', n);

        state.cvCutIn = n / 0x40;
    }

    // DUP[] DUPlicate top stack element
    // 0x20
    function DUP(state) {
        const stack = state.stack;

        if (exports.DEBUG) console.log(state.step, 'DUP[]');

        stack.push(stack[stack.length - 1]);
    }

    // POP[] POP top stack element
    // 0x21
    function POP(state) {
        if (exports.DEBUG) console.log(state.step, 'POP[]');

        state.stack.pop();
    }

    // CLEAR[] CLEAR the stack
    // 0x22
    function CLEAR(state) {
        if (exports.DEBUG) console.log(state.step, 'CLEAR[]');

        state.stack.length = 0;
    }

    // SWAP[] SWAP the top two elements on the stack
    // 0x23
    function SWAP(state) {
        const stack = state.stack;

        const a = stack.pop();
        const b = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'SWAP[]');

        stack.push(a);
        stack.push(b);
    }

    // DEPTH[] DEPTH of the stack
    // 0x24
    function DEPTH(state) {
        const stack = state.stack;

        if (exports.DEBUG) console.log(state.step, 'DEPTH[]');

        stack.push(stack.length);
    }

    // LOOPCALL[] LOOPCALL function
    // 0x2A
    function LOOPCALL(state) {
        const stack = state.stack;
        const fn = stack.pop();
        const c = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'LOOPCALL[]', fn, c);

        // saves callers program
        const cip = state.ip;
        const cprog = state.prog;

        state.prog = state.funcs[fn];

        // executes the function
        for (let i = 0; i < c; i++) {
            exec(state);

            if (exports.DEBUG) console.log(
                ++state.step,
                i + 1 < c ? 'next loopcall' : 'done loopcall',
                i
            );
        }

        // restores the callers program
        state.ip = cip;
        state.prog = cprog;
    }

    // CALL[] CALL function
    // 0x2B
    function CALL(state) {
        const fn = state.stack.pop();

        if (exports.DEBUG) console.log(state.step, 'CALL[]', fn);

        // saves callers program
        const cip = state.ip;
        const cprog = state.prog;

        state.prog = state.funcs[fn];

        // executes the function
        exec(state);

        // restores the callers program
        state.ip = cip;
        state.prog = cprog;

        if (exports.DEBUG) console.log(++state.step, 'returning from', fn);
    }

    // CINDEX[] Copy the INDEXed element to the top of the stack
    // 0x25
    function CINDEX(state) {
        const stack = state.stack;
        const k = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'CINDEX[]', k);

        // In case of k == 1, it copies the last element after popping
        // thus stack.length - k.
        stack.push(stack[stack.length - k]);
    }

    // MINDEX[] Move the INDEXed element to the top of the stack
    // 0x26
    function MINDEX(state) {
        const stack = state.stack;
        const k = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'MINDEX[]', k);

        stack.push(stack.splice(stack.length - k, 1)[0]);
    }

    // FDEF[] Function DEFinition
    // 0x2C
    function FDEF(state) {
        if (state.env !== 'fpgm') throw new Error('FDEF not allowed here');
        const stack = state.stack;
        const prog = state.prog;
        let ip = state.ip;

        const fn = stack.pop();
        const ipBegin = ip;

        if (exports.DEBUG) console.log(state.step, 'FDEF[]', fn);

        while (prog[++ip] !== 0x2D);

        state.ip = ip;
        state.funcs[fn] = prog.slice(ipBegin + 1, ip);
    }

    // MDAP[a] Move Direct Absolute Point
    // 0x2E-0x2F
    function MDAP(round, state) {
        const pi = state.stack.pop();
        const p = state.z0[pi];
        const fv = state.fv;
        const pv = state.pv;

        if (exports.DEBUG) console.log(state.step, 'MDAP[' + round + ']', pi);

        let d = pv.distance(p, HPZero);

        if (round) d = state.round(d);

        fv.setRelative(p, HPZero, d, pv);
        fv.touch(p);

        state.rp0 = state.rp1 = pi;
    }

    // IUP[a] Interpolate Untouched Points through the outline
    // 0x30
    function IUP(v, state) {
        const z2 = state.z2;
        const pLen = z2.length - 2;
        let cp;
        let pp;
        let np;

        if (exports.DEBUG) console.log(state.step, 'IUP[' + v.axis + ']');

        for (let i = 0; i < pLen; i++) {
            cp = z2[i]; // current point

            // if this point has been touched go on
            if (v.touched(cp)) continue;

            pp = cp.prevTouched(v);

            // no point on the contour has been touched?
            if (pp === cp) continue;

            np = cp.nextTouched(v);

            if (pp === np) {
                // only one point on the contour has been touched
                // so simply moves the point like that

                v.setRelative(cp, cp, v.distance(pp, pp, false, true), v, true);
            }

            v.interpolate(cp, pp, np, v);
        }
    }

    // SHP[] SHift Point using reference point
    // 0x32-0x33
    function SHP(a, state) {
        const stack = state.stack;
        const rpi = a ? state.rp1 : state.rp2;
        const rp = (a ? state.z0 : state.z1)[rpi];
        const fv = state.fv;
        const pv = state.pv;
        let loop = state.loop;
        const z2 = state.z2;

        while (loop--)
        {
            const pi = stack.pop();
            const p = z2[pi];

            const d = pv.distance(rp, rp, false, true);
            fv.setRelative(p, p, d, pv);
            fv.touch(p);

            if (exports.DEBUG) {
                console.log(
                    state.step,
                    (state.loop > 1 ?
                       'loop ' + (state.loop - loop) + ': ' :
                       ''
                    ) +
                    'SHP[' + (a ? 'rp1' : 'rp2') + ']', pi
                );
            }
        }

        state.loop = 1;
    }

    // SHC[] SHift Contour using reference point
    // 0x36-0x37
    function SHC(a, state) {
        const stack = state.stack;
        const rpi = a ? state.rp1 : state.rp2;
        const rp = (a ? state.z0 : state.z1)[rpi];
        const fv = state.fv;
        const pv = state.pv;
        const ci = stack.pop();
        const sp = state.z2[state.contours[ci]];
        let p = sp;

        if (exports.DEBUG) console.log(state.step, 'SHC[' + a + ']', ci);

        const d = pv.distance(rp, rp, false, true);

        do {
            if (p !== rp) fv.setRelative(p, p, d, pv);
            p = p.nextPointOnContour;
        } while (p !== sp);
    }

    // SHZ[] SHift Zone using reference point
    // 0x36-0x37
    function SHZ(a, state) {
        const stack = state.stack;
        const rpi = a ? state.rp1 : state.rp2;
        const rp = (a ? state.z0 : state.z1)[rpi];
        const fv = state.fv;
        const pv = state.pv;

        const e = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'SHZ[' + a + ']', e);

        let z;
        switch (e) {
            case 0 : z = state.tZone; break;
            case 1 : z = state.gZone; break;
            default : throw new Error('Invalid zone');
        }

        let p;
        const d = pv.distance(rp, rp, false, true);
        const pLen = z.length - 2;
        for (let i = 0; i < pLen; i++)
        {
            p = z[i];
            fv.setRelative(p, p, d, pv);
            //if (p !== rp) fv.setRelative(p, p, d, pv);
        }
    }

    // SHPIX[] SHift point by a PIXel amount
    // 0x38
    function SHPIX(state) {
        const stack = state.stack;
        let loop = state.loop;
        const fv = state.fv;
        const d = stack.pop() / 0x40;
        const z2 = state.z2;

        while (loop--) {
            const pi = stack.pop();
            const p = z2[pi];

            if (exports.DEBUG) {
                console.log(
                    state.step,
                    (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +
                    'SHPIX[]', pi, d
                );
            }

            fv.setRelative(p, p, d);
            fv.touch(p);
        }

        state.loop = 1;
    }

    // IP[] Interpolate Point
    // 0x39
    function IP(state) {
        const stack = state.stack;
        const rp1i = state.rp1;
        const rp2i = state.rp2;
        let loop = state.loop;
        const rp1 = state.z0[rp1i];
        const rp2 = state.z1[rp2i];
        const fv = state.fv;
        const pv = state.dpv;
        const z2 = state.z2;

        while (loop--) {
            const pi = stack.pop();
            const p = z2[pi];

            if (exports.DEBUG) {
                console.log(
                    state.step,
                    (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +
                    'IP[]', pi, rp1i, '<->', rp2i
                );
            }

            fv.interpolate(p, rp1, rp2, pv);

            fv.touch(p);
        }

        state.loop = 1;
    }

    // MSIRP[a] Move Stack Indirect Relative Point
    // 0x3A-0x3B
    function MSIRP(a, state) {
        const stack = state.stack;
        const d = stack.pop() / 64;
        const pi = stack.pop();
        const p = state.z1[pi];
        const rp0 = state.z0[state.rp0];
        const fv = state.fv;
        const pv = state.pv;

        fv.setRelative(p, rp0, d, pv);
        fv.touch(p);

        if (exports.DEBUG) console.log(state.step, 'MSIRP[' + a + ']', d, pi);

        state.rp1 = state.rp0;
        state.rp2 = pi;
        if (a) state.rp0 = pi;
    }

    // ALIGNRP[] Align to reference point.
    // 0x3C
    function ALIGNRP(state) {
        const stack = state.stack;
        const rp0i = state.rp0;
        const rp0 = state.z0[rp0i];
        let loop = state.loop;
        const fv = state.fv;
        const pv = state.pv;
        const z1 = state.z1;

        while (loop--) {
            const pi = stack.pop();
            const p = z1[pi];

            if (exports.DEBUG) {
                console.log(
                    state.step,
                    (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +
                    'ALIGNRP[]', pi
                );
            }

            fv.setRelative(p, rp0, 0, pv);
            fv.touch(p);
        }

        state.loop = 1;
    }

    // RTG[] Round To Double Grid
    // 0x3D
    function RTDG(state) {
        if (exports.DEBUG) console.log(state.step, 'RTDG[]');

        state.round = roundToDoubleGrid;
    }

    // MIAP[a] Move Indirect Absolute Point
    // 0x3E-0x3F
    function MIAP(round, state) {
        const stack = state.stack;
        const n = stack.pop();
        const pi = stack.pop();
        const p = state.z0[pi];
        const fv = state.fv;
        const pv = state.pv;
        let cv = state.cvt[n];

        if (exports.DEBUG) {
            console.log(
                state.step,
                'MIAP[' + round + ']',
                n, '(', cv, ')', pi
            );
        }

        let d = pv.distance(p, HPZero);

        if (round) {
            if (Math.abs(d - cv) < state.cvCutIn) d = cv;

            d = state.round(d);
        }

        fv.setRelative(p, HPZero, d, pv);

        if (state.zp0 === 0) {
            p.xo = p.x;
            p.yo = p.y;
        }

        fv.touch(p);

        state.rp0 = state.rp1 = pi;
    }

    // NPUSB[] PUSH N Bytes
    // 0x40
    function NPUSHB(state) {
        const prog = state.prog;
        let ip = state.ip;
        const stack = state.stack;

        const n = prog[++ip];

        if (exports.DEBUG) console.log(state.step, 'NPUSHB[]', n);

        for (let i = 0; i < n; i++) stack.push(prog[++ip]);

        state.ip = ip;
    }

    // NPUSHW[] PUSH N Words
    // 0x41
    function NPUSHW(state) {
        let ip = state.ip;
        const prog = state.prog;
        const stack = state.stack;
        const n = prog[++ip];

        if (exports.DEBUG) console.log(state.step, 'NPUSHW[]', n);

        for (let i = 0; i < n; i++) {
            let w = (prog[++ip] << 8) | prog[++ip];
            if (w & 0x8000) w = -((w ^ 0xffff) + 1);
            stack.push(w);
        }

        state.ip = ip;
    }

    // WS[] Write Store
    // 0x42
    function WS$1(state) {
        const stack = state.stack;
        let store = state.store;

        if (!store) store = state.store = [];

        const v = stack.pop();
        const l = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'WS', v, l);

        store[l] = v;
    }

    // RS[] Read Store
    // 0x43
    function RS(state) {
        const stack = state.stack;
        const store = state.store;

        const l = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'RS', l);

        const v = (store && store[l]) || 0;

        stack.push(v);
    }

    // WCVTP[] Write Control Value Table in Pixel units
    // 0x44
    function WCVTP(state) {
        const stack = state.stack;

        const v = stack.pop();
        const l = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'WCVTP', v, l);

        state.cvt[l] = v / 0x40;
    }

    // RCVT[] Read Control Value Table entry
    // 0x45
    function RCVT(state) {
        const stack = state.stack;
        const cvte = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'RCVT', cvte);

        stack.push(state.cvt[cvte] * 0x40);
    }

    // GC[] Get Coordinate projected onto the projection vector
    // 0x46-0x47
    function GC(a, state) {
        const stack = state.stack;
        const pi = stack.pop();
        const p = state.z2[pi];

        if (exports.DEBUG) console.log(state.step, 'GC[' + a + ']', pi);

        stack.push(state.dpv.distance(p, HPZero, a, false) * 0x40);
    }

    // MD[a] Measure Distance
    // 0x49-0x4A
    function MD(a, state) {
        const stack = state.stack;
        const pi2 = stack.pop();
        const pi1 = stack.pop();
        const p2 = state.z1[pi2];
        const p1 = state.z0[pi1];
        const d = state.dpv.distance(p1, p2, a, a);

        if (exports.DEBUG) console.log(state.step, 'MD[' + a + ']', pi2, pi1, '->', d);

        state.stack.push(Math.round(d * 64));
    }

    // MPPEM[] Measure Pixels Per EM
    // 0x4B
    function MPPEM(state) {
        if (exports.DEBUG) console.log(state.step, 'MPPEM[]');
        state.stack.push(state.ppem);
    }

    // FLIPON[] set the auto FLIP Boolean to ON
    // 0x4D
    function FLIPON(state) {
        if (exports.DEBUG) console.log(state.step, 'FLIPON[]');
        state.autoFlip = true;
    }

    // LT[] Less Than
    // 0x50
    function LT(state) {
        const stack = state.stack;
        const e2 = stack.pop();
        const e1 = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'LT[]', e2, e1);

        stack.push(e1 < e2 ? 1 : 0);
    }

    // LTEQ[] Less Than or EQual
    // 0x53
    function LTEQ(state) {
        const stack = state.stack;
        const e2 = stack.pop();
        const e1 = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'LTEQ[]', e2, e1);

        stack.push(e1 <= e2 ? 1 : 0);
    }

    // GTEQ[] Greater Than
    // 0x52
    function GT(state) {
        const stack = state.stack;
        const e2 = stack.pop();
        const e1 = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'GT[]', e2, e1);

        stack.push(e1 > e2 ? 1 : 0);
    }

    // GTEQ[] Greater Than or EQual
    // 0x53
    function GTEQ(state) {
        const stack = state.stack;
        const e2 = stack.pop();
        const e1 = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'GTEQ[]', e2, e1);

        stack.push(e1 >= e2 ? 1 : 0);
    }

    // EQ[] EQual
    // 0x54
    function EQ(state) {
        const stack = state.stack;
        const e2 = stack.pop();
        const e1 = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'EQ[]', e2, e1);

        stack.push(e2 === e1 ? 1 : 0);
    }

    // NEQ[] Not EQual
    // 0x55
    function NEQ(state) {
        const stack = state.stack;
        const e2 = stack.pop();
        const e1 = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'NEQ[]', e2, e1);

        stack.push(e2 !== e1 ? 1 : 0);
    }

    // ODD[] ODD
    // 0x56
    function ODD(state) {
        const stack = state.stack;
        const n = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'ODD[]', n);

        stack.push(Math.trunc(n) % 2 ? 1 : 0);
    }

    // EVEN[] EVEN
    // 0x57
    function EVEN(state) {
        const stack = state.stack;
        const n = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'EVEN[]', n);

        stack.push(Math.trunc(n) % 2 ? 0 : 1);
    }

    // IF[] IF test
    // 0x58
    function IF(state) {
        let test = state.stack.pop();

        if (exports.DEBUG) console.log(state.step, 'IF[]', test);

        // if test is true it just continues
        // if not the ip is skipped until matching ELSE or EIF
        if (!test) {
            skip(state, true);

            if (exports.DEBUG) console.log(state.step, 'EIF[]');
        }
    }

    // EIF[] End IF
    // 0x59
    function EIF(state) {
        // this can be reached normally when
        // executing an else branch.
        // -> just ignore it

        if (exports.DEBUG) console.log(state.step, 'EIF[]');
    }

    // AND[] logical AND
    // 0x5A
    function AND(state) {
        const stack = state.stack;
        const e2 = stack.pop();
        const e1 = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'AND[]', e2, e1);

        stack.push(e2 && e1 ? 1 : 0);
    }

    // OR[] logical OR
    // 0x5B
    function OR(state) {
        const stack = state.stack;
        const e2 = stack.pop();
        const e1 = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'OR[]', e2, e1);

        stack.push(e2 || e1 ? 1 : 0);
    }

    // NOT[] logical NOT
    // 0x5C
    function NOT(state) {
        const stack = state.stack;
        const e = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'NOT[]', e);

        stack.push(e ? 0 : 1);
    }

    // DELTAP1[] DELTA exception P1
    // DELTAP2[] DELTA exception P2
    // DELTAP3[] DELTA exception P3
    // 0x5D, 0x71, 0x72
    function DELTAP123(b, state) {
        const stack = state.stack;
        const n = stack.pop();
        const fv = state.fv;
        const pv = state.pv;
        const ppem = state.ppem;
        const base = state.deltaBase + (b - 1) * 16;
        const ds = state.deltaShift;
        const z0 = state.z0;

        if (exports.DEBUG) console.log(state.step, 'DELTAP[' + b + ']', n, stack);

        for (let i = 0; i < n; i++) {
            const pi = stack.pop();
            const arg = stack.pop();
            const appem = base + ((arg & 0xF0) >> 4);
            if (appem !== ppem) continue;

            let mag = (arg & 0x0F) - 8;
            if (mag >= 0) mag++;
            if (exports.DEBUG) console.log(state.step, 'DELTAPFIX', pi, 'by', mag * ds);

            const p = z0[pi];
            fv.setRelative(p, p, mag * ds, pv);
        }
    }

    // SDB[] Set Delta Base in the graphics state
    // 0x5E
    function SDB(state) {
        const stack = state.stack;
        const n = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'SDB[]', n);

        state.deltaBase = n;
    }

    // SDS[] Set Delta Shift in the graphics state
    // 0x5F
    function SDS(state) {
        const stack = state.stack;
        const n = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'SDS[]', n);

        state.deltaShift = Math.pow(0.5, n);
    }

    // ADD[] ADD
    // 0x60
    function ADD(state) {
        const stack = state.stack;
        const n2 = stack.pop();
        const n1 = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'ADD[]', n2, n1);

        stack.push(n1 + n2);
    }

    // SUB[] SUB
    // 0x61
    function SUB(state) {
        const stack = state.stack;
        const n2 = stack.pop();
        const n1 = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'SUB[]', n2, n1);

        stack.push(n1 - n2);
    }

    // DIV[] DIV
    // 0x62
    function DIV(state) {
        const stack = state.stack;
        const n2 = stack.pop();
        const n1 = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'DIV[]', n2, n1);

        stack.push(n1 * 64 / n2);
    }

    // MUL[] MUL
    // 0x63
    function MUL(state) {
        const stack = state.stack;
        const n2 = stack.pop();
        const n1 = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'MUL[]', n2, n1);

        stack.push(n1 * n2 / 64);
    }

    // ABS[] ABSolute value
    // 0x64
    function ABS(state) {
        const stack = state.stack;
        const n = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'ABS[]', n);

        stack.push(Math.abs(n));
    }

    // NEG[] NEGate
    // 0x65
    function NEG(state) {
        const stack = state.stack;
        let n = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'NEG[]', n);

        stack.push(-n);
    }

    // FLOOR[] FLOOR
    // 0x66
    function FLOOR(state) {
        const stack = state.stack;
        const n = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'FLOOR[]', n);

        stack.push(Math.floor(n / 0x40) * 0x40);
    }

    // CEILING[] CEILING
    // 0x67
    function CEILING(state) {
        const stack = state.stack;
        const n = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'CEILING[]', n);

        stack.push(Math.ceil(n / 0x40) * 0x40);
    }

    // ROUND[ab] ROUND value
    // 0x68-0x6B
    function ROUND(dt, state) {
        const stack = state.stack;
        const n = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'ROUND[]');

        stack.push(state.round(n / 0x40) * 0x40);
    }

    // WCVTF[] Write Control Value Table in Funits
    // 0x70
    function WCVTF(state) {
        const stack = state.stack;
        const v = stack.pop();
        const l = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'WCVTF[]', v, l);

        state.cvt[l] = v * state.ppem / state.font.unitsPerEm;
    }

    // DELTAC1[] DELTA exception C1
    // DELTAC2[] DELTA exception C2
    // DELTAC3[] DELTA exception C3
    // 0x73, 0x74, 0x75
    function DELTAC123(b, state) {
        const stack = state.stack;
        const n = stack.pop();
        const ppem = state.ppem;
        const base = state.deltaBase + (b - 1) * 16;
        const ds = state.deltaShift;

        if (exports.DEBUG) console.log(state.step, 'DELTAC[' + b + ']', n, stack);

        for (let i = 0; i < n; i++) {
            const c = stack.pop();
            const arg = stack.pop();
            const appem = base + ((arg & 0xF0) >> 4);
            if (appem !== ppem) continue;

            let mag = (arg & 0x0F) - 8;
            if (mag >= 0) mag++;

            const delta = mag * ds;

            if (exports.DEBUG) console.log(state.step, 'DELTACFIX', c, 'by', delta);

            state.cvt[c] += delta;
        }
    }

    // SROUND[] Super ROUND
    // 0x76
    function SROUND(state) {
        let n = state.stack.pop();

        if (exports.DEBUG) console.log(state.step, 'SROUND[]', n);

        state.round = roundSuper;

        let period;

        switch (n & 0xC0) {
            case 0x00:
                period = 0.5;
                break;
            case 0x40:
                period = 1;
                break;
            case 0x80:
                period = 2;
                break;
            default:
                throw new Error('invalid SROUND value');
        }

        state.srPeriod = period;

        switch (n & 0x30) {
            case 0x00:
                state.srPhase = 0;
                break;
            case 0x10:
                state.srPhase = 0.25 * period;
                break;
            case 0x20:
                state.srPhase = 0.5  * period;
                break;
            case 0x30:
                state.srPhase = 0.75 * period;
                break;
            default: throw new Error('invalid SROUND value');
        }

        n &= 0x0F;

        if (n === 0) state.srThreshold = 0;
        else state.srThreshold = (n / 8 - 0.5) * period;
    }

    // S45ROUND[] Super ROUND 45 degrees
    // 0x77
    function S45ROUND(state) {
        let n = state.stack.pop();

        if (exports.DEBUG) console.log(state.step, 'S45ROUND[]', n);

        state.round = roundSuper;

        let period;

        switch (n & 0xC0) {
            case 0x00:
                period = Math.sqrt(2) / 2;
                break;
            case 0x40:
                period = Math.sqrt(2);
                break;
            case 0x80:
                period = 2 * Math.sqrt(2);
                break;
            default:
                throw new Error('invalid S45ROUND value');
        }

        state.srPeriod = period;

        switch (n & 0x30) {
            case 0x00:
                state.srPhase = 0;
                break;
            case 0x10:
                state.srPhase = 0.25 * period;
                break;
            case 0x20:
                state.srPhase = 0.5  * period;
                break;
            case 0x30:
                state.srPhase = 0.75 * period;
                break;
            default:
                throw new Error('invalid S45ROUND value');
        }

        n &= 0x0F;

        if (n === 0) state.srThreshold = 0;
        else state.srThreshold = (n / 8 - 0.5) * period;
    }

    // ROFF[] Round Off
    // 0x7A
    function ROFF(state) {
        if (exports.DEBUG) console.log(state.step, 'ROFF[]');

        state.round = roundOff;
    }

    // RUTG[] Round Up To Grid
    // 0x7C
    function RUTG(state) {
        if (exports.DEBUG) console.log(state.step, 'RUTG[]');

        state.round = roundUpToGrid;
    }

    // RDTG[] Round Down To Grid
    // 0x7D
    function RDTG(state) {
        if (exports.DEBUG) console.log(state.step, 'RDTG[]');

        state.round = roundDownToGrid;
    }

    // SCANCTRL[] SCAN conversion ConTRoL
    // 0x85
    function SCANCTRL(state) {
        const n = state.stack.pop();

        // ignored by opentype.js

        if (exports.DEBUG) console.log(state.step, 'SCANCTRL[]', n);
    }

    // SDPVTL[a] Set Dual Projection Vector To Line
    // 0x86-0x87
    function SDPVTL(a, state) {
        const stack = state.stack;
        const p2i = stack.pop();
        const p1i = stack.pop();
        const p2 = state.z2[p2i];
        const p1 = state.z1[p1i];

        if (exports.DEBUG) console.log(state.step, 'SDPVTL[' + a + ']', p2i, p1i);

        let dx;
        let dy;

        if (!a) {
            dx = p1.x - p2.x;
            dy = p1.y - p2.y;
        } else {
            dx = p2.y - p1.y;
            dy = p1.x - p2.x;
        }

        state.dpv = getUnitVector(dx, dy);
    }

    // GETINFO[] GET INFOrmation
    // 0x88
    function GETINFO(state) {
        const stack = state.stack;
        const sel = stack.pop();
        let r = 0;

        if (exports.DEBUG) console.log(state.step, 'GETINFO[]', sel);

        // v35 as in no subpixel hinting
        if (sel & 0x01) r = 35;

        // TODO rotation and stretch currently not supported
        // and thus those GETINFO are always 0.

        // opentype.js is always gray scaling
        if (sel & 0x20) r |= 0x1000;

        stack.push(r);
    }

    // ROLL[] ROLL the top three stack elements
    // 0x8A
    function ROLL(state) {
        const stack = state.stack;
        const a = stack.pop();
        const b = stack.pop();
        const c = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'ROLL[]');

        stack.push(b);
        stack.push(a);
        stack.push(c);
    }

    // MAX[] MAXimum of top two stack elements
    // 0x8B
    function MAX(state) {
        const stack = state.stack;
        const e2 = stack.pop();
        const e1 = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'MAX[]', e2, e1);

        stack.push(Math.max(e1, e2));
    }

    // MIN[] MINimum of top two stack elements
    // 0x8C
    function MIN(state) {
        const stack = state.stack;
        const e2 = stack.pop();
        const e1 = stack.pop();

        if (exports.DEBUG) console.log(state.step, 'MIN[]', e2, e1);

        stack.push(Math.min(e1, e2));
    }

    // SCANTYPE[] SCANTYPE
    // 0x8D
    function SCANTYPE(state) {
        const n = state.stack.pop();
        // ignored by opentype.js
        if (exports.DEBUG) console.log(state.step, 'SCANTYPE[]', n);
    }

    // INSTCTRL[] INSTCTRL
    // 0x8D
    function INSTCTRL(state) {
        const s = state.stack.pop();
        let v = state.stack.pop();

        if (exports.DEBUG) console.log(state.step, 'INSTCTRL[]', s, v);

        switch (s) {
            case 1 : state.inhibitGridFit = !!v; return;
            case 2 : state.ignoreCvt = !!v; return;
            default: throw new Error('invalid INSTCTRL[] selector');
        }
    }

    // PUSHB[abc] PUSH Bytes
    // 0xB0-0xB7
    function PUSHB(n, state) {
        const stack = state.stack;
        const prog = state.prog;
        let ip = state.ip;

        if (exports.DEBUG) console.log(state.step, 'PUSHB[' + n + ']');

        for (let i = 0; i < n; i++) stack.push(prog[++ip]);

        state.ip = ip;
    }

    // PUSHW[abc] PUSH Words
    // 0xB8-0xBF
    function PUSHW(n, state) {
        let ip = state.ip;
        const prog = state.prog;
        const stack = state.stack;

        if (exports.DEBUG) console.log(state.ip, 'PUSHW[' + n + ']');

        for (let i = 0; i < n; i++) {
            let w = (prog[++ip] << 8) | prog[++ip];
            if (w & 0x8000) w = -((w ^ 0xffff) + 1);
            stack.push(w);
        }

        state.ip = ip;
    }

    // MDRP[abcde] Move Direct Relative Point
    // 0xD0-0xEF
    // (if indirect is 0)
    //
    // and
    //
    // MIRP[abcde] Move Indirect Relative Point
    // 0xE0-0xFF
    // (if indirect is 1)

    function MDRP_MIRP(indirect, setRp0, keepD, ro, dt, state) {
        const stack = state.stack;
        const cvte = indirect && stack.pop();
        const pi = stack.pop();
        const rp0i = state.rp0;
        const rp = state.z0[rp0i];
        const p = state.z1[pi];

        const md = state.minDis;
        const fv = state.fv;
        const pv = state.dpv;
        let od; // original distance
        let d; // moving distance
        let sign; // sign of distance
        let cv;

        d = od = pv.distance(p, rp, true, true);
        sign = d >= 0 ? 1 : -1; // Math.sign would be 0 in case of 0

        // TODO consider autoFlip
        d = Math.abs(d);

        if (indirect) {
            cv = state.cvt[cvte];

            if (ro && Math.abs(d - cv) < state.cvCutIn) d = cv;
        }

        if (keepD && d < md) d = md;

        if (ro) d = state.round(d);

        fv.setRelative(p, rp, sign * d, pv);
        fv.touch(p);

        if (exports.DEBUG) {
            console.log(
                state.step,
                (indirect ? 'MIRP[' : 'MDRP[') +
                (setRp0 ? 'M' : 'm') +
                (keepD ? '>' : '_') +
                (ro ? 'R' : '_') +
                (dt === 0 ? 'Gr' : (dt === 1 ? 'Bl' : (dt === 2 ? 'Wh' : ''))) +
                ']',
                indirect ?
                    cvte + '(' + state.cvt[cvte] + ',' +  cv + ')' :
                    '',
                pi,
                '(d =', od, '->', sign * d, ')'
            );
        }

        state.rp1 = state.rp0;
        state.rp2 = pi;
        if (setRp0) state.rp0 = pi;
    }

    /*
    * The instruction table.
    */
    instructionTable = [
        /* 0x00 */ SVTCA.bind(undefined, yUnitVector),
        /* 0x01 */ SVTCA.bind(undefined, xUnitVector),
        /* 0x02 */ SPVTCA.bind(undefined, yUnitVector),
        /* 0x03 */ SPVTCA.bind(undefined, xUnitVector),
        /* 0x04 */ SFVTCA.bind(undefined, yUnitVector),
        /* 0x05 */ SFVTCA.bind(undefined, xUnitVector),
        /* 0x06 */ SPVTL.bind(undefined, 0),
        /* 0x07 */ SPVTL.bind(undefined, 1),
        /* 0x08 */ SFVTL.bind(undefined, 0),
        /* 0x09 */ SFVTL.bind(undefined, 1),
        /* 0x0A */ SPVFS,
        /* 0x0B */ SFVFS,
        /* 0x0C */ GPV,
        /* 0x0D */ GFV,
        /* 0x0E */ SFVTPV,
        /* 0x0F */ ISECT,
        /* 0x10 */ SRP0,
        /* 0x11 */ SRP1,
        /* 0x12 */ SRP2,
        /* 0x13 */ SZP0,
        /* 0x14 */ SZP1,
        /* 0x15 */ SZP2,
        /* 0x16 */ SZPS,
        /* 0x17 */ SLOOP,
        /* 0x18 */ RTG,
        /* 0x19 */ RTHG,
        /* 0x1A */ SMD,
        /* 0x1B */ ELSE,
        /* 0x1C */ JMPR,
        /* 0x1D */ SCVTCI,
        /* 0x1E */ undefined,   // TODO SSWCI
        /* 0x1F */ undefined,   // TODO SSW
        /* 0x20 */ DUP,
        /* 0x21 */ POP,
        /* 0x22 */ CLEAR,
        /* 0x23 */ SWAP,
        /* 0x24 */ DEPTH,
        /* 0x25 */ CINDEX,
        /* 0x26 */ MINDEX,
        /* 0x27 */ undefined,   // TODO ALIGNPTS
        /* 0x28 */ undefined,
        /* 0x29 */ undefined,   // TODO UTP
        /* 0x2A */ LOOPCALL,
        /* 0x2B */ CALL,
        /* 0x2C */ FDEF,
        /* 0x2D */ undefined,   // ENDF (eaten by FDEF)
        /* 0x2E */ MDAP.bind(undefined, 0),
        /* 0x2F */ MDAP.bind(undefined, 1),
        /* 0x30 */ IUP.bind(undefined, yUnitVector),
        /* 0x31 */ IUP.bind(undefined, xUnitVector),
        /* 0x32 */ SHP.bind(undefined, 0),
        /* 0x33 */ SHP.bind(undefined, 1),
        /* 0x34 */ SHC.bind(undefined, 0),
        /* 0x35 */ SHC.bind(undefined, 1),
        /* 0x36 */ SHZ.bind(undefined, 0),
        /* 0x37 */ SHZ.bind(undefined, 1),
        /* 0x38 */ SHPIX,
        /* 0x39 */ IP,
        /* 0x3A */ MSIRP.bind(undefined, 0),
        /* 0x3B */ MSIRP.bind(undefined, 1),
        /* 0x3C */ ALIGNRP,
        /* 0x3D */ RTDG,
        /* 0x3E */ MIAP.bind(undefined, 0),
        /* 0x3F */ MIAP.bind(undefined, 1),
        /* 0x40 */ NPUSHB,
        /* 0x41 */ NPUSHW,
        /* 0x42 */ WS$1,
        /* 0x43 */ RS,
        /* 0x44 */ WCVTP,
        /* 0x45 */ RCVT,
        /* 0x46 */ GC.bind(undefined, 0),
        /* 0x47 */ GC.bind(undefined, 1),
        /* 0x48 */ undefined,   // TODO SCFS
        /* 0x49 */ MD.bind(undefined, 0),
        /* 0x4A */ MD.bind(undefined, 1),
        /* 0x4B */ MPPEM,
        /* 0x4C */ undefined,   // TODO MPS
        /* 0x4D */ FLIPON,
        /* 0x4E */ undefined,   // TODO FLIPOFF
        /* 0x4F */ undefined,   // TODO DEBUG
        /* 0x50 */ LT,
        /* 0x51 */ LTEQ,
        /* 0x52 */ GT,
        /* 0x53 */ GTEQ,
        /* 0x54 */ EQ,
        /* 0x55 */ NEQ,
        /* 0x56 */ ODD,
        /* 0x57 */ EVEN,
        /* 0x58 */ IF,
        /* 0x59 */ EIF,
        /* 0x5A */ AND,
        /* 0x5B */ OR,
        /* 0x5C */ NOT,
        /* 0x5D */ DELTAP123.bind(undefined, 1),
        /* 0x5E */ SDB,
        /* 0x5F */ SDS,
        /* 0x60 */ ADD,
        /* 0x61 */ SUB,
        /* 0x62 */ DIV,
        /* 0x63 */ MUL,
        /* 0x64 */ ABS,
        /* 0x65 */ NEG,
        /* 0x66 */ FLOOR,
        /* 0x67 */ CEILING,
        /* 0x68 */ ROUND.bind(undefined, 0),
        /* 0x69 */ ROUND.bind(undefined, 1),
        /* 0x6A */ ROUND.bind(undefined, 2),
        /* 0x6B */ ROUND.bind(undefined, 3),
        /* 0x6C */ undefined,   // TODO NROUND[ab]
        /* 0x6D */ undefined,   // TODO NROUND[ab]
        /* 0x6E */ undefined,   // TODO NROUND[ab]
        /* 0x6F */ undefined,   // TODO NROUND[ab]
        /* 0x70 */ WCVTF,
        /* 0x71 */ DELTAP123.bind(undefined, 2),
        /* 0x72 */ DELTAP123.bind(undefined, 3),
        /* 0x73 */ DELTAC123.bind(undefined, 1),
        /* 0x74 */ DELTAC123.bind(undefined, 2),
        /* 0x75 */ DELTAC123.bind(undefined, 3),
        /* 0x76 */ SROUND,
        /* 0x77 */ S45ROUND,
        /* 0x78 */ undefined,   // TODO JROT[]
        /* 0x79 */ undefined,   // TODO JROF[]
        /* 0x7A */ ROFF,
        /* 0x7B */ undefined,
        /* 0x7C */ RUTG,
        /* 0x7D */ RDTG,
        /* 0x7E */ POP, // actually SANGW, supposed to do only a pop though
        /* 0x7F */ POP, // actually AA, supposed to do only a pop though
        /* 0x80 */ undefined,   // TODO FLIPPT
        /* 0x81 */ undefined,   // TODO FLIPRGON
        /* 0x82 */ undefined,   // TODO FLIPRGOFF
        /* 0x83 */ undefined,
        /* 0x84 */ undefined,
        /* 0x85 */ SCANCTRL,
        /* 0x86 */ SDPVTL.bind(undefined, 0),
        /* 0x87 */ SDPVTL.bind(undefined, 1),
        /* 0x88 */ GETINFO,
        /* 0x89 */ undefined,   // TODO IDEF
        /* 0x8A */ ROLL,
        /* 0x8B */ MAX,
        /* 0x8C */ MIN,
        /* 0x8D */ SCANTYPE,
        /* 0x8E */ INSTCTRL,
        /* 0x8F */ undefined,
        /* 0x90 */ undefined,
        /* 0x91 */ undefined,
        /* 0x92 */ undefined,
        /* 0x93 */ undefined,
        /* 0x94 */ undefined,
        /* 0x95 */ undefined,
        /* 0x96 */ undefined,
        /* 0x97 */ undefined,
        /* 0x98 */ undefined,
        /* 0x99 */ undefined,
        /* 0x9A */ undefined,
        /* 0x9B */ undefined,
        /* 0x9C */ undefined,
        /* 0x9D */ undefined,
        /* 0x9E */ undefined,
        /* 0x9F */ undefined,
        /* 0xA0 */ undefined,
        /* 0xA1 */ undefined,
        /* 0xA2 */ undefined,
        /* 0xA3 */ undefined,
        /* 0xA4 */ undefined,
        /* 0xA5 */ undefined,
        /* 0xA6 */ undefined,
        /* 0xA7 */ undefined,
        /* 0xA8 */ undefined,
        /* 0xA9 */ undefined,
        /* 0xAA */ undefined,
        /* 0xAB */ undefined,
        /* 0xAC */ undefined,
        /* 0xAD */ undefined,
        /* 0xAE */ undefined,
        /* 0xAF */ undefined,
        /* 0xB0 */ PUSHB.bind(undefined, 1),
        /* 0xB1 */ PUSHB.bind(undefined, 2),
        /* 0xB2 */ PUSHB.bind(undefined, 3),
        /* 0xB3 */ PUSHB.bind(undefined, 4),
        /* 0xB4 */ PUSHB.bind(undefined, 5),
        /* 0xB5 */ PUSHB.bind(undefined, 6),
        /* 0xB6 */ PUSHB.bind(undefined, 7),
        /* 0xB7 */ PUSHB.bind(undefined, 8),
        /* 0xB8 */ PUSHW.bind(undefined, 1),
        /* 0xB9 */ PUSHW.bind(undefined, 2),
        /* 0xBA */ PUSHW.bind(undefined, 3),
        /* 0xBB */ PUSHW.bind(undefined, 4),
        /* 0xBC */ PUSHW.bind(undefined, 5),
        /* 0xBD */ PUSHW.bind(undefined, 6),
        /* 0xBE */ PUSHW.bind(undefined, 7),
        /* 0xBF */ PUSHW.bind(undefined, 8),
        /* 0xC0 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 0),
        /* 0xC1 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 1),
        /* 0xC2 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 2),
        /* 0xC3 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 3),
        /* 0xC4 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 0),
        /* 0xC5 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 1),
        /* 0xC6 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 2),
        /* 0xC7 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 3),
        /* 0xC8 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 0),
        /* 0xC9 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 1),
        /* 0xCA */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 2),
        /* 0xCB */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 3),
        /* 0xCC */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 0),
        /* 0xCD */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 1),
        /* 0xCE */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 2),
        /* 0xCF */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 3),
        /* 0xD0 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 0),
        /* 0xD1 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 1),
        /* 0xD2 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 2),
        /* 0xD3 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 3),
        /* 0xD4 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 0),
        /* 0xD5 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 1),
        /* 0xD6 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 2),
        /* 0xD7 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 3),
        /* 0xD8 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 0),
        /* 0xD9 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 1),
        /* 0xDA */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 2),
        /* 0xDB */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 3),
        /* 0xDC */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 0),
        /* 0xDD */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 1),
        /* 0xDE */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 2),
        /* 0xDF */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 3),
        /* 0xE0 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 0),
        /* 0xE1 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 1),
        /* 0xE2 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 2),
        /* 0xE3 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 3),
        /* 0xE4 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 0),
        /* 0xE5 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 1),
        /* 0xE6 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 2),
        /* 0xE7 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 3),
        /* 0xE8 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 0),
        /* 0xE9 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 1),
        /* 0xEA */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 2),
        /* 0xEB */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 3),
        /* 0xEC */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 0),
        /* 0xED */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 1),
        /* 0xEE */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 2),
        /* 0xEF */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 3),
        /* 0xF0 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 0),
        /* 0xF1 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 1),
        /* 0xF2 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 2),
        /* 0xF3 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 3),
        /* 0xF4 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 0),
        /* 0xF5 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 1),
        /* 0xF6 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 2),
        /* 0xF7 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 3),
        /* 0xF8 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 0),
        /* 0xF9 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 1),
        /* 0xFA */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 2),
        /* 0xFB */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 3),
        /* 0xFC */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 0),
        /* 0xFD */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 1),
        /* 0xFE */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 2),
        /* 0xFF */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 3)
    ];

    /*****************************
      Mathematical Considerations
    ******************************

    fv ... refers to freedom vector
    pv ... refers to projection vector
    rp ... refers to reference point
    p  ... refers to to point being operated on
    d  ... refers to distance

    SETRELATIVE:
    ============

    case freedom vector == x-axis:
    ------------------------------

                            (pv)
                         .-'
                  rpd .-'
                   .-*
              d .-'90°'
             .-'       '
          .-'           '
       *-'               ' b
      rp                  '
                           '
                            '
                p *----------*-------------- (fv)
                              pm

      rpdx = rpx + d * pv.x
      rpdy = rpy + d * pv.y

      equation of line b

       y - rpdy = pvns * (x- rpdx)

       y = p.y

       x = rpdx + ( p.y - rpdy ) / pvns


    case freedom vector == y-axis:
    ------------------------------

        * pm
        |\
        | \
        |  \
        |   \
        |    \
        |     \
        |      \
        |       \
        |        \
        |         \ b
        |          \
        |           \
        |            \    .-' (pv)
        |         90° \.-'
        |           .-'* rpd
        |        .-'
        *     *-'  d
        p     rp

      rpdx = rpx + d * pv.x
      rpdy = rpy + d * pv.y

      equation of line b:
               pvns ... normal slope to pv

       y - rpdy = pvns * (x - rpdx)

       x = p.x

       y = rpdy +  pvns * (p.x - rpdx)



    generic case:
    -------------


                                  .'(fv)
                                .'
                              .* pm
                            .' !
                          .'    .
                        .'      !
                      .'         . b
                    .'           !
                   *              .
                  p               !
                             90°   .    ... (pv)
                               ...-*-'''
                      ...---'''    rpd
             ...---'''   d
       *--'''
      rp

        rpdx = rpx + d * pv.x
        rpdy = rpy + d * pv.y

     equation of line b:
        pvns... normal slope to pv

        y - rpdy = pvns * (x - rpdx)

     equation of freedom vector line:
        fvs ... slope of freedom vector (=fy/fx)

        y - py = fvs * (x - px)


      on pm both equations are true for same x/y

        y - rpdy = pvns * (x - rpdx)

        y - py = fvs * (x - px)

      form to y and set equal:

        pvns * (x - rpdx) + rpdy = fvs * (x - px) + py

      expand:

        pvns * x - pvns * rpdx + rpdy = fvs * x - fvs * px + py

      switch:

        fvs * x - fvs * px + py = pvns * x - pvns * rpdx + rpdy

      solve for x:

        fvs * x - pvns * x = fvs * px - pvns * rpdx - py + rpdy



              fvs * px - pvns * rpdx + rpdy - py
        x =  -----------------------------------
                     fvs - pvns

      and:

        y = fvs * (x - px) + py



    INTERPOLATE:
    ============

    Examples of point interpolation.

    The weight of the movement of the reference point gets bigger
    the further the other reference point is away, thus the safest
    option (that is avoiding 0/0 divisions) is to weight the
    original distance of the other point by the sum of both distances.

    If the sum of both distances is 0, then move the point by the
    arithmetic average of the movement of both reference points.




               (+6)
        rp1o *---->*rp1
             .     .                          (+12)
             .     .                  rp2o *---------->* rp2
             .     .                       .           .
             .     .                       .           .
             .    10          20           .           .
             |.........|...................|           .
                   .   .                               .
                   .   . (+8)                          .
                    po *------>*p                      .
                   .           .                       .
                   .    12     .          24           .
                   |...........|.......................|
                                      36


    -------



               (+10)
        rp1o *-------->*rp1
             .         .                      (-10)
             .         .              rp2 *<---------* rpo2
             .         .                   .         .
             .         .                   .         .
             .    10   .          30       .         .
             |.........|.............................|
                       .                   .
                       . (+5)              .
                    po *--->* p            .
                       .    .              .
                       .    .   20         .
                       |....|..............|
                         5        15


    -------


               (+10)
        rp1o *-------->*rp1
             .         .
             .         .
        rp2o *-------->*rp2


                                   (+10)
                              po *-------->* p

    -------


               (+10)
        rp1o *-------->*rp1
             .         .
             .         .(+30)
        rp2o *---------------------------->*rp2


                                            (+25)
                              po *----------------------->* p



    vim: set ts=4 sw=4 expandtab:
    *****/

    // The Font object

    /**
     * @typedef FontOptions
     * @type Object
     * @property {Boolean} empty - whether to create a new empty font
     * @property {string} familyName
     * @property {string} styleName
     * @property {string=} fullName
     * @property {string=} postScriptName
     * @property {string=} designer
     * @property {string=} designerURL
     * @property {string=} manufacturer
     * @property {string=} manufacturerURL
     * @property {string=} license
     * @property {string=} licenseURL
     * @property {string=} version
     * @property {string=} description
     * @property {string=} copyright
     * @property {string=} trademark
     * @property {Number} unitsPerEm
     * @property {Number} ascender
     * @property {Number} descender
     * @property {Number} createdTimestamp
     * @property {string=} weightClass
     * @property {string=} widthClass
     * @property {string=} fsSelection
     */

    /**
     * A Font represents a loaded OpenType font file.
     * It contains a set of glyphs and methods to draw text on a drawing context,
     * or to get a path representing the text.
     * @exports opentype.Font
     * @class
     * @param {FontOptions}
     * @constructor
     */
    function Font(options) {
        options = options || {};

        if (!options.empty) {
            // Check that we've provided the minimum set of names.
            checkArgument(options.familyName, 'When creating a new Font object, familyName is required.');
            checkArgument(options.styleName, 'When creating a new Font object, styleName is required.');
            checkArgument(options.unitsPerEm, 'When creating a new Font object, unitsPerEm is required.');
            checkArgument(options.ascender, 'When creating a new Font object, ascender is required.');
            checkArgument(options.descender, 'When creating a new Font object, descender is required.');
            checkArgument(options.descender < 0, 'Descender should be negative (e.g. -512).');

            // OS X will complain if the names are empty, so we put a single space everywhere by default.
            this.names = {
                fontFamily: {en: options.familyName || ' '},
                fontSubfamily: {en: options.styleName || ' '},
                fullName: {en: options.fullName || options.familyName + ' ' + options.styleName},
                postScriptName: {en: options.postScriptName || options.familyName + options.styleName},
                designer: {en: options.designer || ' '},
                designerURL: {en: options.designerURL || ' '},
                manufacturer: {en: options.manufacturer || ' '},
                manufacturerURL: {en: options.manufacturerURL || ' '},
                license: {en: options.license || ' '},
                licenseURL: {en: options.licenseURL || ' '},
                version: {en: options.version || 'Version 0.1'},
                description: {en: options.description || ' '},
                copyright: {en: options.copyright || ' '},
                trademark: {en: options.trademark || ' '}
            };
            this.unitsPerEm = options.unitsPerEm || 1000;
            this.ascender = options.ascender;
            this.descender = options.descender;
            this.createdTimestamp = options.createdTimestamp;
            this.tables = { os2: {
                usWeightClass: options.weightClass || this.usWeightClasses.MEDIUM,
                usWidthClass: options.widthClass || this.usWidthClasses.MEDIUM,
                fsSelection: options.fsSelection || this.fsSelectionValues.REGULAR
            } };
        }

        this.supported = true; // Deprecated: parseBuffer will throw an error if font is not supported.
        this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);
        this.encoding = new DefaultEncoding(this);
        this.position = new Position(this);
        this.substitution = new Substitution(this);
        this.tables = this.tables || {};

        Object.defineProperty(this, 'hinting', {
            get: function() {
                if (this._hinting) return this._hinting;
                if (this.outlinesFormat === 'truetype') {
                    return (this._hinting = new Hinting(this));
                }
            }
        });
    }

    /**
     * Check if the font has a glyph for the given character.
     * @param  {string}
     * @return {Boolean}
     */
    Font.prototype.hasChar = function(c) {
        return this.encoding.charToGlyphIndex(c) !== null;
    };

    /**
     * Convert the given character to a single glyph index.
     * Note that this function assumes that there is a one-to-one mapping between
     * the given character and a glyph; for complex scripts this might not be the case.
     * @param  {string}
     * @return {Number}
     */
    Font.prototype.charToGlyphIndex = function(s) {
        return this.encoding.charToGlyphIndex(s);
    };

    /**
     * Convert the given character to a single Glyph object.
     * Note that this function assumes that there is a one-to-one mapping between
     * the given character and a glyph; for complex scripts this might not be the case.
     * @param  {string}
     * @return {opentype.Glyph}
     */
    Font.prototype.charToGlyph = function(c) {
        const glyphIndex = this.charToGlyphIndex(c);
        let glyph = this.glyphs.get(glyphIndex);
        if (!glyph) {
            // .notdef
            glyph = this.glyphs.get(0);
        }

        return glyph;
    };

    /**
     * Convert the given text to a list of Glyph objects.
     * Note that there is no strict one-to-one mapping between characters and
     * glyphs, so the list of returned glyphs can be larger or smaller than the
     * length of the given string.
     * @param  {string}
     * @param  {GlyphRenderOptions} [options]
     * @return {opentype.Glyph[]}
     */
    Font.prototype.stringToGlyphs = function(s, options) {
        options = options || this.defaultRenderOptions;
        // Get glyph indexes
        const indexes = [];
        for (let i = 0; i < s.length; i += 1) {
            const c = s[i];
            indexes.push(this.charToGlyphIndex(c));
        }
        let length = indexes.length;

        // Apply substitutions on glyph indexes
        if (options.features) {
            const script = options.script || this.substitution.getDefaultScriptName();
            let manyToOne = [];
            if (options.features.liga) manyToOne = manyToOne.concat(this.substitution.getFeature('liga', script, options.language));
            if (options.features.rlig) manyToOne = manyToOne.concat(this.substitution.getFeature('rlig', script, options.language));
            for (let i = 0; i < length; i += 1) {
                for (let j = 0; j < manyToOne.length; j++) {
                    const ligature = manyToOne[j];
                    const components = ligature.sub;
                    const compCount = components.length;
                    let k = 0;
                    while (k < compCount && components[k] === indexes[i + k]) k++;
                    if (k === compCount) {
                        indexes.splice(i, compCount, ligature.by);
                        length = length - compCount + 1;
                    }
                }
            }
        }

        // convert glyph indexes to glyph objects
        const glyphs = new Array(length);
        const notdef = this.glyphs.get(0);
        for (let i = 0; i < length; i += 1) {
            glyphs[i] = this.glyphs.get(indexes[i]) || notdef;
        }
        return glyphs;
    };

    /**
     * @param  {string}
     * @return {Number}
     */
    Font.prototype.nameToGlyphIndex = function(name) {
        return this.glyphNames.nameToGlyphIndex(name);
    };

    /**
     * @param  {string}
     * @return {opentype.Glyph}
     */
    Font.prototype.nameToGlyph = function(name) {
        const glyphIndex = this.nameToGlyphIndex(name);
        let glyph = this.glyphs.get(glyphIndex);
        if (!glyph) {
            // .notdef
            glyph = this.glyphs.get(0);
        }

        return glyph;
    };

    /**
     * @param  {Number}
     * @return {String}
     */
    Font.prototype.glyphIndexToName = function(gid) {
        if (!this.glyphNames.glyphIndexToName) {
            return '';
        }

        return this.glyphNames.glyphIndexToName(gid);
    };

    /**
     * Retrieve the value of the kerning pair between the left glyph (or its index)
     * and the right glyph (or its index). If no kerning pair is found, return 0.
     * The kerning value gets added to the advance width when calculating the spacing
     * between glyphs.
     * @param  {opentype.Glyph} leftGlyph
     * @param  {opentype.Glyph} rightGlyph
     * @return {Number}
     */
    Font.prototype.getKerningValue = function(leftGlyph, rightGlyph) {
        leftGlyph = leftGlyph.index || leftGlyph;
        rightGlyph = rightGlyph.index || rightGlyph;
        return this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0;
    };

    /**
     * @typedef GlyphRenderOptions
     * @type Object
     * @property {string} [script] - script used to determine which features to apply. By default, 'DFLT' or 'latn' is used.
     *                               See https://www.microsoft.com/typography/otspec/scripttags.htm
     * @property {string} [language='dflt'] - language system used to determine which features to apply.
     *                                        See https://www.microsoft.com/typography/developers/opentype/languagetags.aspx
     * @property {boolean} [kerning=true] - whether to include kerning values
     * @property {object} [features] - OpenType Layout feature tags. Used to enable or disable the features of the given script/language system.
     *                                 See https://www.microsoft.com/typography/otspec/featuretags.htm
     */
    Font.prototype.defaultRenderOptions = {
        kerning: true,
        features: {
            liga: true,
            rlig: true
        }
    };

    /**
     * Helper function that invokes the given callback for each glyph in the given text.
     * The callback gets `(glyph, x, y, fontSize, options)`.* @param  {string} text
     * @param {string} text - The text to apply.
     * @param  {number} [x=0] - Horizontal position of the beginning of the text.
     * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
     * @param  {GlyphRenderOptions=} options
     * @param  {Function} callback
     */
    Font.prototype.forEachGlyph = function(text, x, y, fontSize, options, callback) {
        x = x !== undefined ? x : 0;
        y = y !== undefined ? y : 0;
        fontSize = fontSize !== undefined ? fontSize : 72;
        options = options || this.defaultRenderOptions;
        const fontScale = 1 / this.unitsPerEm * fontSize;
        const glyphs = this.stringToGlyphs(text, options);
        let kerningLookups;
        if (options.kerning) {
            const script = options.script || this.position.getDefaultScriptName();
            kerningLookups = this.position.getKerningTables(script, options.language);
        }
        for (let i = 0; i < glyphs.length; i += 1) {
            const glyph = glyphs[i];
            callback.call(this, glyph, x, y, fontSize, options);
            if (glyph.advanceWidth) {
                x += glyph.advanceWidth * fontScale;
            }

            if (options.kerning && i < glyphs.length - 1) {
                // We should apply position adjustment lookups in a more generic way.
                // Here we only use the xAdvance value.
                const kerningValue = kerningLookups ?
                      this.position.getKerningValue(kerningLookups, glyph.index, glyphs[i + 1].index) :
                      this.getKerningValue(glyph, glyphs[i + 1]);
                x += kerningValue * fontScale;
            }

            if (options.letterSpacing) {
                x += options.letterSpacing * fontSize;
            } else if (options.tracking) {
                x += (options.tracking / 1000) * fontSize;
            }
        }
        return x;
    };

    /**
     * Create a Path object that represents the given text.
     * @param  {string} text - The text to create.
     * @param  {number} [x=0] - Horizontal position of the beginning of the text.
     * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
     * @param  {GlyphRenderOptions=} options
     * @return {opentype.Path}
     */
    Font.prototype.getPath = function(text, x, y, fontSize, options) {
        const fullPath = new Path();
        this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
            const glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);
            fullPath.extend(glyphPath);
        });
        return fullPath;
    };

    /**
     * Create an array of Path objects that represent the glyphs of a given text.
     * @param  {string} text - The text to create.
     * @param  {number} [x=0] - Horizontal position of the beginning of the text.
     * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
     * @param  {GlyphRenderOptions=} options
     * @return {opentype.Path[]}
     */
    Font.prototype.getPaths = function(text, x, y, fontSize, options) {
        const glyphPaths = [];
        this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
            const glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);
            glyphPaths.push(glyphPath);
        });

        return glyphPaths;
    };

    /**
     * Returns the advance width of a text.
     *
     * This is something different than Path.getBoundingBox() as for example a
     * suffixed whitespace increases the advanceWidth but not the bounding box
     * or an overhanging letter like a calligraphic 'f' might have a quite larger
     * bounding box than its advance width.
     *
     * This corresponds to canvas2dContext.measureText(text).width
     *
     * @param  {string} text - The text to create.
     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
     * @param  {GlyphRenderOptions=} options
     * @return advance width
     */
    Font.prototype.getAdvanceWidth = function(text, fontSize, options) {
        return this.forEachGlyph(text, 0, 0, fontSize, options, function() {});
    };

    /**
     * Draw the text on the given drawing context.
     * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
     * @param  {string} text - The text to create.
     * @param  {number} [x=0] - Horizontal position of the beginning of the text.
     * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
     * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
     * @param  {GlyphRenderOptions=} options
     */
    Font.prototype.draw = function(ctx, text, x, y, fontSize, options) {
        this.getPath(text, x, y, fontSize, options).draw(ctx);
    };

    /**
     * Draw the points of all glyphs in the text.
     * On-curve points will be drawn in blue, off-curve points will be drawn in red.
     * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
     * @param {string} text - The text to create.
     * @param {number} [x=0] - Horizontal position of the beginning of the text.
     * @param {number} [y=0] - Vertical position of the *baseline* of the text.
     * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
     * @param {GlyphRenderOptions=} options
     */
    Font.prototype.drawPoints = function(ctx, text, x, y, fontSize, options) {
        this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
            glyph.drawPoints(ctx, gX, gY, gFontSize);
        });
    };

    /**
     * Draw lines indicating important font measurements for all glyphs in the text.
     * Black lines indicate the origin of the coordinate system (point 0,0).
     * Blue lines indicate the glyph bounding box.
     * Green line indicates the advance width of the glyph.
     * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
     * @param {string} text - The text to create.
     * @param {number} [x=0] - Horizontal position of the beginning of the text.
     * @param {number} [y=0] - Vertical position of the *baseline* of the text.
     * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
     * @param {GlyphRenderOptions=} options
     */
    Font.prototype.drawMetrics = function(ctx, text, x, y, fontSize, options) {
        this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
            glyph.drawMetrics(ctx, gX, gY, gFontSize);
        });
    };

    /**
     * @param  {string}
     * @return {string}
     */
    Font.prototype.getEnglishName = function(name) {
        const translations = this.names[name];
        if (translations) {
            return translations.en;
        }
    };

    /**
     * Validate
     */
    Font.prototype.validate = function() {
        const _this = this;

        function assert(predicate, message) {
        }

        function assertNamePresent(name) {
            const englishName = _this.getEnglishName(name);
            assert(englishName && englishName.trim().length > 0,
                   'No English ' + name + ' specified.');
        }

        // Identification information
        assertNamePresent('fontFamily');
        assertNamePresent('weightName');
        assertNamePresent('manufacturer');
        assertNamePresent('copyright');
        assertNamePresent('version');

        // Dimension information
        assert(this.unitsPerEm > 0, 'No unitsPerEm specified.');
    };

    /**
     * Convert the font object to a SFNT data structure.
     * This structure contains all the necessary tables and metadata to create a binary OTF file.
     * @return {opentype.Table}
     */
    Font.prototype.toTables = function() {
        return sfnt.fontToTable(this);
    };
    /**
     * @deprecated Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.
     */
    Font.prototype.toBuffer = function() {
        console.warn('Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.');
        return this.toArrayBuffer();
    };
    /**
     * Converts a `opentype.Font` into an `ArrayBuffer`
     * @return {ArrayBuffer}
     */
    Font.prototype.toArrayBuffer = function() {
        const sfntTable = this.toTables();
        const bytes = sfntTable.encode();
        const buffer = new ArrayBuffer(bytes.length);
        const intArray = new Uint8Array(buffer);
        for (let i = 0; i < bytes.length; i++) {
            intArray[i] = bytes[i];
        }

        return buffer;
    };

    /**
     * Initiate a download of the OpenType font.
     */
    Font.prototype.download = function(fileName) {
        const familyName = this.getEnglishName('fontFamily');
        const styleName = this.getEnglishName('fontSubfamily');
        fileName = fileName || familyName.replace(/\s/g, '') + '-' + styleName + '.otf';
        const arrayBuffer = this.toArrayBuffer();

        if (isBrowser()) {
            window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
            window.requestFileSystem(window.TEMPORARY, arrayBuffer.byteLength, function(fs) {
                fs.root.getFile(fileName, {create: true}, function(fileEntry) {
                    fileEntry.createWriter(function(writer) {
                        const dataView = new DataView(arrayBuffer);
                        const blob = new Blob([dataView], {type: 'font/opentype'});
                        writer.write(blob);

                        writer.addEventListener('writeend', function() {
                            // Navigating to the file will download it.
                            location.href = fileEntry.toURL();
                        }, false);
                    });
                });
            },
            function(err) {
                throw new Error(err.name + ': ' + err.message);
            });
        } else {
            const fs = require('fs');
            const buffer = arrayBufferToNodeBuffer(arrayBuffer);
            fs.writeFileSync(fileName, buffer);
        }
    };
    /**
     * @private
     */
    Font.prototype.fsSelectionValues = {
        ITALIC:              0x001, //1
        UNDERSCORE:          0x002, //2
        NEGATIVE:            0x004, //4
        OUTLINED:            0x008, //8
        STRIKEOUT:           0x010, //16
        BOLD:                0x020, //32
        REGULAR:             0x040, //64
        USER_TYPO_METRICS:   0x080, //128
        WWS:                 0x100, //256
        OBLIQUE:             0x200  //512
    };

    /**
     * @private
     */
    Font.prototype.usWidthClasses = {
        ULTRA_CONDENSED: 1,
        EXTRA_CONDENSED: 2,
        CONDENSED: 3,
        SEMI_CONDENSED: 4,
        MEDIUM: 5,
        SEMI_EXPANDED: 6,
        EXPANDED: 7,
        EXTRA_EXPANDED: 8,
        ULTRA_EXPANDED: 9
    };

    /**
     * @private
     */
    Font.prototype.usWeightClasses = {
        THIN: 100,
        EXTRA_LIGHT: 200,
        LIGHT: 300,
        NORMAL: 400,
        MEDIUM: 500,
        SEMI_BOLD: 600,
        BOLD: 700,
        EXTRA_BOLD: 800,
        BLACK:    900
    };

    // The `fvar` table stores font variation axes and instances.

    function addName(name, names) {
        const nameString = JSON.stringify(name);
        let nameID = 256;
        for (let nameKey in names) {
            let n = parseInt(nameKey);
            if (!n || n < 256) {
                continue;
            }

            if (JSON.stringify(names[nameKey]) === nameString) {
                return n;
            }

            if (nameID <= n) {
                nameID = n + 1;
            }
        }

        names[nameID] = name;
        return nameID;
    }

    function makeFvarAxis(n, axis, names) {
        const nameID = addName(axis.name, names);
        return [
            {name: 'tag_' + n, type: 'TAG', value: axis.tag},
            {name: 'minValue_' + n, type: 'FIXED', value: axis.minValue << 16},
            {name: 'defaultValue_' + n, type: 'FIXED', value: axis.defaultValue << 16},
            {name: 'maxValue_' + n, type: 'FIXED', value: axis.maxValue << 16},
            {name: 'flags_' + n, type: 'USHORT', value: 0},
            {name: 'nameID_' + n, type: 'USHORT', value: nameID}
        ];
    }

    function parseFvarAxis(data, start, names) {
        const axis = {};
        const p = new parse.Parser(data, start);
        axis.tag = p.parseTag();
        axis.minValue = p.parseFixed();
        axis.defaultValue = p.parseFixed();
        axis.maxValue = p.parseFixed();
        p.skip('uShort', 1);  // reserved for flags; no values defined
        axis.name = names[p.parseUShort()] || {};
        return axis;
    }

    function makeFvarInstance(n, inst, axes, names) {
        const nameID = addName(inst.name, names);
        const fields = [
            {name: 'nameID_' + n, type: 'USHORT', value: nameID},
            {name: 'flags_' + n, type: 'USHORT', value: 0}
        ];

        for (let i = 0; i < axes.length; ++i) {
            const axisTag = axes[i].tag;
            fields.push({
                name: 'axis_' + n + ' ' + axisTag,
                type: 'FIXED',
                value: inst.coordinates[axisTag] << 16
            });
        }

        return fields;
    }

    function parseFvarInstance(data, start, axes, names) {
        const inst = {};
        const p = new parse.Parser(data, start);
        inst.name = names[p.parseUShort()] || {};
        p.skip('uShort', 1);  // reserved for flags; no values defined

        inst.coordinates = {};
        for (let i = 0; i < axes.length; ++i) {
            inst.coordinates[axes[i].tag] = p.parseFixed();
        }

        return inst;
    }

    function makeFvarTable(fvar, names) {
        const result = new table.Table('fvar', [
            {name: 'version', type: 'ULONG', value: 0x10000},
            {name: 'offsetToData', type: 'USHORT', value: 0},
            {name: 'countSizePairs', type: 'USHORT', value: 2},
            {name: 'axisCount', type: 'USHORT', value: fvar.axes.length},
            {name: 'axisSize', type: 'USHORT', value: 20},
            {name: 'instanceCount', type: 'USHORT', value: fvar.instances.length},
            {name: 'instanceSize', type: 'USHORT', value: 4 + fvar.axes.length * 4}
        ]);
        result.offsetToData = result.sizeOf();

        for (let i = 0; i < fvar.axes.length; i++) {
            result.fields = result.fields.concat(makeFvarAxis(i, fvar.axes[i], names));
        }

        for (let j = 0; j < fvar.instances.length; j++) {
            result.fields = result.fields.concat(makeFvarInstance(j, fvar.instances[j], fvar.axes, names));
        }

        return result;
    }

    function parseFvarTable(data, start, names) {
        const p = new parse.Parser(data, start);
        const tableVersion = p.parseULong();
        check.argument(tableVersion === 0x00010000, 'Unsupported fvar table version.');
        const offsetToData = p.parseOffset16();
        // Skip countSizePairs.
        p.skip('uShort', 1);
        const axisCount = p.parseUShort();
        const axisSize = p.parseUShort();
        const instanceCount = p.parseUShort();
        const instanceSize = p.parseUShort();

        const axes = [];
        for (let i = 0; i < axisCount; i++) {
            axes.push(parseFvarAxis(data, start + offsetToData + i * axisSize, names));
        }

        const instances = [];
        const instanceStart = start + offsetToData + axisCount * axisSize;
        for (let j = 0; j < instanceCount; j++) {
            instances.push(parseFvarInstance(data, instanceStart + j * instanceSize, axes, names));
        }

        return {axes: axes, instances: instances};
    }

    var fvar = { make: makeFvarTable, parse: parseFvarTable };

    // The `GPOS` table contains kerning pairs, among other things.

    const subtableParsers$1 = new Array(10);         // subtableParsers[0] is unused

    // https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-1-single-adjustment-positioning-subtable
    // this = Parser instance
    subtableParsers$1[1] = function parseLookup1() {
        const start = this.offset + this.relativeOffset;
        const posformat = this.parseUShort();
        if (posformat === 1) {
            return {
                posFormat: 1,
                coverage: this.parsePointer(Parser.coverage),
                value: this.parseValueRecord()
            };
        } else if (posformat === 2) {
            return {
                posFormat: 2,
                coverage: this.parsePointer(Parser.coverage),
                values: this.parseValueRecordList()
            };
        }
        check.assert(false, '0x' + start.toString(16) + ': GPOS lookup type 1 format must be 1 or 2.');
    };

    // https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-2-pair-adjustment-positioning-subtable
    subtableParsers$1[2] = function parseLookup2() {
        const start = this.offset + this.relativeOffset;
        const posFormat = this.parseUShort();
        const coverage = this.parsePointer(Parser.coverage);
        const valueFormat1 = this.parseUShort();
        const valueFormat2 = this.parseUShort();
        if (posFormat === 1) {
            // Adjustments for Glyph Pairs
            return {
                posFormat: posFormat,
                coverage: coverage,
                valueFormat1: valueFormat1,
                valueFormat2: valueFormat2,
                pairSets: this.parseList(Parser.pointer(Parser.list(function() {
                    return {        // pairValueRecord
                        secondGlyph: this.parseUShort(),
                        value1: this.parseValueRecord(valueFormat1),
                        value2: this.parseValueRecord(valueFormat2)
                    };
                })))
            };
        } else if (posFormat === 2) {
            const classDef1 = this.parsePointer(Parser.classDef);
            const classDef2 = this.parsePointer(Parser.classDef);
            const class1Count = this.parseUShort();
            const class2Count = this.parseUShort();
            return {
                // Class Pair Adjustment
                posFormat: posFormat,
                coverage: coverage,
                valueFormat1: valueFormat1,
                valueFormat2: valueFormat2,
                classDef1: classDef1,
                classDef2: classDef2,
                class1Count: class1Count,
                class2Count: class2Count,
                classRecords: this.parseList(class1Count, Parser.list(class2Count, function() {
                    return {
                        value1: this.parseValueRecord(valueFormat1),
                        value2: this.parseValueRecord(valueFormat2)
                    };
                }))
            };
        }
        check.assert(false, '0x' + start.toString(16) + ': GPOS lookup type 2 format must be 1 or 2.');
    };

    subtableParsers$1[3] = function parseLookup3() { return { error: 'GPOS Lookup 3 not supported' }; };
    subtableParsers$1[4] = function parseLookup4() { return { error: 'GPOS Lookup 4 not supported' }; };
    subtableParsers$1[5] = function parseLookup5() { return { error: 'GPOS Lookup 5 not supported' }; };
    subtableParsers$1[6] = function parseLookup6() { return { error: 'GPOS Lookup 6 not supported' }; };
    subtableParsers$1[7] = function parseLookup7() { return { error: 'GPOS Lookup 7 not supported' }; };
    subtableParsers$1[8] = function parseLookup8() { return { error: 'GPOS Lookup 8 not supported' }; };
    subtableParsers$1[9] = function parseLookup9() { return { error: 'GPOS Lookup 9 not supported' }; };

    // https://docs.microsoft.com/en-us/typography/opentype/spec/gpos
    function parseGposTable(data, start) {
        start = start || 0;
        const p = new Parser(data, start);
        const tableVersion = p.parseVersion(1);
        check.argument(tableVersion === 1 || tableVersion === 1.1, 'Unsupported GPOS table version ' + tableVersion);

        if (tableVersion === 1) {
            return {
                version: tableVersion,
                scripts: p.parseScriptList(),
                features: p.parseFeatureList(),
                lookups: p.parseLookupList(subtableParsers$1)
            };
        } else {
            return {
                version: tableVersion,
                scripts: p.parseScriptList(),
                features: p.parseFeatureList(),
                lookups: p.parseLookupList(subtableParsers$1),
                variations: p.parseFeatureVariationsList()
            };
        }

    }

    // GPOS Writing //////////////////////////////////////////////
    // NOT SUPPORTED
    const subtableMakers$1 = new Array(10);

    function makeGposTable(gpos) {
        return new table.Table('GPOS', [
            {name: 'version', type: 'ULONG', value: 0x10000},
            {name: 'scripts', type: 'TABLE', value: new table.ScriptList(gpos.scripts)},
            {name: 'features', type: 'TABLE', value: new table.FeatureList(gpos.features)},
            {name: 'lookups', type: 'TABLE', value: new table.LookupList(gpos.lookups, subtableMakers$1)}
        ]);
    }

    var gpos = { parse: parseGposTable, make: makeGposTable };

    // The `kern` table contains kerning pairs.

    function parseWindowsKernTable(p) {
        const pairs = {};
        // Skip nTables.
        p.skip('uShort');
        const subtableVersion = p.parseUShort();
        check.argument(subtableVersion === 0, 'Unsupported kern sub-table version.');
        // Skip subtableLength, subtableCoverage
        p.skip('uShort', 2);
        const nPairs = p.parseUShort();
        // Skip searchRange, entrySelector, rangeShift.
        p.skip('uShort', 3);
        for (let i = 0; i < nPairs; i += 1) {
            const leftIndex = p.parseUShort();
            const rightIndex = p.parseUShort();
            const value = p.parseShort();
            pairs[leftIndex + ',' + rightIndex] = value;
        }
        return pairs;
    }

    function parseMacKernTable(p) {
        const pairs = {};
        // The Mac kern table stores the version as a fixed (32 bits) but we only loaded the first 16 bits.
        // Skip the rest.
        p.skip('uShort');
        const nTables = p.parseULong();
        //check.argument(nTables === 1, 'Only 1 subtable is supported (got ' + nTables + ').');
        if (nTables > 1) {
            console.warn('Only the first kern subtable is supported.');
        }
        p.skip('uLong');
        const coverage = p.parseUShort();
        const subtableVersion = coverage & 0xFF;
        p.skip('uShort');
        if (subtableVersion === 0) {
            const nPairs = p.parseUShort();
            // Skip searchRange, entrySelector, rangeShift.
            p.skip('uShort', 3);
            for (let i = 0; i < nPairs; i += 1) {
                const leftIndex = p.parseUShort();
                const rightIndex = p.parseUShort();
                const value = p.parseShort();
                pairs[leftIndex + ',' + rightIndex] = value;
            }
        }
        return pairs;
    }

    // Parse the `kern` table which contains kerning pairs.
    function parseKernTable(data, start) {
        const p = new parse.Parser(data, start);
        const tableVersion = p.parseUShort();
        if (tableVersion === 0) {
            return parseWindowsKernTable(p);
        } else if (tableVersion === 1) {
            return parseMacKernTable(p);
        } else {
            throw new Error('Unsupported kern table version (' + tableVersion + ').');
        }
    }

    var kern = { parse: parseKernTable };

    // The `loca` table stores the offsets to the locations of the glyphs in the font.

    // Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,
    // relative to the beginning of the glyphData table.
    // The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)
    // The loca table has two versions: a short version where offsets are stored as uShorts, and a long
    // version where offsets are stored as uLongs. The `head` table specifies which version to use
    // (under indexToLocFormat).
    function parseLocaTable(data, start, numGlyphs, shortVersion) {
        const p = new parse.Parser(data, start);
        const parseFn = shortVersion ? p.parseUShort : p.parseULong;
        // There is an extra entry after the last index element to compute the length of the last glyph.
        // That's why we use numGlyphs + 1.
        const glyphOffsets = [];
        for (let i = 0; i < numGlyphs + 1; i += 1) {
            let glyphOffset = parseFn.call(p);
            if (shortVersion) {
                // The short table version stores the actual offset divided by 2.
                glyphOffset *= 2;
            }

            glyphOffsets.push(glyphOffset);
        }

        return glyphOffsets;
    }

    var loca = { parse: parseLocaTable };

    // opentype.js

    /**
     * The opentype library.
     * @namespace opentype
     */

    // File loaders /////////////////////////////////////////////////////////
    /**
     * Loads a font from a file. The callback throws an error message as the first parameter if it fails
     * and the font as an ArrayBuffer in the second parameter if it succeeds.
     * @param  {string} path - The path of the file
     * @param  {Function} callback - The function to call when the font load completes
     */
    function loadFromFile(path, callback) {
        const fs = require('fs');
        fs.readFile(path, function(err, buffer) {
            if (err) {
                return callback(err.message);
            }

            callback(null, nodeBufferToArrayBuffer(buffer));
        });
    }
    /**
     * Loads a font from a URL. The callback throws an error message as the first parameter if it fails
     * and the font as an ArrayBuffer in the second parameter if it succeeds.
     * @param  {string} url - The URL of the font file.
     * @param  {Function} callback - The function to call when the font load completes
     */
    function loadFromUrl(url, callback) {
        const request = new XMLHttpRequest();
        request.open('get', url, true);
        request.responseType = 'arraybuffer';
        request.onload = function() {
            if (request.response) {
                return callback(null, request.response);
            } else {
                return callback('Font could not be loaded: ' + request.statusText);
            }
        };

        request.onerror = function () {
            callback('Font could not be loaded');
        };

        request.send();
    }

    // Table Directory Entries //////////////////////////////////////////////
    /**
     * Parses OpenType table entries.
     * @param  {DataView}
     * @param  {Number}
     * @return {Object[]}
     */
    function parseOpenTypeTableEntries(data, numTables) {
        const tableEntries = [];
        let p = 12;
        for (let i = 0; i < numTables; i += 1) {
            const tag = parse.getTag(data, p);
            const checksum = parse.getULong(data, p + 4);
            const offset = parse.getULong(data, p + 8);
            const length = parse.getULong(data, p + 12);
            tableEntries.push({tag: tag, checksum: checksum, offset: offset, length: length, compression: false});
            p += 16;
        }

        return tableEntries;
    }

    /**
     * Parses WOFF table entries.
     * @param  {DataView}
     * @param  {Number}
     * @return {Object[]}
     */
    function parseWOFFTableEntries(data, numTables) {
        const tableEntries = [];
        let p = 44; // offset to the first table directory entry.
        for (let i = 0; i < numTables; i += 1) {
            const tag = parse.getTag(data, p);
            const offset = parse.getULong(data, p + 4);
            const compLength = parse.getULong(data, p + 8);
            const origLength = parse.getULong(data, p + 12);
            let compression;
            if (compLength < origLength) {
                compression = 'WOFF';
            } else {
                compression = false;
            }

            tableEntries.push({tag: tag, offset: offset, compression: compression,
                compressedLength: compLength, length: origLength});
            p += 20;
        }

        return tableEntries;
    }

    /**
     * @typedef TableData
     * @type Object
     * @property {DataView} data - The DataView
     * @property {number} offset - The data offset.
     */

    /**
     * @param  {DataView}
     * @param  {Object}
     * @return {TableData}
     */
    function uncompressTable(data, tableEntry) {
        if (tableEntry.compression === 'WOFF') {
            const inBuffer = new Uint8Array(data.buffer, tableEntry.offset + 2, tableEntry.compressedLength - 2);
            const outBuffer = new Uint8Array(tableEntry.length);
            tinyInflate(inBuffer, outBuffer);
            if (outBuffer.byteLength !== tableEntry.length) {
                throw new Error('Decompression error: ' + tableEntry.tag + ' decompressed length doesn\'t match recorded length');
            }

            const view = new DataView(outBuffer.buffer, 0);
            return {data: view, offset: 0};
        } else {
            return {data: data, offset: tableEntry.offset};
        }
    }

    // Public API ///////////////////////////////////////////////////////////

    /**
     * Parse the OpenType file data (as an ArrayBuffer) and return a Font object.
     * Throws an error if the font could not be parsed.
     * @param  {ArrayBuffer}
     * @return {opentype.Font}
     */
    function parseBuffer(buffer) {
        let indexToLocFormat;
        let ltagTable;

        // Since the constructor can also be called to create new fonts from scratch, we indicate this
        // should be an empty font that we'll fill with our own data.
        const font = new Font({empty: true});

        // OpenType fonts use big endian byte ordering.
        // We can't rely on typed array view types, because they operate with the endianness of the host computer.
        // Instead we use DataViews where we can specify endianness.
        const data = new DataView(buffer, 0);
        let numTables;
        let tableEntries = [];
        const signature = parse.getTag(data, 0);
        if (signature === String.fromCharCode(0, 1, 0, 0) || signature === 'true' || signature === 'typ1') {
            font.outlinesFormat = 'truetype';
            numTables = parse.getUShort(data, 4);
            tableEntries = parseOpenTypeTableEntries(data, numTables);
        } else if (signature === 'OTTO') {
            font.outlinesFormat = 'cff';
            numTables = parse.getUShort(data, 4);
            tableEntries = parseOpenTypeTableEntries(data, numTables);
        } else if (signature === 'wOFF') {
            const flavor = parse.getTag(data, 4);
            if (flavor === String.fromCharCode(0, 1, 0, 0)) {
                font.outlinesFormat = 'truetype';
            } else if (flavor === 'OTTO') {
                font.outlinesFormat = 'cff';
            } else {
                throw new Error('Unsupported OpenType flavor ' + signature);
            }

            numTables = parse.getUShort(data, 12);
            tableEntries = parseWOFFTableEntries(data, numTables);
        } else {
            throw new Error('Unsupported OpenType signature ' + signature);
        }

        let cffTableEntry;
        let fvarTableEntry;
        let glyfTableEntry;
        let gposTableEntry;
        let gsubTableEntry;
        let hmtxTableEntry;
        let kernTableEntry;
        let locaTableEntry;
        let nameTableEntry;
        let metaTableEntry;
        let p;

        for (let i = 0; i < numTables; i += 1) {
            const tableEntry = tableEntries[i];
            let table;
            switch (tableEntry.tag) {
                case 'cmap':
                    table = uncompressTable(data, tableEntry);
                    font.tables.cmap = cmap.parse(table.data, table.offset);
                    font.encoding = new CmapEncoding(font.tables.cmap);
                    break;
                case 'cvt ' :
                    table = uncompressTable(data, tableEntry);
                    p = new parse.Parser(table.data, table.offset);
                    font.tables.cvt = p.parseShortList(tableEntry.length / 2);
                    break;
                case 'fvar':
                    fvarTableEntry = tableEntry;
                    break;
                case 'fpgm' :
                    table = uncompressTable(data, tableEntry);
                    p = new parse.Parser(table.data, table.offset);
                    font.tables.fpgm = p.parseByteList(tableEntry.length);
                    break;
                case 'head':
                    table = uncompressTable(data, tableEntry);
                    font.tables.head = head.parse(table.data, table.offset);
                    font.unitsPerEm = font.tables.head.unitsPerEm;
                    indexToLocFormat = font.tables.head.indexToLocFormat;
                    break;
                case 'hhea':
                    table = uncompressTable(data, tableEntry);
                    font.tables.hhea = hhea.parse(table.data, table.offset);
                    font.ascender = font.tables.hhea.ascender;
                    font.descender = font.tables.hhea.descender;
                    font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;
                    break;
                case 'hmtx':
                    hmtxTableEntry = tableEntry;
                    break;
                case 'ltag':
                    table = uncompressTable(data, tableEntry);
                    ltagTable = ltag.parse(table.data, table.offset);
                    break;
                case 'maxp':
                    table = uncompressTable(data, tableEntry);
                    font.tables.maxp = maxp.parse(table.data, table.offset);
                    font.numGlyphs = font.tables.maxp.numGlyphs;
                    break;
                case 'name':
                    nameTableEntry = tableEntry;
                    break;
                case 'OS/2':
                    table = uncompressTable(data, tableEntry);
                    font.tables.os2 = os2.parse(table.data, table.offset);
                    break;
                case 'post':
                    table = uncompressTable(data, tableEntry);
                    font.tables.post = post.parse(table.data, table.offset);
                    font.glyphNames = new GlyphNames(font.tables.post);
                    break;
                case 'prep' :
                    table = uncompressTable(data, tableEntry);
                    p = new parse.Parser(table.data, table.offset);
                    font.tables.prep = p.parseByteList(tableEntry.length);
                    break;
                case 'glyf':
                    glyfTableEntry = tableEntry;
                    break;
                case 'loca':
                    locaTableEntry = tableEntry;
                    break;
                case 'CFF ':
                    cffTableEntry = tableEntry;
                    break;
                case 'kern':
                    kernTableEntry = tableEntry;
                    break;
                case 'GPOS':
                    gposTableEntry = tableEntry;
                    break;
                case 'GSUB':
                    gsubTableEntry = tableEntry;
                    break;
                case 'meta':
                    metaTableEntry = tableEntry;
                    break;
            }
        }

        const nameTable = uncompressTable(data, nameTableEntry);
        font.tables.name = _name.parse(nameTable.data, nameTable.offset, ltagTable);
        font.names = font.tables.name;

        if (glyfTableEntry && locaTableEntry) {
            const shortVersion = indexToLocFormat === 0;
            const locaTable = uncompressTable(data, locaTableEntry);
            const locaOffsets = loca.parse(locaTable.data, locaTable.offset, font.numGlyphs, shortVersion);
            const glyfTable = uncompressTable(data, glyfTableEntry);
            font.glyphs = glyf.parse(glyfTable.data, glyfTable.offset, locaOffsets, font);
        } else if (cffTableEntry) {
            const cffTable = uncompressTable(data, cffTableEntry);
            cff.parse(cffTable.data, cffTable.offset, font);
        } else {
            throw new Error('Font doesn\'t contain TrueType or CFF outlines.');
        }

        const hmtxTable = uncompressTable(data, hmtxTableEntry);
        hmtx.parse(hmtxTable.data, hmtxTable.offset, font.numberOfHMetrics, font.numGlyphs, font.glyphs);
        addGlyphNames(font);

        if (kernTableEntry) {
            const kernTable = uncompressTable(data, kernTableEntry);
            font.kerningPairs = kern.parse(kernTable.data, kernTable.offset);
        } else {
            font.kerningPairs = {};
        }

        if (gposTableEntry) {
            const gposTable = uncompressTable(data, gposTableEntry);
            font.tables.gpos = gpos.parse(gposTable.data, gposTable.offset);
        }

        if (gsubTableEntry) {
            const gsubTable = uncompressTable(data, gsubTableEntry);
            font.tables.gsub = gsub.parse(gsubTable.data, gsubTable.offset);
        }

        if (fvarTableEntry) {
            const fvarTable = uncompressTable(data, fvarTableEntry);
            font.tables.fvar = fvar.parse(fvarTable.data, fvarTable.offset, font.names);
        }

        if (metaTableEntry) {
            const metaTable = uncompressTable(data, metaTableEntry);
            font.tables.meta = meta.parse(metaTable.data, metaTable.offset);
            font.metas = font.tables.meta;
        }

        return font;
    }

    /**
     * Asynchronously load the font from a URL or a filesystem. When done, call the callback
     * with two arguments `(err, font)`. The `err` will be null on success,
     * the `font` is a Font object.
     * We use the node.js callback convention so that
     * opentype.js can integrate with frameworks like async.js.
     * @alias opentype.load
     * @param  {string} url - The URL of the font to load.
     * @param  {Function} callback - The callback.
     */
    function load(url, callback) {
        const isNode$$1 = typeof window === 'undefined';
        const loadFn = isNode$$1 ? loadFromFile : loadFromUrl;
        loadFn(url, function(err, arrayBuffer) {
            if (err) {
                return callback(err);
            }
            let font;
            try {
                font = parseBuffer(arrayBuffer);
            } catch (e) {
                return callback(e, null);
            }
            return callback(null, font);
        });
    }

    /**
     * Create a surface by projecting a curve in a direction.
     *
     * @param curve The curve to project.
     * @param offset The direction and distance to project curve.
     * @param flipped Whether the surface's default orientation (normal = curve tangent cross offset) should be flipped.
     */
    function projectCurve$$1(curve, offset, flipped) {
        if (curve instanceof L3$$1) {
            const surfaceNormal = offset.cross(curve.dir1).toLength(flipped ? -1 : 1);
            return new PlaneSurface$$1(P3$$1.normalOnAnchor(surfaceNormal, curve.anchor));
        }
        if (curve instanceof EllipseCurve$$1) {
            const curveDir = flipped ? offset : offset.negated();
            return new CylinderSurface$$1(curve, curveDir.unit(), undefined, undefined);
        }
        if (curve instanceof BezierCurve$$1 || curve instanceof XiEtaCurve$$1) {
            const curveDir = offset.times(flipped ? 1 : -1);
            return new ProjectedCurveSurface$$1(curve, curveDir, undefined, undefined, flipped ? 0 : -1, flipped ? 1 : 0);
        }
        throw new Error();
    }
    /**
     * Create a surface by projecting a curve onto a point.
     */
    function projectPointCurve$$1(curve, tMin = curve.tMin, tMax = curve.tMax, p, flipped) {
        if (curve instanceof L3$$1) {
            const up = curve.anchor.to(p).rejectedFrom(curve.dir1);
            return PlaneSurface$$1.forAnchorAndPlaneVectors(curve.anchor, curve.dir1, up.unit(), tMin, tMax, 0, up.length());
        }
        else if (curve instanceof EllipseCurve$$1) {
            // flip f2 by default
            const factor = -1 * (flipped ? -1 : 1);
            return new ConicSurface$$1(p, curve.f1.times(factor), curve.f2, p.to(curve.center), tMin, tMax, 0, 1);
        }
        else {
            throw new Error('projectPointCurve not implemented for ' + curve.constructor.name);
        }
    }
    /**
     * Create a surface by rotating a curve in the XZ-plane, with X > 0, around the Z-axis according to the right-hand rule.
     * @param curve The curve to rotate.
     * @param rotationAxis The line around which to rotate the curve.
     * @param flipped Whether the surface's default orientation (normal = curve tangent cross rotation tangent) should be
     * flipped.
     */
    function rotateCurve$$1(curve, tMin = curve.tMin, tMax = curve.tMax, degrees, flipped) {
        assertf(() => new PlaneSurface$$1(P3$$1.ZX).containsCurve(curve));
        if (curve instanceof L3$$1) {
            if (curve.dir1.isParallelTo(V3.Z)) {
                if (eq0(curve.anchor.x)) {
                    return undefined;
                    //throw new Error('Cannot rotate curve colinear to Z axis.')
                }
                const baseEllipse = new EllipseCurve$$1(V3.O, curve.anchor.xy(), curve.anchor.xy().getPerpendicular(), 0, degrees);
                // if curve.dir1 is going up (+Z), it the cylinder surface should face inwards
                const factor = (curve.dir1.z > 0 ? -1 : 1) * (flipped ? -1 : 1);
                const [zMin, zMax] = [curve.at(tMin).z * factor, curve.at(tMax).z * factor].sort(MINUS);
                return new CylinderSurface$$1(baseEllipse, V3.Z.times(factor), 0, degrees, zMin, zMax);
            }
            if (curve
                .at(tMin)
                .xy()
                .dot(curve.dir1) *
                curve
                    .at(tMax)
                    .xy()
                    .dot(curve.dir1) <
                0) {
                throw new Error('line cannot cross the Z axis in the [tMin, tMax] interval, as conic surfaces cannot have an hourglass shape.');
            }
            if (curve.dir1.isPerpendicularTo(V3.Z)) {
                // if line.dir1 is pointing aways from V3.Z, then the surface should face up
                const factor = (curve.at(lerp(tMin, tMax, 0.5)).dot(curve.dir1) > 0 ? 1 : -1) * (flipped ? -1 : 1);
                return new PlaneSurface$$1(new P3$$1(V3.Z.times(factor), curve.anchor.z * factor));
            }
            else {
                // apex is intersection of segment with Z-axis
                const a = curve.at(tMin), b = curve.at(tMax);
                const apexZ = a.z - a.x * (b.z - a.z) / (b.x - a.x);
                const apex = new V3(0, 0, apexZ);
                const factor = -(a.x > b.x ? -1 : 1) * (flipped ? -1 : 1);
                const s = new ConicSurface$$1(apex, new V3(curve.dir1.lengthXY(), 0, 0), new V3(0, curve.dir1.lengthXY(), 0), new V3(0, 0, (a.x > b.x ? -1 : 1) * curve.dir1.z), 0, degrees, 0, 1);
                return factor > 0 ? s : s.flipped();
            }
        }
        if (curve instanceof EllipseCurve$$1) {
            const a = curve.at(tMin), b = curve.at(tMax);
            const ell = curve.rightAngled();
            const f1Perp = ell.f1.isPerpendicularTo(V3.Z), f2Perp = ell.f2.isPerpendicularTo(V3.Z);
            if (L3$$1.Z.containsPoint(ell.center) && (f1Perp || f2Perp)) {
                flipped = flipped == a.z > b.z;
                let width = ell.f1.length(), height = ell.f2.length();
                if (ell.f1.isParallelTo(V3.Z)) {
                    [width, height] = [height, width];
                }
                return EllipsoidSurface$$1.forABC(width, (!flipped ? 1 : -1) * width, height, ell.center);
            }
            else {
                const s = new RotatedCurveSurface$$1(curve, M4.IDENTITY, tMin, tMax);
                return s;
            }
        }
        throw new Error();
    }
    var B2T$$1;
    (function (B2T$$1) {
        /**
         * Create a [BRep] of an axis-aligned box width starting at the origin and extending into +XYZ space.
         * @param width x-direction size.
         * @param height y-direction size.
         * @param depth z-direction size.
         * @param name
         */
        function box(width = 1, height = 1, depth = 1, name = 'box' + getGlobalId$$1()) {
            assertNumbers(width, height, depth);
            assert('string' === typeof name);
            const baseVertices = [new V3(0, 0, 0), new V3(0, height, 0), new V3(width, height, 0), new V3(width, 0, 0)];
            const generator = callsce('B2T.box', width, height, depth, name);
            return B2T$$1.extrudeVertices(baseVertices, P3$$1.XY.flipped(), new V3(0, 0, depth), name, generator);
        }
        B2T$$1.box = box;
        function puckman(radius, rads, height, name = 'puckman' + getGlobalId$$1()) {
            assertf(() => lt(0, radius));
            assertf(() => lt(0, rads) && le$1(rads, TAU));
            assertf(() => lt(0, height));
            const edges = StraightEdge$$1.chain([V3.O, new V3(radius, 0, 0), new V3(radius, 0, height), new V3(0, 0, height)], true);
            return B2T$$1.rotateEdges(edges, rads, name);
        }
        B2T$$1.puckman = puckman;
        function registerVertexName(map, name, p) {
            // TODO
            if (!Array.from(map.keys()).some(p2 => p2.like(p))) {
                map.set(p, name);
            }
        }
        B2T$$1.registerVertexName = registerVertexName;
        /**
         * Create a [BRep] by projecting a number of edges in a direction.
         * @param baseFaceEdges
         * @param baseFacePlane
         * @param offset
         * @param name
         * @param gen
         * @param infoFactory
         */
        function extrudeEdges(baseFaceEdges, baseFacePlane = P3$$1.XY, offset = V3.Z, name = 'extrude' + getGlobalId$$1(), gen, infoFactory) {
            baseFaceEdges = fixEdges(baseFaceEdges);
            //Array.from(combinations(baseFaceEdges.length)).forEach(({i, j}) => {
            //	assertf(() => !Edge.edgesIntersect(baseFaceEdges[i], baseFaceEdges[j]), baseFaceEdges[i].sce +
            // baseFaceEdges[j].sce) })
            assertf(() => Edge$$1.isLoop(baseFaceEdges));
            // TODO checks..
            //if (offset.dot(baseFacePlane.normal1) > 0) {
            //	baseFacePlane = baseFacePlane.flipped()
            //}
            const vertexNames = new Map();
            const basePlaneSurface = new PlaneSurface$$1(baseFacePlane);
            //assert(basePlaneSurface.edgeLoopCCW(baseFaceEdges), 'edges not CCW on baseFacePlane')
            const translationMatrix = M4.translate(offset);
            const topEdges = baseFaceEdges.map(edge => edge.transform(translationMatrix, 'top'));
            const edgeCount = baseFaceEdges.length;
            const bottomInfo = infoFactory && infoFactory.extrudeBottom(basePlaneSurface, baseFaceEdges);
            const bottomFace = new PlaneFace$$1(basePlaneSurface, baseFaceEdges, [], name + 'Bottom', bottomInfo);
            const topFaceEdges = topEdges.map(edge => edge.flipped()).reverse();
            const topSurface = new PlaneSurface$$1(baseFacePlane.flipped().translated(offset));
            const topInfo = infoFactory && infoFactory.extrudeBottom(topSurface, topFaceEdges);
            const topFace = new PlaneFace$$1(topSurface, topFaceEdges, [], name + 'Top', topInfo);
            baseFaceEdges.forEach(edge => B2T$$1.registerVertexName(vertexNames, edge.name + 'A', edge.a));
            topFaceEdges.forEach(edge => B2T$$1.registerVertexName(vertexNames, edge.name + 'A', edge.a));
            const ribs = arrayFromFunction(edgeCount, i => StraightEdge$$1.throughPoints(baseFaceEdges[i].a, topEdges[i].a, name + 'Rib' + i));
            const faces = baseFaceEdges.map((edge, i) => {
                const faceName = name + 'Wall' + i;
                const j = (i + 1) % edgeCount;
                const faceEdges = [baseFaceEdges[i].flipped(), ribs[i], topEdges[i], ribs[j].flipped()];
                const surface = projectCurve$$1(edge.curve, offset, edge.reversed);
                const info = infoFactory && infoFactory.extrudeWall(i, surface, faceEdges);
                return Face$$1.create(surface, faceEdges, undefined, faceName, info);
            });
            faces.push(bottomFace, topFace);
            gen = gen || callsce('B2T.extrudeEdges', baseFaceEdges, baseFacePlane, offset, name);
            return new BRep$$1(faces, baseFacePlane.normal1.dot(offset) > 0, gen, vertexNames);
        }
        B2T$$1.extrudeEdges = extrudeEdges;
        function cylinder(radius = 1, height = 1, rads = TAU, name = 'cylinder' + getGlobalId$$1()) {
            const vertices = [new V3(0, 0, 0), new V3(radius, 0, 0), new V3(radius, 0, height), new V3(0, 0, height)];
            return rotateEdges(StraightEdge$$1.chain(vertices, true), rads, name);
        }
        B2T$$1.cylinder = cylinder;
        function cone(radius = 1, height = 1, rads = TAU, name = 'cone' + getGlobalId$$1()) {
            const vertices = [new V3(0, 0, 0), new V3(radius, 0, height), new V3(0, 0, height)];
            return rotateEdges(StraightEdge$$1.chain(vertices, true), rads, name);
        }
        B2T$$1.cone = cone;
        function sphere(radius = 1, name = 'sphere' + getGlobalId$$1(), rot = TAU) {
            const ee = PCurveEdge$$1.create(new EllipseCurve$$1(V3.O, new V3(0, 0, -radius), new V3(radius, 0, 0)), new V3(0, 0, -radius), new V3(0, 0, radius), 0, PI$4, undefined, new V3(radius, 0, 0), new V3(-radius, 0, 0));
            const generator = callsce('B2T.sphere', radius, name, rot);
            return rotateEdges([StraightEdge$$1.throughPoints(ee.b, ee.a), ee], rot, name, generator);
        }
        B2T$$1.sphere = sphere;
        /**
         * Create a [[BRep]] of a menger sponge.
         * @param res 0: just a cube, 1: every cube face has one hole, 2: 9 holes, etc
         * @param name
         */
        function menger(res = 2, name = 'menger' + getGlobalId$$1()) {
            let result = B2T$$1.box(1, 1, 1);
            if (0 == res)
                return result;
            const punch = B2T$$1.box(1 / 3, 1 / 3, 2)
                .translate(1 / 3, 1 / 3, -1 / 2)
                .flipped();
            function recurse(steps, m4) {
                result = result.and(punch.transform(m4));
                if (steps > 1) {
                    const scaled = m4.times(M4.scale(1 / 3, 1 / 3, 1));
                    for (let i = 0; i < 9; i++) {
                        if (4 == i)
                            continue;
                        recurse(steps - 1, scaled.times(M4.translate(i % 3, (i / 3) | 0, 0)));
                    }
                }
            }
            recurse(res, M4.IDENTITY);
            recurse(res, M4.YZX);
            recurse(res, M4.ZXY);
            return result;
        }
        B2T$$1.menger = menger;
        function menger2(res = 2, name = 'menger' + getGlobalId$$1()) {
            if (0 == res)
                return B2T$$1.box(1, 1, 1);
            const punch = B2T$$1.box(1 / 3, 1 / 3, 2)
                .translate(1 / 3, 1 / 3, -1 / 2)
                .flipped();
            const stencilFaces = [];
            function recurse(steps, m4) {
                stencilFaces.push(...punch.transform(m4).faces);
                if (steps > 1) {
                    const scaled = m4.times(M4.scale(1 / 3, 1 / 3, 1));
                    for (let i = 0; i < 9; i++) {
                        if (4 == i)
                            continue;
                        recurse(steps - 1, scaled.times(M4.translate(i % 3, (i / 3) | 0, 0)));
                    }
                }
            }
            recurse(res, M4.IDENTITY);
            const stencil = new BRep$$1(stencilFaces, true);
            return B2T$$1.box()
                .and(stencil)
                .and(stencil.transform(M4.YZX))
                .and(stencil.transform(M4.ZXY));
        }
        B2T$$1.menger2 = menger2;
        /**
         * Create a [BRep] of a torus.
         * @param rSmall The radius to the surface of the torus.
         * @param rLarge The radius from the origin to the inside of the torus.
         * @param rads
         * @param name
         */
        function torus(rSmall, rLarge, rads = TAU, name = 'torus' + getGlobalId$$1()) {
            assertNumbers(rSmall, rLarge, rads);
            assertf(() => rLarge > rSmall);
            const curves = [
                EllipseCurve$$1.semicircle(rSmall, new V3(rLarge, 0, 0)),
                EllipseCurve$$1.semicircle(-rSmall, new V3(rLarge, 0, 0)),
            ];
            const baseEdges = curves.map(c => PCurveEdge$$1.forCurveAndTs(c, 0, Math.PI).rotateX(PI$4 / 2));
            return B2T$$1.rotateEdges(baseEdges, rads, name);
        }
        B2T$$1.torus = torus;
        /**
         * Create a [BRep] by smoothly rotating edges around Z.
         * baseLoop should be CCW on XZ plane for a bounded BRep
         */
        function rotateEdges(baseLoop, totalRads, name = 'rotateEdges' + getGlobalId$$1(), generator, infoFactory) {
            assert(baseLoop.every(e => new PlaneSurface$$1(P3$$1.ZX).containsCurve(e.curve)));
            assert(!eq(PI$4, totalRads) || PI$4 == totalRads); // URHGJ
            assertf(() => lt(0, totalRads) && le$1(totalRads, TAU));
            totalRads = snap(totalRads, TAU);
            assertf(() => Edge$$1.isLoop(baseLoop));
            const basePlane = new PlaneSurface$$1(P3$$1.ZX.flipped()).edgeLoopCCW(baseLoop)
                ? new PlaneSurface$$1(P3$$1.ZX.flipped())
                : new PlaneSurface$$1(P3$$1.ZX);
            // const rotationSteps = ceil((totalRads - NLA_PRECISION) / PI)
            // const angles = rotationSteps == 1 ? [-PI, -PI + totalRads] : [-PI, 0, totalRads - PI]
            const open = !eq(totalRads, 2 * PI$4);
            const baseRibCurves = baseLoop.map(edge => {
                const a = edge.a, radius = a.lengthXY();
                if (!eq0(radius)) {
                    return new EllipseCurve$$1(V$2(0, 0, a.z), V$2(radius, 0, 0), V$2(0, radius, 0));
                }
                return undefined;
            });
            const baseSurfaces = baseLoop.map((edge, i) => {
                const s = rotateCurve$$1(edge.curve, edge.minT, edge.maxT, PI$4, edge.deltaT() > 0);
                const t = lerp(edge.aT, edge.bT, 0.5);
                s &&
                    assert(edge
                        .tangentAt(t)
                        .cross(V3.Y)
                        .dot(s.normalP(edge.curve.at(t))) < 0);
                return s;
            });
            let stepStartEdges = baseLoop, stepEndEdges;
            const faces = [];
            for (let rot = 0; rot < totalRads; rot += PI$4) {
                const aT = 0, bT = min$2(totalRads - rot, PI$4);
                const rotation = M4.rotateZ(rot + bT);
                stepEndEdges = rot + bT == TAU ? baseLoop : baseLoop.map(edge => edge.transform(rotation));
                const ribs = arrayFromFunction(baseLoop.length, i => {
                    const a = stepStartEdges[i].a, radius = a.lengthXY();
                    const b = stepEndEdges[i].a;
                    if (!eq0(radius)) {
                        const curve = 0 === rot ? baseRibCurves[i] : baseRibCurves[i].rotateZ(rot);
                        return new PCurveEdge$$1(curve, a, b, aT, bT, undefined, curve.tangentAt(aT), curve.tangentAt(bT), name + 'rib' + i);
                    }
                    return undefined;
                });
                for (let edgeIndex = 0; edgeIndex < baseLoop.length; edgeIndex++) {
                    if (baseSurfaces[edgeIndex]) {
                        const edge = stepStartEdges[edgeIndex];
                        const ipp = (edgeIndex + 1) % baseLoop.length;
                        const faceEdges = [
                            stepStartEdges[edgeIndex].flipped(),
                            !eq0(edge.a.x) && ribs[edgeIndex],
                            stepEndEdges[edgeIndex],
                            !eq0(edge.b.x) && ribs[ipp].flipped(),
                        ].filter((x) => x);
                        const surface = 0 === rot ? baseSurfaces[edgeIndex] : baseSurfaces[edgeIndex].rotateZ(rot);
                        const info = infoFactory && infoFactory.extrudeWall(edgeIndex, surface, faceEdges, undefined);
                        faces.push(Face$$1.create(surface, faceEdges, undefined, name + 'Wall' + edgeIndex, info));
                    }
                }
                stepStartEdges = stepEndEdges;
            }
            if (open) {
                const endFaceEdges = Edge$$1.reversePath(stepEndEdges);
                const infoStart = infoFactory && infoFactory.rotationStart(basePlane, baseLoop, undefined);
                const infoEnd = infoFactory && infoFactory.rotationEnd(basePlane.flipped().rotateZ(totalRads), endFaceEdges, undefined);
                faces.push(new PlaneFace$$1(basePlane, baseLoop, undefined, name + 'start', infoStart), new PlaneFace$$1(basePlane.flipped().rotateZ(totalRads), endFaceEdges, undefined, name + 'end', infoEnd));
            }
            const infiniteVolume = new PlaneSurface$$1(P3$$1.ZX).edgeLoopCCW(baseLoop);
            return new BRep$$1(faces, infiniteVolume, generator);
        }
        B2T$$1.rotateEdges = rotateEdges;
        /**
         * loop should be CCW on XZ plane for a bounded BRep
         */
        //export function rotateEdgesUnsplit(loop: Edge[], rads: raddd, name: string): BRep {
        //	assert(Edge.isLoop(loop))
        //	const rotationMatrix = M4.rotateZ(rads)
        //	const open = !eq(rads, 2 * PI)
        //	const endEdges = open ? loop.map(edge => edge.transform(rotationMatrix)) : loop
        //	const edgeCount = loop.length
        //	const ribs = arrayFromFunction(edgeCount, i => {
        //		const a = loop[i].a, radius = a.lengthXY()
        //		const b = endEdges[i].a
        //		if (!eq0(radius)) {
        //			const curve = new EllipseCurve(V(0, 0, a.z), V(-radius, 0, 0), V(0, -radius, 0))
        //			const aT = -PI, bT = -PI + rads
        //			return new PCurveEdge(curve, a, b, aT, bT, undefined, curve.tangentAt(aT), curve.tangentAt(bT), name
        // + 'rib' + i) } }) const faces = loop.map((edge, i) => { const ipp = (i + 1) % edgeCount console.log('ljl', i,
        // ipp, ribs) const faceEdges = [ edge.flipped(), !eq0(edge.a.x) && ribs[i], endEdges[i], !eq0(edge.b.x) &&
        // ribs[ipp].flipped()].filter(x => x) if (edge instanceof StraightEdge) { const line = edge.curve let surface if
        // (line.dir1.isParallelTo(V3.Z)) { if (eq0(edge.a.x)) { return } let flipped = edge.a.z > edge.b.z surface = new
        // CylinderSurface(ribs[i].curve, !flipped ? V3.Z : V3.Z.negated()) } else if
        // (line.dir1.isPerpendicularTo(V3.Z)) { let flipped = edge.a.x > edge.b.x let surface = new PlaneSurface(new
        // P3(V3.Z, edge.a.z)) if (!flipped) surface = surface.flipped() if (!open) { const hole = flipped ? !eq0(edge.b.x)
        // && ribs[ipp].flipped() : !eq0(edge.a.x) && ribs[i] return new PlaneFace(surface, [flipped ? ribs[i] :
        // ribs[ipp].flipped()], hole && [[hole]]) } return new PlaneFace(surface, faceEdges) } else { // apex is
        // intersection of segment with Z-axis let a = edge.a, b = edge.b let apexZ = a.z - a.x * (b.z - a.z) / (b.x - a.x)
        // let apex = new V3(0, 0, apexZ) let flipped = edge.a.z > edge.b.z surface =
        // ConicSurface.atApexThroughEllipse(apex, ribs[a.x > b.x ? i : ipp].curve as EllipseCurve, !flipped ? 1 : -1)
        // } return Face.create(surface, faceEdges) } if (edge.curve instanceof EllipseCurve) { let flipped = undefined
        // let ell = edge.curve.rightAngled() let f1Perp = ell.f1.isPerpendicularTo(V3.Z), f2Perp =
        // ell.f2.isPerpendicularTo(V3.Z) if (L3.Z.containsPoint(ell.center) && (f1Perp || f2Perp)) { let f3length = f1Perp
        // ? ell.f1.length() : ell.f2.length() if (flipped) { f3length *= -1 } let surface = new
        // EllipsoidSurface(ell.center, ell.f1, ell.f2, ell.f1.cross(ell.f2).toLength(f3length)) return new
        // RotationFace(surface, faceEdges) } } else { assert(false, edge) } }).filter(x => x) if (open) { const
        // endFaceEdges = endEdges.map(edge => edge.flipped()).reverse() faces.push( new PlaneFace(new
        // PlaneSurface(P3.ZX.flipped()), loop), new PlaneFace(new PlaneSurface(P3.ZX.rotateZ(rads)), endFaceEdges)) }
        // return new BRep(faces, undefined) }
        function quaffle() {
            const baseK = B2T$$1.sphere(1)
                .translate(0, 1.7)
                .flipped();
            //const baseK = B2T.box().scale(0.2).translate(0, 0.95).flipped()
            // const vs = B2T.DODECAHEDRON_VERTICES.concat(
            // B2T.DODECAHEDRON_FACE_VERTICES.map(fis => fis
            // .map(vi => B2T.DODECAHEDRON_VERTICES[vi])
            // .reduce((a,b) => a.plus(b), V3.O)
            // .unit()))
            const ss = new BRep$$1(B2T$$1.TETRAHEDRON_VERTICES.flatMap(v => baseK.rotateAB(V3.Y, v).faces), false);
            //return ss
            return B2T$$1.sphere().and(ss);
        }
        B2T$$1.quaffle = quaffle;
        function extrudeFace(face, dir) {
            return new BRep$$1(extrudeEdges(face.contour, face.surface.plane, dir)
                .faces.slice(0, -2)
                .concat(face, face.translate(dir.x, dir.y, dir.z).flipped(), face.holes.flatMap(hole => extrudeEdges(hole, face.surface.plane.flipped(), dir).faces.slice(0, -2))), false);
        }
        B2T$$1.extrudeFace = extrudeFace;
        function loadFonts() {
            return loadFont('fonts/FiraSansMedium.woff').then(font => (B2T$$1.defaultFont = font));
        }
        B2T$$1.loadFonts = loadFonts;
        const loadedFonts = new Map();
        function loadFont(fontPath) {
            return new Promise(function (resolve, reject) {
                const font = loadedFonts.get(fontPath);
                if (font) {
                    resolve(font);
                }
                else {
                    load(fontPath, function (err, f) {
                        if (err) {
                            reject(err);
                        }
                        else {
                            loadedFonts.set(fontPath, f);
                            resolve(f);
                        }
                    });
                }
            });
        }
        B2T$$1.loadFont = loadFont;
        function loadFontsAsync(callback) {
            if (B2T$$1.defaultFont) {
                callback();
            }
            else {
                load('fonts/FiraSansMedium.woff', function (err, font) {
                    if (err) {
                        throw new Error('Could not load font: ' + err);
                    }
                    else {
                        B2T$$1.defaultFont = font;
                        callback();
                    }
                });
            }
        }
        B2T$$1.loadFontsAsync = loadFontsAsync;
        /**
         * Create the [BRep] of a string rendered in a font.
         * @param text
         * @param size
         * @param depth
         * @param font An opentype.js font.
         */
        function text(text, size, depth = 1, font = B2T$$1.defaultFont) {
            const path = font.getPath(text, 0, 0, size);
            const subpaths = [];
            path.commands.forEach(c => {
                if (c.type == 'M') {
                    subpaths.push([]);
                }
                subpaths.last.push(c);
            });
            const loops = subpaths.map(sp => {
                const path = new Path();
                path.commands = sp;
                const loop = Edge$$1.reversePath(Edge$$1.pathFromSVG(path.toPathData(13))).map(e => e.mirrorY());
                assert(Edge$$1.isLoop(loop));
                return loop;
            });
            const faces = Face$$1.assembleFacesFromLoops(loops, new PlaneSurface$$1(P3$$1.XY), PlaneFace$$1);
            const generator = callsce('B2T.text', text, size, depth);
            return BRep$$1.join(faces.map(face => B2T$$1.extrudeFace(face, V$2(0, 0, -depth))), generator);
        }
        B2T$$1.text = text;
        function minorityReport() {
            const a = B2T$$1.sphere();
            const b = B2T$$1.text('LEO CROW', 64, 128)
                .scale(0.1 / 32)
                .translate(-0.5, -0.05, 1.2)
                .flipped();
            const c = B2T$$1.sphere(0.98);
            return a.and(b).plus(c);
        }
        B2T$$1.minorityReport = minorityReport;
        function whatever() {
            const iso = icosahedron();
            const numbersBRep = BRep$$1.join(iso.faces.map((face, i) => {
                const numberBRep = text('' + (i + 1), 0.4, -2);
                const centroid = face.contour
                    .map(edge => edge.a)
                    .reduce((a, b) => a.plus(b), V3.O)
                    .div(3);
                const sys = M4.forSys(face.contour[0].aDir, centroid.cross(face.contour[0].aDir), centroid.unit(), centroid);
                return numberBRep.transform(sys.times(M4.translate(-numberBRep.getAABB().size().x / 2, -0.1, -0.04)));
            }));
            const s = sphere(0.9);
            //return iso.and(numbersBRep)
            return iso.and(s).and(numbersBRep);
            //return numbersBRep
        }
        B2T$$1.whatever = whatever;
        function whatever3() {
            const t = B2T$$1.torus(1, 2);
            return B2T$$1.box(5, 5, 2)
                .translate(-2.5, -2.5)
                .minus(t);
        }
        B2T$$1.whatever3 = whatever3;
        function d20() {
            const iso = icosahedron();
            const numbersBRep = BRep$$1.join(iso.faces.map((face, i) => {
                const numberBRep = text('' + (i + 1), 0.4, -2);
                const centroid = face.contour
                    .map(edge => edge.a)
                    .reduce((a, b) => a.plus(b), V3.O)
                    .div(3);
                const sys = M4.forSys(face.contour[0].aDir, centroid.cross(face.contour[0].aDir), centroid.unit(), centroid);
                return numberBRep.transform(sys.times(M4.translate(-numberBRep.getAABB().size().x / 2, -0.1, -0.04)));
            }));
            const s = sphere(0.9);
            //return iso.and(numbersBRep)
            return iso.and(s).and(numbersBRep);
            //return numbersBRep
        }
        B2T$$1.d20 = d20;
        function rotStep(edges, totalRadsOrAngles, countO) {
            const angles = 'number' === typeof totalRadsOrAngles
                ? arrayFromFunction(countO, i => (i + 1) / countO * totalRadsOrAngles)
                : totalRadsOrAngles;
            const count = angles.length;
            const open = !eq(TAU, angles.last);
            const ribs = [
                edges,
                ...angles.map(phi => {
                    if (eq(TAU, phi)) {
                        return edges;
                    }
                    const matrix = M4.rotateZ(phi);
                    return edges.map(edge => edge.transform(matrix));
                }),
            ];
            const horizontalEdges = arrayFromFunction(count, i => {
                const ipp = (i + 1) % (count + 1);
                return arrayFromFunction(edges.length, j => {
                    if (!eq0(edges[j].a.lengthXY())) {
                        return StraightEdge$$1.throughPoints(ribs[i][j].a, ribs[ipp][j].a);
                    }
                    return undefined;
                });
            });
            const faces = [];
            let face;
            edges.forEach((edge, i) => {
                const ipp = (i + 1) % edges.length;
                // for straight edges perpendicular to the Z-axis, we only create one face.
                if (edge instanceof StraightEdge$$1 && edge.curve.dir1.isPerpendicularTo(V3.Z)) {
                    const flipped = edge.a.x > edge.b.x;
                    const surface = new PlaneSurface$$1(flipped ? new P3$$1(V3.Z, edge.a.z) : new P3$$1(V3.Z.negated(), -edge.a.z));
                    if (open) {
                        const faceEdges = [];
                        if (!eq0(edge.a.x)) {
                            faceEdges.push(...arrayFromFunction(count, j => horizontalEdges[j][i]));
                        }
                        faceEdges.push(ribs[count][i]);
                        if (!eq0(edge.b.x)) {
                            faceEdges.push(...arrayFromFunction(count, j => horizontalEdges[count - j - 1][ipp].flipped()));
                        }
                        faceEdges.push(edge.flipped());
                        face = new PlaneFace$$1(surface, faceEdges);
                    }
                    else {
                        const contour = flipped
                            ? arrayFromFunction(count, j => horizontalEdges[j][i])
                            : arrayFromFunction(count, j => horizontalEdges[count - j - 1][ipp].flipped());
                        let hole;
                        if (flipped && !eq0(edge.b.x)) {
                            hole = arrayFromFunction(count, j => horizontalEdges[count - j - 1][ipp].flipped());
                        }
                        else if (!flipped && !eq0(edge.a.x)) {
                            hole = arrayFromFunction(count, j => horizontalEdges[j][i]);
                        }
                        face = new PlaneFace$$1(surface, contour, hole ? [hole] : []);
                    }
                    faces.push(face);
                    return;
                }
                else if (edge instanceof StraightEdge$$1) {
                    if (eq0(edge.a.lengthXY()) && eq0(edge.b.lengthXY())) {
                        return;
                    }
                }
                for (let r = 0; r < count; r++) {
                    const rpp = (r + 1) % (count + 1);
                    const faceEdges = [
                        ribs[r][i].flipped(),
                        horizontalEdges[r][i],
                        ribs[rpp][i],
                        horizontalEdges[r][ipp] && horizontalEdges[r][ipp].flipped(),
                    ].filter(x => x);
                    let surface;
                    if (edge instanceof StraightEdge$$1) {
                        surface = new PlaneSurface$$1(P3$$1.throughPoints(faceEdges[0].a, faceEdges[1].a, faceEdges[2].a));
                    }
                    else {
                        const maxX = edges[i].getAABB().max.x;
                        const phi = angles[r], prevPhi = 0 == r ? 0 : angles[r - 1];
                        const offset = V3.polar(maxX, prevPhi).to(V3.polar(maxX, phi));
                        surface = projectCurve$$1(ribs[r][i].curve, offset, false);
                    }
                    faces.push(Face$$1.create(surface, faceEdges));
                }
            });
            if (open) {
                const endFaceEdges = ribs[count].map(edge => edge.flipped()).reverse();
                const endFace = new PlaneFace$$1(new PlaneSurface$$1(P3$$1.ZX.rotateZ(angles.last)), endFaceEdges);
                faces.push(new PlaneFace$$1(new PlaneSurface$$1(P3$$1.ZX.flipped()), edges), endFace);
            }
            return new BRep$$1(faces, new PlaneSurface$$1(P3$$1.ZX).edgeLoopCCW(edges));
        }
        B2T$$1.rotStep = rotStep;
        function fixEdges(edges) {
            return edges.flatMap(edge => {
                const c = edge.curve;
                if (c instanceof EllipseCurve$$1 && c.tMin === -PI$4 && c.tMax === PI$4) {
                    const splitEdges = edge.minT < 0 && edge.maxT > 0 ? edge.split(0) : [edge];
                    return splitEdges.map(edge => {
                        if (edge.minT >= 0) {
                            return Edge$$1.create(new EllipseCurve$$1(c.center, c.f1, c.f2, max$2(0, c.tMin), c.tMax), edge.a, edge.b, edge.aT, edge.bT, undefined, edge.aDir, edge.bDir, edge.name);
                        }
                        else {
                            // "rotate" the curve
                            return Edge$$1.create(new EllipseCurve$$1(c.center, c.f1.negated(), c.f2.negated(), c.tMin + PI$4, min$2(PI$4, c.tMax + PI$4)), edge.a, edge.b, edge.aT + PI$4, edge.bT + PI$4, undefined, edge.aDir, edge.bDir, edge.name);
                        }
                    });
                }
                if (c instanceof BezierCurve$$1) {
                    if (edge.a.like(edge.b)) {
                        return edge.split(lerp(edge.aT, edge.bT, 0.5));
                    }
                }
                return edge;
            });
        }
        B2T$$1.fixEdges = fixEdges;
        /**
         * Create a [BRep] by projecting edges created by joining vertices with straight edges.
         * @param baseVertices
         * @param baseFacePlane
         * @param offset
         * @param name
         * @param generator
         */
        function extrudeVertices(baseVertices, baseFacePlane, offset, name, generator) {
            assert(baseVertices.every(v => v instanceof V3), 'baseVertices.every(v => v instanceof V3)');
            assertInst(P3$$1, baseFacePlane);
            assertVectors(offset);
            if (baseFacePlane.normal1.dot(offset) > 0)
                baseFacePlane = baseFacePlane.flipped();
            const edges = StraightEdge$$1.chain(baseVertices, true);
            generator = generator || callsce('B2T.extrudeVertices', baseVertices, baseFacePlane, offset, name);
            return B2T$$1.extrudeEdges(edges, baseFacePlane, offset, name, generator);
        }
        B2T$$1.extrudeVertices = extrudeVertices;
        /**
         * Create a tetrahedron (3 sided pyramid) [BRep].
         * `a`, `b`, `c` and `d` can be in any order. The only constraint is that they cannot be on a common plane.
         * The resulting tetrahedron will always have outwards facing faces.
         * @param a
         * @param b
         * @param c
         * @param d
         * @param name
         */
        function tetrahedron(a, b, c, d, name = 'tetra' + getGlobalId$$1()) {
            assertVectors(a, b, c, d);
            const dDistance = P3$$1.throughPoints(a, b, c).distanceToPointSigned(d);
            if (eq0(dDistance)) {
                throw new Error('four points are coplanar');
            }
            if (dDistance > 0) {
                [c, d] = [d, c];
            }
            const ab = StraightEdge$$1.throughPoints(a, b);
            const ac = StraightEdge$$1.throughPoints(a, c);
            const ad = StraightEdge$$1.throughPoints(a, d);
            const bc = StraightEdge$$1.throughPoints(b, c);
            const bd = StraightEdge$$1.throughPoints(b, d);
            const cd = StraightEdge$$1.throughPoints(c, d);
            const faces = [
                new PlaneFace$$1(PlaneSurface$$1.throughPoints(a, b, c), [ab, bc, ac.flipped()], [], name + 'abc'),
                new PlaneFace$$1(PlaneSurface$$1.throughPoints(a, d, b), [ad, bd.flipped(), ab.flipped()], [], name + 'adb'),
                new PlaneFace$$1(PlaneSurface$$1.throughPoints(b, d, c), [bd, cd.flipped(), bc.flipped()], [], name + 'bdc'),
                new PlaneFace$$1(PlaneSurface$$1.throughPoints(c, d, a), [cd, ad.flipped(), ac], [], name + 'cda'),
            ];
            const gen = callsce('B2T.tetrahedron', a, b, c, d);
            return new BRep$$1(faces, false, gen);
        }
        B2T$$1.tetrahedron = tetrahedron;
        const b = 1 / GOLDEN_RATIO, c = 2 - GOLDEN_RATIO;
        B2T$$1.TETRAHEDRON_VERTICES = [
            new V3(1, 0, -SQRT1_2),
            new V3(-1, 0, -SQRT1_2),
            new V3(0, -1, SQRT1_2),
            new V3(0, 1, SQRT1_2),
        ].map(v => v.unit());
        B2T$$1.DODECAHEDRON_VERTICES = [
            new V3(c, 0, 1),
            new V3(-c, 0, 1),
            new V3(-b, b, b),
            new V3(0, 1, c),
            new V3(b, b, b),
            new V3(b, -b, b),
            new V3(0, -1, c),
            new V3(-b, -b, b),
            new V3(c, 0, -1),
            new V3(-c, 0, -1),
            new V3(-b, -b, -b),
            new V3(0, -1, -c),
            new V3(b, -b, -b),
            new V3(b, b, -b),
            new V3(0, 1, -c),
            new V3(-b, b, -b),
            new V3(1, c, 0),
            new V3(-1, c, 0),
            new V3(-1, -c, 0),
            new V3(1, -c, 0),
        ].map(v => v.unit());
        B2T$$1.DODECAHEDRON_FACE_VERTICES = [
            [4, 3, 2, 1, 0],
            [7, 6, 5, 0, 1],
            [12, 11, 10, 9, 8],
            [15, 14, 13, 8, 9],
            [14, 3, 4, 16, 13],
            [3, 14, 15, 17, 2],
            [11, 6, 7, 18, 10],
            [6, 11, 12, 19, 5],
            [4, 0, 5, 19, 16],
            [12, 8, 13, 16, 19],
            [15, 9, 10, 18, 17],
            [7, 1, 2, 17, 18],
        ];
        B2T$$1.OCTAHEDRON_VERTICES = [
            new V3(1, 0, 0),
            new V3(-1, 0, 0),
            new V3(0, 1, 0),
            new V3(0, -1, 0),
            new V3(0, 0, 1),
            new V3(0, 0, -1),
        ];
        B2T$$1.OCTAHEDRON_FACE_VERTICES = [
            [0, 2, 4],
            [2, 1, 4],
            [1, 3, 4],
            [3, 0, 4],
            [2, 0, 5],
            [1, 2, 5],
            [3, 1, 5],
            [0, 3, 5],
        ];
        const { x: s, y: t } = new V3(1, GOLDEN_RATIO, 0).unit();
        B2T$$1.ICOSAHEDRON_VERTICES = [
            new V3(-s, t, 0),
            new V3(s, t, 0),
            new V3(-s, -t, 0),
            new V3(s, -t, 0),
            new V3(0, -s, t),
            new V3(0, s, t),
            new V3(0, -s, -t),
            new V3(0, s, -t),
            new V3(t, 0, -s),
            new V3(t, 0, s),
            new V3(-t, 0, -s),
            new V3(-t, 0, s),
        ];
        B2T$$1.ICOSAHEDRON_FACE_VERTICES = [
            // 5 faces around point 0
            [0, 11, 5],
            [0, 5, 1],
            [0, 1, 7],
            [0, 7, 10],
            [0, 10, 11],
            // 5 adjacent faces
            [1, 5, 9],
            [5, 11, 4],
            [11, 10, 2],
            [10, 7, 6],
            [7, 1, 8],
            // 5 faces around point 3
            [3, 9, 4],
            [3, 4, 2],
            [3, 2, 6],
            [3, 6, 8],
            [3, 8, 9],
            // 5 adjacent faces
            [4, 9, 5],
            [2, 4, 11],
            [6, 2, 10],
            [8, 6, 7],
            [9, 8, 1],
        ];
        /**
         * Create a dodecahedron [BRep]. The vertices are on the unit sphere.
         */
        function dodecahedron() {
            return makePlatonic(B2T$$1.DODECAHEDRON_VERTICES, B2T$$1.DODECAHEDRON_FACE_VERTICES, 'B2T.dodecahedron()');
        }
        B2T$$1.dodecahedron = dodecahedron;
        /**
         * Create an octahedron [BRep]. The vertices are on the unit sphere.
         */
        function octahedron() {
            return makePlatonic(B2T$$1.OCTAHEDRON_VERTICES, B2T$$1.OCTAHEDRON_FACE_VERTICES, 'B2T.octahedron()');
        }
        B2T$$1.octahedron = octahedron;
        /**
         * Create an icosahedron [BRep]. The vertices are on the unit sphere.
         */
        function icosahedron() {
            return makePlatonic(B2T$$1.ICOSAHEDRON_VERTICES, B2T$$1.ICOSAHEDRON_FACE_VERTICES, 'B2T.icosahedron()');
        }
        B2T$$1.icosahedron = icosahedron;
        function makePlatonic(VS, FVIS, generator) {
            const edgeMap = new Map();
            const faces = FVIS.map(faceIndexes => {
                const surface = PlaneSurface$$1.throughPoints(VS[faceIndexes[0]], VS[faceIndexes[1]], VS[faceIndexes[2]]);
                const contour = arrayFromFunction(faceIndexes.length, i => {
                    const ipp = (i + 1) % faceIndexes.length;
                    const iA = faceIndexes[i], iB = faceIndexes[ipp];
                    const iMin = min$2(iA, iB), iMax = max$2(iA, iB), edgeID = iMin * VS.length + iMax;
                    let edge = edgeMap.get(edgeID);
                    !edge && edgeMap.set(edgeID, (edge = StraightEdge$$1.throughPoints(VS[iMin], VS[iMax])));
                    return iA < iB ? edge : edge.flipped();
                });
                return new PlaneFace$$1(surface, contour);
            });
            return new BRep$$1(faces, false, generator);
        }
        /**
         * Create a [BRep] by projecting a number of edges onto a point.
         * @param baseEdges The edges forming the base of the pyramid.
         * @param apex The tip of the pyramid.
         * @param name
         */
        function pyramidEdges(baseEdges, apex, name = 'pyramid' + getGlobalId$$1()) {
            assertInst(Edge$$1, ...baseEdges);
            assertVectors(apex);
            const ribs = baseEdges.map(baseEdge => StraightEdge$$1.throughPoints(apex, baseEdge.a));
            const faces = baseEdges.map((baseEdge, i) => {
                const faceName = name + 'Wall' + i;
                const ipp = (i + 1) % baseEdges.length;
                const faceEdges = [ribs[i], baseEdge, ribs[ipp].flipped()];
                const surface = projectPointCurve$$1(baseEdge.curve, baseEdge.minT, baseEdge.maxT, apex, baseEdge.deltaT() < 0);
                return Face$$1.create(surface, faceEdges, undefined, faceName);
            });
            const baseSurface = new PlaneSurface$$1(P3$$1.XY).flipped();
            const bottomFace = Face$$1.create(baseSurface, Edge$$1.reversePath(baseEdges));
            faces.push(bottomFace);
            const generator = callsce('B2T.pyramidEdges', baseEdges, apex, name);
            return new BRep$$1(faces, false, generator);
        }
        B2T$$1.pyramidEdges = pyramidEdges;
        function fromBPT(bpt) {
            const lineRegex = /.+/g;
            const readLine = () => lineRegex.exec(bpt)[0];
            const readLineNumbers = () => readLine()
                .trim()
                .split(/\s+/)
                .map(s => parseFloat(s));
            const numOfPatches = parseInt(readLine());
            const faces = arrayFromFunction(numOfPatches, () => {
                const [pointsUCount, pointsVCount] = readLineNumbers();
                const points = Array.from({ length: (pointsUCount + 1) * (pointsVCount + 1) }, () => VV(...readLineNumbers(), 1));
                const surface = new NURBSSurface$$1(points, NURBS$$1.bezierKnots(pointsUCount), NURBS$$1.bezierKnots(pointsVCount), pointsUCount, pointsVCount, 0, 1, 0, 1);
                return surface;
                const edges = [
                    Edge$$1.forCurveAndTs(surface.isoparametricV(0)),
                    Edge$$1.forCurveAndTs(surface.isoparametricU(1)),
                    Edge$$1.forCurveAndTs(surface.isoparametricV(1)).flipped(),
                    Edge$$1.forCurveAndTs(surface.isoparametricU(0)).flipped(),
                ];
                return Face$$1.create(surface, edges);
            });
            return faces;
            return new BRep$$1(faces, false);
        }
        B2T$$1.fromBPT = fromBPT;
    })(B2T$$1 || (B2T$$1 = {}));

    class CustomPlane$$1 extends P3$$1 {
        constructor(anchor, right, up, name = 'CustomPlane' + getGlobalId$$1(), color = chroma.random().gl(), rightStart = -500, rightEnd = 500, upStart = -500, upEnd = 500) {
            const { normal1, w } = P3$$1.forAnchorAndPlaneVectors(anchor, right, up);
            super(normal1, w);
            this.up = up;
            this.right = right;
            this.uMin = rightStart;
            this.uMax = rightEnd;
            this.vMin = upStart;
            this.vMax = upEnd;
            this.name = name;
            this.color = color;
        }
        get plane() {
            return this;
        }
        toPlaneSurface() {
            return new PlaneSurface$$1(this, this.right, this.up);
        }
        toSource() {
            return callsce('new CustomPlane', this.anchor, this.right, this.up, this.name, this.color, this.sMin, this.sMax, this.tMin, this.tMax);
        }
        static forPlane(plane, color = GL_COLOR_BLACK$$1, name) {
            //assert(!name)
            const up = plane.normal1.getPerpendicular().unit(), right = up.cross(plane.normal1);
            return new CustomPlane$$1(plane.anchor, right, up, name, color);
        }
        static fromPlaneSurface(surface) {
            return new CustomPlane$$1(surface.plane.anchor, surface.right, surface.up, 'genCustomPlane' + getGlobalId$$1());
        }
        distanceTo(line, mindist) {
            return [
                new L3$$1(this.anchor.plus(this.right.times(this.uMin)), this.up),
                new L3$$1(this.anchor.plus(this.right.times(this.uMax)), this.up),
                new L3$$1(this.anchor.plus(this.up.times(this.vMin)), this.right),
                new L3$$1(this.anchor.plus(this.up.times(this.vMax)), this.right),
            ]
                .map((line2, line2Index) => {
                const info = line2.infoClosestToLine(line);
                if ((isNaN(info.t) || // parallel LINES
                    (line2Index < 2 && this.vMin <= info.t && info.t <= this.vMax) ||
                    (line2Index >= 2 && this.uMin <= info.t && info.t <= this.uMax)) &&
                    info.distance <= mindist) {
                    return info.s;
                }
                else {
                    return Infinity;
                }
            })
                .min();
        }
        distanceTo2(line, mindist) {
            return [
                new L3$$1(this.anchor.plus(this.right.times(this.uMin)), this.up),
                new L3$$1(this.anchor.plus(this.right.times(this.uMax)), this.up),
                new L3$$1(this.anchor.plus(this.up.times(this.vMin)), this.right),
                new L3$$1(this.anchor.plus(this.up.times(this.vMax)), this.right),
            ]
                .map((line2, line2Index) => {
                const info = line2.infoClosestToLine(line);
                if ((isNaN(info.t) || // parallel LINES
                    (line2Index < 2 && this.vMin <= info.t && info.t <= this.vMax) ||
                    (line2Index >= 2 && this.uMin <= info.t && info.t <= this.uMax)) &&
                    info.distance <= mindist) {
                    return info.distance;
                }
                else {
                    return Infinity;
                }
            })
                .min();
        }
    }

    var extendStatics$2=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,a){t.__proto__=a;}||function(t,a){for(var r in a)a.hasOwnProperty(r)&&(t[r]=a[r]);};function __extends$2(t,a){function r(){this.constructor=t;}extendStatics$2(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r);}function rotate(t,a){var r=t[0],e=t[1];return [r*Math.cos(a)-e*Math.sin(a),r*Math.sin(a)+e*Math.cos(a)]}function assertNumbers$1(){for(var t=[],a=0;a<arguments.length;a++)t[a]=arguments[a];for(var r=0;r<t.length;r++)if("number"!=typeof t[r])throw new Error("assertNumbers arguments["+r+"] is not a number. "+typeof t[r]+" == typeof "+t[r]);return !0}var PI$5=Math.PI;function annotateArcCommand(t,a,r){t.lArcFlag=0===t.lArcFlag?0:1,t.sweepFlag=0===t.sweepFlag?0:1;var e=t.rX,n=t.rY,i=t.x,o=t.y;e=Math.abs(t.rX),n=Math.abs(t.rY);var s=rotate([(a-i)/2,(r-o)/2],-t.xRot/180*PI$5),h=s[0],u=s[1],c=Math.pow(h,2)/Math.pow(e,2)+Math.pow(u,2)/Math.pow(n,2);1<c&&(e*=Math.sqrt(c),n*=Math.sqrt(c)),t.rX=e,t.rY=n;var m=Math.pow(e,2)*Math.pow(u,2)+Math.pow(n,2)*Math.pow(h,2),_=(t.lArcFlag!==t.sweepFlag?1:-1)*Math.sqrt(Math.max(0,(Math.pow(e,2)*Math.pow(n,2)-m)/m)),T=e*u/n*_,O=-n*h/e*_,p=rotate([T,O],t.xRot/180*PI$5);t.cX=p[0]+(a+i)/2,t.cY=p[1]+(r+o)/2,t.phi1=Math.atan2((u-O)/n,(h-T)/e),t.phi2=Math.atan2((-u-O)/n,(-h-T)/e),0===t.sweepFlag&&t.phi2>t.phi1&&(t.phi2-=2*PI$5),1===t.sweepFlag&&t.phi2<t.phi1&&(t.phi2+=2*PI$5),t.phi1*=180/PI$5,t.phi2*=180/PI$5;}function intersectionUnitCircleLine(t,a,r){assertNumbers$1(t,a,r);var e=t*t+a*a-r*r;if(0>e)return [];if(0===e)return [[t*r/(t*t+a*a),a*r/(t*t+a*a)]];var n=Math.sqrt(e);return [[(t*r+a*n)/(t*t+a*a),(a*r-t*n)/(t*t+a*a)],[(t*r-a*n)/(t*t+a*a),(a*r+t*n)/(t*t+a*a)]]}var SVGPathDataTransformer,DEG$1=Math.PI/180;function lerp$2(t,a,r){return (1-r)*t+r*a}function arcAt(t,a,r,e){return t+Math.cos(e/180*PI$5)*a+Math.sin(e/180*PI$5)*r}function bezierRoot(t,a,r,e){var n=a-t,i=r-a,o=3*n+3*(e-r)-6*i,s=6*(i-n),h=3*n;return Math.abs(o)<1e-6?[-h/s]:pqFormula$1(s/o,h/o,1e-6)}function bezierAt(t,a,r,e,n){var i=1-n;return t*(i*i*i)+a*(3*i*i*n)+r*(3*i*n*n)+e*(n*n*n)}function pqFormula$1(t,a,r){void 0===r&&(r=1e-6);var e=t*t/4-a;if(e<-r)return [];if(e<=r)return [-t/2];var n=Math.sqrt(e);return [-t/2-n,-t/2+n]}function a2c(t,a,r){var e,n,i,o;t.cX||annotateArcCommand(t,a,r);for(var s=Math.min(t.phi1,t.phi2),h=Math.max(t.phi1,t.phi2)-s,u=Math.ceil(h/90),c=new Array(u),m=a,_=r,T=0;T<u;T++){var O=lerp$2(t.phi1,t.phi2,T/u),p=lerp$2(t.phi1,t.phi2,(T+1)/u),y=p-O,S=4/3*Math.tan(y*DEG$1/4),f=[Math.cos(O*DEG$1)-S*Math.sin(O*DEG$1),Math.sin(O*DEG$1)+S*Math.cos(O*DEG$1)],V=f[0],N=f[1],D=[Math.cos(p*DEG$1),Math.sin(p*DEG$1)],P=D[0],l=D[1],v=[P+S*Math.sin(p*DEG$1),l-S*Math.cos(p*DEG$1)],E=v[0],A=v[1];c[T]={relative:t.relative,type:SVGPathData.CURVE_TO};var d=function(a,r){var e=rotate([a*t.rX,r*t.rY],t.xRot),n=e[0],i=e[1];return [t.cX+n,t.cY+i]};e=d(V,N),c[T].x1=e[0],c[T].y1=e[1],n=d(E,A),c[T].x2=n[0],c[T].y2=n[1],i=d(P,l),c[T].x=i[0],c[T].y=i[1],t.relative&&(c[T].x1-=m,c[T].y1-=_,c[T].x2-=m,c[T].y2-=_,c[T].x-=m,c[T].y-=_),m=(o=[c[T].x,c[T].y])[0],_=o[1];}return c}!function(t){function a(){return n(function(t,a,r){return t.relative&&(void 0!==t.x1&&(t.x1+=a),void 0!==t.y1&&(t.y1+=r),void 0!==t.x2&&(t.x2+=a),void 0!==t.y2&&(t.y2+=r),void 0!==t.x&&(t.x+=a),void 0!==t.y&&(t.y+=r),t.relative=!1),t})}function r(){var t=NaN,a=NaN,r=NaN,e=NaN;return n(function(n,i,o){return n.type&SVGPathData.SMOOTH_CURVE_TO&&(n.type=SVGPathData.CURVE_TO,t=isNaN(t)?i:t,a=isNaN(a)?o:a,n.x1=n.relative?i-t:2*i-t,n.y1=n.relative?o-a:2*o-a),n.type&SVGPathData.CURVE_TO?(t=n.relative?i+n.x2:n.x2,a=n.relative?o+n.y2:n.y2):(t=NaN,a=NaN),n.type&SVGPathData.SMOOTH_QUAD_TO&&(n.type=SVGPathData.QUAD_TO,r=isNaN(r)?i:r,e=isNaN(e)?o:e,n.x1=n.relative?i-r:2*i-r,n.y1=n.relative?o-e:2*o-e),n.type&SVGPathData.QUAD_TO?(r=n.relative?i+n.x1:n.x1,e=n.relative?o+n.y1:n.y1):(r=NaN,e=NaN),n})}function e(){var t=NaN,a=NaN;return n(function(r,e,n){if(r.type&SVGPathData.SMOOTH_QUAD_TO&&(r.type=SVGPathData.QUAD_TO,t=isNaN(t)?e:t,a=isNaN(a)?n:a,r.x1=r.relative?e-t:2*e-t,r.y1=r.relative?n-a:2*n-a),r.type&SVGPathData.QUAD_TO){t=r.relative?e+r.x1:r.x1,a=r.relative?n+r.y1:r.y1;var i=r.x1,o=r.y1;r.type=SVGPathData.CURVE_TO,r.x1=((r.relative?0:e)+2*i)/3,r.y1=((r.relative?0:n)+2*o)/3,r.x2=(r.x+2*i)/3,r.y2=(r.y+2*o)/3;}else t=NaN,a=NaN;return r})}function n(t){var a=0,r=0,e=NaN,n=NaN;return function(i){if(isNaN(e)&&!(i.type&SVGPathData.MOVE_TO))throw new Error("path must start with moveto");var o=t(i,a,r,e,n);return i.type&SVGPathData.CLOSE_PATH&&(a=e,r=n),void 0!==i.x&&(a=i.relative?a+i.x:i.x),void 0!==i.y&&(r=i.relative?r+i.y:i.y),i.type&SVGPathData.MOVE_TO&&(e=a,n=r),o}}function i(t,a,r,e,i,o){return assertNumbers$1(t,a,r,e,i,o),n(function(n,s,h,u){var c=n.x1,m=n.x2,_=n.relative&&!isNaN(u),T=void 0!==n.x?n.x:_?0:s,O=void 0!==n.y?n.y:_?0:h;function p(t){return t*t}n.type&SVGPathData.HORIZ_LINE_TO&&0!==a&&(n.type=SVGPathData.LINE_TO,n.y=n.relative?0:h),n.type&SVGPathData.VERT_LINE_TO&&0!==r&&(n.type=SVGPathData.LINE_TO,n.x=n.relative?0:s),void 0!==n.x&&(n.x=n.x*t+O*r+(_?0:i)),void 0!==n.y&&(n.y=T*a+n.y*e+(_?0:o)),void 0!==n.x1&&(n.x1=n.x1*t+n.y1*r+(_?0:i)),void 0!==n.y1&&(n.y1=c*a+n.y1*e+(_?0:o)),void 0!==n.x2&&(n.x2=n.x2*t+n.y2*r+(_?0:i)),void 0!==n.y2&&(n.y2=m*a+n.y2*e+(_?0:o));var y=t*e-a*r;if(void 0!==n.xRot&&(1!==t||0!==a||0!==r||1!==e))if(0===y)delete n.rX,delete n.rY,delete n.xRot,delete n.lArcFlag,delete n.sweepFlag,n.type=SVGPathData.LINE_TO;else{var S=n.xRot*Math.PI/180,f=Math.sin(S),V=Math.cos(S),N=1/p(n.rX),D=1/p(n.rY),P=p(V)*N+p(f)*D,l=2*f*V*(N-D),v=p(f)*N+p(V)*D,E=P*e*e-l*a*e+v*a*a,A=l*(t*e+a*r)-2*(P*r*e+v*t*a),d=P*r*r-l*t*r+v*t*t,G=(Math.atan2(A,E-d)+Math.PI)%Math.PI/2,C=Math.sin(G),x=Math.cos(G);n.rX=Math.abs(y)/Math.sqrt(E*p(x)+A*C*x+d*p(C)),n.rY=Math.abs(y)/Math.sqrt(E*p(C)-A*C*x+d*p(x)),n.xRot=180*G/Math.PI;}return void 0!==n.sweepFlag&&0>y&&(n.sweepFlag=+!n.sweepFlag),n})}function o(){return function(t){var a={};for(var r in t)a[r]=t[r];return a}}t.ROUND=function(t){function a(a){return Math.round(a*t)/t}return void 0===t&&(t=1e13),assertNumbers$1(t),function(t){return void 0!==t.x1&&(t.x1=a(t.x1)),void 0!==t.y1&&(t.y1=a(t.y1)),void 0!==t.x2&&(t.x2=a(t.x2)),void 0!==t.y2&&(t.y2=a(t.y2)),void 0!==t.x&&(t.x=a(t.x)),void 0!==t.y&&(t.y=a(t.y)),t}},t.TO_ABS=a,t.TO_REL=function(){return n(function(t,a,r){return t.relative||(void 0!==t.x1&&(t.x1-=a),void 0!==t.y1&&(t.y1-=r),void 0!==t.x2&&(t.x2-=a),void 0!==t.y2&&(t.y2-=r),void 0!==t.x&&(t.x-=a),void 0!==t.y&&(t.y-=r),t.relative=!0),t})},t.NORMALIZE_HVZ=function(t,a,r){return void 0===t&&(t=!0),void 0===a&&(a=!0),void 0===r&&(r=!0),n(function(e,n,i,o,s){if(isNaN(o)&&!(e.type&SVGPathData.MOVE_TO))throw new Error("path must start with moveto");return a&&e.type&SVGPathData.HORIZ_LINE_TO&&(e.type=SVGPathData.LINE_TO,e.y=e.relative?0:i),r&&e.type&SVGPathData.VERT_LINE_TO&&(e.type=SVGPathData.LINE_TO,e.x=e.relative?0:n),t&&e.type&SVGPathData.CLOSE_PATH&&(e.type=SVGPathData.LINE_TO,e.x=e.relative?o-n:o,e.y=e.relative?s-i:s),e.type&SVGPathData.ARC&&(0===e.rX||0===e.rY)&&(e.type=SVGPathData.LINE_TO,delete e.rX,delete e.rY,delete e.xRot,delete e.lArcFlag,delete e.sweepFlag),e})},t.NORMALIZE_ST=r,t.QT_TO_C=e,t.INFO=n,t.SANITIZE=function(t){void 0===t&&(t=0),assertNumbers$1(t);var a=NaN,r=NaN,e=NaN,i=NaN;return n(function(n,o,s,h,u){var c=Math.abs,m=!1,_=0,T=0;if(n.type&SVGPathData.SMOOTH_CURVE_TO&&(_=isNaN(a)?0:o-a,T=isNaN(r)?0:s-r),n.type&(SVGPathData.CURVE_TO|SVGPathData.SMOOTH_CURVE_TO)?(a=n.relative?o+n.x2:n.x2,r=n.relative?s+n.y2:n.y2):(a=NaN,r=NaN),n.type&SVGPathData.SMOOTH_QUAD_TO?(e=isNaN(e)?o:2*o-e,i=isNaN(i)?s:2*s-i):n.type&SVGPathData.QUAD_TO?(e=n.relative?o+n.x1:n.x1,i=n.relative?s+n.y1:n.y2):(e=NaN,i=NaN),n.type&SVGPathData.LINE_COMMANDS||n.type&SVGPathData.ARC&&(0===n.rX||0===n.rY||!n.lArcFlag)||n.type&SVGPathData.CURVE_TO||n.type&SVGPathData.SMOOTH_CURVE_TO||n.type&SVGPathData.QUAD_TO||n.type&SVGPathData.SMOOTH_QUAD_TO){var O=void 0===n.x?0:n.relative?n.x:n.x-o,p=void 0===n.y?0:n.relative?n.y:n.y-s;_=isNaN(e)?void 0===n.x1?_:n.relative?n.x:n.x1-o:e-o,T=isNaN(i)?void 0===n.y1?T:n.relative?n.y:n.y1-s:i-s;var y=void 0===n.x2?0:n.relative?n.x:n.x2-o,S=void 0===n.y2?0:n.relative?n.y:n.y2-s;c(O)<=t&&c(p)<=t&&c(_)<=t&&c(T)<=t&&c(y)<=t&&c(S)<=t&&(m=!0);}return n.type&SVGPathData.CLOSE_PATH&&c(o-h)<=t&&c(s-u)<=t&&(m=!0),m?[]:n})},t.MATRIX=i,t.ROTATE=function(t,a,r){void 0===a&&(a=0),void 0===r&&(r=0),assertNumbers$1(t,a,r);var e=Math.sin(t),n=Math.cos(t);return i(n,e,-e,n,a-a*n+r*e,r-a*e-r*n)},t.TRANSLATE=function(t,a){return void 0===a&&(a=0),assertNumbers$1(t,a),i(1,0,0,1,t,a)},t.SCALE=function(t,a){return void 0===a&&(a=t),assertNumbers$1(t,a),i(t,0,0,a,0,0)},t.SKEW_X=function(t){return assertNumbers$1(t),i(1,0,Math.atan(t),1,0,0)},t.SKEW_Y=function(t){return assertNumbers$1(t),i(1,Math.atan(t),0,1,0,0)},t.X_AXIS_SYMMETRY=function(t){return void 0===t&&(t=0),assertNumbers$1(t),i(-1,0,0,1,t,0)},t.Y_AXIS_SYMMETRY=function(t){return void 0===t&&(t=0),assertNumbers$1(t),i(1,0,0,-1,0,t)},t.A_TO_C=function(){return n(function(t,a,r){return SVGPathData.ARC===t.type?a2c(t,t.relative?0:a,t.relative?0:r):t})},t.ANNOTATE_ARCS=function(){return n(function(t,a,r){return t.relative&&(a=0,r=0),SVGPathData.ARC===t.type&&annotateArcCommand(t,a,r),t})},t.CLONE=o,t.CALCULATE_BOUNDS=function(){var t=function(t){var a={};for(var r in t)a[r]=t[r];return a},i=a(),o=e(),s=r(),h=n(function(a,r,e){var n=s(o(i(t(a))));function u(t){t>h.maxX&&(h.maxX=t),t<h.minX&&(h.minX=t);}function c(t){t>h.maxY&&(h.maxY=t),t<h.minY&&(h.minY=t);}if(n.type&SVGPathData.DRAWING_COMMANDS&&(u(r),c(e)),n.type&SVGPathData.HORIZ_LINE_TO&&u(n.x),n.type&SVGPathData.VERT_LINE_TO&&c(n.y),n.type&SVGPathData.LINE_TO&&(u(n.x),c(n.y)),n.type&SVGPathData.CURVE_TO){u(n.x),c(n.y);for(var m=0,_=bezierRoot(r,n.x1,n.x2,n.x);m<_.length;m++)0<(G=_[m])&&1>G&&u(bezierAt(r,n.x1,n.x2,n.x,G));for(var T=0,O=bezierRoot(e,n.y1,n.y2,n.y);T<O.length;T++)0<(G=O[T])&&1>G&&c(bezierAt(e,n.y1,n.y2,n.y,G));}if(n.type&SVGPathData.ARC){u(n.x),c(n.y),annotateArcCommand(n,r,e);for(var p=n.xRot/180*Math.PI,y=Math.cos(p)*n.rX,S=Math.sin(p)*n.rX,f=-Math.sin(p)*n.rY,V=Math.cos(p)*n.rY,N=n.phi1<n.phi2?[n.phi1,n.phi2]:-180>n.phi2?[n.phi2+360,n.phi1+360]:[n.phi2,n.phi1],D=N[0],P=N[1],l=function(t){var a=t[0],r=t[1],e=180*Math.atan2(r,a)/Math.PI;return e<D?e+360:e},v=0,E=intersectionUnitCircleLine(f,-y,0).map(l);v<E.length;v++)(G=E[v])>D&&G<P&&u(arcAt(n.cX,y,f,G));for(var A=0,d=intersectionUnitCircleLine(V,-S,0).map(l);A<d.length;A++){var G;(G=d[A])>D&&G<P&&c(arcAt(n.cY,S,V,G));}}return a});return h.minX=1/0,h.maxX=-1/0,h.minY=1/0,h.maxY=-1/0,h};}(SVGPathDataTransformer||(SVGPathDataTransformer={}));var _a,_a$1,TransformableSVG=function(){function t(){}return t.prototype.round=function(t){return this.transform(SVGPathDataTransformer.ROUND(t))},t.prototype.toAbs=function(){return this.transform(SVGPathDataTransformer.TO_ABS())},t.prototype.toRel=function(){return this.transform(SVGPathDataTransformer.TO_REL())},t.prototype.normalizeHVZ=function(t,a,r){return this.transform(SVGPathDataTransformer.NORMALIZE_HVZ(t,a,r))},t.prototype.normalizeST=function(){return this.transform(SVGPathDataTransformer.NORMALIZE_ST())},t.prototype.qtToC=function(){return this.transform(SVGPathDataTransformer.QT_TO_C())},t.prototype.aToC=function(){return this.transform(SVGPathDataTransformer.A_TO_C())},t.prototype.sanitize=function(t){return this.transform(SVGPathDataTransformer.SANITIZE(t))},t.prototype.translate=function(t,a){return this.transform(SVGPathDataTransformer.TRANSLATE(t,a))},t.prototype.scale=function(t,a){return this.transform(SVGPathDataTransformer.SCALE(t,a))},t.prototype.rotate=function(t,a,r){return this.transform(SVGPathDataTransformer.ROTATE(t,a,r))},t.prototype.matrix=function(t,a,r,e,n,i){return this.transform(SVGPathDataTransformer.MATRIX(t,a,r,e,n,i))},t.prototype.skewX=function(t){return this.transform(SVGPathDataTransformer.SKEW_X(t))},t.prototype.skewY=function(t){return this.transform(SVGPathDataTransformer.SKEW_Y(t))},t.prototype.xSymmetry=function(t){return this.transform(SVGPathDataTransformer.X_AXIS_SYMMETRY(t))},t.prototype.ySymmetry=function(t){return this.transform(SVGPathDataTransformer.Y_AXIS_SYMMETRY(t))},t.prototype.annotateArcs=function(){return this.transform(SVGPathDataTransformer.ANNOTATE_ARCS())},t}(),isWhiteSpace=function(t){return " "===t||"\t"===t||"\r"===t||"\n"===t},isDigit=function(t){return "0".charCodeAt(0)<=t.charCodeAt(0)&&t.charCodeAt(0)<="9".charCodeAt(0)},SVGPathDataParser$$1=function(t){function a(){var a=t.call(this)||this;return a.curNumber="",a.curCommandType=-1,a.curCommandRelative=!1,a.canParseCommandOrComma=!0,a.curNumberHasExp=!1,a.curNumberHasExpDigits=!1,a.curNumberHasDecimal=!1,a.curArgs=[],a}return __extends$2(a,t),a.prototype.finish=function(t){if(void 0===t&&(t=[]),this.parse(" ",t),0!==this.curArgs.length||!this.canParseCommandOrComma)throw new SyntaxError("Unterminated command at the path end.");return t},a.prototype.parse=function(t,a){var r=this;void 0===a&&(a=[]);for(var e=function(t){a.push(t),r.curArgs.length=0,r.canParseCommandOrComma=!0;},n=0;n<t.length;n++){var i=t[n];if(isDigit(i))this.curNumber+=i,this.curNumberHasExpDigits=this.curNumberHasExp;else if("e"!==i&&"E"!==i)if("-"!==i&&"+"!==i||!this.curNumberHasExp||this.curNumberHasExpDigits)if("."!==i||this.curNumberHasExp||this.curNumberHasDecimal){if(this.curNumber&&-1!==this.curCommandType){var o=Number(this.curNumber);if(isNaN(o))throw new SyntaxError("Invalid number ending at "+n);if(this.curCommandType===SVGPathData.ARC)if(0===this.curArgs.length||1===this.curArgs.length){if(0>o)throw new SyntaxError('Expected positive number, got "'+o+'" at index "'+n+'"')}else if((3===this.curArgs.length||4===this.curArgs.length)&&"0"!==this.curNumber&&"1"!==this.curNumber)throw new SyntaxError('Expected a flag, got "'+this.curNumber+'" at index "'+n+'"');this.curArgs.push(o),this.curArgs.length===COMMAND_ARG_COUNTS[this.curCommandType]&&(SVGPathData.HORIZ_LINE_TO===this.curCommandType?e({type:SVGPathData.HORIZ_LINE_TO,relative:this.curCommandRelative,x:o}):SVGPathData.VERT_LINE_TO===this.curCommandType?e({type:SVGPathData.VERT_LINE_TO,relative:this.curCommandRelative,y:o}):this.curCommandType===SVGPathData.MOVE_TO||this.curCommandType===SVGPathData.LINE_TO||this.curCommandType===SVGPathData.SMOOTH_QUAD_TO?(e({type:this.curCommandType,relative:this.curCommandRelative,x:this.curArgs[0],y:this.curArgs[1]}),SVGPathData.MOVE_TO===this.curCommandType&&(this.curCommandType=SVGPathData.LINE_TO)):this.curCommandType===SVGPathData.CURVE_TO?e({type:SVGPathData.CURVE_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x2:this.curArgs[2],y2:this.curArgs[3],x:this.curArgs[4],y:this.curArgs[5]}):this.curCommandType===SVGPathData.SMOOTH_CURVE_TO?e({type:SVGPathData.SMOOTH_CURVE_TO,relative:this.curCommandRelative,x2:this.curArgs[0],y2:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===SVGPathData.QUAD_TO?e({type:SVGPathData.QUAD_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===SVGPathData.ARC&&e({type:SVGPathData.ARC,relative:this.curCommandRelative,rX:this.curArgs[0],rY:this.curArgs[1],xRot:this.curArgs[2],lArcFlag:this.curArgs[3],sweepFlag:this.curArgs[4],x:this.curArgs[5],y:this.curArgs[6]})),this.curNumber="",this.curNumberHasExpDigits=!1,this.curNumberHasExp=!1,this.curNumberHasDecimal=!1,this.canParseCommandOrComma=!0;}if(!isWhiteSpace(i))if(","===i&&this.canParseCommandOrComma)this.canParseCommandOrComma=!1;else if("+"!==i&&"-"!==i&&"."!==i){if(0!==this.curArgs.length)throw new SyntaxError("Unterminated command at index "+n+".");if(!this.canParseCommandOrComma)throw new SyntaxError('Unexpected character "'+i+'" at index '+n+". Command cannot follow comma");if(this.canParseCommandOrComma=!1,"z"!==i&&"Z"!==i)if("h"===i||"H"===i)this.curCommandType=SVGPathData.HORIZ_LINE_TO,this.curCommandRelative="h"===i;else if("v"===i||"V"===i)this.curCommandType=SVGPathData.VERT_LINE_TO,this.curCommandRelative="v"===i;else if("m"===i||"M"===i)this.curCommandType=SVGPathData.MOVE_TO,this.curCommandRelative="m"===i;else if("l"===i||"L"===i)this.curCommandType=SVGPathData.LINE_TO,this.curCommandRelative="l"===i;else if("c"===i||"C"===i)this.curCommandType=SVGPathData.CURVE_TO,this.curCommandRelative="c"===i;else if("s"===i||"S"===i)this.curCommandType=SVGPathData.SMOOTH_CURVE_TO,this.curCommandRelative="s"===i;else if("q"===i||"Q"===i)this.curCommandType=SVGPathData.QUAD_TO,this.curCommandRelative="q"===i;else if("t"===i||"T"===i)this.curCommandType=SVGPathData.SMOOTH_QUAD_TO,this.curCommandRelative="t"===i;else{if("a"!==i&&"A"!==i)throw new SyntaxError('Unexpected character "'+i+'" at index '+n+".");this.curCommandType=SVGPathData.ARC,this.curCommandRelative="a"===i;}else a.push({type:SVGPathData.CLOSE_PATH}),this.canParseCommandOrComma=!0,this.curCommandType=-1;}else this.curNumber=i,this.curNumberHasDecimal="."===i;}else this.curNumber+=i,this.curNumberHasDecimal=!0;else this.curNumber+=i;else this.curNumber+=i,this.curNumberHasExp=!0;}return a},a.prototype.transform=function(t){return Object.create(this,{parse:{value:function(a,r){void 0===r&&(r=[]);for(var e=0,n=Object.getPrototypeOf(this).parse.call(this,a);e<n.length;e++){var i=n[e],o=t(i);Array.isArray(o)?r.push.apply(r,o):r.push(o);}return r}}})},a}(TransformableSVG),SVGPathData=function(t){function a(r){var e=t.call(this)||this;return e.commands="string"==typeof r?a.parse(r):r,e}return __extends$2(a,t),a.prototype.encode=function(){return a.encode(this.commands)},a.prototype.getBounds=function(){var t=SVGPathDataTransformer.CALCULATE_BOUNDS();return this.transform(t),t},a.prototype.transform=function(t){for(var a=[],r=0,e=this.commands;r<e.length;r++){var n=t(e[r]);Array.isArray(n)?a.push.apply(a,n):a.push(n);}return this.commands=a,this},a.encode=function(t){return encodeSVGPath$$1(t)},a.parse=function(t){var a=new SVGPathDataParser$$1,r=[];return a.parse(t,r),a.finish(r),r},a.CLOSE_PATH=1,a.MOVE_TO=2,a.HORIZ_LINE_TO=4,a.VERT_LINE_TO=8,a.LINE_TO=16,a.CURVE_TO=32,a.SMOOTH_CURVE_TO=64,a.QUAD_TO=128,a.SMOOTH_QUAD_TO=256,a.ARC=512,a.LINE_COMMANDS=a.LINE_TO|a.HORIZ_LINE_TO|a.VERT_LINE_TO,a.DRAWING_COMMANDS=a.HORIZ_LINE_TO|a.VERT_LINE_TO|a.LINE_TO|a.CURVE_TO|a.SMOOTH_CURVE_TO|a.QUAD_TO|a.SMOOTH_QUAD_TO|a.ARC,a}(TransformableSVG),COMMAND_ARG_COUNTS=((_a={})[SVGPathData.MOVE_TO]=2,_a[SVGPathData.LINE_TO]=2,_a[SVGPathData.HORIZ_LINE_TO]=1,_a[SVGPathData.VERT_LINE_TO]=1,_a[SVGPathData.CLOSE_PATH]=0,_a[SVGPathData.QUAD_TO]=4,_a[SVGPathData.SMOOTH_QUAD_TO]=2,_a[SVGPathData.CURVE_TO]=6,_a[SVGPathData.SMOOTH_CURVE_TO]=4,_a[SVGPathData.ARC]=7,_a),WSP=" ";function encodeSVGPath$$1(t){var a="";Array.isArray(t)||(t=[t]);for(var r=0;r<t.length;r++){var e=t[r];if(e.type===SVGPathData.CLOSE_PATH)a+="z";else if(e.type===SVGPathData.HORIZ_LINE_TO)a+=(e.relative?"h":"H")+e.x;else if(e.type===SVGPathData.VERT_LINE_TO)a+=(e.relative?"v":"V")+e.y;else if(e.type===SVGPathData.MOVE_TO)a+=(e.relative?"m":"M")+e.x+WSP+e.y;else if(e.type===SVGPathData.LINE_TO)a+=(e.relative?"l":"L")+e.x+WSP+e.y;else if(e.type===SVGPathData.CURVE_TO)a+=(e.relative?"c":"C")+e.x1+WSP+e.y1+WSP+e.x2+WSP+e.y2+WSP+e.x+WSP+e.y;else if(e.type===SVGPathData.SMOOTH_CURVE_TO)a+=(e.relative?"s":"S")+e.x2+WSP+e.y2+WSP+e.x+WSP+e.y;else if(e.type===SVGPathData.QUAD_TO)a+=(e.relative?"q":"Q")+e.x1+WSP+e.y1+WSP+e.x+WSP+e.y;else if(e.type===SVGPathData.SMOOTH_QUAD_TO)a+=(e.relative?"t":"T")+e.x+WSP+e.y;else{if(e.type!==SVGPathData.ARC)throw new Error('Unexpected command type "'+e.type+'" at index '+r+".");a+=(e.relative?"a":"A")+e.rX+WSP+e.rY+WSP+e.xRot+WSP+ +e.lArcFlag+WSP+ +e.sweepFlag+WSP+e.x+WSP+e.y;}}return a}var SVGPathData$1=function(t){function a(r){var e=t.call(this)||this;return e.commands="string"==typeof r?a.parse(r):r,e}return __extends$2(a,t),a.prototype.encode=function(){return a.encode(this.commands)},a.prototype.getBounds=function(){var t=SVGPathDataTransformer.CALCULATE_BOUNDS();return this.transform(t),t},a.prototype.transform=function(t){for(var a=[],r=0,e=this.commands;r<e.length;r++){var n=t(e[r]);Array.isArray(n)?a.push.apply(a,n):a.push(n);}return this.commands=a,this},a.encode=function(t){return encodeSVGPath$$1(t)},a.parse=function(t){var a=new SVGPathDataParser$$1,r=[];return a.parse(t,r),a.finish(r),r},a.CLOSE_PATH=1,a.MOVE_TO=2,a.HORIZ_LINE_TO=4,a.VERT_LINE_TO=8,a.LINE_TO=16,a.CURVE_TO=32,a.SMOOTH_CURVE_TO=64,a.QUAD_TO=128,a.SMOOTH_QUAD_TO=256,a.ARC=512,a.LINE_COMMANDS=a.LINE_TO|a.HORIZ_LINE_TO|a.VERT_LINE_TO,a.DRAWING_COMMANDS=a.HORIZ_LINE_TO|a.VERT_LINE_TO|a.LINE_TO|a.CURVE_TO|a.SMOOTH_CURVE_TO|a.QUAD_TO|a.SMOOTH_QUAD_TO|a.ARC,a}(TransformableSVG),COMMAND_ARG_COUNTS$1=((_a$1={})[SVGPathData$1.MOVE_TO]=2,_a$1[SVGPathData$1.LINE_TO]=2,_a$1[SVGPathData$1.HORIZ_LINE_TO]=1,_a$1[SVGPathData$1.VERT_LINE_TO]=1,_a$1[SVGPathData$1.CLOSE_PATH]=0,_a$1[SVGPathData$1.QUAD_TO]=4,_a$1[SVGPathData$1.SMOOTH_QUAD_TO]=2,_a$1[SVGPathData$1.CURVE_TO]=6,_a$1[SVGPathData$1.SMOOTH_CURVE_TO]=4,_a$1[SVGPathData$1.ARC]=7,_a$1);

    class Edge$$1 extends Transformable {
        constructor(curve, a, b, aT, bT, flippedOf, name) {
            super();
            this.curve = curve;
            this.a = a;
            this.b = b;
            this.aT = aT;
            this.bT = bT;
            this.flippedOf = flippedOf;
            this.name = name;
            assertNumbers(aT, bT);
            assert(!eq(aT, bT));
            assertVectors(a, b);
            assertf(() => curve instanceof Curve$$1, curve);
            assertf(() => !curve.isValidT || (curve.isValidT(aT) && curve.isValidT(bT)), aT, bT, curve);
            //if (curve instanceof PICurve) {
            //    assertf(() => curve.at(aT).to(a).length() < 0.1, ''+curve.at(aT)+a)
            //    assertf(() => curve.at(bT).to(b).length() < 0.1, '' + curve.at(bT) + b)
            //} else {
            assertf(() => curve.at(aT).like(a), () => '' + curve.at(aT) + a + ' aT should have been ' + curve.pointT(a));
            assertf(() => curve.at(bT).like(b), () => '' + curve.at(bT) + b + ' bT should have been ' + curve.pointT(b));
            //}
            assertf(() => fuzzyBetween(aT, curve.tMin, curve.tMax), aT, curve.tMin, curve.tMax);
            assertf(() => fuzzyBetween(bT, curve.tMin, curve.tMax), bT, curve.tMin, curve.tMax);
            this.aT = clamp(aT, curve.tMin, curve.tMax);
            this.bT = clamp(bT, curve.tMin, curve.tMax);
            this.reversed = this.aT > this.bT;
        }
        get minT() {
            return Math.min(this.aT, this.bT);
        }
        get maxT() {
            return Math.max(this.aT, this.bT);
        }
        static forCurveAndTs(curve, aT = curve.tMin, bT = curve.tMax) {
            return Edge$$1.create(curve, curve.at(aT), curve.at(bT), aT, bT, undefined, aT < bT ? curve.tangentAt(aT) : curve.tangentAt(aT).negated(), aT < bT ? curve.tangentAt(bT) : curve.tangentAt(bT).negated());
        }
        static create(curve, a, b, aT, bT, flippedOf, aDir, bDir, name) {
            if (curve instanceof L3$$1) {
                return new StraightEdge$$1(curve, a, b, aT, bT, flippedOf, name);
            }
            else {
                return new PCurveEdge$$1(curve, a, b, aT, bT, flippedOf, aDir, bDir, name);
            }
        }
        static isLoop(loop) {
            return loop.every((edge, i) => edge.b.like(loop[(i + 1) % loop.length].a));
        }
        static edgesIntersect(e1, e2) {
            // TODO: still getting some NaNs here..
            assertNumbers(e1.curve.hlol, e2.curve.hlol);
            assertInst(Edge$$1, e1, e2);
            if (e1.curve.hlol < e2.curve.hlol) {
                [e2, e1] = [e1, e2];
            }
            const sts = e1.curve.isInfosWithCurve(e2.curve);
            if (sts.some(info => isNaN(info.tThis) || isNaN(info.tOther))) {
                console.log(e1.sce);
                console.log(e2.sce);
                assert(false);
            }
            return sts.some(
            /// (  e1.aT < tThis < e1.bT  )  &&  (  e2.aT < tOther < e2.bT  )
            ({ tThis, tOther }) => {
                return e1.tValueInside(tThis) && e2.tValueInside(tOther);
            });
        }
        static assertLoop(edges) {
            edges.forEach((edge, i) => {
                const j = (i + 1) % edges.length;
                assert(edge.b.like(edges[j].a), `edges[${i}].b != edges[${j}].a (${edges[i].b.sce} != ${edges[j].a.sce})`);
            });
        }
        static ngon(n = 3, radius = 1) {
            return StraightEdge$$1.chain(arrayFromFunction(n, i => V3.polar(radius, TAU * i / n)));
        }
        static star(pointCount = 5, r0 = 1, r1 = 0.5) {
            const vertices = arrayFromFunction(pointCount * 2, i => V3.polar(0 == i % 2 ? r0 : r1, TAU * i / pointCount / 2));
            return StraightEdge$$1.chain(vertices);
        }
        static reversePath(path, doReverse = true) {
            return doReverse ? arrayFromFunction(path.length, i => path[path.length - 1 - i].flipped()) : path;
        }
        /**
         * Create an axis-aligned rectangle of edges on the XY-plane with the bottom-left corner on the origin.
         * @param width
         * @param height
         */
        static rect(width = 1, height = width) {
            const vertices = [new V3(0, 0, 0), new V3(width, 0, 0), new V3(width, height, 0), new V3(0, height, 0)];
            return StraightEdge$$1.chain(vertices);
        }
        static reuleaux(n = 3, radius = 1) {
            assert(3 <= n);
            assert(1 == n % 2);
            const corners = arrayFromFunction(n, i => V3.polar(radius, TAU * i / n));
            return arrayFromFunction(n, i => {
                const aI = (i + floor$1(n / 2)) % n, bI = (i + ceil(n / 2)) % n;
                const a = corners[aI], b = corners[bI];
                const center = corners[i];
                const f1 = center.to(a), curve = new EllipseCurve$$1(center, f1, V3.Z.cross(f1));
                return Edge$$1.create(curve, a, b, 0, curve.pointT(b), undefined, V3.Z.cross(f1), V3.Z.cross(center.to(b)));
            });
        }
        static round(edges, radius) {
            if (eq0(radius)) {
                return edges;
            }
            const corners = edges.map((edge, i) => {
                const j = (i + 1) % edges.length, nextEdge = edges[j];
                if (!edge.b.like(nextEdge.a))
                    return undefined;
                const angleToNext = edge.bDir.angleTo(nextEdge.aDir);
                const c1 = edge.curve, c2 = nextEdge.curve;
                if (c1 instanceof L3$$1 && c2 instanceof L3$$1) {
                    const normal = c1.dir1.cross(c2.dir1);
                    if (eq0(angleToNext))
                        return undefined;
                    const l1inside = normal.cross(c1.dir1), l2inside = normal.cross(c2.dir1);
                    const l1offset = c1.transform(M4.translate(l1inside.toLength(radius)));
                    const l2offset = c2.transform(M4.translate(l2inside.toLength(radius)));
                    const center = l1offset.isInfoWithLine(l2offset);
                    if (!center)
                        throw new Error('tangential curves');
                    const cornerA = center.plus(l1inside.toLength(-radius));
                    const cornerB = center.plus(l2inside.toLength(-radius));
                    const f1 = l1inside.toLength(-radius);
                    const curve = new EllipseCurve$$1(center, f1, normal.cross(f1).toLength(radius));
                    const cornerEdge = Edge$$1.create(curve, cornerA, cornerB, 0, curve.pointT(cornerB), undefined, c1.dir1, c2.dir1);
                    return cornerEdge;
                }
                else {
                    return Edge$$1.arbitraryCorner(edge, nextEdge, radius);
                }
            });
            const result = edges.flatMap((edge, i) => {
                const h = (i + edges.length - 1) % edges.length;
                const prevCorner = corners[h], nextCorner = corners[i];
                if (!prevCorner && !nextCorner) {
                    return edge;
                }
                const [aT, a, aDir] = !prevCorner
                    ? [edge.aT, edge.a, edge.aDir]
                    : [edge.curve.pointT(prevCorner.b), prevCorner.b, prevCorner.bDir];
                const [bT, b, bDir] = !nextCorner
                    ? [edge.bT, edge.b, edge.bDir]
                    : [edge.curve.pointT(nextCorner.a), nextCorner.a, nextCorner.aDir];
                const newEdge = Edge$$1.create(edge.curve, a, b, aT, bT, undefined, aDir, bDir);
                return !nextCorner ? newEdge : [newEdge, nextCorner];
            });
            return result;
        }
        static arbitraryCorner(e1, e2, radius) {
            const c1 = e1.curve, c2 = e2.curve;
            function f([t1, t2]) {
                const p1 = c1.at(t1), p2 = c2.at(t2);
                const dp1 = c1.tangentAt(t1), dp2 = c2.tangentAt(t2);
                const virtualPlaneNormal = dp1.cross(dp2);
                const normal1 = virtualPlaneNormal.cross(dp1).unit(), normal2 = virtualPlaneNormal.cross(dp2).unit();
                const dirCross = normal1.cross(normal2);
                if (virtualPlaneNormal.likeO()) {
                    assert(false);
                } // lines parallel
                const p1p2 = p1.to(p2);
                // check if distance is zero (see also L3.distanceToLine)
                if (!eq0(p1p2.dot(virtualPlaneNormal))) {
                    assert(false);
                }
                const dist1 = p1p2.cross(normal2).dot(dirCross) / dirCross.squared();
                const dist2 = p1p2.cross(normal1).dot(dirCross) / dirCross.squared();
                const g1 = p1.plus(normal1.times(dist1));
                const g2 = p2.plus(normal2.times(dist2));
                assert(g1.like(g2));
                return [abs$3(dist1) - radius, abs$3(dist2) - radius];
            }
            const startT1 = e1.bT - radius * sign$2(e1.deltaT()) / e1.bDir.length();
            const startT2 = e2.aT + radius * sign$2(e2.deltaT()) / e2.aDir.length();
            const [t1, t2] = newtonIterate(f, [startT1, startT2]);
            const cornerA = e1.curve.at(t1);
            const cornerB = e2.curve.at(t2);
            const dp1 = c1.tangentAt(t1), dp2 = c2.tangentAt(t2);
            const virtualPlaneNormal = dp1.cross(dp2);
            const normal1 = virtualPlaneNormal.cross(dp1).unit();
            const f1 = normal1.toLength(-radius);
            const center = cornerA.minus(f1);
            const curve = new EllipseCurve$$1(center, f1, virtualPlaneNormal.cross(f1).toLength(radius));
            const cornerEdge = Edge$$1.create(curve, cornerA, cornerB, 0, curve.pointT(cornerB), undefined, c1.tangentAt(t1), c2.tangentAt(t2));
            return cornerEdge;
        }
        static pathFromSVG(pathString) {
            let currentPos = undefined;
            const parsed = new SVGPathData$1(pathString)
                .toAbs()
                .normalizeHVZ()
                .sanitize(NLA_PRECISION)
                .annotateArcs().commands;
            const path = [];
            for (const c of parsed) {
                assert('x' in c && 'y' in c);
                const endPos = new V3(c.x, c.y, 0);
                switch (c.type) {
                    case SVGPathData$1.LINE_TO:
                        path.push(StraightEdge$$1.throughPoints(currentPos, endPos));
                        break;
                    case SVGPathData$1.CURVE_TO: {
                        const c1 = new V3(c.x1, c.y1, 0);
                        const c2 = new V3(c.x2, c.y2, 0);
                        const curve = new BezierCurve$$1(currentPos, c1, c2, endPos, 0, 1);
                        const edge = new PCurveEdge$$1(curve, currentPos, endPos, 0, 1, undefined, curve.tangentAt(0), curve.tangentAt(1));
                        path.push(edge);
                        break;
                    }
                    case SVGPathData$1.QUAD_TO: {
                        const c1 = new V3(c.x1, c.y1, 0);
                        const curve = ParabolaCurve$$1.quadratic(currentPos, c1, endPos).rightAngled();
                        const edge = new PCurveEdge$$1(curve, currentPos, endPos, curve.tMin, curve.tMax, undefined, curve.tangentAt(curve.tMin), curve.tangentAt(curve.tMax));
                        path.push(edge);
                        break;
                    }
                    case SVGPathData$1.ARC: {
                        const phi1 = c.phi1 * DEG, phi2 = c.phi2 * DEG, [phiMin, phiMax] = [phi1, phi2].sort(MINUS);
                        const stops = arrayRange(-3, 4, 1)
                            .map(n => n * PI$4)
                            .filter(stop => phiMin <= stop && stop <= phiMax);
                        const center = V$2(c.cX, c.cY);
                        const f1 = V3.polar(c.rX, c.xRot * DEG);
                        const f2 = V3.polar(c.rY, c.xRot * DEG + Math.PI / 2);
                        const edges = getIntervals(stops, phiMin, phiMax).map(([t1, t2]) => {
                            const deltaT = t2 - t1;
                            const t1_ = mod(t1, TAU);
                            const t2_ = t1_ + deltaT;
                            assert(t1_ >= 0 == t2_ >= 0);
                            const gtPI = t1_ > PI$4 || t2_ > PI$4;
                            const aT = gtPI ? t1_ - PI$4 : t1_;
                            const bT = gtPI ? t2_ - PI$4 : t2_;
                            const curve = new EllipseCurve$$1(center, gtPI ? f1.negated() : f1, gtPI ? f2.negated() : f2);
                            const a = phi1 == t1 ? currentPos : phi2 == t1 ? endPos : curve.at(aT);
                            const b = phi1 == t2 ? currentPos : phi2 == t2 ? endPos : curve.at(bT);
                            return new PCurveEdge$$1(curve, a, b, aT, bT, undefined, curve.tangentAt(aT), curve.tangentAt(bT));
                        });
                        path.push(...(c.phiDelta > 0 ? edges : Edge$$1.reversePath(edges)));
                        break;
                    }
                }
                currentPos = endPos;
            }
            return path;
        }
        toString() {
            return callsce('new ' + this.constructor.name, this.curve, this.a, this.b, this.aT, this.bT, undefined, this.aDir, this.bDir);
        }
        split(t) {
            const p = this.curve.at(t);
            const pDir = this.tangentAt(t);
            return [
                Edge$$1.create(this.curve, this.a, p, this.aT, t, undefined, this.aDir, pDir, this.name + 'left'),
                Edge$$1.create(this.curve, p, this.b, t, this.bT, undefined, pDir, this.bDir, this.name + 'left'),
            ];
        }
        colinearToLine(line) {
            return this.curve instanceof L3$$1 && this.curve.isColinearTo(line);
        }
        tValueInside(t) {
            return this.aT < this.bT ? lt(this.aT, t) && lt(t, this.bT) : lt(this.bT, t) && lt(t, this.aT);
        }
        isValidT(t) {
            return this.aT < this.bT ? le$1(this.aT, t) && le$1(t, this.bT) : le$1(this.bT, t) && le$1(t, this.aT);
        }
        clampedT(t) {
            return this.aT < this.bT ? clamp(t, this.aT, this.bT) : clamp(t, this.bT, this.aT);
        }
        /**
         * this is equals-equals. "isColinearTo" might make more sense but can't be used, because you can't get a
         * consistent hashCode for colinear curves
         * @param obj
         * @returns
         */
        equals(obj) {
            return (this === obj ||
                (this.constructor == obj.constructor &&
                    this.a.equals(obj.a) &&
                    this.b.equals(obj.b) &&
                    this.curve.equals(obj.curve)));
        }
        hashCode() {
            let hashCode$$1 = 0;
            hashCode$$1 = hashCode$$1 * 31 + this.a.hashCode();
            hashCode$$1 = hashCode$$1 * 31 + this.b.hashCode();
            hashCode$$1 = hashCode$$1 * 31 + this.curve.hashCode();
            return hashCode$$1 | 0;
        }
        like(edge) {
            // TODO this breaks on colinear edges,
            // TODO: what, where?
            return (this === edge ||
                (edge instanceof Edge$$1 && this.curve.isColinearTo(edge.curve) && this.a.like(edge.a) && this.b.like(edge.b)));
        }
        isCanon() {
            return !this.reversed;
        }
        getCanon() {
            return this.reversed ? this.flipped() : this;
        }
        overlaps(edge, noback) {
            assert(this.curve.isColinearTo(edge.curve));
            const edgeAT = this.curve.containsPoint(edge.a) && this.curve.pointT(edge.a);
            const edgeBT = this.curve.containsPoint(edge.b) && this.curve.pointT(edge.b);
            if (false === edgeAT && false === edgeBT) {
                return noback ? false : edge.overlaps(this, true);
            }
            return !(le$1(edge.maxT, this.minT) || le$1(this.maxT, edge.minT));
        }
        getAABB() {
            const min = [Infinity, Infinity, Infinity], max = [-Infinity, -Infinity, -Infinity];
            this.curve.roots().forEach((ts, dim) => {
                ts.forEach(t => {
                    if (lt(this.minT, t) && lt(t, this.maxT)) {
                        min[dim] = Math.min(min[dim], this.curve.at(t).e(dim));
                        max[dim] = Math.max(max[dim], this.curve.at(t).e(dim));
                    }
                });
            });
            const aabb = new AABB(V$2(min), V$2(max));
            aabb.addPoint(this.a);
            aabb.addPoint(this.b);
            return aabb;
        }
        length(steps = 1) {
            return this.curve.arcLength(this.minT, this.maxT, steps);
        }
        deltaT() {
            return this.bT - this.aT;
        }
        deltaTSign() {
            return sign$2(this.bT - this.aT);
        }
        atAvgT() {
            return this.curve.at((this.minT + this.maxT) / 2);
        }
        /**
         * Whether two edge loops are equal. Takes into account that two loops need not start with the same edge.
         * @param loop1
         * @param loop2
         */
        static loopsEqual(loop1, loop2) {
            return (loop1.length == loop2.length &&
                arrayRange(0, loop1.length, 1).some(offset => loop1.every((edge, i) => edge.equals(loop2[(offset + i) % loop1.length]))));
        }
    }
    class PCurveEdge$$1 extends Edge$$1 {
        constructor(curve, a, b, aT, bT, flippedOf, aDir, bDir, name) {
            super(curve, a, b, aT, bT, flippedOf, name);
            this.flippedOf = flippedOf;
            this.aDir = aDir;
            this.bDir = bDir;
            assertVectors(aDir, bDir);
            assertf(() => !aDir.likeO(), curve);
            assertf(() => !bDir.likeO(), curve);
            if (!(curve instanceof PICurve$$1)) {
                // TODO
                assertf(() => curve.tangentAt(aT).likeOrReversed(aDir), '' + aT + curve.tangentAt(aT).sce + ' ' + aDir.sce);
                assertf(() => curve.tangentAt(bT).likeOrReversed(bDir), '' + bT + curve.tangentAt(bT).sce + ' ' + bDir.sce);
            }
            assert(this.reversed === this.aDir.dot(curve.tangentAt(aT)) < 0, aT +
                ' ' +
                bT +
                ' ' +
                curve.constructor.name +
                ' ' +
                this.aDir.sce +
                ' ' +
                this.bDir.sce +
                ' ' +
                curve.tangentAt(aT));
            assert(this.reversed === this.bDir.dot(curve.tangentAt(bT)) < 0, aT +
                ' ' +
                bT +
                ' ' +
                curve.constructor.name +
                ' ' +
                this.aDir.sce +
                ' ' +
                this.bDir.sce +
                ' ' +
                curve.tangentAt(aT));
        }
        static forCurveAndTs(curve, aT, bT, name) {
            return new PCurveEdge$$1(curve, curve.at(aT), curve.at(bT), aT, bT, undefined, aT < bT ? curve.tangentAt(aT) : curve.tangentAt(aT).negated(), aT < bT ? curve.tangentAt(bT) : curve.tangentAt(bT).negated(), name);
        }
        toSource() {
            return callsce('new PCurveEdge', this.curve, this.a, this.b, this.aT, this.bT, undefined, this.aDir, this.bDir, this.name);
        }
        getVerticesNo0() {
            return this.curve.calcSegmentPoints(this.aT, this.bT, this.a, this.b, this.reversed, false);
        }
        pointsCount() {
            return this.points().length;
        }
        points() {
            return this.curve.calcSegmentPoints(this.aT, this.bT, this.a, this.b, this.reversed, true);
        }
        edgeISTsWithSurface(surface) {
            return this.curve
                .isTsWithSurface(surface)
                .map(edgeT => snap2(edgeT, this.aT, this.bT))
                .filter(edgeT => this.minT <= edgeT && edgeT <= this.maxT);
        }
        edgeISTsWithPlane(surface) {
            return this.curve
                .isTsWithPlane(surface)
                .map(edgeT => snap2(edgeT, this.aT, this.bT))
                .filter(edgeT => this.minT <= edgeT && edgeT <= this.maxT);
        }
        tangentAt(t) {
            return !this.reversed ? this.curve.tangentAt(t) : this.curve.tangentAt(t).negated();
        }
        flipped() {
            return (this.flippedOf ||
                (this.flippedOf = new PCurveEdge$$1(this.curve, this.b, this.a, this.bT, this.aT, this, this.bDir.negated(), this.aDir.negated(), this.name)));
        }
        transform(m4, desc) {
            return new PCurveEdge$$1(this.curve.transform(m4), m4.transformPoint(this.a), m4.transformPoint(this.b), this.aT, this.bT, undefined, m4.transformVector(this.aDir), m4.transformVector(this.bDir), '' + this.name + desc);
        }
        transform4(m4, desc) {
            const a_ = m4.transformPoint(this.a);
            const b_ = m4.transformPoint(this.b);
            const curve_ = this.curve.transform4(m4);
            return new PCurveEdge$$1(curve_, a_, b_, snap(curve_.pointT(a_), this.aT), snap(curve_.pointT(b_), this.bT), undefined, m4.transformVector(this.aDir), m4.transformVector(this.bDir), '' + this.name + desc);
        }
        isCoEdge(edge) {
            return (this === edge ||
                this === edge.flippedOf ||
                (this.curve.isColinearTo(edge.curve) &&
                    ((this.a.like(edge.a) && this.b.like(edge.b)) || (this.a.like(edge.b) && this.b.like(edge.a)))));
        }
    }
    class StraightEdge$$1 extends Edge$$1 {
        constructor(line, a, b, aT, bT, flippedOf, name) {
            super(line, a, b, aT, bT, flippedOf, name);
            this.flippedOf = flippedOf;
            assertInst(L3$$1, line);
            !flippedOf || assertInst(StraightEdge$$1, flippedOf);
            !name || assertf(() => 'string' === typeof name, name);
            assert(!a.like(b), '!a.like(b)' + a + b); // don't put in super as it will break full ellipse
            this.tangent = this.aT < this.bT ? this.curve.dir1 : this.curve.dir1.negated();
        }
        get aDir() {
            return this.tangent;
        }
        get bDir() {
            return this.tangent;
        }
        static throughPoints(a, b, name) {
            return new StraightEdge$$1(L3$$1.throughPoints(a, b, 0, a.to(b).length()), a, b, 0, a.to(b).length(), undefined, name);
        }
        /**
         * Create a list of StraightEdges from a list of vertices.
         * @param vertices
         * @param closed Whether to connect the first and last vertices. Defaults to true.
         * @returns
         */
        static chain(vertices, closed = true) {
            const vc = vertices.length;
            return arrayFromFunction(closed ? vc : vc - 1, i => StraightEdge$$1.throughPoints(vertices[i], vertices[(i + 1) % vc]));
        }
        toSource() {
            return callsce('new StraightEdge', this.curve, this.a, this.b, this.aT, this.bT);
        }
        getVerticesNo0() {
            return [this.b];
        }
        pointsCount() {
            return 2;
        }
        points() {
            return [this.a, this.b];
        }
        edgeISTsWithPlane(plane) {
            const edgeT = snap2(this.curve.isTWithPlane(plane), this.aT, this.bT);
            return this.minT <= edgeT && edgeT <= this.maxT ? [edgeT] : [];
        }
        edgeISTsWithSurface(surface) {
            if (surface instanceof PlaneSurface$$1) {
                return this.edgeISTsWithPlane(surface.plane);
            }
            else {
                return surface
                    .isTsForLine(this.curve)
                    .map(edgeT => snap2(edgeT, this.aT, this.bT))
                    .filter(edgeT => this.minT <= edgeT && edgeT <= this.maxT);
            }
        }
        tangentAt() {
            return this.tangent;
        }
        flipped() {
            return (this.flippedOf ||
                (this.flippedOf = new StraightEdge$$1(this.curve, this.b, this.a, this.bT, this.aT, this, this.name)));
        }
        transform(m4, desc) {
            const lineDir1TransLength = m4.transformVector2(this.curve.dir1, this.curve.anchor).length();
            const curve = this.curve.transform(m4);
            const a = m4.transformPoint(this.a);
            const b = m4.transformPoint(this.b);
            return new StraightEdge$$1(curve, a, b, m4.isNoProj() ? this.aT * lineDir1TransLength : curve.pointT(a), m4.isNoProj() ? this.bT * lineDir1TransLength : curve.pointT(b), undefined, '' + this.name + desc);
        }
        transform4(m4, desc) {
            const lineDir1TransLength = m4.transformVector2(this.curve.dir1, this.curve.anchor).length();
            const curve = this.curve.transform4(m4);
            const a = m4.transformPoint(this.a);
            const b = m4.transformPoint(this.b);
            return new StraightEdge$$1(curve, a, b, m4.isNoProj() ? this.aT * lineDir1TransLength : curve.pointT(a), m4.isNoProj() ? this.bT * lineDir1TransLength : curve.pointT(b), undefined, '' + this.name + desc);
        }
        isCoEdge(edge) {
            return (this === edge ||
                this === edge.flippedOf ||
                (edge.constructor === StraightEdge$$1 &&
                    ((this.a.like(edge.a) && this.b.like(edge.b)) || (this.a.like(edge.b) && this.b.like(edge.a)))));
        }
        getEdgeT(p) {
            assertVectors(p);
            let edgeT = p.minus(this.curve.anchor).dot(this.curve.dir1);
            if (!eq0(this.curve.at(edgeT).distanceTo(p))) {
                return;
            }
            edgeT = snap2(edgeT, this.aT, this.bT);
            return this.minT <= edgeT && edgeT <= this.maxT ? edgeT : undefined;
        }
    }

    /**
     * Created by aval on 19.04.2017.
     */

    class Face$$1 extends Transformable {
        constructor(surface, contour, holes = [], name, info) {
            super();
            this.surface = surface;
            this.contour = contour;
            this.holes = holes;
            this.name = name;
            this.info = info;
            this.aabb = undefined;
            //assert(name)
            Edge$$1.assertLoop(contour);
            assert(contour.every(f => f instanceof Edge$$1), () => 'contour.every(f => f instanceof Edge)' + contour);
            // contour.forEach(e => !surface.containsCurve(e.curve) &&
            // console.log('FAIL:'+surface.distanceToPoint(e.curve.anchor)))
            //contour.forEach(e => {
            //	assert(surface.containsCurve(e.curve), 'edge not in surface ' + e + surface)
            //})
            //assert(surface.edgeLoopCCW(contour), surface.toString() + contour.join('\n'))
            holes && holes.forEach(hole => Edge$$1.assertLoop(hole));
            holes && holes.forEach(hole => assert(!surface.edgeLoopCCW(hole)));
            assert(!holes || holes.constructor == Array, holes && holes.toString());
            this.allEdges = Array.prototype.concat.apply(this.contour, this.holes);
        }
        static assembleFacesFromLoops(loops, surface, faceConstructor) {
            function placeRecursively(newLoopInfo, loopInfos) {
                if (loopInfos.length == 0) {
                    loopInfos.push(newLoopInfo);
                }
                else {
                    const subLoopInfo = loopInfos.find(loopInfo => BRep$$1.loop1ContainsLoop2(loopInfo.loop, loopInfo.ccw, newLoopInfo.loop, newLoopInfo.ccw, surface));
                    if (subLoopInfo) {
                        placeRecursively(newLoopInfo, subLoopInfo.subloops);
                    }
                    else {
                        // newLoopInfo isnt contained by any other subLoopInfo
                        for (let i = loopInfos.length; --i >= 0;) {
                            const subLoopInfo = loopInfos[i];
                            //console.log('cheving subLoopInfo', surface.loopContainsPoint(newLoopInfo.edges,
                            // subLoopInfo.edges[0].a))
                            if (BRep$$1.loop1ContainsLoop2(newLoopInfo.loop, newLoopInfo.ccw, subLoopInfo.loop, subLoopInfo.ccw, surface)) {
                                newLoopInfo.subloops.push(subLoopInfo);
                                loopInfos.splice(i, 1); // remove it
                            }
                        }
                        loopInfos.push(newLoopInfo);
                    }
                }
            }
            function newFacesRecursive(loopInfo) {
                newFaces.push(new faceConstructor(surface, loopInfo.ccw ? loopInfo.loop : Edge$$1.reversePath(loopInfo.loop), loopInfo.subloops.map(sl => (sl.ccw ? Edge$$1.reversePath(sl.loop) : sl.loop))));
                loopInfo.subloops.forEach(sl => sl.subloops.forEach(sl2 => newFacesRecursive(sl2)));
            }
            const newFaces = [];
            const topLevelLoops = [];
            loops.forEach(loop => placeRecursively({
                loop: loop,
                ccw: surface.edgeLoopCCW(loop),
                subloops: [],
            }, topLevelLoops));
            topLevelLoops.forEach(tll => newFacesRecursive(tll));
            return newFaces;
        }
        //fromLoops(loops: Edge[][], surface: Surface) {
        //	type LoopInfo = {loop: Edge[], ccw: boolean, subloops: LoopInfo[]}
        //	function placeRecursively(newLoopInfo: LoopInfo, loopInfos: LoopInfo[]) {
        //		if (loopInfos.length == 0) {
        //			loopInfos.push(newLoopInfo)
        //		} else {
        //			const subLoopInfo = loopInfos.find(loopInfo => BRep.loop1ContainsLoop2(loopInfo.loop, loopInfo.ccw,
        // newLoopInfo.loop, newLoopInfo.ccw, surface)) if (subLoopInfo) { placeRecursively(newLoopInfo,
        // subLoopInfo.subloops) } else { // newLoopInfo isnt contained by any other subLoopInfo for (let i =
        // loopInfos.length; --i >= 0;) { const subLoopInfo = loopInfos[i] //console.log('cheving subLoopInfo',
        // surface.loopContainsPoint(newLoopInfo.edges, subLoopInfo.edges[0].a)) if
        // (BRep.loop1ContainsLoop2(newLoopInfo.loop, subLoopInfo.loop, surface)) { newLoopInfo.subloops.push(subLoopInfo)
        // loopInfos.splice(i, 1) // remove it } } loopInfos.push(newLoopInfo) } } }  function newFacesRecursive(loopInfo:
        // LoopInfo): void { // CW loops can be top level, if they are holes in the original face not contained in the new
        // face if (loopInfo.ccw) { if (loopInfo.subloops.every(sl => !sl.ccw)) { const newFace = new
        // faceConstructor(surface, loopInfo.loop, loopInfo.subloops.map(sl => sl.loop)) newFaces.push(newFace)
        // loopInfo.subloops.forEach(sl => sl.subloops.forEach(slsl => slsl.ccw && newFacesRecursive(slsl))) } else {
        // loopInfo.subloops.forEach(sl => sl.ccw && newFacesRecursive(sl)) } } }  const newFaces: Face[] = [] const
        // topLevelLoops:LoopInfo[] = [] loops.forEach(loop => placeRecursively({loop: loop, ccw:
        // surface.edgeLoopCCW(loop), subloops: []}, topLevelLoops)) topLevelLoops.forEach(tll => newFacesRecursive(tll))
        // return newFaces }
        static create(surface, faceEdges, holes, faceName, info) {
            return surface instanceof PlaneSurface$$1
                ? new PlaneFace$$1(surface, faceEdges, holes, faceName, info)
                : new RotationFace$$1(surface, faceEdges, holes, faceName, info);
        }
        intersectFace(face2, thisBrep, face2Brep, faceMap, thisEdgePoints, otherEdgePoints, checkedPairs) {
            //thisEdgePoints = {
            //   get(key) {
            //       return _thisEdgePoints.get(key)
            //    },
            //    set(key, value) {
            //       assert(thisBrep.edgeFaces.get(key))
            //        _thisEdgePoints.set(key, value)
            //    }
            //}
            function hasPair(a, b) {
                return checkedPairs.has(new Pair(a, b));
            }
            function addPair(a, b) {
                return checkedPairs.add(new Pair(a, b));
            }
            /**
             * @param newEdge generated segment
             * @param col1 if newEdge is colinear to an edge of this, the edge in question
             * @param col2 same for face2
             * @return whether new edge was added.
             */
            function handleNewEdge(newEdge, col1, col2) {
                if (!col1 && !col2) {
                    let correctDir = face.surface.normalP(newEdge.a).cross(face2.surface.normalP(newEdge.a));
                    if (correctDir.likeO()) {
                        const t = lerp(newEdge.aT, newEdge.bT, 1 / GOLDEN_RATIO), p = newEdge.curve.at(t);
                        correctDir = face.surface.normalP(p).cross(face2.surface.normalP(p));
                    }
                    if (!correctDir.likeO()) {
                        if (correctDir.dot(newEdge.aDir) < 0) {
                            newEdge = newEdge.flipped();
                        }
                        mapPush(faceMap, face, newEdge);
                        mapPush(faceMap, face2, newEdge.flipped());
                    }
                    else {
                        const p = newEdge.a;
                        const plane = P3$$1.normalOnAnchor(newEdge.aDir, p);
                        const up = face.surface.normalP(p);
                        const sameDir = up.dot(face2.surface.normalP(p)) > 0;
                        const canonDir = plane.normal1.cross(up);
                        const curve = face.surface.isCurvesWithPlane(plane)[0], curveT = curve.pointT(p), curveDir = sign$2(canonDir.dot(curve.tangentAt(curveT)));
                        const curve2 = face2.surface.isCurvesWithPlane(plane)[0], curve2T = curve2.pointT(p), curve2Dir = sign$2(canonDir.dot(curve.tangentAt(curve2T)));
                        const foo = curve.diff(curveT, EPS$$1 * curveDir).dot(up);
                        const foo2 = curve2.diff(curve2T, EPS$$1 * curve2Dir).dot(up);
                        if (foo2 < foo) {
                            mapPush(faceMap, face2, sameDir ? newEdge.flipped() : newEdge);
                        }
                        if (up.dot(face2.surface.normalP(p)) < 0 == foo2 < foo) {
                            mapPush(faceMap, face, newEdge.flipped());
                        }
                        const bar = curve.diff(curveT, EPS$$1 * curveDir).dot(up);
                        const bar2 = curve2.diff(curve2T, EPS$$1 * curve2Dir).dot(up);
                        if (bar2 < bar) {
                            mapPush(faceMap, face2, sameDir ? newEdge : newEdge.flipped());
                        }
                        if (sameDir != bar2 < bar) {
                            mapPush(faceMap, face, newEdge);
                        }
                    }
                    return true;
                }
                function handleEdgeInFace(col1, col2, face, face2, thisBrep, face2Brep, coplanarSameIsInside, has, add) {
                    if (col1 && !col2) {
                        if (hasPair(col1.getCanon(), face2))
                            return false;
                        //add(col1.getCanon(), face2)
                        const surface2 = face2.surface;
                        // NB: a new edge is inserted even though it may be the same as an old one
                        // however it indicates that it intersects the other volume here, i.e. the old edge cannot
                        // be counted as 'inside' for purposes of reconstitution
                        thisBrep.edgeFaces.get(col1.getCanon()).forEach(faceInfo => {
                            //const dot = snap0(surface2.normal1.dot(faceInfo.inside))
                            //if (dot == 0 ? !coplanarSameIsInside : dot < 0) {
                            const pointsInsideFace = fff$$1(faceInfo, face2.surface);
                            const edgeInside = pointsInsideFace == INSIDE$$1 || (!coplanarSameIsInside && pointsInsideFace == COPLANAR_SAME$$1);
                            const pushEdge = faceInfo.edge
                                .tangentAt(faceInfo.edge.curve.pointT(newEdge.a))
                                .like(newEdge.aDir)
                                ? newEdge
                                : newEdge.flipped();
                            console.log(newEdge.sce);
                            assert(faceInfo.edge.tangentAt(faceInfo.edge.curve.pointT(pushEdge.a)).like(pushEdge.aDir));
                            edgeInside && mapPush(faceMap, faceInfo.face, pushEdge);
                        });
                        const surface2NormalAtNewEdgeA = surface2.normalP(newEdge.a);
                        const newEdgeInside = surface2NormalAtNewEdgeA.cross(newEdge.aDir);
                        const sVEF1 = splitsVolumeEnclosingFacesP$$1(thisBrep, col1.getCanon(), newEdge.a, newEdgeInside, surface2NormalAtNewEdgeA);
                        let addNewEdge, addNewEdgeFlipped;
                        if ((addNewEdge = sVEF1 == INSIDE$$1 || (coplanarSameIsInside && sVEF1 == COPLANAR_SAME$$1))) {
                            mapPush(faceMap, face2, newEdge);
                        }
                        const sVEF2 = splitsVolumeEnclosingFacesP$$1(thisBrep, col1.getCanon(), newEdge.a, newEdgeInside.negated(), surface2NormalAtNewEdgeA);
                        if ((addNewEdgeFlipped = sVEF2 == INSIDE$$1 || (coplanarSameIsInside && sVEF2 == COPLANAR_SAME$$1))) {
                            mapPush(faceMap, face2, newEdge.flipped());
                        }
                        if (addNewEdge ||
                            addNewEdgeFlipped ||
                            (sVEF1 == COPLANAR_SAME$$1 && sVEF2 == INSIDE$$1) ||
                            (sVEF2 == COPLANAR_SAME$$1 && sVEF1 == INSIDE$$1)) {
                            return true;
                        }
                    }
                    return false;
                }
                const c1 = handleEdgeInFace(col1, col2, face, face2, thisBrep, face2Brep, false, hasPair, addPair);
                const c2 = handleEdgeInFace(col2, col1, face2, face, face2Brep, thisBrep, true, (a, b) => hasPair(b, a), (a, b) => addPair(b, a));
                if (c1 || c2)
                    return true;
                if (col1 && col2) {
                    if (hasPair(col1.getCanon(), col2.getCanon()))
                        return false;
                    addPair(col1.getCanon(), col2.getCanon());
                    function handleColinearEdgeFaces(col1, col2, thisBrep, face2Brep, coplanarSameIsInside, thisEdgePoints, has, add) {
                        // not entirely sure for what i had the dirInsides in?
                        //const aDirNegatedInside = (newEdge.a.like(col2.a) || newEdge.a.like(col2.b)) &&
                        // splitsVolumeEnclosingCone(face2Brep, newEdge.a, newEdge.aDir.negated()) == INSIDE const
                        // bDirInside = (newEdge.b.like(col2.a) || newEdge.b.like(col2.b)) &&
                        // splitsVolumeEnclosingCone(face2Brep, newEdge.b, newEdge.bDir) == INSIDE
                        for (const faceInfo of thisBrep.edgeFaces.get(col1.getCanon())) {
                            const sVEF = splitsVolumeEnclosingFaces$$1(face2Brep, col2.getCanon(), faceInfo.inside, faceInfo.normalAtCanonA);
                            const edgeInside = sVEF == INSIDE$$1 || (coplanarSameIsInside && sVEF == COPLANAR_SAME$$1);
                            const pushEdge = faceInfo.edge.aDir.like(newEdge.aDir) ? newEdge : newEdge.flipped();
                            if (edgeInside) {
                                mapPush(faceMap, faceInfo.face, pushEdge);
                                const aT = col1.getCanon().curve.pointT(newEdge.a);
                                if (!eq(aT, col1.aT) && !eq(aT, col1.bT)) {
                                    // newEdge.a is in center of col1
                                    if (splitsVolumeEnclosingCone2$$1(face2Brep, newEdge.a, newEdge.curve, newEdge.aT, -Math.sign(newEdge.deltaT())) == INSIDE$$1) {
                                        mapPush(thisEdgePoints, col1.getCanon(), {
                                            p: newEdge.a,
                                            edgeT: aT,
                                        });
                                    }
                                }
                                const bT = col1.getCanon().curve.pointT(newEdge.b);
                                if (!eq(bT, col1.aT) && !eq(bT, col1.bT)) {
                                    if (splitsVolumeEnclosingCone2$$1(face2Brep, newEdge.b, newEdge.curve, newEdge.bT, Math.sign(newEdge.deltaT())) == INSIDE$$1) {
                                        mapPush(thisEdgePoints, col1.getCanon(), {
                                            p: newEdge.b,
                                            edgeT: bT,
                                        });
                                    }
                                }
                            }
                        }
                    }
                    handleColinearEdgeFaces(col1, col2, thisBrep, face2Brep, true, thisEdgePoints, hasPair, addPair);
                    handleColinearEdgeFaces(col2, col1, face2Brep, thisBrep, false, otherEdgePoints, (a, b) => hasPair(b, a), (a, b) => addPair(b, a));
                    return false;
                }
                return false;
            }
            // what needs to be generated: new edges on face
            // points on edges where they are cut by faces so that sub edges will be generated for loops
            // points on ends of edges where the edge will be an edge in the new volume where it goes from A to B
            //         you don't want those to be marked as 'inside', otherwise invalid faces will be added
            // if a face cuts a corner, nothing needs to be done, as that alone does not limit what adjacent faces will be
            function handleEndPoint(a, b, newEdge) {
                // ends in the middle of b's face
                if (a && !b) {
                    if (!a.colinear && a.edgeT != a.edge.aT && a.edgeT != a.edge.bT) {
                        mapPush(thisEdgePoints, a.edge.getCanon(), a);
                        assert(a.edge.isValidT(a.edgeT));
                    }
                    // else colinear segment ends in middle of other face, do nothing
                }
                // ends in the middle of a's face
                if (b && !a) {
                    if (!b.colinear && b.edgeT != b.edge.aT && b.edgeT != b.edge.bT) {
                        mapPush(otherEdgePoints, b.edge.getCanon(), b);
                        assert(b.edge.isValidT(b.edgeT));
                    }
                    // else colinear segment ends in middle of other face, do nothing
                }
                if (a && b) {
                    assert(a.colinear || b.colinear || eq(a.t, b.t));
                    // if a or b is colinear the correct points will already have been added to the edge by handleNewEdge
                    // segment starts/ends on edge/edge intersection
                    function handleAB(a, b, face, face2, thisPlane, face2Plane, thisBrep, face2Brep, first, thisEdgePoints) {
                        if (!a.colinear && a.edgeT != a.edge.aT && a.edgeT != a.edge.bT) {
                            //if (!hasPair(a.edge.getCanon(), b.edge.getCanon())) {
                            addPair(a.edge.getCanon(), b.edge.getCanon());
                            // ends on a, on colinear segment b bT != a.edge.bT &&
                            // b can be colinear, so edgeT == aT is possible
                            if (a.p.like(b.edge.a) || a.p.like(b.edge.b)) {
                                const corner = a.p.like(b.edge.a) ? b.edge.a : b.edge.b;
                                // face2brep corner on edge
                                const sVEC1 = splitsVolumeEnclosingCone2$$1(face2Brep, corner, a.edge.curve, a.edgeT, 1);
                                const sVEC2 = splitsVolumeEnclosingCone2$$1(face2Brep, corner, a.edge.curve, a.edgeT, -1);
                                // if either of these return ALONG_EDGE_OR_PLANE, then the breps share a colinear edge
                                if (INSIDE$$1 == sVEC1 || INSIDE$$1 == sVEC2) {
                                    mapPush(thisEdgePoints, a.edge.getCanon(), a);
                                    assert(a.edge.isValidT(a.edgeT));
                                }
                            }
                            else {
                                // edge / edge center intersection
                                // todo: is this even necessary considering we add edges anyway? i think so...
                                // const testVector =
                                // a.edge.tangentAt(a.edgeT).rejectedFrom(b.edge.tangentAt(b.edge.curve.pointT(a.p)))
                                // assert(!testVector.likeO())
                                const sVEF1 = splitsVolumeEnclosingFacesP2$$1(face2Brep, b.edge.getCanon(), a.p, a.edge.curve, a.edgeT, 1, thisPlane.normalP(a.p));
                                const sVEF2 = splitsVolumeEnclosingFacesP2$$1(face2Brep, b.edge.getCanon(), a.p, a.edge.curve, a.edgeT, -1, thisPlane.normalP(a.p));
                                if (INSIDE$$1 == sVEF1 ||
                                    (first && COPLANAR_SAME$$1 == sVEF1) ||
                                    INSIDE$$1 == sVEF2 ||
                                    (first && COPLANAR_SAME$$1 == sVEF2)) {
                                    mapPush(thisEdgePoints, a.edge.getCanon(), a);
                                    assert(a.edge.isValidT(a.edgeT));
                                }
                            }
                            //}
                        }
                    }
                    handleAB(a, b, face, face2, surface, surface2, thisBrep, face2Brep, true, thisEdgePoints);
                    handleAB(b, a, face2, face, surface2, surface, face2Brep, thisBrep, false, otherEdgePoints);
                }
            }
            assertInst(Face$$1, face2);
            const face = this;
            const surface = face.surface, surface2 = face2.surface;
            if (!this.getAABB().touchesAABBfuzzy(face2.getAABB())) {
                return;
            }
            if (surface.isCoplanarTo(surface2)) {
                return;
            }
            const isCurves = surface.isCurvesWithSurface(surface2);
            if (0 == isCurves.length) {
                return;
            }
            for (const isCurve of isCurves) {
                assert(surface.containsCurve(isCurve));
                assert(surface2.containsCurve(isCurve));
            }
            for (let isCurveIndex = 0; isCurveIndex < isCurves.length; isCurveIndex++) {
                // get intersections of newCurve with other edges of face and face2
                const isCurve = isCurves[isCurveIndex];
                const ps1 = face.edgeISPsWithSurface(isCurve, face2.surface);
                const ps2 = face2.edgeISPsWithSurface(isCurve, face.surface);
                // for non-endless curves, e.g. ellipses, the intersections of the faces can be non-zero, even if one of
                // the faces doesn't register any points on the curve. For example, if a cylinder is cut entirely by a
                // plane face (all its edges around the cylinder), then the face will contain the entire curve and
                // 'ps' for the plane face will be empty
                // TODO: behavior when curves touch face?
                // !! start in does depend on insideDir... TODO
                assertf(() => 0 == ps1.length || !eq0(ps1[0].insideDir.dot(isCurve.tangentAt(ps1[0].t))), () => ps1[0].insideDir.dot(isCurve.tangentAt(ps1[0].t)));
                assertf(() => 0 == ps2.length || !eq0(ps2[0].insideDir.dot(isCurve.tangentAt(ps2[0].t))), () => ps2[0].insideDir.dot(isCurve.tangentAt(ps2[0].t)));
                function startsInside(ps, face) {
                    if (0 == ps.length) {
                        return isFinite(isCurve.tMin) && face.containsPoint2(isCurve.at(isCurve.tMin)) == PointVsFace$$1.INSIDE;
                    }
                    else {
                        return ps[0].insideDir.dot(isCurve.tangentAt(ps[0].t)) < 0;
                    }
                }
                // they can't both be empty currently
                // they can't both start 'inside'
                let in1 = startsInside(ps1, face);
                let in2 = startsInside(ps2, face2);
                if ((0 == ps1.length && !in1) || (0 == ps2.length && !in2)) {
                    continue;
                }
                //assert(!in1 || !in2)
                let col1, col2;
                let i = 0, j = 0, last;
                let startP = in1 && in2 ? isCurve.at(isCurve.tMin) : undefined, startDir, startT = isCurve.tMin, startA, startB;
                while (i < ps1.length || j < ps2.length) {
                    assert(i <= ps1.length);
                    assert(j <= ps2.length);
                    const a = ps1[i], b = ps2[j];
                    assert(a || b);
                    if (j == ps2.length || (i < ps1.length && lt(a.t, b.t))) {
                        last = a;
                        in1 = !in1;
                        a.used = true;
                        col1 = a.colinear ? a : undefined;
                        i++;
                    }
                    else if (i == ps1.length || gt(a.t, b.t)) {
                        last = b;
                        b.used = true;
                        in2 = !in2;
                        col2 = b.colinear ? b : undefined;
                        j++;
                    }
                    else {
                        last = a;
                        a.used = true;
                        b.used = true;
                        in1 = !in1;
                        in2 = !in2;
                        //if (in1 == in2) {
                        col1 = a.colinear ? a : undefined;
                        col2 = b.colinear ? b : undefined;
                        //}
                        i++;
                        j++;
                    }
                    if (startP && !(in1 && in2)) {
                        // segment end
                        startDir = isCurve.tangentAt(startT);
                        if (eq(startT, last.t)) {
                            startP = undefined;
                            continue;
                        }
                        assert(lt(startT, last.t));
                        startT > last.t && (startDir = startDir.negated());
                        let endDir = isCurve.tangentAt(last.t);
                        startT > last.t && (endDir = endDir.negated());
                        const newEdge = Edge$$1.create(isCurve, startP, last.p, startT, last.t, undefined, startDir, endDir, 'genseg' + getGlobalId$$1());
                        startP = undefined;
                        if (handleNewEdge(newEdge, col1 && col1.edge, col2 && col2.edge)) {
                            handleEndPoint(startA || col1, startB || col2, newEdge);
                            handleEndPoint((a && a.used && a) || col1, (b && b.used && b) || col2, newEdge);
                        }
                    }
                    else if (in1 && in2) {
                        // new segment just started
                        startP = last.p;
                        startDir = last.insideDir;
                        startT = last.t;
                        startA = a && a.used ? a : undefined;
                        startB = b && b.used ? b : undefined;
                    }
                }
                if (in1 && in2 && startT !== isCurve.tMax) {
                    const endT = isCurve.tMax;
                    startDir = isCurve.tangentAt(startT);
                    startT > endT && (startDir = startDir.negated());
                    let endDir = isCurve.tangentAt(endT);
                    startT > endT && (endDir = endDir.negated());
                    const newEdge = Edge$$1.create(isCurve, startP, isCurve.at(endT), startT, endT, undefined, startDir, endDir, 'genseg' + getGlobalId$$1());
                    if (handleNewEdge(newEdge, col1 && col1.edge, col2 && col2.edge)) {
                        handleEndPoint(startA || col1, startB || col2, newEdge);
                    }
                }
            }
            face.getAllEdges().forEach(edge => {
                checkedPairs.add(new Pair(edge.getCanon(), face2));
            });
            face2.getAllEdges().forEach(edge => {
                checkedPairs.add(new Pair(edge.getCanon(), face));
            });
        }
        edgeISPsWithSurface(isCurve, surface2) {
            const face = this;
            const surface = face.surface;
            const loops = face.holes.concat([face.contour]);
            const ps = [];
            for (const loop of loops) {
                const colinearEdges = loop.map(edge => edge.curve.isColinearTo(isCurve));
                //const colinearSides = loop.map((edge, edgeIndex) => -1 != colinearEdges[edgeIndex]
                //            && -sign(isCurves[colinearEdges[edgeIndex]].tangentAt(edge.aT).dot(edge.aDir)))
                for (let edgeIndex = 0; edgeIndex < loop.length; edgeIndex++) {
                    const edge = loop[edgeIndex];
                    const nextEdgeIndex = (edgeIndex + 1) % loop.length, nextEdge = loop[nextEdgeIndex];
                    //console.log(edge.toSource()) {p:V3(2, -2.102, 0),
                    if (colinearEdges[edgeIndex]) {
                        if (isCurve.containsPoint(edge.a)) {
                            const prevEdgeIndex = (edgeIndex - 1 + loop.length) % loop.length, prevEdge = loop[prevEdgeIndex];
                            const curveAT = isCurve.pointT(edge.a);
                            const colinearOutA = edge.aDir.cross(surface.normalP(edge.a));
                            if (!colinearEdges[prevEdgeIndex] &&
                                dotCurve2$$1(prevEdge.curve, prevEdge.bT, colinearOutA, -sign$2(prevEdge.deltaT())) > 0) {
                                ps.push({
                                    p: prevEdge.b,
                                    insideDir: edge.aDir.negated(),
                                    t: curveAT,
                                    edge: prevEdge,
                                    edgeT: prevEdge.bT,
                                    colinear: false,
                                });
                            }
                            ps.push({
                                p: edge.a,
                                insideDir: edge.aDir,
                                t: curveAT,
                                edge: edge,
                                edgeT: edge.aT,
                                colinear: true,
                            });
                        }
                        if (isCurve.containsPoint(edge.b)) {
                            const curveBT = isCurve.pointT(edge.b);
                            const colinearOutB = edge.bDir.cross(surface.normalP(edge.b));
                            if (!colinearEdges[nextEdgeIndex] &&
                                dotCurve2$$1(nextEdge.curve, nextEdge.aT, colinearOutB, sign$2(nextEdge.deltaT())) > 0) {
                                ps.push({
                                    p: edge.b,
                                    insideDir: edge.bDir,
                                    t: curveBT,
                                    edge: nextEdge,
                                    edgeT: nextEdge.aT,
                                    colinear: false,
                                });
                            }
                            ps.push({
                                p: edge.b,
                                insideDir: edge.bDir.negated(),
                                t: curveBT,
                                edge: edge,
                                edgeT: edge.bT,
                                colinear: true,
                            });
                        }
                    }
                    else {
                        const edgeTs = edge.edgeISTsWithSurface(surface2);
                        for (const edgeT of edgeTs) {
                            const p = edge.curve.at(edgeT);
                            if (!isCurve.containsPoint(p))
                                continue;
                            const curveT = isCurve.pointT(p);
                            assert(!isNaN(curveT));
                            const insideDir = edge
                                .tangentAt(edgeT)
                                .cross(surface.normalP(p))
                                .negated();
                            const isTangent = isCurve.tangentAt(curveT);
                            //if(!eq0(insideDir.dot(isTangent))) {
                            // Edge.edgeISTsWithSurface returns snapped values, so comparison with == is ok:
                            if (edgeT == edge.bT) {
                                // endpoint lies on intersection line
                                if (!colinearEdges[nextEdgeIndex]) {
                                    if (!eq(curveT, isCurve.tMax)) {
                                        const pointsToInside = this.pointsToInside3(edge.b, isCurve, curveT, 1);
                                        assert(pointsToInside != PointVsFace$$1.ON_EDGE);
                                        if (PointVsFace$$1.INSIDE == pointsToInside) {
                                            ps.push({
                                                p: edge.b,
                                                insideDir: isTangent,
                                                t: curveT,
                                                edge: edge,
                                                edgeT: edge.bT,
                                                colinear: false,
                                            });
                                        }
                                    }
                                    if (!eq(curveT, isCurve.tMin)) {
                                        const pointsToInside = this.pointsToInside3(edge.b, isCurve, curveT, -1);
                                        assert(pointsToInside != PointVsFace$$1.ON_EDGE);
                                        if (PointVsFace$$1.INSIDE == pointsToInside) {
                                            ps.push({
                                                p: edge.b,
                                                insideDir: isTangent.negated(),
                                                t: curveT,
                                                edge: edge,
                                                edgeT: edge.bT,
                                                colinear: false,
                                            });
                                        }
                                    }
                                    //let thisSide = -normVector.dot(edge.bDir)
                                    //if (eq0(thisSide)) {
                                    //    // advanced test
                                    //    const dir = -sign(edge.deltaT())
                                    //    const iscd = isCurve.at(curveT).to(isCurve.at(curveT + dir * dirFactor *
                                    // eps)).dot(normVector) const ecd = edge.curve.at(edgeT).to(edge.curve.at(edgeT + dir
                                    // * eps)).dot(normVector) thisSide = sign(ecd - iscd) } let nextSide =
                                    // normVector.dot(nextEdge.aDir) if (eq0(nextSide)) { // advanced test const dirFactor
                                    // = sign(snap0(isTangent.dot(nextEdge.curve.tangentAt(nextEdge.aT)))) assert(dirFactor
                                    // !== 0) const dir = sign(nextEdge.deltaT()) const iscd =
                                    // isCurve.at(curveT).to(isCurve.at(curveT + dir * dirFactor * eps)).dot(normVector)
                                    // const ecd = nextEdge.curve.at(nextEdge.aT).to(nextEdge.curve.at(nextEdge.aT + dir *
                                    // eps)).dot(normVector) nextSide = sign(ecd - iscd) } if (nextSide < 0 || thisSide <
                                    // 0) { assert(!eq0(insideDir.dot(isTangent))) // next segment is not colinear and ends
                                    // on different side ps.push({ p: edge.b, insideDir: insideDir, t: curveT, edge: edge,
                                    // edgeT: edge.bT, colinear: false}) }
                                }
                            }
                            else if (edgeT != edge.aT) {
                                // edge crosses/touches an intersection curve, neither starts nor ends on it
                                if (eq0(insideDir.dot(isTangent))) {
                                    const dirFactor = sign$2(isTangent.dot(edge.curve.tangentAt(edgeT)));
                                    const eps = 1e-4;
                                    for (const dir of [-1, 1]) {
                                        if ((-1 == dir * dirFactor && edgeT == edge.minT) ||
                                            (1 == dir * dirFactor && edgeT == edge.maxT) ||
                                            (-1 == dir && curveT == isCurve.tMin) ||
                                            (1 == dir && curveT == isCurve.tMax))
                                            continue;
                                        const iscd = isCurve
                                            .at(curveT)
                                            .to(isCurve.at(curveT + dir * eps))
                                            .dot(insideDir);
                                        const ecd = edge.curve
                                            .at(edgeT)
                                            .to(edge.curve.at(edgeT + dir * dirFactor * eps))
                                            .dot(insideDir);
                                        if (iscd - ecd > 0) {
                                            ps.push({
                                                p,
                                                insideDir: isTangent.times(dir),
                                                t: curveT,
                                                edge: edge,
                                                edgeT: edgeT,
                                                colinear: false,
                                            });
                                        }
                                    }
                                }
                                else {
                                    ps.push({
                                        p: p,
                                        insideDir: insideDir,
                                        t: curveT,
                                        edge: edge,
                                        edgeT: edgeT,
                                        colinear: false,
                                    });
                                }
                            }
                            //} else {
                            //
                            //	const dirFactor = sign(isTangent.dot(edge.curve.tangentAt(edgeT)))
                            //	const eps = 1e-4
                            //	const normVector = surface2.normalP(p)
                            //	for (const dir of [-1, 1]) {
                            //		if (-1 == dir * dirFactor && edgeT == edge.minT ||
                            //			1 == dir * dirFactor && edgeT == edge.maxT ||
                            //			-1 == dir && curveT == isCurve.tMin ||
                            //			1 == dir && curveT == isCurve.tMax) continue
                            //		const iscd = isCurve.at(curveT).to(isCurve.at(curveT + dir * eps)).dot(normVector)
                            //		const ecd = edge.curve.at(edgeT).to(edge.curve.at(edgeT + dir * dirFactor *
                            // eps)).dot(normVector) if (iscd > ecd) { ps.push({p, insideDir: isTangent.times(dir *
                            // dirFactor), t: curveT, edge: edge, edgeT: edgeT, colinear: false}) } }
                            // curveVsSurface(isCurve, curveT, p, surface2) }
                        }
                    }
                }
            }
            // duplicate 't's are ok, as sometimes a segment needs to stop and start again
            // should be sorted so that back facing ones are first
            ps.sort((a, b) => a.t - b.t || a.insideDir.dot(isCurve.tangentAt(a.t)));
            return ps;
        }
        transform(m4) {
            const mirroring = m4.isMirroring();
            const newEdges = Edge$$1.reversePath(this.contour.map(e => e.transform(m4)), mirroring);
            const newHoles = this.holes.map(hole => Edge$$1.reversePath(hole.map(e => e.transform(m4)), mirroring));
            return new this.constructor(this.surface.transform(m4), newEdges, newHoles, this.name, this.info);
        }
        transform4(m4) {
            const mirroring = m4.isMirroring();
            const newEdges = Edge$$1.reversePath(this.contour.map(e => e.transform4(m4)), mirroring);
            const newHoles = this.holes.map(hole => Edge$$1.reversePath(hole.map(e => e.transform4(m4)), mirroring));
            return new this.constructor(this.surface.transform4(m4), newEdges, newHoles, this.name, this.info);
        }
        flipped() {
            const newEdges = this.contour.map(e => e.flipped()).reverse();
            const newHoles = this.holes.map(hole => hole.map(e => e.flipped()).reverse());
            return new this.constructor(this.surface.flipped(), newEdges, newHoles, this.name, this.info);
        }
        toString() {
            return ('new ' +
                this.constructor.name +
                '(' +
                this.surface +
                ', [' +
                this.contour.map(e => '\n\t' + e).join() +
                ']' +
                this.holes.map(hole => '\n\t\thole: ' + hole.join()) +
                ')');
        }
        toSource() {
            return ('new ' +
                this.constructor.name +
                '(' +
                this.surface.toSource() +
                ', [' +
                this.contour.map(e => '\n\t' + e.toSource() + ',').join('') +
                '], [' +
                this.holes.map(hole => '[' + hole.map(e => '\n\t' + e.toSource() + ',').join('') + ']').join(',') +
                '])');
        }
        equals(obj) {
            return (this == obj ||
                (Object.getPrototypeOf(this) == Object.getPrototypeOf(obj) &&
                    this.holes.length == obj.holes.length &&
                    Edge$$1.loopsEqual(this.contour, obj.contour) &&
                    this.holes.every(hole => obj.holes.some(hole2 => Edge$$1.loopsEqual(hole, hole2)))));
        }
        hashCode() {
            function arrayHashCode(array) {
                let hashCode$$1 = 0;
                for (const val of array) {
                    hashCode$$1 = (hashCode$$1 * 31 + val) | 0;
                }
                return hashCode$$1;
            }
            function loopHashCode(loop) {
                return arrayHashCode(loop.map(edge => edge.hashCode()).sort(MINUS));
            }
            let hashCode$$1 = 0;
            hashCode$$1 = (hashCode$$1 * 31 + arrayHashCode(this.holes.map(loop => loopHashCode(loop)).sort(MINUS))) | 0;
            hashCode$$1 = (hashCode$$1 * 31 + loopHashCode(this.contour)) | 0;
            hashCode$$1 = (hashCode$$1 * 31 + this.surface.hashCode()) | 0;
            return hashCode$$1;
        }
        likeFace(face2) {
            function loopsLike(a, b) {
                return (a.length == b.length &&
                    arrayRange(0, a.length, 1).some(offset => a.every((edge, i) => edge.like(b[(offset + i) % a.length]))));
            }
            assertInst(Face$$1, face2);
            return (this.surface.like(face2.surface) &&
                this.holes.length == face2.holes.length &&
                loopsLike(this.contour, face2.contour) &&
                this.holes.every(hole => face2.holes.some(hole2 => loopsLike(hole, hole2))));
        }
        getAllEdges() {
            return this.allEdges;
        }
        addEdgeLines(mesh) {
            assert(false, 'buggy, fix');
            const vertices = this.contour.flatMap(edge => edge.getVerticesNo0()), mvl = mesh.vertices.length;
            for (let i = 0; i < vertices.length; i++) {
                mesh.vertices.push(vertices[i]);
                mesh.LINES.push(mvl + i, mvl + (i + 1) % vertices.length);
            }
        }
        containsPoint(p) {
            assertVectors(p);
            return (this.surface.loopContainsPoint(this.contour, p) != PointVsFace$$1.OUTSIDE &&
                !this.holes.some(hole => this.surface.loopContainsPoint(hole, p) != PointVsFace$$1.OUTSIDE));
        }
        containsPoint2(p) {
            assertVectors(p);
            const contourContainsPoint = this.surface.loopContainsPoint(this.contour, p);
            if (contourContainsPoint != PointVsFace$$1.INSIDE)
                return contourContainsPoint;
            for (const hole of this.holes) {
                const loopContainsPoint = this.surface.loopContainsPoint(hole, p);
                if (loopContainsPoint != PointVsFace$$1.OUTSIDE) {
                    return loopContainsPoint == PointVsFace$$1.ON_EDGE ? PointVsFace$$1.ON_EDGE : PointVsFace$$1.OUTSIDE;
                }
            }
            return PointVsFace$$1.INSIDE;
        }
        /**
         *
         * @param line
         * @returns t param of the line if there is an intersection, NaN otherwise
         */
        intersectsLine(line) {
            assertInst(L3$$1, line);
            if (!this.getAABB().intersectsLine(line))
                return NaN;
            const containedIntersectionsTs = this.surface.isTsForLine(line).filter(t => this.containsPoint(line.at(t)));
            const nearestPointT = containedIntersectionsTs.withMax(t => -t);
            return undefined != nearestPointT ? nearestPointT : NaN;
        }
        toMesh() {
            const mesh = new Mesh$$1()
                .addIndexBuffer('TRIANGLES')
                .addIndexBuffer('LINES')
                .addVertexBuffer('normals', 'ts_Normal');
            this.addToMesh(mesh);
            //mesh.compile()
            return mesh;
        }
        zDirVolume() {
            return this.surface.zDirVolume(this.getAllEdges());
        }
        calcArea() {
            return this.surface.calculateArea(this.getAllEdges());
        }
        getLoops() {
            return [this.contour, ...this.holes];
        }
        getAABB() {
            return this.aabb || (this.aabb = AABB.forAABBs(this.contour.map(e => e.getAABB())));
        }
        pointsToInside3(p, curve, curveT, dir) {
            const eps = 1e-6;
            const normal = this.surface.normalP(p);
            const curveTangent = curve.tangentAt(curveT).times(dir);
            const up = normal.cross(curveTangent);
            const ecd = curve
                .at(curveT)
                .to(curve.at(curveT + dir * eps))
                .dot(up);
            let minValue = Infinity, result, advanced = false;
            for (const edge of this.getAllEdges()) {
                const aEqP = edge.a.like(p), bEqP = edge.b.like(p);
                assert(aEqP == edge.a.like(p));
                assert(bEqP == edge.b.like(p));
                if (!aEqP && !bEqP)
                    continue;
                const edgeTangent = aEqP ? edge.aDir : edge.bDir.negated();
                const angle = curveTangent.angleRelativeNormal(edgeTangent, normal);
                if (eq0(angle)) {
                    if (curve.isColinearTo(edge.curve)) {
                        return PointVsFace$$1.ON_EDGE;
                    }
                    const edgeT = aEqP ? edge.aT : edge.bT;
                    const edgeDir = (aEqP ? 1 : -1) * sign$2(edge.deltaT());
                    const iscd = edge.curve.diff(edgeT, edgeDir * eps).dot(up);
                    //const iscd = edge.curve.at(edgeT).to(curve.at(edgeT + edgeDir * eps)).dot(up)
                    const diff = iscd - ecd;
                    if (diff > 0 && (!advanced || diff < minValue)) {
                        advanced = true;
                        minValue = diff;
                        result = aEqP ? PointVsFace$$1.OUTSIDE : PointVsFace$$1.INSIDE;
                    }
                }
                else if (!advanced) {
                    const angle2 = (angle + TAU) % TAU;
                    if (angle2 < minValue) {
                        minValue = angle2;
                        result = aEqP ? PointVsFace$$1.OUTSIDE : PointVsFace$$1.INSIDE;
                    }
                }
            }
            if (result == undefined)
                throw new Error();
            return result;
        }
        pointsToInside2(p, dir) {
            return this.pointsToInside3(p, L3$$1.anchorDirection(p, dir), 0, 1);
            //const normal = this.surface.normalP(p)
            //let minAngle = Infinity, inOut = false
            //function test(v, b) {
            //	const angle = (dir.angleRelativeNormal(v, normal) + TAU + NLA_PRECISION / 2) % TAU
            //	if (angle <= 2 * NLA_PRECISION) {
            //		return true
            //	}
            //	if (angle < minAngle) {
            //		minAngle = angle
            //		inOut = b
            //	}
            //}
            //for (const edge of this.getAllEdges()) {
            //	assert(edge.a.equals(p) || !edge.a.like(p))
            //	assert(edge.b.equals(p) || !edge.b.like(p))
            //	if (edge.a.equals(p) && test(edge.aDir, false)) return PointVsFace.ON_EDGE
            //	if (edge.b.equals(p) && test(edge.bDir.negated(), true)) return PointVsFace.ON_EDGE
            //}
            //return inOut ? PointVsFace.INSIDE : PointVsFace.OUTSIDE
        }
    }
    class PlaneFace$$1 extends Face$$1 {
        constructor(p, contour, holes, name, info) {
            assert(p instanceof P3$$1 || p instanceof PlaneSurface$$1);
            super(p instanceof P3$$1 ? new PlaneSurface$$1(p) : p, contour, holes, name, info);
        }
        static forVertices(planeSurface, vs, ...holeVss) {
            const _planeSurface = planeSurface instanceof P3$$1 ? new PlaneSurface$$1(planeSurface) : planeSurface;
            assert(isCCW(vs, _planeSurface.plane.normal1), 'isCCW(vs, planeSurface.plane.normal1)');
            const edges = StraightEdge$$1.chain(vs);
            holeVss.forEach(vs => assert(doubleSignedArea(vs, _planeSurface.plane.normal1) >= 0, 'doubleSignedArea(vs, planeSurface.plane.normal1) >= 0'));
            const holes = holeVss.map(hvs => StraightEdge$$1.chain(hvs));
            return new PlaneFace$$1(planeSurface, edges, holes);
        }
        addToMesh(mesh) {
            const mvl = mesh.vertices.length;
            const normal = this.surface.plane.normal1;
            const vertices = this.contour.flatMap(edge => edge.getVerticesNo0());
            for (let i = 0; i < vertices.length; i++) {
                mesh.LINES.push(mvl + i, mvl + (i + 1) % vertices.length);
            }
            const holeStarts = [];
            this.holes.forEach(hole => {
                holeStarts.push(vertices.length);
                vertices.push(...hole.flatMap(edge => edge.getVerticesNo0()));
            });
            const triangles = triangulateVertices$$1(normal, vertices, holeStarts).map(index => index + mvl);
            Array.prototype.push.apply(mesh.vertices, vertices);
            Array.prototype.push.apply(mesh.TRIANGLES, triangles);
            Array.prototype.push.apply(mesh.normals, arrayFromFunction(vertices.length, () => normal));
        }
        intersectsLine(line) {
            assertInst(L3$$1, line);
            const lambda = line.isTWithPlane(this.surface.plane);
            if (!Number.isFinite(lambda)) {
                return NaN;
            }
            const inside = this.containsPoint(line.at(lambda));
            return inside ? lambda : NaN;
        }
        //intersectPlaneFace(face2: PlaneFace,
        //                   thisBrep: BRep,
        //                   face2Brep: BRep,
        //                   faceMap: Map<Face, Edge[]>,
        //                   thisEdgePoints: CustomMap<Edge, { edge: Edge, edgeT: number, p: V3, passEdge?: Edge }[]>,
        //                   otherEdgePoints: CustomMap<Edge, { edge: Edge, edgeT: number, p: V3, passEdge?: Edge }[]>,
        //                   checkedPairs: CustomSet<Pair<Equalable, Equalable>>) {
        //	assertInst(CustomMap, thisEdgePoints, otherEdgePoints)
        //
        //	function hasPair(a: Equalable, b: Equalable) {
        //		return checkedPairs.has(new Pair(a, b))
        //	}
        //	function addPair(a: Equalable, b: Equalable) {
        //		return checkedPairs.add(new Pair(a, b))
        //	}
        //
        //	/**
        //	 * @param newEdge generated segment
        //	 * @param col1 if newEdge is colinear to an edge of this, the edge in question
        //	 * @param col2 same for face2
        //	 */
        //	function handleNewEdge(newEdge: StraightEdge, col1: Edge, col2: Edge) {
        //		if (!col1 && !col2) {
        //			mapPush(faceMap, face, newEdge)
        //			mapPush(faceMap, face2, newEdge.flipped())
        //			return true
        //		}
        //		function handleEdgeInFace(col1, col2, face, face2, thisBrep, face2Brep, coplanarSameIsInside: boolean,
        // has, add) { if (col1 && !col2) { if (hasPair(col1.getCanon(), face2)) return  //add(col1.getCanon(), face2)
        // const face2Plane = face2.surface.plane  // NB: a new edge is inserted even though it may be the same as an old
        // one // however it indicates that it intersects the other volume here, i.e. the old edge cannot // be counted as
        // 'inside' for purposes of reconstitution thisBrep.edgeFaces.get(col1.getCanon()).forEach(faceInfo => { //const
        // dot = snap0(face2Plane.normal1.dot(faceInfo.inside)) //if (dot == 0 ? !coplanarSameIsInside : dot < 0) { const
        // pointsInsideFace = fff(faceInfo, face2.surface) const edgeInside = pointsInsideFace == INSIDE ||
        // !coplanarSameIsInside && pointsInsideFace == COPLANAR_SAME const pushEdge =
        // (faceInfo.edge.aDir.like(newEdge.aDir)) ? newEdge : newEdge.flipped()
        // assert(faceInfo.edge.aDir.like(pushEdge.aDir)) edgeInside && mapPush(faceMap, faceInfo.face, pushEdge) })  const
        // newEdgeInside = face2Plane.normal1.cross(newEdge.aDir) const sVEF1 = splitsVolumeEnclosingFaces(thisBrep,
        // col1.getCanon(), newEdgeInside, face2Plane.normal1) let addNewEdge, addNewEdgeFlipped if (addNewEdge = sVEF1 ==
        // INSIDE || coplanarSameIsInside && sVEF1 == COPLANAR_SAME) { mapPush(faceMap, face2, newEdge) } const sVEF2 =
        // splitsVolumeEnclosingFaces(thisBrep, col1.getCanon(), newEdgeInside.negated(), face2Plane.normal1) if
        // (addNewEdgeFlipped = sVEF2 == INSIDE || coplanarSameIsInside && sVEF2 == COPLANAR_SAME) { mapPush(faceMap,
        // face2, newEdge.flipped()) } if (addNewEdge || addNewEdgeFlipped || sVEF1 == COPLANAR_SAME && sVEF2 == INSIDE ||
        // sVEF2 == COPLANAR_SAME && sVEF1 == INSIDE) { return true } } } const c1 = handleEdgeInFace(col1, col2, face,
        // face2, thisBrep, face2Brep, false, hasPair, addPair) const c2 = handleEdgeInFace(col2, col1, face2, face,
        // face2Brep, thisBrep, true, (a, b) => hasPair(b, a), (a, b) => addPair(b, a)) if (c1 || c2) return true  if (col1
        // && col2) { if (hasPair(col1.getCanon(), col2.getCanon())) return  addPair(col1.getCanon(), col2.getCanon())
        // function handleColinearEdgeFaces(col1, col2, thisBrep, face2Brep, coplanarSameIsInside: boolean, thisEdgePoints,
        // has, add) { // not entirely sure for what i had the dirInsides in? //const aDirNegatedInside =
        // (newEdge.a.like(col2.a) || newEdge.a.like(col2.b)) && splitsVolumeEnclosingCone(face2Brep, newEdge.a,
        // newEdge.aDir.negated()) == INSIDE //const bDirInside = (newEdge.b.like(col2.a) || newEdge.b.like(col2.b)) &&
        // splitsVolumeEnclosingCone(face2Brep, newEdge.b, newEdge.bDir) == INSIDE
        // thisBrep.edgeFaces.get(col1.getCanon()).forEach(faceInfo => { const sVEF = splitsVolumeEnclosingFaces(face2Brep,
        // col2.getCanon(), faceInfo.inside, faceInfo.normalAtCanonA) const edgeInside = sVEF == INSIDE ||
        // coplanarSameIsInside && sVEF == COPLANAR_SAME const pushEdge = (faceInfo.edge.aDir.like(newEdge.aDir)) ? newEdge
        // : newEdge.flipped() edgeInside && mapPush(faceMap, faceInfo.face, pushEdge) }) } handleColinearEdgeFaces(col1,
        // col2, thisBrep, face2Brep, true, thisEdgePoints, hasPair, addPair) handleColinearEdgeFaces(col2, col1,
        // face2Brep, thisBrep, false, otherEdgePoints, (a, b) => hasPair(b, a), (a, b) => addPair(b, a)) } }   // what
        // needs to be generated: new edges on face // points on edges where they are cut by faces so that sub edges will
        // be generated for loops // points on ends of edges where the edge will be an edge in the new volume where it goes
        // from A to B //         you don't want thos to be marked as 'inside', otherwise invalid faces will be added // if
        // a face cuts a corner, nothings needs to be done, as that alone does not limit what adjacent faces will be
        // function handleEndPoint(a: IntersectionPointInfo, b: IntersectionPointInfo, newEdge: Edge) { // ends in the
        // middle of b's face if (a && !b) { if (!a.colinear && a.edgeT != a.edge.aT && a.edgeT != a.edge.bT) {
        // mapPush(thisEdgePoints, a.edge.getCanon(), a) assert(a.edge.isValidT(a.edgeT)) } // else colinear segment ends
        // in middle of other face, do nothing } // ends in the middle of a's face if (b && !a) { if (!b.colinear &&
        // b.edgeT != b.edge.aT && b.edgeT != b.edge.bT) { mapPush(otherEdgePoints, b.edge.getCanon(), b)
        // assert(b.edge.isValidT(b.edgeT)) } // else colinear segment ends in middle of other face, do nothing } if (a &&
        // b) { // if a or b is colinear the correct points will already have been added to the edge by handleNewEdge //
        // segment starts/ends on edge/edge intersection function foo(a, b, face, face2, thisPlane, face2Plane, thisBrep,
        // face2Brep, first, thisEdgePoints) { if (!a.colinear && a.edgeT != a.edge.aT && a.edgeT != a.edge.bT) { if
        // (!hasPair(a.edge.getCanon(), b.edge.getCanon())) { addPair(a.edge.getCanon(), b.edge.getCanon()) // ends on a,
        // on colinear segment b bT != a.edge.bT && // b can be colinear, so edgeT == aT is possible if (a.p.like(b.edge.a)
        // || a.p.like(b.edge.b)) { const corner = a.p.like(b.edge.a) ? b.edge.a : b.edge.b // face2brep corner on edge
        // const sVEC1 = splitsVolumeEnclosingCone(face2Brep, corner, a.edge.aDir) const sVEC2 =
        // splitsVolumeEnclosingCone(face2Brep, corner, a.edge.aDir.negated()) // if either of these return
        // ALONG_EDGE_OR_PLANE, then the breps share a colinear edge  if (INSIDE == sVEC1 || INSIDE == sVEC2) {
        // mapPush(thisEdgePoints, a.edge.getCanon(), a) assert(a.edge.isValidT(a.edgeT)) } } else { // edge / edge center
        // intersection const aEdgeDir = a.edge.tangentAt(a.edgeT) const bEdgeDir = b.edge.tangentAt(b.edgeT) const
        // testVector = aEdgeDir.rejectedFrom(bEdgeDir) assert(!testVector.likeO()) const sVEF1 =
        // splitsVolumeEnclosingFaces(face2Brep, b.edge.getCanon(), testVector, thisPlane.normal1) const sVEF2 =
        // splitsVolumeEnclosingFaces(face2Brep, b.edge.getCanon(), testVector.negated(), thisPlane.normal1) if (INSIDE ==
        // sVEF1 || INSIDE == sVEF2) { mapPush(thisEdgePoints, a.edge.getCanon(), a) assert(a.edge.isValidT(a.edgeT)) } } }
        // } }  foo(a, b, face, face2, thisPlane, face2Plane, thisBrep, face2Brep, true, thisEdgePoints) foo(b, a, face2,
        // face, face2Plane, thisPlane, face2Brep, thisBrep, false, otherEdgePoints)  } }   assertInst(PlaneFace, face2)
        // const face: PlaneFace = this // get intersection const thisPlane = this.surface.plane, face2Plane =
        // face2.surface.plane if (thisPlane.isParallelToPlane(face2Plane)) { if (thisPlane.like(face2Plane)) { // normal1
        // same and same location in space // addLikeSurfaceFaces(likeSurfaceFaces, this, face2) } return } const isLine =
        // L3.fromPlanes(thisPlane, face2Plane) // get intersections of newCurve with other edges of face and face2 const
        // ps1 = planeFaceEdgeISPsWithPlane(face, isLine, face2Plane) const ps2 = planeFaceEdgeISPsWithPlane(face2, isLine,
        // thisPlane) if (ps1.length == 0 || ps2.length == 0) { // faces to not intersect return }  let col1:
        // IntersectionPointInfo, col2: IntersectionPointInfo let in1 = false, in2 = false let i = 0, j = 0, last let
        // startP, startDir, startT, startA, startB while (i < ps1.length || j < ps2.length) { assert(i <= ps1.length)
        // assert(j <= ps2.length) const a = ps1[i], b = ps2[j] assert(a || b) if (j == ps2.length || i < ps1.length &&
        // lt(a.t, b.t)) { last = a in1 = !in1 a.used = true in1 && (col1 = a.colinear && a) i++ } else if (i == ps1.length
        // || gt(a.t, b.t)) { last = b in2 = !in2 b.used = true in2 && (col2 = b.colinear && b) j++ } else { // TODO: this
        // will break if 3 points on the same t last = a in1 = !in1 in2 = !in2 //if (in1 == in2) { a.used = true b.used =
        // true in1 && (col1 = a.colinear && a) in2 && (col2 = b.colinear && b) //} i++ j++ } if (startP && !(in1 && in2))
        // { // segment end const newEdge = new StraightEdge(isLine, startP, last.p, startT, last.t, undefined, 'genseg' +
        // getGlobalId()) startP = undefined last.used = true if (handleNewEdge(newEdge, col1 && col1.edge, col2 &&
        // col2.edge)) { handleEndPoint(startA || col1, startB || col2, newEdge) handleEndPoint(a && a.used && a || col1, b
        // && b.used && b || col2, newEdge) } } else if (in1 && in2) { // new segment just started startP = last.p startDir
        // = last.insideDir startT = last.t startA = a && a.used && a startB = b && b.used && b } if (!in1 && a && last ==
        // a && a.colinear) { checkedPairs.add(new Pair(a.edge.getCanon(), face2)) } if (!in2 && b && (last == b || b.used)
        // && b.colinear) { checkedPairs.add(new Pair(b.edge.getCanon(), face)) } } }
        withHole(holeEdges) {
            return new PlaneFace$$1(this.surface, this.contour, [holeEdges]);
        }
        pointsToInside(p, dir) {
            return this.containsPoint2(p.plus(dir.times(NLA_PRECISION * 8)));
        }
        edgeISPsWithPlane(isLine, plane2) {
            const face = this;
            assert(face.surface.plane.containsLine(isLine));
            assert(plane2.containsLine(isLine));
            const plane = face.surface.plane;
            const ps = [];
            const loops = [face.contour].concat(face.holes);
            loops.forEach(loop => {
                const colinearEdges = loop.map(edge => edge.colinearToLine(isLine) && -sign$2(edge.aDir.dot(isLine.dir1)));
                const isLineOut = isLine.dir1.cross(plane.normal1);
                loop.forEach((edge, edgeIndex, edges) => {
                    const nextEdgeIndex = (edgeIndex + 1) % edges.length, nextEdge = edges[nextEdgeIndex], colinearEdge = colinearEdges[edgeIndex];
                    //console.log(edge.toSource()) {p:V3(2, -2.102, 0),
                    if (colinearEdge) {
                        // edge colinear to intersection line
                        const curveAT = isLine.pointT(edge.a), curveBT = isLine.pointT(edge.b);
                        // add interval for colinear segment
                        ps.push({ p: edge.a, insideDir: edge.aDir, t: curveAT, edge: edge, edgeT: edge.aT, colinear: true }, {
                            p: edge.b,
                            insideDir: edge.bDir.negated(),
                            t: curveBT,
                            edge: edge,
                            edgeT: edge.bT,
                            colinear: true,
                        });
                        // open next interval if necessary
                        const nextSide = colinearEdges[nextEdgeIndex] ||
                            dotCurve2$$1(nextEdge.curve, nextEdge.aT, isLineOut, nextEdge.deltaTSign());
                        if (colinearEdge * nextSide < 0) {
                            // side changes
                            ps.push({
                                p: nextEdge.a,
                                insideDir: edge.bDir,
                                t: curveBT,
                                edge: nextEdge,
                                edgeT: nextEdge.aT,
                                colinear: false,
                            });
                        }
                    }
                    else {
                        // not necessarily a straight edge, so multiple intersections are possible
                        const edgeTs = edge.edgeISTsWithPlane(plane2);
                        assert(edgeTs.every(t => plane2.containsPoint(edge.curve.at(t))), edgeTs);
                        for (const edgeT of edgeTs) {
                            if (edgeT == edge.bT) {
                                // endpoint lies on intersection line
                                const side = dotCurve2$$1(edge.curve, edge.bT, isLineOut, -edge.deltaTSign());
                                const nextSide = colinearEdges[nextEdgeIndex] ||
                                    dotCurve2$$1(nextEdge.curve, nextEdge.aT, isLineOut, nextEdge.deltaTSign());
                                if (side * nextSide < 0) {
                                    // next segment is not colinear and ends on different side
                                    ps.push({
                                        p: edge.b,
                                        insideDir: plane2.normal1.negated(),
                                        t: isLine.pointT(edge.b),
                                        edge: edge,
                                        edgeT: edge.bT,
                                        colinear: false,
                                    });
                                }
                            }
                            else if (edgeT != edge.aT) {
                                // edge crosses intersection line, neither starts nor ends on it
                                const p = edge.curve.at(edgeT);
                                assert(plane2.containsPoint(p), edge.toString(), p, edgeT, plane2.distanceToPoint(p));
                                assert(isLine.containsPoint(p), edge.toString(), p, edgeT, isLine.distanceToPoint(p));
                                const insideDir = plane2.normal1.negated();
                                ps.push({
                                    p: p,
                                    insideDir: insideDir,
                                    t: isLine.pointT(p),
                                    edge: edge,
                                    edgeT: edgeT,
                                    colinear: false,
                                });
                            }
                        }
                    }
                });
            });
            // duplicate 't's are ok, as sometimes a segment needs to stop and start again
            // should be sorted so that back facing ones are first
            ps.sort((a, b) => a.t - b.t || a.insideDir.dot(isLine.dir1));
            return ps;
        }
    }
    class RotationFace$$1 extends Face$$1 {
        constructor(rot, contour, holes, name, info) {
            super(rot, contour, holes, name, info);
        }
        static loopDoesNotCrossPlane(loop, seamPlane) {
            let side = 0;
            // returns true if d is on the other side as previous calls
            function checkSide(d) {
                if (side == 0) {
                    side = d;
                }
                else {
                    return !side || side * d < 0;
                }
                return false;
            }
            for (const edge of loop) {
                const ts = edge.edgeISTsWithPlane(seamPlane);
                if (ts.length == 0) {
                    if (!(edge.curve instanceof L3$$1) && checkSide(seamPlane.distanceToPointSigned(edge.a)))
                        return false;
                }
                else {
                    for (const t of ts) {
                        // TODO: this part probably should be in a separate function
                        // check 'backwards' only if if aT != t
                        if (edge.aT != t) {
                            if (checkSide(dotCurve2$$1(edge.curve, t, seamPlane.normal1, -edge.deltaTSign())))
                                return false;
                        }
                        if (edge.bT != t) {
                            if (checkSide(dotCurve2$$1(edge.curve, t, seamPlane.normal1, edge.deltaTSign())))
                                return false;
                        }
                    }
                }
            }
            return true;
        }
        getAABB() {
            if (this.aabb)
                return this.aabb;
            this.aabb = AABB.forAABBs(this.contour.map(e => e.getAABB()));
            this.aabb.addPoints(this.surface.getExtremePoints().filter(p => this.containsPoint(p)));
            return this.aabb;
        }
        unrollLoop(edgeLoop) {
            const vs = [];
            const uvP = this.surface.uvPFunc();
            const verticesNo0s = edgeLoop.map(edge => edge.getVerticesNo0());
            const startEdgeIndex = verticesNo0s.findIndex(edgeVertices => !eq(uvP(edgeVertices[0]).x, Math.PI));
            assert(-1 != startEdgeIndex);
            // console.log(startEdgeIndex)
            for (let i = 0; i < edgeLoop.length; i++) {
                const edgeIndex = (i + startEdgeIndex) % edgeLoop.length;
                for (let j = 0; j < verticesNo0s[edgeIndex].length; j++) {
                    const p = verticesNo0s[edgeIndex][j];
                    const localP = uvP(p);
                    // console.log(hint, p.sce, localP.sce)
                    vs.push(localP);
                }
            }
            edgeLoop.forEach(edge => {
                edge.getVerticesNo0().forEach(p => {
                    vs.push(uvP(p));
                });
            });
            console.log('vs\n', vs.join('\n'), vs.length);
            return vs;
        }
        /**
         * f1 cos t + f2 sin t
         * tan(phi) = sin / cos
         *          = (f1x cos t + f2x sin t) / (f1y cos t + f2y sin t)
         *
         *          = (-f1x sin t + f2x cos t) / (-f1y sin t + f2y cos t)
         */
        unrollEllipsoidLoops(edgeLoops) {
            const verticesUV = [], vertices = [], loopStarts = [];
            const ellipsoid = this.surface;
            const ptpf = ellipsoid.uvPFunc();
            const testDegeneratePoint = ellipsoid instanceof EllipsoidSurface$$1
                ? (nextStart) => nextStart.like(ellipsoid.center.plus(ellipsoid.f3)) ||
                    nextStart.like(ellipsoid.center.minus(ellipsoid.f3))
                : (nextStart) => nextStart.like(this.surface.center);
            for (const edgeLoop of edgeLoops) {
                loopStarts.push(verticesUV.length);
                // console.log(startEdgeIndex)
                for (let i = 0; i < edgeLoop.length; i++) {
                    const ipp = (i + 1) % edgeLoop.length;
                    const verticesNo0 = edgeLoop[i].getVerticesNo0();
                    vertices.push(...verticesNo0);
                    verticesUV.push(...verticesNo0.map(v => ptpf(v)));
                    const nextStart = edgeLoop[ipp].a;
                    //console.log('BLAH', nextStart.str, ellipsoid.center.plus(ellipsoid.f3).str)
                    if (testDegeneratePoint(nextStart)) {
                        const bDirLC = ellipsoid.matrixInverse.transformVector(edgeLoop[i].bDir), aDirLC = ellipsoid.matrixInverse.transformVector(edgeLoop[ipp].aDir);
                        const inAngle = Math.atan2(-bDirLC.y, -bDirLC.x);
                        const outAngle = Math.atan2(aDirLC.y, aDirLC.x);
                        const stLast = verticesUV.pop();
                        verticesUV.push(new V3(inAngle, stLast.y, 0), new V3(outAngle, stLast.y, 0));
                        vertices.push(vertices.last);
                    }
                    verticesUV.forEach(({ u, v }) => {
                        assert(isFinite(u));
                        assert(isFinite(v));
                    });
                }
            }
            let normals;
            if (this.surface instanceof EllipsoidSurface$$1) {
                normals = vertices.map(v => ellipsoid.normalP(v));
            }
            else {
                const normalUV = ellipsoid.normalUVFunc();
                normals = verticesUV.map(({ u, v }) => normalUV(u, v));
            }
            assert(vertices.length == vertices.length);
            //console.log(verticesUV.map(v => v.str).join('\n'))
            return {
                verticesUV: verticesUV,
                vertices: vertices,
                normals: normals,
                loopStarts: loopStarts,
            };
        }
        unrollCylinderLoops(loops) {
            const vertexLoops = loops.map(loop => loop.flatMap(edge => edge.getVerticesNo0()));
            const surface = this.surface;
            const vertices = vertexLoops.concatenated();
            // this.unrollLoop(loop).map(v => new V3(v.x / uStep, v.y / vStep, 0)))
            const loopStarts = vertexLoops.reduce((arr, loop) => (arr.push(arr.last + loop.length), arr), [0]);
            const uvPFunc = surface.uvPFunc();
            const verticesUV = vertices.map(v => uvPFunc(v));
            const uvN = surface.normalUVFunc();
            const normals = verticesUV.map(({ u, v }) => uvN(u, v));
            return { verticesUV: verticesUV, vertices: vertices, normals: normals, loopStarts: loopStarts };
        }
        /**
         * at(s, t) = new V3(s cos t, s sin t, t + )
         *
         * x = 0
         *
         * s cos t = 0
         * ==> s = 0 || cos t = 0
         * ==> L3.Z || V3(0, +-s, k * 2 pi)
         *
         * x = c
         * s cos t = c
         * ==> V3(c, c sin t / cos t = c tan t, t)
         * ==> V3(c, c t, arctan t)
         *
         *
         * x . n = w
         *      s cos t nx + s sin t ny + t nz = w
         *      s = (w - t nz) / (cos t nx + sub t ny)
         * ==> V3(
         *          cos t (w - t nz) / (cos t nx + sin t ny)
         *          sin t (w - t nz) / (cos t nx + sin t ny)
         *          t)
         *
         *  ==> V3(
         *          (w - z arctan t) / (x + t y)
         *          (w - z arctan t) / (y + x / t)
         *          arctan t)
         *
         *
         *
         */
        addToMesh(mesh, uStep = this.surface.uStep, vStep = this.surface.vStep) {
            assertf(() => uStep > 0 && vStep > 0, uStep, vStep, 'Surface: ' + this.surface);
            const triangles = [];
            const pMN = (m, n) => this.surface.pUVFunc()(m * uStep, n * vStep);
            const normalMN = (m, n) => this.surface.normalUVFunc()(m * uStep, n * vStep);
            const loops = this.getLoops();
            const { vertices, verticesUV, normals, loopStarts } = this.surface instanceof EllipsoidSurface$$1 || this.surface instanceof ConicSurface$$1
                ? this.unrollEllipsoidLoops(loops)
                : this.unrollCylinderLoops(loops);
            loopStarts.push(vertices.length);
            const verticesMN = verticesUV.map(({ u, v }) => new V3(u / uStep, v / vStep, 0));
            for (let vertexLoopIndex = 0; vertexLoopIndex < loops.length; vertexLoopIndex++) {
                const vertexLoopStart = loopStarts[vertexLoopIndex];
                const vertexLoopLength = loopStarts[vertexLoopIndex + 1] - vertexLoopStart;
                const base = mesh.vertices.length + loopStarts[vertexLoopIndex];
                for (let i = 0; i < vertexLoopLength; i++) {
                    mesh.LINES.push(base + i, base + (i + 1) % vertexLoopLength);
                }
            }
            disableConsole();
            let minM = Infinity, maxM = -Infinity, minN = Infinity, maxN = -Infinity;
            //console.log('surface', this.surface.str)
            //console.log(verticesMN)
            //drPs.push(...verticesMN.map((v, i) => ({p: vertices[i], text: `${i} uv: ${v.toString(x => round10(x,
            // -4))}`})))
            verticesMN.forEach(([m, n]) => {
                assert(isFinite(m));
                assert(isFinite(n));
                minM = min$2(minM, m);
                maxM = max$2(maxM, m);
                minN = min$2(minN, n);
                maxN = max$2(maxN, n);
            });
            if (ParametricSurface$$1.is(this.surface)) ;
            const mOffset = floor$1(minM + NLA_PRECISION), nOffset = floor$1(minN + NLA_PRECISION);
            const mRes = ceil(maxM - NLA_PRECISION) - mOffset, nRes = ceil(maxN - NLA_PRECISION) - nOffset;
            console.log(uStep, vStep, mRes, nRes);
            if (mRes == 1 && nRes == 1) {
                // triangulate this face as if it were a plane
                const polyTriangles = triangulateVertices$$1(V3.Z, verticesMN, loopStarts.slice(1, 1 + this.holes.length));
                triangles.push(...polyTriangles);
            }
            else {
                const partss = new Array(mRes * nRes);
                function fixUpPart(part, baseM, baseN) {
                    assert(baseM < mRes && baseN < nRes, `${baseM}, ${baseN}, ${mRes}, ${nRes}`);
                    console.log('complete part', part, baseM, baseN);
                    //console.trace()
                    assert(part.length);
                    const cellM = baseM + mOffset, cellN = baseN + nOffset;
                    for (const index of part) {
                        assert(le$1(cellM, verticesMN[index].x) && le$1(verticesMN[index].x, cellM + 1), `${index} ${verticesMN[index].str} ${cellM} ${cellM}`);
                        assert(le$1(cellN, verticesMN[index].y) && le$1(verticesMN[index].y, cellN + 1));
                    }
                    const pos = baseN * mRes + baseM;
                    (partss[pos] || (partss[pos] = [])).push(part);
                    //const outline = partss[pos] || (partss[pos] = [minM + baseM * uStep, minN + baseN * vStep, minM +
                    // (baseM + 1) * uStep, minN + (baseN + 1) * vStep])
                }
                // 'some' instead of forEach so we can return out of the entire function if this.edges crosses no borders
                // and
                for (let vertexLoopIndex = 0; vertexLoopIndex < loops.length; vertexLoopIndex++) {
                    let part = undefined, firstPart, firstPartBaseM = -1, firstPartBaseN = -1;
                    let lastBaseM = -1, lastBaseN = -1;
                    let partCount = 0;
                    const vertexLoopStart = loopStarts[vertexLoopIndex];
                    const vertexLoopLength = loopStarts[vertexLoopIndex + 1] - vertexLoopStart;
                    for (let vlvi = 0; vlvi < vertexLoopLength; vlvi++) {
                        const vx0index = vertexLoopStart + vlvi, vx0 = verticesMN[vx0index];
                        const vx1index = vertexLoopStart + (vlvi + 1) % vertexLoopLength, vx1 = verticesMN[vx1index];
                        //console.log('dask', vx0index, vx1index)
                        const vx01 = vx0.to(vx1);
                        assert(vx0);
                        const di = vx01.x, dj = vx01.y;
                        let vxIndex = vx0index, vx = vx0, currentT = 0;
                        let whileLimit = 400;
                        while (--whileLimit) {
                            // points which are on a grid line are assigned to the cell into which they are going (+
                            // NLA_PRECISION * sign(di)) if they are parallel to the gridline (eq0(di)), they belong the
                            // the cell for which they are a CCW boundary
                            const baseM = floor$1(vx.u + (!eq0(di) ? sign$2(di) : -sign$2(dj)) * NLA_PRECISION) - mOffset;
                            const baseN = floor$1(vx.v + (!eq0(dj) ? sign$2(dj) : sign$2(di)) * NLA_PRECISION) - nOffset;
                            assert(baseM < mRes && baseN < nRes, `${baseM}, ${baseN}, ${mRes}, ${nRes}`);
                            // figure out the next intersection with a gridline:
                            // iNext is the positive horizontal distance to the next vertical gridline
                            const iNext = ceil(sign$2(di) * vx.u + NLA_PRECISION) - sign$2(di) * vx.u;
                            const jNext = ceil(sign$2(dj) * vx.v + NLA_PRECISION) - sign$2(dj) * vx.v;
                            const iNextT = currentT + iNext / abs$3(di);
                            const jNextT = currentT + jNext / abs$3(dj);
                            //console.log(vxIndex, vx.str, 'vij', vx.u, vx.v, 'd', di, dj, 'ijNext', iNext, jNext, 'nextT',
                            // iNextT, jNextT)
                            if (lastBaseM != baseM || lastBaseN != baseN) {
                                if (part) {
                                    if (!firstPart) {
                                        firstPart = part;
                                        firstPartBaseM = lastBaseM;
                                        firstPartBaseN = lastBaseN;
                                    }
                                    else {
                                        partCount++;
                                        fixUpPart(part, lastBaseM, lastBaseN);
                                    }
                                }
                                part = [vxIndex];
                            }
                            lastBaseM = baseM;
                            lastBaseN = baseN;
                            currentT = min$2(iNextT, jNextT);
                            if (ge$1(currentT, 1)) {
                                //console.log('breaking ', vx1index)
                                part.push(vx1index);
                                break;
                            }
                            else {
                                const nextPoint = vx0.lerp(vx1, currentT);
                                const nextPointIndex = addVertex(nextPoint.x, nextPoint.y);
                                //console.log('pushing ', nextPointIndex)
                                part.push(nextPointIndex);
                                vx = nextPoint;
                                vxIndex = nextPointIndex;
                            }
                        }
                        assert(whileLimit, 'whileLimit');
                    }
                    if (0 == partCount) {
                        // complete loop
                        assert(false, 'found a hole, try increasing resolution');
                    }
                    // at this point, the firstPart hasn't been added, and the last part also hasn't been added
                    // either they belong to the same cell, or not
                    if (firstPartBaseM == lastBaseM && firstPartBaseN == lastBaseN) {
                        part.pop();
                        fixUpPart(part.concat(firstPart), lastBaseM, lastBaseN);
                    }
                    else {
                        fixUpPart(firstPart, firstPartBaseM, firstPartBaseN);
                        fixUpPart(part, lastBaseM, lastBaseN);
                    }
                    console.log('firstPart', firstPart);
                }
                console.log('calculated parts', partss);
                const fieldVertexIndices = new Array((mRes + 1) * (nRes + 1));
                function addVertex(m, n) {
                    verticesMN.push(new V3(m, n, 0));
                    normals.push(normalMN(m, n));
                    return vertices.push(pMN(m, n)) - 1;
                }
                function getGridVertexIndex(i, j) {
                    const index = j * (mRes + 1) + i;
                    return fieldVertexIndices[index] || (fieldVertexIndices[index] = addVertex(i + mOffset, j + nOffset));
                }
                for (let col = 0; col < mRes; col++) {
                    let inside = false;
                    for (let row = 0; row < nRes; row++) {
                        const pos = row * mRes + col;
                        const fieldU = mOffset + col, fieldV = nOffset + row;
                        const parts = partss[pos];
                        if (!parts) {
                            if (inside) {
                                pushQuad$$1(triangles, false, getGridVertexIndex(col, row), getGridVertexIndex(col + 1, row), getGridVertexIndex(col, row + 1), getGridVertexIndex(col + 1, row + 1));
                            }
                        }
                        else {
                            // assemble the field with segments in in
                            function opos(index) {
                                const p = verticesMN[index], u1 = p.x - fieldU, v1 = p.y - fieldV;
                                assert(-NLA_PRECISION < u1 &&
                                    u1 < 1 + NLA_PRECISION &&
                                    -NLA_PRECISION < v1 &&
                                    v1 < 1 + NLA_PRECISION, 'oob u1 v1 ' +
                                    u1 +
                                    ' ' +
                                    v1 +
                                    ' ' +
                                    index +
                                    ' ' +
                                    p.str +
                                    'IF THIS FAILS check canonSeamU is correct');
                                return v1 < u1 ? u1 + v1 : 4 - u1 - v1;
                            }
                            while (parts.length) {
                                const outline = [];
                                const startPart = parts[0];
                                assert(startPart.length > 0);
                                let currentPart = startPart;
                                do {
                                    outline.push(...currentPart);
                                    const currentPartEndOpos = opos(currentPart.last);
                                    const nextPartIndex = parts.indexWithMax(part => -mod(opos(part[0]) - currentPartEndOpos, 4));
                                    const nextPart = parts.removeIndex(nextPartIndex);
                                    let currentOpos = currentPartEndOpos;
                                    const nextPartStartOpos = opos(nextPart[0]) > currentOpos ? opos(nextPart[0]) : opos(nextPart[0]) + 4;
                                    let nextOpos = ceil(currentOpos + NLA_PRECISION);
                                    let flipping = eq0((currentOpos + NLA_PRECISION) % 1 - NLA_PRECISION);
                                    //inside = inside != (!eq0(currentOpos % 1) && currentOpos % 2 < 1)
                                    while (lt(nextOpos, nextPartStartOpos)) {
                                        switch (nextOpos % 4) {
                                            case 0:
                                                outline.push(getGridVertexIndex(col, row));
                                                break;
                                            case 1:
                                                inside = inside != flipping;
                                                outline.push(getGridVertexIndex(col + 1, row));
                                                break;
                                            case 2:
                                                outline.push(getGridVertexIndex(col + 1, row + 1));
                                                break;
                                            case 3:
                                                inside = inside != flipping;
                                                outline.push(getGridVertexIndex(col, row + 1));
                                                break;
                                        }
                                        flipping = true;
                                        nextOpos++;
                                    }
                                    // if the next loop would have completed a top or bottom segment
                                    inside = inside != (flipping && nextOpos % 2 == 1 && eq(nextOpos, nextPartStartOpos));
                                    currentOpos = nextOpos;
                                    currentPart = nextPart;
                                } while (currentPart != startPart);
                                // triangulate outline
                                if (outline.length == 3) {
                                    // its just a triangle
                                    triangles.push(...outline);
                                }
                                else {
                                    const polyTriangles = triangulateVertices$$1(V3.Z, outline.map(i => verticesMN[i]), []).map(i => outline[i]);
                                    triangles.push(...polyTriangles);
                                }
                                //console.log('outline', col, row, outline)
                            }
                        }
                    }
                }
            }
            //console.log('trinagle', triangles.max(), vertices.length, triangles.length, triangles.toSource(),
            // triangles.map(col => vertices[col].$).toSource() ) assert(normals.every(n => n.hasLength(1)), normals.find(n
            // => !n.hasLength(1)).length() +' '+normals.findIndex(n => !n.hasLength(1)))
            Array.prototype.push.apply(mesh.TRIANGLES, triangles.map(index => index + mesh.vertices.length));
            Array.prototype.push.apply(mesh.vertices, vertices);
            Array.prototype.push.apply(mesh.normals, normals);
            //this.addEdgeLines(mesh)
            enableConsole();
        }
        addToMesh2(mesh) {
            const zSplit = 8;
            const ribs = [];
            let minZ = Infinity, maxZ = -Infinity;
            //let cmp = (a, b) => a.value - b.value
            const f = this.surface.pUVFunc();
            const normalF = this.surface.normalUVFunc();
            const vertexLoops = this.holes.concat([this.contour]).map(loop => this.unrollLoop(loop));
            vertexLoops.forEach(vertexLoop => {
                vertexLoop.forEach(({ x: d, y: z }) => {
                    const index0 = ribs.binaryIndexOf(d, (a, b) => snap(a.value - b, 0));
                    if (index0 < 0) {
                        ribs.splice(-index0 - 1, 0, { value: d, left: [], right: [] });
                    }
                    minZ = min$2(minZ, z);
                    maxZ = max$2(maxZ, z);
                });
            });
            console.log('zzzs', minZ, maxZ, vertexLoops[0].toSource().replace(/\), /g, ',\n'));
            const correction = 1;
            vertexLoops.forEach(vertexLoop => {
                vertexLoop.forEach((v0, i, vs) => {
                    let v1 = vs[(i + 1) % vs.length], dDiff = v1.x - v0.x;
                    //console.log(v0.sce, v1.sce)
                    if (eq0(dDiff)) {
                        return;
                    }
                    if (dDiff < 0) {
                        [v0, v1] = [v1, v0];
                        dDiff = -dDiff;
                    }
                    const index0 = ribs.binaryIndexOf(v0.x, (a, b) => snap(a.value - b, 0));
                    const index1 = ribs.binaryIndexOf(v1.x, (a, b) => snap(a.value - b, 0));
                    ribs[index0].right.binaryInsert(v0.y);
                    for (let j = (index0 + correction) % ribs.length; j != index1; j = (j + correction) % ribs.length) {
                        const x = ribs[j].value;
                        const part = (x - v0.x) / dDiff;
                        const interpolated = v1.y * part + v0.y * (1 - part);
                        ribs[j].left.binaryInsert(interpolated);
                        ribs[j].right.binaryInsert(interpolated);
                    }
                    ribs[index1].left.binaryInsert(v1.y);
                    // console.log(ribs.map(r=>r.toSource()).join('\n'))
                });
            });
            const vertices = [], triangles0 = [], normals = [];
            for (let i = 0; i < ribs.length; i++) {
                const ribLeft = ribs[i], ribRight = ribs[(i + 1) % ribs.length];
                assert(ribLeft.right.length == ribRight.left.length);
                for (let j = 0; j < ribLeft.right.length; j++) {
                    vertices.push(f(ribLeft.value, ribLeft.right[j]), f(ribRight.value, ribRight.left[j]));
                    normals.push(normalF(ribLeft.value, ribLeft.right[j]), normalF(ribRight.value, ribRight.left[j]));
                }
            }
            //console.log(ribs.map(r=>r.toSource()).join('\n'))
            const vss = vertices.length, detailVerticesStart = vss;
            const zInterval = maxZ - minZ, zStep = zInterval / zSplit;
            const detailZs = arrayFromFunction(zSplit - 1, i => minZ + (1 + i) * zStep);
            console.log('detailsZs', detailZs);
            for (let i = 0; i < ribs.length; i++) {
                const d = ribs[i].value;
                for (let j = 0; j < detailZs.length; j++) {
                    vertices.push(f(d, detailZs[j]));
                    normals.push(normalF(d, detailZs[j]));
                }
            }
            // console.log('detailVerticesStart', detailVerticesStart, 'vl', vertices.length, vertices.length -
            // detailVerticesStart, ribs.length) finally, fill in the ribs
            let vsStart = 0;
            const flipped2 = true;
            //for (var i = 0; i < 1; i++) {
            const end = ribs.length - 1;
            for (let i = 0; i < end; i++) {
                const ipp = (i + 1) % ribs.length;
                let inside = false, colPos = 0;
                const ribLeft = ribs[i], ribRight = ribs[(i + 1) % ribs.length];
                for (let j = 0; j < detailZs.length + 1; j++) {
                    const detailZ = detailZs[j] || 100000;
                    if (!inside) {
                        if (ribLeft.right[colPos] < detailZ && ribRight.left[colPos] < detailZ) {
                            if (ribLeft.right[colPos + 1] < detailZ || ribRight.left[colPos + 1] < detailZ) {
                                pushQuad$$1(triangles0, flipped2, vsStart + colPos * 2, vsStart + (colPos + 1) * 2, vsStart + colPos * 2 + 1, vsStart + (colPos + 1) * 2 + 1);
                                colPos += 2;
                                if (ribLeft.right[colPos] < detailZ || ribRight.left[colPos] < detailZ) {
                                    j--;
                                }
                            }
                            else {
                                pushQuad$$1(triangles0, flipped2, vsStart + colPos * 2, vsStart + colPos * 2 + 1, detailVerticesStart + i * detailZs.length + j, detailVerticesStart + ipp * detailZs.length + j);
                                inside = true;
                                colPos++;
                            }
                        }
                    }
                    else {
                        if (ribLeft.right[colPos] < detailZ || ribRight.left[colPos] < detailZ) {
                            pushQuad$$1(triangles0, flipped2, detailVerticesStart + i * detailZs.length + j - 1, detailVerticesStart + ipp * detailZs.length + j - 1, vsStart + colPos * 2, vsStart + colPos * 2 + 1);
                            inside = false;
                            colPos++;
                            if (ribLeft.right[colPos] < detailZ || ribRight.left[colPos] < detailZ) {
                                j--;
                            }
                        }
                        else {
                            pushQuad$$1(triangles0, flipped2, detailVerticesStart + i * detailZs.length + j, detailVerticesStart + i * detailZs.length + j - 1, detailVerticesStart + ipp * detailZs.length + j, detailVerticesStart + ipp * detailZs.length + j - 1);
                        }
                    }
                }
                vsStart += ribLeft.right.length * 2;
            }
            //console.log('trinagle', triangles0.max(), vertices.length, triangles0.length, triangles0.toSource(),
            // triangles0.map(i => vertices[i].$).toSource() )
            const triangles = triangles0.map(index => index + mesh.vertices.length);
            //assert(normals.every(n => n.hasLength(1)), normals.find(n => !n.hasLength(1)).length() +'
            // '+normals.findIndex(n => !n.hasLength(1)))
            Array.prototype.push.apply(mesh.vertices, vertices);
            Array.prototype.push.apply(mesh.TRIANGLES, triangles);
            Array.prototype.push.apply(mesh.normals, normals);
            //this.addEdgeLines(mesh)
        }
    }

    var earcut_1 = earcut;
    var default_1 = earcut;

    function earcut(data, holeIndices, dim) {

        dim = dim || 2;

        var hasHoles = holeIndices && holeIndices.length,
            outerLen = hasHoles ? holeIndices[0] * dim : data.length,
            outerNode = linkedList(data, 0, outerLen, dim, true),
            triangles = [];

        if (!outerNode) return triangles;

        var minX, minY, maxX, maxY, x, y, invSize;

        if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);

        // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
        if (data.length > 80 * dim) {
            minX = maxX = data[0];
            minY = maxY = data[1];

            for (var i = dim; i < outerLen; i += dim) {
                x = data[i];
                y = data[i + 1];
                if (x < minX) minX = x;
                if (y < minY) minY = y;
                if (x > maxX) maxX = x;
                if (y > maxY) maxY = y;
            }

            // minX, minY and invSize are later used to transform coords into integers for z-order calculation
            invSize = Math.max(maxX - minX, maxY - minY);
            invSize = invSize !== 0 ? 1 / invSize : 0;
        }

        earcutLinked(outerNode, triangles, dim, minX, minY, invSize);

        return triangles;
    }

    // create a circular doubly linked list from polygon points in the specified winding order
    function linkedList(data, start, end, dim, clockwise) {
        var i, last;

        if (clockwise === (signedArea(data, start, end, dim) > 0)) {
            for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
        } else {
            for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
        }

        if (last && equals$2(last, last.next)) {
            removeNode(last);
            last = last.next;
        }

        return last;
    }

    // eliminate colinear or duplicate points
    function filterPoints(start, end) {
        if (!start) return start;
        if (!end) end = start;

        var p = start,
            again;
        do {
            again = false;

            if (!p.steiner && (equals$2(p, p.next) || area(p.prev, p, p.next) === 0)) {
                removeNode(p);
                p = end = p.prev;
                if (p === p.next) break;
                again = true;

            } else {
                p = p.next;
            }
        } while (again || p !== end);

        return end;
    }

    // main ear slicing loop which triangulates a polygon (given as a linked list)
    function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
        if (!ear) return;

        // interlink polygon nodes in z-order
        if (!pass && invSize) indexCurve(ear, minX, minY, invSize);

        var stop = ear,
            prev, next;

        // iterate through ears, slicing them one by one
        while (ear.prev !== ear.next) {
            prev = ear.prev;
            next = ear.next;

            if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
                // cut off the triangle
                triangles.push(prev.i / dim);
                triangles.push(ear.i / dim);
                triangles.push(next.i / dim);

                removeNode(ear);

                // skipping the next vertice leads to less sliver triangles
                ear = next.next;
                stop = next.next;

                continue;
            }

            ear = next;

            // if we looped through the whole remaining polygon and can't find any more ears
            if (ear === stop) {
                // try filtering points and slicing again
                if (!pass) {
                    earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);

                // if this didn't work, try curing all small self-intersections locally
                } else if (pass === 1) {
                    ear = cureLocalIntersections(ear, triangles, dim);
                    earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);

                // as a last resort, try splitting the remaining polygon into two
                } else if (pass === 2) {
                    splitEarcut(ear, triangles, dim, minX, minY, invSize);
                }

                break;
            }
        }
    }

    // check whether a polygon node forms a valid ear with adjacent nodes
    function isEar(ear) {
        var a = ear.prev,
            b = ear,
            c = ear.next;

        if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

        // now make sure we don't have other points inside the potential ear
        var p = ear.next.next;

        while (p !== ear.prev) {
            if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
                area(p.prev, p, p.next) >= 0) return false;
            p = p.next;
        }

        return true;
    }

    function isEarHashed(ear, minX, minY, invSize) {
        var a = ear.prev,
            b = ear,
            c = ear.next;

        if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

        // triangle bbox; min & max are calculated like this for speed
        var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),
            minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),
            maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),
            maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);

        // z-order range for the current triangle bbox;
        var minZ = zOrder(minTX, minTY, minX, minY, invSize),
            maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);

        var p = ear.prevZ,
            n = ear.nextZ;

        // look for points inside the triangle in both directions
        while (p && p.z >= minZ && n && n.z <= maxZ) {
            if (p !== ear.prev && p !== ear.next &&
                pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
                area(p.prev, p, p.next) >= 0) return false;
            p = p.prevZ;

            if (n !== ear.prev && n !== ear.next &&
                pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&
                area(n.prev, n, n.next) >= 0) return false;
            n = n.nextZ;
        }

        // look for remaining points in decreasing z-order
        while (p && p.z >= minZ) {
            if (p !== ear.prev && p !== ear.next &&
                pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
                area(p.prev, p, p.next) >= 0) return false;
            p = p.prevZ;
        }

        // look for remaining points in increasing z-order
        while (n && n.z <= maxZ) {
            if (n !== ear.prev && n !== ear.next &&
                pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&
                area(n.prev, n, n.next) >= 0) return false;
            n = n.nextZ;
        }

        return true;
    }

    // go through all polygon nodes and cure small local self-intersections
    function cureLocalIntersections(start, triangles, dim) {
        var p = start;
        do {
            var a = p.prev,
                b = p.next.next;

            if (!equals$2(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {

                triangles.push(a.i / dim);
                triangles.push(p.i / dim);
                triangles.push(b.i / dim);

                // remove two nodes involved
                removeNode(p);
                removeNode(p.next);

                p = start = b;
            }
            p = p.next;
        } while (p !== start);

        return p;
    }

    // try splitting polygon into two and triangulate them independently
    function splitEarcut(start, triangles, dim, minX, minY, invSize) {
        // look for a valid diagonal that divides the polygon into two
        var a = start;
        do {
            var b = a.next.next;
            while (b !== a.prev) {
                if (a.i !== b.i && isValidDiagonal(a, b)) {
                    // split the polygon in two by the diagonal
                    var c = splitPolygon(a, b);

                    // filter colinear points around the cuts
                    a = filterPoints(a, a.next);
                    c = filterPoints(c, c.next);

                    // run earcut on each half
                    earcutLinked(a, triangles, dim, minX, minY, invSize);
                    earcutLinked(c, triangles, dim, minX, minY, invSize);
                    return;
                }
                b = b.next;
            }
            a = a.next;
        } while (a !== start);
    }

    // link every hole into the outer loop, producing a single-ring polygon without holes
    function eliminateHoles(data, holeIndices, outerNode, dim) {
        var queue = [],
            i, len, start, end, list;

        for (i = 0, len = holeIndices.length; i < len; i++) {
            start = holeIndices[i] * dim;
            end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
            list = linkedList(data, start, end, dim, false);
            if (list === list.next) list.steiner = true;
            queue.push(getLeftmost(list));
        }

        queue.sort(compareX);

        // process holes from left to right
        for (i = 0; i < queue.length; i++) {
            eliminateHole(queue[i], outerNode);
            outerNode = filterPoints(outerNode, outerNode.next);
        }

        return outerNode;
    }

    function compareX(a, b) {
        return a.x - b.x;
    }

    // find a bridge between vertices that connects hole with an outer ring and and link it
    function eliminateHole(hole, outerNode) {
        outerNode = findHoleBridge(hole, outerNode);
        if (outerNode) {
            var b = splitPolygon(outerNode, hole);
            filterPoints(b, b.next);
        }
    }

    // David Eberly's algorithm for finding a bridge between hole and outer polygon
    function findHoleBridge(hole, outerNode) {
        var p = outerNode,
            hx = hole.x,
            hy = hole.y,
            qx = -Infinity,
            m;

        // find a segment intersected by a ray from the hole's leftmost point to the left;
        // segment's endpoint with lesser x will be potential connection point
        do {
            if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
                var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
                if (x <= hx && x > qx) {
                    qx = x;
                    if (x === hx) {
                        if (hy === p.y) return p;
                        if (hy === p.next.y) return p.next;
                    }
                    m = p.x < p.next.x ? p : p.next;
                }
            }
            p = p.next;
        } while (p !== outerNode);

        if (!m) return null;

        if (hx === qx) return m.prev; // hole touches outer segment; pick lower endpoint

        // look for points inside the triangle of hole point, segment intersection and endpoint;
        // if there are no points found, we have a valid connection;
        // otherwise choose the point of the minimum angle with the ray as connection point

        var stop = m,
            mx = m.x,
            my = m.y,
            tanMin = Infinity,
            tan;

        p = m.next;

        while (p !== stop) {
            if (hx >= p.x && p.x >= mx && hx !== p.x &&
                    pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {

                tan = Math.abs(hy - p.y) / (hx - p.x); // tangential

                if ((tan < tanMin || (tan === tanMin && p.x > m.x)) && locallyInside(p, hole)) {
                    m = p;
                    tanMin = tan;
                }
            }

            p = p.next;
        }

        return m;
    }

    // interlink polygon nodes in z-order
    function indexCurve(start, minX, minY, invSize) {
        var p = start;
        do {
            if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);
            p.prevZ = p.prev;
            p.nextZ = p.next;
            p = p.next;
        } while (p !== start);

        p.prevZ.nextZ = null;
        p.prevZ = null;

        sortLinked(p);
    }

    // Simon Tatham's linked list merge sort algorithm
    // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
    function sortLinked(list) {
        var i, p, q, e, tail, numMerges, pSize, qSize,
            inSize = 1;

        do {
            p = list;
            list = null;
            tail = null;
            numMerges = 0;

            while (p) {
                numMerges++;
                q = p;
                pSize = 0;
                for (i = 0; i < inSize; i++) {
                    pSize++;
                    q = q.nextZ;
                    if (!q) break;
                }
                qSize = inSize;

                while (pSize > 0 || (qSize > 0 && q)) {

                    if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                        e = p;
                        p = p.nextZ;
                        pSize--;
                    } else {
                        e = q;
                        q = q.nextZ;
                        qSize--;
                    }

                    if (tail) tail.nextZ = e;
                    else list = e;

                    e.prevZ = tail;
                    tail = e;
                }

                p = q;
            }

            tail.nextZ = null;
            inSize *= 2;

        } while (numMerges > 1);

        return list;
    }

    // z-order of a point given coords and inverse of the longer side of data bbox
    function zOrder(x, y, minX, minY, invSize) {
        // coords are transformed into non-negative 15-bit integer range
        x = 32767 * (x - minX) * invSize;
        y = 32767 * (y - minY) * invSize;

        x = (x | (x << 8)) & 0x00FF00FF;
        x = (x | (x << 4)) & 0x0F0F0F0F;
        x = (x | (x << 2)) & 0x33333333;
        x = (x | (x << 1)) & 0x55555555;

        y = (y | (y << 8)) & 0x00FF00FF;
        y = (y | (y << 4)) & 0x0F0F0F0F;
        y = (y | (y << 2)) & 0x33333333;
        y = (y | (y << 1)) & 0x55555555;

        return x | (y << 1);
    }

    // find the leftmost node of a polygon ring
    function getLeftmost(start) {
        var p = start,
            leftmost = start;
        do {
            if (p.x < leftmost.x) leftmost = p;
            p = p.next;
        } while (p !== start);

        return leftmost;
    }

    // check if a point lies within a convex triangle
    function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
        return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&
               (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&
               (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
    }

    // check if a diagonal between two polygon nodes is valid (lies in polygon interior)
    function isValidDiagonal(a, b) {
        return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) &&
               locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);
    }

    // signed area of a triangle
    function area(p, q, r) {
        return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
    }

    // check if two points are equal
    function equals$2(p1, p2) {
        return p1.x === p2.x && p1.y === p2.y;
    }

    // check if two segments intersect
    function intersects(p1, q1, p2, q2) {
        if ((equals$2(p1, q1) && equals$2(p2, q2)) ||
            (equals$2(p1, q2) && equals$2(p2, q1))) return true;
        return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 &&
               area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;
    }

    // check if a polygon diagonal intersects any polygon segments
    function intersectsPolygon(a, b) {
        var p = a;
        do {
            if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
                    intersects(p, p.next, a, b)) return true;
            p = p.next;
        } while (p !== a);

        return false;
    }

    // check if a polygon diagonal is locally inside the polygon
    function locallyInside(a, b) {
        return area(a.prev, a, a.next) < 0 ?
            area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :
            area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
    }

    // check if the middle point of a polygon diagonal is inside the polygon
    function middleInside(a, b) {
        var p = a,
            inside = false,
            px = (a.x + b.x) / 2,
            py = (a.y + b.y) / 2;
        do {
            if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&
                    (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))
                inside = !inside;
            p = p.next;
        } while (p !== a);

        return inside;
    }

    // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
    // if one belongs to the outer ring and another to a hole, it merges it into a single ring
    function splitPolygon(a, b) {
        var a2 = new Node(a.i, a.x, a.y),
            b2 = new Node(b.i, b.x, b.y),
            an = a.next,
            bp = b.prev;

        a.next = b;
        b.prev = a;

        a2.next = an;
        an.prev = a2;

        b2.next = a2;
        a2.prev = b2;

        bp.next = b2;
        b2.prev = bp;

        return b2;
    }

    // create a node and optionally link it with previous one (in a circular doubly linked list)
    function insertNode(i, x, y, last) {
        var p = new Node(i, x, y);

        if (!last) {
            p.prev = p;
            p.next = p;

        } else {
            p.next = last.next;
            p.prev = last;
            last.next.prev = p;
            last.next = p;
        }
        return p;
    }

    function removeNode(p) {
        p.next.prev = p.prev;
        p.prev.next = p.next;

        if (p.prevZ) p.prevZ.nextZ = p.nextZ;
        if (p.nextZ) p.nextZ.prevZ = p.prevZ;
    }

    function Node(i, x, y) {
        // vertice index in coordinates array
        this.i = i;

        // vertex coordinates
        this.x = x;
        this.y = y;

        // previous and next vertice nodes in a polygon ring
        this.prev = null;
        this.next = null;

        // z-order curve value
        this.z = null;

        // previous and next nodes in z-order
        this.prevZ = null;
        this.nextZ = null;

        // indicates whether this is a steiner point
        this.steiner = false;
    }

    // return a percentage difference between the polygon area and its triangulation area;
    // used to verify correctness of triangulation
    earcut.deviation = function (data, holeIndices, dim, triangles) {
        var hasHoles = holeIndices && holeIndices.length;
        var outerLen = hasHoles ? holeIndices[0] * dim : data.length;

        var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
        if (hasHoles) {
            for (var i = 0, len = holeIndices.length; i < len; i++) {
                var start = holeIndices[i] * dim;
                var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
                polygonArea -= Math.abs(signedArea(data, start, end, dim));
            }
        }

        var trianglesArea = 0;
        for (i = 0; i < triangles.length; i += 3) {
            var a = triangles[i] * dim;
            var b = triangles[i + 1] * dim;
            var c = triangles[i + 2] * dim;
            trianglesArea += Math.abs(
                (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -
                (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
        }

        return polygonArea === 0 && trianglesArea === 0 ? 0 :
            Math.abs((trianglesArea - polygonArea) / polygonArea);
    };

    function signedArea(data, start, end, dim) {
        var sum = 0;
        for (var i = start, j = end - dim; i < end; i += dim) {
            sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
            j = i;
        }
        return sum;
    }

    // turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts
    earcut.flatten = function (data) {
        var dim = data[0][0].length,
            result = {vertices: [], holes: [], dimensions: dim},
            holeIndex = 0;

        for (var i = 0; i < data.length; i++) {
            for (var j = 0; j < data[i].length; j++) {
                for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);
            }
            if (i > 0) {
                holeIndex += data[i - 1].length;
                result.holes.push(holeIndex);
            }
        }
        return result;
    };
    earcut_1.default = default_1;

    var nerdamer_core = createCommonjsModule(function (module) {
    /*
     * Author : Martin Donk
     * Website : http://www.nerdamer.com
     * Email : martin.r.donk@gmail.com
     * Source : https://github.com/jiggzson/nerdamer
     */

    /* global trig, trigh */

    var nerdamer = (function(imports) { 

        var version = '0.7.16',

            _ = new Parser(), //nerdamer's parser
            //import bigInt
            bigInt = imports.bigInt,
            
            Groups = {},
            
            //container of pregenerated primes
            PRIMES = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113
                ,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,
                257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,
                401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,
                563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,
                709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,
                877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,
                1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,
                1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,
                1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,
                1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,
                1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,
                1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,
                1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083],
            //this is the class which holds the utilities which are exported to the core
            //All utility functions which are to be made available to the core should be added to this object
            Utils = {},
            
            //Settings
            Settings = {
                //the max number up to which to cache primes. Making this too high causes performance issues
                init_primes: 1000,
                
                exclude: [],
                //If you don't care about division by zero for example then this can be set to true. 
                //Has some nasty side effects so choose carefully.
                suppress_errors: false,
                //the global used to invoke the libary to parse to a number. Normally cos(9) for example returns
                //cos(9) for convenience but parse to number will always try to return a number if set to true. 
                PARSE2NUMBER: false,
                //this flag forces the a clone to be returned when add, subtract, etc... is called
                SAFE: false,
                //the symbol to use for imaginary symbols
                IMAGINARY: 'i',
                //the modules used to link numeric function holders
                FUNCTION_MODULES: [Math],
                //Allow certain characters
                ALLOW_CHARS: ['π'],
                //Allow nerdamer to convert multi-character variables
                USE_MULTICHARACTER_VARS: true,
                //Allow changing of power operator
                POWER_OPERATOR: '^',
                //The variable validation regex
                //VALIDATION_REGEX: /^[a-z_][a-z\d\_]*$/i
                VALIDATION_REGEX: /^[a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ][a-z\d\_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]*$/i,
                //Aliases
                ALIASES: {
                    'π': 'pi'
                },
                POSITIVE_MULTIPLIERS: false,
                //Cached items
                CACHE: {},
                //Print out warnings or not
                SILENCE_WARNINGS: false,
                //Precision
                PRECISION: 40
            },
            
            //Container for custom operators
            CUSTOM_OPERATORS = {

            },
            
            //Add the groups. These have been reorganized as of v0.5.1 to make CP the highest group
            //The groups that help with organizing during parsing. Note that for FN is still a function even 
            //when it's raised to a symbol, which typically results in an EX
            N   = Groups.N  = 1, // A number
            P   = Groups.P  = 2, // A number with a rational power e.g. 2^(3/5). 
            S   = Groups.S  = 3, // A single variable e.g. x. 
            EX  = Groups.EX = 4, // An exponential
            FN  = Groups.FN = 5, // A function
            PL  = Groups.PL = 6, // A symbol/expression having same name with different powers e.g. 1/x + x^2
            CB  = Groups.CB = 7, // A symbol/expression composed of one or more variables through multiplication e.g. x*y
            CP  = Groups.CP = 8, // A symbol/expression composed of one variable and any other symbol or number x+1 or x+y
            
            CONST_HASH = Settings.CONST_HASH = '#',
            
            //GLOBALS
            
            PARENTHESIS = Settings.PARENTHESIS = 'parens',

            //the function which represent vector
            VECTOR = Settings.VECTOR = 'vector',

            SQRT = Settings.SQRT = 'sqrt',
            
            ABS = Settings.ABS = 'abs',
            
            FACTORIAL = Settings.FACTORIAL = 'factorial',
            
            DOUBLEFACTORIAL = Settings.DOUBLEFACTORIAL = 'dfactorial',

            //the storage container "memory" for parsed expressions
            EXPRESSIONS = [],
            
            //variables
            VARS = {},
            
            //the container used to store all the reserved functions
            RESERVED = [],

            WARNINGS = [],
            
            /**
             * Checks to see if value is one of nerdamer's reserved names
             * @param {String} value
             * @return boolean
             */
            isReserved = Utils.isReserved = function(value) { 
                return RESERVED.indexOf(value) !== -1;
            },
            
            /**
             * Checks to see that all symbols in array are the same
             * @param {Symbol[]} arr
             * @returns {bool}
             */
            allSame = Utils.allSame = function(arr) {
                var last = arr[0];
                for(var i=1, l=arr.length; i<l; i++) 
                    if(!arr[i].equals(last))
                        return false;
                return true;
            },

            /**
             * Use this when errors are suppressible
             * @param {String} msg
             */
            err = function(msg, ErrorObj) {
                if(!Settings.suppress_errors) {
                    if(ErrorObj)
                        throw new ErrorObj(msg);
                    else
                        throw new Error(msg);
                }
            },
            
            /**
             * Used to pass warnings or low severity errors about the library
             * @param msg
             */
            warn = Utils.warn = function(msg) {
                WARNINGS.push(msg);
                if(!Settings.SILENCE_WARNINGS && console && console.warn) {
                    console.warn(msg);
                }
            },
            
            /**
             * Enforces rule: "must start with a letter or underscore and 
             * can have any number of underscores, letters, and numbers thereafter."
             * @param name The name of the symbol being checked
             * @param {String} typ - The type of symbols that's being validated
             * @throws {Exception} - Throws an exception on fail
             */
            validateName = Utils.validateName = function(name, typ) { 
                typ = typ || 'variable';
                if(Settings.ALLOW_CHARS.indexOf(name) !== -1)
                    return;
                var regex = Settings.VALIDATION_REGEX;
                if(!(regex.test(name)) ) {
                    throw new Error(name+' is not a valid '+typ+' name');
                }
            },
            /**
             * Finds intersection of two arrays
             * @param {array} a
             * @param {Array} b
             * @param {Array} compare_fn
             * @returns {Array}
             */
            intersection = Utils.intersection = function(a, b, compare_fn) {
                var c = [];
                if(a.length > b.length) {
                    var t = a; a = b; b = t;
                }
                b = b.slice();
                var l = a.length, l2 = b.length;
                for(var i=0; i<l; i++) {
                    var item = a[i];
                    for(var j=0; j<l2; j++) {
                        var item2 = b[j];
                        if(item2 === undefined) continue;
                        var equals = compare_fn ? compare_fn(item, item2) : item === item2;
                        if(equals) {
                            b[j] = undefined;
                            c.push(item);
                            continue;
                        }
                    }
                }
                return c;
            },
            //convert number from scientific format to decimal format
            scientificToDecimal = Utils.scientificToDecimal = function(num) {
                //if the number is in scientific notation remove it
                if(/\d+\.?\d*e[\+\-]*\d+/i.test(num)) {
                    var zero = '0',
                        parts = String(num).toLowerCase().split('e'), //split into coeff and exponent
                        e = parts.pop(),//store the exponential part
                        l = Math.abs(e), //get the number of zeros
                        sign = e/l,
                        coeff_array = parts[0].split('.');
                    if(sign === -1) {
                        num = zero + '.' + new Array(l).join(zero) + coeff_array.join('');
                    }
                    else {
                        var dec = coeff_array[1];
                        if(dec) l = l - dec.length;
                        num = coeff_array.join('') + new Array(l+1).join(zero);
                    }
                }

                return num;
            },
            /**
             * Checks if number is a prime number
             * @param {Number} n - the number to be checked
             */
            isPrime  = Utils.isPrime = function(n) {
                var q = Math.floor(Math.sqrt(n));
                for (var i = 2; i <= q; i++) {
                    if (n % i === 0) return false;
                }
                return true;
            },
            
            /**
             * Checks to see if a number or Symbol is a fraction
             * @param {Number|Symbol} num
             * @returns {boolean}
             */
            isFraction = Utils.isFraction = function(num) {
                if(isSymbol(num)) return isFraction(num.multiplier.toDecimal());
                return (num % 1 !== 0);
            },
            
            /**
             * Checks to see if the object provided is a Symbol
             * @param {Object} obj
             */
            isSymbol = Utils.isSymbol = function(obj) {
                return (obj instanceof Symbol);
            },
            
            /**
             * Checks to see if the object provided is an Expression
             * @param {Object} obj
             */
            isExpression = Utils.isExpression = function(obj) {
                return (obj instanceof Expression);
            },
            
            /**
             * Separates out the variables into terms of variabls. 
             * e.g. x+y+x*y+sqrt(2)+pi returns 
             * {x: x, y: y, x y: x*y, constants: sqrt(2)+pi
             * @param {type} symbol
             * @param {type} o
             * @returns {undefined}
             * @throws {Error} for expontentials
             */
            separate = Utils.separate = function(symbol, o) {
                symbol = _.expand(symbol);
                o = o || {};
                var insert = function(key, sym) {
                    if(!o[key])
                        o[key] = new Symbol(0);
                    o[key] = _.add(o[key], sym.clone());
                };
                symbol.each(function(x) {
                    if(x.isConstant('all')) 
                        insert('constants', x);
                    else if(x.group === S) {
                        insert(x.value, x);
                    }
                    else if(x.group === FN && (x.fname === ABS || x.fname === '')) {
                        separate(x.args[0]);
                    }
                    else if(x.group === EX || x.group === FN) {
                        throw new Error('Unable to separate. Term cannot be a function!');
                    }
                    else {
                        insert(variables(x).join(' '), x);
                    }
                });
                
                return o;
            },
            
            //fills holes in an array with zero symbol
            fillHoles = Utils.fillHoles = function(arr, n) {
                n = n || arr.length;
                for(var i=0; i<n; i++) {
                    var sym = arr[i];
                    if(!sym)
                        arr[i] = new Symbol(0);
                }
                return arr;
            },
            
            /**
             * 
             * Checks to see if the object provided is a Vector
             * @param {Object} obj
             */
            isVector = Utils.isVector = function(obj) {
                return (obj instanceof Vector);
            },
            
            /**
             * Checks to see if the object provided is a Matrix
             * @param {Object} obj
             */
            isMatrix = Utils.isMatrix = function(obj) {
                return (obj instanceof Matrix);
            },
            
            /**
             * Checks to see if a symbol is in group N
             * @param {Symbol} symbol
             */
            isNumericSymbol = Utils.isNumericSymbol = function(symbol) {
                return symbol.group === N;
            },

            /**
             * Checks to see if a symbol is a variable with no multiplier nor power
             * @param {Symbol} symbol
             */
            isVariableSymbol = Utils.isVariableSymbol = function(symbol) {
                return symbol.group === S && symbol.multiplier.equals(1) && symbol.power.equals(1);
            },
            
            /**
             * Checks to see if the object provided is an Array
             * @param {Object} arr
             */
            isArray = Utils.isArray = function(arr) {
                return arr instanceof Array;
            },

            /**
             * Checks to see if a number is an integer
             * @param {Number} num
             */
            isInt = Utils.isInt = function(num) {
                return num % 1 === 0;
            },

            /**
             * @param {Number|Symbol} obj
             * @returns {boolean}
             */
            isNegative = Utils.isNegative = function(obj) {
                if( isSymbol(obj) ) {
                    obj = obj.multiplier;
                }
                return obj.lessThan(0);
            },
            
            /**
             * @param {String} str
             * @returns {String} - returns a formatted string surrounded by brackets
             */
            inBrackets = Utils.inBrackets = function(str) {
                return '('+str+')';
            },
            
            /**
             * A helper function to replace parts of string
             * @param {String} str - The original string
             * @param {Integer} from - The starting index
             * @param {Integer} to - The ending index
             * @param {String} with_str - The replacement string
             * @returns {String} - A formatted string
             */
            stringReplace = Utils.stringReplace = function(str, from, to, with_str) {
                return str.substr(0, from)+with_str+str.substr(to, str.length);
            },
            
            /**
             * the Parser uses this to check if it's allowed to convert the obj to type Symbol
             * @param {Object} obj
             * @returns {boolean}
             */
            customType = Utils.customType = function(obj) {
                return obj !== undefined && obj.custom;
            },
            
            /**
             * Checks to see if numbers are both negative or are both positive
             * @param {Number} a
             * @param {Number} b
             * @returns {boolean}
             */
            sameSign = Utils.sameSign = function(a, b) {
                return (a < 0) === (b < 0);
            },
            
            /**
             * A helper function to replace multiple occurences in a string. Takes multiple arguments
             * @example format('{0} nice, {0} sweet')
             * //returns 'something nice, something sweet'
             */
            format = Utils.format = function() {
                var args = [].slice.call(arguments),
                    str = args.shift();
                    var new_str = str.replace(/{(\d+)}/g, function(match, index) {
                        var arg = args[index];
                        return typeof arg === 'function' ? arg() : arg;
                    });

                    return new_str;
            },
            
            /**
             * Returns an array of all the keys in an array
             * @param {Object} obj
             * @returns {Array}
             */
            keys = Utils.keys = Object.keys,

            /**
             * Returns the first encountered item in an object. Items do not have a fixed order in objects 
             * so only use if you need any first random or if there's only one item in the object
             * @param {Object} obj
             * @returns {*}
             */
            firstObject = Utils.firstObject = function(obj, key) {
                for( var x in obj ) 
                    break;
                if(key)
                    return x;
                return obj[x];
            },
            
            /**
             * Substitutes out variables for two symbols, parses them to a number and them compares them numerically
             * @param {Symbol} sym1
             * @param {Symbol} sym2
             * @param {String[]} vars - an optional array of variables to use
             * @returns {bool}
             */
            compare = Utils.compare = function(sym1, sym2, vars) {
                var n = 5; //a random number between 1 and 5 is good enough
                var scope = {}; // scope object with random numbers generated using vars
                var comparison;
                for(var i=0; i<vars.length; i++) 
                    scope[vars[i]] = new Symbol(Math.floor(Math.random()*n)+1);
                block('PARSE2NUMBER', function() {
                    comparison = _.parse(sym1, scope).equals(_.parse(sym2, scope));
                });
                return comparison;
            },
            
            /**
             * Returns the minimum number in an array
             * @param {Array} arr
             * @returns {Number} 
             */
            arrayMax = Utils.arrayMax = function(arr) {
                return Math.max.apply(undefined, arr);
            },

            /**
             * Returns the maximum number in an array
             * @param {Array} arr
             * @returns {Number} 
             */
            arrayMin = Utils.arrayMin = function(arr) {
                return Math.min.apply(undefined, arr);
            },
            
            /**
             * Clones array with clonable items
             * @param {Array} arr
             * @returns {Array}
             */
            arrayClone = Utils.arrayClone = function(arr) {
                var new_array = [], l = arr.length;
                for(var i=0; i<l; i++) new_array[i] = arr[i].clone();
                return new_array;
            },
            
            comboSort = Utils.comboSort = function(a, b) {
                var l = a.length,
                    combined = []; //the linker
                for(var i=0; i<a.length; i++) {
                    combined.push([a[i], b[i]]); //create the map
                }

                combined.sort(function(x, y) {
                    return x[0] - y[0];
                });

                var na = [], nb = [];

                for(i=0; i<l; i++) {
                    na.push(combined[i][0]);
                    nb.push(combined[i][1]);
                }

                return [na, nb];
            },
            
            decompose_fn = Utils.decompose_fn = function(fn, wrt, as_obj) { 
                var ax, a, x, b;
                if(fn.group === CP) {
                    var t = _.expand(fn.clone()).stripVar(wrt); 
                    ax = _.subtract(fn.clone(), t.clone());
                    b = t;
                }
                else
                    ax = fn.clone(); 
                a = ax.stripVar(wrt);
                x = _.divide(ax.clone(), a.clone());
                b = b || new Symbol(0);
                if(as_obj) 
                    return {
                        a: a,
                        x: x,
                        ax: ax,
                        b: b
                    };
                return [a, x, ax, b];
            },
             /**
             * Rounds a number up to x decimal places
             * @param {Number} x
             * @param {Number} s
             */
            _round = Utils.round = function(x, s) { 
                s = typeof s === 'undefined' ? 14 : s;
                return Math.round( x*Math.pow( 10,s ) )/Math.pow( 10,s );
            },
            
            /**
             * This method traverses the symbol structure and grabs all the variables in a symbol. The variable
             * names are then returned in alphabetical order.
             * @param {Symbol} obj
             * @param {Boolean} poly 
             * @param {Object} vars - An object containing the variables. Do not pass this in as it generated 
             * automatically. In the future this will be a Collector object.
             * @returns {String[]} - An array containing variable names
             */
            variables = Utils.variables = function(obj, poly, vars) { 
                vars = vars || {
                    c: [],
                    add: function(value) {
                        if(this.c.indexOf(value) === -1 && isNaN(value)) this.c.push(value);
                    }
                };

                if(isSymbol(obj)) { 
                    var group = obj.group,
                        prevgroup = obj.previousGroup;
                    if(group === EX) variables(obj.power, poly, vars);
                    
                    if(group === CP || group === CB || prevgroup === CP || prevgroup === CB) {
                        for(var x in obj.symbols) variables(obj.symbols[x], poly, vars);
                    }
                    else if(group === S || prevgroup === S) { 
                        //very crude needs fixing. TODO
                        if(!(obj.value === 'e' || obj.value === 'pi'))
                            vars.add(obj.value);
                    }
                    else if(group === PL || prevgroup === PL) {
                        variables(firstObject(obj.symbols), poly, vars);
                    }
                    else if(group === EX) { 
                        if(!isNaN(obj.value)) vars.add(obj.value);
                        variables(obj.power, poly, vars);
                    }
                    else if(group === FN && !poly) { 
                        for(var i=0; i<obj.args.length; i++) {
                            variables(obj.args[i], poly, vars);
                        }
                    }
                }
                return vars.c.sort();
            },
            
            getU = Utils.getU = function(symbol) {
                //start with u
                var u = 'u', //start with u
                    v = u, //init with u
                    c = 0, //postfix number
                    vars = variables(symbol);
                //make sure this variable isn't reserved and isn't in the variable list
                while(!(RESERVED.indexOf(v) === -1 && vars.indexOf(v) === -1))  
                    v = u + c++;
                //get an empty slot. It seems easier to just push but the
                //problem is that we may have some which are created by clearU
                for(var i=0, l=RESERVED.length; i<=l; i++)
                    //reserved cannot equals false or 0 so we can safely check for a falsy type
                    if(!RESERVED[i]) {
                        RESERVED[i] = v; //reserve the variable
                        break;
                    }
                return v;
            },
            
            clearU = Utils.clearU = function(u) {
                var indx = RESERVED.indexOf(u);
                if(indx !== -1)
                    RESERVED[indx] = undefined;
            },
            
            /**
             * Loops through each item in object and calls function with item as param
             * @param {Object|Array} obj
             * @param {Function} fn 
             */
            each = Utils.each = function(obj, fn) {
                if(isArray(obj)) {
                    var l = obj.length;
                    for(var i=0; i<l; i++) fn.call(obj, i);
                }
                else {
                    for(var x in obj) if(obj.hasOwnProperty(x)) fn.call(obj, x);
                }
            },
            
            /**
             * Checks to see if a number is an even number
             * @param {Number} num
             * @returns {boolean}
             */
            even = Utils.even = function(num) {
                return num % 2 === 0;
            },
            
            /**
             * Checks to see if a fraction is divisible by 2
             * @param {Number} num
             * @returns {boolean}
             */
            evenFraction = Utils.evenFraction = function(num) {
                return 1/( num % 1) % 2 === 0;
            },
            
            /**
             * Strips duplicates out of an array
             * @param {Array} arr
             */
            arrayUnique = Utils.arrayUnique = function(arr) {
                var l = arr.length, a = [];
                for(var i=0; i<l; i++) {
                    var item = arr[i];
                    if(a.indexOf(item) === -1) a.push(item);
                }
                return a;
            },
            
            /**
             * Reserves the names in an object so they cannot be used as function names
             * @param {Object} obj
             */
            reserveNames = Utils.reserveNames = function(obj) {
                var add = function(item) {
                    if(RESERVED.indexOf(item) === -1) RESERVED.push(item);
                };
                
                if(typeof obj === 'string') add(obj);
                else {
                    each(obj, function(x) {
                        add(x);
                    });
                }  
            },

            /**
             * Removes an item from either an array or an object. If the object is an array, the index must be 
             * specified after the array. If it's an object then the key must be specified
             * @param {Object|Array} obj
             * @param {Integer} indexOrKey
             */
            remove = Utils.remove = function( obj, indexOrKey ) {
                var result;
                if( isArray(obj) ) {
                    result =  obj.splice(indexOrKey, 1)[0];
                }
                else {
                    result = obj[indexOrKey];
                    delete obj[indexOrKey];
                }
                return result;
            },
            
            /**
             * Creates a temporary block in which one of the global settings is temporarily modified while
             * the function is called. For instance if you want to parse directly to a number rather than have a symbolic
             * answer for a period you would set PARSE2NUMBER to true in the block.
             * @example block('PARSE2NUMBER', function(){//symbol being parsed to number}, true);
             * @param {String} setting - The setting being accessed
             * @param {Function} f 
             * @param {boolean} opt - The value of the setting in the block
             * @param {String} obj - The obj of interest. Usually a Symbol but could be any object
             */
            block = Utils.block = function(setting, f, opt, obj) {
                var current_setting = Settings[setting];
                Settings[setting] = opt === undefined ? true : !! opt;
                var retval = f.call(obj);
                Settings[setting] = current_setting;
                return retval;
            },

            /**
             * Converts function arguments to an array. Now used by gcd and lcm in Algebra.js :)
             * @param {Object} obj - arguments obj
             */
            arguments2Array = Utils.arguments2Array = function(obj) {
                return [].slice.call(obj);
            },
            
            getCoeffs = Utils.getCoeffs = function(symbol, wrt) {
                var coeffs = [];
                //we loop through the symbols and stick them in their respective 
                //containers e.g. y*x^2 goes to index 2
                symbol.each(function(term) {
                    if(term.contains(wrt)) {
                        //we want only the coefficient which in this case will be everything but the variable
                        //e.g. a*b*x -> a*b if the variable to solve for is x
                        var coeff = term.stripVar(wrt),
                            x = _.divide(term.clone(), coeff.clone()),
                            p = x.power.toDecimal();
                    }
                    else {
                        coeff = term;
                        p = 0;
                    }
                    var e = coeffs[p];
                    //if it exists just add it to it
                    coeffs[p] = e ? _.add(e, coeff) : coeff;
                    
                }, true);
                
                for(var i=0; i<coeffs.length; i++)
                    if(!coeffs[i])
                        coeffs[i] = new Symbol(0);
                //fill the holes
                return coeffs;
            },
            
            generatePrimes = Utils.generatePrimes = function(upto) {
                //get the last prime in the array
                var last_prime = PRIMES[PRIMES.length-1] || 2; 
                //no need to check if we've already encountered the number. Just check the cache.
                for(var i=last_prime; i<upto; i++) {
                    if(isPrime(i)) PRIMES.push(i);
                }
            },
            evaluate = Utils.evaluate = function (symbol) {
                return block('PARSE2NUMBER', function() {
                    return _.parse(symbol);
                }, true);
            },
            convertToVector = Utils.convertToVector = function(x) {
                if(isArray(x)) {
                    var vector = new Vector([]);
                    for(var i=0; i<x.length; i++) 
                        vector.elements.push(convertToVector(x[i]));
                    return vector;
                }
                //Ensure that a nerdamer ready object is returned
                if(!isSymbol(x))
                    return _.parse(x);
                return x;
            },
            //This object holds additional functions for nerdamer. Think of it as an extension of the Math object.
            //I really don't like touching objects which aren't mine hence the reason for Math2. The names of the 
            //functions within are pretty self-explanatory.
            Math2 = {
                csc: function(x) { return 1/Math.sin(x); },
                sec: function(x) { return 1/Math.cos(x); },
                cot: function(x) { return 1/Math.tan(x); },
                // https://gist.github.com/jiggzson/df0e9ae8b3b06ff3d8dc2aa062853bd8
                erf: function(x) {
                    var t = 1/(1+0.5*Math.abs(x));
                    var result = 1-t*Math.exp( -x*x -  1.26551223 +
                            t * ( 1.00002368 +
                            t * ( 0.37409196 +
                            t * ( 0.09678418 +
                            t * (-0.18628806 +
                            t * ( 0.27886807 +
                            t * (-1.13520398 +
                            t * ( 1.48851587 +
                            t * (-0.82215223 +
                            t * ( 0.17087277)))))))))
                        );
                    return x >= 0 ? result : -result;
                },
                bigpow: function(n, p) { 
                    if(!(n instanceof Frac))
                        n = Frac.create(n);
                    if(!(p instanceof Frac))
                        p = Frac.create(p);
                    var retval = new Frac(0);
                    if(p.isInteger()) {
                        retval.num = n.num.pow(p.toString());
                        retval.den = n.den.pow(p.toString());
                    }
                    else {
                        var num = Frac.create(Math.pow(n.num, p.num));
                        var den = Frac.create(Math.pow(n.den, p.num));

                        retval.num = Math2.nthroot(num, p.den.toString());
                        retval.den = Math2.nthroot(den, p.den);
                    }  
                    return retval;
                },
                //http://stackoverflow.com/questions/15454183/how-to-make-a-function-that-computes-the-factorial-for-numbers-with-decimals
                gamma: function(z) {
                    var g = 7;
                    var C = [
                        0.99999999999980993, 
                        676.5203681218851, 
                        -1259.1392167224028,
                        771.32342877765313, 
                        -176.61502916214059, 
                        12.507343278686905, 
                        -0.13857109526572012, 
                        9.9843695780195716e-6, 
                        1.5056327351493116e-7]
                    ;

                    if (z < 0.5) 
                        return Math.PI / (Math.sin(Math.PI * z) * Math2.gamma(1 - z));
                    else {
                        z -= 1;

                        var x = C[0];
                        for (var i = 1; i < g + 2; i++)
                        x += C[i] / (z + i);

                        var t = z + g + 0.5;
                        return Math.sqrt(2 * Math.PI) * Math.pow(t, (z + 0.5)) * Math.exp(-t) * x;
                    }
                },
                //factorial
                bigfactorial: function(x) {
                    var retval = new Frac(1);
                    for (var i = 2; i <= x; i++) 
                        retval = retval.multiply(new Frac(i));
                    return retval;
                },
                //https://en.wikipedia.org/wiki/Logarithm#Calculation
                bigLog: function(x) {
                    var
                    if(CACHE[x]) {
                        return Frac.quick.apply(null, CACHE[x].split('/'));
                    }
                    x = new Frac(x);
                    var n = 80;
                    var retval = new Frac(0); 
                    var a = x.subtract(new Frac(1));
                    var b = x.add(new Frac(1));
                    for(var i=0; i<n; i++) {
                        var t = new Frac(2*i+1);
                        var k = Math2.bigpow(a.divide(b), t);
                        var r = t.clone().invert().multiply(k);
                        retval = retval.add(r);
                        
                    }
                    return retval.multiply(new Frac(2));
                },
                //the factorial function but using the big library instead
                factorial: function(x) {
                    if(x < 0)
                        throw new Error('factorial not defined for negative numbers');
                    var retval=1;
                    for (var i = 2; i <= x; i++) retval = retval * i;
                    return retval;
                },
                //double factorial
                dfactorial: function(x) {
                    var even = x % 2 === 0;
                    // If x = even then n = x/2 else n = (x-1)/2
                    var n = even ? x/2 : (x+1)/2; 
                    //the return value
                    var r = new Frac(1);
                    //start the loop
                    if(even)
                        for(var i=1; i<=n; i++)
                            r = r.multiply(new Frac(2).multiply(new Frac(i)));
                    else
                        for(var i=1; i<=n; i++)
                            r = r.multiply(new Frac(2).multiply(new Frac(i)).subtract(new Frac(1)));
                    //done
                    return r;
                },
                GCD: function() {
                    var args = arrayUnique([].slice.call(arguments)
                            .map(function(x){ return Math.abs(x); })).sort(),
                        a = Math.abs(args.shift()),
                        n = args.length;

                    while(n-- > 0) { 
                        var b = Math.abs(args.shift());
                        while(true) {
                            a %= b;
                            if (a === 0) {
                                a = b;
                                break;
                            }
                            b %= a;
                            if (b === 0) break;                    }
                    }
                    return a;
                },
                QGCD: function() {
                    var args = [].slice.call(arguments);
                    var a = args[0];
                    for(var i=1; i<args.length; i++) {
                        var b = args[i];
                        var sign = a.isNegative() && b.isNegative() ? -1 : 1;
                        a = b.gcd(a);
                        if(sign < 0) a.negate();
                    }
                    return a;
                },
                LCM: function(a, b) {
                    return (a * b) / Math2.GCD(a, b); 
                },
                //pow but with the handling of negative numbers
                //http://stackoverflow.com/questions/12810765/calculating-cubic-root-for-negative-number
                pow: function(b, e) { 
                    if (b < 0) {
                        if (Math.abs(e) < 1) {
                            //nth root of a negative number is imaginary when n is even
                            if (1 / e % 2 === 0) return NaN;
                            return -Math.pow(Math.abs(b), e);
                        }
                    }
                    return Math.pow(b, e);
                },
                factor: function(n) {
                    var ifactors = Math2.ifactor(n);
                    var factors = new Symbol();
                    factors.symbols = {};
                    factors.group = CB;
                    for(var x in ifactors) {
                        var factor = new Symbol(1);
                        factor.group = P; //cheat a little
                        factor.value = x;
                        factor.power = new Symbol(ifactors[x]);
                        factors.symbols[x] = factor;
                    }
                    factors.updateHash();
                    return factors;
                },
                /**
                 * Uses trial division
                 * @param {Integer} n - the number being factored
                 * @param {object} factors -  the factors object
                 * @returns {object}
                 */
                sfactor: function(n, factors) { 
                    factors = factors || {};
                    var r = Math.floor(Math.sqrt(n));
                    var lcprime = PRIMES[PRIMES.length-1];
                    //a one-time cost... Hopefully ... And don't bother for more than a million
                    //takes too long
                    if(r > lcprime && n < 1e6) generatePrimes(r);
                    var l = PRIMES.length;
                    for(var i=0; i<l; i++) {
                        var prime = PRIMES[i];
                        //trial division
                        while(n%prime === 0) {
                            n = n/prime;
                            factors[prime] = (factors[prime] || 0)+1;
                        }
                    }
                    if(n > 1) factors[n] = 1;
                    return factors;
                },
                /**
                 * Pollard's rho
                 * @param {Integer} n
                 * @returns {object}
                 */
                ifactor: function(n) {  
                    n = String(n);
                    
                    if(n === '0')
                        return {'0': 1};
                    n = new bigInt(n); //convert to bigInt for safety
                    var sign = n.sign ? -1 : 1;
                    n = n.abs();
                    var factors = {}; //factor object being returned.
                    if(n.lt('65536')) { //less than 2^16 just use trial division
                        factors = Math2.sfactor(n, factors);
                    }
                    else { 
                        var add = function(e) {
                            if(!e.isPrime()) { 
                                factors = Math2.sfactor(e, factors);
                            }
                            else
                                factors[e] = (factors[e] || 0)+1;
                        };

                        while(!n.abs().equals(1)) {
                            if(n.isPrime()) {
                                add(n);
                                break;
                            }
                            else {
                                var xf = new bigInt(2),
                                    cz = new bigInt(2),
                                    x = new bigInt(2),
                                    factor = new bigInt(1);

                                while(factor.abs().equals(1)) { 
                                    for(var i=0; i<=cz && factor <=1; i++) {
                                        x = x.pow(2).add(1).mod(n);
                                        factor = bigInt.gcd(x.minus(xf), n);
                                    }

                                    cz = cz.times(2);
                                    xf = x;
                                }
                                add(factor);
                                //divide out the factor
                                n = n.divide(factor);
                            }
                        }
                    }
                    
                    //put the sign back
                    if(sign === -1) {
                        var sm = arrayMin(keys(factors)); ///get the smallest number
                        factors['-'+sm] = factors[sm];
                        delete factors[sm];
                    }
                    
                    return factors;
                },
                //factors a number into rectangular box. If sides are primes that this will be
                //their prime factors. e.g. 21 -> (7)(3), 133 -> (7)(19)
                boxfactor: function(n, max) {
                    max = max || 200; //stop after this number of iterations
                    var c, r,
                        d = Math.floor((5/12)*n), //the divisor
                        i = 0, //number of iterations
                        safety = false;
                    while(true)  {
                        c = Math.floor(n/d);
                        r = n % d;
                        if(r === 0) break; //we're done
                        if(safety) return [n, 1];
                        d = Math.max(r, d-r);
                        i++;
                        safety = i > max;
                    }
                    return [c, d, i];
                },
                fib: function(n) {
                    var sign = Math.sign(n);
                    n = Math.abs(n);
                    sign = even(n) ? sign : Math.abs(sign);
                    var a = 0, b = 1, f = 1;
                    for(var i = 2; i <= n; i++) {
                        f = a + b;
                        a = b;
                        b = f;
                    }
                    return f*sign;
                },
                mod: function(x, y) {
                    return x % y;
                },
                /**
                 * https://github.com/scijs/integrate-adaptive-simpson
                 * @param {Function} f - the function being integrated
                 * @param {Number} l - lower bound
                 * @param {Number} u - upper bound
                 * @param {Number} dx - step width
                 * @returns {Number}
                 */
                num_integrate: function(f, a, b, tol, maxdepth) {
                    // This algorithm adapted from pseudocode in:
                    // http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf
                    function adsimp (f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {
                        if (state.nanEncountered) {
                            return NaN;
                        }
                        var h, f1, f2, sl, sr, s2, m, V1, V2, err;
                        h = b - a;
                        f1 = f(a + h * 0.25);
                        f2 = f(b - h * 0.25);
                        // Simple check for NaN:
                        if (isNaN(f1)) {
                            state.nanEncountered = true;
                            return;
                        }
                        // Simple check for NaN:
                        if (isNaN(f2)) {
                            state.nanEncountered = true;
                            return;
                        }

                        sl = h * (fa + 4 * f1 + fm) / 12;
                        sr = h * (fm + 4 * f2 + fb) / 12;
                        s2 = sl + sr;
                        err = (s2 - V0) / 15;

                        if (depth > maxdepth) {
                            state.maxDepthCount++;
                            return s2 + err;
                        } 
                        else if (Math.abs(err) < tol) {
                            return s2 + err;
                        } 
                        else {
                            m = a + h * 0.5;
                            V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);
                            if (isNaN(V1)) {
                                state.nanEncountered = true;
                                return NaN;
                            }
                            V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);

                            if (isNaN(V2)) {
                                state.nanEncountered = true;
                                return NaN;
                            }
                            
                            return V1 + V2;
                        }
                    }

                    function integrate (f, a, b, tol, maxdepth) {
                        var state = {
                            maxDepthCount: 0,
                            nanEncountered: false
                        };

                        if (tol === undefined) {
                            tol = 1e-9;
                        }
                        if (maxdepth === undefined) {
                            maxdepth = 45;
                        }

                        var fa = f(a);
                        var fm = f(0.5 * (a + b));
                        var fb = f(b);

                        var V0 = (fa + 4 * fm + fb) * (b - a) / 6;

                        var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);

                        if (state.maxDepthCount > 0) {
                            warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');
                        }

                        if (state.nanEncountered) {
                            throw new UndefinedError('Function does not converge over interval!');
                        }

                        return result;
                    }
                    
                    return Utils.round(integrate(f, a, b, tol, maxdepth), 12);
                },
                //https://en.wikipedia.org/wiki/Trigonometric_integral
                //CosineIntegral
                Ci: function(x) {
                    var n =20,
                        g = 0.5772156649015329, //roughly Euler–Mascheroni
                        sum = 0;
                    for(var i=1; i<n; i++) {
                        var n2 = 2*i; //cache 2n
                        sum += (Math.pow(-1, i)*Math.pow(x, n2))/(n2*Math2.factorial(n2));
                    }
                    return Math.log(x) + g + sum;
                },
                //SineIntegral
                Si: function(x) {
                    var n = 20,
                        sum = 0;
                    for(var i=0; i<n; i++) {
                        var n2 = 2*i;
                        sum += (Math.pow(-1, i)*Math.pow(x, n2+1))/((n2+1)*Math2.factorial(n2+1));
                    }
                    return sum;
                },
                //ExponentialIntegral
                Ei: function(x) { 
                    if(x.equals(0))
                        return -Infinity;
                    var n =30,
                        g = 0.5772156649015328606, //roughly Euler–Mascheroni
                        sum = 0;
                    for(var i=1; i<n; i++) {
                        sum += Math.pow(x, i)/(i*Math2.factorial(i));
                    }
                    return g+Math.abs(Math.log(x))+sum;
                },
                //Hyperbolic Sine Integral
                //http://mathworld.wolfram.com/Shi.html
                Shi: function(x) {
                    var n = 30,
                        sum = 0,
                        k, t;
                    for(var i=0; i<n; i++) {
                        k = 2*i; 
                        t = k+1;
                        sum += Math.pow(x, t)/(t*t*Math2.factorial(k));
                    }
                    return sum;
                },
                //the cosine integral function
                Chi: function(x) {
                    var dx, g, f;
                    dx = 0.001;
                    g = 0.5772156649015328606;
                    f = function(t) {
                        return (Math.cosh(t)-1)/t;
                    };
                    return Math.log(x)+g+Math2.num_integrate(f, 0.002, x, dx);
                },
                //the gamma incomplete function
                gamma_incomplete: function(n, x) {
                    var t = n-1,
                        sum = 0,
                        x = x || 0;
                    for(var i=0; i<t; i++) {
                        sum += Math.pow(x, i)/Math2.factorial(i);
                    }
                    return Math2.factorial(t)*Math.exp(-x)*sum;
                },
                /*
                * Heaviside step function - Moved from Special.js (originally contributed by Brosnan Yuen)
                * Specification : http://mathworld.wolfram.com/HeavisideStepFunction.html
                * if x > 0 then 1
                * if x == 0 then 1/2
                * if x < 0 then 0
                */
                step: function(x) {
                    if(x > 0)
                        return 1;
                    if(x < 0)
                        return 0;
                    return 0.5;
                },
                /*
                * Rectangle function - Moved from Special.js (originally contributed by Brosnan Yuen)
                * Specification : http://mathworld.wolfram.com/RectangleFunction.html
                * if |x| > 1/2 then 0
                * if |x| == 1/2 then 1/2
                * if |x| < 1/2 then 1
                */
                rect: function(x) {
                    var x = Math.abs(x);
                    if(x === 0.5)
                        return x;
                    if(x > 0.5)
                        return 0;
                    return 1;
                },
                /*
                * Sinc function - Moved from Special.js (originally contributed by Brosnan Yuen)
                * Specification : http://mathworld.wolfram.com/SincFunction.html
                * if x == 0 then 1
                * otherwise sin(x)/x
                */
                sinc: function(x) {
                    if(x.equals(0))
                        return 1;
                    return Math.sin(x)/x;
                },
                /*
                * Triangle function - Moved from Special.js (originally contributed by Brosnan Yuen)
                * Specification : http://mathworld.wolfram.com/TriangleFunction.html
                * if |x| >= 1 then 0
                * if |x| < then 1-|x|
                */
                tri: function(x) {
                    x = Math.abs(x);
                    if(x >= 1)
                        return 0;
                    return 1-x;
                },
                //https://en.wikipedia.org/wiki/Nth_root_algorithm
                nthroot: function(A, n) { 
                    //make sure the input is of type Frac
                    if(!(A instanceof Frac))
                        A = new Frac(A.toString());
                    if(!(n instanceof Frac))
                        n = new Frac(n.toString());
                    if(n.equals(1))
                        return A;
                    //begin algorithm
                    var xk = A.divide(new Frac(2)); //x0
                    var e = new Frac(1e-15);
                    var dk, dk0, d0;
                    var a = n.clone().invert(),
                        b = n.subtract(new Frac(1));
                    do {
                        var powb = Math2.bigpow(xk, b);
                        var dk_dec = a.multiply(A.divide(powb).subtract(xk)).toDecimal(25);
                        dk = Frac.create(dk_dec);
                        if(d0)
                            break;
                        
                        xk = xk.add(dk);
                        //check to see if there's no change from the last xk
                        var dk_dec = dk.toDecimal();
                        d0 = dk0 ? dk0 === dk_dec : false;
                        dk0 = dk_dec;
                    }
                    while(dk.abs().gte(e))

                    return xk;
                }
            };
            //link the Math2 object to Settings.FUNCTION_MODULES
            Settings.FUNCTION_MODULES.push(Math2);

            var cacheRoots = function() {
                Settings.CACHE.roots = {};
                var x = 40, 
                    y = 40;
                for(var i=2; i<=x; i++) {
                    for(var j=2; j<=y; j++) {
                        var nthpow = bigInt(i).pow(j);
                        Settings.CACHE.roots[nthpow+'-'+j] = i;
                    }
                }
            };
            cacheRoots();
            //polyfills
            //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/
            Math.sign = Math.sign || function(x) { 
                x = +x; // convert to a number
                if (x === 0 || isNaN(x)) {
                    return x;
                }
                return x > 0 ? 1 : -1;
            };
            
            Math.cosh = Math.cosh || function(x) {
                var y = Math.exp(x);
                return (y + 1 / y) / 2;
            };
            
            Math.sech = Math.sech || function(x) {
                return 1/Math.cosh(x);
            };
            
            Math.csch = Math.csch || function(x) {
                return 1/Math.sinh(x);
            };
            
            Math.coth = Math.coth || function(x) {
                return 1/Math.tanh(x);
            };
            
            Math.sinh = Math.sinh || function(x) {
                var y = Math.exp(x);
                return (y - 1 / y) / 2;
            };
            
            Math.tanh = Math.tanh || function(x) {
                if (x === Infinity) {
                    return 1;
                } else if (x === -Infinity) {
                    return -1;    
                } else {
                    var y = Math.exp(2 * x);
                    return (y - 1) / (y + 1);
                }
            };
            
            Math.asinh = Math.asinh || function(x) {
                if (x === -Infinity) {
                  return x;
                } else {
                  return Math.log(x + Math.sqrt(x * x + 1));
                }
            };
            
            Math.acosh = Math.acosh || function(x) {
                return Math.log(x + Math.sqrt(x * x - 1));
            };
            
            Math.atanh = Math.atanh || function(x) {
                return Math.log((1+x)/(1-x)) / 2;
            };
            
            Math.log10 = Math.log10 || function(x) {
                return Math.log(x) * Math.LOG10E;
            };
            
            Math.trunc = Math.trunc || function(x) {
            if (isNaN(x)) {
                return NaN;
            }
            if (x > 0) {
                return Math.floor(x);
            }
            return Math.ceil(x);
          };

            reserveNames(Math2); //reserve the names in Math2
            
        /* GLOBAL FUNCTIONS */
        /**
         * This method will return a hash or a text representation of a Symbol, Matrix, or Vector. 
         * If all else fails it *assumes* the object has a toString method and will call that.
         * 
         * @param {Object} obj
         * @param {String} option get is as a hash 
         * @returns {String}
         */
        function text(obj, option, useGroup) { 
            var asHash = option === 'hash',
                asDecimal = option === 'decimals' || option === 'decimal',
                opt = asHash ? undefined : option;
            //if the object is a symbol
            if(isSymbol(obj)) { 
                var multiplier = '', 
                power = '',
                sign = '',
                group = obj.group || useGroup,
                value = obj.value;
                //if the value is to be used as a hash then the power and multiplier need to be suppressed
                if(!asHash) { 
                    //use asDecimal to get the object back as a decimal
                    var om = asDecimal ? obj.multiplier.valueOf() : obj.multiplier.toString();
                    if(om == '-1') {
                        sign = '-';
                        om = '1';
                    }
                    //only add the multiplier if it's not 1
                    if(om != '1') multiplier = om;
                    //use asDecimal to get the object back as a decimal
                    var p = obj.power ? (asDecimal ? obj.power.valueOf() : obj.power.toString()) : '';
                    //only add the multiplier 
                    if(p != '1') {
                        //is it a symbol
                        if(isSymbol(p)) {
                            power = text(p, opt);
                        }
                        else {
                            power = p;
                        }
                    }
                }

                switch(group) {
                    case N:
                        multiplier = '';
                        //if it's numerical then all we need is the multiplier
                        value = obj.multiplier == '-1' ? '1' : asDecimal ? obj.valueOf() : obj.multiplier.toString();
                        power = '';
                        break;
                    case PL:
                        value = obj.collectSymbols(text, opt).join('+').replace(/\+\-/g, '-');
                        break;
                    case CP:
                        value = obj.collectSymbols(text, opt).join('+').replace(/\+\-/g, '-');
                        break;
                    case CB: 
                        value = obj.collectSymbols(function(symbol){
                            var g = symbol.group;
                            //both groups will already be in brackets if their power is greater than 1
                            //so skip it.
                            if((g === PL || g === CP) && (symbol.power.equals(1) && symbol.multiplier.equals(1))) {
                                return inBrackets(text(symbol, opt));
                            }
                            return text(symbol, opt);
                        }).join('*');
                        break;
                    case EX:
                        var pg = obj.previousGroup,
                            pwg = obj.power.group;
                    
                        //PL are the exception. It's simpler to just collect and set the value
                        if(pg === PL) value = obj.collectSymbols(text, opt).join('+').replace('+-', '-');
                        if(!(pg === N || pg === S || pg === FN) && !asHash) { value = inBrackets(value); }
     
                        if((pwg === CP || pwg === CB || pwg === PL || obj.power.multiplier.toString() != '1') && power) {
                            power = inBrackets(power);
                        }
                        break;
                }
                
                if(group === FN && asDecimal) { 
                    value = obj.fname+inBrackets(obj.args.map(function(symbol) {
                        return text(symbol, opt);
                    }).join(','));
                }
                //TODO: Needs to be more efficient. Maybe. 
                if(group === FN && obj.fname in CUSTOM_OPERATORS) {
                    var a = text(obj.args[0]);
                    var b = text(obj.args[1]);
                    if(obj.args[0].isComposite()) //preserve the brackets
                        a = inBrackets(a);
                    if(obj.args[1].isComposite()) //preserve the brackets
                        b = inBrackets(b);
                    value = a+CUSTOM_OPERATORS[obj.fname]+b;
                }
                //wrap the power since / is less than ^
                //TODO: introduce method call isSimple
                if(power && !isInt(power) && group !== EX && !asDecimal) { power = inBrackets(power); }

                //the following groups are held together by plus or minus. They can be raised to a power or multiplied
                //by a multiplier and have to be in brackets to preserve the order of precedence
                if(((group === CP || group === PL) && (multiplier && multiplier != '1' || sign === '-')) 
                        || ((group === CB || group === CP || group === PL) && (power && power != '1'))
                        || !asHash && group === P && value == -1
                        || obj.fname === PARENTHESIS) { 
                    
                    value = inBrackets(value);
                }
                
                var c = sign+multiplier;
                if(multiplier && !isInt(multiplier) && !asDecimal) c = inBrackets(c);
                
                if(power < 0) power = inBrackets(power);
                if(multiplier) c = c + '*';
                if(power) power = Settings.POWER_OPERATOR + power;

                //this needs serious rethinking. Must fix
                if(group === EX && value.charAt(0) === '-') value = inBrackets(value);
                
                var cv = c+value;
                
                if(obj.parens) cv = inBrackets(cv);

                return cv+power;
            }
            else if(isVector(obj)) { 
                var l = obj.elements.length,
                    c = [];
                for(var i=0; i<l; i++) c.push(obj.elements[i].text(option));
                return '['+c.join(',')+']';
            }
            else {
                try {
                    return obj.toString();
                }
                catch(e) { return ''; }
            }
        }
        
        Utils.text = text;
        
        /** 
         * This is what nerdamer returns. It's sort of a wrapper around the symbol class and 
         * provides the user with some useful functions. If you want to provide the user with extra
         * library functions then add them to this class's prototype.
         * @param {Symbol} symbol
         * @returns {Expression} wraps around the Symbol class
         */
        function Expression(symbol) {
            //we don't want arrays wrapped
            this.symbol = symbol;
        }
        
        /**
         * Returns stored expression at index. For first index use 1 not 0.
         * @param {bool} asType  
         * @param {Integer} expression_number 
         */
        Expression.getExpression = function(expression_number, asType) {
            if(expression_number === 'last' || !expression_number) expression_number = EXPRESSIONS.length;
            if(expression_number === 'first') expression_number = 1;
            var index = expression_number -1,
                expression = EXPRESSIONS[index],
                retval = expression ? new Expression(expression) : expression;
            return retval;
        };
        
        Expression.prototype = {
            /**
             * Returns the text representation of the expression
             * @param {String} opt - option of formatting numbers
             * @returns {String}
             */
            text: function(opt) { 
                opt = opt || 'decimals';
                if(this.symbol.text_)
                    return this.symbol.text_(opt);
                return text(this.symbol, opt);
            },
            /**
             * Returns the latex representation of the expression
             * @param {String} option - option for formatting numbers
             * @returns {String}
             */
            latex: function(option) {
                if(this.symbol.latex)
                    return this.symbol.latex(option);
                return LaTeX.latex(this.symbol, option);
            },
            valueOf: function() { 
                return this.symbol.valueOf();
            },
            
            /**
             * Evaluates the expression and tries to reduce it to a number if possible.
             * If an argument is given in the form of %{integer} it will evaluate that expression.
             * Other than that it will just use it's own text and reparse
             * @returns {Expression}
             */
            evaluate: function() {
                var first_arg = arguments[0], expression, idx = 1;
                if(typeof first_arg === 'string') {
                    expression = (first_arg.charAt(0) === '%') ? Expression.getExpression(first_arg.substr(1)).text() : first_arg;
                }
                else if(first_arg instanceof Expression || isSymbol(first_arg)) {
                    expression = first_arg.text();
                }
                else {
                    expression = this.symbol.text(); idx--;
                }
                
                var subs = arguments[idx] || {};
                
                return new Expression(block('PARSE2NUMBER', function() {
                    return _.parse(expression, subs);
                }, true));
            },
            /**
             * Converts a symbol to a JS function. Pass in an array of variables to use that order instead of 
             * the default alphabetical order
             * @param vars {Array}
             */
            buildFunction: function(vars) {
                return build(this.symbol, vars);
            },
            /**
             * Checks to see if the expression is just a plain old number
             * @returns {boolean}
             */
            isNumber: function() {
                return isNumericSymbol(this.symbol);
            },
            /**
             * Checks to see if the expression is infinity
             * @returns {boolean}
             */
            isInfinity: function() {
                return Math.abs(this.symbol.multiplier) === Infinity;
            },
            /**
             * Returns all the variables in the expression
             * @returns {Array}
             */
            variables: function() {
                return variables(this.symbol);
            },
            
            toString: function() {
                try {
                    if(isArray(this.symbol)) return '['+this.symbol.toString()+']';
                    return this.symbol.toString();
                }
                catch(e) { return ''; }
            },
            //forces the symbol to be returned as a decimal
            toDecimal: function(prec) {
                Settings.precision = prec;
                var dec = text(this.symbol, 'decimals');
                Settings.precision = undefined;
                return dec;
            },
            //checks to see if the expression is a fraction
            isFraction: function() {
                return isFraction(this.symbol);
            },
            //checks to see if the symbol is a multivariate polynomial
            isPolynomial: function() {
                return this.symbol.isPoly();
            }, 
            //performs a substitution
            sub: function(symbol, for_symbol) {
                return new Expression(this.symbol.sub(_.parse(symbol), _.parse(for_symbol)));
            },
            operation: function(otype, symbol) {
                if(isExpression(symbol))
                    symbol = symbol.symbol;
                else if(!isSymbol(symbol))
                    symbol = _.parse(symbol);
                return new Expression(_[otype](this.symbol.clone(), symbol.clone()));
            },
            add: function(symbol) {
                return this.operation('add', symbol);
            },
            subtract: function(symbol) {
                return this.operation('subtract', symbol);
            },
            multiply: function(symbol) {
                return this.operation('multiply', symbol);
            },
            divide: function(symbol) {
                return this.operation('divide', symbol);
            },
            pow: function(symbol) {
                return this.operation('pow', symbol);
            },
            expand: function() {
                return new Expression(_.expand(this.symbol));
            },
            each: function(callback, i) {
                if(this.symbol.each)
                    this.symbol.each(callback, i);
                else if(isArray(this.symbol)) { 
                    for(var i=0; i<this.symbol.length; i++)
                        callback.call(this.symbol, this.symbol[i], i);
                }
                else
                    callback.call(this.symbol);
            },
            eq: function(value) {
                if(!isSymbol(value))
                    value = _.parse(value);
                try {
                    var d = _.subtract(this.symbol.clone(), value);
                    return d.equals(0);
                }
                catch(e){
                    return false;
                }        },
            lt: function(value) {
                if(!isSymbol(value))
                    value = _.parse(value);
                try {
                    var d = evaluate(_.subtract(this.symbol.clone(), value));
                    return d.lessThan(0);
                }
                catch(e){
                    return false;
                }        },
            gt: function(value) {
                if(!isSymbol(value))
                    value = _.parse(value);
                try {
                    var d = evaluate(_.subtract(this.symbol.clone(), value));
                    return d.greaterThan(0);
                }
                catch(e){
                    return false;
                }        },
            gte: function(value) {
                return this.gt(value) || this.eq(value);
            },
            lte: function(value) {
                return this.lt(value) || this.eq(value);
            },
            
            numerator: function() {
                return new Expression(this.symbol.getNum());
            },
            denominator: function() {
                return new Expression(this.symbol.getDenom());
            }
        };
        //Aliases
        Expression.prototype.toTeX = Expression.prototype.latex;
        
        function Frac(n) { 
            if(n instanceof Frac) return n;
            if(n === undefined) return this;
            try {
                if(isInt(n)) { 
                    try {
                        this.num = bigInt(n);
                        this.den = bigInt(1);
                    }
                    catch(e) {
                        return Frac.simple(n);
                    }
                }
                else {
                    var frac = Fraction.convert(n);
                    this.num = new bigInt(frac[0]);
                    this.den = new bigInt(frac[1]);
                }
            }
            catch(e) {
                return Frac.simple(n);
            }
                
        }
        //safe to use with negative numbers or other types
        Frac.create = function(n) {
            if(n instanceof Frac)
                return n;
            n = n.toString();
            var is_neg = n.charAt(0) === '-'; //check if it's negative
            if(is_neg)
                n = n.substr(1, n.length-1); //remove the sign
            var frac = new Frac(n);
            //put the sign back
            if(is_neg)
                frac.negate();
            return frac;
        };
        
        Frac.isFrac = function(o) {
            return (o instanceof Frac);
        };
        
        Frac.quick = function(n, d) { 
            var frac = new Frac();
            frac.num = new bigInt(n);
            frac.den = new bigInt(d);
            return frac;
        };
        
        Frac.simple =  function(n) {
            var nstr = String(scientificToDecimal(n)),
                m_dc = nstr.split('.'),
                num = m_dc.join(''),
                den = 1,
                l = (m_dc[1] || '').length;
            for(var i=0; i<l; i++)
                den += '0';
            var frac = Frac.quick(num, den);
            return frac.simplify();
        };
        
        Frac.prototype = {
            multiply: function(m) { 
                if(this.isOne()) {
                    return m.clone();
                }
                if(m.isOne()) {
                    return this.clone();
                }
                
                var c = this.clone();
                c.num = c.num.multiply(m.num);
                c.den = c.den.multiply(m.den); 

                return c.simplify();
            },
            divide: function(m) {
                if(m.equals(0)) throw new DivisionByZero('Division by zero not allowed!');
                return this.clone().multiply(m.clone().invert()).simplify();
            },
            subtract: function(m) { 
                return this.clone().add(m.clone().neg());
            },
            neg: function() {
                this.num = this.num.multiply(-1);
                return this;
            },
            add: function(m) { 
                var n1 = this.den, n2 = m.den, c = this.clone();
                var a = c.num, b = m.num;
                if(n1.equals(n2)) {
                    c.num = a.add(b);
                }
                else {
                    c.num = a.multiply(n2).add(b.multiply(n1));
                    c.den = n1.multiply(n2);
                }

                return c.simplify();
            },
            mod: function(m) {
                var a = this.clone(),
                    b = m.clone();
                //make their denominators even and return the mod of their numerators
                a.num = a.num.multiply(b.den);
                a.den = a.den.multiply(b.den);
                b.num = b.num.multiply(this.den);
                b.den = b.den.multiply(this.den);
                a.num = a.num.mod(b.num);
                return a.simplify();
            },
            simplify: function() { 
                var gcd = bigInt.gcd(this.num, this.den);
                
                this.num = this.num.divide(gcd);
                this.den = this.den.divide(gcd);
                return this;
            },
            clone: function() {
                var m = new Frac();
                m.num = new bigInt(this.num);
                m.den = new bigInt(this.den);
                return m;
            },
            toDecimal: function(prec) { 
                if(prec || Settings.PRECISION) { 
                    var sign = this.num.isNegative() ? '-' : '';
                    if(this.num.equals(this.den)) {
                        return '1';
                    }
                    //go plus one for rounding
                    prec = prec || Settings.PRECISION;
                    prec++;
                    var narr = [], 
                        n = this.num.abs(),
                        d = this.den;
                    for(var i=0; i<prec; i++) {
                        var w = n.divide(d), //divide out whole
                            r = n.subtract(w.multiply(d)); //get remainder

                        narr.push(w);    
                        if(r.equals(0))
                                break;
                        n = r.times(10); //shift one dec place
                    }
                    var whole = narr.shift();
                    if(narr.length === 0) { 
                        return sign+whole.toString();
                    }

                    if(i === prec) {
                        var lt = [];
                        //get the last two so we can round it
                        for(var i=0; i<2; i++)
                            lt.unshift(narr.pop());
                        //put the last digit back by rounding the last two
                        narr.push(Math.round(lt.join('.')));
                    }

                    var dec = whole.toString()+'.'+narr.join('');
                    return sign+dec;
                }
                else
                    return this.num/this.den;
            },
            qcompare: function(n) { 
                return [this.num.multiply(n.den), n.num.multiply(this.den)];
            },
            equals: function(n) {
                if(!isNaN(n)) n = new Frac(n);
                var q = this.qcompare(n);
                
                return q[0].equals(q[1]);
            },
            absEquals: function(n) { 
                if(!isNaN(n)) n = new Frac(n);
                var q = this.qcompare(n);
                
                return q[0].abs().equals(q[1]);
            },
            //lazy check to be fixed. Sufficient for now but will cause future problems
            greaterThan: function(n) {
                if(!isNaN(n)) n = new Frac(n);
                var q = this.qcompare(n);
                
                return q[0].gt(q[1]);
            },
            gte: function(n) {
                return this.greaterThan(n) || this.equals(n);
            },
            lte: function(n) {
                return this.lessThan(n) || this.equals(n);
            },
            lessThan: function(n) { 
                if(!isNaN(n)) n = new Frac(n);
                var q = this.qcompare(n);
                
                return q[0].lt(q[1]);
            },
            isInteger: function() {
                return this.den.equals(1);
            },
            negate: function() {
                this.num = this.num.multiply(-1);
                return this;
            },
            invert: function() { 
                var t = this.den;
                var isnegative = this.num.isNegative();
                this.den = this.num.abs();
                this.num = t;
                if(isnegative) this.num = this.num.multiply(-1);
                return this;
            },
            isOne: function() {
                return this.num.equals(1) && this.den.equals(1);
            },
            sign: function() { 
                return this.num.isNegative() ? -1 : 1;
            },
            abs: function() { 
                this.num = this.num.abs();
                return this;
            },
            gcd: function(f) {
                return Frac.quick(bigInt.gcd(f.num, this.num), bigInt.lcm(f.den, this.den));
            },
            toString: function() {
                return !this.den.equals(1) ? this.num.toString()+'/'+this.den.toString() : this.num.toString();
            },
            valueOf: function() {
                return this.num/this.den;
            },
            isNegative: function() {
                return this.toDecimal() < 0;
            }
        };
        
        /**
         * All symbols e.g. x, y, z, etc or functions are wrapped in this class. All symbols have a multiplier and a group. 
         * All symbols except for "numbers (group N)" have a power. 
         * @class Primary data type for the Parser. 
         * @param {String} obj 
         * @returns {Symbol}
         */
        function Symbol(obj) { 
            var isInfinity = obj === 'Infinity';
            //this enables the class to be instantiated without the new operator
            if(!(this instanceof Symbol)) { 
                return new Symbol(obj); 
            }        //define numeric symbols
            if(!isNaN(obj) && !isInfinity && isFinite(obj)) { 
                
                this.group = N;
                this.value = CONST_HASH; 
                this.multiplier = new Frac(obj);
            }
            //define symbolic symbols
            else {
                this.group = S; 
                validateName(obj); 
                this.value = obj;
                this.multiplier = new Frac(1);
                this.imaginary = obj === Settings.IMAGINARY;
                this.isInfinity = isInfinity;
            }
            
            //As of 6.0.0 we switched to infinite precision so all objects have a power
            //Although this is still redundant in constants, it simplifies the logic in
            //other parts so we'll keep it
            this.power = new Frac(1);

            // Added to silence the strict warning.
            return this; 
        }
        
        /**
         * Returns vanilla imaginary symbol
         * @returns {Symbol}
         */
        Symbol.imaginary = function() {
            var s = new Symbol(Settings.IMAGINARY);
            s.imaginary = true;
            return s;
        };
        
        /**
         * Return nerdamer's representation of Infinity
         * @returns {Symbol} 
         */
        Symbol.infinity = function() {
            return new Symbol('Infinity');
        };
        
        Symbol.shell = function(group, value) { 
            var symbol = new Symbol(value);
            symbol.group = group;
            symbol.symbols = {};
            symbol.length = 0;
            return symbol;
        };
        //sqrt(x) -> x^(1/2)
        Symbol.unwrapSQRT = function(symbol, all) {
            var p = symbol.power;
            if(symbol.fname === SQRT && (symbol.isLinear() || all )) {
                var t = symbol.args[0].clone(); 
                t.power = t.power.multiply(new Frac(1/2));
                t.multiplier = t.multiplier.multiply(symbol.multiplier);
                symbol = t;
                if(all) 
                    symbol.power = p.multiply(new Frac(1/2));
            }
                
            return symbol;
        };
        
        Symbol.hyp = function(a, b) {
            if(a.equals(0))
                return b.clone();
            if(b.equals(0))
                return a.clone();
            return _.sqrt(_.add(_.pow(a.clone(), new Symbol(2)), _.pow(b.clone(), new Symbol(2))));
        };
        
        //converts to polar form array
        Symbol.toPolarFormArray = function(symbol) {
            var re, im, r, theta;
            re = symbol.realpart(); 
            im = symbol.imagpart(); 
            r = Symbol.hyp(re, im);
            theta = re.equals(0) ? _.parse('pi/2') : _.trig.atan(_.divide(im, re));
            return [r, theta];
        };
        
        //removes parentheses
        Symbol.unwrapPARENS = function(symbol) {
            if(symbol.fname === '') {
                var r = symbol.args[0];
                r.power = r.power.multiply(symbol.power);
                r.multiplier = r.multiplier.multiply(symbol.multiplier);
                if(symbol.fname === '')
                    return Symbol.unwrapPARENS(r);
                return r;
            }
            return symbol;
        };
        //quickly creates a Symbol
        Symbol.create = function(value, power) {
            power = power === undefined ? 1 : power;
            return _.parse('('+value+')^('+power+')');
        };
        
        Symbol.prototype = {
            //returns a clone.
            powSimp: function() {
                if(this.group === CB) {
                    var powers = [],
                        sign = this.multiplier.sign();
                    this.each(function(x) {
                        var p = x.power;
                        //why waste time if I can't do anything anyway
                        if(isSymbol(p) || p.equals(1))
                            return this.clone();
                        powers.push(p);
                    });
                    var min = new Frac(arrayMin(powers));
                    
                    //handle the coefficient
                    //handle the multiplier
                    var sign = this.multiplier.sign(),
                        m = this.multiplier.clone().abs(),
                        mfactors = Math2.ifactor(m);
                    //if we have a multiplier of 6750 and a min of 2 then the factors are 5^3*5^3*2
                    //we can then reduce it to 2*3*5*(15)^2 
                    var out_ = new Frac(1);
                    var in_ = new Frac(1);
                    
                    for(var x in mfactors) {
                        var n = new Frac(mfactors[x]);
                        if(!n.lessThan(min)) {
                            n = n.divide(min).subtract(new Frac(1));
                            in_ = in_.multiply(new Frac(x)); //move the factor inside the bracket
                        }
                        
                        out_ = out_.multiply(_.parse(inBrackets(x)+'^'+inBrackets(n)).multiplier);
                    }
                    var t = new Symbol(in_);
                    this.each(function(x) { 
                        x = x.clone();
                        x.power = x.power.divide(min);
                        t = _.multiply(t, x);
                    });
                    
                    var xt = _.symfunction(PARENTHESIS, [t]);
                    xt.power = min;
                    xt.multiplier = sign < 0 ? out_.negate() : out_;

                    return xt;
                }
                return this.clone();
            },
            /**
             * Checks to see if two functions are of equal value
             */
            equals: function(symbol) { 
                if(!isSymbol(symbol)) 
                    symbol = new Symbol(symbol);
                return this.value === symbol.value && this.power.equals(symbol.power) && this.multiplier.equals(symbol.multiplier);
            },
            // Greater than
            gt: function(symbol) { 
                if(!isSymbol(symbol)) 
                    symbol = new Symbol(symbol);
                return this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);
            },
            // Greater than
            gte: function(symbol) { 
                if(!isSymbol(symbol)) 
                    symbol = new Symbol(symbol);
                return this.equals(symbol) ||
                        this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);
            },
            // Less than
            lt: function(symbol) { 
                if(!isSymbol(symbol)) 
                    symbol = new Symbol(symbol);
                return this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);
            },
            // Less than
            lte: function(symbol) { 
                if(!isSymbol(symbol)) 
                    symbol = new Symbol(symbol);
                return this.equals(symbol) ||
                        this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);
            },
            /**
             * Because nerdamer doesn't group symbols by polynomials but 
             * rather a custom grouping method, this has to be
             * reinserted in order to make use of most algorithms. This function
             * checks if the symbol meets the criteria of a polynomial.
             * @returns {boolean}
             */
            isPoly: function(multivariate) { 
                var g = this.group, 
                    p = this.power; 
                //the power must be a integer so fail if it's not
                if(!isInt(p) || p < 0) 
                    return false;
                //constants and first orders
                if(g === N  || g === S || this.isConstant(true)) 
                    return true;
                var vars = variables(this);
                if(g === CB && vars.length === 1) { 
                    //the variable is assumed the only one that was found
                    var v = vars[0];
                    //if no variable then guess what!?!? We're done!!! We have a polynomial.
                    if(!v)
                        return true;
                    for(var x in this.symbols) {
                        var sym = this.symbols[x];
                        //sqrt(x)
                        if(sym.group === FN && sym.fname === SQRT && !sym.args[0].isConstant())
                            return false;
                        if(!sym.contains(v) && !sym.isConstant(true))
                            return false;
                    }
                    return true;
                }
                //PL groups. These only fail if a power is not an int
                //this should handle cases such as x^2*t
                if(this.isComposite() || g === CB && multivariate) { 
                    //fail if we're not checking for multivariate polynomials
                    if(!multivariate && vars.length > 1) 
                        return false;
                    //loop though the symbols and check if they qualify
                    for(var x in this.symbols) {
                        //we've already the symbols if we're not checking for multivariates at this point
                        //so we check the sub-symbols
                        if(!this.symbols[x].isPoly(multivariate)) 
                            return false;
                    }
                    return true;
                }
                else 
                    return false;
                
                //all tests must have passed so we must be dealing with a polynomial
                return true;
            },
            //removes the requested variable from the symbol and returns the remainder
            stripVar: function(x) {
                var retval;
                if((this.group === PL || this.group === S) && this.value === x) 
                    retval = new Symbol(this.multiplier);
                else if(this.group === CB && this.isLinear()) { 
                    retval = new Symbol(1);
                    this.each(function(s) { 
                        if(!s.contains(x, true)) 
                            retval = _.multiply(retval, s.clone());
                    });
                    retval.multiplier = retval.multiplier.multiply(this.multiplier);
                }
                else if(this.group === CP && !this.isLinear()) {
                    retval = new Symbol(this.multiplier);
                }
                else if(this.group === CP && this.isLinear()) {
                    retval = new Symbol(0);
                    this.each(function(s) {
                        if(!s.contains(x)) {
                            var t = s.clone();
                            t.multiplier = t.multiplier.multiply(this.multiplier);
                            retval = _.add(retval, t);
                        } 
                    });
                    //BIG TODO!!! It doesn't make much sense
                    if(retval.equals(0))
                        retval = new Symbol(this.multiplier);
                }
                else if(this.group === EX && this.power.contains(x, true)) {
                    retval = new Symbol(this.multiplier);
                }
                else if(this.group === FN && this.contains(x)) {
                    retval = new Symbol(this.multiplier);
                }
                else retval = this.clone();
                
                return retval;
            },
            //returns symbol in array form with x as base e.g. a*x^2+b*x+c = [c, b, a]. 
            toArray: function(v, arr) {
                arr = arr || {
                    arr: [],
                    add: function(x, idx) {
                        var e = this.arr[idx];
                        this.arr[idx] = e ? _.add(e, x) : x;
                    }
                };
                var g = this.group;
                
                if(g === S && this.contains(v)) { 
                    arr.add(new Symbol(this.multiplier), this.power);
                }
                else if(g === CB){
                    var a = this.stripVar(v),
                        x = _.divide(this.clone(), a.clone());
                    var p = x.isConstant() ? 0 : x.power;
                    arr.add(a, p);
                }
                else if(g === PL && this.value === v) {
                    this.each(function(x, p) {
                        arr.add(x.stripVar(v), p);
                    });
                }
                else if(g === CP) {
                    //the logic: they'll be broken into symbols so e.g. (x^2+x)+1 or (a*x^2+b*x+c)
                    //each case is handled above
                    this.each(function(x) {
                        x.toArray(v, arr);
                    });
                }
                else if(this.contains(v)){
                    throw new Error('Cannot convert to array! Exiting');
                }
                else {
                    arr.add(this.clone(), 0); //it's just a constant wrt to v
                }
                //fill the holes
                arr = arr.arr; //keep only the array since we don't need the object anymore
                for(var i=0; i<arr.length; i++) 
                    if(!arr[i])
                        arr[i] = new Symbol(0);
                return arr;
            },
            //checks to see if a symbol contans a function
            hasFunc: function(v) {
                var fn_group = this.group === FN || this.group === EX;
                if( fn_group && !v || fn_group && this.contains(v) )
                    return true;
                if(this.symbols) {
                    for(var x in this.symbols) {
                        if(this.symbols[x].hasFunc(v)) return true;
                    }
                }
                return false;
            },
            sub: function(a, b) { 
                a = !isSymbol(a) ? _.parse(a) : a.clone();
                b = !isSymbol(b) ? _.parse(b) : b.clone();
                if(a.group === N || a.group === P)
                    err('Cannot substitute a number. Must be a variable');
                var same_pow = false,
                    a_is_unit_multiplier = a.multiplier.equals(1),
                    m = this.multiplier.clone(),
                    retval;
                /* 
                 * In order to make the substitution the bases have to first match take
                 * (x+1)^x -> (x+1)=y || x^2 -> x=y^6
                 * In both cases the first condition is that the bases match so we begin there
                 * Either both are PL or both are not PL but we cannot have PL and a non-PL group match
                 */
                if(this.value === a.value && (this.group !== PL && a.group !== PL || this.group === PL && a.group === PL)) { 
                    //we cleared the first hurdle but a subsitution may not be possible just yet
                    if(a_is_unit_multiplier || a.multiplier.equals(this.multiplier)) {
                        if(a.isLinear()) { 
                            retval = b; 
                        }
                        else if(a.power.equals(this.power)) {
                            retval = b;
                            same_pow = true;
                        }
                        if(a.multiplier.equals(this.multiplier))
                            m = new Frac(1);
                    }
                }
                //the next thing is to handle CB
                else if(this.group === CB || this.previousGroup === CB) {
                    retval = new Symbol(1);
                    this.each(function(x) { 
                        retval = _.multiply(retval, x.sub(a, b));
                    });
                }
                else if(this.isComposite()) {
                    retval = new Symbol(0);
                    this.each(function(x) { 
                        retval = _.add(retval, x.sub(a, b));
                    });
                }
                else if(this.group === EX) {
                    // the parsed value could be a function so parse and sub
                    retval = _.parse(this.value).sub(a, b);
                }
                else if(this.group === FN) { 
                    var nargs = [];
                    for(var i=0; i<this.args.length; i++) {
                        var arg = this.args[i];
                        if(!isSymbol(arg))
                            arg = _.parse(arg);
                        nargs.push(arg.sub(a, b));
                    }
                    retval = _.symfunction(this.fname, nargs);
                }
                //if we did manage a substitution
                if(retval) {
                    if(!same_pow) {
                        //substitute the power
                        var p = this.group === EX ? this.power.sub(a, b) : _.parse(this.power);
                        //now raise the symbol to that power
                        retval = _.pow(retval, p); 
                    }

                    //transfer the multiplier
                    retval.multiplier = retval.multiplier.multiply(m);
                    //done
                    return retval;
                }
                //if all else fails
                return this.clone();
            },
            isMonomial: function() {
                if(this.group === S) return true;
                if(this.group === CB) {
                    for(var x in this.symbols) 
                        if(this.symbols[x].group !== S)
                            return false;
                }
                else return false;
                return true;
            },
            isPi: function() {
                return this.group === S && this.value === 'pi';
            },
            sign: function() {
                return this.multiplier.sign();
            },
            isE: function() {
                return this.value === 'e';
            },
            isSQRT: function() {
                return this.fname === SQRT;
            },
            isConstant: function(check_all) {
                if(check_all === 'all' && (this.isPi() || this.isE()))
                    return true;
                if(check_all && this.group === FN) {
                    for(var i=0; i<this.args.length; i++) {
                        if(!this.args[i].isConstant())
                            return false;
                    }
                    return true;
                }
                return this.value === CONST_HASH;
            },
            //the symbols is imaginary if 
            //1. n*i
            //2. a+b*i
            //3. a*i
            isImaginary: function() { 
                if(this.imaginary)
                    return true;
                else if(this.symbols) {
                    for(var x in this.symbols)
                        if(this.symbols[x].imaginary)
                            return true;
                }
                return false;
            },
            /**
             * Returns the real part of a symbol
             * @returns {Symbol}
             */
            realpart: function() { 
                if(this.isConstant()) { 
                    return this.clone();
                }
                else if(this.imaginary)
                    return new Symbol(0);
                else if(this.isComposite()) { 
                    var retval = new Symbol(0);
                    this.each(function(x) {
                        retval = _.add(retval, x.realpart());
                    });
                    return retval;
                }
                else if(this.isImaginary())
                    return new Symbol(0);
                return this.clone();
            },
            /*
             * Return imaginary part of a symbol
             * @returns {Symbol}
             */
            imagpart: function() {
                if(this.group === S && this.isImaginary())
                    return new Symbol(this.multiplier);
                if(this.isComposite()) {
                    var retval = new Symbol(0);
                    this.each(function(x) {
                        retval = _.add(retval, x.imagpart());
                    });
                    return retval;
                }
                if(this.group === CB)
                    return this.stripVar(Settings.IMAGINARY);
                return new Symbol(0);
            },
            isInteger: function() {
                return this.isConstant() && this.multiplier.isInteger();
            },
            isLinear: function(wrt) {
                if(wrt) {
                    if(this.isConstant())
                        return true;
                    if(this.group === S) {
                        if(this.value === wrt)return this.power.equals(1);
                        else return true;
                    }
                    
                    if(this.isComposite() && this.power.equals(1)) {
                        for(var x in this.symbols) {
                            if(!this.symbols[x].isLinear(wrt))
                                return false;
                        }
                        return true;
                    }
                    
                    if(this.group === CB && this.symbols[wrt])
                        return this.symbols[wrt].isLinear(wrt);
                    return false;  
                }
                else return this.power.equals(1);
            },
            containsFunction: function(names) {
                if(typeof names === 'string')
                    names = [names];
                if(this.group === FN && names.indexOf(this.fname) !== -1) 
                    return true;
                if(this.symbols) {
                    for(var x in this.symbols) {
                        if(this.symbols[x].containsFunction(names))
                            return true;
                    }
                }
                return false;
            },
            multiplyPower: function(p2) {
                //leave out 1
                if(this.group === N && this.multiplier.equals(1)) return this;
                
                var p1 = this.power;
                
                if(this.group !== EX && p2.group === N) {
                    var p = p2.multiplier;
                    if(this.group === N && !p.isInteger()) {
                        this.convert(P);
                    }

                    this.power = p1.equals(1) ? p.clone() : p1.multiply(p);

                    if(this.group === P && isInt(this.power)) {
                        //bring it back to an N
                        this.value = Math.pow(this.value, this.power);
                        this.toLinear(); 
                        this.convert(N);
                    }
                }
                else {
                    if(this.group !== EX) {
                        p1 = new Symbol(p1);
                        this.convert(EX);
                    }
                    this.power = _.multiply(p1, p2);
                }

                return this;
            },
            setPower: function(p, retainSign) { 
                //leave out 1
                if(this.group === N && this.multiplier.equals(1)) return this;
                if(this.group === EX && !isSymbol(p)) {
                    this.group = this.previousGroup; 
                    delete this.previousGroup; 
                    if(this.group === N) {
                        this.multiplier = new Frac(this.value);
                        this.value = CONST_HASH;
                    }
                    else
                        this.power = p;
                }
                else {
                    var isSymbolic = false;
                    if(isSymbol(p)) {
                        if(p.group === N) {
                            //p should be the multiplier instead
                            p = p.multiplier;

                        }
                        else {
                            isSymbolic = true;
                        }
                    }
                    var group = isSymbolic ? EX : P;
                    this.power = p; 
                    if(this.group === N && group) this.convert(group, retainSign);
                }

                return this;
            },
            /**
             * Checks to see if symbol is located in the denominator
             * @returns {boolean}
             */
            isInverse: function() {
                if(this.group === EX) return (this.power.multiplier.lessThan(0));
                return this.power < 0;
            },
            /**
             * Make a duplicate of a symbol by copying a predefined list of items
             * to a new symbol
             * @param {Symbol} c 
             * @returns {Symbol}
             */
            clone: function(c) { 
                var clone = c || new Symbol(0),
                    //list of properties excluding power as this may be a symbol and would also need to be a clone.
                    properties = [
                        'value', 'group', 'length', 'previousGroup', 'imaginary', 'fname', 'args', 'isInfinity'],
                    l = properties.length, i;
                if(this.symbols) {
                    clone.symbols = {};
                    for(var x in this.symbols) {
                        clone.symbols[x] = this.symbols[x].clone();
                    }
                }

                for(i=0; i<l; i++) {
                    if(this[properties[i]] !== undefined) {
                        clone[properties[i]] = this[properties[i]];
                    }
                }

                clone.power = this.power.clone();
                clone.multiplier = this.multiplier.clone();

                return clone;
            },
            toUnitMultiplier: function(keepSign) {
                this.multiplier.num = new bigInt(this.multiplier.num.isNegative() && keepSign ? -1 : 1);
                this.multiplier.den = new bigInt(1);
                return this;
            },
            toLinear: function() {
                this.setPower(new Frac(1));
                return this;
            },
            each: function(fn, deep) {
                if(!this.symbols) {
                    fn.call(this, this, this.value);
                }
                else {
                    for(var x in this.symbols) {
                        var sym = this.symbols[x];
                        if(sym.group === PL && deep) {
                            for(var y in sym.symbols) {
                                fn.call(x, sym.symbols[y], y);
                            }
                        }
                        else
                            fn.call(this, sym, x);
                    }
                }
            },
            /**
             * A numeric value to be returned for Javascript. It will try to 
             * return a number as far a possible but in case of a pure symbolic
             * symbol it will just return its text representation
             * @returns {String|Number}
             */
            valueOf: function() {
                if(this.group === N) 
                    return this.multiplier.valueOf(); 
                else if(this.power === 0){ return 1; }
                else if(this.multiplier === 0) { return 0; }
                else { return text(this, 'decimals'); }
            },
            /**
             * Checks to see if a symbols has a particular variable within it.
             * Pass in true as second argument to include the power of exponentials
             * which aren't check by default.
             * @example var s = _.parse('x+y+z'); s.contains('y');
             * //returns true
             * @returns {boolean}
             */
            contains: function(variable, all) { 
                var g = this.group; 
                if(this.value === variable)
                    return true;
                if(this.symbols) {
                    for(var x in this.symbols) { 
                        if(this.symbols[x].contains(variable, all)) return true; 
                    }
                }
                if(g === FN || this.previousGroup === FN) {
                    for(var i=0; i<this.args.length; i++) { 
                        if(this.args[i].contains(variable, all)) return true; 
                    }
                }
                
                if(g === EX) { 
                    //exit only if it does
                    if(all && this.power.contains(variable, all)) { return true; }
                    if(this.value === variable)
                        return true;
                    
                }
                
                return this.value === variable;
            },
            /**
             * Negates a symbols
             * @returns {boolean}
             */
            negate: function() { 
                this.multiplier.negate();
                if(this.group === CP || this.group === PL) 
                    this.distributeMultiplier();
                return this;
            },
            /**
             * Inverts a symbol
             * @returns {boolean}
             */
            invert: function(power_only, all) { 
                //invert the multiplier
                if(!power_only) this.multiplier = this.multiplier.invert();
                //invert the rest
                if(isSymbol(this.power)) {
                    this.power.negate();
                }
                else if(this.group === CB && all) {
                    this.each(function(x) {
                        return x.invert();
                    });
                }
                else {
                    if(this.power && this.group !== N) this.power.negate();
                }
                return this;
            },
            /**
             * Symbols of group CP or PL may have the multiplier being carried by 
             * the top level symbol at any given time e.g. 2*(x+y+z). This is 
             * convenient in many cases, however in some cases the multiplier needs
             * to be carried individually e.g. 2*x+2*y+2*z.
             * This method distributes the multiplier over the entire symbol
             * @returns {Symbol}
             */
            distributeMultiplier: function(all) { 
                var is_one = all ? this.power.absEquals(1) : this.power.equals(1);
                if(this.symbols && is_one && this.group !== CB && !this.multiplier.equals(1)) {
                    for(var x in this.symbols) {
                        var s = this.symbols[x];
                        s.multiplier = s.multiplier.multiply(this.multiplier);
                        s.distributeMultiplier();
                    }
                    this.toUnitMultiplier();
                }

                return this;
            },
            /**
             * This method expands the exponent over the entire symbol just like
             * distributeMultiplier
             * @returns {Symbol}
             */
            distributeExponent: function() { 
                if(!this.power.equals(1)) {
                    var p = this.power;
                    for(var x in this.symbols) {
                        var s = this.symbols[x];
                        if(s.group === EX) {
                            s.power = _.multiply(s.power, new Symbol(p));
                        }
                        else {
                            this.symbols[x].power  = this.symbols[x].power.multiply(p);
                        }
                    }
                    this.toLinear();
                }
                return this;
            },
            /**
             * This method will attempt to up-convert or down-convert one symbol
             * from one group to another. Not all symbols are convertible from one 
             * group to another however. In that case the symbol will remain 
             * unchanged.
             */
            convert: function(group, imaginary) { 
                if(group > FN) { 
                    //make a clone of this symbol;
                    var cp = this.clone();

                    //attach a symbols object and upgrade the group
                    this.symbols = {};

                    if(group === CB) { 
                        //symbol of group CB hold symbols bound together through multiplication
                        //because of commutativity this multiplier can technically be anywhere within the group
                        //to keep track of it however it's easier to always have the top level carry it
                        cp.toUnitMultiplier();
                    }
                    else {
                        //reset the symbol
                        this.toUnitMultiplier();
                    }

                    if(this.group === FN) {
                        cp.args = this.args; 
                        delete this.args;
                        delete this.fname;
                    }

                    //the symbol may originate from the symbol i but this property no longer holds true
                    //after copying
                    if(this.isImgSymbol) delete this.isImgSymbol;

                    this.toLinear();
                    //attach a clone of this symbol to the symbols object using its proper key
                    this.symbols[cp.keyForGroup(group)] = cp; 
                    this.group = group;
                    //objects by default don't have a length property. However, in order to keep track of the number
                    //of sub-symbols we have to impliment our own.
                    this.length = 1;    
                }
                else if(group === EX) { 
                    //1^x is just one so check and make sure
                    if(!(this.group === N && this.multiplier.equals(1))) {
                        if(this.group !== EX) this.previousGroup = this.group;
                        if(this.group === N) { 
                            this.value = this.multiplier.num.toString();
                            this.toUnitMultiplier();
                        }
                        //update the hash to reflect the accurate hash
                        else this.value = text(this, 'hash');
                        
                        this.group = EX;
                    }
                }
                else if(group === N) { 
                    var m = this.multiplier.toDecimal(); 
                    if(this.symbols) this.symbols = undefined;
                    new Symbol(this.group === P ? m*Math.pow(this.value, this.power) : m).clone(this);
                }
                else if(group === P && this.group === N) { 
                    this.value = imaginary ? this.multiplier.num.toString() : Math.abs(this.multiplier.num.toString());
                    this.toUnitMultiplier(!imaginary);
                    this.group = P;
                }
                return this;
            },
            /**
             * This method is one of the principal methods to make it all possible.
             * It performs cleanup and prep operations whenever a symbols is 
             * inserted. If the symbols results in a 1 in a CB (multiplication) 
             * group for instance it will remove the redundant symbol. Similarly
             * in a symbol of group PL or CP (symbols glued by multiplication) it
             * will remove any dangling zeroes from the symbol. It will also 
             * up-convert or down-convert a symbol if it detects that it's 
             * incorrectly grouped. It should be noted that this method is not
             * called directly but rather by the 'attach' method for addition groups
             * and the 'combine' method for multipiclation groups.
             */
            insert: function(symbol, action) { 
                //this check can be removed but saves a lot of aggravation when trying to hunt down
                //a bug. If left, you will instantly know that the error can only be between 2 symbols.
                if(!isSymbol(symbol)) err('Object '+symbol+' is not of type Symbol!');
                if(this.symbols) { 
                    var group = this.group;
                    if(group > FN) { 
                        var key = symbol.keyForGroup(group); 
                        var existing = key in this.symbols ? this.symbols[key] : false; //check if there's already a symbol there
                        if(action === 'add') {
                            var hash = key;
                            if(existing) { 
                                //add them together using the parser
                                this.symbols[hash] = _.add(existing, symbol); 
                                //if the addition resulted in a zero multiplier remove it
                                if(this.symbols[hash].multiplier.equals(0)) {
                                    delete this.symbols[hash];
                                    this.length--;
                                    
                                    if(this.length === 0) {
                                        this.convert(N);
                                        this.multiplier = new Frac(0);
                                    }
                                }
                            }
                            else { 
                                this.symbols[key] = symbol;
                                this.length++;
                            }  
                        }
                        else { 
                            //check if this is of group P and unwrap before inserting
                            if(symbol.group === P && isInt(symbol.power)) {
                                symbol.convert(N);
                            }
                            
                            //transfer the multiplier to the upper symbol but only if the symbol numeric
                            if(symbol.group !== EX) {
                                this.multiplier = this.multiplier.multiply(symbol.multiplier);
                                symbol.toUnitMultiplier();
                            }
                            else {
                                symbol.parens = symbol.multiplier.lessThan(0);
                                this.multiplier = this.multiplier.multiply(symbol.multiplier.clone().abs());
                                symbol.toUnitMultiplier(true);
                            }
                                
                            if(existing) {  
                                //remove because the symbol may have changed
                                symbol = _.multiply(remove(this.symbols, key), symbol);
                                if(symbol.isConstant()) {
                                     this.multiplier = this.multiplier.multiply(symbol.multiplier);
                                     symbol = new Symbol(1); //the dirty work gets done down the line when it detects 1
                                }

                                this.length--;
                                //clean up
                            }
                            
                            //don't insert the symbol if it's 1
                            if(!symbol.isOne(true)) {
                                this.symbols[key] = symbol;
                                this.length++;
                            }
                            else if(symbol.multiplier.lessThan(0)) {
                                 this.negate(); //put back the sign
                            }
                        }
                        
                        //clean up
                        if(this.length === 0) this.convert(N);
                        //update the hash
                        if(this.group === CP || this.group === CB) {
                            this.updateHash();
                        }
                    }
                }

                return this;
            },  
            //the insert method for addition
            attach: function(symbol) {
                if(isArray(symbol)) {
                    for(var i=0; i<symbol.length; i++) this.insert(symbol[i], 'add');
                    return this;
                }
                return this.insert(symbol, 'add');
            },
            //the insert method for multiplication
            combine: function(symbol) {
                if(isArray(symbol)) {
                    for(var i=0; i<symbol.length; i++) this.insert(symbol[i], 'multiply');
                    return this;
                }
                return this.insert(symbol, 'multiply');
            },
            /**
             * This method should be called after any major "surgery" on a symbol.
             * It updates the hash of the symbol for example if the fname of a 
             * function has changed it will update the hash of the symbol.
             */
            updateHash: function() {
                if(this.group === N) return;
                
                if(this.group === FN) {
                    var contents = '',
                        args = this.args,
                        is_parens = this.fname === PARENTHESIS;
                    for(var i=0; i<args.length; i++) contents += (i===0 ? '' : ',')+text(args[i]);
                    var fn_name = is_parens ? '' : this.fname;
                    this.value = fn_name+(is_parens ? contents : inBrackets(contents));
                }
                else if(!(this.group === S || this.group === PL)) {
                    this.value = text(this, 'hash');
                }
            },
            /**
             * this function defines how every group in stored within a group of 
             * higher order think of it as the switchboard for the library. It 
             * defines the hashes for symbols. 
             */
            keyForGroup: function(group) {
                var g = this.group;
                var key; 
                
                if(g === N) {
                    key = this.value;
                }
                else if(g === S || g === P) {
                    if(group === PL) key = this.power.toDecimal();
                    else key = this.value;
                }
                else if(g === FN) { 
                    if(group === PL) key = this.power.toDecimal();
                    else key = text(this, 'hash');
                }
                else if(g === PL) { 
                    //if the order is reversed then we'll assume multiplication
                    //TODO: possible future dilemma
                    if(group === CB) key = text(this, 'hash');
                    else if(group === CP) { 
                        if(this.power.equals(1)) key = this.value;
                        else key = inBrackets(text(this, 'hash'))+Settings.POWER_OPERATOR+this.power.toDecimal();
                    }
                    else if(group === PL) key = this.power.toString();
                    else key = this.value;
                    return key;
                }
                else if(g === CP) {
                    if(group === CP) key = text(this, 'hash');
                    if(group === PL) key = this.power.toDecimal();
                    else key = this.value;
                }
                else if(g === CB) {
                    if(group === PL) key = this.power.toDecimal();
                    else key = text(this, 'hash');
                }
                else if(g === EX) { 
                    if(group === PL) key = text(this.power);
                    else key = text(this, 'hash');
                }
                
                return key;
            },
            /** 
             * Symbols are typically stored in an object which works fine for most
             * cases but presents a problem when the order of the symbols makes
             * a difference. This function simply collects all the symbols and 
             * returns them as an array. If a function is supplied then that 
             * function is called on every symbol contained within the object.
             * @returns {Array}
             */
            collectSymbols: function(fn, opt, sort_fn, expand_symbol) { 
                var collected = [];
                if(!this.symbols) collected.push(this);
                else {
                    for(var x in this.symbols) {
                        var symbol = this.symbols[x];
                        if(expand_symbol && (symbol.group === PL || symbol.group === CP)) {
                            collected = collected.concat(symbol.collectSymbols());
                        }
                        else collected.push( fn ? fn(symbol, opt) : symbol );
                    }
                }
                if(sort_fn === null) sort_fn = undefined; //WTF Firefox? Seriously?
                
                return collected.sort(sort_fn);//sort hopefully gives us some sort of consistency
            },
            /**
             * Returns the latex representation of the symbol
             * @returns {String}
             */
            latex: function(option) {
                return LaTeX.latex(this, option);
            },
            /**
             * Returns the text representation of a symbol
             * @returns {String}
             */
            text: function(option) {
                return text(this, option);
            },
            /**
             * Checks if the function evaluates to 1. e.g. x^0 or 1 :)
             */
            isOne: function(abs) {
                var f = abs ? 'absEquals' : 'equals';
                if(this.group === N) return this.multiplier[f](1);
                else return this.power.equals(0);
            },
            isComposite: function() {
                var g = this.group,
                    pg = this.previousGroup;
                return g === CP || g === PL || pg === PL || pg === CP;
            },
            isCombination: function() {
                var g = this.group,
                    pg = this.previousGroup;
                return g === CB || pg === CB;
            },
            lessThan: function(n) {
                return this.multiplier.lessThan(n);
            },
            greaterThan: function(n) {
                return this.multiplier.greaterThan(n);
            },
            /**
             * Get's the denominator of the symbol if the symbol is of class CB (multiplication)
             * with other classes the symbol is either the denominator or not. 
             * Take x^-1+x^-2. If the symbol was to be mixed such as x+x^-2 then the symbol doesn't have have an exclusive
             * denominator and has to be found by looking at the actual symbols themselves.
             */
            getDenom: function() { 
                var retval, symbol;
                symbol = this.clone();
                //e.g. 1/(x*(x+1))
                if(this.group === CB && this.power.lessThan(0))
                    symbol = _.expand(symbol);

                //if the symbol already is the denominator... DONE!!!
                if(symbol.power.lessThan(0)) {
                    var d = _.parse(symbol.multiplier.den);
                    retval = symbol.toUnitMultiplier();
                    retval.power.negate();
                    retval = _.multiply(d, retval); //put back the coeff
                }
                else if(symbol.group === CB) {
                    retval = _.parse(symbol.multiplier.den);
                    for(var x in symbol.symbols) 
                        if(symbol.symbols[x].power < 0) 
                            retval = _.multiply(retval, symbol.symbols[x].clone().invert());
                }
                else
                    retval = _.parse(symbol.multiplier.den);
                return retval;
            },
            getNum: function() {
                var retval, symbol;
                symbol = this.clone();
                //e.g. 1/(x*(x+1))
                if(symbol.group === CB && symbol.power.lessThan(0))
                    symbol = _.expand(symbol);
                //if the symbol already is the denominator... DONE!!!
                if(symbol.power.greaterThan(0) && symbol.group !== CB) {
                    retval = _.parse(symbol.multiplier.num);
                    retval = _.multiply(retval, symbol.toUnitMultiplier()); 
                }
                else if(symbol.group === CB) {
                    retval = _.parse(symbol.multiplier.num);
                    for(var x in symbol.symbols) 
                        if(symbol.symbols[x].power > 0) 
                            retval = _.multiply(retval, symbol.symbols[x].clone());
                }
                else
                    retval = _.parse(symbol.multiplier.num);
                return retval;
            },
            toString: function() {
                return this.text();
            }
        };
        
        function primeFactors(num) {
            if(isPrime(num)) return [num];
            var l = num, i=1, factors = [], 
                epsilon = 2.2204460492503130808472633361816E-16;
            while(i<l) {
                var quotient = num/i; 
                var whole = Math.floor(quotient);
                var remainder = quotient-whole;
                if(remainder <= epsilon && i>1) {
                    if(PRIMES.indexOf(i) !== -1) factors.push(i);
                    l = whole;
                }
                i++;
            }
            return factors.sort(function(a, b){return a-b;});
        } 
        
        /**
         * This class defines the operators in nerdamer. The thinking is that with using these parameters
         * we should be able to define more operators such as the modulus operator or a boolean operator.
         * Although this initially works at the moment, it fails in some instances due to minor flaws in design which
         * will be addressed in future releases.
         * @param {char} val - The symbol of the operator
         * @param {String} fn - The function it maps to
         * @param {Integer} precedence - The precedence of the operator
         * @param {boolean} left_assoc - Is the operator left or right associative
         * @param {boolean} is_prefix - Is the operator a prefix operator
         * @param {boolean} is_postfix - Is the operator a postfix operator
         * @param {boolean} operation - The prefix or postfix operation the operator preforms if its either
         * @returns {Operator}
         */
        function Operator(val, fn, precedence, left_assoc, is_prefix, is_postfix, operation) {
            this.val = val;
            this.fn = fn;
            this.precedence = precedence;
            this.left_assoc = left_assoc;
            this.is_prefix = is_prefix;
            this.is_postfix = is_postfix || false;
            this.operation = operation;
            this.is_operator = true;
        }
        
        Operator.prototype.toString = function() {
            return this.val;
        };
        
        function Bracket(val, bracket_id, is_open, fn, typ) {
            this.val = val;
            this.bracket_id = bracket_id;
            this.open = !!is_open;
            this.fn = fn;
            this.type = typ;
        }
        
        Bracket.prototype.toString = function() {
            return this.val;
        };
        
        function Prefix(operator) {
            this.operation = operator.operation;
            this.val = operator.val;
            this.is_prefix_operator = true;
        }
        
        Prefix.prototype.toString = function() {
            return '`'+this.val;
        };
        
        //custom errors
        //thrown if trying to divide by zero
        function DivisionByZero(msg){
            this.message = msg || "";
        }
        DivisionByZero.prototype = Object.create(Error.prototype);
        //thrown in parser 
        function ParseError(msg){
            this.message = msg || "";
        }
        ParseError.prototype = Object.create(Error.prototype);
        //thrown for undefined errors
        function UndefinedError(msg){
            this.message = msg || "";
        }
        UndefinedError.prototype = Object.create(Error.prototype);
        //thrown for maximum iteration error
        function MaximumIterationsReached(msg){
            this.message = msg || "";
        }
        MaximumIterationsReached.prototype = Object.create(Error.prototype);
        
        //Uses modified Shunting-yard algorithm. http://en.wikipedia.org/wiki/Shunting-yard_algorithm
        function Parser(){
            //we want the underscore to point to this parser not the global nerdamer parser.
            var _ = this, 
                bin = {},
                constants = this.constants = {
                    PI: Math.PI,
                    E:  Math.E
                },
                subs = {
                    e:  Math.E,
                    pi: Math.PI
                };
                
            var complex = {
                prec: undefined,
                cos: function(r, i) {
                    var re, im;
                    re = _.parse(Math.cos(r)*Math.cosh(i));
                    im = _.parse(Math.sin(r)*Math.sinh(i));
                    return _.subtract(re, _.multiply(im, Symbol.imaginary()));
                },
                sin: function(r, i) {
                    var re, im;
                    re = _.parse(Math.sin(r)*Math.cosh(i));
                    im = _.parse(Math.cos(r)*Math.sinh(i));
                    return _.subtract(re, _.multiply(im, Symbol.imaginary()));
                },
                tan: function(r, i) {
                    var re, im;
                    re = _.parse(Math.sin(2*r)/(Math.cos(2*r)+Math.cosh(2*i)));
                    im = _.parse(Math.sinh(2*i)/(Math.cos(2*r)+Math.cosh(2*i)));
                    return _.add(re, _.multiply(im, Symbol.imaginary()));
                },
                sec: function(r, i) {
                    var t = this.removeDen(this.cos(r, i));
                    return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));
                },
                csc: function(r, i) { 
                    var t = this.removeDen(this.sin(r, i));
                    return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));
                },
                cot: function(r, i) {
                    var t = this.removeDen(this.tan(r, i));
                    return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));
                },
                acos: function(r, i) { 
                    var symbol, sq, a, b, c;
                    symbol = this.fromArray([r, i]);
                    sq = _.expand(_.pow(symbol.clone(), new Symbol(2))); //z*z
                    a = _.multiply(sqrt(_.subtract(new Symbol(1), sq)), Symbol.imaginary());
                    b = _.expand(_.add(symbol.clone(), a));
                    c = log(b);
                    return _.expand(_.multiply(Symbol.imaginary().negate(), c));
                },
                asin: function(r, i) {
                    return _.subtract(_.parse('pi/2'), this.acos(r, i));
                },
                atan: function(r, i) {
                    var a, b, c, symbol;
                    symbol = complex.fromArray([r, i]);
                    a = _.expand(_.multiply(Symbol.imaginary(), symbol.clone()));
                    b = log(_.expand(_.subtract(new Symbol(1), a.clone())));
                    c = log(_.expand(_.add(new Symbol(1), a.clone())));
                    return _.expand(_.multiply(_.divide(Symbol.imaginary(), new Symbol(2)), _.subtract(b, c)));
                },
                asec: function(r, i) {
                    var d = this.removeDen([r, i]);
                    d[1].negate();
                    return this.acos.apply(this, d);
                },
                acsc: function(r, i) {
                    var d = this.removeDen([r, i]);
                    d[1].negate();
                    return this.asin.apply(this, d);
                },
                acot: function(r, i) {
                    var d = this.removeDen([r, i]);
                    d[1].negate();
                    return this.atan.apply(this, d);
                },
                //Hyperbolic trig
                cosh: function(r, i) {
                    var re, im;
                    re = _.parse(Math.cosh(r)*Math.cos(i));
                    im = _.parse(Math.sinh(r)*Math.sin(i));
                    return _.add(re, _.multiply(im, Symbol.imaginary()));
                },
                sinh: function(r, i) {
                    var re, im;
                    re = _.parse(Math.sinh(r)*Math.cos(i));
                    im = _.parse(Math.cosh(r)*Math.sin(i));
                    return _.add(re, _.multiply(im, Symbol.imaginary()));
                },
                tanh: function(r, i) {
                    var re, im;
                    re = _.parse(Math.sinh(2*r)/(Math.cos(2*i)+Math.cosh(2*r)));
                    im = _.parse(Math.sin(2*i)/(Math.cos(2*i)+Math.cosh(2*r)));
                    return _.subtract(re, _.multiply(im, Symbol.imaginary()));
                },
                sech: function(r, i) {
                    var t = this.removeDen(this.cosh(r, i));
                    return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));
                },
                csch: function(r, i) {
                    var t = this.removeDen(this.sinh(r, i));
                    return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));
                },
                coth: function(r, i) {
                    var t = this.removeDen(this.tanh(r, i));
                    return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));
                },
                acosh: function(r, i) {
                    var a, b, z;
                    z = this.fromArray([r, i]);
                    a = sqrt(_.add(z.clone(), new Symbol(1)));
                    b = sqrt(_.subtract(z.clone(), new Symbol(1)));
                    return _.expand(log(_.add(z, _.expand(_.multiply(a, b)))));
                },
                asinh: function(r, i) {
                    var a, z;
                    z = this.fromArray([r, i]);
                    a = sqrt(_.add(new Symbol(1), _.expand(_.pow(z.clone(), new Symbol(2)))));
                    return _.expand(log(_.add(z, a)));
                },
                atanh: function(r, i) {
                    var a, b, z;
                    z = this.fromArray([r, i]);
                    a = log(_.add(z.clone(), new Symbol(1)));
                    b = log(_.subtract(new Symbol(1), z));
                    return _.expand(_.divide(_.subtract(a, b), new Symbol(2)));
                },
                asech: function(r, i) {
                    var t = this.removeDen([r, i]);
                    t[1].negate();
                    return this.acosh.apply(this, t);
                },
                acsch: function(r, i) {
                    var t = this.removeDen([r, i]);
                    t[1].negate();
                    return this.asinh.apply(this, t);
                },
                acoth: function(r, i) {
                    var t = this.removeDen([r, i]);
                    t[1].negate();
                    return this.atanh.apply(this, t);
                },
                sqrt: function(symbol) {
                    var re, im, h, a, d;
                    re = symbol.realpart();
                    im = symbol.imagpart();
                    h = Symbol.hyp(re, im);
                    a = _.add(re.clone(), h);
                    d = sqrt(_.multiply(new Symbol(2), a.clone()));
                    return _.add(_.divide(a.clone(), d.clone()), _.multiply(_.divide(im, d), Symbol.imaginary()));
                },
                log: function(r, i) {
                    var re, im;
                    re = log(Symbol.hyp(r, i));
                    im = _.parse(Math.atan2(i, r));
                    return _.add(re, _.multiply(Symbol.imaginary(), im));
                },
                removeDen: function(symbol) {
                    var den, r, i, re, im;
                    if(isArray(symbol)) {
                        r = symbol[0];
                        i = symbol[1];
                    }
                    else {
                        r = symbol.realpart();
                        i = symbol.imagpart();
                    }
                        
                    den = Math.pow(r, 2)+Math.pow(i, 2);
                    re = _.parse(r/den);
                    im = _.parse(i/den);
                    return [re, im];
                },
                fromArray: function(arr) {
                    return _.add(arr[0], _.multiply(Symbol.imaginary(), arr[1]));
                },
                evaluate: function(symbol, f) {
                    var re, im, sign;
                        
                    sign = symbol.power.sign();
                    //remove it from under the denominator
                    symbol.power = symbol.power.abs();
                    //expand
                    if(symbol.power.greaterThan(1))
                        symbol = _.expand(symbol);
                    //remove the denominator
                    if(sign < 0) {
                        var d = this.removeDen(symbol);
                        re = d[0];
                        im = d[1];
                    }
                    else {
                        re = symbol.realpart();
                        im = symbol.imagpart();
                    }

                    if(re.isConstant('all') && im.isConstant('all'))
                        return this[f].call(this, re, im);
                    return _.symfunction(f, [symbol]);
                }
            };
                
            var trig = this.Trig = {
                //container for trigonometric function
                cos: function(symbol) {
                    if(symbol.equals('pi') && symbol.multiplier.den.equals(2))
                        return new Symbol(0);
                    
                    if(Settings.PARSE2NUMBER) { 
                        if(symbol.equals(new Symbol(Math.PI/2)))
                            return new Symbol(0);
                        if(symbol.isConstant()) 
                            return new Symbol(Math.cos(symbol.valueOf()));
                        if(symbol.isImaginary()) {
                            return complex.evaluate(symbol, 'cos');
                        }
                    }
                    if(symbol.equals(0))
                        return new Symbol(1);
                    
                    var retval, 
                        c = false,
                        q = getQuadrant(symbol.multiplier.toDecimal()),
                        m = symbol.multiplier.abs();
                    symbol.multiplier = m;

                    if(symbol.isPi() && symbol.isLinear()) { 
                        //return for 1 or -1 for multiples of pi
                        if(isInt(m)) {
                            retval  = new Symbol(even(m) ? 1 : -1);
                        } 
                        else {
                            var n = Number(m.num), d = Number(m.den);
                            if(d === 2) retval = new Symbol(0);
                            else if(d === 3) {
                                retval = _.parse('1/2'); c = true;
                            }
                            else if(d === 4) {
                                retval = _.parse('1/sqrt(2)'); c = true;
                            }
                            else if(d === 6) {
                                retval = _.parse('sqrt(3)/2'); c = true;
                            }
                            else retval = _.symfunction('cos', [symbol]);
                        }
                    }

                    if(c && (q === 2 || q === 3)) retval.negate();

                    if(!retval) retval = _.symfunction('cos', [symbol]);

                    return retval;
                },
                sin: function(symbol) { 
                    if(Settings.PARSE2NUMBER) {
                        if(symbol.isConstant()) 
                            return new Symbol(Math.sin(symbol.valueOf()));
                        if(symbol.isImaginary()) 
                            return complex.evaluate(symbol, 'sin');
                    }
                    
                    if(symbol.equals(0))
                        return new Symbol(0);
                    
                    var retval, 
                        c = false,
                        q = getQuadrant(symbol.multiplier.toDecimal()),
                        sign = symbol.multiplier.sign(),
                        m = symbol.multiplier.abs();
                    symbol.multiplier = m;
                    if(symbol.equals('pi'))
                        retval = new Symbol(0);
                    else if(symbol.isPi() && symbol.isLinear()) { 
                        //return for 0 for multiples of pi
                        if(isInt(m)) {
                            retval  = new Symbol(0);
                        } 
                        else {
                            var n = m.num, d = m.den;
                            if(d == 2) {
                                retval = new Symbol(1); c = true;
                            }
                            else if(d == 3) {
                                retval = _.parse('sqrt(3)/2'); c = true;
                            }
                            else if(d == 4) {
                                retval = _.parse('1/sqrt(2)'); c = true;
                            }
                            else if(d == 6) {
                                retval = _.parse('1/2'); c = true;
                            }
                            else retval = _.symfunction('sin', [symbol]);
                        }
                    }

                    if(!retval) retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));

                    if(c && (q === 3 || q === 4)) retval.negate();

                    return retval;
                },
                tan: function(symbol) {
                    if(Settings.PARSE2NUMBER) {
                        if(symbol.isConstant())
                            return new Symbol(Math.tan(symbol.valueOf()));
                        if(symbol.isImaginary()) 
                            return complex.evaluate(symbol, 'tan');
                    }
                    var retval, 
                        c = false,
                        q = getQuadrant(symbol.multiplier.toDecimal()),
                        m = symbol.multiplier;

                    symbol.multiplier = m;

                    if(symbol.isPi() && symbol.isLinear()) { 
                        //return 0 for all multiples of pi
                        if(isInt(m)) {
                            retval  = new Symbol(0);
                        } 
                        else {
                            var n = m.num, d = m.den;
                            if(d == 2) 
                                throw new UndefinedError('tan is undefined for '+symbol.toString());
                            else if(d == 3) {
                                retval = _.parse('sqrt(3)'); c = true;
                            }
                            else if(d == 4) {
                                retval = new Symbol(1); c = true;
                            }
                            else if(d == 6) {
                                retval = _.parse('1/sqrt(3)'); c = true;
                            }
                            else retval = _.symfunction('tan', [symbol]);
                        }
                    }

                    if(!retval) retval = _.symfunction('tan', [symbol]);

                    if(c && (q === 2 || q === 4)) retval.negate();

                    return retval;
                },
                sec: function(symbol) {
                    if(Settings.PARSE2NUMBER) {
                        if(symbol.isConstant())
                            return new Symbol(Math2.sec(symbol.valueOf()));
                        if(symbol.isImaginary()) 
                            return complex.evaluate(symbol, 'sec');
                    }

                    var retval, 
                        c = false,
                        q = getQuadrant(symbol.multiplier.toDecimal()),
                        m = symbol.multiplier.abs();
                    symbol.multiplier = m;

                    if(symbol.isPi() && symbol.isLinear()) { 
                        //return for 1 or -1 for multiples of pi
                        if(isInt(m)) {
                            retval  = new Symbol(even(m) ? 1 : -1);
                        } 
                        else {
                            var n = m.num, d = m.den;
                            if(d == 2) 
                                throw new UndefinedError('sec is undefined for '+symbol.toString());
                            else if(d == 3) {
                                retval = new Symbol(2); c = true;
                            }
                            else if(d == 4) {
                                retval = _.parse('sqrt(2)'); c = true;
                            }
                            else if(d == 6) {
                                retval = _.parse('2/sqrt(3)'); c = true;
                            }
                            else retval = _.symfunction('sec', [symbol]);
                        }
                    }

                    if(c && (q === 2 || q === 3)) retval.negate();

                    if(!retval) retval = _.symfunction('sec', [symbol]);

                    return retval;
                },
                csc: function(symbol) {
                    if(Settings.PARSE2NUMBER) {
                        if(symbol.isConstant())
                            return new Symbol(Math2.csc(symbol.valueOf()));
                        if(symbol.isImaginary()) 
                            return complex.evaluate(symbol, 'csc');
                    }
                    
                    var retval, 
                        c = false,
                        q = getQuadrant(symbol.multiplier.toDecimal()),
                        m = symbol.multiplier.abs();

                    symbol.multiplier = m;

                    if(symbol.isPi() && symbol.isLinear()) { 
                        //return for 0 for multiples of pi
                        if(isInt(m)) {
                            throw new UndefinedError('csc is undefined for '+symbol.toString());
                        } 
                        else {
                            var n = m.num, d = m.den;
                            if(d == 2) {
                                retval = new Symbol(1); c = true;
                            }
                            else if(d == 3) {
                                retval = _.parse('2/sqrt(3)'); c = true;
                            }
                            else if(d == 4) {
                                retval = _.parse('sqrt(2)'); c = true;
                            }
                            else if(d == 6) {
                                retval = new Symbol(2); c = true;
                            }
                            else retval = _.symfunction('csc', [symbol]);
                        }
                    }

                    if(!retval) retval = _.symfunction('csc', [symbol]);

                    if(c && (q === 3 || q === 4)) retval.negate();

                    return retval;
                },
                cot: function(symbol) {
                    if(Settings.PARSE2NUMBER) {
                        if(symbol.isConstant())
                            return new Symbol(Math2.cot(symbol.valueOf()));
                        if(symbol.isImaginary()) 
                            return complex.evaluate(symbol, 'cot');
                    }
                    var retval, 
                        c = false,
                        q = getQuadrant(symbol.multiplier.toDecimal()),
                        m = symbol.multiplier;

                    symbol.multiplier = m;

                    if(symbol.isPi() && symbol.isLinear()) { 
                        //return 0 for all multiples of pi
                        if(isInt(m)) {
                            throw new UndefinedError('cot is undefined for '+symbol.toString());
                        } 
                        else {
                            var n = m.num, d = m.den;
                            if(d == 2) retval = new Symbol(0);
                            else if(d == 3) {
                                retval = _.parse('1/sqrt(3)'); c = true;
                            }
                            else if(d == 4) {
                                retval = new Symbol(1); c = true;
                            }
                            else if(d == 6) {
                                retval = _.parse('sqrt(3)'); c = true;
                            }
                            else retval = _.symfunction('cot', [symbol]);
                        }
                    }

                    if(!retval) retval = _.symfunction('cot', [symbol]);

                    if(c && (q === 2 || q === 4)) retval.negate();

                    return retval;
                },
                acos: function(symbol) {
                    if(Settings.PARSE2NUMBER) {
                        if(symbol.isConstant())
                            return new Symbol(Math.acos(symbol.valueOf()));
                        if(symbol.isImaginary()) 
                            return complex.evaluate(symbol, 'acos');
                    }
                    return _.symfunction('acos', arguments);
                },
                asin: function(symbol) {
                    if(Settings.PARSE2NUMBER) {
                        if(symbol.isConstant())
                            return new Symbol(Math.asin(symbol.valueOf()));
                        if(symbol.isImaginary()) 
                            return complex.evaluate(symbol, 'asin');
                    }
                    return _.symfunction('asin', arguments);
                },
                atan: function(symbol) {
                    var retval;
                    if(symbol.equals(0))
                        retval = new Symbol(0);
                    else if(Settings.PARSE2NUMBER) {
                        if(symbol.isConstant())
                            return new Symbol(Math.atan(symbol.valueOf()));
                        if(symbol.isImaginary()) 
                            return complex.evaluate(symbol, 'atan');
                    }
                    else if(symbol.equals(-1))
                        retval = _.parse('-pi/4');
                    else 
                        retval = _.symfunction('atan', arguments);
                    return retval;
                },
                asec: function(symbol) {
                    if(Settings.PARSE2NUMBER) {
                        if(symbol.isConstant())
                            return new Symbol(Math.acos(symbol.invert().valueOf()));
                        if(symbol.isImaginary()) 
                            return complex.evaluate(symbol, 'asec');
                    }
                    return _.symfunction('asec', arguments);
                },
                acsc: function(symbol) {
                    if(Settings.PARSE2NUMBER) {
                        if(symbol.isConstant())
                            return new Symbol(Math.acos(symbol.invert().valueOf()));
                        if(symbol.isImaginary()) 
                            return complex.evaluate(symbol, 'acsc');
                    }
                    return _.symfunction('acsc', arguments);
                },
                acot: function(symbol) {
                    var retval;
                    if(Settings.PARSE2NUMBER) {
                        if(symbol.isImaginary()) {
                            retval = complex.evaluate(symbol, 'acot');
                        }
                        else {
                            var k = _.parse('pi/2');
                            if(symbol.equals(0))
                                retval = k;
                            else {
                                if(symbol.lessThan(0))
                                    k.negate();
                                retval = _.subtract(k, trig.atan(symbol));
                            }
                        }
                    }
                    else 
                        retval = _.symfunction('acot', arguments);
                    return retval;    
                },
                atan2: function(a, b) {
                    if(a.equals(0) && b.equals(0))
                        throw new UndefinedError('atan2 is undefined for 0, 0');
                    
                    if(Settings.PARSE2NUMBER && a.isConstant() && b.isConstant()) {
                        return new Symbol(Math.atan2(a, b));
                    }
                    return _.symfunction('atan2', arguments);
                }
            };
            this.trig = trig;
            
            var trigh = this.Trigh = {
                //container for hyperbolic trig function
                cosh: function(symbol) {
                    var retval;
                    if(Settings.PARSE2NUMBER) { 
                        if(symbol.isConstant()) 
                            return new Symbol(Math.cosh(symbol.valueOf()));
                        if(symbol.isImaginary()) {
                            return complex.evaluate(symbol, 'cosh');
                        }
                    }
                    
                    return retval = _.symfunction('cosh', arguments);
                },
                sinh: function(symbol) {
                    var retval;
                    if(Settings.PARSE2NUMBER) { 
                        if(symbol.isConstant()) 
                            return new Symbol(Math.sinh(symbol.valueOf()));
                        if(symbol.isImaginary()) {
                            return complex.evaluate(symbol, 'sinh');
                        }
                    }
                    
                    return retval = _.symfunction('sinh', arguments);
                },
                tanh: function(symbol) {
                    var retval;
                    if(Settings.PARSE2NUMBER) { 
                        if(symbol.isConstant()) 
                            return new Symbol(Math.tanh(symbol.valueOf()));
                        if(symbol.isImaginary()) {
                            return complex.evaluate(symbol, 'tanh');
                        }
                    }
                    
                    return retval = _.symfunction('tanh', arguments);
                },
                sech: function(symbol) {
                    var retval;
                    if(Settings.PARSE2NUMBER) { 
                        if(symbol.isConstant()) 
                            return new Symbol(Math.sech(symbol.valueOf()));
                        if(symbol.isImaginary()) {
                            return complex.evaluate(symbol, 'sech');
                        }
                    }
                    
                    return retval = _.symfunction('sech', arguments);
                },
                csch: function(symbol) {
                    var retval;
                    if(Settings.PARSE2NUMBER) { 
                        if(symbol.isConstant()) 
                            return new Symbol(Math.csch(symbol.valueOf()));
                        if(symbol.isImaginary()) {
                            return complex.evaluate(symbol, 'csch');
                        }
                    }
                    
                    return retval = _.symfunction('csch', arguments);
                },
                coth: function(symbol) {
                    var retval;
                    if(Settings.PARSE2NUMBER) { 
                        if(symbol.isConstant()) 
                            return new Symbol(Math.coth(symbol.valueOf()));
                        if(symbol.isImaginary()) {
                            return complex.evaluate(symbol, 'coth');
                        }
                    }
                    
                    return retval = _.symfunction('coth', arguments);
                },
                acosh: function(symbol) {
                    var retval;
                    if(Settings.PARSE2NUMBER && symbol.isImaginary())
                        retval = complex.evaluate(symbol, 'acosh');
                    else if(Settings.PARSE2NUMBER) 
                        retval = evaluate(_.parse(format('log(({0})+sqrt(({0})^2-1))', symbol.toString())));
                    else 
                        retval = _.symfunction('acosh', arguments);
                    return retval;
                },
                asinh: function(symbol) {
                    var retval;
                    if(Settings.PARSE2NUMBER && symbol.isImaginary())
                        retval = complex.evaluate(symbol, 'asinh');
                    else if(Settings.PARSE2NUMBER)
                        retval = evaluate(_.parse(format('log(({0})+sqrt(({0})^2+1))', symbol.toString())));
                    else 
                        retval = _.symfunction('asinh', arguments);
                    return retval;
                },
                atanh: function(symbol) {
                    var retval;
                    if(Settings.PARSE2NUMBER && symbol.isImaginary())
                        retval = complex.evaluate(symbol, 'atanh');
                    else if(Settings.PARSE2NUMBER) { 
                        retval = evaluate(_.parse(format('(1/2)*log((1+({0}))/(1-({0})))', symbol.toString())));
                    }
                    else 
                        retval = _.symfunction('atanh', arguments);
                    return retval;
                },
                asech: function(symbol) {
                    var retval;
                    if(Settings.PARSE2NUMBER && symbol.isImaginary())
                        retval = complex.evaluate(symbol, 'asech');
                    else if(Settings.PARSE2NUMBER)
                        retval = evaluate(log(_.add(symbol.clone().invert(), sqrt(_.subtract(_.pow(symbol, new Symbol(-2)), new Symbol(1))))));
                    else 
                        retval = _.symfunction('asech', arguments);
                    return retval;
                },
                acsch: function(symbol) {
                    var retval;
                    if(Settings.PARSE2NUMBER && symbol.isImaginary())
                        retval = complex.evaluate(symbol, 'acsch');
                    else if(Settings.PARSE2NUMBER)
                        retval = evaluate(_.parse(format('log((1+sqrt(1+({0})^2))/({0}))', symbol.toString())));
                    else 
                        retval = _.symfunction('acsch', arguments);
                    return retval;
                },
                acoth: function(symbol) {
                    var retval;
                    if(Settings.PARSE2NUMBER && symbol.isImaginary())
                        retval = complex.evaluate(symbol, 'acoth');
                    else if(Settings.PARSE2NUMBER) {
                        if(symbol.equals(1))
                            retval = Symbol.infinity();
                        else
                            retval = evaluate(
                                    _.divide(
                                        log(_.divide(_.add(symbol.clone(), new Symbol(1)), _.subtract(symbol.clone(), new Symbol(1)))), 
                                new Symbol(2)));
                    }
                    else 
                        retval = _.symfunction('acoth', arguments);
                    return retval;
                }
            };
            this.trigh = trigh;
            
            //list all the supported operators
            var operators = this.operators = {
                    '^' : new Operator('^', 'pow', 6, false, false),
                    '**' : new Operator('**', 'pow', 6, false, false),
                    '!!' : new Operator('!!', 'dfactorial',5, false, false, true, function(e) {
                        return _.symfunction(DOUBLEFACTORIAL, [e]); //wrap it in a factorial function
                    }),
                    '!' : new Operator('!', 'factorial', 5, false, false, true, function(e) {
                        return factorial(e); //wrap it in a factorial function
                    }),  
                    //done with crazy fix
                    '*' : new Operator('*', 'multiply', 4, true, false),
                    '/' : new Operator('/', 'divide', 4, true, false),
                    '%' : new Operator('%', 'percent', 4, true, false, true, function(e) {
                        return _.percent(e);
                    }),
                    '%+' : new Operator('%+', 'percent_add', 2, true, false),
                    '%-' : new Operator('%-', 'percent_subtract', 3, true, false),
                    '+' : new Operator('+', 'add', 3, true, true, false, function(e) {
                        return e;
                    }),
                    '-' : new Operator('-', 'subtract', 3, true, true, false, function(e) {
                        return e.negate();
                    }),
                    //begin crazy fix ... :( TODO!!! revisit
                    '!+' : new Operator('!+', 'factadd', 3, true, true, false),
                    '!!+' : new Operator('!!+', 'dfactadd', 3, true, true, false),
                    '!-' : new Operator('!-', 'factsub', 3, true, true, false),
                    '!!-' : new Operator('!!-', 'dfactsub', 3, true, true, false),
                    '=' : new Operator('=', 'equals', 2, false, false),
                    '==' : new Operator('==', 'eq', 1, false, false),
                    '<' : new Operator('<', 'lt', 1, false, false),
                    '<=' : new Operator('<=', 'lte', 1, false, false),
                    '>' : new Operator('>', 'gt', 1, false, false),
                    '>=' : new Operator('>=', 'gte', 1, false, false),
                    ',' : new Operator(',', 'comma', 0, true, false)
                },
                //list of supported brackets
                brackets = {
                    '(': new Bracket('(', 0, true, null, 'round'),
                    ')': new Bracket(')', 0, false, null, 'round'),
                    '[': new Bracket('[', 1, true, function() {
                        var f = new Symbol('vector');
                        f.is_function = true;
                        return f;
                    }, 'square'),
                    ']': new Bracket(']', 1, false, null, 'square')
                },
                // Supported functions.
                // Format: function_name: [mapped_function, number_of_parameters]
                functions = this.functions = {
                    'cos'               : [ trig.cos, 1],
                    'sin'               : [ trig.sin, 1],
                    'tan'               : [ trig.tan, 1],
                    'sec'               : [ trig.sec, 1],
                    'csc'               : [ trig.csc, 1],
                    'cot'               : [ trig.cot, 1],
                    'acos'              : [ trig.acos, 1],
                    'asin'              : [ trig.asin, 1],
                    'atan'              : [ trig.atan, 1],
                    'asec'              : [ trig.asec, 1],
                    'acsc'              : [ trig.acsc, 1],
                    'acot'              : [ trig.acot, 1],
                    'atan2'             : [ trig.atan2, 2],
                    'acoth'             : [ trigh.acoth, 1],
                    'asech'             : [ trigh.asech, 1],
                    'acsch'             : [ trigh.acsch, 1],
                    'sinh'              : [ trigh.sinh, 1],
                    'cosh'              : [ trigh.cosh, 1],
                    'tanh'              : [ trigh.tanh, 1],
                    'asinh'             : [ trigh.asinh, 1],
                    'sech'              : [ trigh.sech, 1],
                    'csch'              : [ trigh.csch, 1],
                    'coth'              : [ trigh.coth, 1],
                    'acosh'             : [ trigh.acosh, 1],
                    'atanh'             : [ trigh.atanh, 1],
                    'log10'             : [ , 1],
                    'exp'               : [ , 1],
                    'min'               : [ min ,-1],
                    'max'               : [ max,-1],
                    'erf'               : [ , 1],
                    'floor'             : [ , 1],
                    'ceil'              : [ , 1],
                    'trunc'             : [ , 1],
                    'Si'                : [ , 1],
                    'step'              : [ , 1],
                    'rect'              : [ , 1],
                    'sinc'              : [ , 1],
                    'tri'               : [ , 1],
                    'sign'              : [ sign, 1],
                    'Ci'                : [ , 1],
                    'Ei'                : [ , 1],
                    'Shi'               : [ , 1],
                    'Chi'               : [ , 1],
                    'fib'               : [ , 1],
                    'fact'              : [factorial, 1],
                    'factorial'         : [factorial, 1],
                    'dfactorial'        : [ , 1],
                    'gamma_incomplete'  : [ , [1, 2]],
                    'round'             : [ round, [1, 2]],
                    'mod'               : [ mod, 2],
                    'pfactor'           : [ pfactor , 1],
                    'vector'            : [ vector, -1],
                    'matrix'            : [ matrix, -1],
                    'imatrix'           : [ imatrix, -1],
                    'parens'            : [ parens, -1],
                    'sqrt'              : [ sqrt, 1],
                    'nthroot'           : [ nthroot, 2],
                    'log'               : [ log , [1, 2]],
                    'expand'            : [ expand , 1],
                    'abs'               : [ abs , 1],
                    'invert'            : [ invert, 1],
                    'determinant'       : [ determinant, 1],
                    'size'              : [ size, 1],
                    'transpose'         : [ transpose, 1],
                    'dot'               : [ dot, 2],
                    'cross'             : [ cross, 2],
                    'vecget'            : [ vecget, 2],
                    'vecset'            : [ vecset, 3],
                    'matget'            : [ matget, 3],
                    'matset'            : [ matset, 4],
                    'matgetrow'         : [ matgetrow, 2],
                    'matsetrow'         : [ matsetrow, 3],
                    'matgetcol'         : [ matgetcol, 2],
                    'matsetcol'         : [ matsetcol, 3],
                    'IF'                : [ IF, 3],
                    //imaginary support
                    'realpart'          : [ realpart, 1],
                    'imagpart'          : [ imagpart, 1],
                    'conjugate'         : [ conjugate, 1],
                    'arg'               : [ arg, 1],
                    'polarform'         : [ polarform, 1],
                    'rectform'          : [ rectform, 1],
                    'sort'              : [ sort, [1, 2]],
                };

            this.error = err;
            
            //this function is used to comb through the function modules and find a function given its name
            var findFunction = function(fname) {
                var fmodules = Settings.FUNCTION_MODULES,
                    l = fmodules.length;
                for(var i=0; i<l; i++) {
                    var fmodule = fmodules[i];
                    if(fname in fmodule)
                        return fmodule[fname];
                }
                err('The function '+fname+' is undefined!');
            };

            var allNumbers = function(args) {
                for(var i=0; i<args.length; i++)
                    if(args[i].group !== N)
                        return false;
                return true;
            };
            
            var allConstants = function(args) {
                for(var i=0; i<args.length; i++) {
                    if(args[i].isPi() || args[i].isE())
                        continue;
                    if(!args[i].isConstant(true))
                        return false;
                }
                        
                return true;
            };
            
            /**
             * This method gives the ability to override operators with new methods.
             * @param {String} which
             * @param {Function} with_what
             */
            this.override = function(which, with_what) {
                if(!bin[which]) bin[which] = [];
                bin[which].push(this[which]);
                this[which] = with_what;
            };
            
            /**
             * Restores a previously overridden operator
             * @param {String} what
             */
            this.restore = function(what) {
                if(this[what]) this[what] = bin[what].pop();
            };
            
            /**
             * This method is supposed to behave similarly to the override method but it does not override
             * the existing function rather it only extends it
             * @param {String} what
             * @param {Function} with_what
             * @param {boolean} force_call
             */
            this.extend = function(what, with_what, force_call) {
                var _ = this,
                    extended = this[what];
                if(typeof extended === 'function' && typeof with_what === 'function') {
                    var f = this[what];
                    this[what] = function(a, b) {
                        if(isSymbol(a) && isSymbol(b) && !force_call) return f.call(_, a, b);
                        else return with_what.call(_, a, b, f);
                    };
                }
            };
            
            /**
             * Generates library's representation of a function. It's a fancy way of saying a symbol with 
             * a few extras. The most important thing is that that it gives a fname and 
             * an args property to the symbols in addition to changing its group to FN
             * @param {String} fn_name
             * @param {Array} params
             * @returns {Symbol}
             */
            this.symfunction = function(fn_name, params) { 
                //call the proper function and return the result;
                var f = new Symbol(fn_name);
                f.group = FN;
                if(typeof params === 'object')
                    params = [].slice.call(params);//ensure an array
                f.args = params;
                f.fname = fn_name === PARENTHESIS ? '' : fn_name;
                f.updateHash();
                return f;
            };
            
            /**
             * An internal function call for the Parser. This will either trigger a real 
             * function call if it can do so or just return a symbolic representation of the 
             * function using symfunction.
             * @param {String} fn_name
             * @param {Array} args
             * @returns {Symbol}
             */
            this.callfunction = function(fn_name, args, allowed_args) { 
                var fn_settings = functions[fn_name];
                
                if(!fn_settings) 
                    err('Nerdamer currently does not support the function '+fn_name);
                
                var num_allowed_args = fn_settings[1] || allowed_args, //get the number of allowed arguments
                    fn = fn_settings[0], //get the mapped function
                    retval;
                //We want to be able to call apply on the arguments or create a symfunction. Both require
                //an array so make sure to wrap the argument in an array.
                if(!(args instanceof Array)) 
                    args = args !== undefined ?  [args] : [];

                if(num_allowed_args !== -1) {
                    var is_array = isArray(num_allowed_args),
                        min_args = is_array ? num_allowed_args[0] : num_allowed_args,
                        max_args = is_array ? num_allowed_args[1] : num_allowed_args,
                        num_args = args.length;
                
                    var error_msg = fn_name+' requires a {0} of {1} arguments. {2} provided!';
                    
                    if(num_args < min_args) err(format(error_msg, 'minimum', min_args, num_args));
                    if(num_args > max_args) err(format(error_msg, 'maximum', max_args, num_args));
                }

                /*
                 * The following are very important to the how nerdamer constructs functions!
                 * Assumption 1 - if fn is undefined then handling of the function is purely numeric. This
                 *     enables us to reuse Math, Math2, ..., any function from Settings.FUNCTIONS_MODULES entry
                 * Assumption 2 - if fn is defined then that function takes care of EVERYTHING including symbolics
                 * Assumption 3 - if the user calls symbolics on a function that returns a numeric value then
                 *     they are expecting a symbolic output.
                 */
                if(!fn) { 
                    //Remember assumption 1. No function defined so it MUST be numeric in nature
                    fn = findFunction(fn_name); 
                    if(Settings.PARSE2NUMBER && allNumbers(args)) 
                        retval = bigConvert(fn.apply(fn, args));
                    else
                        retval = _.symfunction(fn_name, args);
                }
                else { 
                    //Remember assumption 2. The function is defined so it MUST handle all aspects including numeric values
                    retval = fn.apply(fn_settings[2], args);
                }

                return retval;
            };
            /**
             * Build a regex based on the operators currently loaded. These operators are to be ignored when 
             * substituting spaces for multiplication
             */
            this.operator_filter_regex = (function() {
                //we only want the operators which are singular since those are the ones
                //that nerdamer uses anyway
                var ostr = '^\\'+Object.keys(operators).filter(function(x) {
                    if(x.length === 1)
                        return x;
                }).join('\\');
                //create a regex which captures all spaces between characters except those
                //have an operator on one end
                return new RegExp('(['+ostr+'])\\s+(['+ostr+'])');
            })();
            
            /*
             * This method parses the tree
             * @param {String[]} rpn
             * @returns {Symbol}
             */
            this.parseTree = function(rpn, subs) { 
                var q = []; // The container for parsed values
                var l = rpn.length;
                // begin parsing
                for(var i=0; i<l; i++) {
                    var e = rpn[i];
                    if(e.is_prefix_operator || e.is_postfix) { 
                        q.push(e.operation(q.pop()));
                        continue;
                    }
                    if(e.is_operator) {
                        var b = q.pop(),
                            a = q.pop();
                        if(isArray(b)) //misread function
                            _.error('Unrecognized function "'+a.value+'"');
                        if(typeof a === 'undefined' && !e.is_postfix)
                            _.error(e+' is not a valid postfix opertor');
                        q.push(this[e.fn](a, b));
                    }
                    else if(e.value in functions) { 
                        q.push(_.callfunction(e.value, q.pop()));
                    }
                    else { 
                        // Blank denotes a beginning of a scope with a prefix operator so all we have to do is 
                        // convert it to a zero
                        if(e === '') {
                            q.push(new Symbol(0));
                        }
                        else {
                            var unsubbed = e;
                            // make substitutions
                            //first sub in aliases
                            if(e in Settings.ALIASES)
                                e = _.parse(Settings.ALIASES[e]);
                            //constants take higher priority
                            if(e in constants)
                                e = new Symbol(constants[e]);
                            //next subs
                            else if(e in subs) {
                                e = subs[e].clone();
                            }
                            else if(e in VARS) {
                                e = VARS[e].clone();
                            }
                            e.unsubbed = unsubbed;
                            q.push(e);
                        }
                    }
                }
                
                return q[0] || new Symbol(0);
            };
            
            /**
             * This is the method that triggers the parsing of the string. It generates a parse tree but processes 
             * it right away. The operator functions are called when their respective operators are reached. For instance
             * + with cause this.add to be called with the left and right hand values. It works by walking along each 
             * character of the string and placing the operators on the stack and values on the output. When an operator
             * having a lower order than the last is reached then the stack is processed from the last operator on the 
             * stack.
             * @param {String} expression_string
             * @param {Object} substitutions
             * @returns {Symbol}
             */
            this.parse = function(expression_string, substitutions, tree) { 
                //prepare the substitutions
                if(substitutions) {
                    for(var x in substitutions)
                        substitutions[x] = _.parse(substitutions[x]);
                    subs = substitutions;
                }
                else
                    subs = {};

                //link e and pi
                if(Settings.PARSE2NUMBER) {
                    subs.e = new Symbol(Math.E);
                    subs.pi = new Symbol(Math.PI);
                }

                /*
                 * Since variables cannot start with a number, the assumption is made that when this occurs the
                 * user intents for this to be a coefficient. The multiplication symbol in then added. The same goes for 
                 * a side-by-side close and open parenthesis
                 */
                var e = String(expression_string), match;
                
                //add support for spaces between variables
                while(true) { 
                    match = this.operator_filter_regex.exec(e);
                    if(!match)
                        break;
                    try {
                        var a = match[1],
                            b = match[2];
                        validateName(a);
                        validateName(b);
                        e = e.replace(match[0], a+'*'+b);
                    }
                    catch(e) {
                        break;
                    }
                }

                e = e.split(' ').join('')//strip empty spaces
                //replace scientific numbers
                .replace(/\d+\.*\d*e\+?\-?\d+/gi, function(x) {
                    return scientificToDecimal(x);
                })
                //allow omission of multiplication after coefficients
                .replace(/([\+\-\/\*]*[0-9]+)([a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]+[\+\-\/\*]*)/gi, function() {
                    var str = arguments[4],
                        group1 = arguments[1],
                        group2 = arguments[2],
                        start = arguments[3],
                        first = str.charAt(start),
                        before = '',
                        d = '*';
                    if(!first.match(/[\+\-\/\*]/)) before = str.charAt(start-1);
                    if(before.match(/[a-z]/i)) d = '';
                    return group1+d+group2;
                })
                .replace(/([a-z0-9_]+)/gi, function(match, a) {
                    if(Settings.USE_MULTICHARACTER_VARS === false && !(a in functions)) {
                        if(!isNaN(a))
                            return a;
                        return a.split('').join('*');
                    }
                    return a;
                })
                //allow omission of multiplication sign between brackets
                .replace( /\)\(/g, ')*(' ) || '0';
                //replace x(x+a) with x*(x+a)
                while(true) {
                    var e_org = e; //store the original
                    e = e.replace(/([a-z0-9_]+)(\()|(\))([a-z0-9]+)/gi, function(match, a, b, c, d) {
                        var g1 = a || c,
                            g2 = b || d;
                        if(g1 in functions) //create a passthrough for functions
                            return g1+g2;
                        return g1+'*'+g2;
                    });
                    //if the original equals the replace we're done
                    if(e_org === e) 
                        break;
                }
                var l = e.length, //the length of the string
                    output = [], //the output array. This is what's returned
                    stack = [], //the operator stack
                    last_pos = 0, //the location of last operator encountered
                    open_brackets = [0, 0], //a counter for the open brackets
                    prefix_cache = [],
                    new_scope = true; //signal if we're in a new scope or not
                // This method gets and inserts the token on output as the name implies
                var get_and_insert_token = function(to_pos) {
                    if(to_pos !== last_pos) { 
                        token = new Symbol(e.substring(last_pos, to_pos)); 
                        output.push(token);
                        //once we find out first token we are no longer in a new scope so flip
                        //the flag
                        new_scope = false; 
                    }
                };  
                
                var verify_prefix_operator = function(operator) {
                    if(!operator.is_prefix)
                        err(operator+' is not a valid prefix operator');
                };
                
                var resolve_prefix = function(prefix1, prefix2) {
                    if(!prefix2)
                        return prefix1;
                    if(prefix1.val === prefix2.val)
                        return new Prefix(operators['+']);
                    return new Prefix(operators['-']);
                };
                
                var insert_prefix = function(prefix) {
                    var sl = stack.length;
                    if(sl && stack[sl-1].is_prefix_operator) 
                        stack.push(resolve_prefix(prefix, stack.pop()));
                    stack.push(prefix);   
                };
                
                var collapse_prefix_cache = function(to_output) {
                    if(prefix_cache.length) {
                        var prefix = prefix_cache.pop();
                        while(prefix_cache.length)
                            prefix = resolve_prefix(prefix, prefix_cache.pop());
                        if(to_output)
                            output.push(prefix);
                        else
                            stack.push(prefix);
                    }
                };
                
                /*
                 * We define the operator as anything that performs any form of operation. A bracket as any object that defines
                 * a scope and a token as anything in between two operators. This enables us to have variables of more than one letter.
                 * This function is a modified version of the Shunting-Yard algorithm to enable variable names, and compound operators.
                 * operators are defined in the operator object. We walk the string and check every character. If an operator is encountered
                 * then we mark it's location. We find the next operator and get the token between. 
                 */
                var token, operator, start = 0, i=0;
                // start the generation of the tree
                for(var i=start; i<l; i++) {
                    //the character
                    var ch = e.charAt(i); 
                    if(ch in operators) { 
                        // We previously defined the token to be the anything between two operators and since we an operator
                        //we can grab the token
                        get_and_insert_token(i); 
                        //mark the current position
                        var c = i; 
                        /*
                         * In order to support compound operators we assume that the following might be operator as well. We keep walking the string
                         * until we encounter a character which is no longer an operator. We define that entire sub-string an operator
                         */
                        while(e.charAt(i+1) in operators)
                            i++;

                        var end_operator = i+1;
                        //the probable operator will be the difference between c and i;
                        var pr_operator = e.substring(c, end_operator); 
                        /* 
                         * We now have to see if this operator is actually an operator or a combination of an operator and prefix operators 
                         * e.g. 3*-+-8 or x^-3. To determine this we knock off an operator one at a time until we find the matching operator.
                         * For instance if we have an operator -= and we get -=-- we knock of a minus from the back until we reach -= which will 
                         * register as a defined operator since we defined it as such
                         */
                        while(!(pr_operator in operators)) { 
                            var l2 = pr_operator.length,
                                end = l2-1,
                                prefix = operators[pr_operator.charAt(end)];
                            pr_operator = pr_operator.substring(0, end);
                            //make sure it's not a postfix operator that we're dealing with
                            try {
                                //verify that it's not a prefix operator
                                verify_prefix_operator(prefix);
                                //add the prefix to the stack
                                prefix_cache.push(new Prefix(prefix)); 
                            }
                            catch(e) {
                                //check if we're dealing with postfix operators. 
                                //Rule: compound postfix operators must be a composition of postfix operators
                                var prl = pr_operator.length, o;
                                for(var j=0; j<prl; j++) {
                                    o = operators[pr_operator.charAt(j)];
                                    if(!o|| o && !o.is_postfix)
                                        err(e.message);
                                }

                                //at this point we know that we have only postfix operators but they are parsed left to right
                                var rem = '';
                                do {
                                    if(pr_operator === '')
                                        break; //we're done since the entire operator has been consumed
                                    if(pr_operator in operators) {
                                        output.push(operators[pr_operator]);
                                        pr_operator = rem;
                                        rem = '';
                                    }
                                    else {
                                        var end = pr_operator.length-1;
                                        rem += pr_operator.charAt(end);
                                        pr_operator = pr_operator.substring(0, end);
                                    } 
                                }
                                while(true)
                                //the actual operator is now the one we assumed to be a prefix earlier. I need to really
                                //pick better variable names :-/
                                pr_operator = prefix.val;
                                break;
                            }
                        }
                        // we now have the operator
                        operator = operators[pr_operator];
                        
                        // we mark where we find the last operator so we know where the next token begins
                        last_pos = end_operator; 
                        while(true) { 
                            var sl = stack.length,
                                los = stack[sl-1];
                            //skip prefix 
                            while(los !== undefined && los.is_prefix_operator)  {
                                los = stack[--sl-1];
                            }
                                
                            if(sl === 0 || !(operator.left_assoc && operator.precedence <= los.precedence 
                                || !operator.left_assoc && operator.precedence < los.precedence))
                                break; //nothing to do
                            output.push(stack.pop());
                        }

                        // If we're in a new scope then we're dealing with a prefix operator
                        if(new_scope) { 
                            /*
                             * There is literally no way to differentiate between a malformed expression and a properly formed one if there is no gap left 
                             * at the beginning of the scope. This is best illustrated. Take the expression 3+7- in RPN it becomes 3,7,+,-
                             * Take the expression -3+7 in RPN this become 3,7,+,- as well. The difference is that we tag the minus as
                             * a prefix in the properly formed expression. Problem solved! But wait. Imagine we have no gaps at the beginning
                             * of the scope let's say -(3+7). With no gaps this again becomes 3,7,+,- with no way to differentiate
                             * between -3+7 and -(3+7) unless the second one is written as 3,7,+, ,- where the gap denotes the end of the scope
                             */ 
                            verify_prefix_operator(operator);
                            var prefix = new Prefix(operator); 
                            //collapse the prefix cache
                            while(prefix_cache.length)
                                prefix = resolve_prefix(prefix, prefix_cache.pop());
                            insert_prefix(prefix);
                        }
                        else { 
                            //if there's already a prefix on the stack then bring it down
                            var sl = stack.length;
                            if(sl && stack[sl-1].is_prefix_operator && operator.left_assoc) 
                                //it's safe to move the prefix to output since it's at the beginning of a scope
                                output.push(stack.pop());

                            stack.push(operator);
                            //resolve the prefixes
                            collapse_prefix_cache();
                        }
                            
                    }
                    else if(ch in brackets) {
                        var bracket = brackets[ch]; 
                        if(bracket.open) { 
                            //mark a bracket as being opened
                            open_brackets[bracket.bracket_id]++;
                            //check if we're dealing with a function
                            if(last_pos !== i) {
                                var f = new Symbol(e.substring(last_pos, i));
                                // assume it's a function. Since a string is just an object, why not use it
                                f.is_function = true;
                                stack.push(f);
                            }   
                            if(bracket.fn)
                                stack.push(bracket.fn());
                            // We're in a new scope so signal so
                            new_scope = true;
                            stack.push(bracket);
                            //get all the prefixes at the beginning of the scope
                            last_pos = i+1; //move past the bracket
                        }
                        else {
                            //close the open bracket
                            open_brackets[bracket.bracket_id]--;
                            // We proceed to pop the entire stack to output this this signals the end of a scope. The first thing is to get the 
                            // the prefixes and then the token at the end of this scope.
                            // get the token
                            get_and_insert_token(i);
                            // And then keep popping the stack until we reach a bracket
                            while(true) {
                                var entry = stack.pop();
                                if(entry === undefined)
                                    err("Missing open bracket for bracket '"+bracket+"'!");
                                //we found the matching bracket so our search is over
                                if(entry.bracket_id === bracket.bracket_id)
                                    break; // We discard the closing bracket
                                else 
                                    output.push(entry);
                            }
                            
                            var sl = stack.length;
                            //move the function to output
                            if(sl && stack[sl-1].is_function)
                                output.push(stack.pop());
                            
                            last_pos = i+1; //move past the bracket
                        }
                    }
                }
                
                //get the last token at the end of the string
                get_and_insert_token(l);
                //collapse the stack to output
                while(stack.length)
                    output.push(stack.pop());

                //check parity
                for(var i=0; i<open_brackets.length; i++) 
                    if(open_brackets[i] > 0) {
                        var brkt;
                        for(bracket in brackets)
                            if(brackets[bracket].bracket_id === i && !brackets[bracket].open)
                                brkt = brackets[bracket];
                        err('Missing close bracket. Expected "'+brkt+'"!');
                    }
                       
                if(tree)
                    return output;
                
                return this.parseTree(output, subs);

            };
            
            /**
             * Reads a string into an array of Symbols and operators
             * @param {Symbol} symbol
             * @returns {Array}
             */
            this.toObject = function(expression_string) {
                var output = [[]], //the first one is the parent
                    e = expression_string.split(' ').join(''), //remove spaces
                    func_stack = [],
                    lp = 0,
                    target = output[0],
                    token;
                var push = function(token) {
                    if(token !== '')
                        target.push(new Symbol(token));
                };
                //start the conversion
                for(var i=0, l=e.length; i<l; i++) {
                    var ch = e.charAt(i);
                    if(ch in operators) {
                        token = e.substring(lp, i);
                        push(token);
                        target.push(ch);
                        lp = i+1;
                    }
                    else if(ch in brackets) { 
                        var bracket = brackets[ch];
                        if(bracket.open) {
                            //we may be dealing with a function so make 
                            func_stack.push(e.substring(lp, i));
                            target = []; //start a new scope
                            output.push(target); //add it to the chain
                            lp = i+1;    
                        }
                        else {
                            //we have a close bracket
                            token = e.substring(lp, i); //grab the token
                            push(token);
                            var o = output.pop(), //close the scope
                                f = func_stack.pop(), //grab the matching function
                                r;
                            //is it a function?
                            if(f in functions) 
                                r = _.symfunction(f, o); 
                            else if(f === '') {
                                r = o;
                                r.type = bracket.type;
                            }
                            else 
                                r = f;
                            //point to the correct target
                            target = output[output.length-1];
                            target.push(r);
                            lp = i+1; 
                        }
                    }
                }
                
                push(e.substring(lp, i)); //insert the last token

                return output[0];
            };

            var chunkAtCommas = function(arr){
                var j, k = 0, chunks = [[]];
                for (var j = 0, l=arr.length; j<l; j++){
                    if (arr[j] === ',') {
                        k++;
                        chunks[k] = [];
                    } else {
                        chunks[k].push(arr[j]);
                    }
                }
                return chunks;
            };
            
            var rem_brackets = function(str) {
                return str.replace(/^\\left\((.+)\\right\)$/g, function(str, a) {
                    if(a) return a;
                    return str;
                });
            };
            
            this.toTeX = function(expression_or_obj) { 
                var obj = typeof expression_or_obj === 'string' ? this.toObject(expression_or_obj) : expression_or_obj,
                    TeX = [];
                
                if(isArray(obj)) { 
                    var nobj = [], a, b;
                    //first handle ^
                    for(var i=0; i<obj.length; i++) {
                        a = obj[i];
                        
                        if(obj[i+1] === '^') {
                            b = obj[i+2];
                            nobj.push(LaTeX.braces(this.toTeX([a]))+'^'+LaTeX.braces(this.toTeX([b])));
                            i+=2;
                        }
                        else
                            nobj.push(a);
                    }
                    obj = nobj;
                }

                
                for(var i=0, l=obj.length; i<l; i++) {
                    var e = obj[i];
                    //convert * to cdot
                    if(e === '*')
                        e = '\\cdot';
                    
                    if(isSymbol(e)) {
                        if(e.group === FN) {
                            var fname = e.fname, f;

                            if(fname === SQRT) 
                                f = '\\sqrt'+LaTeX.braces(this.toTeX(e.args));
                            else if(fname === ABS) 
                                f = LaTeX.brackets(this.toTeX(e.args), 'abs');
                            else if(fname === PARENTHESIS) 
                                f = LaTeX.brackets(this.toTeX(e.args), 'parens');
                            else if (fname === 'log10')
                                f = '\\log_{10}\\left( ' + this.toTeX(e.args) + '\\right)';
                            else if(fname === 'integrate') {
                                /* Retrive [Expression, x] */
                                var chunks = chunkAtCommas(e.args);
                                /* Build TeX */
                                var expr = LaTeX.braces(this.toTeX(chunks[0])),
                                    dx = this.toTeX(chunks[1]);
                                f = '\\int ' + expr + '\\, d' + dx;
                            }
                            else if (fname === 'defint') {
                                var chunks = chunkAtCommas(e.args),
                                    expr = LaTeX.braces(this.toTeX(chunks[0])),
                                    dx = this.toTeX(chunks[1]),
                                    lb = this.toTeX(chunks[2]),
                                    ub = this.toTeX(chunks[3]);
                                f = '\\int\\limits_{'+lb+'}^{'+ub+'} '+expr+'\\, d'+dx;

                            }
                            else if(fname === 'diff') {
                                var chunks = chunkAtCommas(e.args);
                                var dx = '', expr = LaTeX.braces(this.toTeX(chunks[0]));
                                /* Handle cases: one argument provided, we need to guess the variable, and assume n = 1 */
                                if (chunks.length == 1){
                                    var vars = [];
                                    for (j = 0; j < chunks[0].length; j++){
                                        if (chunks[0][j].group === 3) {
                                            vars.push(chunks[0][j].value);
                                        }
                                    }
                                    vars = vars.sort();
                                    dx = vars.length > 0 ? ('\\frac{d}{d ' + vars[0] + '}') : '\\frac{d}{d x}';
                                }
                                /* If two arguments, we have expression and variable, we assume n = 1 */ 
                                else if (chunks.length == 2){
                                    dx = '\\frac{d}{d ' + chunks[1] + '}';
                                }
                                /* If we have more than 2 arguments, we assume we've got everything */
                                else {
                                    dx = '\\frac{d^{' + chunks[2] + '}}{d ' + this.toTeX(chunks[1]) + '^{' + chunks[2] + '}}';
                                }

                                f = dx + '\\left(' + expr + '\\right)';

                            }
                            else if (fname === 'sum' || fname === 'product') {
                                // Split e.args into 4 parts based on locations of , symbols.
                                var argSplit = [[], [], [], []], j = 0, i;
                                for (i = 0; i < e.args.length; i++){
                                    if (e.args[i] === ','){
                                        j++;
                                        continue;
                                    } 
                                    argSplit[j].push(e.args[i]);
                                }
                                // Then build TeX string.
                                f = (fname==='sum'?'\\sum_':'\\prod_')+LaTeX.braces(this.toTeX(argSplit[1])+' = '+this.toTeX(argSplit[2]));
                                f += '^'+LaTeX.braces(this.toTeX(argSplit[3])) + LaTeX.braces(this.toTeX(argSplit[0]));
                            }
                            else if(fname === FACTORIAL || fname === DOUBLEFACTORIAL) 
                                f = this.toTeX(e.args) + (fname === FACTORIAL ? '!' : '!!');
                            else  {
                                f = LaTeX.latex(e);
                                //f = '\\mathrm'+LaTeX.braces(fname.replace(/_/g, '\\_')) + LaTeX.brackets(this.toTeX(e.args), 'parens');
                            }
                                
                            TeX.push(f);
                        } 
                        else
                            TeX.push(LaTeX.latex(e));
                    }
                    else if(isArray(e)) { 
                        TeX.push(LaTeX.brackets(this.toTeX(e)));
                    }
                    else {
                        if(e === '/') 
                            TeX.push(LaTeX.frac(rem_brackets(TeX.pop()), rem_brackets(this.toTeX([obj[++i]]))));
                        else
                            TeX.push(e);
                    }
                }
                return TeX.join(' ');
            };

            /////////// ********** FUNCTIONS ********** ///////////
            /* Although parens is not a "real" function it is important in some cases when the 
             * symbol must carry parenthesis. Once set you don't have to worry about it anymore
             * as the parser will get rid of it at the first opportunity
             */
            function parens(symbol) {
                if(Settings.PARSE2NUMBER) {
                    return symbol;
                }
                return _.symfunction('parens', [symbol]);
            }
            
            function abs(symbol) { 
                if(symbol.multiplier.lessThan(0)) symbol.multiplier.negate();
                if(symbol.isImaginary()) {
                    var re = symbol.realpart();
                    var im = symbol.imagpart();
                    if(re.isConstant() && im.isConstant())
                        return sqrt(_.add(_.pow(re, new Symbol(2)), _.pow(im, new Symbol(2))));
                }
                else if(isNumericSymbol(symbol) || even(symbol.power)) {
                    return symbol;
                }
                if(symbol.isComposite()) {
                    var ms = [];
                    symbol.each(function(x) {
                        ms.push(x.multiplier);
                    });
                    var gcd = Math2.QGCD.apply(null, ms);
                    if(gcd.lessThan(0)) {
                        symbol.multiplier = symbol.multiplier.multiply(new Frac(-1));
                        symbol.distributeMultiplier();
                    }
                }
                return _.symfunction(ABS, [symbol]);
            }
            /**
             * The factorial functions
             * @param {Symbol} symbol
             * @return {Symbol}
             */
            function factorial(symbol) { 
                var retval;
                if(Settings.PARSE2NUMBER && symbol.isConstant()) {
                    if(isInt(symbol)) {
                        retval = Math2.bigfactorial(symbol);
                    }
                    else {
                        retval = Math2.gamma(symbol.multiplier.add(new Frac(1)).toDecimal());
                    }
                    
                    retval = bigConvert(retval);
                    return retval;
                }
                else if(symbol.equals(1/2))
                    return _.parse('sqrt(pi)/2');
                return _.symfunction(FACTORIAL, [symbol]);
            }        /**
             * The mod function
             * @param {Symbol} symbol1
             * @param {Symbol} symbol2
             * @returns {Symbol}
             */
            function mod(symbol1, symbol2) {
                if(symbol1.isConstant() && symbol2.isConstant()) {
                    var retval = new Symbol(1);
                    retval.multiplier = retval.multiplier.multiply(symbol1.multiplier.mod(symbol2.multiplier));
                    return retval;
                }
                //try to see if division has remainder of zero
                var r = _.divide(symbol1.clone(), symbol2.clone());
                if(isInt(r))
                    return new Symbol(0);
                return _.symfunction('mod', [symbol1, symbol2]);
            }
            /**
             * A branghing function
             * @param {Boolean} condition
             * @param {Symbol} a
             * @param {Symbol} b
             * @returns {Symbol}
             */
            function IF(condition, a, b) { 
                if(typeof condition !== 'boolean')
                    if(isNumericSymbol(condition))
                        condition = !!Number(condition);
                if(condition) 
                    return a;
                return b;
            }

            /**
             * The square root function
             * @param {Symbol} symbol
             * @returns {Symbol}
             */
            function sqrt(symbol) { 
                if(symbol.fname === '' && symbol.power.equals(1))
                    symbol = symbol.args[0];
                
                if(Settings.PARSE2NUMBER) {
                    if(symbol.isConstant() && !symbol.multiplier.lessThan(0)) {
                        return new Symbol(Math.sqrt(symbol.multiplier.toDecimal()));
                    }
                    else if(symbol.isImaginary()) {
                        return complex.sqrt(symbol);
                    }
                } 

                var img, retval, 
                    isConstant = symbol.isConstant();
            
                if(symbol.group === CB && symbol.isLinear()) {
                    var m = sqrt(Symbol(symbol.multiplier));
                    for(var s in symbol.symbols) {
                        var x = symbol.symbols[s];
                        m = _.multiply(m, sqrt(x));
                    }

                    retval = m;
                }
                //if the symbol is already sqrt then it's that symbol^(1/4) and we can unwrap it
                else if(symbol.fname === SQRT) { 
                    var s = symbol.args[0];
                    var ms = symbol.multiplier;
                    s.setPower(symbol.power.multiply(new Frac(0.25)));
                    retval = s;
                    //grab the multiplier
                    if(!ms.equals(1))
                        retval = _.multiply(sqrt(_.parse(ms)), retval);
                }
                //if the symbol is a fraction then we don't keep can unwrap it. For instance
                //no need to keep sqrt(x^(1/3))
                else if(!symbol.power.isInteger()) { 
                    symbol.setPower(symbol.power.multiply(new Frac(0.5)));
                    retval = symbol;
                }
                else { 
                    //if the symbols is imagary then we place in the imaginary part. We'll return it 
                    //as a product
                    if(isConstant && symbol.multiplier.lessThan(0)) {
                        img = Symbol.imaginary();
                        symbol.multiplier = symbol.multiplier.abs();
                    }

                    var q = symbol.multiplier.toDecimal(),
                        qa = Math.abs(q),
                        t = Math.sqrt(qa);

                    var m;
                    //it's a perfect square so take the square
                    if(isInt(t)) { 
                        m = new Symbol(t);
                    }
                    else if(isInt(q)) { 
                        var factors = Math2.ifactor(q);
                        var tw = 1;
                        for(var x in factors) {
                            var n = factors[x],
                                nn = (n - (n%2)); //get out the whole numbers
                            if(nn) { //if there is a whole number ...
                                var w = Math.pow(x, nn);
                                tw *= Math.pow(x, nn/2); //add to total wholes
                                q /= w; //reduce the number by the wholes
                            }
                        }
                        m = _.multiply(_.symfunction(SQRT, [new Symbol(q)]), new Symbol(tw));
                    }
                    else {
                        var n = symbol.multiplier.num.toString(),
                            d = symbol.multiplier.den.toString(),
                            sqrtN = Math.sqrt(n),
                            sqrtD = Math.sqrt(d);
                    
                        m = _.multiply(
                                n === '1' ? new Symbol(1) : isInt(sqrtN) ? new Symbol(sqrtN) : _.symfunction(SQRT, [new Symbol(n)]), 
                                d === '1' ? new Symbol(1) : isInt(sqrtD) ? new Symbol(sqrtD).invert() : _.symfunction(SQRT, [new Symbol(d)]).invert()
                        );
                    }

                    
                    //strip the multiplier since we already took the sqrt
                    symbol = symbol.toUnitMultiplier(true);
                    //if the symbol is one just return one and not the sqrt function
                    if(symbol.isOne()) {
                        retval = symbol;
                    }
                    else if(even(symbol.power.toString())) { 
                        //just raise it to the 1/2
                        retval = _.pow(symbol.clone(), new Symbol(0.5));
                    }
                    else { 
                        retval = _.symfunction(SQRT, [symbol]);
                    }

                    if(m) retval = _.multiply(m, retval);

                    if(img) retval = _.multiply(img, retval);
                }

                return retval;
            }
            this.sqrt = sqrt;
            /**
             * 
             * @param {Symbol} num - the number being raised
             * @param {Symbol} p - the exponent
             * @param {type} prec - the precision wanted
             * @param {bool} asbig - true if a bigDecimal is wanted
             * @returns {Symbol}
             */
            //TODO: this method needs serious optimization
            function nthroot(num, p, prec, asbig) { 
                if(typeof asbig === 'undefined') 
                    asbig = true;
                prec = prec || 25;
                if(!isSymbol(p))
                    p = _.parse(p);
                if(isInt(num) && p.isConstant()) { 
                    var sign = num.sign(),
                        x;
                    num = abs(num); //remove the sign
                    var idx = num+'-'+p;
                    if(idx in Settings.CACHE.roots) {
                        x = new bigInt(Settings.CACHE.roots[idx]);
                        if(!even(p))
                            x = x.multiply(sign);
                    }
                    else {
                        if(num < 18446744073709551616) //2^64
                            x = Frac.create(Math.pow(num, 1/p));
                        else
                            x = Math2.nthroot(num, p);
                    }
                    if(isInt(x) || Settings.PARSE2NUMBER) {
                        if(asbig)
                            return new Symbol(x);
                        return new Symbol(x.toDecimal(prec));
                    }
                }
                
                if(Number(p) === 2)
                    return _.sqrt(num);
                
                return _.symfunction('nthroot', arguments);
            }
              
            this.nthroot = nthroot;
            
            function pfactor(symbol) { 
                //Fix issue #298
                if(symbol.equals(Math.PI))
                    return new Symbol(Math.PI);
                //evaluate the symbol to merge constants
                symbol = evaluate(symbol.clone());
                
                
                if(symbol.isConstant()) {
                    var retval = new Symbol(1);
                    var m = symbol.toString();
                    if(isInt(m)) { 
                        var factors = Math2.ifactor(m);
                        for(var factor in factors) {
                            var p = factors[factor];
                            retval = _.multiply(retval, _.symfunction('parens', [new Symbol(factor).setPower(new Frac(p))]));
                        }
                    }
                    else {
                        var n = pfactor(new Symbol(symbol.multiplier.num));
                        var d = pfactor(new Symbol(symbol.multiplier.den));
                        retval = _.multiply(_.symfunction('parens', [n]), _.symfunction('parens', [d]).invert());
                    }
                }
                else 
                    retval = _.symfunction('pfactor', arguments);
                return retval;
            }
            
            /**
             * Get's the real part of a complex number. Return number if real
             * @param {Symbol} symbol
             * @returns {Symbol}
             */
            function realpart(symbol) {
                return symbol.realpart();
            }
            
            /**
             * Get's the imaginary part of a complex number
             * @param {Symbol} symbol
             * @returns {Symbol}
             */
            function imagpart(symbol) {
                return symbol.imagpart();
            }
            
            /**
             * Computes the conjugate of a complex number
             * @param {Symbol} symbol
             * @returns {Symbol}
             */
            function conjugate(symbol) {
                var re = symbol.realpart();
                var im = symbol.imagpart();
                return _.add(re, _.multiply(im.negate(), Symbol.imaginary()));
            }
            
            /**
             * Returns the arugment of a complex number
             * @param {Symbol} symbol
             * @returns {Symbol}
             */
            function arg(symbol) {
                var re = symbol.realpart(); 
                var im = symbol.imagpart(); 
                if(re.isConstant() && im.isConstant())
                    return new Symbol(Math.atan2(im, re));
                return _.symfunction('atan2', [im, re]);
            }
            
            /**
             * Returns the polarform of a complex number
             * @param {Symbol} symbol
             * @returns {Symbol}
             */
            function polarform(symbol) {
                var p, r, e, theta;
                p = Symbol.toPolarFormArray(symbol);
                theta = p[1];
                r = p[0];
                e = _.parse(format('e^({0}*({1}))', Settings.IMAGINARY, theta));
                return _.multiply(r, e);
            }
            
            /**
             * Returns the rectangular form of a complex number. Does not work for symbolic coefficients
             * @param {Symbol} symbol
             * @returns {Symbol}
             */
            function rectform(symbol) {
                //TODO: e^((i*pi)/4)
                var original = symbol.clone();
                try {
                    var f, p, q, s, h, d, n;
                    f = decompose_fn(symbol, 'e', true);
                    p = _.divide(f.x.power, Symbol.imaginary());
                    q = evaluate(trig.tan(p));
                    s = _.pow(f.a, new Symbol(2));
                    d = q.getDenom(true);
                    n = q.getNum();
                    h = Symbol.hyp(n, d);
                    //check 
                    if(h.equals(f.a)) {
                        return _.add(d, _.multiply(Symbol.imaginary(), n));
                    }
                    else {
                        return original;
                    }
                }
                catch(e){
                    return original;
                }    
            }

            function symMinMax(f, args) {
                args.map(function(x) {
                    x.numVal = evaluate(x).multiplier;
                });
                var l, a, b;
                while(true) {
                    l = args.length;
                    if(l < 2) return args[0];
                    a = args.pop();
                    b = args[l-2];
                    if(f === 'min' ? a.numVal < b.numVal : a.numVal > b.numVal) {
                        args.pop();
                        args.push(a);
                    }
                } 
            }
            
            /**
             * Returns maximum of a set of numbers
             * @returns {Symbol}
             */
            function max() {
                var args = [].slice.call(arguments);
                if(allSame(args))
                    return args[0];
                if(allNumbers(args))
                    return new Symbol(Math.max.apply(null, args));
                if(Settings.SYMBOLIC_MIN_MAX && allConstants(args)) 
                    return symMinMax('max', args);
                return _.symfunction('max', args);
            }
            
            /**
             * Returns minimum of a set of numbers
             * @returns {Symbol}
             */
            function min() {
                var args = [].slice.call(arguments);
                if(allSame(args))
                    return args[0];
                if(allNumbers(args))
                    return new Symbol(Math.min.apply(null, args));
                if(Settings.SYMBOLIC_MIN_MAX && allConstants(args)) 
                    return symMinMax('min', args);
                return _.symfunction('min', args);
            }
            
            /**
             * Returns the sign of a number
             * @param {Symbol} x
             * @returns {Symbol}
             */
            function sign(x) {
                if(x.isConstant(true))
                    return new Symbol(Math.sign(evaluate(x)));
                return _.symfunction('sign', arguments);
            }
            
            function sort(symbol, opt) {
                opt = opt ? opt.toString() : 'asc'; 
                var getval = function(e) {
                    if(e.group === N)
                        return e.multiplier;
                    if(e.group === FN) {
                        if(e.fname === '')
                            return getval(e.args[0]);
                        return e.fname;
                    }
                    if(e.group === S)
                        return e.power;
                    
                    return e.value;
                };
                var symbols = isVector(symbol) ? symbol.elements : symbol.collectSymbols();
                return new Vector(symbols.sort(function(a, b) {
                    var aval = getval(a),
                        bval = getval(b);
                    if(opt === 'desc')
                        return bval - aval;
                    return aval - bval;
                }));
            }
            
            /**
             * The log function
             * @param {Symbol} symbol
             * @param {Symbol} base
             * @returns {Symbol}
             */
            function log(symbol, base) { 
                var retval;
                if(symbol.fname === SQRT && symbol.multiplier.equals(1)) {
                    return _.divide(log(symbol.args[0]), new Symbol(2));
                }
                
                //log(0) is undefined so complain
                if(symbol.equals(0)) {
                    throw new UndefinedError('log(0) is undefined!');
                }
                
                //deal with imaginary values
                if(symbol.isImaginary()) {
                    return complex.evaluate(symbol, 'log');
                    /*
                    var a = format('log(sqrt(({0})^2+({1})^2))-({2})*atan2(({1}),({0}))', symbol.imagpart(), symbol.realpart(), Settings.IMAGINARY),
                        b = format('({0})*PI/2', Settings.IMAGINARY);

                    return _.add(_.parse(a), _.parse(b));
                    */
                }
                
                if(symbol.isConstant() && typeof base !== 'undefined' && base.isConstant()) {
                    /*
                    var log_sym = Math2.bigLog(symbol.multiplier);
                    var log_base = Math2.bigLog(base.multiplier);
                    retval = new Symbol(log_sym.divide());
                    */
                    var log_sym = Math.log(symbol);
                    var log_base = Math.log(base);
                    retval = new Symbol(log_sym/log_base);
                }
                    
                else if(symbol.group === EX && symbol.power.multiplier.lessThan(0) || symbol.power.toString() === '-1') {
                    symbol.power.negate(); 
                    //move the negative outside but keep the positive inside :)
                    retval = log(symbol).negate();
                } 
                else if(symbol.value === 'e' && symbol.multiplier.equals(1)) {
                    var p = symbol.power;
                    retval = isSymbol(p) ? p : new Symbol(p); 
                }
                else if(symbol.group === FN && symbol.fname === 'exp') {
                    var s = symbol.args[0];
                    if(symbol.multiplier.equals(1)) retval = _.multiply(s, new Symbol(symbol.power));
                    else retval = _.symfunction('log',[symbol]);
                }
                else if(Settings.PARSE2NUMBER && isNumericSymbol(symbol)) {
                    var img_part;
                    if(symbol.multiplier.lessThan(0)) {
                        symbol.negate();
                        img_part = _.multiply(new Symbol(Math.PI), new Symbol('i'));
                    }
                    retval = new Symbol(Math.log(symbol.multiplier.toDecimal()));
                    if(img_part) retval = _.add(retval, img_part);
                }
                else { 
                    var s;
                    if(!symbol.power.equals(1)) {
                        s = symbol.group === EX ? symbol.power : new Symbol(symbol.power);
                        symbol.toLinear(); 
                    }
                    //log(a,a) = 1 since the base is allowed to be changed. 
                    //This was pointed out by Happypig375 in issue #280
                    if(arguments.length > 1 && allSame(arguments))
                        retval = new Symbol(1);
                    else
                        retval = _.symfunction('log', arguments); 
                    
                    if(s) retval = _.multiply(s, retval);
                }
                return retval;
            }

            /**
             * Round a number up to s decimal places
             * @param {Number} x
             * @param {int} s - the number of decimal places
             * @returns {undefined}
             */
            function round(x, s) {
                var sIsConstant = s && s.isConstant() || typeof s === 'undefined';
                if(x.isConstant() && sIsConstant) {
                    var v, e, exp, retval;
                    v = x;
                    //round the coefficient of then number but not the actual decimal value
                    //we know this because a negative number was passed
                    if(s && s.lessThan(0)) {
                        s = abs(s);
                        //convert the number to exponential form
                        e = Number(x).toExponential().toString().split('e');
                        //point v to the coefficient of then number
                        v = e[0];
                        //set the expontent
                        exp = e[1];
                    }
                    //round the number to the requested precision
                    retval = new Symbol(Utils.round(v, Number(s||0)));
                    //if there's a exponent then put it back
                    return _.multiply(retval, _.pow(new Symbol(10), new Symbol(exp || 0)))
                }
                    
                
                return _.symfunction('round', arguments); 
            }
            
            /**
             * Gets the quadrant of the trig function
             * @param {Frac} m
             * @returns {Int}
             */
            function getQuadrant(m) {
                var v = m % 2, quadrant;
                
                if(v < 0) v = 2+v; //put it in terms of pi
                
                if(v >= 0 && v <= 0.5) quadrant = 1;
                else if(v > 0.5 && v <= 1) quadrant = 2;
                else if(v > 1 && v <= 1.5) quadrant = 3;
                else quadrant = 4;
                return quadrant;
            }

            /*
             * Serves as a bridge between numbers and bigNumbers
             * @param {Frac|Number} n
             * @returns {Symbol} 
             */
            function bigConvert(n) { 
                if(!isFinite(n)){
                    var sign = Math.sign(n);
                    var r = new Symbol(String(Math.abs(n)));
                    r.multiplier = r.multiplier.multiply(new Frac(sign));
                    return r;
                }
                if(isSymbol(n))
                    return n;
                if(typeof n === 'number') {
                    try {
                        n = Frac.simple(n);
                    }
                    catch(e) {
                        n = new Frac(n);
                    }
                }
                    
                var symbol = new Symbol(0);
                symbol.multiplier = n;
                return symbol;
            }        
            function clean(symbol) {
                // handle functions with numeric values
                // handle denominator within denominator
                // handle trig simplifications
                var g = symbol.group, retval;
                //Now let's get to work
                if(g === CP) {
                    var num = symbol.getNum(),
                        den = symbol.getDenom() || new Symbol(1),
                        p = Number(symbol.power),
                        factor = new Symbol(1);
                    if(Math.abs(p) === 1) {
                        den.each(function(x) {
                            if(x.group === CB) {
                                factor = _.multiply(factor, clean(x.getDenom()));
                            }
                            else if(x.power.lessThan(0)) {
                                factor = _.multiply(factor, clean(x.clone().toUnitMultiplier()));
                            }
                        });

                        var new_den = new Symbol(0);
                        //now divide out the factor and add to new den
                        den.each(function(x) {
                            new_den = _.add(_.divide(x, factor.clone()), new_den);
                        });
                        
                        factor.invert(); //invert so it can be added to the top
                        var new_num;
                        if(num.isComposite()) { 
                            new_num = new Symbol(0);
                            num.each(function(x){
                                new_num = _.add(_.multiply(clean(x), factor.clone()), new_num);
                            });
                        }
                        else
                            new_num = _.multiply(factor, num);
                        
                        retval = _.divide(new_num, new_den);
                    }
                }
                else if(g === CB) { 
                    retval = new Symbol(1);
                    symbol.each(function(x) { 
                        retval = _.multiply(retval, _.clean(x));
                    });
                }
                else if(g === FN) {
                    if(symbol.args.length === 1 && symbol.args[0].isConstant())
                        retval = block('PARSE2NUMBER', function() {
                            return _.parse(symbol);
                        }, true);
                }
                
                if(!retval)
                    retval = symbol;
                
                return retval;
            }
            
            /**
             * Expands a symbol
             * @param symbol
             */
            function expand(symbol) { 
                //deal with parenthesis
                if(symbol.group === FN && symbol.fname === '')
                    return _.expand(symbol.args[0]);
                
                //TODO - some test need to be verified in order to implement this
                /*
                if(symbol.group === FN) {
                    symbol.args[0] = _.expand(symbol.args[0]);
                    symbol.updateHash();
                    return symbol;
                }
                */
                
                if(!symbol.symbols) return symbol; //nothing to do
                
                var original = symbol.clone(); 
                try {
                    var p = symbol.power,
                        m = symbol.multiplier,
                        pn = Number(p);
                    
                    if(!symbol.symbols) 
                        return symbol;

                    //expand all the symbols
                    for(var s in symbol.symbols) {
                        var x = symbol.symbols[s];
                        symbol.symbols[s] = expand(x);
                    }
                    symbol = _.parse(symbol);

                    if(isInt(pn) && pn > 0 && symbol.isComposite()) { 
                        var f = new Symbol(0);
                        //we loop through the f and make sure that it's fully expanded
                        for(var x in symbol.symbols) {
                            var sym = symbol.symbols[x];
                            if(sym.power.greaterThan(1)) 
                                sym = _.expand(sym);
                            f = _.add(f, sym);
                        }

                        //assume (a+b)^3 = (a+b)(a+b)(a+b) = (b^2+2*a*b+a^2)(a+b)
                        //we have n=p-1=2 iterations where p=3 in this case
                        var n = pn-1;
                        //Initiate with the first term. Remember that we have p-1 iterations because
                        //the first iteration is equal to P where p is the polynomial
                        var result = f.clone(); //initiate this as the first term
                        //the first loop is the top iterator and remains untouched. No sub-symbols
                        //from this symbol are allowed to be touched
                        for(var i=0; i<n; i++) {
                            var t = new Symbol(0);
                            for(var x in f.symbols) {
                                var a = f.symbols[x];
                                //we now loop through the 
                                for(var y in result.symbols) {
                                    var b = _.multiply(a.clone(), result.symbols[y]);
                                    //the result must always be a composite. If not expand
                                    if(b.group === CB)
                                        b = _.expand(b);
                                    t = _.add(t, b);
                                }
                            }                        result = t;
                        }
                            
                        //put back the multiplier
                        if(!m.equals(1)) {
                            for(var s in result.symbols) {
                                var x = result.symbols[s];
                                x.multiplier = x.multiplier.multiply(m);
                                if(x.isComposite())
                                    x.distributeMultiplier();
                                symbol.symbols[s] = x;
                            }
                        }

                        return result;
                    }
                    else if(symbol.group === CB) { 
                        //check if the symbol has composites
                        var hascomposites = false, 
                            sp = symbol.power.clone(),
                            sign = symbol.power.sign();
                    
                        for(var x in symbol.symbols) {
                            var sub = symbol.symbols[x];
                            if(sub.isComposite()) {
                                hascomposites = true;
                                break;
                            }

                            if(isSymbol(sub.power) || isSymbol(sp)) {
                                sub.power = _.multiply(sub.power, Symbol(sp));
                                sub.group = EX;
                            }
                            else sub.power = sub.power.multiply(sp);
                        }
                        
                        symbol.toLinear();

                        //I'm going to be super lazy here and take the easy way out. TODO: do this without re-parsing
                        symbol = _.parse(symbol.text());

                        if(!hascomposites) 
                            return symbol; //nothing to do here

                        var result = new Symbol(0);
                        var composites = [],
                            non_composites = new Symbol(symbol.multiplier);

                        //sort them out
                        for(var s in symbol.symbols) {
                            var x = symbol.symbols[s];
                            if(x.group === EX)
                                continue;
                            if(x.isComposite()) {
                                var p = x.power, isDenom = false;                            if(isInt(p)) {
                                    if(p < 0) {
                                        x.power.negate();
                                        isDenom = true;
                                    }
                                }

                                if(isDenom) {
                                    x.power.negate();
                                    non_composites = _.multiply(non_composites, x);
                                }
                                else composites.push(x);
                            }
                            else non_composites = _.multiply(non_composites, x);
                        }
                        //multiply out the remainder
                        var l = composites.length;
                            //grab the first symbol since we'll loop over that one to begin
                        result = composites[0];
                        for(var i=1; i<l; i++) {
                            var t = new Symbol(0);
                            var s = composites[i];
                            for(var s1 in result.symbols) {
                                var x = result.symbols[s1];
                                for(var s2 in s.symbols) {
                                    var y = s.symbols[s2];
                                    var temp = _.multiply(x.clone(),y.clone());
                                    t = _.add(t, temp);
                                }
                            }
                            result = t;
                        }

                        var finalResult = new Symbol(0);
                        //put back the multiplier
                        for(var s in result.symbols) {
                            var x = result.symbols[s];
                            finalResult = _.add(finalResult, expand(_.multiply(non_composites, x)));
                        }
                        
                        //expand the power
                        finalResult.power = finalResult.power.multiply(sp.abs());
                        
                        symbol = _.expand(finalResult);
                        
                        if(sign < 0)
                            symbol.invert();
                    }
                }
                catch(e){ return original; }
                
                return symbol;
            }
            
            function imatrix(n) {
                return Matrix.identity(n);
            }
            
            function vecget(vector, index) {
                return vector.elements[index];
            }
            
            function vecset(vector, index, value) {
                vector.elements[index] = value;
                return vector;
            }
            
            function matget(matrix, i, j) {
                return matrix.elements[i][j];
            }
            
            function matgetrow(matrix, i) {
                return new Matrix(matrix.elements[i]);
            }
            
            function matsetrow(matrix, i, x) {
                if(matrix.elements[i].length !== x.elements.length)
                    throw new Error('Matrix row must match row dimensions!');
                var M = matrix.clone();
                M.elements[i] = x.clone().elements;
                return M;
            }
            
            function matgetcol(matrix, col_index) {
                col_index = Number(col_index);
                var M = Matrix.fromArray([]);
                matrix.each(function(x, i, j) {
                    if(j === col_index) {
                        M.elements.push([x.clone()]);
                    }
                });
                return M;
            }
            
            function matsetcol(matrix, j, col) {
                j = Number(j);
                if(matrix.rows() !== col.elements.length)
                    throw new Error('Matrix columns must match number of columns!');
                col.each(function(x, i) {
                   matrix.set(i-1, j, x.elements[0].clone());
                });
                return matrix;
            }
            
            
            function matset(matrix, i, j, value) {
                matrix.elements[i][j] = value;
                return matrix;
            }
            
            //link this back to the parser
            this.expand = expand;
            this.clean = clean;
            
            //the constructor for vectors
            function vector() {
                return new Vector([].slice.call(arguments));
            }
            
            //the constructor for matrices
            function matrix() {
                return Matrix.fromArray(arguments);
            }
            
            function determinant(symbol) {
                if(isMatrix(symbol)) {
                    return symbol.determinant();
                }
                return symbol;
            }
            
            function size(symbol) {
                if(isMatrix(symbol))
                    return [new Symbol(symbol.cols()), new Symbol(symbol.rows())];
                err('size expects a matrix or a vector');
            }
            
            function dot(vec1, vec2) {
                if(isVector(vec1) && isVector(vec2)) return vec1.dot(vec2);
                err('function dot expects 2 vectors');
            }
            
            function cross(vec1, vec2) {
                if(isVector(vec1) && isVector(vec2)) return vec1.cross(vec2);
                err('function cross expects 2 vectors');
            }
            
            function transpose(mat) {
                if(isMatrix(mat)) return mat.transpose();
                err('function transpose expects a matrix');
            }
            
            function invert(mat) {
                if(isMatrix(mat)) return mat.invert();
                err('invert expects a matrix');
            }
            
            function testSQRT(symbol) { 
                //wrap the symbol in sqrt. This eliminates one more check down the line.
                if(!isSymbol(symbol.power) && symbol.power.absEquals(0.5)) { 
                    var sign = symbol.power.sign();
                    //don't devide the power directly. Notice the use of toString. This makes it possible
                    //to use a bigNumber library in the future
                    return sqrt(symbol.group === P ? new Symbol(symbol.value) : symbol.toLinear()).setPower(new Frac(sign));
                }
                return symbol;
            }
            
            //try to reduce a symbol by pulling its power
            function testPow(symbol) { 
                if(symbol.group === P) {
                    var v = symbol.group === N ? symbol.multiplier.toDecimal() : symbol.value,
                        fct = primeFactors(v)[0],
                        n = new Frac(Math.log(v)/Math.log(fct)),
                        p = n.multiply(symbol.power); 
                    //we don't want a more complex number than before 
                    if(p.den > symbol.power.den) return symbol;

                    if(isInt(p)) symbol = Symbol(Math.pow(fct, p));
                    else symbol = new Symbol(fct).setPower(p);
                }

                return symbol;
            }

            //extended functions. Because functions like log aren't directly 
            //stored in an object, it's difficult to find out about them unless you know of them 
            //outside of the library. This serves as registry. That's all.
            this.ext = {
                log: log,
                sqrt: sqrt,
                abs: abs,
                vector: vector,
                matrix: matrix,
                parens: parens,
                determinant: determinant,
                dot: dot,
                invert: invert,
                transpose: transpose
            };
            
            //The loader for functions which are not part of Math2
            this.mapped_function = function() { 
                var subs = {},
                    params = this.params;
                for(var i=0; i<params.length; i++) 
                    subs[params[i]] = arguments[i];
                
                return _.parse(this.body, subs);
            };
            
            /**
             * Adds two symbols
             * @param {Symbol} a
             * @param {Symbol} b
             * @returns {Symbol}
             */
            this.add = function(a, b) {  
                var aIsSymbol = isSymbol(a),
                    bIsSymbol = isSymbol(b);
                //we're dealing with two symbols
                if(aIsSymbol && bIsSymbol) { 
                    //handle Infinity
                    //https://www.encyclopediaofmath.org/index.php/Infinity
                    if(a.isInfinity || b.isInfinity) {
                        var aneg = a.multiplier.lessThan(0),
                            bneg = b.multiplier.lessThan(0);
                    
                        if(a.isInfinity && b.isInfinity && aneg !== bneg) {
                            throw new UndefinedError('('+a+')+('+b+') is not defined!');
                        }
                        
                        var inf = Symbol.infinity();
                        if(bneg)
                            inf.negate();
                        return inf;
                    }
                    
                    if(a.isComposite() && a.isLinear() && b.isComposite() && b.isLinear()) { 
                        a.distributeMultiplier();
                        b.distributeMultiplier();
                    }
                    //no need to waste time on zeroes
                    if(a.multiplier.equals(0)) return b;
                    if(b.multiplier.equals(0)) return a;

                    if(a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {
                        var result =  new Symbol(a.multiplier.add(b.multiplier).toDecimal(Settings.PRECISION));
                        return result;
                    }

                    var g1 = a.group,
                        g2 = b.group,
                        ap = a.power.toString(),
                        bp = b.power.toString();
                    
                    //always keep the greater group on the left. 
                    if(g1 < g2 || (g1 === g2 && ap > bp && bp > 0)) return this.add(b, a);
                    
                    /*note to self: Please don't forget about this dilemma ever again. In this model PL and CB goes crazy
                     * because it doesn't know which one to prioritize. */
                    //correction to PL dilemma
                    if(g1 === CB && g2 === PL && a.value === b.value) { 
                        //swap
                        var t = a; a = b; b = t;
                        g1 = a.group; g2 = b.group; ap = a.power.toString(); bp = b.power.toString();
                    }

                    var powEQ = ap === bp,
                        v1 = a.value,
                        v2 = b.value,
                        aIsComposite = a.isComposite(),
                        bIsComposite = b.isComposite(),
                        h1, h2, result;

                    if(aIsComposite) h1 = text(a, 'hash');
                    if(bIsComposite) h2 = text(b, 'hash');
                    
                    if(g1 === CP && g2 === CP && b.isLinear() && !a.isLinear() && h1 !== h2) {
                        return this.add(a, b);
                    }   

                    //PL & PL should compare hashes and not values e.g. compare x+x^2 with x+x^3 and not x with x
                    if(g1 === PL && g2 === PL) { 
                        v1 = h1; v2 = h2;
                    }

                    var PN = g1 === P && g2 === N,
                        PNEQ = a.value === b.multiplier.toString(),
                        valEQ = (v1 === v2 || h1 === h2 && !h1 === undefined || (PN && PNEQ));

                    //equal values, equal powers
                    if(valEQ && powEQ && g1 ===  g2) { 
                        //make sure to convert N to something P can work with
                        if(PN) b = b.convert(P);//CL

                        //handle PL
                        if(g1 === PL && (g2 === S || g2 === P)) { 
                            a.distributeMultiplier();
                            result = a.attach(b);
                        }
                        else {
                            result = a;//CL
                            if(a.multiplier.isOne() && b.multiplier.isOne() && g1 === CP && a.isLinear() && b.isLinear()) {
                                for(var s in b.symbols) {
                                    var x = b.symbols[s];
                                    result.attach(x);
                                }
                            }
                            else result.multiplier = result.multiplier.add(b.multiplier);
                        }
                    }
                    //equal values uneven powers
                    else if(valEQ && g1 !== PL) { 
                        result = Symbol.shell(PL).attach([a, b]);
                        //update the hash
                        result.value = g1 === PL ? h1 : v1;
                    }
                    else if(aIsComposite && a.isLinear()) { 
                        var canIterate = g1 === g2,
                            bothPL = g1 === PL && g2 === PL; 

                        //we can only iterate group PL if they values match
                        if(bothPL) canIterate = a.value === b.value;
                        //distribute the multiplier over the entire symbol
                        a.distributeMultiplier();

                        if(b.isComposite() && b.isLinear() && canIterate) {
                            b.distributeMultiplier();
                            //CL
                            for(var s in b.symbols) {
                                var x = b.symbols[s];
                                a.attach(x);
                            }
                            result = a; 
                        }
                        //handle cases like 2*(x+x^2)^2+2*(x+x^2)^3+4*(x+x^2)^2
                        else if(bothPL && a.value !== h2 || g1 === PL && !valEQ) {
                            result = Symbol.shell(CP).attach([a, b]);
                            result.updateHash();

                        }
                        else { 
                            result = a.attach(b);
                        }
                    }
                    else { 
                        if(g1 === FN && a.fname === SQRT && g2 !== EX && b.power.equals(0.5)) { 
                            var m = b.multiplier.clone();
                            b = sqrt(b.toUnitMultiplier().toLinear());
                            b.multiplier = m;
                        }
                        //fix for issue #3 and #159
                        if(a.length === 2 && b.length === 2 && even(a.power) && even(b.power)) {
                            result = _.add(expand(a), expand(b));
                        }
                        else {
                            result = Symbol.shell(CP).attach([a, b]);
                            result.updateHash();
                        }  
                    }

                    if(result.multiplier.equals(0)) result = new Symbol(0);

                    //make sure to remove unnecessary wraps
                    if(result.length === 1) { 
                        var m = result.multiplier;
                        result = firstObject(result.symbols);
                        result.multiplier = result.multiplier.multiply(m);
                    }

                    return result;
                }
                else { 
                    //keep symbols to the right 
                    if(bIsSymbol && !aIsSymbol) { 
                        var t = a; a = b; b = t; //swap
                        t = bIsSymbol; bIsSymbol = aIsSymbol; aIsSymbol = t;
                    }
                    
                    var bIsMatrix = isMatrix(b);
                
                    if(aIsSymbol && bIsMatrix) {
                        b.eachElement(function(e) {
                           return _.add(a.clone(), e); 
                        });
                    }
                    else {
                        if(isMatrix(a) && bIsMatrix) { 
                            b = a.add(b);
                        }
                        else if(aIsSymbol && isVector(b)) {
                            b.each(function(x, i) {
                                i--;
                                b.elements[i] = _.add(a.clone(), b.elements[i]);
                            });
                        }
                        else { 
                            if(isVector(a) && isVector(b)) { 
                                b.each(function(x, i) {
                                    i--;
                                    b.elements[i] = _.add(a.elements[i], b.elements[i]);
                                });
                            }
                            else if(isVector(a) && isMatrix(b)) { 
                                //try to convert a to a matrix
                                return _.add(b, a);
                            }
                            else if(isMatrix(a) && isVector(b)) {
                                if(b.elements.length === a.rows()) {
                                    var M = new Matrix(), l = a.cols();
                                    b.each(function(e, i) {
                                        var row = [];
                                        for(var j=0; j<l; j++) { 
                                            row.push(_.add(a.elements[i-1][j].clone(), e.clone()));
                                        }
                                        M.elements.push(row);
                                    });
                                    return M;
                                }
                                else err('Dimensions must match!');
                            }
                        }
                    }
                    return b;
                }
                    
            };
            
            /**
             * Gets called when the parser finds the - operator. Not the prefix operator. See this.add
             * @param {Symbol} symbol1
             * @param {Symbol} symbol2
             * @returns {Symbol}
             */
            this.subtract = function(a, b) { 
                var aIsSymbol = aIsSymbol = isSymbol(a), 
                    bIsSymbol = isSymbol(b), t;
                
                if(aIsSymbol && bIsSymbol) {
                    return this.add(a, b.negate());
                }
                else {
                    if(bIsSymbol) {
                        t = b; b = a; a = t;
                        aIsSymbol = bIsSymbol;
                    }
                    if(aIsSymbol && isVector(b)) {
                        b = b.map(function(x) {
                            return _.subtract(x, a.clone());
                        });
                    }
                    else if(isVector(a) && isVector(b)) {
                        if(a.dimensions() === b.dimensions()) b = a.subtract(b);
                        else _.error('Unable to subtract vectors. Dimensions do not match.');
                    }
                    else if(isMatrix(a) && isVector(b)) {
                        if(b.elements.length === a.rows()) {
                            var M = new Matrix(), l = a.cols();
                            b.each(function(e, i) {
                                var row = [];
                                for(var j=0; j<l; j++) { 
                                    row.push(_.subtract(a.elements[i-1][j].clone(), e.clone()));
                                }
                                M.elements.push(row);
                            });
                            return M;
                        }
                        else err('Dimensions must match!');
                    }
                    else if(isVector(a) && isMatrix(b)) {
                        var M = b.clone().negate();
                        return _.add(M, a);
                    }
                    else if(isMatrix(a) && isMatrix(b)) {
                        b = a.subtract(b);
                    }
                    return b;
                }
            };

            /**
             * Gets called when the parser finds the * operator. See this.add
             * @param {Symbol} a
             * @param {Symbol} b
             * @returns {Symbol}
             */
            this.multiply = function(a, b) { 
                var aIsSymbol = isSymbol(a),
                    bIsSymbol = isSymbol(b);
            
                if(aIsSymbol && bIsSymbol) {
                    //handle Infinty
                    if(a.isInfinity || b.isInfinity) { 
                        if(a.equals(0) || b.equals(0))
                            throw new UndefinedError(a+'*'+b+' is undefined!');
                        if(b.power.lessThan(0))
                            throw new UndefinedError('Infinity/Infinity is not defined!');
                        var sign = a.multiplier.multiply(b.multiplier).sign(),
                            inf = Symbol.infinity();
                        if(a.isConstant() || b.isConstant() || (a.isInfinity && b.isInfinity)) {
                            if(sign < 0)
                                inf.negate();
                            return inf;
                        }
                    }
                    //the quickies
                    if(a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {
                        var retval = new Symbol(a.multiplier.multiply(b.multiplier).toDecimal());
                        return retval;
                    }

                    //don't waste time
                    if(a.isOne()) return b.clone();
                    if(b.isOne()) return a.clone();

                    if(a.multiplier.equals(0) || b.multiplier.equals(0)) return new Symbol(0);

                    if(b.group > a.group && !(b.group === CP)) return this.multiply(b, a);
                    //correction for PL/CB dilemma
                    if(a.group === CB && b.group === PL && a.value === b.value) { 
                        var t = a; a = b; b = t;//swap
                    }

                    var g1 = a.group,
                        g2 = b.group,
                        bnum = b.multiplier.num,
                        bden = b.multiplier.den;

                    if(g1 === FN && a.fname === SQRT && !b.isConstant() && a.args[0].value === b.value) {
                        //unwrap sqrt
                        var a_pow = a.power;
                        a = a.args[0].clone();
                        a.setPower(new Frac(0.5).multiply(a_pow));
                        g1 = a.group;
                    }                
                    var v1 = a.value,
                        v2 = b.value,
                        sign = new Frac(a.multiplier.lessThan(0) ? -1 : 1),
                        //since P is just a morphed version of N we need to see if they relate
                        ONN = (g1 === P && g2 === N && b.multiplier.equals(a.value)),
                        //don't multiply the multiplier of b since that's equal to the value of a
                        m = ONN ? new Frac(1).multiply(a.multiplier).abs() : a.multiplier.multiply(b.multiplier).abs(),
                        result = a.clone().toUnitMultiplier();
                    b = b.clone().toUnitMultiplier(true);
                    
                    //if both are PL then their hashes have to match
                    if(v1 === v2 && g1 === PL && g1 === g2) {
                        v1 = a.text('hash');
                        v2 = b.text('hash');
                    }

                    //same issue with (x^2+1)^x*(x^2+1)
                    //EX needs an exception when multiplying because it needs to recognize
                    //that (x+x^2)^x has the same hash as (x+x^2). The latter is kept as x
                    if(g2 === EX && b.previousGroup === PL && g1 === PL) {
                        v1 = text(a, 'hash', EX);
                    }
                    

                    if((v1 === v2 || ONN) && !(g1 === PL && (g2 === S || g2 === P || g2 === FN)) && !(g1 === PL && g2 === CB)) {                   
                        var p1 = a.power,
                            p2 = b.power,
                            isSymbolP1 = isSymbol(p1),
                            isSymbolP2 = isSymbol(p2),
                            toEX = (isSymbolP1 || isSymbolP2);
                        //TODO: this needs cleaning up
                        if(g1 === PL && g2 !== PL && b.previousGroup !== PL && p1.equals(1)) {
                            result = new Symbol(0);
                            a.each(function(x) {
                                result = _.add(result, _.multiply(x, b.clone()));
                            }, true);
                        }
                        else {
                            //add the powers
                            result.power = toEX ? _.add(
                                !(isSymbol(p1)) ? new Symbol(p1) : p1, 
                                !(isSymbol(p2)) ? new Symbol(p2) : p2
                            ): (g1 === N /*don't add powers for N*/? p1 : p1.add(p2));

                            //eliminate zero power values and convert them to numbers
                            if(result.power.equals(0)) result = result.convert(N);

                            //properly convert to EX
                            if(toEX) result.convert(EX);

                            //take care of imaginaries
                            if(a.imaginary && b.imaginary) { 
                                var isEven = even(result.power % 2);
                                if(isEven) {
                                    result = new Symbol(1);
                                    m.negate();
                                }
                            }

                            //cleanup: this causes the LaTeX generator to get confused as to how to render the symbol
                            if(result.group !== EX && result.previousGroup) result.previousGroup = undefined;
                            //the sign for b is floating around. Remember we are assuming that the odd variable will carry
                            //the sign but this isn't true if they're equals symbols
                            result.multiplier = result.multiplier.multiply(b.multiplier);
                        }
                    }
                    else if(g1 === CB && a.isLinear()){ 
                        if(g2 === CB) b.distributeExponent();
                        if(g2 === CB && b.isLinear()) { 
                            for(var s in b.symbols) {
                                var x = b.symbols[s];
                                result = result.combine(x);
                            }
                            result.multiplier = result.multiplier.multiply(b.multiplier);
                        }
                        else { 
                            result.combine(b);
                        }
                    }
                    else {
                        //the multiplier was already handled so nothing left to do
                        if(g1 !== N) { 
                            if(g1 === CB) {
                                result.distributeExponent();
                                result.combine(b);
                            }
                            else if(!b.isOne()) {
                                var bm = b.multiplier.clone();
                                b.toUnitMultiplier();
                                result = Symbol.shell(CB).combine([result, b]);
                                //transfer the multiplier to the outside
                                result.multiplier = result.multiplier.multiply(bm);
                            }
                        }     
                        else { 
                            result = b.clone().toUnitMultiplier();
                        }
                    }

                    if(result.group === P) { 
                        var logV = Math.log(result.value),
                            n1 = Math.log(bnum)/logV,
                            n2 = Math.log(bden)/logV,
                            ndiv = m.num/bnum,
                            ddiv = m.den/bden;
                        //we don't want to divide by zero no do we? Strange things happen.
                        if(n1 !== 0 && isInt(n1) && isInt(ndiv)) {
                            result.power = result.power.add(new Frac(n1));
                            m.num /= bnum; //BigInt? Keep that in mind for the future.
                        }
                        if(n2 !== 0 && isInt(n2) && isInt(ddiv)) {
                            result.power = result.power.subtract(new Frac(n2));
                            m.den /= bden; //BigInt? Keep that in mind for the future.
                        }
                    }

                    //unpack CB if length is only one
                    if(result.length === 1) { 
                        var t = result.multiplier;
                        //transfer the multiplier
                        result = firstObject(result.symbols);
                        result.multiplier = result.multiplier.multiply(t);
                    }

                    //reduce square root
                    var ps = result.power.toString(); 
                    if(even(ps) && result.fname === SQRT) { 
                        var p = result.power;
                        result = result.args[0]; 
                        result = _.multiply(new Symbol(m), _.pow(result, new Symbol(p.divide(new Frac(2)))));
                    }
                    else {
                        result.multiplier = result.multiplier.multiply(m).multiply(sign);
                        if(result.group === CP && result.isImaginary())
                            result.distributeMultiplier();
                    }


                    //back convert group P to a simpler group N if possible
                    if(result.group === P && isInt(result.power.toDecimal())) result = result.convert(N);

                    return result;
                }
                else {
                    //****** Matrices & Vector *****//
                    if(bIsSymbol && !aIsSymbol) { //keep symbols to the right 
                        t = a; a = b; b = t; //swap
                        t = bIsSymbol; bIsSymbol = aIsSymbol; aIsSymbol = t;
                    }

                    var isMatrixB = isMatrix(b), isMatrixA = isMatrix(a);
                    if(aIsSymbol && isMatrixB) {
                        b.eachElement(function(e) {
                           return _.multiply(a.clone(), e); 
                        });
                    }
                    else {
                        if(isMatrixA && isMatrixB) { 
                            b = a.multiply(b);
                        }
                        else if(aIsSymbol && isVector(b)) {
                            b.each(function(x, i) {
                                i--;
                                b.elements[i] = _.multiply(a.clone(), b.elements[i]);
                            });
                        }
                        else {
                            if(isVector(a) && isVector(b)) {
                                b.each(function(x, i) {
                                    i--;
                                    b.elements[i] = _.multiply(a.elements[i], b.elements[i]);
                                });
                            }
                            else if(isVector(a) && isMatrix(b)) {
                                //try to convert a to a matrix
                                return this.multiply(b, a);
                            }
                            else if(isMatrix(a) && isVector(b)) { 
                                if(b.elements.length === a.rows()) {
                                    var M = new Matrix(), l = a.cols();
                                    b.each(function(e, i) {
                                        var row = [];
                                        for(var j=0; j<l; j++) { 
                                            row.push(_.multiply(a.elements[i-1][j].clone(), e.clone()));
                                        }
                                        M.elements.push(row);
                                    });
                                    return M;
                                }
                                else err('Dimensions must match!');
                            }
                        }
                    }

                    return b;
                }
            };
            
            /**
             * Gets called when the parser finds the / operator. See this.add
             * @param {Symbol} a
             * @param {Symbol} b
             * @returns {Symbol}
             */
            this.divide = function(a, b) { 
                var aIsSymbol = isSymbol(a),
                    bIsSymbol = isSymbol(b);
            
                if(aIsSymbol && bIsSymbol) {
                    var result;
                    if(b.equals(0)) 
                        throw new DivisionByZero('Division by zero not allowed!');
                    
                    if(a.isConstant() && b.isConstant()) {
                        result = a.clone();
                        result.multiplier = result.multiplier.divide(b.multiplier);
                    }
                    else {
                        b.invert();
                        result = _.multiply(a, b);
                    }
                    return result;
                }
                else {
                    //******* Vectors & Matrices *********//
                    var isVectorA = isVector(a), isVectorB = isVector(b);
                    if(aIsSymbol && isVectorB) {
                        b = b.map(function(x){
                            return _.divide(a.clone(),x);
                        });
                    }
                    else if(isVectorA && bIsSymbol) {
                        b = a.map(function(x) {
                            return _.divide(x, b.clone());
                        });
                    }
                    else if(isVectorA && isVectorB) {
                        if(a.dimensions() === b.dimensions()) {
                            b = b.map(function(x, i) {
                                return _.divide(a.elements[--i], x);
                            });
                        }
                        else _.error('Cannot divide vectors. Dimensions do not match!');
                    }
                    else {
                        var isMatrixA = isMatrix(a), isMatrixB = isMatrix(b);
                        if(isMatrixA && bIsSymbol) {
                            a.eachElement(function(x) {
                                return _.divide(x, b.clone());
                            });
                            b = a;
                        }
                        else if(isMatrixA && isMatrixB) {
                            if(a.rows() === b.rows() && a.cols() === b.cols()) {
                                a.eachElement(function(x, i, j) {
                                    return _.divide(x, b.elements[i][j]);
                                });
                            }
                            else {
                                _.error('Dimensions do not match!');
                            }
                        }
                        else if(isMatrixA && isVectorB) {
                            if(a.cols() === b.dimensions()) {
                                a.eachElement(function(x, i, j) {
                                    return _.divide(x, b.elements[i].clone());
                                });
                                b = a;
                            }
                            else {
                                _.error('Unable to divide matrix by vector.');
                            }
                        }
                    }
                    return b;
                }
            };

            /**
             * Gets called when the parser finds the ^ operator. See this.add
             * @param {Symbol} a
             * @param {Symbol} b
             * @returns {Symbol}
             */
            this.pow = function(a, b) { 
                var aIsSymbol = isSymbol(a),
                    bIsSymbol = isSymbol(b);
                if(aIsSymbol && bIsSymbol) {  
                    //handle infinity
                    if(a.isInfinity || b.isInfinity) {
                        if(a.isInfinity && b.isInfinity)
                            throw new UndefinedError('('+a+')^('+b+') is undefined!');
                        
                        if(a.isConstant() && b.isInfinity) { 
                            if(a.equals(0)) {
                                if(b.lessThan(0))
                                    throw new UndefinedError('0^Infinity is undefined!');
                                return new Symbol(0);
                            }
                            if(a.equals(1))
                                throw new UndefinedError('1^'+b.toString()+' is undefined!');
                            //a^-oo
                            if(b.lessThan(0))
                                return new Symbol(0);
                            //a^oo
                            if(!a.lessThan(0))
                                return Symbol.infinity();
                        }
                            
                        if(a.isInfinity && b.isConstant()) { 
                            if(b.equals(0))
                                throw new UndefinedError(a+'^0 is undefined!');
                            if(b.lessThan(0))
                                return new Symbol(0);
                            return _.multiply(Symbol.infinity(), _.pow(new Symbol(a.sign()), b.clone()));
                        }
                    }
                        
                    var aIsZero = a.equals(0);
                    if(aIsZero && b.equals(0)) err('0^0 is undefined!');
                    //return 0 right away if possible
                    if(aIsZero && b.isConstant() && b.multiplier.greaterThan(0))
                        return new Symbol(0);
                    
                    var bIsConstant = b.isConstant(),
                        aIsConstant = a.isConstant(), 
                        bIsInt = b.isInteger(),
                        m = a.multiplier,
                        result = a.clone();
                    if(aIsConstant && bIsConstant && a.equals(0) && b.lessThan(0))
                        throw new UndefinedError('Division by zero is not allowed!');
                    
                    //compute imaginary numbers right away
                    if(Settings.PARSE2NUMBER && aIsConstant && bIsConstant && a.sign() < 0 && evenFraction(b)) { 
                        var k, re, im;
                        k = Math.PI*b;
                        re = new Symbol(Math.cos(k));
                        im = _.multiply(Symbol.imaginary(), new Symbol(Math.sin(k)));
                        return _.add(re, im);
                    }
                    
                    //imaginary number under negative nthroot or to the n
                    if(Settings.PARSE2NUMBER && a.isImaginary() && bIsConstant) { 
                        var re, im, r, theta, nre, nim;
                        re = a.realpart();
                        im = a.imagpart();
                        if(re.isConstant('all') && im.isConstant('all')) {
                            theta = new Symbol(Math.atan2(im, re)*b);
                            r = _.pow(Symbol.hyp(re, im), b); 
                            nre = _.multiply(r.clone(), _.trig.cos(theta.clone()));
                            nim = _.multiply(r, _.trig.sin(theta));
                            return _.add(nre, _.multiply(Symbol.imaginary(), nim));
                        }
                    }
                    /*
                    if(a.isImaginary() && bIsConstant && b.multiplier.num.abs().equals(1) && !b.multiplier.den.equals(1)) { 
                        var sign = b.sign();
                        b = abs(b);
                        var p, re, im, theta, n, ai, bi, di, ei, ii, th;
                        p = Symbol.toPolarFormArray(a);
                        theta = _.multiply(b.clone(), arg(a));
                        di = _.pow(p[0], b);
                        ai = _.trig.cos(theta.clone());
                        bi = _.trig.sin(theta);
                            
                        if(sign < 0) {
                            re = _.divide(ai, di.clone());
                            im = _.divide(bi, di);
                        }
                        else {
                            re = _.multiply(ai, di.clone());
                            im = _.multiply(bi, di);
                        }
                        return _.add(re, _.multiply(im, Symbol.imaginary()));
                    }
                    */
                    
                    //take care of the symbolic part
                    result.toUnitMultiplier();
                    //simpifly sqrt
                    if(result.group === FN && result.fname === SQRT && !bIsConstant) { 
                        var s = result.args[0];
                        s.multiplyPower(new Symbol(0.5));
                        s.multiplier.multiply(result.multiplier);
                        s.multiplyPower(b);
                        result = s; 
                    }
                    else { 
                        var sign = m.sign();
                        //handle cases such as (-a^3)^(1/4)
                        if(evenFraction(b) && sign < 0) {
                            //swaperoo
                            //first put the sign back on the symbol
                            result.negate();
                            //wrap it in brackets
                            result = _.symfunction(PARENTHESIS, [result]);
                            //move the sign back the exterior and let nerdamer handle the rest
                            result.negate();
                        }
                        result.multiplyPower(b);
                    }

                    if(aIsConstant && bIsConstant && Settings.PARSE2NUMBER) { 
                        var c;
                        //remove the sign
                        if(sign < 0) {
                            a.negate();
                            if(b.multiplier.den.equals(2)) 
                                //we know that the numerator has to be odd and therefore it's i
                                c = new Symbol(Settings.IMAGINARY);
                            else if(isInt(b.multiplier)) {
                                if(even(b.multiplier))
                                    c = new Symbol(1);
                                else 
                                    c = new Symbol(-1);
                            }
                            else if(!even(b.multiplier.den)) {
                                sign = Math.pow(sign, b.multiplier.num);
                                c = new Symbol(Math.pow(a, b)*sign);
                            }
                            else {
                                c = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());
                            }
                                
                        }

                        result = new Symbol(Math.pow(a.multiplier.toDecimal(), b.multiplier.toDecimal()));
                        //result = new Symbol(Math2.bigpow(a.multiplier, b.multiplier));
                        //put the back sign
                        if(c)
                            result = _.multiply(result, c);
                    }
                    else if(bIsInt && !m.equals(1)) { 
                        var p = b.multiplier.toDecimal();
                        var sgn = Math.sign(p);
                        p = Math.abs(p);
                        var multiplier = new Frac(1); 
                        multiplier.num = m.num.pow(p);
                        multiplier.den = m.den.pow(p);
                        if(sgn < 0)
                            multiplier.invert();
                        //multiplying is justified since after mulltiplyPower if it was of group P it will now be of group N
                        result.multiplier = result.multiplier.multiply(multiplier);
                    }
                    else { 
                        var sign = a.sign();
                        if(b.isConstant() && a.isConstant() && !b.multiplier.den.equals(1) && sign < 0 ) { 
                            //we know the sign is negative so if the denominator for b == 2 then it's i
                            if(b.multiplier.den.equals(2)) {
                                var i = new Symbol(Settings.IMAGINARY);
                                a.negate();//remove the sign
                                //if the power is negative then i is negative
                                if(b.lessThan(0)) {
                                    i.negate();
                                    b.negate();//remove the sign from the power
                                }
                                //pull the power normally and put back the imaginary
                                result = _.multiply(_.pow(a, b), i);
                            }
                            else { 
                                var aa = a.clone();
                                aa.multiplier.negate();
                                result = _.pow(_.symfunction(PARENTHESIS, [new Symbol(-1)]), b.clone()); 
                                var _a = _.pow(new Symbol(aa.multiplier.num), b.clone());
                                var _b = _.pow(new Symbol(aa.multiplier.den), b.clone());
                                var r = _.divide(_a, _b);
                                result = _.multiply(result, r);
                            }  
                        }
                        else if(Settings.PARSE2NUMBER && b.isImaginary()) {
                            //4^(i + 2) = e^(- (2 - 4 i) π n + (2 + i) log(4))
                            var re, im, aa, a1, b1, c1;
                            aa = a.clone().toLinear();
                            re = b.realpart();
                            im = b.imagpart();
                            a1 = _.pow(aa.clone(), re);
                            b1 = trig.cos(_.multiply(im.clone(), log(aa.clone())));
                            c1 = _.multiply(trig.sin(_.multiply(im, log(aa))), Symbol.imaginary());
                            result = _.multiply(a1, _.add(b1, c1));
                            result = _.expand(_.parse(result));
                        }
                        else { 
                            //b is a symbol
                            var neg_num = a.group === N && sign < 0,
                                num = testSQRT(new Symbol(neg_num ? m.num : Math.abs(m.num)).setPower(b.clone())),
                                den = testSQRT(new Symbol(m.den).setPower(b.clone()).invert());  

                            //eliminate imaginary if possible
                            if(a.imaginary) { 
                                if(bIsInt) {
                                    var s, p, n;
                                    s = Math.sign(b);
                                    p = abs(b);
                                    n = p%4;
                                    result = new Symbol(even(n) ? -1 : Settings.IMAGINARY);
                                    if(n === 0 || s < 0 && (n === 1) || s > 0 && (n === 3)) {
                                        result.negate();
                                    }
                                }
                                else {
                                    //assume i = sqrt(-1) -> (-1)^(1/2)
                                    var nr = b.multiplier.multiply(Frac.quick(1, 2)),
                                        //the denominator denotes the power so raise to it. It will turn positive it round
                                        tn = Math.pow(-1, nr.num);
                                    result = even(nr.den) ? new Symbol(-1).setPower(nr, true) : new Symbol(tn);
                                }
                            } 
                            //ensure that the sign is carried by the symbol and not the multiplier
                            //this enables us to check down the line if the multiplier can indeed be transferred
                            if(sign < 0 && !neg_num) result.negate();
                            
                            //retain the absolute value
                            if(bIsConstant && a.group !== EX) { 
                                var evenr = even(b.multiplier.den),
                                    evenp = even(a.power),
                                    n = result.power.toDecimal(),
                                    evennp = even(n);
                                if(evenr && evenp && !evennp) {
                                    if(n === 1 ) result = _.symfunction(ABS, [result]);
                                    else if(!isInt(n)) {
                                        var p = result.power;
                                        result = _.symfunction(ABS, [result.toLinear()]).setPower(p);
                                    }
                                    else {
                                        result = _.multiply(_.symfunction(ABS, [result.clone().toLinear()]), 
                                            result.clone().setPower(new Frac(n-1)));
                                    }
                                    //quick workaround. Revisit
                                    if(Settings.POSITIVE_MULTIPLIERS && result.fname === ABS)
                                        result = result.args[0];
                                }
                            }   
                        }   
                    }

                    result = testSQRT(result);
                    //don't multiply until we've tested the remaining symbol
                    if(num && den)
                        result = _.multiply(result, testPow(_.multiply(num, den)));

                    //reduce square root
                    if(result.fname === SQRT) { 
                        var isEX = result.group === EX;
                        var t = isEX ? result.power.multiplier.toString() : result.power.toString();
                        if(even(t)) { 
                            var pt = isEX ? _.divide(result.power, new Symbol(2)) : new Symbol(result.power.divide(new Frac(2))),
                                m = result.multiplier;
                            result = _.pow(result.args[0], pt);
                            result.multiplier = result.multiplier.multiply(m);
                        }
                    }
                    //detect Euler's identity
                    else if(!Settings.IGNORE_E && result.isE() && result.group === EX && result.power.contains('pi') 
                            && result.power.contains(Settings.IMAGINARY)) {
                        //we have a match
                        var m1 = result.multiplier,
                            m2 = result.power.multiplier;
                        result = new Symbol(even(m2.num) ? m1 : m1.negate());
                        result = _.pow(result, new Symbol(m2.den).invert());
                    }
                    return result;
                }
                else {
                    if(isVector(a) && bIsSymbol) {
                        a = a.map(function(x) {
                            return _.pow(x, b.clone());
                        });
                    }
                    else if(isMatrix(a) && bIsSymbol) {
                        a.eachElement(function(x) {
                            return _.pow(x, b.clone());
                        });
                    }
                    return a;
                }
            };
            
            //gets called when the parser finds the , operator. 
            this.comma = function(a, b) { 
                var aIsArray = (a instanceof Array),
                    bIsArray = (b instanceof Array),
                    aHasSubArray = (aIsArray && a[0] instanceof Array);

                if ( (aIsArray && aHasSubArray) || (aIsArray && !bIsArray) ) a.push(b);
                else a = [a,b];
                return a;
            };
            
            //the equality setter
            this.equals = function(a, b) {
                //equality can only be set for group S so complain it's not
                if(a.group !== S && !a.isLinear())
                    err('Cannot set equality for '+a.toString());
                VARS[a.value] = b.clone();
                return b;
            };
            
            //modulus
            this.mod_or_percent = function(a, b) {
                if(a && b)
                    return mod(a, b);
                return _.percent(b);
            };
            
            //percent
            this.percent = function(a) {
                return _.divide(a, new Symbol(100));
            };
            
            this.percent_add = function(a, b) {
                return _.add(_.percent(a), b);
            };
            
            this.percent_subtract = function(a, b) {
                return _.subtract(_.percent(a), b);
            };
            //function to quickly convert bools to Symbols
            var bool2Symbol = function(x) {
                return new Symbol(x === true ? 1 : 0);
            };
            //check for equality
            this.eq = function(a, b) {
                return bool2Symbol(a.equals(b));
            };
            //checks for greater than
            this.gt = function(a, b) {
                return bool2Symbol(a.gt(b));
            };
            //checks for greater than equal
            this.gte = function(a, b) {
                return bool2Symbol(a.gte(b));
            };
            //checks for less than
            this.lt = function(a, b) {
                return bool2Symbol(a.lt(b));
            };
            //checks for less than equal
            this.lte = function(a, b) {
                return bool2Symbol(a.lte(b));
            };
            //wraps the factorial
            this.factorial = function(a) {
                return this.symfunction(FACTORIAL, [a]);
            };
            //wraps the double factorial
            this.dfactorial = function(a) {
                return this.symfunction(DOUBLEFACTORIAL, [a]);
            };
            //wacky fix for factorial with prefixes
            this.factadd = function(a, b) {
                return _.add(this.symfunction(FACTORIAL, [a]), b);
            };
            this.dfactadd = function(a, b) {
                return _.add(this.symfunction(DOUBLEFACTORIAL, [a]), b);
            };
            this.factsub = function(a, b) {
                return _.subtract(this.symfunction(FACTORIAL, [a]), b);
            };
            this.dfactsub = function(a, b) {
                return _.subtract(this.symfunction(DOUBLEFACTORIAL, [a]), b);
            };
        }    
        /* "STATIC" */
        //converts a number to a fraction. 
        var Fraction = {
            /**
             * Converts a decimal to a fraction
             * @param {number} value
             * @param {object} opts
             * @returns {Array} - an array containing the denominator and the numerator
             */
            convert: function( value, opts ) { 
                var frac;
                if( value === 0 ) {
                    frac = [ 0, 1];
                }
                else {
                    if( value < 1e-6 || value > 1e20) {
                        var qc = this.quickConversion( Number(value) );
                        if( qc[1] <= 1e20 ) { 
                            var abs = Math.abs( value );
                            var sign = value/abs;
                            frac = this.fullConversion( abs.toFixed( (qc[1]+'').length-1 ));
                            frac[0] = frac[0]*sign;
                        }
                        else {
                            frac = qc;
                        }
                    }
                    else {
                        frac = this.fullConversion( value );
                    }
                }
                return frac;
            },
            /**
             * If the fraction is too small or too large this gets called instead of fullConversion method
             * @param {number} dec
             * @returns {Array} - an array containing the denominator and the numerator
             */
            quickConversion: function(dec) {
                var x = (dec.toExponential()+'').split('e');
                var d = x[0].split('.')[1];// get the number of places after the decimal
                var l = d ? d.length : 0; // maybe the coefficient is an integer;
                //call Math.round to avoid rounding error
                return [Math.round(Math.pow(10,l)*x[0]), Math.pow(10, Math.abs(x[1])+l)];
            },
            /**
             * Returns a good approximation of a fraction. This method gets called by convert
             * http://mathforum.org/library/drmath/view/61772.html
             * Decimal To Fraction Conversion - A Simpler Version
             * Dr Peterson
             * @param {number} dec
             * @returns {Array} - an array containing the denominator and the numerator
             */
            fullConversion: function( dec ) {
                var done = false;
                //you can adjust the epsilon to a larger number if you don't need very high precision
                var n1 = 0, d1 = 1, n2 = 1, d2 = 0, n = 0, q = dec, epsilon = 1e-16;
                while(!done) {
                    n++;
                    if( n > 10000 ){
                        done = true;
                    }
                    var a = Math.floor(q);
                    var num = n1 + a * n2;
                    var den = d1 + a * d2;
                    var e = (q - a);
                    if( e < epsilon) {
                        done = true;
                    }
                    q = 1/e;
                    n1 = n2; d1 = d2; n2 = num; d2 = den;
                    if(Math.abs(num/den-dec) < epsilon || n > 30) {
                        done = true;
                    }
                }
                return [num, den];
            }
        };

        //Depends on Fraction
        //The latex generator
        var LaTeX = {
            space: '~',
            dot: ' \\cdot ',
            //grab a list of supported functions but remove the excluded ones found in exclFN
            
            latex: function(symbol, option) { 
                //it might be an array
                if(symbol.clone)
                    symbol = symbol.clone(); //leave original as-is
                
                if(isArray(symbol)) {
                    var LaTeXArray = [];
                    for(var i=0; i<symbol.length; i++) {
                        var sym = symbol[i];
                        //This way I can generate LaTeX on an array of strings.
                        if(!isSymbol(sym))
                            sym = _.parse(sym);
                        LaTeXArray.push(this.latex(sym));
                    }
                    return this.brackets(LaTeXArray.join(', '), 'square');
                }
                
                if(isMatrix(symbol)) {
                    var TeX = '\\begin{pmatrix}\n';
                    for(var i=0; i<symbol.elements.length; i++) {
                        var rowTeX = [],
                            e = symbol.elements[i];
                        for(var j=0; j<e.length; j++) {
                            rowTeX.push(this.latex(e[j]));
                        }
                        TeX += rowTeX.join(' & ');
                        if (i<symbol.elements.length-1){    
                            TeX+='\\\\\n';
                        }
                    }
                    TeX += '\\end{pmatrix}';
                    return TeX;
                }

                if (isVector(symbol)) {
                    var TeX = '\\left[';
                    for (var i = 0; i < symbol.elements.length; i++){
                        TeX += this.latex(symbol.elements[i]) + ' ' + (i!==symbol.elements.length-1 ? ',\\,' : '');
                    }
                    TeX += '\\right]';
                    return TeX;
                }

                symbol = symbol.clone();
                var decimal = option === 'decimal',
                    power = symbol.power,
                    invert = isNegative(power),
                    negative = symbol.multiplier.lessThan(0);

                if(symbol.group === P && decimal) {
                    return String(symbol.multiplier.toDecimal()*Math.pow(symbol.value, symbol.power.toDecimal()));
                }
                else {
                    symbol.multiplier = symbol.multiplier.abs();

                        //if the user wants the result in decimal format then return it as such by placing it at the top part
                    var m_array;

                    if(decimal) {
                        var m = String(symbol.multiplier.toDecimal());
                        if(m == '1' && !decimal) m = '';
                        m_array = [m, ''];
                    }
                    else {
                        m_array = [symbol.multiplier.num, symbol.multiplier.den];
                    }
                        //get the value as a two part array
                    var v_array = this.value(symbol, invert, option, negative),
                        p;    
                    //make it all positive since we know whether to push the power to the numerator or denominator already.
                    if(invert) power.negate();
                    //the power is simple since it requires no additional formatting. We can get it to a
                    //string right away. pass in true to neglect unit powers
                    if(decimal)  { 
                        p = isSymbol(power) ? LaTeX.latex(power, option) : String(power.toDecimal());
                        if(p == '1') p = '';
                    }
                    //get the latex representation
                    else if(isSymbol(power)) p = this.latex(power, option);
                    //get it as a fraction
                    else p = this.formatFrac(power, true);
                    //use this array to specify if the power is getting attached to the top or the bottom
                    var p_array = ['', ''],
                        //stick it to the top or the bottom. If it's negative then the power gets placed on the bottom
                        index = invert ? 1 : 0;
                    p_array[index] = p;

                    //special case group P and decimal
                    var retval = (negative ? '-': '')+this.set(m_array, v_array, p_array, symbol.group === CB);

                    return retval.replace(/\+\-/gi, '-');
                }
                    
            },
            //greek mapping
            greek: {
                alpha:      '\\alpha',
                beta:       '\\beta',
                gamma:      '\\gamma',
                delta:      '\\delta',
                epsilon:    '\\epsilon',
                zeta:       '\\zeta',
                eta:        '\\eta',
                theta:      '\\theta',
                iota:       '\\iota',
                kappa:      '\\kappa',
                lambda:     '\\lambda',
                mu:         '\\mu',
                nu:         '\\nu',
                xi:         '\\xi',
                omnikron:   '\\omnikron',
                pi:         '\\pi',
                rho:        '\\rho',
                sigma:      '\\sigma',
                tau:        '\\tau',
                upsilon:    '\\upsilon',
                phi:        '\\phi',
                chi:        '\\chi',
                psi:        '\\psi',
                omega:      '\\omega',
                Gamma:      '\\Gamma',
                Delta:      '\\Delta',
                Epsilon:    '\\Epsilon',
                Theta:      '\\Theta',
                Lambda:     '\\Lambda',
                Xi:         '\\Xi',
                Pi:         '\\Pi',
                Sigma:      '\\Sigma',
                Phi:        '\\Phi',
                Psi:        '\\Psi',
                Omega:      '\\Omega'
            },
            //get the raw value of the symbol as an array
            value: function(symbol, inverted, option, negative) { 
                var group = symbol.group,
                    previousGroup = symbol.previousGroup,
                    v = ['', ''],
                    index =  inverted ? 1 : 0; 
                /*if(group === N) //do nothing since we want to return top & bottom blank; */
                if(symbol.isInfinity) {
                    v[index] = '\\infty';
                }
                else if(group === S || group === P || previousGroup === S || previousGroup === P || previousGroup === N) { 
                    var value = symbol.value; 
                    if(value.replace) 
                        value = value.replace(/(.+)_$/, '$1\\_');
                    //split it so we can check for instances of alpha as well as alpha_b
                    var t_varray = String(value).split('_'); 
                    var greek = this.greek[t_varray[0]];
                    if(greek) {
                        t_varray[0] = greek;
                        value = t_varray.join('_');
                    }
                    v[index] = value;
                }
                else if(group === FN || previousGroup === FN) { 
                    var name,
                        input = [],
                        fname = symbol.fname;
                    //collect the arguments
                    for(var i=0; i<symbol.args.length; i++) {
                        var arg = symbol.args[i], item;
                        if(typeof arg === 'string')
                            item = arg;
                        else
                            item = this.latex(arg, option);
                        input.push(item);
                    }

                    if(fname === SQRT) {
                        v[index] = '\\sqrt'+this.braces(input.join(','));
                    }
                    else if(fname === ABS) {
                        v[index] = this.brackets(input.join(','), 'abs');
                    }
                    else if(fname === PARENTHESIS) { 
                        v[index] = this.brackets(input.join(','), 'parens');
                    }
                    else if(fname === 'limit') {
                        v[index] = ' \\lim\\limits_{'+input[1]+' \\to '+input[2]+'} '+input[0];
                    }
                    else if(fname === 'integrate') {
                        v[index] = '\\int'+this.braces(input[0])+this.braces('d'+input[1]);
                    }
                    else if(fname === 'defint') {
                        v[index] = '\\int\\limits_'+this.braces(input[1])+'^'+this.braces(input[2])+' '+input[0]+' d'+input[3];
                    }
                    else if(fname === FACTORIAL || fname === DOUBLEFACTORIAL) {
                        var arg = symbol.args[0];
                        if(arg.power.equals(1) && (arg.isComposite() || arg.isCombination())) {
                            input[0] = this.brackets(input[0]);
                        }
                        v[index] = input[0]+(fname === FACTORIAL ? '!' : '!!');
                    }
                    else if(fname === 'floor') {
                        v[index] = '\\left \\lfloor'+this.braces(input[0])+'\\right \\rfloor';
                    }
                    else if(fname === 'ceil') {
                        v[index] = '\\left \\lceil'+this.braces(input[0])+'\\right \\rceil';
                    }
                    //capture log(a, b)
                    else if(fname === 'log' && input.length > 1) {
                        v[index] = '\\mathrm'+this.braces('log')+'_'+this.braces(input[1])+this.brackets(input[0]);
                    }
                    //capture log(a, b)
                    else if(fname === 'log10') {
                        v[index] = '\\mathrm'+this.braces('log')+'_'+this.braces(10)+this.brackets(input[0]);
                    }
                    else if(fname === 'sum') {
                        var a = input[0],
                            b = input[1],
                            c = input[2],
                            d = input[3];
                        v[index] = '\\sum\\limits_{'+this.braces(b)+'='+this.braces(c)+'}^'+this.braces(d)+' '+this.braces(a)+'';
                    }
                    else if(fname === 'product') {
                        var a = input[0],
                            b = input[1],
                            c = input[2],
                            d = input[3];
                        v[index] = '\\prod\\limits_{'+this.braces(b)+'='+this.braces(c)+'}^'+this.braces(d)+' '+this.braces(a)+'';
                    }
                    else if(fname === 'nthroot') {
                        v[index] = '\\sqrt['+input[1]+']'+this.braces(input[0]);
                    }
                    else if(fname === 'mod') {
                        v[index] = input[0]+' \\bmod '+input[1];
                    }
                    else if(fname === 'realpart') { 
                        v[index] = '\\operatorname{Re}'+this.brackets(input[0]);
                    }
                    else if(fname === 'imagpart') { 
                        v[index] = '\\operatorname{Im}'+this.brackets(input[0]);
                    }
                    else { 
                        var name = fname!=='' ? '\\mathrm'+this.braces(fname.replace(/_/g, '\\_')) : '';
                        v[index] = name+this.brackets(input.join(','), 'parens');
                    }  
                }
                else if(symbol.isComposite()) { 
                    var collected = symbol.collectSymbols().sort(
                            group === CP || previousGroup === CP ? 
                            function(a, b) { return b.group - a.group;}:
                            function(a, b) { 
                                var x = isSymbol(a.power) ? -1 : a.power;
                                var y = isSymbol(b.power) ? -1 : b.power;
                                return y-x;
                            }
                        ),
                        symbols = [],
                        l = collected.length;
                    for(var i=0; i<l; i++) {
                        symbols.push(LaTeX.latex(collected[i], option));
                    }
                    var value = symbols.join('+'); 

                    v[index] = !(symbol.isLinear() && symbol.multiplier.equals(1)) || negative ? this.brackets(value, 'parens') : value;
                }
                else if(group === CB || previousGroup === EX || previousGroup === CB) { 
                    if(group === CB)
                        symbol.distributeExponent();
                    //this almost feels a little like cheating but I need to know if I should be wrapping the symbol
                    //in brackets or not. We'll do this by checking the value of the numerator and then comparing it 
                    //to whether the symbol value is "simple" or not.
                    var denominator = [],
                        numerator = [];
                    //generate a profile
                    var den_map = [], num_map = [], num_c = 0, den_c = 0;
                    var setBrackets = function(container, map, counter) {
                        if(counter > 1 && map.length > 0) {
                            var l = map.length;
                            for(var i=0; i<l; i++) {
                                var idx = map[i], item = container[idx];
                                if(!(/^\\left\(.+\\right\)\^\{.+\}$/g.test(item) || /^\\left\(.+\\right\)$/g.test(item))) {
                                    container[idx] = LaTeX.brackets(item, 'parens');
                                }
                            }
                        }  
                        return container;
                    };
                    
                    //generate latex for each of them
                    symbol.each(function(x) { 
                        var isDenom = isNegative(x.power),
                            laTex;
                        
                        if(isDenom) { 
                            laTex = LaTeX.latex(x.invert(), option);
                            den_c++;
                            if(x.isComposite()) {
                                if(symbol.multiplier.den != 1 && Math.abs(x.power) == 1) laTex = LaTeX.brackets(laTex, 'parens');
                                den_map.push(denominator.length); //make a note of where the composite was found 
                            }
                            
                            denominator.push(laTex);
                        }
                        else {
                            laTex = LaTeX.latex(x, option);
                            num_c++;
                            if(x.isComposite()) {
                                if(symbol.multiplier.num != 1 && Math.abs(x.power) == 1) laTex = LaTeX.brackets(laTex, 'parens');
                                num_map.push(numerator.length);   //make a note of where the composite was found 
                            }
                            numerator.push(laTex);
                        }
                    });

                    //apply brackets
                    setBrackets(numerator, num_map, num_c);
                    v[0] = numerator.join(this.dot); //collapse the numerator into one string

                    setBrackets(denominator, den_map, den_c);
                    v[1] = denominator.join(this.dot); 
                }

                return v;
            },
            set: function(m, v, p, combine_power) { 
                var isBracketed = function(v) {
                    return /^\\left\(.+\\right\)$/.test(v);
                };
                //format the power if it exists
                if(p) p = this.formatP(p);
                //group CB will have to be wrapped since the power applies to both it's numerator and denominator
                if(combine_power) {
                    //POSSIBLE BUG: If powers for group CB format wrong, investigate this since I might have overlooked something
                    //the assumption is that in every case the denonimator should be empty when dealing with CB. I can't think
                    //of a case where this isn't true
                    var tp = p[0];
                    p[0] = ''; //temporarily make p blank
                }

                //merge v and p. Not that v MUST be first since the order matters
                v = this.merge(v, p);
                var mn = m[0], md = m[1], vn = v[0], vd = v[1];
                //filters
                //if the top has a variable but the numerator is one drop it
                if(vn && mn == 1) mn = '';
                //if denominator is 1 drop it always
                if(md == 1) md = ''; 
                //prepare the top portion but check that it's not already bracketed. If it is then leave out the cdot
                var top = this.join(mn, vn, !isBracketed(vn) ? this.dot : '');

                //prepare the bottom portion but check that it's not already bracketed. If it is then leave out the cdot
                var bottom = this.join(md, vd, !isBracketed(vd) ? this.dot : '');
                //format the power if it exists
                //make it a fraction if both top and bottom exists
                if(top && bottom) {
                    var frac = this.frac(top, bottom);
                    if(combine_power && tp) frac = this.brackets(frac)+tp; 
                    return frac;
                }
                //otherwise only the top exists so return that
                else return top;
            },
            merge: function(a, b) {
                var r = [];
                for(var i=0; i<2; i++) r[i] = a[i]+b[i];
                return r;
            },
            //joins together two strings if both exist
            join: function(n, d, glue) {
                if(!n && !d) return '';
                if(n && !d) return n;
                if(d && !n) return d;
                return n+glue+d;
            },
            formatP: function(p_array) {
                for(var i=0; i<2; i++) {
                    var p = p_array[i];
                    if(p) p_array[i] = '^'+this.braces(p);
                }
                return p_array;    
            },
            /**
             * formats the fractions accordingly.
             * @param {Frac} f
             * @param {bool} make_1_blank - let's the function know to return blank for denominators == 1
             */ 
            formatFrac: function(f, is_pow) { 
                var n = f.num.toString(), 
                    d = f.den.toString(); 
                //no need to have x^1
                if(is_pow && n === '1' && d === '1') return '';
                //no need to have x/1
                if(d === '1') return n;
                return this.frac(n, d);
            },
            frac: function(n, d) {
                return '\\frac'+this.braces(n)+this.braces(d);
            },
            braces: function(e) {
                return '{'+e+'}';
            },
            brackets: function(e, typ) {
                typ = typ || 'parens';
                var bracketTypes = {
                    parens: ['(', ')'],
                    square: ['[', ']'],
                    brace:  ['{', '}'],
                    abs:    ['|', '|'],
                    angle:  ['\\langle', '\\rangle']
                };
                var bracket = bracketTypes[typ];
                return '\\left'+bracket[0]+e+'\\right'+bracket[1];
            }
        };
        
        function Vector(v) { 
            if(isVector(v)) this.elements = v.items.slice(0);
            else if(isArray(v)) this.elements = v.slice(0);
            else this.elements = [].slice.call(arguments);
        }
        
        Vector.arrayPrefill = function(n, val) {
            var a = [];
            val = val || 0;
            for(var i=0; i<n; i++) a[i] = val;
            return a;
        };
        
        Vector.fromArray = function(a) {
            var v = new Vector();
            v.elements = a;
            return v;
        };
        
        //Ported from Sylvester.js
        Vector.prototype = {
            custom: true,
            // Returns element i of the vector
            e: function(i) {
                return (i < 1 || i > this.elements.length) ? null : this.elements[i-1];
            },
            
            set: function(i, val) {
                this.elements[i] = new Symbol(val);
            },
            
            // Returns the number of elements the vector has
            dimensions: function() {
                return this.elements.length;
            },

            // Returns the modulus ('length') of the vector
            modulus: function() {
                return block('SAFE', function() {
                    return _.pow((this.dot(this.clone())), new Symbol(0.5));
                }, undefined, this);
            },

            // Returns true iff the vector is equal to the argument
            eql: function(vector) {
                var n = this.elements.length;
                var V = vector.elements || vector;
                if (n !== V.length) { return false; }
                do {
                    if (Math.abs(_.subtract(this.elements[n-1],V[n-1]).valueOf()) > PRECISION) { return false; }
                } while (--n);
                return true;
            },

            // Returns a clone of the vector
            clone: function() {
                var V = new Vector(),
                    l = this.elements.length;
                for(var i=0; i<l; i++) {
                    //Rule: all items within the vector must have a clone method.
                    V.elements.push(this.elements[i].clone());
                }
                
                return V;
            },

            // Maps the vector to another vector according to the given function
            map: function(fn) {
                var elements = [];
                this.each(function(x, i) {
                    elements.push(fn(x, i));
                });
                return new Vector(elements);
            },

            // Calls the iterator for each element of the vector in turn
            each: function(fn) { 
                var n = this.elements.length, k=n, i;
                do { 
                    i = k-n;
                    fn(this.elements[i], i+1);
                } while (--n);
            },

            // Returns a new vector created by normalizing the receiver
            toUnitVector: function() {
                return block('SAFE', function() {
                    var r = this.modulus();
                    if (r.valueOf() === 0) { return this.clone(); }
                    return this.map(function(x) { return _.divide(x, r); });
                }, undefined, this);    
            },

            // Returns the angle between the vector and the argument (also a vector)
            angleFrom: function(vector) {
                return block('SAFE', function() {
                    var V = vector.elements || vector;
                    var n = this.elements.length;
                    if (n !== V.length) { return null; }
                    var dot = new Symbol(0), mod1 = new Symbol(0), mod2 = new Symbol(0);
                    // Work things out in parallel to save time
                    this.each(function(x, i) {
                        dot = _.add(dot, _.multiply(x, V[i-1]));
                        mod1 = _.add(mod1, _.multiply(x, x));//will not conflict in safe block
                        mod2 = _.add(mod2, _.multiply(V[i-1], V[i-1]));//will not conflict in safe block
                    });
                    mod1 = _.pow(mod1, new Symbol(0.5)); mod2 = _.pow(mod2, new Symbol(0.5));
                    var product = _.multiply(mod1,mod2);
                    if(product.valueOf() === 0) { return null; }
                    var theta = _.divide(dot, product);
                    var theta_val = theta.valueOf();
                    if(theta_val < -1) { theta = -1; }
                    if (theta_val > 1) { theta = 1; }
                    return new Symbol(Math.acos(theta));
                }, undefined, this);
            },

            // Returns true iff the vector is parallel to the argument
            isParallelTo: function(vector) {
              var angle = this.angleFrom(vector).valueOf();
              return (angle === null) ? null : (angle <= PRECISION);
            },

            // Returns true iff the vector is antiparallel to the argument
            isAntiparallelTo: function(vector) {
              var angle = this.angleFrom(vector).valueOf();
              return (angle === null) ? null : (Math.abs(angle - Math.PI) <= Sylvester.precision);
            },

            // Returns true iff the vector is perpendicular to the argument
            isPerpendicularTo: function(vector) {
              var dot = this.dot(vector);
              return (dot === null) ? null : (Math.abs(dot) <= Sylvester.precision);
            },

            // Returns the result of adding the argument to the vector
            add: function(vector) {
                return block('SAFE', function(){
                    var V = vector.elements || vector;
                    if (this.elements.length !== V.length) { return null; }
                    return this.map(function(x, i) { return _.add(x, V[i-1]); });
                }, undefined, this);
            },

            // Returns the result of subtracting the argument from the vector
            subtract: function(vector) { 
                return block('SAFE', function(){
                    var V = vector.elements || vector;
                    if (this.elements.length !== V.length) { return null; }
                    return this.map(function(x, i) { return _.subtract(x, V[i-1]); });
                }, undefined, this);
            },

            // Returns the result of multiplying the elements of the vector by the argument
            multiply: function(k) {
                return this.map(function(x) { return x.clone()*k.clone(); });
            },

            x: function(k) { return this.multiply(k); },

            // Returns the scalar product of the vector with the argument
            // Both vectors must have equal dimensionality
            dot: function(vector) {
                return block('SAFE', function() {
                    var V = vector.elements || vector;
                    var product = new Symbol(0), n = this.elements.length;
                    if (n !== V.length) { return null; }
                    do { product = _.add(product, _.multiply(this.elements[n-1], V[n-1])); } while (--n);
                    return product;
                }, undefined, this);  
            },

            // Returns the vector product of the vector with the argument
            // Both vectors must have dimensionality 3
            cross: function(vector) {
                var B = vector.elements || vector;
                if(this.elements.length !== 3 || B.length !== 3) { return null; }
                var A = this.elements;
                return block('SAFE', function() {
                    return new Vector([
                        _.subtract(_.multiply(A[1], B[2]), _.multiply(A[2], B[1])),
                        _.subtract(_.multiply(A[2], B[0]), _.multiply(A[0], B[2])),
                        _.subtract(_.multiply(A[0], B[1]), _.multiply(A[1], B[0]))
                    ]);
                }, undefined, this);  
            },

            // Returns the (absolute) largest element of the vector
            max: function() {
                var m = 0, n = this.elements.length, k = n, i;
                do { i = k - n;
                    if(Math.abs(this.elements[i].valueOf()) > Math.abs(m.valueOf())) { m = this.elements[i]; }
                } while (--n);
                return m;
            },

            // Returns the index of the first match found
            indexOf: function(x) {
                var index = null, n = this.elements.length, k = n, i;
                do { 
                    i = k-n;
                    if(index === null && this.elements[i].valueOf() === x.valueOf()) {
                        index = i+1;
                    }
                } while (--n);
                return index;
            },
            text: function(x) {
                return text(this);
            },
            toString: function() {
                return this.text();
            },
            latex: function(option) {
                var tex = [];
                for(var i=0;i<this.elements.length;i++) {
                    tex.push(LaTeX.latex.call(LaTeX, this.elements[i], option));
                }
                return '['+tex.join(', ')+']';
            }
        };
        
        function Matrix() {
            var m = arguments,
                l = m.length, i, el = [];
            if(isMatrix(m)) { //if it's a matrix then make a clone
                for(i=0; i<l; i++) {
                    el.push(m[i].slice(0));
                }
            }
            else {
                var row, lw, rl;
                for(i=0; i<l; i++) {
                    row = m[i];
                    if(isVector(row)) row = row.elements;
                    if(!isArray(row)) row = [row];
                    rl = row.length;
                    if(lw && lw !== rl) err('Unable to create Matrix. Row dimensions do not match!');
                    el.push(row);
                    lw = rl;
                }
            }
            this.elements = el;
        }
        
        Matrix.identity = function(n) {
            var m = new Matrix();
            for(var i=0; i<n; i++) {
                m.elements.push([]);
                for(var j=0; j<n; j++) {
                    m.set(i, j, i === j ? new Symbol(1) : new Symbol(0));
                }
            }
            return m;
        };

        Matrix.fromArray = function(arr) {
            function F(args) {
                return Matrix.apply(this, args);
            }
            F.prototype = Matrix.prototype;

            return new F(arr);
        };
        
        Matrix.zeroMatrix = function(rows, cols) {
            var m = new Matrix();
            for(var i=0; i<rows; i++) {
                m.elements.push(Vector.arrayPrefill(cols, new Symbol(0)));
            }
            return m;
        };
        
        Matrix.prototype = {
            //needs be true to let the parser know not to try to cast it to a symbol
            custom: true, 
            get: function(row, column) {
                if(!this.elements[row])
                    return undefined;
                return this.elements[row][column];
            },
            set: function(row, column, value) { 
                if(!this.elements[row]) 
                    this.elements[row] = [];
                this.elements[row][column] = isSymbol(value) ? value : new Symbol(value);
            },
            cols: function() {
                return this.elements[0].length;
            },
            rows: function() {
                return this.elements.length;
            },
            row: function(n) {
                if(!n || n > this.cols()) return [];
                return this.elements[n-1];
            },
            col: function(n) {
                var nr = this.rows(),
                    col = []; 
                if(n > this.cols() || !n) return col;
                for(var i=0; i<nr; i++) {
                    col.push(this.elements[i][n-1]);
                }
                return col;
            },
            eachElement: function(fn) {
                var nr = this.rows(),
                    nc = this.cols(), i, j;
                for(i=0; i<nr; i++) {
                    for(j=0; j<nc; j++) {
                        this.elements[i][j] = fn.call(this, this.elements[i][j], i, j);
                    }
                }
            },
            //ported from Sylvester.js
            determinant: function() {
                if (!this.isSquare()) { return null; }
                var M = this.toRightTriangular();
                var det = M.elements[0][0], n = M.elements.length-1, k = n, i;
                do { 
                    i = k-n+1;
                    det = _.multiply(det,M.elements[i][i]);
                } while (--n);
                return det;
            },
            isSquare: function() {
                return this.elements.length === this.elements[0].length;
            },
            isSingular: function() {
                return this.isSquare() && this.determinant() === 0;
            },
            augment: function(m) {
                var r = this.rows(), rr = m.rows();
                if(r !== rr) err("Cannot augment matrix. Rows don't match.");
                for(var i=0; i<r; i++) {
                    this.elements[i] = this.elements[i].concat(m.elements[i]);
                }
                
                return this;
            },
            clone: function() {
                var r = this.rows(), c = this.cols(),
                    m = new Matrix();
                for(var i=0; i<r; i++) {
                    m.elements[i] = [];
                    for(var j=0; j<c; j++) { 
                        var symbol = this.elements[i][j]; 
                        m.elements[i][j] = isSymbol(symbol) ? symbol.clone() : symbol;
                    }
                }
                return m;
            },
            //ported from Sylvester.js
            invert: function() {
                if(!this.isSquare()) err('Matrix is not square!');
                return block('SAFE', function() {
                    var ni = this.elements.length, ki = ni, i, j;
                    var imatrix = Matrix.identity(ni);
                    var M = this.augment(imatrix).toRightTriangular(); 
                    var np, kp = M.elements[0].length, p, els, divisor;
                    var inverse_elements = [], new_element;
                    // Matrix is non-singular so there will be no zeros on the diagonal
                    // Cycle through rows from last to first
                    do { 
                        i = ni-1;
                        // First, normalise diagonal elements to 1
                        els = []; np = kp;
                        inverse_elements[i] = [];
                        divisor = M.elements[i][i];
                        do { 
                            p = kp - np;
                            new_element = _.divide(M.elements[i][p], divisor.clone());
                            els.push(new_element);
                            // Shuffle of the current row of the right hand side into the results
                            // array as it will not be modified by later runs through this loop
                            if (p >= ki) { inverse_elements[i].push(new_element); }
                        } while (--np);
                        M.elements[i] = els;
                        // Then, subtract this row from those above it to
                        // give the identity matrix on the left hand side
                        for (j=0; j<i; j++) {
                          els = []; np = kp;
                          do { p = kp - np; 
                            els.push(_.subtract(M.elements[j][p].clone(),_.multiply(M.elements[i][p].clone(), M.elements[j][i].clone())));
                          } while (--np);
                          M.elements[j] = els;
                        }
                    } while (--ni);
                    return Matrix.fromArray(inverse_elements);
                }, undefined, this);
            },
            //ported from Sylvester.js
            toRightTriangular: function() {
                return block('SAFE', function(){
                    var M = this.clone(), els, fel, nel, 
                        n = this.elements.length, k = n, i, np, kp = this.elements[0].length, p;
                    do { 
                        i = k-n;
                        fel = M.elements[i][i]; 
                        if(fel.valueOf() === 0) {
                            for(var j=i+1; j<k; j++) {
                            nel = M.elements[j][i];
                            if (nel && nel.valueOf() !== 0) {
                                els = []; np = kp;
                                do { 
                                    p = kp-np; 
                                    els.push(_.add(M.elements[i][p].clone(), M.elements[j][p].clone()));
                                } while (--np);
                                M.elements[i] = els;
                                break;
                            }
                          }
                        }
                        var fel = M.elements[i][i]; 
                        if(fel.valueOf() !== 0) {
                            for (j=i+1; j<k; j++) { 
                                var multiplier = _.divide(M.elements[j][i].clone(),M.elements[i][i].clone()); 
                                els = []; np = kp;
                                do { p = kp - np;
                                    // Elements with column numbers up to an including the number
                                    // of the row that we're subtracting can safely be set straight to
                                    // zero, since that's the point of this routine and it avoids having
                                    // to loop over and correct rounding errors later
                                    els.push(p <= i ? new Symbol(0) : 
                                            _.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), multiplier.clone())));
                                } while (--np);
                                M.elements[j] = els;
                            }
                        }
                    } while (--n);

                    return M;  
                }, undefined, this);     
            },
            transpose: function() {
                var rows = this.elements.length, cols = this.elements[0].length;
                var M = new Matrix(), ni = cols, i, nj, j;
                
                do { 
                    i = cols - ni;
                    M.elements[i] = [];
                    nj = rows;
                    do { j = rows - nj;
                        M.elements[i][j] = this.elements[j][i].clone();
                    } while (--nj);
                } while (--ni);
                return M;
            },
            // Returns true if the matrix can multiply the argument from the left
            canMultiplyFromLeft: function(matrix) {
              var l = isMatrix(matrix) ? matrix.elements.length : matrix.length;
              // this.columns should equal matrix.rows
              return (this.elements[0].length === l);
            },
            sameSize: function(matrix) {
                return this.rows() === matrix.rows() && this.cols() === matrix.cols();
            },
            multiply: function(matrix) {    
                return block('SAFE', function(){
                    var M = matrix.elements || matrix;
                    if (!this.canMultiplyFromLeft(M)) { 
                        if(this.sameSize(matrix)) {
                            var MM = new Matrix();
                            var rows = this.rows();
                            for(var i=0; i<rows; i++) {
                                var e = _.multiply(new Vector(this.elements[i]), new Vector(matrix.elements[i]));
                                MM.elements[i] = e.elements;
                            }
                            return MM;
                        }
                        return null; 
                    }
                    var ni = this.elements.length, ki = ni, i, nj, kj = M[0].length, j;
                    var cols = this.elements[0].length, elements = [], sum, nc, c;
                    do { 
                        i = ki-ni;
                        elements[i] = [];
                        nj = kj;
                        do { 
                            j = kj - nj;
                            sum = new Symbol(0);
                            nc = cols;
                            do { 
                                c = cols-nc;
                                sum = _.add(sum, _.multiply(this.elements[i][c], M[c][j])) ;
                            } while (--nc);
                          elements[i][j] = sum;
                        } while (--nj);
                    } while (--ni);
                    return Matrix.fromArray(elements);
                }, undefined, this);
            },
            add: function(matrix) {
                var M = new Matrix();
                if(this.sameSize(matrix)) {
                    this.eachElement(function(e, i, j) {
                        M.set(i, j, _.add(e.clone(), matrix.elements[i][j]));
                    });
                }
                return M;
            },
            subtract: function(matrix) {
                var M = new Matrix();
                if(this.sameSize(matrix)) {
                    this.eachElement(function(e, i, j) {
                        M.set(i, j, _.subtract(e.clone(), matrix.elements[i][j]));
                    });
                }
                return M;
            },
            negate: function() {
                this.each(function(e) {
                   return e.negate(); 
                });
                return this;
            },
            toVector: function() {
                if(this.rows () === 1 || this.cols() === 1) {
                    var v = new Vector();
                    v.elements = this.elements;
                    return v;
                }
                return this;
            },
            toString: function(newline) {
                var l = this.rows(),
                    s = [];
                newline = newline === undefined ? '\n' : newline;
                for(var i=0; i<l; i++) {
                    s.push('['+this.elements[i].map(function(x) {
                        return x !== undefined ? x.toString() : '';
                    }).join(',')+']');
                }
                return 'matrix'+inBrackets(s.join(','));
            },
            text: function() {
                return 'matrix('+this.toString('')+')';
            },
            latex: function(option) {
                var cols = this.cols(), elements = this.elements; 
                return format('\\begin{vmatrix}{0}\\end{vmatrix}', function() {
                    var tex = []; 
                    for(var row in elements) {
                        var row_tex = [];
                        for(var i=0; i<cols; i++) {
                            row_tex.push(LaTeX.latex.call(LaTeX, elements[row][i], option));
                        }
                        tex.push(row_tex.join(' & '));
                    }
                    return tex.join(' \\cr ');
                });
            }
        };
        
        //aliases
        Matrix.prototype.each = Matrix.prototype.eachElement;
        
        /* END CLASSES */

        /* FINALIZE */
        var finalize = function() {
            reserveNames(_.constants);
            reserveNames(_.functions);
            //generatePrimes(Settings.init_primes);//generate the firs 100 primes
        };
        
        var build = Utils.build = function(symbol, arg_array) { 
            symbol = block('PARSE2NUMBER', function() {
                return _.parse(symbol);
            }, true);
            var args = variables(symbol);
            var supplements = [];
            var ftext = function(symbol, xports) { 
                xports = xports || [];
                var c = [],
                    group = symbol.group,
                    prefix = '';

                var ftext_complex = function(group) {
                    var d = group === CB ? '*' : '+',
                        cc = [];
                    
                    for(var x in symbol.symbols) {
                        var sym = symbol.symbols[x],
                            ft = ftext(sym, xports)[0];
                        //wrap it in brackets if it's group PL or CP
                        if(sym.isComposite())
                            ft = inBrackets(ft);
                        cc.push(ft);
                    }
                    var retval = cc.join(d);
                    retval = retval && !symbol.multiplier.equals(1) ? inBrackets(retval) : retval;
                    return retval;
                },

                ftext_function = function(bn) { 
                    var retval;
                    if(bn in Math) retval = 'Math.'+bn;
                    else {
                        if(supplements.indexOf(bn) === -1) { //make sure you're not adding the function twice
                            //Math2 functions aren't part of the standard javascript
                            //Math library and must be exported.
                            xports.push('var '+bn+' = '+ Math2[bn].toString()+'; ');
                            supplements.push(bn);
                        }
                        retval = bn;
                    }
                    retval = retval+inBrackets(symbol.args.map(function(x) {
                        return ftext(x, xports)[0];
                    }).join(','));

                    return retval;
                };

                //the multiplier
                if(group === N) 
                    c.push(symbol.multiplier.toDecimal());
                else if(symbol.multiplier.equals(-1)) 
                    prefix = '-';
                else if(!symbol.multiplier.equals(1)) 
                    c.push(symbol.multiplier.toDecimal());
                //the value
                var value;
                
                if(group === S || group === P) value = symbol.value;
                else if(group === FN) { 
                    value = ftext_function(symbol.fname);
                }
                else if(group === EX) {
                    var pg = symbol.previousGroup;
                    if(pg === N || pg === S) value = symbol.value;
                    else if(pg === FN) value = ftext_function(symbol.fname);
                    else value = ftext_complex(symbol.previousGroup);
                }
                else {
                    value = ftext_complex(symbol.group);
                }     

                if(symbol.group !== N && !symbol.power.equals(1)) {
                    var pow = ftext(_.parse(symbol.power));
                    xports.push(pow[1]);
                    value = 'Math.pow'+inBrackets(value+','+pow[0]);
                }

                if(value) c.push(prefix+value);

                return [c.join('*'), xports.join('').replace(/\n+\s+/g, ' ')];
            };
            if(arg_array) { 
                for(var i=0; i<args.length; i++) {
                    var arg = args[i];
                    if(arg_array.indexOf(arg) === -1) err(arg+' not found in argument array');
                }
                args = arg_array;
            }
            var f_array = ftext(symbol);
            return new Function(args, f_array[1]+' return '+f_array[0]+';');
        };
        
        finalize(); //final preparations
        /* END FINALIZE */

        /* BUILD CORE */
        //This contains all the parts of nerdamer and enables nerdamer's internal functions
        //to be used.
        var C = {
            Operator: Operator,
            groups: Groups,
            Symbol: Symbol,
            Expression: Expression,
            Frac: Frac,
            Vector: Vector,
            Matrix: Matrix,
            Parser: Parser,
            Fraction: Fraction,
            Math2: Math2,
            LaTeX: LaTeX,
            Utils: Utils,
            PARSER: _,
            PARENTHESIS: PARENTHESIS, 
            Settings: Settings,
            err: err,
            bigInt: bigInt,
            exceptions: {
                DivisionByZero: DivisionByZero,
                ParseError: ParseError,
                UndefinedError: UndefinedError, 
                MaximumIterationsReached: MaximumIterationsReached
            }
        };
        
        //provide a mechanism for accessing functions directly
        //Not yet complete!!! Some functions will return undefined. This can maybe 
        //just remove the function object at some point when all functions are eventually
        //housed in the global function object.
        C.Utils.importFunctions = function() {
            var o = {};
            for(var x in _.functions)
                o[x] = _.functions[x][0];
            return o;
        };
        //TODO: fix 
        if(!_.error)
            _.error = err;
        /* END BUILD CORE */

        
        /* EXPORTS */
        /**
         * 
         * @param {String} expression the expression to be evaluated
         * @param {Object} subs the object containing the variable values
         * @param {Integer} location a specific location in the equation list to 
         * insert the evaluated expression
         * @param {String} option additional options
         * @returns {Expression} 
         */
        
        var libExports = function(expression, subs, option, location) { 
            //is the user declaring a function?
            var fndec = /^([a-z_][a-z\d\_]*)\(([a-z_,\s]*)\):=(.+)$/gi.exec(expression);
            if(fndec) 
                return nerdamer.setFunction(fndec[1], fndec[2].split(','), fndec[3]);
            //convert any expression passed in to a string
            if(expression instanceof Expression) expression = expression.toString();

            var multi_options = isArray(option),
                expand = 'expand',
                numer = multi_options ? option.indexOf('numer') !== -1 : option === 'numer';
            if((multi_options ? option.indexOf(expand) !== -1 : option === expand)) {
                expression = format('{0}({1})', expand, expression);
            }
            var e = block('PARSE2NUMBER', function(){ 
                return _.parse(expression, subs);
            }, numer || Settings.PARSE2NUMBER);
            
            if(location) { EXPRESSIONS[location-1] = e; }
            else { EXPRESSIONS.push(e);}
            
            return new Expression(e);
        };
        
        libExports.rpn = function(expression) {
            return _.parse(expression, null, true);
        };
        
        libExports.convertToLaTeX = function(e) {
            return _.toTeX(e);
        };
        
        /**
         * Get the version of nerdamer or a loaded add-on
         * @param {String} add_on - The add-on being checked
         * @returns {String} returns the version of nerdamer
         */
        libExports.version = function(add_on) {
            if(add_on) {
                try {
                    return C[add_on].version;
                }
                catch(e) {
                    return "No module named "+add_on+" found!";
                }
            }
            return version;
        };
        
        /**
         * Get nerdamer generated warnings
         * @returns {String[]}
         */
        libExports.getWarnings = function() {
            return WARNINGS;
        };
        
        /**
         * 
         * @param {String} constant The name of the constant to be set
         * @param {mixed} value The value of the constant 
         * @returns {Object} Returns the nerdamer object
         */
        libExports.setConstant = function(constant, value) {
            validateName(constant); 
            if(!isReserved(constant)) {
                //fix for issue #127
                if(value === 'delete' || value === '') {
                    delete _.constants[constant];
                }
                else {
                    if(isNaN(value)) throw new Error('Constant must be a number!');
                    _.constants[constant] =  value;
                }
            }    
            return this;
        };
        
        /**
         * Returns the value of a previously set constant
         * @param {type} constant
         * @returns {String}
         */
        libExports.getConstant = function(constant) {
            return String(_.constant[constant]);
        };
        
        /**
         * 
         * @param {String} name The name of the function
         * @param {Array} params_array A list containing the parameter name of the functions
         * @param {String} body The body of the function
         * @returns {Boolean} returns true if succeeded and falls on fail
         * @example nerdamer.setFunction('f',['x'], 'x^2+2');
         */
        libExports.setFunction = function(name, params_array, body) {
            validateName(name);
            if(!isReserved(name)) {
                params_array = params_array || variables(_.parse(body));
                _.functions[name] = [_.mapped_function, params_array.length, {
                        name: name,
                        params: params_array,
                        body: body
                }];
                return true;
            }
            return false;
        };
        
        /**
         * 
         * @returns {C} Exports the nerdamer core functions and objects
         */
        libExports.getCore = function() {
            return C;
        };

        libExports.getExpression = libExports.getEquation = Expression.getExpression;
        
        /**
         * 
         * @param {Boolean} asArray The returned names are returned as an array if this is set to true;
         * @returns {String|Array}
         */
        libExports.reserved = function(asArray) {
            if(asArray){ return RESERVED; }
            return RESERVED.join(', ');
        };
        
        /**
         * 
         * @param {Integer} equation_number the number of the equation to clear. 
         * If 'all' is supplied then all equations are cleared
         * @param {Boolean} keep_EXPRESSIONS_fixed use true if you don't want to keep EXPRESSIONS length fixed
         * @returns {Object} Returns the nerdamer object
         */
        libExports.clear = function( equation_number, keep_EXPRESSIONS_fixed ) { 
            if(equation_number === 'all') { EXPRESSIONS = []; }
            else if(equation_number === 'last') { EXPRESSIONS.pop(); }
            else if(equation_number === 'first') { EXPRESSIONS.shift(); }
            else { 
                var index = !equation_number ? EXPRESSIONS.length : equation_number-1; 
                keep_EXPRESSIONS_fixed === true ? EXPRESSIONS[index] = undefined : remove(EXPRESSIONS, index);
            }   
            return this;
        };
        
        /**
         * Alias for nerdamer.clear('all')
         */
        libExports.flush = function() {
            this.clear('all');
            return this;
        };
        
        /**
         * 
         * @param {Boolean} asObject
         * @param {Boolean} asLaTeX
         * @param {String|String[]} option 
         * @returns {Array}
         */
        libExports.expressions = function( asObject, asLaTeX, option ) {
            var result = asObject ? {} : [];
            for(var i=0; i<EXPRESSIONS.length; i++) {
                var eq = asLaTeX ? LaTeX.latex(EXPRESSIONS[i], option) : text(EXPRESSIONS[i], option);
                asObject ? result[i+1] = eq : result.push(eq);
            }
            return result;
        };
        
        //the method for registering modules
        libExports.register = function(obj) { 
            var core = this.getCore();
            
            if(isArray(obj)) {
                for(var i=0; i<obj.length; i++) {
                    if(obj) this.register(obj[i]);
                }
            }
            else if(obj && Settings.exclude.indexOf(obj.name) === -1) {
                //make sure all the dependencies are available
                if(obj.dependencies) {
                    for(var i=0; i<obj.dependencies.length; i++)
                        if(!core[obj.dependencies[i]]) 
                            throw new Error(format('{0} requires {1} to be loaded!', obj.name, obj.dependencies[i]));
                }
                //if no parent object is provided then the function does not have an address and cannot be called directly
                var parent_obj = obj.parent, 
                    fn = obj.build.call(core); //call constructor to get function
                if(parent_obj) {
                    if(!core[parent_obj]) core[obj.parent] = {};
                    
                    var ref_obj = parent_obj === 'nerdamer' ? this : core[parent_obj];
                    //attach the function to the core
                    ref_obj[obj.name] = fn;
                }
                if(obj.visible) _.functions[obj.name] = [fn, obj.numargs]; //make the function available
                
            } 
        };
        
        /**
         * @param {String} name variable name
         * @returns {boolean} validates if the profided string is a valid variable name
         */
        libExports.validateName = validateName;
        
        /**
         * @param {String} varname variable name
         * @returns {boolean} validates if the profided string is a valid variable name
         */
        libExports.validVarName = function(varname) {
            try {
                validateName(varname);
                return RESERVED.indexOf(varname) === -1;
            }
            catch(e){ return false; }
        };
        
        /**
         * 
         * @returns {Array} Array of functions currently supported by nerdamer
         */
        libExports.supported = function() {
            return keys(_.functions);
        };
        
        /**
         * 
         * @returns {Number} The number equations/expressions currently loaded
         */
        libExports.numEquations = libExports.numExpressions = function() {
            return EXPRESSIONS.length;
        };
        /* END EXPORTS */
        
        /**
         * 
         * @param {String} v variable to be set
         * @param {String} val value of variable. This can be a variable expression or number
         * @returns {Object} Returns the nerdamer object
         */
        libExports.setVar = function(v, val) {
            validateName(v);
            //check if it's not already a constant
            if(v in _.constants)
                err('Cannot set value for constant '+v);
            if(val === 'delete' || val === '') 
                delete VARS[v];
            else {
                VARS[v] = isSymbol(val) ? val : _.parse(val);
            }
            return this;
        };
        
        /**
         * Returns the value of a set variable
         * @param {type} v
         * @returns {varies}
         */
        libExports.getVar = function(v) {
            return VARS[v];
        };
        /**
         * Clear the variables from the VARS object
         * @returns {Object} Returns the nerdamer object
         */    
        libExports.clearVars = function() {
            VARS = {};
            return this;
        };
        
        /**
         * 
         * @param {Function} loader
         * @returns {nerdamer}
         */
        libExports.load = function(loader) {
            loader.call(this);
            return this;
        };
        
        /**
         * @param {String} output - output format. Can be 'object' (just returns the VARS object), 'text' or 'latex'. Default: 'text'
         * @param {String|String[]} option
         * @returns {Object} Returns an object with the variables
         */    
        libExports.getVars = function(output, option) {
            output = output || 'text';
            var variables = {};
            if (output === 'object') variables = VARS;
            else {
                for (var v in VARS) {
                    if (output === 'latex') {
                        variables[v] = VARS[v].latex(option);
                    } else if (output === 'text') {
                        variables[v] = VARS[v].text(option);
                    }
                }
            }
            return variables;
        };
        
        /**
         * Set the value of a setting
         * @param {String} setting The setting to be changed
         * @param {boolean} value 
         */
        libExports.set = function(setting, value) {
            //current options:
            //PARSE2NUMBER, suppress_errors
            if(typeof setting === 'object')
                for(var x in setting) { 
                    libExports.set(x, setting[x]);
                }
                    
            var disallowed = ['SAFE'];
            if(disallowed.indexOf(setting) !== -1) err('Cannot modify setting: '+setting);
            Settings[setting] = value;
        };
        
        /**
         * Get the value of a setting
         * @param {type} setting
         * @returns {undefined}
         */
        libExports.get = function(setting) {
            return Settings[setting];
        };
        
        /**
         * This functions makes internal functions available externally
         * @param {bool} override Override the functions when calling api if it exists 
         */
        libExports.api = function(override) {
            //Map internal functions to external ones
            var linker = function(fname) {
                return function() {
                    var args = [].slice.call(arguments);
                    for(var i=0; i<args.length; i++)
                        args[i] = _.parse(args[i]);
                    return new Expression(block('PARSE2NUMBER', function() {
                        return _.callfunction(fname, args);
                    }));
                };
            };
            //perform the mapping
            for(var x in _.functions) 
                if(!(x in libExports) || override)
                    libExports[x] = linker(x);
        };
        
        libExports.replaceFunction = function(name, fn, num_args) {
            var existing = _.functions[name];
            var new_num_args = typeof num_args === 'undefined' ? existing[1]: num_args;
            _.functions[name] = [fn.call(undefined, existing[0], C), new_num_args];
        };
        
        //helper function to set and operator
        //Operator('^', 'pow', 6, false, false),
        //function Operator(val, fn, precedence, left_assoc, is_prefix, is_postfix, operation) 
        libExports.setOperator = function(symbol, name, precendence, left_assoc, is_prefix, is_postfix, fn) {
            _.operators[symbol] = new Operator(symbol, name, precendence, left_assoc, is_prefix, is_postfix, fn);
            _.name = name; //make the parser aware of this  new function
            CUSTOM_OPERATORS[name] = symbol; //let nerdamer know how to display it
        };
        
        libExports.getOperator = function(symbol) {
            return _.operators[symbol];
        };
        
        libExports.api();

        return libExports; //Done
    })({
        //https://github.com/peterolson/BigInteger.js
        bigInt: (function(){
            var bigInt = function(undefined){var BASE=1e7,LOG_BASE=7,MAX_INT=9007199254740992,MAX_INT_ARR=smallToArray(MAX_INT),LOG_MAX_INT=Math.log(MAX_INT);function Integer(v,radix){if(typeof v==="undefined")return Integer[0];if(typeof radix!=="undefined")return +radix===10?parseValue(v):parseBase(v,radix);return parseValue(v)}function BigInteger(value,sign){this.value=value;this.sign=sign;this.isSmall=false;}BigInteger.prototype=Object.create(Integer.prototype);function SmallInteger(value){this.value=value;this.sign=value<0;this.isSmall=true;}SmallInteger.prototype=Object.create(Integer.prototype);function isPrecise(n){return -MAX_INT<n&&n<MAX_INT}function smallToArray(n){if(n<1e7)return [n];if(n<1e14)return [n%1e7,Math.floor(n/1e7)];return [n%1e7,Math.floor(n/1e7)%1e7,Math.floor(n/1e14)]}function arrayToSmall(arr){trim(arr);var length=arr.length;if(length<4&&compareAbs(arr,MAX_INT_ARR)<0){switch(length){case 0:return 0;case 1:return arr[0];case 2:return arr[0]+arr[1]*BASE;default:return arr[0]+(arr[1]+arr[2]*BASE)*BASE}}return arr}function trim(v){var i=v.length;while(v[--i]===0);v.length=i+1;}function createArray(length){var x=new Array(length);var i=-1;while(++i<length){x[i]=0;}return x}function truncate(n){if(n>0)return Math.floor(n);return Math.ceil(n)}function add(a,b){var l_a=a.length,l_b=b.length,r=new Array(l_a),carry=0,base=BASE,sum,i;for(i=0;i<l_b;i++){sum=a[i]+b[i]+carry;carry=sum>=base?1:0;r[i]=sum-carry*base;}while(i<l_a){sum=a[i]+carry;carry=sum===base?1:0;r[i++]=sum-carry*base;}if(carry>0)r.push(carry);return r}function addAny(a,b){if(a.length>=b.length)return add(a,b);return add(b,a)}function addSmall(a,carry){var l=a.length,r=new Array(l),base=BASE,sum,i;for(i=0;i<l;i++){sum=a[i]-base+carry;carry=Math.floor(sum/base);r[i]=sum-carry*base;carry+=1;}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base);}return r}BigInteger.prototype.add=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.subtract(n.negate())}var a=this.value,b=n.value;if(n.isSmall){return new BigInteger(addSmall(a,Math.abs(b)),this.sign)}return new BigInteger(addAny(a,b),this.sign)};BigInteger.prototype.plus=BigInteger.prototype.add;SmallInteger.prototype.add=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.subtract(n.negate())}var b=n.value;if(n.isSmall){if(isPrecise(a+b))return new SmallInteger(a+b);b=smallToArray(Math.abs(b));}return new BigInteger(addSmall(b,Math.abs(a)),a<0)};SmallInteger.prototype.plus=SmallInteger.prototype.add;function subtract(a,b){var a_l=a.length,b_l=b.length,r=new Array(a_l),borrow=0,base=BASE,i,difference;for(i=0;i<b_l;i++){difference=a[i]-borrow-b[i];if(difference<0){difference+=base;borrow=1;}else borrow=0;r[i]=difference;}for(i=b_l;i<a_l;i++){difference=a[i]-borrow;if(difference<0)difference+=base;else{r[i++]=difference;break}r[i]=difference;}for(;i<a_l;i++){r[i]=a[i];}trim(r);return r}function subtractAny(a,b,sign){var value;if(compareAbs(a,b)>=0){value=subtract(a,b);}else{value=subtract(b,a);sign=!sign;}value=arrayToSmall(value);if(typeof value==="number"){if(sign)value=-value;return new SmallInteger(value)}return new BigInteger(value,sign)}function subtractSmall(a,b,sign){var l=a.length,r=new Array(l),carry=-b,base=BASE,i,difference;for(i=0;i<l;i++){difference=a[i]+carry;carry=Math.floor(difference/base);difference%=base;r[i]=difference<0?difference+base:difference;}r=arrayToSmall(r);if(typeof r==="number"){if(sign)r=-r;return new SmallInteger(r)}return new BigInteger(r,sign)}BigInteger.prototype.subtract=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.add(n.negate())}var a=this.value,b=n.value;if(n.isSmall)return subtractSmall(a,Math.abs(b),this.sign);return subtractAny(a,b,this.sign)};BigInteger.prototype.minus=BigInteger.prototype.subtract;SmallInteger.prototype.subtract=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.add(n.negate())}var b=n.value;if(n.isSmall){return new SmallInteger(a-b)}return subtractSmall(b,Math.abs(a),a>=0)};SmallInteger.prototype.minus=SmallInteger.prototype.subtract;BigInteger.prototype.negate=function(){return new BigInteger(this.value,!this.sign)};SmallInteger.prototype.negate=function(){var sign=this.sign;var small=new SmallInteger(-this.value);small.sign=!sign;return small};BigInteger.prototype.abs=function(){return new BigInteger(this.value,false)};SmallInteger.prototype.abs=function(){return new SmallInteger(Math.abs(this.value))};function multiplyLong(a,b){var a_l=a.length,b_l=b.length,l=a_l+b_l,r=createArray(l),base=BASE,product,carry,i,a_i,b_j;for(i=0;i<a_l;++i){a_i=a[i];for(var j=0;j<b_l;++j){b_j=b[j];product=a_i*b_j+r[i+j];carry=Math.floor(product/base);r[i+j]=product-carry*base;r[i+j+1]+=carry;}}trim(r);return r}function multiplySmall(a,b){var l=a.length,r=new Array(l),base=BASE,carry=0,product,i;for(i=0;i<l;i++){product=a[i]*b+carry;carry=Math.floor(product/base);r[i]=product-carry*base;}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base);}return r}function shiftLeft(x,n){var r=[];while(n-- >0)r.push(0);return r.concat(x)}function multiplyKaratsuba(x,y){var n=Math.max(x.length,y.length);if(n<=30)return multiplyLong(x,y);n=Math.ceil(n/2);var b=x.slice(n),a=x.slice(0,n),d=y.slice(n),c=y.slice(0,n);var ac=multiplyKaratsuba(a,c),bd=multiplyKaratsuba(b,d),abcd=multiplyKaratsuba(addAny(a,b),addAny(c,d));var product=addAny(addAny(ac,shiftLeft(subtract(subtract(abcd,ac),bd),n)),shiftLeft(bd,2*n));trim(product);return product}function useKaratsuba(l1,l2){return -.012*l1-.012*l2+15e-6*l1*l2>0}BigInteger.prototype.multiply=function(v){var n=parseValue(v),a=this.value,b=n.value,sign=this.sign!==n.sign,abs;if(n.isSmall){if(b===0)return Integer[0];if(b===1)return this;if(b===-1)return this.negate();abs=Math.abs(b);if(abs<BASE){return new BigInteger(multiplySmall(a,abs),sign)}b=smallToArray(abs);}if(useKaratsuba(a.length,b.length))return new BigInteger(multiplyKaratsuba(a,b),sign);return new BigInteger(multiplyLong(a,b),sign)};BigInteger.prototype.times=BigInteger.prototype.multiply;function multiplySmallAndArray(a,b,sign){if(a<BASE){return new BigInteger(multiplySmall(b,a),sign)}return new BigInteger(multiplyLong(b,smallToArray(a)),sign)}SmallInteger.prototype._multiplyBySmall=function(a){if(isPrecise(a.value*this.value)){return new SmallInteger(a.value*this.value)}return multiplySmallAndArray(Math.abs(a.value),smallToArray(Math.abs(this.value)),this.sign!==a.sign)};BigInteger.prototype._multiplyBySmall=function(a){if(a.value===0)return Integer[0];if(a.value===1)return this;if(a.value===-1)return this.negate();return multiplySmallAndArray(Math.abs(a.value),this.value,this.sign!==a.sign)};SmallInteger.prototype.multiply=function(v){return parseValue(v)._multiplyBySmall(this)};SmallInteger.prototype.times=SmallInteger.prototype.multiply;function square(a){var l=a.length,r=createArray(l+l),base=BASE,product,carry,i,a_i,a_j;for(i=0;i<l;i++){a_i=a[i];for(var j=0;j<l;j++){a_j=a[j];product=a_i*a_j+r[i+j];carry=Math.floor(product/base);r[i+j]=product-carry*base;r[i+j+1]+=carry;}}trim(r);return r}BigInteger.prototype.square=function(){return new BigInteger(square(this.value),false)};SmallInteger.prototype.square=function(){var value=this.value*this.value;if(isPrecise(value))return new SmallInteger(value);return new BigInteger(square(smallToArray(Math.abs(this.value))),false)};function divMod1(a,b){var a_l=a.length,b_l=b.length,base=BASE,result=createArray(b.length),divisorMostSignificantDigit=b[b_l-1],lambda=Math.ceil(base/(2*divisorMostSignificantDigit)),remainder=multiplySmall(a,lambda),divisor=multiplySmall(b,lambda),quotientDigit,shift,carry,borrow,i,l,q;if(remainder.length<=a_l)remainder.push(0);divisor.push(0);divisorMostSignificantDigit=divisor[b_l-1];for(shift=a_l-b_l;shift>=0;shift--){quotientDigit=base-1;if(remainder[shift+b_l]!==divisorMostSignificantDigit){quotientDigit=Math.floor((remainder[shift+b_l]*base+remainder[shift+b_l-1])/divisorMostSignificantDigit);}carry=0;borrow=0;l=divisor.length;for(i=0;i<l;i++){carry+=quotientDigit*divisor[i];q=Math.floor(carry/base);borrow+=remainder[shift+i]-(carry-q*base);carry=q;if(borrow<0){remainder[shift+i]=borrow+base;borrow=-1;}else{remainder[shift+i]=borrow;borrow=0;}}while(borrow!==0){quotientDigit-=1;carry=0;for(i=0;i<l;i++){carry+=remainder[shift+i]-base+divisor[i];if(carry<0){remainder[shift+i]=carry+base;carry=0;}else{remainder[shift+i]=carry;carry=1;}}borrow+=carry;}result[shift]=quotientDigit;}remainder=divModSmall(remainder,lambda)[0];return [arrayToSmall(result),arrayToSmall(remainder)]}function divMod2(a,b){var a_l=a.length,b_l=b.length,result=[],part=[],base=BASE,guess,xlen,highx,highy,check;while(a_l){part.unshift(a[--a_l]);trim(part);if(compareAbs(part,b)<0){result.push(0);continue}xlen=part.length;highx=part[xlen-1]*base+part[xlen-2];highy=b[b_l-1]*base+b[b_l-2];if(xlen>b_l){highx=(highx+1)*base;}guess=Math.ceil(highx/highy);do{check=multiplySmall(b,guess);if(compareAbs(check,part)<=0)break;guess--;}while(guess);result.push(guess);part=subtract(part,check);}result.reverse();return [arrayToSmall(result),arrayToSmall(part)]}function divModSmall(value,lambda){var length=value.length,quotient=createArray(length),base=BASE,i,q,remainder,divisor;remainder=0;for(i=length-1;i>=0;--i){divisor=remainder*base+value[i];q=truncate(divisor/lambda);remainder=divisor-q*lambda;quotient[i]=q|0;}return [quotient,remainder|0]}function divModAny(self,v){var value,n=parseValue(v);var a=self.value,b=n.value;var quotient;if(b===0)throw new Error("Cannot divide by zero");if(self.isSmall){if(n.isSmall){return [new SmallInteger(truncate(a/b)),new SmallInteger(a%b)]}return [Integer[0],self]}if(n.isSmall){if(b===1)return [self,Integer[0]];if(b==-1)return [self.negate(),Integer[0]];var abs=Math.abs(b);if(abs<BASE){value=divModSmall(a,abs);quotient=arrayToSmall(value[0]);var remainder=value[1];if(self.sign)remainder=-remainder;if(typeof quotient==="number"){if(self.sign!==n.sign)quotient=-quotient;return [new SmallInteger(quotient),new SmallInteger(remainder)]}return [new BigInteger(quotient,self.sign!==n.sign),new SmallInteger(remainder)]}b=smallToArray(abs);}var comparison=compareAbs(a,b);if(comparison===-1)return [Integer[0],self];if(comparison===0)return [Integer[self.sign===n.sign?1:-1],Integer[0]];if(a.length+b.length<=200)value=divMod1(a,b);else value=divMod2(a,b);quotient=value[0];var qSign=self.sign!==n.sign,mod=value[1],mSign=self.sign;if(typeof quotient==="number"){if(qSign)quotient=-quotient;quotient=new SmallInteger(quotient);}else quotient=new BigInteger(quotient,qSign);if(typeof mod==="number"){if(mSign)mod=-mod;mod=new SmallInteger(mod);}else mod=new BigInteger(mod,mSign);return [quotient,mod]}BigInteger.prototype.divmod=function(v){var result=divModAny(this,v);return {quotient:result[0],remainder:result[1]}};SmallInteger.prototype.divmod=BigInteger.prototype.divmod;BigInteger.prototype.divide=function(v){return divModAny(this,v)[0]};SmallInteger.prototype.over=SmallInteger.prototype.divide=BigInteger.prototype.over=BigInteger.prototype.divide;BigInteger.prototype.mod=function(v){return divModAny(this,v)[1]};SmallInteger.prototype.remainder=SmallInteger.prototype.mod=BigInteger.prototype.remainder=BigInteger.prototype.mod;BigInteger.prototype.pow=function(v){var n=parseValue(v),a=this.value,b=n.value,value,x,y;if(b===0)return Integer[1];if(a===0)return Integer[0];if(a===1)return Integer[1];if(a===-1)return n.isEven()?Integer[1]:Integer[-1];if(n.sign){return Integer[0]}if(!n.isSmall)throw new Error("The exponent "+n.toString()+" is too large.");if(this.isSmall){if(isPrecise(value=Math.pow(a,b)))return new SmallInteger(truncate(value))}x=this;y=Integer[1];while(true){if(b&1===1){y=y.times(x);--b;}if(b===0)break;b/=2;x=x.square();}return y};SmallInteger.prototype.pow=BigInteger.prototype.pow;BigInteger.prototype.modPow=function(exp,mod){exp=parseValue(exp);mod=parseValue(mod);if(mod.isZero())throw new Error("Cannot take modPow with modulus 0");var r=Integer[1],base=this.mod(mod);while(exp.isPositive()){if(base.isZero())return Integer[0];if(exp.isOdd())r=r.multiply(base).mod(mod);exp=exp.divide(2);base=base.square().mod(mod);}return r};SmallInteger.prototype.modPow=BigInteger.prototype.modPow;function compareAbs(a,b){if(a.length!==b.length){return a.length>b.length?1:-1}for(var i=a.length-1;i>=0;i--){if(a[i]!==b[i])return a[i]>b[i]?1:-1}return 0}BigInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall)return 1;return compareAbs(a,b)};SmallInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=Math.abs(this.value),b=n.value;if(n.isSmall){b=Math.abs(b);return a===b?0:a>b?1:-1}return -1};BigInteger.prototype.compare=function(v){if(v===Infinity){return -1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(this.sign!==n.sign){return n.sign?1:-1}if(n.isSmall){return this.sign?-1:1}return compareAbs(a,b)*(this.sign?-1:1)};BigInteger.prototype.compareTo=BigInteger.prototype.compare;SmallInteger.prototype.compare=function(v){if(v===Infinity){return -1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall){return a==b?0:a>b?1:-1}if(a<0!==n.sign){return a<0?-1:1}return a<0?1:-1};SmallInteger.prototype.compareTo=SmallInteger.prototype.compare;BigInteger.prototype.equals=function(v){return this.compare(v)===0};SmallInteger.prototype.eq=SmallInteger.prototype.equals=BigInteger.prototype.eq=BigInteger.prototype.equals;BigInteger.prototype.notEquals=function(v){return this.compare(v)!==0};SmallInteger.prototype.neq=SmallInteger.prototype.notEquals=BigInteger.prototype.neq=BigInteger.prototype.notEquals;BigInteger.prototype.greater=function(v){return this.compare(v)>0};SmallInteger.prototype.gt=SmallInteger.prototype.greater=BigInteger.prototype.gt=BigInteger.prototype.greater;BigInteger.prototype.lesser=function(v){return this.compare(v)<0};SmallInteger.prototype.lt=SmallInteger.prototype.lesser=BigInteger.prototype.lt=BigInteger.prototype.lesser;BigInteger.prototype.greaterOrEquals=function(v){return this.compare(v)>=0};SmallInteger.prototype.geq=SmallInteger.prototype.greaterOrEquals=BigInteger.prototype.geq=BigInteger.prototype.greaterOrEquals;BigInteger.prototype.lesserOrEquals=function(v){return this.compare(v)<=0};SmallInteger.prototype.leq=SmallInteger.prototype.lesserOrEquals=BigInteger.prototype.leq=BigInteger.prototype.lesserOrEquals;BigInteger.prototype.isEven=function(){return (this.value[0]&1)===0};SmallInteger.prototype.isEven=function(){return (this.value&1)===0};BigInteger.prototype.isOdd=function(){return (this.value[0]&1)===1};SmallInteger.prototype.isOdd=function(){return (this.value&1)===1};BigInteger.prototype.isPositive=function(){return !this.sign};SmallInteger.prototype.isPositive=function(){return this.value>0};BigInteger.prototype.isNegative=function(){return this.sign};SmallInteger.prototype.isNegative=function(){return this.value<0};BigInteger.prototype.isUnit=function(){return false};SmallInteger.prototype.isUnit=function(){return Math.abs(this.value)===1};BigInteger.prototype.isZero=function(){return false};SmallInteger.prototype.isZero=function(){return this.value===0};BigInteger.prototype.isDivisibleBy=function(v){var n=parseValue(v);var value=n.value;if(value===0)return false;if(value===1)return true;if(value===2)return this.isEven();return this.mod(n).equals(Integer[0])};SmallInteger.prototype.isDivisibleBy=BigInteger.prototype.isDivisibleBy;function isBasicPrime(v){var n=v.abs();if(n.isUnit())return false;if(n.equals(2)||n.equals(3)||n.equals(5))return true;if(n.isEven()||n.isDivisibleBy(3)||n.isDivisibleBy(5))return false;if(n.lesser(25))return true}BigInteger.prototype.isPrime=function(){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs(),nPrev=n.prev();var a=[2,3,5,7,11,13,17,19],b=nPrev,d,t,i,x;while(b.isEven())b=b.divide(2);for(i=0;i<a.length;i++){x=bigInt(a[i]).modPow(b,n);if(x.equals(Integer[1])||x.equals(nPrev))continue;for(t=true,d=b;t&&d.lesser(nPrev);d=d.multiply(2)){x=x.square().mod(n);if(x.equals(nPrev))t=false;}if(t)return false}return true};SmallInteger.prototype.isPrime=BigInteger.prototype.isPrime;BigInteger.prototype.isProbablePrime=function(iterations){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var t=iterations===undefined?5:iterations;for(var i=0;i<t;i++){var a=bigInt.randBetween(2,n.minus(2));if(!a.modPow(n.prev(),n).isUnit())return false}return true};SmallInteger.prototype.isProbablePrime=BigInteger.prototype.isProbablePrime;BigInteger.prototype.modInv=function(n){var t=bigInt.zero,newT=bigInt.one,r=parseValue(n),newR=this.abs(),q,lastT,lastR;while(!newR.equals(bigInt.zero)){q=r.divide(newR);lastT=t;lastR=r;t=newT;r=newR;newT=lastT.subtract(q.multiply(newT));newR=lastR.subtract(q.multiply(newR));}if(!r.equals(1))throw new Error(this.toString()+" and "+n.toString()+" are not co-prime");if(t.compare(0)===-1){t=t.add(n);}if(this.isNegative()){return t.negate()}return t};SmallInteger.prototype.modInv=BigInteger.prototype.modInv;BigInteger.prototype.next=function(){var value=this.value;if(this.sign){return subtractSmall(value,1,this.sign)}return new BigInteger(addSmall(value,1),this.sign)};SmallInteger.prototype.next=function(){var value=this.value;if(value+1<MAX_INT)return new SmallInteger(value+1);return new BigInteger(MAX_INT_ARR,false)};BigInteger.prototype.prev=function(){var value=this.value;if(this.sign){return new BigInteger(addSmall(value,1),true)}return subtractSmall(value,1,this.sign)};SmallInteger.prototype.prev=function(){var value=this.value;if(value-1>-MAX_INT)return new SmallInteger(value-1);return new BigInteger(MAX_INT_ARR,true)};var powersOfTwo=[1];while(powersOfTwo[powersOfTwo.length-1]<=BASE)powersOfTwo.push(2*powersOfTwo[powersOfTwo.length-1]);var powers2Length=powersOfTwo.length,highestPower2=powersOfTwo[powers2Length-1];function shift_isSmall(n){return (typeof n==="number"||typeof n==="string")&&+Math.abs(n)<=BASE||n instanceof BigInteger&&n.value.length<=1}BigInteger.prototype.shiftLeft=function(n){if(!shift_isSmall(n)){throw new Error(String(n)+" is too large for shifting.")}n=+n;if(n<0)return this.shiftRight(-n);var result=this;while(n>=powers2Length){result=result.multiply(highestPower2);n-=powers2Length-1;}return result.multiply(powersOfTwo[n])};SmallInteger.prototype.shiftLeft=BigInteger.prototype.shiftLeft;BigInteger.prototype.shiftRight=function(n){var remQuo;if(!shift_isSmall(n)){throw new Error(String(n)+" is too large for shifting.")}n=+n;if(n<0)return this.shiftLeft(-n);var result=this;while(n>=powers2Length){if(result.isZero())return result;remQuo=divModAny(result,highestPower2);result=remQuo[1].isNegative()?remQuo[0].prev():remQuo[0];n-=powers2Length-1;}remQuo=divModAny(result,powersOfTwo[n]);return remQuo[1].isNegative()?remQuo[0].prev():remQuo[0]};SmallInteger.prototype.shiftRight=BigInteger.prototype.shiftRight;function bitwise(x,y,fn){y=parseValue(y);var xSign=x.isNegative(),ySign=y.isNegative();var xRem=xSign?x.not():x,yRem=ySign?y.not():y;var xBits=[],yBits=[];var xStop=false,yStop=false;while(!xStop||!yStop){if(xRem.isZero()){xStop=true;xBits.push(xSign?1:0);}else if(xSign)xBits.push(xRem.isEven()?1:0);else xBits.push(xRem.isEven()?0:1);if(yRem.isZero()){yStop=true;yBits.push(ySign?1:0);}else if(ySign)yBits.push(yRem.isEven()?1:0);else yBits.push(yRem.isEven()?0:1);xRem=xRem.over(2);yRem=yRem.over(2);}var result=[];for(var i=0;i<xBits.length;i++)result.push(fn(xBits[i],yBits[i]));var sum=bigInt(result.pop()).negate().times(bigInt(2).pow(result.length));while(result.length){sum=sum.add(bigInt(result.pop()).times(bigInt(2).pow(result.length)));}return sum}BigInteger.prototype.not=function(){return this.negate().prev()};SmallInteger.prototype.not=BigInteger.prototype.not;BigInteger.prototype.and=function(n){return bitwise(this,n,function(a,b){return a&b})};SmallInteger.prototype.and=BigInteger.prototype.and;BigInteger.prototype.or=function(n){return bitwise(this,n,function(a,b){return a|b})};SmallInteger.prototype.or=BigInteger.prototype.or;BigInteger.prototype.xor=function(n){return bitwise(this,n,function(a,b){return a^b})};SmallInteger.prototype.xor=BigInteger.prototype.xor;var LOBMASK_I=1<<30,LOBMASK_BI=(BASE&-BASE)*(BASE&-BASE)|LOBMASK_I;function roughLOB(n){var v=n.value,x=typeof v==="number"?v|LOBMASK_I:v[0]+v[1]*BASE|LOBMASK_BI;return x&-x}function max(a,b){a=parseValue(a);b=parseValue(b);return a.greater(b)?a:b}function min(a,b){a=parseValue(a);b=parseValue(b);return a.lesser(b)?a:b}function gcd(a,b){a=parseValue(a).abs();b=parseValue(b).abs();if(a.equals(b))return a;if(a.isZero())return b;if(b.isZero())return a;var c=Integer[1],d,t;while(a.isEven()&&b.isEven()){d=Math.min(roughLOB(a),roughLOB(b));a=a.divide(d);b=b.divide(d);c=c.multiply(d);}while(a.isEven()){a=a.divide(roughLOB(a));}do{while(b.isEven()){b=b.divide(roughLOB(b));}if(a.greater(b)){t=b;b=a;a=t;}b=b.subtract(a);}while(!b.isZero());return c.isUnit()?a:a.multiply(c)}function lcm(a,b){a=parseValue(a).abs();b=parseValue(b).abs();return a.divide(gcd(a,b)).multiply(b)}function randBetween(a,b){a=parseValue(a);b=parseValue(b);var low=min(a,b),high=max(a,b);var range=high.subtract(low);if(range.isSmall)return low.add(Math.round(Math.random()*range));var length=range.value.length-1;var result=[],restricted=true;for(var i=length;i>=0;i--){var top=restricted?range.value[i]:BASE;var digit=truncate(Math.random()*top);result.unshift(digit);if(digit<top)restricted=false;}result=arrayToSmall(result);return low.add(typeof result==="number"?new SmallInteger(result):new BigInteger(result,false))}var parseBase=function(text,base){var length=text.length;var i;var absBase=Math.abs(base);for(var i=0;i<length;i++){var c=text[i].toLowerCase();if(c==="-")continue;if(/[a-z0-9]/.test(c)){if(/[0-9]/.test(c)&&+c>=absBase){if(c==="1"&&absBase===1)continue;throw new Error(c+" is not a valid digit in base "+base+".")}else if(c.charCodeAt(0)-87>=absBase){throw new Error(c+" is not a valid digit in base "+base+".")}}}if(2<=base&&base<=36){if(length<=LOG_MAX_INT/Math.log(base)){var result=parseInt(text,base);if(isNaN(result)){throw new Error(c+" is not a valid digit in base "+base+".")}return new SmallInteger(parseInt(text,base))}}base=parseValue(base);var digits=[];var isNegative=text[0]==="-";for(i=isNegative?1:0;i<text.length;i++){var c=text[i].toLowerCase(),charCode=c.charCodeAt(0);if(48<=charCode&&charCode<=57)digits.push(parseValue(c));else if(97<=charCode&&charCode<=122)digits.push(parseValue(c.charCodeAt(0)-87));else if(c==="<"){var start=i;do{i++;}while(text[i]!==">");digits.push(parseValue(text.slice(start+1,i)));}else throw new Error(c+" is not a valid character")}return parseBaseFromArray(digits,base,isNegative)};function parseBaseFromArray(digits,base,isNegative){var val=Integer[0],pow=Integer[1],i;for(i=digits.length-1;i>=0;i--){val=val.add(digits[i].times(pow));pow=pow.times(base);}return isNegative?val.negate():val}function stringify(digit){var v=digit.value;if(typeof v==="number")v=[v];if(v.length===1&&v[0]<=35){return "0123456789abcdefghijklmnopqrstuvwxyz".charAt(v[0])}return "<"+v+">"}function toBase(n,base){base=bigInt(base);if(base.isZero()){if(n.isZero())return "0";throw new Error("Cannot convert nonzero numbers to base 0.")}if(base.equals(-1)){if(n.isZero())return "0";if(n.isNegative())return new Array(1-n).join("10");return "1"+new Array(+n).join("01")}var minusSign="";if(n.isNegative()&&base.isPositive()){minusSign="-";n=n.abs();}if(base.equals(1)){if(n.isZero())return "0";return minusSign+new Array(+n+1).join(1)}var out=[];var left=n,divmod;while(left.isNegative()||left.compareAbs(base)>=0){divmod=left.divmod(base);left=divmod.quotient;var digit=divmod.remainder;if(digit.isNegative()){digit=base.minus(digit).abs();left=left.next();}out.push(stringify(digit));}out.push(stringify(left));return minusSign+out.reverse().join("")}BigInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!==10)return toBase(this,radix);var v=this.value,l=v.length,str=String(v[--l]),zeros="0000000",digit;while(--l>=0){digit=String(v[l]);str+=zeros.slice(digit.length)+digit;}var sign=this.sign?"-":"";return sign+str};SmallInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!=10)return toBase(this,radix);return String(this.value)};BigInteger.prototype.toJSON=SmallInteger.prototype.toJSON=function(){return this.toString()};BigInteger.prototype.valueOf=function(){return +this.toString()};BigInteger.prototype.toJSNumber=BigInteger.prototype.valueOf;SmallInteger.prototype.valueOf=function(){return this.value};SmallInteger.prototype.toJSNumber=SmallInteger.prototype.valueOf;function parseStringValue(v){if(isPrecise(+v)){var x=+v;if(x===truncate(x))return new SmallInteger(x);throw"Invalid integer: "+v}var sign=v[0]==="-";if(sign)v=v.slice(1);var split=v.split(/e/i);if(split.length>2)throw new Error("Invalid integer: "+split.join("e"));if(split.length===2){var exp=split[1];if(exp[0]==="+")exp=exp.slice(1);exp=+exp;if(exp!==truncate(exp)||!isPrecise(exp))throw new Error("Invalid integer: "+exp+" is not a valid exponent.");var text=split[0];var decimalPlace=text.indexOf(".");if(decimalPlace>=0){exp-=text.length-decimalPlace-1;text=text.slice(0,decimalPlace)+text.slice(decimalPlace+1);}if(exp<0)throw new Error("Cannot include negative exponent part for integers");text+=new Array(exp+1).join("0");v=text;}var isValid=/^([0-9][0-9]*)$/.test(v);if(!isValid)throw new Error("Invalid integer: "+v);var r=[],max=v.length,l=LOG_BASE,min=max-l;while(max>0){r.push(+v.slice(min,max));min-=l;if(min<0)min=0;max-=l;}trim(r);return new BigInteger(r,sign)}function parseNumberValue(v){if(isPrecise(v)){if(v!==truncate(v))throw new Error(v+" is not an integer.");return new SmallInteger(v)}return parseStringValue(v.toString())}function parseValue(v){if(typeof v==="number"){return parseNumberValue(v)}if(typeof v==="string"){return parseStringValue(v)}return v}for(var i=0;i<1e3;i++){Integer[i]=new SmallInteger(i);if(i>0)Integer[-i]=new SmallInteger(-i);}Integer.one=Integer[1];Integer.zero=Integer[0];Integer.minusOne=Integer[-1];Integer.max=max;Integer.min=min;Integer.gcd=gcd;Integer.lcm=lcm;Integer.isInstance=function(x){return x instanceof BigInteger||x instanceof SmallInteger};Integer.randBetween=randBetween;Integer.fromArray=function(digits,base,isNegative){return parseBaseFromArray(digits.map(parseValue),parseValue(base||10),isNegative)};return Integer}();if(module.hasOwnProperty("exports")){module.exports=bigInt;}        return bigInt;
        })()
    });

    {
        module.exports = nerdamer;
    }});

    const EPS$$1 = 1e-5;
    let globalId = 0;
    function getGlobalId$$1() {
        return globalId++;
    }
    function assembleFaceFromLooseEdges$$1(edges, surface, originalFace) {
        const visited = new Set();
        function nextStart() {
            return edges.find(edge => !visited.has(edge));
        }
        const loops = [];
        let startEdge, currentEdge = undefined;
        while ((startEdge = nextStart())) {
            currentEdge = startEdge;
            const loop = [];
            let total = 0;
            do {
                visited.add(currentEdge);
                loop.push(currentEdge);
                const possibleEdges = edges.filter(edge => currentEdge.b.like(edge.a));
                const normalAtCurrentB = surface.normalP(currentEdge.b);
                const nextEdgeIndex = possibleEdges.indexWithMax(edge => currentEdge.bDir.angleRelativeNormal(edge.aDir, normalAtCurrentB));
                currentEdge = possibleEdges[nextEdgeIndex];
            } while (startEdge != currentEdge && total++ < 200);
            assert(total != 201);
            loops.push(loop);
        }
        const assembledFaces = BRep$$1.assembleFacesFromLoops(loops, surface, originalFace);
        assertf(() => 1 == assembledFaces.length);
        return assembledFaces[0];
    }
    /**
     * ## Markdown header
     * ![foo](screenshots/Capture.PNG)
     * {@link ../screenshots/Capture.PNG}
     * find the next edge with the MAXIMUM angle
     */
    function calcNextEdgeIndex$$1(currentEdge, possibleEdges, faceNormalAtCurrentB) {
        let maxValue = -20, advanced = false, result = Number.MAX_SAFE_INTEGER;
        const normVector = currentEdge.bDir.cross(faceNormalAtCurrentB);
        const eps = 1e-4;
        const dir = sign$2(currentEdge.deltaT());
        const ecd = currentEdge.curve.diff(currentEdge.bT, -dir * eps).dot(normVector);
        for (let i = possibleEdges.length; i--;) {
            const edge = possibleEdges[i];
            const angle1 = currentEdge.bDir.negated().angleRelativeNormal(edge.aDir, faceNormalAtCurrentB);
            const angle = (angle1 + TAU + NLA_PRECISION) % TAU - NLA_PRECISION;
            if (eq0(angle)) {
                // do advanced analysis
                if (currentEdge.curve.isColinearTo(edge.curve)) {
                    continue;
                }
                const edgeDir = sign$2(edge.deltaT());
                const iscd = edge.curve.diff(edge.aT, edgeDir * eps).dot(normVector);
                const diff = iscd - ecd;
                // if diff > 0, the angle is actually ~= 0
                if (diff < 0 && (!advanced || diff > maxValue)) {
                    advanced = true;
                    maxValue = diff;
                    result = i;
                }
            }
            else if (!advanced) {
                if (gt(angle, maxValue)) {
                    maxValue = angle;
                    result = i;
                }
            }
        }
        return result == Number.MAX_SAFE_INTEGER ? 0 : result;
    }
    class BRep$$1 extends Transformable {
        constructor(faces, infiniteVolume, generator, vertexNames) {
            super();
            this.faces = faces;
            assertInst(Face$$1, ...faces);
            this.infiniteVolume = infiniteVolume;
            assert(!this.infiniteVolume || true === this.infiniteVolume);
            this.generator = generator;
            this.vertexNames = vertexNames;
            this.edgeFaces = undefined;
            //this.assertSanity()
        }
        static loop1ContainsLoop2(loop1, ccw1, loop2, ccw2, surface) {
            for (const edge of loop2) {
                const loop1ContainsPoint = surface.loopContainsPoint(loop1, edge.a);
                if (PointVsFace$$1.ON_EDGE != loop1ContainsPoint)
                    return PointVsFace$$1.INSIDE == loop1ContainsPoint;
            }
            for (const edge of loop2) {
                const edgePoint = edge.curve.at(edge.aT * 0.2 + edge.bT * 0.8);
                const loop1ContainsPoint = surface.loopContainsPoint(loop1, edgePoint);
                if (PointVsFace$$1.ON_EDGE != loop1ContainsPoint)
                    return PointVsFace$$1.INSIDE == loop1ContainsPoint;
            }
            if (ccw1 != ccw2) {
                return ccw2;
            }
            throw new Error(loop1.sce + loop2.sce);
        }
        static assembleFacesFromLoops(loops, surface, originalFace, infoFactory) {
            function placeRecursively(newLoopInfo, loopInfos) {
                if (loopInfos.length == 0) {
                    loopInfos.push(newLoopInfo);
                }
                else {
                    const subLoopInfo = loopInfos.find(loopInfo => BRep$$1.loop1ContainsLoop2(loopInfo.loop, loopInfo.ccw, newLoopInfo.loop, newLoopInfo.ccw, surface));
                    if (subLoopInfo) {
                        placeRecursively(newLoopInfo, subLoopInfo.subloops);
                    }
                    else {
                        // newLoopInfo isnt contained by any other subLoopInfo
                        for (let i = loopInfos.length; --i >= 0;) {
                            const subLoopInfo = loopInfos[i];
                            //console.log("cheving subLoopInfo", surface.loopContainsPoint(newLoopInfo.edges,
                            // subLoopInfo.edges[0].a))
                            if (BRep$$1.loop1ContainsLoop2(newLoopInfo.loop, newLoopInfo.ccw, subLoopInfo.loop, subLoopInfo.ccw, surface)) {
                                newLoopInfo.subloops.push(subLoopInfo);
                                loopInfos.splice(i, 1); // remove it
                            }
                        }
                        loopInfos.push(newLoopInfo);
                    }
                }
            }
            function newFacesRecursive(loopInfo) {
                // CW loops can be top level, if they are holes in the original face not contained in the new face
                if (loopInfo.ccw) {
                    if (loopInfo.subloops.every(sl => !sl.ccw)) {
                        const holes = loopInfo.subloops.map(sl => sl.loop);
                        const info = infoFactory && infoFactory.newSubFace(originalFace, surface, loopInfo.loop, holes);
                        const newFace = new originalFace.constructor(surface, loopInfo.loop, holes, 'genface' + getGlobalId$$1(), info);
                        newFaces.push(newFace);
                        loopInfo.subloops.forEach(sl => sl.subloops.forEach(slsl => slsl.ccw && newFacesRecursive(slsl)));
                    }
                    else {
                        loopInfo.subloops.forEach(sl => sl.ccw && newFacesRecursive(sl));
                    }
                }
            }
            const newFaces = [];
            const topLevelLoops = [];
            loops.forEach(loop => placeRecursively({
                loop: loop,
                ccw: surface.edgeLoopCCW(loop),
                subloops: [],
            }, topLevelLoops));
            topLevelLoops.forEach(tll => newFacesRecursive(tll));
            return newFaces;
        }
        /**
         * Create a [BRep] by concatenating the faces of other BReps. Only use this if certain that the faces of the BReps do not intersect.
         * Otherwise, use [BRep.plus].
         * @param bReps
         * @param generator
         */
        static join(bReps, generator) {
            return new BRep$$1(bReps.flatMap(b2 => b2.faces), false, generator);
        }
        containsPoint(p, forceInsideOutside = false) {
            const dirs = [
                V$2(-0.3920414696448526, -0.12936136783391444, -0.9108068525164064),
                V$2(0.6520650903544943, -0.07151288645511984, -0.7547827667692488),
                V$2(0.9433494201061395, -0.2402757256238473, -0.22882186797013926),
                V$2(0.13678704228501923, -0.04480387361087783, 0.9895867410047372),
                V$2(0.0662057922721913, -0.5865836917435423, 0.8071780259955845),
                V$2(-0.7322576567870621, -0.12953393611526787, 0.6685953061989045),
                V$2(0.6579719127258273, -0.012300218400456116, 0.7529420075219719),
                V$2(-0.5576497966736425, 0.8006695748324647, 0.2189861552871446),
            ];
            dirLoop: for (const dir of dirs) {
                const testLine = new L3$$1(p, dir);
                let inside = this.infiniteVolume;
                for (const face of this.faces) {
                    assert(!face.surface.containsCurve(testLine));
                    const ists = face.surface.isTsForLine(testLine);
                    for (const t of ists) {
                        const p = testLine.at(t);
                        const pvf = face.containsPoint2(p);
                        //assert(pvf != PointVsFace.ON_EDGE)
                        !forceInsideOutside && assert(!eq0(t));
                        if (t > 0) {
                            if (pvf == PointVsFace$$1.ON_EDGE) {
                                continue dirLoop;
                            }
                            if (pvf == PointVsFace$$1.INSIDE) {
                                inside = !inside;
                            }
                        }
                    }
                }
                return inside;
            }
            return false;
        }
        withMergedFaces() {
            const likeSurfaceFaces = [];
            for (let i = 0; i < this.faces.length; i++) {
                let addedToGroup = false;
                for (let j = 0; j < i; j++) {
                    if (this.faces[i].surface.isCoplanarTo(this.faces[j].surface)) {
                        const faceGroup = likeSurfaceFaces.find(faceGroup => faceGroup.includes(this.faces[j]));
                        if (faceGroup) {
                            faceGroup.push(this.faces[i]);
                            addedToGroup = true;
                        }
                    }
                }
                !addedToGroup && likeSurfaceFaces.push([this.faces[i]]);
            }
            console.log('likeSurfaceFaces', likeSurfaceFaces);
            if (likeSurfaceFaces.every(group => group.length == 1))
                return this;
            const newFaces = [];
            let total = 0;
            for (const faceGroup of likeSurfaceFaces) {
                console.log(faceGroup);
                if (faceGroup.length == 1) {
                    newFaces.push(faceGroup[0]);
                }
                else {
                    const allEdges = faceGroup.flatMap(face => face.getAllEdges());
                    for (let i = allEdges.length; i-- > 0;) {
                        for (let j = 0; j < i; j++) {
                            console.log('blugh', total);
                            assert(i >= 0 && j >= 0 && total++ < 500, i + ' ' + j + ' ' + total);
                            if (allEdges[i].isCoEdge(allEdges[j])) {
                                // remove both
                                allEdges.splice(i, 1);
                                allEdges.splice(j, 1);
                                i--;
                                break;
                            }
                        }
                    }
                    const newFace = assembleFaceFromLooseEdges$$1(allEdges, faceGroup[0].surface, faceGroup[0]);
                    newFaces.push(newFace);
                }
            }
            return new BRep$$1(newFaces, this.infiniteVolume, this.generator && this.generator + '.withMergedFaces()', this.vertexNames);
        }
        calculateVolume() {
            return this.faces.map(face => face.zDirVolume().volume).sum();
        }
        toMesh() {
            const mesh = new Mesh$$1()
                .addVertexBuffer('normals', 'ts_Normal')
                .addIndexBuffer('TRIANGLES')
                .addIndexBuffer('LINES');
            mesh.faceIndexes = new Map();
            for (const face of this.faces) {
                const triangleStart = mesh.TRIANGLES.length;
                face.addToMesh(mesh);
                mesh.faceIndexes.set(face, { start: triangleStart, count: mesh.TRIANGLES.length - triangleStart });
            }
            //this.buildAdjacencies()
            //for (const edge of this.edgeFaces.keys()) {
            //
            //}
            return mesh;
        }
        minus(other, infoFactory) {
            const generator = this.generator && other.generator && this.generator + '.minus(' + other.generator + ')';
            return this.intersection(other.flipped(), true, true, generator, infoFactory);
        }
        plus(other, infoFactory) {
            const generator = this.generator && other.generator && this.generator + '.plus(' + other.generator + ')';
            return this.flipped()
                .intersection(other.flipped(), true, true, generator, infoFactory)
                .flipped();
        }
        and(other, infoFactory) {
            const generator = this.generator && other.generator && this.generator + '.and(' + other.generator + ')';
            return this.intersection(other, true, true, generator, infoFactory);
        }
        xor(other, infoFactory) {
            const generator = this.generator && other.generator && this.generator + '.xor(' + other.generator + ')';
            return new BRep$$1(this.minus(other, infoFactory).faces.concat(other.minus(this, infoFactory).faces), this.infiniteVolume != other.infiniteVolume, generator);
        }
        equals(obj) {
            return (this.faces.length == obj.faces.length &&
                this.faces.every(face => obj.faces.some(face2 => face.equals(face2))));
        }
        like(brep) {
            return (this.faces.length == brep.faces.length &&
                this.faces.every(face => brep.faces.some(face2 => face.likeFace(face2))));
        }
        //reconstituteCoplanarFaces(likeSurfacePlanes, edgeLooseSegments, faceMap, newFaces) {
        //    likeSurfacePlanes.forEach(faceGroup => {
        //        // calculate total contours
        //        let surface = faceGroup[0].surface, bag = []
        //        faceGroup.forEach(face => {
        //            Array.prototype.push.apply(bag, faceMap(face))
        //            face.getAllEdges().forEach(edge => {
        //                let edgeSubSegments
        //                if (edgeSubSegments = edgeLooseSegments.get(edge)) {
        //                    Array.prototype.push.apply(bag, edgeSubSegments)
        //                } else {
        //                    bag.push(edge)
        //                }
        //            })
        //        })
        //        let currentEdge, loops = []
        //        while (currentEdge = bag.find(edge => !edge.visited)) {
        //            let path = []
        //            do {
        //                currentEdge.visited = true
        //                path.push(currentEdge)
        //                let possibleNextEdges = bag.filter(edge => currentEdge.b.like(edge.a))
        //                // lowest angle, i.e. the right-most next edge
        //                let nextEdgeIndex = possibleNextEdges.indexWithMax((edge, index) =>
        // -currentEdge.bDir.angleRelativeNormal(edge.aDir, surface.normalP(currentEdge.b))) currentEdge =
        // possibleNextEdges[nextEdgeIndex] } while (!currentEdge.visited) let startIndex = path.find(currentEdge) if (-1
        // != startIndex) { loops.push(path.slice(startIndex)) } } }) }
        toString() {
            return `new BRep([\n${this.faces.join(',\n').replace(/^/gm, '\t')}], ${this.infiniteVolume})`;
        }
        getConstructorParameters() {
            return [this.faces, this.infiniteVolume];
        }
        toSource(useGenerator = true) {
            return ((useGenerator && this.generator) ||
                `new BRep([\n${this.faces
                .map(SCE)
                .join(',\n')
                .replace(/^/gm, '\t')}], ${this.infiniteVolume})`);
        }
        /**
         * Rightmost next segment doesn't work, as the correct next segment isn't obvious from the current corner
         * alone.
         * (at least, not without extensive pre-analysis on the face edges, which shouldn't be necessary, as the
         * correct new faces are defined by the new edges already.) Leftmost edge should work. Holes which touch the
         * edge of the face will be added to the face contour.
         *
         * New segments will always be part left-er than existing ones, so no special check is required.
         *
         */
        reconstituteFaces(oldFaces, edgeSubEdges, faceMap, newFaces, infoFactory) {
            const oldFaceStatuses = new Map();
            // reconstitute faces
            const insideEdges = [];
            for (const face of oldFaces) {
                const usableOldEdges = face.getAllEdges().filter(edge => !edgeSubEdges.get(edge));
                const subEdges = face
                    .getAllEdges()
                    .mapFilter(edge => edgeSubEdges.get(edge))
                    .concatenated();
                const newEdges = faceMap.get(face) || [];
                if (newEdges.length || subEdges.length) {
                    oldFaceStatuses.set(face, 'partial');
                    const loops = [];
                    // new edges are definitely part of a resulting loop
                    // old edges (both contour and holes) can either be part of a new loop, in which case they will already
                    // have been visited when starting a loop search with a new edge, OR they can be stranded, OR they can
                    // remain in their old loop
                    function getNextStart() {
                        return (newEdges.find(edge => !visitedEdges.has(edge)) ||
                            subEdges.find(edge => !visitedEdges.has(edge)) ||
                            usableOldEdges.find(edge => !visitedEdges.has(edge)));
                    }
                    const visitedEdges = new Set();
                    // search for a loop:
                    let currentEdge;
                    while ((currentEdge = getNextStart())) {
                        const startEdge = currentEdge, edges = [];
                        let i = 0;
                        // wether only new edges are used (can include looseSegments)
                        do {
                            visitedEdges.add(currentEdge);
                            edges.push(currentEdge);
                            // find next edge
                            const possibleOldEdges = usableOldEdges.filter(edge => currentEdge.b.like(edge.a));
                            const possibleSubEdges = subEdges.filter(edge => currentEdge.b.like(edge.a));
                            const possibleNewEdges = newEdges.filter(edge => currentEdge.b.like(edge.a));
                            const possibleEdges = possibleOldEdges.concat(possibleSubEdges, possibleNewEdges);
                            if (0 == possibleEdges.length)
                                break;
                            assert(0 < possibleEdges.length, () => face.sce);
                            const faceNormalAtCurrentB = face.surface.normalP(currentEdge.b);
                            const nextEdgeIndex = calcNextEdgeIndex$$1(currentEdge, possibleEdges, faceNormalAtCurrentB);
                            currentEdge = possibleEdges[nextEdgeIndex];
                            if (visitedEdges.has(currentEdge)) {
                                break;
                            }
                            assert(currentEdge);
                            assert(currentEdge != startEdge);
                        } while (++i < 400);
                        if (400 == i) {
                            assert(false, 'too many');
                        }
                        // check if we found a loop
                        if (edges.length > 1 && currentEdge == startEdge) {
                            loops.push(edges);
                        }
                    }
                    const faceNewFaces = BRep$$1.assembleFacesFromLoops(loops, face.surface, face, infoFactory);
                    newFaces.push(...faceNewFaces);
                    const faceNewFacesEdges = faceNewFaces.flatMap(face => face.getAllEdges());
                    insideEdges.push(...usableOldEdges.filter(edge => faceNewFacesEdges.includes(edge)));
                }
            }
            while (insideEdges.length != 0) {
                const insideEdge = insideEdges.pop();
                const adjacentFaces = this.edgeFaces.get(insideEdge.getCanon());
                adjacentFaces.forEach(info => {
                    if (!oldFaceStatuses.has(info.face)) {
                        oldFaceStatuses.set(info.face, 'inside');
                        insideEdges.push.apply(insideEdges, info.face.getAllEdges());
                    }
                });
            }
            newFaces.push(...oldFaces.filter(face => oldFaceStatuses.get(face) == 'inside'));
        }
        static getLooseEdgeSegments(edgePointInfoss, edgeFaces) {
            const result = new JavaMap();
            // if there are no point info, the original edge will be kept, so we should return nothing
            // otherwise, something will be returned, even if it a new edge identical to the base edge
            for (const [canonEdge, pointInfos] of edgePointInfoss) {
                if (0 == pointInfos.length)
                    continue;
                const allFaces = edgeFaces.get(canonEdge);
                pointInfos.sort((a, b) => snap0(a.edgeT - b.edgeT) || +!!undefined);
                let startP = canonEdge.a, startDir = canonEdge.aDir, startT = canonEdge.aT, startInfo;
                function addNewEdge(startInfo, endInfo, newEdge) {
                    for (let i = 0; i < allFaces.length; i++) {
                        const faceInfo = allFaces[i];
                        mapPush(result, !faceInfo.reversed ? canonEdge : canonEdge.flipped(), !faceInfo.reversed ? newEdge : newEdge.flipped());
                    }
                }
                for (let i = 0; i < pointInfos.length; i++) {
                    const info = pointInfos[i];
                    const pDir = canonEdge.tangentAt(info.edgeT);
                    if (!eq(info.edgeT, startT)) {
                        const newEdge = Edge$$1.create(canonEdge.curve, startP, info.p, startT, info.edgeT, undefined, startDir, pDir, 'looseSegment' + getGlobalId$$1());
                        addNewEdge(startInfo, info, newEdge);
                    }
                    startP = info.p;
                    startT = info.edgeT;
                    startInfo = info;
                    startDir = pDir;
                }
                if (startInfo && !eq(startT, canonEdge.bT)) {
                    const newEdge = Edge$$1.create(canonEdge.curve, startP, canonEdge.b, startT, canonEdge.bT, undefined, startDir, canonEdge.bDir, 'looseSegment' + getGlobalId$$1());
                    addNewEdge(startInfo, undefined, newEdge);
                }
            }
            return result;
        }
        getIntersectionEdges(brep2) {
            const faceMap = new Map(), thisEdgePoints = new JavaMap(), otherEdgePoints = new JavaMap();
            const checkedPairs = new JavaSet();
            this.faces.forEach(face => {
                //console.log('face', face.toString())
                brep2.faces.forEach(face2 => {
                    //console.log('face2', face2.toString())
                    face.intersectFace(face2, this, brep2, faceMap, thisEdgePoints, otherEdgePoints, checkedPairs);
                });
            });
            return Array.from(faceMap.values()).concatenated();
        }
        shellCount() {
            const foundFaces = new Set();
            let face, result = 0;
            while ((face = this.faces.find(face => !foundFaces.has(face)))) {
                result++;
                const stack = [face];
                while ((face = stack.pop())) {
                    // @ts-ignore
                    for (const edge of face.getAllEdges()) {
                        // @ts-ignore
                        for (const { face: face2 } of this.edgeFaces.get(edge.getCanon())) {
                            if (face !== face2 && !foundFaces.has(face2)) {
                                foundFaces.add(face2);
                                stack.push(face2);
                            }
                        }
                    }
                }
            }
            return result;
        }
        getAABB() {
            return AABB.forAABBs(this.faces.map(face => face.getAABB()));
        }
        assertSanity() {
            // const allFaceEdges = this.faces.flatMap(face => face.getAllEdges())
            // for (const { i, j } of combinations(allFaceEdges.length)) {
            // const a = allFaceEdges[i],
            // 	b = allFaceEdges[j]
            // assert(i == j || !a.isCoEdge(b) || a == b || a.flippedOf == b, 'coedges not linked properly', a, b)
            // assert(
            // 	i == j ||
            // 		!a.curve.isColinearTo(b.curve) ||
            // 		(a.curve.equals(b.curve) && a.isCoEdge(b)) ||
            // 		!a.overlaps(b),
            // 	'colinear edges overlap',
            // 	a,
            // 	b,
            // )
            // }
            this.buildAdjacencies();
            for (const [canonEdge, edgeFaceInfos] of this.edgeFaces) {
                // TODO handle curved faces
                assert(edgeFaceInfos.length % 2 == 0, () => canonEdge + edgeFaceInfos.sce);
            }
        }
        //intersection3(other: BRep, buildThis: boolean, buildOther: boolean, name?: string): BRep {
        //    this.assertSanity()
        //    other.assertSanity()
        //    this.buildAdjacencies()
        //    other.buildAdjacencies()
        //
        //    // edge / edge
        //    for (const [edge1, edge1Faces] of this.edgeFaces) {
        //        for (const [edge2, edge2Faces] of other.edgeFaces) {
        //            const curve1 = edge1.curve, curve2 = edge2.curve
        //            if (curve1.isColinearTo(curve2)) {
        //                if (edge1.overlaps(edge2)) {
        //                    // faces have a common edge
        //                    const aT = curve1.pointT(edge2.a), bT = curve1.pointT(edge2.a)
        //                    const minT = min(aT, bT), maxT = max(aT, bT)
        //                    const commonEdge = Edge.create(curve1, min(edge1.minT, minT), min(edge1.maxT, maxT), )
        //                }
        //            } else if (x = curve1.isInfosWithCurve(edge2.curve)) {
        //                // edges intersect in a point
        //            }
        //        }
        //    }
        //
        //    // point / edge
        //    function pointEdge(b1, b2, has, add) {
        //        for (const v1 of this.vertFaces.keys()) {
        //            for (const edge2 of other.edgeFaces.keys()) {
        //                if (edge2.curve.containsPoint(v1)) {
        //                    const edge2T = edge2.curve.pointT(v1)
        //                    if (eq(edge2.aT, edge2T) || eq(edge2.bT, edge2T)) {
        //                        add(v1, eq(edge2.aT, edge2T) ? edge2.a : edge2.b)
        //                    }
        //                }
        //            }
        //        }
        //    }
        //    const pairs: CustomSet<[Equalable, Equalable]> = new CustomSet<[Equalable, Equalable]>()
        //    pointEdge(this, other, (a, b) => pairs.has([a, b]), (a, b) => pairs.add([a, b]))
        //    pointEdge(other, this, (b, a) => pairs.has([a, b]), (b, a) => pairs.add([a, b]))
        //
        //
        //    // point / point
        //    for (const v1 of this.vertFaces.keys()) {
        //        for (const v2 of other.vertFaces.keys()) {
        //            if (v1.like(v2)) {
        //
        //            }
        //        }
        //    }
        //
        //    for (const face1 of this.faces) {
        //        for (const face2 of other.faces) {
        //            face1.intersectFace(face2)
        //        }
        //    }
        //
        //}
        buildAdjacencies() {
            if (this.edgeFaces)
                return this;
            this.edgeFaces = new JavaMap();
            for (const face of this.faces) {
                for (const edge of face.getAllEdges()) {
                    const canon = edge.getCanon();
                    const normalAtCanonA = face.surface.normalP(canon.a);
                    const inside = normalAtCanonA.cross(canon == edge ? edge.aDir : edge.bDir);
                    mapPush(this.edgeFaces, canon, {
                        face: face,
                        edge: edge,
                        normalAtCanonA: normalAtCanonA,
                        reversed: canon != edge,
                        inside: inside,
                        angle: 0,
                    });
                }
            }
            for (const [canonEdge, edgeFaceInfos] of this.edgeFaces) {
                // TODO handle curved faces
                //assert(edgeFaceInfos.length % 2 == 0, () => canonEdge + edgeFaceInfos.sce)
                const faceInfo0 = edgeFaceInfos.find(faceInfo => faceInfo.reversed);
                if (!faceInfo0) {
                    console.warn('invalid brep');
                    continue;
                }
                edgeFaceInfos.forEach(faceInfo => {
                    if (faceInfo != faceInfo0) {
                        faceInfo.angle = faceInfo0.inside.angleRelativeNormal(faceInfo.inside, canonEdge.aDir.unit());
                        if (faceInfo.angle < 0)
                            faceInfo.angle += 2 * Math.PI;
                    }
                });
                edgeFaceInfos.sort((a, b) => snap(a.angle - b.angle, 0)); // TODO  || assertNever()
            }
            return this;
        }
        /**
         * Cases for volumes A and B
         *
         *          1.  Volumes do not touch.
         *          2.  face/face Face surfaces intersect each other.
         *              implies edges going through faces.
         *              e.g. box(5, 5, 5) - box(5, 5, 5).translate(1, 1, 1)
         *          3.  face/edge Edge of A lies in a face of B
         *              implies vertices of A lying in face of B
         *              e.g. box(5, 5, 5) - box(3, 3, 3).rotateZ([0, 1, 2] * PI / 2).translate(0, 1, 1)
         *          4.  edge/edge Two edges are colinear.
         *              implies vertex of A lying in edge of B
         *           5.  vertex/edge Vertex of A lies on edge of B (but no edge/edge)
         *          6.  vertex/vertex with/without edge/edge, edge/face and face/face intersections
         *          7.  vertex lies in face
         *
         *
         *
         */
        intersection(other, buildThis, buildOther, generator, infoFactory) {
            this.assertSanity();
            other.assertSanity();
            this.buildAdjacencies();
            other.buildAdjacencies();
            const faceMap = new Map();
            const thisEdgePoints = new JavaMap(), otherEdgePoints = new JavaMap();
            const checkedPairs = new JavaSet();
            for (const thisFace of this.faces) {
                for (const otherFace of other.faces) {
                    thisFace.intersectFace(otherFace, this, other, faceMap, thisEdgePoints, otherEdgePoints, checkedPairs);
                }
            }
            for (const edge of thisEdgePoints.keys()) {
                assert(this.edgeFaces.get(edge));
            }
            for (const edge of otherEdgePoints.keys()) {
                assert(other.edgeFaces.get(edge));
            }
            const newFaces = [];
            if (0 == faceMap.size && 0 == thisEdgePoints.size && 0 == otherEdgePoints.size) {
                const thisInOther = other.containsPoint(this.faces[0].contour[0].a, true) !== other.infiniteVolume;
                const otherInThis = !thisInOther && this.containsPoint(other.faces[0].contour[0].a) !== this.infiniteVolume;
                if (thisInOther || otherInThis) {
                    const [inside, outside] = thisInOther ? [this, other] : [other, this];
                    if (inside.infiniteVolume) {
                        if (outside.infiniteVolume) {
                            return outside;
                        }
                        else {
                            return BRep$$1.join([inside, outside]);
                        }
                    }
                    else {
                        if (outside.infiniteVolume) {
                            return BRep$$1.EMPTY;
                        }
                        else {
                            return inside;
                        }
                    }
                }
                else {
                    if (this.infiniteVolume) {
                        if (other.infiniteVolume) {
                            return BRep$$1.join([this, other]);
                        }
                    }
                    else {
                        if (other.infiniteVolume) {
                            return this;
                        }
                        else {
                            return BRep$$1.EMPTY;
                        }
                    }
                }
                return BRep$$1.EMPTY;
            }
            else {
                if (buildThis) {
                    const edgeLooseSegments = BRep$$1.getLooseEdgeSegments(thisEdgePoints, this.edgeFaces);
                    // @ts-ignore
                    const els = this.faces.map(face => [
                        face,
                        Array.from(edgeLooseSegments.entries()).flatMap(([edge, subs]) => (face.getAllEdges().some(e => e.equals(edge)) ? subs : [])),
                    ]);
                    this.reconstituteFaces(this.faces, edgeLooseSegments, faceMap, newFaces, infoFactory);
                }
                if (buildOther) {
                    const edgeLooseSegments = BRep$$1.getLooseEdgeSegments(otherEdgePoints, other.edgeFaces);
                    // @ts-ignore
                    const els = other.faces.map(face => [
                        face,
                        Array.from(edgeLooseSegments.entries()).flatMap(([edge, subs]) => (face.getAllEdges().some(e => e.equals(edge)) ? subs : [])),
                    ]);
                    other.reconstituteFaces(other.faces, edgeLooseSegments, faceMap, newFaces, infoFactory);
                }
            }
            //buildCoplanar && this.reconstituteCoplanarFaces(likeSurfaceFaces, edgeLooseSegments, faceMap, newFaces,
            // this.infiniteVolume, other.infiniteVolume)
            const result = new BRep$$1(newFaces, this.infiniteVolume && other.infiniteVolume, generator);
            //result.buildAdjacencies()
            return result;
        }
        transform(m4, desc) {
            let vertexNames;
            if (this.vertexNames) {
                vertexNames = new Map();
                this.vertexNames.forEach((name, vertex) => vertexNames.set(m4.transformPoint(vertex), name + desc));
            }
            return new BRep$$1(this.faces.map(f => f.transform(m4)), this.infiniteVolume, this.generator && desc && this.generator + desc, // if desc isn't set, the generator will be invalid
            vertexNames);
        }
        transform4(m4, desc) {
            let vertexNames;
            if (this.vertexNames) {
                vertexNames = new Map();
                this.vertexNames.forEach((name, vertex) => vertexNames.set(m4.transformPoint(vertex), name + desc));
            }
            return new BRep$$1(this.faces.map(f => f.transform4(m4)), this.infiniteVolume, this.generator && desc && this.generator + desc, // if desc isn't set, the generator will be invalid
            vertexNames);
        }
        flipped() {
            return new BRep$$1(this.faces.map(f => f.flipped()), !this.infiniteVolume, this.generator && this.generator + '.flipped()', this.vertexNames);
        }
    }
    BRep$$1.EMPTY = new BRep$$1([], false, 'BRep.EMPTY', new Map()).buildAdjacencies();
    BRep$$1.R3 = new BRep$$1([], true, 'BRep.R3', new Map()).buildAdjacencies();
    function dotCurve2$$1(curve, t, normal, sign) {
        assert(sign == 1 || sign == -1, sign);
        const tangentDot = curve.tangentAt(t).dot(normal);
        // if tangentDot != 0 the curve simply crosses the plane
        if (!eq0(tangentDot)) {
            return sign * tangentDot;
        }
        if (curve.ddt) {
            const ddtDot = curve.ddt(t).dot(normal);
            // tangentDot == 0 ==> critical point at t, if ddtDot != 0, then it is a turning point, otherwise we can't be sure
            // and must do a numeric test
            if (!eq0(ddtDot)) {
                return ddtDot;
            }
        }
        const numericDot = curve
            .at(t)
            .to(curve.at(t + sign * 4 * NLA_PRECISION))
            .dot(normal);
        assert(!(curve instanceof L3$$1));
        return numericDot;
    }
    const INSIDE$$1 = 0, OUTSIDE$$1 = 1, COPLANAR_SAME$$1 = 2, COPLANAR_OPPOSITE$$1 = 3, ALONG_EDGE_OR_PLANE$$1 = 4;
    /**
     *
     * @param brep BREP to check
     * @param edge edge to check
     * @param dirAtEdgeA the direction vector to check
     * @param faceNormal If dirAtEdgeA doesn't split a volume, but is along a face, the returned value depends on
     *     wether that faces normal1 points in the same direction as faceNormal
     * @returns INSIDE, OUTSIDE, COPLANAR_SAME or COPLANAR_OPPOSITE
     */
    //function splitsVolumeEnclosingFaces(brep: BRep, edge: Edge, dirAtEdgeA: V3, faceNormal: V3): int {
    //    assert(arguments.length == 4)
    //    //assert(p.equals(edge.a))
    //    const ab1 = edge.aDir.unit()
    //    const relFaces = facesWithEdge(edge, brep.faces) as any[]
    //    relFaces.forEach(faceInfo => {
    //        faceInfo.normalAtEdgeA = faceInfo.face.surface.normalP(edge.a)
    //        faceInfo.edgeDirAtEdgeA = !faceInfo.reversed
    //            ? faceInfo.edge.aDir
    //            : faceInfo.edge.bDir
    //        faceInfo.outsideVector = faceInfo.edgeDirAtEdgeA.cross(faceInfo.normalAtEdgeA)
    //        faceInfo.angle = (dirAtEdgeA.angleRelativeNormal(faceInfo.outsideVector.negated(), ab1) + 2 * Math.PI +
    // NLA_PRECISION / 2) % (2 * Math.PI) }) assert(relFaces.length != 0, edge.toSource()) relFaces.sort((a, b) => a.angle
    // - b.angle) // assert(relFaces.length % 2 == 0, edge.toSource()) // even number of touching faces  if
    // (eq0(relFaces[0].angle)) { //assert(false) todo const coplanarSame = relFaces[0].normalAtEdgeA.dot(faceNormal) > 0;
    // return coplanarSame ? COPLANAR_SAME : COPLANAR_OPPOSITE } else { return !relFaces[0].reversed ? INSIDE : OUTSIDE } }
    function splitsVolumeEnclosingFaces$$1(brep, canonEdge, dirAtEdgeA, faceNormal) {
        assert(arguments.length == 4);
        assert(canonEdge == canonEdge.getCanon());
        //assert(p.equals(canonEdge.a))
        const edgeFaceInfos = brep.edgeFaces.get(canonEdge);
        assertf(() => edgeFaceInfos.length % 2 == 0);
        assertf(() => brep.edgeFaces);
        const faceInfo0 = edgeFaceInfos[0];
        const aDir1 = canonEdge.aDir.unit();
        const angleToCanon = (faceInfo0.inside.angleRelativeNormal(dirAtEdgeA, aDir1) + 2 * Math.PI + NLA_PRECISION) % (2 * Math.PI) -
            NLA_PRECISION;
        const nearestFaceInfoIndex = edgeFaceInfos.findIndex(faceInfo => lt(angleToCanon, faceInfo.angle));
        const nearestFaceInfo = edgeFaceInfos[nearestFaceInfoIndex == -1 ? edgeFaceInfos.length - 1 : nearestFaceInfoIndex - 1];
        if (eq(nearestFaceInfo.angle, angleToCanon)) {
            //assert(false) todo
            const coplanarSame = nearestFaceInfo.normalAtCanonA.dot(faceNormal) > 0;
            return coplanarSame ? COPLANAR_SAME$$1 : COPLANAR_OPPOSITE$$1;
        }
        else {
            return nearestFaceInfo.reversed ? INSIDE$$1 : OUTSIDE$$1;
        }
    }
    function splitsVolumeEnclosingFacesP$$1(brep, canonEdge, p, pInside, pFaceNormal) {
        assert(arguments.length == 5);
        assert(canonEdge == canonEdge.getCanon());
        //assert(p.equals(canonEdge.a))
        assertf(() => brep.edgeFaces);
        const edgeFaceInfos = brep.edgeFaces.get(canonEdge);
        assertf(() => edgeFaceInfos.length % 2 == 0);
        const pDir1 = canonEdge.tangentAt(canonEdge.curve.pointT(p)).unit();
        const faceInfoAngleFromPInsideNeg = (faceInfo) => {
            const faceInfoPDir = faceInfo.edge.getCanon() == faceInfo.edge ? pDir1 : pDir1.negated();
            const faceInfoInsideAtP = faceInfo.face.surface.normalP(p).cross(faceInfoPDir);
            const faceInfoAngleAtP = pInside.angleRelativeNormal(faceInfoInsideAtP, pDir1);
            return -((faceInfoAngleAtP + TAU + NLA_PRECISION) % TAU - NLA_PRECISION);
        };
        const nearestFaceInfo = edgeFaceInfos.withMax(faceInfoAngleFromPInsideNeg);
        if (eq0(faceInfoAngleFromPInsideNeg(nearestFaceInfo))) {
            //assert(false) todo
            const coplanarSame = nearestFaceInfo.face.surface.normalP(p).dot(pFaceNormal) > 0;
            return coplanarSame ? COPLANAR_SAME$$1 : COPLANAR_OPPOSITE$$1;
        }
        else {
            return nearestFaceInfo.reversed ? OUTSIDE$$1 : INSIDE$$1;
        }
    }
    function splitsVolumeEnclosingFacesP2$$1(brep, canonEdge, p, testCurve, curveT, dir, faceNormal) {
        assert(canonEdge == canonEdge.getCanon());
        //assert(p.equals(canonEdge.a))
        assertf(() => brep.edgeFaces);
        const edgeFaceInfos = brep.edgeFaces.get(canonEdge);
        assertf(() => edgeFaceInfos.length % 2 == 0);
        const pDir1 = canonEdge.tangentAt(canonEdge.curve.pointT(p)).unit();
        let pInside = testCurve.tangentAt(curveT).times(dir);
        if (pInside.isParallelTo(pDir1)) {
            pInside = testCurve.diff(curveT, 1e-4 * dir / testCurve.tangentAt(curveT).length()).rejectedFrom(pDir1);
            pInside = pInside.div(pInside.length());
        }
        let minValue = 20, advanced = false, result = OUTSIDE$$1;
        for (const faceInfo of edgeFaceInfos) {
            const faceInfoPDir = faceInfo.edge.getCanon() == faceInfo.edge ? pDir1 : pDir1.negated();
            const faceInfoInsideAtP = faceInfo.face.surface.normalP(p).cross(faceInfoPDir);
            const faceInfoAngleAtP = pInside.angleRelativeNormal(faceInfoInsideAtP, pDir1);
            const angle = (faceInfoAngleAtP + TAU + NLA_PRECISION) % TAU - NLA_PRECISION;
            if (eq0(angle)) {
                // do advanced analysis
                const normVector = faceInfo.face.surface.normalP(p);
                if (faceInfo.face.surface.containsCurve(testCurve)) {
                    const coplanarSame = normVector.dot(faceNormal) > 0;
                    return coplanarSame ? COPLANAR_SAME$$1 : COPLANAR_OPPOSITE$$1;
                }
                const testPlane = P3$$1.normalOnAnchor(pDir1, p);
                const isCurve = faceInfo.face.surface.isCurvesWithPlane(testPlane)[0];
                const isCurvePT = isCurve.pointT(p);
                const dirFactor = sign$2(isCurve.tangentAt(isCurvePT).dot(pInside));
                const eps = 1e-4;
                const iscd = isCurve
                    .at(isCurvePT)
                    .to(isCurve.at(isCurvePT + dir * dirFactor * eps))
                    .dot(normVector);
                const ecd = testCurve
                    .at(curveT)
                    .to(testCurve.at(curveT + dir * eps))
                    .dot(normVector);
                const diff = (iscd - ecd) * (faceInfo.reversed ? -1 : 1);
                if (diff > 0 && (!advanced || diff < minValue)) {
                    advanced = true;
                    minValue = diff;
                    result = faceInfo.reversed ? OUTSIDE$$1 : INSIDE$$1;
                }
            }
            else if (!advanced) {
                if (angle < minValue) {
                    minValue = angle;
                    result = faceInfo.reversed ? OUTSIDE$$1 : INSIDE$$1;
                }
            }
        }
        return result;
    }
    function splitsVolumeEnclosingCone2$$1(brep, p, curve, curveT, fb) {
        assert(curve.containsPoint(p));
        const pFaces = brep.faces.filter(face => face.getAllEdges().some(edge => edge.a.like(p)));
        for (let k = 0; k < pFaces.length; k++) {
            const face = pFaces[k];
            if (face.surface.containsCurve(curve)) {
                //assert(false)
                if (face.pointsToInside3(p, curve, curveT, fb) != PointVsFace$$1.OUTSIDE) {
                    return ALONG_EDGE_OR_PLANE$$1;
                }
            }
        }
        const EPS$$1 = 1e-6;
        return brep.containsPoint(curve.at(curveT + fb * EPS$$1), true) ? INSIDE$$1 : OUTSIDE$$1;
    }
    function fff$$1(info, surface) {
        const canonA = info.edge.reversed ? info.edge.b : info.edge.a;
        const surfaceNormalAtCanonA = surface.normalP(canonA);
        const dot = snap0(info.inside.dot(surfaceNormalAtCanonA));
        if (0 !== dot) {
            return 0 < dot ? OUTSIDE$$1 : INSIDE$$1;
        }
        if (surface.isCoplanarTo(info.face.surface)) {
            return 0 < info.normalAtCanonA.dot(surfaceNormalAtCanonA) ? COPLANAR_SAME$$1 : COPLANAR_OPPOSITE$$1;
        }
        throw new Error();
    }
    function triangulateVertices$$1(normal, vertices, holeStarts) {
        const absMaxDim = normal.maxAbsDim(), factor = sign$2(normal.e(absMaxDim));
        const contour = new Float64Array(vertices.length * 2);
        let i = vertices.length;
        /*
         var [coord0, coord1] = [['y', 'z'], ['z', 'x'], ['x', 'y']][maxAbsDim]
         while (i--) {
         contour[i * 2    ] = vertices[i][coord0] * factor
         contour[i * 2 + 1] = vertices[i][coord1]
         }
         */
        while (i--) {
            // unroll disambiguation instead of accessing elements by string name ([coord0] etc)
            // as it confuses google closure
            switch (absMaxDim) {
                case 0:
                    contour[i * 2] = vertices[i].y * factor;
                    contour[i * 2 + 1] = vertices[i].z;
                    break;
                case 1:
                    contour[i * 2] = vertices[i].z * factor;
                    contour[i * 2 + 1] = vertices[i].x;
                    break;
                case 2:
                    contour[i * 2] = vertices[i].x * factor;
                    contour[i * 2 + 1] = vertices[i].y;
                    break;
            }
        }
        return earcut_1(contour, holeStarts);
    }
    /**
     * Solves a quadratic system of equations of the form
     *      a * x + b * y = c
     *      x² + y² = 1
     * This can be understood as the intersection of the unit circle with a line.
     *      => y = (c - a x) / b
     *      => x² + (c - a x)² / b² = 1
     *      => x² b² + c² - 2 c a x + a² x² = b²
     *      => (a² + b²) x² - 2 a c x + (c² - b²) = 0
     *
     * a * b + (b -c) * (b + c)
     */
    function intersectionUnitCircleLine$$1(a, b, c) {
        assertNumbers(a, b, c);
        // TODO: disambiguate on a < b
        const term = sqrt$1(a * a + b * b - c * c);
        return {
            x1: (a * c + b * term) / (a * a + b * b),
            x2: (a * c - b * term) / (a * a + b * b),
            y1: (b * c - a * term) / (a * a + b * b),
            y2: (b * c + a * term) / (a * a + b * b),
        };
    }
    function intersectionUnitCircleLine2$$1(a, b, c) {
        assertNumbers(a, b, c);
        // TODO: disambiguate on a < b
        // cf. pqFormula
        const termSqr = snap0(a * a + b * b - c * c);
        if (termSqr < 0) {
            return [];
        }
        else if (termSqr == 0) {
            return [[a * c / (a * a + b * b), b * c / (a * a + b * b)]];
        }
        else {
            const term = sqrt$1(termSqr);
            return [
                [(a * c + b * term) / (a * a + b * b), (b * c - a * term) / (a * a + b * b)],
                [(a * c - b * term) / (a * a + b * b), (b * c + a * term) / (a * a + b * b)],
            ];
        }
    }
    /**
     * Solves a quadratic system of equations of the form
     *      a * x + b * y = c
     *      x^2 - y^2 = 1
     * This can be understood as the intersection of the unit hyperbola with a line.
     *
     * @returns with x1 >= x2 and y1 <= y2
     * a * b + (b -c) * (b + c)
     */
    function intersectionUnitHyperbolaLine$$1(a, b, c) {
        assertNumbers(a, b, c);
        const aa = a * a, bb = b * b, cc = c * c;
        // TODO: disambiguate on a < b
        //var xTerm = sqrt(4*cc*aa-4*(bb-aa)*(-cc-bb))
        const xTerm = 2 * sqrt$1(bb * cc + bb * bb - aa * bb);
        const yTerm = sqrt$1(4 * cc * bb - 4 * (bb - aa) * (cc - aa));
        return {
            x1: (-2 * a * c + xTerm) / 2 / (bb - aa),
            x2: (-2 * a * c - xTerm) / 2 / (bb - aa),
            y1: (2 * b * c - yTerm) / 2 / (bb - aa),
            y2: (2 * b * c + yTerm) / 2 / (bb - aa),
        };
    }
    function curvePointPP$$1(ps1, ps2, startPoint, dontCheck) {
        const EPS$$1 = NLA_PRECISION / 4;
        //if (!dontCheck) {
        //    const p = curvePointPP(ps1, ps2, startPoint, true).p
        //    if (!ps1.containsPoint(p)) {
        //        console.log("foo, startPoint was " + startPoint.sce)
        //        ps1.containsPoint(p)
        //    }
        //}
        let Q = startPoint;
        let st1 = ps1.pointFoot(Q);
        let st2 = ps2.pointFoot(Q);
        let a, b, aNormal, bNormal, abNormalsCross;
        //console.log("curvePointPP, startPoint was " + startPoint.sce)
        //console.log(Q.sce+ ',')
        let i = 16;
        do {
            a = ps1.pUV(st1.x, st1.y);
            b = ps2.pUV(st2.x, st2.y);
            if (eq0(a.distanceTo(b), EPS$$1))
                break;
            // drPs.push({p:a,text:'a'+j+' '+i})
            // drPs.push({p:b,text:'b'+j+' '+i})
            aNormal = ps1.normalUV(st1.x, st1.y);
            bNormal = ps2.normalUV(st2.x, st2.y);
            // next Q is the intersection of the planes
            // (x - a) * aNormal,
            // (x - b) * bNormal and
            // (x - Q) * (aNormal X bNormal)
            abNormalsCross = aNormal.cross(bNormal);
            // drVs.push({anchor: Q, dir: aNormal})
            // drVs.push({anchor: Q, dir: bNormal})
            Q = V3.add(bNormal.cross(abNormalsCross).times(a.dot(aNormal)), abNormalsCross.cross(aNormal).times(b.dot(bNormal)), abNormalsCross.times(abNormalsCross.dot(Q))).div(abNormalsCross.squared());
            //console.log(Q.sce+ ',')
            // feet of Q on ps1 and ps2 (closest points)
            st1 = ps1.pointFoot(Q, st1.x, st1.y);
            st2 = ps2.pointFoot(Q, st2.x, st2.y);
        } while (--i);
        //assert(ps1.containsPoint(Q), Q, ps1)
        //assert(ps2.containsPoint(Q))
        if (!eq0(a.distanceTo(b), EPS$$1)) {
            return undefined;
        }
        return { p: Q, st1: st1, st2: st2 };
    }
    /**
     * Follow the intersection curve of two parametric surfaces starting from a given point.
     * @param {ParametricSurface} ps1
     * @param {ParametricSurface} ps2
     * @param {number} s1Step
     * @param {number} t1Step
     * @param {number} s2Step
     * @param {number} t2Step
     * @param {number} curveStepSize
     * @return {Curve[]}
     */
    function followAlgorithmPP$$1(ps1, ps2, startPoint, curveStepSize, bounds1 = uvInAABB2$$1.bind(undefined, ps1), bounds2 = uvInAABB2$$1.bind(undefined, ps2)) {
        const points = [];
        const tangents = [];
        const st1s = [];
        const st2s = [];
        let Q = startPoint;
        let st1 = ps1.uvP(Q);
        let st2 = ps2.uvP(Q);
        assert(ps1.pUV(st1.x, st1.y).like(Q));
        assert(st1.like(ps1.pointFoot(Q, st1.x, st1.y)));
        assert(st2.like(ps2.pointFoot(Q, st2.x, st2.y)));
        assert(ps2.pUV(st2.x, st2.y).like(Q));
        for (let i = 0; i < 1000; i++) {
            ({ p: Q, st1, st2 } = curvePointPP$$1(ps1, ps2, Q));
            assert(ps1.containsPoint(Q), Q, ps1);
            assert(ps2.containsPoint(Q));
            const aNormal = ps1.normalUV(st1.x, st1.y);
            const bNormal = ps2.normalUV(st2.x, st2.y);
            const tangent = aNormal.cross(bNormal).toLength(curveStepSize);
            tangents.push(tangent);
            points.push(Q);
            st1s.push(st1);
            st2s.push(st2);
            if (i > 4) {
                if (!bounds1(st1.x, st1.y) || !bounds2(st2.x, st2.y)) {
                    break;
                }
            }
            Q = Q.plus(tangent);
        }
        return { points, tangents, st1s, st2s };
    }
    /**
     * Iteratively calculate points on an implicit 2D curve.
     * @param ic The curve in question.
     * @param startP The point at which to start.
     * @param stepLength The step the algorithm takes. Will be the approximate distance between points.
     * @param bounds Bounds function.
     * @param endP End point. If undefined, algorithm will continue until out of bounds or back at start point.
     * @param startTangent TODO Ignore this.
     * @returns Calculated points and tangents. points[0] and tangents[0] will be startP and startTangent.
     */
    function followAlgorithm2d$$1(ic, startP, stepLength = 0.5, bounds, validUV, endP, startTangent) {
        assertNumbers(stepLength, ic(0, 0));
        assertVectors(startP);
        if (!startTangent) {
            startTangent = new V3(-ic.y(startP.x, startP.y), ic.x(startP.x, startP.y), 0).toLength(stepLength);
        }
        assertVectors(startTangent);
        const points = [];
        const tangents = [];
        assert(eq0(ic(startP.x, startP.y), 0.01), 'isZero(implicitCurve(startPoint.x, startPoint.y))', ic(startP.x, startP.y));
        let i = 0, p = startP, tangent = startTangent, fullLoop = false;
        do {
            points.push(p);
            tangents.push(tangent);
            const searchStart = p.plus(tangent);
            assert(searchStart);
            const newP = curvePointMF$$1(ic, searchStart);
            const dfpdx = ic.x(newP.x, newP.y), dfpdy = ic.y(newP.x, newP.y);
            const newTangent = new V3(-dfpdy, dfpdx, 0).toLength(stepLength);
            //const reversedDir = p.minus(prevp).dot(tangent) < 0
            assert(!p.equals(newP));
            // check if we passed a singularity
            if (tangent.dot(newTangent) < 0) {
                const singularity = newtonIterate2d(ic.x, ic.y, p.x, p.y);
                if (eq0(ic(singularity.x, singularity.y)) && singularity.distanceTo(p) < abs$3(stepLength)) {
                    // end on this point
                    points.push(singularity);
                    tangents.push(p.to(singularity));
                    break;
                }
                else {
                    throw new Error();
                }
            }
            // check for endP
            if (endP && p.equals(endP)) {
                break;
            }
            // check if loop
            if (fullLoop) {
                if (p.distanceTo(startP) > abs$3(stepLength)) {
                    points.pop();
                    tangents.pop();
                    assert(points.last.distanceTo(startP) <= abs$3(stepLength));
                    break;
                }
            }
            else {
                if (i > 4 && p.distanceTo(startP) <= abs$3(stepLength)) {
                    fullLoop = true;
                }
            }
            // check if out of bounds
            if (i > 1 && !uvInAABB2$$1(bounds, p.x, p.y)) {
                const endP = figureOutBorderPoint(bounds, p, ic);
                points.pop();
                tangents.pop();
                if (points.last.distanceTo(endP) < abs$3(stepLength) / 2) {
                    points.pop();
                    tangents.pop();
                }
                const endTangent = new V3(-ic.y(endP.x, endP.y), ic.x(endP.x, endP.y), 0).toLength(stepLength);
                points.push(endP);
                tangents.push(endTangent);
                break;
            }
            if (i > 4 && !validUV(p.x, p.y)) {
                break;
            }
            assert(eq0(ic(newP.x, newP.y), NLA_PRECISION * 2), p, newP, searchStart, ic(newP.x, newP.y));
            tangent = newTangent;
            p = newP;
        } while (++i < 1000);
        assert(i < 1000);
        //assert(points.length > 6)
        return { points, tangents };
    }
    /**
     * Given a point p just outside the bounds, figure out the nearby intersection of the bounds with the ic.
     * @param bounds
     * @param p
     * @param ic
     */
    function figureOutBorderPoint(bounds, p, ic) {
        if (p.x < bounds.uMin || bounds.uMax < p.x) {
            const u = bounds.uMax < p.x ? bounds.uMax : bounds.uMin;
            const v = newtonIterateWithDerivative(t => ic(u, t), p.y, 4, t => ic.y(u, t));
            if (uvInAABB2$$1(bounds, u, v)) {
                return new V3(u, v, 0);
            }
        }
        if (p.y < bounds.vMin || bounds.vMax < p.y) {
            const v = bounds.vMax < p.y ? bounds.vMax : bounds.vMin;
            const u = newtonIterateWithDerivative(s => ic(s, v), p.x, 4, s => ic.x(s, v));
            assert(uvInAABB2$$1(bounds, u, v));
            return new V3(u, v, 0);
        }
        throw new Error(p + ' ' + bounds);
    }
    var MathFunctionR2R$$1;
    (function (MathFunctionR2R$$1) {
        function forNerdamer(expression, args = ['x', 'y']) {
            const ndf = nerdamer_core(expression);
            const ndfs = nerdamer_core.diff(ndf, args[0]);
            const ndft = nerdamer_core.diff(ndf, args[1]);
            const f = ndf.buildFunction(args);
            f.x = ndfs.buildFunction(args);
            f.y = ndft.buildFunction(args);
            f.xx = nerdamer_core.diff(ndfs, args[0]).buildFunction(args);
            f.xy = nerdamer_core.diff(ndfs, args[1]).buildFunction(args);
            f.yy = nerdamer_core.diff(ndft, args[1]).buildFunction(args);
            return f;
        }
        MathFunctionR2R$$1.forNerdamer = forNerdamer;
        function nerdamerToR2_R(expression, args = ['x', 'y']) {
            return expression.buildFunction(args);
        }
        MathFunctionR2R$$1.nerdamerToR2_R = nerdamerToR2_R;
        function forFFxFy(f, fx, fy) {
            f.x = fx;
            f.y = fy;
            return f;
        }
        MathFunctionR2R$$1.forFFxFy = forFFxFy;
    })(MathFunctionR2R$$1 || (MathFunctionR2R$$1 = {}));

    const fragmentShaderLighting = `
	precision highp float;
	uniform vec4 color;
	uniform vec3 camPos;
	varying vec3 normal;
	varying vec4 vPosition;
	void main() {
		vec3 normal1 = normalize(normal);
		vec3 lightPos = vec3(1000, 2000, 4000);
		vec3 lightDir = normalize(vPosition.xyz - lightPos);
        vec3 reflectionDirection = reflect(lightDir, normal1);
        vec3 eyeDirection = normalize(camPos.xyz-vPosition.xyz);
        float uMaterialShininess = 256.0;
		float specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), uMaterialShininess);
		float lightIntensity = 0.6 + 0.2 * max(0.0, -dot(lightDir, normal1)) + 0.2*specularLightWeighting;
		gl_FragColor = vec4(vec3(color) * lightIntensity, 1);
	}
`;
    const vertexShaderLighting = `
	uniform mat4 ts_ModelViewProjectionMatrix;
	uniform mat4 ts_ModelViewMatrix;
	attribute vec4 ts_Vertex;
	uniform mat3 ts_NormalMatrix;
	attribute vec3 ts_Normal;
	uniform vec4 color;
	varying vec3 normal;
	varying vec4 vPosition;
	void main() {
		gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;
        vPosition = ts_ModelViewMatrix * ts_Vertex;
		normal = normalize(ts_NormalMatrix * ts_Normal);
	}
`;
    const vertexShaderWaves = `
	uniform mat4 ts_ModelViewProjectionMatrix;
	uniform mat4 ts_ModelViewMatrix;
	attribute vec4 ts_Vertex;
	uniform mat3 ts_NormalMatrix;
	attribute vec3 ts_Normal;
	uniform vec4 color;
	varying vec3 normal;
	varying vec4 vPosition;
	void main() {
		normal = normalize(ts_NormalMatrix * ts_Normal);
		float offset = mod  (((ts_Vertex.x + ts_Vertex.y + ts_Vertex.z) * 31.0), 20.0) - 10.0;
		vec4 modPos = ts_Vertex + vec4(normal * offset, 0);
		gl_Position = ts_ModelViewProjectionMatrix * modPos;
        vPosition = ts_ModelViewMatrix * modPos;
	}
`;
    const vertexShaderBasic = `
	uniform mat4 ts_ModelViewProjectionMatrix;
	attribute vec4 ts_Vertex;
	void main() {
		gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;
	}
`;
    const vertexShaderColor = `
	uniform mat4 ts_ModelViewProjectionMatrix;
	attribute vec4 ts_Vertex;
	attribute vec4 ts_Color;
	varying vec4 fragColor;
	void main() {
		gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;
		fragColor = ts_Color;
	}
`;
    const vertexShaderArc = `
	uniform mat4 ts_ModelViewProjectionMatrix;
	attribute vec4 ts_Vertex;
	uniform float step, offset;
	uniform float radius, width;
	void main() {
		float r = radius;
		float t = offset + ts_Vertex.x * step;
		float pRadius = r - ts_Vertex.y * width;
		vec4 p = vec4(pRadius * cos(t), pRadius * sin(t), 0, 1);
		gl_Position = ts_ModelViewProjectionMatrix * p;
}
`;
    const vertexShaderConic3d = `
	uniform mat4 ts_ModelViewProjectionMatrix;
	attribute vec4 ts_Vertex;
	uniform float startT, endT, scale;
	uniform vec3 center, f1, f2;
	uniform int mode;
	float sinh(float x) { return (exp(x) - exp(-x)) / 2.0; }
	float cosh(float x) { return (exp(x) + exp(-x)) / 2.0; }
	void main() {
		float t = startT + ts_Vertex.x * (endT - startT);

		vec3 normal = normalize(cross(f1, f2));

		vec3 p, tangent;
		if (0 == mode) { // ellipse
			p = center + f1 * cos(t) + f2 * sin(t);
			tangent = f1 * -sin(t) + f2 * cos(t);
		}
		if (1 == mode) { // parabola
			p = center + f1 * t + f2 * t * t;
			tangent = f1 + 2.0 * f2 * t;
		}
		if (2 == mode) { // hyperbola
			p = center + f1 * cosh(t) + f2 * sinh(t);
			tangent = f1 * sinh(t) + f2 * cosh(t);
		}
		vec3 outDir = normalize(cross(normal, tangent));
		vec3 p2 = p + scale * (outDir * ts_Vertex.y + normal * ts_Vertex.z);
		gl_Position = ts_ModelViewProjectionMatrix * vec4(p2, 1);
	}
`;
    const vertexShaderNURBS = `#version 300 es
	uniform mat4 ts_ModelViewProjectionMatrix;
	in vec4 ts_Vertex;
	uniform float startT, endT, scale;
	uniform vec4 points[32];
	uniform int pointCount, degree;
	uniform float knots[40];
	uniform vec3 normal;
	const int MIN_DEGREE = 1;
	const int MAX_DEGREE = 6;
	
	int tInterval(float t) {
		for (int s = degree; s < 40 - 1 - degree; s++) {
			if (t >= knots[s] && t <= knots[s + 1]) {
				return s;
			}
		}
	}
	
	vec4 stepp(int k, int i, vec4 dkMinus1iMinus1, vec4 dkMinus1i) {
	    return dkMinus1i - dkMinus1iMinus1 * float(k) / (knots[i + degree - k] - knots[i - 1]);
	}
	
	void main() {
		// ts_Vertex.x is in [0, 1]
		float t = startT + ts_Vertex.x * (endT - startT);
		
		int s = tInterval(t);
		
		vec4 v[MAX_DEGREE + 1];
		for (int i = 0; i < degree + 1; i++) {
		    v[i] = points[s - degree + i];
		}
		
		vec4 pTangent4, ddt4 = vec4(0, 0, 1, 0);
		for (int level = 0; level < degree; level++) {
			if (level == degree - 2) {
				// see https://www.globalspec.com/reference/61012/203279/10-8-derivatives
				vec4 a = v[degree];
				vec4 b = v[degree - 1];
				vec4 c = v[degree - 2];
				ddt4 = stepp(degree, s + 1, stepp(degree - 1, s + 1, a, b), stepp(degree - 1, s, b, c));
			}
			if (level == degree - 1) {
				vec4 a = v[degree];
				vec4 b = v[degree - 1];
				pTangent4 = (b - a) * (float(degree) / (knots[s] - knots[s + 1]));
			}
			for (int i = degree; i > level; i--) {
				float alpha = (t - knots[i + s - degree]) / (knots[i + s - level] - knots[i + s - degree]);

				// interpolate each component
                v[i] = (1.0 - alpha) * v[i - 1] + alpha * v[i];
			}
		}
		
		vec4 p4 = v[degree];
		
		vec3 p = p4.xyz / p4.w;
		vec3 pTangent = ((pTangent4.xyz * p4.w) - (p4.xyz * pTangent4.w)) / (p4.w * p4.w);
		vec3 ddt = (
		    p4.xyz * (-p4.w * ddt4.w + 2.0 * pow(pTangent4.w, 2.0))
		    + pTangent4.xyz * (-2.0 * p4.w * pTangent4.w) 
		    + ddt4.xyz * pow(p4.w, 2.0)
        ) / pow(p4.w, 3.0);
		
		vec3 outDir = normalize(cross(ddt, pTangent));
		vec3 correctNormal = normalize(cross(pTangent, outDir));
		vec3 p2 = p + scale * (outDir * ts_Vertex.y + correctNormal * ts_Vertex.z);
		gl_Position = ts_ModelViewProjectionMatrix * vec4(p2, 1);
    }
`;
    const vertexShaderBezier = `
    // calculates a bezier curve using ts_Vertex.x as the (t) parameter of the curve
	uniform mat4 ts_ModelViewProjectionMatrix;
	attribute vec4 ts_Vertex;
	uniform float width, startT, endT;
	uniform vec3 p0, p1, p2, p3;
	void main() {
		// ts_Vertex.x is in [0, 1]
		float t = startT + ts_Vertex.x * (endT - startT), s = 1.0 - t;
		float c0 = s * s * s, c1 = 3.0 * s * s * t, c2 = 3.0 * s * t * t, c3 = t * t * t;
		vec3 pPos = p0 * c0 + p1 * c1 + p2 * c2 + p3 * c3;
		float c01 = 3.0 * s * s, c12 = 6.0 * s * t, c23 = 3.0 * t * t;
		vec3 pTangent = (p1 - p0) * c01 + (p2 - p1) * c12 + (p3 - p2) * c23;
		vec3 pNormal = normalize(vec3(pTangent.y, -pTangent.x, 0));
		vec4 p = vec4(pPos - ts_Vertex.y * width * pNormal, 1);
		gl_Position = ts_ModelViewProjectionMatrix * p;
	}
`;
    const vertexShaderBezier3d = `
    precision highp float;
    // calculates a bezier curve using ts_Vertex.x as the (t) parameter of the curve
	uniform float scale, startT, endT;
	uniform vec3 ps[4];
	uniform vec3 p0, p1, p2, p3, normal;
	uniform mat4 ts_ModelViewProjectionMatrix;
	attribute vec4 ts_Vertex;
	void main() {
		// ts_Vertex.y is in [0, 1]
		vec3 p5 = ps[0];
		float t = startT * (1.0 - ts_Vertex.x) + endT * ts_Vertex.x, s = 1.0 - t;
		float c0 = s * s * s, 
		      c1 = 3.0 * s * s * t, 
		      c2 = 3.0 * s * t * t, c3 = t * t * t;
		vec3 p = (p0 * c0 + p1 * c1) + (p2 * c2 + p3 * c3);
		float c01 = 3.0 * s * s, 
		      c12 = 6.0 * s * t, 
		      c23 = 3.0 * t * t;
		vec3 pTangent = (p1 - p0) * c01 + (p2 - p1) * c12 + (p3 - p2) * c23;
		vec3 outDir = normalize(cross(normal, pTangent));
		vec3 correctNormal = normalize(cross(pTangent, outDir));
		vec3 p2 = p + scale * (outDir * ts_Vertex.y + correctNormal * ts_Vertex.z);
		gl_Position = ts_ModelViewProjectionMatrix * vec4(p2, 1);
	}
`;
    const vertexShaderGeneric = `
	uniform float scale;
	uniform mat4 ts_ModelViewProjectionMatrix;
	attribute vec4 ts_Vertex;
	uniform mat3 ts_NormalMatrix;
	attribute vec3 ts_Normal;
	void main() {
		vec3 normal = normalize(ts_NormalMatrix * ts_Normal);
		vec4 vertexPos = ts_Vertex + vec4(normal * scale, 0);
		gl_Position = ts_ModelViewProjectionMatrix * vertexPos;
	}
`;
    const vertexShaderRing = `
	#define M_PI 3.1415926535897932384626433832795
	uniform float step;
	uniform float innerRadius, outerRadius;
	attribute float index;
	uniform mat4 ts_ModelViewProjectionMatrix;
	attribute vec4 ts_Vertex;
	void main() {
		gl_Position = ts_ModelViewProjectionMatrix * vec4(index, index, index, 1);
		float id = atan(ts_Vertex.x, ts_Vertex.y) / M_PI  * 32.0;
		float radius = mod(id, 2.0) < 1.0 ? outerRadius : innerRadius;
		gl_Position = ts_ModelViewProjectionMatrix * vec4(radius * cos(index * step), radius * sin(index * step), 0, 1);
	}
`;
    const fragmentShaderColor = `
	precision highp float;
	uniform vec4 color;
	void main() {
		gl_FragColor = color;
	}
`;
    const fragmentShaderColor3 = `#version 300 es
	precision highp float;
	uniform vec4 color;
	out vec4 fragColor;
	void main() {
		fragColor = color;
	}
`;
    const fragmentShaderVaryingColor = `
	precision highp float;
	varying vec4 fragColor;
	void main() {
		gl_FragColor = fragColor;
	}
`;
    const fragmentShaderColorHighlight = `
	precision highp float;
	uniform vec4 color;
	void main() {
		float diagonal = (gl_FragCoord.x + 2.0 * gl_FragCoord.y);
		if (mod(diagonal, 50.0) > 40.0) { // mod(diagonal, 2.0) > 1.0
			discard;
			//gl_FragColor = color + vec4(0.2,0.2,0.2,0);
		} else {
			gl_FragColor = color - vec4(0.2,0.2,0.2,0);
		}
	}
`;
    const vertexShaderTexture = `
	varying vec2 texturePos;
	attribute vec4 ts_Vertex;
	uniform mat4 ts_ModelViewProjectionMatrix;
	void main() {
		texturePos = ts_Vertex.xy;
		gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;
	}
`;
    const fragmentShaderTextureColor = `
	precision highp float;
	varying vec2 texturePos;
	uniform vec4 color;
	uniform sampler2D texture;
	void main() {
		gl_FragColor = texture2D(texture, texturePos) * color;
	}
`;

    const COLORS$$1 = {
        RD_FILL: chroma('#9EDBF9'),
        RD_STROKE: chroma('#77B0E0'),
        TS_FILL: chroma('#D19FE3'),
        TS_STROKE: chroma('#A76BC2'),
        PP_FILL: chroma('#F3B6CF'),
        PP_STROKE: chroma('#EB81B4'),
    };
    class BREPGLContext$$1 {
        constructor(gl) {
            this.cachedMeshes = new WeakMap();
            this.shaders = initShaders$$1(gl);
            initMeshes$$1((this.meshes = {}), gl);
        }
        static create(gl) {
            addOwnProperties(gl, BREPGLContext$$1.prototype);
            addOwnProperties(gl, new BREPGLContext$$1(gl));
            return gl;
        }
        drawPoint(p, color = GL_COLOR_BLACK$$1, size = 5) {
            this.pushMatrix();
            this.translate(p);
            this.scale(size / 2, size / 2, size / 2);
            this.shaders.singleColor.uniforms({ color: color }).draw(this.meshes.sphere1);
            this.popMatrix();
        }
        drawEdge(edge, color = GL_COLOR_BLACK$$1, width = 2) {
            CURVE_PAINTERS$$1[edge.curve.constructor.name](this, edge.curve, color, edge.minT, edge.maxT, width);
        }
        drawCurve(curve, color = GL_COLOR_BLACK$$1, width = 2, tStart, tEnd) {
            CURVE_PAINTERS$$1[curve.constructor.name](this, curve, color, tStart, tEnd, width);
        }
        drawVector(vector, anchor, color = GL_COLOR_BLACK$$1, size = 1) {
            if (vector.likeO())
                return;
            this.pushMatrix();
            const headLength = size * 4;
            if (headLength > vector.length())
                return;
            const vT = vector.getPerpendicular().unit();
            this.multMatrix(M4.forSys(vector.unit(), vT, vector.cross(vT).unit(), anchor));
            this.scale(vector.length() - headLength, size / 2, size / 2);
            this.shaders.singleColor
                .uniforms({
                color: color,
            })
                .draw(this.meshes.vectorShaft);
            this.scale(1 / (vector.length() - headLength), 1, 1);
            this.translate(vector.length() - headLength, 0, 0);
            this.scale(headLength / 2, 1, 1);
            this.shaders.singleColor.draw(this.meshes.vectorHead);
            this.popMatrix();
        }
        drawVectors(drVs, size = undefined) {
            this.drawVector(V3.X, V3.O, chroma('red').gl(), size);
            this.drawVector(V3.Y, V3.O, chroma('green').gl(), size);
            this.drawVector(V3.Z, V3.O, chroma('blue').gl(), size);
            drVs.forEach(vi => this.drawVector(vi.v, vi.anchor, vi.color, size));
        }
        drawPlane(customPlane, color, dotted = false) {
            this.pushMatrix();
            this.multMatrix(M4.forSys(customPlane.right, customPlane.up, customPlane.normal1));
            this.translate(customPlane.uMin, customPlane.vMin, customPlane.w);
            this.scale(customPlane.uMax - customPlane.uMin, customPlane.vMax - customPlane.vMin, 1);
            const mesh = dotted ? this.meshes.xyDottedLinePlane : this.meshes.xyLinePlane;
            this.shaders.singleColor.uniforms({ color: color }).draw(mesh, this.LINES);
            this.popMatrix();
        }
        drawBox(m4, color) {
            this.pushMatrix();
            this.multMatrix(m4);
            if (color) {
                this.shaders.singleColor.uniforms({ color: color }).draw(this.meshes.cube, this.LINES);
            }
            else {
                this.shaders.multiColor.draw(this.meshes.cube, this.LINES);
            }
            this.popMatrix();
        }
    }
    function conicPainter(mode, gl, ellipse, color, startT, endT, width = 2) {
        gl.shaders.ellipse3d
            .uniforms({
            f1: ellipse.f1,
            f2: ellipse.f2,
            center: ellipse.center,
            color: color,
            startT: startT,
            endT: endT,
            scale: width,
            mode: mode,
        })
            .draw(gl.meshes.pipe);
    }
    const CURVE_PAINTERS$$1 = {
        [EllipseCurve$$1.name]: conicPainter.bind(undefined, 0),
        [ParabolaCurve$$1.name]: conicPainter.bind(undefined, 1),
        [HyperbolaCurve$$1.name]: conicPainter.bind(undefined, 2),
        [ImplicitCurve$$1.name](gl, curve, color, startT, endT, width = 2) {
            let mesh = gl.cachedMeshes.get(curve);
            const RES = 4;
            if (!mesh) {
                mesh = new Mesh$$1().addIndexBuffer('TRIANGLES').addVertexBuffer('normals', 'ts_Normal');
                curve.addToMesh(mesh, RES);
                mesh.compile();
                gl.cachedMeshes.set(curve, mesh);
            }
            const startIndex = ceil(startT);
            const endIndex = floor$1(endT);
            if (startIndex <= endIndex) {
                const indexFactor = 2 * // no of triangles per face
                    RES * // no of faces
                    3; // no of indexes per triangle
                gl.shaders.generic3d
                    .uniforms({
                    color: color,
                    scale: width,
                })
                    .draw(mesh, gl.TRIANGLES, startIndex * indexFactor, (floor$1(endT) - startIndex) * indexFactor);
                if (startT % 1 !== 0) {
                    const p = curve.at(startT);
                    gl.pushMatrix();
                    const m = M4.forSys(p.to(curve.points[startIndex]), mesh.normals[startIndex * RES].toLength(width), mesh.normals[startIndex * RES + 1].toLength(width), p);
                    gl.multMatrix(m);
                    gl.shaders.singleColor.uniforms({ color: color }).draw(gl.meshes.pipeSegmentForICurve);
                    console.log(gl.meshes.pipeSegmentForICurve);
                    gl.popMatrix();
                }
                if (endT % 1 !== 0) {
                    const p = curve.at(endT);
                    gl.pushMatrix();
                    const m = M4.forSys(curve.points[endIndex].to(p), mesh.normals[endIndex * RES].toLength(width), mesh.normals[endIndex * RES + 1].toLength(width), curve.points[endIndex]);
                    gl.multMatrix(m);
                    gl.shaders.singleColor.uniforms({ color: color }).draw(gl.meshes.pipeSegmentForICurve);
                    gl.popMatrix();
                }
            }
            else {
                const p1 = curve.at(startT);
                const p2 = curve.at(endT);
                gl.pushMatrix();
                const v0 = p1.to(p2), v1 = v0.getPerpendicular().toLength(width), v2 = v0.cross(v1).toLength(width);
                const m = M4.forSys(v0, v1, v2, p1);
                gl.multMatrix(m);
                gl.shaders.singleColor.uniforms({ color: color }).draw(gl.meshes.pipeSegmentForICurve);
                gl.popMatrix();
            }
        },
        [BezierCurve$$1.name](gl, curve, color, startT, endT, width = 2, normal = V3.Z) {
            gl.shaders.bezier3d
                .uniforms({
                p0: curve.p0,
                p1: curve.p1,
                p2: curve.p2,
                p3: curve.p3,
                color: color,
                startT: startT,
                endT: endT,
                scale: width,
                normal: normal,
            })
                .draw(gl.meshes.pipe);
        },
        [NURBS$$1.name](gl, curve, color, startT, endT, width = 2, normal = V3.Z) {
            gl.shaders.nurbs
                .uniforms({
                'points[0]': Vector.pack(curve.points),
                degree: curve.degree,
                'knots[0]': curve.knots,
                color: color,
                startT: startT,
                endT: endT,
                scale: width,
                normal: normal,
            })
                .draw(gl.meshes.pipe);
        },
        [L3$$1.name](gl, curve, color, startT, endT, width = 2, normal = V3.Z) {
            gl.pushMatrix();
            const a = curve.at(startT), b = curve.at(endT);
            const ab = b.minus(a), abT = ab.getPerpendicular().unit();
            const m = M4.forSys(ab, abT, ab.cross(abT).unit(), a);
            gl.multMatrix(m);
            gl.scale(1, width, width);
            gl.shaders.singleColor
                .uniforms({
                color: color,
            })
                .draw(gl.meshes.pipe);
            gl.popMatrix();
        },
    };
    CURVE_PAINTERS$$1[PICurve$$1.name] = CURVE_PAINTERS$$1[ImplicitCurve$$1.name];
    CURVE_PAINTERS$$1[PPCurve$$1.name] = CURVE_PAINTERS$$1[ImplicitCurve$$1.name];
    function initMeshes$$1(_meshes, _gl) {
        _gl.makeCurrent();
        _meshes.cube = (() => {
            const cube = B2T$$1.box()
                .toMesh()
                .addVertexBuffer('colors', 'ts_Color');
            cube.colors = cube.vertices.map(p => [p.x, p.y, p.z, 1].map(x => x * 0.9));
            cube.compile();
            return cube;
        })();
        _meshes.sphere1 = Mesh$$1.sphere(2);
        _meshes.segment = Mesh$$1.plane({ startY: -0.5, height: 1, detailX: 128 });
        _meshes.text = Mesh$$1.plane();
        _meshes.vector = Mesh$$1.rotation([V3.O, V$2(0, 0.05, 0), V$2(0.8, 0.05), V$2(0.8, 0.1), V$2(1, 0)], L3$$1.X, TAU, 16, true);
        _meshes.vectorShaft = Mesh$$1.rotation([V3.O, V3.Y, V3.XY], L3$$1.X, TAU, 8, true);
        _meshes.vectorHead = Mesh$$1.rotation([V3.Y, V$2(0, 2, 0), V$2(2, 0, 0)], L3$$1.X, TAU, 8, true);
        _meshes.pipe = Mesh$$1.rotation(arrayFromFunction(512, (i, l) => new V3(i / (l - 1), -0.5, 0)), L3$$1.X, TAU, 8, true);
        _meshes.xyLinePlane = Mesh$$1.plane();
        _meshes.xyDottedLinePlane = makeDottedLinePlane();
        _meshes.pipeSegmentForICurve = Mesh$$1.offsetVertices(M4.rotateY(90 * DEG).transformedPoints(arrayFromFunction(4, i => V3.polar(1, TAU * i / 4))), V3.X, true);
    }
    function initShaders$$1(_gl) {
        _gl.makeCurrent();
        return {
            singleColor: Shader$$1.create(vertexShaderBasic, fragmentShaderColor),
            multiColor: Shader$$1.create(vertexShaderColor, fragmentShaderVaryingColor),
            singleColorHighlight: Shader$$1.create(vertexShaderBasic, fragmentShaderColorHighlight),
            textureColor: Shader$$1.create(vertexShaderTexture, fragmentShaderTextureColor),
            arc: Shader$$1.create(vertexShaderRing, fragmentShaderColor),
            arc2: Shader$$1.create(vertexShaderArc, fragmentShaderColor),
            ellipse3d: Shader$$1.create(vertexShaderConic3d, fragmentShaderColor),
            generic3d: Shader$$1.create(vertexShaderGeneric, fragmentShaderColor),
            bezier3d: Shader$$1.create(vertexShaderBezier3d, fragmentShaderColor),
            nurbs: Shader$$1.create(vertexShaderNURBS, fragmentShaderColor3),
            bezier: Shader$$1.create(vertexShaderBezier, fragmentShaderColor),
            lighting: Shader$$1.create(vertexShaderLighting, fragmentShaderLighting),
            waves: Shader$$1.create(vertexShaderWaves, fragmentShaderLighting),
        };
    }
    function makeDottedLinePlane(count = 128) {
        const mesh = new Mesh$$1().addIndexBuffer('LINES');
        const OXvertices = arrayFromFunction(count, i => new V3(i / count, 0, 0));
        mesh.vertices.push(...OXvertices);
        mesh.vertices.push(...M4.forSys(V3.Y, V3.O, V3.O, V3.X).transformedPoints(OXvertices));
        mesh.vertices.push(...M4.forSys(V3.X.negated(), V3.O, V3.O, new V3(1, 1, 0)).transformedPoints(OXvertices));
        mesh.vertices.push(...M4.forSys(V3.Y.negated(), V3.O, V3.O, V3.Y).transformedPoints(OXvertices));
        mesh.LINES = arrayFromFunction(count * 4, i => i - (i >= count * 2 ? 1 : 0));
        mesh.compile();
        return mesh;
    }
    function initNavigationEvents$$1(_gl, eye, paintScreen) {
        const canvas = _gl.canvas;
        let lastPos = V3.O;
        //_gl.onmousedown.push((e) => {
        //	e.preventDefault()
        //	e.stopPropagation()
        //})
        //_gl.onmouseup.push((e) => {
        //	e.preventDefault()
        //	e.stopPropagation()
        //})
        canvas.addEventListener('mousemove', (e) => {
            const pagePos = V$2(e.pageX, e.pageY);
            const delta = lastPos.to(pagePos);
            //noinspection JSBitwiseOperatorUsage
            if (e.buttons & 4) {
                // pan
                const moveCamera = V$2(-delta.x * 2 / _gl.canvas.width, delta.y * 2 / _gl.canvas.height);
                const inverseProjectionMatrix = _gl.projectionMatrix.inversed();
                const worldMoveCamera = inverseProjectionMatrix.transformVector(moveCamera);
                eye.pos = eye.pos.plus(worldMoveCamera);
                eye.focus = eye.focus.plus(worldMoveCamera);
                setupCamera$$1(eye, _gl);
                paintScreen();
            }
            // scene rotation
            //noinspection JSBitwiseOperatorUsage
            if (e.buttons & 2) {
                const rotateLR = -delta.x / 6.0 * DEG;
                const rotateUD = -delta.y / 6.0 * DEG;
                // rotate
                let matrix = M4.rotateLine(eye.focus, eye.up, rotateLR);
                //let horizontalRotationAxis = focus.minus(pos).cross(up)
                const horizontalRotationAxis = eye.up.cross(eye.pos.minus(eye.focus));
                matrix = matrix.times(M4.rotateLine(eye.focus, horizontalRotationAxis, rotateUD));
                eye.pos = matrix.transformPoint(eye.pos);
                eye.up = matrix.transformVector(eye.up);
                setupCamera$$1(eye, _gl);
                paintScreen();
            }
            lastPos = pagePos;
        });
        canvas.addEventListener('wheel', (e) => {
            // zoom
            const wheelY = -sign$2(e.deltaY) * 2;
            // console.log(e.deltaY, e.deltaX)
            eye.zoomFactor *= pow(0.9, -wheelY);
            const mouseCoordsOnCanvas = getPosOnTarget$$1(e);
            const mousePosFrustrum = V$2(mouseCoordsOnCanvas.x * 2 / _gl.canvas.offsetWidth - 1, -mouseCoordsOnCanvas.y * 2 / _gl.canvas.offsetHeight + 1, 0);
            const moveCamera = mousePosFrustrum.times(1 - 1 / pow(0.9, -wheelY));
            const inverseProjectionMatrix = _gl.projectionMatrix.inversed();
            const worldMoveCamera = inverseProjectionMatrix.transformVector(moveCamera);
            //console.log("moveCamera", moveCamera)
            //console.log("worldMoveCamera", worldMoveCamera)
            eye.pos = eye.pos.plus(worldMoveCamera);
            eye.focus = eye.focus.plus(worldMoveCamera);
            // tilt
            const mousePosWC = inverseProjectionMatrix.transformPoint(mousePosFrustrum);
            const tiltMatrix = M4.rotateLine(mousePosWC, eye.pos.to(eye.focus), -sign$2(e.deltaX) * 10 * DEG);
            eye.up = tiltMatrix.transformVector(eye.up);
            eye.pos = tiltMatrix.transformPoint(eye.pos);
            eye.focus = tiltMatrix.transformPoint(eye.focus);
            setupCamera$$1(eye, _gl);
            paintScreen();
            e.preventDefault();
        });
    }
    function getPosOnTarget$$1(e) {
        const target = e.target;
        const targetRect = target.getBoundingClientRect();
        const mouseCoordsOnElement = {
            x: e.clientX - targetRect.left,
            y: e.clientY - targetRect.top,
        };
        return mouseCoordsOnElement;
    }
    function setupCamera$$1(_eye, _gl, suppressEvents = false) {
        const { pos, focus, up, zoomFactor } = _eye;
        //console.log("pos", pos.$, "focus", focus.$, "up", up.$)
        _gl.matrixMode(_gl.PROJECTION);
        _gl.loadIdentity();
        //_gl.perspective(70, _gl.canvas.width / _gl.canvas.height, 0.1, 1000);
        const lr = _gl.canvas.width / 2 / zoomFactor;
        const bt = _gl.canvas.height / 2 / zoomFactor;
        _gl.ortho(-lr, lr, -bt, bt, -1e4, 1e4);
        _gl.lookAt(pos, focus, up);
        _gl.matrixMode(_gl.MODELVIEW);
        !suppressEvents && cameraChangeListeners$$1.forEach(l => l(_eye));
    }
    const cameraChangeListeners$$1 = [];
    // let shaders: typeof SHADERS_TYPE_VAR
    // declare let a: BRep, b: BRep, c: BRep, d: BRep, edges: Edge[] = [], hovering: any,
    // 	, normallines: boolean = false, b2s: BRep[] = []
    // const

    class Demo extends react_1 {
        constructor(props) {
            super(props);
            this.argInputs = [];
            this.onChange = () => {
                const demo = this.state;
                update(demo, this.props.args.map(a => a.value));
                this.forceUpdate();
            };
            this.onClickSource = (e) => {
                this.setState({ showingSource: !this.state.showingSource });
            };
            this.state = Object.assign({}, props, { canvas: undefined, showingSource: false });
            props.args.forEach(arg => arg.value = '' + arg.def);
        }
        componentDidMount() {
            setupDemo(this.state.canvas, this.state, this.container);
            hljs.highlightBlock(this.sourceContainer);
            this.forceUpdate();
        }
        render() {
            console.log(this.state);
            const demo = this.state;
            const _a = this.props, { f, args, height, width } = _a, props = __rest(_a, ["f", "args", "height", "width"]);
            const info = demo.b2s && 'faces: ' + demo.b2s.map(b2 => b2.faces.length).join('/')
                + ' edges: ' + demo.b2s.map(b2 => b2.edgeFaces && b2.edgeFaces.size || '?').join('/')
                + ' triangles: ' + demo.meshes.map(m => m ? m.TRIANGLES.length / 3 : 0).join('/');
            return react.createElement("div", Object.assign({}, props, { style: { width }, className: 'democontainer' }),
                react.createElement("div", { className: "canvascontainer", ref: r => this.container = r, style: { width: '100%', height } },
                    react.createElement("canvas", { style: { height }, ref: r => demo.canvas = r }),
                    this.props.args.map(arg => react.createElement("span", { className: 'incont', key: arg.name },
                        react.createElement(InputComponent, { type: 'text', "data-name": arg.name, value: arg.value, step: arg.step, ref: r => this.argInputs.push(r), change: e => ((arg.value = e), this.onChange()) }),
                        arg.name)),
                    react.createElement("span", { className: 'info' }, info),
                    react.createElement("span", { className: 'navinfo' }, "pan: drag-mmb | rotate: drag-rmb | zoom: scroll"),
                    react.createElement("a", { className: 'sourcelink', onClick: this.onClickSource }, this.state.showingSource ? 'hide source' : 'show source')),
                react.createElement("code", { className: classnames('src', !demo.showingSource && 'hide'), ref: r => this.sourceContainer = r }, this.props.f.toSource()));
        }
    }
    class InputComponent extends react_1 {
        constructor() {
            super(...arguments);
            this.onWheel = (e) => {
                const target = e.target;
                const delta = (e.shiftKey ? 0.1 : 1) * Math.sign(-e.deltaY) * this.props.step;
                target.value = '' + round10(parseFloat(target.value) + delta, -6);
                this.props.change(target.value);
                e.preventDefault();
            };
        }
        render() {
            const _a = this.props, { step, value, change } = _a, atts = __rest(_a, ["step", "value", "change"]);
            return react.createElement("input", Object.assign({}, atts, { defaultValue: '' + value, className: classnames(this.props.className, step && 'scrollable'), onWheel: step && this.onWheel, onBlur: e => change(e.target.value) }));
        }
    }
    function demoMain() {
        return __awaiter(this, void 0, void 0, function* () {
            yield B2T$$1.loadFonts();
        });
    }
    function setupDemo(canvas, demo, container) {
        //if (demoi !== 0) return
        // const canvas = new MooEl('canvas', {
        canvas.width = container.clientWidth,
            canvas.height = container.clientHeight,
            // }) as HTMLCanvasElement
            window.addEventListener('resize', e => {
                canvas.width = container.clientWidth;
                canvas.height = container.clientHeight;
                gl.viewport(0, 0, canvas.width, canvas.height);
                setupCamera$$1(demo.eye, gl);
            });
        const gl = demo.gl = BREPGLContext$$1.create(TSGLContext.create({ canvas }));
        gl.clearColor(1.0, 1.0, 1.0, 0.0);
        gl.enable(gl.BLEND);
        gl.enable(gl.DEPTH_TEST);
        gl.enable(gl.CULL_FACE);
        canvas.oncontextmenu = () => false;
        gl.depthFunc(gl.LEQUAL);
        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA); // TODO ?!
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        gl.loadIdentity();
        gl.scale(10, 10, 10);
        gl.loadIdentity();
        gl.shaders = initShaders$$1(gl);
        initMeshes$$1(gl.meshes = {}, gl);
        demo.eye = { pos: V$2(10, 10, 100), focus: V$2(5, 5, 0), up: V3.Y, zoomFactor: 8 };
        initNavigationEvents$$1(gl, demo.eye, () => paintDemo(demo));
        //initInfoEvents()
        //initPointInfoEvents()
        setupCamera$$1(demo.eye, gl);
        // container.adopt(
        // demo.srcLink = new MooEl('a.sourcelink', {text: 'show source', href: '#'})
        // 	.addEvent('click', e => {
        // 		const showing = demo.srcLink.get('text') == 'hide source'
        // 		demo.srcContainer.setStyle('display', showing ? 'none' : 'block')
        // 		demo.srcLink.set('text', showing ? 'show source' : 'hide source')
        // 		return false
        // 	}),
        // )
        // hljs.highlightBlock(demo.srcContainer)
        update(demo, demo.args.map(a => '' + a.def));
    }
    const meshColorss = [
        chroma.scale(['#ffa621', '#ffd026']).mode('lab').colors(20, 'gl'),
        chroma.scale(['#ff297f', '#6636FF']).mode('lab').colors(20, 'gl'),
        chroma.scale(['#19ff66', '#1ffff2']).mode('lab').colors(20, 'gl'),
    ];
    const demoPlanes = [
        new CustomPlane$$1(V3.O, V3.Y, V3.Z, 'planeYZ', chroma('red').gl(), -5, 5, -5, 5),
        new CustomPlane$$1(V3.O, V3.X, V3.Z, 'planeZX', chroma('green').gl(), -5, 5, -5, 5),
        new CustomPlane$$1(V3.O, V3.X, V3.Y, 'planeXY', chroma('blue').gl(), -5, 5, -5, 5),
    ];
    const hovering = undefined;
    function paintDemo(demo) {
        const gl = demo.gl;
        gl.makeCurrent();
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        gl.loadIdentity();
        demoPlanes.forEach(plane => gl.drawPlane(plane, chroma(plane.color).gl(), false));
        // gl.drawVectors(g.Vs)
        if (!demo.meshes)
            return;
        //viewerGL.scale(100, 100, 100)
        for (let i = 0; i < demo.meshes.length; i++) {
            const mesh = demo.meshes[i], b2 = demo.b2s[i];
            if (!mesh)
                continue;
            gl.pushMatrix();
            //viewerGL.translate(30, 0, 0)
            gl.projectionMatrix.m[11] -= 1 / (1 << 22); // prevent Z-fighting
            mesh.lines && gl.shaders.singleColor.uniforms({ color: chroma('#bfbfbf').gl() }).draw(mesh, gl.LINES);
            gl.projectionMatrix.m[11] += 1 / (1 << 22);
            let faceIndex = b2.faces.length;
            while (faceIndex--) {
                const face = b2.faces[faceIndex];
                const faceTriangleIndexes = mesh.faceIndexes.get(face);
                gl.shaders.lighting.uniforms({
                    color: hovering == face ? chroma('purple').gl() : meshColorss.emod(i).emod(faceIndex),
                }).draw(mesh, gl.TRIANGLES, faceTriangleIndexes.start, faceTriangleIndexes.count);
                //shaders.singleColor.uniforms({
                //color: hexIntToGLColor(0x0000ff)
                //}).draw(brepMesh, 'LINES')
            }
            gl.popMatrix();
        }
    }
    function update(demo, params) {
        const fixedParams = params.map((p, i) => {
            switch (demo.args[i].type) {
                case 'number':
                case 'int':
                    return parseFloat(p);
                case 'angle':
                    return parseFloat(p) * DEG;
            }
            return p;
        });
        //try {
        const b2s = demo.f.apply(undefined, fixedParams);
        demo.b2s = b2s instanceof Array ? b2s : [b2s];
        demo.b2s.forEach(b2 => b2.buildAdjacencies());
        //} catch (e) {
        //	console.log(e.message)
        //}
        demo.gl.makeCurrent();
        demo.meshes = demo.b2s && demo.b2s.map(b2 => {
            try {
                return b2.toMesh().compile();
            }
            catch (e) {
                return undefined;
            }
        });
        paintDemo(demo);
    }
    window.onload = (e) => __awaiter(undefined, void 0, void 0, function* () {
        yield B2T$$1.loadFonts();
        reactDom.render(react.createElement(Body, null), document.getElementById('react-root'));
    });
    const Body = () => react.createElement("div", null,
        react.createElement("h1", null, "BREP.TS"),
        react.createElement("p", null, "This library describes volumes using a boundary representation model. Basically like triangle meshes, except faces can be any shape and are not necessarily planar. This allows for fast operations while maintaining a high degree of accuracy."),
        react.createElement("p", null, "Once you have two volumes, you can combine them using boolean operations. For instance:"),
        react.createElement("h4", null, "box - sphere"),
        react.createElement(Demo, { id: 'boxminussphere', width: '100%', height: '500px', f: function (sphereRadius, sphereZ) {
                const box = B2T$$1.box(10, 10, 3);
                const sphere = B2T$$1.sphere(sphereRadius).translate(5, 5, sphereZ);
                const result = box.minus(sphere);
                return [box, sphere, result.translate(12)];
            }, args: [
                { name: 'sphere radius', type: 'number', fix: val => clamp(val, 0.1, 1000), def: 2.5, step: 0.5 },
                { name: 'sphere height', type: 'number', fix: val => clamp(val, 0.1, 1000), def: 2, step: 0.5 }
            ] }),
        react.createElement("h3", null, "Functionality this library implements"),
        react.createElement("ul", null,
            react.createElement("li", null, "Parametric curves: lines, ellipses, parabolas, hyperbolas, quadratic/cubic beziers, intersection curves between parametric and implicit surfaces."),
            react.createElement("li", null,
                "Surfaces: planes, cylinders, spheres, projected beziers. Functionality includes:",
                react.createElement("ul", null,
                    react.createElement("li", null, "surface/surface intersections"),
                    react.createElement("li", null, "testing if two surfaces are coplanar"),
                    react.createElement("li", null, "testing if a surface contains a point"),
                    react.createElement("li", null, "testing if a surface contains a curve"))),
            react.createElement("li", null, "Edge: segment of a curve"),
            react.createElement("li", null, "Faces: test line intersection/point containment"),
            react.createElement("li", null, "BREP volumes: intersection/union/subtraction, conversion to triangle mesh")),
        react.createElement("h3", null, "Generator function examples"),
        react.createElement("h4", null, "cylinder(radius: number = 1, height: number = 1, rads: number = TAU)"),
        react.createElement(Demo, { id: 'cyl', width: '50%', height: '400px', f: B2T$$1.cylinder, args: [
                { name: 'radius', type: 'number', fix: val => clamp(val, 0.1, 1000), def: 10, step: 1 },
                { name: 'height', type: 'number', fix: val => clamp(val, 0.1, 1000), def: 10, step: 1 },
                { name: 'degrees', type: 'angle', fix: val => clamp(val, 0.1, TAU), def: 360, step: 10 }
            ] }),
        react.createElement("h4", null, "text(text: string, size: number, depth: number = 1, font: opentypejs.Font = defaultFont)"),
        react.createElement(Demo, { id: 'text', width: '50%', height: '400px', f: B2T$$1.text, args: [
                { name: 'text', type: 'string', fix: val => val, def: 'foo' },
                { name: 'size', type: 'number', fix: val => clamp(val, 0.1, 100), def: 10, step: 5 },
                { name: 'depth', type: 'number', fix: val => clamp(val, 0.1, 100), def: 10, step: 1 }
            ] }),
        react.createElement("h3", null, "Advanced example: cylinder - extruded rounded edges"),
        react.createElement(Demo, { id: 'test1', width: '80%', height: '400px', f: function (/* number */ outsideRadius, /* int */ n, /* number */ insideRadius, /* number */ cornerRadius, /* number */ depth) {
                const cylinder = B2T$$1.cylinder(outsideRadius, 10);
                // create an n-gon centered on the XY-plane with corners insideRadius away from the origin
                // the ngon is counter-clockwise (CCW) when viewed from +Z
                const ngon = Edge$$1.ngon(n, insideRadius);
                // round the corners of the ngon with radius cornerRadius
                const ngonRounded = Edge$$1.round(ngon, cornerRadius);
                // create a hole punch by extruding ngonRounded in direction +Z
                // Like triangles in opengl, faces face the direction they are CCW when viewed from.
                // Because we extrude in the direction the outline faces, the resulting is "inside-out",
                // with faces facing inwards. As we want to remove the 'punch' volume, this is not a
                // problem. Otherwise we could call volume.flipped() or extrude in -Z and volume.translate(...)
                // into the correct position.
                const punch = B2T$$1.extrudeEdges(ngonRounded, P3$$1.XY, V$2(0, 0, 10)).translate(0, 0, depth);
                // punch is already inside-out, so use volume.and(...) instead of volume.minus(...)
                const result = cylinder.and(punch);
                return [cylinder, punch, result.translate(2 + outsideRadius * 2)];
            }, args: [
                { name: 'outside radius', type: 'number', fix: val => clamp(val, 0.1, 10), def: 5, step: 1 },
                { name: 'corner count', type: 'int', fix: val => clamp(val, 3, 21), def: 3, step: 1 },
                { name: 'ngon radius', type: 'number', fix: val => clamp(val, 0.1, 12), def: 4, step: 1 },
                { name: 'corner radius', type: 'number', fix: val => clamp(val, 0.1, 5), def: 0.5, step: 0.1 },
                { name: 'depth', type: 'number', fix: val => clamp(val, -9, 9), def: 0, step: 1 }
            ] }));

    exports.demoMain = demoMain;

    return exports;

}({},hljs));
//# sourceMappingURL=demo.js.map
