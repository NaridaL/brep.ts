{"version":3,"file":"bundle.module.js","sources":["../src/curve/Curve.ts","../src/curve/XiEtaCurve.ts","../src/curve/ImplicitCurve.ts","../src/curve/BezierCurve.ts","../src/curve/EllipseCurve.ts","../src/curve/HyperbolaCurve.ts","../src/curve/Line3.ts","../src/curve/PICurve.ts","../src/curve/ParabolaCurve.ts","../src/curve/SemiEllipseCurve.ts","../src/P3.ts","../src/surface/Surface.ts","../src/surface/ParametricSurface.ts","../src/surface/ConicSurface.ts","../src/surface/EllipsoidSurface.ts","../src/surface/ProjectedCurveSurface.ts","../src/surface/CylinderSurface.ts","../src/surface/RotationREqFOfZ.ts","../src/surface/SemiCylinderSurface.ts","../src/surface/SemiEllipsoidSurface.ts","../src/surface/PlaneSurface.ts","../src/surface/ZDirVolumeVisitor.ts","../src/surface/CalculateAreaVisitor.ts","../src/b2.generators.ts","../src/CustomPlane.ts","../src/Edge.ts","../src/FaceInfo.ts","../src/Face.ts","../src/B2.ts","../src/ClassSerializer.ts","../src/shaders.ts","../src/BREPGLContext.ts"],"sourcesContent":["import {Equalable} from 'javasetmap.ts'\nimport {\n\tAABB, arrayFromFunction, assert, assertNumbers, callsce, clamp, eq, eq0, fuzzyUniquesF, getIntervals, glqInSteps,\n\tint, le, M4, newtonIterate2dWithDerivatives, newtonIterateWithDerivative, NLA_PRECISION, Transformable, V, V3,\n} from 'ts3dutils'\n\nimport {followAlgorithm2d, ISInfo, MathFunctionR2R, P3, Surface} from '../index'\n\nconst {ceil, floor, abs} = Math\n\nexport type ISInfo = { tThis: number, tOther: number, p: V3 }\n\nexport abstract class Curve extends Transformable implements Equalable {\n\tstatic hlol = 0\n\ttIncrement: number\n\thlol: number\n\t'constructor': new (...args: any[]) => this\n\n\tconstructor(readonly tMin: number, readonly tMax: number) {\n\t\tsuper()\n\t\tassertNumbers(tMin, tMax)\n\t\tassert('number' == typeof tMin && !isNaN(tMin))\n\t\tassert('number' == typeof tMax && !isNaN(tMax))\n\t\tassert(tMin < tMax)\n\t}\n\n\tstatic integrate(curve: Curve, startT: number, endT: number, steps: int): number {\n\t\tconst step = (endT - startT) / steps\n\t\tlet length = 0\n\t\tlet p = curve.at(startT)\n\t\tlet i = 0, t = startT + step\n\t\tfor (; i < steps; i++, t += step) {\n\t\t\tconst next = curve.at(t)\n\t\t\tlength += p.distanceTo(next)\n\t\t\tp = next\n\t\t}\n\t\treturn length\n\t}\n\n\tstatic ispsRecursive(curve1: Curve, tMin: number, tMax: number, curve2: Curve, sMin: number, sMax: number): ISInfo[] {\n\t\t// the recursive function finds good approximates for the intersection points\n\t\t// curve1 function uses newton iteration to improve the result as much as possible\n\t\tfunction handleStartTS(startT: number, startS: number) {\n\t\t\tif (!result.some(info => eq(info.tThis, startT) && eq(info.tOther, startS))) {\n\t\t\t\tconst f1 = (t: number, s: number) => curve1.tangentAt(t).dot(curve1.at(t).minus(curve2.at(s)))\n\t\t\t\tconst f2 = (t: number, s: number) => curve2.tangentAt(s).dot(curve1.at(t).minus(curve2.at(s)))\n\t\t\t\t// f = (b1, b2, t1, t2) = b1.tangentAt(t1).dot(b1.at(t1).minus(b2.at(t2)))\n\t\t\t\tconst dfdt1 = (b1: Curve, b2: Curve, t1: number, t2: number) => b1.ddt(t1).dot(b1.at(t1).minus(b2.at(t2))) + (b1.tangentAt(t1).squared())\n\t\t\t\tconst dfdt2 = (b1: Curve, b2: Curve, t1: number, t2: number) => -b1.tangentAt(t1).dot(b2.tangentAt(t2))\n\t\t\t\tconst ni = newtonIterate2dWithDerivatives(f1, f2, startT, startS, 16,\n\t\t\t\t\tdfdt1.bind(undefined, curve1, curve2), dfdt2.bind(undefined, curve1, curve2),\n\t\t\t\t\t(t, s) => -dfdt2(curve2, curve1, s, t), (t, s) => -dfdt1(curve2, curve1, s, t))\n\t\t\t\tassert(isFinite(ni.x))\n\t\t\t\tassert(isFinite(ni.y))\n\t\t\t\tif (ni == undefined) console.log(startT, startS, curve1.sce, curve2.sce)\n\t\t\t\tresult.push({tThis: ni.x, tOther: ni.y, p: curve1.at(ni.x)})\n\t\t\t}\n\t\t}\n\n\t\t// returns whether an intersection was immediately found (i.e. without further recursion)\n\t\tfunction findRecursive(tMin: number, tMax: number, sMin: number, sMax: number,\n\t\t\t\t\t\t\t   curve1AABB: AABB, curve2AABB: AABB, depth = 0) {\n\t\t\tconst EPS = NLA_PRECISION\n\t\t\tif (curve1AABB.fuzzyTouchesAABB(curve2AABB)) {\n\t\t\t\tconst tMid = (tMin + tMax) / 2\n\t\t\t\tconst sMid = (sMin + sMax) / 2\n\t\t\t\tif (Math.abs(tMax - tMin) < EPS || Math.abs(sMax - sMin) < EPS) {\n\t\t\t\t\thandleStartTS(tMid, sMid)\n\t\t\t\t\treturn true\n\t\t\t\t} else {\n\t\t\t\t\tconst curve1AABBleft = curve1.getAABB(tMin, tMid)\n\t\t\t\t\tconst curve2AABBleft = curve2.getAABB(sMin, sMid)\n\t\t\t\t\tlet curve1AABBright, curve2AABBright\n\t\t\t\t\t// if one of the following calls immediately finds an intersection, we don't want to call the others\n\t\t\t\t\t// as that will lead to the same intersection being output multiple times\n\t\t\t\t\tfindRecursive(tMin, tMid, sMin, sMid, curve1AABBleft, curve2AABBleft, depth + 1)\n\t\t\t\t\t|| findRecursive(tMin, tMid, sMid, sMax, curve1AABBleft, curve2AABBright = curve2.getAABB(sMid, sMax), depth + 1)\n\t\t\t\t\t|| findRecursive(tMid, tMax, sMin, sMid, curve1AABBright = curve1.getAABB(tMid, tMax), curve2AABBleft, depth + 1)\n\t\t\t\t\t|| findRecursive(tMid, tMax, sMid, sMax, curve1AABBright, curve2AABBright, depth + 1)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false\n\t\t}\n\n\t\tconst result: ISInfo[] = []\n\t\tfindRecursive(tMin, tMax, sMin, sMax, curve1.getAABB(tMin, tMax), curve2.getAABB(sMin, sMax))\n\t\treturn fuzzyUniquesF(result, info => info.tThis)\n\t}\n\n\tstatic breakDownIC(implicitCurve: MathFunctionR2R,\n\t\t\t\t\t   {sMin, sMax, tMin, tMax}: { sMin: number, sMax: number, tMin: number, tMax: number },\n\t\t\t\t\t   sStep: number, tStep: number,\n\t\t\t\t\t   stepSize: number,\n\t\t\t\t\t   dids?: R2_R,\n\t\t\t\t\t   didt?: R2_R): { points: V3[], tangents: V3[] }[] {\n\t\tconst EPS = 1 / (1 << 20)\n\t\t//undefined == dids && (dids = (s, t) => (implicitCurve(s + EPS, t) - implicitCurve(s, t)) / EPS)\n\t\t//undefined == didt && (didt = (s, t) => (implicitCurve(s, t + EPS) - implicitCurve(s, t)) / EPS)\n\n\t\tconst bounds = (s, t) => sMin <= s && s <= sMax && tMin <= t && t <= tMax\n\t\tconst deltaS = sMax - sMin, deltaT = tMax - tMin\n\t\tconst sRes = ceil(deltaS / sStep), tRes = ceil(deltaT / tStep)\n\t\tconst grid = new Array(sRes * tRes).fill(0)\n\t\tarrayFromFunction(tRes, i => grid.slice(sRes * i, sRes * (i + 1)).map(v => v ? 'X' : '_').join('')).join('\\n')\n\t\tconst at = (i: int, j: int) => grid[j * sRes + i]\n\t\tconst set = (i: int, j: int) => 0 <= i && i < sRes && 0 <= j && j < tRes && (grid[j * sRes + i] = 1)\n\t\tconst result: { points: V3[], tangents: V3[] }[] = []\n\t\tconst logTable = []\n\t\tfor (let i = 0; i < sRes; i++) {\n\t\t\tsearch: for (let j = 0; j < tRes; j++) {\n\t\t\t\tif (at(i, j)) continue\n\t\t\t\tset(i, j)\n\t\t\t\tlet s = sMin + (i + 0.5) * sStep, t = tMin + (j + 0.5) * tStep\n\t\t\t\tconst startS = s, startT = t\n\t\t\t\t// basically curvePoint\n\t\t\t\tfor (let k = 0; k < 8; k++) {\n\t\t\t\t\tconst fp = implicitCurve(s, t)\n\t\t\t\t\tconst dfpdx = implicitCurve.x(s, t), dfpdy = implicitCurve.y(s, t)\n\t\t\t\t\tif (0 == dfpdx * dfpdx + dfpdy * dfpdy) {\n\t\t\t\t\t\t// top of a hill, keep looking\n\t\t\t\t\t\tcontinue search\n\t\t\t\t\t}\n\t\t\t\t\tconst scale = fp / (dfpdx * dfpdx + dfpdy * dfpdy)\n\t\t\t\t\ts -= scale * dfpdx\n\t\t\t\t\tt -= scale * dfpdy\n\t\t\t\t}\n\t\t\t\tconst li = floor((s - sMin) / sStep), lj = floor((t - tMin) / tStep)\n\t\t\t\tlogTable.push({\n\t\t\t\t\ti,\n\t\t\t\t\tj,\n\t\t\t\t\tli,\n\t\t\t\t\tlj,\n\t\t\t\t\tstartS,\n\t\t\t\t\tstartT,\n\t\t\t\t\ts,\n\t\t\t\t\tt,\n\t\t\t\t\t'bounds(s, t)': bounds(s, t),\n\t\t\t\t\t'ic(s,t)': implicitCurve(s, t),\n\t\t\t\t})\n\t\t\t\tif (!(i == li && j == lj) && at(li, lj)) {\n\t\t\t\t\tcontinue search\n\t\t\t\t}\n\t\t\t\tset(li, lj)\n\t\t\t\t// s, t are now good starting coordinates to use follow algo\n\t\t\t\tif (bounds(s, t) && eq0(implicitCurve(s, t))) {\n\t\t\t\t\tconsole.log(V(s, t).sce)\n\t\t\t\t\tconst subresult = mkcurves(implicitCurve, s, t, stepSize, implicitCurve.x, implicitCurve.y, bounds)\n\t\t\t\t\tfor (const curvedata of subresult) {\n\t\t\t\t\t\tassert(curvedata.points.length > 2)\n\t\t\t\t\t\tfor (const {x, y} of curvedata.points) {\n\t\t\t\t\t\t\tconst lif = (x - sMin) / sStep, ljf = (y - tMin) / tStep\n\t\t\t\t\t\t\tset((lif - 0.5) | 0, (ljf - 0.5) | 0)\n\t\t\t\t\t\t\tset((lif - 0.5) | 0, (ljf + 0.5) | 0)\n\t\t\t\t\t\t\tset((lif + 0.5) | 0, (ljf - 0.5) | 0)\n\t\t\t\t\t\t\tset((lif + 0.5) | 0, (ljf + 0.5) | 0)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tresult.push(...subresult)\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\t//console.table(logTable)\n\t\tfor (const {points} of result) {\n\t\t\tfor (let i = 0; i < points.length - 1; i++) {\n\t\t\t\tassert(!points[i].equals(points[i + 1]))\n\t\t\t}\n\t\t}\n\t\treturn result\n\t}\n\n\ttoString() {\n\t\treturn this.toSource()\n\t}\n\n\ttoSource(rounder: (x: number) => number = x => x): string {\n\t\treturn callsce.call(undefined, 'new ' + this.constructor.name, ...this.getConstructorParameters())\n\t}\n\n\tabstract getConstructorParameters(): any[]\n\n\twithBounds<T extends Curve>(this: T, tMin = this.tMin, tMax = this.tMax): T {\n\t\tassert(this.tMin <= tMin && tMin <= this.tMax)\n\t\tassert(this.tMin <= tMax && tMax <= this.tMax)\n\t\tassert(this.tMin <= tMax && tMax <= this.tMax)\n\t\treturn new this.constructor(...this.getConstructorParameters().slice(0, -2), tMin, tMax)\n\t}\n\n\t/**\n\t * Curve parameter t for point p on curve.\n\t */\n\tabstract pointT(p: V3): number\n\n\t/**\n\t * The point on the line that is closest to the given point.\n\t */\n\tclosestPointToPoint(p: V3): V3 {\n\t\treturn this.at(this.closestTToPoint(p))\n\t}\n\n\tisValidT(t: number): boolean {\n\t\treturn le(this.tMin, t) && le(t, this.tMax)\n\t}\n\n\tdiff(t: number, eps: number): V3 {\n\t\treturn this.at(t).to(this.at(t + eps))\n\t}\n\n\tclosestTToPoint(p: V3, tStart?: number): number {\n\t\t// this.at(t) has minimal distance to p when this.tangentAt(t) is perpendicular to\n\t\t// the vector between this.at(t) and p. This is the case iff the dot product of the two is 0.\n\t\t// f = (this.at(t) - p) . (this.tangentAt(t)\n\t\t// df = this.tangentAt(t) . this.tangentAt(t) + (this.at(t) - p) . this.ddt(t)\n\t\t//    = this.tangentAt(t)² + (this.at(t) - p) . this.ddt(t)\n\t\tconst f = (t: number) => this.at(t).minus(p).dot(this.tangentAt(t)) // 5th degree polynomial\n\t\tconst df = (t: number) => this.tangentAt(t).squared() + (this.at(t).minus(p).dot(this.ddt(t)))\n\n\t\tconst STEPS = 32\n\t\tconst startT = undefined !== tStart\n\t\t\t? tStart\n\t\t\t: arrayFromFunction(STEPS, i => this.tMin + (this.tMax - this.tMin) * i / STEPS)\n\t\t\t\t\t\t   .withMax(t => -this.at(t).distanceTo(p))\n\n\t\treturn newtonIterateWithDerivative(f, startT, 16, df)\n\t}\n\n\t/**\n\t * So different edges on the same curve do not have different vertices, they are always generated\n\t * on fixed points this.at(k * this.tIncrement), with k taking integer values\n\t *\n\t */\n\tcalcSegmentPoints(aT: number, bT: number, a: V3, b: V3, reversed: boolean, includeFirst: boolean): V3[] {\n\t\tassert(this.tIncrement, 'tIncrement not defined on ' + this)\n\t\tconst inc = this.tIncrement\n\t\tconst points = []\n\t\tif (includeFirst) points.push(a)\n\t\tassert(reversed != aT < bT)\n\t\tif (aT < bT) {\n\t\t\tconst start = Math.ceil((aT + NLA_PRECISION) / inc)\n\t\t\tconst end = Math.floor((bT - NLA_PRECISION) / inc)\n\t\t\tfor (let i = start; i <= end; i++) {\n\t\t\t\tpoints.push(this.at(i * inc))\n\t\t\t}\n\t\t} else {\n\t\t\tconst start = Math.floor((aT - NLA_PRECISION) / inc)\n\t\t\tconst end = Math.ceil((bT + NLA_PRECISION) / inc)\n\t\t\tfor (let i = start; i >= end; i--) {\n\t\t\t\tpoints.push(this.at(i * inc))\n\t\t\t}\n\t\t}\n\t\tpoints.push(b)\n\t\treturn points\n\t}\n\n\t/**\n\t *\n\t * @param p\n\t * @param tStart Defines interval with tEnd in which a start value for t will be searched.\n\t * Result is not necessarily in this interval.\n\t * @param tEnd\n\t */\n\tdistanceToPoint(p: V3, tStart?: number, tEnd?: number) {\n\t\tconst closestT = this.closestTToPoint(p, tStart, tEnd)\n\t\treturn this.at(closestT).distanceTo(p)\n\t}\n\n\tasSegmentDistanceToPoint(p: V3, tStart: number, tEnd: number) {\n\t\tlet t = this.closestTToPoint(p, tStart, tEnd)\n\t\tt = clamp(t, tStart, tEnd)\n\t\treturn this.at(t).distanceTo(p)\n\t}\n\n\t/**\n\t * Behavior when curves are colinear: self intersections\n\t */\n\tisInfosWithCurve(curve: Curve): ISInfo[] {\n\t\treturn Curve.ispsRecursive(this, this.tMin, this.tMax, curve, curve.tMin, curve.tMax)\n\t}\n\n\t/**\n\t * Curve point at parameter t.\n\t */\n\tabstract at(t: number): V3\n\n\t/**\n\t * Tangent of curve at parameter t. This is also the first derivative of {@see at}\n\t */\n\tabstract tangentAt(t: number): V3\n\n\t/**\n\t * Derivative of tangentAt for parameter t at t.\n\t */\n\tabstract ddt(t: number): V3\n\n\tabstract containsPoint(p: V3): boolean\n\n\tabstract isInfosWithLine(anchorWC: V3, dirWC: V3, tMin?: number, tMax?: number, lineMin?: number, lineMax?: number): ISInfo[]\n\n\tabstract transform(m4: M4, desc?: string): this\n\n\tabstract isTsWithSurface(surface: Surface): number[]\n\n\tabstract isTsWithPlane(plane: P3): number[]\n\n\tarcLength(startT: number, endT: number, steps: int = 1): number {\n\t\tassert(startT < endT, 'startT < endT')\n\t\treturn glqInSteps(t => this.tangentAt(t).length(), startT, endT, steps)\n\t}\n\n\t/**\n\t * iff for any t, this.at(t) == curve.at(t)\n\t */\n\tabstract likeCurve(curve: Curve): boolean\n\n\tabstract equals(obj: any): boolean\n\n\tabstract hashCode(): int\n\n\t/**\n\t * Return whether the curves occupy the same points in space. They do\n\t * not necessarily need to share the same parameter values.\n\t *\n\t *\n\t * iff for every t, there is an s so that this.at(t) == curve.at(s)\n\t * and for every s, there is a t so that curve.at(s) == this.a(t)\n\t */\n\tabstract isColinearTo(curve: Curve): boolean\n\n\tgetAABB(tMin = this.tMin, tMax = this.tMax): AABB {\n\t\ttMin = isFinite(tMin) ? tMin : this.tMin\n\t\ttMax = isFinite(tMax) ? tMax : this.tMax\n\t\tconst tMinAt = this.at(tMin), tMaxAt = this.at(tMax)\n\t\tconst roots = this.roots()\n\t\tconst mins = new Array(3), maxs = new Array(3)\n\t\tfor (let dim = 0; dim < 3; dim++) {\n\t\t\tconst tRoots = roots[dim]\n\t\t\tmins[dim] = Math.min(tMinAt.e(dim), tMaxAt.e(dim))\n\t\t\tmaxs[dim] = Math.max(tMinAt.e(dim), tMaxAt.e(dim))\n\t\t\tfor (const tRoot of tRoots) {\n\t\t\t\tif (tMin < tRoot && tRoot < tMax) {\n\t\t\t\t\tmins[dim] = Math.min(mins[dim], this.at(tRoot).e(dim))\n\t\t\t\t\tmaxs[dim] = Math.max(maxs[dim], this.at(tRoot).e(dim))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn new AABB(V3.fromArray(mins), V3.fromArray(maxs))\n\t}\n\n\tabstract roots(): number[][]\n\n\treversed(): Curve {\n\t\tthrow new Error()\n\t}\n\n\tclipPlane(plane: P3): Curve[] {\n\t\tconst ists = this.isTsWithPlane(plane).filter(ist => this.tMin <= ist && ist <= this.tMax)\n\t\treturn getIntervals(ists, this.tMin, this.tMax).mapFilter(([a, b]) => {\n\t\t\tconst midT = (a + b) / 2\n\t\t\treturn !eq(a, b) && plane.distanceToPointSigned(this.at(midT)) < 0 && this.withBounds(a, b)\n\t\t})\n\t}\n\n}\n\nfunction mkcurves(implicitCurve: MathFunctionR2R,\n\t\t\t\t  sStart: number, tStart: number,\n\t\t\t\t  stepSize: number,\n\t\t\t\t  dids: R2_R,\n\t\t\t\t  didt: R2_R,\n\t\t\t\t  bounds: (s: number, t: number) => boolean): { points: V3[], tangents: V3[] }[] {\n\tconst start = V(sStart, tStart)\n\t// checkDerivate(s => implicitCurve(s, 0), s => dids(s, 0), -1, 1, 0)\n\t// checkDerivate(t => implicitCurve(0, t), t => didt(0, t), -1, 1, 0)\n\tconst {points, tangents} = followAlgorithm2d(implicitCurve, start, stepSize, bounds)\n\tif (points[0].distanceTo(points.last) < stepSize && points.length > 2) {\n\t\t// this is a loop: split it\n\t\tfor (let i = 0; i < points.length - 1; i++) {\n\t\t\tassert(!points[i].equals(points[i + 1]))\n\t\t}\n\t\tconst half = floor(points.length / 2)\n\t\tconst points1 = points.slice(0, half), points2 = points.slice(half - 1, points.length)\n\t\tconst tangents1 = tangents.slice(0, half), tangents2 = tangents.slice(half - 1, tangents.length)\n\t\ttangents2[tangents2.length - 1] = tangents1[0]\n\t\tpoints2[tangents2.length - 1] = points1[0]\n\t\tfor (let i = 0; i < points1.length - 1; i++) {\n\t\t\tassert(!points1[i].equals(points1[i + 1]))\n\t\t}\n\t\tfor (let i = 0; i < points2.length - 1; i++) {\n\t\t\tassert(!points2[i].equals(points2[i + 1]))\n\t\t}\n\t\treturn [{points: points1, tangents: tangents1}, {points: points2, tangents: tangents2}]\n\t} else {\n\t\t// not a loop: check in the other direction\n\t\tconst {points: reversePoints, tangents: reverseTangents} = followAlgorithm2d(implicitCurve, start, -stepSize, bounds)\n\t\tconst result = followAlgorithm2d(implicitCurve, reversePoints.last, stepSize, bounds, undefined, reverseTangents.last.negated())\n\t\tassert(result.points.length > 2)\n\t\treturn [result]\n\t}\n}\n\nexport type R2_R = (s: number, t: number) => number\n\nexport function curvePoint(implicitCurve: R2_R, startPoint: V3,\n\t\t\t\t\t\t   dids: R2_R,\n\t\t\t\t\t\t   didt: R2_R) {\n\tconst eps = 1 / (1 << 20)\n\tlet p = startPoint\n\tfor (let i = 0; i < 8; i++) {\n\t\tconst fp = implicitCurve(p.x, p.y)\n\t\tconst dfpdx = dids(p.x, p.y), dfpdy = didt(p.x, p.y)\n\t\tconst scale = fp / (dfpdx * dfpdx + dfpdy * dfpdy)\n\t\t//console.log(p.$)\n\t\tp = p.minus(new V3(scale * dfpdx, scale * dfpdy, 0))\n\t}\n\treturn p\n}\n\nexport function curvePointMF(mf: MathFunctionR2R, startPoint: V3, steps: int = 8, eps: number = 1 / (1 << 30)) {\n\tlet p = startPoint\n\tfor (let i = 0; i < steps; i++) {\n\t\tconst fp = mf(p.x, p.y)\n\t\tconst dfpdx = mf.x(p.x, p.y), dfpdy = mf.y(p.x, p.y)\n\t\tconst scale = fp / (dfpdx * dfpdx + dfpdy * dfpdy)\n\t\t//console.log(p.$)\n\t\tp = p.minus(new V3(scale * dfpdx, scale * dfpdy, 0))\n\t\tif (abs(fp) <= eps) break\n\t}\n\treturn p\n}","import {\n\tarrayFromFunction, assertf, assertInst, assertNumbers, assertVectors, eq0, hasConstructor, int, M4, NLA_PRECISION,\n\tTAU, V, V3,\n} from 'ts3dutils'\nimport {Mesh, pushQuad} from 'tsgl'\n\nimport {\n\tBezierCurve, ConicSurface, Curve, EllipseCurve, EllipsoidSurface, ISInfo, L3, P3, PlaneSurface,\n\tProjectedCurveSurface, SemiEllipsoidSurface, Surface,\n} from '../index'\n\nconst {PI} = Math\n\nexport abstract class XiEtaCurve extends Curve {\n\treadonly normal: V3\n\treadonly matrix: M4\n\treadonly inverseMatrix: M4\n\t'constructor': typeof XiEtaCurve & ( new(center: V3, f1: V3, f2: V3, tMin: number, tMax: number) => this )\n\n\tconstructor(readonly center: V3,\n\t\t\t\treadonly f1: V3,\n\t\t\t\treadonly f2: V3,\n\t\t\t\treadonly tMin: number = -PI,\n\t\t\t\treadonly tMax: number = PI) {\n\t\tsuper(tMin, tMax)\n\t\tassertVectors(center, f1, f2)\n\t\tthis.normal = f1.cross(f2)\n\t\tif (!this.normal.likeO()) {\n\t\t\tthis.normal = this.normal.unit()\n\t\t\tthis.matrix = M4.forSys(f1, f2, this.normal, center)\n\t\t\tthis.inverseMatrix = this.matrix.inversed()\n\t\t} else {\n\t\t\tthis.matrix = M4.forSys(f1, f2, f1.unit(), center)\n\t\t\tconst f1p = f1.getPerpendicular()\n\t\t\tthis.inverseMatrix = new M4(\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 0, 0, 0,\n\t\t\t\t0, 0, 0, 0,\n\t\t\t\t0, 0, 0, 1).times(M4.forSys(f1, f1p, f1.cross(f1p), center).inversed())\n\t\t}\n\t}\n\n\tstatic magic(a: number, b: number, c: number): number[] {\n\t\tthrow new Error('abstract')\n\t}\n\n\t/**\n\t * Returns a new EllipseCurve representing an ellipse parallel to the XY-plane\n\t * with semi-major/minor axes parallel t the X and Y axes and of length a and b.\n\t *\n\t * @param a length of the axis parallel to X axis\n\t * @param b length of the axis parallel to Y axis\n\t * @param center Defaults to V3.O\n\t */\n\tstatic forAB(a: number, b: number, center: V3 = V3.O): XiEtaCurve {\n\t\treturn new (this as any)(center, V(a, 0, 0), V(0, b, 0))\n\t}\n\n\tstatic XYLCValid(pLC: V3): boolean {\n\t\tthrow new Error('abstract')\n\t}\n\n\tstatic XYLCPointT(pLC: V3): number {\n\t\tthrow new Error('abstract')\n\t}\n\n\tstatic unitIsInfosWithLine(anchorLC: V3, dirLC: V3, anchorWC: V3, dirWC: V3): ISInfo[] {\n\t\tthrow new Error('abstract')\n\t}\n\n\taddToMesh(mesh: Mesh & { TRIANGLES: int[], normals: V3[] }, res: int = 4, radius: number = 0, pointStep = 1): void {\n\t\tconst baseNormals = arrayFromFunction(res, i => V3.polar(1, TAU * i / res))\n\t\tconst baseVertices = arrayFromFunction(res, i => V3.polar(radius, TAU * i / res))\n\t\tconst inc = this.tIncrement\n\t\tconst start = Math.ceil((this.tMin + NLA_PRECISION) / inc)\n\t\tconst end = Math.floor((this.tMax - NLA_PRECISION) / inc)\n\t\tfor (let i = start; i <= end; i += pointStep) {\n\t\t\tconst t = i * inc\n\t\t\tconst start = mesh.vertices.length\n\t\t\tif (0 !== i) {\n\t\t\t\tfor (let j = 0; j < res; j++) {\n\t\t\t\t\tpushQuad(mesh.TRIANGLES, true,\n\t\t\t\t\t\tstart - res + j, start + j,\n\t\t\t\t\t\tstart - res + (j + 1) % res, start + (j + 1) % res)\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst point = this.at(t), tangent = this.tangentAt(t)\n\t\t\tconst matrix = M4.forSys(this.normal, tangent.cross(this.normal), tangent, point)\n\t\t\tmesh.normals.push(...matrix.transformedVectors(baseNormals))\n\t\t\tmesh.vertices.push(...matrix.transformedPoints(baseVertices))\n\t\t}\n\t}\n\n\tgetConstructorParameters(): any[] {\n\t\treturn [this.center, this.f1, this.f2, this.tMin, this.tMax]\n\t}\n\n\tisInfosWithCurve(curve: Curve): ISInfo[] {\n\t\tif (curve instanceof L3) {\n\t\t\treturn this.isInfosWithLine(curve.anchor, curve.dir1, this.tMin, this.tMax, curve.tMin, curve.tMax)\n\t\t}\n\t\tif (curve instanceof BezierCurve) {\n\t\t\treturn this.isInfosWithBezier(curve)\n\t\t}\n\t\tif (curve instanceof XiEtaCurve) {\n\t\t\tif (!this.normal.isParallelTo(curve.normal)) {\n\t\t\t\treturn this.isTsWithPlane(curve.getPlane()).mapFilter(tThis => {\n\t\t\t\t\tconst p = this.at(tThis)\n\t\t\t\t\tif (curve.containsPoint(p)) {\n\t\t\t\t\t\treturn {tThis, tOther: curve.pointT(p), p}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\treturn super.isInfosWithCurve(curve)\n\t}\n\n\ttransform(m4: M4) {\n\t\treturn new this.constructor(\n\t\t\tm4.transformPoint(this.center),\n\t\t\tm4.transformVector(this.f1),\n\t\t\tm4.transformVector(this.f2),\n\t\t\tthis.tMin, this.tMax) as this\n\t}\n\n\tequals(obj: any): boolean {\n\t\treturn this == obj ||\n\t\t\tobj.constructor == this.constructor\n\t\t\t&& this.center.equals(obj.center)\n\t\t\t&& this.f1.equals(obj.f1)\n\t\t\t&& this.f2.equals(obj.f2)\n\t}\n\n\thashCode(): int {\n\t\tlet hashCode = 0\n\t\thashCode = hashCode * 31 + this.center.hashCode()\n\t\thashCode = hashCode * 31 + this.f1.hashCode()\n\t\thashCode = hashCode * 31 + this.f2.hashCode()\n\t\treturn hashCode | 0\n\t}\n\n\tlikeCurve(curve: Curve): boolean {\n\t\treturn hasConstructor(curve, this.constructor)\n\t\t\t&& this.center.like(curve.center)\n\t\t\t&& this.f1.like(curve.f1)\n\t\t\t&& this.f2.like(curve.f2)\n\t}\n\n\tnormalP(t: number): V3 {\n\t\treturn this.tangentAt(t).cross(this.normal)\n\t}\n\n\tgetPlane(): P3 {\n\t\treturn P3.normalOnAnchor(this.normal, this.center)\n\t}\n\n\tisTsWithPlane(plane: P3): number[] {\n\t\tassertInst(P3, plane)\n\t\t/*\n\t\t this: x = center + f1 * cos t + f2 * sin t  (1)\n\t\t plane:\n\t\t n := plane.normal1\n\t\t n DOT x == plane.w           (2)\n\t\t plane defined by f1/f2\n\t\t x = center + f1 * xi + f2 * eta         (3)\n\t\t intersection plane and planef1/f2:\n\t\t insert (3) into (2):\n\t\t n DOT center + n DOT f1 * xi + n DOT f2 * eta = plane.w | -n DOT center\n\t\t n DOT f1 * xi + n DOT f2 * eta = plane.w - n DOT center (4)\n\t\t points on ellipse have additional condition\n\t\t eta * eta + xi * xi = 1 (5)\n\t\t g1 := n DOT f1\n\t\t g2 := n DOT f2\n\t\t g3 := w - n DOT center\n\t\t solve system (5)/(6)\n\t\t g1 * xi + g2 * eta = g3 (6)\n\t\t */\n\t\tif (plane.normal1.isParallelTo(this.normal)) {\n\t\t\treturn []\n\t\t}\n\t\tconst n = plane.normal1, w = plane.w,\n\t\t\tcenter = this.center, f1 = this.f1, f2 = this.f2,\n\t\t\tg1 = n.dot(f1), g2 = n.dot(f2), g3 = w - n.dot(center)\n\n\t\treturn this.constructor.magic(g1, g2, g3)\n\t}\n\n\tpointT(p: V3): number {\n\t\tassertVectors(p)\n\t\tconst pLC = this.inverseMatrix.transformPoint(p)\n\t\treturn this.constructor.XYLCPointT(pLC)\n\t}\n\n\tcontainsPoint(p: V3): boolean {\n\t\tconst pLC = this.inverseMatrix.transformPoint(p)\n\t\treturn eq0(pLC.z) && this.constructor.XYLCValid(pLC)\n\t}\n\n\tisInfosWithLine(anchorWC: V3, dirWC: V3, tMin?: number, tMax?: number, lineMin = -100000, lineMax = 100000): ISInfo[] {\n\t\tconst anchorLC = this.inverseMatrix.transformPoint(anchorWC)\n\t\tconst dirLC = this.inverseMatrix.transformVector(dirWC)\n\t\tif (eq0(dirLC.z)) {\n\t\t\t// local line parallel to XY-plane\n\t\t\tif (eq0(anchorLC.z)) {\n\t\t\t\t// local line lies in XY-plane\n\t\t\t\treturn this.constructor.unitIsInfosWithLine(anchorLC, dirLC, anchorWC, dirWC)\n\t\t\t}\n\t\t} else {\n\t\t\t// if the line intersects the XY-plane in a single point, there can be an intersection there\n\t\t\t// find point, then check if distance from circle = 1\n\t\t\tconst otherTAtZ0 = anchorLC.z / dirLC.z\n\t\t\tconst isp = dirLC.times(otherTAtZ0).plus(anchorLC)\n\t\t\tif (this.constructor.XYLCValid(isp)) {\n\t\t\t\t// point lies on unit circle\n\t\t\t\treturn [{\n\t\t\t\t\ttThis: this.constructor.XYLCPointT(isp),\n\t\t\t\t\ttOther: otherTAtZ0,\n\t\t\t\t\tp: anchorWC.plus(dirWC.times(otherTAtZ0)),\n\t\t\t\t}]\n\t\t\t}\n\t\t}\n\t\treturn []\n\t}\n\n\tisTsWithSurface(surface: Surface): number[] {\n\t\tif (surface instanceof PlaneSurface) {\n\t\t\treturn this.isTsWithPlane(surface.plane)\n\t\t} else if (surface instanceof SemiEllipsoidSurface) {\n\t\t\tconst isEllipse = surface.asEllipsoidSurface().isCurvesWithSurface(new PlaneSurface(this.getPlane()))\n\t\t\tif (isEllipse.length < 1) return []\n\t\t\tconst possibleInfos = this.isInfosWithCurve(isEllipse[0] as EllipseCurve)\n\t\t\treturn possibleInfos.filter(info => surface.containsPoint(info.p)).map(info => info.tThis)\n\t\t} else if (surface instanceof ProjectedCurveSurface ||\n\t\t\tsurface instanceof EllipsoidSurface ||\n\t\t\tsurface instanceof ConicSurface) {\n\t\t\treturn surface.isCurvesWithPlane(this.getPlane())\n\t\t\t\t.flatMap(curve => this.isInfosWithCurve(curve))\n\t\t\t\t.map(info => info.tThis)\n\t\t} else {\n\t\t\tthrow new Error()\n\t\t}\n\t}\n\n\tisInfosWithBezier(bezierWC: BezierCurve): ISInfo[] {\n\t\tconst bezierLC = bezierWC.transform(this.inverseMatrix)\n\t\tif (new PlaneSurface(P3.XY).containsCurve(bezierLC)) {\n\t\t\treturn this.isInfosWithBezier2D(bezierWC)\n\t\t} else {\n\t\t\tconst infos = bezierLC.isTsWithPlane(P3.XY).mapFilter(tOther => {\n\t\t\t\tconst pLC = bezierLC.at(tOther)\n\t\t\t\tif (this.constructor.XYLCValid(pLC)) {\n\t\t\t\t\treturn {tOther: tOther, p: bezierWC.at(tOther), tThis: this.constructor.XYLCPointT(pLC)}\n\t\t\t\t}\n\t\t\t})\n\t\t\treturn infos\n\t\t}\n\t}\n\n\tisInfosWithBezier2D(bezierWC: BezierCurve, sMin?: number, sMax?: number): ISInfo[] {\n\t\tsMin = isFinite(sMin) ? sMin : bezierWC.tMin\n\t\tsMax = isFinite(sMax) ? sMax : bezierWC.tMax\n\t\tassertf(() => 0 < Math.PI)\n\t\tassertf(() => sMin < sMax)\n\t\treturn Curve.ispsRecursive(this, this.tMin, this.tMax, bezierWC, sMin, sMax)\n\t}\n\n\tisOrthogonal(): boolean {\n\t\treturn this.f1.isPerpendicularTo(this.f2)\n\t}\n\n\tat2(xi: number, eta: number): V3 {\n\t\tassertNumbers(xi, eta)\n\t\t// center + f1 xi + f2 eta\n\t\treturn this.center.plus(this.f1.times(xi)).plus(this.f2.times(eta))\n\t}\n\n\tdebugToMesh(mesh: Mesh, bufferName: string) {\n\t\tmesh[bufferName] || mesh.addVertexBuffer(bufferName, bufferName)\n\t\tfor (let t = 0; t < Math.PI; t += 0.1) {\n\t\t\tconst p = this.at(t)\n\t\t\tmesh[bufferName].push(p, p.plus(this.tangentAt(t).toLength(1)))\n\t\t\tmesh[bufferName].push(p, p.plus(this.normalP(t).toLength(1)))\n\t\t}\n\t\tmesh[bufferName].push(this.center, this.center.plus(this.f1.times(1.2)))\n\t\tmesh[bufferName].push(this.center, this.center.plus(this.f2))\n\t\tmesh[bufferName].push(this.center, this.center.plus(this.normal))\n\t}\n\n}","import {arrayFromFunction, arrayRange, assert, assertVectors, clamp, int, M4, TAU, V3} from 'ts3dutils'\nimport {Mesh, pushQuad} from 'tsgl'\n\nimport {Curve,} from '../index'\n\nconst {ceil, floor} = Math\n\nexport class ImplicitCurve extends Curve {\n\tconstructor(readonly points: V3[],\n\t\t\t\treadonly tangents: V3[],\n\t\t\t\treadonly dir: number = 1,\n\t\t\t\treadonly generator?: string,\n\t\t\t\ttMin: number = (1 == dir ? 0 : -(points.length - 1)),\n\t\t\t\ttMax: number = (1 == dir ? points.length - 1 : 0)) {\n\t\tsuper(tMin, tMax)\n\t\tassert(points.length > 2)\n\t\tassert(0 <= tMin && tMin <= points.length - 1)\n\t\tassert(0 <= tMax && tMax <= points.length - 1)\n\t}\n\n\tlikeCurve(curve: Curve): boolean {\n\t\tthrow new Error('Method not implemented.')\n\t}\n\n\ttoSource(rounder: (x: number) => number = x => x): string {\n\t\treturn this.generator || super.toSource(rounder)\n\t}\n\n\tcontainsPoint(p: V3): boolean {\n\t\tassertVectors(p)\n\t\treturn !isNaN(this.pointT(p))\n\t}\n\n\tequals(obj: any): boolean {\n\t\treturn this == obj ||\n\t\t\tObject.getPrototypeOf(obj) == PICurve.prototype\n\t\t\t&& this.points[0].equals(obj.points[0])\n\t\t\t&& this.tangents[0].equals(obj.tangents[0])\n\t}\n\n\thashCode(): int {\n\t\treturn [this.points[0], this.tangents[0]].hashCode()\n\t}\n\n\ttangentP(pWC: V3): V3 {\n\t\tassertVectors(pWC)\n\t\tassert(this.containsPoint(pWC), 'this.containsPoint(pWC)' + this.containsPoint(pWC))\n\t\tconst t = this.pointT(pWC)\n\t\treturn this.tangentAt(t)\n\t}\n\n\ttangentAt(t: number): V3 {\n\t\tt = clamp(t, this.tMin, this.tMax)\n\t\treturn V3.lerp(this.tangents[floor(t)], this.tangents[ceil(t)], t % 1)\n\t}\n\n\tat(t: number): V3 {\n\t\tassert(!isNaN(t))\n\t\treturn V3.lerp(this.points[floor(t)], this.points[ceil(t)], t % 1)\n\t}\n\n\tgetConstructorParameters(): any[] {\n\t\treturn []\n\t}\n\n\ttransform(m4: M4): ImplicitCurve {\n\t\treturn new ImplicitCurve(\n\t\t\tm4.transformedPoints(this.points),\n\t\t\tm4.transformedVectors(this.tangents))\n\t}\n\n\troots(): [number[], number[], number[]] {\n\t\tconst allTs = arrayRange(0, this.points.length)\n\t\treturn [allTs, allTs, allTs]\n\t}\n\n\taddToMesh(mesh: Mesh, res: int = 4, radius: number = 0, pointStep = 1): void {\n\t\tconst baseNormals = arrayFromFunction(res, i => V3.polar(1, TAU * i / res))\n\t\tconst baseVertices = arrayFromFunction(res, i => V3.polar(radius, TAU * i / res))\n\t\tlet prevTangent = V3.Z, prevMatrix = M4.IDENTITY\n\t\tfor (let i = ceil(this.tMin); i < floor(this.tMax); i += pointStep) {\n\n\t\t\tconst start = mesh.vertices.length\n\t\t\tif (ceil(this.tMin) !== i) {\n\t\t\t\tfor (let j = 0; j < res; j++) {\n\t\t\t\t\tpushQuad(mesh.TRIANGLES, true,\n\t\t\t\t\t\tstart - res + j, start + j,\n\t\t\t\t\t\tstart - res + (j + 1) % res, start + (j + 1) % res)\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst point = this.points[i], tangent = this.tangents[i]\n\t\t\tconst tangentMatrix = M4.rotateAB(prevTangent, tangent).times(prevMatrix)\n\t\t\tmesh.normals.push(...tangentMatrix.transformedVectors(baseNormals))\n\t\t\tconst baseMatrix = M4.translate(point).times(tangentMatrix)\n\t\t\tmesh.vertices.push(...baseMatrix.transformedPoints(baseVertices))\n\t\t\tprevTangent = tangent\n\t\t\tprevMatrix = tangentMatrix\n\t\t}\n\t}\n}\n\nImplicitCurve.prototype.tIncrement = 1","import {\n\tarrayFromFunction, assert, assertf, assertInst, assertNever, assertNumbers, assertVectors, between, combinations,\n\teq, eq0, fuzzyUniques, fuzzyUniquesF, gaussLegendre24Weights, gaussLegendre24Xs, gaussLegendreQuadrature24,\n\thasConstructor, int, lerp, M4, Matrix, MINUS, newtonIterate1d, newtonIterate2dWithDerivatives,\n\tnewtonIterateWithDerivative, NLA_PRECISION, solveCubicReal2, Tuple3, V, V3, Vector,\n} from 'ts3dutils'\nimport {Mesh} from 'tsgl'\n\nimport {\n\tCurve, Edge, EllipseCurve, EllipsoidSurface, ISInfo, L3, P3, PlaneSurface, ProjectedCurveSurface, R2_R,\n\tSemiCylinderSurface, SemiEllipsoidSurface, Surface,\n} from '../index'\n\nconst {PI, abs, sin, cos} = Math\n\nexport class BezierCurve extends Curve {\n\t/**\n\t * https://en.wikipedia.org/wiki/Cubic_function#/media/File:Graph_of_cubic_polynomial.svg\n\t */\n\tstatic readonly EX2D = BezierCurve.graphXY(2, -3, -3, 2)\n\tstatic readonly EX3D = new BezierCurve(V3.O, V(-0.1, -1, 1), V(1.1, 1, 1), V3.X)\n\tstatic readonly QUARTER_CIRCLE = BezierCurve.approximateUnitArc(PI / 2)\n\treadonly p0: V3\n\treadonly p1: V3\n\treadonly p2: V3\n\treadonly p3: V3\n\n\tconstructor(p0: V3, p1: V3, p2: V3, p3: V3, tMin: number = -0.1, tMax: number = 1.1) {\n\t\tsuper(tMin, tMax)\n\t\tassertVectors(p0, p1, p2, p3)\n\t\tassert(isFinite(tMin) && isFinite(tMax))\n\t\t//assert(!L3.throughPoints(p0, p3).containsPoint(p1) || !L3.throughPoints(p0, p3).containsPoint(p2))\n\t\tthis.p0 = p0\n\t\tthis.p1 = p1\n\t\tthis.p2 = p2\n\t\tthis.p3 = p3\n\t}\n\n\tget points(): V3[] {\n\t\treturn [this.p0, this.p1, this.p2, this.p3]\n\t}\n\n\t/**\n\t * Returns a curve with curve.at(x) == V(x, ax³ + bx² + cx + d, 0)\n\t */\n\tstatic graphXY(a: number, b: number, c: number, d: number, tMin?: number, tMax?: number): BezierCurve {\n\t\t// d = p0y\n\t\t// c = -3 p0y + 3 p1y => p1y = c/3 + p0y\n\t\t// b = 3 p0y - 6 p1y + 3 p2y => p2y = b/3 - p0y + 2 p1y\n\t\t// a = -p0y + 3 p1y -3 p2y + p3y => p3y = a + p0y - 3 p1y + 3 p2y\n\t\tconst p0y = d\n\t\tconst p1y = c / 3 + p0y\n\t\tconst p2y = b / 3 - p0y + 2 * p1y\n\t\tconst p3y = a + p0y - 3 * p1y + 3 * p2y\n\t\treturn new BezierCurve(V(0, p0y), V(1 / 3, p1y), V(2 / 3, p2y), V(1, p3y), tMin, tMax)\n\t}\n\n\tstatic quadratic(a: V3, b: V3, c: V3, tMin: number = 0, tMax: number = 1): BezierCurve | L3 {\n\t\tconst line = L3.throughPoints(a, c)\n\t\tif (line.containsPoint(b)) {\n\t\t\treturn line\n\t\t} else {\n\t\t\t// p1 = 1/3 a + 2/3 b\n\t\t\t// p2 = 1/3 c + 2/3 b\n\t\t\treturn new BezierCurve(a, b.times(2).plus(a).div(3), b.times(2).plus(c).div(3), c, tMin, tMax)\n\t\t}\n\t}\n\n\t/**\n\t * Returns a bezier curve which approximates a CCW unit circle arc starting at V3.X of angle phi\n\t * phi <= PI / 2 is recommended\n\t *\n\t * Formula from here: https://pomax.github.io/bezierinfo/#circles_cubic\n\t */\n\tstatic approximateUnitArc(phi: number): BezierCurve {\n\t\tconst f = 4 / 3 * Math.tan(phi / 4)\n\t\treturn new BezierCurve(\n\t\t\tV3.X,\n\t\t\tnew V3(1, f, 0),\n\t\t\tnew V3(cos(phi) + f * sin(phi), sin(phi) - f * cos(phi), 0),\n\t\t\tV3.sphere(phi, 0),\n\t\t\t0, 1)\n\t}\n\n\tstatic testEdges() {\n\t\tconst curve2 = BezierCurve.graphXY(2, -3, -3, 2, 0.6, 2)\n\t\tconst items = curve2.magic().map(c => Edge.forCurveAndTs(c).translate(3))\n\t\tconsole.log(items.length)\n\n\t\treturn [Edge.forCurveAndTs(curve2)].concat(items)\n\t}\n\n\tgetConstructorParameters(): any[] {\n\t\treturn [this.p0, this.p1, this.p2, this.p3, this.tMin, this.tMax]\n\t}\n\n\tat(t: number): V3 {\n\t\t// = s^3 p0 + 3 s^2 t p1 + 3 s t^2 p2 + t^3 p3\n\t\tassertNumbers(t)\n\t\tconst p0 = this.p0, p1 = this.p1, p2 = this.p2, p3 = this.p3\n\t\tconst s = 1 - t, c0 = s * s * s, c1 = 3 * s * s * t, c2 = 3 * s * t * t, c3 = t * t * t\n\t\treturn new V3(\n\t\t\tp0.x * c0 + p1.x * c1 + p2.x * c2 + p3.x * c3,\n\t\t\tp0.y * c0 + p1.y * c1 + p2.y * c2 + p3.y * c3,\n\t\t\tp0.z * c0 + p1.z * c1 + p2.z * c2 + p3.z * c3)\n\t}\n\n\t/**\n\t * s := (1 - t)\n\t * at(t) := s³ p0 + 3 s² t p1 + 3 s t² p2 + t³ p3\n\t * tangent(t) := 3 s² (p1 - p0) + 6 s t (p2 - p1) + 3 t² (p3 - p2)\n\t *            := 3 (1 - t)² (p1 - p0) + 6 (1 - t) t (p2 - p1) + 3 t² (p3 - p2)\n\t *            := 3 (1 - 2 t + t²) (p1 - p0) + 6 (t - t²) (p2 - p1) + 3 t² (p3 - p2)\n\t *            := (3 (p3 - p2) - 6 (p2 - p1) + 3 (p1 - p0)) t²*\n\t *                + (-6 (p1 - p0) + (p2 - p1)) t\n\t *                + 3 (p1 - p0)\n\t */\n\ttangentAt(t: number): V3 {\n\t\tassertNumbers(t)\n\t\tconst p0 = this.p0, p1 = this.p1, p2 = this.p2, p3 = this.p3\n\t\tconst s = 1 - t, c01 = 3 * s * s, c12 = 6 * s * t, c23 = 3 * t * t\n\t\treturn new V3(\n\t\t\t(p1.x - p0.x) * c01 + (p2.x - p1.x) * c12 + (p3.x - p2.x) * c23,\n\t\t\t(p1.y - p0.y) * c01 + (p2.y - p1.y) * c12 + (p3.y - p2.y) * c23,\n\t\t\t(p1.z - p0.z) * c01 + (p2.z - p1.z) * c12 + (p3.z - p2.z) * c23)\n\t}\n\n\tddt(t: number): V3 {\n\t\tassertNumbers(t)\n\t\tconst p0 = this.p0, p1 = this.p1, p2 = this.p2, p3 = this.p3\n\t\tconst c012 = 6 * (1 - t), c123 = 6 * t\n\t\treturn new V3(\n\t\t\t(p2.x - 2 * p1.x + p0.x) * c012 + (p3.x - 2 * p2.x + p1.x) * c123,\n\t\t\t(p2.y - 2 * p1.y + p0.y) * c012 + (p3.y - 2 * p2.y + p1.y) * c123,\n\t\t\t(p2.z - 2 * p1.z + p0.z) * c012 + (p3.z - 2 * p2.z + p1.z) * c123)\n\t}\n\n\tnormalP(t: number): V3 {\n\t\tconst tangent = this.tangentAt(t)\n\t\tconst rot = tangent.cross(this.ddt(t))\n\t\treturn rot.cross(tangent)\n\t}\n\n\tisTsWithPlane(plane: P3) {\n\t\tassertInst(P3, plane)\n\t\t/*\n\t\t We are solving for t:\n\t\t n := plane.normal1\n\t\t this.at(t) DOT n == plane.w // according to plane definition\n\t\t (a t³ + b t² + c t + d) DOT n == plane.w // bezier curve as cubic equation\n\t\t (a DOT n) t³ + (b DOT n) t³ + (c DOT n) t + d DOT n - plane.w == 0 // multiply out DOT n, minus plane.w\n\t\t */\n\n\t\tconst {p0, p1, p2, p3} = this\n\t\tconst n = plane.normal1\n\t\tconst a = p1.minus(p2).times(3).minus(p0).plus(p3)\n\t\tconst b = p0.plus(p2).times(3).minus(p1.times(6))\n\t\tconst c = p1.minus(p0).times(3)\n\t\tconst d = p0\n\n\t\treturn solveCubicReal2(a.dot(n), b.dot(n), c.dot(n), d.dot(n) - plane.w)\n\t\t\t.filter(t => between(t, this.tMin, this.tMax))\n\t}\n\n\tisTsWithSurface(surface: Surface): number[] {\n\t\tif (surface instanceof PlaneSurface) {\n\t\t\treturn this.isTsWithPlane(surface.plane)\n\t\t}\n\t\tif (surface instanceof SemiCylinderSurface) {\n\t\t\tconst projPlane = new P3(surface.dir.unit(), 0)\n\t\t\tconst projThis = this.project(projPlane)\n\t\t\tconst projEllipse = surface.baseCurve.project(projPlane)\n\t\t\treturn projEllipse.isInfosWithBezier2D(projThis).map(info => info.tOther)\n\t\t}\n\t\tif (surface instanceof ProjectedCurveSurface) {\n\t\t\tconst projPlane = new P3(surface.dir.unit(), 0)\n\t\t\tconst projThis = this.project(projPlane)\n\t\t\tconst projEllipse = surface.baseCurve.project(projPlane)\n\t\t\treturn projEllipse.isInfosWithCurve(projThis).map(info => info.tOther)\n\t\t}\n\t\tif (surface instanceof EllipsoidSurface) {\n\t\t\tconst thisOC = this.transform(surface.inverseMatrix)\n\t\t\tconst f = (t: number) => thisOC.at(t).length() - 1\n\t\t\tconst df = (t: number) => thisOC.at(t).unit().dot(thisOC.tangentAt(t))\n\n\t\t\tconst stepSize = 1 / (1 << 11)\n\t\t\tconst STEPS = (this.tMax - this.tMin) / stepSize\n\t\t\tconst result: number[] = []\n\t\t\tfor (let startT = this.tMin; startT <= this.tMax; startT += stepSize) {\n\t\t\t\tconst dt = stepSize * thisOC.tangentAt(startT).length()\n\t\t\t\tif (abs(f(startT)) <= dt) {\n\t\t\t\t\t//const t = newtonIterate1d(f, startT, 16)\n\t\t\t\t\tlet t = newtonIterateWithDerivative(f, startT, 16, df)\n\t\t\t\t\tif (!eq0(f(t)) || eq0(df(t))) {\n\t\t\t\t\t\tconst a = startT - dt, b = startT + dt\n\t\t\t\t\t\tt = newtonIterate1d(df, startT, 16)\n\t\t\t\t\t\t//if (f(a) * f(b) < 0) {\n\t\t\t\t\t\t//    t = bisect(f, a, b, 16)\n\t\t\t\t\t\t//} else if (df(a) * df(b) < 0) {\n\t\t\t\t\t\t//    t = bisect(df, a, b, 16)\n\t\t\t\t\t\t//}\n\t\t\t\t\t}\n\t\t\t\t\tif (eq0(f(t)) && !result.some(r => eq(r, t))) {\n\t\t\t\t\t\tresult.push(t)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result\n\t\t}\n\t\tif (surface instanceof SemiEllipsoidSurface) {\n\t\t\treturn this.isTsWithSurface(surface.asEllipsoidSurface()).filter(t => surface.containsPoint(this.at(t)))\n\t\t}\n\t\tthrow new Error()\n\t}\n\n\tlikeCurve(curve: Curve): boolean {\n\t\treturn this == curve ||\n\t\t\thasConstructor(curve, BezierCurve)\n\t\t\t&& this.p0.like(curve.p0)\n\t\t\t&& this.p1.like(curve.p1)\n\t\t\t&& this.p2.like(curve.p2)\n\t\t\t&& this.p3.like(curve.p3)\n\t}\n\n\tequals(obj: any): boolean {\n\t\treturn this == obj ||\n\t\t\thasConstructor(obj, BezierCurve)\n\t\t\t&& this.p0.equals(obj.p0)\n\t\t\t&& this.p1.equals(obj.p1)\n\t\t\t&& this.p2.equals(obj.p2)\n\t\t\t&& this.p3.equals(obj.p3)\n\t}\n\n\thashCode(): int {\n\t\tlet hashCode = 0\n\t\thashCode = hashCode * 31 + this.p0.hashCode()\n\t\thashCode = hashCode * 31 + this.p1.hashCode()\n\t\thashCode = hashCode * 31 + this.p2.hashCode()\n\t\thashCode = hashCode * 31 + this.p3.hashCode()\n\t\treturn hashCode | 0\n\t}\n\n\t/**\n\t * Checks if this curve is colinear to the passed curve, i.e.\n\t * for every t:number there exists a s:number with this.at(t) = curve.at(s)\n\t */\n\tisColinearTo(curve: BezierCurve): boolean {\n\t\tif (this === curve || this.likeCurve(curve)) return true\n\t\tif (!(curve instanceof BezierCurve)) return false\n\t\t// first, find out where/if curve.p0 and curve.p3 are on this\n\t\t// then split this at curve.p0 --> curve.p3 to compare points p1 and p2\n\t\tlet curveP0T, curveP3T\n\t\t// assign in if condition to exploit short-circuit\n\t\tif (isNaN(curveP0T = this.pointT(curve.p0)) || isNaN(curveP3T = this.pointT(curve.p3))) {\n\t\t\treturn false\n\t\t}\n\t\tlet thisSplit\n\t\tif (eq(1, curveP0T)) {\n\t\t\t// this.split(curveP0T).right is degenerate in this case, so we need to handle it separately\n\n\t\t\t// this.split(curveP3T): 0 --> curveP3T --> 1\n\t\t\t// .right: curveP3T --> 1\n\t\t\t// .reversed(): 1 --> curveP3T\n\t\t\tthisSplit = this.split(curveP3T)[1].reversed()\n\t\t} else {\n\t\t\t// curveP3T describes the point on this\n\t\t\t// adjust it so it describes the same point on this.split(curveP0T).right\n\t\t\t// this:                       0           p0t        p3t      1\n\t\t\t//                             |            |          |       |\n\t\t\t// this.split(curveP0T).right:              0        p3tad     1\n\t\t\tconst curveP3Tadjusted = (curveP3T - curveP0T) / (1 - curveP0T)\n\t\t\tthisSplit = this.split(curveP0T)[1].split(curveP3Tadjusted)[0]\n\t\t}\n\n\t\treturn curve.likeCurve(thisSplit)\n\t}\n\n\treversed(): BezierCurve {\n\t\treturn new BezierCurve(this.p3, this.p2, this.p1, this.p0, 1 - this.tMax, 1 - this.tMin)\n\t}\n\n\tgetCoefficients() {\n\t\tconst {p0, p1, p2, p3} = this\n\t\t// calculate cubic equation coefficients\n\t\t// a t³ + b t² + c t + d = 0\n\t\t// multiplying out the cubic Bézier curve equation gives:\n\t\t// a = -p0 + 3 p1 - 3 p2 + p3\n\t\t// b = 3 p0 - 6 p1 + 3 p2\n\t\t// c = -3 p0 + 3 p1\n\t\t// d = p0 - p\n\t\tconst a = p1.minus(p2).times(3).minus(p0).plus(p3)\n\t\tconst b = p0.plus(p2).times(3).minus(p1.times(6))\n\t\tconst c = p1.minus(p0).times(3)\n\t\tconst d = p0\n\t\treturn [a, b, c, d]\n\t}\n\n\ttangentCoefficients() {\n\t\tconst {p0, p1, p2, p3} = this\n\t\tconst p01 = p1.minus(p0), p12 = p2.minus(p1), p23 = p3.minus(p2)\n\t\tconst a = p01.plus(p23).times(3).minus(p12.times(6))\n\t\tconst b = p12.minus(p01).times(6)\n\t\tconst c = p01.times(3)\n\t\treturn [V3.O, a, b, c]\n\t}\n\n\tpointT(p: V3): number {\n\t\treturn this.closestTToPoint(p)\n\t}\n\n\tpointT3(p: V3) {\n\t\tconst {p0, p1, p2, p3} = this\n\t\t// calculate cubic equation coefficients\n\t\t// a t³ + b t² + c t + d = 0\n\t\t// multiplying out the cubic Bézier curve equation gives:\n\t\t// a = -p0 + 3 p1 - 3 p2 + p3\n\t\t// b = 3 p0 - 6 p1 + 3 p2\n\t\t// c = -3 p0 + 3 p1\n\t\t// d = p0 - p\n\t\tconst a = p1.minus(p2).times(3).minus(p0).plus(p3)\n\t\tconst b = p0.plus(p2).times(3).minus(p1.times(6))\n\t\tconst c = p1.minus(p0).times(3)\n\t\tconst d = p0.minus(p)\n\n\n\t\t// a t³ + b t² + c t + d = 0 is 3 cubic equations, some of which can be degenerate\n\t\tconst maxDim = NLA_PRECISION < a.maxAbsElement() ? a.maxAbsDim()\n\t\t\t: NLA_PRECISION < b.maxAbsElement() ? b.maxAbsDim()\n\t\t\t\t\t\t   : NLA_PRECISION < c.maxAbsElement() ? c.maxAbsDim()\n\t\t\t\t  : assertNever()\n\n\t\tconst results = solveCubicReal2(a.e(maxDim), b.e(maxDim), c.e(maxDim), d.e(maxDim)).filter(t => this.at(t).like(p))\n\t\tif (0 == results.length) return NaN\n\t\tif (1 == results.length) return results[0]\n\t\tassert(false, 'multiple intersection ' + this.toString() + p.sce)\n\t}\n\n\tpointT2(p: V3) {\n\t\tconst {p0, p1, p2, p3} = this\n\t\t// calculate cubic equation coefficients\n\t\t// a t³ + b t² + c t + d = 0\n\t\t// multiplying out the cubic Bézier curve equation gives:\n\t\t// a = -p0 + 3 p1 - 3 p2 + p3\n\t\t// b = 3 p0 - 6 p1 + 3 p2\n\t\t// c = -3 p0 + 3 p1\n\t\t// d = p0 - p\n\t\tconst a = p1.minus(p2).times(3).minus(p0).plus(p3).els()\n\t\tconst b = p0.plus(p2).times(3).minus(p1.times(6)).els()\n\t\tconst c = p1.minus(p0).times(3).els()\n\t\tconst d = p0.minus(p).els()\n\t\tlet results = undefined\n\n\t\t// assume passed point is on curve and that curve does not self-intersect,\n\t\t// i.e. there is exactly one correct result for t\n\t\t// try to find a single result in the x-dimension, if multiple are found,\n\t\t// filter them by checking the other dimensions\n\t\tfor (let dim = 0; dim < 3; dim++) {\n\t\t\tif (eq0(a[dim]) && eq0(b[dim]) && eq0(c[dim])) {\n\t\t\t\t// for case x:\n\t\t\t\t// ax == bx == cx == 0 => x(t) = dx\n\t\t\t\t// x value is constant\n\t\t\t\t// if x == 0 for all t, this does not limit the result, otherwise, there is no result, i.e\n\t\t\t\t// the passed point is not on the curve\n\t\t\t\tif (!eq0(d[dim])) return NaN\n\t\t\t} else {\n\n\t\t\t\tconst newResults = solveCubicReal2(a[dim], b[dim], c[dim], d[dim])\n\t\t\t\tif (0 == newResults.length) return NaN\n\t\t\t\tif (1 == newResults.length) return newResults[0]\n\t\t\t\tif (results) {\n\t\t\t\t\tresults = results.filter(t => newResults.some(t2 => eq(t, t2)))\n\t\t\t\t\tif (0 == results.length) return NaN\n\t\t\t\t\tif (1 == results.length) return results[0]\n\t\t\t\t} else {\n\t\t\t\t\tresults = newResults\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tassert(false, 'multiple intersection ' + results + this.toString() + p.sce)\n\t}\n\n\ttransform(m4: M4) {\n\t\treturn new BezierCurve(\n\t\t\tm4.transformPoint(this.p0),\n\t\t\tm4.transformPoint(this.p1),\n\t\t\tm4.transformPoint(this.p2),\n\t\t\tm4.transformPoint(this.p3),\n\t\t\tthis.tMin, this.tMax) as this\n\t}\n\n\tisClosed(): boolean {\n\t\treturn this.p0.like(this.p3)\n\t}\n\n\tisQuadratic(): boolean {\n\t\treturn this.p1.like(this.p2)\n\t}\n\n\tdebugToMesh<T extends string>(mesh: Mesh, bufferName: T) {\n\t\tconst result = mesh.addVertexBuffer(bufferName, bufferName) as any\n\t\tfor (let t = -2; t <= 2; t += 0.01) {\n\t\t\tconst p = this.at(t)\n\t\t\tresult[bufferName].push(p, p.plus(this.tangentAt(t).toLength(1)))\n\t\t\tresult[bufferName].push(p, p.plus(this.normalP(t).toLength(1)))\n\t\t}\n\t\tresult[bufferName].push(this.p0, this.p1)\n\t\tresult[bufferName].push(this.p1, this.p2)\n\t\tresult[bufferName].push(this.p2, this.p3)\n\t}\n\n\tsplit(t: number): [BezierCurve, BezierCurve] {\n\t\t// do de Casteljau's algorithm at t, the resulting points are the points needed to create 2 new curves\n\t\tconst s = (1 - t)\n\t\tconst {p0, p1, p2, p3} = this\n\t\t/*\n\t\tp3 // n3\n\t\tb01 = s p0 + t p1\n\t\tb11 = s p1 + t p2\n\t\tb21 = s p2 + t p3 // n2\n\t\tb02 = s b01 + t b11\n\t\tb12 = s b11 + t b21 // n1\n\t\tb03 = s b02 + t b12 // n0\n\n\t\tc01 =\n\t\t*/\n\t\tconst b01 = p0.times(s).plus(p1.times(t)),\n\t\t\tb11 = p1.times(s).plus(p2.times(t)),\n\t\t\tb21 = p2.times(s).plus(p3.times(t))\n\t\tconst b02 = b01.times(s).plus(b11.times(t)), b12 = b11.times(s).plus(b21.times(t))\n\t\tconst b03 = b02.times(s).plus(b12.times(t))\n\t\treturn [new BezierCurve(p0, b01, b02, b03), new BezierCurve(b03, b12, b21, p3)]\n\t}\n\n\tcontainsPoint(p: V3): boolean {\n\t\treturn isFinite(this.pointT(p))\n\t}\n\n\troots(): Tuple3<number[]> {\n\t\t/**\n\t\t *            := (3 (p3 - p2) - 6 (p2 - p1) + 3 (p1 - p0)) t²*\n\t\t *                + (-6 (p1 - p0) + 6 (p2 - p1)) t\n\t\t *                + 3 (p1 - p0)\n\t\t *                */\n\t\tconst {p0, p1, p2, p3} = this\n\t\tconst p01 = p1.minus(p0), p12 = p2.minus(p1), p23 = p3.minus(p2)\n\t\tconst a = p01.plus(p23).times(3).minus(p12.times(6))\n\t\tconst b = p12.minus(p01).times(6)\n\t\tconst c = p01.times(3)\n\n\t\treturn arrayFromFunction(3, dim => solveCubicReal2(0, a.e(dim), b.e(dim), c.e(dim)))\n\t}\n\n\tisInfosWithLine(anchorWC: V3, dirWC: V3, tMin?: number, tMax?: number, lineMin = -100000, lineMax = 100000): ISInfo[] {\n\t\tconst dirLength = dirWC.length()\n\t\t// TODO: no:\n\t\tlet result = Curve.ispsRecursive(this, this.tMin, this.tMax, new L3(anchorWC, dirWC.unit()), lineMin, lineMax)\n\t\tresult = fuzzyUniquesF(result, info => info.tOther)\n\t\tresult.forEach(info => (info.tOther /= dirLength))\n\t\treturn result\n\t\t// looking for this.at(t) == line.at(s)\n\t\t// this.at(t).x == anchorWC.x + dirWC.x * s\n\t\t// (this.at(t).x - anchorWC.x) / dirWC.x == s (analogue for y and z) (1x, 1y, 1z)\n\t\t// (1x) - (1y):\n\t\t// (this.at(t).x - anchorWC.x) / dirWC.x - (this.at(t).y - anchorWC.y) / dirWC.y == 0\n\t\t// (this.at(t).x - anchorWC.x) * dirWC.y - (this.at(t).y - anchorWC.y) * dirWC.x == 0 (2)\n\n\t\t// cubic equation params (see #pointT):\n\t\tconst {p0, p1, p2, p3} = this\n\t\tconst a = p1.minus(p2).times(3).minus(p0).plus(p3)\n\t\tconst b = p0.plus(p2).times(3).minus(p1.times(6))\n\t\tconst c = p1.minus(p0).times(3)\n\t\tconst d = p0\n\n\t\t// modifier cubic equation stP to get (1)\n\t\t// const w = a.x * dirWC.y - a.y * dirWC.x\n\t\t// const x = b.x * dirWC.y - b.y * dirWC.x\n\t\t// const y = c.x * dirWC.y - c.y * dirWC.x\n\t\t// const z = (d.x - anchorWC.x) * dirWC.y - (d.y - anchorWC.y) * dirWC.x\n\n\t\t// the above version doesn't work for dirWC.x == dirWC.y == 0, so:\n\t\tconst absMinDim = dirWC.minAbsDim()\n\t\tconst [coord0, coord1] = [[1, 2], [2, 0], [0, 1]][absMinDim]\n\n\t\tconst w = a.e(coord0) * dirWC.e(coord1) - a.e(coord1) * dirWC.e(coord0)\n\t\tconst x = b.e(coord0) * dirWC.e(coord1) - b.e(coord1) * dirWC.e(coord0)\n\t\tconst y = c.e(coord0) * dirWC.e(coord1) - c.e(coord1) * dirWC.e(coord0)\n\t\tconst z = (d.e(coord0) - anchorWC.e(coord0)) * dirWC.e(coord1) - (d.e(coord1) - anchorWC.e(coord1)) * dirWC.e(coord0)\n\n\t\ttMin = isFinite(tMin) ? tMin : this.tMin\n\t\ttMax = isFinite(tMax) ? tMax : this.tMax\n\n\t\t// we ignored a dimension in the previous step, so we need to check it too\n\t\treturn solveCubicReal2(w, x, y, z).mapFilter(tThis => {\n\t\t\tif (tMin <= tThis && tThis <= tMax) {\n\t\t\t\tconst p = this.at(tThis)\n\t\t\t\t// console.log(t*t*t*w+t*t*x+t*y+z, dirWC.length())\n\t\t\t\tconst s = p.minus(anchorWC).dot(dirWC) / dirWC.dot(dirWC)\n\t\t\t\tconst lineAtS = dirWC.times(s).plus(anchorWC)\n\t\t\t\tif (lineAtS.like(p)) return {tThis: tThis, tOther: s, p: p}\n\t\t\t}\n\t\t})\n\t}\n\n\tclosestPointToLine(line: L3, tMin: number, tMax: number) {\n\t\t// (this(t)-line(s)) * line.dir == 0 (1)\n\t\t// (this(t)-line(s)) * this.tangentAt(t) == 0 (2)\n\t\t// this(t) * line.dir - line(s) * line.dir == 0\n\t\t// this(t) * line.dir - line.anchor * line.dir - s line.dir * line.dir == 0\n\t\t// this(t) * line.dir - line.anchor * line.dir == s (3)\n\t\t// insert (3) in (2)\n\t\t// (this(t)-line(this(t) * line.dir - line.anchor * line.dir)) * this.tangentAt(t) == 0 (4)\n\t\t// (4) is a 5th degree polynomial, solve numerically\n\n\t\ttMin = isFinite(tMin) ? tMin : this.tMin\n\t\ttMax = isFinite(tMax) ? tMax : this.tMax\n\n\t\tconst anchorDotDir1 = line.anchor.dot(line.dir1)\n\t\tconst f = (t: number) => {\n\t\t\tconst atT = this.at(t)\n\t\t\treturn (atT.minus(line.at(atT.dot(line.dir1) - anchorDotDir1))).dot(this.tangentAt(t))\n\t\t}\n\n\t\tconst STEPS = 32\n\t\tconst startT = arrayFromFunction(STEPS, i => tMin + (tMax - tMin) * i / STEPS).withMax(t => -f(t))\n\n\t\treturn newtonIterate1d(f, startT, 8)\n\n\n\t}\n\n\t/**\n\t *\n\t * @param bezier\n\t * @param tMin\n\t * @param tMax\n\t * @param sMin\n\t * @param {number=} sMax\n\t * @returns\n\t */\n\tisInfosWithBezie3(bezier: BezierCurve, tMin?: number, tMax?: number, sMin?: number, sMax?: number) {\n\t\tconst handleStartTS = (startT: number, startS: number) => {\n\t\t\tif (!result.some(info => eq(info.tThis, startT) && eq(info.tOther, startS))) {\n\t\t\t\tconst f1: R2_R = (t, s) => this.tangentAt(t).dot(this.at(t).minus(bezier.at(s)))\n\t\t\t\tconst f2: R2_R = (t, s) => bezier.tangentAt(s).dot(this.at(t).minus(bezier.at(s)))\n\t\t\t\t// f = (b1, b2, t1, t2) = b1.tangentAt(t1).dot(b1.at(t1).minus(b2.at(t2)))\n\t\t\t\tconst fdt1 = (b1, b2, t1, t2) => b1.ddt(t1).dot(b1.at(t1).minus(b2.at(t2))) + (b1.tangentAt(t1).squared())\n\t\t\t\tconst fdt2 = (b1, b2, t1, t2) => -b1.tangentAt(t1).dot(b2.tangentAt(t2))\n\t\t\t\tconst ni = newtonIterate2dWithDerivatives(f1, f2, startT, startS, 16,\n\t\t\t\t\tfdt1.bind(undefined, this, bezier), fdt2.bind(undefined, this, bezier),\n\t\t\t\t\t(t, s) => -fdt2(bezier, this, s, t), (t, s) => -fdt1(bezier, this, s, t))\n\t\t\t\tresult.push({tThis: ni.x, tOther: ni.y, p: this.at(ni.x)})\n\t\t\t}\n\t\t}\n\n\t\ttMin = 'number' == typeof tMin && isFinite(tMin) ? tMin : this.tMin\n\t\ttMax = 'number' == typeof tMax && isFinite(tMax) ? tMax : this.tMax\n\t\tsMin = 'number' == typeof sMin && isFinite(sMin) ? sMin : bezier.tMin\n\t\tsMax = 'number' == typeof sMax && isFinite(sMax) ? sMax : bezier.tMax\n\n\t\t// stack of indices:\n\t\tconst indices = [tMin, tMax, sMin, sMax]\n\t\tconst tMid = (tMin + tMax) / 2\n\t\tconst sMid = (sMin + sMax) / 2\n\t\tconst aabbs = [this.getAABB(tMin, tMid), this.getAABB(tMid, tMax), bezier.getAABB(sMin, sMin), bezier.getAABB(sMid, sMax)]\n\t\tconst result: ISInfo[] = []\n\t\twhile (indices.length) {\n\t\t\tconst i = indices.length - 4\n\t\t\tconst tMin = indices[i], tMax = indices[i + 1], sMin = indices[i + 2], sMax = indices[i + 3]\n\t\t\tindices.length -= 4\n\t\t\tconst thisAABB = this.getAABB(tMin, tMax)\n\t\t\tconst otherAABB = bezier.getAABB(sMin, sMax)\n\t\t\t// console.log(tMin, tMax, sMin, sMax, thisAABB.sce, otherAABB.sce)\n\t\t\tif (thisAABB && otherAABB && thisAABB.intersectsAABB2d(otherAABB)) {\n\t\t\t\tconst tMid = (tMin + tMax) / 2\n\t\t\t\tconst sMid = (sMin + sMax) / 2\n\t\t\t\tconst EPS = 0.00001\n\t\t\t\tif (tMax - tMin < EPS || sMax - sMin < EPS) {\n\t\t\t\t\tconsole.log(tMin, tMax, sMin, sMax)\n\t\t\t\t\tconsole.log(thisAABB.sce)\n\t\t\t\t\tconsole.log(otherAABB.sce)\n\t\t\t\t\tconsole.log(tMid, sMid)\n\t\t\t\t\thandleStartTS(tMid, sMid)\n\t\t\t\t} else {\n\t\t\t\t\tArray.prototype.push.call(indices,\n\t\t\t\t\t\ttMin, tMid, sMin, sMid,\n\t\t\t\t\t\ttMin, tMid, sMid, sMax,\n\t\t\t\t\t\ttMid, tMax, sMin, sMid,\n\t\t\t\t\t\ttMid, tMax, sMid, sMax)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result\n\t}\n\n\tisInfosWithBezier(bezier: BezierCurve, tMin?: number, tMax?: number, sMin?: number, sMax?: number): ISInfo[] {\n\n\t\ttMin = 'number' == typeof tMin && isFinite(tMin) ? tMin : this.tMin\n\t\ttMax = 'number' == typeof tMax && isFinite(tMax) ? tMax : this.tMax\n\t\tsMin = 'number' == typeof sMin && isFinite(sMin) ? sMin : bezier.tMin\n\t\tsMax = 'number' == typeof sMax && isFinite(sMax) ? sMax : bezier.tMax\n\n\t\tassertf(() => tMin < tMax)\n\t\tassertf(() => sMin < sMax)\n\t\tconst result: ISInfo[] = []\n\n\t\tconst likeCurves = this.likeCurve(bezier), colinearCurves = this.isColinearTo(bezier)\n\t\tif (likeCurves || colinearCurves) {\n\t\t\tif (!likeCurves) {\n\t\t\t\t// only colinear\n\t\t\t\t// recalculate sMin and sMax so they are valid on this, from then on we can ignore bezier\n\t\t\t\tsMin = this.pointT(bezier.at(sMin))\n\t\t\t\tsMax = this.pointT(bezier.at(sMax))\n\t\t\t}\n\t\t\ttMin = Math.min(tMin, sMin)\n\t\t\ttMax = Math.max(tMax, sMax)\n\t\t\tconst splits = fuzzyUniques(this.roots().concatenated().filter(isFinite).concat([tMin, tMax])).sort(MINUS)\n\t\t\t//const aabbs = arrayFromFunction(splits.length - 1, i => this.getAABB(splits[i], splits[i + 1]))\n\t\t\tArray.from(combinations(splits.length - 1)).forEach(({i, j}) => {\n\t\t\t\t// adjacent curves can't intersect\n\t\t\t\tif (Math.abs(i - j) > 2) {\n\t\t\t\t\t// console.log(splits[i], splits[i + 1], splits[j], splits[j + 1], aabbs[i], aabbs[j])\n\t\t\t\t\t//findRecursive(splits[i], splits[i + 1], splits[j], splits[j + 1], aabbs[i], aabbs[j])\n\t\t\t\t\tresult.push(...Curve.ispsRecursive(this, splits[i], splits[i + 1], bezier, splits[j], splits[j + 1]))\n\t\t\t\t}\n\t\t\t})\n\t\t} else {\n\t\t\treturn Curve.ispsRecursive(this, tMin, tMax, bezier, sMin, sMax)\n\t\t}\n\n\t\treturn result\n\t}\n\n\tselfIntersectionsInfo() {\n\t\treturn this.isInfosWithBezier(this)\n\t}\n\n\tisInfosWithCurve(curve: Curve): ISInfo[] {\n\t\tif (curve instanceof L3) {\n\t\t\treturn this.isInfosWithLine(curve.anchor, curve.dir1, curve.tMin, curve.tMax)\n\t\t}\n\t\tif (curve instanceof BezierCurve) {\n\t\t\treturn this.isInfosWithBezier(curve)\n\t\t}\n\t\treturn curve.isInfosWithCurve(this).map(({tThis, tOther, p}) => ({tThis: tOther, tOther: tThis, p}))\n\t}\n\n\tgetAreaInDirSurface(dir1: V3, surface: Surface, aT: number, bT: number): { centroid: V3, area: number } {\n\t\tassertf(() => dir1.hasLength(1))\n\t\t// INT[aT; bT] at(t) * dir1 * tangentAt(t).rejectedFrom(dir1) dt\n\t\tconst f = (t: number) => {\n\t\t\tconst tangent = this.tangentAt(t)\n\t\t\tconst at = this.at(t)\n\t\t\tconst outsideVector = tangent.cross(surface.normalP(at))\n\t\t\tconst sign = Math.sign(outsideVector.dot(dir1))\n\t\t\treturn at.dot(dir1) * tangent.rejected1Length(dir1) * sign\n\t\t\t//return this.at(t).dot(dir1) * tangent.minus(dir1.times(tangent.dot(dir1))).length()\n\t\t}\n\t\tconst cx = (t: number) => {\n\t\t\tconst height = this.at(t).dot(dir1)\n\t\t\t//console.log(t, this.at(t).minus(dir1.times(height / 2)).sce, f(t))\n\t\t\treturn this.at(t).minus(dir1.times(height / 2))\n\t\t}\n\n\t\tconst area = gaussLegendreQuadrature24(f, aT, bT)\n\t\tconst x = V3.add.apply(undefined, arrayFromFunction(24, i => {\n\t\t\tconst t = aT + (gaussLegendre24Xs[i] + 1) / 2 * (bT - aT)\n\t\t\treturn cx(t).times(gaussLegendre24Weights[i] * f(t))\n\t\t})).div(2 * (bT - aT) * area)\n\t\treturn {area: area, centroid: x}\n\t}\n\n\tmagic(t0: number = this.tMin, t1: number = this.tMax, result: EllipseCurve[] = []): EllipseCurve[] {\n\t\tconst max3d = 0.01, eps = 0.01\n\t\tconst splits = 20\n\t\tconst ts = arrayFromFunction(splits, i => lerp(t0, t1, i / (splits - 1)))\n\t\tconst ps = ts.map(t => this.at(t))\n\t\tconst ns = ts.map(t => this.normalP(t).unit())\n\t\tconst f = (ns: V3[]) => {\n\t\t\tconst ls = ts.map((t, i) => new L3(ps[i], ns[i].unit()))\n\t\t\tconst isInfos = arrayFromFunction(splits - 1, i => {\n\t\t\t\tconst j = i + 1\n\t\t\t\tconst li = ls[i], lj = ls[j]\n\t\t\t\treturn li.infoClosestToLine(lj)\n\t\t\t})\n\t\t\tconst a = isInfos.map(isInfo => isInfo.s - isInfo.t)\n\t\t\tconst centers = isInfos.map(isInfo => V3.lerp(isInfo.closest, isInfo.closest2, 0.5))\n\t\t\tconst b = arrayFromFunction(splits - 1, i => {\n\t\t\t\tconst tMid = lerp(ts[i], ts[i + 1], 0.5)\n\t\t\t\tconst pMid = this.at(tMid)\n\t\t\t\treturn pMid.distanceTo(centers[i]) ** 0.5\n\t\t\t})\n\t\t\treturn a.concat(b)\n\t\t}\n\t\tconst startX = V3.packXY(ns)\n\t\tconst ff = (xs: FloatArray) => {\n\t\t\treturn f(V3.unpackXY(xs))\n\t\t}\n\t\tconst x = new Vector(new Float64Array(startX))\n\t\tfor (let i = 0; i < 2; i++) {\n\t\t\tconst Fx = new Vector(new Float64Array(ff(x.v)))\n\t\t\tconsole.log(Fx.v)\n\t\t\tconst jacobi = Matrix.jacobi(ff, x.v)\n\t\t\tconsole.log('jacobi\\n', jacobi.toString(x => '' + x))\n\t\t\tconst jacobiDependentRowIndexes = jacobi.getDependentRowIndexes()\n\t\t\t//if (0 != jacobiDependentRowIndexes.length) {\n\t\t\t//\tconst error:any = new Error()\n\t\t\t//\terror.jacobiDependentRowIndexes = jacobiDependentRowIndexes\n\t\t\t//\tthrow error\n\t\t\t//}\n\t\t\tconst jacobiTranspose = jacobi.transposed()\n\t\t\tconsole.log((jacobi.times(jacobiTranspose)).str)\n\t\t\tconsole.log((jacobi.times(jacobiTranspose)).inversed().str)\n\t\t\tconst matrix = jacobiTranspose.times((jacobi.times(jacobiTranspose)).inversed())\n\t\t\tconst xDiff = matrix.timesVector(Fx)\n\t\t\tx = x.minus(xDiff)\n\t\t}\n\t\tconst ns2 = V3.unpackXY(x.v)\n\t\tconst ls2 = arrayFromFunction(splits, i => new L3(ps[i], ns2[i].unit()))\n\t\tconst curves = arrayFromFunction(splits - 1, i => {\n\t\t\tconst j = i + 1\n\t\t\tconst li = ls2[i], lj = ls2[j]\n\t\t\tconst isInfo = li.infoClosestToLine(lj)\n\t\t\treturn EllipseCurve.circleForCenter2P(isInfo.closest, ps[i], ps[j], isInfo.s)\n\t\t})\n\t\treturn curves\n\t}\n\n\tmagic2(t0: number = this.tMin, t1: number = this.tMax, result: EllipseCurve[] = []): EllipseCurve[] {\n\t\tconst max3d = 0.01, eps = 0.01\n\t\tconst a = this.at(t0), b = this.at(t1)\n\t\tconst aN = this.normalP(t0).unit(), bN = this.normalP(t1).unit()\n\t\tconst aL = new L3(a, aN), bL = new L3(b, bN)\n\t\tconst isInfo = aL.infoClosestToLine(bL)\n\t\tif (isInfo.s < 0 || isInfo.t < 0\n\t\t\t|| isInfo.distance > max3d\n\t\t\t|| !eq(isInfo.s, isInfo.t, eps)) {\n\t\t} else {\n\t\t\tconst centerPoint = V3.lerp(isInfo.closest, isInfo.closest2, 0.5)\n\t\t\tconst testT1 = lerp(t0, t1, 1 / 2), testP1 = this.at(testT1)\n\t\t\tconst testT2 = lerp(t0, t1, 2 / 3), testP2 = this.at(testT2)\n\t\t\tconst radius = (isInfo.s + isInfo.t) / 2\n\t\t\tif (eq(centerPoint.distanceTo(testP1), radius, eps)) {\n\t\t\t\tconst newCurve = EllipseCurve.circleForCenter2P(centerPoint, a, b, radius)\n\t\t\t\tresult.push(newCurve)\n\t\t\t\treturn result\n\t\t\t}\n\t\t}\n\n\t\tconst tMid = (t0 + t1) / 2\n\t\tthis.magic(t0, tMid, result)\n\t\tthis.magic(tMid, t1, result)\n\t\treturn result\n\t}\n}\n\nBezierCurve.prototype.hlol = Curve.hlol++\nBezierCurve.prototype.tIncrement = 1 / 80","import {\n\tarrayFromFunction, arrayRange, assert, assertf, assertNumbers, checkDerivate, eq, eq0, glqInSteps, hasConstructor,\n\tint, le, lt, M4, newtonIterate1d, newtonIterateSmart, NLA_PRECISION, pqFormula, TAU, V3,\n} from 'ts3dutils'\n\nimport {Curve, intersectionUnitCircleLine, intersectionUnitCircleLine2, ISInfo, L3, XiEtaCurve} from '../index'\n\nconst {PI, cos, sin, min, max, tan, sign, ceil, floor, abs, sqrt, pow, atan2, round} = Math\n\nexport class EllipseCurve extends XiEtaCurve {\n\tstatic readonly XY = new EllipseCurve(V3.O, V3.X, V3.Y)\n\n\tconstructor(center: V3, f1: V3, f2: V3, tMin: number = -PI, tMax: number = PI) {\n\t\tsuper(center, f1, f2, tMin, tMax)\n\t\tassert(EllipseCurve.isValidT(tMin))\n\t\tassert(EllipseCurve.isValidT(tMax))\n\t}\n\n\tstatic isValidT(t) {\n\t\treturn -Math.PI <= t && t <= Math.PI\n\t}\n\n\tstatic XYLCValid(pLC: V3): boolean {\n\t\treturn eq(1, pLC.lengthXY())\n\t}\n\n\t/**\n\t * @param hint +-PI, whichever is correct\n\t */\n\tstatic XYLCPointT(pLC: V3, hint?: number): number {\n\t\tconst angle = pLC.angleXY()\n\t\tif (angle < -Math.PI + NLA_PRECISION || angle > Math.PI - NLA_PRECISION) {\n\t\t\tassert(isFinite(hint))\n\t\t\treturn Math.sign(hint) * Math.PI\n\t\t}\n\t\treturn angle\n\t}\n\n\tstatic magic(a: number, b: number, c: number): number[] {\n\t\tconst isLC = intersectionUnitCircleLine2(a, b, c)\n\t\treturn isLC.map(([xi, eta]) => Math.atan2(eta, xi))\n\t}\n\n\tstatic unitIsInfosWithLine(anchorLC: V3, dirLC: V3, anchorWC: V3, dirWC: V3): ISInfo[] {\n\t\t// ell: x² + y² = 1 = p²\n\t\t// line(t) = anchor + t dir\n\t\t// anchor² - 1 + 2 t dir anchor + t² dir² = 0\n\t\tconst pqDiv = dirLC.dot(dirLC)\n\t\tconst lineTs = pqFormula(2 * dirLC.dot(anchorLC) / pqDiv, (anchorLC.dot(anchorLC) - 1) / pqDiv)\n\t\treturn lineTs.map(tOther => ({\n\t\t\ttThis: Math.atan2(anchorLC.y + tOther * dirLC.y, anchorLC.x + tOther * dirLC.x),\n\t\t\ttOther: tOther,\n\t\t\tp: L3.at(anchorWC, dirWC, tOther),\n\t\t}))\n\t}\n\n\t/**\n\t * Returns a new EllipseCurve representing a circle parallel to the XY-plane.`\n\t */\n\tstatic circle(radius: number, center: V3 = V3.O): EllipseCurve {\n\t\treturn new EllipseCurve(center, new V3(radius, 0, 0), new V3(0, radius, 0))\n\t}\n\n\tstatic circleForCenter2P(center: V3, a: V3, b: V3, radius: number) {\n\t\tconst f1 = center.to(a)\n\t\tconst normal = f1.cross(center.to(b))\n\t\tconst f2 = normal.cross(f1).toLength(f1.length())\n\t\tconst tMax = f1.angleTo(center.to(b))\n\t\treturn new EllipseCurve(center, f1, f2, 0, tMax)\n\t}\n\n\t// TODO: there'S alsoa commented out test\n\tgetVolZAnd(dir1: V3, tStart: number, tEnd: number): { volume: number, centroid: V3 } {\n\t\t// let p = at(t)\n\t\t// integrate area [p -> plane.projectPoint(p)] to x axis...\n\t\t// INTEGRATE[tStart, tEnd] fp(this.at(t)) dt\n\t\tconst ft = t => this.center.plus(this.f1.times(Math.cos(t))).plus(this.f2.times(Math.sin(t)))\n\t\t// f(t) = c + f1 cos + f2 sin\n\t\t// p dot d1 = (cx + f1x cos + f2x sin) dx + (cy + f1y cos + f2y sin) dy + (cz + f1z cos + f2z sin) dz\n\t\tfunction fp(p: V3) {\n\t\t\tconst p0ToP = dir1.times(dir1.dot(p))\n\t\t\tconst area = p0ToP.lengthXY() * (p.z - p0ToP.z / 2)\n\t\t\treturn area\n\t\t}\n\n\t\tconst f = (t: number) => fp(this.at(t)) * this.tangentAt(t).cross(this.normal).unit().z\n\t\treturn {volume: glqInSteps(f, tStart, tEnd, 4), centroid: undefined}\n\t}\n\n\tgetAreaInDir(right: V3, up: V3, tStart: number, tEnd: number): { area: number, centroid: V3 } {\n\t\t//assertf(() => tStart < tEnd)\n\t\tassertf(() => right.isPerpendicularTo(this.normal))\n\t\tassertf(() => up.isPerpendicularTo(this.normal))\n\t\t//assertf(() => EllipseCurve.isValidT(tStart), tStart)\n\t\t//assertf(() => EllipseCurve.isValidT(tEnd), tEnd)\n\n\t\tconst upLC = this.inverseMatrix.transformVector(up)\n\t\tconst rightLC = upLC.cross(V3.Z)\n\t\tconst normTStart = tStart - rightLC.angleXY()\n\t\tconst normTEnd = tEnd - rightLC.angleXY()\n\t\tconst transformedOriginY = this.inverseMatrix.getTranslation().dot(upLC.unit())\n\t\t//console.log(upLC.str, rightLC.str, normTStart, normTEnd, 'upLC.length()', upLC.length())\n\t\t//console.log('transformedOriginY', transformedOriginY)\n\t\t//assertf(() => upLC.hasLength(1), upLC.length())\n\t\tconst fPi = Math.PI / 4\n\t\t// integral of sqrt(1 - x²) from 0 to cos(t)\n\t\t// Basically, we want\n\t\t// INTEGRAL[cos(t); PI/2] sqrt(1 - x²) dx\n\t\t// INTEGRAL[PI/2: cos(t)] -sqrt(1 - x²) dx\n\t\t// = INTEGRAL[cos(0); cos(t)] -sqrt(1 - x²) dx\n\t\t// = INTEGRAL[0; t] -sqrt(1 - cos²(t)) * -sin(t) dt\n\t\t// = INTEGRAL[0; t] -sin(t) * -sin(t) dt\n\t\t// = INTEGRAL[0; t] sin²(t) dt (partial integration / wolfram alpha)\n\t\t// = (1/2 * (t - sin(t) * cos(t)))[0; t] (this form has the distinct advantage of being defined everywhere)\n\t\tfunction fArea(t: number) { return (t - Math.sin(t) * Math.cos(t)) / 2 }\n\n\t\t// for the centroid, we want\n\t\t// cx = 1 / area * INTEGRAL[cos(t); PI/2] x * f(x) dx\n\t\t// cx = 1 / area * INTEGRAL[cos(t); PI/2] x * sqrt(1 - x²) dx\n\t\t// cx = 1 / area * INTEGRAL[cos(0); cos(t)] x * -sqrt(1 - x²) dx\n\t\t// ...\n\t\t// cx = 1 / area * INTEGRAL[0; t] cos(t) * sin²(t) dt // WA\n\t\t// cx = 1 / area * (sin^3(t) / 3)[0; t]\n\t\tfunction cxTimesArea(t: number) { return Math.pow(Math.sin(t), 3) / 3 }\n\n\t\t// cy = 1 / area * INTEGRAL[cos(t); PI/2] f²(x) / 2 dx\n\t\t// cy = 1 / area * INTEGRAL[cos(0); cos(t)] -(1 - x²) / 2 dx\n\t\t// cy = 1 / area * INTEGRAL[0; t] (cos²(t) - 1) * -sin(t) / 2 dt\n\t\t// cy = 1 / area * (cos (3 * t) - 9 * cos(t)) / 24 )[0; t]\n\t\tfunction cyTimesArea(t: number) { return (Math.cos(3 * t) - 9 * Math.cos(t)) / 24 }\n\n\t\tconst restArea = -transformedOriginY * (-Math.cos(normTEnd) + Math.cos(normTStart))\n\t\tconst area = fArea(normTEnd) - fArea(normTStart) + restArea\n\t\tconst cxt = (cxTimesArea(normTEnd) - cxTimesArea(normTStart) + -transformedOriginY * (-Math.cos(normTEnd) - Math.cos(normTStart)) / 2 * restArea) / area\n\t\tconst cyt = (cyTimesArea(normTEnd) - cyTimesArea(normTStart) - -transformedOriginY / 2 * restArea) / area\n\t\tconst factor = this.matrix.xyAreaFactor() // * upLC.length()\n\t\t//console.log('fctor', factor, 'area', area, 'resultarea', area* factor)\n\t\tassert(!eq0(factor))\n\t\treturn {\n\t\t\tarea: area * factor,\n\t\t\tcentroid: this.matrix.transformPoint(M4.rotateZ(rightLC.angleXY()).transformPoint(new V3(cxt, cyt, 0))),\n\t\t}\n\n\t}\n\n\tat(t: number): V3 {\n\t\t// = center + f1 cos t + f2 sin t\n\t\treturn this.center.plus(this.f1.times(Math.cos(t))).plus(this.f2.times(Math.sin(t)))\n\t}\n\n\ttangentAt(t: number) {\n\t\tassertNumbers(t)\n\t\t// f2 cos(t) - f1 sin(t)\n\t\treturn this.f2.times(Math.cos(t)).minus(this.f1.times(Math.sin(t)))\n\t}\n\n\tddt(t: number): V3 {\n\t\tassertNumbers(t)\n\t\treturn this.f2.times(-Math.sin(t)).minus(this.f1.times(Math.cos(t)))\n\t}\n\n\ttangentAt2(xi: number, eta: number): V3 {\n\t\treturn this.f2.times(xi).minus(this.f1.times(eta))\n\t}\n\n\tisCircular() {\n\t\treturn eq(this.f1.length(), this.f2.length()) && this.f1.isPerpendicularTo(this.f2)\n\t}\n\n\treversed(): this {\n\t\treturn new this.constructor(this.center, this.f1, this.f2.negated(), -this.tMax, -this.tMin) as this\n\t}\n\n\tisColinearTo(curve: Curve): boolean {\n\t\tif (!hasConstructor(curve, EllipseCurve)) return false\n\t\tif (!this.center.like(curve.center)) {\n\t\t\treturn false\n\t\t}\n\t\tif (this == curve) {\n\t\t\treturn true\n\t\t}\n\t\tif (this.isCircular()) {\n\t\t\treturn curve.isCircular() && eq(this.f1.length(), curve.f1.length()) && this.normal.isParallelTo(curve.normal)\n\t\t} else {\n\t\t\tlet {f1: f1, f2: f2} = this.rightAngled(), {f1: c1, f2: c2} = curve.rightAngled()\n\t\t\tif (f1.length() > f2.length()) {[f1, f2] = [f2, f1]}\n\t\t\tif (c1.length() > c2.length()) {[c1, c2] = [c2, c1]}\n\t\t\treturn eq(f1.squared(), Math.abs(f1.dot(c1)))\n\t\t\t\t&& eq(f2.squared(), Math.abs(f2.dot(c2)))\n\t\t}\n\t}\n\n\teccentricity() {\n\t\tconst mainAxes = this.rightAngled()\n\t\tconst f1length = mainAxes.f1.length(), f2length = mainAxes.f1.length()\n\t\tconst [a, b] = f1length > f2length ? [f1length, f2length] : [f2length, f1length]\n\t\treturn Math.sqrt(1 - b * b / a / a)\n\t}\n\n\tcircumference(): number {\n\t\treturn this.arcLength(-Math.PI, Math.PI)\n\t}\n\n\tarcLength(startT: number, endT: number, steps?: int): number {\n\t\tassert(startT < endT, 'startT < endT')\n\t\tif (this.isCircular()) {\n\t\t\treturn this.f1.length() * (endT - startT)\n\t\t}\n\t\treturn super.arcLength(startT, endT, steps)\n\t}\n\n\tcircumferenceApproximate(): number {\n\t\t// approximate circumference by Ramanujan\n\t\t// https://en.wikipedia.org/wiki/Ellipse#Circumference\n\t\tconst {f1, f2} = this.rightAngled(), a = f1.length(), b = f2.length()\n\t\tconst h = (a - b) ** 2 / (a + b) ** 2\n\t\treturn Math.PI * (a + b) * (1 + 3 * h / (10 + Math.sqrt(4 - 3 * h)))\n\t}\n\n\trightAngled(): EllipseCurve {\n\t\tconst f1 = this.f1, f2 = this.f2, a = f1.dot(f2), b = f2.squared() - f1.squared()\n\t\tif (eq0(a)) {\n\t\t\treturn this\n\t\t}\n\t\tconst g1 = 2 * a, g2 = b + Math.sqrt(b * b + 4 * a * a)\n\t\tconst {x1: xi, y1: eta} = intersectionUnitCircleLine(g1, g2, 0)\n\t\treturn new EllipseCurve(this.center,\n\t\t\tf1.times(xi).plus(f2.times(eta)),\n\t\t\tf1.times(-eta).plus(f2.times(xi)))\n\t}\n\n\tisInfosWithEllipse(ellipse: EllipseCurve): ISInfo[] {\n\t\tif (this.normal.isParallelTo(ellipse.normal) && eq0(this.center.minus(ellipse.center).dot(ellipse.normal))) {\n\n\t\t\t// ellipses are coplanar\n\t\t\tconst ellipseLCRA = ellipse.transform(this.inverseMatrix).rightAngled()\n\n\t\t\tconst r1 = ellipseLCRA.f1.lengthXY(), r2 = ellipseLCRA.f2.lengthXY(),\n\t\t\t\tcenterDist = ellipseLCRA.center.lengthXY()\n\t\t\tconst rMin = min(r1, r2), rMax = max(r1, r2)\n\t\t\tif (lt(centerDist + rMax, 1) || // entirely inside unit circle\n\t\t\t\tlt(1, centerDist - rMax) || // entirely outside unit circle\n\t\t\t\tlt(1, rMin - centerDist) || // contains unit circle\n\t\t\t\teq(1, r1) && eq(1, r2) && eq0(centerDist) // also unit circle, return no IS\n\t\t\t) {\n\t\t\t\treturn []\n\t\t\t}\n\n\t\t\tconst f = (t: number) => ellipseLCRA.at(t).lengthXY() - 1\n\t\t\tconst df = (t: number) => ellipseLCRA.at(t).xy().dot(ellipseLCRA.tangentAt(t)) / ellipseLCRA.at(t).lengthXY()\n\t\t\tcheckDerivate(f, df, -PI, PI, 1)\n\t\t\tconst ts: number[] = []\n\t\t\tconst tsvs = arrayRange(-4 / 5 * PI, PI, PI / 4).map(startT => [startT, df(startT), newtonIterateSmart(f, startT, 16, df, 1e-4), f(newtonIterateSmart(f, startT, 16, df, 1e-4))])\n\t\t\tfor (let startT = -4 / 5 * PI; startT < PI; startT += PI / 4) {\n\t\t\t\tlet t = newtonIterateSmart(f, startT, 16, df, 1e-4)\n\t\t\t\tle(t, -PI) && (t += TAU)\n\t\t\t\tassert(!isNaN(t))\n\t\t\t\tif (ellipseLCRA.isValidT(t) && eq0(f(t)) && !ts.some(r => eq(t, r))) {\n\t\t\t\t\tts.push(t)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ts.map(raT => {\n\t\t\t\tconst p = this.matrix.transformPoint(ellipseLCRA.at(raT))\n\t\t\t\treturn {tThis: this.pointT(p), tOther: ellipse.pointT(p, PI), p}\n\t\t\t})\n\n\t\t\t//const angle = ellipseLCRA.f1.angleXY()\n\t\t\t//const aSqr = ellipseLCRA.f1.squared(), bSqr = ellipseLCRA.f2.squared()\n\t\t\t//const a = Math.sqrt(aSqr), b = Math.sqrt(bSqr)\n\t\t\t//const {x: centerX, y: centerY} = ellipseLCRA.center\n\t\t\t//const rotCenterX = centerX * Math.cos(-angle) + centerY * -Math.sin(-angle)\n\t\t\t//const rotCenterY = centerX * Math.sin(-angle) + centerY * Math.cos(-angle)\n\t\t\t//const rotCenter = V(rotCenterX, rotCenterY)\n\t\t\t//const f = t => {\n\t\t\t//\tconst lex = Math.cos(t) - rotCenterX, ley = Math.sin(t) - rotCenterY\n\t\t\t//\treturn lex * lex / aSqr + ley * ley / bSqr - 1\n\t\t\t//}\n\t\t\t//const f2 = (x, y) => (x * x + y * y - 1)\n\t\t\t//const f3 = (x, y) => ((x - rotCenterX) * (x - rotCenterX) / aSqr + (y - rotCenterY) * (y - rotCenterY) /\n\t\t\t// bSqr - 1) const results = [] const resetMatrix = this.matrix.times(M4.rotateZ(angle)) for (let startT =\n\t\t\t// Math.PI / 4; startT < 2 * Math.PI; startT += Math.PI / 2) { const startP = EllipseCurve.XY.at(startT)\n\t\t\t// const p = newtonIterate2d(f3, f2, startP.x, startP.y, 10) if (p && !results.some(r => r.like(p))) {\n\t\t\t// results.push(p) } } const rotEl = new EllipseCurve(rotCenter, V(a, 0, 0), V(0, b, 0)) return\n\t\t\t// results.map(pLC => { const p = resetMatrix.transformPoint(pLC) return {tThis: this.pointT(p, PI),\n\t\t\t// tOther: ellipse.pointT(p, PI), p} })\n\t\t} else {\n\t\t\treturn this.isTsWithPlane(ellipse.getPlane()).mapFilter(t => {\n\t\t\t\tconst p = this.at(t)\n\t\t\t\tif (ellipse.containsPoint(p)) {\n\t\t\t\t\treturn {tThis: t, tOther: ellipse.pointT(p), p}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tisInfosWithCurve(curve: Curve): ISInfo[] {\n\t\tif (curve instanceof EllipseCurve) {\n\t\t\treturn this.isInfosWithEllipse(curve)\n\t\t}\n\t\treturn super.isInfosWithCurve(curve)\n\t}\n\n\troots(): [number[], number[], number[]] {\n\t\t// tangent(t) = f2 cos t - f1 sin t\n\t\t// solve for each dimension separately\n\t\t// tangent(eta, xi) = f2 eta - f1 xi\n\n\t\treturn arrayFromFunction(3, dim => {\n\t\t\tconst a = this.f2.e(dim), b = -this.f1.e(dim)\n\t\t\tconst {x1, y1, x2, y2} = intersectionUnitCircleLine(a, b, 0)\n\t\t\treturn [Math.atan2(y1, x1), Math.atan2(y2, x2)]\n\t\t})\n\t}\n\n\tclosestTToPoint(p: V3, tStart?: number): number {\n\t\t// (at(t) - p) * tangentAt(t) = 0\n\t\t// (xi f1 + eta f2 + q) * (xi f2 - eta f1) = 0\n\t\t// xi eta (f2^2-f1^2) + xi f2 q - eta² f1 f2 + xi² f1 f2 - eta f1 q = 0\n\t\t//  (xi² - eta²) f1 f2 + xi eta (f2^2-f1^2) + xi f2 q - eta f1 q = 0\n\n\t\t// atan2 of p is a good first approximation for the searched t\n\t\tconst startT = this.inverseMatrix.transformPoint(p).angleXY()\n\t\tconst pRelCenter = p.minus(this.center)\n\t\tconst f = (t: number) => this.tangentAt(t).dot(this.f1.times(Math.cos(t)).plus(this.f2.times(Math.sin(t))).minus(pRelCenter))\n\t\treturn newtonIterate1d(f, startT)\n\t}\n\n\tarea(): number {\n\t\t// see\n\t\t// https://upload.wikimedia.org/wikipedia/commons/thumb/4/4e/Cross_product_parallelogram.svg/220px-Cross_product_parallelogram.svg.png\n\t\treturn Math.PI * this.f1.cross(this.f2).length()\n\t}\n\n\tangleToT(phi: number): number {\n\t\t// atan2(y, x) = phi\n\t\tconst phiDir = this.f1.unit().times(Math.cos(phi)).plus(this.f2.rejectedFrom(this.f1).unit().times(Math.sin(phi)))\n\t\tconst dirLC = this.inverseMatrix.transformVector(phiDir)\n\t\treturn dirLC.angleXY()\n\t}\n}\n\nEllipseCurve.prototype.hlol = Curve.hlol++\nEllipseCurve.prototype.tIncrement = 2 * Math.PI / (4 * 800)","import {arrayFromFunction, assertNumbers, eq, eq0, hasConstructor, le, snap0, V3} from 'ts3dutils'\n\nimport {Curve, XiEtaCurve, intersectionUnitHyperbolaLine} from '../index'\n\nconst {PI, cos, sin, min, max, tan, sign, ceil, floor, abs, sqrt, pow, atan2, round} = Math\n\n/**\n * x² - y² = 1\n *\n */\nexport class HyperbolaCurve extends XiEtaCurve {\n\tstatic XY = new HyperbolaCurve(V3.O, V3.X, V3.Y)\n\n\tconstructor(center: V3, f1: V3, f2: V3, tMin: number = -7, tMax: number = 7) {\n\t\tsuper(center, f1, f2, tMin, tMax)\n\t}\n\n\tstatic XYLCValid(pLC: V3): boolean {\n\t\treturn pLC.x > 0 && eq(1, pLC.x * pLC.x - pLC.y * pLC.y)\n\t}\n\n\tstatic XYLCPointT(pLC: V3): number {\n\t\treturn Math.asinh(pLC.y)\n\t}\n\n\t/**\n\t * http://www.wolframalpha.com/input/?i=x%C2%B2-y%C2%B2%3D1,ax%2Bby%3Dc\n\t * Minor empiric test shows asinh(eta) consistently gets more accurate results than atanh(eta/xi)\n\t */\n\tstatic magic(a: number, b: number, c: number): number[] {\n\t\tif (eq0(b)) {\n\t\t\tconst sqrtVal = snap0(c ** 2 / a ** 2 - 1)\n\t\t\tif (sqrtVal < 0 || c * a < 0) {\n\t\t\t\treturn []\n\t\t\t} else if (sqrtVal == 0) {\n\t\t\t\treturn [0]\n\t\t\t}\n\t\t\tconst eta1 = Math.sqrt(sqrtVal)\n\t\t\treturn [-Math.asinh(eta1), Math.asinh(eta1)]\n\t\t} else if (eq(abs(a), abs(b))) {\n\t\t\tif (le(c * a, 0)) {\n\t\t\t\treturn []\n\t\t\t}\n\t\t\tconst eta = sign(a * b) * (c ** 2 - a ** 2) / 2 / a / c\n\t\t\treturn [Math.asinh(eta)]\n\t\t} else {\n\t\t\tconst sqrtVal = snap0(b ** 2 * (-(a ** 2) + b ** 2 + c ** 2))\n\t\t\tif (sqrtVal < 0) {\n\t\t\t\treturn []\n\t\t\t}\n\t\t\tconst xi1 = (a * c - Math.sqrt(sqrtVal)) / (a ** 2 - b ** 2)\n\t\t\tconst xi2 = (a * c + Math.sqrt(sqrtVal)) / (a ** 2 - b ** 2)\n\t\t\tconst eta1 = (b ** 2 * c - a * Math.sqrt(sqrtVal)) / (b * (b ** 2 - a ** 2))\n\t\t\tconst eta2 = (b ** 2 * c + a * Math.sqrt(sqrtVal)) / (b * (b ** 2 - a ** 2))\n\t\t\tconst foo: number = 20\n\t\t\tconst bar = foo > 0 && foo\n\t\t\treturn [xi1 > 0 && Math.asinh(eta1), xi2 > 0 && Math.asinh(eta2)].filter((x: any) => x !== false)\n\t\t}\n\n\t}\n\n\tat(t: number): V3 {\n\t\tassertNumbers(t)\n\t\t// = center + f1 cosh t + f2 sinh t\n\t\treturn this.center.plus(this.f1.times(Math.cosh(t))).plus(this.f2.times(Math.sinh(t)))\n\t}\n\n\ttangentAt(t: number): V3 {\n\t\tassertNumbers(t)\n\t\t// = f1 sinh t + f2 cosh t\n\t\treturn this.f1.times(Math.sinh(t)).plus(this.f2.times(Math.cosh(t)))\n\t}\n\n\ttangentAt2(xi: number, eta: number): V3 {\n\t\tassertNumbers(xi, eta)\n\t\t// = f1 eta + f2 xi\n\t\treturn this.f1.times(eta).plus(this.f2.times(xi))\n\t}\n\n\tddt(t: number): V3 {\n\t\tassertNumbers(t)\n\t\treturn this.f1.times(Math.cosh(t)).plus(this.f2.times(Math.sinh(t)))\n\t}\n\n\tisColinearTo(curve: Curve): boolean {\n\t\tif (!hasConstructor(curve, HyperbolaCurve)) return false\n\t\tif (!curve.center || !this.center.like(curve.center)) {\n\t\t\treturn false\n\t\t}\n\t\tif (this === curve) {\n\t\t\treturn true\n\t\t}\n\t\tconst {f1: f1, f2: f2} = this.rightAngled(), {f1: c1, f2: c2} = curve.rightAngled()\n\t\treturn eq(f1.squared(), Math.abs(f1.dot(c1)))\n\t\t\t&& eq(f2.squared(), Math.abs(f2.dot(c2)))\n\t}\n\n\treversed() {\n\t\treturn new HyperbolaCurve(this.center, this.f1, this.f2.negated(), -this.tMax, -this.tMin)\n\t}\n\n\trightAngled(): HyperbolaCurve {\n\t\tconst f1 = this.f1, f2 = this.f2, a = f1.dot(f2), b = f2.squared() + f1.squared()\n\t\tif (eq0(a)) {\n\t\t\treturn this\n\t\t}\n\t\tconst g1 = 2 * a, g2 = b + Math.sqrt(b * b - 4 * a * a)\n\t\tconst {x1: xi, y1: eta} = intersectionUnitHyperbolaLine(g1, g2, 0)\n\t\treturn new HyperbolaCurve(this.center, f1.times(xi).plus(f2.times(eta)), f1.times(eta).plus(f2.times(xi)))\n\t}\n\n\teccentricity(): number {\n\t\tconst mainAxes = this.rightAngled()\n\t\tconst f1length = mainAxes.f1.length(), f2length = mainAxes.f1.length()\n\t\tconst [a, b] = f1length > f2length ? [f1length, f2length] : [f2length, f1length]\n\t\treturn Math.sqrt(1 + b * b / a / a)\n\t}\n\n\troots(): [number[], number[], number[]] {\n\t\t// tangent(t) = f1 sinh t + f2 cosh t = 0\n\t\t// tangentAt2(xi, eta) = f1 eta + f2 xi = V3.O\n\t\t// xi² - eta² = 1 (by def for hyperbola)\n\n\t\treturn arrayFromFunction(3, dim => {\n\t\t\tconst a = this.f2.e(dim), b = this.f1.e(dim)\n\t\t\treturn HyperbolaCurve.magic(a, b, 0)\n\t\t})\n\t}\n}\n\nHyperbolaCurve.prototype.tIncrement = PI / 16","import {\n\tarrayFromFunction, assert, assertf, assertInst, assertNumbers, assertVectors, clamp, eq, eq0, hasConstructor, int,\n\tM4, NLA_PRECISION, TAU, V3,\n} from 'ts3dutils'\nimport {Mesh, pushQuad} from 'tsgl'\n\nimport {Curve, ISInfo, P3} from '../index'\n\n/**\n * 3-dimensional line\n */\nexport class L3 extends Curve {\n\n\tstatic anchorDirection = (anchor: V3, dir: V3): L3 => new L3(anchor, dir.unit())\n\tstatic readonly X: L3 = new L3(V3.O, V3.X)\n\tstatic readonly Y: L3 = new L3(V3.O, V3.Y)\n\tstatic readonly Z: L3 = new L3(V3.O, V3.Z)\n\n\tconstructor(readonly anchor: V3, // line anchor\n\t\t\t\treadonly dir1: V3, // normalized line dir\n\t\t\t\ttMin: number = -4096,\n\t\t\t\ttMax: number = 4096) {\n\t\tsuper(tMin, tMax)\n\t\tassertVectors(anchor, dir1)\n\t\tassert(dir1.hasLength(1), 'dir must be unit' + dir1)\n\t\tassertf(() => !Number.isNaN(anchor.x))\n\t}\n\n\tstatic throughPoints(anchor: V3, b: V3, tMin?: number, tMax?: number): L3 {\n\t\treturn new L3(anchor, b.minus(anchor).unit(), tMin, tMax)\n\t}\n\n\tstatic pointT(anchor: V3, dir: V3, x: V3) {\n\t\tassertVectors(anchor, dir, x)\n\t\treturn x.minus(anchor).dot(dir) / dir.squared()\n\t}\n\n\tstatic at(anchor: V3, dir: V3, t: number) {\n\t\treturn anchor.plus(dir.times(t))\n\t}\n\n\tstatic fromPlanes(p1: P3, p2: P3): L3 {\n\t\tassertInst(P3, p1, p2)\n\t\tconst dir = p1.normal1.cross(p2.normal1)\n\t\tconst length = dir.length()\n\t\tif (length < 1e-10) {\n\t\t\tthrow new Error('Parallel planes')\n\t\t}\n\n\t\treturn p1.intersectionWithPlane(p2)\n\t}\n\n\tstatic containsPoint(anchor: V3, dir: V3, p: V3) {\n\t\tconst closestT = L3.pointT(anchor, dir, p)\n\t\tconst distance = L3.at(anchor, dir, closestT).distanceTo(p)\n\t\treturn eq0(distance)\n\t}\n\n\taddToMesh(mesh: Mesh, res: int = 4, radius: number = 0, pointStep = 1, tMin = this.tMin, tMax = this.tMax): void {\n\t\tconst baseNormals = arrayFromFunction(res, i => V3.polar(1, TAU * i / res))\n\t\tconst baseVertices = arrayFromFunction(res, i => V3.polar(radius, TAU * i / res))\n\t\tconst inc = this.tIncrement\n\t\tconst start = Math.ceil((this.tMin + NLA_PRECISION) / inc)\n\t\tconst end = Math.floor((this.tMax - NLA_PRECISION) / inc)\n\t\tfor (let i = 0; i <= 1; i += 1) {\n\t\t\tconst start = mesh.vertices.length\n\t\t\tif (0 !== i) {\n\t\t\t\tfor (let j = 0; j < res; j++) {\n\t\t\t\t\tpushQuad(mesh.TRIANGLES, true,\n\t\t\t\t\t\tstart - res + j, start + j,\n\t\t\t\t\t\tstart - res + (j + 1) % res, start + (j + 1) % res)\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst t = 0 == i ? tMin : tMax\n\t\t\tconst point = this.at(t), tangent = this.dir1, x = this.dir1.getPerpendicular()\n\t\t\tconst matrix = M4.forSys(x, this.dir1.cross(x), this.dir1, point)\n\t\t\tmesh.normals.push(...matrix.transformedVectors(baseNormals))\n\t\t\tmesh.vertices.push(...matrix.transformedPoints(baseVertices))\n\t\t}\n\t}\n\n\troots(): [number[], number[], number[]] {\n\t\treturn [[], [], []]\n\t}\n\n\tcontainsPoint(p: V3): boolean {\n\t\tassertVectors(p)\n\t\tconst dist = this.distanceToPoint(p)\n\t\tassertNumbers(dist)\n\t\treturn eq0(dist)\n\t}\n\n\tlikeCurve(curve: Curve): boolean {\n\t\treturn this == curve ||\n\t\t\thasConstructor(curve, L3)\n\t\t\t&& this.anchor.like(curve.anchor)\n\t\t\t&& this.dir1.like(curve.dir1)\n\t}\n\n\tequals(obj: any): boolean {\n\t\treturn this == obj ||\n\t\t\tObject.getPrototypeOf(obj) == L3.prototype\n\t\t\t&& this.anchor.equals(obj.anchor)\n\t\t\t&& this.dir1.equals(obj.dir1)\n\t}\n\n\tisColinearTo(obj: Curve): boolean {\n\t\treturn obj instanceof L3\n\t\t\t&& this.containsPoint(obj.anchor)\n\t\t\t&& eq(1, Math.abs(this.dir1.dot(obj.dir1)))\n\t}\n\n\tdistanceToLine(line: L3): number {\n\t\tassertInst(L3, line)\n\t\tif (this.isParallelToLine(line)) {\n\t\t\treturn this.distanceToPoint(line.anchor)\n\t\t}\n\t\tconst dirCross1 = this.dir1.cross(line.dir1).unit()\n\t\tconst anchorDiff = this.anchor.minus(line.anchor)\n\t\treturn Math.abs(anchorDiff.dot(dirCross1))\n\t}\n\n\tdistanceToPoint(x: V3): number {\n\t\tassertVectors(x)\n\t\t// See http://mathworld.wolfram.com/Point-LineDistance3-Dimensional.html\n\t\tconst t = x.minus(this.anchor).dot(this.dir1)\n\t\treturn this.at(t).distanceTo(x)\n\n\t\t//return x.minus(this.anchor).cross(x.minus(this.anchor.plus(this.dir1))).length()\n\t}\n\n\tasSegmentDistanceToPoint(x: V3, sStart: number, sEnd: number) {\n\t\tlet t = x.minus(this.anchor).dot(this.dir1)\n\t\tt = clamp(t, sStart, sEnd)\n\t\treturn this.at(t).minus(x).length()\n\t}\n\n\tasSegmentDistanceToLine(line: L3, sStart: number, sEnd: number) {\n\t\tassertInst(L3, line)\n\t\tconst dirCross = this.dir1.cross(line.dir1)\n\t\tconst div = dirCross.squared()\n\t\tif (eq0(div)) {\n\t\t\treturn undefined\n\t\t} // lines parallel\n\t\tconst anchorDiff = line.anchor.minus(this.anchor)\n\t\t// check if distance is zero (see also L3.distanceToLine)\n\t\tif (!eq0(anchorDiff.dot(dirCross.unit()))) {\n\t\t\treturn undefined\n\t\t}\n\t\tlet t = this.infoClosestToLine(line).t\n\t\tt = clamp(t, sStart, sEnd)\n\t\treturn this.at(clamp(t, sStart, sEnd))\n\t}\n\n\tat(t: number): V3 {\n\t\tassertNumbers(t)\n\t\treturn this.anchor.plus(this.dir1.times(t))\n\t}\n\n\t/**\n\t * This function returns lambda for a given point x\n\t *\n\t * Every point x on this line is described by the equation\n\t *      x = this.anchor + lambda * this.dir1 | - this.anchor\n\t *      x - this.anchor = lambda * this.dir1 | DOT this.dir1\n\t *      (x - this.anchor) DOT this.dir1 = lambda (dir1² is 1 as |dir1| == 1)\n\t *\n\t *  @param x\n\t *  @returns\n\t */\n\tpointT(x: V3): number {\n\t\tassertVectors(x)\n\t\tconst t = x.minus(this.anchor).dot(this.dir1)\n\t\treturn t\n\t}\n\n\t/**\n\t * Returns true if the line is parallel (this.dir = line.dir || this.dir = -line.dir) to the argument.\n\t */\n\tisParallelToLine(line: L3): boolean {\n\t\tassertInst(L3, line)\n\t\t// we know that 1 == this.dir1.length() == line.dir1.length(), we can check for parallelity simpler than\n\t\t// isParallelTo()\n\t\treturn eq(1, Math.abs(this.dir1.dot(line.dir1)))\n\t}\n\n\tangleToLine(line: L3): number {\n\t\tassertInst(L3, line)\n\t\treturn this.dir1.angleTo(line.dir1)\n\t}\n\n\t/**\n\t *\n\t * @param line\n\t * @returns {boolean} If the distance between the lines is zero\n\t */\n\tintersectsLine(line: L3): boolean {\n\t\treturn eq0(this.distanceToLine(line))\n\t}\n\n\tisInfosWithCurve(curve: Curve): ISInfo[] {\n\t\tif (curve instanceof L3) {\n\t\t\tconst dirCross = this.dir1.cross(curve.dir1)\n\t\t\tconst div = dirCross.squared()\n\t\t\tif (eq0(div)) {\n\t\t\t\t// lines are parallel\n\t\t\t\treturn []\n\t\t\t}\n\t\t\tconst anchorDiff = curve.anchor.minus(this.anchor)\n\t\t\tif (eq0(anchorDiff.dot(dirCross))) {\n\t\t\t\tconst tThis = anchorDiff.cross(curve.dir1).dot(dirCross) / div\n\t\t\t\tconst tOther = anchorDiff.cross(this.dir1).dot(dirCross) / div\n\t\t\t\tconst p = this.at(tThis)\n\t\t\t\treturn [{tThis: tThis, tOther: tOther, p: p}]\n\t\t\t}\n\t\t\treturn []\n\t\t}\n\t\tthrow new Error()\n\t}\n\n\tisInfoWithLine(line: L3): V3 | undefined {\n\t\t// todo infos?\n\t\tassertInst(L3, line)\n\t\tconst dirCross = this.dir1.cross(line.dir1)\n\t\tconst div = dirCross.squared()\n\t\tif (eq0(div)) {\n\t\t\treturn undefined\n\t\t} // lines parallel\n\t\tconst anchorDiff = line.anchor.minus(this.anchor)\n\t\t// check if distance is zero (see also L3.distanceToLine)\n\t\tif (!eq0(anchorDiff.dot(dirCross.unit()))) {\n\t\t\treturn undefined\n\t\t}\n\t\tconst t = anchorDiff.cross(line.dir1).dot(dirCross) / div\n\t\treturn this.at(t)\n\t}\n\n\t/**\n\t * returns s and t with this.at(s) == line.at(t)\n\t */\n\tintersectionLineST(line: L3): { s: number, t: number } {\n\t\t// the two points on two lines the closest two each other are the ones whose\n\t\t// connecting\n\t\t// TODO Where does this come from?\n\t\t// TODO: return value when no IS?\n\t\tassertInst(L3, line)\n\t\tconst dirCross = this.dir1.cross(line.dir1)\n\t\tconst div = dirCross.squared()\n\t\tconst anchorDiff = line.anchor.minus(this.anchor)\n\t\tconst s = anchorDiff.cross(this.dir1).dot(dirCross) / div\n\t\tconst t = anchorDiff.cross(line.dir1).dot(dirCross) / div\n\t\treturn {s: s, t: t}\n\t\t//console.log(segmentIntersectsRay, a, b, \"ab\", ab, \"p\", p, \"dir\", dir, s > 0 && t / div >= 0 && t / div <= 1,\n\t\t// \"s\", s, \"t\", t, \"div\", div)\n\t}\n\n\tddt(t: number): V3 {\n\t\treturn V3.O\n\t}\n\n\tgetConstructorParameters(): any[] {\n\t\treturn [this.anchor, this.dir1]\n\t}\n\n\tclosestTToPoint(p: V3): number {\n\t\t// similar logic as pointT; we project the vector (anchor -> p) onto dir1, then add anchor back to it\n\t\tconst nearestT = p.minus(this.anchor).dot(this.dir1)\n\t\treturn nearestT\n\t}\n\n\tinfoClosestToLine(line: L3): { t: number, s?: number, closest?: V3, closest2?: V3, distance: number } {\n\t\t/*\n\t\t line = a + s*b\n\t\t this = c + t*d\n\n\t\t (this - line) * b = 0\n\t\t (this - line) * d = 0\n\n\t\t (a + s*b - c - t*d) * b = 0\n\t\t (a + s*b - c - t*d) * d = 0\n\n\t\t (a - c + s*b - t*d) * b = 0\n\t\t (a - c + s*b - t*d) * d = 0\n\n\t\t (a - c)*b + (s*b - t*d)*b = 0\n\t\t (a - c)*d + (s*b - t*d)*d = 0\n\n\t\t (a - c)*b + s*(b*b) - t*(d*b) = 0\n\t\t (a - c)*d + s*(b*d) - t*(d*d) = 0\n\n\t\t s = (t*(d*b) - (a - c)*b) / (b*b)\n\t\t =>\n\t\t (a - c)*d + (t*(d*b) - (a - c)*b) / (b*b)*(b*d) - t*(d*d) = 0 | * (b*b)\n\t\t (a - c)*d * (b*b) + (t*(d*b) - (a - c)*b)*(b*d) - t*(d*d) * (b*b) = 0\n\t\t (a - c)*d * (b*b) + t*(d*b)*(b*d) - (a - c)*b*(b*d) - t*(d*d) * (b*b) = 0\n\t\t t = ((a - c)*b*(b*d) - (a - c)*d * (b*b)) / ((d*b)*(b*d) - (d*d) * (b*b))\n\t\t */\n\t\tif (this.isParallelToLine(line)) {\n\t\t\treturn {t: NaN, s: NaN, distance: this.distanceToLine(line)}\n\t\t}\n\t\tconst a = line.anchor, b = line.dir1, c = this.anchor, d = this.dir1\n\t\tconst bd = b.dot(d), bb = b.squared(), dd = d.squared(), amc = a.minus(c), divisor = bd * bd - dd * bb\n\t\tconst t = (amc.dot(b) * bd - amc.dot(d) * bb) / divisor\n\t\tconst s = (amc.dot(b) * dd - amc.dot(d) * bd) / divisor\n\t\treturn {\n\t\t\tt: t,\n\t\t\ts: s,\n\t\t\tclosest: this.at(t),\n\t\t\tclosest2: line.at(s),\n\t\t\tdistance: this.at(t).distanceTo(line.at(s)),\n\t\t}\n\t}\n\n\tintersectionWithPlane(plane: P3): V3 {\n\t\t// plane: plane.normal1 * p = plane.w\n\t\t// line: p=line.point + lambda * line.dir1\n\t\tconst lambda = (plane.w - plane.normal1.dot(this.anchor)) / plane.normal1.dot(this.dir1)\n\t\tconst point = this.anchor.plus(this.dir1.times(lambda))\n\t\treturn point\n\t}\n\n\ttangentAt(t: number): V3 {\n\t\treturn this.dir1\n\t}\n\n\tisTWithPlane(plane: P3): number {\n\t\t// plane: plane.normal1 * p = plane.w\n\t\t// line: p=line.point + lambda * line.dir1\n\t\tconst div = plane.normal1.dot(this.dir1)\n\t\tif (eq0(div)) return NaN\n\t\tconst lambda = (plane.w - plane.normal1.dot(this.anchor)) / div\n\t\treturn lambda\n\t}\n\n\treversed() {\n\t\treturn new L3(this.anchor, this.dir1.negated(), -this.tMax, -this.tMin)\n\t}\n\n\tisTsWithPlane(plane: P3) {\n\t\treturn [this.isTWithPlane(plane)]\n\t}\n\n\tflipped() {\n\t\treturn new L3(this.anchor, this.dir1.negated())\n\t}\n\n\ttransform(m4: M4) {\n\t\tconst newAnchor = m4.transformPoint(this.anchor)\n\t\tconst newDir = m4.transformVector(this.dir1)\n\t\treturn new L3(newAnchor, newDir.unit(), this.tMin * newDir.length(), this.tMax * newDir.length())\n\t}\n\n\thashCode(): int {\n\t\treturn this.anchor.hashCode() * 31 + this.dir1.hashCode()\n\t}\n}\n\nL3.prototype.hlol = Curve.hlol++","import {\n\tarrayRange, assert, assertInst, assertNever, assertVectors, callsce, fuzzyUniques, int, M4, newtonIterate1d, V3,\n} from 'ts3dutils'\n\nimport {\n\tCurve, curvePoint, EllipsoidSurface, ImplicitCurve, ImplicitSurface, P3, ParametricSurface, PlaneSurface,\n\tProjectedCurveSurface, SemiEllipsoidSurface, Surface, MathFunctionR2R, followAlgorithm2d,\n} from '../index'\n\nconst {floor, abs, ceil, min, max} = Math\n\nexport class PICurve extends ImplicitCurve {\n\tdids: (s: number, t: number) => number\n\tdidt: (s: number, t: number) => number\n\n\tconstructor(points: V3[],\n\t\t\t\ttangents: V3[],\n\t\t\t\treadonly parametricSurface: ParametricSurface,\n\t\t\t\treadonly implicitSurface: ImplicitSurface,\n\t\t\t\treadonly pmPoints: V3[],\n\t\t\t\treadonly pmTangents: V3[],\n\t\t\t\treadonly stepSize: number,\n\t\t\t\tdir: number = 1,\n\t\t\t\tgenerator?: string,\n\t\t\t\ttMin?: number, tMax?: number) {\n\t\tsuper(points, tangents, dir, generator, tMin, tMax)\n\t\tassert(Array.isArray(pmPoints))\n\t\tassert(dir == 1)\n\t\tassert(stepSize <= 1)\n\t\tconst pf = parametricSurface.pSTFunc()\n\t\tconst dpds = parametricSurface.dpds()\n\t\tconst dpdt = parametricSurface.dpdt()\n\t\tconst didp = implicitSurface.didp.bind(implicitSurface)\n\t\tthis.dids = (s, t) => didp(pf(s, t)).dot(dpds(s, t))\n\t\tthis.didt = (s, t) => didp(pf(s, t)).dot(dpdt(s, t))\n\t\tfor (let i = 0; i < points.length - 1; i++) {\n\t\t\tassert(!points[i].equals(points[i + 1]))\n\t\t\t//assert(parametricSurface.pST(pmPoints[i].x, pmPoints[i].y).equals(points[i]))\n\t\t}\n\t}\n\n\tstatic forParametricStartEnd(ps: ParametricSurface, is: ImplicitSurface,\n\t\t\t\t\t\t\t\t pmStart: V3, pmEnd: V3, stepSize: number = 0.02, startPMTangent?: V3,\n\t\t\t\t\t\t\t\t tMin?: number, tMax?: number): PICurve {\n\t\tconst pFunc = ps.pSTFunc(), iFunc = is.implicitFunction()\n\t\tconst dpds = ps.dpds()\n\t\tconst dpdt = ps.dpdt()\n\t\tconst didp = is.didp.bind(is)\n\t\tconst mf = MathFunctionR2R.forFFxFy(\n\t\t\t(x, y) => iFunc(pFunc(x, y)),\n\t\t\t(s, t) => didp(pFunc(s, t)).dot(dpds(s, t)),\n\t\t\t(s, t) => didp(pFunc(s, t)).dot(dpdt(s, t)))\n\t\tconst {points, tangents} = followAlgorithm2d(mf, pmStart, stepSize, ps.bounds.bind(ps), pmEnd, startPMTangent)\n\t\treturn PICurve.forParametricPointsTangents(ps, is, points, tangents, stepSize, 1, tMin, tMax)\n\t}\n\n\t//\tassert(!startPoint.like(endPoint))\n\t//\tassert(ParametricSurface.is(parametricSurface))\n\t//\tassert(ImplicitSurface.is(implicitSurface))\n\t//\tthis.parametricSurface = parametricSurface\n\t//\tthis.implicitSurface = implicitSurface\n\t//\tif (!startPoint) {\n\t//\tconst pmPoint = curvePoint(this.implicitCurve(), V(1, 1, 0))\n\t//\tthis.startPoint = this.parametricSurface.pSTFunc()(pmPoint.x, pmPoint.y)\n\t//} else {\n\t//\tthis.startPoint = startPoint\n\t//}\n\t//this.endPoint = endPoint\n\t//this.dir = dir\n\t//this.isLoop = false\n\t//try {\n\t//\tthis.calcPoints(startPoint, endPoint)\n\t//\tthis.startPoint = startPoint\n\t//\tthis.endPoint = endPoint\n\t//} catch (e) {\n\t//\tthis.calcPoints(this.endPoint, this.startPoint)\n\t//\tthis.startPoint = endPoint\n\t//\tthis.endPoint = startPoint\n\t//}\n\t//this.tMin = 0\n\t//this.tMax = this.points.length - 1\n\n\tstatic forStartEnd(ps: ParametricSurface, is: ImplicitSurface,\n\t\t\t\t\t   start: V3, end: V3, stepSize: number = 0.02, startTangent: V3, min?: V3, max?: V3): PICurve {\n\t\tconst startPM = ps.stP(start)\n\t\tconst dpds = ps.dpds()(startPM.x, startPM.y), dpdt = ps.dpdt()(startPM.x, startPM.y)\n\t\tconst startPMTangent = startTangent && M4.forSys(dpds, dpdt).inversed().transformVector(startTangent)\n\t\t// assert(dpds.times(startPMTangent.x).plus(dpdt.times(startPMTangent.y)).like(startTangent))\n\t\tconst curve = PICurve.forParametricStartEnd(ps, is, startPM, ps.stP(end), stepSize, startPMTangent)\n\n\t\treturn curve.withBounds(min && curve.pointT(min), max && curve.pointT(max))\n\t}\n\n\tstatic forParametricPointsTangents(ps: ParametricSurface, is: ImplicitSurface,\n\t\t\t\t\t\t\t\t\t   pmPoints: V3[], pmTangents: V3[], stepSize: number, dir: number = 1,\n\t\t\t\t\t\t\t\t\t   tMin?: number, tMax?: number): PICurve {\n\t\tconst pFunc = ps.pSTFunc(), iFunc = is.implicitFunction()\n\t\tconst dpds = ps.dpds()\n\t\tconst dpdt = ps.dpdt()\n\t\tconst points = pmPoints.map(({x, y}) => pFunc(x, y))\n\t\tconst tangents = pmPoints.map(({x: s, y: t}, i) => {\n\t\t\tconst ds = dpds(s, t)\n\t\t\tconst dt = dpdt(s, t)\n\t\t\treturn ds.times(pmTangents[i].x).plus(dt.times(pmTangents[i].y))\n\t\t\t//const p = points[i]\n\t\t\t//return cs.normalP(p).cross(ses.normalP(p))\n\t\t\t//\t.toLength(ds.times(pmTangents[i].x).plus(dt.times(pmTangents[i].y)).length())\n\t\t})\n\t\treturn new PICurve(points, tangents, ps, is, pmPoints, pmTangents, stepSize, dir, undefined, tMin, tMax)\n\t}\n\n\tgetConstructorParameters(): any[] {\n\t\treturn [this.points, this.tangents,\n\t\t\tthis.parametricSurface, this.implicitSurface,\n\t\t\tthis.pmPoints, this.pmTangents,\n\t\t\tthis.stepSize, this.dir,\n\t\t\tthis.generator, this.tMin, this.tMax]\n\t}\n\n\treversed() {\n\t\tassertNever()\n\t\treturn new PICurve(this.parametricSurface, this.implicitSurface, this.endPoint, this.startPoint, -this.dir)\n\t}\n\n\timplicitCurve() {\n\t\tconst pF = this.parametricSurface.pSTFunc()\n\t\tconst iF = this.implicitSurface.implicitFunction()\n\t\treturn function (s, t) {\n\t\t\treturn iF(pF(s, t))\n\t\t}\n\t}\n\n\tisColinearTo(curve: Curve) {\n\t\tif (curve instanceof PICurve) {\n\t\t\tif (this.equals(curve)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif (this.parametricSurface.isCoplanarTo(curve.parametricSurface) && this.implicitSurface.isCoplanarTo(curve.implicitSurface)) {\n\n\t\t\t}\n\t\t\treturn false\n\t\t\tassertNever()\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n\n\n\t//getVerticesNo0() {\n\t//\n\t//\t// TODO\n\t//\tlet start, end, arr\n\t//\tif (!this.canon) {\n\t//\t\tstart = Math.floor(this.aT + 1)\n\t//\t\tend = ceil(this.bT)\n\t//\t\tarr = sliceCyclic(this.curve.points, start, end)\n\t//\t} else {\n\t//\t\tstart = Math.floor(this.bT + 1)\n\t//\t\tend = ceil(this.aT)\n\t//\t\tarr = sliceCyclic(this.curve.points, start, end)\n\t//\t\tconsole.log(\"this.canon\", !!this.canon, arr.length, start, end, this.aT)\n\t//\t\tarr.reverse()\n\t//\t}\n\t//\tarr.push(this.b)\n\t//\treturn arr\n\t//}\n\n\tcontainsPoint(p: V3): boolean {\n\t\tassertVectors(p)\n\t\tconst t = this.pointT(p)\n\t\treturn !isNaN(t) && this.isValidT(t)\n\t}\n\n\tequals(obj: any): boolean {\n\t\treturn Object.getPrototypeOf(obj) == PICurve.prototype\n\t\t\t&& this.parametricSurface.equals(obj.parametricSurface)\n\t\t\t&& this.implicitSurface.equals(obj.implicitSurface)\n\t\t\t&& this.points[0].equals(obj.points[0])\n\t\t\t&& this.tangents[0].equals(obj.tangents[0])\n\t\t\t&& this.dir === obj.dir\n\t}\n\n\thashCode(): int {\n\t\tlet hashCode = 0\n\t\thashCode = hashCode * 31 + this.parametricSurface.hashCode()\n\t\thashCode = hashCode * 31 + this.implicitSurface.hashCode()\n\t\thashCode = hashCode * 31 + this.points[0].hashCode()\n\t\thashCode = hashCode * 31 + this.tangents[0].hashCode()\n\t\treturn hashCode | 0\n\t}\n\n\ttangentP(point: V3): V3 {\n\t\tassertVectors(point)\n\t\tassert(this.containsPoint(point), 'this.containsPoint(point)' + this.containsPoint(point))\n\t\tconst t = this.pointT(point)\n\t\treturn this.tangentAt(t)\n\t}\n\n\ttangentAt(t: number): V3 {\n\t\treturn V3.lerp(this.tangents[floor(t)], this.tangents[ceil(t)], t % 1)\n\t}\n\n\tat(t: number): V3 {\n\t\t// assert(!isNaN(t))\n\t\t// const pointParams = this.stT(t)\n\t\t// const result = this.parametricSurface.pSTFunc()(pointParams.x, pointParams.y)\n\t\t// // assert(eq(t, this.pointT(result)))\n\t\t// return result\n\t\tassert(!isNaN(t))\n\t\tif (t % 1 == 0) return this.points[t]\n\t\tconst startParams = V3.lerp(this.pmPoints[floor(t)], this.pmPoints[ceil(t)], t % 1)\n\t\treturn this.closestPointToParams(startParams)\n\t}\n\n\tstT(t: number): V3 {\n\t\tassert(!isNaN(t))\n\t\tif (t % 1 == 0) return this.points[t]\n\t\tconst startParams = V3.lerp(this.pmPoints[floor(t)], this.pmPoints[ceil(t)], t % 1)\n\t\treturn curvePoint(this.implicitCurve(), startParams, this.dids, this.didt)\n\t}\n\n\tclosestTToPoint(p: V3, tStart?: number): number {\n\t\treturn 0\n\t}\n\n\tclosestPointToParams(startParams: V3): V3 {\n\t\tconst pointParams = curvePoint(this.implicitCurve(), startParams, this.dids, this.didt)\n\t\treturn this.parametricSurface.pSTFunc()(pointParams.x, pointParams.y)\n\t}\n\n\tisTsWithSurface(surface: Surface): number[] {\n\t\tif (surface instanceof PlaneSurface) {\n\t\t\treturn this.isTsWithPlane(surface.plane)\n\t\t} else if (surface instanceof EllipsoidSurface || surface instanceof SemiEllipsoidSurface) {\n\t\t\tconst ps = this.parametricSurface, is = this.implicitSurface\n\t\t\tif (ps instanceof ProjectedCurveSurface && is instanceof SemiEllipsoidSurface) {\n\t\t\t\tconst iscs = is.isCurvesWithSurface(surface)\n\t\t\t\tconst points = iscs.flatMap(isc => isc.isTsWithSurface(ps).map(t => isc.at(t)))\n\t\t\t\tconst ts = fuzzyUniques(points.map(p => this.pointT(p)))\n\t\t\t\treturn ts.filter(t => !isNaN(t) && this.isValidT(t))\n\t\t\t}\n\n\t\t}\n\t\tthrow new Error()\n\t}\n\n\tisTsWithPlane(plane: P3): number[] {\n\t\tassertInst(P3, plane)\n\t\tconst ps = this.parametricSurface, is = this.implicitSurface\n\t\tconst pscs = ps.isCurvesWithPlane(plane)\n\t\tconst iscs = is.isCurvesWithPlane(plane)\n\t\tconst infos = iscs.flatMap(isc => pscs.flatMap(psc => isc.isInfosWithCurve(psc)))\n\t\tconst ts = fuzzyUniques(infos.map(info => this.pointT(info.p)))\n\t\treturn ts.filter(t => !isNaN(t) && this.isValidT(t))\n\t}\n\n\tpointT(p: V3): number {\n\t\tassertVectors(p)\n\t\tif (!this.parametricSurface.containsPoint(p) || !this.implicitSurface.containsPoint(p)) {\n\t\t\treturn NaN\n\t\t}\n\t\tconst pmPoint = this.parametricSurface.stPFunc()(p)\n\t\tconst ps = this.points, pmps = this.pmPoints\n\t\tlet t = 0, prevDistance, pmDistance = pmPoint.distanceTo(pmps[0])\n\t\twhile (pmDistance > abs(this.stepSize) && t < ps.length - 1) { // TODO -1?\n\t\t\t//console.log(t, pmps[t].$, pmDistance)\n\t\t\tt = min(pmps.length - 1, t + max(1, Math.round(pmDistance / abs(this.stepSize) / 2 / 2)))\n\t\t\tpmDistance = pmPoint.distanceTo(pmps[t])\n\t\t}\n\t\t// if (t < this.pmPoints.length - 1 && pmDistance > pmPoint.distanceTo(pmps[t + 1])) {\n\t\t//     t++\n\t\t// }\n\t\tif (pmDistance > abs(this.stepSize) * 1.1) {\n\t\t\t// p is not on this curve\n\t\t\treturn NaN\n\t\t}\n\t\tif (t == ps.length - 1) {\n\t\t\tt--\n\t\t}\n\t\tif (ps[t].like(p)) return t\n\t\tif (ps[t + 1].like(p)) return t + 1\n\t\tconst startT = t + V3.inverseLerp(ps[t], ps[t + 1], p)\n\t\tif (startT)\n\t\t\treturn newtonIterate1d(t => this.at(t).distanceTo(p), startT, 2)\n\t}\n\n\ttransform(m4: M4): PICurve {\n\t\tconst dirFactor = m4.isMirroring() ? -1 : 1\n\t\treturn PICurve.forStartEnd(\n\t\t\tthis.parametricSurface.transform(m4),\n\t\t\tthis.implicitSurface.transform(m4),\n\t\t\tm4.transformPoint(this.points[0]),\n\t\t\tm4.transformPoint(this.points.last),\n\t\t\tthis.stepSize * dirFactor,\n\t\t\tm4.transformVector(this.tangents[0]),\n\t\t\tm4.transformPoint(this.at(this.tMin)),\n\t\t\tm4.transformPoint(this.at(this.tMax)))\n\t\t//return PICurve.forParametricStartEnd(\n\t\t//\tthis.parametricSurface.transform(m4),\n\t\t//\tthis.implicitSurface.transform(m4),\n\t\t//\tthis.pmPoints[0],\n\t\t//\tthis.pmPoints.last,\n\t\t//\tthis.stepSize,\n\t\t//\tthis.dir,\n\t\t//\tthis.tMin,\n\t\t//\tthis.tMax)\n\t\t// TODO: pass transformed points?\n\t\t//return new PICurve(\n\t\t//\tm4.transformedPoints(this.points),\n\t\t//\tm4.transformedVectors(this.tangents),\n\t\t//    this.parametricSurface.transform(m4),\n\t\t//   this.implicitSurface.transform(m4),\n\t\t//   this.pmPoints,\n\t\t//   this.pmTangents,\n\t\t//this.stepSize,\n\t\t//   this.dir,\n\t\t//this.generator,\n\t\t//this.tMin, this.tMax)\n\t}\n\n\troots(): [number[], number[], number[]] {\n\t\tconst allTs = arrayRange(0, this.points.length)\n\t\treturn [allTs, allTs, allTs]\n\t}\n\n\ttoSource(rounder: (x: number) => number = x => x): string {\n\t\tconst result = callsce('PICurve.forParametricStartEnd',\n\t\t\tthis.parametricSurface, this.implicitSurface,\n\t\t\tthis.pmPoints[0], this.pmPoints.last,\n\t\t\tthis.stepSize, this.pmTangents[0], this.tMin, this.tMax)\n\t\treturn result\n\t}\n}\n\nPICurve.prototype.tIncrement = 1","import {arrayFromFunction, assertNumbers, eq, eq0, hasConstructor, int, le, pqFormula, V3} from 'ts3dutils'\n\nimport {BezierCurve, Curve, ISInfo, L3, XiEtaCurve,} from '../index'\n\n/**\n * eta = xi²\n */\nexport class ParabolaCurve extends XiEtaCurve {\n\tstatic readonly XY = new ParabolaCurve(V3.O, V3.X, V3.Y)\n\tstatic readonly YZ = new ParabolaCurve(V3.O, V3.Y, V3.Z)\n\tstatic readonly ZX = new ParabolaCurve(V3.O, V3.Z, V3.X)\n\n\tconstructor(center: V3, f1: V3, f2: V3, tMin: number = -10, tMax: number = 10) {\n\t\tsuper(center, f1, f2, tMin, tMax)\n\t}\n\n\tstatic eccentricity() {\n\t\treturn 1\n\t}\n\n\tstatic unitIsInfosWithLine(anchorLC: V3, dirLC: V3, anchorWC: V3, dirWC: V3): ISInfo[] {\n\t\t// para: x² = y\n\t\t// line(t) = anchor + t dir\n\t\t// (ax + t dx)² = ay + t dy\n\t\t// ax² + t ax dx + t² dx² = ay + t dy\n\t\t// t² dx² + t (ax dx + dy) + ay² + ay = 0\n\t\tconst pqDiv = dirLC.x ** 2\n\t\tconst lineTs = pqFormula((anchorLC.x * dirLC.x + dirLC.y) / pqDiv, (anchorLC.x ** 2 + anchorLC.y) / pqDiv)\n\t\treturn lineTs.filter(tOther => le(0, anchorLC.y + tOther * dirLC.y))\n\t\t\t.map(tOther => ({\n\t\t\t\ttThis: dirLC.x * tOther + anchorLC.x,\n\t\t\t\ttOther: tOther,\n\t\t\t\tp: L3.at(anchorWC, dirWC, tOther),\n\t\t\t}))\n\t}\n\n\tstatic magic(a: number, b: number, c: number): number[] {\n\t\t/*\n\t\t solve system (5)/(6)\n\t\t g1 * xi + g2 * eta = g3 (6)\n\t\t g1 * xi + g2 * xi * xi = g3\n\t\t xi² + xi * g1/g2 - g3/g2 = 0\n\t\t */\n\t\treturn pqFormula(a / b, -c / b)\n\t}\n\n\tstatic XYLCValid(pLC: V3): boolean {\n\t\treturn eq(pLC.x ** 2, pLC.y)\n\t}\n\n\tstatic XYLCPointT(pLC: V3): number {\n\t\treturn pLC.x\n\t}\n\n\tstatic quadratic(a: V3, b: V3, c: V3): ParabolaCurve {\n\t\t// (1 - t)² a + 2 * t * (1 - t) b + t² c\n\t\t// (1 -2t +t²)a + (2t -2t²) b + t² c\n\t\t// = t²(a - 2b + c) + t (-2a + 2b) + a\n\t\t// (2t - 2) a + (1 - 2t) b + 2t c = t(2a + 2b - 2c) - 2a + b\n\t\t// 2 a + -2 b + 2 c\n\t\tconst f2 = a.plus(c).minus(b.times(2))\n\t\tconst f1 = b.minus(a).times(2)\n\t\tconst center = a\n\t\treturn new ParabolaCurve(center, f1, f2, 0, 1)\n\t}\n\n\tat(t: number): V3 {\n\t\t// center + f1 t + f2 t²\n\t\treturn this.center.plus(this.f1.times(t)).plus(this.f2.times(t * t))\n\t}\n\n\ttangentAt(t: number): V3 {\n\t\tassertNumbers(t)\n\t\t// f1 + f2 2 t\n\t\treturn this.f1.plus(this.f2.times(2 * t))\n\t}\n\n\tddt(t: number): V3 {\n\t\tassertNumbers(t)\n\t\treturn this.f2.times(2)\n\t}\n\n\ttangentAt2(xi: number, eta: number): V3 {\n\t\tassertNumbers(xi, eta)\n\t\treturn this.f1.plus(this.f2.times(2 * eta))\n\t}\n\n\treversed() {\n\t\treturn new this.constructor(this.center, this.f1.negated(), this.f2, -this.tMax, -this.tMin)\n\t}\n\n\t/**\n\t * tangent: f1 + 2 * t * f2 = 0\n\t * t = -f1 / 2 / f2 (for individual dimensions)\n\t */\n\troots(): [number[], number[], number[]] {\n\t\tconst dimRoots = (dim: int) => eq0(this.f2.e(dim)) ? [] : [-this.f1.e(dim) / 2 / this.f2.e(dim)]\n\t\treturn arrayFromFunction(3, dimRoots) as [number[], number[], number[]]\n\t}\n\n\tisColinearTo(curve: Curve): boolean {\n\t\tif (!hasConstructor(curve, ParabolaCurve)) return false\n\t\tconst thisRA = this.rightAngled(), curveRA = curve.rightAngled()\n\t\treturn thisRA.center.like(curveRA.center)\n\t\t\t&& thisRA.f2.like(curveRA.f2)\n\t\t\t&& thisRA.f1.likeOrReversed(curveRA.f1)\n\t}\n\n\trightAngled() {\n\t\t// looking for vertex of parabola\n\t\t// this is the point where the tangent is perpendicular to the main axis (f2)\n\t\t// tangent = f1 + f2 * 2 * t0\n\t\t// f2 DOT (f1 + f2 * 2 * t0) == 0\n\t\t// f1 DOT f2 + f2 DOT f2 * 2 * t0 == 0\n\t\t// t0 == -(f1 DOT f2) / (f2 DOT f2 * 2)\n\t\tconst f1 = this.f1, f2 = this.f2\n\t\tconst f1DOTf2 = f1.dot(f2)\n\t\tif (eq0(f1DOTf2) && f1.hasLength(1)) {\n\t\t\treturn this\n\t\t}\n\t\tconst t0 = -f1DOTf2 / f2.squared() / 2\n\t\t// we need to rearange tMin/tMax\n\t\t// tMin' = pointT(at(tMin)) =\n\t\tconst raCenter = this.at(t0)\n\t\tconst raF1 = this.tangentAt(t0), raF1Length = raF1.length(), raF11 = raF1.unit()\n\t\tconst repos = (t: number) => this.at(t).minus(raCenter).dot(raF11)\n\t\treturn new ParabolaCurve(raCenter, raF11, f2.div(raF1Length ** 2), repos(this.tMin), repos(this.tMax))\n\t}\n\n\tarcLength(startT: number, endT: number): number {\n\t\tlet f1 = this.f1\n\t\tconst f2 = this.f2\n\t\tconst f1DOTf2 = f1.dot(f2)\n\t\tlet t0 = 0\n\t\tif (!eq0(f1DOTf2)) {\n\t\t\tt0 = -f1DOTf2 / f2.squared() / 2\n\t\t\tf1 = f1.plus(f2.times(2 * t0))\n\t\t}\n\t\tconst f1Length = f1.length()\n\t\tconst a = f2.length() / f1Length\n\n\t\tfunction F(x: number) {\n\t\t\treturn Math.asinh(a * 2 * x) / 4 / a + x * Math.sqrt(1 + a * a * 4 * x * x) / 2\n\t\t}\n\n\t\treturn f1Length * (F(endT - t0) - F(startT - t0))\n\t}\n\n\tasBezier() {\n\t\treturn BezierCurve.quadratic(\n\t\t\tthis.at(-1),\n\t\t\tnew L3(this.at(-1), this.tangentAt(-1).unit()).isInfoWithLine(new L3(this.at(1), this.tangentAt(1).unit())),\n\t\t\tthis.at(1))\n\t}\n}\n\nParabolaCurve.prototype.tIncrement = 1 / 32\n","import {\n\tarrayFromFunction, assert, assertNumbers, assertVectors, eq, eq0, hasConstructor, int, le, newtonIterate1d,\n\tpqFormula, TAU, V3,\n} from 'ts3dutils'\n\nimport {\n\tCurve, EllipseCurve, intersectionUnitCircleLine, intersectionUnitCircleLine2, ISInfo, L3, P3, XiEtaCurve,\n} from '../index'\n\nconst {PI, min, max} = Math\n\nexport class SemiEllipseCurve extends XiEtaCurve {\n\tstatic readonly UNIT = new SemiEllipseCurve(V3.O, V3.X, V3.Y)\n\n\tconstructor(center: V3, f1: V3, f2: V3, tMin: number = 0, tMax: number = PI) {\n\t\tsuper(center, f1, f2, tMin, tMax)\n\t\tassert(0 <= this.tMin && this.tMin < PI)\n\t\tassert(0 < this.tMax && this.tMax <= PI)\n\t}\n\n\tstatic XYLCValid(pLC: V3): boolean {\n\t\tconst {x, y} = pLC\n\t\treturn le(0, y) && eq0(x ** 2 + y ** 2 - 1)\n\t}\n\n\tstatic XYLCPointT(pLC: V3): number {\n\t\t// assert(le(0, pLC.y))\n\t\tconst angle = Math.atan2(pLC.y, pLC.x)\n\t\treturn angle < -PI / 2 ? angle + TAU : angle // 0 ? (assert(eq0(angle) || eq(PI, abs(angle))), abs(angle)) :\n\t\t\t\t\t\t\t\t\t\t\t\t\t // angle\n\t}\n\n\tstatic magic(a: number, b: number, c: number): number[] {\n\t\tconst isLC = intersectionUnitCircleLine2(a, b, c)\n\t\tconst result = []\n\t\tlet t\n\t\tfor (const [xi, eta] of isLC) {\n\t\t\tle(0, eta) && result.push(SemiEllipseCurve.XYLCPointT(new V3(xi, eta, 0)))\n\t\t}\n\t\treturn result\n\t}\n\n\tstatic unitIsInfosWithLine(anchorLC: V3, dirLC: V3, anchorWC: V3, dirWC: V3): ISInfo[] {\n\t\t// ell: x² + y² = 1 = p²\n\t\t// line(t) = anchor + t dir\n\t\t// anchor² - 1 + 2 t dir anchor + t² dir² = 0\n\t\tconst pqDiv = dirLC.squared()\n\t\tconst lineTs = pqFormula(2 * dirLC.dot(anchorLC) / pqDiv, (anchorLC.squared() - 1) / pqDiv)\n\t\treturn lineTs.filter(tOther => le(0, anchorLC.y + tOther * dirLC.y))\n\t\t\t.map(tOther => ({\n\t\t\t\ttThis: SemiEllipseCurve.XYLCPointT(dirLC.times(tOther).plus(anchorLC)),\n\t\t\t\ttOther: tOther,\n\t\t\t\tp: L3.at(anchorWC, dirWC, tOther),\n\t\t\t}))\n\t}\n\n\t/**\n\t * Returns a new SemiEllipseCurve representing a circle parallel to the XY-plane.`\n\t */\n\tstatic semicircle(radius: number, center: V3 = V3.O): SemiEllipseCurve {\n\t\treturn new SemiEllipseCurve(center, new V3(radius, 0, 0), new V3(0, radius, 0))\n\t}\n\n\tstatic fromEllipse(curve: EllipseCurve, tMin: number, tMax: number): SemiEllipseCurve[] {\n\t\treturn [\n\t\t\ttMin < 0 && new SemiEllipseCurve(curve.center, curve.f1.negated(), curve.f2.negated(), tMin + PI, min(0, tMax) + PI),\n\t\t\ttMax > 0 && new SemiEllipseCurve(curve.center, curve.f1, curve.f2, max(0, tMin), tMax),\n\t\t].filter(x => x)\n\t}\n\n\tgetAreaInDir(right: V3, up: V3, tStart: number, tEnd: number): { area: number, centroid: V3 } {\n\t\treturn EllipseCurve.prototype.getAreaInDir.call(this, right, up, tStart, tEnd)\n\t}\n\n\tat(t: number): V3 {\n\t\tassertNumbers(t)\n\t\t//assert(this.isValidT(t))\n\t\t// center + f1 cos t + f2 sin t\n\t\treturn this.center.plus(this.f1.times(Math.cos(t))).plus(this.f2.times(Math.sin(t)))\n\t}\n\n\ttangentAt(t: number): V3 {\n\t\tassertNumbers(t)\n\t\t//assert(this.isValidT(t))\n\t\t// f2 cos(t) - f1 sin(t)\n\t\treturn this.f2.times(Math.cos(t)).minus(this.f1.times(Math.sin(t)))\n\t}\n\n\tddt(t: number): V3 {\n\t\tassertNumbers(t)\n\t\tassert(this.isValidT(t))\n\t\treturn this.f2.times(-Math.sin(t)).minus(this.f1.times(Math.cos(t)))\n\t}\n\n\tisCircular(): boolean {\n\t\treturn eq(this.f1.length(), this.f2.length()) && this.f1.isPerpendicularTo(this.f2)\n\t}\n\n\tisColinearTo(curve: Curve): boolean {\n\t\tif (!((x): x is SemiEllipseCurve => x.constructor == this.constructor)(curve)) {\n\t\t\treturn false\n\t\t}\n\t\tif (!hasConstructor(curve, SemiEllipseCurve)) return false\n\t\tif (!this.center.like(curve.center)) {\n\t\t\treturn false\n\t\t}\n\t\tif (this == curve) {\n\t\t\treturn true\n\t\t}\n\t\tif (this.isCircular()) {\n\t\t\treturn curve.isCircular() && eq(this.f1.length(), curve.f1.length()) && this.normal.isParallelTo(curve.normal)\n\t\t} else {\n\t\t\tlet {f1: f1, f2: f2} = this.rightAngled(), {f1: c1, f2: c2} = curve.rightAngled()\n\t\t\tif (f1.length() > f2.length()) {[f1, f2] = [f2, f1]}\n\t\t\tif (c1.length() > c2.length()) {[c1, c2] = [c2, c1]}\n\t\t\treturn eq(f1.squared(), Math.abs(f1.dot(c1)))\n\t\t\t\t&& eq(f2.squared(), Math.abs(f2.dot(c2)))\n\t\t}\n\t}\n\n\tisValidT(t: number) {\n\t\treturn le(0, t) && le(t, PI)\n\t}\n\n\tpointT(p: V3) {\n\t\tassertVectors(p)\n\t\tassert(this.containsPoint(p))\n\t\tconst pLC = this.inverseMatrix.transformPoint(p)\n\t\tconst t = SemiEllipseCurve.XYLCPointT(pLC)\n\t\tassert(this.isValidT(t))\n\t\treturn t\n\t}\n\n\treversed(): SemiEllipseCurve {\n\t\treturn new SemiEllipseCurve(this.center, this.f1.negated(), this.f2, PI - this.tMax, PI - this.tMin)\n\t}\n\n\teccentricity() {\n\t\tconst mainAxes = this.rightAngled()\n\t\tconst f1length = mainAxes.f1.length(), f2length = mainAxes.f1.length()\n\t\tconst [a, b] = f1length > f2length ? [f1length, f2length] : [f2length, f1length]\n\t\treturn Math.sqrt(1 - b * b / a / a)\n\t}\n\n\tcircumference(): number {\n\t\treturn this.arcLength(-Math.PI, Math.PI)\n\t}\n\n\tarcLength(startT: number, endT: number, steps: int = 2): number {\n\t\tassert(startT < endT, 'startT < endT')\n\t\tconst f1Length = this.f1.length()\n\t\tif (eq(f1Length, this.f2.length())) {\n\t\t\treturn f1Length * (endT - startT)\n\t\t}\n\t\treturn super.arcLength(startT, endT, steps)\n\t}\n\n\tcircumferenceApproximate(): number {\n\t\t// approximate circumference by Ramanujan\n\t\t// https://en.wikipedia.org/wiki/Ellipse#Circumference\n\t\tconst {f1, f2} = this.rightAngled(), a = f1.length(), b = f2.length()\n\t\tconst h = (a - b) * (a - b) / (a + b) / (a + b) // (a - b)² / (a + b)²\n\t\treturn Math.PI * (a + b) * (1 + 3 * h / (10 + Math.sqrt(4 - 3 * h)))\n\t}\n\n\t/**\n\t * Radii of the ellipse are described by\n\t * q(phi) = f1 * cos(phi) + f2 * sin(phi)\n\t * or q(xi, eta) = f1 * xi + f2 * eta (1) with the added condition\n\t * xi² + eta² = 1 (2)\n\t * we want to find the radius where the corresponding tangent is perpendicular\n\t * tangent: q'(phi) = f1 * -sin(phi) + f2 * cos(phi)\n\t * tangent: q'(xi, eta) = f1 * -eta + f2 * xi\n\t * perpendicular when: q'(xi, eta) DOT q(xi, eta) = 0\n\t * (f1 * -eta + f2 * xi) DOT (f1 * xi + f2 * eta) = 0\n\t * DOT is distributive:\n\t * f1² * (-eta * xi) + f1 * f2 * (-eta² + xi²) + f2² * (xi * eta) = 0\n\t * (f2² - f1²) * (eta * xi) + f1 * f2 * (-eta² + xi²) = 0\n\t * a * (xi² - eta²) + b * xi * eta = 0 (2)\n\t * with a = f1 * f2, b = f2² - f1²\n\t * => (xi/eta)² + xi/eta * b/a + 1 = 0 (divide by a * eta²)\n\t * xi/eta = b/a/2 +- sqrt(b²/a²/4 - 1) | * 2*a*eta\n\t * 2 * a * xi = eta * (b +- sqrt(b² - 4 * a²))\n\t * g1 * xi - g2 * eta = 0 (3)\n\t * with g1 = 2 * a, g2 = b +- sqrt(b² - 4 * a²)\n\t * Solve (3), (2) with intersectionUnitCircleLine\n\t */\n\trightAngled(): SemiEllipseCurve {\n\t\tconst f1 = this.f1, f2 = this.f2, a = f1.dot(f2), b = f2.squared() - f1.squared()\n\t\tif (eq0(a)) {\n\t\t\treturn this\n\t\t}\n\t\tconst g1 = 2 * a, g2 = b + Math.sqrt(b * b + 4 * a * a)\n\t\tconst {x1: xi, y1: eta} = intersectionUnitCircleLine(g1, g2, 0)\n\t\tconst f1RA = f1.times(xi).plus(f2.times(eta))\n\t\tconst f2RA = f1.times(-eta).plus(f2.times(xi))\n\t\treturn new SemiEllipseCurve(this.center, f1RA, f2RA)\n\t}\n\n\tasEllipse(): EllipseCurve {\n\t\treturn new EllipseCurve(this.center, this.f1, this.f2, this.tMin, this.tMax)\n\t}\n\n\tisInfosWithEllipse(ellipse: EllipseCurve | SemiEllipseCurve): ISInfo[] {\n\t\tif (this.normal.isParallelTo(ellipse.normal) && eq0(this.center.minus(ellipse.center).dot(ellipse.normal))) {\n\t\t\tellipse instanceof SemiEllipseCurve && (ellipse = ellipse.asEllipse())\n\t\t\treturn this.asEllipse().isInfosWithCurve(ellipse).filter(info => this.isValidT(info.tThis) && ellipse.isValidT(info.tOther))\n\t\t} else {\n\t\t\treturn this.isTsWithPlane(P3.normalOnAnchor(ellipse.normal.unit(), ellipse.center)).mapFilter(t => {\n\t\t\t\tconst p = this.at(t)\n\t\t\t\tif (ellipse.containsPoint(p)) {\n\t\t\t\t\treturn {tThis: t, tOther: ellipse.pointT(p), p}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tisInfosWithCurve(curve: Curve): ISInfo[] {\n\t\tif (curve instanceof SemiEllipseCurve || curve instanceof EllipseCurve) {\n\t\t\treturn this.isInfosWithEllipse(curve)\n\t\t}\n\t\treturn super.isInfosWithCurve(curve)\n\t}\n\n\troots(): [number[], number[], number[]] {\n\t\t// tangent(t) = f2 cos t - f1 sin t\n\t\t// solve for each dimension separately\n\t\t// tangent(eta, xi) = f2 eta - f1 xi\n\n\t\treturn arrayFromFunction(3, dim => {\n\t\t\tconst a = this.f2.e(dim), b = -this.f1.e(dim)\n\t\t\tconst {x1, y1, x2, y2} = intersectionUnitCircleLine(a, b, 0)\n\t\t\treturn [Math.atan2(y1, x1), Math.atan2(y2, x2)]\n\t\t})\n\t}\n\n\tclosestTToPoint(p: V3) {\n\t\t// (at(t) - p) * tangentAt(t) = 0\n\t\t// (xi f1 + eta f2 + q) * (xi f2 - eta f1) = 0\n\t\t// xi eta (f2^2-f1^2) + xi f2 q - eta² f1 f2 + xi² f1 f2 - eta f1 q = 0\n\t\t//  (xi² - eta²) f1 f2 + xi eta (f2^2-f1^2) + xi f2 q - eta f1 q = 0\n\n\t\t// atan2 of p is a good first approximation for the searched t\n\t\tconst startT = this.inverseMatrix.transformPoint(p).angleXY()\n\t\tconst pRelCenter = p.minus(this.center)\n\t\tconst f = (t: number) => this.tangentAt(t).dot(this.f1.times(Math.cos(t)).plus(this.f2.times(Math.sin(t))).minus(pRelCenter))\n\t\treturn newtonIterate1d(f, startT)\n\t}\n\n\tarea(): number {\n\t\t// see\n\t\t// https://upload.wikimedia.org/wikipedia/commons/thumb/4/4e/Cross_product_parallelogram.svg/220px-Cross_product_parallelogram.svg.png\n\t\treturn Math.PI * this.f1.cross(this.f2).length()\n\t}\n\n\tangleToT(phi: number): number {\n\t\t// atan2(y, x) = phi\n\t\tconst phiDir = this.f1.unit().times(Math.cos(phi)).plus(this.f2.rejectedFrom(this.f1).unit().times(Math.sin(phi)))\n\t\tconst localDir = this.inverseMatrix.transformVector(phiDir)\n\t\treturn localDir.angleXY()\n\t}\n}\n\nSemiEllipseCurve.prototype.hlol = Curve.hlol++\nSemiEllipseCurve.prototype.tIncrement = 2 * Math.PI / (4 * 32)","import {\n\tassert, assertInst, assertNumbers, assertVectors, callsce, eq, eq0, floatHashCode, int, M4, Transformable, V3,\n} from 'ts3dutils'\n\nimport {BezierCurve, Curve, EllipseCurve, HyperbolaCurve, L3, ParabolaCurve, SemiEllipseCurve} from './index'\n\nexport class P3 extends Transformable {\n\n\tstatic readonly YZ = new P3(V3.X, 0)\n\tstatic readonly ZX = new P3(V3.Y, 0)\n\tstatic readonly XY = new P3(V3.Z, 0)\n\n\t/**\n\t * Oriented plane, i.e. splits R^3 in half, with one half being \"in front\" of the plane.\n\t * Leads to multiple comparisons: isCoplanarToPlane returns if the plane occupies the same space,\n\t * like returns if the plane occupies the same space and has the same orientation\n\t *\n\t * Points x on the plane fulfill the equation: normal1 DOT x = w\n\t *\n\t * @param normal1 unit plane normal1\n\t * @param w signed (rel to normal1) distance from the origin\n\t */\n\tconstructor(readonly normal1: V3,\n\t\t\t\treadonly w: number = 0) {\n\t\tsuper()\n\t\tassertVectors(normal1)\n\t\tassertNumbers(w)\n\t\tassert(normal1.hasLength(1), 'normal1.hasLength(1)' + normal1)\n\t}\n\n\tget anchor(): V3 {\n\t\treturn this.normal1.times(this.w)\n\t}\n\n\tstatic throughPoints(a: V3, b: V3, c: V3): P3 {\n\t\tassertVectors(a, b, c)\n\t\tconst n1 = b.minus(a).cross(c.minus(a)).unit()\n\t\treturn new P3(n1, n1.dot(a))\n\t}\n\n\tstatic normalOnAnchor(normal: V3, anchor: V3): P3 {\n\t\tassertVectors(normal, anchor)\n\t\tconst n1 = normal.unit()\n\t\treturn new P3(n1, n1.dot(anchor))\n\t}\n\n\t/**\n\t * x/x0 + y/y0 + y/y0 = 1\n\t *\n\t */\n\tstatic forAxisIntercepts(x0: number, y0: number, z0: number): P3 {\n\t\tassertNumbers(x0, y0, z0)\n\t\tconst normal = new V3(1 / x0, 1 / y0, 1 / z0)\n\t\treturn new P3(normal.unit(), normal.length())\n\t}\n\n\tstatic forAnchorAndPlaneVectors(anchor: V3, v0: V3, v1: V3): P3 {\n\t\tassertVectors(anchor, v0, v1)\n\t\treturn P3.normalOnAnchor(v0.cross(v1), anchor)\n\t}\n\n\taxisIntercepts(): V3 {\n\t\tconst w = this.w, n = this.normal1\n\t\treturn new V3(w / n.x, w / n.y, w / n.z)\n\t}\n\n\tisCoplanarToPlane(plane: P3): boolean {\n\t\tassertInst(P3, plane)\n\t\treturn this.like(plane) || this.likeFlipped(plane)\n\t}\n\n\tlike(plane: P3): boolean {\n\t\tassertInst(P3, plane)\n\t\treturn eq(this.w, plane.w) && this.normal1.like(plane.normal1)\n\t}\n\n\tlikeFlipped(plane: P3): boolean {\n\t\tassertInst(P3, plane)\n\t\treturn eq(this.w, -plane.w) && this.normal1.like(plane.normal1.negated())\n\t}\n\n\t/**\n\t * True iff plane.normal1 is equal to this.normal1 or it's negation.\n\t *\n\t */\n\tisParallelToPlane(plane: P3): boolean {\n\t\tassertInst(P3, plane)\n\t\treturn eq(1, Math.abs(this.normal1.dot(plane.normal1)))\n\t}\n\n\tisParallelToLine(line: L3): boolean {\n\t\tassertInst(L3, line)\n\t\treturn eq0(this.normal1.dot(line.dir1))\n\t}\n\n\tisPerpendicularToLine(line: L3): boolean {\n\t\tassertInst(L3, line)\n\t\t// this.normal1 || line.dir1\n\t\treturn eq(1, Math.abs(this.normal1.dot(line.dir1)))\n\t}\n\n\tisPerpendicularToPlane(plane: P3): boolean {\n\t\tassertInst(P3, plane)\n\t\treturn eq0(this.normal1.dot(plane.normal1))\n\t}\n\n\ttoSource(rounder?): string {\n\t\treturn callsce('new P3', this.normal1, this.w)\n\t}\n\n\ttranslated(offset: V3): P3 {\n\t\treturn new P3(this.normal1, this.w + offset.dot(this.normal1))\n\t}\n\n\ttransform(m4: M4) {\n\t\tconst mirror = m4.isMirroring()\n\t\t// get two vectors in the plane:\n\t\tconst u = this.normal1.getPerpendicular()\n\t\tconst v = u.cross(this.normal1)\n\t\t// get 3 points in the plane:\n\t\tconst p1 = m4.transformPoint(this.anchor),\n\t\t\tp2 = m4.transformPoint(this.anchor.plus(v)),\n\t\t\tp3 = m4.transformPoint(this.anchor.plus(u))\n\t\t// and create a new plane from the transformed points:\n\t\treturn P3.throughPoints(p1, !mirror ? p2 : p3, !mirror ? p3 : p2) as this\n\t}\n\n\tdistanceToLine(line: L3): number {\n\t\tassertInst(L3, line)\n\t\tif (!this.isParallelToLine(line)) {\n\t\t\treturn this.distanceToPoint(line.anchor)\n\t\t} else {\n\t\t\treturn 0\n\t\t}\n\t}\n\n\tcontainsPoint(x: V3): boolean {\n\t\tassertVectors(x)\n\t\treturn eq(this.w, this.normal1.dot(x))\n\t}\n\n\tcontainsLine(line: L3): boolean {\n\t\tassertInst(L3, line)\n\t\treturn this.containsPoint(line.anchor) && this.isParallelToLine(line)\n\t}\n\n\tdistanceToPointSigned(point: V3): number {\n\t\tassertInst(V3, point)\n\t\treturn this.normal1.dot(point) - this.w\n\t}\n\n\tdistanceToPoint(point: V3): number {\n\t\tassertInst(V3, point)\n\t\treturn Math.abs(this.normal1.dot(point) - this.w)\n\t}\n\n\tintersectionWithLine(line: L3): V3 {\n\t\treturn line.intersectionWithPlane(this)\n\t}\n\n\tintersectionWithPlane(plane: P3): L3 | undefined {\n\t\t/*\n\n\t\t this: n0 * x = w0\n\t\t plane: n1 * x = w1\n\t\t plane perpendicular to both which goes through origin:\n\t\t n2 := n0 X x1\n\t\t n2 * x = 0\n\t\t */\n\t\tassertInst(P3, plane)\n\t\tassert(!this.isParallelToPlane(plane), '!this.isParallelToPlane(plane)')\n\t\t/*\n\t\t var n0 = this.normal1, n1 = plane.normal1, n2 = n0.cross(n1).unit(), m = M4.forSys(n0, n1, n2)\n\t\t var x0 = this.anchor, x1 = plane.anchor, x2 = V3.O\n\t\t var p = n2.times(x2.dot(n2))\n\t\t .plus(n1.cross(n2).times(x0.dot(n0)))\n\t\t .plus(n2.cross(n0).times(x1.dot(n1)))\n\t\t .div(m.determinant())\n\t\t */\n\t\tconst n0 = this.normal1, n1 = plane.normal1, n2 = n0.cross(n1).unit()\n\t\tconst p = M4.forRows(n0, n1, n2).inversed().transformVector(new V3(this.w, plane.w, 0))\n\t\treturn new L3(p, n2)\n\t}\n\n\t/**\n\t * Returns the point in the plane closest to the given point\n\t *\n\t */\n\tprojectedPoint(x: V3): V3 {\n\t\t// See http://math.stackexchange.com/questions/444968/project-a-point-in-3d-on-a-given-plane\n\t\t// p = x - ((x - planeAnchor) * normal1) * normal1\n\t\treturn x.minus(this.normal1.times(x.minus(this.anchor).dot(this.normal1)))\n\t}\n\n\tprojectedVector(x: V3): V3 {\n\t\t// See V3.rejectedFrom. Simplified, as this.normal1.length() == 1\n\t\treturn x.minus(this.normal1.times(x.dot(this.normal1)))\n\t}\n\n\tflipped(): P3 {\n\t\treturn new P3(this.normal1.negated(), -this.w)\n\t}\n\n\tcontainsCurve(curve: Curve): boolean {\n\t\tif (curve instanceof L3) {\n\t\t\treturn this.containsLine(curve)\n\t\t} else if (curve instanceof SemiEllipseCurve ||\n\t\t\tcurve instanceof EllipseCurve ||\n\t\t\tcurve instanceof HyperbolaCurve ||\n\t\t\tcurve instanceof ParabolaCurve) {\n\t\t\treturn this.containsPoint(curve.center) && this.normal1.isParallelTo(curve.normal)\n\t\t} else if (curve instanceof BezierCurve) {\n\t\t\treturn curve.points.every(p => this.containsPoint(p))\n\t\t} else {\n\t\t\tthrow new Error('' + curve)\n\t\t}\n\n\t}\n\n\thashCode(): int {\n\t\treturn this.normal1.hashCode() * 31 | 0 + floatHashCode(this.w)\n\t}\n}","import {Equalable} from 'javasetmap.ts'\nimport {callsce, eq0, int, NLA_PRECISION, Transformable, V3,} from 'ts3dutils'\n\nimport {Curve, dotCurve, Edge, ImplicitCurve, L3, P3, CalculateAreaVisitor, ZDirVolumeVisitor} from '../index'\n\nconst {ceil, floor} = Math\n\nexport abstract class Surface extends Transformable implements Equalable {\n\tstatic loopContainsPointGeneral(loop: Edge[], p: V3, testLine: L3, lineOut: V3): PointVsFace {\n\t\tconst testPlane = P3.normalOnAnchor(lineOut, p)\n\t\t// edges colinear to the testing line; these will always be counted as \"inside\" relative to the testing line\n\t\tconst colinearEdges = loop.map((edge) => edge.colinearToLine(testLine))\n\t\tlet inside = false\n\n\t\tfunction logIS(isP: V3) {\n\t\t\tconst isT = testLine.pointT(isP)\n\t\t\tif (eq0(isT)) {\n\t\t\t\treturn true\n\t\t\t} else if (isT > 0) {\n\t\t\t\tinside = !inside\n\t\t\t}\n\t\t}\n\n\t\tfor (let edgeIndex = 0; edgeIndex < loop.length; edgeIndex++) {\n\t\t\tconst edge = loop[edgeIndex]\n\t\t\tconst nextEdgeIndex = (edgeIndex + 1) % loop.length, nextEdge = loop[nextEdgeIndex]\n\t\t\t//console.log(edge.toSource()) {p:V(2, -2.102, 0),\n\t\t\tif (colinearEdges[edgeIndex]) {\n\t\t\t\tconst lineAT = testLine.pointT(edge.a), lineBT = testLine.pointT(edge.b)\n\t\t\t\tif (Math.min(lineAT, lineBT) <= NLA_PRECISION && -NLA_PRECISION <= Math.max(lineAT, lineBT)) {\n\t\t\t\t\treturn PointVsFace.ON_EDGE\n\t\t\t\t}\n\t\t\t\t// edge colinear to intersection\n\t\t\t\tconst nextInside = colinearEdges[nextEdgeIndex] || dotCurve(lineOut, nextEdge.aDir, nextEdge.aDDT) < 0\n\t\t\t\tif (!nextInside) {\n\t\t\t\t\tif (logIS(edge.b)) return PointVsFace.ON_EDGE\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (const edgeT of edge.edgeISTsWithPlane(testPlane)) {\n\t\t\t\t\tif (edgeT == edge.bT) {\n\t\t\t\t\t\tif (!testLine.containsPoint(edge.b)) continue\n\t\t\t\t\t\t// endpoint lies on intersection line\n\t\t\t\t\t\tif (edge.b.like(p)) {\n\t\t\t\t\t\t\t// TODO: refactor, dont check for different sides, just logIs everything\n\t\t\t\t\t\t\treturn PointVsFace.ON_EDGE\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst edgeInside = dotCurve(lineOut, edge.bDir, edge.bDDT) > 0\n\t\t\t\t\t\tconst nextInside = colinearEdges[nextEdgeIndex] || dotCurve(lineOut, nextEdge.aDir, nextEdge.aDDT) < 0\n\t\t\t\t\t\tif (edgeInside != nextInside) {\n\t\t\t\t\t\t\tif (logIS(edge.b)) return PointVsFace.ON_EDGE\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (edgeT != edge.aT) {\n\t\t\t\t\t\tconst p = edge.curve.at(edgeT)\n\t\t\t\t\t\tif (!testLine.containsPoint(p)) continue\n\t\t\t\t\t\t// edge crosses line, neither starts nor ends on it\n\t\t\t\t\t\tif (logIS(p)) return PointVsFace.ON_EDGE\n\t\t\t\t\t\t// TODO: tangents?\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn inside ? PointVsFace.INSIDE : PointVsFace.OUTSIDE\n\n\t}\n\n\ttoString(): string {\n\t\treturn this.toSource()\n\t}\n\n\ttoSource(rounder: (x: number) => number = x => x): string {\n\t\treturn callsce.call(undefined, 'new ' + this.constructor.name, ...this.getConstructorParameters())\n\t}\n\n\tabstract normalP(p: V3): V3\n\n\tabstract getConstructorParameters(): any[]\n\n\tabstract isTsForLine(line: L3): number[]\n\n\t/**\n\t * IMPORTANT: The tangents of the resulting curves need to be equal to the cross product of this and surface in the\n\t * point. I.e.: for every point p p on a returned curve: curve.tangentAt(curve.pointT(p)) == this.normalP(p)\n\t * X surface.normalP(p)\n\t *\n\t * Cross product is not commutative, so curve.tangentAt(curve.pointT(p)) == surface.normalP(p) X\n\t * this.normalP(p) is not valid.\n\t */\n\tabstract isCurvesWithPlane(plane: P3): Curve[]\n\n\tisCurvesWithSurface(surface: Surface): Curve[] {\n\t\treturn surface.isCurvesWithSurface(this).map(curve => curve.reversed())\n\t}\n\n\tcontainsCurve(curve: Curve): boolean {\n\t\tif (curve instanceof ImplicitCurve) {\n\t\t\tfor (let i = ceil(curve.tMin); i <= floor(curve.tMax); i++) {\n\t\t\t\tif (!this.containsPoint(curve.points[i])) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n\n\tabstract containsPoint(pWC: V3): boolean\n\n\tabstract flipped(): this\n\n\tflipped2<T extends Surface>(this: T, doFlip: boolean): T {\n\t\treturn doFlip ? this.flipped() : this\n\t}\n\n\tabstract loopContainsPoint(contour: Edge[], point: V3): PointVsFace\n\n\t/**\n\t * Returns true iff the surface occupies the same space as the argument (not necessarily same normal1)\n\t */\n\tabstract isCoplanarTo(surface: Surface): boolean\n\n\t/**\n\t * coplanar and same normals\n\t */\n\tabstract like(object: any): boolean\n\n\tabstract edgeLoopCCW(loop: Edge[]): boolean\n\n\tclipCurves(curves: Curve[]): Curve[] {\n\t\treturn curves\n\t}\n\n\tabstract equals(obj: any): boolean\n\n\thashCode(): int {\n\t\treturn this.getConstructorParameters().hashCode()\n\t}\n\n\tzDirVolume(allEdges: Edge[]): { centroid: V3, volume: number } {\n\t\treturn this.visit(ZDirVolumeVisitor, allEdges)\n\t}\n\n\tcalculateArea(allEdges: Edge[]): number {\n\t\treturn this.visit(CalculateAreaVisitor as any, allEdges)\n\t}\n}\n\nexport enum PointVsFace {INSIDE, OUTSIDE, ON_EDGE}\n","import {assert, between, V3} from 'ts3dutils'\nimport {Mesh} from 'tsgl'\n\nimport {Curve, PICurve, Surface, MathFunctionR2R} from '../index'\n\nconst {ceil, min} = Math\n\n\nexport abstract class ParametricSurface extends Surface {\n\tsMin: number\n\tsMax: number\n\ttMin: number\n\ttMax: number\n\tuStep: number\n\tvStep: number\n\n\tstatic isCurvesParametricImplicitSurface(ps: ParametricSurface,\n\t\t\t\t\t\t\t\t\t\t\t is: ImplicitSurface,\n\t\t\t\t\t\t\t\t\t\t\t sStep: number,\n\t\t\t\t\t\t\t\t\t\t\t tStep: number = sStep,\n\t\t\t\t\t\t\t\t\t\t\t curveStepSize: number): Curve[] {\n\t\tconst pf = ps.pSTFunc(), icc = is.implicitFunction()\n\t\tconst dpds = ps.dpds()\n\t\tconst dpdt = ps.dpdt()\n\t\tconst didp = is.didp.bind(is)\n\t\tconst ist = (x: number, y: number) => icc(pf(x, y))\n\t\tconst dids = (s: number, t: number) => didp(pf(s, t)).dot(dpds(s, t))\n\t\tconst didt = (s: number, t: number) => didp(pf(s, t)).dot(dpdt(s, t))\n\t\tconst mf = MathFunctionR2R.forFFxFy(ist, dids, didt)\n\t\tconst curves\n\t\t\t= Curve.breakDownIC(mf, ps, sStep, tStep, curveStepSize, dids, didt)\n\t\t\t.map(({points, tangents}, i) => PICurve.forParametricPointsTangents(ps, is, points, tangents, curveStepSize))\n\t\treturn curves\n\t}\n\n\tstatic is(obj: any): obj is ParametricSurface {\n\t\treturn obj.pSTFunc\n\t}\n\n\tpST(s: number, t: number): V3 {\n\t\treturn this.pSTFunc()(s, t)\n\t}\n\n\tpSTFunc(): (s: number, t: number) => V3 {\n\t\treturn this.pST.bind(this)\n\t}\n\n\tabstract dpds(): (s: number, t: number) => V3\n\n\tabstract dpdt(): (s: number, t: number) => V3\n\n\tstP(pWC: V3): V3 {\n\t\treturn this.stPFunc()(pWC)\n\t}\n\n\tstPFunc(): (pWC: V3) => V3 {\n\t\treturn this.stP.bind(this)\n\t}\n\n\tbounds(s: number, t: number): boolean {\n\t\treturn this.sMin <= s && s <= this.sMax && this.tMin <= t && t <= this.tMax\n\t}\n\n\t/**\n\t * Positive values are inside bounds.\n\t */\n\tboundsSigned(s: number, t: number): number {\n\t\treturn min(s - this.sMin, this.sMax - s, t - this.tMin, this.tMax - t)\n\t}\n\n\tnormalP(p: V3): V3 {\n\t\tconst pmPoint = this.stPFunc()(p)\n\t\treturn this.normalST(pmPoint.x, pmPoint.y)\n\t}\n\n\tnormalSTFunc(): (s: number, t: number) => V3 {\n\t\treturn this.normalST.bind(this)\n\t}\n\n\tnormalST(s: number, t: number): V3 {\n\t\treturn this.normalSTFunc()(s, t)\n\t}\n\n\tparametersValid(s: number, t: number): boolean {\n\t\treturn between(s, this.sMin, this.sMax) && between(t, this.tMin, this.tMax)\n\t}\n\n\tpointFoot(pWC: V3, ss?: number, st?: number): V3 {\n\t\tthrow new Error()\n\t}\n\n\ttoMesh(): Mesh {\n\t\tassert(isFinite(this.tMin) && isFinite(this.tMax) && isFinite(this.sMin) && isFinite(this.sMax))\n\t\treturn Mesh.parametric(this.pSTFunc(), this.normalSTFunc(),\n\t\t\tthis.sMin, this.sMax, this.tMin, this.tMax,\n\t\t\tceil((this.sMax - this.sMin) / this.uStep),\n\t\t\tceil((this.tMax - this.tMin) / this.vStep))\n\t}\n\n\tisCurvesWithImplicitSurface(is: ImplicitSurface, sStep: number, tStep: number, stepSize: number): Curve[] {\n\t\treturn ParametricSurface.isCurvesParametricImplicitSurface(this, is, sStep, tStep, stepSize)\n\t}\n}\n\nexport abstract class ImplicitSurface extends Surface {\n\tstatic is(obj: any): obj is ImplicitSurface {\n\t\treturn obj.implicitFunction\n\t}\n\n\tabstract implicitFunction(): (pWC: V3) => number\n\n\tabstract didp(pWC: V3): V3\n}","import {assert, assertInst, assertVectors, eq, eq0, getIntervals, isCCW, M4, pqFormula, TAU, V3} from 'ts3dutils'\n\nimport {\n\tCurve, Edge, EllipseCurve, HyperbolaCurve, ImplicitSurface, L3, P3, ParabolaCurve, ParametricSurface,\n\tSemiEllipseCurve, Surface, PlaneSurface, PointVsFace,\n} from '../index'\n\nconst {PI, cos, sin, min, max, tan, ceil, floor, abs, sqrt, pow, atan2, round, sign} = Math\n\nexport class ConicSurface extends ParametricSurface implements ImplicitSurface {\n\t/**\n\t * Unit cone. x² + y² = z², 0 <= z\n\t */\n\tstatic readonly UNIT = new ConicSurface(V3.O, V3.X, V3.Y, V3.Z)\n\treadonly matrix: M4\n\treadonly inverseMatrix: M4\n\treadonly normalMatrix: M4\n\treadonly normalDir: number // -1 | 1\n\n\t/**\n\t * returns new cone C = {apex + f1 * z * cos(d) + f2 * z * sin(d) + f3 * z | -PI <= d <= PI, 0 <= z}\n\t * @param f1\n\t * @param f2\n\t * @param dir Direction in which the cone opens. The ellipse spanned by f1, f2 is contained at (apex + f1).\n\t */\n\tconstructor(readonly center: V3,\n\t\t\t\treadonly f1: V3,\n\t\t\t\treadonly f2: V3,\n\t\t\t\treadonly dir: V3) {\n\t\tsuper()\n\t\tassertVectors(center, f1, f2, dir)\n\t\tthis.matrix = M4.forSys(f1, f2, dir, center)\n\t\tthis.inverseMatrix = this.matrix.inversed()\n\t\tthis.normalDir = sign(this.f1.cross(this.f2).dot(this.dir))\n\t\tthis.normalMatrix = this.matrix.as3x3().inversed().transposed().scale(this.normalDir)\n\t}\n\n\tget apex() {\n\t\treturn this.center\n\t}\n\n\tstatic atApexThroughEllipse(apex: V3, ellipse: SemiEllipseCurve): ConicSurface {\n\t\tassertVectors(apex)\n\t\tassertInst(SemiEllipseCurve, ellipse)\n\t\treturn new ConicSurface(apex, ellipse.f1, ellipse.f2, apex.to(ellipse.center))\n\t}\n\n\tstatic unitISLineTs(anchor: V3, dir: V3): number[] {\n\t\tconst {x: ax, y: ay, z: az} = anchor\n\t\tconst {x: dx, y: dy, z: dz} = dir\n\n\t\t// this cone: x² + y² = z²\n\t\t// line: p = anchor + t * dir1\n\t\t// split line equation into 3 component equations, insert into cone equation\n\t\t// transform to form (a t² + b t + c = 0) and solve with pqFormula\n\t\tconst a = dx * dx + dy * dy - dz * dz\n\t\tconst b = 2 * (ax * dx + ay * dy - az * dz)\n\t\tconst c = ax * ax + ay * ay - az * az\n\t\t// cone only defined for 0 <= z, so filter invalid values\n\t\treturn pqFormula(b / a, c / a).filter(t => 0 < az + t * dz)\n\t}\n\n\t// calculate intersection of plane ax + cz = d and cone x² + y² = z²\n\tstatic unitISPlane(a: number, c: number, d: number): Curve[] {\n\t\tif (eq0(c)) {\n\t\t\t// plane is \"vertical\", i.e. parallel to Y and Z axes\n\t\t\tassert(!eq0(a)) // normal would be zero, which is invalid\n\t\t\t// z² - y² = d²/a²\n\t\t\tif (eq0(d)) {\n\t\t\t\t// d = 0 => z² - y² = 0 => z² = y² => z = y\n\t\t\t\t// plane goes through origin/V3.O\n\t\t\t\treturn [new L3(V3.O, new V3(0, -sqrt(2) / 2, -sqrt(2) / 2), undefined, 0),\n\t\t\t\t\tnew L3(V3.O, new V3(0, -sqrt(2) / 2, sqrt(2) / 2), 0)]\n\t\t\t} else {\n\n\t\t\t\t// hyperbola\n\t\t\t\tconst center = new V3(d / a, 0, 0)\n\t\t\t\tconst f1 = new V3(0, 0, abs(d / a)) // abs, because we always want the hyperbola to be pointing up\n\t\t\t\tconst f2 = new V3(0, d / a, 0)\n\t\t\t\treturn [new HyperbolaCurve(center, f1, f2)]\n\t\t\t}\n\n\t\t} else {\n\t\t\t// c != 0\n\t\t\tconst aa = a * a, cc = c * c\n\t\t\tif (eq0(d)) {\n\t\t\t\t// ax + cz = d => x = d - cz / a => x² = d² - 2cdz/a + c²z²/a²\n\t\t\t\t// x² + y² = z²\n\t\t\t\t// => d² - 2cdz/a + c²z²/a² + y² = z²\n\n\t\t\t\tif (eq(aa, cc)) {\n\t\t\t\t\treturn [new L3(V3.O, new V3(c, 0, -a).unit())]\n\t\t\t\t} else if (aa < cc) {\n\t\t\t\t\tassert(false, 'intersection is single point V3.O')\n\t\t\t\t} else if (aa > cc) {\n\t\t\t\t\treturn [new L3(V3.O, new V3(c, sqrt(aa - cc), -a).unit()),\n\t\t\t\t\t\tnew L3(V3.O, new V3(c, -sqrt(aa - cc), -a).unit())]\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (eq(aa, cc)) {\n\t\t\t\t\t// parabola\n\t\t\t\t\tconst parabolaVertex = new V3(d / 2 / a, 0, d / 2 / c)\n\t\t\t\t\tconst parabolaVertexTangentPoint = new V3(d / 2 / a, d / c, d / 2 / c)\n\t\t\t\t\tconst p2 = new V3(0, 0, d / c)\n\t\t\t\t\tconst f2 = p2.minus(parabolaVertex)\n\t\t\t\t\treturn [new ParabolaCurve(parabolaVertex, parabolaVertexTangentPoint.minus(parabolaVertex), f2.z < 0\n\t\t\t\t\t\t? f2.negated()\n\t\t\t\t\t\t: f2)]\n\t\t\t\t} else if (aa < cc) {\n\t\t\t\t\t// ellipse\n\t\t\t\t\tconst center = new V3(-a * d / (cc - aa), 0, d * c / (cc - aa))\n\t\t\t\t\tif (center.z < 0) {\n\t\t\t\t\t\treturn []\n\t\t\t\t\t}\n\t\t\t\t\tconst p1 = new V3(d / (a - c), 0, -d / (a - c))\n\t\t\t\t\tconst p2 = new V3(-a * d / (cc - aa), d / sqrt(cc - aa), d * c / (cc - aa))\n\t\t\t\t\treturn [new EllipseCurve(center, center.to(p1), center.to(p2))]\n\t\t\t\t} else if (aa > cc) {\n\t\t\t\t\t// hyperbola\n\t\t\t\t\tconst center = new V3(-a * d / (cc - aa), 0, d * c / (cc - aa))\n\t\t\t\t\tconst p1 = new V3(d / (a - c), 0, -d / (a - c))\n\t\t\t\t\tconst p2 = new V3(-a * d / (cc - aa), d / sqrt(aa - cc), d * c / (cc - aa))\n\t\t\t\t\tconst f1 = center.to(p1)\n\t\t\t\t\treturn [new HyperbolaCurve(center, f1.z > 0 ? f1 : f1.negated(), center.to(p2))]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tequals(obj: any): boolean {\n\t\treturn this == obj ||\n\t\t\tObject.getPrototypeOf(this) == Object.getPrototypeOf(obj)\n\t\t\t&& this.center.equals(obj.center)\n\t\t\t&& this.f1.equals(obj.f1)\n\t\t\t&& this.f2.equals(obj.f2)\n\t\t\t&& this.dir.equals(obj.dir)\n\t}\n\n\tlike(object: any): boolean {\n\t\tif (!this.isCoplanarTo(object)) return false\n\t\t// normals need to point in the same direction (outwards or inwards) for both\n\t\treturn this.normalDir == object.normalDir\n\t}\n\n\tgetVectors() {\n\t\treturn [{anchor: this.center, dir1: this.dir},\n\t\t\t{anchor: this.center.plus(this.dir), dir1: this.f1},\n\t\t\t{anchor: this.center.plus(this.dir), dir1: this.f2}]\n\t}\n\n\tgetSeamPlane(): P3 {\n\t\treturn P3.forAnchorAndPlaneVectors(this.center, this.f1, this.dir)\n\t}\n\n\tloopContainsPoint(contour: Edge[], p: V3): PointVsFace {\n\t\tassertVectors(p)\n\t\tconst line = this.center.like(p)\n\t\t\t? new L3(p, this.matrix.transformVector(new V3(0, 1, 1)).unit())\n\t\t\t: L3.throughPoints(p, this.apex)\n\t\tconst lineOut = line.dir1.cross(this.dir)\n\n\t\treturn Surface.loopContainsPointGeneral(contour, p, line, lineOut)\n\t}\n\n\tgetConstructorParameters(): any[] {\n\t\treturn [this.center, this.f1, this.f2, this.dir]\n\t}\n\n\tisTsForLine(line: L3): number[] {\n\t\t// transforming line manually has advantage that dir1 will not be renormalized,\n\t\t// meaning that calculated values t for lineLC are directly transferable to line\n\t\tconst anchorLC = this.inverseMatrix.transformPoint(line.anchor)\n\t\tconst dirLC = this.inverseMatrix.transformVector(line.dir1)\n\t\treturn ConicSurface.unitISLineTs(anchorLC, dirLC)\n\t}\n\n\t/**\n\t * Interestingly, two cones don't need to have parallel dirs to be coplanar.\n\t */\n\tisCoplanarTo(surface: Surface): boolean {\n\t\tif (this === surface) return true\n\t\tif (!(surface instanceof ConicSurface) || !this.apex.like(surface.apex)) return false\n\t\t// at this point apexes are equal\n\t\treturn this.containsEllipse(\n\t\t\tnew SemiEllipseCurve(surface.center.plus(surface.dir), surface.f1, surface.f2))\n\t}\n\n\tcontainsEllipse(ellipse: SemiEllipseCurve): boolean {\n\t\tconst ellipseLC = ellipse.transform(this.inverseMatrix)\n\t\tif (ellipseLC.center.z < 0) {\n\t\t\treturn false\n\t\t}\n\t\tconst {f1, f2} = ellipseLC.rightAngled()\n\t\tconst p1 = ellipseLC.center.plus(f1), p2 = ellipseLC.center.plus(f2)\n\t\t// check if both endpoints are on the cone's surface\n\t\t// and that one main axis is perpendicular to the Z-axis\n\t\treturn eq(p1.x ** 2 + p1.y ** 2, p1.z ** 2)\n\t\t\t&& eq(p2.x ** 2 + p2.y ** 2, p2.z ** 2)\n\t\t\t&& (eq0(f1.z) || eq0(f2.z))\n\t}\n\n\tcontainsLine(line: L3): boolean {\n\t\tconst lineLC = line.transform(this.inverseMatrix)\n\t\tconst d = lineLC.dir1\n\t\treturn lineLC.containsPoint(V3.O) && eq(d.x * d.x + d.y * d.y, d.z * d.z)\n\t}\n\n\tcontainsParabola(curve: ParabolaCurve): boolean {\n\t\tassertInst(ParabolaCurve, curve)\n\t\tconst curveLC = curve.transform(this.inverseMatrix)\n\t\tif (curveLC.center.z < 0 || curveLC.f2.z < 0) {\n\t\t\treturn false\n\t\t}\n\t\tconst {center, f1, f2} = curveLC.rightAngled()\n\t\t// check if center is on the surface,\n\t\t// that tangent is perpendicular to the Z-axis\n\t\t// and that \"y\" axis is parallel to surface\n\t\treturn eq(center.x * center.x + center.y * center.y, center.z * center.z)\n\t\t\t&& eq0(f1.z)\n\t\t\t&& eq(f2.x * f2.x + f2.y * f2.y, f2.z * f2.z)\n\n\t}\n\n\tcontainsHyperbola(curve: HyperbolaCurve): boolean {\n\t\tassertInst(HyperbolaCurve, curve)\n\t\treturn true\n\t\tconst curveLC = curve.transform(this.inverseMatrix)\n\t\tif (curveLC.center.z < 0 || curveLC.f2.z < 0) {\n\t\t\treturn false\n\t\t}\n\t\tconst {center, f1, f2} = curveLC.rightAngled()\n\t\t// check if center is on the surface,\n\t\t// that tangent is perpendicular to the Z-axis\n\t\treturn true\n\t\treturn eq(center.x * center.x + center.y * center.y, center.z * center.z)\n\t\t\t&& eq0(f1.z)\n\t}\n\n\tcontainsCurve(curve: Curve): boolean {\n\t\tif (curve instanceof SemiEllipseCurve) {\n\t\t\treturn this.containsEllipse(curve)\n\t\t} else if (curve instanceof L3) {\n\t\t\treturn this.containsLine(curve)\n\t\t} else if (curve instanceof HyperbolaCurve) {\n\t\t\treturn this.containsHyperbola(curve)\n\t\t} else if (curve instanceof ParabolaCurve) {\n\t\t\treturn this.containsParabola(curve)\n\t\t} else {\n\t\t\treturn super.containsCurve(curve)\n\t\t}\n\t}\n\n\ttransform(m4: M4): ConicSurface {\n\t\treturn new ConicSurface(\n\t\t\tm4.transformPoint(this.center),\n\t\t\tm4.transformVector(this.f1).times(m4.isMirroring() ? -1 : 1),\n\t\t\tm4.transformVector(this.f2),\n\t\t\tm4.transformVector(this.dir))\n\t}\n\n\trightAngled() {\n\t\t// TODO\n\t}\n\n\tflipped(): ConicSurface {\n\t\treturn new ConicSurface(this.center, this.f1.negated(), this.f2, this.dir)\n\t}\n\n\tnormalSTFunc(): (s: number, t: number) => V3 {\n\t\tconst {f1, f2} = this, f3 = this.dir\n\t\treturn (d, z) => {\n\t\t\treturn f2.cross(f1).plus(f2.cross(f3.times(Math.cos(d)))).plus(f3.cross(f1.times(Math.sin(d)))).unit()\n\t\t}\n\t}\n\n\tnormalP(p: V3): V3 {\n\t\t//TODO assert(!p.like(this.center))\n\t\tconst pLC = this.inverseMatrix.transformPoint(p)\n\t\treturn this.normalSTFunc()(pLC.angleXY(), pLC.z)\n\t}\n\n\tpSTFunc(): (s: number, t: number) => V3 {\n\t\treturn (s, t) => {\n\t\t\t// center + f1 t cos s + f2 t sin s + t dir\n\t\t\treturn this.matrix.transformPoint(new V3(t * cos(s), t * sin(s), t))\n\t\t}\n\t}\n\n\tdpds(): (s: number, t: number) => V3 {\n\t\treturn (s, t) => {\n\t\t\tconst resultLC = new V3(t * -sin(s), t * cos(s), 0)\n\t\t\treturn this.matrix.transformVector(resultLC)\n\t\t}\n\t}\n\n\tdpdt(): (s: number, t: number) => V3 {\n\t\treturn (s, t) => {\n\t\t\tconst resultLC = new V3(cos(s), sin(s), 1)\n\t\t\treturn this.matrix.transformVector(resultLC)\n\t\t}\n\t}\n\n\timplicitFunction(): (pWC: V3) => number {\n\t\treturn pWC => {\n\t\t\tconst pLC = this.inverseMatrix.transformPoint(pWC)\n\t\t\tconst radiusLC = pLC.lengthXY()\n\t\t\treturn this.normalDir * (radiusLC - pLC.z)\n\t\t}\n\t}\n\n\tcontainsPoint(p: V3) {\n\t\treturn eq0(this.implicitFunction()(p))\n\t}\n\n\tboundsFunction() {\n\t\tassert(false)\n\t}\n\n\tstP(pWC: V3) {\n\t\tconst pLC = this.inverseMatrix.transformPoint(pWC)\n\t\tconst angle = pLC.angleXY()\n\t\treturn new V3(angle < -PI / 2 ? angle + TAU : angle, pLC.z, 0)\n\t}\n\n\tisCurvesWithSurface(surface: Surface): Curve[] {\n\t\tif (surface instanceof PlaneSurface) {\n\t\t\treturn this.isCurvesWithPlane(surface.plane)\n\t\t} else if (ImplicitSurface.is(surface)) {\n\t\t\treturn ParametricSurface.isCurvesParametricImplicitSurface(this, surface, 0.1, 0.1 / this.dir.length(), 0.02)\n\t\t}\n\t\treturn super.isCurvesWithSurface(surface)\n\t}\n\n\tgetCenterLine() {\n\t\treturn new L3(this.center, this.dir)\n\t}\n\n\tisCurvesWithPlane(plane: P3): Curve[] {\n\t\tassertInst(P3, plane)\n\t\tconst planeLC = plane.transform(this.inverseMatrix)\n\t\tconst planeNormal = planeLC.normal1\n\t\tconst c = planeNormal.z\n\t\t/** \"rotate\" plane normal1 when passing to {@link ConicSurface.unitISPlane} so that\n\t\t *  y-component of normal1 is 0 */\n\t\tconst a = planeNormal.lengthXY()\n\t\tconst d = planeLC.w\n\t\t// generated curves need to be rotated back before transforming to world coordinates\n\t\tconst rotationMatrix = M4.rotateZ(planeNormal.angleXY())\n\t\tconst wcMatrix = eq0(planeNormal.lengthXY())\n\t\t\t? this.matrix\n\t\t\t: this.matrix.times(rotationMatrix)\n\t\treturn ConicSurface.unitISPlane(a, c, d).flatMap<Curve>(curve => {\n\t\t\tconst curveWC = curve.transform(wcMatrix)\n\t\t\tif (curve instanceof EllipseCurve) {\n\t\t\t\tconst curveLC = curve.transform(rotationMatrix)\n\t\t\t\tconst ts = curveLC.isTsWithPlane(P3.ZX)\n\t\t\t\tconst intervals = getIntervals(ts, -PI, PI).filter(([a, b]) => curveLC.at((a + b) / 2).y > 0)\n\t\t\t\treturn intervals.flatMap(([a, b]) => SemiEllipseCurve.fromEllipse(curveWC as EllipseCurve, a, b))\n\t\t\t}\n\t\t\tconst p = curveWC.at(0.2)\n\t\t\treturn this.normalP(p).cross(plane.normal1).dot(curveWC.tangentAt(0.2)) > 0\n\t\t\t\t? curveWC : curveWC.reversed()\n\t\t})\n\t}\n\n\tedgeLoopCCW(contour: Edge[]): boolean {\n\t\tconst ptpF = this.stPFunc()\n\t\treturn isCCW(contour.flatMap(e => e.getVerticesNo0()).map(v => ptpF(v)), V3.Z)\n\t}\n}\n\nConicSurface.prototype.uStep = PI / 16\nConicSurface.prototype.vStep = 256\nConicSurface.prototype.sMin = 0\nConicSurface.prototype.sMax = PI\nConicSurface.prototype.tMin = 0\nConicSurface.prototype.tMax = 16\n","import {\n\tarrayFromFunction, assert, assertf, assertInst, assertNever, assertNumbers, assertVectors, between, eq, eq0,\n\tgaussLegendreQuadrature24, ge, glqInSteps, int, le, lt, M4, MINUS, NLA_PRECISION, pqFormula, V3,\n} from 'ts3dutils'\nimport {Mesh} from 'tsgl'\n\nimport {\n\tCurve, CylinderSurface, Edge, EllipseCurve, ImplicitSurface, L3, P3, ParametricSurface, PlaneSurface, PointVsFace,\n\tProjectedCurveSurface, Surface, dotCurve,\n} from '../index'\n\nconst {PI, cos, sin, abs, sign} = Math\n\nexport class EllipsoidSurface extends ParametricSurface implements ImplicitSurface {\n\tstatic readonly UNIT = new EllipsoidSurface(V3.O, V3.X, V3.Y, V3.Z)\n\treadonly matrix: M4\n\treadonly inverseMatrix: M4\n\treadonly normalMatrix: M4\n\treadonly pLCNormalWCMatrix: M4\n\treadonly pWCNormalWCMatrix: M4\n\treadonly normalDir: number // -1 | 1\n\n\tconstructor(readonly center: V3,\n\t\t\t\treadonly f1: V3,\n\t\t\t\treadonly f2: V3,\n\t\t\t\treadonly f3: V3) {\n\t\tsuper()\n\t\tassertVectors(center, f1, f2, f3)\n\t\tthis.matrix = M4.forSys(f1, f2, f3, center)\n\t\tthis.inverseMatrix = this.matrix.inversed()\n\t\tthis.normalDir = sign(this.f1.cross(this.f2).dot(this.f3))\n\t\tthis.pLCNormalWCMatrix = this.matrix.as3x3().inversed().transposed().scale(this.normalDir)\n\t\tthis.pWCNormalWCMatrix = this.pLCNormalWCMatrix.times(this.inverseMatrix)\n\t}\n\n\t/**\n\t * unit sphere: x² + y² + z² = 1\n\t * line: p = anchor + t * dir |^2\n\t * p² = (anchor + t * dir)^2\n\t * 1 == (anchor + t * dir)^2\n\t * 1 == anchor DOT anchor + 2 * anchor * t * dir + t² * dir DOT dir\n\t */\n\tstatic unitISTsWithLine(anchor: V3, dir: V3): number[] {\n\t\t// for 0 = a t² + b t + c\n\t\tconst a = dir.dot(dir)\n\t\tconst b = 2 * anchor.dot(dir)\n\t\tconst c = anchor.dot(anchor) - 1\n\t\treturn pqFormula(b / a, c / a)\n\t}\n\n\t/**\n\t * unit sphere: x² + y² + z² = 1\n\t * plane: normal1 DOT p = w\n\t */\n\tstatic unitISCurvesWithPlane(plane: P3): EllipseCurve[] {\n\t\tassertInst(P3, plane)\n\t\tlet distPlaneCenter = Math.abs(plane.w)\n\t\tif (lt(distPlaneCenter, 1)) {\n\t\t\t// result is a circle\n\t\t\t// radius of circle: imagine right angled triangle (origin -> center of intersection circle -> point on\n\t\t\t// intersection circle) pythagoras: 1² == distPlaneCenter² + isCircleRadius² => isCircleRadius == sqrt(1 -\n\t\t\t// distPlaneCenter²)\n\t\t\tconst isCircleRadius = Math.sqrt(1 - distPlaneCenter * distPlaneCenter)\n\t\t\tconst center = plane.anchor\n\t\t\tconst f1 = plane.normal1.getPerpendicular().toLength(isCircleRadius)\n\t\t\tconst f2 = plane.normal1.cross(f1)\n\t\t\treturn [new EllipseCurve(plane.anchor, f1, f2)]\n\t\t} else {\n\t\t\treturn []\n\t\t}\n\t}\n\n\tstatic sphere(radius: number, center?: V3): EllipsoidSurface {\n\t\tassertNumbers(radius)\n\t\tcenter && assertVectors(center)\n\t\treturn new EllipsoidSurface(center || V3.O, new V3(radius, 0, 0), new V3(0, radius, 0), new V3(0, 0, radius))\n\t}\n\n\t/**\n\t * x²/a² + y²/b² + z²/c² = 1\n\t */\n\tstatic forABC(a: number, b: number, c: number, center?: V3): EllipsoidSurface {\n\t\treturn new EllipsoidSurface(center || V3.O, new V3(a, 0, 0), new V3(0, b, 0), new V3(0, 0, c))\n\t}\n\n\tstatic calculateAreaSpheroid(a: V3, b: V3, c: V3, edges: Edge[]): number {\n\t\tassertf(() => a.isPerpendicularTo(b))\n\t\tassertf(() => b.isPerpendicularTo(c))\n\t\tassertf(() => c.isPerpendicularTo(a))\n\n\t\t// handling discontinuities:\n\t\t// option 1: check for intersections with baseline, if there are any integrate parts separetely\n\t\t// \"rotate\" the edge so that there are no overlaps\n\t\tconst matrix = M4.forSys(a, b, c), inverseMatrix = matrix.inversed()\n\t\tconst circleRadius = a.length()\n\t\tconst c1 = c.unit()\n\t\tconst totalArea = edges.map(edge => {\n\t\t\tif (edge.curve instanceof EllipseCurve) {\n\t\t\t\tconst f = (t) => {\n\t\t\t\t\tconst at = edge.curve.at(t), tangent = edge.tangentAt(t)\n\t\t\t\t\tconst localAt = inverseMatrix.transformPoint(at)\n\t\t\t\t\tconst angleXY = localAt.angleXY()\n\t\t\t\t\tconst arcLength = angleXY * circleRadius * Math.sqrt(1 + localAt.z ** 2)\n\t\t\t\t\tconst scaling = Math.sqrt(1 + c1.dot(tangent) ** 2)\n\t\t\t\t\treturn arcLength * scaling\n\t\t\t\t}\n\t\t\t\tconst val = glqInSteps(f, edge.aT, edge.bT, 1)\n\t\t\t\tconsole.log('edge', edge, val)\n\t\t\t\treturn val\n\t\t\t} else {\n\t\t\t\tassertNever()\n\t\t\t}\n\t\t}).sum()\n\n\n\t\treturn totalArea\n\t}\n\n\tlike(obj: any): boolean {\n\t\treturn this.isCoplanarTo(obj) && this.isInsideOut() == obj.isInsideOut()\n\t}\n\n\tedgeLoopCCW(loop: Edge[]): boolean {\n\t\tthrow new Error()\n\t}\n\n\trootPoints() {\n\n\t}\n\n\tgetConstructorParameters(): any[] {\n\t\treturn [this.center, this.f1, this.f2, this.f3]\n\t}\n\n\tequals(obj: any): boolean {\n\t\treturn this == obj ||\n\t\t\tObject.getPrototypeOf(obj) == this.constructor.prototype\n\t\t\t&& this.matrix.equals(obj.matrix)\n\t}\n\n\tisCurvesWithPlane(plane: P3): Curve[] {\n\t\tconst planeLC = plane.transform(this.inverseMatrix)\n\t\treturn EllipsoidSurface.unitISCurvesWithPlane(planeLC).map(c => c.transform(this.matrix))\n\t}\n\n\tisCurvesWithSurface(surface: Surface) {\n\t\tif (surface instanceof PlaneSurface) {\n\t\t\treturn this.isCurvesWithPlane(surface.plane)\n\t\t} else if (surface instanceof CylinderSurface) {\n\t\t\tif (surface.dir.isParallelTo(this.dir1)) {\n\t\t\t\tconst ellipseProjected = surface.baseCurve.transform(M4.project(this.baseEllipse.getPlane(), this.dir1))\n\t\t\t\treturn this.baseEllipse.isInfosWithEllipse(ellipseProjected).map(info => new L3(info.p, this.dir1))\n\t\t\t} else if (eq0(this.getCenterLine().distanceToLine(surface.getCenterLine()))) {\n\t\t\t\tassert(false)\n\t\t\t} else {\n\t\t\t\tassert(false)\n\t\t\t}\n\t\t} else if (surface instanceof ProjectedCurveSurface) {\n\t\t\tconst surfaceLC = surface.transform(this.inverseMatrix)\n\t\t\tconst baseCurveLC = surfaceLC.baseCurve.project(new P3(surfaceLC.dir, 0))\n\t\t\tconst ists = baseCurveLC.isTsWithSurface(EllipsoidSurface.UNIT)\n\t\t\tconst insideIntervals = iii(ists, EllipsoidSurface.UNIT, baseCurveLC)\n\t\t\tconst curves = insideIntervals.flatMap(ii => {\n\t\t\t\tconst aLine = new L3(baseCurveLC.at(ii[0]), surfaceLC.dir)\n\t\t\t\tconst a = EllipsoidSurface.UNIT.isTsForLine(aLine).map(t => aLine.at(t))\n\t\t\t\tconst bLine = new L3(baseCurveLC.at(ii[1]), surfaceLC.dir)\n\t\t\t\tconst b = EllipsoidSurface.UNIT.isTsForLine(bLine).map(t => bLine.at(t))\n\t\t\t\treturn [0, 1].map(i => {\n\t\t\t\t\tlet aP = a[i] || a[0], bP = b[i] || b[0]\n\t\t\t\t\t0 !== i && ([aP, bP] = [bP, aP])\n\t\t\t\t\tassert(EllipsoidSurface.UNIT.containsPoint(aP))\n\t\t\t\t\tassert(EllipsoidSurface.UNIT.containsPoint(bP))\n\t\t\t\t\treturn PICurve.forStartEnd(surface, this.asEllipsoidSurface(), aP, bP)\n\t\t\t\t})\n\t\t\t})\n\t\t\tconst f = (t) => baseCurveLC.at(t).length() - 1\n\t\t\tconst fRoots = undefined\n\t\t\treturn curves\n\t\t}\n\t}\n\n\tisTsForLine(line) {\n\t\tassertInst(L3, line)\n\t\t// transforming line manually has advantage that dir1 will not be renormalized,\n\t\t// meaning that calculated values t for localLine are directly transferable to line\n\t\tconst anchorLC = this.inverseMatrix.transformPoint(line.anchor)\n\t\tconst dirLC = this.inverseMatrix.transformVector(line.dir1)\n\t\treturn EllipsoidSurface.unitISTsWithLine(anchorLC, dirLC)\n\t}\n\n\tisCoplanarTo(surface) {\n\t\tif (this === surface) return true\n\t\tif (surface.constructor !== EllipsoidSurface) return false\n\t\tif (!this.center.like(surface.center)) return false\n\t\tif (this.isSphere()) return surface.isSphere() && eq(this.f1.length(), this.f2.length())\n\n\t\tconst localOtherMatrix = this.inverseMatrix.times(surface.matrix)\n\t\t// Ellipsoid with matrix localOtherMatrix is unit sphere iff localOtherMatrix is orthogonal\n\t\treturn localOtherMatrix.is3x3() && localOtherMatrix.isOrthogonal()\n\t}\n\n\tcontainsEllipse(ellipse: EllipseCurve): boolean {\n\t\tconst localEllipse = ellipse.transform(this.inverseMatrix)\n\t\tconst distLocalEllipseCenter = localEllipse.center.length()\n\t\tconst correctRadius = Math.sqrt(1 - distLocalEllipseCenter * distLocalEllipseCenter)\n\t\treturn lt(distLocalEllipseCenter, 1) && localEllipse.isCircular() && localEllipse.f1.hasLength(correctRadius)\n\t}\n\n\tcontainsCurve(curve: Curve): boolean {\n\t\tif (curve instanceof EllipseCurve) {\n\t\t\treturn this.containsEllipse(curve)\n\t\t} else {\n\t\t\treturn super.containsCurve(curve)\n\t\t}\n\t}\n\n\ttransform(m4: M4) {\n\t\treturn new EllipsoidSurface(\n\t\t\tm4.transformPoint(this.center),\n\t\t\tm4.transformVector(this.f1),\n\t\t\tm4.transformVector(this.f2),\n\t\t\tm4.transformVector(this.f3))\n\t}\n\n\tisInsideOut(): boolean {\n\t\treturn this.f1.cross(this.f2).dot(this.f3) < 0\n\t}\n\n\tflipped(): EllipsoidSurface {\n\t\treturn new EllipsoidSurface(\n\t\t\tthis.center,\n\t\t\tthis.f1,\n\t\t\tthis.f2,\n\t\t\tthis.f3.negated())\n\t}\n\n\ttoMesh(subdivisions: int = 3): Mesh {\n\t\treturn Mesh.sphere(subdivisions).transform(this.matrix)\n\t\t// let mesh = new Mesh({triangles: true, lines: false, normals: true})\n\t\t// let pf = this.pSTFunc()\n\t\t// let pn = this.normalSTFunc()\n\t\t// let aCount = 32, bCount = 16, vTotal = aCount * bCount\n\t\t// for (let i = 0, a = -PI; i < aCount; i++, a += 2 * PI / aCount) {\n\t\t// \tfor (let j = 0, b = -Math.PI / 2; j < bCount; j++, b += Math.PI / (bCount - 1)) {\n\t\t// \t\tmesh.vertices.push(pf(a, b))\n\t\t// \t\tmesh.normals.push(pn(a, b))\n\t\t// \t\tj != (bCount - 1) && pushQuad(mesh.triangles, true,\n\t\t// \t\t\ti * bCount + j, i * bCount + j + 1,\n\t\t// \t\t\t((i + 1) * bCount + j) % vTotal, ((i + 1) * bCount + j + 1) % vTotal)\n\t\t// \t}\n\t\t// }\n\t\t// mesh.compile()\n\t\t// return mesh\n\t}\n\n\tnormalSTFunc() {\n\t\t// ugh\n\t\t// paramtric ellipsoid point q(a, b)\n\t\t// normal1 == (dq(a, b) / da) X (dq(a, b) / db) (Cross product of partial derivatives\n\t\t// normal1 == cos b * (f2 X f3 * cos b * cos a + f3 X f1 * cos b * sin a + f1 X f2 * sin b)\n\t\treturn (a, b) => {\n\t\t\tlet {f1, f2, f3} = this\n\t\t\tlet normal = f2.cross(f3).times(Math.cos(b) * Math.cos(a))\n\t\t\t\t.plus(f3.cross(f1).times(Math.cos(b) * Math.sin(a)))\n\t\t\t\t.plus(f1.cross(f2).times(Math.sin(b)))\n\t\t\t\t//.times(Math.cos(b))\n\t\t\t\t.unit()\n\t\t\treturn normal\n\t\t}\n\t}\n\n\tnormalP(p) {\n\t\treturn this.normalMatrix.transformVector(this.inverseMatrix.transformPoint(p)).unit()\n\t}\n\n\tnormalST(s, t) {\n\t\treturn this.normalMatrix.transformVector(V3.sphere(s, t))\n\t}\n\n\tpST(s: number, t: number): V3 {\n\t\treturn this.matrix.transformPoint(V3.sphere(s, t))\n\t}\n\n\t//   d/dp (this.implicitFunction(p)) =\n\t// = d/dp (this.inverseMatrix.transformPoint(p).length() - 1)\n\t// = d/dp (this.inverseMatrix.transformPoint(p) * this.inverseMatrix.transformPoint(pWC).unit()\n\n\tdpds(): (s: number, t: number) => V3 {\n\t\treturn (s: number, t: number) => this.matrix.transformVector(new V3(\n\t\t\tsin(s) * -cos(t),\n\t\t\tcos(s) * cos(t),\n\t\t\t0))\n\t}\n\n\tdpdt(): (s: number, t: number) => V3 {\n\t\treturn (s: number, t: number) => this.matrix.transformVector(new V3(\n\t\t\tsin(t) * -cos(s),\n\t\t\t-sin(s) * sin(t),\n\t\t\tcos(t)))\n\t}\n\n\tstPFunc() {\n\t\treturn (pWC: V3, hint?) => {\n\t\t\tconst pLC = this.inverseMatrix.transformPoint(pWC)\n\t\t\tlet alpha = pLC.angleXY()\n\t\t\tif (abs(alpha) > Math.PI - NLA_PRECISION) {\n\t\t\t\tassert(hint == -PI || hint == PI)\n\t\t\t\talpha = hint\n\t\t\t}\n\t\t\tlet beta = Math.asin(pLC.z)\n\t\t\treturn new V3(alpha, beta, 0)\n\t\t}\n\t}\n\n\tisSphere(): boolean {\n\t\treturn eq(this.f1.length(), this.f2.length())\n\t\t\t&& eq(this.f2.length(), this.f3.length())\n\t\t\t&& eq(this.f3.length(), this.f1.length())\n\t\t\t&& this.f1.isPerpendicularTo(this.f2)\n\t\t\t&& this.f2.isPerpendicularTo(this.f3)\n\t\t\t&& this.f3.isPerpendicularTo(this.f1)\n\t}\n\n\tisVerticalSpheroid(): boolean {\n\t\treturn eq(this.f1.length(), this.f2.length())\n\t\t\t&& this.f1.isPerpendicularTo(this.f2)\n\t\t\t&& this.f2.isPerpendicularTo(this.f3)\n\t\t\t&& this.f3.isPerpendicularTo(this.f1)\n\t}\n\n\timplicitFunction() {\n\t\treturn (pWC: V3) => {\n\t\t\tconst pLC = this.inverseMatrix.transformPoint(pWC)\n\t\t\treturn pLC.length() - 1\n\t\t}\n\t}\n\n\t// = this.inverseMatrix.transformPoint(this.inverseMatrix.transformPoint(pWC).unit())\n\tdidp(pWC: V3) {\n\t\tconst pLC = this.inverseMatrix.transformPoint(pWC)\n\t\treturn this.inverseMatrix.transformVector(pLC.unit())\n\t}\n\n\tmainAxes(): EllipsoidSurface {\n\t\t// q(a, b) = f1 cos a cos b + f2 sin a cos b + f3 sin b\n\t\t// q(s, t, u) = s * f1 + t * f2 + u * f3 with s² + t² + u² = 1\n\t\t// (del q(a, b) / del a) = f1 (-sin a) cos b  + f2 cos a cos b\n\t\t// (del q(a, b) / del b) = f1 cos a (-sin b) + f2 sin a (-sin b) + f2 cos b\n\t\t// del q(s, t, u) / del a = -t f1 + s f2\n\t\t// (del q(a, b) / del a) DOT q(a, b) == 0\n\t\t// (f1 (-sin a) cos b  + f2 cos a cos b) DOT (f1 cos a cos b + f2 sin a cos b + f2 sin b) == 0\n\t\t// (del q(a, b) / del b) DOT q(a, b) == 0\n\t\t// (f1 cos a (-sin b) + f2 sin a (-sin b) + f2 cos b) DOT (f1 cos a cos b + f2 sin a cos b + f2 sin b) == 0\n\n\t\t// Solve[\n\t\t// (f1 (-sin a) cos b  + f2 cos a cos b) * (f1 cos a cos b + f2 sin a cos b + f2 sin b) = 0,\n\t\t// (f1 cos a (-sin b) + f2 sin a (-sin b) + f2 cos b) * (f1 cos a cos b + f2 sin a cos b + f2 sin b) = 0}, a, b]\n\t\tconst {f1, f2, f3} = this\n\n\t\tif (eq0(f1.dot(f2)) && eq0(f2.dot(f3)) && eq0(f3.dot(f1))) {\n\t\t\treturn this\n\t\t}\n\n\t\t//const f = ([a, b], x?) => {\n\t\t//    const sinA = Math.sin(a), cosA = Math.cos(a), sinB = Math.sin(b), cosB = Math.cos(b)\n\t\t//    const centerToP = V3.add(f1.times(cosA * cosB), f2.times(sinA * cosB), f3.times(sinB))\n\t\t//    const centerToPdelA = f1.times(-sinA * cosB).plus(f2.times(cosA * cosB))\n\t\t//    const centerToPdelB = V3.add(f1.times(cosA * -sinB), f2.times(sinA * -sinB), f3.times(cosB))\n\t\t//    x && console.log(centerToP.sce, centerToPdelA.sce, centerToPdelB.sce)\n\t\t//    return [centerToP.dot(centerToPdelA), centerToP.dot(centerToPdelB)]\n\t\t//}\n\t\t//const mainF1Params = newtonIterate(f, [0, 0], 8), mainF1 = this.pSTFunc()(mainF1Params[0], mainF1Params[1])\n\t\t//console.log(f(mainF1Params, 1).sce)\n\t\t//const mainF2Params = newtonIterate(f, this.stPFunc()(f2.rejectedFrom(mainF1)).toArray(2), 8),\n\t\t//   mainF2 = this.pSTFunc()(mainF2Params[0], mainF2Params[1])\n\t\t//console.log(this.normalSTFunc()(mainF2Params[0], mainF2Params[1]).sce)\n\t\t//assert(mainF1.isPerpendicularTo(mainF2), mainF1, mainF2, mainF1.dot(mainF2), mainF1Params)\n\t\t//const mainF3Params = this.stPFunc()(mainF1.cross(mainF2)), mainF3 = this.pSTFunc()(mainF3Params[0],\n\t\t// mainF3Params[1]) return new EllipsoidSurface(this.center, mainF1, mainF2, mainF3)\n\n\t\tconst {U, SIGMA} = this.matrix.svd3()\n\t\tassert(SIGMA.isDiagonal())\n\t\tassert(U.isOrthogonal())\n\t\tconst U_SIGMA = U.times(SIGMA)\n\t\t// column vectors of U_SIGMA\n\t\tconst [mainF1, mainF2, mainF3] = arrayFromFunction(3, i => new V3(U_SIGMA.m[i], U_SIGMA.m[i + 4], U_SIGMA.m[i + 8]))\n\t\treturn new EllipsoidSurface(this.center, mainF1, mainF2, mainF3)\n\t}\n\n\tcontainsPoint(p: V3): boolean {\n\t\treturn eq0(this.implicitFunction()(p))\n\t}\n\n\tboundsFunction() {\n\t\treturn (a, b) => between(b, -PI, PI)\n\t}\n\n\tvolume(): number {\n\t\treturn 4 / 3 * Math.PI * this.f1.dot(this.f2.cross(this.f3))\n\t}\n\n\t// TODO: also a commented out test\n\t//static splitOnPlaneLoop(loop: Edge[], ccw: boolean): [Edge[], Edge[]] {\n\t//const seamPlane = P3.ZX, seamSurface = new PlaneSurface(seamPlane)\n\t//const frontParts = [], backParts = [], iss = []\n\t//const colinearEdges = loop.map((edge) => seamSurface.containsCurve(edge.curve))\n\t//// a colinear edge is in front when\n\t//// ccw is true\n\t//// the edge curve is CCW on the seamPlane\n\t//// the edge is the same dir as the curve (bT > aT)\n\t//const colinearEdgesSide = loop.map((edge, i) => colinearEdges[i] &&\n\t//\t\t(ccw ? 1 : -1) * seamPlane.normal1.dot(edge.curve.normal1) * (edge.bT - edge.aT))\n\t//\n\t//for (let edgeIndex = 0; edgeIndex < loop.length; edgeIndex++) {\n\t//\tconst edge = loop[edgeIndex]\n\t//\tconst nextEdgeIndex = (edgeIndex + 1) % loop.length, nextEdge = loop[nextEdgeIndex]\n\t//\t//console.log(edge.toSource()) {p:V(2, -2.102, 0),\n\t//\tif (colinearEdges[edgeIndex]) {\n\t//\t\tconst nextSide = colinearEdges[nextEdgeIndex] ? colinearEdgesSide[nextEdgeIndex]\n\t//\t\t\t: dotCurve2(nextEdge.curve, nextEdge.aT, seamPlane.normal1, nextEdge.bT - nextEdge.aT)\n\t//\t\tif (nextSide * colinearEdgesSide[edgeIndex] < 0) {\n\t//\t\t\tiss.push({p: edge.b, t: 0, out: nextSide > 0})\n\t//\t\t}\n\t//\t\t(colinearEdgesSide[edgeIndex] > 0 ? frontParts : backParts).push(edge)\n\t//\t} else {\n\t//\t\tconst f = sign(edge.bT - edge.aT)\n\t//\t\tconst ists = edge.edgeISTsWithPlane(seamPlane).sort((a, b) => f * (a - b))\n\t//\t\tlet prevT = edge.aT,\n\t//\t\t\tprevP = edge.a,\n\t//\t\t\tprevDir = edge.aDir,\n\t//\t\t\tprevSide = snap0(seamPlane.distanceToPointSigned(edge.a)) || dotCurve2(edge.curve, edge.aT, V3.Y,\n\t// f) for (let i = 0; i < ists.length; i++) { const t = ists[i] if (edge.aT == t || edge.bT == t) { edge.bT ==\n\t// t && iss.push({p: edge.b, t: 0, out: true}) continue } const nextSide = dotCurve2(edge.curve, t, V3.Y, 1) if\n\t// (prevSide * nextSide < 0) { // switches sides, so: const newP = edge.curve.at(t) const newDir =\n\t// edge.tangentAt(t) const newEdge = Edge.create(edge.curve, prevP, newP, prevT, t, undefined, prevDir, newDir)\n\t// ;(prevSide > 0 ? frontParts : backParts).push(newEdge) iss.push({p: newP, t: 0, out: nextSide > 0}) prevP =\n\t// newP prevDir = newDir prevT = t prevSide = nextSide } } const lastEdge = Edge.create(edge.curve, prevP,\n\t// edge.b, prevT, edge.bT, undefined, prevDir, edge.bDir) ;(prevSide > 0 ? frontParts :\n\t// backParts).push(lastEdge) } } iss.forEach(is => is.t = V3.X.negated().angleRelativeNormal(is.p, V3.Y))\n\t// iss.sort((a, b) => a.t - b.t) let i = ccw == iss[0].out ? 1 : 0 const curve = new EllipseCurve(V3.O,\n\t// V3.X.negated(), V3.Z) //if (1 == i) {\n\t//    \t//frontParts.push(\n\t//    \t//\tEdge.create(curve, V3.Y.negated(), iss[0].p, -PI, iss[0].t, undefined, V3.Z.negated(),\n\t// curve.tangentAt(iss[0].t)),\n\t////        Edge.create(curve, iss.last.p, V3.Y.negated(), iss.last.t, PI, undefined,\n\t// curve.tangentAt(iss.last.t), V3.Z.negated())) //} for (let i = ccw == iss[0].out ? 1 : 0; i < iss.length; i\n\t// += 2) {\n\t//    \tlet is0 = iss[i], is1 = iss[(i + 1) % iss.length]\n\t//\tif (lt(is0.t, -PI) && lt(-PI, is1.t)) {\n\t//    \t\tiss.splice(i + 1, 0, is1 = {p: V3.Y.negated(), t: -PI, out: true}, {p: V3.Y.negated(), t: -PI, out:\n\t// true})\n\t//\t} else if (lt(is0.t, PI) && lt(PI, is1.t)) {\n\t//\t\tiss.splice(i + 1, 0, is1 = {p: V3.Y, t: -PI, out: true}, {p: V3.Y, t: PI, out: true})\n\t//\t}\n\t//\tconst edge = Edge.create(curve, is0.p, is1.p, is0.t, is1.t, undefined,\n\t//\t\tcurve.tangentAt(is0.t).times(sign(is1.t - is0.t)),\n\t//\t\tcurve.tangentAt(is1.t).times(sign(is1.t - is0.t)))\n\t//\tfrontParts.push(edge)\n\t//\tbackParts.push(edge.flipped())\n\t//}\n\t//return [frontParts, backParts]\n\t//}\n\n\tloopContainsPoint(loop: Edge[], p: V3): PointVsFace {\n\t\tassertVectors(p)\n\t\tconst testLine = new EllipseCurve(\n\t\t\tthis.center,\n\t\t\tthis.matrix.transformVector(this.inverseMatrix.transformPoint(p).withElement('z', 0).unit()),\n\t\t\tthis.f3)\n\t\tconst pT = testLine.pointT(p)\n\n\n\t\tconst lineOut = testLine.normal\n\t\tconst testPlane = P3.normalOnAnchor(testLine.normal, p)\n\t\tconst colinearEdges = loop.map((edge) => edge.curve.isColinearTo(testLine))\n\t\tlet inside = false\n\n\t\tfunction logIS(isP) {\n\t\t\tconst isT = testLine.pointT(isP)\n\t\t\tif (eq(pT, isT)) {\n\t\t\t\treturn true\n\t\t\t} else if (pT < isT && le(isT, PI)) {\n\t\t\t\tinside = !inside\n\t\t\t}\n\t\t}\n\n\t\tfor (let edgeIndex = 0; edgeIndex < loop.length; edgeIndex++) {\n\t\t\tconst edge = loop[edgeIndex]\n\t\t\tconst nextEdgeIndex = (edgeIndex + 1) % loop.length, nextEdge = loop[nextEdgeIndex]\n\t\t\t//console.log(edge.toSource()) {p:V(2, -2.102, 0),\n\t\t\tif (colinearEdges[edgeIndex]) {\n\t\t\t\tconst lineAT = testLine.pointT(edge.a), lineBT = testLine.pointT(edge.b)\n\t\t\t\tif (le(Math.min(lineAT, lineBT), pT) && ge(pT, Math.max(lineAT, lineBT))) {\n\t\t\t\t\treturn PointVsFace.ON_EDGE\n\t\t\t\t}\n\t\t\t\t// edge colinear to intersection\n\t\t\t\tconst nextInside = colinearEdges[nextEdgeIndex] || dotCurve(lineOut, nextEdge.aDir, nextEdge.aDDT) < 0\n\t\t\t\tif (nextInside) {\n\t\t\t\t\tif (logIS(edge.b)) return PointVsFace.ON_EDGE\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (const edgeT of edge.edgeISTsWithPlane(testPlane)) {\n\t\t\t\t\tif (edgeT == edge.bT) {\n\t\t\t\t\t\tif (!testLine.containsPoint(edge.b)) continue\n\t\t\t\t\t\t// endpoint lies on intersection testLine\n\t\t\t\t\t\tconst edgeInside = dotCurve(lineOut, edge.bDir, edge.bDDT) < 0\n\t\t\t\t\t\tconst nextInside = colinearEdges[nextEdgeIndex] || dotCurve(lineOut, nextEdge.aDir, nextEdge.aDDT) < 0\n\t\t\t\t\t\tif (edgeInside != nextInside) {\n\t\t\t\t\t\t\tif (logIS(edge.b)) return PointVsFace.ON_EDGE\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (edgeT != edge.aT) {\n\t\t\t\t\t\tconst p = edge.curve.at(edgeT)\n\t\t\t\t\t\tif (!testLine.containsPoint(p)) continue\n\t\t\t\t\t\t// edge crosses testLine, neither starts nor ends on it\n\t\t\t\t\t\tif (logIS(p)) return PointVsFace.ON_EDGE\n\t\t\t\t\t\t// TODO: tangents?\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn inside ? PointVsFace.INSIDE : PointVsFace.OUTSIDE\n\n\t}\n\n\tsurfaceAreaApprox(): number {\n\t\t// See https://en.wikipedia.org/wiki/Ellipsoid#Surface_area\n\t\tconst mainAxes = this.mainAxes(),\n\t\t\ta = mainAxes.f1.length(),\n\t\t\tb = mainAxes.f2.length(),\n\t\t\tc = mainAxes.f3.length()\n\t\tconst p = 1.6075\n\t\treturn 4 * PI * Math.pow((Math.pow(a * b, p) + Math.pow(b * c, p) + Math.pow(c * a, p)) / 3, 1 / p)\n\t}\n\n\tsurfaceArea(): number {\n\t\t// See https://en.wikipedia.org/wiki/Ellipsoid#Surface_area\n\t\tconst mainAxes = this.mainAxes(),\n\t\t\tf1l = mainAxes.f1.length(),\n\t\t\tf2l = mainAxes.f2.length(),\n\t\t\tf3l = mainAxes.f3.length(),\n\t\t\t[c, b, a] = [f1l, f2l, f3l].sort(MINUS)\n\n\t\t// https://en.wikipedia.org/w/index.php?title=Spheroid&oldid=761246800#Area\n\t\tfunction spheroidArea(a, c) {\n\t\t\tif (c < a) {\n\t\t\t\tconst eccentricity2 = 1 - c ** 2 / a ** 2\n\t\t\t\tconst eccentricity = Math.sqrt(eccentricity2)\n\t\t\t\treturn 2 * PI * a ** 2 * (1 + (1 - eccentricity2) / Math.sqrt(eccentricity) * Math.atanh(eccentricity))\n\t\t\t} else {\n\t\t\t\tconst eccentricity = Math.sqrt(1 - a ** 2 / c ** 2)\n\t\t\t\treturn 2 * PI * a ** 2 * (1 + c / a / eccentricity * Math.asin(eccentricity))\n\t\t\t}\n\t\t}\n\n\t\tif (eq(a, b)) {\n\t\t\treturn spheroidArea(a, c)\n\t\t} else if (eq(b, c)) {\n\t\t\treturn spheroidArea(b, a)\n\t\t} else if (eq(c, a)) {\n\t\t\treturn spheroidArea(c, b)\n\t\t}\n\n\t\tconst phi = Math.acos(c / a)\n\t\tconst k2 = a ** 2 * (b ** 2 - c ** 2) / (b ** 2 * (a ** 2 - c ** 2)), k = Math.sqrt(k2)\n\t\tconst incompleteEllipticInt1 = gaussLegendreQuadrature24(phi => Math.pow(1 - k2 * Math.sin(phi) ** 2, -0.5), 0, phi)\n\t\tconst incompleteEllipticInt2 = gaussLegendreQuadrature24(phi => Math.pow(1 - k2 * Math.sin(phi) ** 2, 0.5), 0, phi)\n\t\treturn 2 * PI * c ** 2 + 2 * PI * a * b / Math.sin(phi) * (incompleteEllipticInt2 * Math.sin(phi) ** 2 + incompleteEllipticInt1 * Math.cos(phi) ** 2)\n\t}\n\n\tgetSeamPlane(): P3 {\n\t\treturn P3.forAnchorAndPlaneVectors(this.center, this.f1, this.f3)\n\t}\n}\n\nEllipsoidSurface.prototype.uStep = PI / 32\nEllipsoidSurface.prototype.vStep = PI / 32\n","import {\n\tassert, assertInst, assertNever, assertNumbers, assertVectors, hasConstructor, int, isCCW, M4, V3,\n} from 'ts3dutils'\n\nimport {\n\tCurve, Edge, L3, P3, ParametricSurface, PICurve, PlaneSurface, PointVsFace, SemiEllipsoidSurface, Surface,\n} from '../index'\n\nconst {sign} = Math\n\n/**\n * Surface normal1 is (t, z) => this.baseCurve.tangentAt(t) X this.dir\n * Choose dir appropriately to select surface orientation.\n */\nexport class ProjectedCurveSurface extends ParametricSurface {\n\t'constructor': typeof ProjectedCurveSurface &\n\t\t{\n\t\t\tnew <T extends ProjectedCurveSurface>(baseCurve: Curve, dir: V3,\n\t\t\t\t\t\t\t\t\t\t\t\t  sMin: number, sMax: number, tMin: number, tMax: number): T\n\t\t}\n\n\tconstructor(readonly baseCurve: Curve,\n\t\t\t\treadonly dir: V3,\n\t\t\t\treadonly sMin: number = baseCurve.tMin,\n\t\t\t\treadonly sMax: number = baseCurve.tMax,\n\t\t\t\treadonly tMin: number = -100,\n\t\t\t\treadonly tMax: number = 100) {\n\t\tsuper()\n\t\tassertInst(Curve, baseCurve)\n\t\tassertInst(V3, dir)\n\t\tassertNumbers(sMin, sMax, tMin, tMax)\n\t\tassert(sMin < sMax)\n\t\tassert(tMin < tMax)\n\t}\n\n\tgetConstructorParameters() {\n\t\treturn [this.baseCurve, this.dir, this.sMin, this.sMax, this.tMin, this.tMax]\n\t}\n\n\tequals(obj: any): boolean {\n\t\treturn this == obj ||\n\t\t\tObject.getPrototypeOf(this) == Object.getPrototypeOf(obj)\n\t\t\t&& this.dir.equals(obj.dir)\n\t\t\t&& this.baseCurve.equals(obj.baseCurve)\n\t}\n\n\thashCode(): int {\n\t\treturn [this.dir, this.baseCurve].hashCode()\n\t}\n\n\tcontainsLine(line: L3): boolean {\n\t\treturn this.dir.isParallelTo(line.dir1) && this.containsPoint(line.anchor)\n\t}\n\n\tdpds(): (s: number, t: number) => V3 {\n\t\treturn (s, t) => this.baseCurve.tangentAt(s)\n\t}\n\n\tdpdt(): (s: number, t: number) => V3 {\n\t\treturn (s, t) => this.dir\n\t}\n\n\tnormalST(s: number, t: number): V3 {\n\t\treturn this.baseCurve.tangentAt(s).cross(this.dir).unit()\n\t}\n\n\tpST(s: number, t: number): V3 {\n\t\treturn this.baseCurve.at(s).plus(this.dir.times(t))\n\t}\n\n\tpointFoot(pWC: V3, ss: number, st: number): V3 {\n\t\tconst basePlane = new P3(this.dir, 0)\n\t\tconst projCurve = this.baseCurve.project(basePlane)\n\t\tconst projPoint = basePlane.projectedPoint(pWC)\n\t\tconst t = projCurve.closestTToPoint(projPoint, ss)\n\t\tconst z = pWC.minus(this.baseCurve.at(t)).dot(this.dir)\n\t\treturn new V3(t, z, 0)\n\t}\n\n\tstPFunc(): (pWC: V3) => V3 {\n\t\tconst projPlane = new P3(this.dir.unit(), 0)\n\t\tconst projBaseCurve = this.baseCurve.project(projPlane)\n\t\treturn (pWC) => {\n\t\t\tconst projPoint = projPlane.projectedPoint(pWC)\n\t\t\tconst t = projBaseCurve.pointT(projPoint)\n\t\t\tconst z = L3.pointT(this.baseCurve.at(t), this.dir, pWC)\n\t\t\treturn new V3(t, z, 0)\n\t\t}\n\t}\n\n\tisCurvesWithPlane(plane: P3): Curve[] {\n\t\tassertInst(P3, plane)\n\t\tif (this.dir.isPerpendicularTo(plane.normal1)) {\n\n\t\t\tconst ts = this.baseCurve.isTsWithPlane(plane)\n\t\t\treturn ts.map(t => {\n\t\t\t\tconst l3dir = 0 < this.baseCurve.tangentAt(t).dot(plane.normal1)\n\t\t\t\t\t? this.dir\n\t\t\t\t\t: this.dir.negated()\n\t\t\t\treturn new L3(this.baseCurve.at(t), l3dir.unit())\n\t\t\t})\n\t\t} else {\n\t\t\tlet projCurve = this.baseCurve.transform(M4.project(plane, this.dir))\n\t\t\tif (this.dir.dot(plane.normal1) > 0) {\n\t\t\t\t// we need to flip the ellipse so the tangent is correct\n\t\t\t\tprojCurve = projCurve.reversed()\n\t\t\t}\n\t\t\treturn [projCurve]\n\t\t}\n\t}\n\n\tisCurvesWithSurface(surface: Surface): Curve[] {\n\t\tif (surface instanceof PlaneSurface) {\n\t\t\treturn this.isCurvesWithPlane(surface.plane)\n\t\t}\n\t\tif (surface instanceof ProjectedCurveSurface) {\n\t\t\tconst dir1 = surface.dir\n\t\t\tif (this.dir.isParallelTo(dir1)) {\n\t\t\t\tconst otherCurve = surface.baseCurve\n\t\t\t\tconst infos = this.baseCurve.isInfosWithCurve(otherCurve)\n\t\t\t\treturn infos.map(info => {\n\t\t\t\t\tconst correctDir = this.normalP(info.p).cross(surface.normalP(info.p))\n\t\t\t\t\treturn new L3(info.p, dir1.times(sign(correctDir.dot(dir1))))\n\t\t\t\t})\n\t\t\t}\n\t\t\tif (surface instanceof ProjectedCurveSurface) {\n\t\t\t\tconst line = new L3(this.baseCurve.at(0.5), this.dir)\n\t\t\t\tconst startPoint = line.at(surface.isTsForLine(line)[0])\n\t\t\t\tconsole.log(startPoint)\n\t\t\t\treturn [new PPCurve(this, surface, startPoint)]\n\t\t\t\t// const testVector = this.dir.cross(surface.dir).unit()\n\t\t\t\t// // look for points on surface.baseCurve where tangent DOT testVector == 0\n\t\t\t\t// const abcd1 = surface.baseCurve.tangentCoefficients().map(c => c.dot(testVector))\n\t\t\t\t// const ts1 = solveCubicReal2.apply(undefined, abcd1).concat(surface.sMin, surface.sMax)\n\t\t\t\t// const abcd2 = this.baseCurve.tangentCoefficients().map(c => c.dot(testVector))\n\t\t\t\t// const ts2 = solveCubicReal2.apply(undefined, abcd2)\n\t\t\t\t// const tt1 = ts1.map(t => surface.baseCurve.at(t).dot(testVector))\n\t\t\t\t// const tt2 = ts1.map(t => surface.baseCurve.at(t).dot(testVector))\n\t\t\t\t// console.log(ts1, ts2, tt1, tt2)\n\t\t\t\t// ts1.forEach(t => drPs.push(surface.baseCurve.at(t)))\n\t\t\t\t// ts2.forEach(t => drPs.push(this.baseCurve.at(t)))\n\t\t\t\t// return\n\t\t\t}\n\t\t}\n\t\tif (surface instanceof SemiEllipsoidSurface) {\n\t\t\treturn surface.isCurvesWithSurface(this)\n\t\t}\n\t\tassertNever()\n\t}\n\n\tcontainsPoint(pWC: V3): boolean {\n\t\tconst uv = this.stPFunc()(pWC)\n\t\treturn this.pSTFunc()(uv.x, uv.y).like(pWC)\n\t}\n\n\tcontainsCurve(curve: Curve): boolean {\n\t\tif (curve instanceof L3) {\n\t\t\treturn this.dir.isParallelTo(curve.dir1) && this.containsPoint(curve.anchor)\n\t\t}\n\t\tif (curve instanceof PICurve) {\n\t\t\treturn super.containsCurve(curve)\n\t\t}\n\t\t// project baseCurve and test curve onto a common plane and check if the curves are alike\n\t\tconst projPlane = new P3(this.dir.unit(), 0)\n\t\tconst projBaseCurve = this.baseCurve.project(projPlane)\n\t\tconst projCurve = curve.project(projPlane)\n\n\t\treturn projBaseCurve.isColinearTo(projCurve)\n\t}\n\n\tisCoplanarTo(surface: Surface): boolean {\n\t\treturn this == surface ||\n\t\t\thasConstructor(surface, ProjectedCurveSurface)\n\t\t\t&& this.dir.isParallelTo(surface.dir)\n\t\t\t&& this.containsCurve(surface.baseCurve)\n\t}\n\n\tlike(object: any): boolean {\n\t\tif (!this.isCoplanarTo(object)) return false\n\t\t// normals need to point in the same direction (outwards or inwards) for both\n\t\tconst p00 = this.pSTFunc()(0, 0)\n\t\tconst thisNormal = this.normalSTFunc()(0, 0)\n\t\tconst otherNormal = object.normalP(p00)\n\t\treturn 0 < thisNormal.dot(otherNormal)\n\t}\n\n\tloopContainsPoint(loop: Edge[], p: V3): PointVsFace {\n\t\tassertVectors(p)\n\t\tassert(isFinite(p.x), p.y, p.z)\n\t\tconst line = new L3(p, this.dir.unit())\n\t\tconst ptpf = this.stPFunc()\n\t\tconst pp = ptpf(p)\n\t\tif (isNaN(pp.x)) {\n\t\t\tconsole.log(this.sce, p.sce)\n\t\t\tassert(false)\n\t\t}\n\t\tconst lineOut = this.baseCurve.tangentAt(pp.x).rejectedFrom(this.dir)\n\n\t\treturn Surface.loopContainsPointGeneral(loop, p, line, lineOut)\n\t}\n\n\n\tedgeLoopCCW(loop: Edge[]): boolean {\n\t\tif (loop.length < 56) {\n\t\t\tlet totalAngle = 0\n\t\t\tfor (let i = 0; i < loop.length; i++) {\n\t\t\t\tconst ipp = (i + 1) % loop.length\n\t\t\t\tconst edge = loop[i], nextEdge = loop[ipp]\n\t\t\t\ttotalAngle += edge.bDir.angleRelativeNormal(nextEdge.aDir, this.normalP(edge.b))\n\t\t\t}\n\t\t\treturn totalAngle > 0\n\t\t} else {\n\t\t\tconst ptpF = this.stPFunc()\n\t\t\treturn isCCW(loop.map(e => ptpF(e.a)), V3.Z)\n\t\t}\n\t}\n\n\ttransform<T extends ProjectedCurveSurface>(this: T, m4: M4): T {\n\t\tconst f = m4.isMirroring() ? -1 : 1\n\t\treturn new this.constructor<T>(\n\t\t\tthis.baseCurve.transform(m4),\n\t\t\tm4.transformVector(this.dir).times(f),\n\t\t\tthis.sMin, this.sMax, 1 == f ? this.tMin : -this.tMax, 1 == f ? this.tMax : -this.tMin)\n\t}\n\n\tisTsForLine(line: L3): number[] {\n\t\tassertInst(L3, line)\n\t\tconst projPlane = new P3(this.dir.unit(), 0)\n\t\tconst projDir = projPlane.projectedVector(line.dir1)\n\t\tif (projDir.likeO()) {\n\t\t\t// line is parallel to this.dir\n\t\t\treturn []\n\t\t}\n\t\tconst projAnchor = projPlane.projectedPoint(line.anchor)\n\t\tconst projBaseCurve = this.baseCurve.project(projPlane)\n\t\treturn projBaseCurve\n\t\t\t.isInfosWithLine(projAnchor, projDir, this.sMin, this.sMax, line.tMin, line.tMax)\n\t\t\t.map(info => info.tOther)\n\t}\n\n\tflipped<T extends ProjectedCurveSurface>(this: T): T {\n\t\treturn new this.constructor<T>(this.baseCurve, this.dir.negated(), this.sMin, this.sMax, -this.tMax, -this.tMin)\n\t}\n}\n\nProjectedCurveSurface.prototype.uStep = 1 / 40\nProjectedCurveSurface.prototype.vStep = 256","import {assert, assertInst, assertVectors, eq0, isCCW, M4, NLA_PRECISION, pqFormula, TAU, V3} from 'ts3dutils'\n\nimport {\n\tCurve, Edge, EllipseCurve, L3, P3, PointVsFace, ProjectedCurveSurface, SemiEllipseCurve, Surface,\n} from '../index'\n\nconst {PI} = Math\n\nexport class CylinderSurface extends ProjectedCurveSurface {\n\tstatic readonly UNIT = new CylinderSurface(EllipseCurve.XY, V3.Z)\n\treadonly matrix: M4\n\treadonly inverseMatrix: M4\n\treadonly baseCurve: EllipseCurve\n\n\tconstructor(baseEllipse: EllipseCurve, dir1: V3, zMin = -Infinity, zMax = Infinity) {\n\t\tsuper(baseEllipse, dir1, undefined, undefined, zMin, zMax)\n\t\tassert(2 == arguments.length)\n\t\tassertVectors(dir1)\n\t\tassertInst(EllipseCurve, baseEllipse)\n\t\t//assert(!baseCurve.normal1.isPerpendicularTo(dir1), !baseCurve.normal1.isPerpendicularTo(dir1))\n\t\tassert(dir1.hasLength(1))\n\t\tthis.matrix = M4.forSys(baseEllipse.f1, baseEllipse.f2, dir1, baseEllipse.center)\n\t\tthis.inverseMatrix = this.matrix.inversed()\n\t}\n\n\tstatic cylinder(radius: number): CylinderSurface {\n\t\treturn new CylinderSurface(new EllipseCurve(V3.O, new V3(radius, 0, 0), new V3(0, radius, 0)), V3.Z)\n\t}\n\n\t/**\n\t *\n\t * @param anchor\n\t * @param dir not necessarily unit\n\t */\n\tstatic unitISLineTs(anchor: V3, dir: V3): number[] {\n\t\tconst {x: ax, y: ay} = anchor\n\t\tconst {x: dx, y: dy} = dir\n\n\t\t// this cylinder: x² + y² = 1\n\t\t// line: p = anchor + t * dir\n\t\t// split line equation into 3 component equations, insert into cylinder equation\n\t\t// x = ax + t * dx\n\t\t// y = ay + t * dy\n\t\t// (ax² + 2 ax t dx + t²dx²) + (ay² + 2 ay t dy + t²dy²) = 1\n\t\t// transform to form (a t² + b t + c = 0) and solve with pqFormula\n\t\tconst a = dx ** 2 + dy ** 2\n\t\tconst b = 2 * (ax * dx + ay * dy)\n\t\tconst c = ax ** 2 + ay ** 2 - 1\n\t\treturn pqFormula(b / a, c / a)\n\t}\n\n\tgetConstructorParameters(): any[] {\n\t\treturn [this.baseCurve, this.dir]\n\t}\n\n\tloopContainsPoint(loop: Edge[], p: V3): PointVsFace {\n\t\tassertVectors(p)\n\n\t\t// create plane that goes through cylinder seam\n\t\tconst line = new L3(p, this.dir)\n\t\tconst seamBase = this.baseCurve.at(PI)\n\t\tconst lineOut = this.dir.cross(this.normalP(p))\n\t\treturn Surface.loopContainsPointGeneral(loop, p, line, lineOut)\n\t}\n\n\tisTsForLine(line: L3) {\n\t\tassertInst(L3, line)\n\t\t// transforming line manually has advantage that dir1 will not be renormalized,\n\t\t// meaning that calculated values t for localLine are directly transferable to line\n\t\tconst localDir = this.inverseMatrix.transformVector(line.dir1)\n\t\tif (localDir.isParallelTo(V3.Z)) {\n\t\t\t// line is parallel to this.dir\n\t\t\treturn []\n\t\t}\n\t\tconst localAnchor = this.inverseMatrix.transformPoint(line.anchor)\n\t\tassert(!CylinderSurface.unitISLineTs(localAnchor, localDir).length || !isNaN(CylinderSurface.unitISLineTs(localAnchor, localDir)[0]), 'sad ' + localDir)\n\t\treturn CylinderSurface.unitISLineTs(localAnchor, localDir)\n\t}\n\n\tisCoplanarTo(surface: Surface): surface is this {\n\t\treturn this == surface ||\n\t\t\tsurface instanceof CylinderSurface\n\t\t\t&& this.dir.isParallelTo(surface.dir)\n\t\t\t&& this.containsEllipse(surface.baseCurve)\n\t}\n\n\tlike(object: any) {\n\t\tif (!this.isCoplanarTo(object)) return false\n\t\t// normals need to point in the same direction (outwards or inwards) for both\n\t\tconst thisFacesOut = 0 < this.baseCurve.normal.dot(this.dir)\n\t\tconst objectFacesOut = 0 < object.baseCurve.normal.dot(object.dir)\n\t\treturn thisFacesOut == objectFacesOut\n\t}\n\n\tcontainsEllipse(ellipse: EllipseCurve | SemiEllipseCurve) {\n\t\tconst ellipseProjected = ellipse.transform(M4.project(this.baseCurve.getPlane(), this.dir))\n\t\treturn this.baseCurve == ellipse || this.baseCurve.isColinearTo(ellipseProjected)\n\t}\n\n\tcontainsCurve(curve: Curve) {\n\t\tif (curve instanceof EllipseCurve) {\n\t\t\treturn this.containsEllipse(curve)\n\t\t} else if (curve instanceof L3) {\n\t\t\treturn this.containsLine(curve)\n\t\t} else if (curve instanceof SemiEllipseCurve) {\n\t\t\treturn this.containsEllipse(curve)\n\t\t} else {\n\t\t\tassert(false)\n\t\t}\n\t}\n\n\tnormalP(p: V3) {\n\t\tconst pLC = this.inverseMatrix.transformPoint(p)\n\t\treturn this.normalSTFunc()(pLC.angleXY(), pLC.z)\n\t}\n\n\timplicitFunction() {\n\t\treturn (pWC: V3) => {\n\t\t\tconst p = this.inverseMatrix.transformPoint(pWC)\n\t\t\tconst radiusLC = p.lengthXY()\n\t\t\tconst normalDir = Math.sign(this.baseCurve.normal.dot(this.dir))\n\t\t\treturn normalDir * (1 - radiusLC)\n\t\t}\n\t}\n\n\tcontainsPoint(p: V3): boolean {\n\t\treturn eq0(this.implicitFunction()(p))\n\t}\n\n\tpointToParameterFunction() {\n\t\treturn (pWC: V3, hint?: number) => {\n\t\t\tconst pLC = this.inverseMatrix.transformPoint(pWC)\n\t\t\tlet angle = pLC.angleXY()\n\t\t\tif (abs(angle) > Math.PI - NLA_PRECISION) {\n\t\t\t\tassert(hint == -PI || hint == PI)\n\t\t\t\tangle = hint\n\t\t\t}\n\t\t\treturn new V3(angle, pLC.z, 0)\n\t\t}\n\t}\n\n\tisCurvesWithSurface(surface: Surface): Curve[] {\n\t\tif (surface instanceof PlaneSurface) {\n\t\t\treturn this.isCurvesWithPlane(surface.plane)\n\t\t} else if (surface instanceof CylinderSurface) {\n\t\t\tif (surface.dir.isParallelTo(this.dir)) {\n\t\t\t\tconst projEllipse = surface.baseCurve.transform(M4.project(this.baseCurve.getPlane(), this.dir))\n\t\t\t\treturn this.baseCurve.isInfosWithEllipse(projEllipse).map(info => new L3(info.p, this.dir))\n\t\t\t} else if (eq0(this.getCenterLine().distanceToLine(surface.getCenterLine()))) {\n\t\t\t\tassert(false)\n\t\t\t} else {\n\t\t\t\tassert(false)\n\t\t\t}\n\t\t}\n\t}\n\n\tgetCenterLine() {\n\t\treturn new L3(this.baseCurve.center, this.dir)\n\t}\n\n\tedgeLoopCCW(loop: Edge[]): boolean {\n\t\tif (loop.length < 56) {\n\t\t\tlet totalAngle = 0\n\t\t\tfor (let i = 0; i < loop.length; i++) {\n\t\t\t\tconst ipp = (i + 1) % loop.length\n\t\t\t\tconst edge = loop[i], nextEdge = loop[ipp]\n\t\t\t\ttotalAngle += edge.bDir.angleRelativeNormal(nextEdge.aDir, this.normalP(edge.b))\n\t\t\t}\n\t\t\treturn totalAngle > 0\n\t\t} else {\n\t\t\tconst ptpF = this.stPFunc()\n\t\t\treturn isCCW(loop.map(e => ptpF(e.a)), V3.Z)\n\t\t}\n\t}\n\n\tfacesOutwards(): boolean {\n\t\treturn this.baseCurve.normal.dot(this.dir) > 0\n\t}\n\n\tgetSeamPlane(): P3 {\n\t\treturn P3.forAnchorAndPlaneVectors(this.baseCurve.center, this.baseCurve.f1, this.dir)\n\t}\n}\n\nCylinderSurface.prototype.uStep = TAU / 128\nCylinderSurface.prototype.vStep = 256\n\n\n\n\n\n\n\n\n\n\n","import {assert, assertInst, eq0, M4, V3} from 'ts3dutils'\n\nimport {ImplicitSurface, ParametricSurface, EPS} from '../index'\n\nconst {PI, cos, sin, min, max, sign, tan, ceil, floor, abs, sqrt, pow, atan2, round} = Math\n\n\n/**\n * Rotation surface with r = f(z)\n */\nexport class RotationREqFOfZ extends ParametricSurface implements ImplicitSurface {\n\tmatrixInverse: M4\n\n\tconstructor(readonly matrix: M4,\n\t\t\t\treadonly rt: (z: number) => number, // r(z)\n\t\t\t\treadonly tMin: number,\n\t\t\t\treadonly tMax: number,\n\t\t\t\treadonly normalDir: number,\n\t\t\t\treadonly drdz: (z: number) => number = z => (rt(z + EPS) - rt(z)) / EPS) { // d/dz (r(z))\n\t\tsuper()\n\t\tassertInst(M4, matrix)\n\t\tassert(matrix.isNoProj())\n\t\tassert(1 == normalDir || -1 == normalDir)\n\t\tthis.matrixInverse = matrix.inversed()\n\t}\n\n\tgetConstructorParameters(): any[] {\n\t\treturn [this.matrix, this.rt, this.tMin, this.tMax, this.normalDir, this.drdz]\n\t}\n\n\tflipped(): RotationREqFOfZ {\n\t\treturn new RotationREqFOfZ(this.matrix, this.rt, this.tMin, this.tMax, -this.normalDir, this.drdz)\n\t}\n\n\ttransform(m4: M4): RotationREqFOfZ {\n\t\treturn new RotationREqFOfZ(m4.times(this.matrix), this.rt, this.tMin, this.tMax, this.normalDir, this.drdz)\n\t}\n\n\tcontainsPoint(p: V3): boolean {\n\t\treturn eq0(this.implicitFunction()(p))\n\t}\n\n\tpSTFunc(): (s: number, t: number) => V3 {\n\t\treturn (d, z) => {\n\t\t\tconst radius = this.rt(z)\n\t\t\treturn this.matrix.transformPoint(V3.polar(radius, d, z))\n\t\t}\n\t}\n\n\tdpds(): (s: number, t: number) => V3 {\n\t\treturn (s, t) => {\n\t\t\tconst radius = this.rt(t)\n\t\t\treturn this.matrix.transformVector(new V3(radius * -sin(s), radius * cos(s), 0))\n\t\t}\n\t}\n\n\t/**\n\t * new V3(f(z) * cos d, f(z) * sin d, z)\n\t */\n\n\tdpdt(): (s: number, t: number) => V3 {\n\t\treturn (s, t) => {\n\t\t\tconst drdt = this.drdz(t)\n\t\t\treturn this.matrix.transformVector(new V3(drdt * cos(s), drdt * sin(s), 1))\n\t\t}\n\t}\n\n\tnormalSTFunc(): (s: number, t: number) => V3 {\n\t\t/**\n\t\t * (radius * -sin(s), radius * cos(s), 0) X (drds * cos(s), drds * sin(s), 1)\n\t\t * =(radius * cos(s)*1,\n\t\t * -radius * -sin(s)*1,\n\t\t * radius * -sin(s)* drds * sin(s)- radius * cos(s)*drds * cos(s))\n\t\t * div by radius\n\t\t * => (cos s, sin s, -drds * (sin² + cos²))\n\t\t */\n\t\tconst matrix = this.matrix.inversed().transposed()\n\t\treturn (d, z) => {\n\t\t\tconst drdz = this.drdz(z)\n\t\t\treturn matrix.transformVector(V3.polar(1, d, -drdz)).toLength(this.normalDir)\n\t\t}\n\t}\n\n\timplicitFunction(): (pWC: V3) => number {\n\t\treturn (pWC) => {\n\t\t\tconst pLC = this.matrixInverse.transformPoint(pWC)\n\t\t\tconst radiusLC = pLC.lengthXY()\n\t\t\treturn this.rt(pLC.z) - radiusLC\n\t\t}\n\t}\n\n\tstPFunc(): (pWC: V3) => V3 {\n\t\treturn (pWC) => {\n\t\t\tconst pLC = this.matrixInverse.transformPoint(pWC)\n\t\t\treturn new V3(atan2(pLC.y, pLC.x), pLC.z, 0)\n\t\t}\n\t}\n}\n\nObject.assign(RotationREqFOfZ.prototype, ImplicitSurface.prototype)\nRotationREqFOfZ.prototype.sMin = 0\nRotationREqFOfZ.prototype.sMax = PI","import {assert, assertInst, assertVectors, eq0, hasConstructor, le, M4, pqFormula, TAU, V3,} from 'ts3dutils'\n\nimport {\n\tBezierCurve, Curve, Edge, L3, P3, PlaneSurface, PointVsFace, ProjectedCurveSurface, SemiEllipseCurve, Surface,\n} from '../index'\n\nconst {PI, cos, sin, min, max, tan, sign, ceil, floor, abs, sqrt, pow, atan2, round} = Math\n\nexport class SemiCylinderSurface extends ProjectedCurveSurface {\n\tstatic readonly UNIT = new SemiCylinderSurface(SemiEllipseCurve.UNIT, V3.Z, undefined, undefined, 0, 1)\n\treadonly matrix: M4\n\treadonly inverseMatrix: M4\n\treadonly normalMatrix: M4\n\treadonly normalDir: number\n\treadonly baseCurve: SemiEllipseCurve\n\n\tconstructor(baseCurve: SemiEllipseCurve,\n\t\t\t\tdir1: V3,\n\t\t\t\tsMin: number,\n\t\t\t\tsMax: number,\n\t\t\t\tzMin = -Infinity,\n\t\t\t\tzMax = Infinity) {\n\t\tsuper(baseCurve, dir1, sMin, sMax, zMin, zMax)\n\t\tassertInst(SemiEllipseCurve, baseCurve)\n\t\t//assert(!baseCurve.normal1.isPerpendicularTo(dir1), !baseCurve.normal1.isPerpendicularTo(dir1))\n\t\tthis.matrix = M4.forSys(baseCurve.f1, baseCurve.f2, dir1, baseCurve.center)\n\t\tthis.inverseMatrix = this.matrix.inversed()\n\t\tthis.normalDir = sign(this.baseCurve.normal.dot(this.dir))\n\t\tthis.normalMatrix = this.matrix.as3x3().inversed().transposed().scale(this.normalDir)\n\t}\n\n\tstatic semicylinder(radius: number): SemiCylinderSurface {\n\t\treturn new SemiCylinderSurface(new SemiEllipseCurve(V3.O, new V3(radius, 0, 0), new V3(0, radius, 0)), V3.Z, undefined, undefined)\n\t}\n\n\t/**\n\t *\n\t * @param anchorLC\n\t * @param dirLC not necessarily unit\n\t */\n\tstatic unitISLineTs(anchorLC: V3, dirLC: V3): number[] {\n\t\tconst {x: ax, y: ay} = anchorLC\n\t\tconst {x: dx, y: dy} = dirLC\n\n\t\t// this cylinder: x² + y² = 1\n\t\t// line: p = anchorLC + t * dirLC\n\t\t// split line equation into 3 component equations, insert into cylinder equation\n\t\t// x = ax + t * dx\n\t\t// y = ay + t * dy\n\t\t// (ax² + 2 ax t dx + t²dx²) + (ay² + 2 ay t dy + t²dy²) = 1\n\t\t// transform to form (a t² + b t + c = 0) and solve with pqFormula\n\t\tconst a = dx ** 2 + dy ** 2\n\t\tconst b = 2 * (ax * dx + ay * dy)\n\t\tconst c = ax ** 2 + ay ** 2 - 1\n\t\treturn pqFormula(b / a, c / a).filter(t => SemiEllipseCurve.XYLCValid(new V3(ax + dx * t, ay + dy * t, 0)))\n\t}\n\n\tgetConstructorParameters(): any[] {\n\t\treturn [this.baseCurve, this.dir, this.sMin, this.sMax, this.tMin, this.tMax]\n\t}\n\n\tnormalP(p: V3): V3 {\n\t\treturn this.normalMatrix.transformVector(this.inverseMatrix.transformPoint(p).xy()).unit()\n\t}\n\n\tloopContainsPoint(loop: Edge[], p: V3): PointVsFace {\n\t\tassertVectors(p)\n\t\tif (!this.containsPoint(p)) return OUTSIDE\n\t\t// create plane that goes through cylinder seam\n\t\tconst line = new L3(p, this.dir.unit())\n\t\tconst seamBase = this.baseCurve.at(PI)\n\t\tconst lineOut = this.dir.cross(this.normalP(p))\n\t\treturn Surface.loopContainsPointGeneral(loop, p, line, lineOut)\n\t}\n\n\tisTsForLine(line: L3) {\n\t\tassertInst(L3, line)\n\t\t// transforming line manually has advantage that dir1 will not be renormalized,\n\t\t// meaning that calculated values t for localLine are directly transferable to line\n\t\tconst dirLC = this.inverseMatrix.transformVector(line.dir1)\n\t\tif (dirLC.isParallelTo(V3.Z)) {\n\t\t\t// line is parallel to this.dir\n\t\t\treturn []\n\t\t}\n\t\tconst anchorLC = this.inverseMatrix.transformPoint(line.anchor)\n\t\tassert(!SemiCylinderSurface.unitISLineTs(anchorLC, dirLC).length || !isNaN(SemiCylinderSurface.unitISLineTs(anchorLC, dirLC)[0]), 'sad ' + dirLC)\n\t\treturn SemiCylinderSurface.unitISLineTs(anchorLC, dirLC)\n\t}\n\n\tisCoplanarTo(surface: Surface): surface is SemiCylinderSurface {\n\t\treturn this == surface ||\n\t\t\thasConstructor(surface, SemiCylinderSurface)\n\t\t\t&& this.dir.isParallelTo(surface.dir)\n\t\t\t&& this.containsSemiEllipse(surface.baseCurve, false)\n\t}\n\n\tlike(surface: Surface): boolean {\n\t\tif (!this.isCoplanarTo(surface)) return false\n\t\t// normals need to point in the same direction (outwards or inwards) for both\n\t\tconst thisFacesOut = 0 < this.baseCurve.normal.dot(this.dir)\n\t\tconst objectFacesOut = 0 < surface.baseCurve.normal.dot(surface.dir)\n\t\treturn thisFacesOut == objectFacesOut\n\t}\n\n\tcontainsSemiEllipse(ellipse: SemiEllipseCurve, checkAABB: boolean = true) {\n\t\tconst projEllipse = ellipse.transform(M4.project(this.baseCurve.getPlane(), this.dir))\n\t\treturn this.baseCurve == ellipse || this.baseCurve.isColinearTo(projEllipse) &&\n\t\t\t(!checkAABB || le(0, ellipse.transform(this.inverseMatrix).getAABB().min.y))\n\t}\n\n\tcontainsCurve(curve: Curve) {\n\t\tif (curve instanceof L3) {\n\t\t\treturn this.containsLine(curve)\n\t\t} else if (curve instanceof SemiEllipseCurve) {\n\t\t\treturn this.containsSemiEllipse(curve)\n\t\t} else if (curve instanceof BezierCurve) {\n\t\t\treturn false\n\t\t} else {\n\t\t\treturn super.containsCurve(curve)\n\t\t}\n\t}\n\n\timplicitFunction() {\n\t\treturn (pWC) => {\n\t\t\tconst pLC = this.inverseMatrix.transformPoint(pWC)\n\t\t\tconst radiusLC = pLC.lengthXY()\n\t\t\tconst normalDir = Math.sign(this.baseCurve.normal.dot(this.dir))\n\t\t\treturn normalDir * (1 - radiusLC)\n\t\t}\n\t}\n\n\tcontainsPoint(pWC: V3): boolean {\n\t\tconst pLC = this.inverseMatrix.transformPoint(pWC)\n\t\treturn SemiEllipseCurve.XYLCValid(pLC)\n\t}\n\n\tstP(pWC: V3): V3 {\n\t\tassert(arguments.length == 1)\n\t\tconst pLC = this.inverseMatrix.transformPoint(pWC)\n\t\tconst u = SemiEllipseCurve.XYLCPointT(pLC)\n\t\treturn new V3(u, pLC.z, 0)\n\t}\n\n\tisCurvesWithSurface(surface2: Surface): Curve[] {\n\t\tif (surface2 instanceof PlaneSurface) {\n\t\t\treturn this.isCurvesWithPlane(surface2.plane)\n\t\t} else if (surface2 instanceof SemiCylinderSurface) {\n\t\t\tif (surface2.dir.isParallelTo(this.dir)) {\n\t\t\t\tconst projEllipse = surface2.baseCurve.transform(M4.project(this.baseCurve.getPlane(), this.dir))\n\t\t\t\treturn this.baseCurve.isInfosWithEllipse(projEllipse).map(info => {\n\t\t\t\t\tconst lineDir = sign(this.normalP(info.p).cross(surface2.normalP(info.p)).dot(this.dir)) || 1\n\t\t\t\t\treturn new L3(info.p, this.dir.times(lineDir))\n\t\t\t\t})\n\t\t\t} else if (eq0(this.getCenterLine().distanceToLine(surface2.getCenterLine()))) {\n\t\t\t\tassert(false)\n\t\t\t} else {\n\t\t\t\tassert(false)\n\t\t\t}\n\t\t}\n\t}\n\n\tgetCenterLine(): L3 {\n\t\treturn new L3(this.baseCurve.center, this.dir)\n\t}\n\n\tfacesOutwards(): boolean {\n\t\treturn this.baseCurve.normal.dot(this.dir) > 0\n\t}\n\n\tgetSeamPlane(): P3 {\n\t\tlet normal = this.baseCurve.f1.cross(this.dir)\n\t\tnormal = normal.times(-sign(normal.dot(this.baseCurve.f2)))\n\t\treturn P3.normalOnAnchor(normal, this.baseCurve.center)\n\t}\n\n\tclipCurves(curves: Curve[]): Curve[] {\n\t\treturn curves.flatMap(curve => curve.clipPlane(this.getSeamPlane()))\n\t}\n}\n\nSemiCylinderSurface.prototype.uStep = TAU / 32\nSemiCylinderSurface.prototype.vStep = 256\n\n\n\n\n\n\n\n\n\n\n","import {\n\tarrayFromFunction, assert, assertf, assertInst, assertNever, assertNumbers, assertVectors, between, checkDerivate,\n\tclamp, eq, eq0, gaussLegendreQuadrature24, getIntervals, getRoots, glqInSteps, hasConstructor, le, lt, M4, MINUS,\n\tNLA_PRECISION, pqFormula, snap, V3,\n} from 'ts3dutils'\nimport {Mesh} from 'tsgl'\n\nimport {\n\tCurve, dotCurve, dotCurve2, Edge, EllipsoidSurface, L3, P3, ParametricSurface, PICurve, PointVsFace,\n\tProjectedCurveSurface, SemiCylinderSurface, SemiEllipseCurve, Surface, PlaneSurface,\n} from '../index'\n\nconst {PI, min, max, sign, abs, sqrt} = Math\n\n\nexport class SemiEllipsoidSurface extends EllipsoidSurface {\n\tstatic readonly UNIT = new SemiEllipsoidSurface(V3.O, V3.X, V3.Y, V3.Z)\n\treadonly matrix: M4\n\treadonly inverseMatrix: M4\n\treadonly pLCNormalWCMatrix: M4\n\treadonly pWCNormalWCMatrix: M4\n\treadonly normalDir: number // -1 | 1\n\n\tconstructor(readonly center: V3,\n\t\t\t\treadonly f1: V3,\n\t\t\t\treadonly f2: V3,\n\t\t\t\treadonly f3: V3) {\n\t\tsuper(center, f1, f2, f3)\n\t\tassertVectors(center, f1, f2, f3)\n\t\tthis.matrix = M4.forSys(f1, f2, f3, center)\n\t\tthis.inverseMatrix = this.matrix.inversed()\n\t\tthis.normalDir = sign(this.f1.cross(this.f2).dot(this.f3))\n\t\tthis.pLCNormalWCMatrix = this.matrix.as3x3().inversed().transposed().scale(this.normalDir)\n\t\tthis.pWCNormalWCMatrix = this.pLCNormalWCMatrix.times(this.inverseMatrix)\n\t}\n\n\tstatic unitArea(contour: Edge[]) {\n\t\tconst totalArea = contour.map(edge => {\n\t\t\tif (edge.curve instanceof PICurve) {\n\t\t\t\tconst points = edge.curve.calcSegmentPoints(edge.aT, edge.bT, edge.a, edge.b, edge.aT > edge.bT, true)\n\t\t\t\tlet sum = 0\n\t\t\t\tfor (let i = 0; i < points.length - 1; i++) {\n\t\t\t\t\tconst p = points[i], ppp = points[i + 1]\n\t\t\t\t\tsum += (abs(p.angleXY()) + abs(ppp.angleXY())) / 2 * (ppp.z - p.z)\n\t\t\t\t}\n\t\t\t\treturn sum\n\t\t\t} else if (edge.curve instanceof SemiEllipseCurve) {\n\t\t\t\tconst f = (t: number) => {\n\t\t\t\t\tconst at = edge.curve.at(t), tangent = edge.curve.tangentAt(t)\n\t\t\t\t\tconst angleXY = abs(at.angleXY())\n\t\t\t\t\t//const arcLength = angleXY * Math.sqrt(1 - at.z ** 2) ( == at.lengthXY())\n\t\t\t\t\t//const scaling = tangent.z / at.lengthXY()\n\t\t\t\t\treturn angleXY * tangent.z\n\t\t\t\t}\n\t\t\t\tconst val = glqInSteps(f, edge.aT, edge.bT, 1)\n\t\t\t\treturn val\n\t\t\t} else {\n\t\t\t\tassertNever()\n\t\t\t}\n\t\t}).sum()\n\t\treturn totalArea\n\t}\n\n\t/**\n\t * unit sphere: x² + y² + z² = 1\n\t * line: p = anchor + t * dir |^2\n\t * p² = (anchor + t * dir)^2\n\t * 1 == (anchor + t * dir)^2\n\t * 1 == anchor DOT anchor + 2 * anchor * t * dir + t² * dir DOT dir\n\t */\n\tstatic unitISTsWithLine(anchor: V3, dir: V3): number[] {\n\t\t// for 0 = a t² + b t + c\n\t\tconst a = dir.dot(dir)\n\t\tconst b = 2 * anchor.dot(dir)\n\t\tconst c = anchor.dot(anchor) - 1\n\t\treturn pqFormula(b / a, c / a).filter(t => le(0, anchor.y + t * dir.y))\n\t}\n\n\t/**\n\t * unit sphere: x² + y² + z² = 1\n\t * plane: normal1 DOT p = w\n\t */\n\tstatic unitISCurvesWithPlane(plane: P3): SemiEllipseCurve[] {\n\t\tconst distPlaneCenter = Math.abs(plane.w)\n\t\tif (lt(distPlaneCenter, 1)) {\n\t\t\t// result is a circle\n\t\t\t// radius of circle: imagine right angled triangle (origin -> center of intersection circle -> point on\n\t\t\t// intersection circle) pythagoras: 1² == distPlaneCenter² + isCircleRadius² => isCircleRadius == sqrt(1 -\n\t\t\t// distPlaneCenter²)\n\t\t\tconst isCircleRadius = Math.sqrt(1 - distPlaneCenter ** 2)\n\t\t\tconst anchorY = plane.normal1.y * plane.w\n\t\t\tconst d = abs(distPlaneCenter * isCircleRadius)\n\t\t\tif (le(anchorY, -d) && !eq0(distPlaneCenter)) {\n\t\t\t\treturn []\n\t\t\t} else if (le(anchorY, 0) && !plane.normal1.isParallelTo(V3.Y)) {\n\t\t\t\tlet f1 = plane.normal1.isParallelTo(V3.Y) ? V3.Z : plane.normal1.cross(V3.Y).toLength(isCircleRadius)\n\t\t\t\tconst f2 = f1.cross(plane.normal1)\n\t\t\t\tconst minEta = -anchorY / f2.y, minT = max(0, Math.asin(minEta))\n\t\t\t\treturn [new SemiEllipseCurve(plane.anchor, f1, f2, minT, PI - minT)]\n\t\t\t} else {\n\t\t\t\tconst f2 = (plane.normal1.isParallelTo(V3.Y)\n\t\t\t\t\t? V3.X\n\t\t\t\t\t: plane.normal1.cross(V3.Y)).toLength(isCircleRadius)\n\t\t\t\tconst f1 = f2.cross(plane.normal1)\n\t\t\t\tconst minXi = eq0(f1.y) ? -1 : -anchorY / f1.y, maxT = Math.acos(max(-1, minXi - NLA_PRECISION))\n\t\t\t\treturn [new SemiEllipseCurve(plane.anchor, f1.negated(), f2, PI - maxT, PI),\n\t\t\t\t\tnew SemiEllipseCurve(plane.anchor, f1, f2.negated(), 0, maxT)]\n\t\t\t}\n\t\t} else {\n\t\t\treturn []\n\t\t}\n\t}\n\n\tstatic unitISCurvesWithEllipsoidSurface(surface: SemiEllipsoidSurface): Curve[] {\n\t\tif (surface.isSphere()) {\n\t\t\tconst surfaceRadius = surface.f1.length()\n\t\t\tconst surfaceCenterDist = surface.center.length()\n\t\t\tif (le(1, surfaceCenterDist - surfaceRadius) || le(surfaceCenterDist + surfaceRadius, 1) || le(surfaceCenterDist - surfaceRadius, -1)) {\n\t\t\t\treturn []\n\t\t\t} else {\n\t\t\t\t// origin, surface.center and points on the intersection curves form a triangle.\n\t\t\t\t// the height on the segment origin - surface.center is the radius of the is curves\n\t\t\t\t// the distance from the origin to the lot point is the distance to the intersection plane\n\t\t\t\tfunction heron(a: number, b: number, c: number) {\n\t\t\t\t\tconst p = (a + b + c) / 2\n\t\t\t\t\treturn sqrt(p * (p - a) * (p - b) * (p - c))\n\t\t\t\t}\n\n\t\t\t\tconst triangleArea = heron(1, surfaceRadius, surfaceCenterDist)\n\t\t\t\tconst radius = triangleArea * 2 / surfaceCenterDist\n\t\t\t\tconst isCurvesCenterDist = sign(1 + surfaceCenterDist ** 2 - surfaceRadius ** 2) * sqrt(1 - radius ** 2)\n\t\t\t\tconst plane = new P3(surface.center.unit(), isCurvesCenterDist)\n\t\t\t\treturn SemiEllipsoidSurface.unitISCurvesWithPlane(plane.flipped())\n\t\t\t}\n\t\t}\n\t\tassertNever()\n\t}\n\n\tstatic unitISCurvesWithSemiCylinderSurface(surface: SemiCylinderSurface): SemiEllipseCurve[] {\n\t\tif (new L3(surface.baseCurve.center, surface.dir).containsPoint(V3.O)) {\n\t\t\tconst projEllipse = surface.baseCurve.transform(M4.project(new P3(surface.dir, 0)))\n\t\t\tconst f1Length = projEllipse.f1.length(), f2Length = projEllipse.f2.length()\n\t\t\tif (lt(1, min(f1Length, f2Length))) return []\n\t\t\tif (projEllipse.isCircular()) {\n\t\t\t\tconst distISCurveCenter = Math.sqrt(1 - min(1, f1Length) ** 2)\n\t\t\t\tconst isCurveCenter = (surface.dir.y < 0 ? surface.dir.negated() : surface.dir).times(distISCurveCenter)\n\t\t\t\t// isCurve.at(t).y = isCurveCenter.y + projEllipse.f1.y * cos(t) + projEllipse.f2.y * sin(t) = 0\n\t\t\t\treturn [new SemiEllipseCurve(isCurveCenter, projEllipse.f1, projEllipse.f2)]\n\t\t\t}\n\t\t}\n\t\tassert(false)\n\t}\n\n\tstatic sphere(radius: number, center: V3 = V3.O): SemiEllipsoidSurface {\n\t\tassertNumbers(radius)\n\t\treturn new SemiEllipsoidSurface(center, new V3(radius, 0, 0), new V3(0, radius, 0), new V3(0, 0, radius))\n\t}\n\n\t/**\n\t * x²/a² + y²/b² + z²/c² = 1\n\t */\n\tstatic forABC(a: number, b: number, c: number, center: V3 = V3.O): SemiEllipsoidSurface {\n\t\treturn new SemiEllipsoidSurface(center, new V3(a, 0, 0), new V3(0, b, 0), new V3(0, 0, c))\n\t}\n\n\tstatic calculateAreaSpheroid(a: V3, b: V3, c: V3, edges: Edge[]): number {\n\t\tassertf(() => a.isPerpendicularTo(b))\n\t\tassertf(() => b.isPerpendicularTo(c))\n\t\tassertf(() => c.isPerpendicularTo(a))\n\n\t\t// handling discontinuities:\n\t\t// option 1: check for intersections with baseline, if there are any integrate parts separetely\n\t\t// \"rotate\" the edge so that there are no overlaps\n\t\tconst matrix = M4.forSys(a, b, c), inverseMatrix = matrix.inversed()\n\t\tconst circleRadius = a.length()\n\t\tconst c1 = c.unit()\n\t\tconst totalArea = edges.map(edge => {\n\t\t\tif (edge.curve instanceof SemiEllipseCurve) {\n\t\t\t\tconst f = (t: number) => {\n\t\t\t\t\tconst at = edge.curve.at(t), tangent = edge.tangentAt(t)\n\t\t\t\t\tconst localAt = inverseMatrix.transformPoint(at)\n\t\t\t\t\tconst angleXY = localAt.angleXY()\n\t\t\t\t\tconst arcLength = angleXY * circleRadius * Math.sqrt(1 + localAt.z ** 2)\n\t\t\t\t\tconst scaling = Math.sqrt(1 + c1.dot(tangent) ** 2)\n\t\t\t\t\treturn arcLength * scaling\n\t\t\t\t}\n\t\t\t\tconst val = glqInSteps(f, edge.aT, edge.bT, 1)\n\t\t\t\treturn val\n\t\t\t} else {\n\t\t\t\tassertNever()\n\t\t\t}\n\t\t}).sum()\n\n\n\t\treturn totalArea\n\t}\n\n\tequals(obj: any): boolean {\n\t\treturn this == obj ||\n\t\t\tObject.getPrototypeOf(obj) == this.constructor.prototype\n\t\t\t&& this.matrix.equals(obj.matrix)\n\t}\n\n\tedgeLoopCCW(loop: Edge[]): boolean {\n\t\treturn SemiEllipsoidSurface.unitArea(loop.map(edge => edge.transform(this.inverseMatrix))) > 0\n\t\t//let totalAngle = 0\n\t\t//for (let i = 0; i < contour.length; i++) {\n\t\t//    const ipp = (i + 1) % contour.length\n\t\t//    const edge = contour[i], nextEdge = contour[ipp]\n\t\t//    totalAngle += edge.bDir.angleRelativeNormal(nextEdge.aDir, this.normalP(edge.b))\n\t\t//}\n\t\t//return le(0, totalAngle)\n\t}\n\n\tlike(object) {\n\t\tif (!this.isCoplanarTo(object)) return false\n\t\t// normals need to point in the same direction (outwards or inwards) for both\n\t\treturn this.matrix.determinant3() * object.matrix.determinant3() > 0\n\t}\n\n\trootPoints() {\n\n\t}\n\n\ttoMesh(): Mesh {\n\t\treturn ParametricSurface.prototype.toMesh.call(this)\n\t}\n\n\tgetConstructorParameters(): any[] {\n\t\treturn [this.center, this.f1, this.f2, this.f3]\n\t}\n\n\tclipCurves(curves: Curve[]): Curve[] {\n\t\treturn curves.flatMap(curve => curve.clipPlane(this.getSeamPlane()))\n\t}\n\n\tisCurvesWithPCS(surface: ProjectedCurveSurface): Curve[] {\n\t\tlet curves2 = ParametricSurface.isCurvesParametricImplicitSurface(surface, this, 0.1, 0.1 / surface.dir.length(), 0.05)\n\t\tcurves2 = this.clipCurves(curves2)\n\t\tcurves2 = surface.clipCurves(curves2)\n\t\treturn curves2\n\n\t\tfunction iii(ists: number[], surface: Surface, curve: Curve, min: number, max: number) {\n\t\t\tists.sort((a, b) => a - b)\n\t\t\tif (!eq(ists[0], min)) {\n\t\t\t\tists.splice(0, 0, min)\n\t\t\t}\n\t\t\tif (!eq(ists.last, max)) {\n\t\t\t\tists.push(max)\n\t\t\t}\n\t\t\tconst result = []\n\t\t\tfor (let i = 0; i < ists.length - 1; i++) {\n\t\t\t\tconst aT = ists[i], bT = ists[i + 1]\n\t\t\t\tconst a = curve.at(aT), b = curve.at(bT)\n\t\t\t\tconst aNormal = surface.normalP(a), bNormal = surface.normalP(b)\n\t\t\t\tconst aInside = dotCurve2(curve, aT, aNormal, 1) < 0\n\t\t\t\tconst bInside = dotCurve2(curve, bT, bNormal, -1) < 0\n\t\t\t\t//assert(bInside == aInside)\n\t\t\t\tif (surface.containsPoint(a) ? aInside : bInside) {\n\t\t\t\t\tresult.push([aT, ists[i + 1]])\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result\n\t\t}\n\n\t\t//return []\n\t\tconst surfaceLC = surface.transform(this.inverseMatrix)\n\t\t//const lcMinZ0RelO =\n\t\tconst baseCurveLC = surfaceLC.baseCurve.project(new P3(surfaceLC.dir, 0))\n\t\tconst ists = baseCurveLC.isTsWithSurface(EllipsoidSurface.UNIT)\n\t\tconst insideIntervals = getIntervals(ists, baseCurveLC.tMin, baseCurveLC.tMax)\n\t\t\t.filter(([a, b]) => baseCurveLC.at((a + b) / 2).length() < 1)\n\t\tconst projectedCurves = [0, 1].map(id => {\n\t\t\treturn (t: number) => {\n\t\t\t\tconst atSqr = snap(baseCurveLC.at(t).squared(), 1)\n\t\t\t\tconst lineISTs = /* +- */ sqrt(1 - atSqr)\n\t\t\t\t//assert(!isNaN(lineISTs))\n\t\t\t\treturn eq0(lineISTs)\n\t\t\t\t\t? baseCurveLC.at(t)\n\t\t\t\t\t: baseCurveLC.at(t).plus(surfaceLC.dir.times(sign(id - 0.5) * lineISTs))\n\t\t\t}\n\t\t})\n\t\tconst dProjectedCurves = [0, 1].map(id => {\n\t\t\treturn (t: number) => {\n\t\t\t\t// d/dt sqrt(1 - baseCurveLC.at(t).squared())\n\t\t\t\t// = -1/2 * 1/sqrt(1 - baseCurveLC.at(t).squared()) * -2*baseCurveLC.at(t) * baseCurveLC.tangentAt(t)\n\t\t\t\tconst atSqr = snap(baseCurveLC.at(t).squared(), 1)\n\t\t\t\tconst lineISTs = /* +- */ baseCurveLC.at(t).times(-1 / sqrt(1 - atSqr)).dot(baseCurveLC.tangentAt(t))\n\t\t\t\t//assert(!isNaN(lineISTs))\n\t\t\t\treturn baseCurveLC.tangentAt(t).plus(surfaceLC.dir.times(sign(id - 0.5) * lineISTs))\n\t\t\t}\n\t\t})\n\t\t//const f2 = t => sqrt(1 - baseCurveLC.at(t).squared())\n\t\t//const df2 = t => baseCurveLC.at(t).times(-1 / sqrt(1 -\n\t\t// baseCurveLC.at(t).squared())).dot(baseCurveLC.tangentAt(t)) checkDerivate(f2, df2, 0.31, 0.60)\n\t\tconst curves = []\n\t\tfor (const [aT, bT] of insideIntervals) {\n\t\t\t//const aLine = new L3(baseCurveLC.at(aT), surfaceLC.dir1)\n\t\t\t//const a = EllipsoidSurface.UNIT.isTsForLine(aLine).map(t => aLine.at(t))\n\t\t\t//const bLine = new L3(baseCurveLC.at(bT), surfaceLC.dir1)\n\t\t\t//const b = EllipsoidSurface.UNIT.isTsForLine(bLine).map(t => bLine.at(t))\n\t\t\tfor (const i of [0, 1]) {\n\t\t\t\tconst f = (t: number) => projectedCurves[i](t).y\n\t\t\t\tconst df = (t: number) => dProjectedCurves[i](t).y\n\t\t\t\tcheckDerivate(f, df, aT + 0.1, bT - 0.1)\n\t\t\t\tconst tsAtY0 = getRoots(f, aT + NLA_PRECISION, bT - NLA_PRECISION, 1 / (1 << 11), df)\n\t\t\t\tconst ii2 = getIntervals(tsAtY0, aT, bT).filter(([a, b]) => f((a + b) / 2) > 0)\n\t\t\t\tfor (const [aT2, bT2] of ii2) {\n\t\t\t\t\tlet aP = projectedCurves[i](aT2), bP = projectedCurves[i](bT2)\n\t\t\t\t\t0 === i && ([aP, bP] = [bP, aP])\n\t\t\t\t\tassert(EllipsoidSurface.UNIT.containsPoint(aP))\n\t\t\t\t\tassert(EllipsoidSurface.UNIT.containsPoint(bP))\n\t\t\t\t\tcurves.push(PICurve.forStartEnd(surface, this, this.matrix.transformPoint(bP), this.matrix.transformPoint(aP), undefined, 1))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst f = (t: number) => baseCurveLC.at(t).length() - 1\n\t\tconst fRoots = undefined\n\n\t\treturn surface.clipCurves(curves)\n\t}\n\n\tisCurvesWithSurface(surface: Surface): Curve[] {\n\t\tif (surface instanceof PlaneSurface) {\n\t\t\treturn this.isCurvesWithPlane(surface.plane)\n\t\t} else if (surface instanceof SemiCylinderSurface) {\n\t\t\treturn this.isCurvesWithSemiCylinderSurface(surface)\n\t\t} else if (surface instanceof SemiEllipsoidSurface) {\n\t\t\tconst surfaceLC = surface.transform(this.inverseMatrix)\n\t\t\tconst curves = SemiEllipsoidSurface.unitISCurvesWithEllipsoidSurface(surfaceLC)\n\t\t\t\t.map(c => c.transform(this.matrix))\n\t\t\treturn surface.clipCurves(curves)\n\t\t} else if (surface instanceof ProjectedCurveSurface) {\n\t\t\treturn this.isCurvesWithPCS(surface)\n\t\t} else if (surface instanceof ParametricSurface) {\n\t\t\tlet curves2 = ParametricSurface.isCurvesParametricImplicitSurface(surface, this, 0.1, 0.1, 0.05)\n\t\t\tcurves2 = this.clipCurves(curves2)\n\t\t\tcurves2 = surface.clipCurves(curves2)\n\t\t\treturn curves2\n\t\t} else {\n\t\t\tassert(false)\n\t\t}\n\t}\n\n\tisCurvesWithPlane(plane: P3): Curve[] {\n\t\tconst planeLC = plane.transform(this.inverseMatrix)\n\t\treturn SemiEllipsoidSurface.unitISCurvesWithPlane(planeLC).map(c => c.transform(this.matrix))\n\t}\n\n\tisCurvesWithSemiCylinderSurface(surface: SemiCylinderSurface): Curve[] {\n\t\tif (L3.containsPoint(surface.baseCurve.center, surface.dir, this.center)) {\n\t\t\tassert(this.isSphere())\n\t\t\tconst ellipseProjected = surface.baseCurve.transform(M4.project(surface.baseCurve.getPlane(), surface.dir))\n\t\t\tif (ellipseProjected.isCircular()) {\n\t\t\t\tconst thisRadius = this.f1.length()\n\t\t\t\tconst surfaceRadius = ellipseProjected.f1.length()\n\t\t\t\t// sphereRadius² = distanceISFromCenter² + isRadius²\n\t\t\t\tif (eq(thisRadius, surfaceRadius)) {\n\t\t\t\t\t// return\n\t\t\t\t} else if (surfaceRadius < thisRadius) {\n\n\t\t\t\t}\n\t\t\t\tassert(false)\n\t\t\t}\n\t\t}\n\t\treturn this.isCurvesWithPCS(surface)\n\t}\n\n\tisTsForLine(line: L3) {\n\t\tassertInst(L3, line)\n\t\t// transforming line manually has advantage that dir1 will not be renormalized,\n\t\t// meaning that calculated values t for localLine are directly transferable to line\n\t\tconst anchorLC = this.inverseMatrix.transformPoint(line.anchor)\n\t\tconst dirLC = this.inverseMatrix.transformVector(line.dir1)\n\t\treturn SemiEllipsoidSurface.unitISTsWithLine(anchorLC, dirLC)\n\t}\n\n\tisCoplanarTo(surface: Surface) {\n\t\tif (this === surface) return true\n\t\tif (!hasConstructor(surface, SemiEllipsoidSurface)) return false\n\t\tif (!this.center.like(surface.center)) return false\n\t\tif (this.isSphere()) return surface.isSphere() && eq(this.f1.length(), this.f2.length())\n\n\t\tconst otherMatrixLC = this.inverseMatrix.times(surface.matrix)\n\t\t// Ellipsoid with matrix otherMatrixLC is unit sphere iff otherMatrixLC is orthogonal\n\t\treturn otherMatrixLC.is3x3() && otherMatrixLC.isOrthogonal()\n\t}\n\n\tcontainsEllipse(ellipse: SemiEllipseCurve): boolean {\n\t\tconst ellipseLC = ellipse.transform(this.inverseMatrix)\n\t\tconst distEllipseLCCenter = ellipseLC.center.length()\n\t\tconst correctRadius = Math.sqrt(1 - distEllipseLCCenter ** 2)\n\t\treturn lt(distEllipseLCCenter, 1)\n\t\t\t&& ellipseLC.isCircular()\n\t\t\t&& ellipseLC.f1.hasLength(correctRadius)\n\t\t//&& le(0, ellipseLC.getAABB().min.y)\n\t}\n\n\tcontainsCurve(curve: Curve): boolean {\n\t\tif (curve instanceof SemiEllipseCurve) {\n\t\t\treturn this.containsEllipse(curve)\n\t\t} else {\n\t\t\treturn super.containsCurve(curve)\n\t\t}\n\t}\n\n\ttransform(m4: M4): SemiEllipsoidSurface {\n\t\treturn new SemiEllipsoidSurface(\n\t\t\tm4.transformPoint(this.center),\n\t\t\tm4.transformVector(this.f1),\n\t\t\tm4.transformVector(this.f2),\n\t\t\tm4.transformVector(this.f3).times(m4.isMirroring() ? -1 : 1))\n\t}\n\n\tisInsideOut(): boolean {\n\t\treturn this.f1.cross(this.f2).dot(this.f3) < 0\n\t}\n\n\t//implicitFunction() {\n\t//    return (pWC) => {\n\t//        const pLC = this.inverseMatrix.transformPoint(pWC)\n\t//        return (pLC.y > 0\n\t//            ? pLC.length() - 1\n\t//            : (-pLC.y + Math.hypot(pLC.x, pLC.z) - 1)) * this.normalDir\n\t//    }\n\t//}\n\t//didp(pWC) {\n\t//    const pLC = this.inverseMatrix.transformPoint(pWC)\n\t//    const didpLC = (pLC.y > 0\n\t//                ? pLC.unit()\n\t//                : V(pLC.x / Math.hypot(pLC.x, pLC.z), -1, pLC.z / Math.hypot(pLC.x, pLC.z))).times(this.normalDir)\n\t//    return this.inverseMatrix.transformVector(didpLC)\n\t//}\n\n\tflipped(): SemiEllipsoidSurface {\n\t\treturn new SemiEllipsoidSurface(\n\t\t\tthis.center,\n\t\t\tthis.f1,\n\t\t\tthis.f2,\n\t\t\tthis.f3.negated())\n\t}\n\n\tnormalSTFunc(): (s: number, t: number) => V3 {\n\t\t// ugh\n\t\t// paramtric ellipsoid point q(a, b)\n\t\t// normal1 == (dq(a, b) / da) X (dq(a, b) / db) (Cross product of partial derivatives\n\t\t// normal1 == cos b * (f2 X f3 * cos b * cos a + f3 X f1 * cos b * sin a + f1 X f2 * sin b)\n\t\treturn (a, b) => {\n\t\t\tconst {f1, f2, f3} = this\n\t\t\tconst normal = f2.cross(f3).times(Math.cos(b) * Math.cos(a))\n\t\t\t\t.plus(f3.cross(f1).times(Math.cos(b) * Math.sin(a)))\n\t\t\t\t.plus(f1.cross(f2).times(Math.sin(b)))\n\t\t\t\t//.times(Math.cos(b))\n\t\t\t\t.unit()\n\t\t\treturn normal\n\t\t}\n\t}\n\n\tnormalP(p: V3): V3 {\n\t\treturn this.pLCNormalWCMatrix.transformVector(this.inverseMatrix.transformPoint(p)).unit()\n\t}\n\n\tnormalST(s: number, t: number): V3 {\n\t\treturn this.pLCNormalWCMatrix.transformVector(V3.sphere(s, t)).unit()\n\t}\n\n\tstPFunc() {\n\t\treturn (pWC: V3) => {\n\t\t\tconst pLC = this.inverseMatrix.transformPoint(pWC)\n\t\t\tconst alpha = abs(pLC.angleXY())\n\t\t\tconst beta = Math.asin(clamp(pLC.z, -1, 1))\n\t\t\tassert(isFinite(alpha))\n\t\t\tassert(isFinite(beta))\n\t\t\treturn new V3(alpha, beta, 0)\n\t\t}\n\t}\n\n\tpSTFunc() {\n\t\t// this(a, b) = f1 cos a cos b + f2 sin a cos b + f2 sin b\n\t\treturn (alpha: number, beta: number) => {\n\t\t\treturn this.matrix.transformPoint(V3.sphere(alpha, beta))\n\t\t}\n\t}\n\n\tisSphere(): boolean {\n\t\treturn eq(this.f1.length(), this.f2.length())\n\t\t\t&& eq(this.f2.length(), this.f3.length())\n\t\t\t&& eq(this.f3.length(), this.f1.length())\n\t\t\t&& this.f1.isPerpendicularTo(this.f2)\n\t\t\t&& this.f2.isPerpendicularTo(this.f3)\n\t\t\t&& this.f3.isPerpendicularTo(this.f1)\n\t}\n\n\tisVerticalSpheroid(): boolean {\n\t\treturn eq(this.f1.length(), this.f2.length())\n\t\t\t&& this.f1.isPerpendicularTo(this.f2)\n\t\t\t&& this.f2.isPerpendicularTo(this.f3)\n\t\t\t&& this.f3.isPerpendicularTo(this.f1)\n\t}\n\n\tmainAxes(): SemiEllipsoidSurface {\n\t\t// q(a, b) = f1 cos a cos b + f2 sin a cos b + f3 sin b\n\t\t// q(s, t, u) = s * f1 + t * f2 + u * f3 with s² + t² + u² = 1\n\t\t// (del q(a, b) / del a) = f1 (-sin a) cos b  + f2 cos a cos b\n\t\t// (del q(a, b) / del b) = f1 cos a (-sin b) + f2 sin a (-sin b) + f2 cos b\n\t\t// del q(s, t, u) / del a = -t f1 + s f2\n\t\t// (del q(a, b) / del a) DOT q(a, b) == 0\n\t\t// (f1 (-sin a) cos b  + f2 cos a cos b) DOT (f1 cos a cos b + f2 sin a cos b + f2 sin b) == 0\n\t\t// (del q(a, b) / del b) DOT q(a, b) == 0\n\t\t// (f1 cos a (-sin b) + f2 sin a (-sin b) + f2 cos b) DOT (f1 cos a cos b + f2 sin a cos b + f2 sin b) == 0\n\n\t\t// Solve[\n\t\t// (f1 (-sin a) cos b  + f2 cos a cos b) * (f1 cos a cos b + f2 sin a cos b + f2 sin b) = 0,\n\t\t// (f1 cos a (-sin b) + f2 sin a (-sin b) + f2 cos b) * (f1 cos a cos b + f2 sin a cos b + f2 sin b) = 0}, a, b]\n\t\tconst {f1, f2, f3} = this\n\n\t\tif (eq0(f1.dot(f2)) && eq0(f2.dot(f3)) && eq0(f3.dot(f1))) {\n\t\t\treturn this\n\t\t}\n\n\t\t//const f = ([a, b], x?) => {\n\t\t//    const sinA = Math.sin(a), cosA = Math.cos(a), sinB = Math.sin(b), cosB = Math.cos(b)\n\t\t//    const centerToP = V3.add(f1.times(cosA * cosB), f2.times(sinA * cosB), f3.times(sinB))\n\t\t//    const centerToPdelA = f1.times(-sinA * cosB).plus(f2.times(cosA * cosB))\n\t\t//    const centerToPdelB = V3.add(f1.times(cosA * -sinB), f2.times(sinA * -sinB), f3.times(cosB))\n\t\t//    x && console.log(centerToP.sce, centerToPdelA.sce, centerToPdelB.sce)\n\t\t//    return [centerToP.dot(centerToPdelA), centerToP.dot(centerToPdelB)]\n\t\t//}\n\t\t//const mainF1Params = newtonIterate(f, [0, 0], 8), mainF1 = this.pSTFunc()(mainF1Params[0], mainF1Params[1])\n\t\t//console.log(f(mainF1Params, 1).sce)\n\t\t//const mainF2Params = newtonIterate(f, this.stPFunc()(f2.rejectedFrom(mainF1)).toArray(2), 8),\n\t\t//   mainF2 = this.pSTFunc()(mainF2Params[0], mainF2Params[1])\n\t\t//console.log(this.normalSTFunc()(mainF2Params[0], mainF2Params[1]).sce)\n\t\t//assert(mainF1.isPerpendicularTo(mainF2), mainF1, mainF2, mainF1.dot(mainF2), mainF1Params)\n\t\t//const mainF3Params = this.stPFunc()(mainF1.cross(mainF2)), mainF3 = this.pSTFunc()(mainF3Params[0],\n\t\t// mainF3Params[1]) return new EllipsoidSurface(this.center, mainF1, mainF2, mainF3)\n\n\t\tconst {U, SIGMA} = this.matrix.svd3()\n\t\tassert(SIGMA.isDiagonal())\n\t\tassert(U.isOrthogonal())\n\t\tconst U_SIGMA = U.times(SIGMA)\n\t\t// column vectors of U_SIGMA\n\t\tconst [mainF1, mainF2, mainF3] = arrayFromFunction(3, i => new V3(U_SIGMA.m[i], U_SIGMA.m[i + 4], U_SIGMA.m[i + 8]))\n\t\treturn new SemiEllipsoidSurface(this.center, mainF1, mainF2, mainF3)\n\t}\n\n\tcontainsPoint(p: V3) {\n\t\treturn eq0(this.implicitFunction()(p))\n\t}\n\n\tboundsFunction() {\n\t\treturn (a: number, b: number) => between(a, 0, PI) && between(b, -PI, PI)\n\t}\n\n\tvolume(): number {\n\t\treturn 4 / 3 * Math.PI * this.f1.dot(this.f2.cross(this.f3))\n\t}\n\n\tloopContainsPoint(loop: Edge[], p: V3): PointVsFace {\n\t\tif (!this.containsPoint(p)) return PointVsFace.OUTSIDE\n\t\tassertVectors(p)\n\t\tconst pLCXY = this.inverseMatrix.transformPoint(p).withElement('z', 0)\n\t\tconst testLine = new SemiEllipseCurve(\n\t\t\tthis.center,\n\t\t\tthis.f3,\n\t\t\tpLCXY.likeO() ? this.f2 : this.matrix.transformVector(pLCXY.unit()))\n\t\tconst pT = testLine.pointT(p)\n\n\t\tif (P3.normalOnAnchor(this.f2.unit(), this.center).containsPoint(p)) {\n\t\t\tlet edgeT\n\t\t\treturn loop.some(edge => edge.curve.containsPoint(p) && le(edge.minT, edgeT = edge.curve.pointT(p)) && le(edgeT, edge.maxT))\n\t\t\t\t? PointVsFace.ON_EDGE\n\t\t\t\t: PointVsFace.OUTSIDE\n\t\t}\n\n\t\tconst lineOut = testLine.normal\n\t\tconst testPlane = P3.normalOnAnchor(testLine.normal, p)\n\t\tconst colinearEdges = loop.map((edge) => testLine.isColinearTo(edge.curve))\n\t\tlet inside = false\n\n\t\tfunction logIS(isP: V3) {\n\t\t\tconst isT = testLine.pointT(isP)\n\t\t\tif (eq(pT, isT)) {\n\t\t\t\treturn true\n\t\t\t} else if (pT < isT && le(isT, PI)) {\n\t\t\t\tinside = !inside\n\t\t\t}\n\t\t}\n\n\t\tfor (let edgeIndex = 0; edgeIndex < loop.length; edgeIndex++) {\n\t\t\tconst edge = loop[edgeIndex]\n\t\t\tconst nextEdgeIndex = (edgeIndex + 1) % loop.length, nextEdge = loop[nextEdgeIndex]\n\t\t\t//console.log(edge.toSource()) {p:V(2, -2.102, 0),\n\t\t\tif (colinearEdges[edgeIndex]) {\n\t\t\t\tlet edgeT\n\t\t\t\tif (edge.curve.containsPoint(p) && le(edge.minT, edgeT = edge.curve.pointT(p)) && le(edgeT, edge.maxT)) {\n\t\t\t\t\treturn PointVsFace.ON_EDGE\n\t\t\t\t}\n\t\t\t\t// edge colinear to intersection\n\t\t\t\tconst nextInside = colinearEdges[nextEdgeIndex] || dotCurve(lineOut, nextEdge.aDir, nextEdge.aDDT) < 0\n\t\t\t\tif (!nextInside && testLine.containsPoint(edge.b)) {\n\t\t\t\t\tif (logIS(edge.b)) return PointVsFace.ON_EDGE\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (const edgeT of edge.edgeISTsWithPlane(testPlane)) {\n\t\t\t\t\tif (edgeT == edge.bT) {\n\t\t\t\t\t\tif (!testLine.containsPoint(edge.b)) continue\n\t\t\t\t\t\t// endpoint lies on intersection testLine\n\t\t\t\t\t\tconst edgeInside = dotCurve2(edge.curve, edge.bT, lineOut, -sign(edge.deltaT())) < 0 // TODO:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t // bDDT\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t // negated?\n\t\t\t\t\t\tconst nextInside = colinearEdges[nextEdgeIndex] || dotCurve(lineOut, nextEdge.aDir, nextEdge.aDDT) < 0\n\t\t\t\t\t\tif (edgeInside != nextInside) {\n\t\t\t\t\t\t\tif (logIS(edge.b)) return PointVsFace.ON_EDGE\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (edgeT != edge.aT) {\n\t\t\t\t\t\tconst p = edge.curve.at(edgeT)\n\t\t\t\t\t\tif (!testLine.containsPoint(p)) continue\n\t\t\t\t\t\t// edge crosses testLine, neither starts nor ends on it\n\t\t\t\t\t\tif (logIS(p)) return PointVsFace.ON_EDGE\n\t\t\t\t\t\t// TODO: tangents?\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn inside ? PointVsFace.INSIDE : PointVsFace.OUTSIDE\n\n\t}\n\n\tzDirVolumeForLoop2(loop: Edge[]): number {\n\t\tconst angles = this.inverseMatrix.getZ().toAngles()\n\t\tconst T = M4.rotateY(-angles.theta).times(M4.rotateZ(-angles.phi)).times(this.inverseMatrix)\n\t\tconst rot90x = M4.rotateX(PI / 2)\n\t\tlet totalVolume = 0\n\t\tassert(V3.X.isParallelTo(T.transformVector(V3.Z)))\n\t\t//const zDistanceFactor = toT.transformVector(V3.Z).length()\n\t\tloop.map(edge => edge.transform(T)).forEach((edge, edgeIndex, edges) => {\n\t\t\tconst nextEdgeIndex = (edgeIndex + 1) % edges.length, nextEdge = edges[nextEdgeIndex]\n\n\t\t\tfunction f(t) {\n\t\t\t\tconst at2d = edge.curve.at(t).withElement('x', 0)\n\t\t\t\tconst result = 1 / 3 * (1 - (at2d.y ** 2 + at2d.z ** 2)) * edge.tangentAt(t).dot(rot90x.transformVector(at2d.unit()))\n\t\t\t\treturn result\n\t\t\t}\n\n\t\t\t//if (edge.)\n\t\t\tif (edge.b.like(V3.X)) {\n\t\t\t\tconst angleDiff = (edge.bDir.angleRelativeNormal(nextEdge.aDir, V3.X) + 2 * PI) % (2 * PI)\n\t\t\t\ttotalVolume += 2 / 3 * angleDiff\n\t\t\t}\n\t\t\tif (edge.b.like(V3.X.negated())) {\n\t\t\t\tconst angleDiff = (edge.bDir.angleRelativeNormal(nextEdge.aDir, V3.X) + 2 * PI) % (2 * PI)\n\t\t\t\ttotalVolume += 2 / 3 * angleDiff\n\t\t\t}\n\t\t\tconst volume = gaussLegendreQuadrature24(f, edge.aT, edge.bT)\n\t\t\ttotalVolume += volume\n\t\t})\n\n\t\treturn totalVolume * this.f1.dot(this.f2.cross(this.f3))\n\t}\n\n\tsurfaceAreaApprox(): number {\n\t\t// See https://en.wikipedia.org/wiki/Ellipsoid#Surface_area\n\t\tconst mainAxes = this.mainAxes(),\n\t\t\ta = mainAxes.f1.length(),\n\t\t\tb = mainAxes.f2.length(),\n\t\t\tc = mainAxes.f3.length()\n\t\tconst p = 1.6075\n\t\treturn 4 * PI * Math.pow((Math.pow(a * b, p) + Math.pow(b * c, p) + Math.pow(c * a, p)) / 3, 1 / p)\n\t}\n\n\tsurfaceArea(): number {\n\t\t// See https://en.wikipedia.org/wiki/Ellipsoid#Surface_area\n\t\tconst mainAxes = this.mainAxes(),\n\t\t\tf1l = mainAxes.f1.length(),\n\t\t\tf2l = mainAxes.f2.length(),\n\t\t\tf3l = mainAxes.f3.length(),\n\t\t\t[c, b, a] = [f1l, f2l, f3l].sort(MINUS)\n\n\t\t// https://en.wikipedia.org/w/index.php?title=Spheroid&oldid=761246800#Area\n\t\tfunction spheroidArea(a: number, c: number) {\n\t\t\tif (c < a) {\n\t\t\t\tconst eccentricity2 = 1 - c ** 2 / a ** 2\n\t\t\t\tconst eccentricity = Math.sqrt(eccentricity2)\n\t\t\t\treturn 2 * PI * a ** 2 * (1 + (1 - eccentricity2) / Math.sqrt(eccentricity) * Math.atanh(eccentricity))\n\t\t\t} else {\n\t\t\t\tconst eccentricity = Math.sqrt(1 - a ** 2 / c ** 2)\n\t\t\t\treturn 2 * PI * a ** 2 * (1 + c / a / eccentricity * Math.asin(eccentricity))\n\t\t\t}\n\t\t}\n\n\t\tif (eq(a, b)) {\n\t\t\treturn spheroidArea(a, c)\n\t\t} else if (eq(b, c)) {\n\t\t\treturn spheroidArea(b, a)\n\t\t} else if (eq(c, a)) {\n\t\t\treturn spheroidArea(c, b)\n\t\t}\n\n\t\tconst phi = Math.acos(c / a)\n\t\tconst k2 = a ** 2 * (b ** 2 - c ** 2) / (b ** 2 * (a ** 2 - c ** 2)), k = Math.sqrt(k2)\n\t\tconst incompleteEllipticInt1 = gaussLegendreQuadrature24(phi => Math.pow(1 - k2 * Math.sin(phi) ** 2, -0.5), 0, phi)\n\t\tconst incompleteEllipticInt2 = gaussLegendreQuadrature24(phi => Math.pow(1 - k2 * Math.sin(phi) ** 2, 0.5), 0, phi)\n\t\treturn 2 * PI * c ** 2 + 2 * PI * a * b / Math.sin(phi) * (incompleteEllipticInt2 * Math.sin(phi) ** 2 + incompleteEllipticInt1 * Math.cos(phi) ** 2)\n\t}\n\n\tgetSeamPlane(): P3 {\n\t\tconst plane = P3.forAnchorAndPlaneVectors(this.center, this.f1, this.f3)\n\t\treturn plane.normal1.dot(this.f2) < 0 ? plane : plane.flipped()\n\t}\n\n\tasEllipsoidSurface() {\n\t\treturn new EllipsoidSurface(this.center, this.f1, this.f2, this.f3)\n\t}\n\n\tgetExtremePoints(): V3[] {\n\t\tassert(this.isSphere())\n\t\tconst thisRadius = this.f1.length()\n\t\t// points on the edge of the hemisphere don't need to be included, because if they can at most be on the edge\n\t\t// of a face hemisphere can be orientated anyway, so dot with this.f2 to make sure they are \"inside\"\n\t\treturn [V3.X, V3.X.negated(), V3.Y, V3.Y.negated(), V3.Z, V3.Z.negated()]\n\t\t\t.filter(p => lt(0, p.dot(this.f2)))\n\t\t\t.map(p => p.times(thisRadius).plus(this.center))\n\t}\n}\n\nSemiEllipsoidSurface.prototype.uStep = PI / 16\nSemiEllipsoidSurface.prototype.vStep = PI / 16\nSemiEllipsoidSurface.prototype.sMin = 0\nSemiEllipsoidSurface.prototype.sMax = PI\nSemiEllipsoidSurface.prototype.tMin = -PI / 2\nSemiEllipsoidSurface.prototype.tMax = PI / 2","import {arrayFromFunction, assert, assertInst, isCCW, M4, V, V3, callsce} from 'ts3dutils';\nimport {Mesh, pushQuad} from 'tsgl';\n\nimport {Curve, Edge, ImplicitSurface, L3, P3, ParametricSurface, PointVsFace, Surface,} from '../index';\n\nexport class PlaneSurface extends ParametricSurface implements ImplicitSurface {\n\treadonly matrix: M4;\n\n\tconstructor(readonly plane: P3,\n\t\t\t\treadonly right: V3 = plane.normal1.getPerpendicular().unit(),\n\t\t\t\treadonly up: V3 = plane.normal1.cross(right).unit(),\n\t\t\t\treadonly sMin: number = -100,\n\t\t\t\treadonly sMax: number = 100,\n\t\t\t\treadonly tMin: number = -100,\n\t\t\t\treadonly tMax: number = 100) {\n\t\tsuper();\n\t\tassertInst(P3, plane);\n\t\tassert(this.right.cross(this.up).like(this.plane.normal1));\n\t\tthis.matrix = M4.forSys(right, up, plane.normal1, plane.anchor);\n\t}\n\n    toSource(rounder: (x: number) => number = x => x): string {\n        return callsce.call(undefined, 'new PlaneSurface', ...this.getConstructorParameters());\n    }\n\n\tstatic throughPoints(a: V3, b: V3, c: V3): PlaneSurface {\n\t\treturn new PlaneSurface(P3.throughPoints(a, b, c));\n\t}\n\n\tisCoplanarTo(surface: Surface): boolean {\n\t\treturn surface instanceof PlaneSurface && this.plane.isCoplanarToPlane(surface.plane);\n\t}\n\n\tisTsForLine(line: L3): number[] {\n\t\treturn line.isTsWithPlane(this.plane);\n\t}\n\n\tlike(surface: Surface): boolean {\n\t\treturn surface instanceof PlaneSurface && this.plane.like(surface.plane);\n\t}\n\n\tpST(s: number, t: number): V3 {\n\t\treturn this.matrix.transformPoint(new V3(s, t, 0));\n\t}\n\n\timplicitFunction(): (pWC: V3) => number {\n\t\treturn p => this.plane.distanceToPointSigned(p);\n\t}\n\n\tisCurvesWithSurface(surface2: Surface): Curve[] {\n\t\tif (surface2 instanceof PlaneSurface) {\n\t\t\treturn this.isCurvesWithPlane(surface2.plane);\n\t\t}\n\t\treturn super.isCurvesWithSurface(surface2);\n\t}\n\n\tisCurvesWithPlane(plane: P3): L3[] {\n\t\tif (this.plane.isParallelToPlane(plane)) {\n\t\t\treturn [];\n\t\t}\n\t\treturn [this.plane.intersectionWithPlane(plane)];\n\t}\n\n\tedgeLoopCCW(contour: Edge[]): boolean {\n\t\treturn isCCW(contour.flatMap(edge => edge.points()), this.plane.normal1);\n\t\t// let totalAngle = 0\n\t\t// for (let i = 0; i < contour.length; i++) {\n\t\t// \tconst ipp = (i + 1) % contour.length\n\t\t// \tconst edge = contour[i], nextEdge = contour[ipp]\n\t\t// \tassert(edge.b.like(nextEdge.a), 'edges dont form a loop')\n\t\t// \tif (edge.curve instanceof SemiEllipseCurve) {\n\t\t// \t\ttotalAngle += edge.rotViaPlane(this.plane.normal1)\n\t\t// \t\t// console.log(edge.toString(), edge.rotViaPlane(this.plane.normal1))\n\t\t// \t}\n\t\t// \ttotalAngle += edge.bDir.angleRelativeNormal(nextEdge.aDir, this.plane.normal1)\n\t\t// }\n\t\t// const result = totalAngle > 0\n\t\t// const result2 = PlaneFace.prototype.calculateArea.apply({surface: this, contour: contour}).area > 0\n\t\t// //assert (result == result2)\n\t\t// return result2\n\t}\n\n\tloopContainsPoint(loop: Edge[], p: V3): PointVsFace {\n\t\tconst dir = this.right.plus(this.up.times(0.123)).unit();\n\t\tconst line = new L3(p, dir);\n\t\tconst lineOut = dir.cross(this.plane.normal1);\n\t\treturn Surface.loopContainsPointGeneral(loop, p, line, lineOut);\n\t}\n\n\tstPFunc() {\n\t\tconst matrixInverse = this.matrix.inversed();\n\t\treturn function (pWC: V3) {\n\t\t\treturn matrixInverse.transformPoint(pWC);\n\t\t};\n\t}\n\n\tpointFoot(pWC: V3): V3 {\n\t\treturn this.stP(pWC);\n\t}\n\n\tnormalP(pWC: V3): V3 {\n\t\treturn this.plane.normal1;\n\t}\n\n\tcontainsPoint(p) {\n\t\treturn this.plane.containsPoint(p);\n\t}\n\n\tcontainsCurve(curve: Curve): boolean {\n\t\treturn this.plane.containsCurve(curve);\n\t}\n\n\ttransform(m4: M4) {\n\t\treturn new PlaneSurface(this.plane.transform(m4)) as this;\n\t}\n\n\tflipped() {\n\t\treturn new PlaneSurface(this.plane.flipped(), this.right, this.up.negated()) as this;\n\t}\n\n\tgetConstructorParameters(): any[] {\n\t\treturn [this.plane, this.right, this.up];\n\t}\n\n\ttoMesh(xMin: number = -10, xMax: number = 10, yMin: number = -10, yMax: number = 10) {\n\t\tconst mesh = new Mesh()\n\t\t\t.addIndexBuffer('TRIANGLES')\n\t\t\t.addVertexBuffer('normals', 'LGL_Normal');\n\t\tconst matrix = M4.forSys(this.right, this.up, this.plane.normal1, this.plane.anchor);\n\t\tmesh.vertices = [V(xMin, yMin), V(xMax, yMin), V(xMin, yMax), V(xMax, yMax)].map(p => matrix.transformPoint(p));\n\t\tmesh.normals = arrayFromFunction(4, i => this.plane.normal1);\n\t\tpushQuad(mesh.TRIANGLES, false, 0, 1, 2, 3);\n\t\tmesh.compile();\n\t\treturn mesh;\n\t}\n\n\tdpds(): (s: number, t: number) => V3 {\n\t\treturn () => this.right;\n\t}\n\n\tdpdt(): (s: number, t: number) => V3 {\n\t\treturn () => this.up;\n\t}\n\n\tequals(obj: any): boolean {\n\t\treturn undefined;\n\t}\n\n\tdidp(pWC: V3): V3 {\n\t\treturn this.plane.normal1;\n\t}\n}","\nimport {V3, assertNever, TAU, NLA_PRECISION, M4, gaussLegendreQuadrature24, glqInSteps} from 'ts3dutils'\nimport {ConicSurface, Edge, PlaneSurface, SemiCylinderSurface, SemiEllipseCurve, SemiEllipsoidSurface, HyperbolaCurve, ParabolaCurve, CylinderSurface, EllipseCurve, EllipsoidSurface } from '../index'\n\nconst {PI }= Math\n\nexport const ZDirVolumeVisitor: { [className: string]: (allEdges: Edge[]) => { volume: number, centroid: any } } = {\n\t/**\n\t * at(t)\n\t * |\\                                    ^\n\t * | \\ at(t).projectedOn(dir)             \\  dir\n\t * |  \\                                    \\\n\t * |   \\ at(t).rejectedFrom(dir)\n\t * |   |\n\t * |___|\n\t *        z = 0\n\t *\n\t *\n\t * A = ((at(t) + at(t).rejectedFrom(dir)) / 2).z * at(t).projectedOn(dir).lengthXY()\n\t * scaling = tangentAt(t) DOT dir.cross(V3.Z).unit()\n\t */\n\t[ConicSurface.name](this: ConicSurface, allEdges: Edge[]): { volume: number, centroid: any } {\n\t\t// INT[edge.at; edge.bT] (at(t) DOT dir) * (at(t) - at(t).projectedOn(dir) / 2).z\n\t\tconst totalVolume = allEdges.map(edge => {\n\t\t\tif (edge.curve instanceof SemiEllipseCurve || edge.curve instanceof HyperbolaCurve || edge.curve instanceof ParabolaCurve) {\n\t\t\t\tconst f = (t) => {\n\t\t\t\t\tconst at = edge.curve.at(t), tangent = edge.tangentAt(t)\n\t\t\t\t\treturn (at.z + at.rejectedFrom(this.dir).z) / 2 * at.projectedOn(this.dir).lengthXY() *\n\t\t\t\t\t\ttangent.dot(V3.Z.cross(this.dir).unit())\n\t\t\t\t}\n\t\t\t\t// ellipse with normal1 parallel to dir need to be counted negatively so CCW faces result in a positive\n\t\t\t\t// area\n\t\t\t\tconst sign = edge.curve instanceof SemiEllipseCurve\n\t\t\t\t\t? -Math.sign(edge.curve.normal.dot(this.dir))\n\t\t\t\t\t: -Math.sign(this.center.to(edge.curve.center).cross(edge.curve.f1).dot(this.dir))\n\t\t\t\tconst val = glqInSteps(f, edge.aT, edge.bT, 1)\n\t\t\t\treturn val * sign\n\t\t\t} else if (edge.curve instanceof L3) {\n\t\t\t\treturn 0\n\t\t\t} else {\n\t\t\t\tassertNever()\n\t\t\t}\n\t\t}).sum()\n\n\t\treturn {volume: totalVolume * Math.sign(this.normal.dot(this.dir))}\n\t},\n\n\t[PlaneSurface.name](): { centroid: V3, volume: number } {\n\t\tconst {centroid, area} = this.calculateArea()\n\t\treturn {\n\t\t\tvolume: this.surface.plane.normal1.z * centroid.z * area,\n\t\t\tcentroid: new V3(centroid.x, centroid.y, centroid.z / 2),\n\t\t}\n\n\t},\n\t/**\n\t * at(t)\n\t * |\\                                    ^\n\t * | \\ at(t).projectedOn(dir1)            \\  dir1\n\t * |  \\                                    \\\n\t * |   \\ at(t).rejectedFrom(dir1)\n\t * |   |\n\t * |___|\n\t *        z = 0\n\t *\n\t *\n\t * A = ((at(t) + at(t).rejectedFrom(dir1)) / 2).z * at(t).projectedOn(dir1).lengthXY()\n\t * scaling = tangentAt(t) DOT dir1.cross(V3.Z).unit()\n\t */\n\t[SemiCylinderSurface.name](this: SemiCylinderSurface, allEdges: Edge[]): { volume: number, centroid: any } {\n\t\tif (V3.Z.cross(this.dir).likeO()) return {volume: 0}\n\t\t// the tangent needs to be projected onto a vector which is perpendicular to the volume-slices\n\t\tconst scalingVector = this.dir.cross(V3.Z).unit()\n\t\t// the length of the base of the trapezoid is calculated by dotting with the baseVector\n\t\tconst baseVector = this.dir.rejectedFrom(V3.Z).unit()\n\t\t// INT[edge.at; edge.bT] (at(t) DOT dir1) * (at(t) - at(t).projectedOn(dir) / 2).z\n\t\tconst totalArea = edges.map(edge => {\n\t\t\tif (edge.curve instanceof SemiEllipseCurve) {\n\t\t\t\tconst f = (t) => {\n\t\t\t\t\t// use curve.tangent not edge.tangent, reverse edges are handled by the integration boundaries\n\t\t\t\t\tconst at = edge.curve.at(t), tangent = edge.curve.tangentAt(t)\n\t\t\t\t\tconst area = (at.z + at.rejectedFrom(this.dir).z) / 2 * at.projectedOn(this.dir).dot(baseVector)\n\t\t\t\t\tconst scale = tangent.dot(scalingVector)\n\t\t\t\t\t//assert(Math.sign(scale) == Math.sign(this.normalP(at).dot(V3.Z)), this.normalP(at).dot(V3.Z))\n\t\t\t\t\t//console.log(\n\t\t\t\t\t//\t\"\", t,\n\t\t\t\t\t//\t\",\", area,\n\t\t\t\t\t//\t\",\", scale,\n\t\t\t\t\t//\t\"atz\", at.z)\n\t\t\t\t\treturn area * scale\n\t\t\t\t}\n\t\t\t\t// ellipse with normal parallel to dir1 need to be counted negatively so CCW faces result in a positive\n\t\t\t\t// area\n\t\t\t\tconst sign = -Math.sign(edge.curve.normal.dot(this.dir))\n\t\t\t\tconst val = glqInSteps(f, edge.aT, edge.bT, 1)\n\t\t\t\treturn val * sign\n\t\t\t} else if (edge.curve instanceof L3) {\n\t\t\t\treturn 0\n\t\t\t} else {\n\t\t\t\tassertNever()\n\t\t\t}\n\t\t}).sum()\n\n\t\treturn {volume: totalArea * Math.sign(this.baseCurve.normal.dot(this.dir))}\n\t},\n\n\n\t/**\n\t * at(t)\n\t * |\\                                    ^\n\t * | \\ at(t).projectedOn(dir1)            \\  dir1\n\t * |  \\                                    \\\n\t * |   \\ at(t).rejectedFrom(dir1)\n\t * |   |\n\t * |___|\n\t *        z = 0\n\t *\n\t *\n\t * A = ((at(t) + at(t).rejectedFrom(dir1)) / 2).z * at(t).projectedOn(dir1).lengthXY()\n\t * scaling = tangentAt(t) DOT dir1.cross(V3.Z).unit()\n\t */\n\t[CylinderSurface.name](this: CylinderSurface, edges: Edge[]): { volume: number } {\n\t\tif (V3.Z.cross(this.dir).likeO()) return {volume: 0}\n\t\t// the tangent needs to be projected onto a vector which is perpendicular to the volume-slices\n\t\tconst scalingVector = this.dir.cross(V3.Z).unit()\n\t\t// the length of the base of the trapezoid is calculated by dotting with the baseVector\n\t\tconst baseVector = this.dir.rejectedFrom(V3.Z).unit()\n\t\t// INT[edge.at; edge.bT] (at(t) DOT dir1) * (at(t) - at(t).projectedOn(dir) / 2).z\n\t\tconsole.log('scalingVector', scalingVector.sce)\n\t\tconst totalArea = edges.map(edge => {\n\t\t\tif (edge.curve instanceof EllipseCurve) {\n\t\t\t\tconst f = (t) => {\n\t\t\t\t\t// use curve.tangent not edge.tangent, reverse edges are handled by the integration boundaries\n\t\t\t\t\tconst at = edge.curve.at(t), tangent = edge.curve.tangentAt(t)\n\t\t\t\t\tconst area = (at.z + at.rejectedFrom(this.dir).z) / 2 * at.projectedOn(this.dir).dot(baseVector)\n\t\t\t\t\tconst scale = tangent.dot(scalingVector)\n\t\t\t\t\t//assert(Math.sign(scale) == Math.sign(this.normalP(at).dot(V3.Z)), this.normalP(at).dot(V3.Z))\n\t\t\t\t\t//console.log(\n\t\t\t\t\t//\t\"\", t,\n\t\t\t\t\t//\t\",\", area,\n\t\t\t\t\t//\t\",\", scale,\n\t\t\t\t\t//\t\"atz\", at.z)\n\t\t\t\t\treturn area * scale\n\t\t\t\t}\n\t\t\t\t// ellipse with normal parallel to dir1 need to be counted negatively so CCW faces result in a positive\n\t\t\t\t// area\n\t\t\t\tconst sign = -Math.sign(edge.curve.normal.dot(this.dir))\n\t\t\t\tconst val = glqInSteps(f, edge.aT, edge.bT, 1)\n\t\t\t\tconsole.log('edge', edge, val, sign)\n\t\t\t\treturn val * sign\n\t\t\t} else if (edge.curve instanceof L3) {\n\t\t\t\treturn 0\n\t\t\t} else {\n\t\t\t\tassertNever()\n\t\t\t}\n\t\t}).sum()\n\n\t\treturn {volume: totalArea * Math.sign(this.baseCurve.normal.dot(this.dir))}\n\t},\n\n\t// volume does scale linearly, so this can be done in the local coordinate system\n\t// first transform edges with inverse matrix\n\t// then rotate everything edges so the original world Z dir again points in Z dir\n\t// now we have a problem because edges which originally  did not cross the seam plane can now be anywhere\n\t// we need to split the transformed loop along the local seam plane\n\t// and then sum the zDir volumes of the resulting loops\n\t[EllipsoidSurface.name](this: EllipsoidSurface, loop: Edge[]): { centroid: V3, volume: number } {\n\t\tconst angles = this.inverseMatrix.transformVector(V3.Z).toAngles()\n\t\tconst T = M4.rotateAB(this.inverseMatrix.transformVector(V3.Z), V3.Z).times(M4.rotateZ(-angles.phi)).times(this.inverseMatrix)\n\n\t\tfunction calc(loop) {\n\t\t\tlet totalVolume = 0\n\t\t\tassert(V3.Z.isParallelTo(T.transformVector(V3.Z)))\n\t\t\t//const zDistanceFactor = toT.transformVector(V3.Z).length()\n\t\t\tloop.map(edge => edge.transform(T)).forEach((edge, edgeIndex, edges) => {\n\t\t\t\tconst nextEdgeIndex = (edgeIndex + 1) % edges.length, nextEdge = edges[nextEdgeIndex]\n\n\t\t\t\tfunction f(t) {\n\t\t\t\t\tconst at = edge.curve.at(t), tangent = edge.curve.tangentAt(t)\n\t\t\t\t\tconst r = at.lengthXY()\n\t\t\t\t\tconst at2d = at.withElement('z', 0)\n\t\t\t\t\tconst angleAdjusted = (at.angleXY() + TAU - NLA_PRECISION) % TAU + NLA_PRECISION\n\t\t\t\t\tconst result = angleAdjusted * Math.sqrt(1 - r * r) * r * Math.abs(tangent.dot(at2d.unit())) * Math.sign(tangent.z)\n\t\t\t\t\t//console.log(\"at2d\", at2d.sce, \"result\", result, 'angle', angleAdjusted, '\n\t\t\t\t\t// edge.tangentAt(t).dot(at2d.unit())', edge.tangentAt(t).dot(at2d.unit()))\n\t\t\t\t\treturn result\n\t\t\t\t}\n\n\t\t\t\tconst volume = gaussLegendreQuadrature24(f, edge.aT, edge.bT)\n\t\t\t\tconsole.log('edge', edge, 'volume', volume)\n\t\t\t\ttotalVolume += volume\n\t\t\t})\n\t\t\treturn totalVolume\n\t\t}\n\n\t\tconst [front, back] = EllipsoidSurface.splitOnPlaneLoop(loop.map(edge => edge.transform(T)), ccw)\n\t\tconst localVolume = calc(front, PI) + calc(back, -PI)\n\n\t\treturn {area: localVolume * this.f1.dot(this.f2.cross(this.f3)), centroid: undefined}\n\t},\n\tzDirVolumeForLoop2(loop: Edge[]): number {\n\t\tconst angles = this.inverseMatrix.getZ().toAngles()\n\t\tconst T = M4.rotateY(-angles.theta).times(M4.rotateZ(-angles.phi)).times(this.inverseMatrix)\n\t\tconst rot90x = M4.rotateX(PI / 2)\n\t\tlet totalVolume = 0\n\t\tassert(V3.X.isParallelTo(T.transformVector(V3.Z)))\n\t\t//const zDistanceFactor = toT.transformVector(V3.Z).length()\n\t\tloop.map(edge => edge.transform(T)).forEach((edge, edgeIndex, edges) => {\n\t\t\tconst nextEdgeIndex = (edgeIndex + 1) % edges.length, nextEdge = edges[nextEdgeIndex]\n\n\t\t\tfunction f(t) {\n\t\t\t\tconst at2d = edge.curve.at(t).withElement('x', 0)\n\t\t\t\tconst result = 1 / 3 * (1 - (at2d.y ** 2 + at2d.z ** 2)) * edge.tangentAt(t).dot(rot90x.transformVector(at2d.unit()))\n\t\t\t\tconsole.log('at2d', at2d.sce, 'result', result)\n\t\t\t\treturn result\n\t\t\t}\n\n\t\t\t//if (edge.)\n\t\t\tif (edge.b.like(V3.X)) {\n\t\t\t\tconst angleDiff = (edge.bDir.angleRelativeNormal(nextEdge.aDir, V3.X) + 2 * PI) % (2 * PI)\n\t\t\t\ttotalVolume += 2 / 3 * angleDiff\n\t\t\t\tconsole.log('xaa')\n\t\t\t}\n\t\t\tif (edge.b.like(V3.X.negated())) {\n\t\t\t\tconst angleDiff = (edge.bDir.angleRelativeNormal(nextEdge.aDir, V3.X) + 2 * PI) % (2 * PI)\n\t\t\t\ttotalVolume += 2 / 3 * angleDiff\n\t\t\t\tconsole.log('xbb')\n\t\t\t}\n\t\t\tconst volume = gaussLegendreQuadrature24(f, edge.aT, edge.bT)\n\t\t\tconsole.log('edge', edge, 'volume', volume)\n\t\t\ttotalVolume += volume\n\t\t})\n\n\t\treturn totalVolume * this.f1.dot(this.f2.cross(this.f3))\n\t},\n\n\t// volume does scale linearly, so this can be done in the local coordinate system\n\t// first transform edges with inverse matrix\n\t// then rotate everything edges so the original world Z dir again points in Z dir\n\t// now we have a problem because edges which originally  did not cross the seam plane can now be anywhere\n\t// we need to split the transformed loop along the local seam plane\n\t// and then sum the zDir volumes of the resulting loops\n\t[SemiEllipsoidSurface.name](loop: Edge[]): { volume: number, centroid: V3 } {\n\t\tconst angles = this.inverseMatrix.transformVector(V3.Z).toAngles()\n\t\tconst T = M4.rotateAB(this.inverseMatrix.transformVector(V3.Z), V3.Z).times(M4.rotateZ(-angles.phi)).times(this.inverseMatrix)\n\n\t\tfunction calc(loop) {\n\t\t\tlet totalVolume = 0\n\t\t\tassert(V3.Z.isParallelTo(T.transformVector(V3.Z)))\n\t\t\t//const zDistanceFactor = toT.transformVector(V3.Z).length()\n\t\t\tloop.map(edge => edge.transform(T)).forEach((edge, edgeIndex, edges) => {\n\t\t\t\tconst nextEdgeIndex = (edgeIndex + 1) % edges.length, nextEdge = edges[nextEdgeIndex]\n\n\t\t\t\tfunction f(t) {\n\t\t\t\t\tconst at = edge.curve.at(t), tangent = edge.curve.tangentAt(t)\n\t\t\t\t\tconst r = at.lengthXY()\n\t\t\t\t\tconst at2d = at.withElement('z', 0)\n\t\t\t\t\tconst angleAdjusted = (at.angleXY() + TAU - NLA_PRECISION) % TAU + NLA_PRECISION\n\t\t\t\t\tconst result = angleAdjusted * Math.sqrt(1 - r * r) * r * Math.abs(tangent.dot(at2d.unit())) * Math.sign(tangent.z)\n\t\t\t\t\t//console.log(\"at2d\", at2d.sce, \"result\", result, 'angle', angleAdjusted, '\n\t\t\t\t\t// edge.tangentAt(t).dot(at2d.unit())', edge.tangentAt(t).dot(at2d.unit()))\n\t\t\t\t\treturn result\n\t\t\t\t}\n\n\t\t\t\tconst volume = gaussLegendreQuadrature24(f, edge.aT, edge.bT)\n\t\t\t\ttotalVolume += volume\n\t\t\t})\n\t\t\treturn totalVolume\n\t\t}\n\n\t\tconst [front, back] = SemiEllipsoidSurface.splitOnPlaneLoop(loop.map(edge => edge.transform(T)), ccw)\n\t\tconst localVolume = calc(front, PI) + calc(back, -PI)\n\n\t\treturn {volume: localVolume * this.f1.dot(this.f2.cross(this.f3)), centroid: undefined}\n\t},\n}","import {assert, assertNever, eq, glqInSteps, V3} from 'ts3dutils'\n\nimport {\n\tBezierCurve, ConicSurface, dotCurve, Edge, EllipseCurve, HyperbolaCurve, L3, ParabolaCurve, PlaneSurface,\n\tProjectedCurveSurface, SemiCylinderSurface, SemiEllipseCurve, StraightEdge, CylinderSurface, EllipsoidSurface,\n} from '../index'\n\nconst {PI} = Math\n\n\nexport const CalculateAreaVisitor = {\n\t[ConicSurface.name](this: ConicSurface, edges: Edge[]): number {\n\t\t// calculation cannot be done in local coordinate system, as the area doesnt scale proportionally\n\t\tconst totalArea = edges.map(edge => {\n\t\t\tif (edge.curve instanceof SemiEllipseCurve || edge.curve instanceof HyperbolaCurve || edge.curve instanceof ParabolaCurve) {\n\t\t\t\tconst f = (t) => {\n\t\t\t\t\tconst at = edge.curve.at(t), tangent = edge.tangentAt(t)\n\t\t\t\t\treturn at.minus(this.center).cross(tangent.rejectedFrom(this.dir)).length() / 2\n\t\t\t\t}\n\t\t\t\t// ellipse with normal1 parallel to dir1 need to be counted negatively so CCW faces result in a\n\t\t\t\t// positive area hyperbola normal1 can be perpendicular to\n\t\t\t\tconst sign = edge.curve instanceof SemiEllipseCurve\n\t\t\t\t\t? -Math.sign(edge.curve.normal.dot(this.dir))\n\t\t\t\t\t: -Math.sign(this.center.to(edge.curve.center).cross(edge.curve.f1).dot(this.dir))\n\t\t\t\treturn glqInSteps(f, edge.aT, edge.bT, 4) * sign\n\t\t\t} else if (edge.curve instanceof L3) {\n\t\t\t\treturn 0\n\t\t\t} else {\n\t\t\t\tassertNever()\n\t\t\t}\n\t\t}).sum()\n\t\t// if the cylinder faces inwards, CCW faces will have been CW, so we need to reverse that here\n\t\t// Math.abs is not an option as \"holes\" may also be passed\n\t\treturn totalArea * Math.sign(this.normal.dot(this.dir))\n\t},\n\n\t[PlaneSurface.name](this: PlaneSurface, edges: Edge[]) {\n\t\tlet centroid = V3.O, tcs = 0, tct = 0, totalArea = 0\n\t\tlet r1 = this.surface.right, u1 = this.surface.up\n\t\tfor (const edge of edges) {\n\t\t\tlet edgeCentroid, edgeArea: number, centroidS, centroidT\n\t\t\tif (edge instanceof StraightEdge) {\n\t\t\t\tconst midPoint = edge.a.lerp(edge.b, 0.5)\n\t\t\t\tedgeCentroid = new V3(midPoint.x, centroid.y, centroid.z / 2)\n\t\t\t\tcentroidS = midPoint.dot(r1) / 2\n\t\t\t\tcentroidT = midPoint.dot(u1)\n\t\t\t\tconst edgeLength = edge.a.distanceTo(edge.b)\n\t\t\t\tedgeArea = edgeLength * edge.curve.dir1.dot(r1)\n\t\t\t\tedgeArea = (edge.a.dot(u1) + edge.b.dot(u1)) / 2 * edge.b.to(edge.a).dot(r1)\n\t\t\t} else {\n\t\t\t\tlet curve = edge.curve\n\t\t\t\tif (curve instanceof SemiEllipseCurve) {\n\t\t\t\t\tlet info = curve.getAreaInDir(r1, u1, edge.aT, edge.bT)\n\t\t\t\t\tedgeArea = info.area\n\t\t\t\t\tlet parametricCentroid = this.surface.stPFunc()(info.centroid)\n\t\t\t\t\tcentroidS = parametricCentroid.x\n\t\t\t\t\tcentroidT = parametricCentroid.y\n\t\t\t\t} else if (curve instanceof BezierCurve) {\n\t\t\t\t\tedgeArea = curve.getAreaInDirSurface(u1, this.surface, edge.aT, edge.bT).area\n\t\t\t\t} else {\n\t\t\t\t\tassertNever()\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\ttcs += edgeArea * centroidS\n\t\t\ttct += edgeArea * centroidT\n\t\t\ttotalArea += edgeArea\n\t\t}\n\t\tcentroid = r1.times(tcs).plus(u1.times(tct))\n\t\tassert(isFinite(totalArea))\n\t\treturn {area: totalArea, centroid: centroid}\n\t},\n\n\t/**\n\t * Calculating the surface area of a projected ellipse is analogous to the circumference of the ellipse\n\t * ==> Elliptic integrals/numeric calculation is necessary\n\t */\n\t[CylinderSurface.name](this: CylinderSurface, edges: Edge[]): number {\n\t\t// calculation cannot be done in local coordinate system, as the area doesnt scale proportionally\n\t\tconst totalArea = edges.map(edge => {\n\t\t\tif (edge.curve instanceof EllipseCurve) {\n\t\t\t\tconst f = (t) => {\n\t\t\t\t\tconst at = edge.curve.at(t), tangent = edge.tangentAt(t)\n\t\t\t\t\treturn at.dot(this.dir) * tangent.rejected1Length(this.dir)\n\t\t\t\t}\n\t\t\t\t// ellipse with normal parallel to dir1 need to be counted negatively so CCW faces result in a positive\n\t\t\t\t// area\n\t\t\t\tconst sign = -Math.sign(edge.curve.normal.dot(this.dir))\n\t\t\t\tconst val = glqInSteps(f, edge.aT, edge.bT, 4)\n\t\t\t\tconsole.log('edge', edge, val)\n\t\t\t\treturn val * sign\n\t\t\t} else if (edge.curve instanceof L3) {\n\t\t\t\treturn 0\n\t\t\t} else {\n\t\t\t\tassertNever()\n\t\t\t}\n\t\t}).sum()\n\t\t// if the cylinder faces inwards, CCW faces will have been CW, so we need to reverse that here\n\t\t// Math.abs is not an option as \"holes\" may also be passed\n\t\treturn totalArea * Math.sign(this.baseCurve.normal.dot(this.dir))\n\t},\n\n\t[EllipsoidSurface.name](this: EllipsoidSurface, edges: Edge[], canApproximate = true): number {\n\t\tassert(this.isVerticalSpheroid())\n\t\tconst {f1, f2, f3} = this\n\t\t// calculation cannot be done in local coordinate system, as the area doesnt scale proportionally\n\t\tconst circleRadius = f1.length()\n\t\tconst f31 = f3.unit()\n\t\tconst totalArea = edges.map(edge => {\n\t\t\tif (edge.curve instanceof EllipseCurve) {\n\t\t\t\tconst f = (t) => {\n\t\t\t\t\tconst at = edge.curve.at(t), tangent = edge.curve.tangentAt(t)\n\t\t\t\t\tconst localAt = this.inverseMatrix.transformPoint(at)\n\t\t\t\t\tlet angleXY = localAt.angleXY()\n\t\t\t\t\tif (eq(Math.abs(angleXY), PI)) {\n\t\t\t\t\t\tif (edge.curve.normal.isParallelTo(this.f2)) {\n\t\t\t\t\t\t\tangleXY = PI * -Math.sign((edge.bT - edge.aT) * edge.curve.normal.dot(this.f2))\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tangleXY = PI * dotCurve(this.f2, tangent, edge.curve.ddt(t))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconsole.log(angleXY)\n\t\t\t\t\t}\n\t\t\t\t\tconst arcLength = angleXY * circleRadius * Math.sqrt(1 - localAt.z ** 2)\n\t\t\t\t\tconst dotter = this.matrix.transformVector(new V3(-localAt.z * localAt.x / localAt.lengthXY(), -localAt.z * localAt.y / localAt.lengthXY(), localAt.lengthXY())).unit()\n\t\t\t\t\tconst df3 = tangent.dot(f31)\n\t\t\t\t\t//const scaling = df3 / localAt.lengthXY()\n\t\t\t\t\tconst scaling = dotter.dot(tangent)\n\t\t\t\t\t//console.log(t, at.str, arcLength, scaling)\n\t\t\t\t\treturn arcLength * scaling\n\t\t\t\t}\n\t\t\t\tconst val = glqInSteps(f, edge.aT, edge.bT, 1)\n\t\t\t\tconsole.log('edge', edge, val)\n\t\t\t\treturn val\n\t\t\t} else {\n\t\t\t\tassertNever()\n\t\t\t}\n\t\t}).sum()\n\n\n\t\treturn totalArea * Math.sign(this.f1.cross(this.f2).dot(this.f3))\n\t},\n\n\t[SemiCylinderSurface.name](this: SemiCylinderSurface, edges: Edge[], canApproximate = true): number {\n\t\tassert(this.isVerticalSpheroid())\n\t\tconst {f1, f2, f3} = this\n\t\t// calculation cannot be done in local coordinate system, as the area doesnt scale proportionally\n\t\tconst circleRadius = f1.length()\n\t\tconst f31 = f3.unit()\n\t\tconst totalArea = edges.map(edge => {\n\t\t\tif (edge.curve instanceof SemiEllipseCurve) {\n\t\t\t\tconst f = (t) => {\n\t\t\t\t\tconst at = edge.curve.at(t), tangent = edge.curve.tangentAt(t)\n\t\t\t\t\tconst localAt = this.inverseMatrix.transformPoint(at)\n\t\t\t\t\tlet angleXY = localAt.angleXY()\n\t\t\t\t\tif (eq(Math.abs(angleXY), PI)) {\n\t\t\t\t\t\tif (edge.curve.normal.isParallelTo(this.f2)) {\n\t\t\t\t\t\t\tangleXY = PI * -Math.sign((edge.bT - edge.aT) * edge.curve.normal.dot(this.f2))\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tangleXY = PI * dotCurve(this.f2, tangent, edge.curve.ddt(t))\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst arcLength = angleXY * circleRadius * Math.sqrt(1 - localAt.z ** 2)\n\t\t\t\t\tconst dotter = this.matrix.transformVector(new V3(-localAt.z * localAt.x / localAt.lengthXY(), -localAt.z * localAt.y / localAt.lengthXY(), localAt.lengthXY())).unit()\n\t\t\t\t\tconst df3 = tangent.dot(f31)\n\t\t\t\t\t//const scaling = df3 / localAt.lengthXY()\n\t\t\t\t\tconst scaling = dotter.dot(tangent)\n\t\t\t\t\t//console.log(t, at.str, arcLength, scaling)\n\t\t\t\t\treturn arcLength * scaling\n\t\t\t\t}\n\t\t\t\tconst val = glqInSteps(f, edge.aT, edge.bT, 1)\n\t\t\t\treturn val\n\t\t\t} else {\n\t\t\t\tassertNever()\n\t\t\t}\n\t\t}).sum()\n\n\n\t\treturn totalArea * Math.sign(this.f1.cross(this.f2).dot(this.f3))\n\t},\n\n\t[ProjectedCurveSurface.name](this: ProjectedCurveSurface, edges: Edge[]): number {\n\t\t// calculation cannot be done in local coordinate system, as the area doesnt scale proportionally\n\t\tconst totalArea = edges.map(edge => {\n\t\t\tif (edge.curve instanceof SemiEllipseCurve) {\n\t\t\t\tconst f = (t) => {\n\t\t\t\t\tconst at = edge.curve.at(t), tangent = edge.tangentAt(t)\n\t\t\t\t\treturn at.dot(this.dir) * tangent.rejected1Length(this.dir)\n\t\t\t\t}\n\t\t\t\t// ellipse with normal1 parallel to dir1 need to be counted negatively so CCW faces result in a\n\t\t\t\t// positive area\n\t\t\t\tconst sign = -Math.sign(edge.curve.normal.dot(this.dir))\n\t\t\t\tconst val = glqInSteps(f, edge.aT, edge.bT, 4)\n\t\t\t\treturn val * sign\n\t\t\t} else if (edge.curve instanceof L3) {\n\t\t\t\treturn 0\n\t\t\t} else {\n\t\t\t\tassertNever()\n\t\t\t}\n\t\t}).sum()\n\t\t// if the cylinder faces inwards, CCW faces will have been CW, so we need to reverse that here\n\t\t// Math.abs is not an option as \"holes\" may also be passed\n\t\treturn totalArea * Math.sign(this.baseCurve.normal.dot(this.dir))\n\t},\n\n\t/**\n\t * Calculating the surface area of a projected ellipse is analogous to the circumference of the ellipse\n\t * ==> Elliptic integrals/numeric calculation is necessary\n\t */\n\t[SemiCylinderSurface.name](this: SemiCylinderSurface, edges: Edge[]): number {\n\t\t// calculation cannot be done in local coordinate system, as the area doesnt scale proportionally\n\t\tconst totalArea = edges.map(edge => {\n\t\t\tif (edge.curve instanceof SemiEllipseCurve) {\n\t\t\t\tconst f = (t) => {\n\t\t\t\t\tconst at = edge.curve.at(t), tangent = edge.tangentAt(t)\n\t\t\t\t\treturn at.dot(this.dir) * tangent.rejected1Length(this.dir)\n\t\t\t\t}\n\t\t\t\t// ellipse with normal parallel to dir1 need to be counted negatively so CCW faces result in a positive\n\t\t\t\t// area\n\t\t\t\tconst sign = -Math.sign(edge.curve.normal.dot(this.dir))\n\t\t\t\tconst val = glqInSteps(f, edge.aT, edge.bT, 4)\n\t\t\t\treturn val * sign\n\t\t\t} else if (edge.curve instanceof L3) {\n\t\t\t\treturn 0\n\t\t\t} else {\n\t\t\t\tassertNever()\n\t\t\t}\n\t\t}).sum()\n\t\t// if the cylinder faces inwards, CCW faces will have been CW, so we need to reverse that here\n\t\t// Math.abs is not an option as \"holes\" may also be passed\n\t\treturn totalArea * Math.sign(this.baseCurve.normal.dot(this.dir))\n\t},\n}","import * as opentype from 'opentype.js'\nimport {\n\tarrayFromFunction, assert, assertf, assertInst, assertNumbers, assertVectors, callsce, eq, eq0, GOLDEN_RATIO, int,\n\tle, lerp, lt, M4, MINUS, NLA_PRECISION, raddd, snap, TAU, V, V3,\n} from 'ts3dutils'\n\nimport {\n\tB2, BezierCurve, ConicSurface, Curve, Edge, EllipseCurve, Face, FaceInfoFactory, getGlobalId, L3, P3, PCurveEdge,\n\tPlaneFace, PlaneSurface, ProjectedCurveSurface, RotationFace, SemiCylinderSurface, SemiEllipseCurve,\n\tSemiEllipsoidSurface, StraightEdge, Surface, XiEtaCurve,\n} from './index'\n\nconst {PI, min, max, ceil} = Math\n\n\nfunction projectCurve(curve: Curve, offset: V3, flipped: boolean): Surface {\n\tif (curve instanceof L3) {\n\t\tconst surfaceNormal = offset.cross(curve.dir1).toLength(flipped ? -1 : 1)\n\t\treturn new PlaneSurface(P3.normalOnAnchor(surfaceNormal, curve.anchor))\n\t}\n\tif (curve instanceof SemiEllipseCurve) {\n\t\tconst curveDir = flipped ? offset : offset.negated()\n\t\treturn new SemiCylinderSurface(curve, curveDir.unit(), undefined, undefined)\n\t}\n\tif (curve instanceof BezierCurve || curve instanceof XiEtaCurve) {\n\t\tconst curveDir = offset.times(flipped ? 1 : -1)\n\t\treturn new ProjectedCurveSurface(curve, curveDir, 0, 1, flipped ? 0 : -1, flipped ? 1 : 0)\n\t}\n\tthrow new Error()\n}\n\nfunction rotateCurve(curve: Curve, offset: V3, flipped: boolean): Surface {\n\tif (curve instanceof L3) {\n\t\tlet surface\n\t\tif (curve.dir1.isParallelTo(V3.Z)) {\n\t\t\tif (eq0(line.anchor.x)) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tconst flipped = line.anchor.z > edge.b.z\n\t\t\tsurface = new SemiCylinderSurface(ribs[i].curve, !flipped ? V3.Z : V3.Z.negated(), undefined, undefined)\n\t\t} else if (curve.dir1.isPerpendicularTo(V3.Z)) {\n\t\t\tconst flipped = line.anchor.x > edge.b.x\n\t\t\tlet surface = new PlaneSurface(new P3(V3.Z, line.anchor.z))\n\t\t\tif (!flipped) surface = surface.flipped()\n\t\t\tif (!open) {\n\t\t\t\tconst hole = flipped\n\t\t\t\t\t? !eq0(edge.b.x) && ribs[ipp].flipped()\n\t\t\t\t\t: !eq0(line.anchor.x) && ribs[i]\n\t\t\t\treturn new PlaneFace(surface, [flipped ? ribs[i] : ribs[ipp].flipped()], hole && [[hole]])\n\t\t\t}\n\t\t\treturn new PlaneFace(surface, faceEdges)\n\t\t} else {\n\t\t\t// apex is intersection of segment with Z-axis\n\t\t\tconst a = line.anchor, b = edge.b\n\t\t\tconst apexZ = a.z - a.x * (b.z - a.z) / (b.x - a.x)\n\t\t\tconst apex = new V3(0, 0, apexZ)\n\t\t\tconst flipped = line.anchor.z > edge.b.z\n\t\t\tsurface = ConicSurface.atApexThroughEllipse(apex, ribs[a.x > b.x\n\t\t\t\t? i\n\t\t\t\t: ipp].curve as SemiEllipseCurve, !flipped ? 1 : -1)\n\t\t}\n\t\treturn Face.create(surface, faceEdges)\n\t}\n\tif (edge.curve instanceof SemiEllipseCurve) {\n\t\tconst flipped = undefined\n\t\tconst ell = edge.curve.rightAngled()\n\t\tconst f1Perp = ell.f1.isPerpendicularTo(V3.Z), f2Perp = ell.f2.isPerpendicularTo(V3.Z)\n\t\tif (L3.Z.containsPoint(ell.center) && (f1Perp || f2Perp)) {\n\t\t\tlet f3length = f1Perp ? ell.f1.length() : ell.f2.length()\n\t\t\tif (flipped) {\n\t\t\t\tf3length *= -1\n\t\t\t}\n\t\t\tconst surface = new SemiEllipsoidSurface(ell.center, ell.f1, ell.f2, ell.f1.cross(ell.f2).toLength(f3length))\n\t\t\treturn new RotationFace(surface, faceEdges)\n\t\t}\n\t} else {\n\t\tassert(false, edge)\n\t}\n\tif (curve instanceof L3) {\n\t\tconst surfaceNormal = offset.cross(curve.dir1).toLength(flipped ? -1 : 1)\n\t\treturn new PlaneSurface(P3.normalOnAnchor(surfaceNormal, curve.anchor))\n\t}\n\tif (curve instanceof SemiEllipseCurve) {\n\t\tconst curveDir = flipped ? offset : offset.negated()\n\t\treturn new SemiCylinderSurface(curve, curveDir.unit(), undefined, undefined)\n\t}\n\tif (curve instanceof BezierCurve) {\n\t\tconst curveDir = flipped ? offset : offset.negated()\n\t\treturn new ProjectedCurveSurface(curve, curveDir.unit(), 0, 1)\n\t}\n\tthrow new Error()\n}\n\nexport namespace B2T {\n\n\texport function box(w: number = 1, h: number = 1, d: number = 1, name?: string): B2 {\n\t\tassertNumbers(w, h, d)\n\t\tassertInst('string' === typeof name)\n\t\tconst baseVertices = [\n\t\t\tnew V3(0, 0, 0),\n\t\t\tnew V3(0, h, 0),\n\t\t\tnew V3(w, h, 0),\n\t\t\tnew V3(w, 0, 0),\n\t\t]\n\t\tconst generator = callsce('B2T.box', w, h, d, name)\n\t\treturn B2T.extrudeVertices(baseVertices, P3.XY.flipped(), new V3(0, 0, d), name, generator)\n\t}\n\n\texport function puckman(radius: number, rads: raddd, height: number, name: string): B2 {\n\t\tassertf(() => lt(0, radius))\n\t\tassertf(() => lt(0, rads) && le(rads, TAU))\n\t\tassertf(() => lt(0, height))\n\t\tconst edges = StraightEdge.chain([V3.O, new V3(radius, 0, 0), new V3(radius, 0, height), new V3(0, 0, height)], true)\n\t\treturn B2T.rotateEdges(edges, rads, name || 'puckman' + getGlobalId())\n\t}\n\n\texport function registerVertexName(map, name, p) {\n\t\t// TODO\n\t\tif (!Array.from(map.keys()).some(p2 => p2.like(p))) {\n\t\t\tmap.set(p, name)\n\t\t}\n\t}\n\n\texport function extrudeEdges(baseFaceEdges: Edge[],\n\t\t\t\t\t\t\t\t baseFacePlane: P3 = P3.XY,\n\t\t\t\t\t\t\t\t offset: V3 = V3.Z,\n\t\t\t\t\t\t\t\t name: string = 'extrude' + getGlobalId(),\n\t\t\t\t\t\t\t\t gen?: string,\n\t\t\t\t\t\t\t\t infoFactory?: FaceInfoFactory<any>): B2 {\n\t\tbaseFaceEdges = fixEdges(baseFaceEdges)\n\t\t//Array.from(combinations(baseFaceEdges.length)).forEach(({i, j}) => {\n\t\t//\tassertf(() => !Edge.edgesIntersect(baseFaceEdges[i], baseFaceEdges[j]), baseFaceEdges[i].sce +\n\t\t// baseFaceEdges[j].sce) })\n\t\tassertf(() => Edge.isLoop(baseFaceEdges))\n\t\t// TODO checks..\n\t\t//if (offset.dot(baseFacePlane.normal1) > 0) {\n\t\t//\tbaseFacePlane = baseFacePlane.flipped()\n\t\t//}\n\t\tconst vertexNames = new Map()\n\t\tconst basePlaneSurface = new PlaneSurface(baseFacePlane)\n\t\t//assert(basePlaneSurface.edgeLoopCCW(baseFaceEdges), 'edges not CCW on baseFacePlane')\n\t\tconst translationMatrix = M4.translate(offset)\n\t\tconst topEdges = baseFaceEdges.map(edge => edge.transform(translationMatrix, 'top')) as Edge[]\n\t\tconst edgeCount = baseFaceEdges.length\n\n\t\tconst bottomInfo = infoFactory && infoFactory.extrudeBottom(basePlaneSurface, baseFaceEdges)\n\t\tconst bottomFace = new PlaneFace(basePlaneSurface, baseFaceEdges, [], name + 'Bottom', bottomInfo)\n\n\t\tconst topFaceEdges = topEdges.map(edge => edge.flipped()).reverse()\n\t\tconst topSurface = new PlaneSurface(baseFacePlane.flipped().translated(offset))\n\t\tconst topInfo = infoFactory && infoFactory.extrudeBottom(topSurface, topFaceEdges)\n\t\tconst topFace = new PlaneFace(topSurface, topFaceEdges, [], name + 'Top', topInfo)\n\n\n\t\tbaseFaceEdges.forEach(edge => B2T.registerVertexName(vertexNames, edge.name + 'A', edge.a))\n\t\ttopFaceEdges.forEach(edge => B2T.registerVertexName(vertexNames, edge.name + 'A', edge.a))\n\n\t\tconst ribs = arrayFromFunction(edgeCount,\n\t\t\ti => StraightEdge.throughPoints(baseFaceEdges[i].a, topEdges[i].a, name + 'Rib' + i))\n\n\t\tconst faces = baseFaceEdges.map((edge, i) => {\n\t\t\tconst faceName = name + 'Wall' + i\n\t\t\tconst j = (i + 1) % edgeCount\n\t\t\tconst faceEdges = [baseFaceEdges[i].flipped(), ribs[i], topEdges[i], ribs[j].flipped()]\n\t\t\tconst surface = projectCurve(edge.curve, offset, edge.reversed)\n\t\t\tconst info = infoFactory && infoFactory.extrudeWall(i, surface, faceEdges)\n\t\t\treturn Face.create(surface, faceEdges, undefined, faceName, info)\n\t\t}) as Face[]\n\t\tfaces.push(bottomFace, topFace)\n\t\tgen = gen || callsce('B2T.extrudeEdges', baseFaceEdges, baseFacePlane, offset, name)\n\t\treturn new B2(faces, baseFacePlane.normal1.dot(offset) > 0, gen, vertexNames)\n\t}\n\n\n\texport function cylinder(radius: number = 1, height: number = 1, rads: raddd = TAU, name: string = 'cylinder' + getGlobalId()): B2 {\n\t\tconst vertices = [new V3(0, 0, 0), new V3(radius, 0, 0), new V3(radius, 0, height), new V3(0, 0, height)]\n\t\treturn rotateEdges(StraightEdge.chain(vertices, true), rads, name)\n\t}\n\n\texport function cone(radius: number = 1, height: number = 1, rads: raddd = TAU, name: string = 'cone' + getGlobalId()): B2 {\n\t\tconst vertices = [new V3(0, 0, 0), new V3(radius, 0, height), new V3(0, 0, height)]\n\t\treturn rotateEdges(StraightEdge.chain(vertices, true), rads, name)\n\t}\n\n\texport function sphere(radius: number = 1, name: string = 'sphere' + getGlobalId(), rot: raddd = TAU): B2 {\n\t\tconst ee = PCurveEdge.create(\n\t\t\tnew SemiEllipseCurve(V3.O, new V3(0, 0, -radius), new V3(radius, 0, 0)),\n\t\t\tnew V3(0, 0, -radius), new V3(0, 0, radius),\n\t\t\t0, PI,\n\t\t\tundefined,\n\t\t\tnew V3(radius, 0, 0), new V3(-radius, 0, 0))\n\t\tconst generator = callsce('B2T.sphere', radius, name, rot)\n\t\treturn rotateEdges([StraightEdge.throughPoints(ee.b, ee.a), ee], rot, name, generator)\n\t}\n\n\texport function menger(res: int = 2, name: string = 'menger' + getGlobalId()): B2 {\n\t\tlet result = B2T.box(1, 1, 1)\n\t\tif (0 == res) return result\n\t\tconst punch = B2T.box(1 / 3, 1 / 3, 2).translate(1 / 3, 1 / 3, -1 / 2).flipped()\n\n\t\tfunction recurse(steps: int, m4: M4) {\n\t\t\tresult = result.and(punch.transform(m4))\n\t\t\ta = result\n\t\t\tif (steps > 1) {\n\t\t\t\tconst scaled = m4.times(M4.scale(1 / 3, 1 / 3, 1))\n\t\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\t\tif (4 == i) continue\n\t\t\t\t\trecurse(steps - 1, scaled.times(M4.translate(i % 3, i / 3 | 0, 0)))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\trecurse(res, M4.IDENTITY)\n\t\trecurse(res, M4.YZX)\n\t\trecurse(res, M4.ZXY)\n\t\treturn result\n\t}\n\n\texport function menger2(res: int = 2, name: string = 'menger' + getGlobalId()): B2 {\n\t\tif (0 == res) return B2T.box(1, 1, 1)\n\n\t\tconst punch = B2T.box(1 / 3, 1 / 3, 2).translate(1 / 3, 1 / 3, -1 / 2).flipped()\n\t\tconst stencilFaces = []\n\n\t\tfunction recurse(steps: int, m4: M4) {\n\t\t\tstencilFaces.push(...punch.transform(m4).faces)\n\t\t\tif (steps > 1) {\n\t\t\t\tconst scaled = m4.times(M4.scale(1 / 3, 1 / 3, 1))\n\t\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\t\tif (4 == i) continue\n\t\t\t\t\trecurse(steps - 1, scaled.times(M4.translate(i % 3, i / 3 | 0, 0)))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\trecurse(res, M4.IDENTITY)\n\t\tconst stencil = new B2(stencilFaces, true)\n\n\t\treturn B2T.box()\n\t\t\t.and(stencil)\n\t\t\t.and(stencil.transform(M4.YZX))\n\t\t\t.and(stencil.transform(M4.ZXY))\n\t}\n\n\texport function torus(rSmall: number, rLarge: number, rads: raddd, name: string): B2 {\n\t\tassertNumbers(rSmall, rLarge, rads)\n\t\tassertf(() => rLarge > rSmall)\n\t\tconst curve = SemiEllipseCurve.semicircle(rSmall, new V3(rLarge, 0, 0))\n\t\tconst baseEdges = [PCurveEdge.forCurveAndTs(curve, -Math.PI, 0), PCurveEdge.forCurveAndTs(curve, 0, Math.PI)]\n\t\treturn B2T.rotateEdges(baseEdges, rads, name || 'torus' + getGlobalId())\n\t}\n\n\texport function torusUnsplit(rSmall: number, rLarge: number, rads: raddd, name: string): B2 {\n\t\tassertNumbers(rSmall, rLarge, rads)\n\t\tassertf(() => rLarge > rSmall)\n\t\tconst baseEdge = PCurveEdge.forCurveAndTs(SemiEllipseCurve.semicircle(rSmall, new V3(rLarge, 0, 0)), -Math.PI, Math.PI)\n\t\treturn B2T.rotateEdges([baseEdge], rads, name || 'torus' + getGlobalId())\n\t}\n\n\t/**\n\t * baseLoop should be CCW on XZ plane for a bounded B2\n\t */\n\texport function rotateEdges(baseLoop: Edge[], totalRads: raddd, name: string, generator?: string, infoFactory?: FaceInfoFactory<any>): B2 {\n\t\tassert(!eq(PI, totalRads) || PI == totalRads) // URHGJ\n\t\tassertf(() => lt(0, totalRads) && le(totalRads, TAU))\n\t\ttotalRads = snap(totalRads, TAU)\n\t\tconst basePlane = new PlaneSurface(P3.ZX.flipped()).edgeLoopCCW(baseLoop)\n\t\t\t? new PlaneSurface(P3.ZX.flipped())\n\t\t\t: new PlaneSurface(P3.ZX)\n\t\tassertf(() => Edge.isLoop(baseLoop))\n\t\tconst rotationSteps = ceil((totalRads - NLA_PRECISION) / PI)\n\t\tconst angles = rotationSteps == 1 ? [-PI, -PI + totalRads] : [-PI, 0, totalRads - PI]\n\t\tconst open = !eq(totalRads, 2 * PI)\n\t\tconst baseRibCurves = baseLoop.map(edge => {\n\t\t\tconst a = edge.a, radius = a.lengthXY()\n\t\t\tif (!eq0(radius)) {\n\t\t\t\treturn new SemiEllipseCurve(V(0, 0, a.z), V(radius, 0, 0), V(0, radius, 0))\n\t\t\t}\n\t\t})\n\t\tconst baseSurfaces = baseLoop.map((edge, i) => {\n\t\t\tconst ipp = (i + 1) % baseLoop.length\n\t\t\tif (edge instanceof StraightEdge) {\n\t\t\t\tconst line = edge.curve\n\t\t\t\tif (line.dir1.isParallelTo(V3.Z)) {\n\t\t\t\t\tif (eq0(edge.a.x)) {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tconst flipped = edge.a.z > edge.b.z\n\t\t\t\t\tconst [tMin, tMax] = [0, edge.b.z - edge.a.z].sort(MINUS)\n\t\t\t\t\treturn new SemiCylinderSurface(baseRibCurves[i], !flipped ? V3.Z : V3.Z.negated(),\n\t\t\t\t\t\tundefined, undefined, tMin, tMax)\n\t\t\t\t} else if (line.dir1.isPerpendicularTo(V3.Z)) {\n\t\t\t\t\tconst flipped = edge.a.x > edge.b.x\n\t\t\t\t\tlet surface = new PlaneSurface(new P3(V3.Z, edge.a.z))\n\t\t\t\t\tif (!flipped) surface = surface.flipped()\n\t\t\t\t\treturn surface\n\t\t\t\t} else {\n\t\t\t\t\t// apex is intersection of segment with Z-axis\n\t\t\t\t\tconst a = edge.a, b = edge.b\n\t\t\t\t\tconst apexZ = a.z - a.x * (b.z - a.z) / (b.x - a.x)\n\t\t\t\t\tconst apex = new V3(0, 0, apexZ)\n\t\t\t\t\tconst flipped = edge.a.z > edge.b.z\n\t\t\t\t\tconst base = baseRibCurves[a.x > b.x ? i : ipp] as SemiEllipseCurve\n\t\t\t\t\tconst surface = ConicSurface.atApexThroughEllipse(apex, base)\n\t\t\t\t\treturn flipped != (-1 == surface.normalDir) ? surface.flipped() : surface\n\t\t\t\t}\n\t\t\t}\n\t\t\t/*\n\t\t\t    at(t) = f1 * cos t + f2 sin t\n\t\t\t    rotated projection\n\t\t\t    at2(t) = V(at(t).lengthXY(), 0, at(t).z)\n\t\t\t    at2(t).x = sqrt((f1x cos t + f2x sin t)² + (f1y cos t + f2y sin t)²)\n\t\t\t    at2(t).x = sqrt((f1x² + f1y²) cos² t + (f1x f2x + f1y f2y) cos t sin t + (f2x² + f2y²)sin²t)\n\t\t\t    at2(t).x = sqrt((a² + b²) cos² t + (a c + b d) cos t sin t + (c² + d²)sin²t)\n\t\t\t    (x cos t + y sin t)² = x² cos² t + x y cos t sin t + y² sin² t\n\t\t\t */\n\t\t\tif (edge.curve instanceof SemiEllipseCurve) {\n\t\t\t\tconst flipped = edge.a.z > edge.b.z\n\t\t\t\tconst ell = edge.curve.rightAngled()\n\t\t\t\tassert(ell.normal.isPerpendicularTo(V3.Z))\n\t\t\t\tassert(L3.Z.containsPoint(ell.center))\n\t\t\t\tlet width = ell.f1.length(), height = ell.f2.length()\n\t\t\t\tif (!ell.isCircular()) {\n\t\t\t\t\tassert(ell.f1.isParallelTo(V3.Z) && ell.f2.isParallelTo(V3.X)\n\t\t\t\t\t\t|| ell.f2.isParallelTo(V3.Z) && ell.f1.isParallelTo(V3.X))\n\t\t\t\t\tif (ell.f1.isParallelTo(V3.Z)) {\n\t\t\t\t\t\t[width, height] = [height, width]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn SemiEllipsoidSurface.forABC(width, (!flipped ? 1 : -1) * width, height, ell.center)\n\t\t\t} else {\n\t\t\t\tassert(false, edge)\n\t\t\t}\n\t\t})\n\t\tlet stepStartEdges = baseLoop, stepEndEdges\n\t\tconst faces = []\n\t\tfor (let rot = 0; rot < totalRads; rot += PI) {\n\t\t\tconst aT = 0, bT = min(totalRads - rot, PI)\n\t\t\tconst rotation = M4.rotateZ(rot + bT), rotrot = M4.rotateZ(rot)\n\t\t\tstepEndEdges = rot + bT == TAU ? baseLoop : baseLoop.map(edge => edge.transform(rotation))\n\t\t\tconst ribs = arrayFromFunction(baseLoop.length, i => {\n\t\t\t\tconst a = stepStartEdges[i].a, radius = a.lengthXY()\n\t\t\t\tconst b = stepEndEdges[i].a\n\t\t\t\tif (!eq0(radius)) {\n\t\t\t\t\tconst curve = 0 == rot ? baseRibCurves[i] : baseRibCurves[i].rotateZ(rot)\n\t\t\t\t\treturn new PCurveEdge(curve, a, b, aT, bT, undefined, curve.tangentAt(aT), curve.tangentAt(bT), name + 'rib' + i)\n\t\t\t\t}\n\t\t\t})\n\t\t\tfor (let edgeIndex = 0; edgeIndex < baseLoop.length; edgeIndex++) {\n\t\t\t\tif (baseSurfaces[edgeIndex]) {\n\t\t\t\t\tconst edge = stepStartEdges[edgeIndex]\n\t\t\t\t\tconst ipp = (edgeIndex + 1) % baseLoop.length\n\t\t\t\t\tconst faceEdges = [\n\t\t\t\t\t\tstepStartEdges[edgeIndex].flipped(),\n\t\t\t\t\t\t!eq0(edge.a.x) && ribs[edgeIndex],\n\t\t\t\t\t\tstepEndEdges[edgeIndex],\n\t\t\t\t\t\t!eq0(edge.b.x) && ribs[ipp].flipped()].filter(x => x)\n\t\t\t\t\tconst surface = 0 == rot ? baseSurfaces[edgeIndex] : baseSurfaces[edgeIndex].rotateZ(rot)\n\t\t\t\t\tconst info = infoFactory && infoFactory.extrudeWall(edgeIndex, surface, faceEdges, undefined)\n\t\t\t\t\tfaces.push(Face.create(surface, faceEdges, undefined, name + 'Wall' + edgeIndex, info))\n\t\t\t\t}\n\t\t\t}\n\t\t\tstepStartEdges = stepEndEdges\n\t\t}\n\t\tif (open) {\n\t\t\tconst endFaceEdges = Edge.reversePath(stepEndEdges)\n\t\t\tconst infoStart = infoFactory && infoFactory.rotationStart(basePlane, baseLoop, undefined)\n\t\t\tconst infoEnd = infoFactory && infoFactory.rotationEnd(basePlane.flipped().rotateZ(totalRads), endFaceEdges, undefined)\n\t\t\tfaces.push(\n\t\t\t\tnew PlaneFace(basePlane, baseLoop, undefined, name + 'start', infoStart),\n\t\t\t\tnew PlaneFace(basePlane.flipped().rotateZ(totalRads), endFaceEdges, undefined, name + 'end', infoEnd))\n\t\t}\n\t\tconst infiniteVolume = new PlaneSurface(P3.ZX).edgeLoopCCW(baseLoop)\n\t\treturn new B2(faces, infiniteVolume, generator)\n\t}\n\n\t/**\n\t * loop should be CCW on XZ plane for a bounded B2\n\t */\n\t//export function rotateEdgesUnsplit(loop: Edge[], rads: raddd, name: string): B2 {\n\t//\tassert(Edge.isLoop(loop))\n\t//\tconst rotationMatrix = M4.rotateZ(rads)\n\t//\tconst open = !eq(rads, 2 * PI)\n\t//\tconst endEdges = open ? loop.map(edge => edge.transform(rotationMatrix)) : loop\n\t//\tconst edgeCount = loop.length\n\t//\tconst ribs = arrayFromFunction(edgeCount, i => {\n\t//\t\tconst a = loop[i].a, radius = a.lengthXY()\n\t//\t\tconst b = endEdges[i].a\n\t//\t\tif (!eq0(radius)) {\n\t//\t\t\tconst curve = new SemiEllipseCurve(V(0, 0, a.z), V(-radius, 0, 0), V(0, -radius, 0))\n\t//\t\t\tconst aT = -PI, bT = -PI + rads\n\t//\t\t\treturn new PCurveEdge(curve, a, b, aT, bT, undefined, curve.tangentAt(aT), curve.tangentAt(bT), name\n\t// + 'rib' + i) } }) const faces = loop.map((edge, i) => { const ipp = (i + 1) % edgeCount console.log('ljl', i,\n\t// ipp, ribs) const faceEdges = [ edge.flipped(), !eq0(edge.a.x) && ribs[i], endEdges[i], !eq0(edge.b.x) &&\n\t// ribs[ipp].flipped()].filter(x => x) if (edge instanceof StraightEdge) { const line = edge.curve let surface if\n\t// (line.dir1.isParallelTo(V3.Z)) { if (eq0(edge.a.x)) { return } let flipped = edge.a.z > edge.b.z surface = new\n\t// SemiCylinderSurface(ribs[i].curve, !flipped ? V3.Z : V3.Z.negated()) } else if\n\t// (line.dir1.isPerpendicularTo(V3.Z)) { let flipped = edge.a.x > edge.b.x let surface = new PlaneSurface(new\n\t// P3(V3.Z, edge.a.z)) if (!flipped) surface = surface.flipped() if (!open) { const hole = flipped ? !eq0(edge.b.x)\n\t// && ribs[ipp].flipped() : !eq0(edge.a.x) && ribs[i] return new PlaneFace(surface, [flipped ? ribs[i] :\n\t// ribs[ipp].flipped()], hole && [[hole]]) } return new PlaneFace(surface, faceEdges) } else { // apex is\n\t// intersection of segment with Z-axis let a = edge.a, b = edge.b let apexZ = a.z - a.x * (b.z - a.z) / (b.x - a.x)\n\t// let apex = new V3(0, 0, apexZ) let flipped = edge.a.z > edge.b.z surface =\n\t// ConicSurface.atApexThroughEllipse(apex, ribs[a.x > b.x ? i : ipp].curve as SemiEllipseCurve, !flipped ? 1 : -1)\n\t// } return Face.create(surface, faceEdges) } if (edge.curve instanceof SemiEllipseCurve) { let flipped = undefined\n\t// let ell = edge.curve.rightAngled() let f1Perp = ell.f1.isPerpendicularTo(V3.Z), f2Perp =\n\t// ell.f2.isPerpendicularTo(V3.Z) if (L3.Z.containsPoint(ell.center) && (f1Perp || f2Perp)) { let f3length = f1Perp\n\t// ? ell.f1.length() : ell.f2.length() if (flipped) { f3length *= -1 } let surface = new\n\t// SemiEllipsoidSurface(ell.center, ell.f1, ell.f2, ell.f1.cross(ell.f2).toLength(f3length)) return new\n\t// RotationFace(surface, faceEdges) } } else { assert(false, edge) } }).filter(x => x) if (open) { const\n\t// endFaceEdges = endEdges.map(edge => edge.flipped()).reverse() faces.push( new PlaneFace(new\n\t// PlaneSurface(P3.ZX.flipped()), loop), new PlaneFace(new PlaneSurface(P3.ZX.rotateZ(rads)), endFaceEdges)) }\n\t// return new B2(faces, undefined) }\n\n\texport function quaffle() {\n\t\tconst baseK = B2T.sphere(1).translate(0, 1.7).flipped()\n\t\t//const baseK = B2T.box().scale(0.2).translate(0, 0.95).flipped()\n\t\t// const vs = B2T.DODECAHEDRON_VERTICES.concat(\n\t\t// B2T.DODECAHEDRON_FACE_VERTICES.map(fis => fis\n\t\t// .map(vi => B2T.DODECAHEDRON_VERTICES[vi])\n\t\t// .reduce((a,b) => a.plus(b), V3.O)\n\t\t// .unit()))\n\t\tconst ss = new B2(TETRAHEDRON_VERTICES.flatMap(v => baseK.rotateAB(V3.Y, v).faces), false)\n\t\t//return ss\n\t\treturn B2T.sphere().and(ss)\n\t}\n\n\texport function extrudeFace(face: PlaneFace, dir: V3) {\n\t\treturn new B2(\n\t\t\textrudeEdges(face.contour, face.surface.plane, dir).faces.slice(0, -2).concat(\n\t\t\t\tface, face.translate(dir.x, dir.y, dir.z).flipped(),\n\t\t\t\tface.holes.flatMap(\n\t\t\t\t\thole =>\n\t\t\t\t\t\textrudeEdges(hole, face.surface.plane.flipped(), dir).faces.slice(0, -2))), false)\n\t}\n\n\texport let defaultFont: opentype.Font\n\n\texport function loadFonts(): Promise<opentype.Font> {\n\t\treturn loadFont('fonts/FiraSansMedium.woff').then(font => defaultFont = font)\n\t}\n\n\tconst loadedFonts = new Map<string, opentype.Font>()\n\n\texport function loadFont(fontPath: string): Promise<opentype.Font> {\n\t\treturn new Promise<opentype.Font>(function (executor, reject) {\n\t\t\tconst font = loadedFonts.get(fontPath)\n\t\t\tif (font) {\n\t\t\t\texecutor(font)\n\t\t\t} else {\n\t\t\t\topentype.load(fontPath, function (err, f) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tloadedFonts.set(fontPath, f)\n\t\t\t\t\t\texecutor(f)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t}\n\n\texport function loadFontsAsync(callback) {\n\t\tif (defaultFont) {\n\t\t\tcallback()\n\t\t} else {\n\t\t\topentype.load('fonts/FiraSansMedium.woff', function (err, font) {\n\t\t\t\tif (err) {\n\t\t\t\t\tthrow new Error('Could not load font: ' + err)\n\t\t\t\t} else {\n\t\t\t\t\tdefaultFont = font\n\t\t\t\t\tcallback()\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\texport function text(text: string, size: number, depth: number = 1, font: opentype.Font = defaultFont) {\n\t\tconst path = font.getPath(text, 0, 0, size)\n\t\tconst subpaths: opentype.PathCommand[][] = []\n\t\tpath.commands.forEach(c => {\n\t\t\tif (c.type == 'M') {\n\t\t\t\tsubpaths.push([])\n\t\t\t}\n\t\t\tsubpaths.last.push(c)\n\t\t})\n\t\tconst loops = subpaths.map(sp => {\n\t\t\tconst path = new opentype.Path()\n\t\t\tpath.commands = sp\n\t\t\tconst loop = Edge.reversePath(Edge.pathFromSVG(path.toPathData(13))).map(e => e.mirrorY())\n\t\t\tassert(Edge.isLoop(loop))\n\t\t\treturn loop\n\t\t})\n\t\tconst faces = Face.assembleFacesFromLoops(loops, new PlaneSurface(P3.XY), PlaneFace)\n\t\tconst generator = `B2T.text(${text.sce}, ${size}, ${depth})`\n\t\tconst hello = B2.join(faces.map(face => B2T.extrudeFace(face, V(0, 0, -depth))), generator)\n\t\treturn hello\n\n\t}\n\n\texport function minorityReport() {\n\t\tconst a = B2T.sphere()\n\t\tconst b = B2T.text('LEO CROW', 64, 128).scale(0.1 / 32).translate(-0.5, -0.05, 1.2).flipped()\n\t\tconst c = B2T.sphere(0.98)\n\t\treturn a.and(b).plus(c)\n\t}\n\n\texport function whatever() {\n\t\tconst iso = isocahedron()\n\t\tconst numbersB2 = B2.join(iso.faces.map((face, i) => {\n\t\t\tconst numberB2 = text('' + (i + 1), 0.4, -2)\n\t\t\tconst centroid = face.contour.map(edge => edge.a).reduce((a, b) => a.plus(b), V3.O).div(3)\n\n\t\t\tconst sys = M4.forSys(\n\t\t\t\tface.contour[0].aDir,\n\t\t\t\tcentroid.cross(face.contour[0].aDir),\n\t\t\t\tcentroid.unit(),\n\t\t\t\tcentroid)\n\t\t\treturn numberB2.transform(sys.times(M4.translate(-numberB2.getAABB().size().x / 2, -0.1, -0.04)))\n\t\t}))\n\t\tconst s = sphere(0.9)\n\t\t//return iso.and(numbersB2)\n\t\treturn iso.and(s).and(numbersB2)\n\t\t//return numbersB2\n\t}\n\n\texport function d20() {\n\t\tconst iso = isocahedron()\n\t\tconst numbersB2 = B2.join(iso.faces.map((face, i) => {\n\t\t\tconst numberB2 = text('' + (i + 1), 0.4, -2)\n\t\t\tconst centroid = face.contour.map(edge => edge.a).reduce((a, b) => a.plus(b), V3.O).div(3)\n\n\t\t\tconst sys = M4.forSys(\n\t\t\t\tface.contour[0].aDir,\n\t\t\t\tcentroid.cross(face.contour[0].aDir),\n\t\t\t\tcentroid.unit(),\n\t\t\t\tcentroid)\n\t\t\treturn numberB2.transform(sys.times(M4.translate(-numberB2.getAABB().size().x / 2, -0.1, -0.04)))\n\t\t}))\n\t\tconst s = sphere(0.9)\n\t\t//return iso.and(numbersB2)\n\t\treturn iso.and(s).and(numbersB2)\n\t\t//return numbersB2\n\t}\n\n\texport function rotStep(edges: Edge[], totalRads: raddd, count: int) {\n\t\tconst radStep = totalRads / count\n\t\tconst open = !eq(totalRads, 2 * PI)\n\t\tconst ribCount = !open ? count : count + 1\n\t\tconst ribs = arrayFromFunction(ribCount, i => {\n\t\t\tif (i == 0) return edges\n\t\t\tconst matrix = M4.rotateZ(radStep * i)\n\t\t\treturn edges.map(edge => edge.transform(matrix))\n\t\t})\n\t\tconst horizontalEdges = arrayFromFunction(count, i => {\n\t\t\tconst ipp = (i + 1) % ribCount\n\t\t\treturn arrayFromFunction(edges.length, j => {\n\t\t\t\tif (!eq0(edges[j].a.lengthXY())) {\n\t\t\t\t\treturn StraightEdge.throughPoints(ribs[i][j].a, ribs[ipp][j].a)\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t\tconst faces: Face[] = []\n\t\tlet surface, face\n\t\tedges.forEach((edge, i) => {\n\t\t\tconst ipp = (i + 1) % edges.length\n\t\t\tconst projDir = V3.O\n\t\t\tconst surface = projectCurve(ribs[r][i], projDir, ribs[r][i].deltaT() < 0)\n\t\t\tif (edge instanceof StraightEdge && edge.curve.dir1.isPerpendicularTo(V3.Z)) {\n\t\t\t\tconst flipped = edge.a.x > edge.b.x\n\t\t\t\tsurface = new PlaneSurface(flipped ? new P3(V3.Z, edge.a.z) : new P3(V3.Z.negated(), -edge.a.z))\n\t\t\t\tif (open) {\n\t\t\t\t\tconst newEdges: Edge[] = []\n\t\t\t\t\tif (!eq0(edge.a.x)) {\n\t\t\t\t\t\tnewEdges.push(...arrayFromFunction(count, j => horizontalEdges[j][i]))\n\t\t\t\t\t}\n\t\t\t\t\tnewEdges.push(ribs[count][i])\n\t\t\t\t\tif (!eq0(edge.b.x)) {\n\t\t\t\t\t\tnewEdges.push(...arrayFromFunction(count, j => horizontalEdges[count - j - 1][ipp].flipped()))\n\t\t\t\t\t}\n\t\t\t\t\tnewEdges.push(edge.flipped())\n\t\t\t\t\tface = new PlaneFace(surface, newEdges)\n\t\t\t\t} else {\n\t\t\t\t\tconst contour = flipped\n\t\t\t\t\t\t? arrayFromFunction(count, j => horizontalEdges[j][i])\n\t\t\t\t\t\t: arrayFromFunction(count, j => horizontalEdges[count - j - 1][ipp].flipped())\n\t\t\t\t\tlet hole\n\t\t\t\t\tif (flipped && !eq0(edge.b.x)) {\n\t\t\t\t\t\thole = arrayFromFunction(count, j => horizontalEdges[count - j - 1][ipp].flipped())\n\t\t\t\t\t} else if (!flipped && !eq0(edge.a.x)) {\n\t\t\t\t\t\thole = arrayFromFunction(count, j => horizontalEdges[j][i])\n\t\t\t\t\t}\n\t\t\t\t\tface = new PlaneFace(surface, contour, hole ? [hole] : [])\n\t\t\t\t}\n\t\t\t\tfaces.push(face)\n\t\t\t\treturn\n\t\t\t} else if (edge instanceof StraightEdge) {\n\t\t\t\tif (eq0(edge.a.lengthXY()) && eq0(edge.b.lengthXY())) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (let r = 0; r < count; r++) {\n\t\t\t\tconst rpp = (r + 1) % ribCount\n\t\t\t\tconst faceEdges = [ribs[r][i].flipped(), horizontalEdges[r][i], ribs[rpp][i], horizontalEdges[r][ipp] && horizontalEdges[r][ipp].flipped()].filter(x => x)\n\t\t\t\tif (edge instanceof StraightEdge) {\n\t\t\t\t\tconst surface = new PlaneSurface(P3.throughPoints(faceEdges[0].a, faceEdges[1].a, faceEdges[2].a))\n\t\t\t\t\tfaces.push(new PlaneFace(surface, faceEdges))\n\t\t\t\t} else {\n\t\t\t\t\tassert(false, edge.toString())\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\tif (open) {\n\t\t\tconst endFaceEdges = ribs[count].map(edge => edge.flipped()).reverse()\n\t\t\tconst endFace = new PlaneFace(new PlaneSurface(P3.ZX.rotateZ(totalRads)), endFaceEdges)\n\t\t\tfaces.push(new PlaneFace(new PlaneSurface(P3.ZX.flipped()), edges), endFace)\n\t\t}\n\t\treturn new B2(faces)\n\t}\n\n\texport function fixEdges(edges: Edge[]): Edge[] {\n\t\treturn edges.flatMap(edge => {\n\t\t\tconst c = edge.curve\n\t\t\tif (c instanceof EllipseCurve) {\n\t\t\t\tconst splitEdges = (edge.minT < 0 && edge.maxT > 0)\n\t\t\t\t\t? edge.split(0)\n\t\t\t\t\t: [edge]\n\t\t\t\treturn splitEdges.map(edge => {\n\t\t\t\t\tif (edge.minT >= 0) {\n\t\t\t\t\t\treturn Edge.create(new SemiEllipseCurve(c.center, c.f1, c.f2, max(0, c.tMin), c.tMax),\n\t\t\t\t\t\t\tedge.a, edge.b,\n\t\t\t\t\t\t\tedge.aT, edge.bT,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tedge.aDir, edge.bDir,\n\t\t\t\t\t\t\tedge.name)\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// \"rotate\" the curve\n\t\t\t\t\t\treturn Edge.create(new SemiEllipseCurve(c.center, c.f1.negated(), c.f2.negated(), c.tMin + PI, min(PI, c.tMax + PI)),\n\t\t\t\t\t\t\tedge.a, edge.b,\n\t\t\t\t\t\t\tedge.aT + PI, edge.bT + PI,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tedge.aDir, edge.bDir,\n\t\t\t\t\t\t\tedge.name)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t\tif (c instanceof BezierCurve) {\n\t\t\t\tif (edge.a.like(edge.b)) {\n\t\t\t\t\treturn edge.split(lerp(edge.aT, edge.bT, 0.5))\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn edge\n\t\t})\n\t}\n\n\texport function extrudeVertices(baseVertices: V3[], baseFacePlane: P3, offset: V3, name?: string, generator?: string) {\n\t\tassert(baseVertices.every(v => v instanceof V3), 'baseVertices.every(v => v instanceof V3)')\n\t\tassertInst(P3, baseFacePlane)\n\t\tassertVectors(offset)\n\t\tif (baseFacePlane.normal1.dot(offset) > 0) baseFacePlane = baseFacePlane.flipped()\n\t\t//if (!isCCW(baseVertices, baseFacePlane.normal1)) {\n\t\t//\tbaseVertices = baseVertices.reverse()\n\t\t//}\n\t\t//let topVertices = baseVertices.map((v) => v.plus(offset)).reverse()\n\t\t//let topPlane = basePlane.translated(offset)\n\t\t//let top, bottom\n\t\t//let faces = [\n\t\t//\tbottom = PlaneFace.forVertices(new PlaneSurface(baseFacePlane), baseVertices),\n\t\t//\ttop = PlaneFace.forVertices(new PlaneSurface(baseFacePlane.flipped().translated(offset)), topVertices)]\n\t\t//let m = baseVertices.length\n\t\t//let ribs = arrayFromFunction(m, i => StraightEdge.throughPoints(baseVertices[i], topVertices[m - 1 - i]))\n\t\t//for (let i = 0; i < m; i++) {\n\t\t//\tlet j = (i + 1) % m\n\t\t//\tfaces.push(\n\t\t//\t\tnew PlaneFace(\n\t\t//\t\t\tPlaneSurface.throughPoints(baseVertices[j], baseVertices[i], topVertices[m - j - 1]),\n\t\t//\t\t\t[bottom.contour[i].flipped(), ribs[i], top.contour[m - j - 1].flipped(), ribs[j].flipped()], [],\n\t\t// name + 'wall' + i)) }\n\t\tconst edges = StraightEdge.chain(baseVertices, true)\n\t\tgenerator = generator || callsce('B2T.extrudeVertices', baseVertices, baseFacePlane, offset, name)\n\t\treturn B2T.extrudeEdges(edges, baseFacePlane, offset, name, generator)\n\t}\n\n\t// Returns a tetrahedron (3 sided pyramid).\n\t// Faces will face outwards.\n\t// abcd can be in any order. The only constraint is that abcd cannot be on a common plane.\n\texport function tetrahedron(a: V3, b: V3, c: V3, d: V3, name: string = 'tetra' + getGlobalId()): B2 {\n\t\tassertVectors(a, b, c, d)\n\t\tconst dDistance = P3.throughPoints(a, b, c).distanceToPointSigned(d)\n\t\tif (eq0(dDistance)) {\n\t\t\tthrow new Error('four points are coplanar')\n\t\t}\n\t\tif (dDistance > 0) {\n\t\t\t[c, d] = [d, c]\n\t\t}\n\t\tconst ab = StraightEdge.throughPoints(a, b)\n\t\tconst ac = StraightEdge.throughPoints(a, c)\n\t\tconst ad = StraightEdge.throughPoints(a, d)\n\t\tconst bc = StraightEdge.throughPoints(b, c)\n\t\tconst bd = StraightEdge.throughPoints(b, d)\n\t\tconst cd = StraightEdge.throughPoints(c, d)\n\t\tconst faces = [\n\t\t\tnew PlaneFace(PlaneSurface.throughPoints(a, b, c), [ab, bc, ac.flipped()], [], name + 'abc'),\n\t\t\tnew PlaneFace(PlaneSurface.throughPoints(a, d, b), [ad, bd.flipped(), ab.flipped()], [], name + 'adb'),\n\t\t\tnew PlaneFace(PlaneSurface.throughPoints(b, d, c), [bd, cd.flipped(), bc.flipped()], [], name + 'bdc'),\n\t\t\tnew PlaneFace(PlaneSurface.throughPoints(c, d, a), [cd, ad.flipped(), ac], [], name + 'cda'),\n\t\t]\n\t\tconst gen = `B2T.tetrahedron(${a.sce}, ${b.sce}, ${c.sce}, ${d.sce})`\n\t\treturn new B2(faces, false, gen)\n\t}\n\n\tconst b = 1 / GOLDEN_RATIO, c = 2 - GOLDEN_RATIO\n\texport const TETRAHEDRON_VERTICES = [\n\t\tnew V3(1, 0, -1 / Math.sqrt(2)),\n\t\tnew V3(-1, 0, -1 / Math.sqrt(2)),\n\t\tnew V3(0, -1, 1 / Math.sqrt(2)),\n\t\tnew V3(0, 1, 1 / Math.sqrt(2)),\n\t].map(v => v.unit())\n\texport const DODECAHEDRON_VERTICES = [\n\t\tnew V3(c, 0, 1),\n\t\tnew V3(-c, 0, 1),\n\t\tnew V3(-b, b, b),\n\t\tnew V3(0, 1, c),\n\t\tnew V3(b, b, b),\n\t\tnew V3(b, -b, b),\n\t\tnew V3(0, -1, c),\n\t\tnew V3(-b, -b, b),\n\t\tnew V3(c, 0, -1),\n\t\tnew V3(-c, 0, -1),\n\t\tnew V3(-b, -b, -b),\n\t\tnew V3(0, -1, -c),\n\t\tnew V3(b, -b, -b),\n\t\tnew V3(b, b, -b),\n\t\tnew V3(0, 1, -c),\n\t\tnew V3(-b, b, -b),\n\t\tnew V3(1, c, 0),\n\t\tnew V3(-1, c, 0),\n\t\tnew V3(-1, -c, 0),\n\t\tnew V3(1, -c, 0),\n\t].map(v => v.unit())\n\texport const DODECAHEDRON_FACE_VERTICES = [\n\t\t[4, 3, 2, 1, 0],\n\t\t[7, 6, 5, 0, 1],\n\t\t[12, 11, 10, 9, 8],\n\t\t[15, 14, 13, 8, 9],\n\t\t[14, 3, 4, 16, 13],\n\t\t[3, 14, 15, 17, 2],\n\t\t[11, 6, 7, 18, 10],\n\t\t[6, 11, 12, 19, 5],\n\t\t[4, 0, 5, 19, 16],\n\t\t[12, 8, 13, 16, 19],\n\t\t[15, 9, 10, 18, 17],\n\t\t[7, 1, 2, 17, 18]]\n\n\texport const OCTAHEDRON_VERTICES = [\n\t\tnew V3(1, 0, 0),\n\t\tnew V3(-1, 0, 0),\n\t\tnew V3(0, 1, 0),\n\t\tnew V3(0, -1, 0),\n\t\tnew V3(0, 0, 1),\n\t\tnew V3(0, 0, -1)]\n\texport const OCTAHEDRON_FACE_VERTICES = [\n\t\t[0, 2, 4],\n\t\t[2, 1, 4],\n\t\t[1, 3, 4],\n\t\t[3, 0, 4],\n\n\t\t[2, 0, 5],\n\t\t[1, 2, 5],\n\t\t[3, 1, 5],\n\t\t[0, 3, 5]]\n\n\tconst {x: s, y: t} = new V3(1, GOLDEN_RATIO, 0).unit()\n\texport const ISOCAHEDRON_VERTICES = [\n\t\tnew V3(-s, t, 0),\n\t\tnew V3(s, t, 0),\n\t\tnew V3(-s, -t, 0),\n\t\tnew V3(s, -t, 0),\n\n\t\tnew V3(0, -s, t),\n\t\tnew V3(0, s, t),\n\t\tnew V3(0, -s, -t),\n\t\tnew V3(0, s, -t),\n\n\t\tnew V3(t, 0, -s),\n\t\tnew V3(t, 0, s),\n\t\tnew V3(-t, 0, -s),\n\t\tnew V3(-t, 0, s)]\n\texport const ISOCAHEDRON_FACE_VERTICES = [\n\t\t// 5 faces around point 0\n\t\t[0, 11, 5],\n\t\t[0, 5, 1],\n\t\t[0, 1, 7],\n\t\t[0, 7, 10],\n\t\t[0, 10, 11],\n\n\t\t// 5 adjacent faces\n\t\t[1, 5, 9],\n\t\t[5, 11, 4],\n\t\t[11, 10, 2],\n\t\t[10, 7, 6],\n\t\t[7, 1, 8],\n\n\t\t// 5 faces around point 3\n\t\t[3, 9, 4],\n\t\t[3, 4, 2],\n\t\t[3, 2, 6],\n\t\t[3, 6, 8],\n\t\t[3, 8, 9],\n\n\t\t// 5 adjacent faces\n\t\t[4, 9, 5],\n\t\t[2, 4, 11],\n\t\t[6, 2, 10],\n\t\t[8, 6, 7],\n\t\t[9, 8, 1]]\n\n\texport function dodecahedron() {\n\t\treturn makePlatonic(DODECAHEDRON_VERTICES, DODECAHEDRON_FACE_VERTICES, 'B2T.dodecahedron()')\n\t}\n\n\texport function octahedron() {\n\t\treturn makePlatonic(OCTAHEDRON_VERTICES, OCTAHEDRON_FACE_VERTICES, 'B2T.octahedron()')\n\t}\n\n\texport function isocahedron() {\n\t\treturn makePlatonic(ISOCAHEDRON_VERTICES, ISOCAHEDRON_FACE_VERTICES, 'B2T.octahedron()')\n\t}\n\n\tfunction makePlatonic(VS: V3[], FVIS: int[][], generator: string) {\n\t\tconst edgeMap = new Map()\n\t\tconst faces = FVIS.map(faceIndexes => {\n\t\t\tconst surface = PlaneSurface.throughPoints(VS[faceIndexes[0]], VS[faceIndexes[1]], VS[faceIndexes[2]])\n\t\t\tconst contour = arrayFromFunction(faceIndexes.length, i => {\n\t\t\t\tconst ipp = (i + 1) % faceIndexes.length\n\t\t\t\tconst iA = faceIndexes[i], iB = faceIndexes[ipp]\n\t\t\t\tconst iMin = min(iA, iB), iMax = max(iA, iB), edgeID = iMin * VS.length + iMax\n\t\t\t\tlet edge = edgeMap.get(edgeID)\n\t\t\t\t!edge && edgeMap.set(edgeID, edge = StraightEdge.throughPoints(VS[iMin], VS[iMax]))\n\t\t\t\treturn iA < iB ? edge : edge.flipped()\n\t\t\t})\n\t\t\treturn new PlaneFace(surface, contour)\n\t\t})\n\t\treturn new B2(faces, false, generator)\n\t}\n\n\texport function pyramidEdges(baseEdges: Edge[], apex: V3, name: string = 'pyramid' + getGlobalId()): B2 {\n\t\tassertInst(Edge, ...baseEdges)\n\t\tassertVectors(apex)\n\n\t\tconst ribs = baseEdges.map(baseEdge => StraightEdge.throughPoints(apex, baseEdge.a))\n\t\tconst faces = baseEdges.map((baseEdge, i) => {\n\t\t\tconst faceName = name + 'Wall' + i\n\t\t\tconst ipp = (i + 1) % baseEdges.length\n\t\t\tconst faceEdges = [ribs[i], baseEdge, ribs[ipp].flipped()]\n\t\t\tconst surface = undefined // TODO\n\t\t\treturn Face.create(surface, faceEdges, undefined, faceName)\n\t\t})\n\t\tconst bottomFace = Face.create(baseSurface, baseEdges)\n\t\tfaces.push(bottomFace)\n\t\tconst generator = callsce('B2T.pyramidEdges', baseEdges, apex, name)\n\t\treturn new B2(faces, false, generator, name)\n\t}\n}","import {int, randomColor, V3} from 'ts3dutils'\n\nimport {getGlobalId, L3, P3, PlaneSurface} from './index'\n\nexport class CustomPlane extends P3 {\n\treadonly up: V3\n\treadonly right: V3\n\treadonly tMin: number\n\treadonly tMax: number\n\treadonly sMin: number\n\treadonly sMax: number\n\treadonly color: int\n\treadonly name: string\n\n\tconstructor(anchor: V3, right: V3, up: V3,\n\t\t\t\tname: string,\n\t\t\t\tcolor: number = randomColor(),\n\t\t\t\trightStart: number = -500,\n\t\t\t\trightEnd: number = 500,\n\t\t\t\tupStart: number = -500,\n\t\t\t\tupEnd: number = 500) {\n\t\tconst {normal1, w} = P3.forAnchorAndPlaneVectors(anchor, right, up)\n\t\tsuper(normal1, w)\n\t\tthis.up = up\n\t\tthis.right = right\n\t\tthis.sMin = rightStart\n\t\tthis.sMax = rightEnd\n\t\tthis.tMin = upStart\n\t\tthis.tMax = upEnd\n\t\tthis.color = color\n\t\tthis.name = name\n\t}\n\n\tget plane() { return this }\n\n\ttoPlaneSurface() {\n\t\treturn new PlaneSurface(this, this.right, this.up)\n\t}\n\n\tstatic forPlane(plane: P3, color: int, name?: string) {\n\t\t//assert(!name)\n\t\tconst up = plane.normal1.getPerpendicular().unit(), right = up.cross(plane.normal1)\n\t\treturn new CustomPlane(plane.anchor, right, up, name, color)\n\t}\n\n\tstatic fromPlaneSurface(surface: PlaneSurface) {\n\t\treturn new CustomPlane(surface.plane.anchor, surface.right, surface.up, 'genCustomPlane' + getGlobalId())\n\t}\n\n\tdistanceTo(line: L3, mindist: number) {\n\t\treturn [\n\t\t\tnew L3(this.anchor.plus(this.right.times(this.sMin)), this.up),\n\t\t\tnew L3(this.anchor.plus(this.right.times(this.sMax)), this.up),\n\t\t\tnew L3(this.anchor.plus(this.up.times(this.tMin)), this.right),\n\t\t\tnew L3(this.anchor.plus(this.up.times(this.tMax)), this.right)].map((line2, line2Index) => {\n\t\t\tconst info = line2.infoClosestToLine(line)\n\t\t\tif ((isNaN(info.t) // parallel LINES\n\t\t\t\t\t|| line2Index < 2 && this.tMin <= info.t && info.t <= this.tMax\n\t\t\t\t\t|| line2Index >= 2 && this.sMin <= info.t && info.t <= this.sMax)\n\t\t\t\t&& info.distance <= mindist) {\n\t\t\t\treturn info.s\n\t\t\t} else {\n\t\t\t\treturn Infinity\n\t\t\t}\n\t\t}).min()\n\t}\n\n\tdistanceTo2(line: L3, mindist: number) {\n\t\treturn [\n\t\t\tnew L3(this.anchor.plus(this.right.times(this.sMin)), this.up),\n\t\t\tnew L3(this.anchor.plus(this.right.times(this.sMax)), this.up),\n\t\t\tnew L3(this.anchor.plus(this.up.times(this.tMin)), this.right),\n\t\t\tnew L3(this.anchor.plus(this.up.times(this.tMax)), this.right)].map((line2, line2Index) => {\n\t\t\tconst info = line2.infoClosestToLine(line)\n\t\t\tif ((isNaN(info.t) // parallel LINES\n\t\t\t\t\t|| line2Index < 2 && this.tMin <= info.t && info.t <= this.tMax\n\t\t\t\t\t|| line2Index >= 2 && this.sMin <= info.t && info.t <= this.sMax)\n\t\t\t\t&& info.distance <= mindist) {\n\t\t\t\treturn info.distance\n\t\t\t} else {\n\t\t\t\treturn Infinity\n\t\t\t}\n\t\t}).min()\n\t}\n}\n","import {SVGPathData} from 'svg-pathdata'\nimport {\n\tAABB, arrayFromFunction, arrayRange, assert, assertf, assertInst, assertNumbers, assertVectors, callsce, clamp, DEG,\n\teq, eq0, fuzzyBetween, getIntervals, int, le, lt, M4, MINUS, mod, newtonIterate, NLA_PRECISION, snap2, TAU,\n\tTransformable, V, V3,\n} from 'ts3dutils'\n\nimport {BezierCurve, Curve, L3, P3, ParabolaCurve, PICurve, SemiEllipseCurve, Surface, PlaneSurface} from './index'\n\nconst {PI, sign, ceil, floor, abs} = Math\n\n\nexport abstract class Edge extends Transformable {\n\treadonly aDir: V3\n\treadonly bDir: V3\n\treadonly reversed: boolean\n\n\tconstructor(readonly curve: Curve,\n\t\t\t\treadonly a: V3,\n\t\t\t\treadonly b: V3,\n\t\t\t\treadonly aT: number,\n\t\t\t\treadonly bT: number,\n\t\t\t\tpublic flippedOf?: Edge | undefined,\n\t\t\t\treadonly name?: string) {\n\t\tsuper()\n\t\tassertNumbers(aT, bT)\n\t\tassert(!eq(aT, bT))\n\t\tassertVectors(a, b)\n\t\tassertf(() => curve instanceof Curve, curve)\n\t\tassertf(() => !curve.isValidT || curve.isValidT(aT) && curve.isValidT(bT), aT + ' ' + bT)\n\t\tassertf(() => curve.at(aT).like(a), +a)\n\t\tassertf(() => curve.at(bT).like(b), '' + curve.at(bT) + b)\n\t\tassertf(() => fuzzyBetween(aT, curve.tMin, curve.tMax))\n\t\tassertf(() => fuzzyBetween(bT, curve.tMin, curve.tMax))\n\t\tthis.aT = clamp(aT, curve.tMin, curve.tMax)\n\t\tthis.bT = clamp(bT, curve.tMin, curve.tMax)\n\t\tthis.reversed = this.aT > this.bT\n\t}\n\n\tget minT() { return Math.min(this.aT, this.bT) }\n\n\tget maxT() { return Math.max(this.aT, this.bT) }\n\n\tstatic forCurveAndTs(curve: Curve, aT: number = curve.tMin, bT: number = curve.tMax): Edge {\n\t\treturn Edge.create(curve, curve.at(aT), curve.at(bT), aT, bT, undefined,\n\t\t\taT < bT ? curve.tangentAt(aT) : curve.tangentAt(aT).negated(),\n\t\t\taT < bT ? curve.tangentAt(bT) : curve.tangentAt(bT).negated())\n\t}\n\n\tstatic create(curve: Curve, a: V3, b: V3, aT: number, bT: number, flippedOf: Edge | undefined, aDir: V3, bDir: V3, name?: string): Edge {\n\t\tif (curve instanceof L3) {\n\t\t\treturn new StraightEdge(curve, a, b, aT, bT, flippedOf as StraightEdge, name)\n\t\t} else {\n\t\t\treturn new PCurveEdge(curve, a, b, aT, bT, flippedOf as PCurveEdge, aDir, bDir, name)\n\t\t}\n\t}\n\n\tstatic isLoop(loop: Edge[]): boolean {\n\t\treturn loop.every((edge, i) => edge.b.like(loop[(i + 1) % loop.length].a))\n\t}\n\n\tstatic edgesIntersect(e1: Edge, e2: Edge) {\n\t\t// TODO: still getting some NaNs here..\n\t\tassertNumbers(e1.curve.hlol, e2.curve.hlol)\n\t\tassertInst(Edge, e1, e2)\n\t\tif (e1.curve.hlol < e2.curve.hlol) {\n\t\t\t[e2, e1] = [e1, e2]\n\t\t}\n\t\tconst sts = e1.curve.isInfosWithCurve(e2.curve)\n\t\tif (sts.some(info => isNaN(info.tThis) || isNaN(info.tOther))) {\n\t\t\tconsole.log(e1.sce)\n\t\t\tconsole.log(e2.sce)\n\t\t\tassert(false)\n\t\t}\n\t\treturn sts.some(\n\t\t\t/// (  e1.aT < tThis < e1.bT  )  &&  (  e2.aT < tOther < e2.bT  )\n\t\t\t({tThis, tOther}) => {\n\t\t\t\treturn e1.tValueInside(tThis) && e2.tValueInside(tOther)\n\t\t\t})\n\t}\n\n\tstatic assertLoop(edges: Edge[]): void {\n\t\tedges.forEach((edge, i) => {\n\t\t\tconst j = (i + 1) % edges.length\n\t\t\tassert(edge.b.like(edges[j].a), `edges[${i}].b != edges[${j}].a (${edges[i].b.sce} != ${edges[j].a.sce})`)\n\t\t})\n\t}\n\n\tstatic ngon(n: int = 3, radius: number = 1): Edge[] {\n\t\treturn StraightEdge.chain(arrayFromFunction(n, i => V3.polar(radius, TAU * i / n)))\n\t}\n\n\tstatic star(pointCount: int = 5, r0: number = 1, r1: number = 0.5): Edge[] {\n\t\tconst vertices = arrayFromFunction(pointCount * 2, i => V3.polar(0 == i % 2\n\t\t\t? r0\n\t\t\t: r1, TAU * i / pointCount / 2))\n\t\treturn StraightEdge.chain(vertices)\n\t}\n\n\tstatic reversePath(path: Edge[], doReverse: boolean = true): Edge[] {\n\t\treturn doReverse ? arrayFromFunction(path.length, i => path[path.length - 1 - i].flipped()) : path\n\t}\n\n\tstatic rect(width: number = 1, height: number = width): Edge[] {\n\t\tconst vertices = [new V3(0, 0, 0), new V3(width, 0, 0), new V3(width, height, 0), new V3(0, height, 0)]\n\t\treturn StraightEdge.chain(vertices)\n\t}\n\n\tstatic reuleaux(n: int = 3, radius: number = 1): Edge[] {\n\t\tassert(3 <= n)\n\t\tassert(1 == n % 2)\n\t\tconst corners = arrayFromFunction(n, i => V3.polar(radius, TAU * i / n))\n\t\treturn arrayFromFunction(n, i => {\n\t\t\tconst aI = (i + floor(n / 2)) % n, bI = (i + ceil(n / 2)) % n\n\t\t\tconst a = corners[aI], b = corners[bI]\n\t\t\tconst center = corners[i]\n\t\t\tconst f1 = center.to(a), curve = new SemiEllipseCurve(center, f1, V3.Z.cross(f1))\n\t\t\treturn Edge.create(curve, a, b, 0, curve.pointT(b), undefined, V3.Z.cross(f1), V3.Z.cross(center.to(b)))\n\t\t})\n\t}\n\n\tstatic round(edges: Edge[], radius: number) {\n\t\tif (eq0(radius)) {\n\t\t\treturn edges\n\t\t}\n\t\tconst corners = edges.map((edge, i) => {\n\t\t\tconst j = (i + 1) % edges.length, nextEdge = edges[j]\n\t\t\tif (!edge.b.like(nextEdge.a)) return\n\t\t\tconst angleToNext = edge.bDir.angleTo(nextEdge.aDir)\n\t\t\tconst c1 = edge.curve, c2 = nextEdge.curve\n\t\t\tif (c1 instanceof L3 && c2 instanceof L3) {\n\t\t\t\tconst normal = c1.dir1.cross(c2.dir1)\n\t\t\t\tif (eq0(angleToNext)) return\n\n\t\t\t\tconst l1inside = normal.cross(c1.dir1), l2inside = normal.cross(c2.dir1)\n\t\t\t\tconst l1offset = c1.transform(M4.translate(l1inside.toLength(radius)))\n\t\t\t\tconst l2offset = c2.transform(M4.translate(l2inside.toLength(radius)))\n\t\t\t\tconst center = l1offset.isInfoWithLine(l2offset)\n\t\t\t\tif (!center) throw new Error('tangential curves')\n\t\t\t\tconst cornerA = center.plus(l1inside.toLength(-radius))\n\t\t\t\tconst cornerB = center.plus(l2inside.toLength(-radius))\n\t\t\t\tconst f1 = l1inside.toLength(-radius)\n\t\t\t\tconst curve = new SemiEllipseCurve(center, f1, normal.cross(f1).toLength(radius))\n\t\t\t\tconst cornerEdge = Edge.create(curve, cornerA, cornerB, 0, curve.pointT(cornerB), undefined, c1.dir1, c2.dir1)\n\t\t\t\treturn cornerEdge\n\t\t\t} else {\n\t\t\t\treturn Edge.arbitraryCorner(edge, nextEdge, radius)\n\t\t\t}\n\t\t})\n\t\tconst result = edges.flatMap((edge, i) => {\n\t\t\tconst h = (i + edges.length - 1) % edges.length, j = (i + 1) % edges.length\n\t\t\tconst prevCorner = corners[h], nextCorner = corners[i]\n\t\t\tif (!prevCorner && !nextCorner) {\n\t\t\t\treturn edge\n\t\t\t}\n\t\t\tconst [aT, a, aDir] = !prevCorner\n\t\t\t\t? [edge.aT, edge.a, edge.aDir]\n\t\t\t\t: [edge.curve.pointT(prevCorner.b), prevCorner.b, prevCorner.bDir]\n\t\t\tconst [bT, b, bDir] = !nextCorner\n\t\t\t\t? [edge.bT, edge.b, edge.bDir]\n\t\t\t\t: [edge.curve.pointT(nextCorner.a), nextCorner.a, nextCorner.aDir]\n\t\t\tconst newEdge = Edge.create(edge.curve, a, b, aT, bT, undefined, aDir, bDir)\n\t\t\treturn !nextCorner ? newEdge : [newEdge, nextCorner]\n\t\t})\n\t\treturn result\n\t}\n\n\tstatic arbitraryCorner(e1: Edge, e2: Edge, radius: number) {\n\t\tconst c1 = e1.curve, c2 = e2.curve\n\n\t\tfunction f([t1, t2]: [number, number]) {\n\t\t\tconst p1 = c1.at(t1), p2 = c2.at(t2)\n\t\t\tconst dp1 = c1.tangentAt(t1), dp2 = c2.tangentAt(t2)\n\t\t\tconst virtualPlaneNormal = dp1.cross(dp2)\n\t\t\tconst normal1 = virtualPlaneNormal.cross(dp1).unit(), normal2 = virtualPlaneNormal.cross(dp2).unit()\n\t\t\tconst dirCross = normal1.cross(normal2)\n\t\t\tif (virtualPlaneNormal.likeO()) {\n\t\t\t\tassert(false)\n\t\t\t} // lines parallel\n\t\t\tconst p1p2 = p1.to(p2)\n\t\t\t// check if distance is zero (see also L3.distanceToLine)\n\t\t\tif (!eq0(p1p2.dot(virtualPlaneNormal))) {\n\t\t\t\tassert(false)\n\t\t\t}\n\t\t\tconst l1 = new L3(p1, normal1), l2 = new L3(p2, normal2)\n\t\t\tconst uh = l1.infoClosestToLine(l2), uh2 = l1.isInfoWithLine(l2)\n\t\t\tconst dist1 = p1p2.cross(normal2).dot(dirCross) / dirCross.squared()\n\t\t\tconst dist2 = p1p2.cross(normal1).dot(dirCross) / dirCross.squared()\n\t\t\tconst g1 = p1.plus(normal1.times(dist1))\n\t\t\tconst g2 = p2.plus(normal2.times(dist2))\n\t\t\tassert(g1.like(g2))\n\t\t\treturn [abs(dist1) - radius, abs(dist2) - radius]\n\t\t}\n\n\t\tconst startT1 = e1.bT - radius * sign(e1.deltaT()) / e1.bDir.length()\n\t\tconst startT2 = e2.aT + radius * sign(e2.deltaT()) / e2.aDir.length()\n\t\tconst [t1, t2] = newtonIterate(f, [startT1, startT2])\n\t\tconst cornerA = e1.curve.at(t1)\n\t\tconst cornerB = e2.curve.at(t2)\n\t\tconst p1 = c1.at(t1), p2 = c2.at(t2)\n\t\tconst dp1 = c1.tangentAt(t1), dp2 = c2.tangentAt(t2)\n\t\tconst virtualPlaneNormal = dp1.cross(dp2)\n\t\tconst normal1 = virtualPlaneNormal.cross(dp1).unit(), normal2 = virtualPlaneNormal.cross(dp2).unit()\n\t\tconst f1 = normal1.toLength(-radius)\n\t\tconst center = cornerA.minus(f1)\n\t\tconst curve = new SemiEllipseCurve(center, f1, virtualPlaneNormal.cross(f1).toLength(radius))\n\t\tconst cornerEdge = Edge.create(curve, cornerA, cornerB, 0, curve.pointT(cornerB), undefined, c1.tangentAt(t1), c2.tangentAt(t2))\n\t\treturn cornerEdge\n\t}\n\n\tstatic pathFromSVG(pathString: string): Edge[] {\n\t\tlet currentPos: V3 = undefined!\n\t\tconst parsed: any[] =\n\t\t\tnew SVGPathData(pathString).toAbs().normalizeHVZ().sanitize(NLA_PRECISION).annotateArcs().commands\n\t\tconst path: Edge[] = []\n\t\tfor (const c of parsed) {\n\t\t\tassert('x' in c && 'y' in c)\n\t\t\tconst endPos = new V3(c.x, c.y, 0)\n\t\t\tswitch (c.type) {\n\t\t\t\tcase SVGPathData.LINE_TO:\n\t\t\t\t\tpath.push(StraightEdge.throughPoints(currentPos, endPos))\n\t\t\t\t\tbreak\n\t\t\t\tcase SVGPathData.CURVE_TO: {\n\t\t\t\t\tconst c1 = new V3(c.x1, c.y1, 0)\n\t\t\t\t\tconst c2 = new V3(c.x2, c.y2, 0)\n\t\t\t\t\tconst curve = new BezierCurve(currentPos, c1, c2, endPos, 0, 1)\n\t\t\t\t\tconst edge = new PCurveEdge(curve, currentPos, endPos, 0, 1, undefined, curve.tangentAt(0), curve.tangentAt(1))\n\t\t\t\t\tpath.push(edge)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase SVGPathData.QUAD_TO: {\n\t\t\t\t\tconst c1 = new V3(c.x1, c.y1, 0)\n\t\t\t\t\tconst curve = ParabolaCurve.quadratic(currentPos, c1, endPos).rightAngled()\n\t\t\t\t\tconst edge = new PCurveEdge(curve, currentPos, endPos, curve.tMin, curve.tMax, undefined, curve.tangentAt(curve.tMin), curve.tangentAt(curve.tMax))\n\t\t\t\t\tpath.push(edge)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase SVGPathData.ARC: {\n\t\t\t\t\tconst phi1 = c.phi1 * DEG, phi2 = c.phi2 * DEG, [phiMin, phiMax] = [phi1, phi2].sort(MINUS)\n\t\t\t\t\tconst stops = arrayRange(-3, 4, 1).map(n => n * PI).filter(stop => phiMin <= stop && stop <= phiMax)\n\t\t\t\t\tconst center = V(c.cX, c.cY)\n\t\t\t\t\tconst f1 = V3.polar(c.rX, c.xRot * DEG)\n\t\t\t\t\tconst f2 = V3.polar(c.rY, c.xRot * DEG + Math.PI / 2)\n\t\t\t\t\tconst edges = getIntervals(stops, phiMin, phiMax).map(([t1, t2]) => {\n\t\t\t\t\t\tconst deltaT = t2 - t1\n\t\t\t\t\t\tconst t1_ = mod(t1, TAU)\n\t\t\t\t\t\tconst t2_ = t1_ + deltaT\n\t\t\t\t\t\tassert(t1_ >= 0 == t2_ >= 0)\n\t\t\t\t\t\tconst gtPI = t1_ > PI || t2_ > PI\n\t\t\t\t\t\tconst aT = gtPI ? t1_ - PI : t1_\n\t\t\t\t\t\tconst bT = gtPI ? t2_ - PI : t2_\n\t\t\t\t\t\tconst curve = new SemiEllipseCurve(center, gtPI ? f1.negated() : f1, gtPI ? f2.negated() : f2)\n\t\t\t\t\t\tconst a = phi1 == t1 ? currentPos : phi2 == t1 ? endPos : curve.at(aT)\n\t\t\t\t\t\tconst b = phi1 == t2 ? currentPos : phi2 == t2 ? endPos : curve.at(bT)\n\t\t\t\t\t\treturn new PCurveEdge(curve, a, b, aT, bT, undefined,\n\t\t\t\t\t\t\tcurve.tangentAt(aT), curve.tangentAt(bT))\n\t\t\t\t\t})\n\t\t\t\t\tpath.push(...c.phiDelta > 0 ? edges : Edge.reversePath(edges))\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tcurrentPos = endPos\n\t\t}\n\t\treturn path\n\t}\n\n\tabstract tangentAt(t: number): V3\n\n\ttoString(): string {\n\t\treturn callsce('new ' + this.constructor.name, this.curve, this.a, this.b, this.aT, this.bT, undefined, this.aDir, this.bDir)\n\t}\n\n\tsplit(t: number): [Edge, Edge] {\n\t\tconst p = this.curve.at(t)\n\t\tconst pDir = this.tangentAt(t)\n\t\treturn [\n\t\t\tEdge.create(this.curve, this.a, p, this.aT, t, undefined, this.aDir, pDir, this.name + 'left'),\n\t\t\tEdge.create(this.curve, p, this.b, t, this.bT, undefined, pDir, this.bDir, this.name + 'left')]\n\t}\n\n\tabstract edgeISTsWithSurface(surface: Surface): number[]\n\n\t/**\n\t * Returns the intersections of the edge with the plane.\n\t * Values are snapped to aT and bT, ie aT === t || !eq(aT, t)\n\t */\n\tabstract edgeISTsWithPlane(plane: P3): number[]\n\n\tcolinearToLine(line: L3): boolean {\n\t\treturn this.curve instanceof L3 && this.curve.isColinearTo(line)\n\t}\n\n\ttValueInside(t: number) {\n\t\treturn this.aT < this.bT\n\t\t\t? lt(this.aT, t) && lt(t, this.bT)\n\t\t\t: lt(this.bT, t) && lt(t, this.aT)\n\t}\n\n\tisValidT(t: number): boolean {\n\t\treturn this.aT < this.bT\n\t\t\t? le(this.aT, t) && le(t, this.bT)\n\t\t\t: le(this.bT, t) && le(t, this.aT)\n\t}\n\n\tclampedT(t: number): number {\n\t\treturn this.aT < this.bT\n\t\t\t? clamp(t, this.aT, this.bT)\n\t\t\t: clamp(t, this.bT, this.aT)\n\t}\n\n\tabstract flipped(): Edge\n\n\t/**\n\t * this is equals-equals. \"isColinearTo\" might make more sense but can't be used, because you can't get a\n\t * consistent hashCode for colinear curves\n\t * @param obj\n\t * @returns\n\t */\n\tequals(obj: any): boolean {\n\t\treturn this === obj ||\n\t\t\tthis.constructor == obj.constructor\n\t\t\t&& this.a.equals(obj.a)\n\t\t\t&& this.b.equals(obj.b)\n\t\t\t&& this.curve.equals(obj.curve)\n\t}\n\n\thashCode(): int {\n\t\tlet hashCode = 0\n\t\thashCode = hashCode * 31 + this.a.hashCode()\n\t\thashCode = hashCode * 31 + this.b.hashCode()\n\t\thashCode = hashCode * 31 + this.curve.hashCode()\n\t\treturn hashCode | 0\n\t}\n\n\tlike(edge: Edge) {\n\t\t// TODO this breaks on colinear edges,\n\t\t// TODO: what, where?\n\t\treturn this === edge ||\n\t\t\tedge instanceof Edge &&\n\t\t\tthis.curve.isColinearTo(edge.curve)\n\t\t\t&& this.a.like(edge.a)\n\t\t\t&& this.b.like(edge.b)\n\t}\n\n\tabstract getVerticesNo0(): V3[]\n\n\tabstract pointsCount(): int\n\n\tisCanon() {\n\t\treturn !this.reversed\n\t}\n\n\tgetCanon() {\n\t\treturn this.reversed\n\t\t\t? this.flipped()\n\t\t\t: this\n\t}\n\n\toverlaps(edge: Edge, noback?: boolean): boolean {\n\t\tassert(this.curve.isColinearTo(edge.curve))\n\t\tconst edgeAT = this.curve.containsPoint(edge.a) && this.curve.pointT(edge.a)\n\t\tconst edgeBT = this.curve.containsPoint(edge.b) && this.curve.pointT(edge.b)\n\t\tif (false === edgeAT && false === edgeBT) {\n\t\t\treturn noback ? false : edge.overlaps(this, true)\n\t\t}\n\t\tconst flipped = false !== edgeAT ? this.tangentAt(edgeAT).dot(edge.aDir) : this.tangentAt(edgeBT).dot(edge.bDir)\n\t\treturn !(le(edgeMaxT, this.minT) || le(this.maxT, edgeMinT))\n\t}\n\n\tgetAABB(): AABB {\n\t\tconst min = [Infinity, Infinity, Infinity], max = [-Infinity, -Infinity, -Infinity]\n\t\tthis.curve.roots().forEach((ts, dim) => {\n\t\t\tts.forEach(t => {\n\t\t\t\tif (lt(this.minT, t) && lt(t, this.maxT)) {\n\t\t\t\t\tmin[dim] = Math.min(min[dim], this.curve.at(t).e(dim))\n\t\t\t\t\tmax[dim] = Math.max(max[dim], this.curve.at(t).e(dim))\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t\tconst aabb = new AABB(V(min), V(max))\n\t\taabb.addPoint(this.a)\n\t\taabb.addPoint(this.b)\n\t\treturn aabb\n\t}\n\n\tlength(steps: int = 1): number {\n\t\treturn this.curve.arcLength(this.minT, this.maxT, steps)\n\t}\n\n\tabstract isCoEdge(other: Edge): boolean\n\n\tabstract points(): V3[]\n\n\tdeltaT() {\n\t\treturn this.bT - this.aT\n\t}\n\n\tatAvgT() {\n\t\treturn this.curve.at((this.minT + this.maxT) / 2)\n\t}\n}\n\nexport class PCurveEdge extends Edge {\n\tconstructor(curve: Curve,\n\t\t\t\ta: V3,\n\t\t\t\tb: V3,\n\t\t\t\taT: number,\n\t\t\t\tbT: number,\n\t\t\t\tpublic flippedOf: PCurveEdge | undefined,\n\t\t\t\treadonly aDir: V3,\n\t\t\t\treadonly bDir: V3,\n\t\t\t\tname?: string) {\n\t\tsuper(curve, a, b, aT, bT, flippedOf, name)\n\t\tassertVectors(aDir, bDir)\n\t\tassertf(() => !aDir.likeO(), curve)\n\t\tassertf(() => !bDir.likeO(), curve)\n\t\tif (!(curve instanceof PICurve)) {\n\t\t\t// TODO\n\t\t\tassertf(() => curve.tangentAt(aT).likeOrReversed(aDir), '' + aT + curve.tangentAt(aT).sce + ' ' + aDir.sce)\n\t\t\tassertf(() => curve.tangentAt(bT).likeOrReversed(bDir))\n\t\t}\n\t\tassert(this.reversed === this.aDir.dot(curve.tangentAt(aT)) < 0,\n\t\t\taT + ' ' + bT + ' ' + curve.constructor.name + ' ' + this.aDir.sce + ' ' + this.bDir.sce + ' ' + curve.tangentAt(aT))\n\t\tassert(this.reversed === this.bDir.dot(curve.tangentAt(bT)) < 0,\n\t\t\taT + ' ' + bT + ' ' + curve.constructor.name + ' ' + this.aDir.sce + ' ' + this.bDir.sce + ' ' + curve.tangentAt(aT))\n\t}\n\n\tstatic forCurveAndTs(curve: Curve, aT: number, bT: number, name?: string) {\n\t\treturn new PCurveEdge(curve, curve.at(aT), curve.at(bT), aT, bT, undefined,\n\t\t\taT < bT ? curve.tangentAt(aT) : curve.tangentAt(aT).negated(),\n\t\t\taT < bT ? curve.tangentAt(bT) : curve.tangentAt(bT).negated(), name)\n\t}\n\n\ttoSource(): string {\n\t\treturn callsce('new PCurveEdge', this.curve, this.a, this.b, this.aT, this.bT,\n\t\t\tundefined, this.aDir, this.bDir, this.name)\n\t}\n\n\tgetVerticesNo0(): V3[] {\n\t\treturn this.curve.calcSegmentPoints(this.aT, this.bT, this.a, this.b, this.reversed, false)\n\t}\n\n\tpointsCount(): int {\n\t\treturn this.points().length\n\t}\n\n\tpoints(): V3[] {\n\t\treturn this.curve.calcSegmentPoints(this.aT, this.bT, this.a, this.b, this.reversed, true)\n\t}\n\n\trotViaPlane(normal: V3, reversed: boolean) {\n\t\tlet rot = this.aDir.angleRelativeNormal(this.bDir, normal)\n\t\tconst counterClockWise = (normal.dot(this.curve.normal) > 0) === !this.reversed\n\t\tif (counterClockWise) {\n\t\t\t// counterclockwise rotation, i.e. rot > 0\n\t\t\tif (rot < 0) rot += 2 * Math.PI\n\t\t} else {\n\t\t\tif (rot > 0) rot -= 2 * Math.PI\n\t\t}\n\t\treturn rot\n\t}\n\n\tedgeISTsWithSurface(surface: Surface): number[] {\n\t\treturn this.curve.isTsWithSurface(surface)\n\t\t\t.map(edgeT => snap2(edgeT, this.aT, this.bT))\n\t\t\t.filter(edgeT => this.minT <= edgeT && edgeT <= this.maxT)\n\t}\n\n\tedgeISTsWithPlane(surface: P3): number[] {\n\t\treturn this.curve.isTsWithPlane(surface)\n\t\t\t.map(edgeT => snap2(edgeT, this.aT, this.bT))\n\t\t\t.filter(edgeT => this.minT <= edgeT && edgeT <= this.maxT)\n\t}\n\n\ttangentAt(t: number): V3 {\n\t\treturn !this.reversed ? this.curve.tangentAt(t) : this.curve.tangentAt(t).negated()\n\t}\n\n\tflipped(): PCurveEdge {\n\t\treturn this.flippedOf || (this.flippedOf = new PCurveEdge(this.curve, this.b, this.a, this.bT, this.aT, this,\n\t\t\tthis.bDir.negated(), this.aDir.negated(), this.name))\n\t}\n\n\ttransform(m4: M4, desc?: string): PCurveEdge {\n\t\treturn new PCurveEdge(this.curve.transform(m4), m4.transformPoint(this.a), m4.transformPoint(this.b),\n\t\t\tthis.aT, this.bT,\n\t\t\tundefined,\n\t\t\tm4.transformVector(this.aDir), m4.transformVector(this.bDir), '' + this.name + desc) as this\n\t}\n\n\tisCoEdge(edge: Edge): boolean {\n\t\treturn this === edge || this === edge.flippedOf ||\n\t\t\tthis.curve.isColinearTo(edge.curve) && (\n\t\t\t\tthis.a.like(edge.a) && this.b.like(edge.b)\n\t\t\t\t|| this.a.like(edge.b) && this.b.like(edge.a)\n\t\t\t)\n\t}\n}\n\nexport class StraightEdge extends Edge {\n\treadonly tangent: V3\n\treadonly curve: L3\n\n\t// flippedOf: StraightEdge\n\n\tconstructor(line: L3, a: V3, b: V3, aT: number, bT: number, public flippedOf?: StraightEdge, name?: string) {\n\t\tsuper(line, a, b, aT, bT, flippedOf, name)\n\t\tassertInst(L3, line)\n\t\t!flippedOf || assertInst(StraightEdge, flippedOf)\n\t\t!name || assertf(() => 'string' === typeof name, name)\n\t\tassert(!a.like(b), '!a.like(b)' + a + b) // don't put in super as it will break full ellipse\n\t\tthis.tangent = this.aT < this.bT ? this.curve.dir1 : this.curve.dir1.negated()\n\t}\n\n\tget aDir() {\n\t\treturn this.tangent\n\t}\n\n\tget bDir() {\n\t\treturn this.tangent\n\t}\n\n\tstatic throughPoints(a: V3, b: V3, name?: string) {\n\t\treturn new StraightEdge(L3.throughPoints(a, b, 0, a.to(b).length()), a, b, 0, a.to(b).length(), undefined, name)\n\t}\n\n\t/**\n\t * Create a list of StraightEdges from a list of vertices.\n\t * @param vertices\n\t * @param closed Whether to connect the first and last vertices. Defaults to true.\n\t * @returns\n\t */\n\tstatic chain(vertices: V3[], closed: boolean = true): StraightEdge[] {\n\t\tconst vc = vertices.length\n\t\treturn arrayFromFunction(closed ? vc : vc - 1,\n\t\t\ti => StraightEdge.throughPoints(vertices[i], vertices[(i + 1) % vc]))\n\t}\n\n\ttoSource(): string {\n\t\treturn callsce('new StraightEdge', this.curve, this.a, this.b, this.aT, this.bT)\n\t}\n\n\tgetVerticesNo0() {\n\t\treturn [this.b]\n\t}\n\n\tpointsCount() {\n\t\treturn 2\n\t}\n\n\tpoints() {\n\t\treturn [this.a, this.b]\n\t}\n\n\tedgeISTsWithPlane(plane: P3): number[] {\n\t\tconst edgeT = snap2(this.curve.isTWithPlane(plane), this.aT, this.bT)\n\t\treturn (this.minT <= edgeT && edgeT <= this.maxT) ? [edgeT] : []\n\t}\n\n\tedgeISTsWithSurface(surface: Surface): number[] {\n\t\tif (surface instanceof PlaneSurface) {\n\t\t\treturn this.edgeISTsWithPlane(surface.plane)\n\t\t} else {\n\t\t\treturn surface.isTsForLine(this.curve)\n\t\t\t\t.map(edgeT => snap2(edgeT, this.aT, this.bT))\n\t\t\t\t.filter(edgeT => this.minT <= edgeT && edgeT <= this.maxT)\n\t\t}\n\t}\n\n\ttangentAt() {\n\t\treturn this.tangent\n\t}\n\n\tflipped(): StraightEdge {\n\t\treturn this.flippedOf || (this.flippedOf = new StraightEdge(this.curve, this.b, this.a, this.bT, this.aT, this, this.name))\n\t}\n\n\ttransform(m4: M4, desc?: string): StraightEdge {\n\t\tconst lineDir1TransLength = m4.transformVector(this.curve.dir1).length()\n\t\treturn new StraightEdge(\n\t\t\tthis.curve.transform(m4),\n\t\t\tm4.transformPoint(this.a),\n\t\t\tm4.transformPoint(this.b), this.aT * lineDir1TransLength, this.bT * lineDir1TransLength, undefined, '' + this.name + desc) as this\n\t}\n\n\tisCoEdge(edge: Edge): boolean {\n\t\treturn this === edge || this === edge.flippedOf || edge.constructor === StraightEdge && (\n\t\t\tthis.a.like(edge.a) && this.b.like(edge.b)\n\t\t\t|| this.a.like(edge.b) && this.b.like(edge.a)\n\t\t)\n\t}\n\n\tgetEdgeT(p: V3): number | undefined {\n\t\tassertVectors(p)\n\t\tlet edgeT = p.minus(this.curve.anchor).dot(this.curve.dir1)\n\t\tif (!eq0(this.curve.at(edgeT).distanceTo(p))) {\n\t\t\treturn\n\t\t}\n\t\tedgeT = snap2(edgeT, this.aT, this.bT)\n\t\treturn (this.minT <= edgeT && edgeT <= this.maxT) ? edgeT : undefined\n\t}\n\n}\n\n","import {int, M4} from 'ts3dutils'\n\nimport {Edge, Face, Surface} from './index'\n\n\n/**\n * Created by aval on 19.04.2017.\n */\nexport abstract class FaceInfoFactory<T> {\n\tstatic makeStatic<T>(staticInfo: T): FaceInfoFactory<T> {\n\t\treturn new class extends FaceInfoFactory<T> {\n\t\t\tconstructor() {\n\t\t\t\tsuper()\n\t\t\t}\n\n\t\t\tinfo(surface: Surface, contour: Edge[], holes: Edge[][]): T {\n\t\t\t\treturn staticInfo\n\t\t\t}\n\t\t}\n\t}\n\n\tinfo(surface: Surface, contour: Edge[], holes: Edge[][]): T {\n\t\tthrow new Error('no default implementation')\n\t}\n\n\textrudeBottom(surface: Surface, contour: Edge[], holes: Edge[][] = []): T {\n\t\treturn this.info(surface, contour, holes)\n\t}\n\n\textrudeTop(surface: Surface, contour: Edge[], holes: Edge[][] = []): T {\n\t\treturn this.info(surface, contour, holes)\n\t}\n\n\textrudeWall(index: int, surface: Surface, contour: Edge[], holes: Edge[][] = []): T {\n\t\treturn this.info(surface, contour, holes)\n\t}\n\n\trotationWall(index: int, surface: Surface, contour: Edge[], holes: Edge[][] = []): T {\n\t\treturn this.info(surface, contour, holes)\n\t}\n\n\trotationStart(surface: Surface, contour: Edge[], holes: Edge[][] = []): T {\n\t\treturn this.info(surface, contour, holes)\n\t}\n\n\trotationEnd(surface: Surface, contour: Edge[], holes: Edge[][] = []): T {\n\t\treturn this.info(surface, contour, holes)\n\t}\n\n\tnewSubFace(original: Face, surface: Surface, contour: Edge[], holes: Edge[][] = []): T {\n\t\treturn original.info\n\t}\n\n\ttransform(original: Face, m4: M4, desc: string, surface: Surface, contour: Edge[], holes: Edge[][] = []): T {\n\t\treturn original.info\n\t}\n}","import {Equalable, Pair} from 'javasetmap.ts'\nimport {\n\tAABB, arrayFromFunction, arrayRange, assert, assertf, assertInst, assertVectors, disableConsole, doubleSignedArea,\n\tenableConsole, eq, eq0, ge, GOLDEN_RATIO, gt, int, isCCW, le, lerp, lt, M4, mapPush, MINUS, mod, NLA_PRECISION,\n\tsnap, TAU, Transformable, V3,\n} from 'ts3dutils'\nimport {Mesh, pushQuad} from 'tsgl'\n\nimport {\n\tB2, ConicSurface, COPLANAR_SAME, Curve, dotCurve, dotCurve2, Edge, EllipsoidSurface, fff, getGlobalId, INSIDE,\n\tIntersectionPointInfo, L3, P3, ParametricSurface, PlaneSurface, PointVsFace, SemiEllipsoidSurface,\n\tsplitsVolumeEnclosingCone2, splitsVolumeEnclosingFaces, splitsVolumeEnclosingFacesP, splitsVolumeEnclosingFacesP2,\n\tStraightEdge, Surface, triangulateVertices, EPS,\n} from './index'\n\nconst {PI,  min, max,  sign, ceil, floor, abs} = Math\n\n\nexport abstract class Face extends Transformable {\n\t'constructor': new (surface: Surface, contour: Edge[], holes?: Edge[][], name?: string, info?: any) => this\n\tallEdges: Edge[]\n\tprotected aabb: AABB\n\n\tconstructor(readonly surface: Surface,\n\t\t\t\treadonly contour: Edge[],\n\t\t\t\treadonly holes: Edge[][] = [],\n\t\t\t\treadonly name?: string,\n\t\t\t\treadonly info?: any) {\n\t\tsuper()\n\t\t//assert(name)\n\t\tEdge.assertLoop(contour)\n\t\tassert(contour.every(f => f instanceof Edge), () => 'contour.every(f => f instanceof Edge)' + contour)\n\t\t// contour.forEach(e => !surface.containsCurve(e.curve) &&\n\t\t// console.log('FAIL:'+surface.distanceToPoint(e.curve.anchor)))\n\t\tcontour.forEach(e => {\n\t\t\tassert(surface.containsCurve(e.curve), 'edge not in surface ' + e + surface)\n\t\t})\n\t\tassert(surface.edgeLoopCCW(contour), surface.toString() + contour.join('\\n'))\n\t\tholes && holes.forEach(hole => Edge.assertLoop(hole))\n\t\tholes && holes.forEach(hole => assert(!surface.edgeLoopCCW(hole)))\n\t\tassert(!holes || holes.constructor == Array, holes && holes.toString())\n\t\tthis.allEdges = Array.prototype.concat.apply(this.contour, this.holes)\n\t}\n\n\tstatic assembleFacesFromLoops(loops: Edge[][], surface: Surface, faceConstructor: typeof Face.prototype.constructor): Face[] {\n\t\ttype LoopInfo = { loop: Edge[], ccw: boolean, subloops: LoopInfo[] }\n\n\t\tfunction placeRecursively(newLoopInfo: LoopInfo, loopInfos: LoopInfo[]) {\n\t\t\tif (loopInfos.length == 0) {\n\t\t\t\tloopInfos.push(newLoopInfo)\n\t\t\t} else {\n\t\t\t\tconst subLoopInfo = loopInfos.find(\n\t\t\t\t\tloopInfo => B2.loop1ContainsLoop2(loopInfo.loop, loopInfo.ccw, newLoopInfo.loop, newLoopInfo.ccw, surface))\n\t\t\t\tif (subLoopInfo) {\n\t\t\t\t\tplaceRecursively(newLoopInfo, subLoopInfo.subloops)\n\t\t\t\t} else {\n\t\t\t\t\t// newLoopInfo isnt contained by any other subLoopInfo\n\t\t\t\t\tfor (let i = loopInfos.length; --i >= 0;) {\n\t\t\t\t\t\tconst subLoopInfo = loopInfos[i]\n\t\t\t\t\t\t//console.log('cheving subLoopInfo', surface.loopContainsPoint(newLoopInfo.edges,\n\t\t\t\t\t\t// subLoopInfo.edges[0].a))\n\t\t\t\t\t\tif (B2.loop1ContainsLoop2(newLoopInfo.loop, newLoopInfo.ccw, subLoopInfo.loop, subLoopInfo.ccw, surface)) {\n\t\t\t\t\t\t\tnewLoopInfo.subloops.push(subLoopInfo)\n\t\t\t\t\t\t\tloopInfos.splice(i, 1) // remove it\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tloopInfos.push(newLoopInfo)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction newFacesRecursive(loopInfo: LoopInfo): void {\n\t\t\tnewFaces.push(new faceConstructor(surface,\n\t\t\t\tloopInfo.ccw ? loopInfo.loop : Edge.reversePath(loopInfo.loop),\n\t\t\t\tloopInfo.subloops.map(sl => sl.ccw ? Edge.reversePath(sl.loop) : sl.loop)))\n\t\t\tloopInfo.subloops.forEach(sl => sl.subloops.forEach(sl2 => newFacesRecursive(sl2)))\n\t\t}\n\n\t\tconst newFaces: Face[] = []\n\t\tconst topLevelLoops: LoopInfo[] = []\n\t\tloops.forEach(loop => placeRecursively({\n\t\t\tloop: loop,\n\t\t\tccw: surface.edgeLoopCCW(loop),\n\t\t\tsubloops: [],\n\t\t}, topLevelLoops))\n\t\ttopLevelLoops.forEach(tll => newFacesRecursive(tll))\n\t\treturn newFaces\n\t}\n\n\t//fromLoops(loops: Edge[][], surface: Surface) {\n\t//\ttype LoopInfo = {loop: Edge[], ccw: boolean, subloops: LoopInfo[]}\n\t//\tfunction placeRecursively(newLoopInfo: LoopInfo, loopInfos: LoopInfo[]) {\n\t//\t\tif (loopInfos.length == 0) {\n\t//\t\t\tloopInfos.push(newLoopInfo)\n\t//\t\t} else {\n\t//\t\t\tconst subLoopInfo = loopInfos.find(loopInfo => B2.loop1ContainsLoop2(loopInfo.loop, loopInfo.ccw,\n\t// newLoopInfo.loop, newLoopInfo.ccw, surface)) if (subLoopInfo) { placeRecursively(newLoopInfo,\n\t// subLoopInfo.subloops) } else { // newLoopInfo isnt contained by any other subLoopInfo for (let i =\n\t// loopInfos.length; --i >= 0;) { const subLoopInfo = loopInfos[i] //console.log('cheving subLoopInfo',\n\t// surface.loopContainsPoint(newLoopInfo.edges, subLoopInfo.edges[0].a)) if\n\t// (B2.loop1ContainsLoop2(newLoopInfo.loop, subLoopInfo.loop, surface)) { newLoopInfo.subloops.push(subLoopInfo)\n\t// loopInfos.splice(i, 1) // remove it } } loopInfos.push(newLoopInfo) } } }  function newFacesRecursive(loopInfo:\n\t// LoopInfo): void { // CW loops can be top level, if they are holes in the original face not contained in the new\n\t// face if (loopInfo.ccw) { if (loopInfo.subloops.every(sl => !sl.ccw)) { const newFace = new\n\t// faceConstructor(surface, loopInfo.loop, loopInfo.subloops.map(sl => sl.loop)) newFaces.push(newFace)\n\t// loopInfo.subloops.forEach(sl => sl.subloops.forEach(slsl => slsl.ccw && newFacesRecursive(slsl))) } else {\n\t// loopInfo.subloops.forEach(sl => sl.ccw && newFacesRecursive(sl)) } } }  const newFaces: Face[] = [] const\n\t// topLevelLoops:LoopInfo[] = [] loops.forEach(loop => placeRecursively({loop: loop, ccw:\n\t// surface.edgeLoopCCW(loop), subloops: []}, topLevelLoops)) topLevelLoops.forEach(tll => newFacesRecursive(tll))\n\t// return newFaces }\n\n\tstatic create(surface: Surface, faceEdges: Edge[], holes?: Edge[][], faceName?: string, info?: any) {\n\t\treturn surface instanceof PlaneSurface\n\t\t\t? new PlaneFace(surface, faceEdges, holes, faceName, info)\n\t\t\t: new RotationFace(surface, faceEdges, holes, faceName, info)\n\t}\n\n\tintersectFace(face2: Face,\n\t\t\t\t  thisBrep: B2,\n\t\t\t\t  face2Brep: B2,\n\t\t\t\t  faceMap: Map<Face, Edge[]>,\n\t\t\t\t  thisEdgePoints: Map<Edge, IntersectionPointInfo[]>,\n\t\t\t\t  otherEdgePoints: Map<Edge, IntersectionPointInfo[]>,\n\t\t\t\t  checkedPairs: Set<Pair<any, any>>) {\n\n\t\t//thisEdgePoints = {\n\t\t//   get(key) {\n\t\t//       return _thisEdgePoints.get(key)\n\t\t//    },\n\t\t//    set(key, value) {\n\t\t//       assert(thisBrep.edgeFaces.get(key))\n\t\t//        _thisEdgePoints.set(key, value)\n\t\t//    }\n\t\t//}\n\t\tfunction hasPair(a: Equalable, b: Equalable) {\n\t\t\treturn checkedPairs.has(new Pair(a, b))\n\t\t}\n\n\t\tfunction addPair(a: Equalable, b: Equalable) {\n\t\t\treturn checkedPairs.add(new Pair(a, b))\n\t\t}\n\n\t\t/**\n\t\t * @param newEdge generated segment\n\t\t * @param col1 if newEdge is colinear to an edge of this, the edge in question\n\t\t * @param col2 same for face2\n         * @return whether new edge was added.\n\t\t */\n\t\tfunction handleNewEdge(newEdge: Edge, col1: Edge, col2: Edge): boolean {\n\t\t\tif (!col1 && !col2) {\n\t\t\t\tlet correctDir = face.surface.normalP(newEdge.a).cross(face2.surface.normalP(newEdge.a))\n\t\t\t\tif (correctDir.likeO()) {\n\t\t\t\t\tconst t = lerp(newEdge.aT, newEdge.bT, 1 / GOLDEN_RATIO), p = newEdge.curve.at(t)\n\t\t\t\t\tcorrectDir = face.surface.normalP(p).cross(face2.surface.normalP(p))\n\t\t\t\t}\n\t\t\t\tif (!correctDir.likeO()) {\n\t\t\t\t\tif (correctDir.dot(newEdge.aDir) < 0) {\n\t\t\t\t\t\tnewEdge = newEdge.flipped()\n\t\t\t\t\t}\n\t\t\t\t\tmapPush(faceMap, face, newEdge)\n\t\t\t\t\tmapPush(faceMap, face2, newEdge.flipped())\n\t\t\t\t} else {\n\t\t\t\t\tconst p = newEdge.a\n\t\t\t\t\tconst plane = P3.normalOnAnchor(newEdge.aDir, p)\n\t\t\t\t\tconst up = face.surface.normalP(p)\n\t\t\t\t\tconst sameDir = up.dot(face2.surface.normalP(p)) > 0\n\t\t\t\t\tconst canonDir = plane.normal1.cross(up)\n\t\t\t\t\tconst curve = face.surface.isCurvesWithPlane(plane)[0], curveT = curve.pointT(p),\n\t\t\t\t\t\tcurveDir = sign(canonDir.dot(curve.tangentAt(curveT)))\n\t\t\t\t\tconst curve2 = face2.surface.isCurvesWithPlane(plane)[0], curve2T = curve2.pointT(p),\n\t\t\t\t\t\tcurve2Dir = sign(canonDir.dot(curve.tangentAt(curve2T)))\n\t\t\t\t\tconst foo = curve.diff(curveT, EPS * curveDir).dot(up)\n\t\t\t\t\tconst foo2 = curve2.diff(curve2T, EPS * curve2Dir).dot(up)\n\t\t\t\t\tif (foo2 < foo) {\n\t\t\t\t\t\tmapPush(faceMap, face2, sameDir ? newEdge.flipped() : newEdge)\n\t\t\t\t\t}\n\t\t\t\t\tif (up.dot(face2.surface.normalP(p)) < 0 == foo2 < foo) {\n\t\t\t\t\t\tmapPush(faceMap, face, newEdge.flipped())\n\t\t\t\t\t}\n\t\t\t\t\tconst bar = curve.diff(curveT, EPS * curveDir).dot(up)\n\t\t\t\t\tconst bar2 = curve2.diff(curve2T, EPS * curve2Dir).dot(up)\n\t\t\t\t\tif (bar2 < bar) {\n\t\t\t\t\t\tmapPush(faceMap, face2, sameDir ? newEdge : newEdge.flipped())\n\t\t\t\t\t}\n\t\t\t\t\tif (sameDir != bar2 < bar) {\n\t\t\t\t\t\tmapPush(faceMap, face, newEdge)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true\n\t\t\t}\n\n\t\t\tfunction handleEdgeInFace(\n\t\t\t    col1: Edge | undefined, col2: Edge | undefined,\n                face: Face, face2: Face,\n                thisBrep: B2, face2Brep: B2,\n                coplanarSameIsInside: boolean,\n                has: typeof hasPair, add: typeof addPair\n            ): boolean {\n\t\t\t\tif (col1 && !col2) {\n\t\t\t\t\tif (hasPair(col1.getCanon(), face2)) return false\n\n\t\t\t\t\t//add(col1.getCanon(), face2)\n\t\t\t\t\tconst surface2 = face2.surface\n\n\t\t\t\t\t// NB: a new edge is inserted even though it may be the same as an old one\n\t\t\t\t\t// however it indicates that it intersects the other volume here, i.e. the old edge cannot\n\t\t\t\t\t// be counted as 'inside' for purposes of reconstitution\n\t\t\t\t\tthisBrep.edgeFaces.get(col1.getCanon()).forEach(faceInfo => {\n\t\t\t\t\t\t//const dot = snap0(surface2.normal1.dot(faceInfo.inside))\n\t\t\t\t\t\t//if (dot == 0 ? !coplanarSameIsInside : dot < 0) {\n\t\t\t\t\t\tconst pointsInsideFace = fff(faceInfo, face2.surface)\n\t\t\t\t\t\tconst edgeInside = pointsInsideFace == INSIDE || !coplanarSameIsInside && pointsInsideFace == COPLANAR_SAME\n\t\t\t\t\t\tconst pushEdge = faceInfo.edge.tangentAt(faceInfo.edge.curve.pointT(newEdge.a)).like(newEdge.aDir)\n\t\t\t\t\t\t\t? newEdge\n\t\t\t\t\t\t\t: newEdge.flipped()\n\t\t\t\t\t\tassert(faceInfo.edge.tangentAt(faceInfo.edge.curve.pointT(pushEdge.a)).like(pushEdge.aDir))\n\t\t\t\t\t\tedgeInside && mapPush(faceMap, faceInfo.face, pushEdge)\n\t\t\t\t\t})\n\n\t\t\t\t\tconst surface2NormalAtNewEdgeA = surface2.normalP(newEdge.a)\n\t\t\t\t\tconst newEdgeInside = surface2NormalAtNewEdgeA.cross(newEdge.aDir)\n\t\t\t\t\tconst sVEF1 = splitsVolumeEnclosingFacesP(thisBrep, col1.getCanon(), newEdge.a, newEdgeInside, surface2NormalAtNewEdgeA)\n\t\t\t\t\tlet addNewEdge, addNewEdgeFlipped\n\t\t\t\t\tif (addNewEdge = sVEF1 == INSIDE || coplanarSameIsInside && sVEF1 == COPLANAR_SAME) {\n\t\t\t\t\t\tmapPush(faceMap, face2, newEdge)\n\t\t\t\t\t}\n\t\t\t\t\tconst sVEF2 = splitsVolumeEnclosingFacesP(thisBrep, col1.getCanon(), newEdge.a, newEdgeInside.negated(), surface2NormalAtNewEdgeA)\n\t\t\t\t\tif (addNewEdgeFlipped = sVEF2 == INSIDE || coplanarSameIsInside && sVEF2 == COPLANAR_SAME) {\n\t\t\t\t\t\tmapPush(faceMap, face2, newEdge.flipped())\n\t\t\t\t\t}\n\t\t\t\t\tif (addNewEdge || addNewEdgeFlipped || sVEF1 == COPLANAR_SAME && sVEF2 == INSIDE || sVEF2 == COPLANAR_SAME && sVEF1 == INSIDE) {\n\t\t\t\t\t\treturn true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst c1 = handleEdgeInFace(col1, col2, face, face2, thisBrep, face2Brep, false, hasPair, addPair)\n\t\t\tconst c2 = handleEdgeInFace(col2, col1, face2, face, face2Brep, thisBrep, true, (a, b) => hasPair(b, a), (a, b) => addPair(b, a))\n\t\t\tif (c1 || c2) return true\n\n\t\t\tif (col1 && col2) {\n\t\t\t\tif (hasPair(col1.getCanon(), col2.getCanon())) return false\n\n\t\t\t\taddPair(col1.getCanon(), col2.getCanon())\n                let added = false\n\t\t\t\tfunction handleColinearEdgeFaces(col1: Edge, col2: Edge, thisBrep: B2, face2Brep: B2,\n\t\t\t\t\tcoplanarSameIsInside: boolean, thisEdgePoints: Map<Edge, IntersectionPointInfo[]>,\n\t\t\t\t\t has: typeof hasPair, add: typeof addPair) {\n\t\t\t\t\t// not entirely sure for what i had the dirInsides in?\n\t\t\t\t\t//const aDirNegatedInside = (newEdge.a.like(col2.a) || newEdge.a.like(col2.b)) &&\n\t\t\t\t\t// splitsVolumeEnclosingCone(face2Brep, newEdge.a, newEdge.aDir.negated()) == INSIDE const\n\t\t\t\t\t// bDirInside = (newEdge.b.like(col2.a) || newEdge.b.like(col2.b)) &&\n\t\t\t\t\t// splitsVolumeEnclosingCone(face2Brep, newEdge.b, newEdge.bDir) == INSIDE\n\t\t\t\t\tfor (const faceInfo of thisBrep.edgeFaces.get(col1.getCanon())) {\n\t\t\t\t\t\tconst sVEF = splitsVolumeEnclosingFaces(face2Brep, col2.getCanon(), faceInfo.inside, faceInfo.normalAtCanonA)\n\t\t\t\t\t\tconst edgeInside = sVEF == INSIDE || coplanarSameIsInside && sVEF == COPLANAR_SAME\n\t\t\t\t\t\tconst pushEdge = (faceInfo.edge.aDir.like(newEdge.aDir)) ? newEdge : newEdge.flipped()\n\t\t\t\t\t\tif (edgeInside) {\n\t\t\t\t\t\t\t mapPush(faceMap, faceInfo.face, pushEdge)\n\t\t\t\t\t\t\t const aT = col1.getCanon().curve.pointT(newEdge.a)\n\t\t\t\t\t\t\t if (!eq(aT, col1.aT) && !eq(aT, col1.bT)) {\n\t\t\t\t\t\t\t \t// newEdge.a is in center of col1\n\t\t\t\t\t\t\t \tif (splitsVolumeEnclosingCone2(face2Brep, newEdge.a, newEdge.curve, newEdge.aT, -Math.sign(newEdge.deltaT()) as -1 | 1) == INSIDE) {\n\t\t\t\t\t\t\t \t\tmapPush(thisEdgePoints, col1.getCanon(), {\n\t\t\t\t\t\t\t \t\t\tp: newEdge.a,\n\t\t\t\t\t\t\t \t\t\tedgeT: aT\n\t\t\t\t\t\t\t \t\t})\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t const bT = col1.getCanon().curve.pointT(newEdge.b)\n\t\t\t\t\t\t\t if (!eq(bT, col1.aT) && !eq(bT, col1.bT)) {\n\t\t\t\t\t\t\t \tif (splitsVolumeEnclosingCone2(face2Brep, newEdge.b, newEdge.curve, newEdge.bT, Math.sign(newEdge.deltaT()) as -1 | 1) == INSIDE) {\n\t\t\t\t\t\t\t \t\tmapPush(thisEdgePoints, col1.getCanon(), {\n\t\t\t\t\t\t\t \t\t\tp: newEdge.b,\n\t\t\t\t\t\t\t \t\t\tedgeT: bT\n\t\t\t\t\t\t\t \t\t})\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t\t }\n                            added = true\n                        }\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\thandleColinearEdgeFaces(col1, col2, thisBrep, face2Brep, true, thisEdgePoints, hasPair, addPair)\n\t\t\t\thandleColinearEdgeFaces(col2, col1, face2Brep, thisBrep, false, otherEdgePoints, (a, b) => hasPair(b, a), (a, b) => addPair(b, a))\n                return false\n\t\t\t}\n\t\t}\n\n\n\t\t// what needs to be generated: new edges on face\n\t\t// points on edges where they are cut by faces so that sub edges will be generated for loops\n\t\t// points on ends of edges where the edge will be an edge in the new volume where it goes from A to B\n\t\t//         you don't want those to be marked as 'inside', otherwise invalid faces will be added\n\t\t// if a face cuts a corner, nothing needs to be done, as that alone does not limit what adjacent faces will be\n\t\tfunction handleEndPoint(a: IntersectionPointInfo | false, b: IntersectionPointInfo | false, newEdge: Edge) {\n\t\t\t// ends in the middle of b's face\n\t\t\tif (a && !b) {\n\t\t\t\tif (!a.colinear && a.edgeT != a.edge.aT && a.edgeT != a.edge.bT) {\n\t\t\t\t\tmapPush(thisEdgePoints, a.edge.getCanon(), a)\n\t\t\t\t\tassert(a.edge.isValidT(a.edgeT))\n\t\t\t\t}\n\t\t\t\t// else colinear segment ends in middle of other face, do nothing\n\t\t\t}\n\t\t\t// ends in the middle of a's face\n\t\t\tif (b && !a) {\n\t\t\t\tif (!b.colinear && b.edgeT != b.edge.aT && b.edgeT != b.edge.bT) {\n\t\t\t\t\tmapPush(otherEdgePoints, b.edge.getCanon(), b)\n\t\t\t\t\tassert(b.edge.isValidT(b.edgeT))\n\t\t\t\t}\n\t\t\t\t// else colinear segment ends in middle of other face, do nothing\n\t\t\t}\n\t\t\tif (a && b) {\n\t\t\t\tassert(a.colinear || b.colinear || eq(a.t, b.t))\n\t\t\t\t// if a or b is colinear the correct points will already have been added to the edge by handleNewEdge\n\t\t\t\t// segment starts/ends on edge/edge intersection\n\t\t\t\tfunction foo(a, b, face, face2, thisPlane, face2Plane, thisBrep, face2Brep, first, thisEdgePoints) {\n\t\t\t\t\tif (!a.colinear && a.edgeT != a.edge.aT && a.edgeT != a.edge.bT) {\n\t\t\t\t\t\t//if (!hasPair(a.edge.getCanon(), b.edge.getCanon())) {\n\t\t\t\t\t\taddPair(a.edge.getCanon(), b.edge.getCanon())\n\t\t\t\t\t\t// ends on a, on colinear segment b bT != a.edge.bT &&\n\t\t\t\t\t\t// b can be colinear, so edgeT == aT is possible\n\t\t\t\t\t\tif (a.p.like(b.edge.a) || a.p.like(b.edge.b)) {\n\t\t\t\t\t\t\tconst corner = a.p.like(b.edge.a) ? b.edge.a : b.edge.b\n\t\t\t\t\t\t\t// face2brep corner on edge\n\t\t\t\t\t\t\tconst sVEC1 = splitsVolumeEnclosingCone2(face2Brep, corner, a.edge.curve, a.edgeT, 1)\n\t\t\t\t\t\t\tconst sVEC2 = splitsVolumeEnclosingCone2(face2Brep, corner, a.edge.curve, a.edgeT, -1)\n\t\t\t\t\t\t\t// if either of these return ALONG_EDGE_OR_PLANE, then the breps share a colinear edge\n\n\t\t\t\t\t\t\tif (INSIDE == sVEC1 || INSIDE == sVEC2) {\n\t\t\t\t\t\t\t\tmapPush(thisEdgePoints, a.edge.getCanon(), a)\n\t\t\t\t\t\t\t\tassert(a.edge.isValidT(a.edgeT))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// edge / edge center intersection\n\t\t\t\t\t\t\t// todo: is this even necessary considering we add edges anyway? i think so...\n\t\t\t\t\t\t\t// const testVector =\n\t\t\t\t\t\t\t// a.edge.tangentAt(a.edgeT).rejectedFrom(b.edge.tangentAt(b.edge.curve.pointT(a.p)))\n\t\t\t\t\t\t\t// assert(!testVector.likeO())\n\t\t\t\t\t\t\tconst sVEF1 = splitsVolumeEnclosingFacesP2(face2Brep, b.edge.getCanon(), a.p, a.edge.curve, a.edgeT, 1, thisPlane.normalP(a.p))\n\t\t\t\t\t\t\tconst sVEF2 = splitsVolumeEnclosingFacesP2(face2Brep, b.edge.getCanon(), a.p, a.edge.curve, a.edgeT, -1, thisPlane.normalP(a.p))\n\t\t\t\t\t\t\tif (INSIDE == sVEF1 || INSIDE == sVEF2) {\n\t\t\t\t\t\t\t\tmapPush(thisEdgePoints, a.edge.getCanon(), a)\n\t\t\t\t\t\t\t\tassert(a.edge.isValidT(a.edgeT))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfoo(a, b, face, face2, surface, surface2, thisBrep, face2Brep, true, thisEdgePoints)\n\t\t\t\tfoo(b, a, face2, face, surface2, surface, face2Brep, thisBrep, false, otherEdgePoints)\n\t\t\t}\n\t\t}\n\n\n\t\tassertInst(Face, face2)\n\n\n\t\tconst face = this\n\t\tconst surface = face.surface, surface2 = face2.surface\n\t\tif (!this.getAABB().fuzzyTouchesAABB(face2.getAABB())) {\n\t\t\treturn\n\t\t}\n\t\tif (surface.isCoplanarTo(surface2)) {\n\t\t\treturn\n\t\t}\n\t\tconst isCurves = surface.isCurvesWithSurface(surface2)\n\t\tif (0 == isCurves.length) {\n\t\t\treturn\n\t\t}\n\t\tfor (const isCurve of isCurves) {\n\t\t\tconst t = (isCurve.tMin + isCurve.tMax) / 2, p = isCurve.at(t), dp = isCurve.tangentAt(t)\n\t\t\tconst normal1 = surface.normalP(p), normal2 = surface2.normalP(p), dp2 = normal1.cross(normal2)\n\t\t\tassert(surface.containsCurve(isCurve))\n\t\t\tassert(surface2.containsCurve(isCurve))\n\t\t\tif (!dp2.likeO()) {\n\t\t\t\t//assert(dp2.dot(dp) > 0)\n\t\t\t\t// TODO assert(dp2.isParallelTo(dp))\n\t\t\t}\n\t\t}\n\n\t\tfor (let isCurveIndex = 0; isCurveIndex < isCurves.length; isCurveIndex++) {\n\t\t\t// get intersections of newCurve with other edges of face and face2\n\t\t\tconst isCurve = isCurves[isCurveIndex]\n\t\t\tconst ps1 = face.edgeISPsWithSurface(isCurve, face2.surface)\n\t\t\tconst ps2 = face2.edgeISPsWithSurface(isCurve, face.surface)\n\t\t\t// for non-endless curves, e.g. ellipses, the intersections of the faces can be non-zero, even if one of\n\t\t\t// the faces doesn't register any points on the curve. For example, if a cylinder is cut entirely by a\n\t\t\t// plane face (all its edges around the cylinder), then the face will contain the entire curve and\n\t\t\t// 'ps' for the plane face will be empty\n\t\t\t// TODO: behavior when curves touch face?\n\t\t\t// !! start in does depend on insideDir... TODO\n\t\t\tassertf(() => (0 == ps1.length) || !eq0(ps1[0].insideDir.dot(isCurve.tangentAt(ps1[0].t))), () => ps1[0].insideDir.dot(isCurve.tangentAt(ps1[0].t)))\n\t\t\tassertf(() => (0 == ps2.length) || !eq0(ps2[0].insideDir.dot(isCurve.tangentAt(ps2[0].t))), () => ps2[0].insideDir.dot(isCurve.tangentAt(ps2[0].t)))\n\n\t\t\tfunction startsInside(ps: IntersectionPointInfo[], face: Face) {\n\t\t\t\tif (0 == ps.length) {\n\t\t\t\t\treturn isFinite(isCurve.tMin) && face.containsPoint2(isCurve.at(isCurve.tMin)) == PointVsFace.INSIDE\n\t\t\t\t} else {\n\t\t\t\t\treturn ps[0].insideDir.dot(isCurve.tangentAt(ps[0].t)) < 0\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// they can't both be empty currently\n\t\t\t// they can't both start 'inside'\n\t\t\tlet in1 = startsInside(ps1, face)\n\t\t\tlet in2 = startsInside(ps2, face2)\n\t\t\tif (0 == ps1.length && !in1 || 0 == ps2.length && !in2) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t//assert(!in1 || !in2)\n\t\t\tlet col1: IntersectionPointInfo | false, col2: IntersectionPointInfo | false\n\t\t\tlet i = 0, j = 0, last\n\t\t\tlet startP = in1 && in2 && isCurve.at(isCurve.tMin), startDir, startT = isCurve.tMin, startA, startB\n\t\t\twhile (i < ps1.length || j < ps2.length) {\n\t\t\t\tassert(i <= ps1.length)\n\t\t\t\tassert(j <= ps2.length)\n\t\t\t\tconst a = ps1[i], b = ps2[j]\n\t\t\t\tassert(a || b)\n\t\t\t\tif (j == ps2.length || i < ps1.length && lt(a.t, b.t)) {\n\t\t\t\t\tlast = a\n\t\t\t\t\tin1 = !in1\n\t\t\t\t\ta.used = true\n\t\t\t\t\tin1 && (col1 = a.colinear && a)\n\t\t\t\t\ti++\n\t\t\t\t} else if (i == ps1.length || gt(a.t, b.t)) {\n\t\t\t\t\tlast = b\n\t\t\t\t\tb.used = true\n\t\t\t\t\tin2 = !in2\n\t\t\t\t\tin2 && (col2 = b.colinear && b)\n\t\t\t\t\tj++\n\t\t\t\t} else {\n\t\t\t\t\tlast = a\n\t\t\t\t\ta.used = true\n\t\t\t\t\tb.used = true\n\t\t\t\t\tin1 = !in1\n\t\t\t\t\tin2 = !in2\n\t\t\t\t\t//if (in1 == in2) {\n\t\t\t\t\tin1 && (col1 = a.colinear && a)\n\t\t\t\t\tin2 && (col2 = b.colinear && b)\n\t\t\t\t\t//}\n\t\t\t\t\ti++\n\t\t\t\t\tj++\n\t\t\t\t}\n\t\t\t\tif (startP && !(in1 && in2)) {\n\t\t\t\t\t// segment end\n\t\t\t\t\tstartDir = isCurve.tangentAt(startT)\n\t\t\t\t\tif (eq(startT, last.t)) {\n\t\t\t\t\t\tstartP = undefined\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tassert(lt(startT, last.t))\n\t\t\t\t\tstartT > last.t && (startDir = startDir.negated())\n\t\t\t\t\tlet endDir = isCurve.tangentAt(last.t)\n\t\t\t\t\tstartT > last.t && (endDir = endDir.negated())\n\t\t\t\t\tconst newEdge = Edge.create(isCurve, startP, last.p, startT, last.t, undefined, startDir, endDir, 'genseg' + getGlobalId())\n\t\t\t\t\tstartP = undefined\n\t\t\t\t\tif (handleNewEdge(newEdge, col1 && col1.edge, col2 && col2.edge)) {\n\t\t\t\t\t\thandleEndPoint(startA || col1, startB || col2, newEdge)\n\t\t\t\t\t\thandleEndPoint(a && a.used && a || col1, b && b.used && b || col2, newEdge)\n\t\t\t\t\t}\n\t\t\t\t} else if (in1 && in2) {\n\t\t\t\t\t// new segment just started\n\t\t\t\t\tstartP = last.p\n\t\t\t\t\tstartDir = last.insideDir\n\t\t\t\t\tstartT = last.t\n\t\t\t\t\tstartA = a && a.used && a\n\t\t\t\t\tstartB = b && b.used && b\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (in1 && in2 && startT !== isCurve.tMax) {\n\t\t\t\tconst endT = isCurve.tMax\n\t\t\t\tstartDir = isCurve.tangentAt(startT)\n\t\t\t\tstartT > endT && (startDir = startDir.negated())\n\t\t\t\tlet endDir = isCurve.tangentAt(endT)\n\t\t\t\tstartT > endT && (endDir = endDir.negated())\n\t\t\t\tconst newEdge = Edge.create(isCurve, startP, isCurve.at(endT), startT, endT, undefined, startDir, endDir, 'genseg' + getGlobalId())\n\t\t\t\tif (handleNewEdge(newEdge, col1 && col1.edge, col2 && col2.edge)) {\n\t\t\t\t\thandleEndPoint(startA || col1, startB || col2, newEdge)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tface.getAllEdges().forEach(edge => {\n\t\t\tcheckedPairs.add(new Pair(edge.getCanon(), face2))\n\t\t})\n\t\tface2.getAllEdges().forEach(edge => {\n\t\t\tcheckedPairs.add(new Pair(edge.getCanon(), face))\n\t\t})\n\t}\n\n\tedgeISPsWithSurface(isCurve: Curve, surface2: Surface): IntersectionPointInfo[] {\n\t\tconst face = this\n\t\tconst surface = face.surface\n\t\tconst loops = face.holes.concat([face.contour])\n\t\tconst ps = []\n\t\tfor (const loop of loops) {\n\t\t\tconst colinearEdges: boolean[] = loop.map(edge => edge.curve.isColinearTo(isCurve))\n\t\t\t//const colinearSides = loop.map((edge, edgeIndex) => -1 != colinearEdges[edgeIndex]\n\t\t\t//            && -sign(isCurves[colinearEdges[edgeIndex]].tangentAt(edge.aT).dot(edge.aDir)))\n\t\t\tfor (let edgeIndex = 0; edgeIndex < loop.length; edgeIndex++) {\n\t\t\t\tconst edge = loop[edgeIndex]\n\t\t\t\tconst nextEdgeIndex = (edgeIndex + 1) % loop.length, nextEdge = loop[nextEdgeIndex]\n\t\t\t\t//console.log(edge.toSource()) {p:V3(2, -2.102, 0),\n\t\t\t\tif (colinearEdges[edgeIndex]) {\n\t\t\t\t\tif (isCurve.containsPoint(edge.a)) {\n\t\t\t\t\t\tconst prevEdgeIndex = (edgeIndex - 1 + loop.length) % loop.length,\n\t\t\t\t\t\t\tprevEdge = loop[prevEdgeIndex]\n\t\t\t\t\t\tconst curveAT = isCurve.pointT(edge.a)\n\t\t\t\t\t\tconst colinearOutA = edge.aDir.cross(surface.normalP(edge.a))\n\t\t\t\t\t\tif (!colinearEdges[prevEdgeIndex] && dotCurve2(prevEdge.curve, prevEdge.bT, colinearOutA, -sign(prevEdge.deltaT())) > 0) {\n\t\t\t\t\t\t\tps.push({\n\t\t\t\t\t\t\t\tp: prevEdge.b,\n\t\t\t\t\t\t\t\tinsideDir: edge.aDir.negated(),\n\t\t\t\t\t\t\t\tt: curveAT,\n\t\t\t\t\t\t\t\tedge: prevEdge,\n\t\t\t\t\t\t\t\tedgeT: prevEdge.bT,\n\t\t\t\t\t\t\t\tcolinear: false,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t\tps.push({\n\t\t\t\t\t\t\tp: edge.a,\n\t\t\t\t\t\t\tinsideDir: edge.aDir,\n\t\t\t\t\t\t\tt: curveAT,\n\t\t\t\t\t\t\tedge: edge,\n\t\t\t\t\t\t\tedgeT: edge.aT,\n\t\t\t\t\t\t\tcolinear: true,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\tif (isCurve.containsPoint(edge.b)) {\n\t\t\t\t\t\tconst curveBT = isCurve.pointT(edge.b)\n\t\t\t\t\t\tconst colinearOutB = edge.bDir.cross(surface.normalP(edge.b))\n\t\t\t\t\t\tif (!colinearEdges[nextEdgeIndex] && dotCurve2(nextEdge.curve, nextEdge.aT, colinearOutB, sign(nextEdge.deltaT())) > 0) {\n\t\t\t\t\t\t\tps.push({\n\t\t\t\t\t\t\t\tp: edge.b,\n\t\t\t\t\t\t\t\tinsideDir: edge.bDir,\n\t\t\t\t\t\t\t\tt: curveBT,\n\t\t\t\t\t\t\t\tedge: nextEdge,\n\t\t\t\t\t\t\t\tedgeT: nextEdge.aT,\n\t\t\t\t\t\t\t\tcolinear: false,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t\tps.push({\n\t\t\t\t\t\t\tp: edge.b,\n\t\t\t\t\t\t\tinsideDir: edge.bDir.negated(),\n\t\t\t\t\t\t\tt: curveBT,\n\t\t\t\t\t\t\tedge: edge,\n\t\t\t\t\t\t\tedgeT: edge.bT,\n\t\t\t\t\t\t\tcolinear: true,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tconst edgeTs = edge.edgeISTsWithSurface(surface2)\n\t\t\t\t\tfor (const edgeT of edgeTs) {\n\t\t\t\t\t\tconst p = edge.curve.at(edgeT)\n\t\t\t\t\t\tif (!isCurve.containsPoint(p)) continue\n\t\t\t\t\t\tconst curveT = isCurve.pointT(p)\n\t\t\t\t\t\tassert(!isNaN(curveT))\n\t\t\t\t\t\tconst insideDir = edge.tangentAt(edgeT).cross(surface.normalP(p)).negated()\n\n\t\t\t\t\t\tconst isTangent = isCurve.tangentAt(curveT)\n\t\t\t\t\t\tconst dirFactor = sign(isTangent.dot(edge.curve.tangentAt(edgeT)))\n\t\t\t\t\t\tconst eps = 1e-4\n\t\t\t\t\t\tconst normVector = surface2.normalP(p)\n\t\t\t\t\t\t//if(!eq0(insideDir.dot(isTangent))) {\n\t\t\t\t\t\t// Edge.edgeISTsWithSurface returns snapped values, so comparison with == is ok:\n\t\t\t\t\t\tif (edgeT == edge.bT) {\n\t\t\t\t\t\t\t// endpoint lies on intersection line\n\t\t\t\t\t\t\tif (!colinearEdges[nextEdgeIndex]) {\n\t\t\t\t\t\t\t\tif (!eq(curveT, isCurve.tMax)) {\n\t\t\t\t\t\t\t\t\tconst pointsToInside = this.pointsToInside3(edge.b, isCurve, curveT, 1)\n\t\t\t\t\t\t\t\t\tassert(pointsToInside != PointVsFace.ON_EDGE)\n\t\t\t\t\t\t\t\t\tif (PointVsFace.INSIDE == pointsToInside) {\n\t\t\t\t\t\t\t\t\t\tps.push({\n\t\t\t\t\t\t\t\t\t\t\tp: edge.b,\n\t\t\t\t\t\t\t\t\t\t\tinsideDir: isTangent,\n\t\t\t\t\t\t\t\t\t\t\tt: curveT,\n\t\t\t\t\t\t\t\t\t\t\tedge: edge,\n\t\t\t\t\t\t\t\t\t\t\tedgeT: edge.bT,\n\t\t\t\t\t\t\t\t\t\t\tcolinear: false,\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (!eq(curveT, isCurve.tMin)) {\n\t\t\t\t\t\t\t\t\tconst pointsToInside = this.pointsToInside3(edge.b, isCurve, curveT, -1)\n\t\t\t\t\t\t\t\t\tassert(pointsToInside != PointVsFace.ON_EDGE)\n\t\t\t\t\t\t\t\t\tif (PointVsFace.INSIDE == pointsToInside) {\n\t\t\t\t\t\t\t\t\t\tps.push({\n\t\t\t\t\t\t\t\t\t\t\tp: edge.b,\n\t\t\t\t\t\t\t\t\t\t\tinsideDir: isTangent.negated(),\n\t\t\t\t\t\t\t\t\t\t\tt: curveT,\n\t\t\t\t\t\t\t\t\t\t\tedge: edge,\n\t\t\t\t\t\t\t\t\t\t\tedgeT: edge.bT,\n\t\t\t\t\t\t\t\t\t\t\tcolinear: false,\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//let thisSide = -normVector.dot(edge.bDir)\n\t\t\t\t\t\t\t\t//if (eq0(thisSide)) {\n\t\t\t\t\t\t\t\t//    // advanced test\n\t\t\t\t\t\t\t\t//    const dir = -sign(edge.deltaT())\n\t\t\t\t\t\t\t\t//    const iscd = isCurve.at(curveT).to(isCurve.at(curveT + dir * dirFactor *\n\t\t\t\t\t\t\t\t// eps)).dot(normVector) const ecd = edge.curve.at(edgeT).to(edge.curve.at(edgeT + dir\n\t\t\t\t\t\t\t\t// * eps)).dot(normVector) thisSide = sign(ecd - iscd) } let nextSide =\n\t\t\t\t\t\t\t\t// normVector.dot(nextEdge.aDir) if (eq0(nextSide)) { // advanced test const dirFactor\n\t\t\t\t\t\t\t\t// = sign(snap0(isTangent.dot(nextEdge.curve.tangentAt(nextEdge.aT)))) assert(dirFactor\n\t\t\t\t\t\t\t\t// !== 0) const dir = sign(nextEdge.deltaT()) const iscd =\n\t\t\t\t\t\t\t\t// isCurve.at(curveT).to(isCurve.at(curveT + dir * dirFactor * eps)).dot(normVector)\n\t\t\t\t\t\t\t\t// const ecd = nextEdge.curve.at(nextEdge.aT).to(nextEdge.curve.at(nextEdge.aT + dir *\n\t\t\t\t\t\t\t\t// eps)).dot(normVector) nextSide = sign(ecd - iscd) } if (nextSide < 0 || thisSide <\n\t\t\t\t\t\t\t\t// 0) { assert(!eq0(insideDir.dot(isTangent))) // next segment is not colinear and ends\n\t\t\t\t\t\t\t\t// on different side ps.push({ p: edge.b, insideDir: insideDir, t: curveT, edge: edge,\n\t\t\t\t\t\t\t\t// edgeT: edge.bT, colinear: false}) }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (edgeT != edge.aT) {\n\t\t\t\t\t\t\t// edge crosses/touches an intersection curve, neither starts nor ends on it\n\t\t\t\t\t\t\tif (eq0(insideDir.dot(isTangent))) {\n\t\t\t\t\t\t\t\tconst dirFactor = sign(isTangent.dot(edge.curve.tangentAt(edgeT)))\n\t\t\t\t\t\t\t\tconst eps = 1e-4\n\t\t\t\t\t\t\t\tfor (const dir of [-1, 1]) {\n\t\t\t\t\t\t\t\t\tif (-1 == dir * dirFactor && edgeT == edge.minT ||\n\t\t\t\t\t\t\t\t\t\t1 == dir * dirFactor && edgeT == edge.maxT ||\n\t\t\t\t\t\t\t\t\t\t-1 == dir && curveT == isCurve.tMin ||\n\t\t\t\t\t\t\t\t\t\t1 == dir && curveT == isCurve.tMax) continue\n\t\t\t\t\t\t\t\t\tconst iscd = isCurve.at(curveT).to(isCurve.at(curveT + dir * eps)).dot(insideDir)\n\t\t\t\t\t\t\t\t\tconst ecd = edge.curve.at(edgeT).to(edge.curve.at(edgeT + dir * dirFactor * eps)).dot(insideDir)\n\t\t\t\t\t\t\t\t\tif (iscd - ecd > 0) {\n\t\t\t\t\t\t\t\t\t\tps.push({\n\t\t\t\t\t\t\t\t\t\t\tp,\n\t\t\t\t\t\t\t\t\t\t\tinsideDir: isTangent.times(dir),\n\t\t\t\t\t\t\t\t\t\t\tt: curveT,\n\t\t\t\t\t\t\t\t\t\t\tedge: edge,\n\t\t\t\t\t\t\t\t\t\t\tedgeT: edgeT,\n\t\t\t\t\t\t\t\t\t\t\tcolinear: false,\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tps.push({\n\t\t\t\t\t\t\t\t\tp: p,\n\t\t\t\t\t\t\t\t\tinsideDir: insideDir,\n\t\t\t\t\t\t\t\t\tt: curveT,\n\t\t\t\t\t\t\t\t\tedge: edge,\n\t\t\t\t\t\t\t\t\tedgeT: edgeT,\n\t\t\t\t\t\t\t\t\tcolinear: false,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//} else {\n\t\t\t\t\t\t//\n\t\t\t\t\t\t//\tconst dirFactor = sign(isTangent.dot(edge.curve.tangentAt(edgeT)))\n\t\t\t\t\t\t//\tconst eps = 1e-4\n\t\t\t\t\t\t//\tconst normVector = surface2.normalP(p)\n\t\t\t\t\t\t//\tfor (const dir of [-1, 1]) {\n\t\t\t\t\t\t//\t\tif (-1 == dir * dirFactor && edgeT == edge.minT ||\n\t\t\t\t\t\t//\t\t\t1 == dir * dirFactor && edgeT == edge.maxT ||\n\t\t\t\t\t\t//\t\t\t-1 == dir && curveT == isCurve.tMin ||\n\t\t\t\t\t\t//\t\t\t1 == dir && curveT == isCurve.tMax) continue\n\t\t\t\t\t\t//\t\tconst iscd = isCurve.at(curveT).to(isCurve.at(curveT + dir * eps)).dot(normVector)\n\t\t\t\t\t\t//\t\tconst ecd = edge.curve.at(edgeT).to(edge.curve.at(edgeT + dir * dirFactor *\n\t\t\t\t\t\t// eps)).dot(normVector) if (iscd > ecd) { ps.push({p, insideDir: isTangent.times(dir *\n\t\t\t\t\t\t// dirFactor), t: curveT, edge: edge, edgeT: edgeT, colinear: false}) } }\n\t\t\t\t\t\t// curveVsSurface(isCurve, curveT, p, surface2) }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// duplicate 't's are ok, as sometimes a segment needs to stop and start again\n\t\t// should be sorted so that back facing ones are first\n\t\tps.sort((a, b) => a.t - b.t || a.insideDir.dot(isCurve.tangentAt(a.t)))\n\t\treturn ps\n\t}\n\n\ttransform(m4: M4): Face {\n\t\tconst mirroring = m4.isMirroring()\n\t\tconst newEdges = Edge.reversePath(this.contour.map(e => e.transform(m4)), mirroring)\n\t\tconst newHoles = this.holes.map(hole => Edge.reversePath(hole.map(e => e.transform(m4)), mirroring))\n\t\treturn new this.constructor(this.surface.transform(m4), newEdges, newHoles, this.name, this.info)\n\t}\n\n\tflipped() {\n\t\tconst newEdges = this.contour.map(e => e.flipped()).reverse()\n\t\tconst newHoles = this.holes.map(hole => hole.map(e => e.flipped()).reverse())\n\t\treturn new this.constructor(this.surface.flipped(), newEdges, newHoles, this.name, this.info)\n\t}\n\n\ttoString() {\n\t\treturn 'new ' + this.constructor.name + '(' + this.surface + ', [' + this.contour.map(e => '\\n\\t' + e).join() + ']'\n\t\t\t+ this.holes.map(hole => '\\n\\t\\thole: ' + hole.join()) + ')'\n\t}\n\n\ttoSource() {\n\t\treturn `new ${this.constructor.name}(${this.surface.toSource()}, [${this.contour.map(e => '\\n\\t' + e.toSource()).join(',')}], [${\n\t\t\tthis.holes.map(hole => '[' + hole.map(e => '\\n\\t' + e.toSource()).join(',') + ']').join(',')}])`\n\t}\n\n\tequals(obj: any): boolean {\n\t\tfunction loopsEqual(a: Edge[], b: Edge[]) {\n\t\t\treturn a.length == b.length &&\n\t\t\t\tarrayRange(0, a.length, 1)\n\t\t\t\t\t.some(offset => a.every((edge, i) => edge.equals(b[(offset + i) % a.length])))\n\n\t\t}\n\n\t\treturn this == obj ||\n\t\t\tObject.getPrototypeOf(this) == Object.getPrototypeOf(obj)\n\t\t\t&& this.holes.length == obj.holes.length\n\t\t\t&& loopsEqual(this.contour, obj.contour)\n\t\t\t&& this.holes.every(hole => (obj as Face).holes.some(hole2 => loopsEqual(hole, hole2)))\n\t}\n\n\thashCode() {\n\t\tfunction arrayHashCode(array: number[]) {\n\t\t\tlet hashCode = 0\n\t\t\tfor (const val of array) {\n\t\t\t\thashCode = hashCode * 31 + val | 0\n\t\t\t}\n\t\t\treturn hashCode\n\t\t}\n\n\t\tfunction loopHashCode(loop: Edge[]) { return arrayHashCode(loop.map(edge => edge.hashCode()).sort(MINUS)) }\n\n\t\tlet hashCode = 0\n\t\thashCode = hashCode * 31 + arrayHashCode(this.holes.map(loop => loopHashCode(loop)).sort(MINUS)) | 0\n\t\thashCode = hashCode * 31 + loopHashCode(this.contour) | 0\n\t\thashCode = hashCode * 31 + this.surface.hashCode() | 0\n\t\treturn hashCode\n\t}\n\n\tlikeFace(face2: Face) {\n\t\tfunction loopsLike(a: Edge[], b: Edge[]) {\n\t\t\treturn a.length == b.length &&\n\t\t\t\tarrayRange(0, a.length, 1)\n\t\t\t\t\t.some(offset => a.every((edge, i) => edge.like(b[(offset + i) % a.length])))\n\n\t\t}\n\n\t\tassertInst(Face, face2)\n\t\treturn this.surface.like(face2.surface)\n\t\t\t&& this.holes.length == face2.holes.length\n\t\t\t&& loopsLike(this.contour, face2.contour)\n\t\t\t&& this.holes.every(hole => face2.holes.some(hole2 => loopsLike(hole, hole2)))\n\t}\n\n\tgetAllEdges(): Edge[] {\n\t\treturn this.allEdges\n\t}\n\n\taddEdgeLines(mesh: Mesh) {\n\t\tassert(false, 'buggy, fix')\n\t\tconst vertices = this.contour.flatMap(edge => edge.getVerticesNo0()), mvl = mesh.vertices!.length\n\t\tfor (let i = 0; i < vertices.length; i++) {\n\t\t\tmesh.vertices!.push(vertices[i])\n\t\t\tmesh.LINES!.push(mvl + i, mvl + (i + 1) % vertices.length)\n\n\t\t}\n\t}\n\n\tcontainsPoint(p: V3): boolean {\n\t\tassertVectors(p)\n\t\treturn this.surface.loopContainsPoint(this.contour, p) != PointVsFace.OUTSIDE\n\t\t\t&& !this.holes.some(hole => this.surface.loopContainsPoint(hole, p) != PointVsFace.OUTSIDE)\n\t}\n\n\tcontainsPoint2(p: V3): PointVsFace {\n\t\tassertVectors(p)\n\t\tconst contourContainsPoint = this.surface.loopContainsPoint(this.contour, p)\n\t\tif (contourContainsPoint != PointVsFace.INSIDE) return contourContainsPoint\n\t\tfor (const hole of this.holes) {\n\t\t\tconst loopContainsPoint = this.surface.loopContainsPoint(hole, p)\n\t\t\tif (loopContainsPoint != PointVsFace.OUTSIDE) {\n\t\t\t\treturn loopContainsPoint == PointVsFace.ON_EDGE ? PointVsFace.ON_EDGE : PointVsFace.OUTSIDE\n\t\t\t}\n\t\t}\n\t\treturn PointVsFace.INSIDE\n\t}\n\n\t/**\n\t *\n\t * @param line\n\t * @returns t param of the line if there is an intersection, NaN otherwise\n\t */\n\tintersectsLine(line: L3): number {\n\t\tassertInst(L3, line)\n\t\tif (!this.getAABB().intersectsLine(line)) return NaN\n\t\tconst containedIntersectionsTs = this.surface.isTsForLine(line).filter(t => this.containsPoint(line.at(t)))\n\t\tconst nearestPointT = containedIntersectionsTs.withMax(t => -t)\n\n\t\treturn undefined != nearestPointT ? nearestPointT : NaN\n\t}\n\n\ttoMesh() {\n\t\tconst mesh = new Mesh()\n\t\t\t.addIndexBuffer('TRIANGLES')\n\t\t\t.addIndexBuffer('LINES')\n\t\t\t.addVertexBuffer('normals', 'LGL_Normal')\n\t\tthis.addToMesh(mesh)\n\t\t//mesh.compile()\n\t\treturn mesh\n\t}\n\n\tabstract addToMesh(mesh: Mesh & { TRIANGLES: int[], normals: V3[] }): void\n\n\tzDirVolume(): { centroid: V3, volume: number } {\n\t\treturn this.surface.zDirVolume(this.getAllEdges())\n\t}\n\n\tcalcArea(): number {\n\t\treturn this.surface.calculateArea(this.getAllEdges())\n\t}\n\n\tgetLoops(): Edge[][] {\n\t\treturn this.holes.concat(this.contour)\n\t}\n\n\tgetAABB(): AABB {\n\t\treturn this.aabb || (this.aabb = AABB.forAABBs(this.contour.map(e => e.getAABB())))\n\t}\n\n\tpointsToInside3(p: V3, curve: Curve, curveT: number, dir: -1 | 1): PointVsFace {\n\t\tconst eps = 1e-6\n\t\tconst normal = this.surface.normalP(p)\n\t\tconst curveTangent = curve.tangentAt(curveT).times(dir)\n\t\tconst up = normal.cross(curveTangent)\n\t\tconst ecd = curve.at(curveT).to(curve.at(curveT + dir * eps)).dot(up)\n\t\tlet minValue = Infinity, result, advanced = false\n\t\tfor (const edge of this.getAllEdges()) {\n\t\t\tconst aEqP = edge.a.like(p), bEqP = edge.b.like(p)\n\t\t\tassert(aEqP == edge.a.like(p))\n\t\t\tassert(bEqP == edge.b.like(p))\n\t\t\tif (!aEqP && !bEqP) continue\n\t\t\tconst edgeTangent = aEqP ? edge.aDir : edge.bDir.negated()\n\t\t\tconst angle = curveTangent.angleRelativeNormal(edgeTangent, normal)\n\t\t\tif (eq0(angle)) {\n\t\t\t\tif (curve.isColinearTo(edge.curve)) {\n\t\t\t\t\treturn PointVsFace.ON_EDGE\n\t\t\t\t}\n\t\t\t\tconst edgeT = aEqP ? edge.aT : edge.bT\n\t\t\t\tconst edgeDir = (aEqP ? 1 : -1) * sign(edge.deltaT())\n\t\t\t\tconst iscd = edge.curve.diff(edgeT, edgeDir * eps).dot(up)\n\t\t\t\t//const iscd = edge.curve.at(edgeT).to(curve.at(edgeT + edgeDir * eps)).dot(up)\n\t\t\t\tconst diff = iscd - ecd\n\t\t\t\tif (diff > 0 && (!advanced || diff < minValue)) {\n\t\t\t\t\tadvanced = true\n\t\t\t\t\tminValue = diff\n\t\t\t\t\tresult = aEqP ? PointVsFace.OUTSIDE : PointVsFace.INSIDE\n\t\t\t\t}\n\t\t\t} else if (!advanced) {\n\t\t\t\tconst angle2 = (angle + TAU) % TAU\n\t\t\t\tif (angle2 < minValue) {\n\t\t\t\t\tminValue = angle2\n\t\t\t\t\tresult = aEqP ? PointVsFace.OUTSIDE : PointVsFace.INSIDE\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (result == undefined) throw new Error()\n\t\treturn result\n\t}\n\n\tpointsToInside2(p: V3, dir: V3): PointVsFace {\n\t\treturn this.pointsToInside3(p, L3.anchorDirection(p, dir), 0, 1)\n\t\t//const normal = this.surface.normalP(p)\n\t\t//let minAngle = Infinity, inOut = false\n\t\t//function test(v, b) {\n\t\t//\tconst angle = (dir.angleRelativeNormal(v, normal) + TAU + NLA_PRECISION / 2) % TAU\n\t\t//\tif (angle <= 2 * NLA_PRECISION) {\n\t\t//\t\treturn true\n\t\t//\t}\n\t\t//\tif (angle < minAngle) {\n\t\t//\t\tminAngle = angle\n\t\t//\t\tinOut = b\n\t\t//\t}\n\t\t//}\n\t\t//for (const edge of this.getAllEdges()) {\n\t\t//\tassert(edge.a.equals(p) || !edge.a.like(p))\n\t\t//\tassert(edge.b.equals(p) || !edge.b.like(p))\n\t\t//\tif (edge.a.equals(p) && test(edge.aDir, false)) return PointVsFace.ON_EDGE\n\t\t//\tif (edge.b.equals(p) && test(edge.bDir.negated(), true)) return PointVsFace.ON_EDGE\n\t\t//}\n\t\t//return inOut ? PointVsFace.INSIDE : PointVsFace.OUTSIDE\n\t}\n}\n\nexport class PlaneFace extends Face {\n\n\tsurface: PlaneSurface\n\n\tconstructor(p: P3 | PlaneSurface, contour: Edge[], holes?: Edge[][], name?: string, info?: any) {\n\t\tassert(p instanceof P3 || p instanceof PlaneSurface)\n\t\tsuper(p instanceof P3 ? new PlaneSurface(p) : p, contour, holes, name, info)\n\t}\n\n\tstatic forVertices(planeSurface: PlaneSurface | P3, vs: V3[], ...holeVss: V3[][]): PlaneFace {\n\t\tconst _planeSurface = planeSurface instanceof P3 ? new PlaneSurface(planeSurface) : planeSurface\n\t\tassert(isCCW(vs, _planeSurface.plane.normal1), 'isCCW(vs, planeSurface.plane.normal1)')\n\t\tconst edges = StraightEdge.chain(vs)\n\t\tholeVss.forEach(vs => assert(doubleSignedArea(vs, _planeSurface.plane.normal1) >= 0, 'doubleSignedArea(vs, planeSurface.plane.normal1) >= 0'))\n\t\tconst holes = holeVss.map(hvs => StraightEdge.chain(hvs))\n\t\treturn new PlaneFace(planeSurface, edges, holes)\n\t}\n\n\taddToMesh(mesh: Mesh & { TRIANGLES: int[], normals: V3[] }) {\n\t\tconst mvl = mesh.vertices!.length\n\t\tconst normal = this.surface.plane.normal1\n\t\tconst vertices = this.contour.flatMap(edge => edge.getVerticesNo0())\n\t\tfor (let i = 0; i < vertices.length; i++) { mesh.LINES!.push(mvl + i, mvl + (i + 1) % vertices.length) }\n\t\tconst holeStarts: number[] = []\n\t\tthis.holes.forEach(hole => {\n\t\t\tholeStarts.push(vertices.length)\n\t\t\tvertices.push(...hole.flatMap(edge => edge.getVerticesNo0()))\n\t\t})\n\t\tconst triangles = triangulateVertices(normal, vertices, holeStarts).map(index => index + mvl)\n\t\tArray.prototype.push.apply(mesh.vertices, vertices)\n\t\tArray.prototype.push.apply(mesh.TRIANGLES, triangles)\n\t\tArray.prototype.push.apply(mesh.normals, arrayFromFunction(vertices.length, () => normal))\n\t}\n\n\tintersectsLine(line: L3): number {\n\t\tassertInst(L3, line)\n\t\tconst lambda = line.isTWithPlane(this.surface.plane)\n\t\tif (!Number.isFinite(lambda)) {\n\t\t\treturn NaN\n\t\t}\n\t\tconst inside = this.containsPoint(line.at(lambda))\n\t\treturn inside ? lambda : NaN\n\t}\n\n\t//intersectPlaneFace(face2: PlaneFace,\n\t//                   thisBrep: B2,\n\t//                   face2Brep: B2,\n\t//                   faceMap: Map<Face, Edge[]>,\n\t//                   thisEdgePoints: CustomMap<Edge, { edge: Edge, edgeT: number, p: V3, passEdge?: Edge }[]>,\n\t//                   otherEdgePoints: CustomMap<Edge, { edge: Edge, edgeT: number, p: V3, passEdge?: Edge }[]>,\n\t//                   checkedPairs: CustomSet<Pair<Equalable, Equalable>>) {\n\t//\tassertInst(CustomMap, thisEdgePoints, otherEdgePoints)\n\t//\n\t//\tfunction hasPair(a: Equalable, b: Equalable) {\n\t//\t\treturn checkedPairs.has(new Pair(a, b))\n\t//\t}\n\t//\tfunction addPair(a: Equalable, b: Equalable) {\n\t//\t\treturn checkedPairs.add(new Pair(a, b))\n\t//\t}\n\t//\n\t//\t/**\n\t//\t * @param newEdge generated segment\n\t//\t * @param col1 if newEdge is colinear to an edge of this, the edge in question\n\t//\t * @param col2 same for face2\n\t//\t */\n\t//\tfunction handleNewEdge(newEdge: StraightEdge, col1: Edge, col2: Edge) {\n\t//\t\tif (!col1 && !col2) {\n\t//\t\t\tmapPush(faceMap, face, newEdge)\n\t//\t\t\tmapPush(faceMap, face2, newEdge.flipped())\n\t//\t\t\treturn true\n\t//\t\t}\n\t//\t\tfunction handleEdgeInFace(col1, col2, face, face2, thisBrep, face2Brep, coplanarSameIsInside: boolean,\n\t// has, add) { if (col1 && !col2) { if (hasPair(col1.getCanon(), face2)) return  //add(col1.getCanon(), face2)\n\t// const face2Plane = face2.surface.plane  // NB: a new edge is inserted even though it may be the same as an old\n\t// one // however it indicates that it intersects the other volume here, i.e. the old edge cannot // be counted as\n\t// 'inside' for purposes of reconstitution thisBrep.edgeFaces.get(col1.getCanon()).forEach(faceInfo => { //const\n\t// dot = snap0(face2Plane.normal1.dot(faceInfo.inside)) //if (dot == 0 ? !coplanarSameIsInside : dot < 0) { const\n\t// pointsInsideFace = fff(faceInfo, face2.surface) const edgeInside = pointsInsideFace == INSIDE ||\n\t// !coplanarSameIsInside && pointsInsideFace == COPLANAR_SAME const pushEdge =\n\t// (faceInfo.edge.aDir.like(newEdge.aDir)) ? newEdge : newEdge.flipped()\n\t// assert(faceInfo.edge.aDir.like(pushEdge.aDir)) edgeInside && mapPush(faceMap, faceInfo.face, pushEdge) })  const\n\t// newEdgeInside = face2Plane.normal1.cross(newEdge.aDir) const sVEF1 = splitsVolumeEnclosingFaces(thisBrep,\n\t// col1.getCanon(), newEdgeInside, face2Plane.normal1) let addNewEdge, addNewEdgeFlipped if (addNewEdge = sVEF1 ==\n\t// INSIDE || coplanarSameIsInside && sVEF1 == COPLANAR_SAME) { mapPush(faceMap, face2, newEdge) } const sVEF2 =\n\t// splitsVolumeEnclosingFaces(thisBrep, col1.getCanon(), newEdgeInside.negated(), face2Plane.normal1) if\n\t// (addNewEdgeFlipped = sVEF2 == INSIDE || coplanarSameIsInside && sVEF2 == COPLANAR_SAME) { mapPush(faceMap,\n\t// face2, newEdge.flipped()) } if (addNewEdge || addNewEdgeFlipped || sVEF1 == COPLANAR_SAME && sVEF2 == INSIDE ||\n\t// sVEF2 == COPLANAR_SAME && sVEF1 == INSIDE) { return true } } } const c1 = handleEdgeInFace(col1, col2, face,\n\t// face2, thisBrep, face2Brep, false, hasPair, addPair) const c2 = handleEdgeInFace(col2, col1, face2, face,\n\t// face2Brep, thisBrep, true, (a, b) => hasPair(b, a), (a, b) => addPair(b, a)) if (c1 || c2) return true  if (col1\n\t// && col2) { if (hasPair(col1.getCanon(), col2.getCanon())) return  addPair(col1.getCanon(), col2.getCanon())\n\t// function handleColinearEdgeFaces(col1, col2, thisBrep, face2Brep, coplanarSameIsInside: boolean, thisEdgePoints,\n\t// has, add) { // not entirely sure for what i had the dirInsides in? //const aDirNegatedInside =\n\t// (newEdge.a.like(col2.a) || newEdge.a.like(col2.b)) && splitsVolumeEnclosingCone(face2Brep, newEdge.a,\n\t// newEdge.aDir.negated()) == INSIDE //const bDirInside = (newEdge.b.like(col2.a) || newEdge.b.like(col2.b)) &&\n\t// splitsVolumeEnclosingCone(face2Brep, newEdge.b, newEdge.bDir) == INSIDE\n\t// thisBrep.edgeFaces.get(col1.getCanon()).forEach(faceInfo => { const sVEF = splitsVolumeEnclosingFaces(face2Brep,\n\t// col2.getCanon(), faceInfo.inside, faceInfo.normalAtCanonA) const edgeInside = sVEF == INSIDE ||\n\t// coplanarSameIsInside && sVEF == COPLANAR_SAME const pushEdge = (faceInfo.edge.aDir.like(newEdge.aDir)) ? newEdge\n\t// : newEdge.flipped() edgeInside && mapPush(faceMap, faceInfo.face, pushEdge) }) } handleColinearEdgeFaces(col1,\n\t// col2, thisBrep, face2Brep, true, thisEdgePoints, hasPair, addPair) handleColinearEdgeFaces(col2, col1,\n\t// face2Brep, thisBrep, false, otherEdgePoints, (a, b) => hasPair(b, a), (a, b) => addPair(b, a)) } }   // what\n\t// needs to be generated: new edges on face // points on edges where they are cut by faces so that sub edges will\n\t// be generated for loops // points on ends of edges where the edge will be an edge in the new volume where it goes\n\t// from A to B //         you don't want thos to be marked as 'inside', otherwise invalid faces will be added // if\n\t// a face cuts a corner, nothings needs to be done, as that alone does not limit what adjacent faces will be\n\t// function handleEndPoint(a: IntersectionPointInfo, b: IntersectionPointInfo, newEdge: Edge) { // ends in the\n\t// middle of b's face if (a && !b) { if (!a.colinear && a.edgeT != a.edge.aT && a.edgeT != a.edge.bT) {\n\t// mapPush(thisEdgePoints, a.edge.getCanon(), a) assert(a.edge.isValidT(a.edgeT)) } // else colinear segment ends\n\t// in middle of other face, do nothing } // ends in the middle of a's face if (b && !a) { if (!b.colinear &&\n\t// b.edgeT != b.edge.aT && b.edgeT != b.edge.bT) { mapPush(otherEdgePoints, b.edge.getCanon(), b)\n\t// assert(b.edge.isValidT(b.edgeT)) } // else colinear segment ends in middle of other face, do nothing } if (a &&\n\t// b) { // if a or b is colinear the correct points will already have been added to the edge by handleNewEdge //\n\t// segment starts/ends on edge/edge intersection function foo(a, b, face, face2, thisPlane, face2Plane, thisBrep,\n\t// face2Brep, first, thisEdgePoints) { if (!a.colinear && a.edgeT != a.edge.aT && a.edgeT != a.edge.bT) { if\n\t// (!hasPair(a.edge.getCanon(), b.edge.getCanon())) { addPair(a.edge.getCanon(), b.edge.getCanon()) // ends on a,\n\t// on colinear segment b bT != a.edge.bT && // b can be colinear, so edgeT == aT is possible if (a.p.like(b.edge.a)\n\t// || a.p.like(b.edge.b)) { const corner = a.p.like(b.edge.a) ? b.edge.a : b.edge.b // face2brep corner on edge\n\t// const sVEC1 = splitsVolumeEnclosingCone(face2Brep, corner, a.edge.aDir) const sVEC2 =\n\t// splitsVolumeEnclosingCone(face2Brep, corner, a.edge.aDir.negated()) // if either of these return\n\t// ALONG_EDGE_OR_PLANE, then the breps share a colinear edge  if (INSIDE == sVEC1 || INSIDE == sVEC2) {\n\t// mapPush(thisEdgePoints, a.edge.getCanon(), a) assert(a.edge.isValidT(a.edgeT)) } } else { // edge / edge center\n\t// intersection const aEdgeDir = a.edge.tangentAt(a.edgeT) const bEdgeDir = b.edge.tangentAt(b.edgeT) const\n\t// testVector = aEdgeDir.rejectedFrom(bEdgeDir) assert(!testVector.likeO()) const sVEF1 =\n\t// splitsVolumeEnclosingFaces(face2Brep, b.edge.getCanon(), testVector, thisPlane.normal1) const sVEF2 =\n\t// splitsVolumeEnclosingFaces(face2Brep, b.edge.getCanon(), testVector.negated(), thisPlane.normal1) if (INSIDE ==\n\t// sVEF1 || INSIDE == sVEF2) { mapPush(thisEdgePoints, a.edge.getCanon(), a) assert(a.edge.isValidT(a.edgeT)) } } }\n\t// } }  foo(a, b, face, face2, thisPlane, face2Plane, thisBrep, face2Brep, true, thisEdgePoints) foo(b, a, face2,\n\t// face, face2Plane, thisPlane, face2Brep, thisBrep, false, otherEdgePoints)  } }   assertInst(PlaneFace, face2)\n\t// const face: PlaneFace = this // get intersection const thisPlane = this.surface.plane, face2Plane =\n\t// face2.surface.plane if (thisPlane.isParallelToPlane(face2Plane)) { if (thisPlane.like(face2Plane)) { // normal1\n\t// same and same location in space // addLikeSurfaceFaces(likeSurfaceFaces, this, face2) } return } const isLine =\n\t// L3.fromPlanes(thisPlane, face2Plane) // get intersections of newCurve with other edges of face and face2 const\n\t// ps1 = planeFaceEdgeISPsWithPlane(face, isLine, face2Plane) const ps2 = planeFaceEdgeISPsWithPlane(face2, isLine,\n\t// thisPlane) if (ps1.length == 0 || ps2.length == 0) { // faces to not intersect return }  let col1:\n\t// IntersectionPointInfo, col2: IntersectionPointInfo let in1 = false, in2 = false let i = 0, j = 0, last let\n\t// startP, startDir, startT, startA, startB while (i < ps1.length || j < ps2.length) { assert(i <= ps1.length)\n\t// assert(j <= ps2.length) const a = ps1[i], b = ps2[j] assert(a || b) if (j == ps2.length || i < ps1.length &&\n\t// lt(a.t, b.t)) { last = a in1 = !in1 a.used = true in1 && (col1 = a.colinear && a) i++ } else if (i == ps1.length\n\t// || gt(a.t, b.t)) { last = b in2 = !in2 b.used = true in2 && (col2 = b.colinear && b) j++ } else { // TODO: this\n\t// will break if 3 points on the same t last = a in1 = !in1 in2 = !in2 //if (in1 == in2) { a.used = true b.used =\n\t// true in1 && (col1 = a.colinear && a) in2 && (col2 = b.colinear && b) //} i++ j++ } if (startP && !(in1 && in2))\n\t// { // segment end const newEdge = new StraightEdge(isLine, startP, last.p, startT, last.t, undefined, 'genseg' +\n\t// getGlobalId()) startP = undefined last.used = true if (handleNewEdge(newEdge, col1 && col1.edge, col2 &&\n\t// col2.edge)) { handleEndPoint(startA || col1, startB || col2, newEdge) handleEndPoint(a && a.used && a || col1, b\n\t// && b.used && b || col2, newEdge) } } else if (in1 && in2) { // new segment just started startP = last.p startDir\n\t// = last.insideDir startT = last.t startA = a && a.used && a startB = b && b.used && b } if (!in1 && a && last ==\n\t// a && a.colinear) { checkedPairs.add(new Pair(a.edge.getCanon(), face2)) } if (!in2 && b && (last == b || b.used)\n\t// && b.colinear) { checkedPairs.add(new Pair(b.edge.getCanon(), face)) } } }\n\n\twithHole(holeEdges: Edge[]) {\n\t\treturn new PlaneFace(this.surface, this.contour, [holeEdges])\n\t}\n\n\tpointsToInside(p: V3, dir: V3): PointVsFace {\n\t\treturn this.containsPoint2(p.plus(dir.times(NLA_PRECISION * 8)))\n\t}\n\n\tedgeISPsWithPlane(isLine: L3, plane2: P3): IntersectionPointInfo[] {\n\t\tconst face = this\n\t\tassert(face.surface.plane.containsLine(isLine))\n\t\tassert(plane2.containsLine(isLine))\n\t\tconst plane = face.surface.plane\n\t\tconst ps: IntersectionPointInfo[] = []\n\t\tconst loops = [face.contour].concat(face.holes)\n\t\tloops.forEach(loop => {\n\t\t\tconst colinearEdges = loop.map((edge) => edge.colinearToLine(isLine) && -sign(edge.aDir.dot(isLine.dir1)))\n\t\t\tconst isLineOut = isLine.dir1.cross(plane.normal1)\n\n\t\t\tloop.forEach((edge, edgeIndex, edges) => {\n\t\t\t\tconst nextEdgeIndex = (edgeIndex + 1) % edges.length, nextEdge = edges[nextEdgeIndex]\n\t\t\t\t//console.log(edge.toSource()) {p:V3(2, -2.102, 0),\n\t\t\t\tif (colinearEdges[edgeIndex]) {\n\t\t\t\t\t// edge colinear to intersection line\n\t\t\t\t\tconst curveAT = isLine.pointT(edge.a), curveBT = isLine.pointT(edge.b)\n\t\t\t\t\t// add interval for colinear segment\n\t\t\t\t\tps.push(\n\t\t\t\t\t\t{p: edge.a, insideDir: edge.aDir, t: curveAT, edge: edge, edgeT: edge.aT, colinear: true},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tp: edge.b,\n\t\t\t\t\t\t\tinsideDir: edge.bDir.negated(),\n\t\t\t\t\t\t\tt: curveBT,\n\t\t\t\t\t\t\tedge: edge,\n\t\t\t\t\t\t\tedgeT: edge.bT,\n\t\t\t\t\t\t\tcolinear: true,\n\t\t\t\t\t\t})\n\t\t\t\t\t// open next interval if necessary\n\t\t\t\t\tconst nextSide = colinearEdges[nextEdgeIndex] || dotCurve(isLineOut, nextEdge.aDir, nextEdge.aDDT)\n\t\t\t\t\tif (colinearEdges[edgeIndex] * nextSide < 0) {\n\t\t\t\t\t\t// side changes\n\t\t\t\t\t\tps.push({\n\t\t\t\t\t\t\tp: nextEdge.a,\n\t\t\t\t\t\t\tinsideDir: edge.bDir,\n\t\t\t\t\t\t\tt: curveBT,\n\t\t\t\t\t\t\tedge: nextEdge,\n\t\t\t\t\t\t\tedgeT: nextEdge.aT,\n\t\t\t\t\t\t\tcolinear: false,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// not necessarily a straight edge, so multiple intersections are possible\n\t\t\t\t\tconst edgeTs = edge.edgeISTsWithPlane(plane2)\n\t\t\t\t\tassert(edgeTs.every(t => plane2.containsPoint(edge.curve.at(t))), edgeTs)\n\t\t\t\t\tfor (const edgeT of edgeTs) {\n\t\t\t\t\t\tif (edgeT == edge.bT) {\n\t\t\t\t\t\t\t// endpoint lies on intersection line\n\t\t\t\t\t\t\tconst side = -dotCurve(isLineOut, edge.bDir, edge.bDDT)\n\t\t\t\t\t\t\tconst nextSide = colinearEdges[nextEdgeIndex] || dotCurve(isLineOut, nextEdge.aDir, nextEdge.aDDT)\n\t\t\t\t\t\t\tif (side * nextSide < 0) {\n\t\t\t\t\t\t\t\t// next segment is not colinear and ends on different side\n\t\t\t\t\t\t\t\tps.push({\n\t\t\t\t\t\t\t\t\tp: edge.b,\n\t\t\t\t\t\t\t\t\tinsideDir: plane2.normal1.negated(),\n\t\t\t\t\t\t\t\t\tt: isLine.pointT(edge.b),\n\t\t\t\t\t\t\t\t\tedge: edge,\n\t\t\t\t\t\t\t\t\tedgeT: edge.bT,\n\t\t\t\t\t\t\t\t\tcolinear: false,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (edgeT != edge.aT) {\n\t\t\t\t\t\t\t// edge crosses intersection line, neither starts nor ends on it\n\t\t\t\t\t\t\tconst p = edge.curve.at(edgeT)\n\t\t\t\t\t\t\tassert(plane2.containsPoint(p), edge.toString(), p, edgeT, plane2.distanceToPoint(p))\n\t\t\t\t\t\t\tassert(isLine.containsPoint(p), edge.toString(), p, edgeT, isLine.distanceToPoint(p))\n\t\t\t\t\t\t\tconst insideDir = plane2.normal1.negated()\n\t\t\t\t\t\t\tps.push({\n\t\t\t\t\t\t\t\tp: p,\n\t\t\t\t\t\t\t\tinsideDir: insideDir,\n\t\t\t\t\t\t\t\tt: isLine.pointT(p),\n\t\t\t\t\t\t\t\tedge: edge,\n\t\t\t\t\t\t\t\tedgeT: edgeT,\n\t\t\t\t\t\t\t\tcolinear: false,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t\t// duplicate 't's are ok, as sometimes a segment needs to stop and start again\n\t\t// should be sorted so that back facing ones are first\n\t\tps.sort((a, b) => a.t - b.t || a.insideDir.dot(isLine.dir1))\n\t\treturn ps\n\t}\n}\n\n\nexport class RotationFace extends Face {\n\tconstructor(rot: Surface, contour: Edge[], holes?: Edge[][], name?: string, info?: any) {\n\t\tsuper(rot, contour, holes, name, info)\n\t}\n\n\tstatic loopDoesNotCrossPlane(loop: Edge[], seamPlane: P3) {\n\t\tlet side = 0\n\n\t\t// returns true if d is on the other side as previous calls\n\t\tfunction checkSide(d) {\n\t\t\tif (side == 0) {\n\t\t\t\tside = d\n\t\t\t} else {\n\t\t\t\treturn !side || side * d < 0\n\t\t\t}\n\t\t}\n\n\t\tfor (const edge of loop) {\n\t\t\tconst ts = edge.edgeISTsWithPlane(seamPlane)\n\t\t\tif (ts.length == 0) {\n\t\t\t\tif (!(edge.curve instanceof L3) && checkSide(seamPlane.distanceToPointSigned(edge.a))) return false\n\t\t\t} else {\n\t\t\t\tfor (const t of ts) {\n\t\t\t\t\t// TODO: this part probably should be in a separate function\n\t\t\t\t\t// check 'backwards' only if if aT != t\n\t\t\t\t\tif (edge.aT != t) {\n\t\t\t\t\t\tif (checkSide(dotCurve2(edge.curve, t, seamPlane.normal1, -sign(edge.bT - edge.aT)))) return false\n\t\t\t\t\t}\n\t\t\t\t\tif (edge.bT != t) {\n\t\t\t\t\t\tif (checkSide(dotCurve2(edge.curve, t, seamPlane.normal1, sign(edge.bT - edge.aT)))) return false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n\tgetAABB() {\n\t\tif (this.aabb) return this.aabb\n\t\tif (this.surface instanceof SemiEllipsoidSurface || this.surface instanceof EllipsoidSurface) {\n\t\t\tthis.aabb = AABB.forAABBs(this.contour.map(e => e.getAABB()))\n\t\t\tthis.aabb.addPoints(this.surface.getExtremePoints().filter(p => this.containsPoint(p)))\n\t\t\treturn this.aabb\n\t\t} else {\n\t\t\treturn super.getAABB()\n\t\t}\n\t}\n\n\tgetCanonSeamU(): number {\n\t\tconst stPFunc = this.surface.stPFunc()\n\t\tfor (const edge of this.contour) {\n\t\t\t// check edge.a\n\t\t\tlet u = stPFunc(edge.a, PI).x\n\t\t\t// if u is not PI, or ~0, return its sign\n\t\t\tif (u != PI && !eq0(u)) {\n\t\t\t\treturn sign(u) * PI\n\t\t\t}\n\t\t\t// check midpoint between edge.a and edge.b\n\t\t\tu = stPFunc(edge.curve.at((edge.aT + edge.bT) / 2), PI).x\n\t\t\tif (u != PI && !eq0(u)) {\n\t\t\t\treturn sign(u) * PI\n\t\t\t}\n\t\t}\n\t\tconst localEdge = this.contour[0].transform(this.surface.inverseMatrix)\n\t\tif (P3.ZX.containsCurve(localEdge.curve)) {\n\t\t\tconst insideVector = localEdge.a.cross(localEdge.aDir)\n\t\t\treturn sign(insideVector.dot(V3.Y)) * PI\n\t\t}\n\t\tassert(false, 'Couldn\\'t find canon seam u')\n\t}\n\n\n\tunrollLoop(edgeLoop: Edge[]) {\n\t\tconst vs: V3[] = []\n\t\tconst reverseFunc = this.surface.stPFunc()\n\t\tconst verticesNo0s = edgeLoop.map(edge => edge.getVerticesNo0())\n\t\tconst startEdgeIndex = verticesNo0s.findIndex(edgeVertices => !eq(reverseFunc(edgeVertices[0], Math.PI).x, Math.PI))\n\t\tassert(-1 != startEdgeIndex)\n\t\t// console.log(startEdgeIndex)\n\t\tlet hint = Math.PI\n\t\tfor (let i = 0; i < edgeLoop.length; i++) {\n\t\t\tconst edgeIndex = (i + startEdgeIndex) % edgeLoop.length\n\t\t\tfor (let j = 0; j < verticesNo0s[edgeIndex].length; j++) {\n\t\t\t\tconst p = verticesNo0s[edgeIndex][j]\n\t\t\t\tconst localP = reverseFunc(p, hint)\n\t\t\t\tif (Math.abs(localP.x) < Math.PI - NLA_PRECISION) {\n\t\t\t\t\t// update hint\n\t\t\t\t\thint = localP.x\n\t\t\t\t}\n\t\t\t\t// console.log(hint, p.sce, localP.sce)\n\t\t\t\tvs.push(localP)\n\t\t\t}\n\t\t}\n\t\tedgeLoop.forEach((edge, e) => {\n\t\t\tlet hint = edge.bDir\n\t\t\tif (edge instanceof StraightEdge && edge.curve.dir1.isParallelTo(this.surface.dir || this.surface.dir1)) {\n\t\t\t\thint = this.surface.normalP(edge.b).cross(edge.bDir)\n\t\t\t}\n\t\t\tedge.getVerticesNo0().forEach(p => {\n\t\t\t\tvs.push(reverseFunc(p, hint))\n\t\t\t})\n\t\t})\n\t\tconsole.log('vs\\n', vs.join('\\n'), vs.length)\n\t\treturn vs\n\t}\n\n\t/**\n\t * f1 cos t + f2 sin t\n\t * tan(phi) = sin / cos\n\t *          = (f1x cos t + f2x sin t) / (f1y cos t + f2y sin t)\n\t *\n\t *          = (-f1x sin t + f2x cos t) / (-f1y sin t + f2y cos t)\n\t */\n\tunrollEllipsoidLoops(edgeLoops: Edge[][], uStep: number, vStep: number) {\n\t\tconst verticesST: V3[] = [], vertices: V3[] = [], loopStarts = []\n\t\tconst ellipsoid: SemiEllipsoidSurface = this.surface as SemiEllipsoidSurface\n\t\tconst ptpf = ellipsoid.stPFunc()\n\t\tconst testDegeneratePoint = ellipsoid instanceof SemiEllipsoidSurface\n\t\t\t? (nextStart: V3) => nextStart.like(ellipsoid.center.plus(ellipsoid.f3)) || nextStart.like(ellipsoid.center.minus(ellipsoid.f3))\n\t\t\t: (nextStart: V3) => nextStart.like((this.surface as ConicSurface).center)\n\t\tfor (const edgeLoop of edgeLoops) {\n\t\t\tloopStarts.push(verticesST.length)\n\t\t\t// console.log(startEdgeIndex)\n\t\t\tconst hint = this.getCanonSeamU()\n\t\t\tfor (let i = 0; i < edgeLoop.length; i++) {\n\t\t\t\tconst ipp = (i + 1) % edgeLoop.length\n\t\t\t\tconst verticesNo0 = edgeLoop[i].getVerticesNo0()\n\t\t\t\tvertices.push(...verticesNo0)\n\t\t\t\tverticesST.push(...verticesNo0.map(v => ptpf(v)))\n\t\t\t\tconst nextStart = edgeLoop[ipp].a\n\t\t\t\t//console.log('BLAH', nextStart.str, ellipsoid.center.plus(ellipsoid.f3).str)\n\n\t\t\t\tif (testDegeneratePoint(nextStart)) {\n\t\t\t\t\tconst bDirLC = ellipsoid.inverseMatrix.transformVector(edgeLoop[i].bDir),\n\t\t\t\t\t\taDirLC = ellipsoid.inverseMatrix.transformVector(edgeLoop[ipp].aDir)\n\t\t\t\t\tlet inAngle = Math.atan2(-bDirLC.y, -bDirLC.x)\n\t\t\t\t\tif (abs(inAngle) > Math.PI - NLA_PRECISION) {\n\t\t\t\t\t\tassert(hint == -PI || hint == PI)\n\t\t\t\t\t\tinAngle = hint\n\t\t\t\t\t}\n\t\t\t\t\tlet outAngle = Math.atan2(aDirLC.y, aDirLC.x)\n\t\t\t\t\tif (abs(outAngle) > Math.PI - NLA_PRECISION) {\n\t\t\t\t\t\tassert(hint == -PI || hint == PI)\n\t\t\t\t\t\toutAngle = hint\n\t\t\t\t\t}\n\n\t\t\t\t\tconst stLast = verticesST.pop()!\n\t\t\t\t\tverticesST.push(new V3(inAngle, stLast.y, 0), new V3(outAngle, stLast.y, 0))\n\t\t\t\t\tvertices.push(vertices.last)\n\t\t\t\t}\n\t\t\t\tverticesST.forEach(({x: u, y: v}) => {\n\t\t\t\t\tassert(isFinite(u))\n\t\t\t\t\tassert(isFinite(v))\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tlet normals\n\t\tif (this.surface instanceof EllipsoidSurface) {\n\t\t\tnormals = vertices.map(v => ellipsoid.normalP(v))\n\t\t} else {\n\t\t\tconst pN = ellipsoid.normalSTFunc()\n\t\t\tnormals = verticesST.map(({x, y}) => pN(x, y))\n\t\t}\n\t\tassert(vertices.length == vertices.length)\n\t\t//console.log(verticesST.map(v => v.str).join('\\n'))\n\t\treturn {\n\t\t\tverticesUV: verticesST.map(vST => new V3(vST.x / uStep, vST.y / vStep, 0)),\n\t\t\tvertices: vertices,\n\t\t\tnormals: normals,\n\t\t\tloopStarts: loopStarts,\n\t\t}\n\t}\n\n\tunrollCylinderLoops(loops: Edge[][], uStep: number, vStep: number) {\n\t\tconst vertexLoops = loops.map(loop => loop.flatMap(edge => edge.getVerticesNo0()))\n\t\tconst surface = this.surface as ParametricSurface\n\t\tconst vertices: V3[] = vertexLoops.concatenated()\n\t\t// this.unrollLoop(loop).map(v => new V3(v.x / uStep, v.y / vStep, 0)))\n\t\tconst loopStarts = vertexLoops.reduce((arr, loop) => (arr.push(arr.last + loop.length), arr), [0])\n\t\tconst stPFunc = surface.stPFunc()\n\t\tconst verticesST = vertices.map(v => stPFunc(v))\n\t\tconst verticesUV = verticesST.map(st => new V3(st.x / uStep, st.y / vStep, 0))\n\t\tconst normalST = surface.normalSTFunc()\n\t\tconst normals: V3[] = verticesST.map(({x, y}) => normalST(x, y))\n\t\treturn {verticesUV: verticesUV, vertices: vertices, normals: normals, loopStarts: loopStarts}\n\t}\n\n\t/**\n\t * at(s, t) = new V3(s cos t, s sin t, t + )\n\t *\n\t * x = 0\n\t *\n\t * s cos t = 0\n\t * ==> s = 0 || cos t = 0\n\t * ==> L3.Z || V3(0, +-s, k * 2 pi)\n\t *\n\t * x = c\n\t * s cos t = c\n\t * ==> V3(c, c sin t / cos t = c tan t, t)\n\t * ==> V3(c, c t, arctan t)\n\t *\n\t *\n\t * x . n = w\n\t *      s cos t nx + s sin t ny + t nz = w\n\t *      s = (w - t nz) / (cos t nx + sub t ny)\n\t * ==> V3(\n\t *          cos t (w - t nz) / (cos t nx + sin t ny)\n\t *          sin t (w - t nz) / (cos t nx + sin t ny)\n\t *          t)\n\t *\n\t *  ==> V3(\n\t *          (w - z arctan t) / (x + t y)\n\t *          (w - z arctan t) / (y + x / t)\n\t *          arctan t)\n\t *\n\t *\n\t *\n\t */\n\n\taddToMesh(this: this & { surface: ParametricSurface }, mesh: Mesh, uStep: number = this.surface.uStep, vStep: number = this.surface.vStep) {\n\t\tassertf(() => uStep > 0 && vStep > 0, uStep, vStep, 'Surface: ' + this.surface)\n\t\tconst triangles: int[] = []\n\t\tconst pIJFunc = (i: number, j: number) => this.surface.pSTFunc()(i * uStep, j * vStep)\n\t\tconst normalIJFunc = (i: number, j: number) => this.surface.normalSTFunc()(i * uStep, j * vStep)\n\t\tconst loops = [this.contour].concat(this.holes)\n\t\tconst {vertices, verticesUV, normals, loopStarts} = this.surface instanceof SemiEllipsoidSurface || this.surface instanceof ConicSurface\n\t\t\t? this.unrollEllipsoidLoops(loops, uStep, vStep)\n\t\t\t: this.unrollCylinderLoops(loops, uStep, vStep)\n\t\tloopStarts.push(vertices.length)\n\n\t\tfor (let vertexLoopIndex = 0; vertexLoopIndex < loops.length; vertexLoopIndex++) {\n\t\t\tconst vertexLoopStart = loopStarts[vertexLoopIndex]\n\t\t\tconst vertexLoopLength = loopStarts[vertexLoopIndex + 1] - vertexLoopStart\n\t\t\tconst base = mesh.vertices!.length + loopStarts[vertexLoopIndex]\n\t\t\tfor (let i = 0; i < vertexLoopLength; i++) {\n\t\t\t\tmesh.LINES!.push(base + i, base + (i + 1) % vertexLoopLength)\n\t\t\t}\n\t\t}\n\n\t\tdisableConsole()\n\t\tlet minU = Infinity, maxU = -Infinity, minV = Infinity, maxV = -Infinity\n\t\t//console.log('surface', this.surface.str)\n\t\t//console.log(verticesUV)\n\t\t//drPs.push(...verticesUV.map((v, i) => ({p: vertices[i], text: `${i} uv: ${v.toString(x => round10(x,\n\t\t// -4))}`})))\n\t\tverticesUV.forEach(({x: u, y: v}) => {\n\t\t\tassert(isFinite(u))\n\t\t\tassert(isFinite(v))\n\t\t\tminU = min(minU, u)\n\t\t\tmaxU = max(maxU, u)\n\t\t\tminV = min(minV, v)\n\t\t\tmaxV = max(maxV, v)\n\t\t})\n\t\tif (ParametricSurface.is(this.surface)) {\n\t\t\tassert(this.surface.boundsSigned(minU * uStep, minV * vStep) > -NLA_PRECISION)\n\t\t\tassert(this.surface.boundsSigned(maxU * uStep, maxV * vStep) > -NLA_PRECISION)\n\t\t}\n\t\tconst uOffset = floor(minU + NLA_PRECISION), vOffset = floor(minV + NLA_PRECISION)\n\t\tconst uRes = ceil(maxU - NLA_PRECISION) - uOffset, vRes = ceil(maxV - NLA_PRECISION) - vOffset\n\t\tconsole.log(uStep, vStep, uRes, vRes)\n\t\tif (uRes == 1 && vRes == 1) {\n\t\t\t// triangulate this face as if it were a plane\n\t\t\tconst polyTriangles = triangulateVertices(V3.Z, verticesUV, loopStarts.slice(1, 1 + this.holes.length))\n\t\t\ttriangles.push(...polyTriangles)\n\t\t} else {\n\t\t\tconst partss: int[][][] = new Array(uRes * vRes)\n\n\t\t\tfunction fixUpPart(part: number[], baseU: int, baseV: int) {\n\t\t\t\tassert(baseU < uRes && baseV < vRes, `${baseU}, ${baseV}, ${uRes}, ${vRes}`)\n\t\t\t\tconsole.log('complete part', part, baseU, baseV)\n\t\t\t\t//console.trace()\n\t\t\t\tassert(part.length)\n\t\t\t\tconst cellU = baseU + uOffset, cellV = baseV + vOffset\n\t\t\t\tfor (const index of part) {\n\t\t\t\t\tassert(le(cellU, verticesUV[index].x) && le(verticesUV[index].x, cellU + 1), `${index} ${verticesUV[index].str} ${cellU} ${cellU}`)\n\t\t\t\t\tassert(le(cellV, verticesUV[index].y) && le(verticesUV[index].y, cellV + 1))\n\t\t\t\t}\n\t\t\t\tconst pos = baseV * uRes + baseU\n\t\t\t\t;(partss[pos] || (partss[pos] = [])).push(part)\n\t\t\t\t//const outline = partss[pos] || (partss[pos] = [minU + baseU * uStep, minV + baseV * vStep, minU +\n\t\t\t\t// (baseU + 1) * uStep, minV + (baseV + 1) * vStep])\n\t\t\t}\n\n\t\t\t// 'some' instead of forEach so we can return out of the entire function if this.edges crosses no borders\n\t\t\t// and\n\t\t\tfor (let vertexLoopIndex = 0; vertexLoopIndex < loops.length; vertexLoopIndex++) {\n\t\t\t\tlet part: int[] | undefined = undefined, firstPart, firstPartBaseU: int = -1, firstPartBaseV: int = -1\n\t\t\t\tlet lastBaseV = -1, lastBaseU = -1\n\t\t\t\tlet partCount = 0\n\t\t\t\tconst vertexLoopStart = loopStarts[vertexLoopIndex]\n\t\t\t\tconst vertexLoopLength = loopStarts[vertexLoopIndex + 1] - vertexLoopStart\n\t\t\t\tfor (let vlvi = 0; vlvi < vertexLoopLength; vlvi++) {\n\t\t\t\t\tconst vx0index = vertexLoopStart + vlvi, vx0 = verticesUV[vx0index]\n\t\t\t\t\tconst vx1index = vertexLoopStart + (vlvi + 1) % vertexLoopLength, vx1 = verticesUV[vx1index]\n\t\t\t\t\t//console.log('dask', vx0index, vx1index)\n\t\t\t\t\tconst vx01 = vx0.to(vx1)\n\t\t\t\t\tassert(vx0)\n\t\t\t\t\tconst di = vx01.x, dj = vx01.y\n\t\t\t\t\tlet vxIndex = vx0index, vx = vx0, currentT = 0\n\t\t\t\t\tlet whileLimit = 400\n\t\t\t\t\twhile (--whileLimit) {\n\t\t\t\t\t\tconst vxu = vx.x, vxv = vx.y\n\t\t\t\t\t\t// points which are on a grid line are assigned to the cell into which they are going (+\n\t\t\t\t\t\t// NLA_PRECISION * sign(di)) if they are parallel to the gridline (eq0(di)), they belong the\n\t\t\t\t\t\t// the cell for which they are a CCW boundary\n\t\t\t\t\t\tconst baseU = floor(vxu + (!eq0(di) ? sign(di) : -sign(dj)) * NLA_PRECISION) - uOffset\n\t\t\t\t\t\tconst baseV = floor(vxv + (!eq0(dj) ? sign(dj) : sign(di)) * NLA_PRECISION) - vOffset\n\t\t\t\t\t\tassert(baseU < uRes && baseV < vRes, `${baseU}, ${baseV}, ${uRes}, ${vRes}`)\n\t\t\t\t\t\t// figure out the next intersection with a gridline:\n\t\t\t\t\t\t// iNext is the positive horizontal distance to the next vertical gridline\n\t\t\t\t\t\tconst iNext = ceil(sign(di) * vxu + NLA_PRECISION) - sign(di) * vxu\n\t\t\t\t\t\tconst jNext = ceil(sign(dj) * vxv + NLA_PRECISION) - sign(dj) * vxv\n\t\t\t\t\t\tconst iNextT = currentT + iNext / abs(di)\n\t\t\t\t\t\tconst jNextT = currentT + jNext / abs(dj)\n\t\t\t\t\t\t//console.log(vxIndex, vx.str, 'vij', vxu, vxv, 'd', di, dj, 'ijNext', iNext, jNext, 'nextT',\n\t\t\t\t\t\t// iNextT, jNextT)\n\t\t\t\t\t\tif (lastBaseU != baseU || lastBaseV != baseV) {\n\t\t\t\t\t\t\tif (part) {\n\t\t\t\t\t\t\t\tif (!firstPart) {\n\t\t\t\t\t\t\t\t\tfirstPart = part\n\t\t\t\t\t\t\t\t\tfirstPartBaseU = lastBaseU\n\t\t\t\t\t\t\t\t\tfirstPartBaseV = lastBaseV\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tpartCount++\n\t\t\t\t\t\t\t\t\tfixUpPart(part, lastBaseU, lastBaseV)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpart = [vxIndex]\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlastBaseU = baseU\n\t\t\t\t\t\tlastBaseV = baseV\n\t\t\t\t\t\tcurrentT = min(iNextT, jNextT)\n\t\t\t\t\t\tif (ge(currentT, 1)) {\n\t\t\t\t\t\t\t//console.log('breaking ', vx1index)\n\t\t\t\t\t\t\tpart!.push(vx1index)\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst nextPoint = vx0.lerp(vx1, currentT)\n\t\t\t\t\t\t\tconst nextPointIndex = addVertex(nextPoint.x, nextPoint.y)\n\n\t\t\t\t\t\t\t//console.log('pushing ', nextPointIndex)\n\t\t\t\t\t\t\tpart!.push(nextPointIndex)\n\t\t\t\t\t\t\tvx = nextPoint\n\t\t\t\t\t\t\tvxIndex = nextPointIndex\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tassert(whileLimit, 'whileLimit')\n\t\t\t\t}\n\t\t\t\tif (0 == partCount) {\n\t\t\t\t\t// complete loop\n\t\t\t\t\tassert(false, 'found a hole, try increasing resolution')\n\t\t\t\t}\n\t\t\t\t// at this point, the firstPart hasn't been added, and the last part also hasn't been added\n\t\t\t\t// either they belong to the same cell, or not\n\t\t\t\tif (firstPartBaseU == lastBaseU && firstPartBaseV == lastBaseV) {\n\t\t\t\t\tpart!.pop()\n\t\t\t\t\tfixUpPart(part!.concat(firstPart!), lastBaseU, lastBaseV)\n\t\t\t\t} else {\n\t\t\t\t\tfixUpPart(firstPart!, firstPartBaseU!, firstPartBaseV!)\n\t\t\t\t\tfixUpPart(part!, lastBaseU, lastBaseV)\n\t\t\t\t}\n\t\t\t\tconsole.log('firstPart', firstPart)\n\t\t\t}\n\t\t\tconsole.log('calculated parts', partss)\n\t\t\tconst fieldVertexIndices = new Array((uRes + 1) * (vRes + 1))\n\n\t\t\tfunction addVertex(u: number, v: number): int {\n\t\t\t\tverticesUV.push(new V3(u, v, 0))\n\t\t\t\tnormals.push(normalIJFunc(u, v))\n\t\t\t\treturn vertices.push(pIJFunc(u, v)) - 1\n\t\t\t}\n\n\t\t\tfunction getGridVertexIndex(i: int, j: int): int {\n\t\t\t\tconst index = j * (uRes + 1) + i\n\t\t\t\treturn fieldVertexIndices[index] || (fieldVertexIndices[index] = addVertex(i + uOffset, j + vOffset))\n\t\t\t}\n\n\t\t\tfor (let col = 0; col < uRes; col++) {\n\t\t\t\tlet inside = false\n\t\t\t\tfor (let row = 0; row < vRes; row++) {\n\t\t\t\t\tconst pos = row * uRes + col\n\t\t\t\t\tconst fieldU = uOffset + col, fieldV = vOffset + row\n\t\t\t\t\tconst fieldCU = uOffset + col + 0.5, fieldCV = vOffset + row + 0.5\n\t\t\t\t\tconst parts = partss[pos]\n\t\t\t\t\tif (!parts) {\n\t\t\t\t\t\tif (inside) {\n\t\t\t\t\t\t\tpushQuad(triangles, false,\n\t\t\t\t\t\t\t\tgetGridVertexIndex(col, row), getGridVertexIndex(col + 1, row),\n\t\t\t\t\t\t\t\tgetGridVertexIndex(col, row + 1), getGridVertexIndex(col + 1, row + 1))\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// assemble the field with segments in in\n\t\t\t\t\t\tfunction opos(index: int) {\n\t\t\t\t\t\t\tconst p = verticesUV[index], u1 = p.x - fieldU, v1 = p.y - fieldV\n\t\t\t\t\t\t\tassert(-NLA_PRECISION < u1 && u1 < 1 + NLA_PRECISION && -NLA_PRECISION < v1 && v1 < 1 + NLA_PRECISION,\n\t\t\t\t\t\t\t\t'oob u1 v1 ' + u1 + ' ' + v1 + ' ' + index + ' ' + p.str + 'IF THIS FAILS check canonSeamU is correct')\n\t\t\t\t\t\t\treturn v1 < u1 ? u1 + v1 : 4 - u1 - v1\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\twhile (parts.length) {\n\t\t\t\t\t\t\tconst outline: int[] = [], outlineVertexIndices = []\n\t\t\t\t\t\t\tconst startPart = parts[0]\n\t\t\t\t\t\t\tassert(startPart.length > 0)\n\t\t\t\t\t\t\tlet currentPart = startPart\n\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\toutline.push(...currentPart)\n\t\t\t\t\t\t\t\tconst currentPartEndOpos = opos(currentPart.last)\n\t\t\t\t\t\t\t\tconst nextPartIndex = parts.indexWithMax(part => -mod(opos(part[0]) - currentPartEndOpos, 4))\n\t\t\t\t\t\t\t\tconst nextPart = parts.removeIndex(nextPartIndex)\n\t\t\t\t\t\t\t\tlet currentOpos = currentPartEndOpos\n\t\t\t\t\t\t\t\tconst nextPartStartOpos = opos(nextPart[0]) > currentOpos\n\t\t\t\t\t\t\t\t\t? opos(nextPart[0])\n\t\t\t\t\t\t\t\t\t: opos(nextPart[0]) + 4\n\t\t\t\t\t\t\t\tlet nextOpos = ceil(currentOpos + NLA_PRECISION)\n\t\t\t\t\t\t\t\tlet flipping = eq0((currentOpos + NLA_PRECISION) % 1 - NLA_PRECISION)\n\t\t\t\t\t\t\t\t//inside = inside != (!eq0(currentOpos % 1) && currentOpos % 2 < 1)\n\t\t\t\t\t\t\t\twhile (lt(nextOpos, nextPartStartOpos)) {\n\t\t\t\t\t\t\t\t\tswitch (nextOpos % 4) {\n\t\t\t\t\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t\t\t\t\toutline.push(getGridVertexIndex(col, row))\n\t\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\t\t\t\tinside = inside != flipping\n\t\t\t\t\t\t\t\t\t\t\toutline.push(getGridVertexIndex(col + 1, row))\n\t\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t\t\toutline.push(getGridVertexIndex(col + 1, row + 1))\n\t\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t\t\tinside = inside != flipping\n\t\t\t\t\t\t\t\t\t\t\toutline.push(getGridVertexIndex(col, row + 1))\n\t\t\t\t\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tflipping = true\n\t\t\t\t\t\t\t\t\tnextOpos++\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// if the next loop would have completed a top or bottom segment\n\t\t\t\t\t\t\t\tinside = inside != (flipping && nextOpos % 2 == 1 && eq(nextOpos, nextPartStartOpos))\n\t\t\t\t\t\t\t\tcurrentOpos = nextOpos\n\t\t\t\t\t\t\t\tcurrentPart = nextPart\n\t\t\t\t\t\t\t} while (currentPart != startPart)\n\t\t\t\t\t\t\t// triangulate outline\n\t\t\t\t\t\t\tif (outline.length == 3) {\n\t\t\t\t\t\t\t\t// its just a triangle\n\t\t\t\t\t\t\t\ttriangles.push(...outline)\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst polyTriangles = triangulateVertices(V3.Z, outline.map(i => verticesUV[i]), []).map(i => outline[i])\n\t\t\t\t\t\t\t\ttriangles.push(...polyTriangles)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//console.log('outline', col, row, outline)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\t//console.log('trinagle', triangles.max(), vertices.length, triangles.length, triangles.toSource(),\n\t\t// triangles.map(col => vertices[col].$).toSource() ) assert(normals.every(n => n.hasLength(1)), normals.find(n\n\t\t// => !n.hasLength(1)).length() +' '+normals.findIndex(n => !n.hasLength(1)))\n\t\tArray.prototype.push.apply(mesh.TRIANGLES, triangles.map(index => index + mesh.vertices!.length))\n\t\tArray.prototype.push.apply(mesh.vertices, vertices)\n\t\tArray.prototype.push.apply(mesh.normals, normals)\n\t\t//this.addEdgeLines(mesh)\n\t\tenableConsole()\n\t}\n\n\taddToMesh2(this: this & { surface: ParametricSurface }, mesh: Mesh) {\n\t\tconst closed = false\n\t\tconst hSplit = 12800, zSplit = 8\n\t\tconst ribs: { value: number, left: number[], right: number[] }[] = []\n\t\tlet minZ = Infinity, maxZ = -Infinity\n\t\t//let cmp = (a, b) => a.value - b.value\n\t\tconst f = this.surface.pSTFunc()\n\t\tconst normalF = this.surface.normalSTFunc()\n\t\tconst vertexLoops = this.holes.concat([this.contour]).map(loop => this.unrollLoop(loop))\n\t\tvertexLoops.forEach(vertexLoop => {\n\t\t\tvertexLoop.forEach(({x: d, y: z}) => {\n\t\t\t\tconst index0 = ribs.binaryIndexOf(d, (a, b) => snap(a.value - b, 0))\n\t\t\t\tif (index0 < 0) {\n\t\t\t\t\tribs.splice(-index0 - 1, 0, {value: d, left: [], right: []})\n\t\t\t\t}\n\t\t\t\tminZ = min(minZ, z)\n\t\t\t\tmaxZ = max(maxZ, z)\n\t\t\t})\n\t\t})\n\t\tconsole.log('zzzs', minZ, maxZ, vertexLoops[0].toSource().replace(/\\), /g, ',\\n'))\n\t\tconst correction = 1\n\t\tvertexLoops.forEach(vertexLoop => {\n\t\t\tvertexLoop.forEach((v0, i, vs) => {\n\t\t\t\tlet v1 = vs[(i + 1) % vs.length], dDiff = v1.x - v0.x\n\t\t\t\t//console.log(v0.sce, v1.sce)\n\t\t\t\tif (eq0(dDiff)) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif (dDiff < 0) {\n\t\t\t\t\t[v0, v1] = [v1, v0]\n\t\t\t\t\tdDiff = -dDiff\n\t\t\t\t}\n\t\t\t\tconst index0 = ribs.binaryIndexOf(v0.x, (a, b) => snap(a.value - b, 0))\n\t\t\t\tconst index1 = ribs.binaryIndexOf(v1.x, (a, b) => snap(a.value - b, 0))\n\t\t\t\tribs[index0].right.binaryInsert(v0.y)\n\t\t\t\tfor (let j = (index0 + correction) % ribs.length; j != index1; j = (j + correction) % ribs.length) {\n\t\t\t\t\tconst x = ribs[j].value\n\t\t\t\t\tconst part = (x - v0.x) / dDiff\n\t\t\t\t\tconst interpolated = v1.y * part + v0.y * (1 - part)\n\t\t\t\t\tribs[j].left.binaryInsert(interpolated)\n\t\t\t\t\tribs[j].right.binaryInsert(interpolated)\n\t\t\t\t}\n\t\t\t\tribs[index1].left.binaryInsert(v1.y)\n\t\t\t\t// console.log(ribs.map(r=>r.toSource()).join('\\n'))\n\t\t\t})\n\t\t})\n\t\tconst vertices = [], triangles0: int[] = [], normals = []\n\t\tfor (let i = 0; i < ribs.length; i++) {\n\t\t\tconst ribLeft = ribs[i], ribRight = ribs[(i + 1) % ribs.length]\n\t\t\tassert(ribLeft.right.length == ribRight.left.length)\n\t\t\tfor (let j = 0; j < ribLeft.right.length; j++) {\n\t\t\t\tvertices.push(f(ribLeft.value, ribLeft.right[j]), f(ribRight.value, ribRight.left[j]))\n\t\t\t\tnormals.push(normalF(ribLeft.value, ribLeft.right[j]), normalF(ribRight.value, ribRight.left[j]))\n\t\t\t}\n\t\t}\n\t\t//console.log(ribs.map(r=>r.toSource()).join('\\n'))\n\t\tconst vss = vertices.length, detailVerticesStart = vss\n\t\tconst zInterval = maxZ - minZ, zStep = zInterval / zSplit\n\t\tconst detailZs = arrayFromFunction(zSplit - 1, i => minZ + (1 + i) * zStep)\n\t\tconsole.log('detailsZs', detailZs)\n\t\tfor (let i = 0; i < ribs.length; i++) {\n\t\t\tconst d = ribs[i].value\n\t\t\tfor (let j = 0; j < detailZs.length; j++) {\n\t\t\t\tvertices.push(f(d, detailZs[j]))\n\t\t\t\tnormals.push(normalF(d, detailZs[j]))\n\t\t\t}\n\t\t}\n\t\t// console.log('detailVerticesStart', detailVerticesStart, 'vl', vertices.length, vertices.length -\n\t\t// detailVerticesStart, ribs.length) finally, fill in the ribs\n\t\tlet vsStart = 0\n\t\tconst flipped2 = true\n\t\t//for (var i = 0; i < 1; i++) {\n\t\tconst end = closed ? ribs.length : ribs.length - 1\n\t\tfor (let i = 0; i < end; i++) {\n\t\t\tconst ipp = (i + 1) % ribs.length\n\t\t\tlet inside = false, colPos = 0\n\t\t\tconst ribLeft = ribs[i], ribRight = ribs[(i + 1) % ribs.length]\n\t\t\tfor (let j = 0; j < detailZs.length + 1; j++) {\n\t\t\t\tconst detailZ = detailZs[j] || 100000\n\t\t\t\tif (!inside) {\n\t\t\t\t\tif (ribLeft.right[colPos] < detailZ && ribRight.left[colPos] < detailZ) {\n\t\t\t\t\t\tif (ribLeft.right[colPos + 1] < detailZ || ribRight.left[colPos + 1] < detailZ) {\n\t\t\t\t\t\t\tpushQuad(triangles0, flipped2,\n\t\t\t\t\t\t\t\tvsStart + colPos * 2,\n\t\t\t\t\t\t\t\tvsStart + (colPos + 1) * 2,\n\t\t\t\t\t\t\t\tvsStart + colPos * 2 + 1,\n\t\t\t\t\t\t\t\tvsStart + (colPos + 1) * 2 + 1)\n\t\t\t\t\t\t\tcolPos += 2\n\t\t\t\t\t\t\tif (ribLeft.right[colPos] < detailZ || ribRight.left[colPos] < detailZ) {\n\t\t\t\t\t\t\t\tj--\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpushQuad(triangles0, flipped2,\n\t\t\t\t\t\t\t\tvsStart + colPos * 2,\n\t\t\t\t\t\t\t\tvsStart + colPos * 2 + 1,\n\t\t\t\t\t\t\t\tdetailVerticesStart + i * detailZs.length + j,\n\t\t\t\t\t\t\t\tdetailVerticesStart + ipp * detailZs.length + j)\n\t\t\t\t\t\t\tinside = true\n\t\t\t\t\t\t\tcolPos++\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (ribLeft.right[colPos] < detailZ || ribRight.left[colPos] < detailZ) {\n\t\t\t\t\t\tpushQuad(triangles0, flipped2,\n\t\t\t\t\t\t\tdetailVerticesStart + i * detailZs.length + j - 1,\n\t\t\t\t\t\t\tdetailVerticesStart + ipp * detailZs.length + j - 1,\n\t\t\t\t\t\t\tvsStart + colPos * 2,\n\t\t\t\t\t\t\tvsStart + colPos * 2 + 1)\n\t\t\t\t\t\tinside = false\n\t\t\t\t\t\tcolPos++\n\t\t\t\t\t\tif (ribLeft.right[colPos] < detailZ || ribRight.left[colPos] < detailZ) {\n\t\t\t\t\t\t\tj--\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpushQuad(triangles0, flipped2,\n\t\t\t\t\t\t\tdetailVerticesStart + i * detailZs.length + j,\n\t\t\t\t\t\t\tdetailVerticesStart + i * detailZs.length + j - 1,\n\t\t\t\t\t\t\tdetailVerticesStart + ipp * detailZs.length + j,\n\t\t\t\t\t\t\tdetailVerticesStart + ipp * detailZs.length + j - 1)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tvsStart += ribLeft.right.length * 2\n\t\t}\n\t\t//console.log('trinagle', triangles0.max(), vertices.length, triangles0.length, triangles0.toSource(),\n\t\t// triangles0.map(i => vertices[i].$).toSource() )\n\t\tconst triangles = triangles0.map(index => index + mesh.vertices!.length)\n\t\t//assert(normals.every(n => n.hasLength(1)), normals.find(n => !n.hasLength(1)).length() +'\n\t\t// '+normals.findIndex(n => !n.hasLength(1)))\n\t\tArray.prototype.push.apply(mesh.vertices, vertices)\n\t\tArray.prototype.push.apply(mesh.TRIANGLES, triangles)\n\t\tArray.prototype.push.apply(mesh.normals, normals)\n\t\t//this.addEdgeLines(mesh)\n\n\t}\n\n\n}\n\n","/// <reference path=\"earcut.d.ts\" />\n\nimport earcut from 'earcut'\nimport {JavaMap as CustomMap, JavaSet as CustomSet, Pair} from 'javasetmap.ts'\nimport nerdamer from 'nerdamer'\nimport {\n\tAABB, assert, assertf, assertInst, assertNever, assertNumbers, assertVectors, callsce, combinations, eq, eq0, gt,\n\tint, lt, M4, mapPush, newtonIterate1d, newtonIterate2d, NLA_DEBUG, NLA_PRECISION, SCE, snap, snap0, TAU,\n\tTransformable, V, V3,\n} from 'ts3dutils'\nimport {Mesh} from 'tsgl'\n\nimport {\n\tCurve, curvePoint, curvePointMF, Edge, Face, FaceInfoFactory, L3, P3, PlaneFace, PointVsFace, R2_R, Surface,\n} from './index'\n\nconst {PI, sign, abs, sqrt} = Math\n\n\nexport const EPS = 1e-5\n\nlet globalId = 0\n\nexport function getGlobalId() {\n\treturn globalId++\n}\n\nexport function addLikeSurfaceFaces(likeSurfaceFaces: Face[][], face1: Face, face2: Face) {\n\t// There cannot be two subgroups which will later be connected, as the \"graph\" of like surface faces is fully\n\t// connected\n\tfor (let i = 0; i < likeSurfaceFaces.length; i++) {\n\t\tconst faceGroup = likeSurfaceFaces[i]\n\t\tlet foundFace1 = false, foundFace2 = false\n\t\tfor (let j = 0; j < faceGroup.length; j++) {\n\t\t\tconst face = faceGroup[j]\n\t\t\tif (face == face1) {\n\t\t\t\tfoundFace1 = true\n\t\t\t}\n\t\t\tif (face == face2) {\n\t\t\t\tfoundFace2 = true\n\t\t\t}\n\t\t}\n\t\tif (foundFace1 != foundFace2) {\n\t\t\tfaceGroup.push(foundFace1 ? face2 : face1)\n\t\t\treturn\n\t\t} else if (foundFace1) {\n\t\t\t// found both\n\t\t\treturn\n\t\t}\n\t}\n\t// nothing found, add a new group\n\tlikeSurfaceFaces.push([face1, face2])\n}\n\nexport function assembleFaceFromLooseEdges(edges: Edge[], surface: Surface, faceConstructor: typeof Face.constructor): Face {\n\tconst visited = new Set()\n\n\tfunction nextStart() { return edges.find(edge => !visited.has(edge)) }\n\n\tconst loops = []\n\tlet startEdge, currentEdge\n\twhile (startEdge = nextStart()) {\n\t\tcurrentEdge = startEdge\n\t\tconst loop = []\n\t\tlet total = 0\n\t\tdo {\n\t\t\tvisited.add(currentEdge)\n\t\t\tloop.push(currentEdge)\n\t\t\tconst possibleEdges = edges.filter(edge => currentEdge.b.like(edge.a))\n\t\t\tconst normalAtCurrentB = surface.normalP(currentEdge.b)\n\t\t\tconst nextEdgeIndex = possibleEdges.indexWithMax(\n\t\t\t\t(edge, index) => currentEdge.bDir.angleRelativeNormal(edge.aDir, normalAtCurrentB))\n\t\t\tcurrentEdge = possibleEdges[nextEdgeIndex]\n\t\t} while (startEdge != currentEdge && total++ < 200)\n\t\tassert(total != 201)\n\t\tloops.push(loop)\n\t}\n\n\n\tconst assembledFaces = B2.assembleFacesFromLoops(loops, surface, faceConstructor)\n\tassertf(() => 1 == assembledFaces.length)\n\treturn assembledFaces[0]\n}\n\n/**\n * ## Markdown header\n * ![foo](screenshots/Capture.PNG)\n * {@link ../screenshots/Capture.PNG}\n * find the next edge with the MAXIMUM angle\n */\nexport function calcNextEdgeIndex(currentEdge: Edge, possibleEdges: Edge[], faceNormalAtCurrentB: V3): int {\n\tlet maxValue = -20, advanced = false, result = Number.MAX_SAFE_INTEGER\n\tconst normVector = currentEdge.bDir.cross(faceNormalAtCurrentB)\n\tconst eps = 1e-4\n\tconst dir = sign(currentEdge.deltaT())\n\tconst ecd = currentEdge.curve.diff(currentEdge.bT, -dir * eps).dot(normVector)\n\tfor (let i = possibleEdges.length; i--;) {\n\t\tconst edge = possibleEdges[i]\n\t\tconst angle1 = currentEdge.bDir.negated().angleRelativeNormal(edge.aDir, faceNormalAtCurrentB)\n\t\tconst angle = (angle1 + TAU + NLA_PRECISION) % TAU - NLA_PRECISION\n\t\tif (eq0(angle)) {\n\t\t\t// do advanced analysis\n\t\t\tif (currentEdge.curve.isColinearTo(edge.curve)) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tconst edgeDir = sign(edge.deltaT())\n\t\t\tconst iscd = edge.curve.diff(edge.aT, edgeDir * eps).dot(normVector)\n\t\t\tconst diff = (iscd - ecd)\n\t\t\t// if diff > 0, the angle is actually ~= 0\n\t\t\tif (diff < 0 && (!advanced || diff > maxValue)) {\n\t\t\t\tadvanced = true\n\t\t\t\tmaxValue = diff\n\t\t\t\tresult = i\n\t\t\t}\n\t\t} else if (!advanced) {\n\t\t\tif (gt(angle, maxValue)) {\n\t\t\t\tmaxValue = angle\n\t\t\t\tresult = i\n\t\t\t}\n\t\t}\n\t}\n\treturn result == Number.MAX_SAFE_INTEGER ? 0 : result\n}\n\nexport class B2 extends Transformable {\n\tstatic EMPTY = new B2([], false, 'B2.EMPTY', new Map()).buildAdjacencies()\n\tstatic R3 = new B2([], true, 'B2.R3', new Map()).buildAdjacencies()\n\tfaces: Face[]\n\tinfiniteVolume: boolean\n\tgenerator: string | undefined\n\tvertexNames: Map<V3, string>\n\tedgeFaces: CustomMap<Edge, { face: Face, edge: Edge, normalAtCanonA: V3, inside: V3, reversed: boolean, angle: number }[]> | undefined\n\tvertFaces: CustomMap<V3, Edge[]>\n\n\tconstructor(faces: Face[], infiniteVolume: boolean, generator?: string, vertexNames?) {\n\t\tsuper()\n\t\tthis.faces = faces\n\t\tassertInst(Face, ...faces)\n\t\tthis.infiniteVolume = infiniteVolume\n\t\tassert(false === this.infiniteVolume || true === this.infiniteVolume)\n\t\tthis.generator = generator\n\t\tthis.vertexNames = vertexNames\n\t\tthis.edgeFaces = undefined\n\t\t//this.assertSanity()\n\t}\n\n\tstatic loop1ContainsLoop2(loop1: Edge[], ccw1: boolean, loop2: Edge[], ccw2: boolean, surface: Surface): boolean {\n\t\tfor (const edge of loop2) {\n\t\t\tconst loop1ContainsPoint = surface.loopContainsPoint(loop1, edge.a)\n\t\t\tif (PointVsFace.ON_EDGE != loop1ContainsPoint) return PointVsFace.INSIDE == loop1ContainsPoint\n\t\t}\n\t\tfor (const edge of loop2) {\n\t\t\tconst edgePoint = edge.curve.at(edge.aT * 0.2 + edge.bT * 0.8)\n\t\t\tconst loop1ContainsPoint = surface.loopContainsPoint(loop1, edgePoint)\n\t\t\tif (PointVsFace.ON_EDGE != loop1ContainsPoint) return PointVsFace.INSIDE == loop1ContainsPoint\n\t\t}\n\t\tif (ccw1 != ccw2) {\n\t\t\treturn ccw2\n\t\t}\n\t\tthrow new Error(loop1.sce + loop2.sce)\n\t}\n\n\tstatic assembleFacesFromLoops(loops: Edge[][],\n\t\t\t\t\t\t\t\t  surface: Surface,\n\t\t\t\t\t\t\t\t  originalFace: Face,\n\t\t\t\t\t\t\t\t  infoFactory: FaceInfoFactory<any>): Face[] {\n\t\ttype LoopInfo = { loop: Edge[], ccw: boolean, subloops: LoopInfo[] }\n\n\t\tfunction placeRecursively(newLoopInfo: LoopInfo, loopInfos: LoopInfo[]) {\n\t\t\tif (loopInfos.length == 0) {\n\t\t\t\tloopInfos.push(newLoopInfo)\n\t\t\t} else {\n\t\t\t\tconst subLoopInfo = loopInfos.find(loopInfo => B2.loop1ContainsLoop2(loopInfo.loop, loopInfo.ccw, newLoopInfo.loop, newLoopInfo.ccw, surface))\n\t\t\t\tif (subLoopInfo) {\n\t\t\t\t\tplaceRecursively(newLoopInfo, subLoopInfo.subloops)\n\t\t\t\t} else {\n\t\t\t\t\t// newLoopInfo isnt contained by any other subLoopInfo\n\t\t\t\t\tfor (let i = loopInfos.length; --i >= 0;) {\n\t\t\t\t\t\tconst subLoopInfo = loopInfos[i]\n\t\t\t\t\t\t//console.log(\"cheving subLoopInfo\", surface.loopContainsPoint(newLoopInfo.edges,\n\t\t\t\t\t\t// subLoopInfo.edges[0].a))\n\t\t\t\t\t\tif (B2.loop1ContainsLoop2(newLoopInfo.loop, newLoopInfo.ccw, subLoopInfo.loop, subLoopInfo.ccw, surface)) {\n\t\t\t\t\t\t\tnewLoopInfo.subloops.push(subLoopInfo)\n\t\t\t\t\t\t\tloopInfos.splice(i, 1) // remove it\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tloopInfos.push(newLoopInfo)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction newFacesRecursive(loopInfo: LoopInfo): void {\n\t\t\t// CW loops can be top level, if they are holes in the original face not contained in the new face\n\t\t\tif (loopInfo.ccw) {\n\t\t\t\tif (loopInfo.subloops.every(sl => !sl.ccw)) {\n\t\t\t\t\tconst holes = loopInfo.subloops.map(sl => sl.loop)\n\t\t\t\t\tconst info = infoFactory && infoFactory.newSubFace(originalFace, surface, loopInfo.loop, holes)\n\t\t\t\t\tconst newFace = new originalFace.constructor(surface, loopInfo.loop, holes, 'genface' + getGlobalId(), info)\n\t\t\t\t\tnewFaces.push(newFace)\n\t\t\t\t\tloopInfo.subloops.forEach(sl => sl.subloops.forEach(slsl => slsl.ccw && newFacesRecursive(slsl)))\n\t\t\t\t} else {\n\t\t\t\t\tloopInfo.subloops.forEach(sl => sl.ccw && newFacesRecursive(sl))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst newFaces: Face[] = []\n\t\tconst topLevelLoops: LoopInfo[] = []\n\t\tloops.forEach(loop => placeRecursively({\n\t\t\tloop: loop,\n\t\t\tccw: surface.edgeLoopCCW(loop),\n\t\t\tsubloops: [],\n\t\t}, topLevelLoops))\n\t\ttopLevelLoops.forEach(tll => newFacesRecursive(tll))\n\t\treturn newFaces\n\t}\n\n\tstatic join(b2s: B2[], generator?: string) {\n\t\treturn new B2(b2s.flatMap(b2 => b2.faces), false, generator)\n\t}\n\n\tcontainsPoint(p: V3, forceInsideOutside: boolean = false): boolean {\n\t\tconst dirs = [V(-0.3920414696448526, -0.12936136783391444, -0.9108068525164064), V(0.6520650903544943, -0.07151288645511984, -0.7547827667692488), V(0.9433494201061395, -0.2402757256238473, -0.22882186797013926), V(0.13678704228501923, -0.04480387361087783, 0.9895867410047372), V(0.0662057922721913, -0.5865836917435423, 0.8071780259955845), V(-0.7322576567870621, -0.12953393611526787, 0.6685953061989045), V(0.6579719127258273, -0.012300218400456116, 0.7529420075219719), V(-0.5576497966736425, 0.8006695748324647, 0.2189861552871446)]\n\t\tdirLoop: for (const dir of dirs) {\n\t\t\tconst testLine = new L3(p, dir)\n\t\t\tlet inside = this.infiniteVolume, result = false, minT = Infinity\n\t\t\tfor (const face of this.faces) {\n\t\t\t\tassert(!face.surface.containsCurve(testLine))\n\t\t\t\tconst ists = face.surface.isTsForLine(testLine)\n\t\t\t\tfor (const t of ists) {\n\t\t\t\t\tconst p = testLine.at(t)\n\t\t\t\t\tconst pvf = face.containsPoint2(p)\n\t\t\t\t\t//assert(pvf != PointVsFace.ON_EDGE)\n\t\t\t\t\t!forceInsideOutside && assert(!eq0(t))\n\t\t\t\t\tif (t > 0) {\n\t\t\t\t\t\tif (pvf == PointVsFace.ON_EDGE) {\n\t\t\t\t\t\t\tcontinue dirLoop\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (pvf == PointVsFace.INSIDE) {\n\t\t\t\t\t\t\tinside = !inside\n\t\t\t\t\t\t\tif (t < minT) {\n\t\t\t\t\t\t\t\tminT = t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn inside\n\t\t}\n\t\treturn false\n\t}\n\n\twithMergedFaces(): B2 {\n\t\tconst likeSurfaceFaces = []\n\t\tfor (let i = 0; i < this.faces.length; i++) {\n\t\t\tlet addedToGroup = false\n\t\t\tfor (let j = 0; j < i; j++) {\n\t\t\t\tif (this.faces[i].surface.isCoplanarTo(this.faces[j].surface)) {\n\t\t\t\t\tconst faceGroup = likeSurfaceFaces.find(faceGroup => faceGroup.includes(this.faces[j]))\n\t\t\t\t\tif (faceGroup) {\n\t\t\t\t\t\tfaceGroup.push(this.faces[i])\n\t\t\t\t\t\taddedToGroup = true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t!addedToGroup && likeSurfaceFaces.push([this.faces[i]])\n\t\t}\n\n\t\tconsole.log('likeSurfaceFaces', likeSurfaceFaces)\n\t\tif (likeSurfaceFaces.every(group => group.length == 1)) return this\n\n\t\tconst newFaces = []\n\t\tlet total = 0\n\t\tfor (const faceGroup of likeSurfaceFaces) {\n\t\t\tconsole.log(faceGroup)\n\t\t\tif (faceGroup.length == 1) {\n\t\t\t\tnewFaces.push(faceGroup[0])\n\t\t\t} else {\n\t\t\t\tconst allEdges = faceGroup.flatMap(face => face.getAllEdges())\n\t\t\t\tfor (let i = allEdges.length; i-- > 0;) {\n\t\t\t\t\tfor (let j = 0; j < i; j++) {\n\t\t\t\t\t\tconsole.log('blugh', total)\n\t\t\t\t\t\tassert(i >= 0 && j >= 0 && total++ < 500, i + ' ' + j + ' ' + total)\n\t\t\t\t\t\tif (allEdges[i].isCoEdge(allEdges[j])) {\n\t\t\t\t\t\t\t// remove both\n\t\t\t\t\t\t\tallEdges.splice(i, 1)\n\t\t\t\t\t\t\tallEdges.splice(j, 1)\n\t\t\t\t\t\t\ti--\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst newFace = assembleFaceFromLooseEdges(allEdges, faceGroup[0].surface, faceGroup[0].constructor)\n\t\t\t\tnewFaces.push(newFace)\n\t\t\t}\n\t\t}\n\n\t\treturn new B2(newFaces, this.infiniteVolume, this.generator && this.generator + '.withMergedFaces()', this.vertexNames)\n\t}\n\n\tcalculateVolume(): number {\n\t\treturn this.faces.map(face => face.zDirVolume().volume).sum()\n\t}\n\n\ttoMesh(): Mesh & { faceIndexes: Map<Face, { start: int, count: int }>, TRIANGLES: int[], LINES: int[], normals: V3[] } {\n\t\tconst mesh = new Mesh()\n\t\t\t.addVertexBuffer('normals', 'LGL_Normal')\n\t\t\t.addIndexBuffer('TRIANGLES')\n\t\t\t.addIndexBuffer('LINES') as any\n\t\tmesh.faceIndexes = new Map()\n\t\tfor (const face of this.faces) {\n\t\t\tconst triangleStart = mesh.TRIANGLES.length\n\t\t\tface.addToMesh(mesh)\n\t\t\tmesh.faceIndexes.set(face, {start: triangleStart, count: mesh.TRIANGLES.length - triangleStart})\n\t\t}\n\t\t//this.buildAdjacencies()\n\t\t//for (const edge of this.edgeFaces.keys()) {\n\t\t//\n\t\t//}\n\t\treturn mesh\n\t}\n\n\tminus(other: B2, infoFactory?: FaceInfoFactory<any>): B2 {\n\t\tconst generator = this.generator && other.generator && this.generator + '.minus(' + other.generator + ')'\n\t\treturn this.intersection(other.flipped(), true, true, generator, infoFactory)\n\t}\n\n\tplus(other: B2, infoFactory?: FaceInfoFactory<any>): B2 {\n\t\tconst generator = this.generator && other.generator && callsce(this.generator + '.plus', other.generator)\n\t\treturn this.flipped().intersection(other.flipped(), true, true, generator, infoFactory).flipped()\n\t}\n\n\tand(other: B2, infoFactory?: FaceInfoFactory<any>): B2 {\n\t\tconst generator = this.generator && other.generator && callsce(this.generator + '.and', other.generator)\n\t\treturn this.intersection(other, true, true, generator, infoFactory)\n\t}\n\n\txor(other: B2, infoFactory?: FaceInfoFactory<any>): B2 {\n\t\tconst s = this.generator && other.generator && callsce(this.generator + '.xor', other.generator)\n\t\treturn new B2(this.minus(other).faces.concat(other.minus(this).faces),\n\t\t\tthis.infiniteVolume != other.infiniteVolume, s)\n\t}\n\n\tequals(obj: any): boolean {\n\t\treturn this.faces.length == obj.faces.length &&\n\t\t\tthis.faces.every((face) => (obj as B2).faces.some((face2) => face.equals(face2)))\n\t}\n\n\tlike(brep: B2): boolean {\n\t\treturn this.faces.length == brep.faces.length &&\n\t\t\tthis.faces.every((face) => brep.faces.some((face2) => face.likeFace(face2)))\n\t}\n\n\t//reconstituteCoplanarFaces(likeSurfacePlanes, edgeLooseSegments, faceMap, newFaces) {\n\t//    likeSurfacePlanes.forEach(faceGroup => {\n\t//        // calculate total contours\n\t//        let surface = faceGroup[0].surface, bag = []\n\t//        faceGroup.forEach(face => {\n\t//            Array.prototype.push.apply(bag, faceMap(face))\n\t//            face.getAllEdges().forEach(edge => {\n\t//                let edgeSubSegments\n\t//                if (edgeSubSegments = edgeLooseSegments.get(edge)) {\n\t//                    Array.prototype.push.apply(bag, edgeSubSegments)\n\t//                } else {\n\t//                    bag.push(edge)\n\t//                }\n\t//            })\n\t//        })\n\t//        let currentEdge, loops = []\n\t//        while (currentEdge = bag.find(edge => !edge.visited)) {\n\t//            let path = []\n\t//            do {\n\t//                currentEdge.visited = true\n\t//                path.push(currentEdge)\n\t//                let possibleNextEdges = bag.filter(edge => currentEdge.b.like(edge.a))\n\t//                // lowest angle, i.e. the right-most next edge\n\t//                let nextEdgeIndex = possibleNextEdges.indexWithMax((edge, index) =>\n\t// -currentEdge.bDir.angleRelativeNormal(edge.aDir, surface.normalP(currentEdge.b))) currentEdge =\n\t// possibleNextEdges[nextEdgeIndex] } while (!currentEdge.visited) let startIndex = path.find(currentEdge) if (-1\n\t// != startIndex) { loops.push(path.slice(startIndex)) } } }) }\n\n\ttoString(): string {\n\t\treturn `new B2([\\n${this.faces.join(',\\n').replace(/^/gm, '\\t')}], ${this.infiniteVolume})`\n\t}\n\n\tgetConstructorParameters() {\n\t\treturn [this.faces, this.infiniteVolume]\n\t}\n\n\ttoSource(useGenerator: boolean = true): string {\n\t\treturn useGenerator && this.generator ||\n\t\t\t`new B2([\\n${this.faces.map(SCE).join(',\\n').replace(/^/gm, '\\t')}], ${this.infiniteVolume})`\n\t}\n\n\t/**\n\t * Rightmost next segment doesn't work, as the correct next segment isn't obvious from the current corner\n\t * alone.\n\t * (at least, not without extensive pre-analysis on the face edges, which shouldn't be necessary, as the\n\t * correct new faces are defined by the new edges already.) Leftmost edge should work. Holes which touch the\n\t * edge of the face will be added to the face contour.\n\t *\n\t * New segments will always be part left-er than existing ones, so no special check is required.\n\t *\n\t */\n\treconstituteFaces(oldFaces: Face[],\n\t\t\t\t\t  edgeSubEdges: Map<Edge, Edge[]>,\n\t\t\t\t\t  faceMap: Map<Face, Edge[]>,\n\t\t\t\t\t  newFaces: Face[],\n\t\t\t\t\t  infoFactory: FaceInfoFactory<any>): void {\n\n\t\tconst oldFaceStatuses: Map<Face, string> = new Map()\n\t\t// reconstitute faces\n\t\tconst insideEdges: Edge[] = []\n\t\tfor (const face of oldFaces) {\n\t\t\tconst usableOldEdges = face.getAllEdges().filter(edge => !edgeSubEdges.get(edge))\n\t\t\tconst subEdges: Edge[] = face.getAllEdges().mapFilter(edge => edgeSubEdges.get(edge)).concatenated()!\n\t\t\tconst newEdges = faceMap.get(face) || []\n\t\t\tif (newEdges.length || subEdges.length) {\n\t\t\t\toldFaceStatuses.set(face, 'partial')\n\t\t\t\tconst loops = []\n\t\t\t\t// new edges are definitely part of a resulting loop\n\t\t\t\t// old edges (both contour and holes) can either be part of a new loop, in which case they will already\n\t\t\t\t// have been visited when starting a loop search with a new edge, OR they can be stranded, OR they can\n\t\t\t\t// remain in their old loop\n\t\t\t\tfunction getNextStart() {\n\t\t\t\t\treturn newEdges.find(edge => !visitedEdges.has(edge))\n\t\t\t\t\t\t|| subEdges.find(edge => !visitedEdges.has(edge))\n\t\t\t\t\t\t|| usableOldEdges.find(edge => !visitedEdges.has(edge))\n\t\t\t\t}\n\n\t\t\t\tconst visitedEdges = new Set()\n\n\t\t\t\t// search for a loop:\n\t\t\t\tlet currentEdge: Edge | undefined\n\t\t\t\twhile (currentEdge = getNextStart()) {\n\t\t\t\t\tconst startEdge = currentEdge, edges: Edge[] = []\n\t\t\t\t\tlet i = 0\n\t\t\t\t\t// wether only new edges are used (can include looseSegments)\n\t\t\t\t\tdo {\n\t\t\t\t\t\tvisitedEdges.add(currentEdge)\n\t\t\t\t\t\tedges.push(currentEdge)\n\t\t\t\t\t\t// find next edge\n\t\t\t\t\t\tconst possibleOldEdges = usableOldEdges.filter(edge => currentEdge.b.like(edge.a))\n\t\t\t\t\t\tconst possibleSubEdges = subEdges.filter(edge => currentEdge.b.like(edge.a))\n\t\t\t\t\t\tconst possibleNewEdges = newEdges.filter(edge => currentEdge.b.like(edge.a))\n\t\t\t\t\t\tconst possibleEdges = possibleOldEdges.concat(possibleSubEdges, possibleNewEdges)\n\t\t\t\t\t\tif (0 == possibleEdges.length) break\n\t\t\t\t\t\tassert(0 < possibleEdges.length, () => face.sce)\n\t\t\t\t\t\tconst faceNormalAtCurrentB = face.surface.normalP(currentEdge.b)\n\t\t\t\t\t\tconst correct = possibleEdges.indexWithMax(\n\t\t\t\t\t\t\t(edge, index) => (currentEdge.bDir.angleRelativeNormal(edge.aDir, faceNormalAtCurrentB) + NLA_PRECISION + PI) % TAU)\n\t\t\t\t\t\tconst nextEdgeIndex = calcNextEdgeIndex(currentEdge, possibleEdges, faceNormalAtCurrentB)\n\t\t\t\t\t\tcurrentEdge = possibleEdges[nextEdgeIndex]\n\t\t\t\t\t\tif (visitedEdges.has(currentEdge)) {\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tassert(currentEdge)\n\t\t\t\t\t\tassert(currentEdge != startEdge)\n\t\t\t\t\t} while (++i < 400)\n\t\t\t\t\tif (400 == i) {\n\t\t\t\t\t\tassert(false, 'too many')\n\t\t\t\t\t}\n\t\t\t\t\t// check if we found a loop\n\t\t\t\t\tif (edges.length > 1 && currentEdge == startEdge) {\n\t\t\t\t\t\tloops.push(edges)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst faceNewFaces = B2.assembleFacesFromLoops(loops, face.surface, face, infoFactory)\n\t\t\t\tnewFaces.push(...faceNewFaces)\n\t\t\t\tconst faceNewFacesEdges = faceNewFaces.flatMap(face => face.getAllEdges())\n\t\t\t\tinsideEdges.push(...usableOldEdges.filter(edge => faceNewFacesEdges.includes(edge)))\n\t\t\t}\n\t\t}\n\t\twhile (insideEdges.length != 0) {\n\t\t\tconst insideEdge = insideEdges.pop()\n\t\t\tconst adjacentFaces = this.edgeFaces.get(insideEdge.getCanon())\n\t\t\tadjacentFaces.forEach(info => {\n\t\t\t\tif (!oldFaceStatuses.has(info.face)) {\n\t\t\t\t\toldFaceStatuses.set(info.face, 'inside')\n\t\t\t\t\tinsideEdges.push.apply(insideEdges, info.face.getAllEdges())\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\tnewFaces.push(...oldFaces.filter(face => oldFaceStatuses.get(face) == 'inside'))\n\t}\n\n\tgetLooseEdgeSegments(edgePointInfoss: CustomMap<Edge, IntersectionPointInfo[]>,\n\t\t\t\t\t\t edgeFaces: CustomMap<Edge, any[]>): Map<Edge, Edge[]> {\n\n\t\tconst result = new CustomMap<Edge, Edge[]>()\n\t\t// if there are no point info, the original edge will be kept, so we should return nothing\n\t\t// otherwise, something will be returned, even if it a new edge identical to the base edge\n\t\tfor (const [canonEdge, pointInfos] of edgePointInfoss) {\n\t\t\tif (0 == pointInfos.length) continue\n\t\t\tconst allFaces = edgeFaces.get(canonEdge)\n\t\t\tpointInfos.sort((a, b) => snap0(a.edgeT - b.edgeT) || +!!a.faces)\n\t\t\tlet startP = canonEdge.a, startDir = canonEdge.aDir, startT = canonEdge.aT, startInfo\n\n\t\t\tfunction addNewEdge(startInfo, endInfo, newEdge) {\n\t\t\t\tfor (let i = 0; i < allFaces.length; i++) {\n\t\t\t\t\tconst faceInfo = allFaces[i]\n\t\t\t\t\tconst startYes = !startInfo || !startInfo.faces || startInfo.faces[i]\n\t\t\t\t\tconst endYes = !endInfo || !endInfo.faces\n\t\t\t\t\tendYes && mapPush(result,\n\t\t\t\t\t\t!faceInfo.reversed ? canonEdge : canonEdge.flipped(),\n\t\t\t\t\t\t!faceInfo.reversed ? newEdge : newEdge.flipped())\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < pointInfos.length; i++) {\n\t\t\t\tconst info = pointInfos[i]\n\t\t\t\tconst pDir = canonEdge.tangentAt(info.edgeT)\n\t\t\t\tif (!eq(info.edgeT, startT)) {\n\t\t\t\t\tconst newEdge = Edge.create(canonEdge.curve, startP, info.p, startT, info.edgeT, undefined, startDir, pDir, 'looseSegment' + getGlobalId())\n\t\t\t\t\taddNewEdge(startInfo, info, newEdge)\n\t\t\t\t}\n\t\t\t\tstartP = info.p\n\t\t\t\tstartT = info.edgeT\n\t\t\t\tstartInfo = info\n\t\t\t\tstartDir = pDir\n\t\t\t}\n\t\t\tif (startInfo && !eq(startT, canonEdge.bT)) {\n\t\t\t\tconst newEdge = Edge.create(canonEdge.curve, startP, canonEdge.b, startT, canonEdge.bT, undefined, startDir, canonEdge.bDir, 'looseSegment' + getGlobalId())\n\t\t\t\taddNewEdge(startInfo, undefined, newEdge)\n\t\t\t}\n\t\t}\n\t\treturn result\n\t}\n\n\tgetIntersectionEdges(brep2: B2) {\n\t\tconst faceMap = new Map(), thisEdgePoints = new CustomMap(), otherEdgePoints = new CustomMap()\n\n\t\tconst likeSurfaceFaces: Map<Edge, IntersectionPointInfo[]> = []\n\n\t\tthis.faces.forEach(face => {\n\t\t\t//console.log('face', face.toString())\n\t\t\tbrep2.faces.forEach(face2 => {\n\t\t\t\t//console.log('face2', face2.toString())\n\t\t\t\tface.intersectFace(face2, this, brep2, faceMap, thisEdgePoints, otherEdgePoints, likeSurfaceFaces)\n\t\t\t})\n\t\t})\n\n\t\treturn Array.from(faceMap.values()).concatenated()\n\n\t}\n\n\tshellCount(): int {\n\t\tconst foundFaces = new Set<Face>()\n\t\tlet face, result = 0\n\t\twhile (face = this.faces.find(face => !foundFaces.has(face))) {\n\t\t\tresult++\n\t\t\tconst stack = [face]\n\t\t\twhile (face = stack.pop()) {\n\t\t\t\tfor (const edge of face.getAllEdges()) {\n\t\t\t\t\tfor (const {face: face2} of this.edgeFaces.get(edge.getCanon())) {\n\t\t\t\t\t\tif (face !== face2 && !foundFaces.has(face2)) {\n\t\t\t\t\t\t\tfoundFaces.add(face2)\n\t\t\t\t\t\t\tstack.push(face2)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result\n\t}\n\n\tgetAABB(): AABB {\n\t\treturn AABB.forAABBs(this.faces.map(face => face.getAABB()))\n\t}\n\n\tassertSanity(): void {\n\t\tif (!NLA_DEBUG) return\n\t\tconst allFaceEdges = this.faces.flatMap(face => face.getAllEdges())\n\t\tfor (const {i, j} of combinations(allFaceEdges.length)) {\n\t\t\tconst a = allFaceEdges[i], b = allFaceEdges[j]\n\t\t\t//assert(i == j || !a.isCoEdge(b) || a == b || a.flippedOf == b, 'coedges not linked properly', a, b)\n\n\t\t\t//assert(i == j\n\t\t\t//\t|| !a.curve.isColinearTo(b.curve)\n\t\t\t//\t|| (a.curve.equals(b.curve) && a.isCoEdge(b))\n\t\t\t//   || !a.overlaps(b), 'colinear edges overlap', a, b)\n\t\t}\n\n\t\tthis.buildAdjacencies()\n\t\tfor (const [canonEdge, edgeFaceInfos] of this.edgeFaces) {\n\t\t\t// TODO handle curved faces\n\t\t\tassert(edgeFaceInfos.length % 2 == 0, () => canonEdge + edgeFaceInfos.sce)\n\t\t}\n\n\t}\n\n\t//intersection3(other: B2, buildThis: boolean, buildOther: boolean, name?: string): B2 {\n\t//    this.assertSanity()\n\t//    other.assertSanity()\n\t//    this.buildAdjacencies()\n\t//    other.buildAdjacencies()\n\t//\n\t//    // edge / edge\n\t//    for (const [edge1, edge1Faces] of this.edgeFaces) {\n\t//        for (const [edge2, edge2Faces] of other.edgeFaces) {\n\t//            const curve1 = edge1.curve, curve2 = edge2.curve\n\t//            if (curve1.isColinearTo(curve2)) {\n\t//                if (edge1.overlaps(edge2)) {\n\t//                    // faces have a common edge\n\t//                    const aT = curve1.pointT(edge2.a), bT = curve1.pointT(edge2.a)\n\t//                    const minT = min(aT, bT), maxT = max(aT, bT)\n\t//                    const commonEdge = Edge.create(curve1, min(edge1.minT, minT), min(edge1.maxT, maxT), )\n\t//                }\n\t//            } else if (x = curve1.isInfosWithCurve(edge2.curve)) {\n\t//                // edges intersect in a point\n\t//            }\n\t//        }\n\t//    }\n\t//\n\t//    // point / edge\n\t//    function pointEdge(b1, b2, has, add) {\n\t//        for (const v1 of this.vertFaces.keys()) {\n\t//            for (const edge2 of other.edgeFaces.keys()) {\n\t//                if (edge2.curve.containsPoint(v1)) {\n\t//                    const edge2T = edge2.curve.pointT(v1)\n\t//                    if (eq(edge2.aT, edge2T) || eq(edge2.bT, edge2T)) {\n\t//                        add(v1, eq(edge2.aT, edge2T) ? edge2.a : edge2.b)\n\t//                    }\n\t//                }\n\t//            }\n\t//        }\n\t//    }\n\t//    const pairs: CustomSet<[Equalable, Equalable]> = new CustomSet<[Equalable, Equalable]>()\n\t//    pointEdge(this, other, (a, b) => pairs.has([a, b]), (a, b) => pairs.add([a, b]))\n\t//    pointEdge(other, this, (b, a) => pairs.has([a, b]), (b, a) => pairs.add([a, b]))\n\t//\n\t//\n\t//    // point / point\n\t//    for (const v1 of this.vertFaces.keys()) {\n\t//        for (const v2 of other.vertFaces.keys()) {\n\t//            if (v1.like(v2)) {\n\t//\n\t//            }\n\t//        }\n\t//    }\n\t//\n\t//    for (const face1 of this.faces) {\n\t//        for (const face2 of other.faces) {\n\t//            face1.intersectFace(face2)\n\t//        }\n\t//    }\n\t//\n\t//}\n\n\tbuildAdjacencies(): this & { edgeFaces: CustomMap<Edge, { face: Face, edge: Edge, normalAtCanonA: V3, inside: V3, reversed: boolean, angle: number }[]> } {\n\t\tif (this.edgeFaces) return this\n\n\t\tthis.edgeFaces = new CustomMap() as any\n\t\tfor (const face of this.faces) {\n\t\t\tfor (const edge of face.getAllEdges()) {\n\t\t\t\tconst canon = edge.getCanon()\n\t\t\t\tconst normalAtCanonA = face.surface.normalP(canon.a)\n\t\t\t\tconst inside = normalAtCanonA.cross(canon == edge ? edge.aDir : edge.bDir)\n\t\t\t\tmapPush(this.edgeFaces, canon,\n\t\t\t\t\t{\n\t\t\t\t\t\tface: face,\n\t\t\t\t\t\tedge: edge,\n\t\t\t\t\t\tnormalAtCanonA: normalAtCanonA,\n\t\t\t\t\t\treversed: canon != edge,\n\t\t\t\t\t\tinside: inside,\n\t\t\t\t\t\tangle: 0,\n\t\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tfor (const [canonEdge, edgeFaceInfos] of this.edgeFaces) {\n\t\t\t// TODO handle curved faces\n\t\t\t//assert(edgeFaceInfos.length % 2 == 0, () => canonEdge + edgeFaceInfos.sce)\n\t\t\tconst faceInfo0 = edgeFaceInfos.find(faceInfo => faceInfo.reversed)\n\t\t\tif (!faceInfo0) {\n\t\t\t\tconsole.warn('invalid brep')\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tedgeFaceInfos.forEach(faceInfo => {\n\t\t\t\tif (faceInfo != faceInfo0) {\n\t\t\t\t\tfaceInfo.angle = faceInfo0.inside.angleRelativeNormal(faceInfo.inside, canonEdge.aDir.unit())\n\t\t\t\t\tif (faceInfo.angle < 0) faceInfo.angle += 2 * Math.PI\n\t\t\t\t}\n\t\t\t})\n\t\t\tedgeFaceInfos.sort((a, b) => snap(a.angle - b.angle, 0)) // TODO  || assertNever()\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Cases for volumes A and B\n\t *\n\t *          1.  Volumes do not touch.\n\t *          2.  face/face Face surfaces intersect each other.\n\t *              implies edges going through faces.\n\t *              e.g. box(5, 5, 5) - box(5, 5, 5).translate(1, 1, 1)\n\t *          3.  face/edge Edge of A lies in a face of B\n\t *              implies vertices of A lying in face of B\n\t *              e.g. box(5, 5, 5) - box(3, 3, 3).rotateZ([0, 1, 2] * PI / 2).translate(0, 1, 1)\n\t *          4.  edge/edge Two edges are colinear.\n\t *              implies vertex of A lying in edge of B\n\t *           5.  vertex/edge Vertex of A lies on edge of B (but no edge/edge)\n\t *          6.  vertex/vertex with/without edge/edge, edge/face and face/face intersections\n\t *          7.  vertex lies in face\n\t *\n\t *\n\t *\n\t */\n\tintersection(other: B2, buildThis: boolean, buildOther: boolean, generator?: string, infoFactory?: FaceInfoFactory<any>): B2 {\n\t\tthis.assertSanity()\n\t\tother.assertSanity()\n\t\tthis.buildAdjacencies()\n\t\tother.buildAdjacencies()\n\n\t\tconst faceMap = new Map()\n\t\tconst thisEdgePoints = new CustomMap<Edge, IntersectionPointInfo[]>(),\n\t\t\totherEdgePoints = new CustomMap<Edge, IntersectionPointInfo[]>()\n\n\t\tconst checkedPairs = new CustomSet<Pair<any, any>>()\n\n\t\tfor (const thisFace of this.faces) {\n\t\t\tfor (const otherFace of other.faces) {\n\t\t\t\tthisFace.intersectFace(otherFace, this, other, faceMap, thisEdgePoints, otherEdgePoints, checkedPairs)\n\t\t\t}\n\t\t}\n\t\tfor (const edge of thisEdgePoints.keys()) {\n\t\t\tassert(this.edgeFaces.get(edge))\n\t\t}\n\t\tfor (const edge of otherEdgePoints.keys()) {\n\t\t\tassert(other.edgeFaces.get(edge))\n\t\t}\n\t\tconst newFaces: Face[] = []\n\n\t\tif (0 == faceMap.size && 0 == thisEdgePoints.size && 0 == otherEdgePoints.size) {\n\t\t\tconst thisInOther = other.containsPoint(this.faces[0].contour[0].a, true)\n\t\t\tconst otherInThis = !thisInOther && this.containsPoint(other.faces[0].contour[0].a)\n\t\t\treturn this\n\t\t} else {\n\t\t\tif (buildThis) {\n\t\t\t\tconst edgeLooseSegments = this.getLooseEdgeSegments(thisEdgePoints, this.edgeFaces)\n\t\t\t\t//noinspection JSUnusedLocalSymbols\n\t\t\t\tconst els = this.faces.map(face => [face,\n\t\t\t\t\tArray.from(edgeLooseSegments.entries()).filter(([edge, subs]) => face.getAllEdges().some(e => e.equals(edge))).concatenated()])\n\t\t\t\tthis.reconstituteFaces(this.faces, edgeLooseSegments, faceMap, newFaces, infoFactory)\n\t\t\t}\n\t\t\tif (buildOther) {\n\t\t\t\tconst edgeLooseSegments = this.getLooseEdgeSegments(otherEdgePoints, other.edgeFaces)\n\t\t\t\t//noinspection JSUnusedLocalSymbols\n\t\t\t\tconst els = other.faces.map(face => [face,\n\t\t\t\t\tArray.from(edgeLooseSegments.entries())\n\t\t\t\t\t\t.filter(([edge, subs]) => face.getAllEdges().some(e => e.equals(edge)))\n\t\t\t\t\t\t.flatMap(([edge, subs]) => subs)])\n\t\t\t\tother.reconstituteFaces(other.faces, edgeLooseSegments, faceMap, newFaces, infoFactory)\n\t\t\t}\n\t\t}\n\t\t//buildCoplanar && this.reconstituteCoplanarFaces(likeSurfaceFaces, edgeLooseSegments, faceMap, newFaces,\n\t\t// this.infiniteVolume, other.infiniteVolume)\n\n\t\tconst result = new B2(newFaces, this.infiniteVolume && other.infiniteVolume, generator)\n\t\t//result.buildAdjacencies()\n\t\treturn result\n\n\t}\n\n\ttransform(m4: M4, desc?: string) {\n\n\t\tlet vertexNames: Map<V3, string>\n\t\tif (this.vertexNames) {\n\t\t\tvertexNames = new Map()\n\t\t\tthis.vertexNames.forEach((name, vertex) => vertexNames.set(m4.transformPoint(vertex), name + desc))\n\t\t}\n\t\treturn new B2(\n\t\t\tthis.faces.map(f => f.transform(m4)),\n\t\t\tthis.infiniteVolume,\n\t\t\tthis.generator && desc && this.generator + desc, // if desc isn't set, the generator will be invalid\n\t\t\tvertexNames,\n\t\t) as this\n\t}\n\n\tflipped(): B2 {\n\t\treturn new B2(\n\t\t\tthis.faces.map(f => f.flipped()),\n\t\t\t!this.infiniteVolume,\n\t\t\tthis.generator && this.generator + '.flipped()',\n\t\t\tthis.vertexNames)\n\t}\n}\n\nexport type IntersectionPointInfo = {\n\tp: V3, // intersection point\n\tinsideDir: V3,\n\tt: number, // param on intersection curve\n\tedge: Edge, // face edge doing the intersection\n\tedgeT: number,\n\tcolinear: boolean, // whether edge is colinear to intersection line\n\tused?: boolean\n}\n\nexport function dotCurve(v: V3, cDir: V3, cDDT: V3): number {\n\tlet dot = v.dot(cDir)\n\tif (eq0(dot)) { dot = v.dot(cDDT) }\n\tassert(!eq0(dot))\n\treturn dot\n}\n\nexport function dotCurve2(curve: Curve, t: number, normal: V3, sign: number): number {\n\tassert(sign == 1 || sign == -1, sign)\n\tconst tangentDot = curve.tangentAt(t).dot(normal)\n\t// if tangentDot != 0 the curve simply crosses the plane\n\tif (!eq0(tangentDot)) { return sign * tangentDot }\n\tconst ddtDot = curve.ddt(t).dot(normal)\n\t// tangentDot == 0 ==> critical point at t, if ddtDot != 0, then it is a turning point, otherwise we can't be sure\n\t// and must do a numeric test\n\tif (!eq0(ddtDot)) { return ddtDot }\n\tconst numericDot = curve.at(t).to(curve.at(t + sign * 4 * NLA_PRECISION)).dot(normal)\n\tassert(!(curve instanceof L3))\n\treturn numericDot\n}\n\nexport const INSIDE = 0, OUTSIDE = 1, COPLANAR_SAME = 2, COPLANAR_OPPOSITE = 3, ALONG_EDGE_OR_PLANE = 4\n\n/**\n *\n * @param brep BREP to check\n * @param edge edge to check\n * @param dirAtEdgeA the direction vector to check\n * @param faceNormal If dirAtEdgeA doesn't split a volume, but is along a face, the returned value depends on\n *     wether that faces normal1 points in the same direction as faceNormal\n * @returns INSIDE, OUTSIDE, COPLANAR_SAME or COPLANAR_OPPOSITE\n */\n//function splitsVolumeEnclosingFaces(brep: B2, edge: Edge, dirAtEdgeA: V3, faceNormal: V3): int {\n//    assert(arguments.length == 4)\n//    //assert(p.equals(edge.a))\n//    const ab1 = edge.aDir.unit()\n//    const relFaces = facesWithEdge(edge, brep.faces) as any[]\n//    relFaces.forEach(faceInfo => {\n//        faceInfo.normalAtEdgeA = faceInfo.face.surface.normalP(edge.a)\n//        faceInfo.edgeDirAtEdgeA = !faceInfo.reversed\n//            ? faceInfo.edge.aDir\n//            : faceInfo.edge.bDir\n//        faceInfo.outsideVector = faceInfo.edgeDirAtEdgeA.cross(faceInfo.normalAtEdgeA)\n//        faceInfo.angle = (dirAtEdgeA.angleRelativeNormal(faceInfo.outsideVector.negated(), ab1) + 2 * Math.PI +\n// NLA_PRECISION / 2) % (2 * Math.PI) }) assert(relFaces.length != 0, edge.toSource()) relFaces.sort((a, b) => a.angle\n// - b.angle) // assert(relFaces.length % 2 == 0, edge.toSource()) // even number of touching faces  if\n// (eq0(relFaces[0].angle)) { //assert(false) todo const coplanarSame = relFaces[0].normalAtEdgeA.dot(faceNormal) > 0;\n// return coplanarSame ? COPLANAR_SAME : COPLANAR_OPPOSITE } else { return !relFaces[0].reversed ? INSIDE : OUTSIDE } }\nexport function splitsVolumeEnclosingFaces(brep: B2, canonEdge: Edge, dirAtEdgeA: V3, faceNormal: V3): int {\n\tassert(arguments.length == 4)\n\tassert(canonEdge == canonEdge.getCanon())\n\t//assert(p.equals(canonEdge.a))\n\tconst edgeFaceInfos = brep.edgeFaces.get(canonEdge) as any[]\n\tassertf(() => edgeFaceInfos.length % 2 == 0)\n\tassertf(() => brep.edgeFaces)\n\tconst faceInfo0 = edgeFaceInfos[0]\n\tconst aDir1 = canonEdge.aDir.unit()\n\tconst angleToCanon = (faceInfo0.inside.angleRelativeNormal(dirAtEdgeA, aDir1) + 2 * Math.PI + NLA_PRECISION) % (2 * Math.PI) - NLA_PRECISION\n\tconst nearestFaceInfoIndex = edgeFaceInfos.findIndex(faceInfo => lt(angleToCanon, faceInfo.angle))\n\tconst nearestFaceInfo = edgeFaceInfos[nearestFaceInfoIndex == -1\n\t\t? edgeFaceInfos.length - 1\n\t\t: nearestFaceInfoIndex - 1]\n\tif (eq(nearestFaceInfo.angle, angleToCanon)) {\n\t\t//assert(false) todo\n\t\tconst coplanarSame = nearestFaceInfo.normalAtCanonA.dot(faceNormal) > 0\n\t\treturn coplanarSame ? COPLANAR_SAME : COPLANAR_OPPOSITE\n\t} else {\n\t\treturn nearestFaceInfo.reversed ? INSIDE : OUTSIDE\n\t}\n}\n\nexport function splitsVolumeEnclosingFacesP(brep: B2, canonEdge: Edge, p: V3, pInside: V3, faceNormal: V3): int {\n\tassert(arguments.length == 5)\n\tassert(canonEdge == canonEdge.getCanon())\n\t//assert(p.equals(canonEdge.a))\n\tassertf(() => brep.edgeFaces)\n\tconst edgeFaceInfos = brep.edgeFaces.get(canonEdge) as any[]\n\tassertf(() => edgeFaceInfos.length % 2 == 0)\n\tconst pDir1 = canonEdge.tangentAt(canonEdge.curve.pointT(p)).unit()\n\tconst faceInfoAngleFromPInsideNeg = faceInfo => {\n\t\tconst faceInfoPDir = faceInfo.edge.getCanon() == faceInfo.edge ? pDir1 : pDir1.negated()\n\t\tconst faceInfoInsideAtP = faceInfo.face.surface.normalP(p).cross(faceInfoPDir)\n\t\tconst faceInfoAngleAtP = pInside.angleRelativeNormal(faceInfoInsideAtP, pDir1)\n\t\treturn -((faceInfoAngleAtP + TAU + NLA_PRECISION) % TAU - NLA_PRECISION)\n\t}\n\tconst nearestFaceInfo = edgeFaceInfos.withMax(faceInfoAngleFromPInsideNeg)\n\tif (eq0(faceInfoAngleFromPInsideNeg(nearestFaceInfo))) {\n\t\t//assert(false) todo\n\t\tconst coplanarSame = nearestFaceInfo.normalAtCanonA.dot(faceNormal) > 0\n\t\treturn coplanarSame ? COPLANAR_SAME : COPLANAR_OPPOSITE\n\t} else {\n\t\treturn nearestFaceInfo.reversed ? OUTSIDE : INSIDE\n\t}\n}\n\nexport function splitsVolumeEnclosingFacesP2(brep: B2, canonEdge: Edge, p: V3, testCurve: Curve, curveT: number, dir: -1 | 1, faceNormal: V3): int {\n\tassert(canonEdge == canonEdge.getCanon())\n\t//assert(p.equals(canonEdge.a))\n\tassertf(() => brep.edgeFaces)\n\tconst edgeFaceInfos = brep.edgeFaces.get(canonEdge) as any[]\n\tassertf(() => edgeFaceInfos.length % 2 == 0)\n\tconst pDir1 = canonEdge.tangentAt(canonEdge.curve.pointT(p)).unit()\n\tlet pInside = testCurve.tangentAt(curveT).times(dir)\n\tif (pInside.isParallelTo(pDir1)) {\n\t\tpInside = testCurve.diff(curveT, 1e-4 * dir / testCurve.tangentAt(curveT).length()).rejectedFrom(pDir1)\n\t\tpInside = pInside.div(pInside.length())\n\t}\n\tlet minValue = 20, advanced = false, result = OUTSIDE\n\tfor (const faceInfo of edgeFaceInfos) {\n\t\tconst faceInfoPDir = faceInfo.edge.getCanon() == faceInfo.edge ? pDir1 : pDir1.negated()\n\t\tconst faceInfoInsideAtP = faceInfo.face.surface.normalP(p).cross(faceInfoPDir)\n\t\tconst faceInfoAngleAtP = pInside.angleRelativeNormal(faceInfoInsideAtP, pDir1)\n\t\tconst angle = (faceInfoAngleAtP + TAU + NLA_PRECISION) % TAU - NLA_PRECISION\n\t\tif (eq0(angle)) {\n\t\t\t// do advanced analysis\n\t\t\tconst normVector = faceInfo.face.surface.normalP(p)\n\t\t\tif (faceInfo.face.surface.containsCurve(testCurve)) {\n\t\t\t\tconst coplanarSame = normVector.dot(faceNormal) > 0\n\t\t\t\treturn coplanarSame ? COPLANAR_SAME : COPLANAR_OPPOSITE\n\t\t\t}\n\t\t\tconst testPlane = P3.normalOnAnchor(pDir1, p)\n\t\t\tconst isCurve = faceInfo.face.surface.isCurvesWithPlane(testPlane)[0]\n\t\t\tconst isCurvePT = isCurve.pointT(p)\n\t\t\tconst dirFactor = sign(isCurve.tangentAt(isCurvePT).dot(pInside))\n\t\t\tconst eps = 1e-4\n\t\t\tconst iscd = isCurve.at(isCurvePT).to(isCurve.at(isCurvePT + dir * dirFactor * eps)).dot(normVector)\n\t\t\tconst ecd = testCurve.at(curveT).to(testCurve.at(curveT + dir * eps)).dot(normVector)\n\t\t\tconst diff = (iscd - ecd) * (faceInfo.reversed ? -1 : 1)\n\t\t\tif (diff > 0 && (!advanced || diff < minValue)) {\n\t\t\t\tadvanced = true\n\t\t\t\tminValue = diff\n\t\t\t\tresult = faceInfo.reversed ? OUTSIDE : INSIDE\n\t\t\t}\n\t\t} else if (!advanced) {\n\t\t\tif (angle < minValue) {\n\t\t\t\tminValue = angle\n\t\t\t\tresult = faceInfo.reversed ? OUTSIDE : INSIDE\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}\n\nexport function splitsVolumeEnclosingCone(brep: B2, p: V3, dir: V3) {\n\tconst testPlane = P3.forAnchorAndPlaneVectors(p, dir, dir.getPerpendicular())\n\tconst rays = []\n\tfor (let k = 0; k < brep.faces.length; k++) {\n\t\tconst planeFace = brep.faces[k] as PlaneFace\n\t\tassertf(() => planeFace instanceof PlaneFace)\n\t\tif (planeFace.getAllEdges().some(edge => edge.a.like(p))) {\n\t\t\tif (testPlane.isParallelToPlane(planeFace.surface.plane)) {\n\t\t\t\tif (planeFace.pointsToInside(p, dir) != PointVsFace.OUTSIDE) {\n\t\t\t\t\treturn ALONG_EDGE_OR_PLANE\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst isLine = L3.fromPlanes(testPlane, planeFace.surface.plane)\n\t\t\t\tconst ps = planeFace.edgeISPsWithPlane(isLine, testPlane)\n\t\t\t\tlet i = 0\n\t\t\t\twhile (i < ps.length) {\n\t\t\t\t\tconst a = ps[i++], b = ps[i++]\n\t\t\t\t\tconst out = a.p.like(p)\n\t\t\t\t\tif (out || b.p.like(p)) {\n\t\t\t\t\t\tconst dir2 = out ? isLine.dir1 : isLine.dir1.negated()\n\t\t\t\t\t\tconst angle = (dir.angleRelativeNormal(dir2, testPlane.normal1) + 2 * Math.PI + NLA_PRECISION / 2) % (2 * Math.PI)\n\t\t\t\t\t\trays.push({angle: angle, out: out})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\trays.sort((a, b) => a.angle - b.angle)\n\t//console.log(\"testPlane\", testPlane.toSource(), \"rays\", rays.toSource())\n\n\tif (eq0(rays[0].angle)) {\n\t\treturn ALONG_EDGE_OR_PLANE\n\t} else {\n\t\treturn rays[0].out ? OUTSIDE : INSIDE\n\t}\n}\n\nexport function splitsVolumeEnclosingCone2(brep: B2, p: V3, curve: Curve, curveT: number, fb: 1 | -1) {\n\tassert(curve.containsPoint(p))\n\tconst dir = curve.tangentAt(curveT).times(fb)\n\tconst testPlane = P3.forAnchorAndPlaneVectors(p, dir, dir.getPerpendicular())\n\tconst rays = []\n\tconst pFaces = brep.faces.filter(face => face.getAllEdges().some(edge => edge.a.like(p)))\n\tfor (let k = 0; k < pFaces.length; k++) {\n\t\tconst face = pFaces[k]\n\t\tif (face.surface.containsCurve(curve)) {\n\t\t\t//assert(false)\n\t\t\tif (face.pointsToInside3(p, curve, curveT, fb) != PointVsFace.OUTSIDE) {\n\t\t\t\treturn ALONG_EDGE_OR_PLANE\n\t\t\t}\n\t\t}\n\t}\n\tconst EPS = 1e-6\n\treturn brep.containsPoint(curve.at(curveT + fb * EPS), true) ? INSIDE : OUTSIDE\n}\n\nexport function fff(info: { face: Face, edge: Edge, normalAtCanonA: V3, inside: V3, reversed: boolean, angle: number }, surface: Surface): int {\n\tconst canonA = info.edge.reversed ? info.edge.b : info.edge.a\n\tconst surfaceNormalAtCanonA = surface.normalP(canonA)\n\tconst dot = snap0(info.inside.dot(surfaceNormalAtCanonA))\n\tif (0 !== dot) {\n\t\treturn 0 < dot ? OUTSIDE : INSIDE\n\t}\n\tif (surface.isCoplanarTo(info.face.surface)) {\n\t\treturn 0 < info.normalAtCanonA.dot(surfaceNormalAtCanonA) ? COPLANAR_SAME : COPLANAR_OPPOSITE\n\t}\n\tassert(false)\n}\n\nexport function triangulateVertices(normal: V3, vertices: V3[], holeStarts: int[]) {\n\tconst absMaxDim = normal.maxAbsDim(), factor = sign(normal.e(absMaxDim))\n\tconst contour = new Float64Array(vertices.length * 2)\n\tlet i = vertices.length\n\t/*\n\t var [coord0, coord1] = [['y', 'z'], ['z', 'x'], ['x', 'y']][maxAbsDim]\n\t while (i--) {\n\t contour[i * 2    ] = vertices[i][coord0] * factor\n\t contour[i * 2 + 1] = vertices[i][coord1]\n\t }\n\t */\n\n\twhile (i--) {\n\t\t// unroll disambiguation instead of accessing elements by string name ([coord0] etc)\n\t\t// as it confuses google closure\n\t\tswitch (absMaxDim) {\n\t\t\tcase 0:\n\t\t\t\tcontour[i * 2] = vertices[i].y * factor\n\t\t\t\tcontour[i * 2 + 1] = vertices[i].z\n\t\t\t\tbreak\n\t\t\tcase 1:\n\t\t\t\tcontour[i * 2] = vertices[i].z * factor\n\t\t\t\tcontour[i * 2 + 1] = vertices[i].x\n\t\t\t\tbreak\n\t\t\tcase 2:\n\t\t\t\tcontour[i * 2] = vertices[i].x * factor\n\t\t\t\tcontour[i * 2 + 1] = vertices[i].y\n\t\t\t\tbreak\n\t\t}\n\t}\n\treturn earcut(contour, holeStarts)\n}\n\n\n/**\n * Solves a quadratic system of equations of the form\n *      a * x + b * y = c\n *      x² + y² = 1\n * This can be understood as the intersection of the unit circle with a line.\n *      => y = (c - a x) / b\n *      => x² + (c - a x)² / b² = 1\n *      => x² b² + c² - 2 c a x + a² x² = b²\n *      => (a² + b²) x² - 2 a c x + (c² - b²) = 0\n *\n * a * b + (b -c) * (b + c)\n */\nexport function intersectionUnitCircleLine(a: number, b: number, c: number): { x1: number, y1: number, x2: number, y2: number } {\n\tassertNumbers(a, b, c)\n\t// TODO: disambiguate on a < b\n\tconst term = sqrt(a * a + b * b - c * c)\n\treturn {\n\t\tx1: (a * c + b * term) / (a * a + b * b),\n\t\tx2: (a * c - b * term) / (a * a + b * b),\n\t\ty1: (b * c - a * term) / (a * a + b * b),\n\t\ty2: (b * c + a * term) / (a * a + b * b),\n\t}\n}\n\nexport function intersectionUnitCircleLine2(a: number, b: number, c: number): [number, number][] {\n\tassertNumbers(a, b, c)\n\t// TODO: disambiguate on a < b\n\t// cf. pqFormula\n\tconst termSqr = snap0(a * a + b * b - c * c)\n\tif (termSqr < 0) {\n\t\treturn []\n\t} else if (termSqr == 0) {\n\t\treturn [[(a * c) / (a * a + b * b),\n\t\t\t(b * c) / (a * a + b * b)]]\n\t} else {\n\t\tconst term = sqrt(termSqr)\n\t\treturn [[(a * c + b * term) / (a * a + b * b),\n\t\t\t(b * c - a * term) / (a * a + b * b)],\n\t\t\t[(a * c - b * term) / (a * a + b * b),\n\t\t\t\t(b * c + a * term) / (a * a + b * b)]]\n\t}\n}\n\nexport function intersectionCircleLine(a: number, b: number, c: number, r: number): { x1: number, x2: number, y1: number, y2: number } {\n\tassertNumbers(a, b, c, r)\n\tconst term = sqrt(r * r * (a * a + b * b) - c * c)\n\treturn {\n\t\tx1: (a * c + b * term) / (a * a + b * b),\n\t\tx2: (a * c - b * term) / (a * a + b * b),\n\t\ty1: (b * c - a * term) / (a * a + b * b),\n\t\ty2: (b * c + a * term) / (a * a + b * b),\n\t}\n}\n\n/**\n * Solves a quadratic system of equations of the form\n *      a * x + b * y = c\n *      x^2 - y^2 = 1\n * This can be understood as the intersection of the unit hyperbola with a line.\n *\n * @returns with x1 >= x2 and y1 <= y2\n * a * b + (b -c) * (b + c)\n */\nexport function intersectionUnitHyperbolaLine(a: number, b: number, c: number): { x1: number, y1: number, x2: number, y2: number } {\n\tassertNumbers(a, b, c)\n\tconst aa = a * a, bb = b * b, cc = c * c\n\t// TODO: disambiguate on a < b\n\t//var xTerm = sqrt(4*cc*aa-4*(bb-aa)*(-cc-bb))\n\tconst xTerm = 2 * sqrt(bb * cc + bb * bb - aa * bb)\n\tconst yTerm = sqrt(4 * cc * bb - 4 * (bb - aa) * (cc - aa))\n\treturn {\n\t\tx1: (-2 * a * c + xTerm) / 2 / (bb - aa),\n\t\tx2: (-2 * a * c - xTerm) / 2 / (bb - aa),\n\t\ty1: (2 * b * c - yTerm) / 2 / (bb - aa),\n\t\ty2: (2 * b * c + yTerm) / 2 / (bb - aa),\n\t}\n}\n\n\nexport function followAlgorithm2d(ic: MathFunctionR2R,\n\t\t\t\t\t\t\t\t  startP: V3,\n\t\t\t\t\t\t\t\t  stepLength: number = 0.5,\n\t\t\t\t\t\t\t\t  bounds: (s: number, t: number) => boolean,\n\t\t\t\t\t\t\t\t  endP: V3 = startP,\n\t\t\t\t\t\t\t\t  startTangent?: V3): { points: V3[], tangents: V3[] } {\n\tassertNumbers(stepLength, ic(0, 0))\n\tassertVectors(startP)\n\tif (!startTangent) {\n\t\tstartTangent = new V3(-ic.y(startP.x, startP.y), ic.x(startP.x, startP.y), 0).toLength(stepLength)\n\t}\n\tassertVectors(startTangent)\n\tconst points: V3[] = []\n\tconst tangents: V3[] = []\n\tassert(eq0(ic(startP.x, startP.y), 0.01), 'isZero(implicitCurve(startPoint.x, startPoint.y))')\n\tconst eps = stepLength / 32\n\tlet i = 0, p = startP, tangent = startTangent\n\tdo {\n\t\tpoints.push(p)\n\t\ttangents.push(tangent)\n\t\tconst searchStart = p.plus(tangent)\n\t\tassert(searchStart)\n\t\tconst newP = curvePointMF(ic, searchStart)\n\t\tconst dfpdx = ic.x(newP.x, newP.y), dfpdy = ic.y(newP.x, newP.y)\n\t\tconst newTangent = new V3(-dfpdy, dfpdx, 0).toLength(stepLength)\n\t\t//const reversedDir = p.minus(prevp).dot(tangent) < 0\n\t\tif (p.equals(newP)) {\n\t\t\tassertNever()\n\t\t}\n\t\t// check if we passed a singularity\n\t\tif (tangent.dot(newTangent) < 0) {\n\t\t\tconst singularity = newtonIterate2d(ic.x, ic.y, p.x, p.y)\n\t\t\tif (eq0(ic(singularity.x, singularity.y)) && singularity.distanceTo(p) < abs(stepLength)) {\n\t\t\t\t// end on this point\n\t\t\t\tpoints.push(singularity)\n\t\t\t\ttangents.push(p.to(singularity))\n\t\t\t\tbreak\n\t\t\t} else {\n\t\t\t\tthrow new Error()\n\t\t\t}\n\t\t}\n\t\tif (i > 4) {\n\t\t\tif (!bounds(p.x, p.y)) {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t// full loop or arrived at end\n\t\t\tif (p.distanceTo(endP) < stepLength) {\n\t\t\t\tpoints.push(endP)\n\t\t\t\tconst endTangent = new V3(-ic.y(endP.x, endP.y), ic.x(endP.x, endP.y), 0).toLength(stepLength)\n\t\t\t\ttangents.push(endTangent)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tassert(eq0(ic(newP.x, newP.y), NLA_PRECISION * 2), p, newP, searchStart)\n\t\ttangent = newTangent\n\t\tp = newP\n\t} while (++i < 1000)\n\tassert(i < 1000)\n\n\t//assert(points.length > 6)\n\treturn {points, tangents}\n}\n\nexport function followAlgorithm2dAdjustable(ic: MathFunctionR2R,\n\t\t\t\t\t\t\t\t\t\t\tstart: V3,\n\t\t\t\t\t\t\t\t\t\t\tstepLength: number = 0.5,\n\t\t\t\t\t\t\t\t\t\t\tbounds: (s: number, t: number) => boolean,\n\t\t\t\t\t\t\t\t\t\t\tendp: V3 = start): { points: V3[], tangents: V3[] } {\n\tassertNumbers(stepLength, ic(0, 0))\n\tassertVectors(start)\n\t//assert (!startDir || startDir instanceof V3)\n\tconst points = []\n\tconst tangents = []\n\tassert(eq0(ic(start.x, start.y), 0.01), 'isZero(implicitCurve(startPoint.x, startPoint.y))')\n\tconst eps = stepLength / 32\n\tlet p = start, prevp = p\n\tlet i = 0\n\tdo {\n\t\tconst dfpdx = ic.x(p.x, p.y), dfpdy = ic.y(p.x, p.y)\n\t\tconst dfpdxx = ic.xx(p.x, p.y), dfpdyy = ic.yy(p.x, p.y), dfpdxy = ic.xy(p.x, p.y)\n\t\tconst c2factor = abs((dfpdy ** 2 * dfpdxx - 2 * dfpdx * dfpdy * dfpdxy + dfpdx ** 2 * dfpdyy) /\n\t\t\t(dfpdx ** 2 + dfpdy ** 2) ** 2)\n\t\tconst c2 = new V3(dfpdx, dfpdy, 0).times(c2factor)\n\t\tconst s = 1 / 16 / c2.length()\n\t\tconst tangent = new V3(-dfpdy, dfpdx, 0).unit()\n\t\tconst reversedDir = p.minus(prevp).dot(tangent) < 0\n\t\tconst newPStart = p.plus(tangent.times(s).plus(c2.times(s ** 2 / 2)))\n\t\tpoints.push(p)\n\t\ttangents.push(tangent)\n\t\tprevp = p\n\t\tconst newP = curvePointMF(ic, newPStart)\n\t\tif (newP.equals(p)) {\n\t\t\tassertNever()\n\t\t}\n\t\tconsole.log(p.to(newP).length())\n\t\tp = newP\n\n\t\tassert(eq0(ic(p.x, p.y)))\n\t} while (i++ < 1000 && (i < 4 || prevp.distanceTo(endp) > stepLength) && bounds(p.x, p.y))\n\tassert(i != 1000)\n\t//assert(bounds(p.x, p.y))\n\tconst end = (i < 4 || prevp.distanceTo(endp) > stepLength) ? p : endp\n\tconst endTangent = new V3(-ic.y(end.x, end.y), ic.x(end.x, end.y), 0).toLength(stepLength)\n\tpoints.push(end)\n\ttangents.push(endTangent)\n\n\t//assert(points.length > 6)\n\t// TODO gleichmäßige Verteilung der Punkte\n\treturn {points, tangents}\n}\n\n// both curves must be in the same s-t coordinates for this to make sense\nexport function intersectionICurveICurve(iCurve1: (s: number, t: number) => number,\n\t\t\t\t\t\t\t\t\t\t startParams1: V3,\n\t\t\t\t\t\t\t\t\t\t endParams1: V3,\n\t\t\t\t\t\t\t\t\t\t startDir: V3,\n\t\t\t\t\t\t\t\t\t\t stepLength: number,\n\t\t\t\t\t\t\t\t\t\t iCurve2: (s: number, t: number) => number) {\n\n\tassertNumbers(stepLength, iCurve1(0, 0), iCurve2(0, 0))\n\tassertVectors(startParams1, endParams1)\n\tassert(!startDir || startDir instanceof V3)\n\tconst vertices = []\n\tassert(eq0(iCurve1(startParams1.x, startParams1.y)))\n\tstepLength = stepLength || 0.5\n\tconst eps = 1e-5\n\tlet p = startParams1, prevp = p // startDir ? p.minus(startDir) : p\n\tlet i = 0\n\twhile (i++ < 1000 && (i < 4 || p.distanceTo(endParams1) > 1.1 * stepLength)) {\n\t\tconst fp = iCurve1(p.x, p.y)\n\t\tconst dfpdx = (iCurve1(p.x + eps, p.y) - fp) / eps,\n\t\t\tdfpdy = (iCurve1(p.x, p.y + eps) - fp) / eps\n\t\tlet tangent = new V3(-dfpdy, dfpdx, 0).toLength(stepLength)\n\t\tif (p.minus(prevp).dot(tangent) < 0) tangent = tangent.negated()\n\t\tprevp = p\n\t\tp = curvePoint(iCurve1, p.plus(tangent))\n\t\tvertices.push(p)\n\t}\n\t// TODO gleichmäßige Verteilung der Punkte\n\treturn vertices\n\n}\n\nexport function intersectionICurveICurve2(iCurve1, loopPoints1, iCurve2) {\n\tlet p = loopPoints1[0], val = iCurve2(p.x, p.y), lastVal\n\tconst iss = []\n\tfor (let i = 0; i < loopPoints1.length; i++) {\n\t\tlastVal = val\n\t\tp = loopPoints1[i]\n\t\tval = iCurve2(p)\n\t\tif (val * lastVal <= 0) { // TODO < ?\n\t\t\tiss.push(newtonIterate2d(iCurve1, iCurve2, p.x, p.y))\n\t\t}\n\t}\n\treturn iss\n}\n\n//export function intersectionPCurveISurface(parametricCurve: ParametricCurve, searchStart: number, searchEnd: number, searchStep: number, implicitSurface) {\n//\tassertNumbers(searchStart, searchEnd, searchStep)\n//\tconst iss = []\n//\tlet val = implicitSurface(parametricCurve(searchStart)), lastVal\n//\tfor (let t = searchStart + searchStep; t <= searchEnd; t += searchStep) {\n//\t\tlastVal = val\n//\t\tval = implicitSurface(parametricCurve(t))\n//\t\tif (val * lastVal <= 0) {\n//\t\t\tiss.push(newtonIterate1d(t => implicitSurface(parametricCurve(t)), t))\n//\t\t}\n//\t}\n//\treturn iss\n//}\n\nexport function intersectionICurvePSurface(f0, f1, parametricSurface) {\n\n}\n\n\n//\n//function test2() {\n//    const ic: R2_R = (x, y) => sin(x+y)-cos(x*y)+1\n//    const dids: R2_R = (x, y) => y * sin(x * y) + cos(x + y)\n//    const didt: R2_R = (x, y) => x * sin(x * y) + cos(x + y)\n//    const ic2: R2_R = (x, y) => (3 * x ** 2 - y ** 2) ** 2 * y ** 2 - (x ** 2 + y ** 2) ** 4\n//    const di2ds: R2_R = (x, y) => 4* x* (9* x**2* y**2 - 3* y**4 - 2* (x**2 + y**2)**3)\n//    const di2dt: R2_R = (x, y) => 2 * y * (-4 * (x ** 2 + y ** 2) ** 3 + (3 * x ** 2 - y ** 2) ** 2 + 2 * y ** 2 * (y\n// ** 2 - 3 * x ** 2)) const start = V(-3.6339970071165784, 3.5625834844534974, 0) // curvePoint(ic, V(-4, 4))\n// assert(eq02(ic(start.x, start.y), 0.1)) const bounds = (s: number, t: number) => -5 <= s && s <= 5 && -5 <= t && t\n// <= 5 //const curves =  Curve.breakDownIC(ic, -5, 5, -5, 5, 0.1, 0.1, 0.05, dids, didt) const curves =\n// Curve.breakDownIC(ic2, {sMin: -5, sMax: 5, tMin: -5, tMax: 5}, 0.1, 0.1, 0.02, di2ds, di2dt) //const curves =\n// Curve.breakDownIC(cassini(1, 1.02), -5, 5, -5, 5, 0.1, 0.1, 0.02) //const curves = mkcurves(ic, start.x, start.y,\n// 0.05, dids, didt, bounds) .map(({points, tangents}, i) => { const curve = new ImplicitCurve(ic, points, tangents)\n// return Edge.forCurveAndTs(curve.translate(5, 0, 0.1 * i)) }) //checkDerivate(s => ic(s, 0), s => dids(s, 0), -5, 5,\n// 0) //checkDerivate(t => ic(0, t), t => dids(0, t), -5, 5, 0) console.log(curves.length) return curves  }\nexport function cassini(a: number, c: number): (x: number, y: number) => number {\n\treturn (x, y) => (x * x + y * y) * (x * x + y * y) - 2 * c * c * (x * x - y * y) - (a ** 4 - c ** 4)\n}\n\n/**\n * A function R² -> R with first and second derivatives.\n */\nexport interface MathFunctionR2R {\n\treadonly x: R2_R\n\treadonly y: R2_R\n\treadonly xx?: R2_R\n\treadonly xy?: R2_R\n\treadonly yy?: R2_R\n\n\t(s: number, t: number): number\n}\n\nexport namespace MathFunctionR2R {\n\texport function forNerdamer(expression: nerdamer.ExpressionParam, args: [string, string] = ['x', 'y']): MathFunctionR2R {\n\t\tconst ndf = nerdamer(expression)\n\t\tconst ndfs = nerdamer.diff(ndf, args[0])\n\t\tconst ndft = nerdamer.diff(ndf, args[1])\n\t\tconst f = ndf.buildFunction(args) as any\n\t\tf.x = ndfs.buildFunction(args)\n\t\tf.y = ndft.buildFunction(args)\n\t\tf.xx = nerdamer.diff(ndfs, args[0]).buildFunction(args)\n\t\tf.xy = nerdamer.diff(ndfs, args[1]).buildFunction(args)\n\t\tf.yy = nerdamer.diff(ndft, args[1]).buildFunction(args)\n\t\treturn f\n\t}\n\n\texport function nerdamerToR2_R(expression: nerdamer.Expression, args: [string, string] = ['x', 'y']) {\n\t\treturn expression.buildFunction(args)\n\t}\n\n\texport function forFFxFy(f: R2_R, fx: R2_R, fy: R2_R): MathFunctionR2R {\n\t\t(f as any).x = fx\n\t\t;(f as any).y = fy\n\t\treturn f as any\n\t}\n}\nexport const cas2 = cassini(0.9, 1.02)\n\n","import {assert} from 'ts3dutils'\nimport {getGlobalId} from './index'\n\nexport function doNotSerialize(target: any, key: PropertyKey) {\n\tconst map = target.__SERIALIZATION_BLACKLIST || (target.__SERIALIZATION_BLACKLIST = {})\n\tmap[key] = 'no'\n}\n\nexport class ClassSerializer {\n\tCLASS_NAMES = new Map<any, string>()\n\tNAME_CLASSES = new Map<string, any>()\n\tprivate updater: (v: any) => void\n\n\tconstructor() {\n\t\tthis.addClass('Object', Object)\n\t}\n\n\taddClass(name: string, clazz: any) {\n\t\tif (this.NAME_CLASSES.has(name)) {\n\t\t\tthrow new Error(name)\n\t\t}\n\t\tthis.NAME_CLASSES.set(name, clazz)\n\t\tthis.CLASS_NAMES.set(clazz, name)\n\t\treturn this\n\t}\n\n\taddNamespace(namespace: { [symbol: string]: any }, namespaceName?: string) {\n\t\tObject.keys(namespace).forEach(symbol => {\n\t\t\tconst o = namespace[symbol]\n\t\t\tif ('function' == typeof o && o.name) {\n\t\t\t\tthis.addClass((namespaceName ? namespaceName + '.' : '') + symbol, o)\n\t\t\t}\n\t\t})\n\t\treturn this\n\t}\n\n\tsetUpdater(f: (v: any) => void) {\n\t\tthis.updater = f\n\t\treturn this\n\t}\n\n\tserialize(v: any) {\n\t\treturn JSON.stringify(this.serializeObj(v))\n\t}\n\n\tserializeObj(v: any) {\n\t\tconst path: string[] = []\n\t\tconst gatherList = (v: any) => {\n\t\t\t//console.log(path.toString())\n\t\t\tif (undefined !== v && v.hasOwnProperty('constructor') && this.CLASS_NAMES.has(v.constructor)) {\n\t\t\t\t// do nothing, this is a class/function prototype\n\t\t\t} else if (Array.isArray(v)) {\n\t\t\t\tif (visited.has(v)) {\n\t\t\t\t\tif (!listMap.has(v)) {\n\t\t\t\t\t\tlistMap.set(v, resultList.length)\n\t\t\t\t\t\tresultList.push(v)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvisited.add(v)\n\t\t\t\t\tfor (let i = 0; i < v.length; i++) {\n\t\t\t\t\t\tpath.push('' + i)\n\t\t\t\t\t\tgatherList(v[i])\n\t\t\t\t\t\tpath.pop()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (undefined !== v && 'object' == typeof v) {\n\t\t\t\tif (visited.has(v)) {\n\t\t\t\t\tif (!listMap.has(v)) {\n\t\t\t\t\t\tlistMap.set(v, resultList.length)\n\t\t\t\t\t\tresultList.push(v)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tassert(!v.__noxTarget || !visited.has(v.__noxTarget))\n\t\t\t\t\tassert(!v.__noxProxy || !visited.has(v.__noxProxy))\n\t\t\t\t\tvisited.add(v)\n\t\t\t\t\tif (!v.getConstructorParameters) {\n\t\t\t\t\t\tfor (const key of Object.keys(v).sort()) {\n\t\t\t\t\t\t\tif (key == '__noxProxy' || key == '__noxTarget') continue\n\t\t\t\t\t\t\tif (!v.__SERIALIZATION_BLACKLIST || !v.__SERIALIZATION_BLACKLIST[key]) {\n\t\t\t\t\t\t\t\tpath.push(key)\n\t\t\t\t\t\t\t\tgatherList(v[key])\n\t\t\t\t\t\t\t\tpath.pop()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpath.push('proto')\n\t\t\t\t\tgatherList(Object.getPrototypeOf(v))\n\t\t\t\t\tpath.pop()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst transform = (v: any, allowLinks: boolean, first?: true): any => {\n\t\t\tif ('string' == typeof v || 'number' == typeof v || 'boolean' == typeof v || null === v) {\n\t\t\t\treturn v\n\t\t\t}\n\t\t\tif ('undefined' == typeof v) {\n\t\t\t\treturn {'#REF': -1}\n\t\t\t}\n\t\t\tif (v.hasOwnProperty('constructor') && this.CLASS_NAMES.has(v.constructor)) {\n\t\t\t\treturn {'#REF': this.CLASS_NAMES.get(v.constructor)}\n\t\t\t}\n\t\t\tlet index\n\t\t\tif (allowLinks && !first && undefined !== (index = listMap.get(v))) {\n\t\t\t\treturn {'#REF': index}\n\t\t\t}\n\n\t\t\tif (Array.isArray(v)) {\n\t\t\t\treturn v.map(x => transform(x, allowLinks))\n\t\t\t}\n\n\t\t\t//if (mobx && mobx.isObservableArray(v)) {\n\t\t\t//\tconst result = {'#PROTO': 'ObservableArray'} as any\n\t\t\t//\tv.forEach((val, i) => result[i] = transform(val))\n\t\t\t//\treturn result\n\t\t\t//}\n\n\t\t\tif ('object' == typeof v) {\n\t\t\t\tif (v.getConstructorParameters) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'#CONSTRUCTOR': this.CLASS_NAMES.get(v.constructor),\n\t\t\t\t\t\t'#ARGS': transform(v.getConstructorParameters(), false)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst result: any = {}\n\t\t\t\tif (Object.prototype !== Object.getPrototypeOf(v)) {\n\t\t\t\t\tresult['#PROTO'] = transform(Object.getPrototypeOf(v), allowLinks)\n\t\t\t\t}\n\t\t\t\tfor (const key of Object.keys(v)) {\n\t\t\t\t\tif (key == '__noxProxy' || key == '__noxTarget') continue\n\t\t\t\t\tif (!v.__SERIALIZATION_BLACKLIST || !v.__SERIALIZATION_BLACKLIST[key]) {\n\t\t\t\t\t\tresult[key] = transform(v[key], allowLinks)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result\n\t\t\t}\n\n\t\t\tthrow new Error('?' + typeof v + v.toString())\n\t\t}\n\n\t\tconst visited = new Set()\n\t\tconst listMap = new Map()\n\t\tlet resultList: {}[] = []\n\t\tlistMap.set(v, 0)\n\t\tresultList.push(v)\n\t\tgatherList(v)\n\n\t\tresultList = resultList.map(v => transform(v, true, true))\n\t\treturn resultList\n\t}\n\n\tunserialize(string: string) {\n\t\tlet depth = 0\n\t\tconst fixObject = (v: any, onReady: (x: any) => void): void => {\n\t\t\tdepth++\n\t\t\tif (depth > 100) throw new Error()\n\t\t\tif (v && v.constructor === Array) {\n\t\t\t\tonReady(v)\n\t\t\t\tfor (let i = 0; i < v.length; i++) {\n\t\t\t\t\tfixObject(v[i], x => v[i] = x)\n\t\t\t\t}\n\t\t\t} else if ('object' == typeof v && undefined != v) {\n\t\t\t\tif ('#CONSTRUCTOR' in v) {\n\t\t\t\t\tconst protoName = v['#CONSTRUCTOR'] as string\n\t\t\t\t\tconst proto = this.NAME_CLASSES.get(protoName as string)\n\t\t\t\t\tassert(proto, protoName + ' Missing ')\n\t\t\t\t\tlet args: any[]\n\t\t\t\t\tfixObject(v['#ARGS'], x => args = x)\n\t\t\t\t\tonReady(new proto(...args))\n\t\t\t\t} else if ('#REF' in v) {\n\t\t\t\t\tconst ref = v['#REF']\n\t\t\t\t\tif ('string' == typeof ref) {\n\t\t\t\t\t\tonReady(this.NAME_CLASSES.get(ref).prototype)\n\t\t\t\t\t} else if ('number' == typeof ref) {\n\t\t\t\t\t\tif (-1 == ref) {\n\t\t\t\t\t\t\tonReady(undefined)\n\t\t\t\t\t\t} else if (fixedObjects[ref]) {\n\t\t\t\t\t\t\tonReady(fixedObjects[ref])\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfixObject(tree[ref], x => onReady(fixedObjects[ref] = x))\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet result: any\n\t\t\t\t\tif ('#PROTO' in v) {\n\t\t\t\t\t\tfixObject(v['#PROTO'], x => {\n\t\t\t\t\t\t\tresult = Object.create(x)\n\t\t\t\t\t\t\tonReady(result)\n\t\t\t\t\t\t})\n\t\t\t\t\t} else {\n\t\t\t\t\t\tonReady(result = v)\n\t\t\t\t\t}\n\n\t\t\t\t\tconst keys = Object.keys(v)\n\t\t\t\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\t\t\t\t//if ('name' == keys[i]) console.log(result)\n\t\t\t\t\t\tif ('#PROTO' != keys[i]) {\n\t\t\t\t\t\t\tfixObject(v[keys[i]], x => result[keys[i]] = x)\n\t\t\t\t\t\t\t//Object.defineProperty(result, keys[i], {\n\t\t\t\t\t\t\t//\tvalue: fixObjects(v[keys[i]]),\n\t\t\t\t\t\t\t//\tenumerable: true,\n\t\t\t\t\t\t\t//\twritable: true,\n\t\t\t\t\t\t\t//\tconfigurable: true\n\t\t\t\t\t\t\t//})\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tObject.defineProperty(result, 'loadID', {value: getGlobalId(), enumerable: false, writable: false})\n\t\t\t\t\tthis.updater && this.updater(result)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tonReady(v)\n\t\t\t}\n\t\t\tdepth--\n\t\t}\n\n\t\t// const linkReferences = (v: any) => {\n\t\t// \tif (v && v.constructor === Array) {\n\t\t// \t\tfor (let i = 0; i < v.length; i++) {\n\t\t// \t\t\tv[i] = linkReferences(v[i])\n\t\t// \t\t}\n\t\t// \t\treturn v\n\t\t// \t} else if ('object' == typeof v && undefined != v) {\n\t\t// \t\tif ('#REF' in v) {\n\t\t// \t\t\treturn tree[v['#REF']]\n\t\t// \t\t} else {\n\t\t// \t\t\tconst keys = Object.keys(v)\n\t\t// \t\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t// \t\t\t\tv[keys[i]] = linkReferences(v[keys[i]])\n\t\t// \t\t\t}\n\t\t// \t\t\treturn v\n\t\t// \t\t}\n\t\t// \t} else {\n\t\t// \t\treturn v\n\t\t// \t}\n\t\t// }\n\n\t\tconst tree = JSON.parse(string)\n\t\t// console.log(tree)\n\t\tconst fixedObjects = new Array(tree.length)\n\t\tfixObject({'#REF': 0}, () => {})\n\t\t// console.log(tree)\n\t\t// linkReferences(tree)\n\t\t// console.log(tree)\n\t\treturn fixedObjects[0]\n\t}\n\n}\n","import {ShaderType} from 'tsgl'\n\nexport const fragmentShaderLighting: ShaderType<{ color: 'FLOAT_VEC3', camPos: 'FLOAT_VEC3' }> = `\n\tprecision highp float;\n\tuniform vec4 color;\n\tuniform vec3 camPos;\n\tvarying vec3 normal;\n\tvarying vec4 vPosition;\n\tvoid main() {\n\t\tvec3 normal1 = normalize(normal);\n\t\tvec3 lightPos = vec3(1000, 2000, 4000);\n\t\tvec3 lightDir = normalize(vPosition.xyz - lightPos);\n        vec3 reflectionDirection = reflect(lightDir, normal1);\n        vec3 eyeDirection = normalize(camPos.xyz-vPosition.xyz);\n        float uMaterialShininess = 256.0;\n\t\tfloat specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), uMaterialShininess);\n\t\tfloat lightIntensity = 0.6 + 0.2 * max(0.0, -dot(lightDir, normal1)) + 0.2*specularLightWeighting;\n\t\tgl_FragColor = vec4(vec3(color) * lightIntensity, 1);\n\t}\n`\nexport const vertexShaderLighting: ShaderType<{ color: 'FLOAT_VEC4' }> = `\n\tuniform mat4 LGL_ModelViewProjectionMatrix;\n\tuniform mat4 LGL_ModelViewMatrix;\n\tattribute vec4 LGL_Vertex;\n\tuniform mat3 LGL_NormalMatrix;\n\tattribute vec3 LGL_Normal;\n\tuniform vec4 color;\n\tvarying vec3 normal;\n\tvarying vec4 vPosition;\n\tvoid main() {\n\t\tgl_Position = LGL_ModelViewProjectionMatrix * LGL_Vertex;\n        vPosition = LGL_ModelViewMatrix * LGL_Vertex;\n\t\tnormal = normalize(LGL_NormalMatrix * LGL_Normal);\n\t}\n`\nexport const vertexShaderWaves: ShaderType<{ color: 'FLOAT_VEC3' }> = `\n\tuniform mat4 LGL_ModelViewProjectionMatrix;\n\tuniform mat4 LGL_ModelViewMatrix;\n\tattribute vec4 LGL_Vertex;\n\tuniform mat3 LGL_NormalMatrix;\n\tattribute vec3 LGL_Normal;\n\tuniform vec4 color;\n\tvarying vec3 normal;\n\tvarying vec4 vPosition;\n\tvoid main() {\n\t\tnormal = normalize(LGL_NormalMatrix * LGL_Normal);\n\t\tfloat offset = mod  (((LGL_Vertex.x + LGL_Vertex.y + LGL_Vertex.z) * 31.0), 20.0) - 10.0;\n\t\tvec4 modPos = LGL_Vertex + vec4(normal * offset, 0);\n\t\tgl_Position = LGL_ModelViewProjectionMatrix * modPos;\n        vPosition = LGL_ModelViewMatrix * modPos;\n\t}\n`\nexport const vertexShader: ShaderType<{}> = `\n\tvarying vec4 pos;\n\tvoid main() {\n\t\tpos = vec4(position,1.0);\n\t\tgl_Position = projectionMatrix *\n\t\t\tmodelViewMatrix *\n\t\t\tvec4(position,1.0);\n\t}\n`\nexport const fragmentShader: ShaderType<{ color: 'FLOAT_VEC3' }> = `\n\tprecision highp float;\n\tuniform vec3 color;\n\tvarying vec4 pos;\n\tvoid main() {\n\t\tfloat distance = pos.x * pos.x + pos.y * pos.y;\n\t\tif (distance <= 0.98) {\n\t\t\tgl_FragColor = vec4(color, 1.0);\n\t\t} else if (distance <= 1.0) {\n\t\t\tgl_FragColor = vec4(color, 0.5);\n\t\t} else {\n\t\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t\t}\n\t}\n\t/*\n\t precision mediump float;\n\n\t varying vec4 pos;\n\n\n\t void main() {\n\t float inside = pos.r * pos.r + pos.g * pos.g;\n\t if (inside <= 1) {\n\t gl_FragColor = vec4(0.0, 1.0, 0.0, 1.0);\n\t } else {\n\t gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t }\n\t }\n\t */\n`\nexport const vertexShaderBasic: ShaderType<{}> = `\n\tuniform mat4 LGL_ModelViewProjectionMatrix;\n\tattribute vec4 LGL_Vertex;\n\tvoid main() {\n\t\tgl_Position = LGL_ModelViewProjectionMatrix * LGL_Vertex;\n\t}\n`\nexport const vertexShaderColor: ShaderType<{}> = `\n\tuniform mat4 LGL_ModelViewProjectionMatrix;\n\tattribute vec4 LGL_Vertex;\n\tattribute vec4 color;\n\tvarying vec4 fragColor;\n\tvoid main() {\n\t\tgl_Position = LGL_ModelViewProjectionMatrix * LGL_Vertex;\n\t\tfragColor = color;\n\t}\n`\nexport const vertexShaderArc: ShaderType<{\n\tcolor: 'FLOAT_VEC4',\n\tstep: 'FLOAT',\n\toffset: 'FLOAT',\n\tradius: 'FLOAT',\n\twidth: 'FLOAT'\n}> = `\n\tuniform mat4 LGL_ModelViewProjectionMatrix;\n\tattribute vec4 LGL_Vertex;\n\tuniform float step, offset;\n\tuniform float radius, width;\n\tvoid main() {\n\t\tfloat r = radius;\n\t\tfloat t = offset + LGL_Vertex.x * step;\n\t\tfloat pRadius = r - LGL_Vertex.y * width;\n\t\tvec4 p = vec4(pRadius * cos(t), pRadius * sin(t), 0, 1);\n\t\tgl_Position = LGL_ModelViewProjectionMatrix * p;\n}\n`\nexport const vertexShaderConic3d: ShaderType<{\n\tstartT: 'FLOAT',\n\tendT: 'FLOAT',\n\tscale: 'FLOAT',\n\tcenter: 'FLOAT_VEC3',\n\tf1: 'FLOAT_VEC3',\n\tf2: 'FLOAT_VEC3',\n\tmode: 'INT'\n}> = `\n\tuniform mat4 LGL_ModelViewProjectionMatrix;\n\tattribute vec4 LGL_Vertex;\n\tuniform float startT, endT, scale;\n\tuniform vec3 center, f1, f2;\n\tuniform int mode;\n\tfloat sinh(float x) { return (exp(x) - exp(-x)) / 2.0; }\n\tfloat cosh(float x) { return (exp(x) + exp(-x)) / 2.0; }\n\tvoid main() {\n\t\tfloat t = startT + LGL_Vertex.x * (endT - startT);\n\n\t\tvec3 normal = normalize(cross(f1, f2));\n\n\t\tvec3 p, tangent;\n\t\tif (0 == mode) { // ellipse\n\t\t\tp = center + f1 * cos(t) + f2 * sin(t);\n\t\t\ttangent = f1 * -sin(t) + f2 * cos(t);\n\t\t}\n\t\tif (1 == mode) { // parabola\n\t\t\tp = center + f1 * t + f2 * t * t;\n\t\t\ttangent = f1 + f2 * t;\n\t\t}\n\t\tif (2 == mode) { // hyperbola\n\t\t\tp = center + f1 * cosh(t) + f2 * sinh(t);\n\t\t\ttangent = f1 * sinh(t) + f2 * cosh(t);\n\t\t}\n\t\tvec3 outDir = normalize(cross(normal, tangent));\n\t\tvec3 p2 = p + scale * (outDir * LGL_Vertex.y + normal * LGL_Vertex.z);\n\t\tgl_Position = LGL_ModelViewProjectionMatrix * vec4(p2, 1);\n\t}\n`\nexport const vertexShaderBezier: ShaderType<{\n\twidth: 'FLOAT',\n\tstartT: 'FLOAT',\n\tendT: 'FLOAT',\n\tp0: 'FLOAT_VEC3',\n\tp1: 'FLOAT_VEC3',\n\tp2: 'FLOAT_VEC3',\n\tp3: 'FLOAT_VEC3',\n}> = `\n    // calculates a bezier curve using LGL_Vertex.x as the (t) parameter of the curve\n\tuniform mat4 LGL_ModelViewProjectionMatrix;\n\tattribute vec4 LGL_Vertex;\n\tuniform float width, startT, endT;\n\tuniform vec3 p0, p1, p2, p3;\n\tvoid main() {\n\t\t// LGL_Vertex.y is in [0, 1]\n\t\tfloat t = startT + LGL_Vertex.x * (endT - startT), s = 1.0 - t;\n\t\tfloat c0 = s * s * s, c1 = 3.0 * s * s * t, c2 = 3.0 * s * t * t, c3 = t * t * t;\n\t\tvec3 pPos = p0 * c0 + p1 * c1 + p2 * c2 + p3 * c3;\n\t\tfloat c01 = 3.0 * s * s, c12 = 6.0 * s * t, c23 = 3.0 * t * t;\n\t\tvec3 pTangent = (p1 - p0) * c01 + (p2 - p1) * c12 + (p3 - p2) * c23;\n\t\tvec3 pNormal = normalize(vec3(pTangent.y, -pTangent.x, 0));\n\t\tvec4 p = vec4(pPos - LGL_Vertex.y * width * pNormal, 1);\n\t\tgl_Position = LGL_ModelViewProjectionMatrix * p;\n\t}\n`\nexport const vertexShaderBezier3d: ShaderType<{\n\tscale: 'FLOAT',\n\tstartT: 'FLOAT',\n\tendT: 'FLOAT',\n\tp0: 'FLOAT_VEC3',\n\tp1: 'FLOAT_VEC3',\n\tp2: 'FLOAT_VEC3',\n\tp3: 'FLOAT_VEC3',\n\tnormal: 'FLOAT_VEC3',\n}> = `\n    // calculates a bezier curve using LGL_Vertex.x as the (t) parameter of the curve\n\tuniform float scale, startT, endT;\n\tuniform vec3 ps[4];\n\tuniform vec3 p0, p1, p2, p3, normal;\n\tuniform mat4 LGL_ModelViewProjectionMatrix;\n\tattribute vec4 LGL_Vertex;\n\tvoid main() {\n\t\t// LGL_Vertex.y is in [0, 1]\n\t\tvec3 p5 = ps[0];\n\t\tfloat t = startT + LGL_Vertex.x * (endT - startT), s = 1.0 - t;\n\t\tfloat c0 = s * s * s, c1 = 3.0 * s * s * t, c2 = 3.0 * s * t * t, c3 = t * t * t;\n\t\tvec3 p = p0 * c0 + p1 * c1 + p2 * c2 + p3 * c3;\n\t\tfloat c01 = 3.0 * s * s, c12 = 6.0 * s * t, c23 = 3.0 * t * t;\n\t\tvec3 pTangent = (p1 - p0) * c01 + (p2 - p1) * c12 + (p3 - p2) * c23;\n\t\tvec3 outDir = normalize(cross(normal, pTangent));\n\t\tvec3 correctNormal = normalize(cross(pTangent, outDir));\n\t\tvec3 p2 = p + scale * (outDir * LGL_Vertex.y + correctNormal * LGL_Vertex.z);\n\t\tgl_Position = LGL_ModelViewProjectionMatrix * vec4(p2, 1);\n\t}\n`\nexport const vertexShaderGeneric: ShaderType<{ scale: 'FLOAT' }> = `\n\tuniform float scale;\n\tuniform mat4 LGL_ModelViewProjectionMatrix;\n\tattribute vec4 LGL_Vertex;\n\tuniform mat3 LGL_NormalMatrix;\n\tattribute vec3 LGL_Normal;\n\tvoid main() {\n\t\tvec3 normal = normalize(LGL_NormalMatrix * LGL_Normal);\n\t\tvec4 vertexPos = LGL_Vertex + vec4(normal * scale, 0);\n\t\tgl_Position = LGL_ModelViewProjectionMatrix * vertexPos;\n\t}\n`\nexport const vertexShaderRing: ShaderType<{ step: 'FLOAT', innerRadius: 'FLOAT', outerRadius: 'FLOAT' }> = `\n\t#define M_PI 3.1415926535897932384626433832795\n\tuniform float step;\n\tuniform float innerRadius, outerRadius;\n\tattribute float index;\n\tuniform mat4 LGL_ModelViewProjectionMatrix;\n\tattribute vec4 LGL_Vertex;\n\tvoid main() {\n\t\tgl_Position = LGL_ModelViewProjectionMatrix * vec4(index, index, index, 1);\n\t\tfloat id = atan(LGL_Vertex.x, LGL_Vertex.y) / M_PI  * 32.0;\n\t\tfloat radius = mod(id, 2.0) < 1.0 ? outerRadius : innerRadius;\n\t\tgl_Position = LGL_ModelViewProjectionMatrix * vec4(radius * cos(index * step), radius * sin(index * step), 0, 1);\n\t}\n`\nexport const fragmentShaderColor: ShaderType<{ color: 'FLOAT_VEC4' }> = `\n\tprecision highp float;\n\tuniform vec4 color;\n\tvoid main() {\n\t\tgl_FragColor = color;\n\t}\n`\nexport const fragmentShaderVaryingColor: ShaderType<{}> = `\n\tprecision highp float;\n\tvarying vec4 fragColor;\n\tvoid main() {\n\t\tgl_FragColor = fragColor;\n\t}\n`\nexport const fragmentShaderColorHighlight: ShaderType<{}> = `\n\tprecision highp float;\n\tuniform vec4 color;\n\tvoid main() {\n\t\tfloat diagonal = (gl_FragCoord.x + 2.0 * gl_FragCoord.y);\n\t\tif (mod(diagonal, 50.0) > 40.0) { // mod(diagonal, 2.0) > 1.0\n\t\t\tdiscard;\n\t\t\t//gl_FragColor = color + vec4(0.2,0.2,0.2,0);\n\t\t} else {\n\t\t\tgl_FragColor = color - vec4(0.2,0.2,0.2,0);\n\t\t}\n\t}\n`\nexport const vertexShaderTexture: ShaderType<{}> = `\n\tvarying vec2 texturePos;\n\tattribute vec4 LGL_Vertex;\n\tuniform mat4 LGL_ModelViewProjectionMatrix;\n\tvoid main() {\n\t\ttexturePos = LGL_Vertex.xy;\n\t\tgl_Position = LGL_ModelViewProjectionMatrix * LGL_Vertex;\n\t}\n`\nexport const fragmentShaderTextureColor: ShaderType<{}> = `\n\tprecision highp float;\n\tvarying vec2 texturePos;\n\tuniform vec4 color;\n\tuniform sampler2D texture;\n\tvoid main() {\n\t\tgl_FragColor = texture2D(texture, texturePos) * color;\n\t}\n`\nexport const fragmentShaderTexture: ShaderType<{}> = `\n\tprecision highp float;\n\tvarying vec2 texturePos;\n\tuniform sampler2D texture;\n\tvoid main() {\n\t\tgl_FragColor = texture2D(texture, texturePos);\n\t}\n`","import chroma, {Color} from 'chroma-js'\nimport nerdamer from 'nerdamer'\nimport {addOwnProperties, arrayFromFunction, assert, DEG, int, M4, TAU, V, V3} from 'ts3dutils'\nimport {DRAW_MODES, GL_COLOR, GL_COLOR_BLACK, Mesh, Shader, TSGLContext} from 'tsgl'\n\nimport {\n\tB2, B2T, BezierCurve, Curve, curvePointMF, CustomPlane, Edge, EllipseCurve, Face, followAlgorithm2d, HyperbolaCurve,\n\tImplicitCurve, L3, MathFunctionR2R, P3, ParabolaCurve, PICurve, SemiCylinderSurface, SemiEllipseCurve,\n\tSemiEllipsoidSurface,\n} from './index'\nimport * as shaders from './shaders'\n\nconst {pow, sign} = Math\n\nexport function parseGetParams(str: string) {\n\tconst result: { [key: string]: string } = {}\n\tstr\n\t\t.split('&')\n\t\t.forEach(function (item) {\n\t\t\tconst splitIndex = item.indexOf('=')\n\t\t\tif (-1 == splitIndex) {\n\t\t\t\tresult[item] = item\n\t\t\t} else {\n\t\t\t\tresult[item.substr(0, splitIndex)] = decodeURI(item.substr(splitIndex + 1))\n\t\t\t}\n\t\t})\n\treturn result\n}\n\nexport const COLORS = {\n\tRD_FILL: chroma('#9EDBF9'),\n\tRD_STROKE: chroma('#77B0E0'),\n\tTS_FILL: chroma('#D19FE3'),\n\tTS_STROKE: chroma('#A76BC2'),\n\tPP_FILL: chroma('#F3B6CF'),\n\tPP_STROKE: chroma('#EB81B4'),\n}\nexport interface BREPGLContext extends TSGLContext {}\nexport class BREPGLContext {\n\tshaders: SHADERS_TYPE\n\n\tcachedMeshes: WeakMap<any, Mesh & { TRIANGLES: int[], normals: V3[] }> = new WeakMap()\n\n\tconstructor(gl: BREPGLContext) {\n\t\tthis.shaders = initShaders(gl)\n\t\tinitMeshes(this.meshes = {}, gl)\n\t}\n\n\tstatic create(gl: TSGLContext) {\n\t\taddOwnProperties(gl, BREPGLContext.prototype)\n\t\taddOwnProperties(gl, new BREPGLContext(gl as BREPGLContext))\n\t\treturn gl as BREPGLContext\n\t}\n\n\tdrawPoint(p: V3, color: GL_COLOR = GL_COLOR_BLACK, size = 5) {\n\t\tthis.pushMatrix()\n\t\tthis.translate(p)\n\t\tthis.scale(size, size, size)\n\t\tthis.shaders.singleColor.uniforms({color: color}).draw(this.meshes.sphere1)\n\t\tthis.popMatrix()\n\t}\n\n\tdrawEdge(edge: Edge, color: GL_COLOR = GL_COLOR_BLACK, width = 2) {\n\t\tCURVE_PAINTERS[edge.curve.constructor.name](this, edge.curve, color, edge.minT, edge.maxT, width)\n\t}\n\n\tdrawCurve(curve: Curve, color: GL_COLOR = GL_COLOR_BLACK, width = 2, tStart: number, tEnd: number) {\n\t\tCURVE_PAINTERS[curve.constructor.name](this, curve, color, tStart, tEnd, width)\n\t}\n\n\tdrawVector(vector: V3, anchor: V3, color: GL_COLOR = GL_COLOR_BLACK, size = 1) {\n\t\tthis.pushMatrix()\n\n\t\tconst vT = vector.getPerpendicular().unit()\n\t\tthis.multMatrix(M4.forSys(vector, vT, vector.cross(vT).unit(), anchor))\n\t\t1 != size && this.scale(size, size, size)\n\t\tthis.shaders.singleColor.uniforms({\n\t\t\tcolor: color,\n\t\t}).draw(this.meshes.vector)\n\n\t\tthis.popMatrix()\n\t}\n\n\tdrawVectors(drVs: { dir1: V3, anchor: V3, color: GL_COLOR }[]) {\n\t\tthis.drawVector(V3.X, V3.O, chroma('red').gl(), undefined)\n\t\tthis.drawVector(V3.Y, V3.O, chroma('green').gl(), undefined)\n\t\tthis.drawVector(V3.Z, V3.O, chroma('blue').gl(), undefined)\n\n\t\tdrVs.forEach(vi => this.drawVector(vi.dir1, vi.anchor, vi.color, undefined))\n\t}\n\n\tdrawPlane(customPlane: CustomPlane, color: GL_COLOR, dotted: boolean = false) {\n\t\tthis.pushMatrix()\n\t\tthis.multMatrix(M4.forSys(customPlane.right, customPlane.up, customPlane.normal1))\n\t\tthis.translate(customPlane.sMin, customPlane.tMin, customPlane.w)\n\t\tthis.scale(customPlane.sMax - customPlane.sMin, customPlane.tMax - customPlane.tMin, 1)\n\n\t\tconst mesh = dotted ? this.meshes.xyDottedLinePlane : this.meshes.xyLinePlane\n\t\tthis.shaders.singleColor.uniforms({color: color}).draw(mesh, DRAW_MODES.LINES)\n\n\t\tthis.popMatrix()\n\t}\n}\n\nfunction conicPainter(mode: 0 | 1 | 2, gl: BREPGLContext, ellipse: SemiEllipseCurve, color: GL_COLOR, startT: number, endT: number, width = 2) {\n\tgl.shaders.ellipse3d.uniforms({\n\t\tf1: ellipse.f1,\n\t\tf2: ellipse.f2,\n\t\tcenter: ellipse.center,\n\t\tcolor: color,\n\t\tstartT: startT,\n\t\tendT: endT,\n\t\tscale: width,\n\t\tmode: mode,\n\t}).draw(gl.meshes.pipe)\n}\n\nexport const CURVE_PAINTERS: { [curveConstructorName: string]: (gl: BREPGLContext, curve: Curve, color: GL_COLOR, startT: number, endT: number, width: number) => void } = {\n\t[SemiEllipseCurve.name]: conicPainter.bind(undefined, 0),\n\t[EllipseCurve.name]: conicPainter.bind(undefined, 0),\n\t[ParabolaCurve.name]: conicPainter.bind(undefined, 1),\n\t[HyperbolaCurve.name]: conicPainter.bind(undefined, 2),\n\t[ImplicitCurve.name](gl, curve: ImplicitCurve, color, startT, endT, width = 2, normal = V3.Z) {\n\t\tlet mesh = gl.cachedMeshes.get(curve)\n\t\tif (!mesh) {\n\t\t\tmesh = new Mesh()\n\t\t\t\t.addIndexBuffer('TRIANGLES')\n\t\t\t\t.addVertexBuffer('normals', 'LGL_Normal')\n\t\t\tcurve.addToMesh(mesh)\n\t\t\tmesh.compile()\n\t\t\t//mesh=Mesh.sphere(2)\n\t\t\tgl.cachedMeshes.set(curve, mesh)\n\t\t}\n\t\t// TODO: draw only part\n\t\t//startT: startT,\n\t\t//\tendT: endT,\n\t\tgl.shaders.generic3d.uniforms({\n\t\t\tcolor: color,\n\t\t\tscale: width,\n\t\t}).draw(mesh)\n\t},\n\t[BezierCurve.name](gl, curve: BezierCurve, color, startT, endT, width = 2, normal = V3.Z) {\n\t\tgl.shaders.bezier3d.uniforms({\n\t\t\tp0: curve.p0,\n\t\t\tp1: curve.p1,\n\t\t\tp2: curve.p2,\n\t\t\tp3: curve.p3,\n\t\t\tcolor: color,\n\t\t\tstartT: startT,\n\t\t\tendT: endT,\n\t\t\tscale: width,\n\t\t\tnormal: normal,\n\t\t}).draw(gl.meshes.pipe)\n\t},\n\t[L3.name](gl, curve: L3, color, startT, endT, width = 2, normal = V3.Z) {\n\t\tgl.pushMatrix()\n\t\tconst a = curve.at(startT), b = curve.at(endT)\n\t\tconst ab = b.minus(a), abT = ab.getPerpendicular().unit()\n\t\tconst m = M4.forSys(ab, abT, ab.cross(abT).unit(), a)\n\t\tgl.multMatrix(m)\n\t\tgl.scale(1, width, width)\n\t\tgl.shaders.singleColor.uniforms({\n\t\t\tcolor: color, // TODO: error checking\n\t\t}).draw(gl.meshes.pipe)\n\n\t\tgl.popMatrix()\n\t},\n}\nCURVE_PAINTERS[PICurve.name] = CURVE_PAINTERS[ImplicitCurve.name]\n\n\nexport function initMeshes(_meshes: { [name: string]: Mesh }, _gl: BREPGLContext) {\n\t_gl.makeCurrent()\n\t_meshes.sphere1 = Mesh.sphere(2)\n\t_meshes.segment = Mesh.plane({startY: -0.5, height: 1, detailX: 128})\n\t_meshes.text = Mesh.plane()\n\t_meshes.vector = Mesh.rotation([V3.O, V(0, 0.05, 0), V(0.8, 0.05), V(0.8, 0.1), V(1, 0)], L3.X, TAU, 16, true)\n\t_meshes.pipe = Mesh.rotation(arrayFromFunction(128, i => new V3(i / 127, -0.5, 0)), L3.X, TAU, 8, true)\n\t_meshes.xyLinePlane = Mesh.plane()\n\t_meshes.xyDottedLinePlane = makeDottedLinePlane()\n}\n\nexport function initShaders(_gl: TSGLContext) {\n\t_gl.makeCurrent()\n\treturn {\n\t\tsingleColor: Shader.create(shaders.vertexShaderBasic, shaders.fragmentShaderColor),\n\t\tmultiColor: Shader.create(shaders.vertexShaderColor, shaders.fragmentShaderVaryingColor),\n\t\tsingleColorHighlight: Shader.create(shaders.vertexShaderBasic, shaders.fragmentShaderColorHighlight),\n\t\ttextureColor: Shader.create(shaders.vertexShaderTexture, shaders.fragmentShaderTextureColor),\n\t\tarc: Shader.create(shaders.vertexShaderRing, shaders.fragmentShaderColor),\n\t\tarc2: Shader.create(shaders.vertexShaderArc, shaders.fragmentShaderColor),\n\t\tellipse3d: Shader.create(shaders.vertexShaderConic3d, shaders.fragmentShaderColor),\n\t\tgeneric3d: Shader.create(shaders.vertexShaderGeneric, shaders.fragmentShaderColor),\n\t\tbezier3d: Shader.create(shaders.vertexShaderBezier3d, shaders.fragmentShaderColor),\n\t\tbezier: Shader.create(shaders.vertexShaderBezier, shaders.fragmentShaderColor),\n\t\tlighting: Shader.create(shaders.vertexShaderLighting, shaders.fragmentShaderLighting),\n\t\twaves: Shader.create(shaders.vertexShaderWaves, shaders.fragmentShaderLighting),\n\t}\n}\n\n\nfunction makeDottedLinePlane(count: int = 128) {\n\tconst mesh = new Mesh().addIndexBuffer('LINES')\n\tconst OXvertices = arrayFromFunction(count, i => new V3(i / count, 0, 0))\n\tmesh.vertices.push(...OXvertices)\n\tmesh.vertices.push(...M4.forSys(V3.Y, V3.O, V3.O, V3.X).transformedPoints(OXvertices))\n\tmesh.vertices.push(...M4.forSys(V3.X.negated(), V3.O, V3.O, new V3(1, 1, 0)).transformedPoints(OXvertices))\n\tmesh.vertices.push(...M4.forSys(V3.Y.negated(), V3.O, V3.O, V3.Y).transformedPoints(OXvertices))\n\tmesh.LINES = arrayFromFunction(count * 4, i => i - (i >= count * 2 ? 1 : 0))\n\tmesh.compile()\n\treturn mesh\n}\n\nexport type Eye = { pos: V3, focus: V3, up: V3, zoomFactor: number }\nexport function initNavigationEvents(_gl: BREPGLContext, eye: Eye, paintScreen: () => void) {\n\tconst canvas=_gl.canvas\n\tlet lastPos: V3 = V3.O\n\t//_gl.onmousedown.push((e) => {\n\t//\te.preventDefault()\n\t//\te.stopPropagation()\n\t//})\n\t//_gl.onmouseup.push((e) => {\n\t//\te.preventDefault()\n\t//\te.stopPropagation()\n\t//})\n\tcanvas.addEventListener('mousemove', e => {\n\t\tconst pagePos = V(e.pageX, e.pageY)\n\t\tconst delta = lastPos.to(pagePos)\n\t\t//noinspection JSBitwiseOperatorUsage\n\t\tif (e.buttons & 4) {\n\t\t\t// pan\n\t\t\tconst moveCamera = V(-delta.x * 2 / _gl.canvas.width, delta.y * 2 / _gl.canvas.height)\n\t\t\tconst inverseProjectionMatrix = _gl.projectionMatrix.inversed()\n\t\t\tconst worldMoveCamera = inverseProjectionMatrix.transformVector(moveCamera)\n\t\t\teye.pos = eye.pos.plus(worldMoveCamera)\n\t\t\teye.focus = eye.focus.plus(worldMoveCamera)\n\t\t\tsetupCamera(eye, _gl)\n\t\t\tpaintScreen()\n\t\t}\n\t\t// scene rotation\n\t\t//noinspection JSBitwiseOperatorUsage\n\t\tif (e.buttons & 2) {\n\t\t\tconst rotateLR = -delta.x / 6.0 * DEG\n\t\t\tconst rotateUD = -delta.y / 6.0 * DEG\n\t\t\t// rotate\n\t\t\tlet matrix = M4.rotateLine(eye.focus, eye.up, rotateLR)\n\t\t\t//let horizontalRotationAxis = focus.minus(pos).cross(up)\n\t\t\tconst horizontalRotationAxis = eye.up.cross(eye.pos.minus(eye.focus))\n\t\t\tmatrix = matrix.times(M4.rotateLine(eye.focus, horizontalRotationAxis, rotateUD))\n\t\t\teye.pos = matrix.transformPoint(eye.pos)\n\t\t\teye.up = matrix.transformVector(eye.up)\n\n\t\t\tsetupCamera(eye, _gl)\n\t\t\tpaintScreen()\n\t\t}\n\t\tlastPos = pagePos\n\t})\n\tcanvas.addEventListener('wheel', function (e) {\n\t\t// zoom\n\t\tconst wheelY = -sign(e.deltaY) * 2\n\t\t// console.log(e.deltaY, e.deltaX)\n\t\teye.zoomFactor *= pow(0.9, -wheelY)\n\t\tconst mouseCoordsOnCanvas = getPosOnTarget(e)\n\t\tconst mousePosFrustrum = V(mouseCoordsOnCanvas.x * 2 / _gl.canvas.offsetWidth - 1, -mouseCoordsOnCanvas.y * 2 / _gl.canvas.offsetHeight + 1, 0)\n\t\tconst moveCamera = mousePosFrustrum.times(1 - 1 / pow(0.9, -wheelY))\n\t\tconst inverseProjectionMatrix = _gl.projectionMatrix.inversed()\n\t\tconst worldMoveCamera = inverseProjectionMatrix.transformVector(moveCamera)\n\t\t//console.log(\"moveCamera\", moveCamera)\n\t\t//console.log(\"worldMoveCamera\", worldMoveCamera)\n\t\teye.pos = eye.pos.plus(worldMoveCamera)\n\t\teye.focus = eye.focus.plus(worldMoveCamera)\n\n\t\t// tilt\n\t\tconst mousePosWC = inverseProjectionMatrix.transformPoint(mousePosFrustrum)\n\t\tconst tiltMatrix = M4.rotateLine(mousePosWC, eye.pos.to(eye.focus), -sign(e.deltaX) * 10 * DEG)\n\t\teye.up = tiltMatrix.transformVector(eye.up)\n\t\teye.pos = tiltMatrix.transformPoint(eye.pos)\n\t\teye.focus = tiltMatrix.transformPoint(eye.focus)\n\t\tsetupCamera(eye, _gl)\n\t\tpaintScreen()\n\t\te.preventDefault()\n\t})\n}\n/**\n * Transforms position on the screen into a line in world coordinates.\n */\nexport function getMouseLine(pos: { x: number; y: number }, _gl: TSGLContext): L3 {\n\tconst ndc1 = V(pos.x * 2 / _gl.canvas.width - 1, -pos.y * 2 / _gl.canvas.height + 1, 0)\n\tconst ndc2 = V(pos.x * 2 / _gl.canvas.width - 1, -pos.y * 2 / _gl.canvas.height + 1, 1)\n\t//console.log(ndc)\n\tconst inverseProjectionMatrix = _gl.projectionMatrix.inversed()\n\tconst s = inverseProjectionMatrix.transformPoint(ndc1)\n\tconst dir = inverseProjectionMatrix.transformPoint(ndc2).minus(s)\n\treturn L3.anchorDirection(s, dir)\n}\nexport function getPosOnTarget(e: MouseEvent) {\n\tconst target = e.target as HTMLElement\n\tconst targetRect = target.getBoundingClientRect()\n\tconst mouseCoordsOnElement = {\n\t\tx: e.clientX - targetRect.left,\n\t\ty: e.clientY - targetRect.top}\n\treturn mouseCoordsOnElement\n}\n\nexport function setupCamera(_eye: Eye, _gl: TSGLContext) {\n\tconst {pos, focus, up, zoomFactor} = _eye\n\t//console.log(\"pos\", pos.$, \"focus\", focus.$, \"up\", up.$)\n\t_gl.matrixMode(_gl.PROJECTION)\n\t_gl.loadIdentity()\n\t//_gl.perspective(70, _gl.canvas.width / _gl.canvas.height, 0.1, 1000);\n\tconst lr = _gl.canvas.width / 2 / zoomFactor\n\tconst bt = _gl.canvas.height / 2 / zoomFactor\n\t_gl.ortho(-lr, lr, -bt, bt, -1e4, 1e4)\n\t_gl.lookAt(pos, focus, up)\n\t_gl.matrixMode(_gl.MODELVIEW)\n\tcameraChangeListeners.forEach(l => l(_eye))\n}\nexport const cameraChangeListeners: ((eye: Eye) => void)[] = []\n\nexport const SHADERS_TYPE_VAR = (false as true) && initShaders(0 as any)\nexport type SHADERS_TYPE = typeof SHADERS_TYPE_VAR\n// let shaders: typeof SHADERS_TYPE_VAR\n// declare let a: B2, b: B2, c: B2, d: B2, edges: Edge[] = [], hovering: any,\n// \t, normallines: boolean = false, b2s: B2[] = []\n// const"],"names":["abs","assert","L3","PlaneSurface","ceil","floor","PI","cos","sin","min","max","tan","sign","sqrt","pow","atan2","round","PICurve","opentype.load","opentype.Path","CustomMap","CustomSet","OUTSIDE","shaders.vertexShaderBasic","shaders.fragmentShaderColor","shaders.vertexShaderColor","shaders.fragmentShaderVaryingColor","shaders.fragmentShaderColorHighlight","shaders.vertexShaderTexture","shaders.fragmentShaderTextureColor","shaders.vertexShaderRing","shaders.vertexShaderArc","shaders.vertexShaderConic3d","shaders.vertexShaderGeneric","shaders.vertexShaderBezier3d","shaders.vertexShaderBezier","shaders.vertexShaderLighting","shaders.fragmentShaderLighting","shaders.vertexShaderWaves"],"mappings":"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"}